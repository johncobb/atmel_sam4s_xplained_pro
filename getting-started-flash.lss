
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008454  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  00408454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000654  200001e8  0040863c  000201e8  2**2
                  ALLOC
  3 .stack        00003004  2000083c  00408c90  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015882  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003751  00000000  00000000  00035b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005c60  00000000  00000000  00039253  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ea0  00000000  00000000  0003eeb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d10  00000000  00000000  0003fd53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000182f5  00000000  00000000  00040a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013be3  00000000  00000000  00058d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005578e  00000000  00000000  0006c93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000032e0  00000000  00000000  000c20cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003840 	.word	0x20003840
  400004:	004022bd 	.word	0x004022bd
  400008:	004022b9 	.word	0x004022b9
  40000c:	004022b9 	.word	0x004022b9
  400010:	004022b9 	.word	0x004022b9
  400014:	004022b9 	.word	0x004022b9
  400018:	004022b9 	.word	0x004022b9
	...
  40002c:	004022b9 	.word	0x004022b9
  400030:	004022b9 	.word	0x004022b9
  400034:	00000000 	.word	0x00000000
  400038:	004022b9 	.word	0x004022b9
  40003c:	00400569 	.word	0x00400569
  400040:	004022b9 	.word	0x004022b9
  400044:	004022b9 	.word	0x004022b9
  400048:	004022b9 	.word	0x004022b9
  40004c:	004022b9 	.word	0x004022b9
  400050:	004022b9 	.word	0x004022b9
  400054:	004022b9 	.word	0x004022b9
  400058:	004022b9 	.word	0x004022b9
  40005c:	004022b9 	.word	0x004022b9
  400060:	004022b9 	.word	0x004022b9
  400064:	004022b9 	.word	0x004022b9
  400068:	00000000 	.word	0x00000000
  40006c:	00401ef9 	.word	0x00401ef9
  400070:	00401f09 	.word	0x00401f09
  400074:	00401f19 	.word	0x00401f19
  400078:	004022b9 	.word	0x004022b9
  40007c:	004022b9 	.word	0x004022b9
	...
  400088:	004022b9 	.word	0x004022b9
  40008c:	004022b9 	.word	0x004022b9
  400090:	004022b9 	.word	0x004022b9
  400094:	004022b9 	.word	0x004022b9
  400098:	004022b9 	.word	0x004022b9
  40009c:	004022b9 	.word	0x004022b9
  4000a0:	004022b9 	.word	0x004022b9
  4000a4:	004022b9 	.word	0x004022b9
  4000a8:	004022b9 	.word	0x004022b9
  4000ac:	004022b9 	.word	0x004022b9
  4000b0:	004022b9 	.word	0x004022b9
  4000b4:	004022b9 	.word	0x004022b9
  4000b8:	004022b9 	.word	0x004022b9
  4000bc:	004022b9 	.word	0x004022b9
  4000c0:	004022b9 	.word	0x004022b9
  4000c4:	004022b9 	.word	0x004022b9
  4000c8:	004022b9 	.word	0x004022b9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e8 	.word	0x200001e8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00408454 	.word	0x00408454

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001ec 	.word	0x200001ec
  40011c:	00408454 	.word	0x00408454
  400120:	00408454 	.word	0x00408454
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f002 f9a4 	bl	402478 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 ff2c 	bl	401f90 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 ff54 	bl	401fe4 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 ff58 	bl	401ff4 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 ff5b 	bl	402004 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 fee8 	bl	401f28 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f002 f904 	bl	402364 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f002 f98b 	bl	402478 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000504 	.word	0x20000504
  4001a8:	200004fc 	.word	0x200004fc

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	20000500 	.word	0x20000500
  4001f8:	20000504 	.word	0x20000504

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 ff54 	bl	4020c0 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 ff49 	bl	4020c0 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 ff52 	bl	4020e8 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 ff45 	bl	4020e8 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 ff10 	bl	4020b0 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 ff04 	bl	4020b0 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 ff0a 	bl	4020d4 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 fefe 	bl	4020d4 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002f8:	b099      	sub	sp, #100	; 0x64
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f001 faad 	bl	40185c <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 fe86 	bl	402014 <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 fe83 	bl	402014 <pmc_enable_periph_clk>
    config_init();
  40030e:	f000 f911 	bl	400534 <config_init>
    cph_millis_init();
  400312:	f000 f931 	bl	400578 <cph_millis_init>
    cli_init();
  400316:	f000 f959 	bl	4005cc <cli_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40031a:	2009      	movs	r0, #9
  40031c:	f001 fe7a 	bl	402014 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400320:	4c6c      	ldr	r4, [pc, #432]	; (4004d4 <main+0x1e0>)
  400322:	4b6d      	ldr	r3, [pc, #436]	; (4004d8 <main+0x1e4>)
  400324:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400326:	4a6d      	ldr	r2, [pc, #436]	; (4004dc <main+0x1e8>)
  400328:	4b6d      	ldr	r3, [pc, #436]	; (4004e0 <main+0x1ec>)
  40032a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40032c:	4a6d      	ldr	r2, [pc, #436]	; (4004e4 <main+0x1f0>)
  40032e:	4b6e      	ldr	r3, [pc, #440]	; (4004e8 <main+0x1f4>)
  400330:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400332:	4b6e      	ldr	r3, [pc, #440]	; (4004ec <main+0x1f8>)
  400334:	9315      	str	r3, [sp, #84]	; 0x54
	uart_settings.ul_baudrate = opt->baudrate;
  400336:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40033a:	9316      	str	r3, [sp, #88]	; 0x58
	uart_settings.ul_mode = opt->paritytype;
  40033c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400340:	9317      	str	r3, [sp, #92]	; 0x5c
  400342:	2009      	movs	r0, #9
  400344:	f001 fe66 	bl	402014 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400348:	a915      	add	r1, sp, #84	; 0x54
  40034a:	4620      	mov	r0, r4
  40034c:	f001 fe90 	bl	402070 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400350:	4c67      	ldr	r4, [pc, #412]	; (4004f0 <main+0x1fc>)
  400352:	6823      	ldr	r3, [r4, #0]
  400354:	2100      	movs	r1, #0
  400356:	6898      	ldr	r0, [r3, #8]
  400358:	f003 f9be 	bl	4036d8 <setbuf>
	setbuf(stdin, NULL);
  40035c:	6823      	ldr	r3, [r4, #0]
  40035e:	2100      	movs	r1, #0
  400360:	6858      	ldr	r0, [r3, #4]
  400362:	f003 f9b9 	bl	4036d8 <setbuf>
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  400366:	4863      	ldr	r0, [pc, #396]	; (4004f4 <main+0x200>)
  400368:	f003 f9ae 	bl	4036c8 <puts>
  40036c:	240a      	movs	r4, #10

    for (int i=0; i<10; i++) {
        printf(".");
  40036e:	4e62      	ldr	r6, [pc, #392]	; (4004f8 <main+0x204>)
        delay_ms(100);
  400370:	4d62      	ldr	r5, [pc, #392]	; (4004fc <main+0x208>)
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
        printf(".");
  400372:	4630      	mov	r0, r6
  400374:	f003 f936 	bl	4035e4 <iprintf>
        delay_ms(100);
  400378:	4628      	mov	r0, r5
  40037a:	f008 f865 	bl	408448 <__portable_delay_cycles_veneer>
    cli_init();
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
  40037e:	3c01      	subs	r4, #1
  400380:	d1f7      	bne.n	400372 <main+0x7e>
        printf(".");
        delay_ms(100);
    }
    printf("\r\n");
  400382:	485f      	ldr	r0, [pc, #380]	; (400500 <main+0x20c>)
  400384:	f003 f92e 	bl	4035e4 <iprintf>

    
    if (imu_init()) {
  400388:	f000 ff20 	bl	4011cc <imu_init>
  40038c:	2800      	cmp	r0, #0
  40038e:	f000 809d 	beq.w	4004cc <main+0x1d8>

        motor_init();
  400392:	f001 f893 	bl	4014bc <motor_init>
        //     cli_tick();
        //     delay_ms(100);
        // }

        // Calibrate the imu
        imu_calibrate();
  400396:	f000 ff35 	bl	401204 <imu_calibrate>
        config.imu_calibrate = false;
  40039a:	2200      	movs	r2, #0
  40039c:	4b59      	ldr	r3, [pc, #356]	; (400504 <main+0x210>)
  40039e:	75da      	strb	r2, [r3, #23]
 
        

        printf("please press button to arm motors\r\n");
  4003a0:	4859      	ldr	r0, [pc, #356]	; (400508 <main+0x214>)
  4003a2:	f003 f91f 	bl	4035e4 <iprintf>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003a6:	4b59      	ldr	r3, [pc, #356]	; (40050c <main+0x218>)
  4003a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        while(true) {
            if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  4003aa:	f012 0f04 	tst.w	r2, #4
  4003ae:	d1fb      	bne.n	4003a8 <main+0xb4>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4003b0:	4b57      	ldr	r3, [pc, #348]	; (400510 <main+0x21c>)
  4003b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4003b4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  4003b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003bc:	4b54      	ldr	r3, [pc, #336]	; (400510 <main+0x21c>)
  4003be:	bf14      	ite	ne
  4003c0:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4003c2:	631a      	streq	r2, [r3, #48]	; 0x30
                ioport_toggle_pin_level(LED0_GPIO);
                config.motor_armed = true;
  4003c4:	2101      	movs	r1, #1
  4003c6:	4b4f      	ldr	r3, [pc, #316]	; (400504 <main+0x210>)
  4003c8:	7519      	strb	r1, [r3, #20]
                printf("motor_armed: %d\r\n", config.motor_armed);
  4003ca:	4852      	ldr	r0, [pc, #328]	; (400514 <main+0x220>)
  4003cc:	f003 f90a 	bl	4035e4 <iprintf>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003d0:	4c4c      	ldr	r4, [pc, #304]	; (400504 <main+0x210>)
                imu_calibrate();
                pid_init();
                config.imu_calibrate = false;
  4003d2:	2600      	movs	r6, #0

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  4003d4:	f240 477e 	movw	r7, #1150	; 0x47e
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);

            if (config.motor_armed) {
                motor_set_power(motors[1], power_left + config.motor_offset);
  4003d8:	f8df a150 	ldr.w	sl, [pc, #336]	; 40052c <main+0x238>
  4003dc:	f10a 0364 	add.w	r3, sl, #100	; 0x64
  4003e0:	9313      	str	r3, [sp, #76]	; 0x4c
                motor_set_power(motors[0], power_right + config.motor_offset);
            }


            if (config.log_imu) {
                if (cph_get_millis() >= f_log_timeout) {
  4003e2:	f8df b14c 	ldr.w	fp, [pc, #332]	; 400530 <main+0x23c>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003e6:	7de3      	ldrb	r3, [r4, #23]
  4003e8:	b123      	cbz	r3, 4003f4 <main+0x100>
                imu_calibrate();
  4003ea:	f000 ff0b 	bl	401204 <imu_calibrate>
                pid_init();
  4003ee:	f001 f99b 	bl	401728 <pid_init>
                config.imu_calibrate = false;
  4003f2:	75e6      	strb	r6, [r4, #23]
            }
            cli_tick();
  4003f4:	f000 fa76 	bl	4008e4 <cli_tick>
            imu_tick();
  4003f8:	f000 ff1a 	bl	401230 <imu_tick>
            motor_tick();
  4003fc:	f001 f922 	bl	401644 <motor_tick>

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();
  400400:	f001 f9ba 	bl	401778 <pid_tick>
  400404:	f007 fc30 	bl	407c68 <__aeabi_f2iz>
  400408:	4680      	mov	r8, r0

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  40040a:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  40040e:	9500      	str	r5, [sp, #0]
  400410:	463b      	mov	r3, r7
  400412:	225a      	movs	r2, #90	; 0x5a
  400414:	4631      	mov	r1, r6
  400416:	f000 f89b 	bl	400550 <map>
  40041a:	4681      	mov	r9, r0
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);
  40041c:	9500      	str	r5, [sp, #0]
  40041e:	463b      	mov	r3, r7
  400420:	f06f 0259 	mvn.w	r2, #89	; 0x59
  400424:	4631      	mov	r1, r6
  400426:	4640      	mov	r0, r8
  400428:	f000 f892 	bl	400550 <map>
  40042c:	4605      	mov	r5, r0

            if (config.motor_armed) {
  40042e:	7d23      	ldrb	r3, [r4, #20]
  400430:	b1db      	cbz	r3, 40046a <main+0x176>
                motor_set_power(motors[1], power_left + config.motor_offset);
  400432:	6923      	ldr	r3, [r4, #16]
  400434:	444b      	add	r3, r9
  400436:	9311      	str	r3, [sp, #68]	; 0x44
  400438:	f04f 0844 	mov.w	r8, #68	; 0x44
  40043c:	4642      	mov	r2, r8
  40043e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  400440:	4668      	mov	r0, sp
  400442:	f002 fc4d 	bl	402ce0 <memcpy>
  400446:	f10a 0354 	add.w	r3, sl, #84	; 0x54
  40044a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40044c:	f001 f8fc 	bl	401648 <motor_set_power>
                motor_set_power(motors[0], power_right + config.motor_offset);
  400450:	6923      	ldr	r3, [r4, #16]
  400452:	441d      	add	r5, r3
  400454:	9511      	str	r5, [sp, #68]	; 0x44
  400456:	4642      	mov	r2, r8
  400458:	f10a 0110 	add.w	r1, sl, #16
  40045c:	4668      	mov	r0, sp
  40045e:	f002 fc3f 	bl	402ce0 <memcpy>
  400462:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  400466:	f001 f8ef 	bl	401648 <motor_set_power>
            }


            if (config.log_imu) {
  40046a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  40046e:	2b00      	cmp	r3, #0
  400470:	d0b9      	beq.n	4003e6 <main+0xf2>
                if (cph_get_millis() >= f_log_timeout) {
  400472:	f8db 2000 	ldr.w	r2, [fp]
  400476:	4b28      	ldr	r3, [pc, #160]	; (400518 <main+0x224>)
  400478:	681b      	ldr	r3, [r3, #0]
  40047a:	429a      	cmp	r2, r3
  40047c:	d3b3      	bcc.n	4003e6 <main+0xf2>
                    f_log_timeout = cph_get_millis() + 50;
  40047e:	f8db 3000 	ldr.w	r3, [fp]
  400482:	3332      	adds	r3, #50	; 0x32
  400484:	4a24      	ldr	r2, [pc, #144]	; (400518 <main+0x224>)
  400486:	6013      	str	r3, [r2, #0]
                    printf("roll/pitch/yaw error/pid: %f %f %f %f %f\r\n", ap.imu.x_axis, ap.imu.y_axis, ap.imu.z_axis, error, pid);
  400488:	4d24      	ldr	r5, [pc, #144]	; (40051c <main+0x228>)
  40048a:	6828      	ldr	r0, [r5, #0]
  40048c:	f006 fd7c 	bl	406f88 <__aeabi_f2d>
  400490:	4680      	mov	r8, r0
  400492:	4689      	mov	r9, r1
  400494:	4b22      	ldr	r3, [pc, #136]	; (400520 <main+0x22c>)
  400496:	6818      	ldr	r0, [r3, #0]
  400498:	f006 fd76 	bl	406f88 <__aeabi_f2d>
  40049c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4004a0:	4b20      	ldr	r3, [pc, #128]	; (400524 <main+0x230>)
  4004a2:	6818      	ldr	r0, [r3, #0]
  4004a4:	f006 fd70 	bl	406f88 <__aeabi_f2d>
  4004a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4004ac:	68a8      	ldr	r0, [r5, #8]
  4004ae:	f006 fd6b 	bl	406f88 <__aeabi_f2d>
  4004b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4004b6:	6868      	ldr	r0, [r5, #4]
  4004b8:	f006 fd66 	bl	406f88 <__aeabi_f2d>
  4004bc:	e9cd 0100 	strd	r0, r1, [sp]
  4004c0:	4642      	mov	r2, r8
  4004c2:	464b      	mov	r3, r9
  4004c4:	4818      	ldr	r0, [pc, #96]	; (400528 <main+0x234>)
  4004c6:	f003 f88d 	bl	4035e4 <iprintf>
  4004ca:	e78c      	b.n	4003e6 <main+0xf2>
    //         delay_ms(500); 
    //     }


    // }
}
  4004cc:	2000      	movs	r0, #0
  4004ce:	b019      	add	sp, #100	; 0x64
  4004d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004d4:	400e0800 	.word	0x400e0800
  4004d8:	20000504 	.word	0x20000504
  4004dc:	0040027d 	.word	0x0040027d
  4004e0:	20000500 	.word	0x20000500
  4004e4:	004001fd 	.word	0x004001fd
  4004e8:	200004fc 	.word	0x200004fc
  4004ec:	07270e00 	.word	0x07270e00
  4004f0:	20000078 	.word	0x20000078
  4004f4:	00407cf4 	.word	0x00407cf4
  4004f8:	00407d10 	.word	0x00407d10
  4004fc:	000d1437 	.word	0x000d1437
  400500:	00407d0c 	.word	0x00407d0c
  400504:	200006d4 	.word	0x200006d4
  400508:	00407d14 	.word	0x00407d14
  40050c:	400e0e00 	.word	0x400e0e00
  400510:	400e1200 	.word	0x400e1200
  400514:	00407d38 	.word	0x00407d38
  400518:	20000204 	.word	0x20000204
  40051c:	20000804 	.word	0x20000804
  400520:	2000044c 	.word	0x2000044c
  400524:	2000045c 	.word	0x2000045c
  400528:	00407d4c 	.word	0x00407d4c
  40052c:	20000534 	.word	0x20000534
  400530:	20000208 	.word	0x20000208

00400534 <config_init>:
	// config.axis_swap_xy = false;
	// config.fpv_freeze_pitch = false;
	// config.fpv_freeze_roll = false;
	// config.max_pwm_fpv_pitch = 80;
	// config.max_pwm_fpv_roll = 80;
    config.gyro_calibrate = true;
  400534:	4b05      	ldr	r3, [pc, #20]	; (40054c <config_init+0x18>)
  400536:	2101      	movs	r1, #1
  400538:	7559      	strb	r1, [r3, #21]
	config.accel_calibrate = false;
  40053a:	2200      	movs	r2, #0
  40053c:	759a      	strb	r2, [r3, #22]
	config.imu_calibrate = true;
  40053e:	75d9      	strb	r1, [r3, #23]
	config.log_motor = false;
  400540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	config.log_imu = false;
  400544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  400548:	4770      	bx	lr
  40054a:	bf00      	nop
  40054c:	200006d4 	.word	0x200006d4

00400550 <map>:
#include "cph_util.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  400550:	b410      	push	{r4}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  400552:	1a40      	subs	r0, r0, r1
  400554:	9c01      	ldr	r4, [sp, #4]
  400556:	1ae4      	subs	r4, r4, r3
  400558:	fb04 f000 	mul.w	r0, r4, r0
  40055c:	1a52      	subs	r2, r2, r1
  40055e:	fb90 f0f2 	sdiv	r0, r0, r2
  400562:	4418      	add	r0, r3
  400564:	bc10      	pop	{r4}
  400566:	4770      	bx	lr

00400568 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  400568:	4a02      	ldr	r2, [pc, #8]	; (400574 <SysTick_Handler+0xc>)
  40056a:	6813      	ldr	r3, [r2, #0]
  40056c:	3301      	adds	r3, #1
  40056e:	6013      	str	r3, [r2, #0]
  400570:	4770      	bx	lr
  400572:	bf00      	nop
  400574:	20000208 	.word	0x20000208

00400578 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400578:	4b05      	ldr	r3, [pc, #20]	; (400590 <cph_millis_init+0x18>)
  40057a:	4a06      	ldr	r2, [pc, #24]	; (400594 <cph_millis_init+0x1c>)
  40057c:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40057e:	21f0      	movs	r1, #240	; 0xf0
  400580:	4a05      	ldr	r2, [pc, #20]	; (400598 <cph_millis_init+0x20>)
  400582:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400586:	2200      	movs	r2, #0
  400588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40058a:	2207      	movs	r2, #7
  40058c:	601a      	str	r2, [r3, #0]
  40058e:	4770      	bx	lr
  400590:	e000e010 	.word	0xe000e010
  400594:	0001d4bf 	.word	0x0001d4bf
  400598:	e000ed00 	.word	0xe000ed00

0040059c <init_buffer>:
	init_buffer();
	init_lines();
}

void init_buffer()
{
  40059c:	b508      	push	{r3, lr}
	cli_line_index = 0;
  40059e:	2100      	movs	r1, #0
  4005a0:	4b03      	ldr	r3, [pc, #12]	; (4005b0 <init_buffer+0x14>)
  4005a2:	6019      	str	r1, [r3, #0]
	memset(cli_line_buffer, '\0', sizeof(cli_line_buffer));
  4005a4:	2281      	movs	r2, #129	; 0x81
  4005a6:	4803      	ldr	r0, [pc, #12]	; (4005b4 <init_buffer+0x18>)
  4005a8:	f002 fba5 	bl	402cf6 <memset>
  4005ac:	bd08      	pop	{r3, pc}
  4005ae:	bf00      	nop
  4005b0:	20000414 	.word	0x20000414
  4005b4:	200006fc 	.word	0x200006fc

004005b8 <init_lines>:
}

void init_lines()
{
  4005b8:	b508      	push	{r3, lr}
	memset(cli_lines, '\0', sizeof(cli_lines));
  4005ba:	2281      	movs	r2, #129	; 0x81
  4005bc:	2100      	movs	r1, #0
  4005be:	4802      	ldr	r0, [pc, #8]	; (4005c8 <init_lines+0x10>)
  4005c0:	f002 fb99 	bl	402cf6 <memset>
  4005c4:	bd08      	pop	{r3, pc}
  4005c6:	bf00      	nop
  4005c8:	20000780 	.word	0x20000780

004005cc <cli_init>:
char cli_line_buffer[CLI_MAX_CHARS+1];
int cli_line_index = 0;


void cli_init()
{
  4005cc:	b508      	push	{r3, lr}
	init_buffer();
  4005ce:	f7ff ffe5 	bl	40059c <init_buffer>
	init_lines();
  4005d2:	f7ff fff1 	bl	4005b8 <init_lines>
  4005d6:	bd08      	pop	{r3, pc}

004005d8 <cli_handle_command>:

}

//printf("motor0: %d\r\n", atoi(parm));
void cli_handle_command(char *cmd, char *parm)
{
  4005d8:	b570      	push	{r4, r5, r6, lr}
  4005da:	b092      	sub	sp, #72	; 0x48
  4005dc:	4604      	mov	r4, r0
  4005de:	460d      	mov	r5, r1

	/*
	 * 	Pid loop configuration
	 */
	if (strcmp(cmd, "kp") == 0) {
  4005e0:	4973      	ldr	r1, [pc, #460]	; (4007b0 <cli_handle_command+0x1d8>)
  4005e2:	f003 f92b 	bl	40383c <strcmp>
  4005e6:	b968      	cbnz	r0, 400604 <cli_handle_command+0x2c>
		config.pid_kp = atof(parm);
  4005e8:	4628      	mov	r0, r5
  4005ea:	f002 fb45 	bl	402c78 <atof>
  4005ee:	f007 f817 	bl	407620 <__aeabi_d2f>
  4005f2:	4b70      	ldr	r3, [pc, #448]	; (4007b4 <cli_handle_command+0x1dc>)
  4005f4:	6018      	str	r0, [r3, #0]
		printf("config.pid_kp: %f\r\n", config.pid_kp);
  4005f6:	f006 fcc7 	bl	406f88 <__aeabi_f2d>
  4005fa:	4602      	mov	r2, r0
  4005fc:	460b      	mov	r3, r1
  4005fe:	486e      	ldr	r0, [pc, #440]	; (4007b8 <cli_handle_command+0x1e0>)
  400600:	f002 fff0 	bl	4035e4 <iprintf>
	}

	if (strcmp(cmd, "ki") == 0) {
  400604:	496d      	ldr	r1, [pc, #436]	; (4007bc <cli_handle_command+0x1e4>)
  400606:	4620      	mov	r0, r4
  400608:	f003 f918 	bl	40383c <strcmp>
  40060c:	b968      	cbnz	r0, 40062a <cli_handle_command+0x52>
		config.pid_ki = atof(parm);
  40060e:	4628      	mov	r0, r5
  400610:	f002 fb32 	bl	402c78 <atof>
  400614:	f007 f804 	bl	407620 <__aeabi_d2f>
  400618:	4b66      	ldr	r3, [pc, #408]	; (4007b4 <cli_handle_command+0x1dc>)
  40061a:	6058      	str	r0, [r3, #4]
		printf("config.pid_ki: %f\r\n", config.pid_ki);
  40061c:	f006 fcb4 	bl	406f88 <__aeabi_f2d>
  400620:	4602      	mov	r2, r0
  400622:	460b      	mov	r3, r1
  400624:	4866      	ldr	r0, [pc, #408]	; (4007c0 <cli_handle_command+0x1e8>)
  400626:	f002 ffdd 	bl	4035e4 <iprintf>
	}

	if (strcmp(cmd, "kd") == 0) {
  40062a:	4966      	ldr	r1, [pc, #408]	; (4007c4 <cli_handle_command+0x1ec>)
  40062c:	4620      	mov	r0, r4
  40062e:	f003 f905 	bl	40383c <strcmp>
  400632:	b968      	cbnz	r0, 400650 <cli_handle_command+0x78>
		config.pid_kd = atof(parm);
  400634:	4628      	mov	r0, r5
  400636:	f002 fb1f 	bl	402c78 <atof>
  40063a:	f006 fff1 	bl	407620 <__aeabi_d2f>
  40063e:	4b5d      	ldr	r3, [pc, #372]	; (4007b4 <cli_handle_command+0x1dc>)
  400640:	6098      	str	r0, [r3, #8]
		printf("config.pid_kd: %f\r\n", config.pid_kd);
  400642:	f006 fca1 	bl	406f88 <__aeabi_f2d>
  400646:	4602      	mov	r2, r0
  400648:	460b      	mov	r3, r1
  40064a:	485f      	ldr	r0, [pc, #380]	; (4007c8 <cli_handle_command+0x1f0>)
  40064c:	f002 ffca 	bl	4035e4 <iprintf>
	}

	/*
	 * 	IMU settings
	 */	
	if (strcmp(cmd, "log_imu") == 0) {
  400650:	495e      	ldr	r1, [pc, #376]	; (4007cc <cli_handle_command+0x1f4>)
  400652:	4620      	mov	r0, r4
  400654:	f003 f8f2 	bl	40383c <strcmp>
  400658:	b958      	cbnz	r0, 400672 <cli_handle_command+0x9a>
		config.log_imu = atoi(parm);
  40065a:	4628      	mov	r0, r5
  40065c:	f002 fb0f 	bl	402c7e <atoi>
  400660:	1c01      	adds	r1, r0, #0
  400662:	bf18      	it	ne
  400664:	2101      	movne	r1, #1
  400666:	4b53      	ldr	r3, [pc, #332]	; (4007b4 <cli_handle_command+0x1dc>)
  400668:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
		printf("log_imu: %d\r\n", config.log_imu);
  40066c:	4858      	ldr	r0, [pc, #352]	; (4007d0 <cli_handle_command+0x1f8>)
  40066e:	f002 ffb9 	bl	4035e4 <iprintf>
	}
	if (strcmp(cmd, "imu_calibrate") == 0) {
  400672:	4958      	ldr	r1, [pc, #352]	; (4007d4 <cli_handle_command+0x1fc>)
  400674:	4620      	mov	r0, r4
  400676:	f003 f8e1 	bl	40383c <strcmp>
  40067a:	b950      	cbnz	r0, 400692 <cli_handle_command+0xba>
		config.imu_calibrate = atoi(parm);
  40067c:	4628      	mov	r0, r5
  40067e:	f002 fafe 	bl	402c7e <atoi>
  400682:	1c01      	adds	r1, r0, #0
  400684:	bf18      	it	ne
  400686:	2101      	movne	r1, #1
  400688:	4b4a      	ldr	r3, [pc, #296]	; (4007b4 <cli_handle_command+0x1dc>)
  40068a:	75d9      	strb	r1, [r3, #23]
		printf("imu_calibrate: %d\r\n", config.imu_calibrate);
  40068c:	4852      	ldr	r0, [pc, #328]	; (4007d8 <cli_handle_command+0x200>)
  40068e:	f002 ffa9 	bl	4035e4 <iprintf>
	}

	/*
	 * 	Motor settings
	 */	
	if (strcmp(cmd, "motor_armed") == 0) {
  400692:	4952      	ldr	r1, [pc, #328]	; (4007dc <cli_handle_command+0x204>)
  400694:	4620      	mov	r0, r4
  400696:	f003 f8d1 	bl	40383c <strcmp>
  40069a:	b950      	cbnz	r0, 4006b2 <cli_handle_command+0xda>
		config.motor_armed = atoi(parm);
  40069c:	4628      	mov	r0, r5
  40069e:	f002 faee 	bl	402c7e <atoi>
  4006a2:	1c01      	adds	r1, r0, #0
  4006a4:	bf18      	it	ne
  4006a6:	2101      	movne	r1, #1
  4006a8:	4b42      	ldr	r3, [pc, #264]	; (4007b4 <cli_handle_command+0x1dc>)
  4006aa:	7519      	strb	r1, [r3, #20]
		printf("motor_armed: %d\r\n", config.motor_armed);
  4006ac:	484c      	ldr	r0, [pc, #304]	; (4007e0 <cli_handle_command+0x208>)
  4006ae:	f002 ff99 	bl	4035e4 <iprintf>
	}

	if (strcmp(cmd, "motor_offset") == 0) {
  4006b2:	494c      	ldr	r1, [pc, #304]	; (4007e4 <cli_handle_command+0x20c>)
  4006b4:	4620      	mov	r0, r4
  4006b6:	f003 f8c1 	bl	40383c <strcmp>
  4006ba:	b940      	cbnz	r0, 4006ce <cli_handle_command+0xf6>
		config.motor_offset = atoi(parm);
  4006bc:	4628      	mov	r0, r5
  4006be:	f002 fade 	bl	402c7e <atoi>
  4006c2:	4601      	mov	r1, r0
  4006c4:	4b3b      	ldr	r3, [pc, #236]	; (4007b4 <cli_handle_command+0x1dc>)
  4006c6:	6118      	str	r0, [r3, #16]
		printf("motor_offset: %d\r\n", config.motor_offset);
  4006c8:	4847      	ldr	r0, [pc, #284]	; (4007e8 <cli_handle_command+0x210>)
  4006ca:	f002 ff8b 	bl	4035e4 <iprintf>
	}

	if (strcmp(cmd, "log_motor") == 0) {
  4006ce:	4947      	ldr	r1, [pc, #284]	; (4007ec <cli_handle_command+0x214>)
  4006d0:	4620      	mov	r0, r4
  4006d2:	f003 f8b3 	bl	40383c <strcmp>
  4006d6:	b958      	cbnz	r0, 4006f0 <cli_handle_command+0x118>
		config.log_motor = atoi(parm);
  4006d8:	4628      	mov	r0, r5
  4006da:	f002 fad0 	bl	402c7e <atoi>
  4006de:	1c01      	adds	r1, r0, #0
  4006e0:	bf18      	it	ne
  4006e2:	2101      	movne	r1, #1
  4006e4:	4b33      	ldr	r3, [pc, #204]	; (4007b4 <cli_handle_command+0x1dc>)
  4006e6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
		printf("log_motor: %d\r\n", config.log_motor);
  4006ea:	4841      	ldr	r0, [pc, #260]	; (4007f0 <cli_handle_command+0x218>)
  4006ec:	f002 ff7a 	bl	4035e4 <iprintf>
	}

	if (strcmp(cmd, "motor_min") == 0) {
  4006f0:	4940      	ldr	r1, [pc, #256]	; (4007f4 <cli_handle_command+0x21c>)
  4006f2:	4620      	mov	r0, r4
  4006f4:	f003 f8a2 	bl	40383c <strcmp>
  4006f8:	b9c8      	cbnz	r0, 40072e <cli_handle_command+0x156>
		printf("motor min command issued\r\n");
  4006fa:	483f      	ldr	r0, [pc, #252]	; (4007f8 <cli_handle_command+0x220>)
  4006fc:	f002 ff72 	bl	4035e4 <iprintf>
		motor_min(motors[0]);
  400700:	4d3e      	ldr	r5, [pc, #248]	; (4007fc <cli_handle_command+0x224>)
  400702:	2644      	movs	r6, #68	; 0x44
  400704:	4632      	mov	r2, r6
  400706:	f105 0110 	add.w	r1, r5, #16
  40070a:	4668      	mov	r0, sp
  40070c:	f002 fae8 	bl	402ce0 <memcpy>
  400710:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400714:	f000 ffb4 	bl	401680 <motor_min>
		motor_min(motors[1]);
  400718:	4632      	mov	r2, r6
  40071a:	f105 0164 	add.w	r1, r5, #100	; 0x64
  40071e:	4668      	mov	r0, sp
  400720:	f002 fade 	bl	402ce0 <memcpy>
  400724:	3554      	adds	r5, #84	; 0x54
  400726:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40072a:	f000 ffa9 	bl	401680 <motor_min>
	}

	if (strcmp(cmd, "motor_mid") == 0) {
  40072e:	4934      	ldr	r1, [pc, #208]	; (400800 <cli_handle_command+0x228>)
  400730:	4620      	mov	r0, r4
  400732:	f003 f883 	bl	40383c <strcmp>
  400736:	b9c8      	cbnz	r0, 40076c <cli_handle_command+0x194>
		printf("motor mid command issued\r\n");
  400738:	4832      	ldr	r0, [pc, #200]	; (400804 <cli_handle_command+0x22c>)
  40073a:	f002 ff53 	bl	4035e4 <iprintf>
		motor_mid(motors[0]);
  40073e:	4d2f      	ldr	r5, [pc, #188]	; (4007fc <cli_handle_command+0x224>)
  400740:	2644      	movs	r6, #68	; 0x44
  400742:	4632      	mov	r2, r6
  400744:	f105 0110 	add.w	r1, r5, #16
  400748:	4668      	mov	r0, sp
  40074a:	f002 fac9 	bl	402ce0 <memcpy>
  40074e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400752:	f000 ffb1 	bl	4016b8 <motor_mid>
		motor_mid(motors[1]);
  400756:	4632      	mov	r2, r6
  400758:	f105 0164 	add.w	r1, r5, #100	; 0x64
  40075c:	4668      	mov	r0, sp
  40075e:	f002 fabf 	bl	402ce0 <memcpy>
  400762:	3554      	adds	r5, #84	; 0x54
  400764:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400768:	f000 ffa6 	bl	4016b8 <motor_mid>
	}

	if (strcmp(cmd, "motor_max") == 0) {
  40076c:	4926      	ldr	r1, [pc, #152]	; (400808 <cli_handle_command+0x230>)
  40076e:	4620      	mov	r0, r4
  400770:	f003 f864 	bl	40383c <strcmp>
  400774:	b9c8      	cbnz	r0, 4007aa <cli_handle_command+0x1d2>
		printf("motor max command issued\r\n");
  400776:	4825      	ldr	r0, [pc, #148]	; (40080c <cli_handle_command+0x234>)
  400778:	f002 ff34 	bl	4035e4 <iprintf>
		motor_max(motors[0]);
  40077c:	4c1f      	ldr	r4, [pc, #124]	; (4007fc <cli_handle_command+0x224>)
  40077e:	2544      	movs	r5, #68	; 0x44
  400780:	462a      	mov	r2, r5
  400782:	f104 0110 	add.w	r1, r4, #16
  400786:	4668      	mov	r0, sp
  400788:	f002 faaa 	bl	402ce0 <memcpy>
  40078c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  400790:	f000 ffae 	bl	4016f0 <motor_max>
		motor_max(motors[1]);
  400794:	462a      	mov	r2, r5
  400796:	f104 0164 	add.w	r1, r4, #100	; 0x64
  40079a:	4668      	mov	r0, sp
  40079c:	f002 faa0 	bl	402ce0 <memcpy>
  4007a0:	3454      	adds	r4, #84	; 0x54
  4007a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  4007a6:	f000 ffa3 	bl	4016f0 <motor_max>
	} 
}
  4007aa:	b012      	add	sp, #72	; 0x48
  4007ac:	bd70      	pop	{r4, r5, r6, pc}
  4007ae:	bf00      	nop
  4007b0:	00407d78 	.word	0x00407d78
  4007b4:	200006d4 	.word	0x200006d4
  4007b8:	00407d7c 	.word	0x00407d7c
  4007bc:	00407d90 	.word	0x00407d90
  4007c0:	00407d94 	.word	0x00407d94
  4007c4:	00407da8 	.word	0x00407da8
  4007c8:	00407dac 	.word	0x00407dac
  4007cc:	00407dc0 	.word	0x00407dc0
  4007d0:	00407dc8 	.word	0x00407dc8
  4007d4:	00407dd8 	.word	0x00407dd8
  4007d8:	00407de8 	.word	0x00407de8
  4007dc:	00407dfc 	.word	0x00407dfc
  4007e0:	00407d38 	.word	0x00407d38
  4007e4:	00407e08 	.word	0x00407e08
  4007e8:	00407e18 	.word	0x00407e18
  4007ec:	00407e2c 	.word	0x00407e2c
  4007f0:	00407e38 	.word	0x00407e38
  4007f4:	00407e48 	.word	0x00407e48
  4007f8:	00407e54 	.word	0x00407e54
  4007fc:	20000534 	.word	0x20000534
  400800:	00407e70 	.word	0x00407e70
  400804:	00407e7c 	.word	0x00407e7c
  400808:	00407e98 	.word	0x00407e98
  40080c:	00407ea4 	.word	0x00407ea4

00400810 <cli_put_char>:
	return false;
}

void cli_put_char(unsigned char c)
{
	int i = (unsigned int)(cli_buffer.head + 1) % CLI_RX_BUFFER_SIZE;
  400810:	4a07      	ldr	r2, [pc, #28]	; (400830 <cli_put_char+0x20>)
  400812:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  400816:	1c4b      	adds	r3, r1, #1
  400818:	f3c3 0308 	ubfx	r3, r3, #0, #9

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != cli_buffer.tail) {
  40081c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  400820:	4293      	cmp	r3, r2
  400822:	d003      	beq.n	40082c <cli_put_char+0x1c>
		cli_buffer.buffer[cli_buffer.head] = c;
  400824:	4a02      	ldr	r2, [pc, #8]	; (400830 <cli_put_char+0x20>)
  400826:	5450      	strb	r0, [r2, r1]
		cli_buffer.head = i;
  400828:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  40082c:	4770      	bx	lr
  40082e:	bf00      	nop
  400830:	2000020c 	.word	0x2000020c

00400834 <cli_read_device>:
{
	memset(cli_lines, '\0', sizeof(cli_lines));
}

void cli_read_device(void)
{
  400834:	b500      	push	{lr}
  400836:	b083      	sub	sp, #12
    uint8_t uc_char;
	uint8_t uc_flag;

	if (uart_is_rx_ready(CONSOLE_UART)) {
  400838:	4808      	ldr	r0, [pc, #32]	; (40085c <cli_read_device+0x28>)
  40083a:	f001 fc35 	bl	4020a8 <uart_is_rx_ready>
  40083e:	b150      	cbz	r0, 400856 <cli_read_device+0x22>
		uc_flag = uart_read(CONSOLE_UART, &uc_char);
  400840:	f10d 0107 	add.w	r1, sp, #7
  400844:	4805      	ldr	r0, [pc, #20]	; (40085c <cli_read_device+0x28>)
  400846:	f001 fc3b 	bl	4020c0 <uart_read>
		if (!uc_flag) {
  40084a:	b2c0      	uxtb	r0, r0
  40084c:	b918      	cbnz	r0, 400856 <cli_read_device+0x22>
			cli_put_char(uc_char);
  40084e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400852:	f7ff ffdd 	bl	400810 <cli_put_char>
		}
	}
}
  400856:	b003      	add	sp, #12
  400858:	f85d fb04 	ldr.w	pc, [sp], #4
  40085c:	400e0800 	.word	0x400e0800

00400860 <cli_data_available>:
}

uint8_t cli_data_available()
{

	return (uint8_t)(CLI_RX_BUFFER_SIZE + cli_buffer.head - cli_buffer.tail) % CLI_RX_BUFFER_SIZE;
  400860:	4a03      	ldr	r2, [pc, #12]	; (400870 <cli_data_available+0x10>)
  400862:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
  400866:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
  40086a:	1a18      	subs	r0, r3, r0
}
  40086c:	b2c0      	uxtb	r0, r0
  40086e:	4770      	bx	lr
  400870:	2000020c 	.word	0x2000020c

00400874 <cli_data_read>:

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
  400874:	4a08      	ldr	r2, [pc, #32]	; (400898 <cli_data_read+0x24>)
  400876:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
  40087a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
  40087e:	429a      	cmp	r2, r3
  400880:	d007      	beq.n	400892 <cli_data_read+0x1e>
		return -1;
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
  400882:	4a05      	ldr	r2, [pc, #20]	; (400898 <cli_data_read+0x24>)
  400884:	5cd0      	ldrb	r0, [r2, r3]
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
  400886:	3301      	adds	r3, #1
  400888:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40088c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		return c;
  400890:	4770      	bx	lr

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
		return -1;
  400892:	20ff      	movs	r0, #255	; 0xff
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
		return c;
	}
  400894:	4770      	bx	lr
  400896:	bf00      	nop
  400898:	2000020c 	.word	0x2000020c

0040089c <handle_data>:
	} 
}

// check to see if we have a new line
bool handle_data()
{
  40089c:	b508      	push	{r3, lr}

	char c = cli_data_read();
  40089e:	f7ff ffe9 	bl	400874 <cli_data_read>

	// ignore null terminated strings
	if(c == '\0') return false;
  4008a2:	b190      	cbz	r0, 4008ca <handle_data+0x2e>
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  4008a4:	4b0c      	ldr	r3, [pc, #48]	; (4008d8 <handle_data+0x3c>)
  4008a6:	681b      	ldr	r3, [r3, #0]
  4008a8:	2b7f      	cmp	r3, #127	; 0x7f
  4008aa:	dc10      	bgt.n	4008ce <handle_data+0x32>

	// store character in cli_line_buffer
	cli_line_buffer[cli_line_index] = c;
  4008ac:	490b      	ldr	r1, [pc, #44]	; (4008dc <handle_data+0x40>)
  4008ae:	54c8      	strb	r0, [r1, r3]
	cli_line_index++;
  4008b0:	3301      	adds	r3, #1
  4008b2:	4909      	ldr	r1, [pc, #36]	; (4008d8 <handle_data+0x3c>)
  4008b4:	600b      	str	r3, [r1, #0]

	// check for end of line
	if(c == CLI_TKEND) {
  4008b6:	280d      	cmp	r0, #13
  4008b8:	d10b      	bne.n	4008d2 <handle_data+0x36>
		// copy new message into buffer
		strcpy(cli_lines, cli_line_buffer);
  4008ba:	4908      	ldr	r1, [pc, #32]	; (4008dc <handle_data+0x40>)
  4008bc:	4808      	ldr	r0, [pc, #32]	; (4008e0 <handle_data+0x44>)
  4008be:	f002 ffc7 	bl	403850 <strcpy>
		init_buffer();
  4008c2:	f7ff fe6b 	bl	40059c <init_buffer>
		return true;
  4008c6:	2001      	movs	r0, #1
  4008c8:	bd08      	pop	{r3, pc}
{

	char c = cli_data_read();

	// ignore null terminated strings
	if(c == '\0') return false;
  4008ca:	2000      	movs	r0, #0
  4008cc:	bd08      	pop	{r3, pc}
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  4008ce:	2000      	movs	r0, #0
  4008d0:	bd08      	pop	{r3, pc}
		strcpy(cli_lines, cli_line_buffer);
		init_buffer();
		return true;
	}

	return false;
  4008d2:	2000      	movs	r0, #0
}
  4008d4:	bd08      	pop	{r3, pc}
  4008d6:	bf00      	nop
  4008d8:	20000414 	.word	0x20000414
  4008dc:	200006fc 	.word	0x200006fc
  4008e0:	20000780 	.word	0x20000780

004008e4 <cli_tick>:
		}
	}
}

void cli_tick()
{
  4008e4:	b530      	push	{r4, r5, lr}
  4008e6:	b083      	sub	sp, #12
	// read the serial port
	cli_read_device();
  4008e8:	f7ff ffa4 	bl	400834 <cli_read_device>

	if (cli_data_available()) {
  4008ec:	f7ff ffb8 	bl	400860 <cli_data_available>
  4008f0:	b1a8      	cbz	r0, 40091e <cli_tick+0x3a>
		if (handle_data()) {
  4008f2:	f7ff ffd3 	bl	40089c <handle_data>
  4008f6:	b190      	cbz	r0, 40091e <cli_tick+0x3a>
			//config_test();

			char *saveptr;
			char *cmd, *parm;

			cmd = strtok_r(cli_lines, CLI_DELIM, &saveptr);
  4008f8:	4c0a      	ldr	r4, [pc, #40]	; (400924 <cli_tick+0x40>)
  4008fa:	aa01      	add	r2, sp, #4
  4008fc:	4621      	mov	r1, r4
  4008fe:	480a      	ldr	r0, [pc, #40]	; (400928 <cli_tick+0x44>)
  400900:	f003 fe0b 	bl	40451a <strtok_r>
  400904:	4605      	mov	r5, r0
			parm = strtok_r(NULL, CLI_DELIM, &saveptr);
  400906:	aa01      	add	r2, sp, #4
  400908:	4621      	mov	r1, r4
  40090a:	2000      	movs	r0, #0
  40090c:	f003 fe05 	bl	40451a <strtok_r>

			// printf("cmd=%s\r\n", cmd);
			// printf("parm=%s\r\n", parm);

			if (parm != NULL)
  400910:	4601      	mov	r1, r0
  400912:	b110      	cbz	r0, 40091a <cli_tick+0x36>
				cli_handle_command(cmd, parm);
  400914:	4628      	mov	r0, r5
  400916:	f7ff fe5f 	bl	4005d8 <cli_handle_command>


			// reset cli_lines
			init_lines();
  40091a:	f7ff fe4d 	bl	4005b8 <init_lines>

		}
	}

}
  40091e:	b003      	add	sp, #12
  400920:	bd30      	pop	{r4, r5, pc}
  400922:	bf00      	nop
  400924:	00407ec0 	.word	0x00407ec0
  400928:	20000780 	.word	0x20000780

0040092c <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  40092c:	b500      	push	{lr}
  40092e:	b089      	sub	sp, #36	; 0x24
  400930:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  400934:	2368      	movs	r3, #104	; 0x68
  400936:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  40093a:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  40093e:	2301      	movs	r3, #1
  400940:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  400942:	f10d 0207 	add.w	r2, sp, #7
  400946:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  400948:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  40094a:	a903      	add	r1, sp, #12
  40094c:	4804      	ldr	r0, [pc, #16]	; (400960 <write_register8+0x34>)
  40094e:	f001 f8df 	bl	401b10 <twi_master_write>
    
    // if (status == TWI_SUCCESS) {
    //     puts("write_register: success\r\n");
    // }

    delay_ms(TWI_WAIT_TIME);
  400952:	4804      	ldr	r0, [pc, #16]	; (400964 <write_register8+0x38>)
  400954:	f007 fd78 	bl	408448 <__portable_delay_cycles_veneer>
}
  400958:	b009      	add	sp, #36	; 0x24
  40095a:	f85d fb04 	ldr.w	pc, [sp], #4
  40095e:	bf00      	nop
  400960:	40018000 	.word	0x40018000
  400964:	00014ed3 	.word	0x00014ed3

00400968 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  400968:	b510      	push	{r4, lr}
  40096a:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  40096c:	4b0e      	ldr	r3, [pc, #56]	; (4009a8 <read_register8+0x40>)
  40096e:	2200      	movs	r2, #0
  400970:	601a      	str	r2, [r3, #0]
  400972:	605a      	str	r2, [r3, #4]
  400974:	609a      	str	r2, [r3, #8]
  400976:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  400978:	2268      	movs	r2, #104	; 0x68
  40097a:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  40097e:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400982:	2201      	movs	r2, #1
  400984:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  400986:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  400988:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  40098a:	a901      	add	r1, sp, #4
  40098c:	4807      	ldr	r0, [pc, #28]	; (4009ac <read_register8+0x44>)
  40098e:	f001 f857 	bl	401a40 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  400992:	b910      	cbnz	r0, 40099a <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  400994:	4b04      	ldr	r3, [pc, #16]	; (4009a8 <read_register8+0x40>)
  400996:	781c      	ldrb	r4, [r3, #0]
  400998:	e000      	b.n	40099c <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  40099a:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  40099c:	4804      	ldr	r0, [pc, #16]	; (4009b0 <read_register8+0x48>)
  40099e:	f007 fd53 	bl	408448 <__portable_delay_cycles_veneer>

    return value;
}
  4009a2:	4620      	mov	r0, r4
  4009a4:	b006      	add	sp, #24
  4009a6:	bd10      	pop	{r4, pc}
  4009a8:	20000418 	.word	0x20000418
  4009ac:	40018000 	.word	0x40018000
  4009b0:	00014ed3 	.word	0x00014ed3

004009b4 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  4009b4:	b510      	push	{r4, lr}
  4009b6:	b086      	sub	sp, #24
  4009b8:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4009ba:	4b0c      	ldr	r3, [pc, #48]	; (4009ec <read_bytes+0x38>)
  4009bc:	2100      	movs	r1, #0
  4009be:	6019      	str	r1, [r3, #0]
  4009c0:	6059      	str	r1, [r3, #4]
  4009c2:	6099      	str	r1, [r3, #8]
  4009c4:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4009c6:	2368      	movs	r3, #104	; 0x68
  4009c8:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  4009cc:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4009d0:	2301      	movs	r3, #1
  4009d2:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  4009d4:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  4009d6:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4009d8:	a901      	add	r1, sp, #4
  4009da:	4805      	ldr	r0, [pc, #20]	; (4009f0 <read_bytes+0x3c>)
  4009dc:	f001 f830 	bl	401a40 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  4009e0:	4804      	ldr	r0, [pc, #16]	; (4009f4 <read_bytes+0x40>)
  4009e2:	f007 fd31 	bl	408448 <__portable_delay_cycles_veneer>

    return length;
}
  4009e6:	b2e0      	uxtb	r0, r4
  4009e8:	b006      	add	sp, #24
  4009ea:	bd10      	pop	{r4, pc}
  4009ec:	20000418 	.word	0x20000418
  4009f0:	40018000 	.word	0x40018000
  4009f4:	00014ed3 	.word	0x00014ed3

004009f8 <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  4009f8:	b570      	push	{r4, r5, r6, lr}
  4009fa:	4604      	mov	r4, r0
  4009fc:	460d      	mov	r5, r1
  4009fe:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400a00:	f7ff ffb2 	bl	400968 <read_register8>

    if (state) {
  400a04:	b126      	cbz	r6, 400a10 <write_register_bit+0x18>
        value |= (1 << pos);
  400a06:	2101      	movs	r1, #1
  400a08:	40a9      	lsls	r1, r5
  400a0a:	4301      	orrs	r1, r0
  400a0c:	b2c9      	uxtb	r1, r1
  400a0e:	e004      	b.n	400a1a <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400a10:	2101      	movs	r1, #1
  400a12:	40a9      	lsls	r1, r5
  400a14:	ea20 0101 	bic.w	r1, r0, r1
  400a18:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  400a1a:	4620      	mov	r0, r4
  400a1c:	f7ff ff86 	bl	40092c <write_register8>
  400a20:	bd70      	pop	{r4, r5, r6, pc}
  400a22:	bf00      	nop

00400a24 <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  400a24:	b510      	push	{r4, lr}
  400a26:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  400a28:	f7ff ff9e 	bl	400968 <read_register8>
    return ((value >> pos) & 1);
  400a2c:	4120      	asrs	r0, r4
}
  400a2e:	f000 0001 	and.w	r0, r0, #1
  400a32:	bd10      	pop	{r4, pc}

00400a34 <mpu_init>:

bool mpu_init(void)
{
  400a34:	b500      	push	{lr}
  400a36:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400a38:	4b0d      	ldr	r3, [pc, #52]	; (400a70 <mpu_init+0x3c>)
  400a3a:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400a3c:	4b0d      	ldr	r3, [pc, #52]	; (400a74 <mpu_init+0x40>)
  400a3e:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400a40:	a901      	add	r1, sp, #4
  400a42:	480d      	ldr	r0, [pc, #52]	; (400a78 <mpu_init+0x44>)
  400a44:	f000 ffcc 	bl	4019e0 <twi_master_init>
  400a48:	b138      	cbz	r0, 400a5a <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  400a4a:	480c      	ldr	r0, [pc, #48]	; (400a7c <mpu_init+0x48>)
  400a4c:	f002 fe3c 	bl	4036c8 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400a50:	480b      	ldr	r0, [pc, #44]	; (400a80 <mpu_init+0x4c>)
  400a52:	f007 fcf9 	bl	408448 <__portable_delay_cycles_veneer>
        return false;
  400a56:	2000      	movs	r0, #0
  400a58:	e006      	b.n	400a68 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  400a5a:	480a      	ldr	r0, [pc, #40]	; (400a84 <mpu_init+0x50>)
  400a5c:	f002 fe34 	bl	4036c8 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400a60:	4807      	ldr	r0, [pc, #28]	; (400a80 <mpu_init+0x4c>)
  400a62:	f007 fcf1 	bl	408448 <__portable_delay_cycles_veneer>
        return true;
  400a66:	2001      	movs	r0, #1
    }
    
}
  400a68:	b005      	add	sp, #20
  400a6a:	f85d fb04 	ldr.w	pc, [sp], #4
  400a6e:	bf00      	nop
  400a70:	07270e00 	.word	0x07270e00
  400a74:	00061a80 	.word	0x00061a80
  400a78:	40018000 	.word	0x40018000
  400a7c:	00407ec4 	.word	0x00407ec4
  400a80:	00014ed3 	.word	0x00014ed3
  400a84:	00407ee0 	.word	0x00407ee0

00400a88 <mpu_probe>:

bool mpu_probe(void)
{
  400a88:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  400a8a:	2168      	movs	r1, #104	; 0x68
  400a8c:	4809      	ldr	r0, [pc, #36]	; (400ab4 <mpu_probe+0x2c>)
  400a8e:	f001 f881 	bl	401b94 <twi_probe>
  400a92:	b138      	cbz	r0, 400aa4 <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  400a94:	4808      	ldr	r0, [pc, #32]	; (400ab8 <mpu_probe+0x30>)
  400a96:	f002 fe17 	bl	4036c8 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400a9a:	4808      	ldr	r0, [pc, #32]	; (400abc <mpu_probe+0x34>)
  400a9c:	f007 fcd4 	bl	408448 <__portable_delay_cycles_veneer>
        return false;
  400aa0:	2000      	movs	r0, #0
  400aa2:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400aa4:	4806      	ldr	r0, [pc, #24]	; (400ac0 <mpu_probe+0x38>)
  400aa6:	f002 fe0f 	bl	4036c8 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400aaa:	4804      	ldr	r0, [pc, #16]	; (400abc <mpu_probe+0x34>)
  400aac:	f007 fccc 	bl	408448 <__portable_delay_cycles_veneer>
        return true;
  400ab0:	2001      	movs	r0, #1
    }
}
  400ab2:	bd08      	pop	{r3, pc}
  400ab4:	40018000 	.word	0x40018000
  400ab8:	00407efc 	.word	0x00407efc
  400abc:	00014ed3 	.word	0x00014ed3
  400ac0:	00407f10 	.word	0x00407f10

00400ac4 <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  400ac4:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  400ac6:	2075      	movs	r0, #117	; 0x75
  400ac8:	f7ff ff4e 	bl	400968 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400acc:	bd08      	pop	{r3, pc}
  400ace:	bf00      	nop

00400ad0 <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400ad0:	b510      	push	{r4, lr}
  400ad2:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400ad4:	206b      	movs	r0, #107	; 0x6b
  400ad6:	f7ff ff47 	bl	400968 <read_register8>
    value &= 0b11111000; // mask
  400ada:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  400ade:	4321      	orrs	r1, r4
  400ae0:	206b      	movs	r0, #107	; 0x6b
  400ae2:	f7ff ff23 	bl	40092c <write_register8>
  400ae6:	bd10      	pop	{r4, pc}

00400ae8 <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  400ae8:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400aea:	206b      	movs	r0, #107	; 0x6b
  400aec:	f7ff ff3c 	bl	400968 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400af0:	f000 0007 	and.w	r0, r0, #7
  400af4:	bd08      	pop	{r3, pc}
  400af6:	bf00      	nop

00400af8 <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  400af8:	b510      	push	{r4, lr}
  400afa:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400afc:	2803      	cmp	r0, #3
  400afe:	d812      	bhi.n	400b26 <mpu_set_gyro_scale+0x2e>
  400b00:	e8df f000 	tbb	[pc, r0]
  400b04:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400b08:	4a0d      	ldr	r2, [pc, #52]	; (400b40 <mpu_set_gyro_scale+0x48>)
  400b0a:	4b0e      	ldr	r3, [pc, #56]	; (400b44 <mpu_set_gyro_scale+0x4c>)
  400b0c:	601a      	str	r2, [r3, #0]
            break;
  400b0e:	e00a      	b.n	400b26 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400b10:	4a0d      	ldr	r2, [pc, #52]	; (400b48 <mpu_set_gyro_scale+0x50>)
  400b12:	4b0c      	ldr	r3, [pc, #48]	; (400b44 <mpu_set_gyro_scale+0x4c>)
  400b14:	601a      	str	r2, [r3, #0]
            break;
  400b16:	e006      	b.n	400b26 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400b18:	4a0c      	ldr	r2, [pc, #48]	; (400b4c <mpu_set_gyro_scale+0x54>)
  400b1a:	4b0a      	ldr	r3, [pc, #40]	; (400b44 <mpu_set_gyro_scale+0x4c>)
  400b1c:	601a      	str	r2, [r3, #0]
            break;
  400b1e:	e002      	b.n	400b26 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400b20:	4a0b      	ldr	r2, [pc, #44]	; (400b50 <mpu_set_gyro_scale+0x58>)
  400b22:	4b08      	ldr	r3, [pc, #32]	; (400b44 <mpu_set_gyro_scale+0x4c>)
  400b24:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  400b26:	201b      	movs	r0, #27
  400b28:	f7ff ff1e 	bl	400968 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400b2c:	f020 0018 	bic.w	r0, r0, #24
  400b30:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  400b34:	b2c9      	uxtb	r1, r1
  400b36:	201b      	movs	r0, #27
  400b38:	f7ff fef8 	bl	40092c <write_register8>
  400b3c:	bd10      	pop	{r4, pc}
  400b3e:	bf00      	nop
  400b40:	3bfa1e3f 	.word	0x3bfa1e3f
  400b44:	20000438 	.word	0x20000438
  400b48:	3c7a2270 	.word	0x3c7a2270
  400b4c:	3cf9bfdf 	.word	0x3cf9bfdf
  400b50:	3d79c0ec 	.word	0x3d79c0ec

00400b54 <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  400b54:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  400b56:	201b      	movs	r0, #27
  400b58:	f7ff ff06 	bl	400968 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  400b5c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  400b60:	bd08      	pop	{r3, pc}
  400b62:	bf00      	nop

00400b64 <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  400b64:	b510      	push	{r4, lr}
  400b66:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  400b68:	2803      	cmp	r0, #3
  400b6a:	d812      	bhi.n	400b92 <mpu_set_accel_range+0x2e>
  400b6c:	e8df f000 	tbb	[pc, r0]
  400b70:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  400b74:	4a0d      	ldr	r2, [pc, #52]	; (400bac <mpu_set_accel_range+0x48>)
  400b76:	4b0e      	ldr	r3, [pc, #56]	; (400bb0 <mpu_set_accel_range+0x4c>)
  400b78:	601a      	str	r2, [r3, #0]
            break;
  400b7a:	e00a      	b.n	400b92 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  400b7c:	4a0d      	ldr	r2, [pc, #52]	; (400bb4 <mpu_set_accel_range+0x50>)
  400b7e:	4b0c      	ldr	r3, [pc, #48]	; (400bb0 <mpu_set_accel_range+0x4c>)
  400b80:	601a      	str	r2, [r3, #0]
            break;   
  400b82:	e006      	b.n	400b92 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  400b84:	4a0c      	ldr	r2, [pc, #48]	; (400bb8 <mpu_set_accel_range+0x54>)
  400b86:	4b0a      	ldr	r3, [pc, #40]	; (400bb0 <mpu_set_accel_range+0x4c>)
  400b88:	601a      	str	r2, [r3, #0]
            break;   
  400b8a:	e002      	b.n	400b92 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400b8c:	4a0b      	ldr	r2, [pc, #44]	; (400bbc <mpu_set_accel_range+0x58>)
  400b8e:	4b08      	ldr	r3, [pc, #32]	; (400bb0 <mpu_set_accel_range+0x4c>)
  400b90:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  400b92:	201c      	movs	r0, #28
  400b94:	f7ff fee8 	bl	400968 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400b98:	f020 0018 	bic.w	r0, r0, #24
  400b9c:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  400ba0:	b2c9      	uxtb	r1, r1
  400ba2:	201c      	movs	r0, #28
  400ba4:	f7ff fec2 	bl	40092c <write_register8>
  400ba8:	bd10      	pop	{r4, pc}
  400baa:	bf00      	nop
  400bac:	387fda40 	.word	0x387fda40
  400bb0:	20000428 	.word	0x20000428
  400bb4:	38ffda40 	.word	0x38ffda40
  400bb8:	397fda40 	.word	0x397fda40
  400bbc:	39fff518 	.word	0x39fff518

00400bc0 <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400bc0:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  400bc2:	4602      	mov	r2, r0
  400bc4:	2106      	movs	r1, #6
  400bc6:	206b      	movs	r0, #107	; 0x6b
  400bc8:	f7ff ff16 	bl	4009f8 <write_register_bit>
  400bcc:	bd08      	pop	{r3, pc}
  400bce:	bf00      	nop

00400bd0 <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400bd0:	b538      	push	{r3, r4, r5, lr}
  400bd2:	4605      	mov	r5, r0
  400bd4:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  400bd6:	4a11      	ldr	r2, [pc, #68]	; (400c1c <mpu_begin+0x4c>)
  400bd8:	2300      	movs	r3, #0
  400bda:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400bdc:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400bde:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400be0:	2100      	movs	r1, #0
  400be2:	4a0f      	ldr	r2, [pc, #60]	; (400c20 <mpu_begin+0x50>)
  400be4:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  400be6:	4a0f      	ldr	r2, [pc, #60]	; (400c24 <mpu_begin+0x54>)
  400be8:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400bea:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400bec:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400bee:	4a0e      	ldr	r2, [pc, #56]	; (400c28 <mpu_begin+0x58>)
  400bf0:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  400bf2:	f7ff ff67 	bl	400ac4 <mpu_who_am_i>
  400bf6:	2868      	cmp	r0, #104	; 0x68
  400bf8:	d10d      	bne.n	400c16 <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400bfa:	2001      	movs	r0, #1
  400bfc:	f7ff ff68 	bl	400ad0 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400c00:	4628      	mov	r0, r5
  400c02:	f7ff ff79 	bl	400af8 <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  400c06:	4620      	mov	r0, r4
  400c08:	f7ff ffac 	bl	400b64 <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400c0c:	2000      	movs	r0, #0
  400c0e:	f7ff ffd7 	bl	400bc0 <mpu_set_sleep_enabled>

    return true;
  400c12:	2001      	movs	r0, #1
  400c14:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  400c16:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400c18:	bd38      	pop	{r3, r4, r5, pc}
  400c1a:	bf00      	nop
  400c1c:	200006b8 	.word	0x200006b8
  400c20:	2000043c 	.word	0x2000043c
  400c24:	20000684 	.word	0x20000684
  400c28:	20000444 	.word	0x20000444

00400c2c <mpu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400c2c:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  400c2e:	2106      	movs	r1, #6
  400c30:	206b      	movs	r0, #107	; 0x6b
  400c32:	f7ff fef7 	bl	400a24 <read_register_bit>
}
  400c36:	bd08      	pop	{r3, pc}

00400c38 <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  400c38:	b570      	push	{r4, r5, r6, lr}
  400c3a:	b082      	sub	sp, #8
  400c3c:	4606      	mov	r6, r0
  400c3e:	460d      	mov	r5, r1
  400c40:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400c42:	2300      	movs	r3, #0
  400c44:	9300      	str	r3, [sp, #0]
  400c46:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  400c4a:	466a      	mov	r2, sp
  400c4c:	2106      	movs	r1, #6
  400c4e:	2043      	movs	r0, #67	; 0x43
  400c50:	f7ff feb0 	bl	4009b4 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400c54:	f89d 2000 	ldrb.w	r2, [sp]
  400c58:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400c5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400c60:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400c62:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400c66:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400c6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400c6e:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400c70:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400c74:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400c78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400c7c:	8023      	strh	r3, [r4, #0]

}
  400c7e:	b002      	add	sp, #8
  400c80:	bd70      	pop	{r4, r5, r6, pc}
  400c82:	bf00      	nop

00400c84 <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  400c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  400c86:	4d0c      	ldr	r5, [pc, #48]	; (400cb8 <mpu_read_raw_gyro+0x34>)
  400c88:	4e0c      	ldr	r6, [pc, #48]	; (400cbc <mpu_read_raw_gyro+0x38>)
  400c8a:	4f0d      	ldr	r7, [pc, #52]	; (400cc0 <mpu_read_raw_gyro+0x3c>)
  400c8c:	462a      	mov	r2, r5
  400c8e:	4631      	mov	r1, r6
  400c90:	4638      	mov	r0, r7
  400c92:	f7ff ffd1 	bl	400c38 <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  400c96:	4c0b      	ldr	r4, [pc, #44]	; (400cc4 <mpu_read_raw_gyro+0x40>)
  400c98:	f9b7 0000 	ldrsh.w	r0, [r7]
  400c9c:	f006 fdca 	bl	407834 <__aeabi_i2f>
  400ca0:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  400ca2:	f9b6 0000 	ldrsh.w	r0, [r6]
  400ca6:	f006 fdc5 	bl	407834 <__aeabi_i2f>
  400caa:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400cac:	f9b5 0000 	ldrsh.w	r0, [r5]
  400cb0:	f006 fdc0 	bl	407834 <__aeabi_i2f>
  400cb4:	60a0      	str	r0, [r4, #8]
  400cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400cb8:	200006a8 	.word	0x200006a8
  400cbc:	20000520 	.word	0x20000520
  400cc0:	200006c4 	.word	0x200006c4
  400cc4:	20000514 	.word	0x20000514

00400cc8 <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ccc:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400cce:	f7ff ffd9 	bl	400c84 <mpu_read_raw_gyro>

    if (use_calibrate) {
  400cd2:	4b3d      	ldr	r3, [pc, #244]	; (400dc8 <mpu_read_normalized_gyro+0x100>)
  400cd4:	781b      	ldrb	r3, [r3, #0]
  400cd6:	b30b      	cbz	r3, 400d1c <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400cd8:	4b3c      	ldr	r3, [pc, #240]	; (400dcc <mpu_read_normalized_gyro+0x104>)
  400cda:	681e      	ldr	r6, [r3, #0]
  400cdc:	4d3c      	ldr	r5, [pc, #240]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400cde:	4f3d      	ldr	r7, [pc, #244]	; (400dd4 <mpu_read_normalized_gyro+0x10c>)
  400ce0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400de0 <mpu_read_normalized_gyro+0x118>
  400ce4:	f8d8 1000 	ldr.w	r1, [r8]
  400ce8:	6838      	ldr	r0, [r7, #0]
  400cea:	f006 fced 	bl	4076c8 <__aeabi_fsub>
  400cee:	4631      	mov	r1, r6
  400cf0:	f006 fdf4 	bl	4078dc <__aeabi_fmul>
  400cf4:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  400cf6:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400cfa:	6878      	ldr	r0, [r7, #4]
  400cfc:	f006 fce4 	bl	4076c8 <__aeabi_fsub>
  400d00:	4631      	mov	r1, r6
  400d02:	f006 fdeb 	bl	4078dc <__aeabi_fmul>
  400d06:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400d08:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400d0c:	68b8      	ldr	r0, [r7, #8]
  400d0e:	f006 fcdb 	bl	4076c8 <__aeabi_fsub>
  400d12:	4631      	mov	r1, r6
  400d14:	f006 fde2 	bl	4078dc <__aeabi_fmul>
  400d18:	60a8      	str	r0, [r5, #8]
  400d1a:	e012      	b.n	400d42 <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400d1c:	4b2b      	ldr	r3, [pc, #172]	; (400dcc <mpu_read_normalized_gyro+0x104>)
  400d1e:	681f      	ldr	r7, [r3, #0]
  400d20:	4d2b      	ldr	r5, [pc, #172]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400d22:	4e2c      	ldr	r6, [pc, #176]	; (400dd4 <mpu_read_normalized_gyro+0x10c>)
  400d24:	4639      	mov	r1, r7
  400d26:	6830      	ldr	r0, [r6, #0]
  400d28:	f006 fdd8 	bl	4078dc <__aeabi_fmul>
  400d2c:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400d2e:	4639      	mov	r1, r7
  400d30:	6870      	ldr	r0, [r6, #4]
  400d32:	f006 fdd3 	bl	4078dc <__aeabi_fmul>
  400d36:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400d38:	4639      	mov	r1, r7
  400d3a:	68b0      	ldr	r0, [r6, #8]
  400d3c:	f006 fdce 	bl	4078dc <__aeabi_fmul>
  400d40:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  400d42:	2100      	movs	r1, #0
  400d44:	4b24      	ldr	r3, [pc, #144]	; (400dd8 <mpu_read_normalized_gyro+0x110>)
  400d46:	6818      	ldr	r0, [r3, #0]
  400d48:	f006 ff5c 	bl	407c04 <__aeabi_fcmpeq>
  400d4c:	2800      	cmp	r0, #0
  400d4e:	d132      	bne.n	400db6 <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  400d50:	4b1f      	ldr	r3, [pc, #124]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400d52:	6818      	ldr	r0, [r3, #0]
  400d54:	f006 ff88 	bl	407c68 <__aeabi_f2iz>
  400d58:	2800      	cmp	r0, #0
  400d5a:	bfb8      	it	lt
  400d5c:	4240      	neglt	r0, r0
  400d5e:	f006 fd69 	bl	407834 <__aeabi_i2f>
  400d62:	4b1e      	ldr	r3, [pc, #120]	; (400ddc <mpu_read_normalized_gyro+0x114>)
  400d64:	6819      	ldr	r1, [r3, #0]
  400d66:	f006 ff57 	bl	407c18 <__aeabi_fcmplt>
  400d6a:	b110      	cbz	r0, 400d72 <mpu_read_normalized_gyro+0xaa>
  400d6c:	2200      	movs	r2, #0
  400d6e:	4b18      	ldr	r3, [pc, #96]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400d70:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  400d72:	4b17      	ldr	r3, [pc, #92]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400d74:	6858      	ldr	r0, [r3, #4]
  400d76:	f006 ff77 	bl	407c68 <__aeabi_f2iz>
  400d7a:	2800      	cmp	r0, #0
  400d7c:	bfb8      	it	lt
  400d7e:	4240      	neglt	r0, r0
  400d80:	f006 fd58 	bl	407834 <__aeabi_i2f>
  400d84:	4b15      	ldr	r3, [pc, #84]	; (400ddc <mpu_read_normalized_gyro+0x114>)
  400d86:	6859      	ldr	r1, [r3, #4]
  400d88:	f006 ff46 	bl	407c18 <__aeabi_fcmplt>
  400d8c:	b110      	cbz	r0, 400d94 <mpu_read_normalized_gyro+0xcc>
  400d8e:	2200      	movs	r2, #0
  400d90:	4b0f      	ldr	r3, [pc, #60]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400d92:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400d94:	4b0e      	ldr	r3, [pc, #56]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400d96:	6898      	ldr	r0, [r3, #8]
  400d98:	f006 ff66 	bl	407c68 <__aeabi_f2iz>
  400d9c:	2800      	cmp	r0, #0
  400d9e:	bfb8      	it	lt
  400da0:	4240      	neglt	r0, r0
  400da2:	f006 fd47 	bl	407834 <__aeabi_i2f>
  400da6:	4b0d      	ldr	r3, [pc, #52]	; (400ddc <mpu_read_normalized_gyro+0x114>)
  400da8:	6899      	ldr	r1, [r3, #8]
  400daa:	f006 ff35 	bl	407c18 <__aeabi_fcmplt>
  400dae:	b110      	cbz	r0, 400db6 <mpu_read_normalized_gyro+0xee>
  400db0:	2200      	movs	r2, #0
  400db2:	4b07      	ldr	r3, [pc, #28]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400db4:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  400db6:	4b06      	ldr	r3, [pc, #24]	; (400dd0 <mpu_read_normalized_gyro+0x108>)
  400db8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400dbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400dc0:	4620      	mov	r0, r4
  400dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400dc6:	bf00      	nop
  400dc8:	2000043c 	.word	0x2000043c
  400dcc:	20000438 	.word	0x20000438
  400dd0:	200006c8 	.word	0x200006c8
  400dd4:	20000514 	.word	0x20000514
  400dd8:	20000444 	.word	0x20000444
  400ddc:	20000684 	.word	0x20000684
  400de0:	200006b8 	.word	0x200006b8

00400de4 <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400de4:	b570      	push	{r4, r5, r6, lr}
  400de6:	b082      	sub	sp, #8
  400de8:	4606      	mov	r6, r0
  400dea:	460d      	mov	r5, r1
  400dec:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400dee:	2300      	movs	r3, #0
  400df0:	9300      	str	r3, [sp, #0]
  400df2:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  400df6:	466a      	mov	r2, sp
  400df8:	2106      	movs	r1, #6
  400dfa:	203b      	movs	r0, #59	; 0x3b
  400dfc:	f7ff fdda 	bl	4009b4 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400e00:	f89d 2000 	ldrb.w	r2, [sp]
  400e04:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400e08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e0c:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400e0e:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400e12:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400e16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e1a:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400e1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400e20:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400e24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e28:	8023      	strh	r3, [r4, #0]
}
  400e2a:	b002      	add	sp, #8
  400e2c:	bd70      	pop	{r4, r5, r6, pc}
  400e2e:	bf00      	nop

00400e30 <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  400e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  400e32:	4d0c      	ldr	r5, [pc, #48]	; (400e64 <mpu_read_raw_acceleration+0x34>)
  400e34:	4e0c      	ldr	r6, [pc, #48]	; (400e68 <mpu_read_raw_acceleration+0x38>)
  400e36:	4f0d      	ldr	r7, [pc, #52]	; (400e6c <mpu_read_raw_acceleration+0x3c>)
  400e38:	462a      	mov	r2, r5
  400e3a:	4631      	mov	r1, r6
  400e3c:	4638      	mov	r0, r7
  400e3e:	f7ff ffd1 	bl	400de4 <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  400e42:	4c0b      	ldr	r4, [pc, #44]	; (400e70 <mpu_read_raw_acceleration+0x40>)
  400e44:	f9b7 0000 	ldrsh.w	r0, [r7]
  400e48:	f006 fcf4 	bl	407834 <__aeabi_i2f>
  400e4c:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  400e4e:	f9b6 0000 	ldrsh.w	r0, [r6]
  400e52:	f006 fcef 	bl	407834 <__aeabi_i2f>
  400e56:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  400e58:	f9b5 0000 	ldrsh.w	r0, [r5]
  400e5c:	f006 fcea 	bl	407834 <__aeabi_i2f>
  400e60:	60a0      	str	r0, [r4, #8]
  400e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e64:	20000522 	.word	0x20000522
  400e68:	200006c6 	.word	0x200006c6
  400e6c:	20000530 	.word	0x20000530
  400e70:	200006ac 	.word	0x200006ac

00400e74 <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  400e74:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  400e76:	f7ff ffdb 	bl	400e30 <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  400e7a:	4b0e      	ldr	r3, [pc, #56]	; (400eb4 <mpu_read_normalized_acceleration+0x40>)
  400e7c:	681d      	ldr	r5, [r3, #0]
  400e7e:	4c0e      	ldr	r4, [pc, #56]	; (400eb8 <mpu_read_normalized_acceleration+0x44>)
  400e80:	4e0e      	ldr	r6, [pc, #56]	; (400ebc <mpu_read_normalized_acceleration+0x48>)
  400e82:	6831      	ldr	r1, [r6, #0]
  400e84:	4628      	mov	r0, r5
  400e86:	f006 fd29 	bl	4078dc <__aeabi_fmul>
  400e8a:	490d      	ldr	r1, [pc, #52]	; (400ec0 <mpu_read_normalized_acceleration+0x4c>)
  400e8c:	f006 fd26 	bl	4078dc <__aeabi_fmul>
  400e90:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  400e92:	6871      	ldr	r1, [r6, #4]
  400e94:	4628      	mov	r0, r5
  400e96:	f006 fd21 	bl	4078dc <__aeabi_fmul>
  400e9a:	4909      	ldr	r1, [pc, #36]	; (400ec0 <mpu_read_normalized_acceleration+0x4c>)
  400e9c:	f006 fd1e 	bl	4078dc <__aeabi_fmul>
  400ea0:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400ea2:	68b1      	ldr	r1, [r6, #8]
  400ea4:	4628      	mov	r0, r5
  400ea6:	f006 fd19 	bl	4078dc <__aeabi_fmul>
  400eaa:	4905      	ldr	r1, [pc, #20]	; (400ec0 <mpu_read_normalized_acceleration+0x4c>)
  400eac:	f006 fd16 	bl	4078dc <__aeabi_fmul>
  400eb0:	60a0      	str	r0, [r4, #8]
  400eb2:	bd70      	pop	{r4, r5, r6, pc}
  400eb4:	20000428 	.word	0x20000428
  400eb8:	2000069c 	.word	0x2000069c
  400ebc:	200006ac 	.word	0x200006ac
  400ec0:	411ce80a 	.word	0x411ce80a

00400ec4 <mpu_log_settings>:

    return norm_accel;
}

void mpu_log_settings(void)
{
  400ec4:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400ec6:	f7ff fdfd 	bl	400ac4 <mpu_who_am_i>
  400eca:	4601      	mov	r1, r0
  400ecc:	482b      	ldr	r0, [pc, #172]	; (400f7c <mpu_log_settings+0xb8>)
  400ece:	f002 fb89 	bl	4035e4 <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400ed2:	f7ff feab 	bl	400c2c <mpu_get_sleep_enabled>
  400ed6:	492a      	ldr	r1, [pc, #168]	; (400f80 <mpu_log_settings+0xbc>)
  400ed8:	4a2a      	ldr	r2, [pc, #168]	; (400f84 <mpu_log_settings+0xc0>)
  400eda:	2800      	cmp	r0, #0
  400edc:	bf18      	it	ne
  400ede:	4611      	movne	r1, r2
  400ee0:	4829      	ldr	r0, [pc, #164]	; (400f88 <mpu_log_settings+0xc4>)
  400ee2:	f002 fb7f 	bl	4035e4 <iprintf>
    printf("Clock Source: ");
  400ee6:	4829      	ldr	r0, [pc, #164]	; (400f8c <mpu_log_settings+0xc8>)
  400ee8:	f002 fb7c 	bl	4035e4 <iprintf>
    switch (mpu_get_clock_source()) {
  400eec:	f7ff fdfc 	bl	400ae8 <mpu_get_clock_source>
  400ef0:	b110      	cbz	r0, 400ef8 <mpu_log_settings+0x34>
  400ef2:	2801      	cmp	r0, #1
  400ef4:	d004      	beq.n	400f00 <mpu_log_settings+0x3c>
  400ef6:	e006      	b.n	400f06 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400ef8:	4825      	ldr	r0, [pc, #148]	; (400f90 <mpu_log_settings+0xcc>)
  400efa:	f002 fb73 	bl	4035e4 <iprintf>
        break;
  400efe:	e002      	b.n	400f06 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400f00:	4824      	ldr	r0, [pc, #144]	; (400f94 <mpu_log_settings+0xd0>)
  400f02:	f002 fb6f 	bl	4035e4 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400f06:	4824      	ldr	r0, [pc, #144]	; (400f98 <mpu_log_settings+0xd4>)
  400f08:	f002 fb6c 	bl	4035e4 <iprintf>
        switch (mpu_get_gyro_scale()) {
  400f0c:	f7ff fe22 	bl	400b54 <mpu_get_gyro_scale>
  400f10:	2803      	cmp	r0, #3
  400f12:	d812      	bhi.n	400f3a <mpu_log_settings+0x76>
  400f14:	e8df f000 	tbb	[pc, r0]
  400f18:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400f1c:	481f      	ldr	r0, [pc, #124]	; (400f9c <mpu_log_settings+0xd8>)
  400f1e:	f002 fb61 	bl	4035e4 <iprintf>
        break;
  400f22:	e00a      	b.n	400f3a <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400f24:	481e      	ldr	r0, [pc, #120]	; (400fa0 <mpu_log_settings+0xdc>)
  400f26:	f002 fb5d 	bl	4035e4 <iprintf>
        break;
  400f2a:	e006      	b.n	400f3a <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400f2c:	481d      	ldr	r0, [pc, #116]	; (400fa4 <mpu_log_settings+0xe0>)
  400f2e:	f002 fb59 	bl	4035e4 <iprintf>
        break;
  400f32:	e002      	b.n	400f3a <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400f34:	481c      	ldr	r0, [pc, #112]	; (400fa8 <mpu_log_settings+0xe4>)
  400f36:	f002 fb55 	bl	4035e4 <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400f3a:	4b1c      	ldr	r3, [pc, #112]	; (400fac <mpu_log_settings+0xe8>)
  400f3c:	7819      	ldrb	r1, [r3, #0]
  400f3e:	481c      	ldr	r0, [pc, #112]	; (400fb0 <mpu_log_settings+0xec>)
  400f40:	f002 fb50 	bl	4035e4 <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400f44:	4b1b      	ldr	r3, [pc, #108]	; (400fb4 <mpu_log_settings+0xf0>)
  400f46:	6818      	ldr	r0, [r3, #0]
  400f48:	f006 f81e 	bl	406f88 <__aeabi_f2d>
  400f4c:	4602      	mov	r2, r0
  400f4e:	460b      	mov	r3, r1
  400f50:	4819      	ldr	r0, [pc, #100]	; (400fb8 <mpu_log_settings+0xf4>)
  400f52:	f002 fb47 	bl	4035e4 <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400f56:	4b19      	ldr	r3, [pc, #100]	; (400fbc <mpu_log_settings+0xf8>)
  400f58:	6818      	ldr	r0, [r3, #0]
  400f5a:	f006 f815 	bl	406f88 <__aeabi_f2d>
  400f5e:	4602      	mov	r2, r0
  400f60:	460b      	mov	r3, r1
  400f62:	4817      	ldr	r0, [pc, #92]	; (400fc0 <mpu_log_settings+0xfc>)
  400f64:	f002 fb3e 	bl	4035e4 <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400f68:	4b16      	ldr	r3, [pc, #88]	; (400fc4 <mpu_log_settings+0x100>)
  400f6a:	6818      	ldr	r0, [r3, #0]
  400f6c:	f006 f80c 	bl	406f88 <__aeabi_f2d>
  400f70:	4602      	mov	r2, r0
  400f72:	460b      	mov	r3, r1
  400f74:	4814      	ldr	r0, [pc, #80]	; (400fc8 <mpu_log_settings+0x104>)
  400f76:	f002 fb35 	bl	4035e4 <iprintf>
  400f7a:	bd08      	pop	{r3, pc}
  400f7c:	00407f3c 	.word	0x00407f3c
  400f80:	00407f30 	.word	0x00407f30
  400f84:	00407f28 	.word	0x00407f28
  400f88:	00407f4c 	.word	0x00407f4c
  400f8c:	00407f60 	.word	0x00407f60
  400f90:	00407f70 	.word	0x00407f70
  400f94:	00407f8c 	.word	0x00407f8c
  400f98:	00407fb4 	.word	0x00407fb4
  400f9c:	00407fc0 	.word	0x00407fc0
  400fa0:	00407fcc 	.word	0x00407fcc
  400fa4:	00407fd8 	.word	0x00407fd8
  400fa8:	00407fe4 	.word	0x00407fe4
  400fac:	2000043c 	.word	0x2000043c
  400fb0:	00407ff0 	.word	0x00407ff0
  400fb4:	20000444 	.word	0x20000444
  400fb8:	00408004 	.word	0x00408004
  400fbc:	20000438 	.word	0x20000438
  400fc0:	0040801c 	.word	0x0040801c
  400fc4:	20000428 	.word	0x20000428
  400fc8:	00408030 	.word	0x00408030

00400fcc <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  400fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  400fce:	4604      	mov	r4, r0
  400fd0:	b1d8      	cbz	r0, 40100a <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  400fd2:	4b13      	ldr	r3, [pc, #76]	; (401020 <mpu_set_threshold+0x54>)
  400fd4:	781b      	ldrb	r3, [r3, #0]
  400fd6:	b913      	cbnz	r3, 400fde <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  400fd8:	2032      	movs	r0, #50	; 0x32
  400fda:	f000 f829 	bl	401030 <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  400fde:	4620      	mov	r0, r4
  400fe0:	f006 fc28 	bl	407834 <__aeabi_i2f>
  400fe4:	4607      	mov	r7, r0
  400fe6:	4d0f      	ldr	r5, [pc, #60]	; (401024 <mpu_set_threshold+0x58>)
  400fe8:	4e0f      	ldr	r6, [pc, #60]	; (401028 <mpu_set_threshold+0x5c>)
  400fea:	4601      	mov	r1, r0
  400fec:	6830      	ldr	r0, [r6, #0]
  400fee:	f006 fc75 	bl	4078dc <__aeabi_fmul>
  400ff2:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  400ff4:	4639      	mov	r1, r7
  400ff6:	6870      	ldr	r0, [r6, #4]
  400ff8:	f006 fc70 	bl	4078dc <__aeabi_fmul>
  400ffc:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  400ffe:	4639      	mov	r1, r7
  401000:	68b0      	ldr	r0, [r6, #8]
  401002:	f006 fc6b 	bl	4078dc <__aeabi_fmul>
  401006:	60a8      	str	r0, [r5, #8]
  401008:	e004      	b.n	401014 <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  40100a:	4b06      	ldr	r3, [pc, #24]	; (401024 <mpu_set_threshold+0x58>)
  40100c:	2200      	movs	r2, #0
  40100e:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  401010:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  401012:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  401014:	4620      	mov	r0, r4
  401016:	f006 fc09 	bl	40782c <__aeabi_ui2f>
  40101a:	4b04      	ldr	r3, [pc, #16]	; (40102c <mpu_set_threshold+0x60>)
  40101c:	6018      	str	r0, [r3, #0]
  40101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401020:	2000043c 	.word	0x2000043c
  401024:	20000684 	.word	0x20000684
  401028:	20000508 	.word	0x20000508
  40102c:	20000444 	.word	0x20000444

00401030 <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  401030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401034:	b085      	sub	sp, #20
	use_calibrate = true;
  401036:	2201      	movs	r2, #1
  401038:	4b5e      	ldr	r3, [pc, #376]	; (4011b4 <mpu_calibrate_gyro+0x184>)
  40103a:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  40103c:	4681      	mov	r9, r0
  40103e:	2800      	cmp	r0, #0
  401040:	d048      	beq.n	4010d4 <mpu_calibrate_gyro+0xa4>
  401042:	2400      	movs	r4, #0
  401044:	f04f 0a00 	mov.w	sl, #0
  401048:	46d3      	mov	fp, sl
  40104a:	f8cd a00c 	str.w	sl, [sp, #12]
  40104e:	f8cd a008 	str.w	sl, [sp, #8]
  401052:	f8cd a004 	str.w	sl, [sp, #4]
  401056:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  40105a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 4011c8 <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  40105e:	f7ff fe11 	bl	400c84 <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  401062:	f8d8 7000 	ldr.w	r7, [r8]
  401066:	4639      	mov	r1, r7
  401068:	9800      	ldr	r0, [sp, #0]
  40106a:	f006 fb2f 	bl	4076cc <__addsf3>
  40106e:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  401070:	f8d8 6004 	ldr.w	r6, [r8, #4]
  401074:	4631      	mov	r1, r6
  401076:	9801      	ldr	r0, [sp, #4]
  401078:	f006 fb28 	bl	4076cc <__addsf3>
  40107c:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  40107e:	f8d8 5008 	ldr.w	r5, [r8, #8]
  401082:	4629      	mov	r1, r5
  401084:	9802      	ldr	r0, [sp, #8]
  401086:	f006 fb21 	bl	4076cc <__addsf3>
  40108a:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  40108c:	4639      	mov	r1, r7
  40108e:	4638      	mov	r0, r7
  401090:	f006 fc24 	bl	4078dc <__aeabi_fmul>
  401094:	4601      	mov	r1, r0
  401096:	9803      	ldr	r0, [sp, #12]
  401098:	f006 fb18 	bl	4076cc <__addsf3>
  40109c:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  40109e:	4631      	mov	r1, r6
  4010a0:	4630      	mov	r0, r6
  4010a2:	f006 fc1b 	bl	4078dc <__aeabi_fmul>
  4010a6:	4601      	mov	r1, r0
  4010a8:	4658      	mov	r0, fp
  4010aa:	f006 fb0f 	bl	4076cc <__addsf3>
  4010ae:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  4010b0:	4629      	mov	r1, r5
  4010b2:	4628      	mov	r0, r5
  4010b4:	f006 fc12 	bl	4078dc <__aeabi_fmul>
  4010b8:	4601      	mov	r1, r0
  4010ba:	4650      	mov	r0, sl
  4010bc:	f006 fb06 	bl	4076cc <__addsf3>
  4010c0:	4682      	mov	sl, r0

		delay_ms(5);
  4010c2:	f24a 706a 	movw	r0, #42858	; 0xa76a
  4010c6:	f007 f9bf 	bl	408448 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  4010ca:	3401      	adds	r4, #1
  4010cc:	b2e4      	uxtb	r4, r4
  4010ce:	45a1      	cmp	r9, r4
  4010d0:	d1c5      	bne.n	40105e <mpu_calibrate_gyro+0x2e>
  4010d2:	e00a      	b.n	4010ea <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  4010d4:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  4010d8:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  4010da:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  4010de:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  4010e2:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  4010e6:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  4010ea:	4648      	mov	r0, r9
  4010ec:	f006 fba2 	bl	407834 <__aeabi_i2f>
  4010f0:	4605      	mov	r5, r0
  4010f2:	4601      	mov	r1, r0
  4010f4:	9800      	ldr	r0, [sp, #0]
  4010f6:	f006 fca5 	bl	407a44 <__aeabi_fdiv>
  4010fa:	4606      	mov	r6, r0
  4010fc:	4c2e      	ldr	r4, [pc, #184]	; (4011b8 <mpu_calibrate_gyro+0x188>)
  4010fe:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  401100:	4629      	mov	r1, r5
  401102:	9801      	ldr	r0, [sp, #4]
  401104:	f006 fc9e 	bl	407a44 <__aeabi_fdiv>
  401108:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  40110a:	4629      	mov	r1, r5
  40110c:	9802      	ldr	r0, [sp, #8]
  40110e:	f006 fc99 	bl	407a44 <__aeabi_fdiv>
  401112:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  401114:	9f03      	ldr	r7, [sp, #12]
  401116:	4929      	ldr	r1, [pc, #164]	; (4011bc <mpu_calibrate_gyro+0x18c>)
  401118:	4638      	mov	r0, r7
  40111a:	f006 fc93 	bl	407a44 <__aeabi_fdiv>
  40111e:	4605      	mov	r5, r0
  401120:	4631      	mov	r1, r6
  401122:	4630      	mov	r0, r6
  401124:	f006 fbda 	bl	4078dc <__aeabi_fmul>
  401128:	4601      	mov	r1, r0
  40112a:	4628      	mov	r0, r5
  40112c:	f006 facc 	bl	4076c8 <__aeabi_fsub>
  401130:	f005 ff2a 	bl	406f88 <__aeabi_f2d>
  401134:	f001 fa14 	bl	402560 <sqrt>
  401138:	4e21      	ldr	r6, [pc, #132]	; (4011c0 <mpu_calibrate_gyro+0x190>)
  40113a:	f006 fa71 	bl	407620 <__aeabi_d2f>
  40113e:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  401140:	6865      	ldr	r5, [r4, #4]
  401142:	491e      	ldr	r1, [pc, #120]	; (4011bc <mpu_calibrate_gyro+0x18c>)
  401144:	4658      	mov	r0, fp
  401146:	f006 fc7d 	bl	407a44 <__aeabi_fdiv>
  40114a:	4607      	mov	r7, r0
  40114c:	4629      	mov	r1, r5
  40114e:	4628      	mov	r0, r5
  401150:	f006 fbc4 	bl	4078dc <__aeabi_fmul>
  401154:	4601      	mov	r1, r0
  401156:	4638      	mov	r0, r7
  401158:	f006 fab6 	bl	4076c8 <__aeabi_fsub>
  40115c:	f005 ff14 	bl	406f88 <__aeabi_f2d>
  401160:	f001 f9fe 	bl	402560 <sqrt>
  401164:	f006 fa5c 	bl	407620 <__aeabi_d2f>
  401168:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  40116a:	68a4      	ldr	r4, [r4, #8]
  40116c:	4913      	ldr	r1, [pc, #76]	; (4011bc <mpu_calibrate_gyro+0x18c>)
  40116e:	4650      	mov	r0, sl
  401170:	f006 fc68 	bl	407a44 <__aeabi_fdiv>
  401174:	4605      	mov	r5, r0
  401176:	4621      	mov	r1, r4
  401178:	4620      	mov	r0, r4
  40117a:	f006 fbaf 	bl	4078dc <__aeabi_fmul>
  40117e:	4601      	mov	r1, r0
  401180:	4628      	mov	r0, r5
  401182:	f006 faa1 	bl	4076c8 <__aeabi_fsub>
  401186:	f005 feff 	bl	406f88 <__aeabi_f2d>
  40118a:	f001 f9e9 	bl	402560 <sqrt>
  40118e:	f006 fa47 	bl	407620 <__aeabi_d2f>
  401192:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  401194:	4b0b      	ldr	r3, [pc, #44]	; (4011c4 <mpu_calibrate_gyro+0x194>)
  401196:	681c      	ldr	r4, [r3, #0]
  401198:	2100      	movs	r1, #0
  40119a:	4620      	mov	r0, r4
  40119c:	f006 fd5a 	bl	407c54 <__aeabi_fcmpgt>
  4011a0:	b128      	cbz	r0, 4011ae <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  4011a2:	4620      	mov	r0, r4
  4011a4:	f006 fd86 	bl	407cb4 <__aeabi_f2uiz>
  4011a8:	b2c0      	uxtb	r0, r0
  4011aa:	f7ff ff0f 	bl	400fcc <mpu_set_threshold>
	}

}
  4011ae:	b005      	add	sp, #20
  4011b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011b4:	2000043c 	.word	0x2000043c
  4011b8:	200006b8 	.word	0x200006b8
  4011bc:	42480000 	.word	0x42480000
  4011c0:	20000508 	.word	0x20000508
  4011c4:	20000444 	.word	0x20000444
  4011c8:	20000514 	.word	0x20000514

004011cc <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  4011cc:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  4011ce:	4b0c      	ldr	r3, [pc, #48]	; (401200 <imu_init+0x34>)
  4011d0:	2200      	movs	r2, #0
  4011d2:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  4011d4:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  4011d6:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  4011d8:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  4011da:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  4011dc:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  4011de:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  4011e0:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  4011e2:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  4011e4:	f7ff fc26 	bl	400a34 <mpu_init>
  4011e8:	4604      	mov	r4, r0
  4011ea:	f7ff fc4d 	bl	400a88 <mpu_probe>
  4011ee:	4020      	ands	r0, r4
  4011f0:	b2c4      	uxtb	r4, r0
  4011f2:	2100      	movs	r1, #0
  4011f4:	4608      	mov	r0, r1
  4011f6:	f7ff fceb 	bl	400bd0 <mpu_begin>
}
  4011fa:	4020      	ands	r0, r4
  4011fc:	bd10      	pop	{r4, pc}
  4011fe:	bf00      	nop
  401200:	20000804 	.word	0x20000804

00401204 <imu_calibrate>:

void imu_calibrate(void)
{
  401204:	b508      	push	{r3, lr}
    printf("calibrating imu...\r\n");
  401206:	4807      	ldr	r0, [pc, #28]	; (401224 <imu_calibrate+0x20>)
  401208:	f002 f9ec 	bl	4035e4 <iprintf>
    mpu_calibrate_gyro(GYRO_SAMPLES);
  40120c:	2032      	movs	r0, #50	; 0x32
  40120e:	f7ff ff0f 	bl	401030 <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  401212:	2000      	movs	r0, #0
  401214:	f7ff feda 	bl	400fcc <mpu_set_threshold>
    mpu_log_settings();
  401218:	f7ff fe54 	bl	400ec4 <mpu_log_settings>
    printf("calibration complete.\r\n");
  40121c:	4802      	ldr	r0, [pc, #8]	; (401228 <imu_calibrate+0x24>)
  40121e:	f002 f9e1 	bl	4035e4 <iprintf>
  401222:	bd08      	pop	{r3, pc}
  401224:	00408048 	.word	0x00408048
  401228:	00408060 	.word	0x00408060
  40122c:	00000000 	.word	0x00000000

00401230 <imu_tick>:
}

void imu_tick(void)
{
  401230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401234:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  401236:	4b82      	ldr	r3, [pc, #520]	; (401440 <imu_tick+0x210>)
  401238:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  40123a:	a808      	add	r0, sp, #32
  40123c:	f7ff fd44 	bl	400cc8 <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  401240:	f7ff fe18 	bl	400e74 <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  401244:	4c7f      	ldr	r4, [pc, #508]	; (401444 <imu_tick+0x214>)
  401246:	6820      	ldr	r0, [r4, #0]
  401248:	f005 fe9e 	bl	406f88 <__aeabi_f2d>
  40124c:	a37a      	add	r3, pc, #488	; (adr r3, 401438 <imu_tick+0x208>)
  40124e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401252:	f005 feed 	bl	407030 <__aeabi_dmul>
  401256:	2200      	movs	r2, #0
  401258:	4b7b      	ldr	r3, [pc, #492]	; (401448 <imu_tick+0x218>)
  40125a:	f006 f813 	bl	407284 <__aeabi_ddiv>
  40125e:	f006 f9df 	bl	407620 <__aeabi_d2f>
  401262:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  401264:	6860      	ldr	r0, [r4, #4]
  401266:	f005 fe8f 	bl	406f88 <__aeabi_f2d>
  40126a:	a373      	add	r3, pc, #460	; (adr r3, 401438 <imu_tick+0x208>)
  40126c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401270:	f005 fede 	bl	407030 <__aeabi_dmul>
  401274:	2200      	movs	r2, #0
  401276:	4b74      	ldr	r3, [pc, #464]	; (401448 <imu_tick+0x218>)
  401278:	f006 f804 	bl	407284 <__aeabi_ddiv>
  40127c:	f006 f9d0 	bl	407620 <__aeabi_d2f>
  401280:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  401282:	68a0      	ldr	r0, [r4, #8]
  401284:	f005 fe80 	bl	406f88 <__aeabi_f2d>
  401288:	a36b      	add	r3, pc, #428	; (adr r3, 401438 <imu_tick+0x208>)
  40128a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40128e:	f005 fecf 	bl	407030 <__aeabi_dmul>
  401292:	2200      	movs	r2, #0
  401294:	4b6c      	ldr	r3, [pc, #432]	; (401448 <imu_tick+0x218>)
  401296:	f005 fff5 	bl	407284 <__aeabi_ddiv>
  40129a:	f006 f9c1 	bl	407620 <__aeabi_d2f>
  40129e:	9007      	str	r0, [sp, #28]



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  4012a0:	4c6a      	ldr	r4, [pc, #424]	; (40144c <imu_tick+0x21c>)
  4012a2:	6820      	ldr	r0, [r4, #0]
  4012a4:	f005 fe70 	bl	406f88 <__aeabi_f2d>
  4012a8:	e9cd 0100 	strd	r0, r1, [sp]
  4012ac:	6860      	ldr	r0, [r4, #4]
  4012ae:	f005 fe6b 	bl	406f88 <__aeabi_f2d>
  4012b2:	4682      	mov	sl, r0
  4012b4:	468b      	mov	fp, r1
  4012b6:	68a0      	ldr	r0, [r4, #8]
  4012b8:	f005 fe66 	bl	406f88 <__aeabi_f2d>
  4012bc:	4606      	mov	r6, r0
  4012be:	460f      	mov	r7, r1
  4012c0:	4632      	mov	r2, r6
  4012c2:	463b      	mov	r3, r7
  4012c4:	4630      	mov	r0, r6
  4012c6:	4639      	mov	r1, r7
  4012c8:	f005 feb2 	bl	407030 <__aeabi_dmul>
  4012cc:	4680      	mov	r8, r0
  4012ce:	4689      	mov	r9, r1
  4012d0:	4652      	mov	r2, sl
  4012d2:	465b      	mov	r3, fp
  4012d4:	4650      	mov	r0, sl
  4012d6:	4659      	mov	r1, fp
  4012d8:	f005 feaa 	bl	407030 <__aeabi_dmul>
  4012dc:	4602      	mov	r2, r0
  4012de:	460b      	mov	r3, r1
  4012e0:	4640      	mov	r0, r8
  4012e2:	4649      	mov	r1, r9
  4012e4:	f005 fcf2 	bl	406ccc <__adddf3>
  4012e8:	f001 f93a 	bl	402560 <sqrt>
  4012ec:	4602      	mov	r2, r0
  4012ee:	460b      	mov	r3, r1
  4012f0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4012f4:	f001 f932 	bl	40255c <atan2>
  4012f8:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  4012fc:	6860      	ldr	r0, [r4, #4]
  4012fe:	f005 fe43 	bl	406f88 <__aeabi_f2d>
  401302:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401306:	6820      	ldr	r0, [r4, #0]
  401308:	f005 fe3e 	bl	406f88 <__aeabi_f2d>
  40130c:	4682      	mov	sl, r0
  40130e:	468b      	mov	fp, r1
  401310:	68a0      	ldr	r0, [r4, #8]
  401312:	f005 fe39 	bl	406f88 <__aeabi_f2d>
  401316:	4606      	mov	r6, r0
  401318:	460f      	mov	r7, r1
  40131a:	4652      	mov	r2, sl
  40131c:	465b      	mov	r3, fp
  40131e:	4650      	mov	r0, sl
  401320:	4659      	mov	r1, fp
  401322:	f005 fe85 	bl	407030 <__aeabi_dmul>
  401326:	4680      	mov	r8, r0
  401328:	4689      	mov	r9, r1
  40132a:	4632      	mov	r2, r6
  40132c:	463b      	mov	r3, r7
  40132e:	4630      	mov	r0, r6
  401330:	4639      	mov	r1, r7
  401332:	f005 fe7d 	bl	407030 <__aeabi_dmul>
  401336:	4602      	mov	r2, r0
  401338:	460b      	mov	r3, r1
  40133a:	4640      	mov	r0, r8
  40133c:	4649      	mov	r1, r9
  40133e:	f005 fcc5 	bl	406ccc <__adddf3>
  401342:	f001 f90d 	bl	402560 <sqrt>
  401346:	4602      	mov	r2, r0
  401348:	460b      	mov	r3, r1
  40134a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40134e:	f001 f905 	bl	40255c <atan2>
  401352:	4680      	mov	r8, r0
  401354:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  401356:	f8df a118 	ldr.w	sl, [pc, #280]	; 401470 <imu_tick+0x240>
    float dt = ((float)delta_t/1000.0f);
  40135a:	f8da 0000 	ldr.w	r0, [sl]
  40135e:	1a28      	subs	r0, r5, r0
  401360:	f006 fa64 	bl	40782c <__aeabi_ui2f>
  401364:	493a      	ldr	r1, [pc, #232]	; (401450 <imu_tick+0x220>)
  401366:	f006 fb6d 	bl	407a44 <__aeabi_fdiv>
  40136a:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  40136c:	4601      	mov	r1, r0
  40136e:	9805      	ldr	r0, [sp, #20]
  401370:	f006 fab4 	bl	4078dc <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  401374:	4f37      	ldr	r7, [pc, #220]	; (401454 <imu_tick+0x224>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  401376:	6839      	ldr	r1, [r7, #0]
  401378:	f006 f9a8 	bl	4076cc <__addsf3>
  40137c:	4936      	ldr	r1, [pc, #216]	; (401458 <imu_tick+0x228>)
  40137e:	f006 faad 	bl	4078dc <__aeabi_fmul>
  401382:	4683      	mov	fp, r0
  401384:	2200      	movs	r2, #0
  401386:	4b30      	ldr	r3, [pc, #192]	; (401448 <imu_tick+0x218>)
  401388:	4640      	mov	r0, r8
  40138a:	4649      	mov	r1, r9
  40138c:	f005 fe50 	bl	407030 <__aeabi_dmul>
  401390:	a329      	add	r3, pc, #164	; (adr r3, 401438 <imu_tick+0x208>)
  401392:	e9d3 2300 	ldrd	r2, r3, [r3]
  401396:	f005 ff75 	bl	407284 <__aeabi_ddiv>
  40139a:	f006 f941 	bl	407620 <__aeabi_d2f>
  40139e:	492f      	ldr	r1, [pc, #188]	; (40145c <imu_tick+0x22c>)
  4013a0:	f006 fa9c 	bl	4078dc <__aeabi_fmul>
  4013a4:	4601      	mov	r1, r0
  4013a6:	4658      	mov	r0, fp
  4013a8:	f006 f990 	bl	4076cc <__addsf3>
  4013ac:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  4013ae:	4621      	mov	r1, r4
  4013b0:	9806      	ldr	r0, [sp, #24]
  4013b2:	f006 fa93 	bl	4078dc <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  4013b6:	4e2a      	ldr	r6, [pc, #168]	; (401460 <imu_tick+0x230>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  4013b8:	6831      	ldr	r1, [r6, #0]
  4013ba:	f006 f987 	bl	4076cc <__addsf3>
  4013be:	4926      	ldr	r1, [pc, #152]	; (401458 <imu_tick+0x228>)
  4013c0:	f006 fa8c 	bl	4078dc <__aeabi_fmul>
  4013c4:	4681      	mov	r9, r0
  4013c6:	2200      	movs	r2, #0
  4013c8:	4b1f      	ldr	r3, [pc, #124]	; (401448 <imu_tick+0x218>)
  4013ca:	e9dd 0100 	ldrd	r0, r1, [sp]
  4013ce:	f005 fe2f 	bl	407030 <__aeabi_dmul>
  4013d2:	a319      	add	r3, pc, #100	; (adr r3, 401438 <imu_tick+0x208>)
  4013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013d8:	f005 ff54 	bl	407284 <__aeabi_ddiv>
  4013dc:	f006 f920 	bl	407620 <__aeabi_d2f>
  4013e0:	491e      	ldr	r1, [pc, #120]	; (40145c <imu_tick+0x22c>)
  4013e2:	f006 fa7b 	bl	4078dc <__aeabi_fmul>
  4013e6:	4601      	mov	r1, r0
  4013e8:	4648      	mov	r0, r9
  4013ea:	f006 f96f 	bl	4076cc <__addsf3>
  4013ee:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  4013f0:	4621      	mov	r1, r4
  4013f2:	9807      	ldr	r0, [sp, #28]
  4013f4:	f006 fa72 	bl	4078dc <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  4013f8:	4c1a      	ldr	r4, [pc, #104]	; (401464 <imu_tick+0x234>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  4013fa:	6821      	ldr	r1, [r4, #0]
  4013fc:	f006 f966 	bl	4076cc <__addsf3>
  401400:	4915      	ldr	r1, [pc, #84]	; (401458 <imu_tick+0x228>)
  401402:	f006 fa6b 	bl	4078dc <__aeabi_fmul>
  401406:	2100      	movs	r1, #0
  401408:	f006 f960 	bl	4076cc <__addsf3>


    last_time_read = t_now;
  40140c:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  401410:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  401414:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  401418:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  40141a:	4b13      	ldr	r3, [pc, #76]	; (401468 <imu_tick+0x238>)
  40141c:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  401420:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  401424:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  401426:	4b11      	ldr	r3, [pc, #68]	; (40146c <imu_tick+0x23c>)
  401428:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  40142c:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  401430:	6098      	str	r0, [r3, #8]


  401432:	b00d      	add	sp, #52	; 0x34
  401434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401438:	54442d18 	.word	0x54442d18
  40143c:	400921fb 	.word	0x400921fb
  401440:	20000208 	.word	0x20000208
  401444:	200006c8 	.word	0x200006c8
  401448:	40668000 	.word	0x40668000
  40144c:	2000069c 	.word	0x2000069c
  401450:	447a0000 	.word	0x447a0000
  401454:	20000430 	.word	0x20000430
  401458:	3f75c28f 	.word	0x3f75c28f
  40145c:	3d23d710 	.word	0x3d23d710
  401460:	20000434 	.word	0x20000434
  401464:	20000440 	.word	0x20000440
  401468:	20000828 	.word	0x20000828
  40146c:	20000804 	.word	0x20000804
  401470:	2000042c 	.word	0x2000042c

00401474 <motor_config_pins>:
	motors[1].angle_max = AP_ANGLE_MAX;
	motors[1].timeout = 1000;
}

void motor_config_pins(motor_config_t motor_cfg)
{
  401474:	b084      	sub	sp, #16
  401476:	b538      	push	{r3, r4, r5, lr}
  401478:	ac04      	add	r4, sp, #16
  40147a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_configure_pin(motor_cfg.ul_pin, motor_cfg.ul_flag);
  40147e:	9906      	ldr	r1, [sp, #24]
  401480:	9805      	ldr	r0, [sp, #20]
  401482:	f000 fc15 	bl	401cb0 <pio_configure_pin>

	pmc_enable_periph_clk(motor_cfg.ul_periph_clkid);
  401486:	9807      	ldr	r0, [sp, #28]
  401488:	f000 fdc4 	bl	402014 <pmc_enable_periph_clk>

	pwm_channel_disable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  40148c:	ad04      	add	r5, sp, #16
  40148e:	9908      	ldr	r1, [sp, #32]
  401490:	f855 0b14 	ldr.w	r0, [r5], #20
  401494:	f000 ff0a 	bl	4022ac <pwm_channel_disable>
	pwm_init(motor_cfg.p_pwm, &motor_cfg.clock_setting);
  401498:	ac04      	add	r4, sp, #16
  40149a:	4629      	mov	r1, r5
  40149c:	f854 0b20 	ldr.w	r0, [r4], #32
  4014a0:	f000 fe58 	bl	402154 <pwm_init>

	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
  4014a4:	4621      	mov	r1, r4
  4014a6:	9804      	ldr	r0, [sp, #16]
  4014a8:	f000 fe78 	bl	40219c <pwm_channel_init>
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  4014ac:	9908      	ldr	r1, [sp, #32]
  4014ae:	9804      	ldr	r0, [sp, #16]
  4014b0:	f000 fef6 	bl	4022a0 <pwm_channel_enable>
}
  4014b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4014b8:	b004      	add	sp, #16
  4014ba:	4770      	bx	lr

004014bc <motor_init>:
uint32_t motor_current_duty = 0;
void motor_config_pins(motor_config_t motor_cfg);


void motor_init(void)
{
  4014bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014c0:	b0b3      	sub	sp, #204	; 0xcc
	printf("motor_init\r\n");
  4014c2:	485b      	ldr	r0, [pc, #364]	; (401630 <motor_init+0x174>)
  4014c4:	f002 f88e 	bl	4035e4 <iprintf>
        .ul_clka = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_mck = sysclk_get_cpu_hz()
	};

	motor_config_t motor_cfg0 = {
  4014c8:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  4014cc:	2248      	movs	r2, #72	; 0x48
  4014ce:	2100      	movs	r1, #0
  4014d0:	4648      	mov	r0, r9
  4014d2:	f001 fc10 	bl	402cf6 <memset>
		.pwm_channel.ul_period = MOTOR_PWM_PERIOD_TICKS,
		.pwm_channel.ul_duty = MOTOR_PWM_MIN,
		.pwm_channel.channel = EXT1_PWM_CHANNEL
	};

	motor_config_t motor_cfg1 = {
  4014d6:	2248      	movs	r2, #72	; 0x48
  4014d8:	2100      	movs	r1, #0
  4014da:	a80e      	add	r0, sp, #56	; 0x38
  4014dc:	f001 fc0b 	bl	402cf6 <memset>
	};

	


	motor_config_pins(motor_cfg0);
  4014e0:	4b54      	ldr	r3, [pc, #336]	; (401634 <motor_init+0x178>)
  4014e2:	9320      	str	r3, [sp, #128]	; 0x80
  4014e4:	2417      	movs	r4, #23
  4014e6:	9421      	str	r4, [sp, #132]	; 0x84
  4014e8:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  4014ec:	9722      	str	r7, [sp, #136]	; 0x88
  4014ee:	231f      	movs	r3, #31
  4014f0:	9323      	str	r3, [sp, #140]	; 0x8c
  4014f2:	4e51      	ldr	r6, [pc, #324]	; (401638 <motor_init+0x17c>)
  4014f4:	9625      	str	r6, [sp, #148]	; 0x94
  4014f6:	9626      	str	r6, [sp, #152]	; 0x98
  4014f8:	4b50      	ldr	r3, [pc, #320]	; (40163c <motor_init+0x180>)
  4014fa:	9327      	str	r3, [sp, #156]	; 0x9c
  4014fc:	f04f 080b 	mov.w	r8, #11
  401500:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  401504:	2501      	movs	r5, #1
  401506:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  40150a:	f240 4a7e 	movw	sl, #1150	; 0x47e
  40150e:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  401512:	f644 6b20 	movw	fp, #20000	; 0x4e20
  401516:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  40151a:	46ee      	mov	lr, sp
  40151c:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
  401520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401524:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401528:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40152c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401530:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401534:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401538:	e89c 0003 	ldmia.w	ip, {r0, r1}
  40153c:	e88e 0003 	stmia.w	lr, {r0, r1}
  401540:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  401544:	f7ff ff96 	bl	401474 <motor_config_pins>
	motor_config_pins(motor_cfg1);
  401548:	4b3a      	ldr	r3, [pc, #232]	; (401634 <motor_init+0x178>)
  40154a:	930e      	str	r3, [sp, #56]	; 0x38
  40154c:	2353      	movs	r3, #83	; 0x53
  40154e:	930f      	str	r3, [sp, #60]	; 0x3c
  401550:	9710      	str	r7, [sp, #64]	; 0x40
  401552:	231f      	movs	r3, #31
  401554:	9311      	str	r3, [sp, #68]	; 0x44
  401556:	9512      	str	r5, [sp, #72]	; 0x48
  401558:	9613      	str	r6, [sp, #76]	; 0x4c
  40155a:	9614      	str	r6, [sp, #80]	; 0x50
  40155c:	4b37      	ldr	r3, [pc, #220]	; (40163c <motor_init+0x180>)
  40155e:	9315      	str	r3, [sp, #84]	; 0x54
  401560:	9516      	str	r5, [sp, #88]	; 0x58
  401562:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  401566:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  40156a:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  40156e:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  401572:	46ee      	mov	lr, sp
  401574:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  401578:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40157c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401580:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401584:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401588:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40158c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401590:	e89c 0003 	ldmia.w	ip, {r0, r1}
  401594:	e88e 0003 	stmia.w	lr, {r0, r1}
  401598:	ab0e      	add	r3, sp, #56	; 0x38
  40159a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40159c:	f7ff ff6a 	bl	401474 <motor_config_pins>

	motors[0].config = motor_cfg0;
  4015a0:	4b24      	ldr	r3, [pc, #144]	; (401634 <motor_init+0x178>)
  4015a2:	9320      	str	r3, [sp, #128]	; 0x80
  4015a4:	9421      	str	r4, [sp, #132]	; 0x84
  4015a6:	9722      	str	r7, [sp, #136]	; 0x88
  4015a8:	231f      	movs	r3, #31
  4015aa:	9323      	str	r3, [sp, #140]	; 0x8c
  4015ac:	9625      	str	r6, [sp, #148]	; 0x94
  4015ae:	9626      	str	r6, [sp, #152]	; 0x98
  4015b0:	4b22      	ldr	r3, [pc, #136]	; (40163c <motor_init+0x180>)
  4015b2:	9327      	str	r3, [sp, #156]	; 0x9c
  4015b4:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  4015b8:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  4015bc:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  4015c0:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  4015c4:	4c1e      	ldr	r4, [pc, #120]	; (401640 <motor_init+0x184>)
  4015c6:	2248      	movs	r2, #72	; 0x48
  4015c8:	4649      	mov	r1, r9
  4015ca:	4620      	mov	r0, r4
  4015cc:	f001 fb88 	bl	402ce0 <memcpy>
	motors[0].angle_min = AP_ANGLE_MIN;
  4015d0:	f06f 0359 	mvn.w	r3, #89	; 0x59
  4015d4:	64a3      	str	r3, [r4, #72]	; 0x48
	motors[0].angle_max = AP_ANGLE_MAX;
  4015d6:	235a      	movs	r3, #90	; 0x5a
  4015d8:	64e3      	str	r3, [r4, #76]	; 0x4c
	motors[0].timeout = 1000;
  4015da:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  4015de:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50

	motors[1].config = motor_cfg1;
  4015e2:	4b14      	ldr	r3, [pc, #80]	; (401634 <motor_init+0x178>)
  4015e4:	930e      	str	r3, [sp, #56]	; 0x38
  4015e6:	2353      	movs	r3, #83	; 0x53
  4015e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4015ea:	9710      	str	r7, [sp, #64]	; 0x40
  4015ec:	231f      	movs	r3, #31
  4015ee:	9311      	str	r3, [sp, #68]	; 0x44
  4015f0:	9512      	str	r5, [sp, #72]	; 0x48
  4015f2:	9613      	str	r6, [sp, #76]	; 0x4c
  4015f4:	9614      	str	r6, [sp, #80]	; 0x50
  4015f6:	4b11      	ldr	r3, [pc, #68]	; (40163c <motor_init+0x180>)
  4015f8:	9315      	str	r3, [sp, #84]	; 0x54
  4015fa:	9516      	str	r5, [sp, #88]	; 0x58
  4015fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  401600:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  401604:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  401608:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  40160c:	2248      	movs	r2, #72	; 0x48
  40160e:	a90e      	add	r1, sp, #56	; 0x38
  401610:	f104 0054 	add.w	r0, r4, #84	; 0x54
  401614:	f001 fb64 	bl	402ce0 <memcpy>
	motors[1].angle_min = AP_ANGLE_MIN;
  401618:	f06f 0359 	mvn.w	r3, #89	; 0x59
  40161c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	motors[1].angle_max = AP_ANGLE_MAX;
  401620:	235a      	movs	r3, #90	; 0x5a
  401622:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	motors[1].timeout = 1000;
  401626:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
}
  40162a:	b033      	add	sp, #204	; 0xcc
  40162c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401630:	00408078 	.word	0x00408078
  401634:	40020000 	.word	0x40020000
  401638:	000f4240 	.word	0x000f4240
  40163c:	07270e00 	.word	0x07270e00
  401640:	20000534 	.word	0x20000534

00401644 <motor_tick>:
	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
}

void motor_tick(void)
{
  401644:	4770      	bx	lr
  401646:	bf00      	nop

00401648 <motor_set_power>:

}

void motor_set_power(motor_t motor, uint32_t power)
{
  401648:	b084      	sub	sp, #16
  40164a:	b508      	push	{r3, lr}
  40164c:	f10d 0e08 	add.w	lr, sp, #8
  401650:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  401654:	9917      	ldr	r1, [sp, #92]	; 0x5c
	motor.config.pwm_channel.ul_duty = power;
  401656:	910d      	str	r1, [sp, #52]	; 0x34
	// printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
	if (config.log_motor) {
  401658:	4b07      	ldr	r3, [pc, #28]	; (401678 <motor_set_power+0x30>)
  40165a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  40165e:	b113      	cbz	r3, 401666 <motor_set_power+0x1e>
		printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
  401660:	4806      	ldr	r0, [pc, #24]	; (40167c <motor_set_power+0x34>)
  401662:	f001 ffbf 	bl	4035e4 <iprintf>
	}
	pwm_channel_update_duty(motor.config.p_pwm, &motor.config.pwm_channel, motor.config.pwm_channel.ul_duty);
  401666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401668:	a90a      	add	r1, sp, #40	; 0x28
  40166a:	9802      	ldr	r0, [sp, #8]
  40166c:	f000 fe0a 	bl	402284 <pwm_channel_update_duty>
}
  401670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  401674:	b004      	add	sp, #16
  401676:	4770      	bx	lr
  401678:	200006d4 	.word	0x200006d4
  40167c:	00408088 	.word	0x00408088

00401680 <motor_min>:

void motor_min(motor_t motor)
{
  401680:	b084      	sub	sp, #16
  401682:	b500      	push	{lr}
  401684:	b093      	sub	sp, #76	; 0x4c
  401686:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  40168a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MIN;
  40168e:	f240 437e 	movw	r3, #1150	; 0x47e
  401692:	4a08      	ldr	r2, [pc, #32]	; (4016b4 <motor_min+0x34>)
  401694:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, MOTOR_PWM_MIN);
  401696:	9311      	str	r3, [sp, #68]	; 0x44
  401698:	2244      	movs	r2, #68	; 0x44
  40169a:	a918      	add	r1, sp, #96	; 0x60
  40169c:	4668      	mov	r0, sp
  40169e:	f001 fb1f 	bl	402ce0 <memcpy>
  4016a2:	ab14      	add	r3, sp, #80	; 0x50
  4016a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4016a6:	f7ff ffcf 	bl	401648 <motor_set_power>
}
  4016aa:	b013      	add	sp, #76	; 0x4c
  4016ac:	f85d eb04 	ldr.w	lr, [sp], #4
  4016b0:	b004      	add	sp, #16
  4016b2:	4770      	bx	lr
  4016b4:	20000448 	.word	0x20000448

004016b8 <motor_mid>:

void motor_mid(motor_t motor)
{
  4016b8:	b084      	sub	sp, #16
  4016ba:	b500      	push	{lr}
  4016bc:	b093      	sub	sp, #76	; 0x4c
  4016be:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  4016c2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MID;
  4016c6:	f240 5346 	movw	r3, #1350	; 0x546
  4016ca:	4a08      	ldr	r2, [pc, #32]	; (4016ec <motor_mid+0x34>)
  4016cc:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  4016ce:	9311      	str	r3, [sp, #68]	; 0x44
  4016d0:	2244      	movs	r2, #68	; 0x44
  4016d2:	a918      	add	r1, sp, #96	; 0x60
  4016d4:	4668      	mov	r0, sp
  4016d6:	f001 fb03 	bl	402ce0 <memcpy>
  4016da:	ab14      	add	r3, sp, #80	; 0x50
  4016dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4016de:	f7ff ffb3 	bl	401648 <motor_set_power>
}
  4016e2:	b013      	add	sp, #76	; 0x4c
  4016e4:	f85d eb04 	ldr.w	lr, [sp], #4
  4016e8:	b004      	add	sp, #16
  4016ea:	4770      	bx	lr
  4016ec:	20000448 	.word	0x20000448

004016f0 <motor_max>:

void motor_max(motor_t motor)
{
  4016f0:	b084      	sub	sp, #16
  4016f2:	b500      	push	{lr}
  4016f4:	b093      	sub	sp, #76	; 0x4c
  4016f6:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  4016fa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MAX;
  4016fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  401702:	4a08      	ldr	r2, [pc, #32]	; (401724 <motor_max+0x34>)
  401704:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, motor_current_duty);
  401706:	9311      	str	r3, [sp, #68]	; 0x44
  401708:	2244      	movs	r2, #68	; 0x44
  40170a:	a918      	add	r1, sp, #96	; 0x60
  40170c:	4668      	mov	r0, sp
  40170e:	f001 fae7 	bl	402ce0 <memcpy>
  401712:	ab14      	add	r3, sp, #80	; 0x50
  401714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401716:	f7ff ff97 	bl	401648 <motor_set_power>
}
  40171a:	b013      	add	sp, #76	; 0x4c
  40171c:	f85d eb04 	ldr.w	lr, [sp], #4
  401720:	b004      	add	sp, #16
  401722:	4770      	bx	lr
  401724:	20000448 	.word	0x20000448

00401728 <pid_init>:
float desired_angle = 0.0f;


void pid_init(void)
{
    time = 0;
  401728:	2300      	movs	r3, #0
  40172a:	4a0a      	ldr	r2, [pc, #40]	; (401754 <pid_init+0x2c>)
  40172c:	6013      	str	r3, [r2, #0]
    previous_time = 0;
  40172e:	4a0a      	ldr	r2, [pc, #40]	; (401758 <pid_init+0x30>)
  401730:	6013      	str	r3, [r2, #0]
    elapsed_time = 0;
  401732:	4a0a      	ldr	r2, [pc, #40]	; (40175c <pid_init+0x34>)
  401734:	6013      	str	r3, [r2, #0]
    pid = 0.0f;
  401736:	2300      	movs	r3, #0
  401738:	4a09      	ldr	r2, [pc, #36]	; (401760 <pid_init+0x38>)
  40173a:	6013      	str	r3, [r2, #0]
    error = 0.0f;
  40173c:	4a09      	ldr	r2, [pc, #36]	; (401764 <pid_init+0x3c>)
  40173e:	6013      	str	r3, [r2, #0]
    previous_error = 0.0f;
  401740:	4a09      	ldr	r2, [pc, #36]	; (401768 <pid_init+0x40>)
  401742:	6013      	str	r3, [r2, #0]
    pid_p = 0.0f;
  401744:	4a09      	ldr	r2, [pc, #36]	; (40176c <pid_init+0x44>)
  401746:	6013      	str	r3, [r2, #0]
    pid_i = 0.0f;
  401748:	4a09      	ldr	r2, [pc, #36]	; (401770 <pid_init+0x48>)
  40174a:	6013      	str	r3, [r2, #0]
    pid_d = 0.0f;
  40174c:	4a09      	ldr	r2, [pc, #36]	; (401774 <pid_init+0x4c>)
  40174e:	6013      	str	r3, [r2, #0]
  401750:	4770      	bx	lr
  401752:	bf00      	nop
  401754:	2000046c 	.word	0x2000046c
  401758:	20000470 	.word	0x20000470
  40175c:	20000474 	.word	0x20000474
  401760:	2000044c 	.word	0x2000044c
  401764:	2000045c 	.word	0x2000045c
  401768:	20000450 	.word	0x20000450
  40176c:	20000478 	.word	0x20000478
  401770:	20000454 	.word	0x20000454
  401774:	20000460 	.word	0x20000460

00401778 <pid_tick>:
float kp = 1.0f;
float ki = 0.0f;
float kd = 0.0;

float pid_tick(void)
{
  401778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    previous_error = time;
  40177c:	4c27      	ldr	r4, [pc, #156]	; (40181c <pid_tick+0xa4>)
  40177e:	6820      	ldr	r0, [r4, #0]
  401780:	f006 f854 	bl	40782c <__aeabi_ui2f>
  401784:	4680      	mov	r8, r0
    time = cph_get_millis();
  401786:	4b26      	ldr	r3, [pc, #152]	; (401820 <pid_tick+0xa8>)
  401788:	681b      	ldr	r3, [r3, #0]
  40178a:	6023      	str	r3, [r4, #0]
    elapsed_time = (time - previous_time)/1000;
  40178c:	4a25      	ldr	r2, [pc, #148]	; (401824 <pid_tick+0xac>)
  40178e:	6814      	ldr	r4, [r2, #0]
  401790:	1b1b      	subs	r3, r3, r4
  401792:	4c25      	ldr	r4, [pc, #148]	; (401828 <pid_tick+0xb0>)
  401794:	fba4 3403 	umull	r3, r4, r4, r3
  401798:	09a4      	lsrs	r4, r4, #6
  40179a:	4b24      	ldr	r3, [pc, #144]	; (40182c <pid_tick+0xb4>)
  40179c:	601c      	str	r4, [r3, #0]

    error = ap.imu.y_axis - desired_angle;
  40179e:	4b24      	ldr	r3, [pc, #144]	; (401830 <pid_tick+0xb8>)
  4017a0:	6819      	ldr	r1, [r3, #0]
  4017a2:	4b24      	ldr	r3, [pc, #144]	; (401834 <pid_tick+0xbc>)
  4017a4:	6858      	ldr	r0, [r3, #4]
  4017a6:	f005 ff8f 	bl	4076c8 <__aeabi_fsub>
  4017aa:	4605      	mov	r5, r0
  4017ac:	4b22      	ldr	r3, [pc, #136]	; (401838 <pid_tick+0xc0>)
  4017ae:	6018      	str	r0, [r3, #0]
    pid_p = kp*error;
  4017b0:	4b22      	ldr	r3, [pc, #136]	; (40183c <pid_tick+0xc4>)
  4017b2:	6819      	ldr	r1, [r3, #0]
  4017b4:	f006 f892 	bl	4078dc <__aeabi_fmul>
  4017b8:	4606      	mov	r6, r0
  4017ba:	4b21      	ldr	r3, [pc, #132]	; (401840 <pid_tick+0xc8>)
  4017bc:	6018      	str	r0, [r3, #0]

    // if (-3.0f < error < 3.0f) {
    //     pid_i = pid_i +(ki*error);
    // }

    pid_i = pid_i +(ki*error);
  4017be:	4b21      	ldr	r3, [pc, #132]	; (401844 <pid_tick+0xcc>)
  4017c0:	6819      	ldr	r1, [r3, #0]
  4017c2:	4628      	mov	r0, r5
  4017c4:	f006 f88a 	bl	4078dc <__aeabi_fmul>
  4017c8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401858 <pid_tick+0xe0>
  4017cc:	f8d9 1000 	ldr.w	r1, [r9]
  4017d0:	f005 ff7c 	bl	4076cc <__addsf3>
  4017d4:	4607      	mov	r7, r0
  4017d6:	f8c9 0000 	str.w	r0, [r9]

    pid_d = kd * ((error-previous_error)/elapsed_time);
  4017da:	4641      	mov	r1, r8
  4017dc:	4628      	mov	r0, r5
  4017de:	f005 ff73 	bl	4076c8 <__aeabi_fsub>
  4017e2:	4680      	mov	r8, r0
  4017e4:	4620      	mov	r0, r4
  4017e6:	f006 f821 	bl	40782c <__aeabi_ui2f>
  4017ea:	4601      	mov	r1, r0
  4017ec:	4640      	mov	r0, r8
  4017ee:	f006 f929 	bl	407a44 <__aeabi_fdiv>
  4017f2:	4b15      	ldr	r3, [pc, #84]	; (401848 <pid_tick+0xd0>)
  4017f4:	6819      	ldr	r1, [r3, #0]
  4017f6:	f006 f871 	bl	4078dc <__aeabi_fmul>
  4017fa:	4604      	mov	r4, r0
  4017fc:	4b13      	ldr	r3, [pc, #76]	; (40184c <pid_tick+0xd4>)
  4017fe:	6018      	str	r0, [r3, #0]

    pid = pid_p + pid_i + pid_d;
  401800:	4639      	mov	r1, r7
  401802:	4630      	mov	r0, r6
  401804:	f005 ff62 	bl	4076cc <__addsf3>
  401808:	4621      	mov	r1, r4
  40180a:	f005 ff5f 	bl	4076cc <__addsf3>
  40180e:	4b10      	ldr	r3, [pc, #64]	; (401850 <pid_tick+0xd8>)
  401810:	6018      	str	r0, [r3, #0]

    previous_error = error;
  401812:	4b10      	ldr	r3, [pc, #64]	; (401854 <pid_tick+0xdc>)
  401814:	601d      	str	r5, [r3, #0]

    return pid;
  401816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40181a:	bf00      	nop
  40181c:	2000046c 	.word	0x2000046c
  401820:	20000208 	.word	0x20000208
  401824:	20000470 	.word	0x20000470
  401828:	10624dd3 	.word	0x10624dd3
  40182c:	20000474 	.word	0x20000474
  401830:	20000458 	.word	0x20000458
  401834:	20000804 	.word	0x20000804
  401838:	2000045c 	.word	0x2000045c
  40183c:	2000000c 	.word	0x2000000c
  401840:	20000478 	.word	0x20000478
  401844:	20000468 	.word	0x20000468
  401848:	20000464 	.word	0x20000464
  40184c:	20000460 	.word	0x20000460
  401850:	2000044c 	.word	0x2000044c
  401854:	20000450 	.word	0x20000450
  401858:	20000454 	.word	0x20000454

0040185c <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  40185c:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40185e:	482c      	ldr	r0, [pc, #176]	; (401910 <board_init+0xb4>)
  401860:	f000 fc02 	bl	402068 <wdt_disable>
  401864:	200b      	movs	r0, #11
  401866:	f000 fbd5 	bl	402014 <pmc_enable_periph_clk>
  40186a:	200c      	movs	r0, #12
  40186c:	f000 fbd2 	bl	402014 <pmc_enable_periph_clk>
  401870:	200d      	movs	r0, #13
  401872:	f000 fbcf 	bl	402014 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401876:	4b27      	ldr	r3, [pc, #156]	; (401914 <board_init+0xb8>)
  401878:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40187c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40187e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401880:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401884:	4c24      	ldr	r4, [pc, #144]	; (401918 <board_init+0xbc>)
  401886:	2504      	movs	r5, #4
  401888:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40188a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40188e:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401890:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401894:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401896:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401898:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40189c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40189e:	f022 0204 	bic.w	r2, r2, #4
  4018a2:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4018a4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4018a6:	f022 0204 	bic.w	r2, r2, #4
  4018aa:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4018b0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018b2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4018bc:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018be:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018c0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4018c8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018ca:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4018d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4018d4:	210c      	movs	r1, #12
  4018d6:	4811      	ldr	r0, [pc, #68]	; (40191c <board_init+0xc0>)
  4018d8:	f000 fa76 	bl	401dc8 <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4018dc:	4e10      	ldr	r6, [pc, #64]	; (401920 <board_init+0xc4>)
  4018de:	4631      	mov	r1, r6
  4018e0:	2003      	movs	r0, #3
  4018e2:	f000 f9e5 	bl	401cb0 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4018e6:	4631      	mov	r1, r6
  4018e8:	4628      	mov	r0, r5
  4018ea:	f000 f9e1 	bl	401cb0 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4018ee:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4018f0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4018f4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4018f6:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4018f8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4018fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4018fe:	f023 0304 	bic.w	r3, r3, #4
  401902:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401904:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401906:	f023 0304 	bic.w	r3, r3, #4
  40190a:	6763      	str	r3, [r4, #116]	; 0x74
  40190c:	bd70      	pop	{r4, r5, r6, pc}
  40190e:	bf00      	nop
  401910:	400e1450 	.word	0x400e1450
  401914:	400e1200 	.word	0x400e1200
  401918:	400e0e00 	.word	0x400e0e00
  40191c:	400e1000 	.word	0x400e1000
  401920:	08000001 	.word	0x08000001

00401924 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401924:	4b2b      	ldr	r3, [pc, #172]	; (4019d4 <twi_set_speed+0xb0>)
  401926:	4299      	cmp	r1, r3
  401928:	d849      	bhi.n	4019be <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40192a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40192e:	4299      	cmp	r1, r3
  401930:	d92b      	bls.n	40198a <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  401932:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401934:	4c28      	ldr	r4, [pc, #160]	; (4019d8 <twi_set_speed+0xb4>)
  401936:	fba4 3402 	umull	r3, r4, r4, r2
  40193a:	0ba4      	lsrs	r4, r4, #14
  40193c:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40193e:	4b27      	ldr	r3, [pc, #156]	; (4019dc <twi_set_speed+0xb8>)
  401940:	440b      	add	r3, r1
  401942:	009b      	lsls	r3, r3, #2
  401944:	fbb2 f2f3 	udiv	r2, r2, r3
  401948:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40194a:	2cff      	cmp	r4, #255	; 0xff
  40194c:	d939      	bls.n	4019c2 <twi_set_speed+0x9e>
  40194e:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401950:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  401952:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401954:	2cff      	cmp	r4, #255	; 0xff
  401956:	d902      	bls.n	40195e <twi_set_speed+0x3a>
  401958:	2b07      	cmp	r3, #7
  40195a:	d1f9      	bne.n	401950 <twi_set_speed+0x2c>
  40195c:	e00a      	b.n	401974 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40195e:	2aff      	cmp	r2, #255	; 0xff
  401960:	d908      	bls.n	401974 <twi_set_speed+0x50>
  401962:	2b06      	cmp	r3, #6
  401964:	d900      	bls.n	401968 <twi_set_speed+0x44>
  401966:	e005      	b.n	401974 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  401968:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40196a:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40196c:	2aff      	cmp	r2, #255	; 0xff
  40196e:	d901      	bls.n	401974 <twi_set_speed+0x50>
  401970:	2b06      	cmp	r3, #6
  401972:	d9f9      	bls.n	401968 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401974:	0212      	lsls	r2, r2, #8
  401976:	b292      	uxth	r2, r2
  401978:	041b      	lsls	r3, r3, #16
  40197a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40197e:	431a      	orrs	r2, r3
  401980:	b2e4      	uxtb	r4, r4
  401982:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401984:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401986:	2000      	movs	r0, #0
  401988:	e021      	b.n	4019ce <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40198a:	0049      	lsls	r1, r1, #1
  40198c:	fbb2 f2f1 	udiv	r2, r2, r1
  401990:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401992:	2aff      	cmp	r2, #255	; 0xff
  401994:	d907      	bls.n	4019a6 <twi_set_speed+0x82>
  401996:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401998:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40199a:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40199c:	2aff      	cmp	r2, #255	; 0xff
  40199e:	d903      	bls.n	4019a8 <twi_set_speed+0x84>
  4019a0:	2b07      	cmp	r3, #7
  4019a2:	d1f9      	bne.n	401998 <twi_set_speed+0x74>
  4019a4:	e000      	b.n	4019a8 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4019a6:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4019a8:	0211      	lsls	r1, r2, #8
  4019aa:	b289      	uxth	r1, r1
  4019ac:	041b      	lsls	r3, r3, #16
  4019ae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4019b2:	430b      	orrs	r3, r1
  4019b4:	b2d2      	uxtb	r2, r2
  4019b6:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4019b8:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4019ba:	2000      	movs	r0, #0
}
  4019bc:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  4019be:	2001      	movs	r0, #1
  4019c0:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019c2:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4019c4:	bf88      	it	hi
  4019c6:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019c8:	d8ce      	bhi.n	401968 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4019ca:	2300      	movs	r3, #0
  4019cc:	e7d2      	b.n	401974 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  4019ce:	bc10      	pop	{r4}
  4019d0:	4770      	bx	lr
  4019d2:	bf00      	nop
  4019d4:	00061a80 	.word	0x00061a80
  4019d8:	057619f1 	.word	0x057619f1
  4019dc:	3ffd1200 	.word	0x3ffd1200

004019e0 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4019e0:	b538      	push	{r3, r4, r5, lr}
  4019e2:	4604      	mov	r4, r0
  4019e4:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4019e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  4019ea:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4019ec:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4019ee:	2380      	movs	r3, #128	; 0x80
  4019f0:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4019f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4019f4:	2308      	movs	r3, #8
  4019f6:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4019f8:	2320      	movs	r3, #32
  4019fa:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4019fc:	2304      	movs	r3, #4
  4019fe:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401a00:	680a      	ldr	r2, [r1, #0]
  401a02:	6849      	ldr	r1, [r1, #4]
  401a04:	f7ff ff8e 	bl	401924 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401a08:	2801      	cmp	r0, #1
  401a0a:	bf14      	ite	ne
  401a0c:	2000      	movne	r0, #0
  401a0e:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  401a10:	7a6b      	ldrb	r3, [r5, #9]
  401a12:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401a14:	bf04      	itt	eq
  401a16:	2340      	moveq	r3, #64	; 0x40
  401a18:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401a1a:	bd38      	pop	{r3, r4, r5, pc}

00401a1c <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401a1c:	460a      	mov	r2, r1
  401a1e:	b159      	cbz	r1, 401a38 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  401a20:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  401a22:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  401a24:	bfc4      	itt	gt
  401a26:	7841      	ldrbgt	r1, [r0, #1]
  401a28:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401a2c:	2a02      	cmp	r2, #2
  401a2e:	dd05      	ble.n	401a3c <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  401a30:	7880      	ldrb	r0, [r0, #2]
  401a32:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401a36:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401a38:	2000      	movs	r0, #0
  401a3a:	4770      	bx	lr
  401a3c:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  401a3e:	4770      	bx	lr

00401a40 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401a44:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401a46:	2c00      	cmp	r4, #0
  401a48:	d045      	beq.n	401ad6 <twi_master_read+0x96>
  401a4a:	460b      	mov	r3, r1
  401a4c:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401a4e:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401a50:	2000      	movs	r0, #0
  401a52:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401a54:	684a      	ldr	r2, [r1, #4]
  401a56:	0212      	lsls	r2, r2, #8
  401a58:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401a5c:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  401a60:	7c1a      	ldrb	r2, [r3, #16]
  401a62:	0412      	lsls	r2, r2, #16
  401a64:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401a68:	430a      	orrs	r2, r1
  401a6a:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401a6c:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401a6e:	6859      	ldr	r1, [r3, #4]
  401a70:	4618      	mov	r0, r3
  401a72:	f7ff ffd3 	bl	401a1c <twi_mk_addr>
  401a76:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401a78:	2c01      	cmp	r4, #1
  401a7a:	d104      	bne.n	401a86 <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401a7c:	2303      	movs	r3, #3
  401a7e:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401a80:	f04f 0e01 	mov.w	lr, #1
  401a84:	e033      	b.n	401aee <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401a86:	2301      	movs	r3, #1
  401a88:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  401a8a:	f04f 0e00 	mov.w	lr, #0
  401a8e:	e02e      	b.n	401aee <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401a90:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401a92:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401a94:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a98:	d120      	bne.n	401adc <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  401a9a:	1e51      	subs	r1, r2, #1
  401a9c:	b30a      	cbz	r2, 401ae2 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401a9e:	2c01      	cmp	r4, #1
  401aa0:	d106      	bne.n	401ab0 <twi_master_read+0x70>
  401aa2:	f1be 0f00 	cmp.w	lr, #0
  401aa6:	d12f      	bne.n	401b08 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  401aa8:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401aac:	46e6      	mov	lr, ip
  401aae:	e02b      	b.n	401b08 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401ab0:	f013 0f02 	tst.w	r3, #2
  401ab4:	d005      	beq.n	401ac2 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401ab6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401ab8:	7033      	strb	r3, [r6, #0]

		cnt--;
  401aba:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401abc:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401abe:	463a      	mov	r2, r7
  401ac0:	e000      	b.n	401ac4 <twi_master_read+0x84>
  401ac2:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401ac4:	2c00      	cmp	r4, #0
  401ac6:	d1e4      	bne.n	401a92 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401ac8:	6a2b      	ldr	r3, [r5, #32]
  401aca:	f013 0f01 	tst.w	r3, #1
  401ace:	d0fb      	beq.n	401ac8 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  401ad0:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  401ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401ad6:	2001      	movs	r0, #1
  401ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401adc:	2005      	movs	r0, #5
  401ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401ae2:	2009      	movs	r0, #9
  401ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401ae8:	2005      	movs	r0, #5
  401aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401aee:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401af0:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401af4:	d1f8      	bne.n	401ae8 <twi_master_read+0xa8>
  401af6:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401afa:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401afe:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  401b02:	f04f 0c01 	mov.w	ip, #1
  401b06:	e7ca      	b.n	401a9e <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b08:	f013 0f02 	tst.w	r3, #2
  401b0c:	d0c0      	beq.n	401a90 <twi_master_read+0x50>
  401b0e:	e7d2      	b.n	401ab6 <twi_master_read+0x76>

00401b10 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401b10:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401b12:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  401b14:	2d00      	cmp	r5, #0
  401b16:	d034      	beq.n	401b82 <twi_master_write+0x72>
  401b18:	460b      	mov	r3, r1
  401b1a:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401b1c:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401b1e:	2000      	movs	r0, #0
  401b20:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401b22:	7c0a      	ldrb	r2, [r1, #16]
  401b24:	0412      	lsls	r2, r2, #16
  401b26:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401b2a:	685a      	ldr	r2, [r3, #4]
  401b2c:	0212      	lsls	r2, r2, #8
  401b2e:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401b32:	430a      	orrs	r2, r1
  401b34:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401b36:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401b38:	6859      	ldr	r1, [r3, #4]
  401b3a:	4618      	mov	r0, r3
  401b3c:	f7ff ff6e 	bl	401a1c <twi_mk_addr>
  401b40:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b42:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401b44:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b48:	d004      	beq.n	401b54 <twi_master_write+0x44>
  401b4a:	e01c      	b.n	401b86 <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b4c:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401b4e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b52:	d11a      	bne.n	401b8a <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401b54:	f013 0f04 	tst.w	r3, #4
  401b58:	d003      	beq.n	401b62 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401b5a:	7833      	ldrb	r3, [r6, #0]
  401b5c:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  401b5e:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401b60:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401b62:	2d00      	cmp	r5, #0
  401b64:	d1f2      	bne.n	401b4c <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401b66:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401b68:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401b6c:	d10f      	bne.n	401b8e <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401b6e:	f013 0f04 	tst.w	r3, #4
  401b72:	d0f8      	beq.n	401b66 <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401b74:	2302      	movs	r3, #2
  401b76:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401b78:	6a23      	ldr	r3, [r4, #32]
  401b7a:	f013 0f01 	tst.w	r3, #1
  401b7e:	d0fb      	beq.n	401b78 <twi_master_write+0x68>
  401b80:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401b82:	2001      	movs	r0, #1
  401b84:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b86:	2005      	movs	r0, #5
  401b88:	bd70      	pop	{r4, r5, r6, pc}
  401b8a:	2005      	movs	r0, #5
  401b8c:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b8e:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401b90:	bd70      	pop	{r4, r5, r6, pc}
  401b92:	bf00      	nop

00401b94 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  401b94:	b500      	push	{lr}
  401b96:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  401b98:	2300      	movs	r3, #0
  401b9a:	aa06      	add	r2, sp, #24
  401b9c:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  401ba0:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  401ba2:	2201      	movs	r2, #1
  401ba4:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  401ba6:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  401baa:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  401bae:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  401bb0:	a901      	add	r1, sp, #4
  401bb2:	f7ff ffad 	bl	401b10 <twi_master_write>
}
  401bb6:	b007      	add	sp, #28
  401bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00401bbc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401bbc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401bbe:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401bc2:	d02f      	beq.n	401c24 <pio_set_peripheral+0x68>
  401bc4:	d807      	bhi.n	401bd6 <pio_set_peripheral+0x1a>
  401bc6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401bca:	d014      	beq.n	401bf6 <pio_set_peripheral+0x3a>
  401bcc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401bd0:	d01e      	beq.n	401c10 <pio_set_peripheral+0x54>
  401bd2:	b939      	cbnz	r1, 401be4 <pio_set_peripheral+0x28>
  401bd4:	4770      	bx	lr
  401bd6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401bda:	d036      	beq.n	401c4a <pio_set_peripheral+0x8e>
  401bdc:	d804      	bhi.n	401be8 <pio_set_peripheral+0x2c>
  401bde:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401be2:	d029      	beq.n	401c38 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401be4:	6042      	str	r2, [r0, #4]
  401be6:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401be8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401bec:	d02d      	beq.n	401c4a <pio_set_peripheral+0x8e>
  401bee:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401bf2:	d02a      	beq.n	401c4a <pio_set_peripheral+0x8e>
  401bf4:	e7f6      	b.n	401be4 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401bf6:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401bf8:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401bfa:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401bfc:	43d3      	mvns	r3, r2
  401bfe:	4021      	ands	r1, r4
  401c00:	4019      	ands	r1, r3
  401c02:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c04:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c06:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c08:	4021      	ands	r1, r4
  401c0a:	400b      	ands	r3, r1
  401c0c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c0e:	e01a      	b.n	401c46 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c10:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c12:	4313      	orrs	r3, r2
  401c14:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c16:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c18:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401c1a:	400b      	ands	r3, r1
  401c1c:	ea23 0302 	bic.w	r3, r3, r2
  401c20:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c22:	e7df      	b.n	401be4 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c24:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c26:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401c28:	400b      	ands	r3, r1
  401c2a:	ea23 0302 	bic.w	r3, r3, r2
  401c2e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c30:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c32:	4313      	orrs	r3, r2
  401c34:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c36:	e7d5      	b.n	401be4 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c38:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c3a:	4313      	orrs	r3, r2
  401c3c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c3e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c40:	4313      	orrs	r3, r2
  401c42:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c44:	e7ce      	b.n	401be4 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c46:	6042      	str	r2, [r0, #4]
}
  401c48:	bc10      	pop	{r4}
  401c4a:	4770      	bx	lr

00401c4c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c4c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401c4e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401c52:	bf14      	ite	ne
  401c54:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401c56:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401c58:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401c5c:	bf14      	ite	ne
  401c5e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401c60:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401c62:	f012 0f02 	tst.w	r2, #2
  401c66:	d002      	beq.n	401c6e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401c68:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401c6c:	e004      	b.n	401c78 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401c6e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401c72:	bf18      	it	ne
  401c74:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401c78:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401c7a:	6001      	str	r1, [r0, #0]
  401c7c:	4770      	bx	lr
  401c7e:	bf00      	nop

00401c80 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401c80:	b410      	push	{r4}
  401c82:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401c84:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401c86:	b10c      	cbz	r4, 401c8c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401c88:	6641      	str	r1, [r0, #100]	; 0x64
  401c8a:	e000      	b.n	401c8e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401c8c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401c8e:	b10b      	cbz	r3, 401c94 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401c90:	6501      	str	r1, [r0, #80]	; 0x50
  401c92:	e000      	b.n	401c96 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401c94:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401c96:	b10a      	cbz	r2, 401c9c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401c98:	6301      	str	r1, [r0, #48]	; 0x30
  401c9a:	e000      	b.n	401c9e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401c9c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401c9e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401ca0:	6001      	str	r1, [r0, #0]
}
  401ca2:	bc10      	pop	{r4}
  401ca4:	4770      	bx	lr
  401ca6:	bf00      	nop

00401ca8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401ca8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401caa:	4770      	bx	lr

00401cac <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401cac:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401cae:	4770      	bx	lr

00401cb0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401cb0:	b570      	push	{r4, r5, r6, lr}
  401cb2:	b082      	sub	sp, #8
  401cb4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401cb6:	0943      	lsrs	r3, r0, #5
  401cb8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401cbc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401cc0:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401cc2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401cca:	d047      	beq.n	401d5c <pio_configure_pin+0xac>
  401ccc:	d809      	bhi.n	401ce2 <pio_configure_pin+0x32>
  401cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401cd2:	d021      	beq.n	401d18 <pio_configure_pin+0x68>
  401cd4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401cd8:	d02f      	beq.n	401d3a <pio_configure_pin+0x8a>
  401cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401cde:	d16f      	bne.n	401dc0 <pio_configure_pin+0x110>
  401ce0:	e009      	b.n	401cf6 <pio_configure_pin+0x46>
  401ce2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401ce6:	d055      	beq.n	401d94 <pio_configure_pin+0xe4>
  401ce8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401cec:	d052      	beq.n	401d94 <pio_configure_pin+0xe4>
  401cee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401cf2:	d044      	beq.n	401d7e <pio_configure_pin+0xce>
  401cf4:	e064      	b.n	401dc0 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401cf6:	f000 001f 	and.w	r0, r0, #31
  401cfa:	2601      	movs	r6, #1
  401cfc:	4086      	lsls	r6, r0
  401cfe:	4632      	mov	r2, r6
  401d00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d04:	4620      	mov	r0, r4
  401d06:	f7ff ff59 	bl	401bbc <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d0a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401d0e:	bf14      	ite	ne
  401d10:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d12:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401d14:	2001      	movs	r0, #1
  401d16:	e054      	b.n	401dc2 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401d18:	f000 001f 	and.w	r0, r0, #31
  401d1c:	2601      	movs	r6, #1
  401d1e:	4086      	lsls	r6, r0
  401d20:	4632      	mov	r2, r6
  401d22:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d26:	4620      	mov	r0, r4
  401d28:	f7ff ff48 	bl	401bbc <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d2c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401d30:	bf14      	ite	ne
  401d32:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d34:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401d36:	2001      	movs	r0, #1
  401d38:	e043      	b.n	401dc2 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401d3a:	f000 001f 	and.w	r0, r0, #31
  401d3e:	2601      	movs	r6, #1
  401d40:	4086      	lsls	r6, r0
  401d42:	4632      	mov	r2, r6
  401d44:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401d48:	4620      	mov	r0, r4
  401d4a:	f7ff ff37 	bl	401bbc <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d4e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401d52:	bf14      	ite	ne
  401d54:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d56:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401d58:	2001      	movs	r0, #1
  401d5a:	e032      	b.n	401dc2 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401d5c:	f000 001f 	and.w	r0, r0, #31
  401d60:	2601      	movs	r6, #1
  401d62:	4086      	lsls	r6, r0
  401d64:	4632      	mov	r2, r6
  401d66:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401d6a:	4620      	mov	r0, r4
  401d6c:	f7ff ff26 	bl	401bbc <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d70:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401d74:	bf14      	ite	ne
  401d76:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d78:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401d7a:	2001      	movs	r0, #1
  401d7c:	e021      	b.n	401dc2 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401d7e:	f000 011f 	and.w	r1, r0, #31
  401d82:	2601      	movs	r6, #1
  401d84:	462a      	mov	r2, r5
  401d86:	fa06 f101 	lsl.w	r1, r6, r1
  401d8a:	4620      	mov	r0, r4
  401d8c:	f7ff ff5e 	bl	401c4c <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401d90:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401d92:	e016      	b.n	401dc2 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401d94:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  401d98:	f000 011f 	and.w	r1, r0, #31
  401d9c:	2601      	movs	r6, #1
  401d9e:	ea05 0306 	and.w	r3, r5, r6
  401da2:	9300      	str	r3, [sp, #0]
  401da4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401da8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401dac:	bf14      	ite	ne
  401dae:	2200      	movne	r2, #0
  401db0:	2201      	moveq	r2, #1
  401db2:	fa06 f101 	lsl.w	r1, r6, r1
  401db6:	4620      	mov	r0, r4
  401db8:	f7ff ff62 	bl	401c80 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401dbc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401dbe:	e000      	b.n	401dc2 <pio_configure_pin+0x112>

	default:
		return 0;
  401dc0:	2000      	movs	r0, #0
	}

	return 1;
}
  401dc2:	b002      	add	sp, #8
  401dc4:	bd70      	pop	{r4, r5, r6, pc}
  401dc6:	bf00      	nop

00401dc8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401dc8:	b570      	push	{r4, r5, r6, lr}
  401dca:	b082      	sub	sp, #8
  401dcc:	4605      	mov	r5, r0
  401dce:	460e      	mov	r6, r1
  401dd0:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401dd2:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401dda:	d038      	beq.n	401e4e <pio_configure_pin_group+0x86>
  401ddc:	d809      	bhi.n	401df2 <pio_configure_pin_group+0x2a>
  401dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401de2:	d01c      	beq.n	401e1e <pio_configure_pin_group+0x56>
  401de4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401de8:	d025      	beq.n	401e36 <pio_configure_pin_group+0x6e>
  401dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401dee:	d150      	bne.n	401e92 <pio_configure_pin_group+0xca>
  401df0:	e009      	b.n	401e06 <pio_configure_pin_group+0x3e>
  401df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401df6:	d03a      	beq.n	401e6e <pio_configure_pin_group+0xa6>
  401df8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401dfc:	d037      	beq.n	401e6e <pio_configure_pin_group+0xa6>
  401dfe:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401e02:	d030      	beq.n	401e66 <pio_configure_pin_group+0x9e>
  401e04:	e045      	b.n	401e92 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401e06:	460a      	mov	r2, r1
  401e08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e0c:	f7ff fed6 	bl	401bbc <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e10:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401e14:	bf14      	ite	ne
  401e16:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e18:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e1a:	2001      	movs	r0, #1
  401e1c:	e03a      	b.n	401e94 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401e1e:	460a      	mov	r2, r1
  401e20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e24:	f7ff feca 	bl	401bbc <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e28:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401e2c:	bf14      	ite	ne
  401e2e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e30:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e32:	2001      	movs	r0, #1
  401e34:	e02e      	b.n	401e94 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401e36:	460a      	mov	r2, r1
  401e38:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401e3c:	f7ff febe 	bl	401bbc <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e40:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401e44:	bf14      	ite	ne
  401e46:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e48:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e4a:	2001      	movs	r0, #1
  401e4c:	e022      	b.n	401e94 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401e4e:	460a      	mov	r2, r1
  401e50:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401e54:	f7ff feb2 	bl	401bbc <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e58:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401e5c:	bf14      	ite	ne
  401e5e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e60:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e62:	2001      	movs	r0, #1
  401e64:	e016      	b.n	401e94 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401e66:	f7ff fef1 	bl	401c4c <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401e6a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401e6c:	e012      	b.n	401e94 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401e6e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401e72:	f004 0301 	and.w	r3, r4, #1
  401e76:	9300      	str	r3, [sp, #0]
  401e78:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401e7c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401e80:	bf14      	ite	ne
  401e82:	2200      	movne	r2, #0
  401e84:	2201      	moveq	r2, #1
  401e86:	4631      	mov	r1, r6
  401e88:	4628      	mov	r0, r5
  401e8a:	f7ff fef9 	bl	401c80 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401e8e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401e90:	e000      	b.n	401e94 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401e92:	2000      	movs	r0, #0
	}

	return 1;
}
  401e94:	b002      	add	sp, #8
  401e96:	bd70      	pop	{r4, r5, r6, pc}

00401e98 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401e9c:	4681      	mov	r9, r0
  401e9e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401ea0:	f7ff ff02 	bl	401ca8 <pio_get_interrupt_status>
  401ea4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401ea6:	4648      	mov	r0, r9
  401ea8:	f7ff ff00 	bl	401cac <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401eac:	4005      	ands	r5, r0
  401eae:	d013      	beq.n	401ed8 <pio_handler_process+0x40>
  401eb0:	4c0e      	ldr	r4, [pc, #56]	; (401eec <pio_handler_process+0x54>)
  401eb2:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401eb6:	6823      	ldr	r3, [r4, #0]
  401eb8:	4543      	cmp	r3, r8
  401eba:	d108      	bne.n	401ece <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401ebc:	6861      	ldr	r1, [r4, #4]
  401ebe:	4229      	tst	r1, r5
  401ec0:	d005      	beq.n	401ece <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401ec2:	68e3      	ldr	r3, [r4, #12]
  401ec4:	4640      	mov	r0, r8
  401ec6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401ec8:	6863      	ldr	r3, [r4, #4]
  401eca:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401ece:	42b4      	cmp	r4, r6
  401ed0:	d002      	beq.n	401ed8 <pio_handler_process+0x40>
  401ed2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401ed4:	2d00      	cmp	r5, #0
  401ed6:	d1ee      	bne.n	401eb6 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401ed8:	4b05      	ldr	r3, [pc, #20]	; (401ef0 <pio_handler_process+0x58>)
  401eda:	681b      	ldr	r3, [r3, #0]
  401edc:	b123      	cbz	r3, 401ee8 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401ede:	4b05      	ldr	r3, [pc, #20]	; (401ef4 <pio_handler_process+0x5c>)
  401ee0:	681b      	ldr	r3, [r3, #0]
  401ee2:	b10b      	cbz	r3, 401ee8 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401ee4:	4648      	mov	r0, r9
  401ee6:	4798      	blx	r3
  401ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401eec:	20000480 	.word	0x20000480
  401ef0:	20000834 	.word	0x20000834
  401ef4:	2000047c 	.word	0x2000047c

00401ef8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401ef8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401efa:	210b      	movs	r1, #11
  401efc:	4801      	ldr	r0, [pc, #4]	; (401f04 <PIOA_Handler+0xc>)
  401efe:	f7ff ffcb 	bl	401e98 <pio_handler_process>
  401f02:	bd08      	pop	{r3, pc}
  401f04:	400e0e00 	.word	0x400e0e00

00401f08 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401f08:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401f0a:	210c      	movs	r1, #12
  401f0c:	4801      	ldr	r0, [pc, #4]	; (401f14 <PIOB_Handler+0xc>)
  401f0e:	f7ff ffc3 	bl	401e98 <pio_handler_process>
  401f12:	bd08      	pop	{r3, pc}
  401f14:	400e1000 	.word	0x400e1000

00401f18 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401f18:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401f1a:	210d      	movs	r1, #13
  401f1c:	4801      	ldr	r0, [pc, #4]	; (401f24 <PIOC_Handler+0xc>)
  401f1e:	f7ff ffbb 	bl	401e98 <pio_handler_process>
  401f22:	bd08      	pop	{r3, pc}
  401f24:	400e1200 	.word	0x400e1200

00401f28 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401f28:	4a18      	ldr	r2, [pc, #96]	; (401f8c <pmc_switch_mck_to_pllack+0x64>)
  401f2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401f30:	4318      	orrs	r0, r3
  401f32:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f34:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401f36:	f013 0f08 	tst.w	r3, #8
  401f3a:	d003      	beq.n	401f44 <pmc_switch_mck_to_pllack+0x1c>
  401f3c:	e009      	b.n	401f52 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401f3e:	3b01      	subs	r3, #1
  401f40:	d103      	bne.n	401f4a <pmc_switch_mck_to_pllack+0x22>
  401f42:	e01e      	b.n	401f82 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f48:	4910      	ldr	r1, [pc, #64]	; (401f8c <pmc_switch_mck_to_pllack+0x64>)
  401f4a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401f4c:	f012 0f08 	tst.w	r2, #8
  401f50:	d0f5      	beq.n	401f3e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401f52:	4a0e      	ldr	r2, [pc, #56]	; (401f8c <pmc_switch_mck_to_pllack+0x64>)
  401f54:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f56:	f023 0303 	bic.w	r3, r3, #3
  401f5a:	f043 0302 	orr.w	r3, r3, #2
  401f5e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f60:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401f62:	f010 0008 	ands.w	r0, r0, #8
  401f66:	d004      	beq.n	401f72 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401f68:	2000      	movs	r0, #0
  401f6a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401f6c:	3b01      	subs	r3, #1
  401f6e:	d103      	bne.n	401f78 <pmc_switch_mck_to_pllack+0x50>
  401f70:	e009      	b.n	401f86 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f76:	4905      	ldr	r1, [pc, #20]	; (401f8c <pmc_switch_mck_to_pllack+0x64>)
  401f78:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401f7a:	f012 0f08 	tst.w	r2, #8
  401f7e:	d0f5      	beq.n	401f6c <pmc_switch_mck_to_pllack+0x44>
  401f80:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401f82:	2001      	movs	r0, #1
  401f84:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401f86:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401f88:	4770      	bx	lr
  401f8a:	bf00      	nop
  401f8c:	400e0400 	.word	0x400e0400

00401f90 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401f90:	b138      	cbz	r0, 401fa2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401f92:	4911      	ldr	r1, [pc, #68]	; (401fd8 <pmc_switch_mainck_to_xtal+0x48>)
  401f94:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401f96:	4a11      	ldr	r2, [pc, #68]	; (401fdc <pmc_switch_mainck_to_xtal+0x4c>)
  401f98:	401a      	ands	r2, r3
  401f9a:	4b11      	ldr	r3, [pc, #68]	; (401fe0 <pmc_switch_mainck_to_xtal+0x50>)
  401f9c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401f9e:	620b      	str	r3, [r1, #32]
  401fa0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401fa2:	480d      	ldr	r0, [pc, #52]	; (401fd8 <pmc_switch_mainck_to_xtal+0x48>)
  401fa4:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401fa6:	0209      	lsls	r1, r1, #8
  401fa8:	b289      	uxth	r1, r1
  401faa:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  401fae:	f023 0303 	bic.w	r3, r3, #3
  401fb2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401fb6:	f043 0301 	orr.w	r3, r3, #1
  401fba:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401fbc:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401fbe:	4602      	mov	r2, r0
  401fc0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401fc2:	f013 0f01 	tst.w	r3, #1
  401fc6:	d0fb      	beq.n	401fc0 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401fc8:	4a03      	ldr	r2, [pc, #12]	; (401fd8 <pmc_switch_mainck_to_xtal+0x48>)
  401fca:	6a13      	ldr	r3, [r2, #32]
  401fcc:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401fd4:	6213      	str	r3, [r2, #32]
  401fd6:	4770      	bx	lr
  401fd8:	400e0400 	.word	0x400e0400
  401fdc:	fec8fffc 	.word	0xfec8fffc
  401fe0:	01370002 	.word	0x01370002

00401fe4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401fe4:	4b02      	ldr	r3, [pc, #8]	; (401ff0 <pmc_osc_is_ready_mainck+0xc>)
  401fe6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401fe8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401fec:	4770      	bx	lr
  401fee:	bf00      	nop
  401ff0:	400e0400 	.word	0x400e0400

00401ff4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401ff4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401ff8:	4b01      	ldr	r3, [pc, #4]	; (402000 <pmc_disable_pllack+0xc>)
  401ffa:	629a      	str	r2, [r3, #40]	; 0x28
  401ffc:	4770      	bx	lr
  401ffe:	bf00      	nop
  402000:	400e0400 	.word	0x400e0400

00402004 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402004:	4b02      	ldr	r3, [pc, #8]	; (402010 <pmc_is_locked_pllack+0xc>)
  402006:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402008:	f000 0002 	and.w	r0, r0, #2
  40200c:	4770      	bx	lr
  40200e:	bf00      	nop
  402010:	400e0400 	.word	0x400e0400

00402014 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402014:	2822      	cmp	r0, #34	; 0x22
  402016:	d81e      	bhi.n	402056 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402018:	281f      	cmp	r0, #31
  40201a:	d80c      	bhi.n	402036 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40201c:	4b11      	ldr	r3, [pc, #68]	; (402064 <pmc_enable_periph_clk+0x50>)
  40201e:	699a      	ldr	r2, [r3, #24]
  402020:	2301      	movs	r3, #1
  402022:	4083      	lsls	r3, r0
  402024:	4393      	bics	r3, r2
  402026:	d018      	beq.n	40205a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402028:	2301      	movs	r3, #1
  40202a:	fa03 f000 	lsl.w	r0, r3, r0
  40202e:	4b0d      	ldr	r3, [pc, #52]	; (402064 <pmc_enable_periph_clk+0x50>)
  402030:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402032:	2000      	movs	r0, #0
  402034:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402036:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402038:	4b0a      	ldr	r3, [pc, #40]	; (402064 <pmc_enable_periph_clk+0x50>)
  40203a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40203e:	2301      	movs	r3, #1
  402040:	4083      	lsls	r3, r0
  402042:	4393      	bics	r3, r2
  402044:	d00b      	beq.n	40205e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402046:	2301      	movs	r3, #1
  402048:	fa03 f000 	lsl.w	r0, r3, r0
  40204c:	4b05      	ldr	r3, [pc, #20]	; (402064 <pmc_enable_periph_clk+0x50>)
  40204e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  402052:	2000      	movs	r0, #0
  402054:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402056:	2001      	movs	r0, #1
  402058:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40205a:	2000      	movs	r0, #0
  40205c:	4770      	bx	lr
  40205e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402060:	4770      	bx	lr
  402062:	bf00      	nop
  402064:	400e0400 	.word	0x400e0400

00402068 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40206c:	6043      	str	r3, [r0, #4]
  40206e:	4770      	bx	lr

00402070 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402070:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402072:	23ac      	movs	r3, #172	; 0xac
  402074:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402076:	680b      	ldr	r3, [r1, #0]
  402078:	684a      	ldr	r2, [r1, #4]
  40207a:	fbb3 f3f2 	udiv	r3, r3, r2
  40207e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402080:	1e5c      	subs	r4, r3, #1
  402082:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402086:	4294      	cmp	r4, r2
  402088:	d80a      	bhi.n	4020a0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40208a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40208c:	688b      	ldr	r3, [r1, #8]
  40208e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402090:	f240 2302 	movw	r3, #514	; 0x202
  402094:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402098:	2350      	movs	r3, #80	; 0x50
  40209a:	6003      	str	r3, [r0, #0]

	return 0;
  40209c:	2000      	movs	r0, #0
  40209e:	e000      	b.n	4020a2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  4020a0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  4020a2:	bc10      	pop	{r4}
  4020a4:	4770      	bx	lr
  4020a6:	bf00      	nop

004020a8 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  4020a8:	6940      	ldr	r0, [r0, #20]
}
  4020aa:	f000 0001 	and.w	r0, r0, #1
  4020ae:	4770      	bx	lr

004020b0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4020b0:	6943      	ldr	r3, [r0, #20]
  4020b2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4020b6:	bf1a      	itte	ne
  4020b8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4020ba:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4020bc:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4020be:	4770      	bx	lr

004020c0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4020c0:	6943      	ldr	r3, [r0, #20]
  4020c2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4020c6:	bf1d      	ittte	ne
  4020c8:	6983      	ldrne	r3, [r0, #24]
  4020ca:	700b      	strbne	r3, [r1, #0]
	return 0;
  4020cc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4020ce:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4020d0:	4770      	bx	lr
  4020d2:	bf00      	nop

004020d4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4020d4:	6943      	ldr	r3, [r0, #20]
  4020d6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4020da:	bf1d      	ittte	ne
  4020dc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4020e0:	61c1      	strne	r1, [r0, #28]
	return 0;
  4020e2:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4020e4:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4020e6:	4770      	bx	lr

004020e8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4020e8:	6943      	ldr	r3, [r0, #20]
  4020ea:	f013 0f01 	tst.w	r3, #1
  4020ee:	d005      	beq.n	4020fc <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4020f0:	6983      	ldr	r3, [r0, #24]
  4020f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4020f6:	600b      	str	r3, [r1, #0]

	return 0;
  4020f8:	2000      	movs	r0, #0
  4020fa:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4020fc:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4020fe:	4770      	bx	lr

00402100 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  402100:	b4f0      	push	{r4, r5, r6, r7}
  402102:	b08c      	sub	sp, #48	; 0x30
  402104:	4607      	mov	r7, r0
  402106:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  402108:	ac01      	add	r4, sp, #4
  40210a:	4d11      	ldr	r5, [pc, #68]	; (402150 <pwm_clocks_generate+0x50>)
  40210c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40210e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402114:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  40211c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  40211e:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  402120:	f852 3b04 	ldr.w	r3, [r2], #4
  402124:	fbb6 f3f3 	udiv	r3, r6, r3
  402128:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  40212c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402130:	d905      	bls.n	40213e <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  402132:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  402134:	280b      	cmp	r0, #11
  402136:	d1f3      	bne.n	402120 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  402138:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40213c:	e005      	b.n	40214a <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40213e:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  402140:	bf94      	ite	ls
  402142:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  402146:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  40214a:	b00c      	add	sp, #48	; 0x30
  40214c:	bcf0      	pop	{r4, r5, r6, r7}
  40214e:	4770      	bx	lr
  402150:	0040809c 	.word	0x0040809c

00402154 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  402154:	b570      	push	{r4, r5, r6, lr}
  402156:	4606      	mov	r6, r0
  402158:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40215a:	6808      	ldr	r0, [r1, #0]
  40215c:	b140      	cbz	r0, 402170 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40215e:	6889      	ldr	r1, [r1, #8]
  402160:	f7ff ffce 	bl	402100 <pwm_clocks_generate>
  402164:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  402166:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40216a:	4298      	cmp	r0, r3
  40216c:	d101      	bne.n	402172 <pwm_init+0x1e>
  40216e:	e00e      	b.n	40218e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  402170:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  402172:	6860      	ldr	r0, [r4, #4]
  402174:	b140      	cbz	r0, 402188 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  402176:	68a1      	ldr	r1, [r4, #8]
  402178:	f7ff ffc2 	bl	402100 <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  40217c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402180:	4298      	cmp	r0, r3
  402182:	d007      	beq.n	402194 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  402184:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  402188:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  40218a:	2000      	movs	r0, #0
  40218c:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40218e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402192:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  402194:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  402198:	bd70      	pop	{r4, r5, r6, pc}
  40219a:	bf00      	nop

0040219c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  40219c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40219e:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4021a0:	684a      	ldr	r2, [r1, #4]
  4021a2:	f002 020f 	and.w	r2, r2, #15
  4021a6:	8a8c      	ldrh	r4, [r1, #20]
  4021a8:	4322      	orrs	r2, r4
  4021aa:	890c      	ldrh	r4, [r1, #8]
  4021ac:	4322      	orrs	r2, r4
  4021ae:	7a8c      	ldrb	r4, [r1, #10]
  4021b0:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  4021b4:	7d8c      	ldrb	r4, [r1, #22]
  4021b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4021ba:	7dcc      	ldrb	r4, [r1, #23]
  4021bc:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  4021c0:	7e0c      	ldrb	r4, [r1, #24]
  4021c2:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  4021c6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4021ca:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4021ce:	68ca      	ldr	r2, [r1, #12]
  4021d0:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4021d4:	690a      	ldr	r2, [r1, #16]
  4021d6:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4021da:	7d8a      	ldrb	r2, [r1, #22]
  4021dc:	b13a      	cbz	r2, 4021ee <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4021de:	8b8c      	ldrh	r4, [r1, #28]
  4021e0:	8b4a      	ldrh	r2, [r1, #26]
  4021e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4021e6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4021ea:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4021ee:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4021f0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  4021f4:	409a      	lsls	r2, r3
  4021f6:	43d2      	mvns	r2, r2
  4021f8:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4021fc:	7fcc      	ldrb	r4, [r1, #31]
  4021fe:	fa04 f603 	lsl.w	r6, r4, r3
  402202:	7f8c      	ldrb	r4, [r1, #30]
  402204:	409c      	lsls	r4, r3
  402206:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  40220a:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  40220c:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40220e:	6c44      	ldr	r4, [r0, #68]	; 0x44
  402210:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  402212:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  402216:	fa04 f503 	lsl.w	r5, r4, r3
  40221a:	f891 4020 	ldrb.w	r4, [r1, #32]
  40221e:	409c      	lsls	r4, r3
  402220:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402224:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  402226:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  402228:	2201      	movs	r2, #1
  40222a:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  40222c:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  402230:	b11c      	cbz	r4, 40223a <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  402232:	6a04      	ldr	r4, [r0, #32]
  402234:	4314      	orrs	r4, r2
  402236:	6204      	str	r4, [r0, #32]
  402238:	e003      	b.n	402242 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40223a:	6a04      	ldr	r4, [r0, #32]
  40223c:	ea24 0402 	bic.w	r4, r4, r2
  402240:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  402242:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  402246:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  402248:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40224a:	bf0c      	ite	eq
  40224c:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  40224e:	4394      	bicne	r4, r2
  402250:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  402252:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  402256:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  402258:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40225a:	bf0c      	ite	eq
  40225c:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  402260:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  402264:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  402266:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  402268:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  40226a:	22ff      	movs	r2, #255	; 0xff
  40226c:	409a      	lsls	r2, r3
  40226e:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  402272:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  402276:	fa01 f303 	lsl.w	r3, r1, r3
  40227a:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  40227c:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  40227e:	2000      	movs	r0, #0
  402280:	bc70      	pop	{r4, r5, r6}
  402282:	4770      	bx	lr

00402284 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  402284:	690b      	ldr	r3, [r1, #16]
  402286:	4293      	cmp	r3, r2
  402288:	d307      	bcc.n	40229a <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  40228a:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  40228c:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  40228e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  402292:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  402296:	2000      	movs	r0, #0
  402298:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  40229a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  40229e:	4770      	bx	lr

004022a0 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4022a0:	2301      	movs	r3, #1
  4022a2:	fa03 f101 	lsl.w	r1, r3, r1
  4022a6:	6041      	str	r1, [r0, #4]
  4022a8:	4770      	bx	lr
  4022aa:	bf00      	nop

004022ac <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4022ac:	2301      	movs	r3, #1
  4022ae:	fa03 f101 	lsl.w	r1, r3, r1
  4022b2:	6081      	str	r1, [r0, #8]
  4022b4:	4770      	bx	lr
  4022b6:	bf00      	nop

004022b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4022b8:	e7fe      	b.n	4022b8 <Dummy_Handler>
  4022ba:	bf00      	nop

004022bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4022bc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4022be:	4b20      	ldr	r3, [pc, #128]	; (402340 <Reset_Handler+0x84>)
  4022c0:	4a20      	ldr	r2, [pc, #128]	; (402344 <Reset_Handler+0x88>)
  4022c2:	429a      	cmp	r2, r3
  4022c4:	d912      	bls.n	4022ec <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  4022c6:	4b20      	ldr	r3, [pc, #128]	; (402348 <Reset_Handler+0x8c>)
  4022c8:	4a1d      	ldr	r2, [pc, #116]	; (402340 <Reset_Handler+0x84>)
  4022ca:	429a      	cmp	r2, r3
  4022cc:	d21e      	bcs.n	40230c <Reset_Handler+0x50>
  4022ce:	4611      	mov	r1, r2
  4022d0:	3b01      	subs	r3, #1
  4022d2:	1a9b      	subs	r3, r3, r2
  4022d4:	f023 0303 	bic.w	r3, r3, #3
  4022d8:	3304      	adds	r3, #4
  4022da:	4a1a      	ldr	r2, [pc, #104]	; (402344 <Reset_Handler+0x88>)
  4022dc:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4022de:	f852 0b04 	ldr.w	r0, [r2], #4
  4022e2:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4022e6:	429a      	cmp	r2, r3
  4022e8:	d1f9      	bne.n	4022de <Reset_Handler+0x22>
  4022ea:	e00f      	b.n	40230c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4022ec:	4b14      	ldr	r3, [pc, #80]	; (402340 <Reset_Handler+0x84>)
  4022ee:	4a15      	ldr	r2, [pc, #84]	; (402344 <Reset_Handler+0x88>)
  4022f0:	429a      	cmp	r2, r3
  4022f2:	d20b      	bcs.n	40230c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4022f4:	4b14      	ldr	r3, [pc, #80]	; (402348 <Reset_Handler+0x8c>)
  4022f6:	4a12      	ldr	r2, [pc, #72]	; (402340 <Reset_Handler+0x84>)
  4022f8:	1a9a      	subs	r2, r3, r2
  4022fa:	4814      	ldr	r0, [pc, #80]	; (40234c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4022fc:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4022fe:	b12a      	cbz	r2, 40230c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  402300:	f851 2904 	ldr.w	r2, [r1], #-4
  402304:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402308:	4281      	cmp	r1, r0
  40230a:	d1f9      	bne.n	402300 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40230c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40230e:	4b10      	ldr	r3, [pc, #64]	; (402350 <Reset_Handler+0x94>)
  402310:	4a10      	ldr	r2, [pc, #64]	; (402354 <Reset_Handler+0x98>)
  402312:	429a      	cmp	r2, r3
  402314:	d20b      	bcs.n	40232e <Reset_Handler+0x72>
  402316:	1d13      	adds	r3, r2, #4
  402318:	4a0f      	ldr	r2, [pc, #60]	; (402358 <Reset_Handler+0x9c>)
  40231a:	1ad2      	subs	r2, r2, r3
  40231c:	f022 0203 	bic.w	r2, r2, #3
  402320:	441a      	add	r2, r3
  402322:	3b04      	subs	r3, #4
		*pDest++ = 0;
  402324:	2100      	movs	r1, #0
  402326:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40232a:	429a      	cmp	r2, r3
  40232c:	d1fb      	bne.n	402326 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  40232e:	4b0b      	ldr	r3, [pc, #44]	; (40235c <Reset_Handler+0xa0>)
  402330:	4a0b      	ldr	r2, [pc, #44]	; (402360 <Reset_Handler+0xa4>)
  402332:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  402334:	f000 fcae 	bl	402c94 <__libc_init_array>

	/* Branch to main function */
	main();
  402338:	f7fd ffdc 	bl	4002f4 <main>
  40233c:	e7fe      	b.n	40233c <Reset_Handler+0x80>
  40233e:	bf00      	nop
  402340:	20000000 	.word	0x20000000
  402344:	00408454 	.word	0x00408454
  402348:	200001e8 	.word	0x200001e8
  40234c:	00408450 	.word	0x00408450
  402350:	2000083c 	.word	0x2000083c
  402354:	200001e8 	.word	0x200001e8
  402358:	2000083f 	.word	0x2000083f
  40235c:	e000ed00 	.word	0xe000ed00
  402360:	00400000 	.word	0x00400000

00402364 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402364:	4b3d      	ldr	r3, [pc, #244]	; (40245c <SystemCoreClockUpdate+0xf8>)
  402366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402368:	f003 0303 	and.w	r3, r3, #3
  40236c:	2b03      	cmp	r3, #3
  40236e:	d85d      	bhi.n	40242c <SystemCoreClockUpdate+0xc8>
  402370:	e8df f003 	tbb	[pc, r3]
  402374:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402378:	4b39      	ldr	r3, [pc, #228]	; (402460 <SystemCoreClockUpdate+0xfc>)
  40237a:	695b      	ldr	r3, [r3, #20]
  40237c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402380:	bf14      	ite	ne
  402382:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402386:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40238a:	4b36      	ldr	r3, [pc, #216]	; (402464 <SystemCoreClockUpdate+0x100>)
  40238c:	601a      	str	r2, [r3, #0]
  40238e:	e04d      	b.n	40242c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402390:	4b32      	ldr	r3, [pc, #200]	; (40245c <SystemCoreClockUpdate+0xf8>)
  402392:	6a1b      	ldr	r3, [r3, #32]
  402394:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402398:	d003      	beq.n	4023a2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40239a:	4a33      	ldr	r2, [pc, #204]	; (402468 <SystemCoreClockUpdate+0x104>)
  40239c:	4b31      	ldr	r3, [pc, #196]	; (402464 <SystemCoreClockUpdate+0x100>)
  40239e:	601a      	str	r2, [r3, #0]
  4023a0:	e044      	b.n	40242c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4023a2:	4a32      	ldr	r2, [pc, #200]	; (40246c <SystemCoreClockUpdate+0x108>)
  4023a4:	4b2f      	ldr	r3, [pc, #188]	; (402464 <SystemCoreClockUpdate+0x100>)
  4023a6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4023a8:	4b2c      	ldr	r3, [pc, #176]	; (40245c <SystemCoreClockUpdate+0xf8>)
  4023aa:	6a1b      	ldr	r3, [r3, #32]
  4023ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4023b0:	2b10      	cmp	r3, #16
  4023b2:	d002      	beq.n	4023ba <SystemCoreClockUpdate+0x56>
  4023b4:	2b20      	cmp	r3, #32
  4023b6:	d004      	beq.n	4023c2 <SystemCoreClockUpdate+0x5e>
  4023b8:	e038      	b.n	40242c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4023ba:	4a2d      	ldr	r2, [pc, #180]	; (402470 <SystemCoreClockUpdate+0x10c>)
  4023bc:	4b29      	ldr	r3, [pc, #164]	; (402464 <SystemCoreClockUpdate+0x100>)
  4023be:	601a      	str	r2, [r3, #0]
			break;
  4023c0:	e034      	b.n	40242c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4023c2:	4a29      	ldr	r2, [pc, #164]	; (402468 <SystemCoreClockUpdate+0x104>)
  4023c4:	4b27      	ldr	r3, [pc, #156]	; (402464 <SystemCoreClockUpdate+0x100>)
  4023c6:	601a      	str	r2, [r3, #0]
			break;
  4023c8:	e030      	b.n	40242c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4023ca:	4b24      	ldr	r3, [pc, #144]	; (40245c <SystemCoreClockUpdate+0xf8>)
  4023cc:	6a1b      	ldr	r3, [r3, #32]
  4023ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4023d2:	d003      	beq.n	4023dc <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4023d4:	4a24      	ldr	r2, [pc, #144]	; (402468 <SystemCoreClockUpdate+0x104>)
  4023d6:	4b23      	ldr	r3, [pc, #140]	; (402464 <SystemCoreClockUpdate+0x100>)
  4023d8:	601a      	str	r2, [r3, #0]
  4023da:	e012      	b.n	402402 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4023dc:	4a23      	ldr	r2, [pc, #140]	; (40246c <SystemCoreClockUpdate+0x108>)
  4023de:	4b21      	ldr	r3, [pc, #132]	; (402464 <SystemCoreClockUpdate+0x100>)
  4023e0:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4023e2:	4b1e      	ldr	r3, [pc, #120]	; (40245c <SystemCoreClockUpdate+0xf8>)
  4023e4:	6a1b      	ldr	r3, [r3, #32]
  4023e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4023ea:	2b10      	cmp	r3, #16
  4023ec:	d002      	beq.n	4023f4 <SystemCoreClockUpdate+0x90>
  4023ee:	2b20      	cmp	r3, #32
  4023f0:	d004      	beq.n	4023fc <SystemCoreClockUpdate+0x98>
  4023f2:	e006      	b.n	402402 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4023f4:	4a1e      	ldr	r2, [pc, #120]	; (402470 <SystemCoreClockUpdate+0x10c>)
  4023f6:	4b1b      	ldr	r3, [pc, #108]	; (402464 <SystemCoreClockUpdate+0x100>)
  4023f8:	601a      	str	r2, [r3, #0]
					break;
  4023fa:	e002      	b.n	402402 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4023fc:	4a1a      	ldr	r2, [pc, #104]	; (402468 <SystemCoreClockUpdate+0x104>)
  4023fe:	4b19      	ldr	r3, [pc, #100]	; (402464 <SystemCoreClockUpdate+0x100>)
  402400:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402402:	4b16      	ldr	r3, [pc, #88]	; (40245c <SystemCoreClockUpdate+0xf8>)
  402404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402406:	f003 0303 	and.w	r3, r3, #3
  40240a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40240c:	4a13      	ldr	r2, [pc, #76]	; (40245c <SystemCoreClockUpdate+0xf8>)
  40240e:	bf07      	ittee	eq
  402410:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402412:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402414:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402416:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402418:	4812      	ldr	r0, [pc, #72]	; (402464 <SystemCoreClockUpdate+0x100>)
  40241a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40241e:	6803      	ldr	r3, [r0, #0]
  402420:	fb01 3303 	mla	r3, r1, r3, r3
  402424:	b2d2      	uxtb	r2, r2
  402426:	fbb3 f3f2 	udiv	r3, r3, r2
  40242a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40242c:	4b0b      	ldr	r3, [pc, #44]	; (40245c <SystemCoreClockUpdate+0xf8>)
  40242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402430:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402434:	2b70      	cmp	r3, #112	; 0x70
  402436:	d107      	bne.n	402448 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  402438:	4a0a      	ldr	r2, [pc, #40]	; (402464 <SystemCoreClockUpdate+0x100>)
  40243a:	6813      	ldr	r3, [r2, #0]
  40243c:	490d      	ldr	r1, [pc, #52]	; (402474 <SystemCoreClockUpdate+0x110>)
  40243e:	fba1 1303 	umull	r1, r3, r1, r3
  402442:	085b      	lsrs	r3, r3, #1
  402444:	6013      	str	r3, [r2, #0]
  402446:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402448:	4b04      	ldr	r3, [pc, #16]	; (40245c <SystemCoreClockUpdate+0xf8>)
  40244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40244c:	4905      	ldr	r1, [pc, #20]	; (402464 <SystemCoreClockUpdate+0x100>)
  40244e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  402452:	680b      	ldr	r3, [r1, #0]
  402454:	40d3      	lsrs	r3, r2
  402456:	600b      	str	r3, [r1, #0]
  402458:	4770      	bx	lr
  40245a:	bf00      	nop
  40245c:	400e0400 	.word	0x400e0400
  402460:	400e1410 	.word	0x400e1410
  402464:	20000010 	.word	0x20000010
  402468:	00b71b00 	.word	0x00b71b00
  40246c:	003d0900 	.word	0x003d0900
  402470:	007a1200 	.word	0x007a1200
  402474:	aaaaaaab 	.word	0xaaaaaaab

00402478 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402478:	4b1a      	ldr	r3, [pc, #104]	; (4024e4 <system_init_flash+0x6c>)
  40247a:	4298      	cmp	r0, r3
  40247c:	d807      	bhi.n	40248e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40247e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  402482:	4a19      	ldr	r2, [pc, #100]	; (4024e8 <system_init_flash+0x70>)
  402484:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402486:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40248a:	6013      	str	r3, [r2, #0]
  40248c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40248e:	4b17      	ldr	r3, [pc, #92]	; (4024ec <system_init_flash+0x74>)
  402490:	4298      	cmp	r0, r3
  402492:	d806      	bhi.n	4024a2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402494:	4b16      	ldr	r3, [pc, #88]	; (4024f0 <system_init_flash+0x78>)
  402496:	4a14      	ldr	r2, [pc, #80]	; (4024e8 <system_init_flash+0x70>)
  402498:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40249a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40249e:	6013      	str	r3, [r2, #0]
  4024a0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4024a2:	4b14      	ldr	r3, [pc, #80]	; (4024f4 <system_init_flash+0x7c>)
  4024a4:	4298      	cmp	r0, r3
  4024a6:	d806      	bhi.n	4024b6 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4024a8:	4b13      	ldr	r3, [pc, #76]	; (4024f8 <system_init_flash+0x80>)
  4024aa:	4a0f      	ldr	r2, [pc, #60]	; (4024e8 <system_init_flash+0x70>)
  4024ac:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4024ae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4024b2:	6013      	str	r3, [r2, #0]
  4024b4:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4024b6:	4b11      	ldr	r3, [pc, #68]	; (4024fc <system_init_flash+0x84>)
  4024b8:	4298      	cmp	r0, r3
  4024ba:	d806      	bhi.n	4024ca <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4024bc:	4b10      	ldr	r3, [pc, #64]	; (402500 <system_init_flash+0x88>)
  4024be:	4a0a      	ldr	r2, [pc, #40]	; (4024e8 <system_init_flash+0x70>)
  4024c0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4024c2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4024c6:	6013      	str	r3, [r2, #0]
  4024c8:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4024ca:	4b0e      	ldr	r3, [pc, #56]	; (402504 <system_init_flash+0x8c>)
  4024cc:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4024ce:	bf94      	ite	ls
  4024d0:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4024d4:	4b0c      	ldrhi	r3, [pc, #48]	; (402508 <system_init_flash+0x90>)
  4024d6:	4a04      	ldr	r2, [pc, #16]	; (4024e8 <system_init_flash+0x70>)
  4024d8:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4024da:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4024de:	6013      	str	r3, [r2, #0]
  4024e0:	4770      	bx	lr
  4024e2:	bf00      	nop
  4024e4:	01312cff 	.word	0x01312cff
  4024e8:	400e0a00 	.word	0x400e0a00
  4024ec:	026259ff 	.word	0x026259ff
  4024f0:	04000100 	.word	0x04000100
  4024f4:	039386ff 	.word	0x039386ff
  4024f8:	04000200 	.word	0x04000200
  4024fc:	04c4b3ff 	.word	0x04c4b3ff
  402500:	04000300 	.word	0x04000300
  402504:	05f5e0ff 	.word	0x05f5e0ff
  402508:	04000500 	.word	0x04000500

0040250c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40250c:	4b09      	ldr	r3, [pc, #36]	; (402534 <_sbrk+0x28>)
  40250e:	681b      	ldr	r3, [r3, #0]
  402510:	b913      	cbnz	r3, 402518 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  402512:	4a09      	ldr	r2, [pc, #36]	; (402538 <_sbrk+0x2c>)
  402514:	4b07      	ldr	r3, [pc, #28]	; (402534 <_sbrk+0x28>)
  402516:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402518:	4b06      	ldr	r3, [pc, #24]	; (402534 <_sbrk+0x28>)
  40251a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40251c:	181a      	adds	r2, r3, r0
  40251e:	4907      	ldr	r1, [pc, #28]	; (40253c <_sbrk+0x30>)
  402520:	4291      	cmp	r1, r2
  402522:	db04      	blt.n	40252e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402524:	4610      	mov	r0, r2
  402526:	4a03      	ldr	r2, [pc, #12]	; (402534 <_sbrk+0x28>)
  402528:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40252a:	4618      	mov	r0, r3
  40252c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40252e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  402532:	4770      	bx	lr
  402534:	200004f0 	.word	0x200004f0
  402538:	20003840 	.word	0x20003840
  40253c:	20027ffc 	.word	0x20027ffc

00402540 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402544:	4770      	bx	lr
  402546:	bf00      	nop

00402548 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40254c:	604b      	str	r3, [r1, #4]

	return 0;
}
  40254e:	2000      	movs	r0, #0
  402550:	4770      	bx	lr
  402552:	bf00      	nop

00402554 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402554:	2001      	movs	r0, #1
  402556:	4770      	bx	lr

00402558 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402558:	2000      	movs	r0, #0
  40255a:	4770      	bx	lr

0040255c <atan2>:
  40255c:	f000 b85c 	b.w	402618 <__ieee754_atan2>

00402560 <sqrt>:
  402560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402564:	b08b      	sub	sp, #44	; 0x2c
  402566:	4604      	mov	r4, r0
  402568:	460d      	mov	r5, r1
  40256a:	f000 f91f 	bl	4027ac <__ieee754_sqrt>
  40256e:	4b28      	ldr	r3, [pc, #160]	; (402610 <sqrt+0xb0>)
  402570:	f993 a000 	ldrsb.w	sl, [r3]
  402574:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  402578:	4606      	mov	r6, r0
  40257a:	460f      	mov	r7, r1
  40257c:	d012      	beq.n	4025a4 <sqrt+0x44>
  40257e:	4622      	mov	r2, r4
  402580:	462b      	mov	r3, r5
  402582:	4620      	mov	r0, r4
  402584:	4629      	mov	r1, r5
  402586:	f004 ffed 	bl	407564 <__aeabi_dcmpun>
  40258a:	4683      	mov	fp, r0
  40258c:	b950      	cbnz	r0, 4025a4 <sqrt+0x44>
  40258e:	f04f 0800 	mov.w	r8, #0
  402592:	f04f 0900 	mov.w	r9, #0
  402596:	4642      	mov	r2, r8
  402598:	464b      	mov	r3, r9
  40259a:	4620      	mov	r0, r4
  40259c:	4629      	mov	r1, r5
  40259e:	f004 ffb9 	bl	407514 <__aeabi_dcmplt>
  4025a2:	b920      	cbnz	r0, 4025ae <sqrt+0x4e>
  4025a4:	4630      	mov	r0, r6
  4025a6:	4639      	mov	r1, r7
  4025a8:	b00b      	add	sp, #44	; 0x2c
  4025aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025ae:	4b19      	ldr	r3, [pc, #100]	; (402614 <sqrt+0xb4>)
  4025b0:	f8cd b020 	str.w	fp, [sp, #32]
  4025b4:	2201      	movs	r2, #1
  4025b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
  4025ba:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4025be:	e88d 000c 	stmia.w	sp, {r2, r3}
  4025c2:	f1ba 0f00 	cmp.w	sl, #0
  4025c6:	d015      	beq.n	4025f4 <sqrt+0x94>
  4025c8:	4642      	mov	r2, r8
  4025ca:	464b      	mov	r3, r9
  4025cc:	4640      	mov	r0, r8
  4025ce:	4649      	mov	r1, r9
  4025d0:	f004 fe58 	bl	407284 <__aeabi_ddiv>
  4025d4:	f1ba 0f02 	cmp.w	sl, #2
  4025d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4025dc:	d10c      	bne.n	4025f8 <sqrt+0x98>
  4025de:	f000 fb53 	bl	402c88 <__errno>
  4025e2:	2321      	movs	r3, #33	; 0x21
  4025e4:	6003      	str	r3, [r0, #0]
  4025e6:	9b08      	ldr	r3, [sp, #32]
  4025e8:	b963      	cbnz	r3, 402604 <sqrt+0xa4>
  4025ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4025ee:	b00b      	add	sp, #44	; 0x2c
  4025f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025f4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4025f8:	4668      	mov	r0, sp
  4025fa:	f000 fb3b 	bl	402c74 <matherr>
  4025fe:	2800      	cmp	r0, #0
  402600:	d1f1      	bne.n	4025e6 <sqrt+0x86>
  402602:	e7ec      	b.n	4025de <sqrt+0x7e>
  402604:	f000 fb40 	bl	402c88 <__errno>
  402608:	9b08      	ldr	r3, [sp, #32]
  40260a:	6003      	str	r3, [r0, #0]
  40260c:	e7ed      	b.n	4025ea <sqrt+0x8a>
  40260e:	bf00      	nop
  402610:	20000014 	.word	0x20000014
  402614:	004080c8 	.word	0x004080c8

00402618 <__ieee754_atan2>:
  402618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40261c:	4254      	negs	r4, r2
  40261e:	4314      	orrs	r4, r2
  402620:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  402624:	f8df e180 	ldr.w	lr, [pc, #384]	; 4027a8 <__ieee754_atan2+0x190>
  402628:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  40262c:	4574      	cmp	r4, lr
  40262e:	4606      	mov	r6, r0
  402630:	460d      	mov	r5, r1
  402632:	d83e      	bhi.n	4026b2 <__ieee754_atan2+0x9a>
  402634:	4244      	negs	r4, r0
  402636:	4304      	orrs	r4, r0
  402638:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  40263c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  402640:	4574      	cmp	r4, lr
  402642:	468a      	mov	sl, r1
  402644:	d835      	bhi.n	4026b2 <__ieee754_atan2+0x9a>
  402646:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  40264a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  40264e:	4314      	orrs	r4, r2
  402650:	d044      	beq.n	4026dc <__ieee754_atan2+0xc4>
  402652:	179c      	asrs	r4, r3, #30
  402654:	f004 0402 	and.w	r4, r4, #2
  402658:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  40265c:	ea50 010b 	orrs.w	r1, r0, fp
  402660:	d02f      	beq.n	4026c2 <__ieee754_atan2+0xaa>
  402662:	ea52 0109 	orrs.w	r1, r2, r9
  402666:	d033      	beq.n	4026d0 <__ieee754_atan2+0xb8>
  402668:	45f1      	cmp	r9, lr
  40266a:	d046      	beq.n	4026fa <__ieee754_atan2+0xe2>
  40266c:	45f3      	cmp	fp, lr
  40266e:	d02f      	beq.n	4026d0 <__ieee754_atan2+0xb8>
  402670:	ebc9 090b 	rsb	r9, r9, fp
  402674:	ea4f 5929 	mov.w	r9, r9, asr #20
  402678:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  40267c:	dc34      	bgt.n	4026e8 <__ieee754_atan2+0xd0>
  40267e:	2b00      	cmp	r3, #0
  402680:	db57      	blt.n	402732 <__ieee754_atan2+0x11a>
  402682:	4630      	mov	r0, r6
  402684:	4629      	mov	r1, r5
  402686:	f004 fdfd 	bl	407284 <__aeabi_ddiv>
  40268a:	f000 faef 	bl	402c6c <fabs>
  40268e:	f000 f94f 	bl	402930 <atan>
  402692:	2c01      	cmp	r4, #1
  402694:	d04a      	beq.n	40272c <__ieee754_atan2+0x114>
  402696:	2c02      	cmp	r4, #2
  402698:	d03b      	beq.n	402712 <__ieee754_atan2+0xfa>
  40269a:	b184      	cbz	r4, 4026be <__ieee754_atan2+0xa6>
  40269c:	a332      	add	r3, pc, #200	; (adr r3, 402768 <__ieee754_atan2+0x150>)
  40269e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026a2:	f004 fb11 	bl	406cc8 <__aeabi_dsub>
  4026a6:	a332      	add	r3, pc, #200	; (adr r3, 402770 <__ieee754_atan2+0x158>)
  4026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026ac:	f004 fb0c 	bl	406cc8 <__aeabi_dsub>
  4026b0:	e005      	b.n	4026be <__ieee754_atan2+0xa6>
  4026b2:	4610      	mov	r0, r2
  4026b4:	4619      	mov	r1, r3
  4026b6:	4632      	mov	r2, r6
  4026b8:	462b      	mov	r3, r5
  4026ba:	f004 fb07 	bl	406ccc <__adddf3>
  4026be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026c2:	2c02      	cmp	r4, #2
  4026c4:	d014      	beq.n	4026f0 <__ieee754_atan2+0xd8>
  4026c6:	2c03      	cmp	r4, #3
  4026c8:	d10c      	bne.n	4026e4 <__ieee754_atan2+0xcc>
  4026ca:	482d      	ldr	r0, [pc, #180]	; (402780 <__ieee754_atan2+0x168>)
  4026cc:	492d      	ldr	r1, [pc, #180]	; (402784 <__ieee754_atan2+0x16c>)
  4026ce:	e7f6      	b.n	4026be <__ieee754_atan2+0xa6>
  4026d0:	f1ba 0f00 	cmp.w	sl, #0
  4026d4:	482a      	ldr	r0, [pc, #168]	; (402780 <__ieee754_atan2+0x168>)
  4026d6:	db0e      	blt.n	4026f6 <__ieee754_atan2+0xde>
  4026d8:	492b      	ldr	r1, [pc, #172]	; (402788 <__ieee754_atan2+0x170>)
  4026da:	e7f0      	b.n	4026be <__ieee754_atan2+0xa6>
  4026dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026e0:	f000 b926 	b.w	402930 <atan>
  4026e4:	4629      	mov	r1, r5
  4026e6:	e7ea      	b.n	4026be <__ieee754_atan2+0xa6>
  4026e8:	a123      	add	r1, pc, #140	; (adr r1, 402778 <__ieee754_atan2+0x160>)
  4026ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  4026ee:	e7d0      	b.n	402692 <__ieee754_atan2+0x7a>
  4026f0:	4823      	ldr	r0, [pc, #140]	; (402780 <__ieee754_atan2+0x168>)
  4026f2:	4926      	ldr	r1, [pc, #152]	; (40278c <__ieee754_atan2+0x174>)
  4026f4:	e7e3      	b.n	4026be <__ieee754_atan2+0xa6>
  4026f6:	4926      	ldr	r1, [pc, #152]	; (402790 <__ieee754_atan2+0x178>)
  4026f8:	e7e1      	b.n	4026be <__ieee754_atan2+0xa6>
  4026fa:	45cb      	cmp	fp, r9
  4026fc:	d01f      	beq.n	40273e <__ieee754_atan2+0x126>
  4026fe:	2c02      	cmp	r4, #2
  402700:	d0f6      	beq.n	4026f0 <__ieee754_atan2+0xd8>
  402702:	2c03      	cmp	r4, #3
  402704:	d0e1      	beq.n	4026ca <__ieee754_atan2+0xb2>
  402706:	2c01      	cmp	r4, #1
  402708:	f04f 0000 	mov.w	r0, #0
  40270c:	d020      	beq.n	402750 <__ieee754_atan2+0x138>
  40270e:	4601      	mov	r1, r0
  402710:	e7d5      	b.n	4026be <__ieee754_atan2+0xa6>
  402712:	a315      	add	r3, pc, #84	; (adr r3, 402768 <__ieee754_atan2+0x150>)
  402714:	e9d3 2300 	ldrd	r2, r3, [r3]
  402718:	f004 fad6 	bl	406cc8 <__aeabi_dsub>
  40271c:	4602      	mov	r2, r0
  40271e:	460b      	mov	r3, r1
  402720:	a113      	add	r1, pc, #76	; (adr r1, 402770 <__ieee754_atan2+0x158>)
  402722:	e9d1 0100 	ldrd	r0, r1, [r1]
  402726:	f004 facf 	bl	406cc8 <__aeabi_dsub>
  40272a:	e7c8      	b.n	4026be <__ieee754_atan2+0xa6>
  40272c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402730:	e7c5      	b.n	4026be <__ieee754_atan2+0xa6>
  402732:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  402736:	daa4      	bge.n	402682 <__ieee754_atan2+0x6a>
  402738:	2000      	movs	r0, #0
  40273a:	2100      	movs	r1, #0
  40273c:	e7a9      	b.n	402692 <__ieee754_atan2+0x7a>
  40273e:	2c02      	cmp	r4, #2
  402740:	d00e      	beq.n	402760 <__ieee754_atan2+0x148>
  402742:	2c03      	cmp	r4, #3
  402744:	d009      	beq.n	40275a <__ieee754_atan2+0x142>
  402746:	2c01      	cmp	r4, #1
  402748:	480d      	ldr	r0, [pc, #52]	; (402780 <__ieee754_atan2+0x168>)
  40274a:	d004      	beq.n	402756 <__ieee754_atan2+0x13e>
  40274c:	4911      	ldr	r1, [pc, #68]	; (402794 <__ieee754_atan2+0x17c>)
  40274e:	e7b6      	b.n	4026be <__ieee754_atan2+0xa6>
  402750:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402754:	e7b3      	b.n	4026be <__ieee754_atan2+0xa6>
  402756:	4910      	ldr	r1, [pc, #64]	; (402798 <__ieee754_atan2+0x180>)
  402758:	e7b1      	b.n	4026be <__ieee754_atan2+0xa6>
  40275a:	4810      	ldr	r0, [pc, #64]	; (40279c <__ieee754_atan2+0x184>)
  40275c:	4910      	ldr	r1, [pc, #64]	; (4027a0 <__ieee754_atan2+0x188>)
  40275e:	e7ae      	b.n	4026be <__ieee754_atan2+0xa6>
  402760:	480e      	ldr	r0, [pc, #56]	; (40279c <__ieee754_atan2+0x184>)
  402762:	4910      	ldr	r1, [pc, #64]	; (4027a4 <__ieee754_atan2+0x18c>)
  402764:	e7ab      	b.n	4026be <__ieee754_atan2+0xa6>
  402766:	bf00      	nop
  402768:	33145c07 	.word	0x33145c07
  40276c:	3ca1a626 	.word	0x3ca1a626
  402770:	54442d18 	.word	0x54442d18
  402774:	400921fb 	.word	0x400921fb
  402778:	54442d18 	.word	0x54442d18
  40277c:	3ff921fb 	.word	0x3ff921fb
  402780:	54442d18 	.word	0x54442d18
  402784:	c00921fb 	.word	0xc00921fb
  402788:	3ff921fb 	.word	0x3ff921fb
  40278c:	400921fb 	.word	0x400921fb
  402790:	bff921fb 	.word	0xbff921fb
  402794:	3fe921fb 	.word	0x3fe921fb
  402798:	bfe921fb 	.word	0xbfe921fb
  40279c:	7f3321d2 	.word	0x7f3321d2
  4027a0:	c002d97c 	.word	0xc002d97c
  4027a4:	4002d97c 	.word	0x4002d97c
  4027a8:	7ff00000 	.word	0x7ff00000

004027ac <__ieee754_sqrt>:
  4027ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4027b0:	4e5d      	ldr	r6, [pc, #372]	; (402928 <__ieee754_sqrt+0x17c>)
  4027b2:	46b6      	mov	lr, r6
  4027b4:	400e      	ands	r6, r1
  4027b6:	4576      	cmp	r6, lr
  4027b8:	460c      	mov	r4, r1
  4027ba:	4605      	mov	r5, r0
  4027bc:	f000 8095 	beq.w	4028ea <__ieee754_sqrt+0x13e>
  4027c0:	2900      	cmp	r1, #0
  4027c2:	460b      	mov	r3, r1
  4027c4:	4602      	mov	r2, r0
  4027c6:	dd73      	ble.n	4028b0 <__ieee754_sqrt+0x104>
  4027c8:	150f      	asrs	r7, r1, #20
  4027ca:	d07e      	beq.n	4028ca <__ieee754_sqrt+0x11e>
  4027cc:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4027d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4027d4:	07f8      	lsls	r0, r7, #31
  4027d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4027da:	d464      	bmi.n	4028a6 <__ieee754_sqrt+0xfa>
  4027dc:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4027e0:	2600      	movs	r6, #0
  4027e2:	440b      	add	r3, r1
  4027e4:	107f      	asrs	r7, r7, #1
  4027e6:	0052      	lsls	r2, r2, #1
  4027e8:	46b6      	mov	lr, r6
  4027ea:	2016      	movs	r0, #22
  4027ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4027f0:	eb0e 0401 	add.w	r4, lr, r1
  4027f4:	429c      	cmp	r4, r3
  4027f6:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4027fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4027fe:	dc03      	bgt.n	402808 <__ieee754_sqrt+0x5c>
  402800:	1b1b      	subs	r3, r3, r4
  402802:	eb04 0e01 	add.w	lr, r4, r1
  402806:	440e      	add	r6, r1
  402808:	3801      	subs	r0, #1
  40280a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40280e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402812:	d1ed      	bne.n	4027f0 <__ieee754_sqrt+0x44>
  402814:	4684      	mov	ip, r0
  402816:	2420      	movs	r4, #32
  402818:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40281c:	e009      	b.n	402832 <__ieee754_sqrt+0x86>
  40281e:	d020      	beq.n	402862 <__ieee754_sqrt+0xb6>
  402820:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  402824:	3c01      	subs	r4, #1
  402826:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40282a:	442b      	add	r3, r5
  40282c:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402830:	d020      	beq.n	402874 <__ieee754_sqrt+0xc8>
  402832:	459e      	cmp	lr, r3
  402834:	eb01 050c 	add.w	r5, r1, ip
  402838:	daf1      	bge.n	40281e <__ieee754_sqrt+0x72>
  40283a:	2d00      	cmp	r5, #0
  40283c:	eb05 0c01 	add.w	ip, r5, r1
  402840:	db09      	blt.n	402856 <__ieee754_sqrt+0xaa>
  402842:	46f0      	mov	r8, lr
  402844:	4295      	cmp	r5, r2
  402846:	ebce 0303 	rsb	r3, lr, r3
  40284a:	d900      	bls.n	40284e <__ieee754_sqrt+0xa2>
  40284c:	3b01      	subs	r3, #1
  40284e:	1b52      	subs	r2, r2, r5
  402850:	4408      	add	r0, r1
  402852:	46c6      	mov	lr, r8
  402854:	e7e4      	b.n	402820 <__ieee754_sqrt+0x74>
  402856:	f1bc 0f00 	cmp.w	ip, #0
  40285a:	dbf2      	blt.n	402842 <__ieee754_sqrt+0x96>
  40285c:	f10e 0801 	add.w	r8, lr, #1
  402860:	e7f0      	b.n	402844 <__ieee754_sqrt+0x98>
  402862:	4295      	cmp	r5, r2
  402864:	d817      	bhi.n	402896 <__ieee754_sqrt+0xea>
  402866:	2d00      	cmp	r5, #0
  402868:	eb05 0c01 	add.w	ip, r5, r1
  40286c:	db47      	blt.n	4028fe <__ieee754_sqrt+0x152>
  40286e:	4698      	mov	r8, r3
  402870:	2300      	movs	r3, #0
  402872:	e7ec      	b.n	40284e <__ieee754_sqrt+0xa2>
  402874:	4313      	orrs	r3, r2
  402876:	d110      	bne.n	40289a <__ieee754_sqrt+0xee>
  402878:	0840      	lsrs	r0, r0, #1
  40287a:	1073      	asrs	r3, r6, #1
  40287c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402880:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402884:	07f2      	lsls	r2, r6, #31
  402886:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40288a:	bf48      	it	mi
  40288c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402890:	4649      	mov	r1, r9
  402892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402896:	4673      	mov	r3, lr
  402898:	e7c2      	b.n	402820 <__ieee754_sqrt+0x74>
  40289a:	1c41      	adds	r1, r0, #1
  40289c:	d033      	beq.n	402906 <__ieee754_sqrt+0x15a>
  40289e:	f000 0301 	and.w	r3, r0, #1
  4028a2:	4418      	add	r0, r3
  4028a4:	e7e8      	b.n	402878 <__ieee754_sqrt+0xcc>
  4028a6:	005b      	lsls	r3, r3, #1
  4028a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4028ac:	0052      	lsls	r2, r2, #1
  4028ae:	e795      	b.n	4027dc <__ieee754_sqrt+0x30>
  4028b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4028b4:	4306      	orrs	r6, r0
  4028b6:	d0ec      	beq.n	402892 <__ieee754_sqrt+0xe6>
  4028b8:	bb69      	cbnz	r1, 402916 <__ieee754_sqrt+0x16a>
  4028ba:	460f      	mov	r7, r1
  4028bc:	0ad3      	lsrs	r3, r2, #11
  4028be:	3f15      	subs	r7, #21
  4028c0:	0552      	lsls	r2, r2, #21
  4028c2:	2b00      	cmp	r3, #0
  4028c4:	d0fa      	beq.n	4028bc <__ieee754_sqrt+0x110>
  4028c6:	02dd      	lsls	r5, r3, #11
  4028c8:	d420      	bmi.n	40290c <__ieee754_sqrt+0x160>
  4028ca:	2100      	movs	r1, #0
  4028cc:	e000      	b.n	4028d0 <__ieee754_sqrt+0x124>
  4028ce:	4601      	mov	r1, r0
  4028d0:	005b      	lsls	r3, r3, #1
  4028d2:	02dc      	lsls	r4, r3, #11
  4028d4:	f101 0001 	add.w	r0, r1, #1
  4028d8:	d5f9      	bpl.n	4028ce <__ieee754_sqrt+0x122>
  4028da:	f1c0 0420 	rsb	r4, r0, #32
  4028de:	fa22 f404 	lsr.w	r4, r2, r4
  4028e2:	4323      	orrs	r3, r4
  4028e4:	1a7f      	subs	r7, r7, r1
  4028e6:	4082      	lsls	r2, r0
  4028e8:	e770      	b.n	4027cc <__ieee754_sqrt+0x20>
  4028ea:	4602      	mov	r2, r0
  4028ec:	460b      	mov	r3, r1
  4028ee:	f004 fb9f 	bl	407030 <__aeabi_dmul>
  4028f2:	462a      	mov	r2, r5
  4028f4:	4623      	mov	r3, r4
  4028f6:	f004 f9e9 	bl	406ccc <__adddf3>
  4028fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4028fe:	f1bc 0f00 	cmp.w	ip, #0
  402902:	daab      	bge.n	40285c <__ieee754_sqrt+0xb0>
  402904:	e7b3      	b.n	40286e <__ieee754_sqrt+0xc2>
  402906:	3601      	adds	r6, #1
  402908:	4620      	mov	r0, r4
  40290a:	e7b6      	b.n	40287a <__ieee754_sqrt+0xce>
  40290c:	2420      	movs	r4, #32
  40290e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  402912:	2000      	movs	r0, #0
  402914:	e7e3      	b.n	4028de <__ieee754_sqrt+0x132>
  402916:	4602      	mov	r2, r0
  402918:	460b      	mov	r3, r1
  40291a:	f004 f9d5 	bl	406cc8 <__aeabi_dsub>
  40291e:	4602      	mov	r2, r0
  402920:	460b      	mov	r3, r1
  402922:	f004 fcaf 	bl	407284 <__aeabi_ddiv>
  402926:	e7b4      	b.n	402892 <__ieee754_sqrt+0xe6>
  402928:	7ff00000 	.word	0x7ff00000
  40292c:	00000000 	.word	0x00000000

00402930 <atan>:
  402930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402934:	4bc0      	ldr	r3, [pc, #768]	; (402c38 <atan+0x308>)
  402936:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40293a:	429e      	cmp	r6, r3
  40293c:	460d      	mov	r5, r1
  40293e:	468a      	mov	sl, r1
  402940:	4604      	mov	r4, r0
  402942:	dd0f      	ble.n	402964 <atan+0x34>
  402944:	4bbd      	ldr	r3, [pc, #756]	; (402c3c <atan+0x30c>)
  402946:	429e      	cmp	r6, r3
  402948:	f300 80b2 	bgt.w	402ab0 <atan+0x180>
  40294c:	f000 80ad 	beq.w	402aaa <atan+0x17a>
  402950:	4bbb      	ldr	r3, [pc, #748]	; (402c40 <atan+0x310>)
  402952:	49bc      	ldr	r1, [pc, #752]	; (402c44 <atan+0x314>)
  402954:	4cbc      	ldr	r4, [pc, #752]	; (402c48 <atan+0x318>)
  402956:	f1ba 0f00 	cmp.w	sl, #0
  40295a:	bfc8      	it	gt
  40295c:	4619      	movgt	r1, r3
  40295e:	4620      	mov	r0, r4
  402960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402964:	4bb9      	ldr	r3, [pc, #740]	; (402c4c <atan+0x31c>)
  402966:	429e      	cmp	r6, r3
  402968:	f300 80bc 	bgt.w	402ae4 <atan+0x1b4>
  40296c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  402970:	429e      	cmp	r6, r3
  402972:	f340 80a7 	ble.w	402ac4 <atan+0x194>
  402976:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  40297a:	4622      	mov	r2, r4
  40297c:	462b      	mov	r3, r5
  40297e:	4620      	mov	r0, r4
  402980:	4629      	mov	r1, r5
  402982:	f004 fb55 	bl	407030 <__aeabi_dmul>
  402986:	4602      	mov	r2, r0
  402988:	460b      	mov	r3, r1
  40298a:	4680      	mov	r8, r0
  40298c:	4689      	mov	r9, r1
  40298e:	f004 fb4f 	bl	407030 <__aeabi_dmul>
  402992:	a391      	add	r3, pc, #580	; (adr r3, 402bd8 <atan+0x2a8>)
  402994:	e9d3 2300 	ldrd	r2, r3, [r3]
  402998:	4606      	mov	r6, r0
  40299a:	460f      	mov	r7, r1
  40299c:	f004 fb48 	bl	407030 <__aeabi_dmul>
  4029a0:	a38f      	add	r3, pc, #572	; (adr r3, 402be0 <atan+0x2b0>)
  4029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029a6:	f004 f991 	bl	406ccc <__adddf3>
  4029aa:	4632      	mov	r2, r6
  4029ac:	463b      	mov	r3, r7
  4029ae:	f004 fb3f 	bl	407030 <__aeabi_dmul>
  4029b2:	a38d      	add	r3, pc, #564	; (adr r3, 402be8 <atan+0x2b8>)
  4029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029b8:	f004 f988 	bl	406ccc <__adddf3>
  4029bc:	4632      	mov	r2, r6
  4029be:	463b      	mov	r3, r7
  4029c0:	f004 fb36 	bl	407030 <__aeabi_dmul>
  4029c4:	a38a      	add	r3, pc, #552	; (adr r3, 402bf0 <atan+0x2c0>)
  4029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029ca:	f004 f97f 	bl	406ccc <__adddf3>
  4029ce:	4632      	mov	r2, r6
  4029d0:	463b      	mov	r3, r7
  4029d2:	f004 fb2d 	bl	407030 <__aeabi_dmul>
  4029d6:	a388      	add	r3, pc, #544	; (adr r3, 402bf8 <atan+0x2c8>)
  4029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029dc:	f004 f976 	bl	406ccc <__adddf3>
  4029e0:	4632      	mov	r2, r6
  4029e2:	463b      	mov	r3, r7
  4029e4:	f004 fb24 	bl	407030 <__aeabi_dmul>
  4029e8:	a385      	add	r3, pc, #532	; (adr r3, 402c00 <atan+0x2d0>)
  4029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029ee:	f004 f96d 	bl	406ccc <__adddf3>
  4029f2:	4642      	mov	r2, r8
  4029f4:	464b      	mov	r3, r9
  4029f6:	f004 fb1b 	bl	407030 <__aeabi_dmul>
  4029fa:	a383      	add	r3, pc, #524	; (adr r3, 402c08 <atan+0x2d8>)
  4029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a00:	4680      	mov	r8, r0
  402a02:	4689      	mov	r9, r1
  402a04:	4630      	mov	r0, r6
  402a06:	4639      	mov	r1, r7
  402a08:	f004 fb12 	bl	407030 <__aeabi_dmul>
  402a0c:	a380      	add	r3, pc, #512	; (adr r3, 402c10 <atan+0x2e0>)
  402a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a12:	f004 f959 	bl	406cc8 <__aeabi_dsub>
  402a16:	4632      	mov	r2, r6
  402a18:	463b      	mov	r3, r7
  402a1a:	f004 fb09 	bl	407030 <__aeabi_dmul>
  402a1e:	a37e      	add	r3, pc, #504	; (adr r3, 402c18 <atan+0x2e8>)
  402a20:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a24:	f004 f950 	bl	406cc8 <__aeabi_dsub>
  402a28:	4632      	mov	r2, r6
  402a2a:	463b      	mov	r3, r7
  402a2c:	f004 fb00 	bl	407030 <__aeabi_dmul>
  402a30:	a37b      	add	r3, pc, #492	; (adr r3, 402c20 <atan+0x2f0>)
  402a32:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a36:	f004 f947 	bl	406cc8 <__aeabi_dsub>
  402a3a:	4632      	mov	r2, r6
  402a3c:	463b      	mov	r3, r7
  402a3e:	f004 faf7 	bl	407030 <__aeabi_dmul>
  402a42:	a379      	add	r3, pc, #484	; (adr r3, 402c28 <atan+0x2f8>)
  402a44:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a48:	f004 f93e 	bl	406cc8 <__aeabi_dsub>
  402a4c:	4632      	mov	r2, r6
  402a4e:	463b      	mov	r3, r7
  402a50:	f004 faee 	bl	407030 <__aeabi_dmul>
  402a54:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402a58:	4602      	mov	r2, r0
  402a5a:	460b      	mov	r3, r1
  402a5c:	d069      	beq.n	402b32 <atan+0x202>
  402a5e:	4640      	mov	r0, r8
  402a60:	4649      	mov	r1, r9
  402a62:	f004 f933 	bl	406ccc <__adddf3>
  402a66:	4622      	mov	r2, r4
  402a68:	462b      	mov	r3, r5
  402a6a:	f004 fae1 	bl	407030 <__aeabi_dmul>
  402a6e:	4e78      	ldr	r6, [pc, #480]	; (402c50 <atan+0x320>)
  402a70:	4b78      	ldr	r3, [pc, #480]	; (402c54 <atan+0x324>)
  402a72:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402a76:	445e      	add	r6, fp
  402a78:	449b      	add	fp, r3
  402a7a:	e9db 2300 	ldrd	r2, r3, [fp]
  402a7e:	f004 f923 	bl	406cc8 <__aeabi_dsub>
  402a82:	4622      	mov	r2, r4
  402a84:	462b      	mov	r3, r5
  402a86:	f004 f91f 	bl	406cc8 <__aeabi_dsub>
  402a8a:	4602      	mov	r2, r0
  402a8c:	460b      	mov	r3, r1
  402a8e:	e9d6 0100 	ldrd	r0, r1, [r6]
  402a92:	f004 f919 	bl	406cc8 <__aeabi_dsub>
  402a96:	f1ba 0f00 	cmp.w	sl, #0
  402a9a:	4604      	mov	r4, r0
  402a9c:	f6bf af5f 	bge.w	40295e <atan+0x2e>
  402aa0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402aa4:	4620      	mov	r0, r4
  402aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402aaa:	2800      	cmp	r0, #0
  402aac:	f43f af50 	beq.w	402950 <atan+0x20>
  402ab0:	4622      	mov	r2, r4
  402ab2:	4620      	mov	r0, r4
  402ab4:	462b      	mov	r3, r5
  402ab6:	4629      	mov	r1, r5
  402ab8:	f004 f908 	bl	406ccc <__adddf3>
  402abc:	4604      	mov	r4, r0
  402abe:	4620      	mov	r0, r4
  402ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ac4:	a35a      	add	r3, pc, #360	; (adr r3, 402c30 <atan+0x300>)
  402ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
  402aca:	f004 f8ff 	bl	406ccc <__adddf3>
  402ace:	2200      	movs	r2, #0
  402ad0:	4b61      	ldr	r3, [pc, #388]	; (402c58 <atan+0x328>)
  402ad2:	f004 fd3d 	bl	407550 <__aeabi_dcmpgt>
  402ad6:	2800      	cmp	r0, #0
  402ad8:	f43f af4d 	beq.w	402976 <atan+0x46>
  402adc:	4629      	mov	r1, r5
  402ade:	4620      	mov	r0, r4
  402ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ae4:	f000 f8c2 	bl	402c6c <fabs>
  402ae8:	4b5c      	ldr	r3, [pc, #368]	; (402c5c <atan+0x32c>)
  402aea:	429e      	cmp	r6, r3
  402aec:	4604      	mov	r4, r0
  402aee:	460d      	mov	r5, r1
  402af0:	dc2f      	bgt.n	402b52 <atan+0x222>
  402af2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  402af6:	429e      	cmp	r6, r3
  402af8:	dc54      	bgt.n	402ba4 <atan+0x274>
  402afa:	4602      	mov	r2, r0
  402afc:	460b      	mov	r3, r1
  402afe:	f004 f8e5 	bl	406ccc <__adddf3>
  402b02:	2200      	movs	r2, #0
  402b04:	4b54      	ldr	r3, [pc, #336]	; (402c58 <atan+0x328>)
  402b06:	f004 f8df 	bl	406cc8 <__aeabi_dsub>
  402b0a:	2200      	movs	r2, #0
  402b0c:	4606      	mov	r6, r0
  402b0e:	460f      	mov	r7, r1
  402b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402b14:	4620      	mov	r0, r4
  402b16:	4629      	mov	r1, r5
  402b18:	f004 f8d8 	bl	406ccc <__adddf3>
  402b1c:	4602      	mov	r2, r0
  402b1e:	460b      	mov	r3, r1
  402b20:	4630      	mov	r0, r6
  402b22:	4639      	mov	r1, r7
  402b24:	f004 fbae 	bl	407284 <__aeabi_ddiv>
  402b28:	f04f 0b00 	mov.w	fp, #0
  402b2c:	4604      	mov	r4, r0
  402b2e:	460d      	mov	r5, r1
  402b30:	e723      	b.n	40297a <atan+0x4a>
  402b32:	4640      	mov	r0, r8
  402b34:	4649      	mov	r1, r9
  402b36:	f004 f8c9 	bl	406ccc <__adddf3>
  402b3a:	4622      	mov	r2, r4
  402b3c:	462b      	mov	r3, r5
  402b3e:	f004 fa77 	bl	407030 <__aeabi_dmul>
  402b42:	4602      	mov	r2, r0
  402b44:	460b      	mov	r3, r1
  402b46:	4620      	mov	r0, r4
  402b48:	4629      	mov	r1, r5
  402b4a:	f004 f8bd 	bl	406cc8 <__aeabi_dsub>
  402b4e:	4604      	mov	r4, r0
  402b50:	e705      	b.n	40295e <atan+0x2e>
  402b52:	4b43      	ldr	r3, [pc, #268]	; (402c60 <atan+0x330>)
  402b54:	429e      	cmp	r6, r3
  402b56:	dc1a      	bgt.n	402b8e <atan+0x25e>
  402b58:	2200      	movs	r2, #0
  402b5a:	4b42      	ldr	r3, [pc, #264]	; (402c64 <atan+0x334>)
  402b5c:	f004 f8b4 	bl	406cc8 <__aeabi_dsub>
  402b60:	2200      	movs	r2, #0
  402b62:	4606      	mov	r6, r0
  402b64:	460f      	mov	r7, r1
  402b66:	4b3f      	ldr	r3, [pc, #252]	; (402c64 <atan+0x334>)
  402b68:	4620      	mov	r0, r4
  402b6a:	4629      	mov	r1, r5
  402b6c:	f004 fa60 	bl	407030 <__aeabi_dmul>
  402b70:	2200      	movs	r2, #0
  402b72:	4b39      	ldr	r3, [pc, #228]	; (402c58 <atan+0x328>)
  402b74:	f004 f8aa 	bl	406ccc <__adddf3>
  402b78:	4602      	mov	r2, r0
  402b7a:	460b      	mov	r3, r1
  402b7c:	4630      	mov	r0, r6
  402b7e:	4639      	mov	r1, r7
  402b80:	f004 fb80 	bl	407284 <__aeabi_ddiv>
  402b84:	f04f 0b02 	mov.w	fp, #2
  402b88:	4604      	mov	r4, r0
  402b8a:	460d      	mov	r5, r1
  402b8c:	e6f5      	b.n	40297a <atan+0x4a>
  402b8e:	4602      	mov	r2, r0
  402b90:	460b      	mov	r3, r1
  402b92:	2000      	movs	r0, #0
  402b94:	4934      	ldr	r1, [pc, #208]	; (402c68 <atan+0x338>)
  402b96:	f004 fb75 	bl	407284 <__aeabi_ddiv>
  402b9a:	f04f 0b03 	mov.w	fp, #3
  402b9e:	4604      	mov	r4, r0
  402ba0:	460d      	mov	r5, r1
  402ba2:	e6ea      	b.n	40297a <atan+0x4a>
  402ba4:	2200      	movs	r2, #0
  402ba6:	4b2c      	ldr	r3, [pc, #176]	; (402c58 <atan+0x328>)
  402ba8:	f004 f88e 	bl	406cc8 <__aeabi_dsub>
  402bac:	2200      	movs	r2, #0
  402bae:	4606      	mov	r6, r0
  402bb0:	460f      	mov	r7, r1
  402bb2:	4b29      	ldr	r3, [pc, #164]	; (402c58 <atan+0x328>)
  402bb4:	4620      	mov	r0, r4
  402bb6:	4629      	mov	r1, r5
  402bb8:	f004 f888 	bl	406ccc <__adddf3>
  402bbc:	4602      	mov	r2, r0
  402bbe:	460b      	mov	r3, r1
  402bc0:	4630      	mov	r0, r6
  402bc2:	4639      	mov	r1, r7
  402bc4:	f004 fb5e 	bl	407284 <__aeabi_ddiv>
  402bc8:	f04f 0b01 	mov.w	fp, #1
  402bcc:	4604      	mov	r4, r0
  402bce:	460d      	mov	r5, r1
  402bd0:	e6d3      	b.n	40297a <atan+0x4a>
  402bd2:	bf00      	nop
  402bd4:	f3af 8000 	nop.w
  402bd8:	e322da11 	.word	0xe322da11
  402bdc:	3f90ad3a 	.word	0x3f90ad3a
  402be0:	24760deb 	.word	0x24760deb
  402be4:	3fa97b4b 	.word	0x3fa97b4b
  402be8:	a0d03d51 	.word	0xa0d03d51
  402bec:	3fb10d66 	.word	0x3fb10d66
  402bf0:	c54c206e 	.word	0xc54c206e
  402bf4:	3fb745cd 	.word	0x3fb745cd
  402bf8:	920083ff 	.word	0x920083ff
  402bfc:	3fc24924 	.word	0x3fc24924
  402c00:	5555550d 	.word	0x5555550d
  402c04:	3fd55555 	.word	0x3fd55555
  402c08:	2c6a6c2f 	.word	0x2c6a6c2f
  402c0c:	bfa2b444 	.word	0xbfa2b444
  402c10:	52defd9a 	.word	0x52defd9a
  402c14:	3fadde2d 	.word	0x3fadde2d
  402c18:	af749a6d 	.word	0xaf749a6d
  402c1c:	3fb3b0f2 	.word	0x3fb3b0f2
  402c20:	fe231671 	.word	0xfe231671
  402c24:	3fbc71c6 	.word	0x3fbc71c6
  402c28:	9998ebc4 	.word	0x9998ebc4
  402c2c:	3fc99999 	.word	0x3fc99999
  402c30:	8800759c 	.word	0x8800759c
  402c34:	7e37e43c 	.word	0x7e37e43c
  402c38:	440fffff 	.word	0x440fffff
  402c3c:	7ff00000 	.word	0x7ff00000
  402c40:	3ff921fb 	.word	0x3ff921fb
  402c44:	bff921fb 	.word	0xbff921fb
  402c48:	54442d18 	.word	0x54442d18
  402c4c:	3fdbffff 	.word	0x3fdbffff
  402c50:	004080f0 	.word	0x004080f0
  402c54:	004080d0 	.word	0x004080d0
  402c58:	3ff00000 	.word	0x3ff00000
  402c5c:	3ff2ffff 	.word	0x3ff2ffff
  402c60:	40037fff 	.word	0x40037fff
  402c64:	3ff80000 	.word	0x3ff80000
  402c68:	bff00000 	.word	0xbff00000

00402c6c <fabs>:
  402c6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402c70:	4770      	bx	lr
  402c72:	bf00      	nop

00402c74 <matherr>:
  402c74:	2000      	movs	r0, #0
  402c76:	4770      	bx	lr

00402c78 <atof>:
  402c78:	2100      	movs	r1, #0
  402c7a:	f001 bc11 	b.w	4044a0 <strtod>

00402c7e <atoi>:
  402c7e:	220a      	movs	r2, #10
  402c80:	2100      	movs	r1, #0
  402c82:	f001 bcd5 	b.w	404630 <strtol>
	...

00402c88 <__errno>:
  402c88:	4b01      	ldr	r3, [pc, #4]	; (402c90 <__errno+0x8>)
  402c8a:	6818      	ldr	r0, [r3, #0]
  402c8c:	4770      	bx	lr
  402c8e:	bf00      	nop
  402c90:	20000078 	.word	0x20000078

00402c94 <__libc_init_array>:
  402c94:	b570      	push	{r4, r5, r6, lr}
  402c96:	4b0e      	ldr	r3, [pc, #56]	; (402cd0 <__libc_init_array+0x3c>)
  402c98:	4c0e      	ldr	r4, [pc, #56]	; (402cd4 <__libc_init_array+0x40>)
  402c9a:	1ae4      	subs	r4, r4, r3
  402c9c:	10a4      	asrs	r4, r4, #2
  402c9e:	2500      	movs	r5, #0
  402ca0:	461e      	mov	r6, r3
  402ca2:	42a5      	cmp	r5, r4
  402ca4:	d004      	beq.n	402cb0 <__libc_init_array+0x1c>
  402ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402caa:	4798      	blx	r3
  402cac:	3501      	adds	r5, #1
  402cae:	e7f8      	b.n	402ca2 <__libc_init_array+0xe>
  402cb0:	f005 fbba 	bl	408428 <_init>
  402cb4:	4c08      	ldr	r4, [pc, #32]	; (402cd8 <__libc_init_array+0x44>)
  402cb6:	4b09      	ldr	r3, [pc, #36]	; (402cdc <__libc_init_array+0x48>)
  402cb8:	1ae4      	subs	r4, r4, r3
  402cba:	10a4      	asrs	r4, r4, #2
  402cbc:	2500      	movs	r5, #0
  402cbe:	461e      	mov	r6, r3
  402cc0:	42a5      	cmp	r5, r4
  402cc2:	d004      	beq.n	402cce <__libc_init_array+0x3a>
  402cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402cc8:	4798      	blx	r3
  402cca:	3501      	adds	r5, #1
  402ccc:	e7f8      	b.n	402cc0 <__libc_init_array+0x2c>
  402cce:	bd70      	pop	{r4, r5, r6, pc}
  402cd0:	00408434 	.word	0x00408434
  402cd4:	00408434 	.word	0x00408434
  402cd8:	00408438 	.word	0x00408438
  402cdc:	00408434 	.word	0x00408434

00402ce0 <memcpy>:
  402ce0:	b510      	push	{r4, lr}
  402ce2:	1e43      	subs	r3, r0, #1
  402ce4:	440a      	add	r2, r1
  402ce6:	4291      	cmp	r1, r2
  402ce8:	d004      	beq.n	402cf4 <memcpy+0x14>
  402cea:	f811 4b01 	ldrb.w	r4, [r1], #1
  402cee:	f803 4f01 	strb.w	r4, [r3, #1]!
  402cf2:	e7f8      	b.n	402ce6 <memcpy+0x6>
  402cf4:	bd10      	pop	{r4, pc}

00402cf6 <memset>:
  402cf6:	4402      	add	r2, r0
  402cf8:	4603      	mov	r3, r0
  402cfa:	4293      	cmp	r3, r2
  402cfc:	d002      	beq.n	402d04 <memset+0xe>
  402cfe:	f803 1b01 	strb.w	r1, [r3], #1
  402d02:	e7fa      	b.n	402cfa <memset+0x4>
  402d04:	4770      	bx	lr

00402d06 <__cvt>:
  402d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d0a:	b088      	sub	sp, #32
  402d0c:	2b00      	cmp	r3, #0
  402d0e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402d10:	9912      	ldr	r1, [sp, #72]	; 0x48
  402d12:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402d14:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402d18:	461e      	mov	r6, r3
  402d1a:	f027 0720 	bic.w	r7, r7, #32
  402d1e:	bfbb      	ittet	lt
  402d20:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402d24:	461e      	movlt	r6, r3
  402d26:	2300      	movge	r3, #0
  402d28:	232d      	movlt	r3, #45	; 0x2d
  402d2a:	2f46      	cmp	r7, #70	; 0x46
  402d2c:	4614      	mov	r4, r2
  402d2e:	700b      	strb	r3, [r1, #0]
  402d30:	d003      	beq.n	402d3a <__cvt+0x34>
  402d32:	2f45      	cmp	r7, #69	; 0x45
  402d34:	d103      	bne.n	402d3e <__cvt+0x38>
  402d36:	3501      	adds	r5, #1
  402d38:	e001      	b.n	402d3e <__cvt+0x38>
  402d3a:	2303      	movs	r3, #3
  402d3c:	e000      	b.n	402d40 <__cvt+0x3a>
  402d3e:	2302      	movs	r3, #2
  402d40:	aa07      	add	r2, sp, #28
  402d42:	9204      	str	r2, [sp, #16]
  402d44:	aa06      	add	r2, sp, #24
  402d46:	9203      	str	r2, [sp, #12]
  402d48:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402d4c:	4622      	mov	r2, r4
  402d4e:	4633      	mov	r3, r6
  402d50:	f001 fdd6 	bl	404900 <_dtoa_r>
  402d54:	2f47      	cmp	r7, #71	; 0x47
  402d56:	4680      	mov	r8, r0
  402d58:	d102      	bne.n	402d60 <__cvt+0x5a>
  402d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402d5c:	07db      	lsls	r3, r3, #31
  402d5e:	d528      	bpl.n	402db2 <__cvt+0xac>
  402d60:	2f46      	cmp	r7, #70	; 0x46
  402d62:	eb08 0905 	add.w	r9, r8, r5
  402d66:	d111      	bne.n	402d8c <__cvt+0x86>
  402d68:	f898 3000 	ldrb.w	r3, [r8]
  402d6c:	2b30      	cmp	r3, #48	; 0x30
  402d6e:	d10a      	bne.n	402d86 <__cvt+0x80>
  402d70:	2200      	movs	r2, #0
  402d72:	2300      	movs	r3, #0
  402d74:	4620      	mov	r0, r4
  402d76:	4631      	mov	r1, r6
  402d78:	f004 fbc2 	bl	407500 <__aeabi_dcmpeq>
  402d7c:	b918      	cbnz	r0, 402d86 <__cvt+0x80>
  402d7e:	f1c5 0501 	rsb	r5, r5, #1
  402d82:	f8ca 5000 	str.w	r5, [sl]
  402d86:	f8da 3000 	ldr.w	r3, [sl]
  402d8a:	4499      	add	r9, r3
  402d8c:	2200      	movs	r2, #0
  402d8e:	2300      	movs	r3, #0
  402d90:	4620      	mov	r0, r4
  402d92:	4631      	mov	r1, r6
  402d94:	f004 fbb4 	bl	407500 <__aeabi_dcmpeq>
  402d98:	b908      	cbnz	r0, 402d9e <__cvt+0x98>
  402d9a:	2230      	movs	r2, #48	; 0x30
  402d9c:	e002      	b.n	402da4 <__cvt+0x9e>
  402d9e:	f8cd 901c 	str.w	r9, [sp, #28]
  402da2:	e006      	b.n	402db2 <__cvt+0xac>
  402da4:	9b07      	ldr	r3, [sp, #28]
  402da6:	4599      	cmp	r9, r3
  402da8:	d903      	bls.n	402db2 <__cvt+0xac>
  402daa:	1c59      	adds	r1, r3, #1
  402dac:	9107      	str	r1, [sp, #28]
  402dae:	701a      	strb	r2, [r3, #0]
  402db0:	e7f8      	b.n	402da4 <__cvt+0x9e>
  402db2:	9b07      	ldr	r3, [sp, #28]
  402db4:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402db6:	ebc8 0303 	rsb	r3, r8, r3
  402dba:	4640      	mov	r0, r8
  402dbc:	6013      	str	r3, [r2, #0]
  402dbe:	b008      	add	sp, #32
  402dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402dc4 <__exponent>:
  402dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402dc6:	4603      	mov	r3, r0
  402dc8:	2900      	cmp	r1, #0
  402dca:	bfb8      	it	lt
  402dcc:	4249      	neglt	r1, r1
  402dce:	f803 2b02 	strb.w	r2, [r3], #2
  402dd2:	bfb4      	ite	lt
  402dd4:	222d      	movlt	r2, #45	; 0x2d
  402dd6:	222b      	movge	r2, #43	; 0x2b
  402dd8:	2909      	cmp	r1, #9
  402dda:	7042      	strb	r2, [r0, #1]
  402ddc:	dd19      	ble.n	402e12 <__exponent+0x4e>
  402dde:	f10d 0207 	add.w	r2, sp, #7
  402de2:	4616      	mov	r6, r2
  402de4:	250a      	movs	r5, #10
  402de6:	fb91 f4f5 	sdiv	r4, r1, r5
  402dea:	fb05 1114 	mls	r1, r5, r4, r1
  402dee:	3130      	adds	r1, #48	; 0x30
  402df0:	2c09      	cmp	r4, #9
  402df2:	f802 1d01 	strb.w	r1, [r2, #-1]!
  402df6:	4621      	mov	r1, r4
  402df8:	dcf5      	bgt.n	402de6 <__exponent+0x22>
  402dfa:	3130      	adds	r1, #48	; 0x30
  402dfc:	1e54      	subs	r4, r2, #1
  402dfe:	f802 1c01 	strb.w	r1, [r2, #-1]
  402e02:	42b4      	cmp	r4, r6
  402e04:	461a      	mov	r2, r3
  402e06:	d20a      	bcs.n	402e1e <__exponent+0x5a>
  402e08:	f814 2b01 	ldrb.w	r2, [r4], #1
  402e0c:	f803 2b01 	strb.w	r2, [r3], #1
  402e10:	e7f7      	b.n	402e02 <__exponent+0x3e>
  402e12:	2430      	movs	r4, #48	; 0x30
  402e14:	461a      	mov	r2, r3
  402e16:	4421      	add	r1, r4
  402e18:	f802 4b02 	strb.w	r4, [r2], #2
  402e1c:	7059      	strb	r1, [r3, #1]
  402e1e:	1a10      	subs	r0, r2, r0
  402e20:	b002      	add	sp, #8
  402e22:	bd70      	pop	{r4, r5, r6, pc}

00402e24 <_printf_float>:
  402e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e28:	b091      	sub	sp, #68	; 0x44
  402e2a:	460c      	mov	r4, r1
  402e2c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  402e30:	4616      	mov	r6, r2
  402e32:	461f      	mov	r7, r3
  402e34:	4605      	mov	r5, r0
  402e36:	f002 ff9f 	bl	405d78 <_localeconv_r>
  402e3a:	6803      	ldr	r3, [r0, #0]
  402e3c:	9309      	str	r3, [sp, #36]	; 0x24
  402e3e:	4618      	mov	r0, r3
  402e40:	f000 fd0e 	bl	403860 <strlen>
  402e44:	2300      	movs	r3, #0
  402e46:	930e      	str	r3, [sp, #56]	; 0x38
  402e48:	f8d8 3000 	ldr.w	r3, [r8]
  402e4c:	900a      	str	r0, [sp, #40]	; 0x28
  402e4e:	3307      	adds	r3, #7
  402e50:	f023 0307 	bic.w	r3, r3, #7
  402e54:	f103 0208 	add.w	r2, r3, #8
  402e58:	f894 9018 	ldrb.w	r9, [r4, #24]
  402e5c:	f8d4 b000 	ldr.w	fp, [r4]
  402e60:	f8c8 2000 	str.w	r2, [r8]
  402e64:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402e6c:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  402e70:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402e74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402e78:	930b      	str	r3, [sp, #44]	; 0x2c
  402e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402e7e:	4ba7      	ldr	r3, [pc, #668]	; (40311c <_printf_float+0x2f8>)
  402e80:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e82:	4640      	mov	r0, r8
  402e84:	f004 fb6e 	bl	407564 <__aeabi_dcmpun>
  402e88:	b9a0      	cbnz	r0, 402eb4 <_printf_float+0x90>
  402e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402e8e:	4ba3      	ldr	r3, [pc, #652]	; (40311c <_printf_float+0x2f8>)
  402e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402e92:	4640      	mov	r0, r8
  402e94:	f004 fb48 	bl	407528 <__aeabi_dcmple>
  402e98:	b960      	cbnz	r0, 402eb4 <_printf_float+0x90>
  402e9a:	2200      	movs	r2, #0
  402e9c:	2300      	movs	r3, #0
  402e9e:	4640      	mov	r0, r8
  402ea0:	4651      	mov	r1, sl
  402ea2:	f004 fb37 	bl	407514 <__aeabi_dcmplt>
  402ea6:	b110      	cbz	r0, 402eae <_printf_float+0x8a>
  402ea8:	232d      	movs	r3, #45	; 0x2d
  402eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402eae:	4b9c      	ldr	r3, [pc, #624]	; (403120 <_printf_float+0x2fc>)
  402eb0:	4a9c      	ldr	r2, [pc, #624]	; (403124 <_printf_float+0x300>)
  402eb2:	e00a      	b.n	402eca <_printf_float+0xa6>
  402eb4:	4642      	mov	r2, r8
  402eb6:	4653      	mov	r3, sl
  402eb8:	4640      	mov	r0, r8
  402eba:	4651      	mov	r1, sl
  402ebc:	f004 fb52 	bl	407564 <__aeabi_dcmpun>
  402ec0:	2800      	cmp	r0, #0
  402ec2:	f000 8192 	beq.w	4031ea <_printf_float+0x3c6>
  402ec6:	4b98      	ldr	r3, [pc, #608]	; (403128 <_printf_float+0x304>)
  402ec8:	4a98      	ldr	r2, [pc, #608]	; (40312c <_printf_float+0x308>)
  402eca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402ece:	bf8c      	ite	hi
  402ed0:	4690      	movhi	r8, r2
  402ed2:	4698      	movls	r8, r3
  402ed4:	2303      	movs	r3, #3
  402ed6:	6123      	str	r3, [r4, #16]
  402ed8:	f02b 0304 	bic.w	r3, fp, #4
  402edc:	6023      	str	r3, [r4, #0]
  402ede:	f04f 0a00 	mov.w	sl, #0
  402ee2:	e03d      	b.n	402f60 <_printf_float+0x13c>
  402ee4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  402ee8:	f000 818a 	beq.w	403200 <_printf_float+0x3dc>
  402eec:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402ef0:	f000 8186 	beq.w	403200 <_printf_float+0x3dc>
  402ef4:	6023      	str	r3, [r4, #0]
  402ef6:	2100      	movs	r1, #0
  402ef8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402efc:	9301      	str	r3, [sp, #4]
  402efe:	6863      	ldr	r3, [r4, #4]
  402f00:	9005      	str	r0, [sp, #20]
  402f02:	9202      	str	r2, [sp, #8]
  402f04:	9300      	str	r3, [sp, #0]
  402f06:	4642      	mov	r2, r8
  402f08:	4653      	mov	r3, sl
  402f0a:	9106      	str	r1, [sp, #24]
  402f0c:	f8cd 9010 	str.w	r9, [sp, #16]
  402f10:	f8cd e00c 	str.w	lr, [sp, #12]
  402f14:	4628      	mov	r0, r5
  402f16:	f7ff fef6 	bl	402d06 <__cvt>
  402f1a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  402f1e:	2b47      	cmp	r3, #71	; 0x47
  402f20:	4680      	mov	r8, r0
  402f22:	f000 8184 	beq.w	40322e <_printf_float+0x40a>
  402f26:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402f2a:	990d      	ldr	r1, [sp, #52]	; 0x34
  402f2c:	f200 818d 	bhi.w	40324a <_printf_float+0x426>
  402f30:	3901      	subs	r1, #1
  402f32:	464a      	mov	r2, r9
  402f34:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402f38:	910d      	str	r1, [sp, #52]	; 0x34
  402f3a:	f7ff ff43 	bl	402dc4 <__exponent>
  402f3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402f40:	1883      	adds	r3, r0, r2
  402f42:	2a01      	cmp	r2, #1
  402f44:	4682      	mov	sl, r0
  402f46:	6123      	str	r3, [r4, #16]
  402f48:	f300 817c 	bgt.w	403244 <_printf_float+0x420>
  402f4c:	6822      	ldr	r2, [r4, #0]
  402f4e:	07d1      	lsls	r1, r2, #31
  402f50:	f100 8178 	bmi.w	403244 <_printf_float+0x420>
  402f54:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402f58:	b113      	cbz	r3, 402f60 <_printf_float+0x13c>
  402f5a:	232d      	movs	r3, #45	; 0x2d
  402f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402f60:	9700      	str	r7, [sp, #0]
  402f62:	4633      	mov	r3, r6
  402f64:	aa0f      	add	r2, sp, #60	; 0x3c
  402f66:	4621      	mov	r1, r4
  402f68:	4628      	mov	r0, r5
  402f6a:	f000 f99f 	bl	4032ac <_printf_common>
  402f6e:	3001      	adds	r0, #1
  402f70:	d102      	bne.n	402f78 <_printf_float+0x154>
  402f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402f76:	e196      	b.n	4032a6 <_printf_float+0x482>
  402f78:	6823      	ldr	r3, [r4, #0]
  402f7a:	055a      	lsls	r2, r3, #21
  402f7c:	d401      	bmi.n	402f82 <_printf_float+0x15e>
  402f7e:	6923      	ldr	r3, [r4, #16]
  402f80:	e065      	b.n	40304e <_printf_float+0x22a>
  402f82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402f86:	f240 80d5 	bls.w	403134 <_printf_float+0x310>
  402f8a:	2200      	movs	r2, #0
  402f8c:	2300      	movs	r3, #0
  402f8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402f92:	f004 fab5 	bl	407500 <__aeabi_dcmpeq>
  402f96:	b378      	cbz	r0, 402ff8 <_printf_float+0x1d4>
  402f98:	2301      	movs	r3, #1
  402f9a:	4a65      	ldr	r2, [pc, #404]	; (403130 <_printf_float+0x30c>)
  402f9c:	4631      	mov	r1, r6
  402f9e:	4628      	mov	r0, r5
  402fa0:	47b8      	blx	r7
  402fa2:	3001      	adds	r0, #1
  402fa4:	d0e5      	beq.n	402f72 <_printf_float+0x14e>
  402fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402fa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402faa:	429a      	cmp	r2, r3
  402fac:	db0b      	blt.n	402fc6 <_printf_float+0x1a2>
  402fae:	6823      	ldr	r3, [r4, #0]
  402fb0:	07d8      	lsls	r0, r3, #31
  402fb2:	d408      	bmi.n	402fc6 <_printf_float+0x1a2>
  402fb4:	6823      	ldr	r3, [r4, #0]
  402fb6:	079b      	lsls	r3, r3, #30
  402fb8:	f140 8111 	bpl.w	4031de <_printf_float+0x3ba>
  402fbc:	f04f 0800 	mov.w	r8, #0
  402fc0:	f104 0919 	add.w	r9, r4, #25
  402fc4:	e106      	b.n	4031d4 <_printf_float+0x3b0>
  402fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402fca:	4631      	mov	r1, r6
  402fcc:	4628      	mov	r0, r5
  402fce:	47b8      	blx	r7
  402fd0:	3001      	adds	r0, #1
  402fd2:	d0ce      	beq.n	402f72 <_printf_float+0x14e>
  402fd4:	f04f 0800 	mov.w	r8, #0
  402fd8:	f104 091a 	add.w	r9, r4, #26
  402fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402fde:	3b01      	subs	r3, #1
  402fe0:	4598      	cmp	r8, r3
  402fe2:	dae7      	bge.n	402fb4 <_printf_float+0x190>
  402fe4:	2301      	movs	r3, #1
  402fe6:	464a      	mov	r2, r9
  402fe8:	4631      	mov	r1, r6
  402fea:	4628      	mov	r0, r5
  402fec:	47b8      	blx	r7
  402fee:	3001      	adds	r0, #1
  402ff0:	d0bf      	beq.n	402f72 <_printf_float+0x14e>
  402ff2:	f108 0801 	add.w	r8, r8, #1
  402ff6:	e7f1      	b.n	402fdc <_printf_float+0x1b8>
  402ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402ffa:	2b00      	cmp	r3, #0
  402ffc:	dc29      	bgt.n	403052 <_printf_float+0x22e>
  402ffe:	2301      	movs	r3, #1
  403000:	4a4b      	ldr	r2, [pc, #300]	; (403130 <_printf_float+0x30c>)
  403002:	4631      	mov	r1, r6
  403004:	4628      	mov	r0, r5
  403006:	47b8      	blx	r7
  403008:	3001      	adds	r0, #1
  40300a:	d0b2      	beq.n	402f72 <_printf_float+0x14e>
  40300c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40300e:	b923      	cbnz	r3, 40301a <_printf_float+0x1f6>
  403010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403012:	b913      	cbnz	r3, 40301a <_printf_float+0x1f6>
  403014:	6823      	ldr	r3, [r4, #0]
  403016:	07d9      	lsls	r1, r3, #31
  403018:	d5cc      	bpl.n	402fb4 <_printf_float+0x190>
  40301a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40301c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40301e:	4631      	mov	r1, r6
  403020:	4628      	mov	r0, r5
  403022:	47b8      	blx	r7
  403024:	3001      	adds	r0, #1
  403026:	d0a4      	beq.n	402f72 <_printf_float+0x14e>
  403028:	f04f 0900 	mov.w	r9, #0
  40302c:	f104 0a1a 	add.w	sl, r4, #26
  403030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403032:	425b      	negs	r3, r3
  403034:	4599      	cmp	r9, r3
  403036:	da09      	bge.n	40304c <_printf_float+0x228>
  403038:	2301      	movs	r3, #1
  40303a:	4652      	mov	r2, sl
  40303c:	4631      	mov	r1, r6
  40303e:	4628      	mov	r0, r5
  403040:	47b8      	blx	r7
  403042:	3001      	adds	r0, #1
  403044:	d095      	beq.n	402f72 <_printf_float+0x14e>
  403046:	f109 0901 	add.w	r9, r9, #1
  40304a:	e7f1      	b.n	403030 <_printf_float+0x20c>
  40304c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40304e:	4642      	mov	r2, r8
  403050:	e0a7      	b.n	4031a2 <_printf_float+0x37e>
  403052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403054:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403056:	429a      	cmp	r2, r3
  403058:	bfa8      	it	ge
  40305a:	461a      	movge	r2, r3
  40305c:	2a00      	cmp	r2, #0
  40305e:	4691      	mov	r9, r2
  403060:	dc06      	bgt.n	403070 <_printf_float+0x24c>
  403062:	f04f 0a00 	mov.w	sl, #0
  403066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  40306a:	f104 0b1a 	add.w	fp, r4, #26
  40306e:	e011      	b.n	403094 <_printf_float+0x270>
  403070:	4613      	mov	r3, r2
  403072:	4631      	mov	r1, r6
  403074:	4642      	mov	r2, r8
  403076:	4628      	mov	r0, r5
  403078:	47b8      	blx	r7
  40307a:	3001      	adds	r0, #1
  40307c:	d1f1      	bne.n	403062 <_printf_float+0x23e>
  40307e:	e778      	b.n	402f72 <_printf_float+0x14e>
  403080:	2301      	movs	r3, #1
  403082:	465a      	mov	r2, fp
  403084:	4631      	mov	r1, r6
  403086:	4628      	mov	r0, r5
  403088:	47b8      	blx	r7
  40308a:	3001      	adds	r0, #1
  40308c:	f43f af71 	beq.w	402f72 <_printf_float+0x14e>
  403090:	f10a 0a01 	add.w	sl, sl, #1
  403094:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403096:	ebc9 0203 	rsb	r2, r9, r3
  40309a:	4592      	cmp	sl, r2
  40309c:	dbf0      	blt.n	403080 <_printf_float+0x25c>
  40309e:	eb08 0903 	add.w	r9, r8, r3
  4030a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4030a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030a6:	429a      	cmp	r2, r3
  4030a8:	db0f      	blt.n	4030ca <_printf_float+0x2a6>
  4030aa:	6823      	ldr	r3, [r4, #0]
  4030ac:	07da      	lsls	r2, r3, #31
  4030ae:	d40c      	bmi.n	4030ca <_printf_float+0x2a6>
  4030b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4030b4:	4498      	add	r8, r3
  4030b6:	ebc9 0808 	rsb	r8, r9, r8
  4030ba:	1a9b      	subs	r3, r3, r2
  4030bc:	4598      	cmp	r8, r3
  4030be:	bfa8      	it	ge
  4030c0:	4698      	movge	r8, r3
  4030c2:	f1b8 0f00 	cmp.w	r8, #0
  4030c6:	dc08      	bgt.n	4030da <_printf_float+0x2b6>
  4030c8:	e00f      	b.n	4030ea <_printf_float+0x2c6>
  4030ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4030ce:	4631      	mov	r1, r6
  4030d0:	4628      	mov	r0, r5
  4030d2:	47b8      	blx	r7
  4030d4:	3001      	adds	r0, #1
  4030d6:	d1eb      	bne.n	4030b0 <_printf_float+0x28c>
  4030d8:	e74b      	b.n	402f72 <_printf_float+0x14e>
  4030da:	4643      	mov	r3, r8
  4030dc:	464a      	mov	r2, r9
  4030de:	4631      	mov	r1, r6
  4030e0:	4628      	mov	r0, r5
  4030e2:	47b8      	blx	r7
  4030e4:	3001      	adds	r0, #1
  4030e6:	f43f af44 	beq.w	402f72 <_printf_float+0x14e>
  4030ea:	f04f 0900 	mov.w	r9, #0
  4030ee:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4030f2:	f104 0a1a 	add.w	sl, r4, #26
  4030f6:	e009      	b.n	40310c <_printf_float+0x2e8>
  4030f8:	2301      	movs	r3, #1
  4030fa:	4652      	mov	r2, sl
  4030fc:	4631      	mov	r1, r6
  4030fe:	4628      	mov	r0, r5
  403100:	47b8      	blx	r7
  403102:	3001      	adds	r0, #1
  403104:	f43f af35 	beq.w	402f72 <_printf_float+0x14e>
  403108:	f109 0901 	add.w	r9, r9, #1
  40310c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40310e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403110:	1a9b      	subs	r3, r3, r2
  403112:	ebc8 0303 	rsb	r3, r8, r3
  403116:	4599      	cmp	r9, r3
  403118:	dbee      	blt.n	4030f8 <_printf_float+0x2d4>
  40311a:	e74b      	b.n	402fb4 <_printf_float+0x190>
  40311c:	7fefffff 	.word	0x7fefffff
  403120:	00408114 	.word	0x00408114
  403124:	00408118 	.word	0x00408118
  403128:	0040811c 	.word	0x0040811c
  40312c:	00408120 	.word	0x00408120
  403130:	00408124 	.word	0x00408124
  403134:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403136:	2a01      	cmp	r2, #1
  403138:	dc01      	bgt.n	40313e <_printf_float+0x31a>
  40313a:	07db      	lsls	r3, r3, #31
  40313c:	d538      	bpl.n	4031b0 <_printf_float+0x38c>
  40313e:	2301      	movs	r3, #1
  403140:	4642      	mov	r2, r8
  403142:	4631      	mov	r1, r6
  403144:	4628      	mov	r0, r5
  403146:	47b8      	blx	r7
  403148:	3001      	adds	r0, #1
  40314a:	f43f af12 	beq.w	402f72 <_printf_float+0x14e>
  40314e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403150:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403152:	4631      	mov	r1, r6
  403154:	4628      	mov	r0, r5
  403156:	47b8      	blx	r7
  403158:	3001      	adds	r0, #1
  40315a:	f43f af0a 	beq.w	402f72 <_printf_float+0x14e>
  40315e:	2200      	movs	r2, #0
  403160:	2300      	movs	r3, #0
  403162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  403166:	f004 f9cb 	bl	407500 <__aeabi_dcmpeq>
  40316a:	b120      	cbz	r0, 403176 <_printf_float+0x352>
  40316c:	f04f 0800 	mov.w	r8, #0
  403170:	f104 091a 	add.w	r9, r4, #26
  403174:	e00e      	b.n	403194 <_printf_float+0x370>
  403176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403178:	f108 0201 	add.w	r2, r8, #1
  40317c:	3b01      	subs	r3, #1
  40317e:	e019      	b.n	4031b4 <_printf_float+0x390>
  403180:	2301      	movs	r3, #1
  403182:	464a      	mov	r2, r9
  403184:	4631      	mov	r1, r6
  403186:	4628      	mov	r0, r5
  403188:	47b8      	blx	r7
  40318a:	3001      	adds	r0, #1
  40318c:	f43f aef1 	beq.w	402f72 <_printf_float+0x14e>
  403190:	f108 0801 	add.w	r8, r8, #1
  403194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403196:	3b01      	subs	r3, #1
  403198:	4598      	cmp	r8, r3
  40319a:	dbf1      	blt.n	403180 <_printf_float+0x35c>
  40319c:	4653      	mov	r3, sl
  40319e:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4031a2:	4631      	mov	r1, r6
  4031a4:	4628      	mov	r0, r5
  4031a6:	47b8      	blx	r7
  4031a8:	3001      	adds	r0, #1
  4031aa:	f47f af03 	bne.w	402fb4 <_printf_float+0x190>
  4031ae:	e6e0      	b.n	402f72 <_printf_float+0x14e>
  4031b0:	2301      	movs	r3, #1
  4031b2:	4642      	mov	r2, r8
  4031b4:	4631      	mov	r1, r6
  4031b6:	4628      	mov	r0, r5
  4031b8:	47b8      	blx	r7
  4031ba:	3001      	adds	r0, #1
  4031bc:	d1ee      	bne.n	40319c <_printf_float+0x378>
  4031be:	e6d8      	b.n	402f72 <_printf_float+0x14e>
  4031c0:	2301      	movs	r3, #1
  4031c2:	464a      	mov	r2, r9
  4031c4:	4631      	mov	r1, r6
  4031c6:	4628      	mov	r0, r5
  4031c8:	47b8      	blx	r7
  4031ca:	3001      	adds	r0, #1
  4031cc:	f43f aed1 	beq.w	402f72 <_printf_float+0x14e>
  4031d0:	f108 0801 	add.w	r8, r8, #1
  4031d4:	68e3      	ldr	r3, [r4, #12]
  4031d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4031d8:	1a9b      	subs	r3, r3, r2
  4031da:	4598      	cmp	r8, r3
  4031dc:	dbf0      	blt.n	4031c0 <_printf_float+0x39c>
  4031de:	68e0      	ldr	r0, [r4, #12]
  4031e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4031e2:	4298      	cmp	r0, r3
  4031e4:	bfb8      	it	lt
  4031e6:	4618      	movlt	r0, r3
  4031e8:	e05d      	b.n	4032a6 <_printf_float+0x482>
  4031ea:	6862      	ldr	r2, [r4, #4]
  4031ec:	1c53      	adds	r3, r2, #1
  4031ee:	a80e      	add	r0, sp, #56	; 0x38
  4031f0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  4031f4:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4031f8:	f47f ae74 	bne.w	402ee4 <_printf_float+0xc0>
  4031fc:	2206      	movs	r2, #6
  4031fe:	e001      	b.n	403204 <_printf_float+0x3e0>
  403200:	b912      	cbnz	r2, 403208 <_printf_float+0x3e4>
  403202:	2201      	movs	r2, #1
  403204:	6062      	str	r2, [r4, #4]
  403206:	e675      	b.n	402ef4 <_printf_float+0xd0>
  403208:	2100      	movs	r1, #0
  40320a:	9106      	str	r1, [sp, #24]
  40320c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403210:	e88d 000c 	stmia.w	sp, {r2, r3}
  403214:	6023      	str	r3, [r4, #0]
  403216:	9005      	str	r0, [sp, #20]
  403218:	4642      	mov	r2, r8
  40321a:	f8cd 9010 	str.w	r9, [sp, #16]
  40321e:	f8cd e00c 	str.w	lr, [sp, #12]
  403222:	9102      	str	r1, [sp, #8]
  403224:	4653      	mov	r3, sl
  403226:	4628      	mov	r0, r5
  403228:	f7ff fd6d 	bl	402d06 <__cvt>
  40322c:	4680      	mov	r8, r0
  40322e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403230:	1cd8      	adds	r0, r3, #3
  403232:	db02      	blt.n	40323a <_printf_float+0x416>
  403234:	6862      	ldr	r2, [r4, #4]
  403236:	4293      	cmp	r3, r2
  403238:	dd1d      	ble.n	403276 <_printf_float+0x452>
  40323a:	f1a9 0902 	sub.w	r9, r9, #2
  40323e:	fa5f f989 	uxtb.w	r9, r9
  403242:	e670      	b.n	402f26 <_printf_float+0x102>
  403244:	3301      	adds	r3, #1
  403246:	6123      	str	r3, [r4, #16]
  403248:	e684      	b.n	402f54 <_printf_float+0x130>
  40324a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  40324e:	d114      	bne.n	40327a <_printf_float+0x456>
  403250:	2900      	cmp	r1, #0
  403252:	6863      	ldr	r3, [r4, #4]
  403254:	dd07      	ble.n	403266 <_printf_float+0x442>
  403256:	6121      	str	r1, [r4, #16]
  403258:	b913      	cbnz	r3, 403260 <_printf_float+0x43c>
  40325a:	6822      	ldr	r2, [r4, #0]
  40325c:	07d2      	lsls	r2, r2, #31
  40325e:	d51d      	bpl.n	40329c <_printf_float+0x478>
  403260:	3301      	adds	r3, #1
  403262:	440b      	add	r3, r1
  403264:	e019      	b.n	40329a <_printf_float+0x476>
  403266:	b913      	cbnz	r3, 40326e <_printf_float+0x44a>
  403268:	6822      	ldr	r2, [r4, #0]
  40326a:	07d0      	lsls	r0, r2, #31
  40326c:	d501      	bpl.n	403272 <_printf_float+0x44e>
  40326e:	3302      	adds	r3, #2
  403270:	e013      	b.n	40329a <_printf_float+0x476>
  403272:	2301      	movs	r3, #1
  403274:	e011      	b.n	40329a <_printf_float+0x476>
  403276:	f04f 0967 	mov.w	r9, #103	; 0x67
  40327a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40327c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40327e:	4293      	cmp	r3, r2
  403280:	db05      	blt.n	40328e <_printf_float+0x46a>
  403282:	6822      	ldr	r2, [r4, #0]
  403284:	6123      	str	r3, [r4, #16]
  403286:	07d1      	lsls	r1, r2, #31
  403288:	d508      	bpl.n	40329c <_printf_float+0x478>
  40328a:	3301      	adds	r3, #1
  40328c:	e005      	b.n	40329a <_printf_float+0x476>
  40328e:	2b00      	cmp	r3, #0
  403290:	bfd4      	ite	le
  403292:	f1c3 0302 	rsble	r3, r3, #2
  403296:	2301      	movgt	r3, #1
  403298:	4413      	add	r3, r2
  40329a:	6123      	str	r3, [r4, #16]
  40329c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40329e:	65a3      	str	r3, [r4, #88]	; 0x58
  4032a0:	f04f 0a00 	mov.w	sl, #0
  4032a4:	e656      	b.n	402f54 <_printf_float+0x130>
  4032a6:	b011      	add	sp, #68	; 0x44
  4032a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004032ac <_printf_common>:
  4032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4032b0:	4691      	mov	r9, r2
  4032b2:	461f      	mov	r7, r3
  4032b4:	690a      	ldr	r2, [r1, #16]
  4032b6:	688b      	ldr	r3, [r1, #8]
  4032b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4032bc:	4293      	cmp	r3, r2
  4032be:	bfb8      	it	lt
  4032c0:	4613      	movlt	r3, r2
  4032c2:	f8c9 3000 	str.w	r3, [r9]
  4032c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4032ca:	4606      	mov	r6, r0
  4032cc:	460c      	mov	r4, r1
  4032ce:	b112      	cbz	r2, 4032d6 <_printf_common+0x2a>
  4032d0:	3301      	adds	r3, #1
  4032d2:	f8c9 3000 	str.w	r3, [r9]
  4032d6:	6823      	ldr	r3, [r4, #0]
  4032d8:	0699      	lsls	r1, r3, #26
  4032da:	bf42      	ittt	mi
  4032dc:	f8d9 3000 	ldrmi.w	r3, [r9]
  4032e0:	3302      	addmi	r3, #2
  4032e2:	f8c9 3000 	strmi.w	r3, [r9]
  4032e6:	6825      	ldr	r5, [r4, #0]
  4032e8:	f015 0506 	ands.w	r5, r5, #6
  4032ec:	d110      	bne.n	403310 <_printf_common+0x64>
  4032ee:	f104 0a19 	add.w	sl, r4, #25
  4032f2:	e007      	b.n	403304 <_printf_common+0x58>
  4032f4:	2301      	movs	r3, #1
  4032f6:	4652      	mov	r2, sl
  4032f8:	4639      	mov	r1, r7
  4032fa:	4630      	mov	r0, r6
  4032fc:	47c0      	blx	r8
  4032fe:	3001      	adds	r0, #1
  403300:	d01a      	beq.n	403338 <_printf_common+0x8c>
  403302:	3501      	adds	r5, #1
  403304:	68e3      	ldr	r3, [r4, #12]
  403306:	f8d9 2000 	ldr.w	r2, [r9]
  40330a:	1a9b      	subs	r3, r3, r2
  40330c:	429d      	cmp	r5, r3
  40330e:	dbf1      	blt.n	4032f4 <_printf_common+0x48>
  403310:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  403314:	6822      	ldr	r2, [r4, #0]
  403316:	3300      	adds	r3, #0
  403318:	bf18      	it	ne
  40331a:	2301      	movne	r3, #1
  40331c:	0692      	lsls	r2, r2, #26
  40331e:	d50f      	bpl.n	403340 <_printf_common+0x94>
  403320:	18e1      	adds	r1, r4, r3
  403322:	1c5a      	adds	r2, r3, #1
  403324:	2030      	movs	r0, #48	; 0x30
  403326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40332a:	4422      	add	r2, r4
  40332c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403334:	3302      	adds	r3, #2
  403336:	e003      	b.n	403340 <_printf_common+0x94>
  403338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403340:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403344:	4639      	mov	r1, r7
  403346:	4630      	mov	r0, r6
  403348:	47c0      	blx	r8
  40334a:	3001      	adds	r0, #1
  40334c:	d0f4      	beq.n	403338 <_printf_common+0x8c>
  40334e:	6822      	ldr	r2, [r4, #0]
  403350:	f8d9 5000 	ldr.w	r5, [r9]
  403354:	68e3      	ldr	r3, [r4, #12]
  403356:	f002 0206 	and.w	r2, r2, #6
  40335a:	2a04      	cmp	r2, #4
  40335c:	bf08      	it	eq
  40335e:	1b5d      	subeq	r5, r3, r5
  403360:	6922      	ldr	r2, [r4, #16]
  403362:	68a3      	ldr	r3, [r4, #8]
  403364:	bf0c      	ite	eq
  403366:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  40336a:	2500      	movne	r5, #0
  40336c:	4293      	cmp	r3, r2
  40336e:	bfc4      	itt	gt
  403370:	1a9b      	subgt	r3, r3, r2
  403372:	18ed      	addgt	r5, r5, r3
  403374:	f04f 0900 	mov.w	r9, #0
  403378:	341a      	adds	r4, #26
  40337a:	454d      	cmp	r5, r9
  40337c:	d009      	beq.n	403392 <_printf_common+0xe6>
  40337e:	2301      	movs	r3, #1
  403380:	4622      	mov	r2, r4
  403382:	4639      	mov	r1, r7
  403384:	4630      	mov	r0, r6
  403386:	47c0      	blx	r8
  403388:	3001      	adds	r0, #1
  40338a:	d0d5      	beq.n	403338 <_printf_common+0x8c>
  40338c:	f109 0901 	add.w	r9, r9, #1
  403390:	e7f3      	b.n	40337a <_printf_common+0xce>
  403392:	2000      	movs	r0, #0
  403394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403398 <_printf_i>:
  403398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40339c:	4617      	mov	r7, r2
  40339e:	7e0a      	ldrb	r2, [r1, #24]
  4033a0:	b085      	sub	sp, #20
  4033a2:	2a6e      	cmp	r2, #110	; 0x6e
  4033a4:	4698      	mov	r8, r3
  4033a6:	4606      	mov	r6, r0
  4033a8:	460c      	mov	r4, r1
  4033aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4033ac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4033b0:	f000 80ae 	beq.w	403510 <_printf_i+0x178>
  4033b4:	d811      	bhi.n	4033da <_printf_i+0x42>
  4033b6:	2a63      	cmp	r2, #99	; 0x63
  4033b8:	d022      	beq.n	403400 <_printf_i+0x68>
  4033ba:	d809      	bhi.n	4033d0 <_printf_i+0x38>
  4033bc:	2a00      	cmp	r2, #0
  4033be:	f000 80bb 	beq.w	403538 <_printf_i+0x1a0>
  4033c2:	2a58      	cmp	r2, #88	; 0x58
  4033c4:	f040 80ca 	bne.w	40355c <_printf_i+0x1c4>
  4033c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  4033cc:	4983      	ldr	r1, [pc, #524]	; (4035dc <_printf_i+0x244>)
  4033ce:	e055      	b.n	40347c <_printf_i+0xe4>
  4033d0:	2a64      	cmp	r2, #100	; 0x64
  4033d2:	d01e      	beq.n	403412 <_printf_i+0x7a>
  4033d4:	2a69      	cmp	r2, #105	; 0x69
  4033d6:	d01c      	beq.n	403412 <_printf_i+0x7a>
  4033d8:	e0c0      	b.n	40355c <_printf_i+0x1c4>
  4033da:	2a73      	cmp	r2, #115	; 0x73
  4033dc:	f000 80b0 	beq.w	403540 <_printf_i+0x1a8>
  4033e0:	d809      	bhi.n	4033f6 <_printf_i+0x5e>
  4033e2:	2a6f      	cmp	r2, #111	; 0x6f
  4033e4:	d02e      	beq.n	403444 <_printf_i+0xac>
  4033e6:	2a70      	cmp	r2, #112	; 0x70
  4033e8:	f040 80b8 	bne.w	40355c <_printf_i+0x1c4>
  4033ec:	680a      	ldr	r2, [r1, #0]
  4033ee:	f042 0220 	orr.w	r2, r2, #32
  4033f2:	600a      	str	r2, [r1, #0]
  4033f4:	e03e      	b.n	403474 <_printf_i+0xdc>
  4033f6:	2a75      	cmp	r2, #117	; 0x75
  4033f8:	d024      	beq.n	403444 <_printf_i+0xac>
  4033fa:	2a78      	cmp	r2, #120	; 0x78
  4033fc:	d03a      	beq.n	403474 <_printf_i+0xdc>
  4033fe:	e0ad      	b.n	40355c <_printf_i+0x1c4>
  403400:	681a      	ldr	r2, [r3, #0]
  403402:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403406:	1d11      	adds	r1, r2, #4
  403408:	6019      	str	r1, [r3, #0]
  40340a:	6813      	ldr	r3, [r2, #0]
  40340c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403410:	e0a8      	b.n	403564 <_printf_i+0x1cc>
  403412:	6821      	ldr	r1, [r4, #0]
  403414:	681a      	ldr	r2, [r3, #0]
  403416:	f011 0f80 	tst.w	r1, #128	; 0x80
  40341a:	d002      	beq.n	403422 <_printf_i+0x8a>
  40341c:	1d11      	adds	r1, r2, #4
  40341e:	6019      	str	r1, [r3, #0]
  403420:	e008      	b.n	403434 <_printf_i+0x9c>
  403422:	f011 0f40 	tst.w	r1, #64	; 0x40
  403426:	f102 0104 	add.w	r1, r2, #4
  40342a:	6019      	str	r1, [r3, #0]
  40342c:	d002      	beq.n	403434 <_printf_i+0x9c>
  40342e:	f9b2 3000 	ldrsh.w	r3, [r2]
  403432:	e000      	b.n	403436 <_printf_i+0x9e>
  403434:	6813      	ldr	r3, [r2, #0]
  403436:	2b00      	cmp	r3, #0
  403438:	da3c      	bge.n	4034b4 <_printf_i+0x11c>
  40343a:	222d      	movs	r2, #45	; 0x2d
  40343c:	425b      	negs	r3, r3
  40343e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403442:	e037      	b.n	4034b4 <_printf_i+0x11c>
  403444:	6821      	ldr	r1, [r4, #0]
  403446:	681a      	ldr	r2, [r3, #0]
  403448:	f011 0f80 	tst.w	r1, #128	; 0x80
  40344c:	d002      	beq.n	403454 <_printf_i+0xbc>
  40344e:	1d11      	adds	r1, r2, #4
  403450:	6019      	str	r1, [r3, #0]
  403452:	e007      	b.n	403464 <_printf_i+0xcc>
  403454:	f011 0f40 	tst.w	r1, #64	; 0x40
  403458:	f102 0104 	add.w	r1, r2, #4
  40345c:	6019      	str	r1, [r3, #0]
  40345e:	d001      	beq.n	403464 <_printf_i+0xcc>
  403460:	8813      	ldrh	r3, [r2, #0]
  403462:	e000      	b.n	403466 <_printf_i+0xce>
  403464:	6813      	ldr	r3, [r2, #0]
  403466:	7e22      	ldrb	r2, [r4, #24]
  403468:	495c      	ldr	r1, [pc, #368]	; (4035dc <_printf_i+0x244>)
  40346a:	2a6f      	cmp	r2, #111	; 0x6f
  40346c:	bf14      	ite	ne
  40346e:	220a      	movne	r2, #10
  403470:	2208      	moveq	r2, #8
  403472:	e01b      	b.n	4034ac <_printf_i+0x114>
  403474:	2278      	movs	r2, #120	; 0x78
  403476:	495a      	ldr	r1, [pc, #360]	; (4035e0 <_printf_i+0x248>)
  403478:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  40347c:	6822      	ldr	r2, [r4, #0]
  40347e:	6818      	ldr	r0, [r3, #0]
  403480:	f012 0f80 	tst.w	r2, #128	; 0x80
  403484:	f100 0504 	add.w	r5, r0, #4
  403488:	601d      	str	r5, [r3, #0]
  40348a:	d103      	bne.n	403494 <_printf_i+0xfc>
  40348c:	0655      	lsls	r5, r2, #25
  40348e:	d501      	bpl.n	403494 <_printf_i+0xfc>
  403490:	8803      	ldrh	r3, [r0, #0]
  403492:	e000      	b.n	403496 <_printf_i+0xfe>
  403494:	6803      	ldr	r3, [r0, #0]
  403496:	07d0      	lsls	r0, r2, #31
  403498:	bf44      	itt	mi
  40349a:	f042 0220 	orrmi.w	r2, r2, #32
  40349e:	6022      	strmi	r2, [r4, #0]
  4034a0:	b91b      	cbnz	r3, 4034aa <_printf_i+0x112>
  4034a2:	6822      	ldr	r2, [r4, #0]
  4034a4:	f022 0220 	bic.w	r2, r2, #32
  4034a8:	6022      	str	r2, [r4, #0]
  4034aa:	2210      	movs	r2, #16
  4034ac:	2000      	movs	r0, #0
  4034ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4034b2:	e001      	b.n	4034b8 <_printf_i+0x120>
  4034b4:	4949      	ldr	r1, [pc, #292]	; (4035dc <_printf_i+0x244>)
  4034b6:	220a      	movs	r2, #10
  4034b8:	6865      	ldr	r5, [r4, #4]
  4034ba:	60a5      	str	r5, [r4, #8]
  4034bc:	2d00      	cmp	r5, #0
  4034be:	db08      	blt.n	4034d2 <_printf_i+0x13a>
  4034c0:	6820      	ldr	r0, [r4, #0]
  4034c2:	f020 0004 	bic.w	r0, r0, #4
  4034c6:	6020      	str	r0, [r4, #0]
  4034c8:	b92b      	cbnz	r3, 4034d6 <_printf_i+0x13e>
  4034ca:	2d00      	cmp	r5, #0
  4034cc:	d17d      	bne.n	4035ca <_printf_i+0x232>
  4034ce:	4675      	mov	r5, lr
  4034d0:	e00c      	b.n	4034ec <_printf_i+0x154>
  4034d2:	2b00      	cmp	r3, #0
  4034d4:	d079      	beq.n	4035ca <_printf_i+0x232>
  4034d6:	4675      	mov	r5, lr
  4034d8:	fbb3 f0f2 	udiv	r0, r3, r2
  4034dc:	fb02 3310 	mls	r3, r2, r0, r3
  4034e0:	5ccb      	ldrb	r3, [r1, r3]
  4034e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4034e6:	4603      	mov	r3, r0
  4034e8:	2800      	cmp	r0, #0
  4034ea:	d1f5      	bne.n	4034d8 <_printf_i+0x140>
  4034ec:	2a08      	cmp	r2, #8
  4034ee:	d10b      	bne.n	403508 <_printf_i+0x170>
  4034f0:	6823      	ldr	r3, [r4, #0]
  4034f2:	07da      	lsls	r2, r3, #31
  4034f4:	d508      	bpl.n	403508 <_printf_i+0x170>
  4034f6:	6923      	ldr	r3, [r4, #16]
  4034f8:	6862      	ldr	r2, [r4, #4]
  4034fa:	429a      	cmp	r2, r3
  4034fc:	bfde      	ittt	le
  4034fe:	2330      	movle	r3, #48	; 0x30
  403500:	f805 3c01 	strble.w	r3, [r5, #-1]
  403504:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  403508:	ebc5 030e 	rsb	r3, r5, lr
  40350c:	6123      	str	r3, [r4, #16]
  40350e:	e02e      	b.n	40356e <_printf_i+0x1d6>
  403510:	6808      	ldr	r0, [r1, #0]
  403512:	681a      	ldr	r2, [r3, #0]
  403514:	6949      	ldr	r1, [r1, #20]
  403516:	f010 0f80 	tst.w	r0, #128	; 0x80
  40351a:	d003      	beq.n	403524 <_printf_i+0x18c>
  40351c:	1d10      	adds	r0, r2, #4
  40351e:	6018      	str	r0, [r3, #0]
  403520:	6813      	ldr	r3, [r2, #0]
  403522:	e008      	b.n	403536 <_printf_i+0x19e>
  403524:	f010 0f40 	tst.w	r0, #64	; 0x40
  403528:	f102 0004 	add.w	r0, r2, #4
  40352c:	6018      	str	r0, [r3, #0]
  40352e:	6813      	ldr	r3, [r2, #0]
  403530:	d001      	beq.n	403536 <_printf_i+0x19e>
  403532:	8019      	strh	r1, [r3, #0]
  403534:	e000      	b.n	403538 <_printf_i+0x1a0>
  403536:	6019      	str	r1, [r3, #0]
  403538:	2300      	movs	r3, #0
  40353a:	6123      	str	r3, [r4, #16]
  40353c:	4675      	mov	r5, lr
  40353e:	e016      	b.n	40356e <_printf_i+0x1d6>
  403540:	681a      	ldr	r2, [r3, #0]
  403542:	1d11      	adds	r1, r2, #4
  403544:	6019      	str	r1, [r3, #0]
  403546:	6815      	ldr	r5, [r2, #0]
  403548:	6862      	ldr	r2, [r4, #4]
  40354a:	2100      	movs	r1, #0
  40354c:	4628      	mov	r0, r5
  40354e:	f002 fc9f 	bl	405e90 <memchr>
  403552:	b108      	cbz	r0, 403558 <_printf_i+0x1c0>
  403554:	1b40      	subs	r0, r0, r5
  403556:	6060      	str	r0, [r4, #4]
  403558:	6863      	ldr	r3, [r4, #4]
  40355a:	e004      	b.n	403566 <_printf_i+0x1ce>
  40355c:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403560:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  403564:	2301      	movs	r3, #1
  403566:	6123      	str	r3, [r4, #16]
  403568:	2300      	movs	r3, #0
  40356a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40356e:	f8cd 8000 	str.w	r8, [sp]
  403572:	463b      	mov	r3, r7
  403574:	aa03      	add	r2, sp, #12
  403576:	4621      	mov	r1, r4
  403578:	4630      	mov	r0, r6
  40357a:	f7ff fe97 	bl	4032ac <_printf_common>
  40357e:	3001      	adds	r0, #1
  403580:	d102      	bne.n	403588 <_printf_i+0x1f0>
  403582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403586:	e026      	b.n	4035d6 <_printf_i+0x23e>
  403588:	6923      	ldr	r3, [r4, #16]
  40358a:	462a      	mov	r2, r5
  40358c:	4639      	mov	r1, r7
  40358e:	4630      	mov	r0, r6
  403590:	47c0      	blx	r8
  403592:	3001      	adds	r0, #1
  403594:	d0f5      	beq.n	403582 <_printf_i+0x1ea>
  403596:	6823      	ldr	r3, [r4, #0]
  403598:	079b      	lsls	r3, r3, #30
  40359a:	d510      	bpl.n	4035be <_printf_i+0x226>
  40359c:	2500      	movs	r5, #0
  40359e:	f104 0919 	add.w	r9, r4, #25
  4035a2:	e007      	b.n	4035b4 <_printf_i+0x21c>
  4035a4:	2301      	movs	r3, #1
  4035a6:	464a      	mov	r2, r9
  4035a8:	4639      	mov	r1, r7
  4035aa:	4630      	mov	r0, r6
  4035ac:	47c0      	blx	r8
  4035ae:	3001      	adds	r0, #1
  4035b0:	d0e7      	beq.n	403582 <_printf_i+0x1ea>
  4035b2:	3501      	adds	r5, #1
  4035b4:	68e3      	ldr	r3, [r4, #12]
  4035b6:	9a03      	ldr	r2, [sp, #12]
  4035b8:	1a9b      	subs	r3, r3, r2
  4035ba:	429d      	cmp	r5, r3
  4035bc:	dbf2      	blt.n	4035a4 <_printf_i+0x20c>
  4035be:	68e0      	ldr	r0, [r4, #12]
  4035c0:	9b03      	ldr	r3, [sp, #12]
  4035c2:	4298      	cmp	r0, r3
  4035c4:	bfb8      	it	lt
  4035c6:	4618      	movlt	r0, r3
  4035c8:	e005      	b.n	4035d6 <_printf_i+0x23e>
  4035ca:	780b      	ldrb	r3, [r1, #0]
  4035cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4035d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4035d4:	e78a      	b.n	4034ec <_printf_i+0x154>
  4035d6:	b005      	add	sp, #20
  4035d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4035dc:	00408126 	.word	0x00408126
  4035e0:	00408137 	.word	0x00408137

004035e4 <iprintf>:
  4035e4:	b40f      	push	{r0, r1, r2, r3}
  4035e6:	4b0a      	ldr	r3, [pc, #40]	; (403610 <iprintf+0x2c>)
  4035e8:	b513      	push	{r0, r1, r4, lr}
  4035ea:	681c      	ldr	r4, [r3, #0]
  4035ec:	b124      	cbz	r4, 4035f8 <iprintf+0x14>
  4035ee:	69a3      	ldr	r3, [r4, #24]
  4035f0:	b913      	cbnz	r3, 4035f8 <iprintf+0x14>
  4035f2:	4620      	mov	r0, r4
  4035f4:	f002 f812 	bl	40561c <__sinit>
  4035f8:	ab05      	add	r3, sp, #20
  4035fa:	9a04      	ldr	r2, [sp, #16]
  4035fc:	68a1      	ldr	r1, [r4, #8]
  4035fe:	9301      	str	r3, [sp, #4]
  403600:	4620      	mov	r0, r4
  403602:	f003 f961 	bl	4068c8 <_vfiprintf_r>
  403606:	b002      	add	sp, #8
  403608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40360c:	b004      	add	sp, #16
  40360e:	4770      	bx	lr
  403610:	20000078 	.word	0x20000078

00403614 <_puts_r>:
  403614:	b570      	push	{r4, r5, r6, lr}
  403616:	460e      	mov	r6, r1
  403618:	4605      	mov	r5, r0
  40361a:	b118      	cbz	r0, 403624 <_puts_r+0x10>
  40361c:	6983      	ldr	r3, [r0, #24]
  40361e:	b90b      	cbnz	r3, 403624 <_puts_r+0x10>
  403620:	f001 fffc 	bl	40561c <__sinit>
  403624:	69ab      	ldr	r3, [r5, #24]
  403626:	68ac      	ldr	r4, [r5, #8]
  403628:	b913      	cbnz	r3, 403630 <_puts_r+0x1c>
  40362a:	4628      	mov	r0, r5
  40362c:	f001 fff6 	bl	40561c <__sinit>
  403630:	4b22      	ldr	r3, [pc, #136]	; (4036bc <_puts_r+0xa8>)
  403632:	429c      	cmp	r4, r3
  403634:	d101      	bne.n	40363a <_puts_r+0x26>
  403636:	686c      	ldr	r4, [r5, #4]
  403638:	e008      	b.n	40364c <_puts_r+0x38>
  40363a:	4b21      	ldr	r3, [pc, #132]	; (4036c0 <_puts_r+0xac>)
  40363c:	429c      	cmp	r4, r3
  40363e:	d101      	bne.n	403644 <_puts_r+0x30>
  403640:	68ac      	ldr	r4, [r5, #8]
  403642:	e003      	b.n	40364c <_puts_r+0x38>
  403644:	4b1f      	ldr	r3, [pc, #124]	; (4036c4 <_puts_r+0xb0>)
  403646:	429c      	cmp	r4, r3
  403648:	bf08      	it	eq
  40364a:	68ec      	ldreq	r4, [r5, #12]
  40364c:	89a3      	ldrh	r3, [r4, #12]
  40364e:	071b      	lsls	r3, r3, #28
  403650:	d501      	bpl.n	403656 <_puts_r+0x42>
  403652:	6923      	ldr	r3, [r4, #16]
  403654:	b93b      	cbnz	r3, 403666 <_puts_r+0x52>
  403656:	4621      	mov	r1, r4
  403658:	4628      	mov	r0, r5
  40365a:	f001 f853 	bl	404704 <__swsetup_r>
  40365e:	b110      	cbz	r0, 403666 <_puts_r+0x52>
  403660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403664:	bd70      	pop	{r4, r5, r6, pc}
  403666:	3e01      	subs	r6, #1
  403668:	68a3      	ldr	r3, [r4, #8]
  40366a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  40366e:	3b01      	subs	r3, #1
  403670:	60a3      	str	r3, [r4, #8]
  403672:	b191      	cbz	r1, 40369a <_puts_r+0x86>
  403674:	2b00      	cmp	r3, #0
  403676:	da04      	bge.n	403682 <_puts_r+0x6e>
  403678:	69a2      	ldr	r2, [r4, #24]
  40367a:	4293      	cmp	r3, r2
  40367c:	db06      	blt.n	40368c <_puts_r+0x78>
  40367e:	290a      	cmp	r1, #10
  403680:	d004      	beq.n	40368c <_puts_r+0x78>
  403682:	6823      	ldr	r3, [r4, #0]
  403684:	1c5a      	adds	r2, r3, #1
  403686:	6022      	str	r2, [r4, #0]
  403688:	7019      	strb	r1, [r3, #0]
  40368a:	e7ed      	b.n	403668 <_puts_r+0x54>
  40368c:	4622      	mov	r2, r4
  40368e:	4628      	mov	r0, r5
  403690:	f000 ffe4 	bl	40465c <__swbuf_r>
  403694:	3001      	adds	r0, #1
  403696:	d1e7      	bne.n	403668 <_puts_r+0x54>
  403698:	e7e2      	b.n	403660 <_puts_r+0x4c>
  40369a:	2b00      	cmp	r3, #0
  40369c:	da08      	bge.n	4036b0 <_puts_r+0x9c>
  40369e:	4622      	mov	r2, r4
  4036a0:	210a      	movs	r1, #10
  4036a2:	4628      	mov	r0, r5
  4036a4:	f000 ffda 	bl	40465c <__swbuf_r>
  4036a8:	3001      	adds	r0, #1
  4036aa:	d0d9      	beq.n	403660 <_puts_r+0x4c>
  4036ac:	200a      	movs	r0, #10
  4036ae:	bd70      	pop	{r4, r5, r6, pc}
  4036b0:	6823      	ldr	r3, [r4, #0]
  4036b2:	200a      	movs	r0, #10
  4036b4:	1c5a      	adds	r2, r3, #1
  4036b6:	6022      	str	r2, [r4, #0]
  4036b8:	7018      	strb	r0, [r3, #0]
  4036ba:	bd70      	pop	{r4, r5, r6, pc}
  4036bc:	004081a8 	.word	0x004081a8
  4036c0:	004081c8 	.word	0x004081c8
  4036c4:	004081e8 	.word	0x004081e8

004036c8 <puts>:
  4036c8:	4b02      	ldr	r3, [pc, #8]	; (4036d4 <puts+0xc>)
  4036ca:	4601      	mov	r1, r0
  4036cc:	6818      	ldr	r0, [r3, #0]
  4036ce:	f7ff bfa1 	b.w	403614 <_puts_r>
  4036d2:	bf00      	nop
  4036d4:	20000078 	.word	0x20000078

004036d8 <setbuf>:
  4036d8:	2900      	cmp	r1, #0
  4036da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4036de:	bf0c      	ite	eq
  4036e0:	2202      	moveq	r2, #2
  4036e2:	2200      	movne	r2, #0
  4036e4:	f000 b800 	b.w	4036e8 <setvbuf>

004036e8 <setvbuf>:
  4036e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4036ec:	461d      	mov	r5, r3
  4036ee:	4b4f      	ldr	r3, [pc, #316]	; (40382c <setvbuf+0x144>)
  4036f0:	681e      	ldr	r6, [r3, #0]
  4036f2:	4604      	mov	r4, r0
  4036f4:	460f      	mov	r7, r1
  4036f6:	4690      	mov	r8, r2
  4036f8:	b126      	cbz	r6, 403704 <setvbuf+0x1c>
  4036fa:	69b3      	ldr	r3, [r6, #24]
  4036fc:	b913      	cbnz	r3, 403704 <setvbuf+0x1c>
  4036fe:	4630      	mov	r0, r6
  403700:	f001 ff8c 	bl	40561c <__sinit>
  403704:	4b4a      	ldr	r3, [pc, #296]	; (403830 <setvbuf+0x148>)
  403706:	429c      	cmp	r4, r3
  403708:	d101      	bne.n	40370e <setvbuf+0x26>
  40370a:	6874      	ldr	r4, [r6, #4]
  40370c:	e008      	b.n	403720 <setvbuf+0x38>
  40370e:	4b49      	ldr	r3, [pc, #292]	; (403834 <setvbuf+0x14c>)
  403710:	429c      	cmp	r4, r3
  403712:	d101      	bne.n	403718 <setvbuf+0x30>
  403714:	68b4      	ldr	r4, [r6, #8]
  403716:	e003      	b.n	403720 <setvbuf+0x38>
  403718:	4b47      	ldr	r3, [pc, #284]	; (403838 <setvbuf+0x150>)
  40371a:	429c      	cmp	r4, r3
  40371c:	bf08      	it	eq
  40371e:	68f4      	ldreq	r4, [r6, #12]
  403720:	f1b8 0f02 	cmp.w	r8, #2
  403724:	d004      	beq.n	403730 <setvbuf+0x48>
  403726:	f1b8 0f01 	cmp.w	r8, #1
  40372a:	d879      	bhi.n	403820 <setvbuf+0x138>
  40372c:	2d00      	cmp	r5, #0
  40372e:	db77      	blt.n	403820 <setvbuf+0x138>
  403730:	4621      	mov	r1, r4
  403732:	4630      	mov	r0, r6
  403734:	f001 ff08 	bl	405548 <_fflush_r>
  403738:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40373a:	b141      	cbz	r1, 40374e <setvbuf+0x66>
  40373c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403740:	4299      	cmp	r1, r3
  403742:	d002      	beq.n	40374a <setvbuf+0x62>
  403744:	4630      	mov	r0, r6
  403746:	f002 ffeb 	bl	406720 <_free_r>
  40374a:	2300      	movs	r3, #0
  40374c:	6363      	str	r3, [r4, #52]	; 0x34
  40374e:	2300      	movs	r3, #0
  403750:	61a3      	str	r3, [r4, #24]
  403752:	6063      	str	r3, [r4, #4]
  403754:	89a3      	ldrh	r3, [r4, #12]
  403756:	061b      	lsls	r3, r3, #24
  403758:	d503      	bpl.n	403762 <setvbuf+0x7a>
  40375a:	6921      	ldr	r1, [r4, #16]
  40375c:	4630      	mov	r0, r6
  40375e:	f002 ffdf 	bl	406720 <_free_r>
  403762:	89a3      	ldrh	r3, [r4, #12]
  403764:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403768:	f023 0303 	bic.w	r3, r3, #3
  40376c:	f1b8 0f02 	cmp.w	r8, #2
  403770:	81a3      	strh	r3, [r4, #12]
  403772:	d01e      	beq.n	4037b2 <setvbuf+0xca>
  403774:	ab01      	add	r3, sp, #4
  403776:	466a      	mov	r2, sp
  403778:	4621      	mov	r1, r4
  40377a:	4630      	mov	r0, r6
  40377c:	f002 fb0a 	bl	405d94 <__swhatbuf_r>
  403780:	89a3      	ldrh	r3, [r4, #12]
  403782:	4318      	orrs	r0, r3
  403784:	81a0      	strh	r0, [r4, #12]
  403786:	b90d      	cbnz	r5, 40378c <setvbuf+0xa4>
  403788:	9d00      	ldr	r5, [sp, #0]
  40378a:	e000      	b.n	40378e <setvbuf+0xa6>
  40378c:	bb2f      	cbnz	r7, 4037da <setvbuf+0xf2>
  40378e:	4628      	mov	r0, r5
  403790:	f002 fb60 	bl	405e54 <malloc>
  403794:	4607      	mov	r7, r0
  403796:	b9d0      	cbnz	r0, 4037ce <setvbuf+0xe6>
  403798:	f8dd 9000 	ldr.w	r9, [sp]
  40379c:	45a9      	cmp	r9, r5
  40379e:	d102      	bne.n	4037a6 <setvbuf+0xbe>
  4037a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4037a4:	e006      	b.n	4037b4 <setvbuf+0xcc>
  4037a6:	4648      	mov	r0, r9
  4037a8:	f002 fb54 	bl	405e54 <malloc>
  4037ac:	4607      	mov	r7, r0
  4037ae:	b978      	cbnz	r0, 4037d0 <setvbuf+0xe8>
  4037b0:	e7f6      	b.n	4037a0 <setvbuf+0xb8>
  4037b2:	2000      	movs	r0, #0
  4037b4:	89a3      	ldrh	r3, [r4, #12]
  4037b6:	f043 0302 	orr.w	r3, r3, #2
  4037ba:	81a3      	strh	r3, [r4, #12]
  4037bc:	2300      	movs	r3, #0
  4037be:	60a3      	str	r3, [r4, #8]
  4037c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4037c4:	6023      	str	r3, [r4, #0]
  4037c6:	6123      	str	r3, [r4, #16]
  4037c8:	2301      	movs	r3, #1
  4037ca:	6163      	str	r3, [r4, #20]
  4037cc:	e02a      	b.n	403824 <setvbuf+0x13c>
  4037ce:	46a9      	mov	r9, r5
  4037d0:	89a3      	ldrh	r3, [r4, #12]
  4037d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4037d6:	81a3      	strh	r3, [r4, #12]
  4037d8:	464d      	mov	r5, r9
  4037da:	69b3      	ldr	r3, [r6, #24]
  4037dc:	b913      	cbnz	r3, 4037e4 <setvbuf+0xfc>
  4037de:	4630      	mov	r0, r6
  4037e0:	f001 ff1c 	bl	40561c <__sinit>
  4037e4:	f1b8 0f01 	cmp.w	r8, #1
  4037e8:	bf08      	it	eq
  4037ea:	89a3      	ldrheq	r3, [r4, #12]
  4037ec:	6027      	str	r7, [r4, #0]
  4037ee:	bf04      	itt	eq
  4037f0:	f043 0301 	orreq.w	r3, r3, #1
  4037f4:	81a3      	strheq	r3, [r4, #12]
  4037f6:	89a3      	ldrh	r3, [r4, #12]
  4037f8:	6127      	str	r7, [r4, #16]
  4037fa:	f003 0008 	and.w	r0, r3, #8
  4037fe:	b280      	uxth	r0, r0
  403800:	6165      	str	r5, [r4, #20]
  403802:	b158      	cbz	r0, 40381c <setvbuf+0x134>
  403804:	f013 0301 	ands.w	r3, r3, #1
  403808:	f04f 0000 	mov.w	r0, #0
  40380c:	bf1d      	ittte	ne
  40380e:	426d      	negne	r5, r5
  403810:	60a0      	strne	r0, [r4, #8]
  403812:	61a5      	strne	r5, [r4, #24]
  403814:	60a5      	streq	r5, [r4, #8]
  403816:	bf08      	it	eq
  403818:	4618      	moveq	r0, r3
  40381a:	e003      	b.n	403824 <setvbuf+0x13c>
  40381c:	60a0      	str	r0, [r4, #8]
  40381e:	e001      	b.n	403824 <setvbuf+0x13c>
  403820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403824:	b003      	add	sp, #12
  403826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40382a:	bf00      	nop
  40382c:	20000078 	.word	0x20000078
  403830:	004081a8 	.word	0x004081a8
  403834:	004081c8 	.word	0x004081c8
  403838:	004081e8 	.word	0x004081e8

0040383c <strcmp>:
  40383c:	f810 2b01 	ldrb.w	r2, [r0], #1
  403840:	f811 3b01 	ldrb.w	r3, [r1], #1
  403844:	2a01      	cmp	r2, #1
  403846:	bf28      	it	cs
  403848:	429a      	cmpcs	r2, r3
  40384a:	d0f7      	beq.n	40383c <strcmp>
  40384c:	1ad0      	subs	r0, r2, r3
  40384e:	4770      	bx	lr

00403850 <strcpy>:
  403850:	4603      	mov	r3, r0
  403852:	f811 2b01 	ldrb.w	r2, [r1], #1
  403856:	f803 2b01 	strb.w	r2, [r3], #1
  40385a:	2a00      	cmp	r2, #0
  40385c:	d1f9      	bne.n	403852 <strcpy+0x2>
  40385e:	4770      	bx	lr

00403860 <strlen>:
  403860:	4603      	mov	r3, r0
  403862:	f813 2b01 	ldrb.w	r2, [r3], #1
  403866:	2a00      	cmp	r2, #0
  403868:	d1fb      	bne.n	403862 <strlen+0x2>
  40386a:	1a18      	subs	r0, r3, r0
  40386c:	3801      	subs	r0, #1
  40386e:	4770      	bx	lr

00403870 <sulp>:
  403870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403874:	460f      	mov	r7, r1
  403876:	4690      	mov	r8, r2
  403878:	f002 fe20 	bl	4064bc <__ulp>
  40387c:	4604      	mov	r4, r0
  40387e:	460d      	mov	r5, r1
  403880:	f1b8 0f00 	cmp.w	r8, #0
  403884:	d011      	beq.n	4038aa <sulp+0x3a>
  403886:	f3c7 530a 	ubfx	r3, r7, #20, #11
  40388a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  40388e:	2b00      	cmp	r3, #0
  403890:	dd0b      	ble.n	4038aa <sulp+0x3a>
  403892:	051b      	lsls	r3, r3, #20
  403894:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  403898:	2400      	movs	r4, #0
  40389a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  40389e:	4622      	mov	r2, r4
  4038a0:	462b      	mov	r3, r5
  4038a2:	f003 fbc5 	bl	407030 <__aeabi_dmul>
  4038a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038aa:	4620      	mov	r0, r4
  4038ac:	4629      	mov	r1, r5
  4038ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038b2:	0000      	movs	r0, r0
  4038b4:	0000      	movs	r0, r0
	...

004038b8 <_strtod_l>:
  4038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038bc:	461f      	mov	r7, r3
  4038be:	b09f      	sub	sp, #124	; 0x7c
  4038c0:	2300      	movs	r3, #0
  4038c2:	4682      	mov	sl, r0
  4038c4:	4638      	mov	r0, r7
  4038c6:	931a      	str	r3, [sp, #104]	; 0x68
  4038c8:	9106      	str	r1, [sp, #24]
  4038ca:	9215      	str	r2, [sp, #84]	; 0x54
  4038cc:	f002 fa51 	bl	405d72 <__localeconv_l>
  4038d0:	4606      	mov	r6, r0
  4038d2:	6800      	ldr	r0, [r0, #0]
  4038d4:	f7ff ffc4 	bl	403860 <strlen>
  4038d8:	9b06      	ldr	r3, [sp, #24]
  4038da:	4604      	mov	r4, r0
  4038dc:	f04f 0800 	mov.w	r8, #0
  4038e0:	f04f 0900 	mov.w	r9, #0
  4038e4:	9319      	str	r3, [sp, #100]	; 0x64
  4038e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4038e8:	781a      	ldrb	r2, [r3, #0]
  4038ea:	2a0d      	cmp	r2, #13
  4038ec:	d805      	bhi.n	4038fa <_strtod_l+0x42>
  4038ee:	2a09      	cmp	r2, #9
  4038f0:	d213      	bcs.n	40391a <_strtod_l+0x62>
  4038f2:	2a00      	cmp	r2, #0
  4038f4:	f000 8196 	beq.w	403c24 <_strtod_l+0x36c>
  4038f8:	e011      	b.n	40391e <_strtod_l+0x66>
  4038fa:	2a2b      	cmp	r2, #43	; 0x2b
  4038fc:	d004      	beq.n	403908 <_strtod_l+0x50>
  4038fe:	2a2d      	cmp	r2, #45	; 0x2d
  403900:	d004      	beq.n	40390c <_strtod_l+0x54>
  403902:	2a20      	cmp	r2, #32
  403904:	d10b      	bne.n	40391e <_strtod_l+0x66>
  403906:	e008      	b.n	40391a <_strtod_l+0x62>
  403908:	2200      	movs	r2, #0
  40390a:	e000      	b.n	40390e <_strtod_l+0x56>
  40390c:	2201      	movs	r2, #1
  40390e:	920e      	str	r2, [sp, #56]	; 0x38
  403910:	1c5a      	adds	r2, r3, #1
  403912:	9219      	str	r2, [sp, #100]	; 0x64
  403914:	785b      	ldrb	r3, [r3, #1]
  403916:	b923      	cbnz	r3, 403922 <_strtod_l+0x6a>
  403918:	e184      	b.n	403c24 <_strtod_l+0x36c>
  40391a:	3301      	adds	r3, #1
  40391c:	e7e2      	b.n	4038e4 <_strtod_l+0x2c>
  40391e:	2300      	movs	r3, #0
  403920:	930e      	str	r3, [sp, #56]	; 0x38
  403922:	9d19      	ldr	r5, [sp, #100]	; 0x64
  403924:	782b      	ldrb	r3, [r5, #0]
  403926:	2b30      	cmp	r3, #48	; 0x30
  403928:	d15d      	bne.n	4039e6 <_strtod_l+0x12e>
  40392a:	786b      	ldrb	r3, [r5, #1]
  40392c:	2b58      	cmp	r3, #88	; 0x58
  40392e:	d001      	beq.n	403934 <_strtod_l+0x7c>
  403930:	2b78      	cmp	r3, #120	; 0x78
  403932:	d14d      	bne.n	4039d0 <_strtod_l+0x118>
  403934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403936:	9301      	str	r3, [sp, #4]
  403938:	ab1a      	add	r3, sp, #104	; 0x68
  40393a:	9300      	str	r3, [sp, #0]
  40393c:	9702      	str	r7, [sp, #8]
  40393e:	ab1b      	add	r3, sp, #108	; 0x6c
  403940:	4a9d      	ldr	r2, [pc, #628]	; (403bb8 <_strtod_l+0x300>)
  403942:	a919      	add	r1, sp, #100	; 0x64
  403944:	4650      	mov	r0, sl
  403946:	f001 ff3e 	bl	4057c6 <__gethex>
  40394a:	f010 0607 	ands.w	r6, r0, #7
  40394e:	4604      	mov	r4, r0
  403950:	f000 856f 	beq.w	404432 <_strtod_l+0xb7a>
  403954:	2e06      	cmp	r6, #6
  403956:	d105      	bne.n	403964 <_strtod_l+0xac>
  403958:	3501      	adds	r5, #1
  40395a:	2300      	movs	r3, #0
  40395c:	9519      	str	r5, [sp, #100]	; 0x64
  40395e:	930e      	str	r3, [sp, #56]	; 0x38
  403960:	f000 bd67 	b.w	404432 <_strtod_l+0xb7a>
  403964:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403966:	b13a      	cbz	r2, 403978 <_strtod_l+0xc0>
  403968:	2135      	movs	r1, #53	; 0x35
  40396a:	a81c      	add	r0, sp, #112	; 0x70
  40396c:	f002 fe8e 	bl	40668c <__copybits>
  403970:	991a      	ldr	r1, [sp, #104]	; 0x68
  403972:	4650      	mov	r0, sl
  403974:	f002 fb11 	bl	405f9a <_Bfree>
  403978:	2e06      	cmp	r6, #6
  40397a:	d822      	bhi.n	4039c2 <_strtod_l+0x10a>
  40397c:	e8df f006 	tbb	[pc, r6]
  403980:	18080d04 	.word	0x18080d04
  403984:	0d1d      	.short	0x0d1d
  403986:	04          	.byte	0x04
  403987:	00          	.byte	0x00
  403988:	f04f 0900 	mov.w	r9, #0
  40398c:	46c8      	mov	r8, r9
  40398e:	e018      	b.n	4039c2 <_strtod_l+0x10a>
  403990:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403994:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
  403998:	e013      	b.n	4039c2 <_strtod_l+0x10a>
  40399a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40399c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40399e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  4039a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  4039a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
  4039aa:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
  4039ae:	e008      	b.n	4039c2 <_strtod_l+0x10a>
  4039b0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 403bbc <_strtod_l+0x304>
  4039b4:	f04f 0800 	mov.w	r8, #0
  4039b8:	e003      	b.n	4039c2 <_strtod_l+0x10a>
  4039ba:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
  4039be:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  4039c2:	0721      	lsls	r1, r4, #28
  4039c4:	f140 8535 	bpl.w	404432 <_strtod_l+0xb7a>
  4039c8:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
  4039cc:	f000 bd31 	b.w	404432 <_strtod_l+0xb7a>
  4039d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4039d2:	1c5a      	adds	r2, r3, #1
  4039d4:	9219      	str	r2, [sp, #100]	; 0x64
  4039d6:	785b      	ldrb	r3, [r3, #1]
  4039d8:	2b30      	cmp	r3, #48	; 0x30
  4039da:	d0f9      	beq.n	4039d0 <_strtod_l+0x118>
  4039dc:	2b00      	cmp	r3, #0
  4039de:	f000 8528 	beq.w	404432 <_strtod_l+0xb7a>
  4039e2:	2301      	movs	r3, #1
  4039e4:	e000      	b.n	4039e8 <_strtod_l+0x130>
  4039e6:	2300      	movs	r3, #0
  4039e8:	9308      	str	r3, [sp, #32]
  4039ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4039ec:	9309      	str	r3, [sp, #36]	; 0x24
  4039ee:	2300      	movs	r3, #0
  4039f0:	9305      	str	r3, [sp, #20]
  4039f2:	469b      	mov	fp, r3
  4039f4:	9304      	str	r3, [sp, #16]
  4039f6:	220a      	movs	r2, #10
  4039f8:	9819      	ldr	r0, [sp, #100]	; 0x64
  4039fa:	7805      	ldrb	r5, [r0, #0]
  4039fc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  403a00:	b2d9      	uxtb	r1, r3
  403a02:	2909      	cmp	r1, #9
  403a04:	d80e      	bhi.n	403a24 <_strtod_l+0x16c>
  403a06:	9904      	ldr	r1, [sp, #16]
  403a08:	2908      	cmp	r1, #8
  403a0a:	bfc5      	ittet	gt
  403a0c:	9905      	ldrgt	r1, [sp, #20]
  403a0e:	fb02 3301 	mlagt	r3, r2, r1, r3
  403a12:	fb02 3b0b 	mlale	fp, r2, fp, r3
  403a16:	9305      	strgt	r3, [sp, #20]
  403a18:	9b04      	ldr	r3, [sp, #16]
  403a1a:	3001      	adds	r0, #1
  403a1c:	3301      	adds	r3, #1
  403a1e:	9304      	str	r3, [sp, #16]
  403a20:	9019      	str	r0, [sp, #100]	; 0x64
  403a22:	e7e9      	b.n	4039f8 <_strtod_l+0x140>
  403a24:	4622      	mov	r2, r4
  403a26:	6831      	ldr	r1, [r6, #0]
  403a28:	f003 f8bd 	bl	406ba6 <strncmp>
  403a2c:	b128      	cbz	r0, 403a3a <_strtod_l+0x182>
  403a2e:	2000      	movs	r0, #0
  403a30:	462b      	mov	r3, r5
  403a32:	4602      	mov	r2, r0
  403a34:	9d04      	ldr	r5, [sp, #16]
  403a36:	4601      	mov	r1, r0
  403a38:	e04d      	b.n	403ad6 <_strtod_l+0x21e>
  403a3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a3c:	191a      	adds	r2, r3, r4
  403a3e:	9219      	str	r2, [sp, #100]	; 0x64
  403a40:	9a04      	ldr	r2, [sp, #16]
  403a42:	5d1b      	ldrb	r3, [r3, r4]
  403a44:	2a00      	cmp	r2, #0
  403a46:	d13f      	bne.n	403ac8 <_strtod_l+0x210>
  403a48:	4610      	mov	r0, r2
  403a4a:	2b30      	cmp	r3, #48	; 0x30
  403a4c:	d105      	bne.n	403a5a <_strtod_l+0x1a2>
  403a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a50:	1c5a      	adds	r2, r3, #1
  403a52:	9219      	str	r2, [sp, #100]	; 0x64
  403a54:	3001      	adds	r0, #1
  403a56:	785b      	ldrb	r3, [r3, #1]
  403a58:	e7f7      	b.n	403a4a <_strtod_l+0x192>
  403a5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
  403a5e:	2a08      	cmp	r2, #8
  403a60:	d83f      	bhi.n	403ae2 <_strtod_l+0x22a>
  403a62:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403a64:	9209      	str	r2, [sp, #36]	; 0x24
  403a66:	4602      	mov	r2, r0
  403a68:	2000      	movs	r0, #0
  403a6a:	4605      	mov	r5, r0
  403a6c:	3b30      	subs	r3, #48	; 0x30
  403a6e:	f100 0101 	add.w	r1, r0, #1
  403a72:	d023      	beq.n	403abc <_strtod_l+0x204>
  403a74:	440a      	add	r2, r1
  403a76:	182e      	adds	r6, r5, r0
  403a78:	4629      	mov	r1, r5
  403a7a:	240a      	movs	r4, #10
  403a7c:	42b1      	cmp	r1, r6
  403a7e:	d00c      	beq.n	403a9a <_strtod_l+0x1e2>
  403a80:	3101      	adds	r1, #1
  403a82:	1e4f      	subs	r7, r1, #1
  403a84:	2f08      	cmp	r7, #8
  403a86:	dc02      	bgt.n	403a8e <_strtod_l+0x1d6>
  403a88:	fb04 fb0b 	mul.w	fp, r4, fp
  403a8c:	e7f6      	b.n	403a7c <_strtod_l+0x1c4>
  403a8e:	2910      	cmp	r1, #16
  403a90:	bfde      	ittt	le
  403a92:	9f05      	ldrle	r7, [sp, #20]
  403a94:	4367      	mulle	r7, r4
  403a96:	9705      	strle	r7, [sp, #20]
  403a98:	e7f0      	b.n	403a7c <_strtod_l+0x1c4>
  403a9a:	4428      	add	r0, r5
  403a9c:	2808      	cmp	r0, #8
  403a9e:	f100 0501 	add.w	r5, r0, #1
  403aa2:	dc03      	bgt.n	403aac <_strtod_l+0x1f4>
  403aa4:	210a      	movs	r1, #10
  403aa6:	fb01 3b0b 	mla	fp, r1, fp, r3
  403aaa:	e006      	b.n	403aba <_strtod_l+0x202>
  403aac:	2d10      	cmp	r5, #16
  403aae:	bfdf      	itttt	le
  403ab0:	9805      	ldrle	r0, [sp, #20]
  403ab2:	210a      	movle	r1, #10
  403ab4:	fb01 3300 	mlale	r3, r1, r0, r3
  403ab8:	9305      	strle	r3, [sp, #20]
  403aba:	2100      	movs	r1, #0
  403abc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403abe:	1c58      	adds	r0, r3, #1
  403ac0:	9019      	str	r0, [sp, #100]	; 0x64
  403ac2:	785b      	ldrb	r3, [r3, #1]
  403ac4:	4608      	mov	r0, r1
  403ac6:	e001      	b.n	403acc <_strtod_l+0x214>
  403ac8:	9d04      	ldr	r5, [sp, #16]
  403aca:	4602      	mov	r2, r0
  403acc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  403ad0:	2909      	cmp	r1, #9
  403ad2:	d9cb      	bls.n	403a6c <_strtod_l+0x1b4>
  403ad4:	2101      	movs	r1, #1
  403ad6:	2b65      	cmp	r3, #101	; 0x65
  403ad8:	d001      	beq.n	403ade <_strtod_l+0x226>
  403ada:	2b45      	cmp	r3, #69	; 0x45
  403adc:	d154      	bne.n	403b88 <_strtod_l+0x2d0>
  403ade:	b96d      	cbnz	r5, 403afc <_strtod_l+0x244>
  403ae0:	e004      	b.n	403aec <_strtod_l+0x234>
  403ae2:	2b65      	cmp	r3, #101	; 0x65
  403ae4:	f040 84b3 	bne.w	40444e <_strtod_l+0xb96>
  403ae8:	2200      	movs	r2, #0
  403aea:	2101      	movs	r1, #1
  403aec:	b928      	cbnz	r0, 403afa <_strtod_l+0x242>
  403aee:	9b08      	ldr	r3, [sp, #32]
  403af0:	2b00      	cmp	r3, #0
  403af2:	f000 8097 	beq.w	403c24 <_strtod_l+0x36c>
  403af6:	4605      	mov	r5, r0
  403af8:	e000      	b.n	403afc <_strtod_l+0x244>
  403afa:	2500      	movs	r5, #0
  403afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403afe:	9306      	str	r3, [sp, #24]
  403b00:	3301      	adds	r3, #1
  403b02:	9319      	str	r3, [sp, #100]	; 0x64
  403b04:	9b06      	ldr	r3, [sp, #24]
  403b06:	785b      	ldrb	r3, [r3, #1]
  403b08:	2b2b      	cmp	r3, #43	; 0x2b
  403b0a:	d006      	beq.n	403b1a <_strtod_l+0x262>
  403b0c:	2b2d      	cmp	r3, #45	; 0x2d
  403b0e:	d002      	beq.n	403b16 <_strtod_l+0x25e>
  403b10:	2400      	movs	r4, #0
  403b12:	9407      	str	r4, [sp, #28]
  403b14:	e008      	b.n	403b28 <_strtod_l+0x270>
  403b16:	2301      	movs	r3, #1
  403b18:	e000      	b.n	403b1c <_strtod_l+0x264>
  403b1a:	2300      	movs	r3, #0
  403b1c:	9307      	str	r3, [sp, #28]
  403b1e:	9b06      	ldr	r3, [sp, #24]
  403b20:	3302      	adds	r3, #2
  403b22:	9319      	str	r3, [sp, #100]	; 0x64
  403b24:	9b06      	ldr	r3, [sp, #24]
  403b26:	789b      	ldrb	r3, [r3, #2]
  403b28:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  403b2c:	2c09      	cmp	r4, #9
  403b2e:	d829      	bhi.n	403b84 <_strtod_l+0x2cc>
  403b30:	2b30      	cmp	r3, #48	; 0x30
  403b32:	d104      	bne.n	403b3e <_strtod_l+0x286>
  403b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b36:	1c5c      	adds	r4, r3, #1
  403b38:	9419      	str	r4, [sp, #100]	; 0x64
  403b3a:	785b      	ldrb	r3, [r3, #1]
  403b3c:	e7f8      	b.n	403b30 <_strtod_l+0x278>
  403b3e:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
  403b42:	2c08      	cmp	r4, #8
  403b44:	d820      	bhi.n	403b88 <_strtod_l+0x2d0>
  403b46:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  403b4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b4c:	f04f 0e0a 	mov.w	lr, #10
  403b50:	461e      	mov	r6, r3
  403b52:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b54:	1c5c      	adds	r4, r3, #1
  403b56:	9419      	str	r4, [sp, #100]	; 0x64
  403b58:	785b      	ldrb	r3, [r3, #1]
  403b5a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
  403b5e:	f1bc 0f09 	cmp.w	ip, #9
  403b62:	d803      	bhi.n	403b6c <_strtod_l+0x2b4>
  403b64:	fb0e 3707 	mla	r7, lr, r7, r3
  403b68:	3f30      	subs	r7, #48	; 0x30
  403b6a:	e7f2      	b.n	403b52 <_strtod_l+0x29a>
  403b6c:	1ba4      	subs	r4, r4, r6
  403b6e:	2c08      	cmp	r4, #8
  403b70:	f644 641f 	movw	r4, #19999	; 0x4e1f
  403b74:	dc02      	bgt.n	403b7c <_strtod_l+0x2c4>
  403b76:	42bc      	cmp	r4, r7
  403b78:	bfa8      	it	ge
  403b7a:	463c      	movge	r4, r7
  403b7c:	9e07      	ldr	r6, [sp, #28]
  403b7e:	b126      	cbz	r6, 403b8a <_strtod_l+0x2d2>
  403b80:	4264      	negs	r4, r4
  403b82:	e002      	b.n	403b8a <_strtod_l+0x2d2>
  403b84:	9c06      	ldr	r4, [sp, #24]
  403b86:	9419      	str	r4, [sp, #100]	; 0x64
  403b88:	2400      	movs	r4, #0
  403b8a:	2d00      	cmp	r5, #0
  403b8c:	d153      	bne.n	403c36 <_strtod_l+0x37e>
  403b8e:	2800      	cmp	r0, #0
  403b90:	f040 844f 	bne.w	404432 <_strtod_l+0xb7a>
  403b94:	9a08      	ldr	r2, [sp, #32]
  403b96:	2a00      	cmp	r2, #0
  403b98:	f040 844b 	bne.w	404432 <_strtod_l+0xb7a>
  403b9c:	2900      	cmp	r1, #0
  403b9e:	d141      	bne.n	403c24 <_strtod_l+0x36c>
  403ba0:	2b4e      	cmp	r3, #78	; 0x4e
  403ba2:	d020      	beq.n	403be6 <_strtod_l+0x32e>
  403ba4:	dc02      	bgt.n	403bac <_strtod_l+0x2f4>
  403ba6:	2b49      	cmp	r3, #73	; 0x49
  403ba8:	d00a      	beq.n	403bc0 <_strtod_l+0x308>
  403baa:	e03b      	b.n	403c24 <_strtod_l+0x36c>
  403bac:	2b69      	cmp	r3, #105	; 0x69
  403bae:	d007      	beq.n	403bc0 <_strtod_l+0x308>
  403bb0:	2b6e      	cmp	r3, #110	; 0x6e
  403bb2:	d018      	beq.n	403be6 <_strtod_l+0x32e>
  403bb4:	e036      	b.n	403c24 <_strtod_l+0x36c>
  403bb6:	bf00      	nop
  403bb8:	00408170 	.word	0x00408170
  403bbc:	7ff00000 	.word	0x7ff00000
  403bc0:	49ab      	ldr	r1, [pc, #684]	; (403e70 <_strtod_l+0x5b8>)
  403bc2:	a819      	add	r0, sp, #100	; 0x64
  403bc4:	f002 f831 	bl	405c2a <__match>
  403bc8:	b360      	cbz	r0, 403c24 <_strtod_l+0x36c>
  403bca:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bcc:	49a9      	ldr	r1, [pc, #676]	; (403e74 <_strtod_l+0x5bc>)
  403bce:	3b01      	subs	r3, #1
  403bd0:	a819      	add	r0, sp, #100	; 0x64
  403bd2:	9319      	str	r3, [sp, #100]	; 0x64
  403bd4:	f002 f829 	bl	405c2a <__match>
  403bd8:	b910      	cbnz	r0, 403be0 <_strtod_l+0x328>
  403bda:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bdc:	3301      	adds	r3, #1
  403bde:	9319      	str	r3, [sp, #100]	; 0x64
  403be0:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 403e90 <_strtod_l+0x5d8>
  403be4:	e01a      	b.n	403c1c <_strtod_l+0x364>
  403be6:	49a4      	ldr	r1, [pc, #656]	; (403e78 <_strtod_l+0x5c0>)
  403be8:	a819      	add	r0, sp, #100	; 0x64
  403bea:	f002 f81e 	bl	405c2a <__match>
  403bee:	b1c8      	cbz	r0, 403c24 <_strtod_l+0x36c>
  403bf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bf2:	781b      	ldrb	r3, [r3, #0]
  403bf4:	2b28      	cmp	r3, #40	; 0x28
  403bf6:	d10f      	bne.n	403c18 <_strtod_l+0x360>
  403bf8:	aa1c      	add	r2, sp, #112	; 0x70
  403bfa:	49a0      	ldr	r1, [pc, #640]	; (403e7c <_strtod_l+0x5c4>)
  403bfc:	a819      	add	r0, sp, #100	; 0x64
  403bfe:	f002 f827 	bl	405c50 <__hexnan>
  403c02:	2805      	cmp	r0, #5
  403c04:	d108      	bne.n	403c18 <_strtod_l+0x360>
  403c06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403c08:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403c0c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
  403c10:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
  403c14:	f000 bc0d 	b.w	404432 <_strtod_l+0xb7a>
  403c18:	f8df 9278 	ldr.w	r9, [pc, #632]	; 403e94 <_strtod_l+0x5dc>
  403c1c:	f04f 0800 	mov.w	r8, #0
  403c20:	f000 bc07 	b.w	404432 <_strtod_l+0xb7a>
  403c24:	9b06      	ldr	r3, [sp, #24]
  403c26:	9319      	str	r3, [sp, #100]	; 0x64
  403c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403c2a:	2b00      	cmp	r3, #0
  403c2c:	f000 840c 	beq.w	404448 <_strtod_l+0xb90>
  403c30:	2300      	movs	r3, #0
  403c32:	930e      	str	r3, [sp, #56]	; 0x38
  403c34:	e3ff      	b.n	404436 <_strtod_l+0xb7e>
  403c36:	9b04      	ldr	r3, [sp, #16]
  403c38:	4658      	mov	r0, fp
  403c3a:	2b00      	cmp	r3, #0
  403c3c:	bf08      	it	eq
  403c3e:	462b      	moveq	r3, r5
  403c40:	2d10      	cmp	r5, #16
  403c42:	eba4 0702 	sub.w	r7, r4, r2
  403c46:	9304      	str	r3, [sp, #16]
  403c48:	462c      	mov	r4, r5
  403c4a:	bfa8      	it	ge
  403c4c:	2410      	movge	r4, #16
  403c4e:	f003 f979 	bl	406f44 <__aeabi_ui2d>
  403c52:	2c09      	cmp	r4, #9
  403c54:	4680      	mov	r8, r0
  403c56:	4689      	mov	r9, r1
  403c58:	dd13      	ble.n	403c82 <_strtod_l+0x3ca>
  403c5a:	4b89      	ldr	r3, [pc, #548]	; (403e80 <_strtod_l+0x5c8>)
  403c5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  403c60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  403c64:	f003 f9e4 	bl	407030 <__aeabi_dmul>
  403c68:	4680      	mov	r8, r0
  403c6a:	9805      	ldr	r0, [sp, #20]
  403c6c:	4689      	mov	r9, r1
  403c6e:	f003 f969 	bl	406f44 <__aeabi_ui2d>
  403c72:	4602      	mov	r2, r0
  403c74:	460b      	mov	r3, r1
  403c76:	4640      	mov	r0, r8
  403c78:	4649      	mov	r1, r9
  403c7a:	f003 f827 	bl	406ccc <__adddf3>
  403c7e:	4680      	mov	r8, r0
  403c80:	4689      	mov	r9, r1
  403c82:	2d0f      	cmp	r5, #15
  403c84:	dc33      	bgt.n	403cee <_strtod_l+0x436>
  403c86:	2f00      	cmp	r7, #0
  403c88:	f000 83d3 	beq.w	404432 <_strtod_l+0xb7a>
  403c8c:	dd22      	ble.n	403cd4 <_strtod_l+0x41c>
  403c8e:	2f16      	cmp	r7, #22
  403c90:	dc07      	bgt.n	403ca2 <_strtod_l+0x3ea>
  403c92:	4d7b      	ldr	r5, [pc, #492]	; (403e80 <_strtod_l+0x5c8>)
  403c94:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
  403c98:	4642      	mov	r2, r8
  403c9a:	464b      	mov	r3, r9
  403c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
  403ca0:	e013      	b.n	403cca <_strtod_l+0x412>
  403ca2:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
  403ca6:	429f      	cmp	r7, r3
  403ca8:	dc21      	bgt.n	403cee <_strtod_l+0x436>
  403caa:	4c75      	ldr	r4, [pc, #468]	; (403e80 <_strtod_l+0x5c8>)
  403cac:	f1c5 050f 	rsb	r5, r5, #15
  403cb0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  403cb4:	1b7d      	subs	r5, r7, r5
  403cb6:	4642      	mov	r2, r8
  403cb8:	464b      	mov	r3, r9
  403cba:	e9d1 0100 	ldrd	r0, r1, [r1]
  403cbe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  403cc2:	f003 f9b5 	bl	407030 <__aeabi_dmul>
  403cc6:	e9d4 2300 	ldrd	r2, r3, [r4]
  403cca:	f003 f9b1 	bl	407030 <__aeabi_dmul>
  403cce:	4680      	mov	r8, r0
  403cd0:	4689      	mov	r9, r1
  403cd2:	e3ae      	b.n	404432 <_strtod_l+0xb7a>
  403cd4:	f117 0f16 	cmn.w	r7, #22
  403cd8:	db09      	blt.n	403cee <_strtod_l+0x436>
  403cda:	4d69      	ldr	r5, [pc, #420]	; (403e80 <_strtod_l+0x5c8>)
  403cdc:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
  403ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ce4:	4640      	mov	r0, r8
  403ce6:	4649      	mov	r1, r9
  403ce8:	f003 facc 	bl	407284 <__aeabi_ddiv>
  403cec:	e7ef      	b.n	403cce <_strtod_l+0x416>
  403cee:	1b2c      	subs	r4, r5, r4
  403cf0:	443c      	add	r4, r7
  403cf2:	2c00      	cmp	r4, #0
  403cf4:	dd5d      	ble.n	403db2 <_strtod_l+0x4fa>
  403cf6:	f014 010f 	ands.w	r1, r4, #15
  403cfa:	d00a      	beq.n	403d12 <_strtod_l+0x45a>
  403cfc:	4b60      	ldr	r3, [pc, #384]	; (403e80 <_strtod_l+0x5c8>)
  403cfe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403d02:	4642      	mov	r2, r8
  403d04:	464b      	mov	r3, r9
  403d06:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d0a:	f003 f991 	bl	407030 <__aeabi_dmul>
  403d0e:	4680      	mov	r8, r0
  403d10:	4689      	mov	r9, r1
  403d12:	f034 040f 	bics.w	r4, r4, #15
  403d16:	f000 80c1 	beq.w	403e9c <_strtod_l+0x5e4>
  403d1a:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  403d1e:	dd0f      	ble.n	403d40 <_strtod_l+0x488>
  403d20:	f04f 0b00 	mov.w	fp, #0
  403d24:	f8cd b010 	str.w	fp, [sp, #16]
  403d28:	f8cd b01c 	str.w	fp, [sp, #28]
  403d2c:	f8cd b018 	str.w	fp, [sp, #24]
  403d30:	2322      	movs	r3, #34	; 0x22
  403d32:	f8ca 3000 	str.w	r3, [sl]
  403d36:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403e90 <_strtod_l+0x5d8>
  403d3a:	f04f 0800 	mov.w	r8, #0
  403d3e:	e188      	b.n	404052 <_strtod_l+0x79a>
  403d40:	2300      	movs	r3, #0
  403d42:	4e50      	ldr	r6, [pc, #320]	; (403e84 <_strtod_l+0x5cc>)
  403d44:	9305      	str	r3, [sp, #20]
  403d46:	1124      	asrs	r4, r4, #4
  403d48:	4640      	mov	r0, r8
  403d4a:	4649      	mov	r1, r9
  403d4c:	2c01      	cmp	r4, #1
  403d4e:	dd0c      	ble.n	403d6a <_strtod_l+0x4b2>
  403d50:	07e2      	lsls	r2, r4, #31
  403d52:	d504      	bpl.n	403d5e <_strtod_l+0x4a6>
  403d54:	e9d6 2300 	ldrd	r2, r3, [r6]
  403d58:	f003 f96a 	bl	407030 <__aeabi_dmul>
  403d5c:	2301      	movs	r3, #1
  403d5e:	9a05      	ldr	r2, [sp, #20]
  403d60:	3201      	adds	r2, #1
  403d62:	9205      	str	r2, [sp, #20]
  403d64:	1064      	asrs	r4, r4, #1
  403d66:	3608      	adds	r6, #8
  403d68:	e7f0      	b.n	403d4c <_strtod_l+0x494>
  403d6a:	b10b      	cbz	r3, 403d70 <_strtod_l+0x4b8>
  403d6c:	4680      	mov	r8, r0
  403d6e:	4689      	mov	r9, r1
  403d70:	4b44      	ldr	r3, [pc, #272]	; (403e84 <_strtod_l+0x5cc>)
  403d72:	9a05      	ldr	r2, [sp, #20]
  403d74:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  403d78:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  403d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d80:	4642      	mov	r2, r8
  403d82:	464b      	mov	r3, r9
  403d84:	f003 f954 	bl	407030 <__aeabi_dmul>
  403d88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403d8c:	4689      	mov	r9, r1
  403d8e:	460a      	mov	r2, r1
  403d90:	0d1b      	lsrs	r3, r3, #20
  403d92:	493d      	ldr	r1, [pc, #244]	; (403e88 <_strtod_l+0x5d0>)
  403d94:	051b      	lsls	r3, r3, #20
  403d96:	428b      	cmp	r3, r1
  403d98:	4680      	mov	r8, r0
  403d9a:	d8c1      	bhi.n	403d20 <_strtod_l+0x468>
  403d9c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
  403da0:	428b      	cmp	r3, r1
  403da2:	bf86      	itte	hi
  403da4:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 403e98 <_strtod_l+0x5e0>
  403da8:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
  403dac:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
  403db0:	e074      	b.n	403e9c <_strtod_l+0x5e4>
  403db2:	d073      	beq.n	403e9c <_strtod_l+0x5e4>
  403db4:	4264      	negs	r4, r4
  403db6:	f014 020f 	ands.w	r2, r4, #15
  403dba:	d00a      	beq.n	403dd2 <_strtod_l+0x51a>
  403dbc:	4b30      	ldr	r3, [pc, #192]	; (403e80 <_strtod_l+0x5c8>)
  403dbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403dc2:	4640      	mov	r0, r8
  403dc4:	4649      	mov	r1, r9
  403dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403dca:	f003 fa5b 	bl	407284 <__aeabi_ddiv>
  403dce:	4680      	mov	r8, r0
  403dd0:	4689      	mov	r9, r1
  403dd2:	1124      	asrs	r4, r4, #4
  403dd4:	d062      	beq.n	403e9c <_strtod_l+0x5e4>
  403dd6:	2c1f      	cmp	r4, #31
  403dd8:	dd08      	ble.n	403dec <_strtod_l+0x534>
  403dda:	f04f 0b00 	mov.w	fp, #0
  403dde:	f8cd b010 	str.w	fp, [sp, #16]
  403de2:	f8cd b01c 	str.w	fp, [sp, #28]
  403de6:	f8cd b018 	str.w	fp, [sp, #24]
  403dea:	e12b      	b.n	404044 <_strtod_l+0x78c>
  403dec:	f014 0f10 	tst.w	r4, #16
  403df0:	bf0c      	ite	eq
  403df2:	2300      	moveq	r3, #0
  403df4:	236a      	movne	r3, #106	; 0x6a
  403df6:	4e25      	ldr	r6, [pc, #148]	; (403e8c <_strtod_l+0x5d4>)
  403df8:	9305      	str	r3, [sp, #20]
  403dfa:	4640      	mov	r0, r8
  403dfc:	4649      	mov	r1, r9
  403dfe:	2300      	movs	r3, #0
  403e00:	2c00      	cmp	r4, #0
  403e02:	dd09      	ble.n	403e18 <_strtod_l+0x560>
  403e04:	07e2      	lsls	r2, r4, #31
  403e06:	d504      	bpl.n	403e12 <_strtod_l+0x55a>
  403e08:	e9d6 2300 	ldrd	r2, r3, [r6]
  403e0c:	f003 f910 	bl	407030 <__aeabi_dmul>
  403e10:	2301      	movs	r3, #1
  403e12:	1064      	asrs	r4, r4, #1
  403e14:	3608      	adds	r6, #8
  403e16:	e7f3      	b.n	403e00 <_strtod_l+0x548>
  403e18:	b10b      	cbz	r3, 403e1e <_strtod_l+0x566>
  403e1a:	4680      	mov	r8, r0
  403e1c:	4689      	mov	r9, r1
  403e1e:	9b05      	ldr	r3, [sp, #20]
  403e20:	b1eb      	cbz	r3, 403e5e <_strtod_l+0x5a6>
  403e22:	f3c9 530a 	ubfx	r3, r9, #20, #11
  403e26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  403e2a:	2b00      	cmp	r3, #0
  403e2c:	4649      	mov	r1, r9
  403e2e:	dd16      	ble.n	403e5e <_strtod_l+0x5a6>
  403e30:	2b1f      	cmp	r3, #31
  403e32:	dd0e      	ble.n	403e52 <_strtod_l+0x59a>
  403e34:	2b34      	cmp	r3, #52	; 0x34
  403e36:	bfde      	ittt	le
  403e38:	3b20      	suble	r3, #32
  403e3a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
  403e3e:	fa02 f303 	lslle.w	r3, r2, r3
  403e42:	f04f 0800 	mov.w	r8, #0
  403e46:	bfcc      	ite	gt
  403e48:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
  403e4c:	ea03 0901 	andle.w	r9, r3, r1
  403e50:	e005      	b.n	403e5e <_strtod_l+0x5a6>
  403e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  403e56:	fa02 f303 	lsl.w	r3, r2, r3
  403e5a:	ea03 0808 	and.w	r8, r3, r8
  403e5e:	2200      	movs	r2, #0
  403e60:	2300      	movs	r3, #0
  403e62:	4640      	mov	r0, r8
  403e64:	4649      	mov	r1, r9
  403e66:	f003 fb4b 	bl	407500 <__aeabi_dcmpeq>
  403e6a:	2800      	cmp	r0, #0
  403e6c:	d1b5      	bne.n	403dda <_strtod_l+0x522>
  403e6e:	e017      	b.n	403ea0 <_strtod_l+0x5e8>
  403e70:	00408119 	.word	0x00408119
  403e74:	0040819b 	.word	0x0040819b
  403e78:	00408121 	.word	0x00408121
  403e7c:	00408184 	.word	0x00408184
  403e80:	00408218 	.word	0x00408218
  403e84:	004082e0 	.word	0x004082e0
  403e88:	7ca00000 	.word	0x7ca00000
  403e8c:	00408148 	.word	0x00408148
  403e90:	7ff00000 	.word	0x7ff00000
  403e94:	fff80000 	.word	0xfff80000
  403e98:	7fefffff 	.word	0x7fefffff
  403e9c:	2300      	movs	r3, #0
  403e9e:	9305      	str	r3, [sp, #20]
  403ea0:	f8cd b000 	str.w	fp, [sp]
  403ea4:	462b      	mov	r3, r5
  403ea6:	9a04      	ldr	r2, [sp, #16]
  403ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
  403eaa:	4650      	mov	r0, sl
  403eac:	f002 f8c7 	bl	40603e <__s2b>
  403eb0:	9007      	str	r0, [sp, #28]
  403eb2:	2800      	cmp	r0, #0
  403eb4:	f43f af34 	beq.w	403d20 <_strtod_l+0x468>
  403eb8:	2f00      	cmp	r7, #0
  403eba:	f1c7 0300 	rsb	r3, r7, #0
  403ebe:	bfa8      	it	ge
  403ec0:	2300      	movge	r3, #0
  403ec2:	930f      	str	r3, [sp, #60]	; 0x3c
  403ec4:	f04f 0b00 	mov.w	fp, #0
  403ec8:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
  403ecc:	9314      	str	r3, [sp, #80]	; 0x50
  403ece:	f8cd b010 	str.w	fp, [sp, #16]
  403ed2:	9b07      	ldr	r3, [sp, #28]
  403ed4:	4650      	mov	r0, sl
  403ed6:	6859      	ldr	r1, [r3, #4]
  403ed8:	f002 f82a 	bl	405f30 <_Balloc>
  403edc:	9006      	str	r0, [sp, #24]
  403ede:	2800      	cmp	r0, #0
  403ee0:	f43f af26 	beq.w	403d30 <_strtod_l+0x478>
  403ee4:	9b07      	ldr	r3, [sp, #28]
  403ee6:	691a      	ldr	r2, [r3, #16]
  403ee8:	3202      	adds	r2, #2
  403eea:	f103 010c 	add.w	r1, r3, #12
  403eee:	0092      	lsls	r2, r2, #2
  403ef0:	300c      	adds	r0, #12
  403ef2:	f7fe fef5 	bl	402ce0 <memcpy>
  403ef6:	ab1c      	add	r3, sp, #112	; 0x70
  403ef8:	9301      	str	r3, [sp, #4]
  403efa:	ab1b      	add	r3, sp, #108	; 0x6c
  403efc:	9300      	str	r3, [sp, #0]
  403efe:	4642      	mov	r2, r8
  403f00:	464b      	mov	r3, r9
  403f02:	4650      	mov	r0, sl
  403f04:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  403f08:	f002 fb49 	bl	40659e <__d2b>
  403f0c:	901a      	str	r0, [sp, #104]	; 0x68
  403f0e:	2800      	cmp	r0, #0
  403f10:	f43f af0e 	beq.w	403d30 <_strtod_l+0x478>
  403f14:	2101      	movs	r1, #1
  403f16:	4650      	mov	r0, sl
  403f18:	f002 f91c 	bl	406154 <__i2b>
  403f1c:	9004      	str	r0, [sp, #16]
  403f1e:	2800      	cmp	r0, #0
  403f20:	f43f af06 	beq.w	403d30 <_strtod_l+0x478>
  403f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  403f26:	9905      	ldr	r1, [sp, #20]
  403f28:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  403f2a:	2b00      	cmp	r3, #0
  403f2c:	bfad      	iteet	ge
  403f2e:	9a0f      	ldrge	r2, [sp, #60]	; 0x3c
  403f30:	9a14      	ldrlt	r2, [sp, #80]	; 0x50
  403f32:	9e0f      	ldrlt	r6, [sp, #60]	; 0x3c
  403f34:	18d6      	addge	r6, r2, r3
  403f36:	bfb8      	it	lt
  403f38:	1ad2      	sublt	r2, r2, r3
  403f3a:	eba3 0301 	sub.w	r3, r3, r1
  403f3e:	4423      	add	r3, r4
  403f40:	49af      	ldr	r1, [pc, #700]	; (404200 <_strtod_l+0x948>)
  403f42:	bfa8      	it	ge
  403f44:	9a14      	ldrge	r2, [sp, #80]	; 0x50
  403f46:	3b01      	subs	r3, #1
  403f48:	428b      	cmp	r3, r1
  403f4a:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
  403f4e:	f280 8085 	bge.w	40405c <_strtod_l+0x7a4>
  403f52:	1ac9      	subs	r1, r1, r3
  403f54:	291f      	cmp	r1, #31
  403f56:	bfc8      	it	gt
  403f58:	4daa      	ldrgt	r5, [pc, #680]	; (404204 <_strtod_l+0x94c>)
  403f5a:	f04f 0701 	mov.w	r7, #1
  403f5e:	bfd4      	ite	le
  403f60:	fa07 f301 	lslle.w	r3, r7, r1
  403f64:	1aed      	subgt	r5, r5, r3
  403f66:	eba4 0401 	sub.w	r4, r4, r1
  403f6a:	bfd9      	ittee	le
  403f6c:	9309      	strle	r3, [sp, #36]	; 0x24
  403f6e:	2500      	movle	r5, #0
  403f70:	fa07 f505 	lslgt.w	r5, r7, r5
  403f74:	9709      	strgt	r7, [sp, #36]	; 0x24
  403f76:	1937      	adds	r7, r6, r4
  403f78:	9b05      	ldr	r3, [sp, #20]
  403f7a:	42be      	cmp	r6, r7
  403f7c:	4414      	add	r4, r2
  403f7e:	441c      	add	r4, r3
  403f80:	4633      	mov	r3, r6
  403f82:	bfa8      	it	ge
  403f84:	463b      	movge	r3, r7
  403f86:	42a3      	cmp	r3, r4
  403f88:	bfa8      	it	ge
  403f8a:	4623      	movge	r3, r4
  403f8c:	2b00      	cmp	r3, #0
  403f8e:	bfc2      	ittt	gt
  403f90:	1aff      	subgt	r7, r7, r3
  403f92:	1ae4      	subgt	r4, r4, r3
  403f94:	1af6      	subgt	r6, r6, r3
  403f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403f98:	2b00      	cmp	r3, #0
  403f9a:	d163      	bne.n	404064 <_strtod_l+0x7ac>
  403f9c:	2f00      	cmp	r7, #0
  403f9e:	dc7a      	bgt.n	404096 <_strtod_l+0x7de>
  403fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403fa2:	2b00      	cmp	r3, #0
  403fa4:	f040 8081 	bne.w	4040aa <_strtod_l+0x7f2>
  403fa8:	2c00      	cmp	r4, #0
  403faa:	f300 8088 	bgt.w	4040be <_strtod_l+0x806>
  403fae:	2e00      	cmp	r6, #0
  403fb0:	f300 808f 	bgt.w	4040d2 <_strtod_l+0x81a>
  403fb4:	9a06      	ldr	r2, [sp, #24]
  403fb6:	991a      	ldr	r1, [sp, #104]	; 0x68
  403fb8:	4650      	mov	r0, sl
  403fba:	f002 fa20 	bl	4063fe <__mdiff>
  403fbe:	4683      	mov	fp, r0
  403fc0:	2800      	cmp	r0, #0
  403fc2:	f43f aeb5 	beq.w	403d30 <_strtod_l+0x478>
  403fc6:	2400      	movs	r4, #0
  403fc8:	68c3      	ldr	r3, [r0, #12]
  403fca:	9904      	ldr	r1, [sp, #16]
  403fcc:	60c4      	str	r4, [r0, #12]
  403fce:	9308      	str	r3, [sp, #32]
  403fd0:	f002 f9f9 	bl	4063c6 <__mcmp>
  403fd4:	42a0      	cmp	r0, r4
  403fd6:	f280 808b 	bge.w	4040f0 <_strtod_l+0x838>
  403fda:	9b08      	ldr	r3, [sp, #32]
  403fdc:	2b00      	cmp	r3, #0
  403fde:	f040 8201 	bne.w	4043e4 <_strtod_l+0xb2c>
  403fe2:	f1b8 0f00 	cmp.w	r8, #0
  403fe6:	f040 81fd 	bne.w	4043e4 <_strtod_l+0xb2c>
  403fea:	f3c9 0313 	ubfx	r3, r9, #0, #20
  403fee:	2b00      	cmp	r3, #0
  403ff0:	f040 81f8 	bne.w	4043e4 <_strtod_l+0xb2c>
  403ff4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  403ff8:	0d1b      	lsrs	r3, r3, #20
  403ffa:	051b      	lsls	r3, r3, #20
  403ffc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  404000:	f240 81f0 	bls.w	4043e4 <_strtod_l+0xb2c>
  404004:	f8db 3014 	ldr.w	r3, [fp, #20]
  404008:	2b00      	cmp	r3, #0
  40400a:	d06c      	beq.n	4040e6 <_strtod_l+0x82e>
  40400c:	4659      	mov	r1, fp
  40400e:	2201      	movs	r2, #1
  404010:	4650      	mov	r0, sl
  404012:	f002 f987 	bl	406324 <__lshift>
  404016:	9904      	ldr	r1, [sp, #16]
  404018:	4683      	mov	fp, r0
  40401a:	f002 f9d4 	bl	4063c6 <__mcmp>
  40401e:	2800      	cmp	r0, #0
  404020:	f340 81e0 	ble.w	4043e4 <_strtod_l+0xb2c>
  404024:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  404028:	9a05      	ldr	r2, [sp, #20]
  40402a:	0d1b      	lsrs	r3, r3, #20
  40402c:	051b      	lsls	r3, r3, #20
  40402e:	2a00      	cmp	r2, #0
  404030:	f000 808d 	beq.w	40414e <_strtod_l+0x896>
  404034:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  404038:	f300 8089 	bgt.w	40414e <_strtod_l+0x896>
  40403c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  404040:	f300 81d2 	bgt.w	4043e8 <_strtod_l+0xb30>
  404044:	2322      	movs	r3, #34	; 0x22
  404046:	f04f 0800 	mov.w	r8, #0
  40404a:	f04f 0900 	mov.w	r9, #0
  40404e:	f8ca 3000 	str.w	r3, [sl]
  404052:	9b07      	ldr	r3, [sp, #28]
  404054:	2b00      	cmp	r3, #0
  404056:	f040 81d8 	bne.w	40440a <_strtod_l+0xb52>
  40405a:	e1ea      	b.n	404432 <_strtod_l+0xb7a>
  40405c:	2301      	movs	r3, #1
  40405e:	2500      	movs	r5, #0
  404060:	9309      	str	r3, [sp, #36]	; 0x24
  404062:	e788      	b.n	403f76 <_strtod_l+0x6be>
  404064:	461a      	mov	r2, r3
  404066:	9904      	ldr	r1, [sp, #16]
  404068:	4650      	mov	r0, sl
  40406a:	f002 f90d 	bl	406288 <__pow5mult>
  40406e:	9004      	str	r0, [sp, #16]
  404070:	2800      	cmp	r0, #0
  404072:	f43f ae5d 	beq.w	403d30 <_strtod_l+0x478>
  404076:	4601      	mov	r1, r0
  404078:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40407a:	4650      	mov	r0, sl
  40407c:	f002 f873 	bl	406166 <__multiply>
  404080:	9008      	str	r0, [sp, #32]
  404082:	2800      	cmp	r0, #0
  404084:	f43f ae54 	beq.w	403d30 <_strtod_l+0x478>
  404088:	991a      	ldr	r1, [sp, #104]	; 0x68
  40408a:	4650      	mov	r0, sl
  40408c:	f001 ff85 	bl	405f9a <_Bfree>
  404090:	9b08      	ldr	r3, [sp, #32]
  404092:	931a      	str	r3, [sp, #104]	; 0x68
  404094:	e782      	b.n	403f9c <_strtod_l+0x6e4>
  404096:	463a      	mov	r2, r7
  404098:	991a      	ldr	r1, [sp, #104]	; 0x68
  40409a:	4650      	mov	r0, sl
  40409c:	f002 f942 	bl	406324 <__lshift>
  4040a0:	901a      	str	r0, [sp, #104]	; 0x68
  4040a2:	2800      	cmp	r0, #0
  4040a4:	f47f af7c 	bne.w	403fa0 <_strtod_l+0x6e8>
  4040a8:	e642      	b.n	403d30 <_strtod_l+0x478>
  4040aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4040ac:	9906      	ldr	r1, [sp, #24]
  4040ae:	4650      	mov	r0, sl
  4040b0:	f002 f8ea 	bl	406288 <__pow5mult>
  4040b4:	9006      	str	r0, [sp, #24]
  4040b6:	2800      	cmp	r0, #0
  4040b8:	f47f af76 	bne.w	403fa8 <_strtod_l+0x6f0>
  4040bc:	e638      	b.n	403d30 <_strtod_l+0x478>
  4040be:	4622      	mov	r2, r4
  4040c0:	9906      	ldr	r1, [sp, #24]
  4040c2:	4650      	mov	r0, sl
  4040c4:	f002 f92e 	bl	406324 <__lshift>
  4040c8:	9006      	str	r0, [sp, #24]
  4040ca:	2800      	cmp	r0, #0
  4040cc:	f47f af6f 	bne.w	403fae <_strtod_l+0x6f6>
  4040d0:	e62e      	b.n	403d30 <_strtod_l+0x478>
  4040d2:	4632      	mov	r2, r6
  4040d4:	9904      	ldr	r1, [sp, #16]
  4040d6:	4650      	mov	r0, sl
  4040d8:	f002 f924 	bl	406324 <__lshift>
  4040dc:	9004      	str	r0, [sp, #16]
  4040de:	2800      	cmp	r0, #0
  4040e0:	f47f af68 	bne.w	403fb4 <_strtod_l+0x6fc>
  4040e4:	e624      	b.n	403d30 <_strtod_l+0x478>
  4040e6:	f8db 3010 	ldr.w	r3, [fp, #16]
  4040ea:	2b01      	cmp	r3, #1
  4040ec:	dc8e      	bgt.n	40400c <_strtod_l+0x754>
  4040ee:	e179      	b.n	4043e4 <_strtod_l+0xb2c>
  4040f0:	d161      	bne.n	4041b6 <_strtod_l+0x8fe>
  4040f2:	9a08      	ldr	r2, [sp, #32]
  4040f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
  4040f8:	b322      	cbz	r2, 404144 <_strtod_l+0x88c>
  4040fa:	4943      	ldr	r1, [pc, #268]	; (404208 <_strtod_l+0x950>)
  4040fc:	428b      	cmp	r3, r1
  4040fe:	464a      	mov	r2, r9
  404100:	d12e      	bne.n	404160 <_strtod_l+0x8a8>
  404102:	9b05      	ldr	r3, [sp, #20]
  404104:	4641      	mov	r1, r8
  404106:	b163      	cbz	r3, 404122 <_strtod_l+0x86a>
  404108:	4b40      	ldr	r3, [pc, #256]	; (40420c <_strtod_l+0x954>)
  40410a:	4013      	ands	r3, r2
  40410c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  404110:	d807      	bhi.n	404122 <_strtod_l+0x86a>
  404112:	0d1b      	lsrs	r3, r3, #20
  404114:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  404118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40411c:	fa00 f303 	lsl.w	r3, r0, r3
  404120:	e001      	b.n	404126 <_strtod_l+0x86e>
  404122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  404126:	428b      	cmp	r3, r1
  404128:	d11a      	bne.n	404160 <_strtod_l+0x8a8>
  40412a:	4939      	ldr	r1, [pc, #228]	; (404210 <_strtod_l+0x958>)
  40412c:	428a      	cmp	r2, r1
  40412e:	d102      	bne.n	404136 <_strtod_l+0x87e>
  404130:	3301      	adds	r3, #1
  404132:	f43f adfd 	beq.w	403d30 <_strtod_l+0x478>
  404136:	4b35      	ldr	r3, [pc, #212]	; (40420c <_strtod_l+0x954>)
  404138:	4013      	ands	r3, r2
  40413a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
  40413e:	f04f 0800 	mov.w	r8, #0
  404142:	e14f      	b.n	4043e4 <_strtod_l+0xb2c>
  404144:	b963      	cbnz	r3, 404160 <_strtod_l+0x8a8>
  404146:	f1b8 0f00 	cmp.w	r8, #0
  40414a:	d109      	bne.n	404160 <_strtod_l+0x8a8>
  40414c:	e76a      	b.n	404024 <_strtod_l+0x76c>
  40414e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  404152:	ea6f 5913 	mvn.w	r9, r3, lsr #20
  404156:	ea6f 5909 	mvn.w	r9, r9, lsl #20
  40415a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  40415e:	e141      	b.n	4043e4 <_strtod_l+0xb2c>
  404160:	b115      	cbz	r5, 404168 <_strtod_l+0x8b0>
  404162:	ea15 0f09 	tst.w	r5, r9
  404166:	e002      	b.n	40416e <_strtod_l+0x8b6>
  404168:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40416a:	ea13 0f08 	tst.w	r3, r8
  40416e:	f000 8139 	beq.w	4043e4 <_strtod_l+0xb2c>
  404172:	9b08      	ldr	r3, [sp, #32]
  404174:	9a05      	ldr	r2, [sp, #20]
  404176:	4640      	mov	r0, r8
  404178:	4649      	mov	r1, r9
  40417a:	b153      	cbz	r3, 404192 <_strtod_l+0x8da>
  40417c:	f7ff fb78 	bl	403870 <sulp>
  404180:	4602      	mov	r2, r0
  404182:	460b      	mov	r3, r1
  404184:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404188:	f002 fda0 	bl	406ccc <__adddf3>
  40418c:	4680      	mov	r8, r0
  40418e:	4689      	mov	r9, r1
  404190:	e128      	b.n	4043e4 <_strtod_l+0xb2c>
  404192:	f7ff fb6d 	bl	403870 <sulp>
  404196:	4602      	mov	r2, r0
  404198:	460b      	mov	r3, r1
  40419a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40419e:	f002 fd93 	bl	406cc8 <__aeabi_dsub>
  4041a2:	2200      	movs	r2, #0
  4041a4:	2300      	movs	r3, #0
  4041a6:	4680      	mov	r8, r0
  4041a8:	4689      	mov	r9, r1
  4041aa:	f003 f9a9 	bl	407500 <__aeabi_dcmpeq>
  4041ae:	2800      	cmp	r0, #0
  4041b0:	f47f af48 	bne.w	404044 <_strtod_l+0x78c>
  4041b4:	e116      	b.n	4043e4 <_strtod_l+0xb2c>
  4041b6:	9904      	ldr	r1, [sp, #16]
  4041b8:	4658      	mov	r0, fp
  4041ba:	f002 fa3e 	bl	40663a <__ratio>
  4041be:	2200      	movs	r2, #0
  4041c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4041c4:	4606      	mov	r6, r0
  4041c6:	460f      	mov	r7, r1
  4041c8:	f003 f9ae 	bl	407528 <__aeabi_dcmple>
  4041cc:	2800      	cmp	r0, #0
  4041ce:	d03e      	beq.n	40424e <_strtod_l+0x996>
  4041d0:	9b08      	ldr	r3, [sp, #32]
  4041d2:	b113      	cbz	r3, 4041da <_strtod_l+0x922>
  4041d4:	2600      	movs	r6, #0
  4041d6:	4f0f      	ldr	r7, [pc, #60]	; (404214 <_strtod_l+0x95c>)
  4041d8:	e010      	b.n	4041fc <_strtod_l+0x944>
  4041da:	f1b8 0f00 	cmp.w	r8, #0
  4041de:	d103      	bne.n	4041e8 <_strtod_l+0x930>
  4041e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
  4041e4:	b93b      	cbnz	r3, 4041f6 <_strtod_l+0x93e>
  4041e6:	e019      	b.n	40421c <_strtod_l+0x964>
  4041e8:	f1b8 0f01 	cmp.w	r8, #1
  4041ec:	d103      	bne.n	4041f6 <_strtod_l+0x93e>
  4041ee:	f1b9 0f00 	cmp.w	r9, #0
  4041f2:	f43f af27 	beq.w	404044 <_strtod_l+0x78c>
  4041f6:	4f08      	ldr	r7, [pc, #32]	; (404218 <_strtod_l+0x960>)
  4041f8:	2600      	movs	r6, #0
  4041fa:	2400      	movs	r4, #0
  4041fc:	4d05      	ldr	r5, [pc, #20]	; (404214 <_strtod_l+0x95c>)
  4041fe:	e03b      	b.n	404278 <_strtod_l+0x9c0>
  404200:	fffffc02 	.word	0xfffffc02
  404204:	fffffbe2 	.word	0xfffffbe2
  404208:	000fffff 	.word	0x000fffff
  40420c:	7ff00000 	.word	0x7ff00000
  404210:	7fefffff 	.word	0x7fefffff
  404214:	3ff00000 	.word	0x3ff00000
  404218:	bff00000 	.word	0xbff00000
  40421c:	2200      	movs	r2, #0
  40421e:	4b9a      	ldr	r3, [pc, #616]	; (404488 <_strtod_l+0xbd0>)
  404220:	4630      	mov	r0, r6
  404222:	4639      	mov	r1, r7
  404224:	f003 f976 	bl	407514 <__aeabi_dcmplt>
  404228:	b940      	cbnz	r0, 40423c <_strtod_l+0x984>
  40422a:	2200      	movs	r2, #0
  40422c:	4b97      	ldr	r3, [pc, #604]	; (40448c <_strtod_l+0xbd4>)
  40422e:	4630      	mov	r0, r6
  404230:	4639      	mov	r1, r7
  404232:	f002 fefd 	bl	407030 <__aeabi_dmul>
  404236:	4604      	mov	r4, r0
  404238:	460d      	mov	r5, r1
  40423a:	e001      	b.n	404240 <_strtod_l+0x988>
  40423c:	9c08      	ldr	r4, [sp, #32]
  40423e:	4d93      	ldr	r5, [pc, #588]	; (40448c <_strtod_l+0xbd4>)
  404240:	9416      	str	r4, [sp, #88]	; 0x58
  404242:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404246:	9317      	str	r3, [sp, #92]	; 0x5c
  404248:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
  40424c:	e014      	b.n	404278 <_strtod_l+0x9c0>
  40424e:	4b8f      	ldr	r3, [pc, #572]	; (40448c <_strtod_l+0xbd4>)
  404250:	2200      	movs	r2, #0
  404252:	4630      	mov	r0, r6
  404254:	4639      	mov	r1, r7
  404256:	f002 feeb 	bl	407030 <__aeabi_dmul>
  40425a:	9b08      	ldr	r3, [sp, #32]
  40425c:	4604      	mov	r4, r0
  40425e:	460d      	mov	r5, r1
  404260:	b923      	cbnz	r3, 40426c <_strtod_l+0x9b4>
  404262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  404266:	9010      	str	r0, [sp, #64]	; 0x40
  404268:	9311      	str	r3, [sp, #68]	; 0x44
  40426a:	e003      	b.n	404274 <_strtod_l+0x9bc>
  40426c:	4602      	mov	r2, r0
  40426e:	460b      	mov	r3, r1
  404270:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  404274:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
  404278:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  40427c:	0d1b      	lsrs	r3, r3, #20
  40427e:	051b      	lsls	r3, r3, #20
  404280:	9309      	str	r3, [sp, #36]	; 0x24
  404282:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404284:	4b82      	ldr	r3, [pc, #520]	; (404490 <_strtod_l+0xbd8>)
  404286:	429a      	cmp	r2, r3
  404288:	d12b      	bne.n	4042e2 <_strtod_l+0xa2a>
  40428a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40428e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  404292:	4640      	mov	r0, r8
  404294:	4649      	mov	r1, r9
  404296:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  40429a:	f002 f90f 	bl	4064bc <__ulp>
  40429e:	4602      	mov	r2, r0
  4042a0:	460b      	mov	r3, r1
  4042a2:	4630      	mov	r0, r6
  4042a4:	4639      	mov	r1, r7
  4042a6:	f002 fec3 	bl	407030 <__aeabi_dmul>
  4042aa:	4642      	mov	r2, r8
  4042ac:	464b      	mov	r3, r9
  4042ae:	f002 fd0d 	bl	406ccc <__adddf3>
  4042b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  4042b6:	0d1b      	lsrs	r3, r3, #20
  4042b8:	4a76      	ldr	r2, [pc, #472]	; (404494 <_strtod_l+0xbdc>)
  4042ba:	051b      	lsls	r3, r3, #20
  4042bc:	4293      	cmp	r3, r2
  4042be:	4680      	mov	r8, r0
  4042c0:	d90c      	bls.n	4042dc <_strtod_l+0xa24>
  4042c2:	4b75      	ldr	r3, [pc, #468]	; (404498 <_strtod_l+0xbe0>)
  4042c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4042c6:	429a      	cmp	r2, r3
  4042c8:	d103      	bne.n	4042d2 <_strtod_l+0xa1a>
  4042ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4042cc:	3301      	adds	r3, #1
  4042ce:	f43f ad2f 	beq.w	403d30 <_strtod_l+0x478>
  4042d2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404498 <_strtod_l+0xbe0>
  4042d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  4042da:	e072      	b.n	4043c2 <_strtod_l+0xb0a>
  4042dc:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
  4042e0:	e039      	b.n	404356 <_strtod_l+0xa9e>
  4042e2:	9b05      	ldr	r3, [sp, #20]
  4042e4:	b33b      	cbz	r3, 404336 <_strtod_l+0xa7e>
  4042e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4042e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  4042ec:	d823      	bhi.n	404336 <_strtod_l+0xa7e>
  4042ee:	a35e      	add	r3, pc, #376	; (adr r3, 404468 <_strtod_l+0xbb0>)
  4042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042f4:	4620      	mov	r0, r4
  4042f6:	4629      	mov	r1, r5
  4042f8:	f003 f916 	bl	407528 <__aeabi_dcmple>
  4042fc:	b1b8      	cbz	r0, 40432e <_strtod_l+0xa76>
  4042fe:	4629      	mov	r1, r5
  404300:	4620      	mov	r0, r4
  404302:	f003 f96d 	bl	4075e0 <__aeabi_d2uiz>
  404306:	2800      	cmp	r0, #0
  404308:	bf08      	it	eq
  40430a:	2001      	moveq	r0, #1
  40430c:	f002 fe1a 	bl	406f44 <__aeabi_ui2d>
  404310:	9b08      	ldr	r3, [sp, #32]
  404312:	4604      	mov	r4, r0
  404314:	460d      	mov	r5, r1
  404316:	b923      	cbnz	r3, 404322 <_strtod_l+0xa6a>
  404318:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40431c:	9012      	str	r0, [sp, #72]	; 0x48
  40431e:	9313      	str	r3, [sp, #76]	; 0x4c
  404320:	e003      	b.n	40432a <_strtod_l+0xa72>
  404322:	4602      	mov	r2, r0
  404324:	460b      	mov	r3, r1
  404326:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40432a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
  40432e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404330:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
  404334:	1a9f      	subs	r7, r3, r2
  404336:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  40433a:	f002 f8bf 	bl	4064bc <__ulp>
  40433e:	4602      	mov	r2, r0
  404340:	460b      	mov	r3, r1
  404342:	4630      	mov	r0, r6
  404344:	4639      	mov	r1, r7
  404346:	f002 fe73 	bl	407030 <__aeabi_dmul>
  40434a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  40434e:	f002 fcbd 	bl	406ccc <__adddf3>
  404352:	4680      	mov	r8, r0
  404354:	4689      	mov	r9, r1
  404356:	9b05      	ldr	r3, [sp, #20]
  404358:	bb9b      	cbnz	r3, 4043c2 <_strtod_l+0xb0a>
  40435a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  40435e:	0d1b      	lsrs	r3, r3, #20
  404360:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404362:	051b      	lsls	r3, r3, #20
  404364:	429a      	cmp	r2, r3
  404366:	464e      	mov	r6, r9
  404368:	d12b      	bne.n	4043c2 <_strtod_l+0xb0a>
  40436a:	4629      	mov	r1, r5
  40436c:	4620      	mov	r0, r4
  40436e:	f003 f90f 	bl	407590 <__aeabi_d2iz>
  404372:	f002 fdf7 	bl	406f64 <__aeabi_i2d>
  404376:	460b      	mov	r3, r1
  404378:	4602      	mov	r2, r0
  40437a:	4629      	mov	r1, r5
  40437c:	4620      	mov	r0, r4
  40437e:	f002 fca3 	bl	406cc8 <__aeabi_dsub>
  404382:	9b08      	ldr	r3, [sp, #32]
  404384:	4604      	mov	r4, r0
  404386:	460d      	mov	r5, r1
  404388:	b92b      	cbnz	r3, 404396 <_strtod_l+0xade>
  40438a:	f1b8 0f00 	cmp.w	r8, #0
  40438e:	d102      	bne.n	404396 <_strtod_l+0xade>
  404390:	f3c9 0613 	ubfx	r6, r9, #0, #20
  404394:	b17e      	cbz	r6, 4043b6 <_strtod_l+0xafe>
  404396:	a336      	add	r3, pc, #216	; (adr r3, 404470 <_strtod_l+0xbb8>)
  404398:	e9d3 2300 	ldrd	r2, r3, [r3]
  40439c:	4620      	mov	r0, r4
  40439e:	4629      	mov	r1, r5
  4043a0:	f003 f8b8 	bl	407514 <__aeabi_dcmplt>
  4043a4:	bb88      	cbnz	r0, 40440a <_strtod_l+0xb52>
  4043a6:	a334      	add	r3, pc, #208	; (adr r3, 404478 <_strtod_l+0xbc0>)
  4043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043ac:	4620      	mov	r0, r4
  4043ae:	4629      	mov	r1, r5
  4043b0:	f003 f8ce 	bl	407550 <__aeabi_dcmpgt>
  4043b4:	e004      	b.n	4043c0 <_strtod_l+0xb08>
  4043b6:	a332      	add	r3, pc, #200	; (adr r3, 404480 <_strtod_l+0xbc8>)
  4043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4043bc:	f003 f8aa 	bl	407514 <__aeabi_dcmplt>
  4043c0:	bb18      	cbnz	r0, 40440a <_strtod_l+0xb52>
  4043c2:	991a      	ldr	r1, [sp, #104]	; 0x68
  4043c4:	4650      	mov	r0, sl
  4043c6:	f001 fde8 	bl	405f9a <_Bfree>
  4043ca:	9906      	ldr	r1, [sp, #24]
  4043cc:	4650      	mov	r0, sl
  4043ce:	f001 fde4 	bl	405f9a <_Bfree>
  4043d2:	9904      	ldr	r1, [sp, #16]
  4043d4:	4650      	mov	r0, sl
  4043d6:	f001 fde0 	bl	405f9a <_Bfree>
  4043da:	4659      	mov	r1, fp
  4043dc:	4650      	mov	r0, sl
  4043de:	f001 fddc 	bl	405f9a <_Bfree>
  4043e2:	e576      	b.n	403ed2 <_strtod_l+0x61a>
  4043e4:	9b05      	ldr	r3, [sp, #20]
  4043e6:	b183      	cbz	r3, 40440a <_strtod_l+0xb52>
  4043e8:	4b2c      	ldr	r3, [pc, #176]	; (40449c <_strtod_l+0xbe4>)
  4043ea:	930d      	str	r3, [sp, #52]	; 0x34
  4043ec:	2300      	movs	r3, #0
  4043ee:	930c      	str	r3, [sp, #48]	; 0x30
  4043f0:	4640      	mov	r0, r8
  4043f2:	4649      	mov	r1, r9
  4043f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4043f8:	f002 fe1a 	bl	407030 <__aeabi_dmul>
  4043fc:	4680      	mov	r8, r0
  4043fe:	4689      	mov	r9, r1
  404400:	b919      	cbnz	r1, 40440a <_strtod_l+0xb52>
  404402:	b910      	cbnz	r0, 40440a <_strtod_l+0xb52>
  404404:	2322      	movs	r3, #34	; 0x22
  404406:	f8ca 3000 	str.w	r3, [sl]
  40440a:	991a      	ldr	r1, [sp, #104]	; 0x68
  40440c:	4650      	mov	r0, sl
  40440e:	f001 fdc4 	bl	405f9a <_Bfree>
  404412:	9906      	ldr	r1, [sp, #24]
  404414:	4650      	mov	r0, sl
  404416:	f001 fdc0 	bl	405f9a <_Bfree>
  40441a:	9904      	ldr	r1, [sp, #16]
  40441c:	4650      	mov	r0, sl
  40441e:	f001 fdbc 	bl	405f9a <_Bfree>
  404422:	9907      	ldr	r1, [sp, #28]
  404424:	4650      	mov	r0, sl
  404426:	f001 fdb8 	bl	405f9a <_Bfree>
  40442a:	4659      	mov	r1, fp
  40442c:	4650      	mov	r0, sl
  40442e:	f001 fdb4 	bl	405f9a <_Bfree>
  404432:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404434:	b113      	cbz	r3, 40443c <_strtod_l+0xb84>
  404436:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404438:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40443a:	6013      	str	r3, [r2, #0]
  40443c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40443e:	b11b      	cbz	r3, 404448 <_strtod_l+0xb90>
  404440:	4642      	mov	r2, r8
  404442:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  404446:	e007      	b.n	404458 <_strtod_l+0xba0>
  404448:	4642      	mov	r2, r8
  40444a:	464b      	mov	r3, r9
  40444c:	e004      	b.n	404458 <_strtod_l+0xba0>
  40444e:	2500      	movs	r5, #0
  404450:	462a      	mov	r2, r5
  404452:	2101      	movs	r1, #1
  404454:	f7ff bb41 	b.w	403ada <_strtod_l+0x222>
  404458:	4610      	mov	r0, r2
  40445a:	4619      	mov	r1, r3
  40445c:	b01f      	add	sp, #124	; 0x7c
  40445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404462:	bf00      	nop
  404464:	f3af 8000 	nop.w
  404468:	ffc00000 	.word	0xffc00000
  40446c:	41dfffff 	.word	0x41dfffff
  404470:	94a03595 	.word	0x94a03595
  404474:	3fdfffff 	.word	0x3fdfffff
  404478:	35afe535 	.word	0x35afe535
  40447c:	3fe00000 	.word	0x3fe00000
  404480:	94a03595 	.word	0x94a03595
  404484:	3fcfffff 	.word	0x3fcfffff
  404488:	3ff00000 	.word	0x3ff00000
  40448c:	3fe00000 	.word	0x3fe00000
  404490:	7fe00000 	.word	0x7fe00000
  404494:	7c9fffff 	.word	0x7c9fffff
  404498:	7fefffff 	.word	0x7fefffff
  40449c:	39500000 	.word	0x39500000

004044a0 <strtod>:
  4044a0:	4b06      	ldr	r3, [pc, #24]	; (4044bc <strtod+0x1c>)
  4044a2:	4a07      	ldr	r2, [pc, #28]	; (4044c0 <strtod+0x20>)
  4044a4:	b410      	push	{r4}
  4044a6:	681c      	ldr	r4, [r3, #0]
  4044a8:	6a23      	ldr	r3, [r4, #32]
  4044aa:	2b00      	cmp	r3, #0
  4044ac:	bf08      	it	eq
  4044ae:	4613      	moveq	r3, r2
  4044b0:	460a      	mov	r2, r1
  4044b2:	4601      	mov	r1, r0
  4044b4:	4620      	mov	r0, r4
  4044b6:	bc10      	pop	{r4}
  4044b8:	f7ff b9fe 	b.w	4038b8 <_strtod_l>
  4044bc:	20000078 	.word	0x20000078
  4044c0:	2000007c 	.word	0x2000007c

004044c4 <__strtok_r>:
  4044c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4044c6:	b948      	cbnz	r0, 4044dc <__strtok_r+0x18>
  4044c8:	6810      	ldr	r0, [r2, #0]
  4044ca:	b938      	cbnz	r0, 4044dc <__strtok_r+0x18>
  4044cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044ce:	f817 6b01 	ldrb.w	r6, [r7], #1
  4044d2:	b15e      	cbz	r6, 4044ec <__strtok_r+0x28>
  4044d4:	42b5      	cmp	r5, r6
  4044d6:	d1fa      	bne.n	4044ce <__strtok_r+0xa>
  4044d8:	b12b      	cbz	r3, 4044e6 <__strtok_r+0x22>
  4044da:	4620      	mov	r0, r4
  4044dc:	4604      	mov	r4, r0
  4044de:	460f      	mov	r7, r1
  4044e0:	f814 5b01 	ldrb.w	r5, [r4], #1
  4044e4:	e7f3      	b.n	4044ce <__strtok_r+0xa>
  4044e6:	6014      	str	r4, [r2, #0]
  4044e8:	7003      	strb	r3, [r0, #0]
  4044ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044ec:	b94d      	cbnz	r5, 404502 <__strtok_r+0x3e>
  4044ee:	6015      	str	r5, [r2, #0]
  4044f0:	4628      	mov	r0, r5
  4044f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4044f4:	f817 6b01 	ldrb.w	r6, [r7], #1
  4044f8:	42b5      	cmp	r5, r6
  4044fa:	d007      	beq.n	40450c <__strtok_r+0x48>
  4044fc:	2e00      	cmp	r6, #0
  4044fe:	d1f9      	bne.n	4044f4 <__strtok_r+0x30>
  404500:	461c      	mov	r4, r3
  404502:	4623      	mov	r3, r4
  404504:	460f      	mov	r7, r1
  404506:	f813 5b01 	ldrb.w	r5, [r3], #1
  40450a:	e7f3      	b.n	4044f4 <__strtok_r+0x30>
  40450c:	b115      	cbz	r5, 404514 <__strtok_r+0x50>
  40450e:	2100      	movs	r1, #0
  404510:	7021      	strb	r1, [r4, #0]
  404512:	e000      	b.n	404516 <__strtok_r+0x52>
  404514:	462b      	mov	r3, r5
  404516:	6013      	str	r3, [r2, #0]
  404518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040451a <strtok_r>:
  40451a:	2301      	movs	r3, #1
  40451c:	f7ff bfd2 	b.w	4044c4 <__strtok_r>

00404520 <_strtol_l.isra.0>:
  404520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404524:	4680      	mov	r8, r0
  404526:	4689      	mov	r9, r1
  404528:	4692      	mov	sl, r2
  40452a:	461e      	mov	r6, r3
  40452c:	460f      	mov	r7, r1
  40452e:	463d      	mov	r5, r7
  404530:	9808      	ldr	r0, [sp, #32]
  404532:	f815 4b01 	ldrb.w	r4, [r5], #1
  404536:	f001 fc19 	bl	405d6c <__locale_ctype_ptr_l>
  40453a:	4420      	add	r0, r4
  40453c:	7842      	ldrb	r2, [r0, #1]
  40453e:	f002 0208 	and.w	r2, r2, #8
  404542:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  404546:	b10a      	cbz	r2, 40454c <_strtol_l.isra.0+0x2c>
  404548:	462f      	mov	r7, r5
  40454a:	e7f0      	b.n	40452e <_strtol_l.isra.0+0xe>
  40454c:	2c2d      	cmp	r4, #45	; 0x2d
  40454e:	d103      	bne.n	404558 <_strtol_l.isra.0+0x38>
  404550:	1cbd      	adds	r5, r7, #2
  404552:	787c      	ldrb	r4, [r7, #1]
  404554:	2301      	movs	r3, #1
  404556:	e003      	b.n	404560 <_strtol_l.isra.0+0x40>
  404558:	2c2b      	cmp	r4, #43	; 0x2b
  40455a:	bf04      	itt	eq
  40455c:	787c      	ldrbeq	r4, [r7, #1]
  40455e:	1cbd      	addeq	r5, r7, #2
  404560:	b116      	cbz	r6, 404568 <_strtol_l.isra.0+0x48>
  404562:	2e10      	cmp	r6, #16
  404564:	d10a      	bne.n	40457c <_strtol_l.isra.0+0x5c>
  404566:	e05e      	b.n	404626 <_strtol_l.isra.0+0x106>
  404568:	2c30      	cmp	r4, #48	; 0x30
  40456a:	d15a      	bne.n	404622 <_strtol_l.isra.0+0x102>
  40456c:	782a      	ldrb	r2, [r5, #0]
  40456e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
  404572:	2a58      	cmp	r2, #88	; 0x58
  404574:	d150      	bne.n	404618 <_strtol_l.isra.0+0xf8>
  404576:	786c      	ldrb	r4, [r5, #1]
  404578:	2610      	movs	r6, #16
  40457a:	3502      	adds	r5, #2
  40457c:	2b00      	cmp	r3, #0
  40457e:	bf14      	ite	ne
  404580:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  404584:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
  404588:	fbb2 fef6 	udiv	lr, r2, r6
  40458c:	fb06 211e 	mls	r1, r6, lr, r2
  404590:	2200      	movs	r2, #0
  404592:	4610      	mov	r0, r2
  404594:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
  404598:	2f09      	cmp	r7, #9
  40459a:	d801      	bhi.n	4045a0 <_strtol_l.isra.0+0x80>
  40459c:	463c      	mov	r4, r7
  40459e:	e00a      	b.n	4045b6 <_strtol_l.isra.0+0x96>
  4045a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
  4045a4:	2f19      	cmp	r7, #25
  4045a6:	d801      	bhi.n	4045ac <_strtol_l.isra.0+0x8c>
  4045a8:	3c37      	subs	r4, #55	; 0x37
  4045aa:	e004      	b.n	4045b6 <_strtol_l.isra.0+0x96>
  4045ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
  4045b0:	2f19      	cmp	r7, #25
  4045b2:	d813      	bhi.n	4045dc <_strtol_l.isra.0+0xbc>
  4045b4:	3c57      	subs	r4, #87	; 0x57
  4045b6:	42a6      	cmp	r6, r4
  4045b8:	dd10      	ble.n	4045dc <_strtol_l.isra.0+0xbc>
  4045ba:	1c57      	adds	r7, r2, #1
  4045bc:	d00b      	beq.n	4045d6 <_strtol_l.isra.0+0xb6>
  4045be:	4586      	cmp	lr, r0
  4045c0:	d307      	bcc.n	4045d2 <_strtol_l.isra.0+0xb2>
  4045c2:	d101      	bne.n	4045c8 <_strtol_l.isra.0+0xa8>
  4045c4:	42a1      	cmp	r1, r4
  4045c6:	db03      	blt.n	4045d0 <_strtol_l.isra.0+0xb0>
  4045c8:	fb00 4006 	mla	r0, r0, r6, r4
  4045cc:	2201      	movs	r2, #1
  4045ce:	e002      	b.n	4045d6 <_strtol_l.isra.0+0xb6>
  4045d0:	4670      	mov	r0, lr
  4045d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4045d6:	f815 4b01 	ldrb.w	r4, [r5], #1
  4045da:	e7db      	b.n	404594 <_strtol_l.isra.0+0x74>
  4045dc:	1c51      	adds	r1, r2, #1
  4045de:	d10e      	bne.n	4045fe <_strtol_l.isra.0+0xde>
  4045e0:	2b00      	cmp	r3, #0
  4045e2:	f04f 0322 	mov.w	r3, #34	; 0x22
  4045e6:	bf14      	ite	ne
  4045e8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4045ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4045f0:	f8c8 3000 	str.w	r3, [r8]
  4045f4:	f1ba 0f00 	cmp.w	sl, #0
  4045f8:	d107      	bne.n	40460a <_strtol_l.isra.0+0xea>
  4045fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4045fe:	b103      	cbz	r3, 404602 <_strtol_l.isra.0+0xe2>
  404600:	4240      	negs	r0, r0
  404602:	f1ba 0f00 	cmp.w	sl, #0
  404606:	d011      	beq.n	40462c <_strtol_l.isra.0+0x10c>
  404608:	b10a      	cbz	r2, 40460e <_strtol_l.isra.0+0xee>
  40460a:	3d01      	subs	r5, #1
  40460c:	e000      	b.n	404610 <_strtol_l.isra.0+0xf0>
  40460e:	464d      	mov	r5, r9
  404610:	f8ca 5000 	str.w	r5, [sl]
  404614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404618:	2430      	movs	r4, #48	; 0x30
  40461a:	2e00      	cmp	r6, #0
  40461c:	d1ae      	bne.n	40457c <_strtol_l.isra.0+0x5c>
  40461e:	2608      	movs	r6, #8
  404620:	e7ac      	b.n	40457c <_strtol_l.isra.0+0x5c>
  404622:	260a      	movs	r6, #10
  404624:	e7aa      	b.n	40457c <_strtol_l.isra.0+0x5c>
  404626:	2c30      	cmp	r4, #48	; 0x30
  404628:	d0a0      	beq.n	40456c <_strtol_l.isra.0+0x4c>
  40462a:	e7a7      	b.n	40457c <_strtol_l.isra.0+0x5c>
  40462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404630 <strtol>:
  404630:	4b08      	ldr	r3, [pc, #32]	; (404654 <strtol+0x24>)
  404632:	b537      	push	{r0, r1, r2, r4, r5, lr}
  404634:	681c      	ldr	r4, [r3, #0]
  404636:	4d08      	ldr	r5, [pc, #32]	; (404658 <strtol+0x28>)
  404638:	6a23      	ldr	r3, [r4, #32]
  40463a:	2b00      	cmp	r3, #0
  40463c:	bf08      	it	eq
  40463e:	462b      	moveq	r3, r5
  404640:	9300      	str	r3, [sp, #0]
  404642:	4613      	mov	r3, r2
  404644:	460a      	mov	r2, r1
  404646:	4601      	mov	r1, r0
  404648:	4620      	mov	r0, r4
  40464a:	f7ff ff69 	bl	404520 <_strtol_l.isra.0>
  40464e:	b003      	add	sp, #12
  404650:	bd30      	pop	{r4, r5, pc}
  404652:	bf00      	nop
  404654:	20000078 	.word	0x20000078
  404658:	2000007c 	.word	0x2000007c

0040465c <__swbuf_r>:
  40465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40465e:	460f      	mov	r7, r1
  404660:	4614      	mov	r4, r2
  404662:	4605      	mov	r5, r0
  404664:	b118      	cbz	r0, 40466e <__swbuf_r+0x12>
  404666:	6983      	ldr	r3, [r0, #24]
  404668:	b90b      	cbnz	r3, 40466e <__swbuf_r+0x12>
  40466a:	f000 ffd7 	bl	40561c <__sinit>
  40466e:	4b22      	ldr	r3, [pc, #136]	; (4046f8 <__swbuf_r+0x9c>)
  404670:	429c      	cmp	r4, r3
  404672:	d101      	bne.n	404678 <__swbuf_r+0x1c>
  404674:	686c      	ldr	r4, [r5, #4]
  404676:	e008      	b.n	40468a <__swbuf_r+0x2e>
  404678:	4b20      	ldr	r3, [pc, #128]	; (4046fc <__swbuf_r+0xa0>)
  40467a:	429c      	cmp	r4, r3
  40467c:	d101      	bne.n	404682 <__swbuf_r+0x26>
  40467e:	68ac      	ldr	r4, [r5, #8]
  404680:	e003      	b.n	40468a <__swbuf_r+0x2e>
  404682:	4b1f      	ldr	r3, [pc, #124]	; (404700 <__swbuf_r+0xa4>)
  404684:	429c      	cmp	r4, r3
  404686:	bf08      	it	eq
  404688:	68ec      	ldreq	r4, [r5, #12]
  40468a:	69a3      	ldr	r3, [r4, #24]
  40468c:	60a3      	str	r3, [r4, #8]
  40468e:	89a3      	ldrh	r3, [r4, #12]
  404690:	071a      	lsls	r2, r3, #28
  404692:	d509      	bpl.n	4046a8 <__swbuf_r+0x4c>
  404694:	6923      	ldr	r3, [r4, #16]
  404696:	b13b      	cbz	r3, 4046a8 <__swbuf_r+0x4c>
  404698:	6823      	ldr	r3, [r4, #0]
  40469a:	6920      	ldr	r0, [r4, #16]
  40469c:	1a18      	subs	r0, r3, r0
  40469e:	6963      	ldr	r3, [r4, #20]
  4046a0:	4298      	cmp	r0, r3
  4046a2:	b2fe      	uxtb	r6, r7
  4046a4:	db0f      	blt.n	4046c6 <__swbuf_r+0x6a>
  4046a6:	e008      	b.n	4046ba <__swbuf_r+0x5e>
  4046a8:	4621      	mov	r1, r4
  4046aa:	4628      	mov	r0, r5
  4046ac:	f000 f82a 	bl	404704 <__swsetup_r>
  4046b0:	2800      	cmp	r0, #0
  4046b2:	d0f1      	beq.n	404698 <__swbuf_r+0x3c>
  4046b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  4046b8:	e01b      	b.n	4046f2 <__swbuf_r+0x96>
  4046ba:	4621      	mov	r1, r4
  4046bc:	4628      	mov	r0, r5
  4046be:	f000 ff43 	bl	405548 <_fflush_r>
  4046c2:	2800      	cmp	r0, #0
  4046c4:	d1f6      	bne.n	4046b4 <__swbuf_r+0x58>
  4046c6:	68a3      	ldr	r3, [r4, #8]
  4046c8:	3b01      	subs	r3, #1
  4046ca:	60a3      	str	r3, [r4, #8]
  4046cc:	6823      	ldr	r3, [r4, #0]
  4046ce:	1c5a      	adds	r2, r3, #1
  4046d0:	6022      	str	r2, [r4, #0]
  4046d2:	701f      	strb	r7, [r3, #0]
  4046d4:	6963      	ldr	r3, [r4, #20]
  4046d6:	3001      	adds	r0, #1
  4046d8:	4298      	cmp	r0, r3
  4046da:	d004      	beq.n	4046e6 <__swbuf_r+0x8a>
  4046dc:	89a3      	ldrh	r3, [r4, #12]
  4046de:	07db      	lsls	r3, r3, #31
  4046e0:	d507      	bpl.n	4046f2 <__swbuf_r+0x96>
  4046e2:	2e0a      	cmp	r6, #10
  4046e4:	d105      	bne.n	4046f2 <__swbuf_r+0x96>
  4046e6:	4621      	mov	r1, r4
  4046e8:	4628      	mov	r0, r5
  4046ea:	f000 ff2d 	bl	405548 <_fflush_r>
  4046ee:	2800      	cmp	r0, #0
  4046f0:	d1e0      	bne.n	4046b4 <__swbuf_r+0x58>
  4046f2:	4630      	mov	r0, r6
  4046f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4046f6:	bf00      	nop
  4046f8:	004081a8 	.word	0x004081a8
  4046fc:	004081c8 	.word	0x004081c8
  404700:	004081e8 	.word	0x004081e8

00404704 <__swsetup_r>:
  404704:	4b32      	ldr	r3, [pc, #200]	; (4047d0 <__swsetup_r+0xcc>)
  404706:	b570      	push	{r4, r5, r6, lr}
  404708:	681d      	ldr	r5, [r3, #0]
  40470a:	4606      	mov	r6, r0
  40470c:	460c      	mov	r4, r1
  40470e:	b125      	cbz	r5, 40471a <__swsetup_r+0x16>
  404710:	69ab      	ldr	r3, [r5, #24]
  404712:	b913      	cbnz	r3, 40471a <__swsetup_r+0x16>
  404714:	4628      	mov	r0, r5
  404716:	f000 ff81 	bl	40561c <__sinit>
  40471a:	4b2e      	ldr	r3, [pc, #184]	; (4047d4 <__swsetup_r+0xd0>)
  40471c:	429c      	cmp	r4, r3
  40471e:	d101      	bne.n	404724 <__swsetup_r+0x20>
  404720:	686c      	ldr	r4, [r5, #4]
  404722:	e008      	b.n	404736 <__swsetup_r+0x32>
  404724:	4b2c      	ldr	r3, [pc, #176]	; (4047d8 <__swsetup_r+0xd4>)
  404726:	429c      	cmp	r4, r3
  404728:	d101      	bne.n	40472e <__swsetup_r+0x2a>
  40472a:	68ac      	ldr	r4, [r5, #8]
  40472c:	e003      	b.n	404736 <__swsetup_r+0x32>
  40472e:	4b2b      	ldr	r3, [pc, #172]	; (4047dc <__swsetup_r+0xd8>)
  404730:	429c      	cmp	r4, r3
  404732:	bf08      	it	eq
  404734:	68ec      	ldreq	r4, [r5, #12]
  404736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40473a:	b29a      	uxth	r2, r3
  40473c:	0715      	lsls	r5, r2, #28
  40473e:	d41d      	bmi.n	40477c <__swsetup_r+0x78>
  404740:	06d0      	lsls	r0, r2, #27
  404742:	d402      	bmi.n	40474a <__swsetup_r+0x46>
  404744:	2209      	movs	r2, #9
  404746:	6032      	str	r2, [r6, #0]
  404748:	e03a      	b.n	4047c0 <__swsetup_r+0xbc>
  40474a:	0751      	lsls	r1, r2, #29
  40474c:	d512      	bpl.n	404774 <__swsetup_r+0x70>
  40474e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  404750:	b141      	cbz	r1, 404764 <__swsetup_r+0x60>
  404752:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404756:	4299      	cmp	r1, r3
  404758:	d002      	beq.n	404760 <__swsetup_r+0x5c>
  40475a:	4630      	mov	r0, r6
  40475c:	f001 ffe0 	bl	406720 <_free_r>
  404760:	2300      	movs	r3, #0
  404762:	6363      	str	r3, [r4, #52]	; 0x34
  404764:	89a3      	ldrh	r3, [r4, #12]
  404766:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  40476a:	81a3      	strh	r3, [r4, #12]
  40476c:	2300      	movs	r3, #0
  40476e:	6063      	str	r3, [r4, #4]
  404770:	6923      	ldr	r3, [r4, #16]
  404772:	6023      	str	r3, [r4, #0]
  404774:	89a3      	ldrh	r3, [r4, #12]
  404776:	f043 0308 	orr.w	r3, r3, #8
  40477a:	81a3      	strh	r3, [r4, #12]
  40477c:	6923      	ldr	r3, [r4, #16]
  40477e:	b94b      	cbnz	r3, 404794 <__swsetup_r+0x90>
  404780:	89a3      	ldrh	r3, [r4, #12]
  404782:	f403 7320 	and.w	r3, r3, #640	; 0x280
  404786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40478a:	d003      	beq.n	404794 <__swsetup_r+0x90>
  40478c:	4621      	mov	r1, r4
  40478e:	4630      	mov	r0, r6
  404790:	f001 fb24 	bl	405ddc <__smakebuf_r>
  404794:	89a2      	ldrh	r2, [r4, #12]
  404796:	f012 0301 	ands.w	r3, r2, #1
  40479a:	d005      	beq.n	4047a8 <__swsetup_r+0xa4>
  40479c:	2300      	movs	r3, #0
  40479e:	60a3      	str	r3, [r4, #8]
  4047a0:	6963      	ldr	r3, [r4, #20]
  4047a2:	425b      	negs	r3, r3
  4047a4:	61a3      	str	r3, [r4, #24]
  4047a6:	e003      	b.n	4047b0 <__swsetup_r+0xac>
  4047a8:	0792      	lsls	r2, r2, #30
  4047aa:	bf58      	it	pl
  4047ac:	6963      	ldrpl	r3, [r4, #20]
  4047ae:	60a3      	str	r3, [r4, #8]
  4047b0:	6923      	ldr	r3, [r4, #16]
  4047b2:	b95b      	cbnz	r3, 4047cc <__swsetup_r+0xc8>
  4047b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047b8:	f003 0080 	and.w	r0, r3, #128	; 0x80
  4047bc:	b280      	uxth	r0, r0
  4047be:	b130      	cbz	r0, 4047ce <__swsetup_r+0xca>
  4047c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047c4:	81a3      	strh	r3, [r4, #12]
  4047c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4047ca:	bd70      	pop	{r4, r5, r6, pc}
  4047cc:	2000      	movs	r0, #0
  4047ce:	bd70      	pop	{r4, r5, r6, pc}
  4047d0:	20000078 	.word	0x20000078
  4047d4:	004081a8 	.word	0x004081a8
  4047d8:	004081c8 	.word	0x004081c8
  4047dc:	004081e8 	.word	0x004081e8

004047e0 <quorem>:
  4047e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047e4:	6903      	ldr	r3, [r0, #16]
  4047e6:	690c      	ldr	r4, [r1, #16]
  4047e8:	429c      	cmp	r4, r3
  4047ea:	4680      	mov	r8, r0
  4047ec:	f300 8083 	bgt.w	4048f6 <quorem+0x116>
  4047f0:	3c01      	subs	r4, #1
  4047f2:	f101 0714 	add.w	r7, r1, #20
  4047f6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4047fa:	f100 0614 	add.w	r6, r0, #20
  4047fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  404802:	eb06 030e 	add.w	r3, r6, lr
  404806:	9301      	str	r3, [sp, #4]
  404808:	3501      	adds	r5, #1
  40480a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  40480e:	fbb3 f5f5 	udiv	r5, r3, r5
  404812:	eb07 090e 	add.w	r9, r7, lr
  404816:	2d00      	cmp	r5, #0
  404818:	d039      	beq.n	40488e <quorem+0xae>
  40481a:	f04f 0a00 	mov.w	sl, #0
  40481e:	4638      	mov	r0, r7
  404820:	46b4      	mov	ip, r6
  404822:	46d3      	mov	fp, sl
  404824:	f850 2b04 	ldr.w	r2, [r0], #4
  404828:	b293      	uxth	r3, r2
  40482a:	fb05 a303 	mla	r3, r5, r3, sl
  40482e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  404832:	b29b      	uxth	r3, r3
  404834:	ebc3 030b 	rsb	r3, r3, fp
  404838:	0c12      	lsrs	r2, r2, #16
  40483a:	f8bc b000 	ldrh.w	fp, [ip]
  40483e:	fb05 a202 	mla	r2, r5, r2, sl
  404842:	fa13 f38b 	uxtah	r3, r3, fp
  404846:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  40484a:	fa1f fb82 	uxth.w	fp, r2
  40484e:	f8dc 2000 	ldr.w	r2, [ip]
  404852:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  404856:	eb02 4223 	add.w	r2, r2, r3, asr #16
  40485a:	b29b      	uxth	r3, r3
  40485c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404860:	4581      	cmp	r9, r0
  404862:	ea4f 4b22 	mov.w	fp, r2, asr #16
  404866:	f84c 3b04 	str.w	r3, [ip], #4
  40486a:	d2db      	bcs.n	404824 <quorem+0x44>
  40486c:	f856 300e 	ldr.w	r3, [r6, lr]
  404870:	b96b      	cbnz	r3, 40488e <quorem+0xae>
  404872:	9b01      	ldr	r3, [sp, #4]
  404874:	3b04      	subs	r3, #4
  404876:	429e      	cmp	r6, r3
  404878:	461a      	mov	r2, r3
  40487a:	d302      	bcc.n	404882 <quorem+0xa2>
  40487c:	f8c8 4010 	str.w	r4, [r8, #16]
  404880:	e005      	b.n	40488e <quorem+0xae>
  404882:	6812      	ldr	r2, [r2, #0]
  404884:	3b04      	subs	r3, #4
  404886:	2a00      	cmp	r2, #0
  404888:	d1f8      	bne.n	40487c <quorem+0x9c>
  40488a:	3c01      	subs	r4, #1
  40488c:	e7f3      	b.n	404876 <quorem+0x96>
  40488e:	4640      	mov	r0, r8
  404890:	f001 fd99 	bl	4063c6 <__mcmp>
  404894:	2800      	cmp	r0, #0
  404896:	db2c      	blt.n	4048f2 <quorem+0x112>
  404898:	3501      	adds	r5, #1
  40489a:	4630      	mov	r0, r6
  40489c:	f04f 0e00 	mov.w	lr, #0
  4048a0:	f857 1b04 	ldr.w	r1, [r7], #4
  4048a4:	f8d0 c000 	ldr.w	ip, [r0]
  4048a8:	b28a      	uxth	r2, r1
  4048aa:	ebc2 030e 	rsb	r3, r2, lr
  4048ae:	0c09      	lsrs	r1, r1, #16
  4048b0:	fa13 f38c 	uxtah	r3, r3, ip
  4048b4:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  4048b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4048bc:	b29b      	uxth	r3, r3
  4048be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4048c2:	45b9      	cmp	r9, r7
  4048c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
  4048c8:	f840 3b04 	str.w	r3, [r0], #4
  4048cc:	d2e8      	bcs.n	4048a0 <quorem+0xc0>
  4048ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  4048d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  4048d6:	b962      	cbnz	r2, 4048f2 <quorem+0x112>
  4048d8:	3b04      	subs	r3, #4
  4048da:	429e      	cmp	r6, r3
  4048dc:	461a      	mov	r2, r3
  4048de:	d302      	bcc.n	4048e6 <quorem+0x106>
  4048e0:	f8c8 4010 	str.w	r4, [r8, #16]
  4048e4:	e005      	b.n	4048f2 <quorem+0x112>
  4048e6:	6812      	ldr	r2, [r2, #0]
  4048e8:	3b04      	subs	r3, #4
  4048ea:	2a00      	cmp	r2, #0
  4048ec:	d1f8      	bne.n	4048e0 <quorem+0x100>
  4048ee:	3c01      	subs	r4, #1
  4048f0:	e7f3      	b.n	4048da <quorem+0xfa>
  4048f2:	4628      	mov	r0, r5
  4048f4:	e000      	b.n	4048f8 <quorem+0x118>
  4048f6:	2000      	movs	r0, #0
  4048f8:	b003      	add	sp, #12
  4048fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00404900 <_dtoa_r>:
  404900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404904:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404906:	b095      	sub	sp, #84	; 0x54
  404908:	4682      	mov	sl, r0
  40490a:	9c21      	ldr	r4, [sp, #132]	; 0x84
  40490c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404910:	b945      	cbnz	r5, 404924 <_dtoa_r+0x24>
  404912:	2010      	movs	r0, #16
  404914:	f001 fa9e 	bl	405e54 <malloc>
  404918:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  40491c:	6045      	str	r5, [r0, #4]
  40491e:	6085      	str	r5, [r0, #8]
  404920:	6005      	str	r5, [r0, #0]
  404922:	60c5      	str	r5, [r0, #12]
  404924:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404928:	6819      	ldr	r1, [r3, #0]
  40492a:	b159      	cbz	r1, 404944 <_dtoa_r+0x44>
  40492c:	685a      	ldr	r2, [r3, #4]
  40492e:	604a      	str	r2, [r1, #4]
  404930:	2301      	movs	r3, #1
  404932:	4093      	lsls	r3, r2
  404934:	608b      	str	r3, [r1, #8]
  404936:	4650      	mov	r0, sl
  404938:	f001 fb2f 	bl	405f9a <_Bfree>
  40493c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404940:	2200      	movs	r2, #0
  404942:	601a      	str	r2, [r3, #0]
  404944:	9b03      	ldr	r3, [sp, #12]
  404946:	4aa0      	ldr	r2, [pc, #640]	; (404bc8 <_dtoa_r+0x2c8>)
  404948:	2b00      	cmp	r3, #0
  40494a:	bfbf      	itttt	lt
  40494c:	2301      	movlt	r3, #1
  40494e:	6023      	strlt	r3, [r4, #0]
  404950:	9b03      	ldrlt	r3, [sp, #12]
  404952:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  404956:	bfb8      	it	lt
  404958:	9303      	strlt	r3, [sp, #12]
  40495a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40495e:	bfa4      	itt	ge
  404960:	2300      	movge	r3, #0
  404962:	6023      	strge	r3, [r4, #0]
  404964:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  404968:	0d1b      	lsrs	r3, r3, #20
  40496a:	051b      	lsls	r3, r3, #20
  40496c:	4293      	cmp	r3, r2
  40496e:	d11d      	bne.n	4049ac <_dtoa_r+0xac>
  404970:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404972:	f242 730f 	movw	r3, #9999	; 0x270f
  404976:	6013      	str	r3, [r2, #0]
  404978:	9b02      	ldr	r3, [sp, #8]
  40497a:	b943      	cbnz	r3, 40498e <_dtoa_r+0x8e>
  40497c:	4a93      	ldr	r2, [pc, #588]	; (404bcc <_dtoa_r+0x2cc>)
  40497e:	4b94      	ldr	r3, [pc, #592]	; (404bd0 <_dtoa_r+0x2d0>)
  404980:	f3c8 0013 	ubfx	r0, r8, #0, #20
  404984:	2800      	cmp	r0, #0
  404986:	bf14      	ite	ne
  404988:	4618      	movne	r0, r3
  40498a:	4610      	moveq	r0, r2
  40498c:	e000      	b.n	404990 <_dtoa_r+0x90>
  40498e:	4890      	ldr	r0, [pc, #576]	; (404bd0 <_dtoa_r+0x2d0>)
  404990:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404992:	2b00      	cmp	r3, #0
  404994:	f000 854a 	beq.w	40542c <_dtoa_r+0xb2c>
  404998:	78c3      	ldrb	r3, [r0, #3]
  40499a:	b113      	cbz	r3, 4049a2 <_dtoa_r+0xa2>
  40499c:	f100 0308 	add.w	r3, r0, #8
  4049a0:	e000      	b.n	4049a4 <_dtoa_r+0xa4>
  4049a2:	1cc3      	adds	r3, r0, #3
  4049a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4049a6:	6013      	str	r3, [r2, #0]
  4049a8:	f000 bd40 	b.w	40542c <_dtoa_r+0xb2c>
  4049ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4049b0:	2200      	movs	r2, #0
  4049b2:	2300      	movs	r3, #0
  4049b4:	4620      	mov	r0, r4
  4049b6:	4629      	mov	r1, r5
  4049b8:	f002 fda2 	bl	407500 <__aeabi_dcmpeq>
  4049bc:	4607      	mov	r7, r0
  4049be:	b158      	cbz	r0, 4049d8 <_dtoa_r+0xd8>
  4049c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4049c2:	2301      	movs	r3, #1
  4049c4:	6013      	str	r3, [r2, #0]
  4049c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4049c8:	2b00      	cmp	r3, #0
  4049ca:	f000 8522 	beq.w	405412 <_dtoa_r+0xb12>
  4049ce:	4881      	ldr	r0, [pc, #516]	; (404bd4 <_dtoa_r+0x2d4>)
  4049d0:	6018      	str	r0, [r3, #0]
  4049d2:	3801      	subs	r0, #1
  4049d4:	f000 bd2a 	b.w	40542c <_dtoa_r+0xb2c>
  4049d8:	ab12      	add	r3, sp, #72	; 0x48
  4049da:	9301      	str	r3, [sp, #4]
  4049dc:	ab13      	add	r3, sp, #76	; 0x4c
  4049de:	9300      	str	r3, [sp, #0]
  4049e0:	4622      	mov	r2, r4
  4049e2:	462b      	mov	r3, r5
  4049e4:	4650      	mov	r0, sl
  4049e6:	f001 fdda 	bl	40659e <__d2b>
  4049ea:	f3c8 560a 	ubfx	r6, r8, #20, #11
  4049ee:	9004      	str	r0, [sp, #16]
  4049f0:	b156      	cbz	r6, 404a08 <_dtoa_r+0x108>
  4049f2:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4049f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4049fa:	4620      	mov	r0, r4
  4049fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404a00:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  404a04:	9711      	str	r7, [sp, #68]	; 0x44
  404a06:	e01d      	b.n	404a44 <_dtoa_r+0x144>
  404a08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a0a:	9e12      	ldr	r6, [sp, #72]	; 0x48
  404a0c:	441e      	add	r6, r3
  404a0e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404a12:	2b20      	cmp	r3, #32
  404a14:	dd0a      	ble.n	404a2c <_dtoa_r+0x12c>
  404a16:	9a02      	ldr	r2, [sp, #8]
  404a18:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404a1c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404a20:	fa22 f000 	lsr.w	r0, r2, r0
  404a24:	fa08 f303 	lsl.w	r3, r8, r3
  404a28:	4318      	orrs	r0, r3
  404a2a:	e004      	b.n	404a36 <_dtoa_r+0x136>
  404a2c:	f1c3 0020 	rsb	r0, r3, #32
  404a30:	9b02      	ldr	r3, [sp, #8]
  404a32:	fa03 f000 	lsl.w	r0, r3, r0
  404a36:	f002 fa85 	bl	406f44 <__aeabi_ui2d>
  404a3a:	2301      	movs	r3, #1
  404a3c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404a40:	3e01      	subs	r6, #1
  404a42:	9311      	str	r3, [sp, #68]	; 0x44
  404a44:	2200      	movs	r2, #0
  404a46:	4b64      	ldr	r3, [pc, #400]	; (404bd8 <_dtoa_r+0x2d8>)
  404a48:	f002 f93e 	bl	406cc8 <__aeabi_dsub>
  404a4c:	a358      	add	r3, pc, #352	; (adr r3, 404bb0 <_dtoa_r+0x2b0>)
  404a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a52:	f002 faed 	bl	407030 <__aeabi_dmul>
  404a56:	a358      	add	r3, pc, #352	; (adr r3, 404bb8 <_dtoa_r+0x2b8>)
  404a58:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a5c:	f002 f936 	bl	406ccc <__adddf3>
  404a60:	4604      	mov	r4, r0
  404a62:	4630      	mov	r0, r6
  404a64:	460d      	mov	r5, r1
  404a66:	f002 fa7d 	bl	406f64 <__aeabi_i2d>
  404a6a:	a355      	add	r3, pc, #340	; (adr r3, 404bc0 <_dtoa_r+0x2c0>)
  404a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a70:	f002 fade 	bl	407030 <__aeabi_dmul>
  404a74:	4602      	mov	r2, r0
  404a76:	460b      	mov	r3, r1
  404a78:	4620      	mov	r0, r4
  404a7a:	4629      	mov	r1, r5
  404a7c:	f002 f926 	bl	406ccc <__adddf3>
  404a80:	4604      	mov	r4, r0
  404a82:	460d      	mov	r5, r1
  404a84:	f002 fd84 	bl	407590 <__aeabi_d2iz>
  404a88:	2200      	movs	r2, #0
  404a8a:	4683      	mov	fp, r0
  404a8c:	2300      	movs	r3, #0
  404a8e:	4620      	mov	r0, r4
  404a90:	4629      	mov	r1, r5
  404a92:	f002 fd3f 	bl	407514 <__aeabi_dcmplt>
  404a96:	b158      	cbz	r0, 404ab0 <_dtoa_r+0x1b0>
  404a98:	4658      	mov	r0, fp
  404a9a:	f002 fa63 	bl	406f64 <__aeabi_i2d>
  404a9e:	4602      	mov	r2, r0
  404aa0:	460b      	mov	r3, r1
  404aa2:	4620      	mov	r0, r4
  404aa4:	4629      	mov	r1, r5
  404aa6:	f002 fd2b 	bl	407500 <__aeabi_dcmpeq>
  404aaa:	b908      	cbnz	r0, 404ab0 <_dtoa_r+0x1b0>
  404aac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404ab0:	f1bb 0f16 	cmp.w	fp, #22
  404ab4:	d80d      	bhi.n	404ad2 <_dtoa_r+0x1d2>
  404ab6:	4949      	ldr	r1, [pc, #292]	; (404bdc <_dtoa_r+0x2dc>)
  404ab8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  404abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
  404ac4:	f002 fd44 	bl	407550 <__aeabi_dcmpgt>
  404ac8:	b130      	cbz	r0, 404ad8 <_dtoa_r+0x1d8>
  404aca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404ace:	2300      	movs	r3, #0
  404ad0:	e000      	b.n	404ad4 <_dtoa_r+0x1d4>
  404ad2:	2301      	movs	r3, #1
  404ad4:	9310      	str	r3, [sp, #64]	; 0x40
  404ad6:	e000      	b.n	404ada <_dtoa_r+0x1da>
  404ad8:	9010      	str	r0, [sp, #64]	; 0x40
  404ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404adc:	1b9e      	subs	r6, r3, r6
  404ade:	1e73      	subs	r3, r6, #1
  404ae0:	9307      	str	r3, [sp, #28]
  404ae2:	bf43      	ittte	mi
  404ae4:	f1c3 0800 	rsbmi	r8, r3, #0
  404ae8:	2300      	movmi	r3, #0
  404aea:	9307      	strmi	r3, [sp, #28]
  404aec:	f04f 0800 	movpl.w	r8, #0
  404af0:	f1bb 0f00 	cmp.w	fp, #0
  404af4:	db06      	blt.n	404b04 <_dtoa_r+0x204>
  404af6:	9b07      	ldr	r3, [sp, #28]
  404af8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  404afc:	445b      	add	r3, fp
  404afe:	9307      	str	r3, [sp, #28]
  404b00:	2700      	movs	r7, #0
  404b02:	e005      	b.n	404b10 <_dtoa_r+0x210>
  404b04:	2300      	movs	r3, #0
  404b06:	ebcb 0808 	rsb	r8, fp, r8
  404b0a:	f1cb 0700 	rsb	r7, fp, #0
  404b0e:	930b      	str	r3, [sp, #44]	; 0x2c
  404b10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b12:	2b09      	cmp	r3, #9
  404b14:	d827      	bhi.n	404b66 <_dtoa_r+0x266>
  404b16:	2b05      	cmp	r3, #5
  404b18:	bfc4      	itt	gt
  404b1a:	3b04      	subgt	r3, #4
  404b1c:	931e      	strgt	r3, [sp, #120]	; 0x78
  404b1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b20:	f1a3 0302 	sub.w	r3, r3, #2
  404b24:	bfcc      	ite	gt
  404b26:	2500      	movgt	r5, #0
  404b28:	2501      	movle	r5, #1
  404b2a:	2b03      	cmp	r3, #3
  404b2c:	d820      	bhi.n	404b70 <_dtoa_r+0x270>
  404b2e:	e8df f003 	tbb	[pc, r3]
  404b32:	0e06      	.short	0x0e06
  404b34:	0402      	.short	0x0402
  404b36:	2301      	movs	r3, #1
  404b38:	e002      	b.n	404b40 <_dtoa_r+0x240>
  404b3a:	2301      	movs	r3, #1
  404b3c:	e008      	b.n	404b50 <_dtoa_r+0x250>
  404b3e:	2300      	movs	r3, #0
  404b40:	930a      	str	r3, [sp, #40]	; 0x28
  404b42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404b44:	2b00      	cmp	r3, #0
  404b46:	dd1d      	ble.n	404b84 <_dtoa_r+0x284>
  404b48:	4699      	mov	r9, r3
  404b4a:	9305      	str	r3, [sp, #20]
  404b4c:	e021      	b.n	404b92 <_dtoa_r+0x292>
  404b4e:	2300      	movs	r3, #0
  404b50:	930a      	str	r3, [sp, #40]	; 0x28
  404b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404b54:	eb0b 0903 	add.w	r9, fp, r3
  404b58:	f109 0301 	add.w	r3, r9, #1
  404b5c:	2b01      	cmp	r3, #1
  404b5e:	9305      	str	r3, [sp, #20]
  404b60:	bfb8      	it	lt
  404b62:	2301      	movlt	r3, #1
  404b64:	e015      	b.n	404b92 <_dtoa_r+0x292>
  404b66:	2501      	movs	r5, #1
  404b68:	2300      	movs	r3, #0
  404b6a:	931e      	str	r3, [sp, #120]	; 0x78
  404b6c:	950a      	str	r5, [sp, #40]	; 0x28
  404b6e:	e001      	b.n	404b74 <_dtoa_r+0x274>
  404b70:	2301      	movs	r3, #1
  404b72:	930a      	str	r3, [sp, #40]	; 0x28
  404b74:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  404b78:	2200      	movs	r2, #0
  404b7a:	f8cd 9014 	str.w	r9, [sp, #20]
  404b7e:	2312      	movs	r3, #18
  404b80:	921f      	str	r2, [sp, #124]	; 0x7c
  404b82:	e006      	b.n	404b92 <_dtoa_r+0x292>
  404b84:	f04f 0901 	mov.w	r9, #1
  404b88:	f8cd 9014 	str.w	r9, [sp, #20]
  404b8c:	464b      	mov	r3, r9
  404b8e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  404b92:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  404b96:	2200      	movs	r2, #0
  404b98:	6062      	str	r2, [r4, #4]
  404b9a:	2104      	movs	r1, #4
  404b9c:	f101 0214 	add.w	r2, r1, #20
  404ba0:	429a      	cmp	r2, r3
  404ba2:	d81d      	bhi.n	404be0 <_dtoa_r+0x2e0>
  404ba4:	6862      	ldr	r2, [r4, #4]
  404ba6:	3201      	adds	r2, #1
  404ba8:	6062      	str	r2, [r4, #4]
  404baa:	0049      	lsls	r1, r1, #1
  404bac:	e7f6      	b.n	404b9c <_dtoa_r+0x29c>
  404bae:	bf00      	nop
  404bb0:	636f4361 	.word	0x636f4361
  404bb4:	3fd287a7 	.word	0x3fd287a7
  404bb8:	8b60c8b3 	.word	0x8b60c8b3
  404bbc:	3fc68a28 	.word	0x3fc68a28
  404bc0:	509f79fb 	.word	0x509f79fb
  404bc4:	3fd34413 	.word	0x3fd34413
  404bc8:	7ff00000 	.word	0x7ff00000
  404bcc:	00408198 	.word	0x00408198
  404bd0:	004081a1 	.word	0x004081a1
  404bd4:	00408125 	.word	0x00408125
  404bd8:	3ff80000 	.word	0x3ff80000
  404bdc:	00408218 	.word	0x00408218
  404be0:	6861      	ldr	r1, [r4, #4]
  404be2:	4650      	mov	r0, sl
  404be4:	f001 f9a4 	bl	405f30 <_Balloc>
  404be8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404bec:	6020      	str	r0, [r4, #0]
  404bee:	681b      	ldr	r3, [r3, #0]
  404bf0:	9306      	str	r3, [sp, #24]
  404bf2:	9b05      	ldr	r3, [sp, #20]
  404bf4:	2b0e      	cmp	r3, #14
  404bf6:	f200 815d 	bhi.w	404eb4 <_dtoa_r+0x5b4>
  404bfa:	2d00      	cmp	r5, #0
  404bfc:	f000 815a 	beq.w	404eb4 <_dtoa_r+0x5b4>
  404c00:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  404c04:	f1bb 0f00 	cmp.w	fp, #0
  404c08:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  404c0c:	dd31      	ble.n	404c72 <_dtoa_r+0x372>
  404c0e:	4aa0      	ldr	r2, [pc, #640]	; (404e90 <_dtoa_r+0x590>)
  404c10:	f00b 030f 	and.w	r3, fp, #15
  404c14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404c18:	e9d3 3400 	ldrd	r3, r4, [r3]
  404c1c:	ea4f 152b 	mov.w	r5, fp, asr #4
  404c20:	06e8      	lsls	r0, r5, #27
  404c22:	e9cd 3408 	strd	r3, r4, [sp, #32]
  404c26:	d50c      	bpl.n	404c42 <_dtoa_r+0x342>
  404c28:	4b9a      	ldr	r3, [pc, #616]	; (404e94 <_dtoa_r+0x594>)
  404c2a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404c2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404c32:	f002 fb27 	bl	407284 <__aeabi_ddiv>
  404c36:	f005 050f 	and.w	r5, r5, #15
  404c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404c3e:	2403      	movs	r4, #3
  404c40:	e000      	b.n	404c44 <_dtoa_r+0x344>
  404c42:	2402      	movs	r4, #2
  404c44:	4e93      	ldr	r6, [pc, #588]	; (404e94 <_dtoa_r+0x594>)
  404c46:	b16d      	cbz	r5, 404c64 <_dtoa_r+0x364>
  404c48:	07e9      	lsls	r1, r5, #31
  404c4a:	d508      	bpl.n	404c5e <_dtoa_r+0x35e>
  404c4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404c50:	e9d6 2300 	ldrd	r2, r3, [r6]
  404c54:	f002 f9ec 	bl	407030 <__aeabi_dmul>
  404c58:	e9cd 0108 	strd	r0, r1, [sp, #32]
  404c5c:	3401      	adds	r4, #1
  404c5e:	106d      	asrs	r5, r5, #1
  404c60:	3608      	adds	r6, #8
  404c62:	e7f0      	b.n	404c46 <_dtoa_r+0x346>
  404c64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  404c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c6c:	f002 fb0a 	bl	407284 <__aeabi_ddiv>
  404c70:	e020      	b.n	404cb4 <_dtoa_r+0x3b4>
  404c72:	f1cb 0500 	rsb	r5, fp, #0
  404c76:	b305      	cbz	r5, 404cba <_dtoa_r+0x3ba>
  404c78:	4b85      	ldr	r3, [pc, #532]	; (404e90 <_dtoa_r+0x590>)
  404c7a:	4e86      	ldr	r6, [pc, #536]	; (404e94 <_dtoa_r+0x594>)
  404c7c:	f005 020f 	and.w	r2, r5, #15
  404c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404c84:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404c8c:	f002 f9d0 	bl	407030 <__aeabi_dmul>
  404c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404c94:	112d      	asrs	r5, r5, #4
  404c96:	2300      	movs	r3, #0
  404c98:	2402      	movs	r4, #2
  404c9a:	b155      	cbz	r5, 404cb2 <_dtoa_r+0x3b2>
  404c9c:	07ea      	lsls	r2, r5, #31
  404c9e:	d505      	bpl.n	404cac <_dtoa_r+0x3ac>
  404ca0:	e9d6 2300 	ldrd	r2, r3, [r6]
  404ca4:	f002 f9c4 	bl	407030 <__aeabi_dmul>
  404ca8:	3401      	adds	r4, #1
  404caa:	2301      	movs	r3, #1
  404cac:	106d      	asrs	r5, r5, #1
  404cae:	3608      	adds	r6, #8
  404cb0:	e7f3      	b.n	404c9a <_dtoa_r+0x39a>
  404cb2:	b11b      	cbz	r3, 404cbc <_dtoa_r+0x3bc>
  404cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404cb8:	e000      	b.n	404cbc <_dtoa_r+0x3bc>
  404cba:	2402      	movs	r4, #2
  404cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404cbe:	b1e3      	cbz	r3, 404cfa <_dtoa_r+0x3fa>
  404cc0:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  404cc4:	2200      	movs	r2, #0
  404cc6:	4b74      	ldr	r3, [pc, #464]	; (404e98 <_dtoa_r+0x598>)
  404cc8:	4628      	mov	r0, r5
  404cca:	4631      	mov	r1, r6
  404ccc:	f002 fc22 	bl	407514 <__aeabi_dcmplt>
  404cd0:	b198      	cbz	r0, 404cfa <_dtoa_r+0x3fa>
  404cd2:	9b05      	ldr	r3, [sp, #20]
  404cd4:	b18b      	cbz	r3, 404cfa <_dtoa_r+0x3fa>
  404cd6:	f1b9 0f00 	cmp.w	r9, #0
  404cda:	f340 80e7 	ble.w	404eac <_dtoa_r+0x5ac>
  404cde:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  404ce2:	9308      	str	r3, [sp, #32]
  404ce4:	4631      	mov	r1, r6
  404ce6:	2200      	movs	r2, #0
  404ce8:	4b6c      	ldr	r3, [pc, #432]	; (404e9c <_dtoa_r+0x59c>)
  404cea:	4628      	mov	r0, r5
  404cec:	f002 f9a0 	bl	407030 <__aeabi_dmul>
  404cf0:	3401      	adds	r4, #1
  404cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404cf6:	464e      	mov	r6, r9
  404cf8:	e002      	b.n	404d00 <_dtoa_r+0x400>
  404cfa:	9e05      	ldr	r6, [sp, #20]
  404cfc:	f8cd b020 	str.w	fp, [sp, #32]
  404d00:	4620      	mov	r0, r4
  404d02:	f002 f92f 	bl	406f64 <__aeabi_i2d>
  404d06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404d0a:	f002 f991 	bl	407030 <__aeabi_dmul>
  404d0e:	4b64      	ldr	r3, [pc, #400]	; (404ea0 <_dtoa_r+0x5a0>)
  404d10:	2200      	movs	r2, #0
  404d12:	f001 ffdb 	bl	406ccc <__adddf3>
  404d16:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  404d1a:	4604      	mov	r4, r0
  404d1c:	930c      	str	r3, [sp, #48]	; 0x30
  404d1e:	461d      	mov	r5, r3
  404d20:	b9d6      	cbnz	r6, 404d58 <_dtoa_r+0x458>
  404d22:	2200      	movs	r2, #0
  404d24:	4b5f      	ldr	r3, [pc, #380]	; (404ea4 <_dtoa_r+0x5a4>)
  404d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d2a:	f001 ffcd 	bl	406cc8 <__aeabi_dsub>
  404d2e:	4622      	mov	r2, r4
  404d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d36:	f002 fc0b 	bl	407550 <__aeabi_dcmpgt>
  404d3a:	2800      	cmp	r0, #0
  404d3c:	f040 8240 	bne.w	4051c0 <_dtoa_r+0x8c0>
  404d40:	990c      	ldr	r1, [sp, #48]	; 0x30
  404d42:	4622      	mov	r2, r4
  404d44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  404d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d4c:	f002 fbe2 	bl	407514 <__aeabi_dcmplt>
  404d50:	2800      	cmp	r0, #0
  404d52:	f040 822c 	bne.w	4051ae <_dtoa_r+0x8ae>
  404d56:	e0a9      	b.n	404eac <_dtoa_r+0x5ac>
  404d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404d5a:	4b4d      	ldr	r3, [pc, #308]	; (404e90 <_dtoa_r+0x590>)
  404d5c:	1e71      	subs	r1, r6, #1
  404d5e:	2a00      	cmp	r2, #0
  404d60:	d049      	beq.n	404df6 <_dtoa_r+0x4f6>
  404d62:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404d66:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d6a:	2000      	movs	r0, #0
  404d6c:	494e      	ldr	r1, [pc, #312]	; (404ea8 <_dtoa_r+0x5a8>)
  404d6e:	f002 fa89 	bl	407284 <__aeabi_ddiv>
  404d72:	4622      	mov	r2, r4
  404d74:	462b      	mov	r3, r5
  404d76:	f001 ffa7 	bl	406cc8 <__aeabi_dsub>
  404d7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404d7e:	9c06      	ldr	r4, [sp, #24]
  404d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d84:	f002 fc04 	bl	407590 <__aeabi_d2iz>
  404d88:	4605      	mov	r5, r0
  404d8a:	f002 f8eb 	bl	406f64 <__aeabi_i2d>
  404d8e:	4602      	mov	r2, r0
  404d90:	460b      	mov	r3, r1
  404d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d96:	f001 ff97 	bl	406cc8 <__aeabi_dsub>
  404d9a:	3530      	adds	r5, #48	; 0x30
  404d9c:	f804 5b01 	strb.w	r5, [r4], #1
  404da0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404da8:	f002 fbb4 	bl	407514 <__aeabi_dcmplt>
  404dac:	2800      	cmp	r0, #0
  404dae:	f040 8320 	bne.w	4053f2 <_dtoa_r+0xaf2>
  404db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404db6:	2000      	movs	r0, #0
  404db8:	4937      	ldr	r1, [pc, #220]	; (404e98 <_dtoa_r+0x598>)
  404dba:	f001 ff85 	bl	406cc8 <__aeabi_dsub>
  404dbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404dc2:	f002 fba7 	bl	407514 <__aeabi_dcmplt>
  404dc6:	2800      	cmp	r0, #0
  404dc8:	f040 80d2 	bne.w	404f70 <_dtoa_r+0x670>
  404dcc:	9b06      	ldr	r3, [sp, #24]
  404dce:	1ae3      	subs	r3, r4, r3
  404dd0:	42b3      	cmp	r3, r6
  404dd2:	da6b      	bge.n	404eac <_dtoa_r+0x5ac>
  404dd4:	2200      	movs	r2, #0
  404dd6:	4b31      	ldr	r3, [pc, #196]	; (404e9c <_dtoa_r+0x59c>)
  404dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404ddc:	f002 f928 	bl	407030 <__aeabi_dmul>
  404de0:	2200      	movs	r2, #0
  404de2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404de6:	4b2d      	ldr	r3, [pc, #180]	; (404e9c <_dtoa_r+0x59c>)
  404de8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404dec:	f002 f920 	bl	407030 <__aeabi_dmul>
  404df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404df4:	e7c4      	b.n	404d80 <_dtoa_r+0x480>
  404df6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404dfa:	4622      	mov	r2, r4
  404dfc:	462b      	mov	r3, r5
  404dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
  404e02:	f002 f915 	bl	407030 <__aeabi_dmul>
  404e06:	9b06      	ldr	r3, [sp, #24]
  404e08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e0c:	199c      	adds	r4, r3, r6
  404e0e:	461d      	mov	r5, r3
  404e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e14:	f002 fbbc 	bl	407590 <__aeabi_d2iz>
  404e18:	4606      	mov	r6, r0
  404e1a:	f002 f8a3 	bl	406f64 <__aeabi_i2d>
  404e1e:	3630      	adds	r6, #48	; 0x30
  404e20:	4602      	mov	r2, r0
  404e22:	460b      	mov	r3, r1
  404e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e28:	f001 ff4e 	bl	406cc8 <__aeabi_dsub>
  404e2c:	f805 6b01 	strb.w	r6, [r5], #1
  404e30:	42ac      	cmp	r4, r5
  404e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e36:	f04f 0200 	mov.w	r2, #0
  404e3a:	d123      	bne.n	404e84 <_dtoa_r+0x584>
  404e3c:	4b1a      	ldr	r3, [pc, #104]	; (404ea8 <_dtoa_r+0x5a8>)
  404e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404e42:	f001 ff43 	bl	406ccc <__adddf3>
  404e46:	4602      	mov	r2, r0
  404e48:	460b      	mov	r3, r1
  404e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e4e:	f002 fb7f 	bl	407550 <__aeabi_dcmpgt>
  404e52:	2800      	cmp	r0, #0
  404e54:	f040 808c 	bne.w	404f70 <_dtoa_r+0x670>
  404e58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e5c:	2000      	movs	r0, #0
  404e5e:	4912      	ldr	r1, [pc, #72]	; (404ea8 <_dtoa_r+0x5a8>)
  404e60:	f001 ff32 	bl	406cc8 <__aeabi_dsub>
  404e64:	4602      	mov	r2, r0
  404e66:	460b      	mov	r3, r1
  404e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e6c:	f002 fb52 	bl	407514 <__aeabi_dcmplt>
  404e70:	b1e0      	cbz	r0, 404eac <_dtoa_r+0x5ac>
  404e72:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  404e76:	2b30      	cmp	r3, #48	; 0x30
  404e78:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  404e7c:	f040 82b9 	bne.w	4053f2 <_dtoa_r+0xaf2>
  404e80:	4614      	mov	r4, r2
  404e82:	e7f6      	b.n	404e72 <_dtoa_r+0x572>
  404e84:	4b05      	ldr	r3, [pc, #20]	; (404e9c <_dtoa_r+0x59c>)
  404e86:	f002 f8d3 	bl	407030 <__aeabi_dmul>
  404e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e8e:	e7bf      	b.n	404e10 <_dtoa_r+0x510>
  404e90:	00408218 	.word	0x00408218
  404e94:	004082e0 	.word	0x004082e0
  404e98:	3ff00000 	.word	0x3ff00000
  404e9c:	40240000 	.word	0x40240000
  404ea0:	401c0000 	.word	0x401c0000
  404ea4:	40140000 	.word	0x40140000
  404ea8:	3fe00000 	.word	0x3fe00000
  404eac:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  404eb0:	e9cd 3402 	strd	r3, r4, [sp, #8]
  404eb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404eb6:	2b00      	cmp	r3, #0
  404eb8:	db7d      	blt.n	404fb6 <_dtoa_r+0x6b6>
  404eba:	f1bb 0f0e 	cmp.w	fp, #14
  404ebe:	dc7a      	bgt.n	404fb6 <_dtoa_r+0x6b6>
  404ec0:	4bab      	ldr	r3, [pc, #684]	; (405170 <_dtoa_r+0x870>)
  404ec2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404ec6:	e9d3 6700 	ldrd	r6, r7, [r3]
  404eca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404ecc:	2b00      	cmp	r3, #0
  404ece:	da14      	bge.n	404efa <_dtoa_r+0x5fa>
  404ed0:	9b05      	ldr	r3, [sp, #20]
  404ed2:	2b00      	cmp	r3, #0
  404ed4:	dc11      	bgt.n	404efa <_dtoa_r+0x5fa>
  404ed6:	f040 816c 	bne.w	4051b2 <_dtoa_r+0x8b2>
  404eda:	2200      	movs	r2, #0
  404edc:	4ba5      	ldr	r3, [pc, #660]	; (405174 <_dtoa_r+0x874>)
  404ede:	4630      	mov	r0, r6
  404ee0:	4639      	mov	r1, r7
  404ee2:	f002 f8a5 	bl	407030 <__aeabi_dmul>
  404ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404eea:	f002 fb27 	bl	40753c <__aeabi_dcmpge>
  404eee:	9d05      	ldr	r5, [sp, #20]
  404ef0:	462e      	mov	r6, r5
  404ef2:	2800      	cmp	r0, #0
  404ef4:	f040 815f 	bne.w	4051b6 <_dtoa_r+0x8b6>
  404ef8:	e165      	b.n	4051c6 <_dtoa_r+0x8c6>
  404efa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  404efe:	9c06      	ldr	r4, [sp, #24]
  404f00:	4632      	mov	r2, r6
  404f02:	463b      	mov	r3, r7
  404f04:	4640      	mov	r0, r8
  404f06:	4649      	mov	r1, r9
  404f08:	f002 f9bc 	bl	407284 <__aeabi_ddiv>
  404f0c:	f002 fb40 	bl	407590 <__aeabi_d2iz>
  404f10:	4605      	mov	r5, r0
  404f12:	f002 f827 	bl	406f64 <__aeabi_i2d>
  404f16:	4632      	mov	r2, r6
  404f18:	463b      	mov	r3, r7
  404f1a:	f002 f889 	bl	407030 <__aeabi_dmul>
  404f1e:	460b      	mov	r3, r1
  404f20:	4602      	mov	r2, r0
  404f22:	4649      	mov	r1, r9
  404f24:	4640      	mov	r0, r8
  404f26:	f001 fecf 	bl	406cc8 <__aeabi_dsub>
  404f2a:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  404f2e:	9b06      	ldr	r3, [sp, #24]
  404f30:	f804 eb01 	strb.w	lr, [r4], #1
  404f34:	ebc3 0e04 	rsb	lr, r3, r4
  404f38:	9b05      	ldr	r3, [sp, #20]
  404f3a:	4573      	cmp	r3, lr
  404f3c:	d12e      	bne.n	404f9c <_dtoa_r+0x69c>
  404f3e:	4602      	mov	r2, r0
  404f40:	460b      	mov	r3, r1
  404f42:	f001 fec3 	bl	406ccc <__adddf3>
  404f46:	4680      	mov	r8, r0
  404f48:	4689      	mov	r9, r1
  404f4a:	4602      	mov	r2, r0
  404f4c:	460b      	mov	r3, r1
  404f4e:	4630      	mov	r0, r6
  404f50:	4639      	mov	r1, r7
  404f52:	f002 fadf 	bl	407514 <__aeabi_dcmplt>
  404f56:	b978      	cbnz	r0, 404f78 <_dtoa_r+0x678>
  404f58:	4642      	mov	r2, r8
  404f5a:	464b      	mov	r3, r9
  404f5c:	4630      	mov	r0, r6
  404f5e:	4639      	mov	r1, r7
  404f60:	f002 face 	bl	407500 <__aeabi_dcmpeq>
  404f64:	2800      	cmp	r0, #0
  404f66:	f000 8246 	beq.w	4053f6 <_dtoa_r+0xaf6>
  404f6a:	07eb      	lsls	r3, r5, #31
  404f6c:	d404      	bmi.n	404f78 <_dtoa_r+0x678>
  404f6e:	e242      	b.n	4053f6 <_dtoa_r+0xaf6>
  404f70:	f8dd b020 	ldr.w	fp, [sp, #32]
  404f74:	e000      	b.n	404f78 <_dtoa_r+0x678>
  404f76:	461c      	mov	r4, r3
  404f78:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  404f7c:	2a39      	cmp	r2, #57	; 0x39
  404f7e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  404f82:	d107      	bne.n	404f94 <_dtoa_r+0x694>
  404f84:	9a06      	ldr	r2, [sp, #24]
  404f86:	429a      	cmp	r2, r3
  404f88:	d1f5      	bne.n	404f76 <_dtoa_r+0x676>
  404f8a:	9906      	ldr	r1, [sp, #24]
  404f8c:	2230      	movs	r2, #48	; 0x30
  404f8e:	f10b 0b01 	add.w	fp, fp, #1
  404f92:	700a      	strb	r2, [r1, #0]
  404f94:	781a      	ldrb	r2, [r3, #0]
  404f96:	3201      	adds	r2, #1
  404f98:	701a      	strb	r2, [r3, #0]
  404f9a:	e22c      	b.n	4053f6 <_dtoa_r+0xaf6>
  404f9c:	2200      	movs	r2, #0
  404f9e:	4b76      	ldr	r3, [pc, #472]	; (405178 <_dtoa_r+0x878>)
  404fa0:	f002 f846 	bl	407030 <__aeabi_dmul>
  404fa4:	2200      	movs	r2, #0
  404fa6:	2300      	movs	r3, #0
  404fa8:	4680      	mov	r8, r0
  404faa:	4689      	mov	r9, r1
  404fac:	f002 faa8 	bl	407500 <__aeabi_dcmpeq>
  404fb0:	2800      	cmp	r0, #0
  404fb2:	d0a5      	beq.n	404f00 <_dtoa_r+0x600>
  404fb4:	e21f      	b.n	4053f6 <_dtoa_r+0xaf6>
  404fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404fb8:	2a00      	cmp	r2, #0
  404fba:	d02b      	beq.n	405014 <_dtoa_r+0x714>
  404fbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  404fbe:	2a01      	cmp	r2, #1
  404fc0:	dc0a      	bgt.n	404fd8 <_dtoa_r+0x6d8>
  404fc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fc4:	b112      	cbz	r2, 404fcc <_dtoa_r+0x6cc>
  404fc6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404fca:	e002      	b.n	404fd2 <_dtoa_r+0x6d2>
  404fcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404fce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404fd2:	463d      	mov	r5, r7
  404fd4:	4644      	mov	r4, r8
  404fd6:	e013      	b.n	405000 <_dtoa_r+0x700>
  404fd8:	9b05      	ldr	r3, [sp, #20]
  404fda:	1e5d      	subs	r5, r3, #1
  404fdc:	42af      	cmp	r7, r5
  404fde:	bfbf      	itttt	lt
  404fe0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  404fe2:	1bea      	sublt	r2, r5, r7
  404fe4:	189b      	addlt	r3, r3, r2
  404fe6:	930b      	strlt	r3, [sp, #44]	; 0x2c
  404fe8:	9b05      	ldr	r3, [sp, #20]
  404fea:	bfb6      	itet	lt
  404fec:	462f      	movlt	r7, r5
  404fee:	1b7d      	subge	r5, r7, r5
  404ff0:	2500      	movlt	r5, #0
  404ff2:	2b00      	cmp	r3, #0
  404ff4:	bfab      	itete	ge
  404ff6:	9b05      	ldrge	r3, [sp, #20]
  404ff8:	ebc3 0408 	rsblt	r4, r3, r8
  404ffc:	4644      	movge	r4, r8
  404ffe:	2300      	movlt	r3, #0
  405000:	9a07      	ldr	r2, [sp, #28]
  405002:	2101      	movs	r1, #1
  405004:	441a      	add	r2, r3
  405006:	4650      	mov	r0, sl
  405008:	4498      	add	r8, r3
  40500a:	9207      	str	r2, [sp, #28]
  40500c:	f001 f8a2 	bl	406154 <__i2b>
  405010:	4606      	mov	r6, r0
  405012:	e002      	b.n	40501a <_dtoa_r+0x71a>
  405014:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405016:	463d      	mov	r5, r7
  405018:	4644      	mov	r4, r8
  40501a:	b15c      	cbz	r4, 405034 <_dtoa_r+0x734>
  40501c:	9b07      	ldr	r3, [sp, #28]
  40501e:	2b00      	cmp	r3, #0
  405020:	dd08      	ble.n	405034 <_dtoa_r+0x734>
  405022:	42a3      	cmp	r3, r4
  405024:	9a07      	ldr	r2, [sp, #28]
  405026:	bfa8      	it	ge
  405028:	4623      	movge	r3, r4
  40502a:	ebc3 0808 	rsb	r8, r3, r8
  40502e:	1ae4      	subs	r4, r4, r3
  405030:	1ad3      	subs	r3, r2, r3
  405032:	9307      	str	r3, [sp, #28]
  405034:	2f00      	cmp	r7, #0
  405036:	dd1d      	ble.n	405074 <_dtoa_r+0x774>
  405038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40503a:	b1ab      	cbz	r3, 405068 <_dtoa_r+0x768>
  40503c:	b18d      	cbz	r5, 405062 <_dtoa_r+0x762>
  40503e:	4631      	mov	r1, r6
  405040:	462a      	mov	r2, r5
  405042:	4650      	mov	r0, sl
  405044:	f001 f920 	bl	406288 <__pow5mult>
  405048:	9a04      	ldr	r2, [sp, #16]
  40504a:	4601      	mov	r1, r0
  40504c:	4606      	mov	r6, r0
  40504e:	4650      	mov	r0, sl
  405050:	f001 f889 	bl	406166 <__multiply>
  405054:	9904      	ldr	r1, [sp, #16]
  405056:	9008      	str	r0, [sp, #32]
  405058:	4650      	mov	r0, sl
  40505a:	f000 ff9e 	bl	405f9a <_Bfree>
  40505e:	9b08      	ldr	r3, [sp, #32]
  405060:	9304      	str	r3, [sp, #16]
  405062:	1b7a      	subs	r2, r7, r5
  405064:	d006      	beq.n	405074 <_dtoa_r+0x774>
  405066:	e000      	b.n	40506a <_dtoa_r+0x76a>
  405068:	463a      	mov	r2, r7
  40506a:	9904      	ldr	r1, [sp, #16]
  40506c:	4650      	mov	r0, sl
  40506e:	f001 f90b 	bl	406288 <__pow5mult>
  405072:	9004      	str	r0, [sp, #16]
  405074:	2101      	movs	r1, #1
  405076:	4650      	mov	r0, sl
  405078:	f001 f86c 	bl	406154 <__i2b>
  40507c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40507e:	4605      	mov	r5, r0
  405080:	b35b      	cbz	r3, 4050da <_dtoa_r+0x7da>
  405082:	461a      	mov	r2, r3
  405084:	4601      	mov	r1, r0
  405086:	4650      	mov	r0, sl
  405088:	f001 f8fe 	bl	406288 <__pow5mult>
  40508c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40508e:	2b01      	cmp	r3, #1
  405090:	4605      	mov	r5, r0
  405092:	dc18      	bgt.n	4050c6 <_dtoa_r+0x7c6>
  405094:	9b02      	ldr	r3, [sp, #8]
  405096:	b983      	cbnz	r3, 4050ba <_dtoa_r+0x7ba>
  405098:	9b03      	ldr	r3, [sp, #12]
  40509a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40509e:	b973      	cbnz	r3, 4050be <_dtoa_r+0x7be>
  4050a0:	9b03      	ldr	r3, [sp, #12]
  4050a2:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  4050a6:	0d3f      	lsrs	r7, r7, #20
  4050a8:	053f      	lsls	r7, r7, #20
  4050aa:	b14f      	cbz	r7, 4050c0 <_dtoa_r+0x7c0>
  4050ac:	9b07      	ldr	r3, [sp, #28]
  4050ae:	3301      	adds	r3, #1
  4050b0:	f108 0801 	add.w	r8, r8, #1
  4050b4:	9307      	str	r3, [sp, #28]
  4050b6:	2701      	movs	r7, #1
  4050b8:	e002      	b.n	4050c0 <_dtoa_r+0x7c0>
  4050ba:	2700      	movs	r7, #0
  4050bc:	e000      	b.n	4050c0 <_dtoa_r+0x7c0>
  4050be:	9f02      	ldr	r7, [sp, #8]
  4050c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4050c2:	b173      	cbz	r3, 4050e2 <_dtoa_r+0x7e2>
  4050c4:	e000      	b.n	4050c8 <_dtoa_r+0x7c8>
  4050c6:	2700      	movs	r7, #0
  4050c8:	692b      	ldr	r3, [r5, #16]
  4050ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4050ce:	6918      	ldr	r0, [r3, #16]
  4050d0:	f000 fff3 	bl	4060ba <__hi0bits>
  4050d4:	f1c0 0020 	rsb	r0, r0, #32
  4050d8:	e004      	b.n	4050e4 <_dtoa_r+0x7e4>
  4050da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4050dc:	2b01      	cmp	r3, #1
  4050de:	ddd9      	ble.n	405094 <_dtoa_r+0x794>
  4050e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  4050e2:	2001      	movs	r0, #1
  4050e4:	9b07      	ldr	r3, [sp, #28]
  4050e6:	4418      	add	r0, r3
  4050e8:	f010 001f 	ands.w	r0, r0, #31
  4050ec:	d008      	beq.n	405100 <_dtoa_r+0x800>
  4050ee:	f1c0 0320 	rsb	r3, r0, #32
  4050f2:	2b04      	cmp	r3, #4
  4050f4:	dd02      	ble.n	4050fc <_dtoa_r+0x7fc>
  4050f6:	f1c0 001c 	rsb	r0, r0, #28
  4050fa:	e002      	b.n	405102 <_dtoa_r+0x802>
  4050fc:	d006      	beq.n	40510c <_dtoa_r+0x80c>
  4050fe:	4618      	mov	r0, r3
  405100:	301c      	adds	r0, #28
  405102:	9b07      	ldr	r3, [sp, #28]
  405104:	4403      	add	r3, r0
  405106:	4480      	add	r8, r0
  405108:	4404      	add	r4, r0
  40510a:	9307      	str	r3, [sp, #28]
  40510c:	f1b8 0f00 	cmp.w	r8, #0
  405110:	dd05      	ble.n	40511e <_dtoa_r+0x81e>
  405112:	4642      	mov	r2, r8
  405114:	9904      	ldr	r1, [sp, #16]
  405116:	4650      	mov	r0, sl
  405118:	f001 f904 	bl	406324 <__lshift>
  40511c:	9004      	str	r0, [sp, #16]
  40511e:	9b07      	ldr	r3, [sp, #28]
  405120:	2b00      	cmp	r3, #0
  405122:	dd05      	ble.n	405130 <_dtoa_r+0x830>
  405124:	4629      	mov	r1, r5
  405126:	461a      	mov	r2, r3
  405128:	4650      	mov	r0, sl
  40512a:	f001 f8fb 	bl	406324 <__lshift>
  40512e:	4605      	mov	r5, r0
  405130:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405132:	b31b      	cbz	r3, 40517c <_dtoa_r+0x87c>
  405134:	4629      	mov	r1, r5
  405136:	9804      	ldr	r0, [sp, #16]
  405138:	f001 f945 	bl	4063c6 <__mcmp>
  40513c:	2800      	cmp	r0, #0
  40513e:	da1d      	bge.n	40517c <_dtoa_r+0x87c>
  405140:	2300      	movs	r3, #0
  405142:	220a      	movs	r2, #10
  405144:	9904      	ldr	r1, [sp, #16]
  405146:	4650      	mov	r0, sl
  405148:	f000 ff3e 	bl	405fc8 <__multadd>
  40514c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40514e:	9004      	str	r0, [sp, #16]
  405150:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  405154:	2b00      	cmp	r3, #0
  405156:	f000 8160 	beq.w	40541a <_dtoa_r+0xb1a>
  40515a:	4631      	mov	r1, r6
  40515c:	2300      	movs	r3, #0
  40515e:	220a      	movs	r2, #10
  405160:	4650      	mov	r0, sl
  405162:	f000 ff31 	bl	405fc8 <__multadd>
  405166:	f1b9 0f00 	cmp.w	r9, #0
  40516a:	4606      	mov	r6, r0
  40516c:	dc3e      	bgt.n	4051ec <_dtoa_r+0x8ec>
  40516e:	e03a      	b.n	4051e6 <_dtoa_r+0x8e6>
  405170:	00408218 	.word	0x00408218
  405174:	40140000 	.word	0x40140000
  405178:	40240000 	.word	0x40240000
  40517c:	9b05      	ldr	r3, [sp, #20]
  40517e:	2b00      	cmp	r3, #0
  405180:	dc2b      	bgt.n	4051da <_dtoa_r+0x8da>
  405182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405184:	2b02      	cmp	r3, #2
  405186:	dd28      	ble.n	4051da <_dtoa_r+0x8da>
  405188:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40518c:	f1b9 0f00 	cmp.w	r9, #0
  405190:	d111      	bne.n	4051b6 <_dtoa_r+0x8b6>
  405192:	4629      	mov	r1, r5
  405194:	464b      	mov	r3, r9
  405196:	2205      	movs	r2, #5
  405198:	4650      	mov	r0, sl
  40519a:	f000 ff15 	bl	405fc8 <__multadd>
  40519e:	4601      	mov	r1, r0
  4051a0:	4605      	mov	r5, r0
  4051a2:	9804      	ldr	r0, [sp, #16]
  4051a4:	f001 f90f 	bl	4063c6 <__mcmp>
  4051a8:	2800      	cmp	r0, #0
  4051aa:	dc0c      	bgt.n	4051c6 <_dtoa_r+0x8c6>
  4051ac:	e003      	b.n	4051b6 <_dtoa_r+0x8b6>
  4051ae:	4635      	mov	r5, r6
  4051b0:	e000      	b.n	4051b4 <_dtoa_r+0x8b4>
  4051b2:	2500      	movs	r5, #0
  4051b4:	462e      	mov	r6, r5
  4051b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4051b8:	9c06      	ldr	r4, [sp, #24]
  4051ba:	ea6f 0b03 	mvn.w	fp, r3
  4051be:	e009      	b.n	4051d4 <_dtoa_r+0x8d4>
  4051c0:	f8dd b020 	ldr.w	fp, [sp, #32]
  4051c4:	4635      	mov	r5, r6
  4051c6:	9b06      	ldr	r3, [sp, #24]
  4051c8:	9a06      	ldr	r2, [sp, #24]
  4051ca:	1c5c      	adds	r4, r3, #1
  4051cc:	2331      	movs	r3, #49	; 0x31
  4051ce:	7013      	strb	r3, [r2, #0]
  4051d0:	f10b 0b01 	add.w	fp, fp, #1
  4051d4:	9605      	str	r6, [sp, #20]
  4051d6:	2600      	movs	r6, #0
  4051d8:	e0f9      	b.n	4053ce <_dtoa_r+0xace>
  4051da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051dc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4051e0:	b923      	cbnz	r3, 4051ec <_dtoa_r+0x8ec>
  4051e2:	9c06      	ldr	r4, [sp, #24]
  4051e4:	e0b2      	b.n	40534c <_dtoa_r+0xa4c>
  4051e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4051e8:	2b02      	cmp	r3, #2
  4051ea:	dccf      	bgt.n	40518c <_dtoa_r+0x88c>
  4051ec:	2c00      	cmp	r4, #0
  4051ee:	dd05      	ble.n	4051fc <_dtoa_r+0x8fc>
  4051f0:	4631      	mov	r1, r6
  4051f2:	4622      	mov	r2, r4
  4051f4:	4650      	mov	r0, sl
  4051f6:	f001 f895 	bl	406324 <__lshift>
  4051fa:	4606      	mov	r6, r0
  4051fc:	b19f      	cbz	r7, 405226 <_dtoa_r+0x926>
  4051fe:	6871      	ldr	r1, [r6, #4]
  405200:	4650      	mov	r0, sl
  405202:	f000 fe95 	bl	405f30 <_Balloc>
  405206:	6932      	ldr	r2, [r6, #16]
  405208:	3202      	adds	r2, #2
  40520a:	4604      	mov	r4, r0
  40520c:	0092      	lsls	r2, r2, #2
  40520e:	f106 010c 	add.w	r1, r6, #12
  405212:	300c      	adds	r0, #12
  405214:	f7fd fd64 	bl	402ce0 <memcpy>
  405218:	2201      	movs	r2, #1
  40521a:	4621      	mov	r1, r4
  40521c:	4650      	mov	r0, sl
  40521e:	f001 f881 	bl	406324 <__lshift>
  405222:	9005      	str	r0, [sp, #20]
  405224:	e000      	b.n	405228 <_dtoa_r+0x928>
  405226:	9605      	str	r6, [sp, #20]
  405228:	9b02      	ldr	r3, [sp, #8]
  40522a:	9f06      	ldr	r7, [sp, #24]
  40522c:	f003 0301 	and.w	r3, r3, #1
  405230:	9307      	str	r3, [sp, #28]
  405232:	4629      	mov	r1, r5
  405234:	9804      	ldr	r0, [sp, #16]
  405236:	f7ff fad3 	bl	4047e0 <quorem>
  40523a:	4631      	mov	r1, r6
  40523c:	4604      	mov	r4, r0
  40523e:	f100 0830 	add.w	r8, r0, #48	; 0x30
  405242:	9804      	ldr	r0, [sp, #16]
  405244:	f001 f8bf 	bl	4063c6 <__mcmp>
  405248:	9a05      	ldr	r2, [sp, #20]
  40524a:	9002      	str	r0, [sp, #8]
  40524c:	4629      	mov	r1, r5
  40524e:	4650      	mov	r0, sl
  405250:	f001 f8d5 	bl	4063fe <__mdiff>
  405254:	68c3      	ldr	r3, [r0, #12]
  405256:	4602      	mov	r2, r0
  405258:	b93b      	cbnz	r3, 40526a <_dtoa_r+0x96a>
  40525a:	4601      	mov	r1, r0
  40525c:	900a      	str	r0, [sp, #40]	; 0x28
  40525e:	9804      	ldr	r0, [sp, #16]
  405260:	f001 f8b1 	bl	4063c6 <__mcmp>
  405264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405266:	4603      	mov	r3, r0
  405268:	e000      	b.n	40526c <_dtoa_r+0x96c>
  40526a:	2301      	movs	r3, #1
  40526c:	4611      	mov	r1, r2
  40526e:	4650      	mov	r0, sl
  405270:	930a      	str	r3, [sp, #40]	; 0x28
  405272:	f000 fe92 	bl	405f9a <_Bfree>
  405276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405278:	b953      	cbnz	r3, 405290 <_dtoa_r+0x990>
  40527a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40527c:	b942      	cbnz	r2, 405290 <_dtoa_r+0x990>
  40527e:	9a07      	ldr	r2, [sp, #28]
  405280:	b932      	cbnz	r2, 405290 <_dtoa_r+0x990>
  405282:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405286:	d02a      	beq.n	4052de <_dtoa_r+0x9de>
  405288:	9b02      	ldr	r3, [sp, #8]
  40528a:	2b00      	cmp	r3, #0
  40528c:	dc1c      	bgt.n	4052c8 <_dtoa_r+0x9c8>
  40528e:	e01d      	b.n	4052cc <_dtoa_r+0x9cc>
  405290:	9a02      	ldr	r2, [sp, #8]
  405292:	2a00      	cmp	r2, #0
  405294:	db04      	blt.n	4052a0 <_dtoa_r+0x9a0>
  405296:	d11b      	bne.n	4052d0 <_dtoa_r+0x9d0>
  405298:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40529a:	b9ca      	cbnz	r2, 4052d0 <_dtoa_r+0x9d0>
  40529c:	9a07      	ldr	r2, [sp, #28]
  40529e:	b9ba      	cbnz	r2, 4052d0 <_dtoa_r+0x9d0>
  4052a0:	2b00      	cmp	r3, #0
  4052a2:	dd13      	ble.n	4052cc <_dtoa_r+0x9cc>
  4052a4:	2201      	movs	r2, #1
  4052a6:	9904      	ldr	r1, [sp, #16]
  4052a8:	4650      	mov	r0, sl
  4052aa:	f001 f83b 	bl	406324 <__lshift>
  4052ae:	4629      	mov	r1, r5
  4052b0:	9004      	str	r0, [sp, #16]
  4052b2:	f001 f888 	bl	4063c6 <__mcmp>
  4052b6:	2800      	cmp	r0, #0
  4052b8:	dc03      	bgt.n	4052c2 <_dtoa_r+0x9c2>
  4052ba:	d107      	bne.n	4052cc <_dtoa_r+0x9cc>
  4052bc:	f018 0f01 	tst.w	r8, #1
  4052c0:	d004      	beq.n	4052cc <_dtoa_r+0x9cc>
  4052c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4052c6:	d00a      	beq.n	4052de <_dtoa_r+0x9de>
  4052c8:	f104 0831 	add.w	r8, r4, #49	; 0x31
  4052cc:	1c7c      	adds	r4, r7, #1
  4052ce:	e00c      	b.n	4052ea <_dtoa_r+0x9ea>
  4052d0:	2b00      	cmp	r3, #0
  4052d2:	f107 0401 	add.w	r4, r7, #1
  4052d6:	dd0b      	ble.n	4052f0 <_dtoa_r+0x9f0>
  4052d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4052dc:	d103      	bne.n	4052e6 <_dtoa_r+0x9e6>
  4052de:	2339      	movs	r3, #57	; 0x39
  4052e0:	703b      	strb	r3, [r7, #0]
  4052e2:	3701      	adds	r7, #1
  4052e4:	e056      	b.n	405394 <_dtoa_r+0xa94>
  4052e6:	f108 0801 	add.w	r8, r8, #1
  4052ea:	f887 8000 	strb.w	r8, [r7]
  4052ee:	e06e      	b.n	4053ce <_dtoa_r+0xace>
  4052f0:	9b06      	ldr	r3, [sp, #24]
  4052f2:	f804 8c01 	strb.w	r8, [r4, #-1]
  4052f6:	1ae3      	subs	r3, r4, r3
  4052f8:	454b      	cmp	r3, r9
  4052fa:	4627      	mov	r7, r4
  4052fc:	d03b      	beq.n	405376 <_dtoa_r+0xa76>
  4052fe:	2300      	movs	r3, #0
  405300:	220a      	movs	r2, #10
  405302:	9904      	ldr	r1, [sp, #16]
  405304:	4650      	mov	r0, sl
  405306:	f000 fe5f 	bl	405fc8 <__multadd>
  40530a:	9b05      	ldr	r3, [sp, #20]
  40530c:	9004      	str	r0, [sp, #16]
  40530e:	429e      	cmp	r6, r3
  405310:	f04f 020a 	mov.w	r2, #10
  405314:	f04f 0300 	mov.w	r3, #0
  405318:	4631      	mov	r1, r6
  40531a:	4650      	mov	r0, sl
  40531c:	d104      	bne.n	405328 <_dtoa_r+0xa28>
  40531e:	f000 fe53 	bl	405fc8 <__multadd>
  405322:	4606      	mov	r6, r0
  405324:	9005      	str	r0, [sp, #20]
  405326:	e784      	b.n	405232 <_dtoa_r+0x932>
  405328:	f000 fe4e 	bl	405fc8 <__multadd>
  40532c:	2300      	movs	r3, #0
  40532e:	4606      	mov	r6, r0
  405330:	220a      	movs	r2, #10
  405332:	9905      	ldr	r1, [sp, #20]
  405334:	4650      	mov	r0, sl
  405336:	f000 fe47 	bl	405fc8 <__multadd>
  40533a:	9005      	str	r0, [sp, #20]
  40533c:	e779      	b.n	405232 <_dtoa_r+0x932>
  40533e:	2300      	movs	r3, #0
  405340:	220a      	movs	r2, #10
  405342:	9904      	ldr	r1, [sp, #16]
  405344:	4650      	mov	r0, sl
  405346:	f000 fe3f 	bl	405fc8 <__multadd>
  40534a:	9004      	str	r0, [sp, #16]
  40534c:	4629      	mov	r1, r5
  40534e:	9804      	ldr	r0, [sp, #16]
  405350:	f7ff fa46 	bl	4047e0 <quorem>
  405354:	f100 0830 	add.w	r8, r0, #48	; 0x30
  405358:	f804 8b01 	strb.w	r8, [r4], #1
  40535c:	9b06      	ldr	r3, [sp, #24]
  40535e:	1ae3      	subs	r3, r4, r3
  405360:	454b      	cmp	r3, r9
  405362:	dbec      	blt.n	40533e <_dtoa_r+0xa3e>
  405364:	9b06      	ldr	r3, [sp, #24]
  405366:	9605      	str	r6, [sp, #20]
  405368:	f1b9 0f01 	cmp.w	r9, #1
  40536c:	bfac      	ite	ge
  40536e:	444b      	addge	r3, r9
  405370:	3301      	addlt	r3, #1
  405372:	461f      	mov	r7, r3
  405374:	2600      	movs	r6, #0
  405376:	2201      	movs	r2, #1
  405378:	9904      	ldr	r1, [sp, #16]
  40537a:	4650      	mov	r0, sl
  40537c:	f000 ffd2 	bl	406324 <__lshift>
  405380:	4629      	mov	r1, r5
  405382:	9004      	str	r0, [sp, #16]
  405384:	f001 f81f 	bl	4063c6 <__mcmp>
  405388:	2800      	cmp	r0, #0
  40538a:	dc03      	bgt.n	405394 <_dtoa_r+0xa94>
  40538c:	d116      	bne.n	4053bc <_dtoa_r+0xabc>
  40538e:	f018 0f01 	tst.w	r8, #1
  405392:	d013      	beq.n	4053bc <_dtoa_r+0xabc>
  405394:	463c      	mov	r4, r7
  405396:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40539a:	2b39      	cmp	r3, #57	; 0x39
  40539c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  4053a0:	d109      	bne.n	4053b6 <_dtoa_r+0xab6>
  4053a2:	9b06      	ldr	r3, [sp, #24]
  4053a4:	4293      	cmp	r3, r2
  4053a6:	d104      	bne.n	4053b2 <_dtoa_r+0xab2>
  4053a8:	f10b 0b01 	add.w	fp, fp, #1
  4053ac:	2331      	movs	r3, #49	; 0x31
  4053ae:	9a06      	ldr	r2, [sp, #24]
  4053b0:	e002      	b.n	4053b8 <_dtoa_r+0xab8>
  4053b2:	4614      	mov	r4, r2
  4053b4:	e7ef      	b.n	405396 <_dtoa_r+0xa96>
  4053b6:	3301      	adds	r3, #1
  4053b8:	7013      	strb	r3, [r2, #0]
  4053ba:	e008      	b.n	4053ce <_dtoa_r+0xace>
  4053bc:	463c      	mov	r4, r7
  4053be:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  4053c2:	2b30      	cmp	r3, #48	; 0x30
  4053c4:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  4053c8:	d101      	bne.n	4053ce <_dtoa_r+0xace>
  4053ca:	4614      	mov	r4, r2
  4053cc:	e7f7      	b.n	4053be <_dtoa_r+0xabe>
  4053ce:	4629      	mov	r1, r5
  4053d0:	4650      	mov	r0, sl
  4053d2:	f000 fde2 	bl	405f9a <_Bfree>
  4053d6:	9b05      	ldr	r3, [sp, #20]
  4053d8:	b16b      	cbz	r3, 4053f6 <_dtoa_r+0xaf6>
  4053da:	b12e      	cbz	r6, 4053e8 <_dtoa_r+0xae8>
  4053dc:	429e      	cmp	r6, r3
  4053de:	d003      	beq.n	4053e8 <_dtoa_r+0xae8>
  4053e0:	4631      	mov	r1, r6
  4053e2:	4650      	mov	r0, sl
  4053e4:	f000 fdd9 	bl	405f9a <_Bfree>
  4053e8:	9905      	ldr	r1, [sp, #20]
  4053ea:	4650      	mov	r0, sl
  4053ec:	f000 fdd5 	bl	405f9a <_Bfree>
  4053f0:	e001      	b.n	4053f6 <_dtoa_r+0xaf6>
  4053f2:	f8dd b020 	ldr.w	fp, [sp, #32]
  4053f6:	9904      	ldr	r1, [sp, #16]
  4053f8:	4650      	mov	r0, sl
  4053fa:	f000 fdce 	bl	405f9a <_Bfree>
  4053fe:	2300      	movs	r3, #0
  405400:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405402:	7023      	strb	r3, [r4, #0]
  405404:	f10b 0301 	add.w	r3, fp, #1
  405408:	6013      	str	r3, [r2, #0]
  40540a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40540c:	b11b      	cbz	r3, 405416 <_dtoa_r+0xb16>
  40540e:	601c      	str	r4, [r3, #0]
  405410:	e001      	b.n	405416 <_dtoa_r+0xb16>
  405412:	4808      	ldr	r0, [pc, #32]	; (405434 <_dtoa_r+0xb34>)
  405414:	e00a      	b.n	40542c <_dtoa_r+0xb2c>
  405416:	9806      	ldr	r0, [sp, #24]
  405418:	e008      	b.n	40542c <_dtoa_r+0xb2c>
  40541a:	f1b9 0f00 	cmp.w	r9, #0
  40541e:	f73f aee0 	bgt.w	4051e2 <_dtoa_r+0x8e2>
  405422:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405424:	2b02      	cmp	r3, #2
  405426:	f77f aedc 	ble.w	4051e2 <_dtoa_r+0x8e2>
  40542a:	e6af      	b.n	40518c <_dtoa_r+0x88c>
  40542c:	b015      	add	sp, #84	; 0x54
  40542e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405432:	bf00      	nop
  405434:	00408124 	.word	0x00408124

00405438 <__sflush_r>:
  405438:	898a      	ldrh	r2, [r1, #12]
  40543a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40543e:	4605      	mov	r5, r0
  405440:	0710      	lsls	r0, r2, #28
  405442:	460c      	mov	r4, r1
  405444:	d459      	bmi.n	4054fa <__sflush_r+0xc2>
  405446:	684b      	ldr	r3, [r1, #4]
  405448:	2b00      	cmp	r3, #0
  40544a:	dc02      	bgt.n	405452 <__sflush_r+0x1a>
  40544c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40544e:	2b00      	cmp	r3, #0
  405450:	dd17      	ble.n	405482 <__sflush_r+0x4a>
  405452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  405454:	b1ae      	cbz	r6, 405482 <__sflush_r+0x4a>
  405456:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  40545a:	2300      	movs	r3, #0
  40545c:	b292      	uxth	r2, r2
  40545e:	682f      	ldr	r7, [r5, #0]
  405460:	602b      	str	r3, [r5, #0]
  405462:	b10a      	cbz	r2, 405468 <__sflush_r+0x30>
  405464:	6d60      	ldr	r0, [r4, #84]	; 0x54
  405466:	e015      	b.n	405494 <__sflush_r+0x5c>
  405468:	6a21      	ldr	r1, [r4, #32]
  40546a:	2301      	movs	r3, #1
  40546c:	4628      	mov	r0, r5
  40546e:	47b0      	blx	r6
  405470:	1c41      	adds	r1, r0, #1
  405472:	d10f      	bne.n	405494 <__sflush_r+0x5c>
  405474:	682b      	ldr	r3, [r5, #0]
  405476:	b16b      	cbz	r3, 405494 <__sflush_r+0x5c>
  405478:	2b1d      	cmp	r3, #29
  40547a:	d001      	beq.n	405480 <__sflush_r+0x48>
  40547c:	2b16      	cmp	r3, #22
  40547e:	d103      	bne.n	405488 <__sflush_r+0x50>
  405480:	602f      	str	r7, [r5, #0]
  405482:	2000      	movs	r0, #0
  405484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405488:	89a3      	ldrh	r3, [r4, #12]
  40548a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40548e:	81a3      	strh	r3, [r4, #12]
  405490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405494:	89a3      	ldrh	r3, [r4, #12]
  405496:	075a      	lsls	r2, r3, #29
  405498:	d505      	bpl.n	4054a6 <__sflush_r+0x6e>
  40549a:	6863      	ldr	r3, [r4, #4]
  40549c:	1ac0      	subs	r0, r0, r3
  40549e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4054a0:	b10b      	cbz	r3, 4054a6 <__sflush_r+0x6e>
  4054a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4054a4:	1ac0      	subs	r0, r0, r3
  4054a6:	2300      	movs	r3, #0
  4054a8:	4602      	mov	r2, r0
  4054aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4054ac:	6a21      	ldr	r1, [r4, #32]
  4054ae:	4628      	mov	r0, r5
  4054b0:	47b0      	blx	r6
  4054b2:	1c43      	adds	r3, r0, #1
  4054b4:	89a3      	ldrh	r3, [r4, #12]
  4054b6:	d106      	bne.n	4054c6 <__sflush_r+0x8e>
  4054b8:	6829      	ldr	r1, [r5, #0]
  4054ba:	291d      	cmp	r1, #29
  4054bc:	d83a      	bhi.n	405534 <__sflush_r+0xfc>
  4054be:	4a21      	ldr	r2, [pc, #132]	; (405544 <__sflush_r+0x10c>)
  4054c0:	40ca      	lsrs	r2, r1
  4054c2:	07d6      	lsls	r6, r2, #31
  4054c4:	d536      	bpl.n	405534 <__sflush_r+0xfc>
  4054c6:	2200      	movs	r2, #0
  4054c8:	6062      	str	r2, [r4, #4]
  4054ca:	04d9      	lsls	r1, r3, #19
  4054cc:	6922      	ldr	r2, [r4, #16]
  4054ce:	6022      	str	r2, [r4, #0]
  4054d0:	d504      	bpl.n	4054dc <__sflush_r+0xa4>
  4054d2:	1c42      	adds	r2, r0, #1
  4054d4:	d101      	bne.n	4054da <__sflush_r+0xa2>
  4054d6:	682b      	ldr	r3, [r5, #0]
  4054d8:	b903      	cbnz	r3, 4054dc <__sflush_r+0xa4>
  4054da:	6560      	str	r0, [r4, #84]	; 0x54
  4054dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4054de:	602f      	str	r7, [r5, #0]
  4054e0:	2900      	cmp	r1, #0
  4054e2:	d0ce      	beq.n	405482 <__sflush_r+0x4a>
  4054e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4054e8:	4299      	cmp	r1, r3
  4054ea:	d002      	beq.n	4054f2 <__sflush_r+0xba>
  4054ec:	4628      	mov	r0, r5
  4054ee:	f001 f917 	bl	406720 <_free_r>
  4054f2:	2000      	movs	r0, #0
  4054f4:	6360      	str	r0, [r4, #52]	; 0x34
  4054f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054fa:	690f      	ldr	r7, [r1, #16]
  4054fc:	2f00      	cmp	r7, #0
  4054fe:	d0c0      	beq.n	405482 <__sflush_r+0x4a>
  405500:	0793      	lsls	r3, r2, #30
  405502:	680e      	ldr	r6, [r1, #0]
  405504:	bf08      	it	eq
  405506:	694b      	ldreq	r3, [r1, #20]
  405508:	600f      	str	r7, [r1, #0]
  40550a:	bf18      	it	ne
  40550c:	2300      	movne	r3, #0
  40550e:	ebc7 0806 	rsb	r8, r7, r6
  405512:	608b      	str	r3, [r1, #8]
  405514:	e002      	b.n	40551c <__sflush_r+0xe4>
  405516:	4407      	add	r7, r0
  405518:	ebc0 0808 	rsb	r8, r0, r8
  40551c:	f1b8 0f00 	cmp.w	r8, #0
  405520:	ddaf      	ble.n	405482 <__sflush_r+0x4a>
  405522:	4643      	mov	r3, r8
  405524:	463a      	mov	r2, r7
  405526:	6a21      	ldr	r1, [r4, #32]
  405528:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  40552a:	4628      	mov	r0, r5
  40552c:	47b0      	blx	r6
  40552e:	2800      	cmp	r0, #0
  405530:	dcf1      	bgt.n	405516 <__sflush_r+0xde>
  405532:	89a3      	ldrh	r3, [r4, #12]
  405534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405538:	81a3      	strh	r3, [r4, #12]
  40553a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40553e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405542:	bf00      	nop
  405544:	20400001 	.word	0x20400001

00405548 <_fflush_r>:
  405548:	b538      	push	{r3, r4, r5, lr}
  40554a:	690b      	ldr	r3, [r1, #16]
  40554c:	4605      	mov	r5, r0
  40554e:	460c      	mov	r4, r1
  405550:	b1db      	cbz	r3, 40558a <_fflush_r+0x42>
  405552:	b118      	cbz	r0, 40555c <_fflush_r+0x14>
  405554:	6983      	ldr	r3, [r0, #24]
  405556:	b90b      	cbnz	r3, 40555c <_fflush_r+0x14>
  405558:	f000 f860 	bl	40561c <__sinit>
  40555c:	4b0c      	ldr	r3, [pc, #48]	; (405590 <_fflush_r+0x48>)
  40555e:	429c      	cmp	r4, r3
  405560:	d101      	bne.n	405566 <_fflush_r+0x1e>
  405562:	686c      	ldr	r4, [r5, #4]
  405564:	e008      	b.n	405578 <_fflush_r+0x30>
  405566:	4b0b      	ldr	r3, [pc, #44]	; (405594 <_fflush_r+0x4c>)
  405568:	429c      	cmp	r4, r3
  40556a:	d101      	bne.n	405570 <_fflush_r+0x28>
  40556c:	68ac      	ldr	r4, [r5, #8]
  40556e:	e003      	b.n	405578 <_fflush_r+0x30>
  405570:	4b09      	ldr	r3, [pc, #36]	; (405598 <_fflush_r+0x50>)
  405572:	429c      	cmp	r4, r3
  405574:	bf08      	it	eq
  405576:	68ec      	ldreq	r4, [r5, #12]
  405578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40557c:	b12b      	cbz	r3, 40558a <_fflush_r+0x42>
  40557e:	4621      	mov	r1, r4
  405580:	4628      	mov	r0, r5
  405582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405586:	f7ff bf57 	b.w	405438 <__sflush_r>
  40558a:	2000      	movs	r0, #0
  40558c:	bd38      	pop	{r3, r4, r5, pc}
  40558e:	bf00      	nop
  405590:	004081a8 	.word	0x004081a8
  405594:	004081c8 	.word	0x004081c8
  405598:	004081e8 	.word	0x004081e8

0040559c <_cleanup_r>:
  40559c:	4901      	ldr	r1, [pc, #4]	; (4055a4 <_cleanup_r+0x8>)
  40559e:	f000 b8a9 	b.w	4056f4 <_fwalk_reent>
  4055a2:	bf00      	nop
  4055a4:	00405549 	.word	0x00405549

004055a8 <std.isra.0>:
  4055a8:	2300      	movs	r3, #0
  4055aa:	b510      	push	{r4, lr}
  4055ac:	4604      	mov	r4, r0
  4055ae:	6003      	str	r3, [r0, #0]
  4055b0:	6043      	str	r3, [r0, #4]
  4055b2:	6083      	str	r3, [r0, #8]
  4055b4:	8181      	strh	r1, [r0, #12]
  4055b6:	6643      	str	r3, [r0, #100]	; 0x64
  4055b8:	81c2      	strh	r2, [r0, #14]
  4055ba:	6103      	str	r3, [r0, #16]
  4055bc:	6143      	str	r3, [r0, #20]
  4055be:	6183      	str	r3, [r0, #24]
  4055c0:	4619      	mov	r1, r3
  4055c2:	2208      	movs	r2, #8
  4055c4:	305c      	adds	r0, #92	; 0x5c
  4055c6:	f7fd fb96 	bl	402cf6 <memset>
  4055ca:	4b05      	ldr	r3, [pc, #20]	; (4055e0 <std.isra.0+0x38>)
  4055cc:	6263      	str	r3, [r4, #36]	; 0x24
  4055ce:	4b05      	ldr	r3, [pc, #20]	; (4055e4 <std.isra.0+0x3c>)
  4055d0:	62a3      	str	r3, [r4, #40]	; 0x28
  4055d2:	4b05      	ldr	r3, [pc, #20]	; (4055e8 <std.isra.0+0x40>)
  4055d4:	62e3      	str	r3, [r4, #44]	; 0x2c
  4055d6:	4b05      	ldr	r3, [pc, #20]	; (4055ec <std.isra.0+0x44>)
  4055d8:	6224      	str	r4, [r4, #32]
  4055da:	6323      	str	r3, [r4, #48]	; 0x30
  4055dc:	bd10      	pop	{r4, pc}
  4055de:	bf00      	nop
  4055e0:	00406b21 	.word	0x00406b21
  4055e4:	00406b43 	.word	0x00406b43
  4055e8:	00406b7b 	.word	0x00406b7b
  4055ec:	00406b9f 	.word	0x00406b9f

004055f0 <__sfmoreglue>:
  4055f0:	b570      	push	{r4, r5, r6, lr}
  4055f2:	2368      	movs	r3, #104	; 0x68
  4055f4:	1e4d      	subs	r5, r1, #1
  4055f6:	435d      	muls	r5, r3
  4055f8:	460e      	mov	r6, r1
  4055fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4055fe:	f001 f8dd 	bl	4067bc <_malloc_r>
  405602:	4604      	mov	r4, r0
  405604:	b140      	cbz	r0, 405618 <__sfmoreglue+0x28>
  405606:	2100      	movs	r1, #0
  405608:	e880 0042 	stmia.w	r0, {r1, r6}
  40560c:	300c      	adds	r0, #12
  40560e:	60a0      	str	r0, [r4, #8]
  405610:	f105 0268 	add.w	r2, r5, #104	; 0x68
  405614:	f7fd fb6f 	bl	402cf6 <memset>
  405618:	4620      	mov	r0, r4
  40561a:	bd70      	pop	{r4, r5, r6, pc}

0040561c <__sinit>:
  40561c:	6983      	ldr	r3, [r0, #24]
  40561e:	b510      	push	{r4, lr}
  405620:	4604      	mov	r4, r0
  405622:	bb33      	cbnz	r3, 405672 <__sinit+0x56>
  405624:	6483      	str	r3, [r0, #72]	; 0x48
  405626:	64c3      	str	r3, [r0, #76]	; 0x4c
  405628:	6503      	str	r3, [r0, #80]	; 0x50
  40562a:	4b12      	ldr	r3, [pc, #72]	; (405674 <__sinit+0x58>)
  40562c:	4a12      	ldr	r2, [pc, #72]	; (405678 <__sinit+0x5c>)
  40562e:	681b      	ldr	r3, [r3, #0]
  405630:	6282      	str	r2, [r0, #40]	; 0x28
  405632:	4298      	cmp	r0, r3
  405634:	bf04      	itt	eq
  405636:	2301      	moveq	r3, #1
  405638:	6183      	streq	r3, [r0, #24]
  40563a:	f000 f81f 	bl	40567c <__sfp>
  40563e:	6060      	str	r0, [r4, #4]
  405640:	4620      	mov	r0, r4
  405642:	f000 f81b 	bl	40567c <__sfp>
  405646:	60a0      	str	r0, [r4, #8]
  405648:	4620      	mov	r0, r4
  40564a:	f000 f817 	bl	40567c <__sfp>
  40564e:	2200      	movs	r2, #0
  405650:	60e0      	str	r0, [r4, #12]
  405652:	2104      	movs	r1, #4
  405654:	6860      	ldr	r0, [r4, #4]
  405656:	f7ff ffa7 	bl	4055a8 <std.isra.0>
  40565a:	2201      	movs	r2, #1
  40565c:	2109      	movs	r1, #9
  40565e:	68a0      	ldr	r0, [r4, #8]
  405660:	f7ff ffa2 	bl	4055a8 <std.isra.0>
  405664:	2202      	movs	r2, #2
  405666:	2112      	movs	r1, #18
  405668:	68e0      	ldr	r0, [r4, #12]
  40566a:	f7ff ff9d 	bl	4055a8 <std.isra.0>
  40566e:	2301      	movs	r3, #1
  405670:	61a3      	str	r3, [r4, #24]
  405672:	bd10      	pop	{r4, pc}
  405674:	00408110 	.word	0x00408110
  405678:	0040559d 	.word	0x0040559d

0040567c <__sfp>:
  40567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40567e:	4b1c      	ldr	r3, [pc, #112]	; (4056f0 <__sfp+0x74>)
  405680:	681e      	ldr	r6, [r3, #0]
  405682:	69b3      	ldr	r3, [r6, #24]
  405684:	4607      	mov	r7, r0
  405686:	b913      	cbnz	r3, 40568e <__sfp+0x12>
  405688:	4630      	mov	r0, r6
  40568a:	f7ff ffc7 	bl	40561c <__sinit>
  40568e:	3648      	adds	r6, #72	; 0x48
  405690:	68b4      	ldr	r4, [r6, #8]
  405692:	6873      	ldr	r3, [r6, #4]
  405694:	3b01      	subs	r3, #1
  405696:	d404      	bmi.n	4056a2 <__sfp+0x26>
  405698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40569c:	b17d      	cbz	r5, 4056be <__sfp+0x42>
  40569e:	3468      	adds	r4, #104	; 0x68
  4056a0:	e7f8      	b.n	405694 <__sfp+0x18>
  4056a2:	6833      	ldr	r3, [r6, #0]
  4056a4:	b10b      	cbz	r3, 4056aa <__sfp+0x2e>
  4056a6:	6836      	ldr	r6, [r6, #0]
  4056a8:	e7f2      	b.n	405690 <__sfp+0x14>
  4056aa:	2104      	movs	r1, #4
  4056ac:	4638      	mov	r0, r7
  4056ae:	f7ff ff9f 	bl	4055f0 <__sfmoreglue>
  4056b2:	6030      	str	r0, [r6, #0]
  4056b4:	2800      	cmp	r0, #0
  4056b6:	d1f6      	bne.n	4056a6 <__sfp+0x2a>
  4056b8:	230c      	movs	r3, #12
  4056ba:	603b      	str	r3, [r7, #0]
  4056bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056be:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4056c2:	81e3      	strh	r3, [r4, #14]
  4056c4:	2301      	movs	r3, #1
  4056c6:	81a3      	strh	r3, [r4, #12]
  4056c8:	6665      	str	r5, [r4, #100]	; 0x64
  4056ca:	6025      	str	r5, [r4, #0]
  4056cc:	60a5      	str	r5, [r4, #8]
  4056ce:	6065      	str	r5, [r4, #4]
  4056d0:	6125      	str	r5, [r4, #16]
  4056d2:	6165      	str	r5, [r4, #20]
  4056d4:	61a5      	str	r5, [r4, #24]
  4056d6:	2208      	movs	r2, #8
  4056d8:	4629      	mov	r1, r5
  4056da:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4056de:	f7fd fb0a 	bl	402cf6 <memset>
  4056e2:	6365      	str	r5, [r4, #52]	; 0x34
  4056e4:	63a5      	str	r5, [r4, #56]	; 0x38
  4056e6:	64a5      	str	r5, [r4, #72]	; 0x48
  4056e8:	64e5      	str	r5, [r4, #76]	; 0x4c
  4056ea:	4620      	mov	r0, r4
  4056ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056ee:	bf00      	nop
  4056f0:	00408110 	.word	0x00408110

004056f4 <_fwalk_reent>:
  4056f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4056f8:	4680      	mov	r8, r0
  4056fa:	4689      	mov	r9, r1
  4056fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
  405700:	2600      	movs	r6, #0
  405702:	b194      	cbz	r4, 40572a <_fwalk_reent+0x36>
  405704:	68a5      	ldr	r5, [r4, #8]
  405706:	6867      	ldr	r7, [r4, #4]
  405708:	3f01      	subs	r7, #1
  40570a:	d40c      	bmi.n	405726 <_fwalk_reent+0x32>
  40570c:	89ab      	ldrh	r3, [r5, #12]
  40570e:	2b01      	cmp	r3, #1
  405710:	d907      	bls.n	405722 <_fwalk_reent+0x2e>
  405712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  405716:	3301      	adds	r3, #1
  405718:	d003      	beq.n	405722 <_fwalk_reent+0x2e>
  40571a:	4629      	mov	r1, r5
  40571c:	4640      	mov	r0, r8
  40571e:	47c8      	blx	r9
  405720:	4306      	orrs	r6, r0
  405722:	3568      	adds	r5, #104	; 0x68
  405724:	e7f0      	b.n	405708 <_fwalk_reent+0x14>
  405726:	6824      	ldr	r4, [r4, #0]
  405728:	e7eb      	b.n	405702 <_fwalk_reent+0xe>
  40572a:	4630      	mov	r0, r6
  40572c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00405730 <rshift>:
  405730:	b5f0      	push	{r4, r5, r6, r7, lr}
  405732:	6906      	ldr	r6, [r0, #16]
  405734:	114b      	asrs	r3, r1, #5
  405736:	42b3      	cmp	r3, r6
  405738:	f100 0514 	add.w	r5, r0, #20
  40573c:	da27      	bge.n	40578e <rshift+0x5e>
  40573e:	f011 011f 	ands.w	r1, r1, #31
  405742:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  405746:	eb05 0283 	add.w	r2, r5, r3, lsl #2
  40574a:	d101      	bne.n	405750 <rshift+0x20>
  40574c:	4629      	mov	r1, r5
  40574e:	e016      	b.n	40577e <rshift+0x4e>
  405750:	1d14      	adds	r4, r2, #4
  405752:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  405756:	f1c1 0e20 	rsb	lr, r1, #32
  40575a:	40ca      	lsrs	r2, r1
  40575c:	462b      	mov	r3, r5
  40575e:	42b4      	cmp	r4, r6
  405760:	d209      	bcs.n	405776 <rshift+0x46>
  405762:	6827      	ldr	r7, [r4, #0]
  405764:	fa07 f70e 	lsl.w	r7, r7, lr
  405768:	433a      	orrs	r2, r7
  40576a:	f843 2b04 	str.w	r2, [r3], #4
  40576e:	f854 2b04 	ldr.w	r2, [r4], #4
  405772:	40ca      	lsrs	r2, r1
  405774:	e7f3      	b.n	40575e <rshift+0x2e>
  405776:	601a      	str	r2, [r3, #0]
  405778:	b152      	cbz	r2, 405790 <rshift+0x60>
  40577a:	3304      	adds	r3, #4
  40577c:	e008      	b.n	405790 <rshift+0x60>
  40577e:	42b2      	cmp	r2, r6
  405780:	460b      	mov	r3, r1
  405782:	d205      	bcs.n	405790 <rshift+0x60>
  405784:	f852 3b04 	ldr.w	r3, [r2], #4
  405788:	f841 3b04 	str.w	r3, [r1], #4
  40578c:	e7f7      	b.n	40577e <rshift+0x4e>
  40578e:	462b      	mov	r3, r5
  405790:	1b5b      	subs	r3, r3, r5
  405792:	109b      	asrs	r3, r3, #2
  405794:	6103      	str	r3, [r0, #16]
  405796:	b903      	cbnz	r3, 40579a <rshift+0x6a>
  405798:	6143      	str	r3, [r0, #20]
  40579a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040579c <__hexdig_fun>:
  40579c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  4057a0:	2b09      	cmp	r3, #9
  4057a2:	d801      	bhi.n	4057a8 <__hexdig_fun+0xc>
  4057a4:	3820      	subs	r0, #32
  4057a6:	e00a      	b.n	4057be <__hexdig_fun+0x22>
  4057a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  4057ac:	2b05      	cmp	r3, #5
  4057ae:	d801      	bhi.n	4057b4 <__hexdig_fun+0x18>
  4057b0:	3847      	subs	r0, #71	; 0x47
  4057b2:	e004      	b.n	4057be <__hexdig_fun+0x22>
  4057b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  4057b8:	2b05      	cmp	r3, #5
  4057ba:	d802      	bhi.n	4057c2 <__hexdig_fun+0x26>
  4057bc:	3827      	subs	r0, #39	; 0x27
  4057be:	b2c0      	uxtb	r0, r0
  4057c0:	4770      	bx	lr
  4057c2:	2000      	movs	r0, #0
  4057c4:	4770      	bx	lr

004057c6 <__gethex>:
  4057c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057ca:	b08b      	sub	sp, #44	; 0x2c
  4057cc:	468a      	mov	sl, r1
  4057ce:	9002      	str	r0, [sp, #8]
  4057d0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4057d2:	9306      	str	r3, [sp, #24]
  4057d4:	4690      	mov	r8, r2
  4057d6:	f000 facc 	bl	405d72 <__localeconv_l>
  4057da:	6803      	ldr	r3, [r0, #0]
  4057dc:	9303      	str	r3, [sp, #12]
  4057de:	4618      	mov	r0, r3
  4057e0:	f7fe f83e 	bl	403860 <strlen>
  4057e4:	9b03      	ldr	r3, [sp, #12]
  4057e6:	9001      	str	r0, [sp, #4]
  4057e8:	4403      	add	r3, r0
  4057ea:	f04f 0b00 	mov.w	fp, #0
  4057ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  4057f2:	9307      	str	r3, [sp, #28]
  4057f4:	f8da 3000 	ldr.w	r3, [sl]
  4057f8:	3302      	adds	r3, #2
  4057fa:	461f      	mov	r7, r3
  4057fc:	f813 0b01 	ldrb.w	r0, [r3], #1
  405800:	2830      	cmp	r0, #48	; 0x30
  405802:	d102      	bne.n	40580a <__gethex+0x44>
  405804:	f10b 0b01 	add.w	fp, fp, #1
  405808:	e7f7      	b.n	4057fa <__gethex+0x34>
  40580a:	f7ff ffc7 	bl	40579c <__hexdig_fun>
  40580e:	4604      	mov	r4, r0
  405810:	b9e0      	cbnz	r0, 40584c <__gethex+0x86>
  405812:	9a01      	ldr	r2, [sp, #4]
  405814:	9903      	ldr	r1, [sp, #12]
  405816:	4638      	mov	r0, r7
  405818:	f001 f9c5 	bl	406ba6 <strncmp>
  40581c:	2800      	cmp	r0, #0
  40581e:	d134      	bne.n	40588a <__gethex+0xc4>
  405820:	9b01      	ldr	r3, [sp, #4]
  405822:	5cf8      	ldrb	r0, [r7, r3]
  405824:	18fe      	adds	r6, r7, r3
  405826:	f7ff ffb9 	bl	40579c <__hexdig_fun>
  40582a:	b380      	cbz	r0, 40588e <__gethex+0xc8>
  40582c:	4633      	mov	r3, r6
  40582e:	7818      	ldrb	r0, [r3, #0]
  405830:	2830      	cmp	r0, #48	; 0x30
  405832:	461f      	mov	r7, r3
  405834:	f103 0301 	add.w	r3, r3, #1
  405838:	d0f9      	beq.n	40582e <__gethex+0x68>
  40583a:	f7ff ffaf 	bl	40579c <__hexdig_fun>
  40583e:	fab0 f580 	clz	r5, r0
  405842:	096d      	lsrs	r5, r5, #5
  405844:	4634      	mov	r4, r6
  405846:	f04f 0b01 	mov.w	fp, #1
  40584a:	e001      	b.n	405850 <__gethex+0x8a>
  40584c:	2500      	movs	r5, #0
  40584e:	462c      	mov	r4, r5
  405850:	463a      	mov	r2, r7
  405852:	4616      	mov	r6, r2
  405854:	3201      	adds	r2, #1
  405856:	7830      	ldrb	r0, [r6, #0]
  405858:	f7ff ffa0 	bl	40579c <__hexdig_fun>
  40585c:	2800      	cmp	r0, #0
  40585e:	d1f8      	bne.n	405852 <__gethex+0x8c>
  405860:	9a01      	ldr	r2, [sp, #4]
  405862:	9903      	ldr	r1, [sp, #12]
  405864:	4630      	mov	r0, r6
  405866:	f001 f99e 	bl	406ba6 <strncmp>
  40586a:	b950      	cbnz	r0, 405882 <__gethex+0xbc>
  40586c:	b954      	cbnz	r4, 405884 <__gethex+0xbe>
  40586e:	9b01      	ldr	r3, [sp, #4]
  405870:	18f4      	adds	r4, r6, r3
  405872:	4622      	mov	r2, r4
  405874:	4616      	mov	r6, r2
  405876:	3201      	adds	r2, #1
  405878:	7830      	ldrb	r0, [r6, #0]
  40587a:	f7ff ff8f 	bl	40579c <__hexdig_fun>
  40587e:	2800      	cmp	r0, #0
  405880:	d1f8      	bne.n	405874 <__gethex+0xae>
  405882:	b134      	cbz	r4, 405892 <__gethex+0xcc>
  405884:	1ba4      	subs	r4, r4, r6
  405886:	00a4      	lsls	r4, r4, #2
  405888:	e003      	b.n	405892 <__gethex+0xcc>
  40588a:	463e      	mov	r6, r7
  40588c:	e000      	b.n	405890 <__gethex+0xca>
  40588e:	4604      	mov	r4, r0
  405890:	2501      	movs	r5, #1
  405892:	7833      	ldrb	r3, [r6, #0]
  405894:	2b50      	cmp	r3, #80	; 0x50
  405896:	d001      	beq.n	40589c <__gethex+0xd6>
  405898:	2b70      	cmp	r3, #112	; 0x70
  40589a:	d12a      	bne.n	4058f2 <__gethex+0x12c>
  40589c:	7873      	ldrb	r3, [r6, #1]
  40589e:	2b2b      	cmp	r3, #43	; 0x2b
  4058a0:	d008      	beq.n	4058b4 <__gethex+0xee>
  4058a2:	2b2d      	cmp	r3, #45	; 0x2d
  4058a4:	d003      	beq.n	4058ae <__gethex+0xe8>
  4058a6:	1c71      	adds	r1, r6, #1
  4058a8:	f04f 0900 	mov.w	r9, #0
  4058ac:	e005      	b.n	4058ba <__gethex+0xf4>
  4058ae:	f04f 0901 	mov.w	r9, #1
  4058b2:	e001      	b.n	4058b8 <__gethex+0xf2>
  4058b4:	f04f 0900 	mov.w	r9, #0
  4058b8:	1cb1      	adds	r1, r6, #2
  4058ba:	7808      	ldrb	r0, [r1, #0]
  4058bc:	f7ff ff6e 	bl	40579c <__hexdig_fun>
  4058c0:	1e43      	subs	r3, r0, #1
  4058c2:	b2db      	uxtb	r3, r3
  4058c4:	2b18      	cmp	r3, #24
  4058c6:	d814      	bhi.n	4058f2 <__gethex+0x12c>
  4058c8:	f1a0 0210 	sub.w	r2, r0, #16
  4058cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  4058d0:	f7ff ff64 	bl	40579c <__hexdig_fun>
  4058d4:	1e43      	subs	r3, r0, #1
  4058d6:	b2db      	uxtb	r3, r3
  4058d8:	2b18      	cmp	r3, #24
  4058da:	d804      	bhi.n	4058e6 <__gethex+0x120>
  4058dc:	230a      	movs	r3, #10
  4058de:	fb03 0202 	mla	r2, r3, r2, r0
  4058e2:	3a10      	subs	r2, #16
  4058e4:	e7f2      	b.n	4058cc <__gethex+0x106>
  4058e6:	f1b9 0f00 	cmp.w	r9, #0
  4058ea:	d000      	beq.n	4058ee <__gethex+0x128>
  4058ec:	4252      	negs	r2, r2
  4058ee:	4414      	add	r4, r2
  4058f0:	e000      	b.n	4058f4 <__gethex+0x12e>
  4058f2:	4631      	mov	r1, r6
  4058f4:	f8ca 1000 	str.w	r1, [sl]
  4058f8:	b12d      	cbz	r5, 405906 <__gethex+0x140>
  4058fa:	f1bb 0f00 	cmp.w	fp, #0
  4058fe:	bf14      	ite	ne
  405900:	2000      	movne	r0, #0
  405902:	2006      	moveq	r0, #6
  405904:	e17c      	b.n	405c00 <__gethex+0x43a>
  405906:	1bf3      	subs	r3, r6, r7
  405908:	3b01      	subs	r3, #1
  40590a:	4629      	mov	r1, r5
  40590c:	2b07      	cmp	r3, #7
  40590e:	dd02      	ble.n	405916 <__gethex+0x150>
  405910:	3101      	adds	r1, #1
  405912:	105b      	asrs	r3, r3, #1
  405914:	e7fa      	b.n	40590c <__gethex+0x146>
  405916:	9802      	ldr	r0, [sp, #8]
  405918:	f000 fb0a 	bl	405f30 <_Balloc>
  40591c:	9b01      	ldr	r3, [sp, #4]
  40591e:	f100 0a14 	add.w	sl, r0, #20
  405922:	f04f 0900 	mov.w	r9, #0
  405926:	f1c3 0301 	rsb	r3, r3, #1
  40592a:	4605      	mov	r5, r0
  40592c:	f8cd a010 	str.w	sl, [sp, #16]
  405930:	46cb      	mov	fp, r9
  405932:	9308      	str	r3, [sp, #32]
  405934:	42b7      	cmp	r7, r6
  405936:	d22f      	bcs.n	405998 <__gethex+0x1d2>
  405938:	1e73      	subs	r3, r6, #1
  40593a:	9305      	str	r3, [sp, #20]
  40593c:	9a07      	ldr	r2, [sp, #28]
  40593e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  405942:	4293      	cmp	r3, r2
  405944:	d00b      	beq.n	40595e <__gethex+0x198>
  405946:	f1bb 0f20 	cmp.w	fp, #32
  40594a:	d116      	bne.n	40597a <__gethex+0x1b4>
  40594c:	9b04      	ldr	r3, [sp, #16]
  40594e:	f8c3 9000 	str.w	r9, [r3]
  405952:	3304      	adds	r3, #4
  405954:	f04f 0900 	mov.w	r9, #0
  405958:	9304      	str	r3, [sp, #16]
  40595a:	46cb      	mov	fp, r9
  40595c:	e00d      	b.n	40597a <__gethex+0x1b4>
  40595e:	9b05      	ldr	r3, [sp, #20]
  405960:	9a08      	ldr	r2, [sp, #32]
  405962:	4413      	add	r3, r2
  405964:	429f      	cmp	r7, r3
  405966:	d8ee      	bhi.n	405946 <__gethex+0x180>
  405968:	4618      	mov	r0, r3
  40596a:	9a01      	ldr	r2, [sp, #4]
  40596c:	9903      	ldr	r1, [sp, #12]
  40596e:	9309      	str	r3, [sp, #36]	; 0x24
  405970:	f001 f919 	bl	406ba6 <strncmp>
  405974:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405976:	b168      	cbz	r0, 405994 <__gethex+0x1ce>
  405978:	e7e5      	b.n	405946 <__gethex+0x180>
  40597a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
  40597e:	f7ff ff0d 	bl	40579c <__hexdig_fun>
  405982:	f000 000f 	and.w	r0, r0, #15
  405986:	fa00 f00b 	lsl.w	r0, r0, fp
  40598a:	9b05      	ldr	r3, [sp, #20]
  40598c:	ea49 0900 	orr.w	r9, r9, r0
  405990:	f10b 0b04 	add.w	fp, fp, #4
  405994:	461e      	mov	r6, r3
  405996:	e7cd      	b.n	405934 <__gethex+0x16e>
  405998:	9804      	ldr	r0, [sp, #16]
  40599a:	f840 9b04 	str.w	r9, [r0], #4
  40599e:	ebca 0000 	rsb	r0, sl, r0
  4059a2:	1080      	asrs	r0, r0, #2
  4059a4:	6128      	str	r0, [r5, #16]
  4059a6:	0147      	lsls	r7, r0, #5
  4059a8:	4648      	mov	r0, r9
  4059aa:	f000 fb86 	bl	4060ba <__hi0bits>
  4059ae:	f8d8 6000 	ldr.w	r6, [r8]
  4059b2:	1a38      	subs	r0, r7, r0
  4059b4:	42b0      	cmp	r0, r6
  4059b6:	dd26      	ble.n	405a06 <__gethex+0x240>
  4059b8:	1b87      	subs	r7, r0, r6
  4059ba:	4639      	mov	r1, r7
  4059bc:	4628      	mov	r0, r5
  4059be:	f000 fe7f 	bl	4066c0 <__any_on>
  4059c2:	b1c8      	cbz	r0, 4059f8 <__gethex+0x232>
  4059c4:	1e7b      	subs	r3, r7, #1
  4059c6:	1159      	asrs	r1, r3, #5
  4059c8:	f003 021f 	and.w	r2, r3, #31
  4059cc:	f04f 0901 	mov.w	r9, #1
  4059d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
  4059d4:	fa09 f202 	lsl.w	r2, r9, r2
  4059d8:	420a      	tst	r2, r1
  4059da:	d00e      	beq.n	4059fa <__gethex+0x234>
  4059dc:	454b      	cmp	r3, r9
  4059de:	dc02      	bgt.n	4059e6 <__gethex+0x220>
  4059e0:	f04f 0902 	mov.w	r9, #2
  4059e4:	e009      	b.n	4059fa <__gethex+0x234>
  4059e6:	1eb9      	subs	r1, r7, #2
  4059e8:	4628      	mov	r0, r5
  4059ea:	f000 fe69 	bl	4066c0 <__any_on>
  4059ee:	2800      	cmp	r0, #0
  4059f0:	d0f6      	beq.n	4059e0 <__gethex+0x21a>
  4059f2:	f04f 0903 	mov.w	r9, #3
  4059f6:	e000      	b.n	4059fa <__gethex+0x234>
  4059f8:	4681      	mov	r9, r0
  4059fa:	4639      	mov	r1, r7
  4059fc:	4628      	mov	r0, r5
  4059fe:	f7ff fe97 	bl	405730 <rshift>
  405a02:	443c      	add	r4, r7
  405a04:	e00c      	b.n	405a20 <__gethex+0x25a>
  405a06:	da09      	bge.n	405a1c <__gethex+0x256>
  405a08:	1a37      	subs	r7, r6, r0
  405a0a:	4629      	mov	r1, r5
  405a0c:	463a      	mov	r2, r7
  405a0e:	9802      	ldr	r0, [sp, #8]
  405a10:	f000 fc88 	bl	406324 <__lshift>
  405a14:	1be4      	subs	r4, r4, r7
  405a16:	4605      	mov	r5, r0
  405a18:	f100 0a14 	add.w	sl, r0, #20
  405a1c:	f04f 0900 	mov.w	r9, #0
  405a20:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405a24:	429c      	cmp	r4, r3
  405a26:	dd08      	ble.n	405a3a <__gethex+0x274>
  405a28:	9802      	ldr	r0, [sp, #8]
  405a2a:	4629      	mov	r1, r5
  405a2c:	f000 fab5 	bl	405f9a <_Bfree>
  405a30:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405a32:	2300      	movs	r3, #0
  405a34:	6013      	str	r3, [r2, #0]
  405a36:	20a3      	movs	r0, #163	; 0xa3
  405a38:	e0e2      	b.n	405c00 <__gethex+0x43a>
  405a3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
  405a3e:	4284      	cmp	r4, r0
  405a40:	da53      	bge.n	405aea <__gethex+0x324>
  405a42:	1b04      	subs	r4, r0, r4
  405a44:	42a6      	cmp	r6, r4
  405a46:	dc2e      	bgt.n	405aa6 <__gethex+0x2e0>
  405a48:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405a4c:	2b02      	cmp	r3, #2
  405a4e:	d01a      	beq.n	405a86 <__gethex+0x2c0>
  405a50:	2b03      	cmp	r3, #3
  405a52:	d01c      	beq.n	405a8e <__gethex+0x2c8>
  405a54:	2b01      	cmp	r3, #1
  405a56:	d11d      	bne.n	405a94 <__gethex+0x2ce>
  405a58:	42a6      	cmp	r6, r4
  405a5a:	d11b      	bne.n	405a94 <__gethex+0x2ce>
  405a5c:	2e01      	cmp	r6, #1
  405a5e:	dc0b      	bgt.n	405a78 <__gethex+0x2b2>
  405a60:	9a06      	ldr	r2, [sp, #24]
  405a62:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405a66:	6013      	str	r3, [r2, #0]
  405a68:	2301      	movs	r3, #1
  405a6a:	612b      	str	r3, [r5, #16]
  405a6c:	f8ca 3000 	str.w	r3, [sl]
  405a70:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405a72:	2062      	movs	r0, #98	; 0x62
  405a74:	601d      	str	r5, [r3, #0]
  405a76:	e0c3      	b.n	405c00 <__gethex+0x43a>
  405a78:	1e71      	subs	r1, r6, #1
  405a7a:	4628      	mov	r0, r5
  405a7c:	f000 fe20 	bl	4066c0 <__any_on>
  405a80:	2800      	cmp	r0, #0
  405a82:	d1ed      	bne.n	405a60 <__gethex+0x29a>
  405a84:	e006      	b.n	405a94 <__gethex+0x2ce>
  405a86:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405a88:	2b00      	cmp	r3, #0
  405a8a:	d0e9      	beq.n	405a60 <__gethex+0x29a>
  405a8c:	e002      	b.n	405a94 <__gethex+0x2ce>
  405a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405a90:	2b00      	cmp	r3, #0
  405a92:	d1e5      	bne.n	405a60 <__gethex+0x29a>
  405a94:	9802      	ldr	r0, [sp, #8]
  405a96:	4629      	mov	r1, r5
  405a98:	f000 fa7f 	bl	405f9a <_Bfree>
  405a9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405a9e:	2300      	movs	r3, #0
  405aa0:	6013      	str	r3, [r2, #0]
  405aa2:	2050      	movs	r0, #80	; 0x50
  405aa4:	e0ac      	b.n	405c00 <__gethex+0x43a>
  405aa6:	1e67      	subs	r7, r4, #1
  405aa8:	f1b9 0f00 	cmp.w	r9, #0
  405aac:	d106      	bne.n	405abc <__gethex+0x2f6>
  405aae:	b13f      	cbz	r7, 405ac0 <__gethex+0x2fa>
  405ab0:	4639      	mov	r1, r7
  405ab2:	4628      	mov	r0, r5
  405ab4:	f000 fe04 	bl	4066c0 <__any_on>
  405ab8:	4681      	mov	r9, r0
  405aba:	e001      	b.n	405ac0 <__gethex+0x2fa>
  405abc:	f04f 0901 	mov.w	r9, #1
  405ac0:	117a      	asrs	r2, r7, #5
  405ac2:	2301      	movs	r3, #1
  405ac4:	f007 071f 	and.w	r7, r7, #31
  405ac8:	fa03 f707 	lsl.w	r7, r3, r7
  405acc:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405ad0:	4621      	mov	r1, r4
  405ad2:	421f      	tst	r7, r3
  405ad4:	4628      	mov	r0, r5
  405ad6:	bf18      	it	ne
  405ad8:	f049 0902 	orrne.w	r9, r9, #2
  405adc:	1b36      	subs	r6, r6, r4
  405ade:	f7ff fe27 	bl	405730 <rshift>
  405ae2:	2702      	movs	r7, #2
  405ae4:	f8d8 4004 	ldr.w	r4, [r8, #4]
  405ae8:	e000      	b.n	405aec <__gethex+0x326>
  405aea:	2701      	movs	r7, #1
  405aec:	f1b9 0f00 	cmp.w	r9, #0
  405af0:	f000 8081 	beq.w	405bf6 <__gethex+0x430>
  405af4:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405af8:	2b02      	cmp	r3, #2
  405afa:	d00e      	beq.n	405b1a <__gethex+0x354>
  405afc:	2b03      	cmp	r3, #3
  405afe:	d010      	beq.n	405b22 <__gethex+0x35c>
  405b00:	2b01      	cmp	r3, #1
  405b02:	d176      	bne.n	405bf2 <__gethex+0x42c>
  405b04:	f019 0f02 	tst.w	r9, #2
  405b08:	d073      	beq.n	405bf2 <__gethex+0x42c>
  405b0a:	f8da 0000 	ldr.w	r0, [sl]
  405b0e:	ea49 0900 	orr.w	r9, r9, r0
  405b12:	f019 0f01 	tst.w	r9, #1
  405b16:	d107      	bne.n	405b28 <__gethex+0x362>
  405b18:	e06b      	b.n	405bf2 <__gethex+0x42c>
  405b1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b1c:	f1c3 0301 	rsb	r3, r3, #1
  405b20:	9315      	str	r3, [sp, #84]	; 0x54
  405b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b24:	2b00      	cmp	r3, #0
  405b26:	d064      	beq.n	405bf2 <__gethex+0x42c>
  405b28:	f8d5 a010 	ldr.w	sl, [r5, #16]
  405b2c:	f105 0314 	add.w	r3, r5, #20
  405b30:	ea4f 098a 	mov.w	r9, sl, lsl #2
  405b34:	eb03 0109 	add.w	r1, r3, r9
  405b38:	2000      	movs	r0, #0
  405b3a:	681a      	ldr	r2, [r3, #0]
  405b3c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  405b40:	d002      	beq.n	405b48 <__gethex+0x382>
  405b42:	3201      	adds	r2, #1
  405b44:	601a      	str	r2, [r3, #0]
  405b46:	e020      	b.n	405b8a <__gethex+0x3c4>
  405b48:	f843 0b04 	str.w	r0, [r3], #4
  405b4c:	4299      	cmp	r1, r3
  405b4e:	d8f4      	bhi.n	405b3a <__gethex+0x374>
  405b50:	68ab      	ldr	r3, [r5, #8]
  405b52:	459a      	cmp	sl, r3
  405b54:	db12      	blt.n	405b7c <__gethex+0x3b6>
  405b56:	6869      	ldr	r1, [r5, #4]
  405b58:	9802      	ldr	r0, [sp, #8]
  405b5a:	3101      	adds	r1, #1
  405b5c:	f000 f9e8 	bl	405f30 <_Balloc>
  405b60:	692a      	ldr	r2, [r5, #16]
  405b62:	3202      	adds	r2, #2
  405b64:	f105 010c 	add.w	r1, r5, #12
  405b68:	4683      	mov	fp, r0
  405b6a:	0092      	lsls	r2, r2, #2
  405b6c:	300c      	adds	r0, #12
  405b6e:	f7fd f8b7 	bl	402ce0 <memcpy>
  405b72:	4629      	mov	r1, r5
  405b74:	9802      	ldr	r0, [sp, #8]
  405b76:	f000 fa10 	bl	405f9a <_Bfree>
  405b7a:	465d      	mov	r5, fp
  405b7c:	692b      	ldr	r3, [r5, #16]
  405b7e:	1c5a      	adds	r2, r3, #1
  405b80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405b84:	612a      	str	r2, [r5, #16]
  405b86:	2201      	movs	r2, #1
  405b88:	615a      	str	r2, [r3, #20]
  405b8a:	2f02      	cmp	r7, #2
  405b8c:	f105 0214 	add.w	r2, r5, #20
  405b90:	d111      	bne.n	405bb6 <__gethex+0x3f0>
  405b92:	f8d8 3000 	ldr.w	r3, [r8]
  405b96:	3b01      	subs	r3, #1
  405b98:	429e      	cmp	r6, r3
  405b9a:	d127      	bne.n	405bec <__gethex+0x426>
  405b9c:	1171      	asrs	r1, r6, #5
  405b9e:	2301      	movs	r3, #1
  405ba0:	f006 061f 	and.w	r6, r6, #31
  405ba4:	fa03 f606 	lsl.w	r6, r3, r6
  405ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  405bac:	421e      	tst	r6, r3
  405bae:	bf0c      	ite	eq
  405bb0:	2702      	moveq	r7, #2
  405bb2:	2701      	movne	r7, #1
  405bb4:	e01a      	b.n	405bec <__gethex+0x426>
  405bb6:	692b      	ldr	r3, [r5, #16]
  405bb8:	459a      	cmp	sl, r3
  405bba:	da0a      	bge.n	405bd2 <__gethex+0x40c>
  405bbc:	2101      	movs	r1, #1
  405bbe:	4628      	mov	r0, r5
  405bc0:	f7ff fdb6 	bl	405730 <rshift>
  405bc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405bc8:	3401      	adds	r4, #1
  405bca:	429c      	cmp	r4, r3
  405bcc:	f73f af2c 	bgt.w	405a28 <__gethex+0x262>
  405bd0:	e00b      	b.n	405bea <__gethex+0x424>
  405bd2:	f016 061f 	ands.w	r6, r6, #31
  405bd6:	d008      	beq.n	405bea <__gethex+0x424>
  405bd8:	4491      	add	r9, r2
  405bda:	f1c6 0620 	rsb	r6, r6, #32
  405bde:	f859 0c04 	ldr.w	r0, [r9, #-4]
  405be2:	f000 fa6a 	bl	4060ba <__hi0bits>
  405be6:	42b0      	cmp	r0, r6
  405be8:	dbe8      	blt.n	405bbc <__gethex+0x3f6>
  405bea:	2701      	movs	r7, #1
  405bec:	f047 0720 	orr.w	r7, r7, #32
  405bf0:	e001      	b.n	405bf6 <__gethex+0x430>
  405bf2:	f047 0710 	orr.w	r7, r7, #16
  405bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405bf8:	601d      	str	r5, [r3, #0]
  405bfa:	9b06      	ldr	r3, [sp, #24]
  405bfc:	4638      	mov	r0, r7
  405bfe:	601c      	str	r4, [r3, #0]
  405c00:	b00b      	add	sp, #44	; 0x2c
  405c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405c06 <L_shift>:
  405c06:	f1c2 0208 	rsb	r2, r2, #8
  405c0a:	0092      	lsls	r2, r2, #2
  405c0c:	b570      	push	{r4, r5, r6, lr}
  405c0e:	f1c2 0620 	rsb	r6, r2, #32
  405c12:	6843      	ldr	r3, [r0, #4]
  405c14:	6805      	ldr	r5, [r0, #0]
  405c16:	fa03 f406 	lsl.w	r4, r3, r6
  405c1a:	432c      	orrs	r4, r5
  405c1c:	40d3      	lsrs	r3, r2
  405c1e:	6004      	str	r4, [r0, #0]
  405c20:	f840 3f04 	str.w	r3, [r0, #4]!
  405c24:	4288      	cmp	r0, r1
  405c26:	d3f4      	bcc.n	405c12 <L_shift+0xc>
  405c28:	bd70      	pop	{r4, r5, r6, pc}

00405c2a <__match>:
  405c2a:	b530      	push	{r4, r5, lr}
  405c2c:	6803      	ldr	r3, [r0, #0]
  405c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405c32:	3301      	adds	r3, #1
  405c34:	b14c      	cbz	r4, 405c4a <__match+0x20>
  405c36:	781a      	ldrb	r2, [r3, #0]
  405c38:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
  405c3c:	2d19      	cmp	r5, #25
  405c3e:	bf98      	it	ls
  405c40:	3220      	addls	r2, #32
  405c42:	42a2      	cmp	r2, r4
  405c44:	d0f3      	beq.n	405c2e <__match+0x4>
  405c46:	2000      	movs	r0, #0
  405c48:	bd30      	pop	{r4, r5, pc}
  405c4a:	6003      	str	r3, [r0, #0]
  405c4c:	2001      	movs	r0, #1
  405c4e:	bd30      	pop	{r4, r5, pc}

00405c50 <__hexnan>:
  405c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405c54:	680b      	ldr	r3, [r1, #0]
  405c56:	f8d0 b000 	ldr.w	fp, [r0]
  405c5a:	115e      	asrs	r6, r3, #5
  405c5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  405c60:	f013 031f 	ands.w	r3, r3, #31
  405c64:	b085      	sub	sp, #20
  405c66:	bf18      	it	ne
  405c68:	3604      	addne	r6, #4
  405c6a:	1f35      	subs	r5, r6, #4
  405c6c:	4617      	mov	r7, r2
  405c6e:	2200      	movs	r2, #0
  405c70:	4682      	mov	sl, r0
  405c72:	9301      	str	r3, [sp, #4]
  405c74:	f846 2c04 	str.w	r2, [r6, #-4]
  405c78:	46a8      	mov	r8, r5
  405c7a:	462c      	mov	r4, r5
  405c7c:	9200      	str	r2, [sp, #0]
  405c7e:	4691      	mov	r9, r2
  405c80:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
  405c84:	2900      	cmp	r1, #0
  405c86:	d03c      	beq.n	405d02 <__hexnan+0xb2>
  405c88:	4608      	mov	r0, r1
  405c8a:	9203      	str	r2, [sp, #12]
  405c8c:	9102      	str	r1, [sp, #8]
  405c8e:	f7ff fd85 	bl	40579c <__hexdig_fun>
  405c92:	9a03      	ldr	r2, [sp, #12]
  405c94:	bb00      	cbnz	r0, 405cd8 <__hexnan+0x88>
  405c96:	9902      	ldr	r1, [sp, #8]
  405c98:	2920      	cmp	r1, #32
  405c9a:	d816      	bhi.n	405cca <__hexnan+0x7a>
  405c9c:	9b00      	ldr	r3, [sp, #0]
  405c9e:	4599      	cmp	r9, r3
  405ca0:	ddee      	ble.n	405c80 <__hexnan+0x30>
  405ca2:	4544      	cmp	r4, r8
  405ca4:	d205      	bcs.n	405cb2 <__hexnan+0x62>
  405ca6:	2a07      	cmp	r2, #7
  405ca8:	dc03      	bgt.n	405cb2 <__hexnan+0x62>
  405caa:	4641      	mov	r1, r8
  405cac:	4620      	mov	r0, r4
  405cae:	f7ff ffaa 	bl	405c06 <L_shift>
  405cb2:	42bc      	cmp	r4, r7
  405cb4:	d923      	bls.n	405cfe <__hexnan+0xae>
  405cb6:	2300      	movs	r3, #0
  405cb8:	f1a4 0804 	sub.w	r8, r4, #4
  405cbc:	f844 3c04 	str.w	r3, [r4, #-4]
  405cc0:	f8cd 9000 	str.w	r9, [sp]
  405cc4:	4644      	mov	r4, r8
  405cc6:	461a      	mov	r2, r3
  405cc8:	e7da      	b.n	405c80 <__hexnan+0x30>
  405cca:	2929      	cmp	r1, #41	; 0x29
  405ccc:	d148      	bne.n	405d60 <__hexnan+0x110>
  405cce:	f10b 0301 	add.w	r3, fp, #1
  405cd2:	f8ca 3000 	str.w	r3, [sl]
  405cd6:	e014      	b.n	405d02 <__hexnan+0xb2>
  405cd8:	3201      	adds	r2, #1
  405cda:	2a08      	cmp	r2, #8
  405cdc:	f109 0901 	add.w	r9, r9, #1
  405ce0:	dd06      	ble.n	405cf0 <__hexnan+0xa0>
  405ce2:	42bc      	cmp	r4, r7
  405ce4:	d9cc      	bls.n	405c80 <__hexnan+0x30>
  405ce6:	2300      	movs	r3, #0
  405ce8:	f844 3c04 	str.w	r3, [r4, #-4]
  405cec:	2201      	movs	r2, #1
  405cee:	3c04      	subs	r4, #4
  405cf0:	6821      	ldr	r1, [r4, #0]
  405cf2:	f000 000f 	and.w	r0, r0, #15
  405cf6:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
  405cfa:	6020      	str	r0, [r4, #0]
  405cfc:	e7c0      	b.n	405c80 <__hexnan+0x30>
  405cfe:	2208      	movs	r2, #8
  405d00:	e7be      	b.n	405c80 <__hexnan+0x30>
  405d02:	f1b9 0f00 	cmp.w	r9, #0
  405d06:	d02b      	beq.n	405d60 <__hexnan+0x110>
  405d08:	4544      	cmp	r4, r8
  405d0a:	d205      	bcs.n	405d18 <__hexnan+0xc8>
  405d0c:	2a07      	cmp	r2, #7
  405d0e:	dc03      	bgt.n	405d18 <__hexnan+0xc8>
  405d10:	4641      	mov	r1, r8
  405d12:	4620      	mov	r0, r4
  405d14:	f7ff ff77 	bl	405c06 <L_shift>
  405d18:	42bc      	cmp	r4, r7
  405d1a:	d90c      	bls.n	405d36 <__hexnan+0xe6>
  405d1c:	463b      	mov	r3, r7
  405d1e:	f854 2b04 	ldr.w	r2, [r4], #4
  405d22:	f843 2b04 	str.w	r2, [r3], #4
  405d26:	42a5      	cmp	r5, r4
  405d28:	d2f9      	bcs.n	405d1e <__hexnan+0xce>
  405d2a:	2200      	movs	r2, #0
  405d2c:	f843 2b04 	str.w	r2, [r3], #4
  405d30:	429d      	cmp	r5, r3
  405d32:	d2fb      	bcs.n	405d2c <__hexnan+0xdc>
  405d34:	e00b      	b.n	405d4e <__hexnan+0xfe>
  405d36:	9b01      	ldr	r3, [sp, #4]
  405d38:	b14b      	cbz	r3, 405d4e <__hexnan+0xfe>
  405d3a:	f1c3 0220 	rsb	r2, r3, #32
  405d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  405d42:	40d3      	lsrs	r3, r2
  405d44:	f856 2c04 	ldr.w	r2, [r6, #-4]
  405d48:	4013      	ands	r3, r2
  405d4a:	f846 3c04 	str.w	r3, [r6, #-4]
  405d4e:	682b      	ldr	r3, [r5, #0]
  405d50:	b943      	cbnz	r3, 405d64 <__hexnan+0x114>
  405d52:	42bd      	cmp	r5, r7
  405d54:	d102      	bne.n	405d5c <__hexnan+0x10c>
  405d56:	2301      	movs	r3, #1
  405d58:	602b      	str	r3, [r5, #0]
  405d5a:	e003      	b.n	405d64 <__hexnan+0x114>
  405d5c:	3d04      	subs	r5, #4
  405d5e:	e7f6      	b.n	405d4e <__hexnan+0xfe>
  405d60:	2004      	movs	r0, #4
  405d62:	e000      	b.n	405d66 <__hexnan+0x116>
  405d64:	2005      	movs	r0, #5
  405d66:	b005      	add	sp, #20
  405d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405d6c <__locale_ctype_ptr_l>:
  405d6c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  405d70:	4770      	bx	lr

00405d72 <__localeconv_l>:
  405d72:	30f0      	adds	r0, #240	; 0xf0
  405d74:	4770      	bx	lr
	...

00405d78 <_localeconv_r>:
  405d78:	4b04      	ldr	r3, [pc, #16]	; (405d8c <_localeconv_r+0x14>)
  405d7a:	681b      	ldr	r3, [r3, #0]
  405d7c:	6a18      	ldr	r0, [r3, #32]
  405d7e:	4b04      	ldr	r3, [pc, #16]	; (405d90 <_localeconv_r+0x18>)
  405d80:	2800      	cmp	r0, #0
  405d82:	bf08      	it	eq
  405d84:	4618      	moveq	r0, r3
  405d86:	30f0      	adds	r0, #240	; 0xf0
  405d88:	4770      	bx	lr
  405d8a:	bf00      	nop
  405d8c:	20000078 	.word	0x20000078
  405d90:	2000007c 	.word	0x2000007c

00405d94 <__swhatbuf_r>:
  405d94:	b570      	push	{r4, r5, r6, lr}
  405d96:	460e      	mov	r6, r1
  405d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405d9c:	2900      	cmp	r1, #0
  405d9e:	b090      	sub	sp, #64	; 0x40
  405da0:	4614      	mov	r4, r2
  405da2:	461d      	mov	r5, r3
  405da4:	da06      	bge.n	405db4 <__swhatbuf_r+0x20>
  405da6:	2300      	movs	r3, #0
  405da8:	602b      	str	r3, [r5, #0]
  405daa:	89b3      	ldrh	r3, [r6, #12]
  405dac:	061a      	lsls	r2, r3, #24
  405dae:	d50e      	bpl.n	405dce <__swhatbuf_r+0x3a>
  405db0:	2340      	movs	r3, #64	; 0x40
  405db2:	e00e      	b.n	405dd2 <__swhatbuf_r+0x3e>
  405db4:	aa01      	add	r2, sp, #4
  405db6:	f000 ff3b 	bl	406c30 <_fstat_r>
  405dba:	2800      	cmp	r0, #0
  405dbc:	dbf3      	blt.n	405da6 <__swhatbuf_r+0x12>
  405dbe:	9a02      	ldr	r2, [sp, #8]
  405dc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405dc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  405dc8:	425a      	negs	r2, r3
  405dca:	415a      	adcs	r2, r3
  405dcc:	602a      	str	r2, [r5, #0]
  405dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405dd2:	2000      	movs	r0, #0
  405dd4:	6023      	str	r3, [r4, #0]
  405dd6:	b010      	add	sp, #64	; 0x40
  405dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

00405ddc <__smakebuf_r>:
  405ddc:	898b      	ldrh	r3, [r1, #12]
  405dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
  405de0:	079e      	lsls	r6, r3, #30
  405de2:	4605      	mov	r5, r0
  405de4:	460c      	mov	r4, r1
  405de6:	d410      	bmi.n	405e0a <__smakebuf_r+0x2e>
  405de8:	ab01      	add	r3, sp, #4
  405dea:	466a      	mov	r2, sp
  405dec:	f7ff ffd2 	bl	405d94 <__swhatbuf_r>
  405df0:	9900      	ldr	r1, [sp, #0]
  405df2:	4606      	mov	r6, r0
  405df4:	4628      	mov	r0, r5
  405df6:	f000 fce1 	bl	4067bc <_malloc_r>
  405dfa:	b968      	cbnz	r0, 405e18 <__smakebuf_r+0x3c>
  405dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e00:	059a      	lsls	r2, r3, #22
  405e02:	d422      	bmi.n	405e4a <__smakebuf_r+0x6e>
  405e04:	f043 0302 	orr.w	r3, r3, #2
  405e08:	81a3      	strh	r3, [r4, #12]
  405e0a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  405e0e:	6023      	str	r3, [r4, #0]
  405e10:	6123      	str	r3, [r4, #16]
  405e12:	2301      	movs	r3, #1
  405e14:	6163      	str	r3, [r4, #20]
  405e16:	e018      	b.n	405e4a <__smakebuf_r+0x6e>
  405e18:	4b0d      	ldr	r3, [pc, #52]	; (405e50 <__smakebuf_r+0x74>)
  405e1a:	62ab      	str	r3, [r5, #40]	; 0x28
  405e1c:	89a3      	ldrh	r3, [r4, #12]
  405e1e:	6020      	str	r0, [r4, #0]
  405e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405e24:	81a3      	strh	r3, [r4, #12]
  405e26:	9b00      	ldr	r3, [sp, #0]
  405e28:	6163      	str	r3, [r4, #20]
  405e2a:	9b01      	ldr	r3, [sp, #4]
  405e2c:	6120      	str	r0, [r4, #16]
  405e2e:	b14b      	cbz	r3, 405e44 <__smakebuf_r+0x68>
  405e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405e34:	4628      	mov	r0, r5
  405e36:	f000 ff0d 	bl	406c54 <_isatty_r>
  405e3a:	b118      	cbz	r0, 405e44 <__smakebuf_r+0x68>
  405e3c:	89a3      	ldrh	r3, [r4, #12]
  405e3e:	f043 0301 	orr.w	r3, r3, #1
  405e42:	81a3      	strh	r3, [r4, #12]
  405e44:	89a0      	ldrh	r0, [r4, #12]
  405e46:	4330      	orrs	r0, r6
  405e48:	81a0      	strh	r0, [r4, #12]
  405e4a:	b002      	add	sp, #8
  405e4c:	bd70      	pop	{r4, r5, r6, pc}
  405e4e:	bf00      	nop
  405e50:	0040559d 	.word	0x0040559d

00405e54 <malloc>:
  405e54:	4b02      	ldr	r3, [pc, #8]	; (405e60 <malloc+0xc>)
  405e56:	4601      	mov	r1, r0
  405e58:	6818      	ldr	r0, [r3, #0]
  405e5a:	f000 bcaf 	b.w	4067bc <_malloc_r>
  405e5e:	bf00      	nop
  405e60:	20000078 	.word	0x20000078

00405e64 <__ascii_mbtowc>:
  405e64:	b082      	sub	sp, #8
  405e66:	b901      	cbnz	r1, 405e6a <__ascii_mbtowc+0x6>
  405e68:	a901      	add	r1, sp, #4
  405e6a:	b13a      	cbz	r2, 405e7c <__ascii_mbtowc+0x18>
  405e6c:	b143      	cbz	r3, 405e80 <__ascii_mbtowc+0x1c>
  405e6e:	7813      	ldrb	r3, [r2, #0]
  405e70:	600b      	str	r3, [r1, #0]
  405e72:	7812      	ldrb	r2, [r2, #0]
  405e74:	1c10      	adds	r0, r2, #0
  405e76:	bf18      	it	ne
  405e78:	2001      	movne	r0, #1
  405e7a:	e003      	b.n	405e84 <__ascii_mbtowc+0x20>
  405e7c:	4610      	mov	r0, r2
  405e7e:	e001      	b.n	405e84 <__ascii_mbtowc+0x20>
  405e80:	f06f 0001 	mvn.w	r0, #1
  405e84:	b002      	add	sp, #8
  405e86:	4770      	bx	lr
	...

00405e90 <memchr>:
  405e90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405e94:	2a10      	cmp	r2, #16
  405e96:	db2b      	blt.n	405ef0 <memchr+0x60>
  405e98:	f010 0f07 	tst.w	r0, #7
  405e9c:	d008      	beq.n	405eb0 <memchr+0x20>
  405e9e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ea2:	3a01      	subs	r2, #1
  405ea4:	428b      	cmp	r3, r1
  405ea6:	d02d      	beq.n	405f04 <memchr+0x74>
  405ea8:	f010 0f07 	tst.w	r0, #7
  405eac:	b342      	cbz	r2, 405f00 <memchr+0x70>
  405eae:	d1f6      	bne.n	405e9e <memchr+0xe>
  405eb0:	b4f0      	push	{r4, r5, r6, r7}
  405eb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405eb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405eba:	f022 0407 	bic.w	r4, r2, #7
  405ebe:	f07f 0700 	mvns.w	r7, #0
  405ec2:	2300      	movs	r3, #0
  405ec4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405ec8:	3c08      	subs	r4, #8
  405eca:	ea85 0501 	eor.w	r5, r5, r1
  405ece:	ea86 0601 	eor.w	r6, r6, r1
  405ed2:	fa85 f547 	uadd8	r5, r5, r7
  405ed6:	faa3 f587 	sel	r5, r3, r7
  405eda:	fa86 f647 	uadd8	r6, r6, r7
  405ede:	faa5 f687 	sel	r6, r5, r7
  405ee2:	b98e      	cbnz	r6, 405f08 <memchr+0x78>
  405ee4:	d1ee      	bne.n	405ec4 <memchr+0x34>
  405ee6:	bcf0      	pop	{r4, r5, r6, r7}
  405ee8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405eec:	f002 0207 	and.w	r2, r2, #7
  405ef0:	b132      	cbz	r2, 405f00 <memchr+0x70>
  405ef2:	f810 3b01 	ldrb.w	r3, [r0], #1
  405ef6:	3a01      	subs	r2, #1
  405ef8:	ea83 0301 	eor.w	r3, r3, r1
  405efc:	b113      	cbz	r3, 405f04 <memchr+0x74>
  405efe:	d1f8      	bne.n	405ef2 <memchr+0x62>
  405f00:	2000      	movs	r0, #0
  405f02:	4770      	bx	lr
  405f04:	3801      	subs	r0, #1
  405f06:	4770      	bx	lr
  405f08:	2d00      	cmp	r5, #0
  405f0a:	bf06      	itte	eq
  405f0c:	4635      	moveq	r5, r6
  405f0e:	3803      	subeq	r0, #3
  405f10:	3807      	subne	r0, #7
  405f12:	f015 0f01 	tst.w	r5, #1
  405f16:	d107      	bne.n	405f28 <memchr+0x98>
  405f18:	3001      	adds	r0, #1
  405f1a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405f1e:	bf02      	ittt	eq
  405f20:	3001      	addeq	r0, #1
  405f22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405f26:	3001      	addeq	r0, #1
  405f28:	bcf0      	pop	{r4, r5, r6, r7}
  405f2a:	3801      	subs	r0, #1
  405f2c:	4770      	bx	lr
  405f2e:	bf00      	nop

00405f30 <_Balloc>:
  405f30:	b570      	push	{r4, r5, r6, lr}
  405f32:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405f34:	4604      	mov	r4, r0
  405f36:	460e      	mov	r6, r1
  405f38:	b93d      	cbnz	r5, 405f4a <_Balloc+0x1a>
  405f3a:	2010      	movs	r0, #16
  405f3c:	f7ff ff8a 	bl	405e54 <malloc>
  405f40:	6260      	str	r0, [r4, #36]	; 0x24
  405f42:	6045      	str	r5, [r0, #4]
  405f44:	6085      	str	r5, [r0, #8]
  405f46:	6005      	str	r5, [r0, #0]
  405f48:	60c5      	str	r5, [r0, #12]
  405f4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  405f4c:	68eb      	ldr	r3, [r5, #12]
  405f4e:	b143      	cbz	r3, 405f62 <_Balloc+0x32>
  405f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405f52:	68db      	ldr	r3, [r3, #12]
  405f54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405f58:	b178      	cbz	r0, 405f7a <_Balloc+0x4a>
  405f5a:	6802      	ldr	r2, [r0, #0]
  405f5c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  405f60:	e017      	b.n	405f92 <_Balloc+0x62>
  405f62:	2221      	movs	r2, #33	; 0x21
  405f64:	2104      	movs	r1, #4
  405f66:	4620      	mov	r0, r4
  405f68:	f000 fbcc 	bl	406704 <_calloc_r>
  405f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405f6e:	60e8      	str	r0, [r5, #12]
  405f70:	68db      	ldr	r3, [r3, #12]
  405f72:	2b00      	cmp	r3, #0
  405f74:	d1ec      	bne.n	405f50 <_Balloc+0x20>
  405f76:	2000      	movs	r0, #0
  405f78:	bd70      	pop	{r4, r5, r6, pc}
  405f7a:	2101      	movs	r1, #1
  405f7c:	fa01 f506 	lsl.w	r5, r1, r6
  405f80:	1d6a      	adds	r2, r5, #5
  405f82:	0092      	lsls	r2, r2, #2
  405f84:	4620      	mov	r0, r4
  405f86:	f000 fbbd 	bl	406704 <_calloc_r>
  405f8a:	2800      	cmp	r0, #0
  405f8c:	d0f3      	beq.n	405f76 <_Balloc+0x46>
  405f8e:	6046      	str	r6, [r0, #4]
  405f90:	6085      	str	r5, [r0, #8]
  405f92:	2300      	movs	r3, #0
  405f94:	6103      	str	r3, [r0, #16]
  405f96:	60c3      	str	r3, [r0, #12]
  405f98:	bd70      	pop	{r4, r5, r6, pc}

00405f9a <_Bfree>:
  405f9a:	b570      	push	{r4, r5, r6, lr}
  405f9c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  405f9e:	4606      	mov	r6, r0
  405fa0:	460d      	mov	r5, r1
  405fa2:	b93c      	cbnz	r4, 405fb4 <_Bfree+0x1a>
  405fa4:	2010      	movs	r0, #16
  405fa6:	f7ff ff55 	bl	405e54 <malloc>
  405faa:	6270      	str	r0, [r6, #36]	; 0x24
  405fac:	6044      	str	r4, [r0, #4]
  405fae:	6084      	str	r4, [r0, #8]
  405fb0:	6004      	str	r4, [r0, #0]
  405fb2:	60c4      	str	r4, [r0, #12]
  405fb4:	b13d      	cbz	r5, 405fc6 <_Bfree+0x2c>
  405fb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
  405fb8:	686a      	ldr	r2, [r5, #4]
  405fba:	68db      	ldr	r3, [r3, #12]
  405fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405fc0:	6029      	str	r1, [r5, #0]
  405fc2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  405fc6:	bd70      	pop	{r4, r5, r6, pc}

00405fc8 <__multadd>:
  405fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405fcc:	690d      	ldr	r5, [r1, #16]
  405fce:	461f      	mov	r7, r3
  405fd0:	4606      	mov	r6, r0
  405fd2:	460c      	mov	r4, r1
  405fd4:	f101 0e14 	add.w	lr, r1, #20
  405fd8:	2300      	movs	r3, #0
  405fda:	f8de 0000 	ldr.w	r0, [lr]
  405fde:	b281      	uxth	r1, r0
  405fe0:	fb02 7101 	mla	r1, r2, r1, r7
  405fe4:	0c0f      	lsrs	r7, r1, #16
  405fe6:	0c00      	lsrs	r0, r0, #16
  405fe8:	fb02 7000 	mla	r0, r2, r0, r7
  405fec:	b289      	uxth	r1, r1
  405fee:	3301      	adds	r3, #1
  405ff0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  405ff4:	429d      	cmp	r5, r3
  405ff6:	ea4f 4710 	mov.w	r7, r0, lsr #16
  405ffa:	f84e 1b04 	str.w	r1, [lr], #4
  405ffe:	dcec      	bgt.n	405fda <__multadd+0x12>
  406000:	b1d7      	cbz	r7, 406038 <__multadd+0x70>
  406002:	68a3      	ldr	r3, [r4, #8]
  406004:	429d      	cmp	r5, r3
  406006:	db12      	blt.n	40602e <__multadd+0x66>
  406008:	6861      	ldr	r1, [r4, #4]
  40600a:	4630      	mov	r0, r6
  40600c:	3101      	adds	r1, #1
  40600e:	f7ff ff8f 	bl	405f30 <_Balloc>
  406012:	6922      	ldr	r2, [r4, #16]
  406014:	3202      	adds	r2, #2
  406016:	f104 010c 	add.w	r1, r4, #12
  40601a:	4680      	mov	r8, r0
  40601c:	0092      	lsls	r2, r2, #2
  40601e:	300c      	adds	r0, #12
  406020:	f7fc fe5e 	bl	402ce0 <memcpy>
  406024:	4621      	mov	r1, r4
  406026:	4630      	mov	r0, r6
  406028:	f7ff ffb7 	bl	405f9a <_Bfree>
  40602c:	4644      	mov	r4, r8
  40602e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  406032:	3501      	adds	r5, #1
  406034:	615f      	str	r7, [r3, #20]
  406036:	6125      	str	r5, [r4, #16]
  406038:	4620      	mov	r0, r4
  40603a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040603e <__s2b>:
  40603e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406042:	460c      	mov	r4, r1
  406044:	4615      	mov	r5, r2
  406046:	461f      	mov	r7, r3
  406048:	2209      	movs	r2, #9
  40604a:	3308      	adds	r3, #8
  40604c:	4606      	mov	r6, r0
  40604e:	fb93 f3f2 	sdiv	r3, r3, r2
  406052:	2100      	movs	r1, #0
  406054:	2201      	movs	r2, #1
  406056:	429a      	cmp	r2, r3
  406058:	da02      	bge.n	406060 <__s2b+0x22>
  40605a:	0052      	lsls	r2, r2, #1
  40605c:	3101      	adds	r1, #1
  40605e:	e7fa      	b.n	406056 <__s2b+0x18>
  406060:	4630      	mov	r0, r6
  406062:	f7ff ff65 	bl	405f30 <_Balloc>
  406066:	9b08      	ldr	r3, [sp, #32]
  406068:	6143      	str	r3, [r0, #20]
  40606a:	2d09      	cmp	r5, #9
  40606c:	f04f 0301 	mov.w	r3, #1
  406070:	6103      	str	r3, [r0, #16]
  406072:	dd11      	ble.n	406098 <__s2b+0x5a>
  406074:	f104 0809 	add.w	r8, r4, #9
  406078:	46c1      	mov	r9, r8
  40607a:	442c      	add	r4, r5
  40607c:	f819 3b01 	ldrb.w	r3, [r9], #1
  406080:	4601      	mov	r1, r0
  406082:	3b30      	subs	r3, #48	; 0x30
  406084:	220a      	movs	r2, #10
  406086:	4630      	mov	r0, r6
  406088:	f7ff ff9e 	bl	405fc8 <__multadd>
  40608c:	45a1      	cmp	r9, r4
  40608e:	d1f5      	bne.n	40607c <__s2b+0x3e>
  406090:	eb08 0405 	add.w	r4, r8, r5
  406094:	3c08      	subs	r4, #8
  406096:	e001      	b.n	40609c <__s2b+0x5e>
  406098:	340a      	adds	r4, #10
  40609a:	2509      	movs	r5, #9
  40609c:	1b2d      	subs	r5, r5, r4
  40609e:	1963      	adds	r3, r4, r5
  4060a0:	429f      	cmp	r7, r3
  4060a2:	dd08      	ble.n	4060b6 <__s2b+0x78>
  4060a4:	f814 3b01 	ldrb.w	r3, [r4], #1
  4060a8:	4601      	mov	r1, r0
  4060aa:	3b30      	subs	r3, #48	; 0x30
  4060ac:	220a      	movs	r2, #10
  4060ae:	4630      	mov	r0, r6
  4060b0:	f7ff ff8a 	bl	405fc8 <__multadd>
  4060b4:	e7f3      	b.n	40609e <__s2b+0x60>
  4060b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004060ba <__hi0bits>:
  4060ba:	0c03      	lsrs	r3, r0, #16
  4060bc:	041b      	lsls	r3, r3, #16
  4060be:	b913      	cbnz	r3, 4060c6 <__hi0bits+0xc>
  4060c0:	0400      	lsls	r0, r0, #16
  4060c2:	2310      	movs	r3, #16
  4060c4:	e000      	b.n	4060c8 <__hi0bits+0xe>
  4060c6:	2300      	movs	r3, #0
  4060c8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4060cc:	bf04      	itt	eq
  4060ce:	0200      	lsleq	r0, r0, #8
  4060d0:	3308      	addeq	r3, #8
  4060d2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4060d6:	bf04      	itt	eq
  4060d8:	0100      	lsleq	r0, r0, #4
  4060da:	3304      	addeq	r3, #4
  4060dc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4060e0:	bf04      	itt	eq
  4060e2:	0080      	lsleq	r0, r0, #2
  4060e4:	3302      	addeq	r3, #2
  4060e6:	2800      	cmp	r0, #0
  4060e8:	db03      	blt.n	4060f2 <__hi0bits+0x38>
  4060ea:	0042      	lsls	r2, r0, #1
  4060ec:	d503      	bpl.n	4060f6 <__hi0bits+0x3c>
  4060ee:	1c58      	adds	r0, r3, #1
  4060f0:	4770      	bx	lr
  4060f2:	4618      	mov	r0, r3
  4060f4:	4770      	bx	lr
  4060f6:	2020      	movs	r0, #32
  4060f8:	4770      	bx	lr

004060fa <__lo0bits>:
  4060fa:	6803      	ldr	r3, [r0, #0]
  4060fc:	f013 0207 	ands.w	r2, r3, #7
  406100:	d00b      	beq.n	40611a <__lo0bits+0x20>
  406102:	07d9      	lsls	r1, r3, #31
  406104:	d422      	bmi.n	40614c <__lo0bits+0x52>
  406106:	079a      	lsls	r2, r3, #30
  406108:	bf4b      	itete	mi
  40610a:	085b      	lsrmi	r3, r3, #1
  40610c:	089b      	lsrpl	r3, r3, #2
  40610e:	6003      	strmi	r3, [r0, #0]
  406110:	6003      	strpl	r3, [r0, #0]
  406112:	bf4c      	ite	mi
  406114:	2001      	movmi	r0, #1
  406116:	2002      	movpl	r0, #2
  406118:	4770      	bx	lr
  40611a:	b299      	uxth	r1, r3
  40611c:	b909      	cbnz	r1, 406122 <__lo0bits+0x28>
  40611e:	0c1b      	lsrs	r3, r3, #16
  406120:	2210      	movs	r2, #16
  406122:	f013 0fff 	tst.w	r3, #255	; 0xff
  406126:	bf04      	itt	eq
  406128:	0a1b      	lsreq	r3, r3, #8
  40612a:	3208      	addeq	r2, #8
  40612c:	0719      	lsls	r1, r3, #28
  40612e:	bf04      	itt	eq
  406130:	091b      	lsreq	r3, r3, #4
  406132:	3204      	addeq	r2, #4
  406134:	0799      	lsls	r1, r3, #30
  406136:	bf04      	itt	eq
  406138:	089b      	lsreq	r3, r3, #2
  40613a:	3202      	addeq	r2, #2
  40613c:	07d9      	lsls	r1, r3, #31
  40613e:	d402      	bmi.n	406146 <__lo0bits+0x4c>
  406140:	085b      	lsrs	r3, r3, #1
  406142:	d005      	beq.n	406150 <__lo0bits+0x56>
  406144:	3201      	adds	r2, #1
  406146:	6003      	str	r3, [r0, #0]
  406148:	4610      	mov	r0, r2
  40614a:	4770      	bx	lr
  40614c:	2000      	movs	r0, #0
  40614e:	4770      	bx	lr
  406150:	2020      	movs	r0, #32
  406152:	4770      	bx	lr

00406154 <__i2b>:
  406154:	b510      	push	{r4, lr}
  406156:	460c      	mov	r4, r1
  406158:	2101      	movs	r1, #1
  40615a:	f7ff fee9 	bl	405f30 <_Balloc>
  40615e:	2201      	movs	r2, #1
  406160:	6144      	str	r4, [r0, #20]
  406162:	6102      	str	r2, [r0, #16]
  406164:	bd10      	pop	{r4, pc}

00406166 <__multiply>:
  406166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40616a:	4614      	mov	r4, r2
  40616c:	690a      	ldr	r2, [r1, #16]
  40616e:	6923      	ldr	r3, [r4, #16]
  406170:	429a      	cmp	r2, r3
  406172:	bfb8      	it	lt
  406174:	460b      	movlt	r3, r1
  406176:	4688      	mov	r8, r1
  406178:	bfbc      	itt	lt
  40617a:	46a0      	movlt	r8, r4
  40617c:	461c      	movlt	r4, r3
  40617e:	f8d8 7010 	ldr.w	r7, [r8, #16]
  406182:	f8d4 9010 	ldr.w	r9, [r4, #16]
  406186:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40618a:	f8d8 1004 	ldr.w	r1, [r8, #4]
  40618e:	eb07 0609 	add.w	r6, r7, r9
  406192:	429e      	cmp	r6, r3
  406194:	bfc8      	it	gt
  406196:	3101      	addgt	r1, #1
  406198:	f7ff feca 	bl	405f30 <_Balloc>
  40619c:	f100 0514 	add.w	r5, r0, #20
  4061a0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  4061a4:	462b      	mov	r3, r5
  4061a6:	2200      	movs	r2, #0
  4061a8:	4563      	cmp	r3, ip
  4061aa:	d202      	bcs.n	4061b2 <__multiply+0x4c>
  4061ac:	f843 2b04 	str.w	r2, [r3], #4
  4061b0:	e7fa      	b.n	4061a8 <__multiply+0x42>
  4061b2:	f104 0214 	add.w	r2, r4, #20
  4061b6:	f108 0114 	add.w	r1, r8, #20
  4061ba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  4061be:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4061c2:	9300      	str	r3, [sp, #0]
  4061c4:	9b00      	ldr	r3, [sp, #0]
  4061c6:	9201      	str	r2, [sp, #4]
  4061c8:	4293      	cmp	r3, r2
  4061ca:	d957      	bls.n	40627c <__multiply+0x116>
  4061cc:	f8b2 b000 	ldrh.w	fp, [r2]
  4061d0:	f1bb 0f00 	cmp.w	fp, #0
  4061d4:	d023      	beq.n	40621e <__multiply+0xb8>
  4061d6:	4689      	mov	r9, r1
  4061d8:	46ae      	mov	lr, r5
  4061da:	f04f 0800 	mov.w	r8, #0
  4061de:	f859 4b04 	ldr.w	r4, [r9], #4
  4061e2:	f8be a000 	ldrh.w	sl, [lr]
  4061e6:	b2a3      	uxth	r3, r4
  4061e8:	fb0b a303 	mla	r3, fp, r3, sl
  4061ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  4061f0:	f8de 4000 	ldr.w	r4, [lr]
  4061f4:	4443      	add	r3, r8
  4061f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4061fa:	fb0b 840a 	mla	r4, fp, sl, r8
  4061fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  406202:	46f2      	mov	sl, lr
  406204:	b29b      	uxth	r3, r3
  406206:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40620a:	454f      	cmp	r7, r9
  40620c:	ea4f 4814 	mov.w	r8, r4, lsr #16
  406210:	f84a 3b04 	str.w	r3, [sl], #4
  406214:	d901      	bls.n	40621a <__multiply+0xb4>
  406216:	46d6      	mov	lr, sl
  406218:	e7e1      	b.n	4061de <__multiply+0x78>
  40621a:	f8ce 8004 	str.w	r8, [lr, #4]
  40621e:	9b01      	ldr	r3, [sp, #4]
  406220:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  406224:	3204      	adds	r2, #4
  406226:	f1ba 0f00 	cmp.w	sl, #0
  40622a:	d021      	beq.n	406270 <__multiply+0x10a>
  40622c:	682b      	ldr	r3, [r5, #0]
  40622e:	462c      	mov	r4, r5
  406230:	4689      	mov	r9, r1
  406232:	f04f 0800 	mov.w	r8, #0
  406236:	f8b9 e000 	ldrh.w	lr, [r9]
  40623a:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  40623e:	fb0a be0e 	mla	lr, sl, lr, fp
  406242:	44f0      	add	r8, lr
  406244:	46a3      	mov	fp, r4
  406246:	b29b      	uxth	r3, r3
  406248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40624c:	f84b 3b04 	str.w	r3, [fp], #4
  406250:	f859 3b04 	ldr.w	r3, [r9], #4
  406254:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  406258:	0c1b      	lsrs	r3, r3, #16
  40625a:	fb0a e303 	mla	r3, sl, r3, lr
  40625e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  406262:	454f      	cmp	r7, r9
  406264:	ea4f 4813 	mov.w	r8, r3, lsr #16
  406268:	d901      	bls.n	40626e <__multiply+0x108>
  40626a:	465c      	mov	r4, fp
  40626c:	e7e3      	b.n	406236 <__multiply+0xd0>
  40626e:	6063      	str	r3, [r4, #4]
  406270:	3504      	adds	r5, #4
  406272:	e7a7      	b.n	4061c4 <__multiply+0x5e>
  406274:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  406278:	b913      	cbnz	r3, 406280 <__multiply+0x11a>
  40627a:	3e01      	subs	r6, #1
  40627c:	2e00      	cmp	r6, #0
  40627e:	dcf9      	bgt.n	406274 <__multiply+0x10e>
  406280:	6106      	str	r6, [r0, #16]
  406282:	b003      	add	sp, #12
  406284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406288 <__pow5mult>:
  406288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40628c:	4615      	mov	r5, r2
  40628e:	f012 0203 	ands.w	r2, r2, #3
  406292:	4606      	mov	r6, r0
  406294:	460f      	mov	r7, r1
  406296:	d007      	beq.n	4062a8 <__pow5mult+0x20>
  406298:	3a01      	subs	r2, #1
  40629a:	4c21      	ldr	r4, [pc, #132]	; (406320 <__pow5mult+0x98>)
  40629c:	2300      	movs	r3, #0
  40629e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4062a2:	f7ff fe91 	bl	405fc8 <__multadd>
  4062a6:	4607      	mov	r7, r0
  4062a8:	10ad      	asrs	r5, r5, #2
  4062aa:	d036      	beq.n	40631a <__pow5mult+0x92>
  4062ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4062ae:	b93c      	cbnz	r4, 4062c0 <__pow5mult+0x38>
  4062b0:	2010      	movs	r0, #16
  4062b2:	f7ff fdcf 	bl	405e54 <malloc>
  4062b6:	6270      	str	r0, [r6, #36]	; 0x24
  4062b8:	6044      	str	r4, [r0, #4]
  4062ba:	6084      	str	r4, [r0, #8]
  4062bc:	6004      	str	r4, [r0, #0]
  4062be:	60c4      	str	r4, [r0, #12]
  4062c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  4062c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
  4062c8:	b94c      	cbnz	r4, 4062de <__pow5mult+0x56>
  4062ca:	f240 2171 	movw	r1, #625	; 0x271
  4062ce:	4630      	mov	r0, r6
  4062d0:	f7ff ff40 	bl	406154 <__i2b>
  4062d4:	2300      	movs	r3, #0
  4062d6:	f8c8 0008 	str.w	r0, [r8, #8]
  4062da:	4604      	mov	r4, r0
  4062dc:	6003      	str	r3, [r0, #0]
  4062de:	f04f 0800 	mov.w	r8, #0
  4062e2:	07eb      	lsls	r3, r5, #31
  4062e4:	d50a      	bpl.n	4062fc <__pow5mult+0x74>
  4062e6:	4639      	mov	r1, r7
  4062e8:	4622      	mov	r2, r4
  4062ea:	4630      	mov	r0, r6
  4062ec:	f7ff ff3b 	bl	406166 <__multiply>
  4062f0:	4639      	mov	r1, r7
  4062f2:	4681      	mov	r9, r0
  4062f4:	4630      	mov	r0, r6
  4062f6:	f7ff fe50 	bl	405f9a <_Bfree>
  4062fa:	464f      	mov	r7, r9
  4062fc:	106d      	asrs	r5, r5, #1
  4062fe:	d00c      	beq.n	40631a <__pow5mult+0x92>
  406300:	6820      	ldr	r0, [r4, #0]
  406302:	b108      	cbz	r0, 406308 <__pow5mult+0x80>
  406304:	4604      	mov	r4, r0
  406306:	e7ec      	b.n	4062e2 <__pow5mult+0x5a>
  406308:	4622      	mov	r2, r4
  40630a:	4621      	mov	r1, r4
  40630c:	4630      	mov	r0, r6
  40630e:	f7ff ff2a 	bl	406166 <__multiply>
  406312:	6020      	str	r0, [r4, #0]
  406314:	f8c0 8000 	str.w	r8, [r0]
  406318:	e7f4      	b.n	406304 <__pow5mult+0x7c>
  40631a:	4638      	mov	r0, r7
  40631c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406320:	00408308 	.word	0x00408308

00406324 <__lshift>:
  406324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406328:	460c      	mov	r4, r1
  40632a:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40632e:	6926      	ldr	r6, [r4, #16]
  406330:	6849      	ldr	r1, [r1, #4]
  406332:	68a3      	ldr	r3, [r4, #8]
  406334:	4456      	add	r6, sl
  406336:	4607      	mov	r7, r0
  406338:	4691      	mov	r9, r2
  40633a:	1c75      	adds	r5, r6, #1
  40633c:	42ab      	cmp	r3, r5
  40633e:	da02      	bge.n	406346 <__lshift+0x22>
  406340:	3101      	adds	r1, #1
  406342:	005b      	lsls	r3, r3, #1
  406344:	e7fa      	b.n	40633c <__lshift+0x18>
  406346:	4638      	mov	r0, r7
  406348:	f7ff fdf2 	bl	405f30 <_Balloc>
  40634c:	2300      	movs	r3, #0
  40634e:	4680      	mov	r8, r0
  406350:	f100 0114 	add.w	r1, r0, #20
  406354:	461a      	mov	r2, r3
  406356:	4553      	cmp	r3, sl
  406358:	da03      	bge.n	406362 <__lshift+0x3e>
  40635a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40635e:	3301      	adds	r3, #1
  406360:	e7f9      	b.n	406356 <__lshift+0x32>
  406362:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  406366:	6920      	ldr	r0, [r4, #16]
  406368:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40636c:	f019 091f 	ands.w	r9, r9, #31
  406370:	f104 0114 	add.w	r1, r4, #20
  406374:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  406378:	d014      	beq.n	4063a4 <__lshift+0x80>
  40637a:	f1c9 0c20 	rsb	ip, r9, #32
  40637e:	2200      	movs	r2, #0
  406380:	6808      	ldr	r0, [r1, #0]
  406382:	fa00 f009 	lsl.w	r0, r0, r9
  406386:	4302      	orrs	r2, r0
  406388:	469a      	mov	sl, r3
  40638a:	f843 2b04 	str.w	r2, [r3], #4
  40638e:	f851 2b04 	ldr.w	r2, [r1], #4
  406392:	458e      	cmp	lr, r1
  406394:	fa22 f20c 	lsr.w	r2, r2, ip
  406398:	d8f2      	bhi.n	406380 <__lshift+0x5c>
  40639a:	f8ca 2004 	str.w	r2, [sl, #4]
  40639e:	b142      	cbz	r2, 4063b2 <__lshift+0x8e>
  4063a0:	1cb5      	adds	r5, r6, #2
  4063a2:	e006      	b.n	4063b2 <__lshift+0x8e>
  4063a4:	3b04      	subs	r3, #4
  4063a6:	f851 2b04 	ldr.w	r2, [r1], #4
  4063aa:	f843 2f04 	str.w	r2, [r3, #4]!
  4063ae:	458e      	cmp	lr, r1
  4063b0:	d8f9      	bhi.n	4063a6 <__lshift+0x82>
  4063b2:	3d01      	subs	r5, #1
  4063b4:	4638      	mov	r0, r7
  4063b6:	f8c8 5010 	str.w	r5, [r8, #16]
  4063ba:	4621      	mov	r1, r4
  4063bc:	f7ff fded 	bl	405f9a <_Bfree>
  4063c0:	4640      	mov	r0, r8
  4063c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004063c6 <__mcmp>:
  4063c6:	6903      	ldr	r3, [r0, #16]
  4063c8:	690a      	ldr	r2, [r1, #16]
  4063ca:	1a9b      	subs	r3, r3, r2
  4063cc:	b510      	push	{r4, lr}
  4063ce:	d111      	bne.n	4063f4 <__mcmp+0x2e>
  4063d0:	0092      	lsls	r2, r2, #2
  4063d2:	3014      	adds	r0, #20
  4063d4:	3114      	adds	r1, #20
  4063d6:	1883      	adds	r3, r0, r2
  4063d8:	440a      	add	r2, r1
  4063da:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4063de:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  4063e2:	428c      	cmp	r4, r1
  4063e4:	d002      	beq.n	4063ec <__mcmp+0x26>
  4063e6:	d307      	bcc.n	4063f8 <__mcmp+0x32>
  4063e8:	2001      	movs	r0, #1
  4063ea:	bd10      	pop	{r4, pc}
  4063ec:	4298      	cmp	r0, r3
  4063ee:	d3f4      	bcc.n	4063da <__mcmp+0x14>
  4063f0:	2000      	movs	r0, #0
  4063f2:	bd10      	pop	{r4, pc}
  4063f4:	4618      	mov	r0, r3
  4063f6:	bd10      	pop	{r4, pc}
  4063f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4063fc:	bd10      	pop	{r4, pc}

004063fe <__mdiff>:
  4063fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406402:	460c      	mov	r4, r1
  406404:	4607      	mov	r7, r0
  406406:	4611      	mov	r1, r2
  406408:	4620      	mov	r0, r4
  40640a:	4615      	mov	r5, r2
  40640c:	f7ff ffdb 	bl	4063c6 <__mcmp>
  406410:	1e06      	subs	r6, r0, #0
  406412:	d108      	bne.n	406426 <__mdiff+0x28>
  406414:	4631      	mov	r1, r6
  406416:	4638      	mov	r0, r7
  406418:	f7ff fd8a 	bl	405f30 <_Balloc>
  40641c:	2301      	movs	r3, #1
  40641e:	6103      	str	r3, [r0, #16]
  406420:	6146      	str	r6, [r0, #20]
  406422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406426:	bfbc      	itt	lt
  406428:	4623      	movlt	r3, r4
  40642a:	462c      	movlt	r4, r5
  40642c:	4638      	mov	r0, r7
  40642e:	6861      	ldr	r1, [r4, #4]
  406430:	bfba      	itte	lt
  406432:	461d      	movlt	r5, r3
  406434:	2601      	movlt	r6, #1
  406436:	2600      	movge	r6, #0
  406438:	f7ff fd7a 	bl	405f30 <_Balloc>
  40643c:	692b      	ldr	r3, [r5, #16]
  40643e:	60c6      	str	r6, [r0, #12]
  406440:	6926      	ldr	r6, [r4, #16]
  406442:	f105 0914 	add.w	r9, r5, #20
  406446:	3414      	adds	r4, #20
  406448:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  40644c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  406450:	f100 0514 	add.w	r5, r0, #20
  406454:	f04f 0c00 	mov.w	ip, #0
  406458:	f854 3b04 	ldr.w	r3, [r4], #4
  40645c:	f859 2b04 	ldr.w	r2, [r9], #4
  406460:	fa1c f183 	uxtah	r1, ip, r3
  406464:	fa1f fe82 	uxth.w	lr, r2
  406468:	0c12      	lsrs	r2, r2, #16
  40646a:	ebce 0101 	rsb	r1, lr, r1
  40646e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  406472:	eb03 4321 	add.w	r3, r3, r1, asr #16
  406476:	b289      	uxth	r1, r1
  406478:	ea4f 4c23 	mov.w	ip, r3, asr #16
  40647c:	45c8      	cmp	r8, r9
  40647e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  406482:	46a6      	mov	lr, r4
  406484:	f845 3b04 	str.w	r3, [r5], #4
  406488:	d8e6      	bhi.n	406458 <__mdiff+0x5a>
  40648a:	45be      	cmp	lr, r7
  40648c:	d20e      	bcs.n	4064ac <__mdiff+0xae>
  40648e:	f85e 1b04 	ldr.w	r1, [lr], #4
  406492:	fa1c f281 	uxtah	r2, ip, r1
  406496:	1413      	asrs	r3, r2, #16
  406498:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  40649c:	b292      	uxth	r2, r2
  40649e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4064a2:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4064a6:	f845 2b04 	str.w	r2, [r5], #4
  4064aa:	e7ee      	b.n	40648a <__mdiff+0x8c>
  4064ac:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4064b0:	b90b      	cbnz	r3, 4064b6 <__mdiff+0xb8>
  4064b2:	3e01      	subs	r6, #1
  4064b4:	e7fa      	b.n	4064ac <__mdiff+0xae>
  4064b6:	6106      	str	r6, [r0, #16]
  4064b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004064bc <__ulp>:
  4064bc:	4b10      	ldr	r3, [pc, #64]	; (406500 <__ulp+0x44>)
  4064be:	400b      	ands	r3, r1
  4064c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  4064c4:	2b00      	cmp	r3, #0
  4064c6:	dd02      	ble.n	4064ce <__ulp+0x12>
  4064c8:	2000      	movs	r0, #0
  4064ca:	4619      	mov	r1, r3
  4064cc:	4770      	bx	lr
  4064ce:	425b      	negs	r3, r3
  4064d0:	151b      	asrs	r3, r3, #20
  4064d2:	2b13      	cmp	r3, #19
  4064d4:	f04f 0000 	mov.w	r0, #0
  4064d8:	f04f 0100 	mov.w	r1, #0
  4064dc:	dc04      	bgt.n	4064e8 <__ulp+0x2c>
  4064de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4064e2:	fa42 f103 	asr.w	r1, r2, r3
  4064e6:	4770      	bx	lr
  4064e8:	3b14      	subs	r3, #20
  4064ea:	2b1e      	cmp	r3, #30
  4064ec:	f04f 0201 	mov.w	r2, #1
  4064f0:	bfda      	itte	le
  4064f2:	f1c3 031f 	rsble	r3, r3, #31
  4064f6:	fa02 f303 	lslle.w	r3, r2, r3
  4064fa:	4613      	movgt	r3, r2
  4064fc:	4618      	mov	r0, r3
  4064fe:	4770      	bx	lr
  406500:	7ff00000 	.word	0x7ff00000

00406504 <__b2d>:
  406504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406506:	6905      	ldr	r5, [r0, #16]
  406508:	f100 0614 	add.w	r6, r0, #20
  40650c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  406510:	1f2f      	subs	r7, r5, #4
  406512:	f855 4c04 	ldr.w	r4, [r5, #-4]
  406516:	4620      	mov	r0, r4
  406518:	f7ff fdcf 	bl	4060ba <__hi0bits>
  40651c:	f1c0 0320 	rsb	r3, r0, #32
  406520:	280a      	cmp	r0, #10
  406522:	600b      	str	r3, [r1, #0]
  406524:	dc14      	bgt.n	406550 <__b2d+0x4c>
  406526:	f1c0 0e0b 	rsb	lr, r0, #11
  40652a:	fa24 f10e 	lsr.w	r1, r4, lr
  40652e:	42be      	cmp	r6, r7
  406530:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
  406534:	bf34      	ite	cc
  406536:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  40653a:	2100      	movcs	r1, #0
  40653c:	3015      	adds	r0, #21
  40653e:	fa04 f000 	lsl.w	r0, r4, r0
  406542:	fa21 f10e 	lsr.w	r1, r1, lr
  406546:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  40654a:	ea40 0201 	orr.w	r2, r0, r1
  40654e:	e023      	b.n	406598 <__b2d+0x94>
  406550:	42be      	cmp	r6, r7
  406552:	bf3a      	itte	cc
  406554:	f1a5 0708 	subcc.w	r7, r5, #8
  406558:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  40655c:	2100      	movcs	r1, #0
  40655e:	380b      	subs	r0, #11
  406560:	d015      	beq.n	40658e <__b2d+0x8a>
  406562:	4084      	lsls	r4, r0
  406564:	f1c0 0520 	rsb	r5, r0, #32
  406568:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  40656c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  406570:	42b7      	cmp	r7, r6
  406572:	fa21 fe05 	lsr.w	lr, r1, r5
  406576:	ea44 030e 	orr.w	r3, r4, lr
  40657a:	bf8c      	ite	hi
  40657c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
  406580:	2400      	movls	r4, #0
  406582:	fa01 f000 	lsl.w	r0, r1, r0
  406586:	40ec      	lsrs	r4, r5
  406588:	ea40 0204 	orr.w	r2, r0, r4
  40658c:	e004      	b.n	406598 <__b2d+0x94>
  40658e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  406592:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  406596:	460a      	mov	r2, r1
  406598:	4610      	mov	r0, r2
  40659a:	4619      	mov	r1, r3
  40659c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040659e <__d2b>:
  40659e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4065a2:	2101      	movs	r1, #1
  4065a4:	461c      	mov	r4, r3
  4065a6:	4690      	mov	r8, r2
  4065a8:	9e08      	ldr	r6, [sp, #32]
  4065aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4065ac:	f7ff fcc0 	bl	405f30 <_Balloc>
  4065b0:	f3c4 0213 	ubfx	r2, r4, #0, #20
  4065b4:	f3c4 540a 	ubfx	r4, r4, #20, #11
  4065b8:	4607      	mov	r7, r0
  4065ba:	b10c      	cbz	r4, 4065c0 <__d2b+0x22>
  4065bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4065c0:	9201      	str	r2, [sp, #4]
  4065c2:	f1b8 0f00 	cmp.w	r8, #0
  4065c6:	d019      	beq.n	4065fc <__d2b+0x5e>
  4065c8:	a802      	add	r0, sp, #8
  4065ca:	f840 8d08 	str.w	r8, [r0, #-8]!
  4065ce:	f7ff fd94 	bl	4060fa <__lo0bits>
  4065d2:	9b00      	ldr	r3, [sp, #0]
  4065d4:	b148      	cbz	r0, 4065ea <__d2b+0x4c>
  4065d6:	9a01      	ldr	r2, [sp, #4]
  4065d8:	f1c0 0120 	rsb	r1, r0, #32
  4065dc:	fa02 f101 	lsl.w	r1, r2, r1
  4065e0:	430b      	orrs	r3, r1
  4065e2:	40c2      	lsrs	r2, r0
  4065e4:	617b      	str	r3, [r7, #20]
  4065e6:	9201      	str	r2, [sp, #4]
  4065e8:	e000      	b.n	4065ec <__d2b+0x4e>
  4065ea:	617b      	str	r3, [r7, #20]
  4065ec:	9b01      	ldr	r3, [sp, #4]
  4065ee:	61bb      	str	r3, [r7, #24]
  4065f0:	2b00      	cmp	r3, #0
  4065f2:	bf14      	ite	ne
  4065f4:	2102      	movne	r1, #2
  4065f6:	2101      	moveq	r1, #1
  4065f8:	6139      	str	r1, [r7, #16]
  4065fa:	e007      	b.n	40660c <__d2b+0x6e>
  4065fc:	a801      	add	r0, sp, #4
  4065fe:	f7ff fd7c 	bl	4060fa <__lo0bits>
  406602:	9b01      	ldr	r3, [sp, #4]
  406604:	617b      	str	r3, [r7, #20]
  406606:	2101      	movs	r1, #1
  406608:	6139      	str	r1, [r7, #16]
  40660a:	3020      	adds	r0, #32
  40660c:	b134      	cbz	r4, 40661c <__d2b+0x7e>
  40660e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  406612:	4404      	add	r4, r0
  406614:	6034      	str	r4, [r6, #0]
  406616:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40661a:	e009      	b.n	406630 <__d2b+0x92>
  40661c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  406620:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406624:	6030      	str	r0, [r6, #0]
  406626:	6918      	ldr	r0, [r3, #16]
  406628:	f7ff fd47 	bl	4060ba <__hi0bits>
  40662c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406630:	6028      	str	r0, [r5, #0]
  406632:	4638      	mov	r0, r7
  406634:	b002      	add	sp, #8
  406636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040663a <__ratio>:
  40663a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  40663e:	4688      	mov	r8, r1
  406640:	4669      	mov	r1, sp
  406642:	4681      	mov	r9, r0
  406644:	f7ff ff5e 	bl	406504 <__b2d>
  406648:	460d      	mov	r5, r1
  40664a:	4604      	mov	r4, r0
  40664c:	a901      	add	r1, sp, #4
  40664e:	4640      	mov	r0, r8
  406650:	f7ff ff58 	bl	406504 <__b2d>
  406654:	f8d9 3010 	ldr.w	r3, [r9, #16]
  406658:	f8d8 2010 	ldr.w	r2, [r8, #16]
  40665c:	460f      	mov	r7, r1
  40665e:	1a9a      	subs	r2, r3, r2
  406660:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406664:	1ac9      	subs	r1, r1, r3
  406666:	eb01 1342 	add.w	r3, r1, r2, lsl #5
  40666a:	2b00      	cmp	r3, #0
  40666c:	bfc8      	it	gt
  40666e:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
  406672:	4606      	mov	r6, r0
  406674:	bfd8      	it	le
  406676:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
  40667a:	4632      	mov	r2, r6
  40667c:	463b      	mov	r3, r7
  40667e:	4620      	mov	r0, r4
  406680:	4629      	mov	r1, r5
  406682:	f000 fdff 	bl	407284 <__aeabi_ddiv>
  406686:	b003      	add	sp, #12
  406688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040668c <__copybits>:
  40668c:	3901      	subs	r1, #1
  40668e:	b510      	push	{r4, lr}
  406690:	1149      	asrs	r1, r1, #5
  406692:	6914      	ldr	r4, [r2, #16]
  406694:	3101      	adds	r1, #1
  406696:	f102 0314 	add.w	r3, r2, #20
  40669a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40669e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  4066a2:	42a3      	cmp	r3, r4
  4066a4:	4602      	mov	r2, r0
  4066a6:	d204      	bcs.n	4066b2 <__copybits+0x26>
  4066a8:	f853 2b04 	ldr.w	r2, [r3], #4
  4066ac:	f840 2b04 	str.w	r2, [r0], #4
  4066b0:	e7f7      	b.n	4066a2 <__copybits+0x16>
  4066b2:	2300      	movs	r3, #0
  4066b4:	428a      	cmp	r2, r1
  4066b6:	d202      	bcs.n	4066be <__copybits+0x32>
  4066b8:	f842 3b04 	str.w	r3, [r2], #4
  4066bc:	e7fa      	b.n	4066b4 <__copybits+0x28>
  4066be:	bd10      	pop	{r4, pc}

004066c0 <__any_on>:
  4066c0:	f100 0214 	add.w	r2, r0, #20
  4066c4:	6900      	ldr	r0, [r0, #16]
  4066c6:	114b      	asrs	r3, r1, #5
  4066c8:	4298      	cmp	r0, r3
  4066ca:	b510      	push	{r4, lr}
  4066cc:	db0c      	blt.n	4066e8 <__any_on+0x28>
  4066ce:	dd0c      	ble.n	4066ea <__any_on+0x2a>
  4066d0:	f011 011f 	ands.w	r1, r1, #31
  4066d4:	d009      	beq.n	4066ea <__any_on+0x2a>
  4066d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
  4066da:	fa24 f001 	lsr.w	r0, r4, r1
  4066de:	fa00 f101 	lsl.w	r1, r0, r1
  4066e2:	428c      	cmp	r4, r1
  4066e4:	d10c      	bne.n	406700 <__any_on+0x40>
  4066e6:	e000      	b.n	4066ea <__any_on+0x2a>
  4066e8:	4603      	mov	r3, r0
  4066ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4066ee:	4293      	cmp	r3, r2
  4066f0:	d904      	bls.n	4066fc <__any_on+0x3c>
  4066f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  4066f6:	2900      	cmp	r1, #0
  4066f8:	d0f9      	beq.n	4066ee <__any_on+0x2e>
  4066fa:	e001      	b.n	406700 <__any_on+0x40>
  4066fc:	2000      	movs	r0, #0
  4066fe:	bd10      	pop	{r4, pc}
  406700:	2001      	movs	r0, #1
  406702:	bd10      	pop	{r4, pc}

00406704 <_calloc_r>:
  406704:	b538      	push	{r3, r4, r5, lr}
  406706:	fb02 f401 	mul.w	r4, r2, r1
  40670a:	4621      	mov	r1, r4
  40670c:	f000 f856 	bl	4067bc <_malloc_r>
  406710:	4605      	mov	r5, r0
  406712:	b118      	cbz	r0, 40671c <_calloc_r+0x18>
  406714:	4622      	mov	r2, r4
  406716:	2100      	movs	r1, #0
  406718:	f7fc faed 	bl	402cf6 <memset>
  40671c:	4628      	mov	r0, r5
  40671e:	bd38      	pop	{r3, r4, r5, pc}

00406720 <_free_r>:
  406720:	b538      	push	{r3, r4, r5, lr}
  406722:	4605      	mov	r5, r0
  406724:	2900      	cmp	r1, #0
  406726:	d046      	beq.n	4067b6 <_free_r+0x96>
  406728:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40672c:	1f0c      	subs	r4, r1, #4
  40672e:	2b00      	cmp	r3, #0
  406730:	bfb8      	it	lt
  406732:	18e4      	addlt	r4, r4, r3
  406734:	f000 fab0 	bl	406c98 <__malloc_lock>
  406738:	4a1f      	ldr	r2, [pc, #124]	; (4067b8 <_free_r+0x98>)
  40673a:	6813      	ldr	r3, [r2, #0]
  40673c:	4611      	mov	r1, r2
  40673e:	b913      	cbnz	r3, 406746 <_free_r+0x26>
  406740:	6063      	str	r3, [r4, #4]
  406742:	6014      	str	r4, [r2, #0]
  406744:	e032      	b.n	4067ac <_free_r+0x8c>
  406746:	42a3      	cmp	r3, r4
  406748:	d90e      	bls.n	406768 <_free_r+0x48>
  40674a:	6822      	ldr	r2, [r4, #0]
  40674c:	18a0      	adds	r0, r4, r2
  40674e:	4283      	cmp	r3, r0
  406750:	bf04      	itt	eq
  406752:	6818      	ldreq	r0, [r3, #0]
  406754:	685b      	ldreq	r3, [r3, #4]
  406756:	6063      	str	r3, [r4, #4]
  406758:	bf04      	itt	eq
  40675a:	1812      	addeq	r2, r2, r0
  40675c:	6022      	streq	r2, [r4, #0]
  40675e:	600c      	str	r4, [r1, #0]
  406760:	e024      	b.n	4067ac <_free_r+0x8c>
  406762:	42a2      	cmp	r2, r4
  406764:	d803      	bhi.n	40676e <_free_r+0x4e>
  406766:	4613      	mov	r3, r2
  406768:	685a      	ldr	r2, [r3, #4]
  40676a:	2a00      	cmp	r2, #0
  40676c:	d1f9      	bne.n	406762 <_free_r+0x42>
  40676e:	6818      	ldr	r0, [r3, #0]
  406770:	1819      	adds	r1, r3, r0
  406772:	42a1      	cmp	r1, r4
  406774:	d10b      	bne.n	40678e <_free_r+0x6e>
  406776:	6821      	ldr	r1, [r4, #0]
  406778:	4401      	add	r1, r0
  40677a:	1858      	adds	r0, r3, r1
  40677c:	4282      	cmp	r2, r0
  40677e:	6019      	str	r1, [r3, #0]
  406780:	d114      	bne.n	4067ac <_free_r+0x8c>
  406782:	6810      	ldr	r0, [r2, #0]
  406784:	6852      	ldr	r2, [r2, #4]
  406786:	605a      	str	r2, [r3, #4]
  406788:	4401      	add	r1, r0
  40678a:	6019      	str	r1, [r3, #0]
  40678c:	e00e      	b.n	4067ac <_free_r+0x8c>
  40678e:	d902      	bls.n	406796 <_free_r+0x76>
  406790:	230c      	movs	r3, #12
  406792:	602b      	str	r3, [r5, #0]
  406794:	e00a      	b.n	4067ac <_free_r+0x8c>
  406796:	6821      	ldr	r1, [r4, #0]
  406798:	1860      	adds	r0, r4, r1
  40679a:	4282      	cmp	r2, r0
  40679c:	bf04      	itt	eq
  40679e:	6810      	ldreq	r0, [r2, #0]
  4067a0:	6852      	ldreq	r2, [r2, #4]
  4067a2:	6062      	str	r2, [r4, #4]
  4067a4:	bf04      	itt	eq
  4067a6:	1809      	addeq	r1, r1, r0
  4067a8:	6021      	streq	r1, [r4, #0]
  4067aa:	605c      	str	r4, [r3, #4]
  4067ac:	4628      	mov	r0, r5
  4067ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4067b2:	f000 ba72 	b.w	406c9a <__malloc_unlock>
  4067b6:	bd38      	pop	{r3, r4, r5, pc}
  4067b8:	200004f8 	.word	0x200004f8

004067bc <_malloc_r>:
  4067bc:	b570      	push	{r4, r5, r6, lr}
  4067be:	1ccd      	adds	r5, r1, #3
  4067c0:	f025 0503 	bic.w	r5, r5, #3
  4067c4:	3508      	adds	r5, #8
  4067c6:	2d0c      	cmp	r5, #12
  4067c8:	bf38      	it	cc
  4067ca:	250c      	movcc	r5, #12
  4067cc:	2d00      	cmp	r5, #0
  4067ce:	4606      	mov	r6, r0
  4067d0:	db01      	blt.n	4067d6 <_malloc_r+0x1a>
  4067d2:	42a9      	cmp	r1, r5
  4067d4:	d902      	bls.n	4067dc <_malloc_r+0x20>
  4067d6:	230c      	movs	r3, #12
  4067d8:	6033      	str	r3, [r6, #0]
  4067da:	e046      	b.n	40686a <_malloc_r+0xae>
  4067dc:	f000 fa5c 	bl	406c98 <__malloc_lock>
  4067e0:	4b23      	ldr	r3, [pc, #140]	; (406870 <_malloc_r+0xb4>)
  4067e2:	681c      	ldr	r4, [r3, #0]
  4067e4:	461a      	mov	r2, r3
  4067e6:	4621      	mov	r1, r4
  4067e8:	b1a1      	cbz	r1, 406814 <_malloc_r+0x58>
  4067ea:	680b      	ldr	r3, [r1, #0]
  4067ec:	1b5b      	subs	r3, r3, r5
  4067ee:	d40e      	bmi.n	40680e <_malloc_r+0x52>
  4067f0:	2b0b      	cmp	r3, #11
  4067f2:	d903      	bls.n	4067fc <_malloc_r+0x40>
  4067f4:	600b      	str	r3, [r1, #0]
  4067f6:	18cc      	adds	r4, r1, r3
  4067f8:	50cd      	str	r5, [r1, r3]
  4067fa:	e01e      	b.n	40683a <_malloc_r+0x7e>
  4067fc:	428c      	cmp	r4, r1
  4067fe:	bf0d      	iteet	eq
  406800:	6863      	ldreq	r3, [r4, #4]
  406802:	684b      	ldrne	r3, [r1, #4]
  406804:	6063      	strne	r3, [r4, #4]
  406806:	6013      	streq	r3, [r2, #0]
  406808:	bf18      	it	ne
  40680a:	460c      	movne	r4, r1
  40680c:	e015      	b.n	40683a <_malloc_r+0x7e>
  40680e:	460c      	mov	r4, r1
  406810:	6849      	ldr	r1, [r1, #4]
  406812:	e7e9      	b.n	4067e8 <_malloc_r+0x2c>
  406814:	4c17      	ldr	r4, [pc, #92]	; (406874 <_malloc_r+0xb8>)
  406816:	6823      	ldr	r3, [r4, #0]
  406818:	b91b      	cbnz	r3, 406822 <_malloc_r+0x66>
  40681a:	4630      	mov	r0, r6
  40681c:	f000 f970 	bl	406b00 <_sbrk_r>
  406820:	6020      	str	r0, [r4, #0]
  406822:	4629      	mov	r1, r5
  406824:	4630      	mov	r0, r6
  406826:	f000 f96b 	bl	406b00 <_sbrk_r>
  40682a:	1c43      	adds	r3, r0, #1
  40682c:	d018      	beq.n	406860 <_malloc_r+0xa4>
  40682e:	1cc4      	adds	r4, r0, #3
  406830:	f024 0403 	bic.w	r4, r4, #3
  406834:	42a0      	cmp	r0, r4
  406836:	d10d      	bne.n	406854 <_malloc_r+0x98>
  406838:	6025      	str	r5, [r4, #0]
  40683a:	4630      	mov	r0, r6
  40683c:	f000 fa2d 	bl	406c9a <__malloc_unlock>
  406840:	f104 000b 	add.w	r0, r4, #11
  406844:	1d23      	adds	r3, r4, #4
  406846:	f020 0007 	bic.w	r0, r0, #7
  40684a:	1ac3      	subs	r3, r0, r3
  40684c:	d00e      	beq.n	40686c <_malloc_r+0xb0>
  40684e:	425a      	negs	r2, r3
  406850:	50e2      	str	r2, [r4, r3]
  406852:	bd70      	pop	{r4, r5, r6, pc}
  406854:	1a21      	subs	r1, r4, r0
  406856:	4630      	mov	r0, r6
  406858:	f000 f952 	bl	406b00 <_sbrk_r>
  40685c:	3001      	adds	r0, #1
  40685e:	d1eb      	bne.n	406838 <_malloc_r+0x7c>
  406860:	230c      	movs	r3, #12
  406862:	6033      	str	r3, [r6, #0]
  406864:	4630      	mov	r0, r6
  406866:	f000 fa18 	bl	406c9a <__malloc_unlock>
  40686a:	2000      	movs	r0, #0
  40686c:	bd70      	pop	{r4, r5, r6, pc}
  40686e:	bf00      	nop
  406870:	200004f8 	.word	0x200004f8
  406874:	200004f4 	.word	0x200004f4

00406878 <__sfputc_r>:
  406878:	6893      	ldr	r3, [r2, #8]
  40687a:	3b01      	subs	r3, #1
  40687c:	2b00      	cmp	r3, #0
  40687e:	b410      	push	{r4}
  406880:	6093      	str	r3, [r2, #8]
  406882:	da08      	bge.n	406896 <__sfputc_r+0x1e>
  406884:	6994      	ldr	r4, [r2, #24]
  406886:	42a3      	cmp	r3, r4
  406888:	db02      	blt.n	406890 <__sfputc_r+0x18>
  40688a:	b2cb      	uxtb	r3, r1
  40688c:	2b0a      	cmp	r3, #10
  40688e:	d102      	bne.n	406896 <__sfputc_r+0x1e>
  406890:	bc10      	pop	{r4}
  406892:	f7fd bee3 	b.w	40465c <__swbuf_r>
  406896:	6813      	ldr	r3, [r2, #0]
  406898:	1c58      	adds	r0, r3, #1
  40689a:	6010      	str	r0, [r2, #0]
  40689c:	7019      	strb	r1, [r3, #0]
  40689e:	b2c8      	uxtb	r0, r1
  4068a0:	bc10      	pop	{r4}
  4068a2:	4770      	bx	lr

004068a4 <__sfputs_r>:
  4068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4068a6:	4606      	mov	r6, r0
  4068a8:	460f      	mov	r7, r1
  4068aa:	4614      	mov	r4, r2
  4068ac:	18d5      	adds	r5, r2, r3
  4068ae:	42ac      	cmp	r4, r5
  4068b0:	d008      	beq.n	4068c4 <__sfputs_r+0x20>
  4068b2:	463a      	mov	r2, r7
  4068b4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4068b8:	4630      	mov	r0, r6
  4068ba:	f7ff ffdd 	bl	406878 <__sfputc_r>
  4068be:	1c43      	adds	r3, r0, #1
  4068c0:	d1f5      	bne.n	4068ae <__sfputs_r+0xa>
  4068c2:	e000      	b.n	4068c6 <__sfputs_r+0x22>
  4068c4:	2000      	movs	r0, #0
  4068c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004068c8 <_vfiprintf_r>:
  4068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068cc:	b09d      	sub	sp, #116	; 0x74
  4068ce:	460c      	mov	r4, r1
  4068d0:	4617      	mov	r7, r2
  4068d2:	9303      	str	r3, [sp, #12]
  4068d4:	4606      	mov	r6, r0
  4068d6:	b118      	cbz	r0, 4068e0 <_vfiprintf_r+0x18>
  4068d8:	6983      	ldr	r3, [r0, #24]
  4068da:	b90b      	cbnz	r3, 4068e0 <_vfiprintf_r+0x18>
  4068dc:	f7fe fe9e 	bl	40561c <__sinit>
  4068e0:	4b7f      	ldr	r3, [pc, #508]	; (406ae0 <_vfiprintf_r+0x218>)
  4068e2:	429c      	cmp	r4, r3
  4068e4:	d101      	bne.n	4068ea <_vfiprintf_r+0x22>
  4068e6:	6874      	ldr	r4, [r6, #4]
  4068e8:	e008      	b.n	4068fc <_vfiprintf_r+0x34>
  4068ea:	4b7e      	ldr	r3, [pc, #504]	; (406ae4 <_vfiprintf_r+0x21c>)
  4068ec:	429c      	cmp	r4, r3
  4068ee:	d101      	bne.n	4068f4 <_vfiprintf_r+0x2c>
  4068f0:	68b4      	ldr	r4, [r6, #8]
  4068f2:	e003      	b.n	4068fc <_vfiprintf_r+0x34>
  4068f4:	4b7c      	ldr	r3, [pc, #496]	; (406ae8 <_vfiprintf_r+0x220>)
  4068f6:	429c      	cmp	r4, r3
  4068f8:	bf08      	it	eq
  4068fa:	68f4      	ldreq	r4, [r6, #12]
  4068fc:	89a3      	ldrh	r3, [r4, #12]
  4068fe:	0718      	lsls	r0, r3, #28
  406900:	d50c      	bpl.n	40691c <_vfiprintf_r+0x54>
  406902:	6923      	ldr	r3, [r4, #16]
  406904:	b153      	cbz	r3, 40691c <_vfiprintf_r+0x54>
  406906:	2300      	movs	r3, #0
  406908:	9309      	str	r3, [sp, #36]	; 0x24
  40690a:	2320      	movs	r3, #32
  40690c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  406910:	2330      	movs	r3, #48	; 0x30
  406912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  406916:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 406aec <_vfiprintf_r+0x224>
  40691a:	e044      	b.n	4069a6 <_vfiprintf_r+0xde>
  40691c:	4621      	mov	r1, r4
  40691e:	4630      	mov	r0, r6
  406920:	f7fd fef0 	bl	404704 <__swsetup_r>
  406924:	2800      	cmp	r0, #0
  406926:	d0ee      	beq.n	406906 <_vfiprintf_r+0x3e>
  406928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40692c:	e0d5      	b.n	406ada <_vfiprintf_r+0x212>
  40692e:	9a03      	ldr	r2, [sp, #12]
  406930:	1d11      	adds	r1, r2, #4
  406932:	6812      	ldr	r2, [r2, #0]
  406934:	9103      	str	r1, [sp, #12]
  406936:	2a00      	cmp	r2, #0
  406938:	f280 808c 	bge.w	406a54 <_vfiprintf_r+0x18c>
  40693c:	4252      	negs	r2, r2
  40693e:	f043 0002 	orr.w	r0, r3, #2
  406942:	9207      	str	r2, [sp, #28]
  406944:	9004      	str	r0, [sp, #16]
  406946:	f898 3000 	ldrb.w	r3, [r8]
  40694a:	2b2e      	cmp	r3, #46	; 0x2e
  40694c:	f000 8084 	beq.w	406a58 <_vfiprintf_r+0x190>
  406950:	2203      	movs	r2, #3
  406952:	f898 1000 	ldrb.w	r1, [r8]
  406956:	4865      	ldr	r0, [pc, #404]	; (406aec <_vfiprintf_r+0x224>)
  406958:	f7ff fa9a 	bl	405e90 <memchr>
  40695c:	b148      	cbz	r0, 406972 <_vfiprintf_r+0xaa>
  40695e:	2340      	movs	r3, #64	; 0x40
  406960:	ebcb 0000 	rsb	r0, fp, r0
  406964:	fa03 f000 	lsl.w	r0, r3, r0
  406968:	9b04      	ldr	r3, [sp, #16]
  40696a:	4318      	orrs	r0, r3
  40696c:	9004      	str	r0, [sp, #16]
  40696e:	f108 0801 	add.w	r8, r8, #1
  406972:	f898 1000 	ldrb.w	r1, [r8]
  406976:	485e      	ldr	r0, [pc, #376]	; (406af0 <_vfiprintf_r+0x228>)
  406978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  40697c:	2206      	movs	r2, #6
  40697e:	f108 0701 	add.w	r7, r8, #1
  406982:	f7ff fa85 	bl	405e90 <memchr>
  406986:	2800      	cmp	r0, #0
  406988:	f000 8095 	beq.w	406ab6 <_vfiprintf_r+0x1ee>
  40698c:	4b59      	ldr	r3, [pc, #356]	; (406af4 <_vfiprintf_r+0x22c>)
  40698e:	2b00      	cmp	r3, #0
  406990:	f040 8088 	bne.w	406aa4 <_vfiprintf_r+0x1dc>
  406994:	9b03      	ldr	r3, [sp, #12]
  406996:	3307      	adds	r3, #7
  406998:	f023 0307 	bic.w	r3, r3, #7
  40699c:	3308      	adds	r3, #8
  40699e:	9303      	str	r3, [sp, #12]
  4069a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4069a2:	4453      	add	r3, sl
  4069a4:	9309      	str	r3, [sp, #36]	; 0x24
  4069a6:	46b8      	mov	r8, r7
  4069a8:	4645      	mov	r5, r8
  4069aa:	f815 3b01 	ldrb.w	r3, [r5], #1
  4069ae:	b91b      	cbnz	r3, 4069b8 <_vfiprintf_r+0xf0>
  4069b0:	ebb8 0907 	subs.w	r9, r8, r7
  4069b4:	d00f      	beq.n	4069d6 <_vfiprintf_r+0x10e>
  4069b6:	e003      	b.n	4069c0 <_vfiprintf_r+0xf8>
  4069b8:	2b25      	cmp	r3, #37	; 0x25
  4069ba:	d0f9      	beq.n	4069b0 <_vfiprintf_r+0xe8>
  4069bc:	46a8      	mov	r8, r5
  4069be:	e7f3      	b.n	4069a8 <_vfiprintf_r+0xe0>
  4069c0:	464b      	mov	r3, r9
  4069c2:	463a      	mov	r2, r7
  4069c4:	4621      	mov	r1, r4
  4069c6:	4630      	mov	r0, r6
  4069c8:	f7ff ff6c 	bl	4068a4 <__sfputs_r>
  4069cc:	3001      	adds	r0, #1
  4069ce:	d07f      	beq.n	406ad0 <_vfiprintf_r+0x208>
  4069d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4069d2:	444b      	add	r3, r9
  4069d4:	9309      	str	r3, [sp, #36]	; 0x24
  4069d6:	f898 3000 	ldrb.w	r3, [r8]
  4069da:	2b00      	cmp	r3, #0
  4069dc:	d078      	beq.n	406ad0 <_vfiprintf_r+0x208>
  4069de:	2300      	movs	r3, #0
  4069e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4069e4:	9304      	str	r3, [sp, #16]
  4069e6:	9307      	str	r3, [sp, #28]
  4069e8:	9205      	str	r2, [sp, #20]
  4069ea:	9306      	str	r3, [sp, #24]
  4069ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4069f0:	931a      	str	r3, [sp, #104]	; 0x68
  4069f2:	2701      	movs	r7, #1
  4069f4:	2205      	movs	r2, #5
  4069f6:	7829      	ldrb	r1, [r5, #0]
  4069f8:	483f      	ldr	r0, [pc, #252]	; (406af8 <_vfiprintf_r+0x230>)
  4069fa:	f7ff fa49 	bl	405e90 <memchr>
  4069fe:	f105 0801 	add.w	r8, r5, #1
  406a02:	9b04      	ldr	r3, [sp, #16]
  406a04:	b138      	cbz	r0, 406a16 <_vfiprintf_r+0x14e>
  406a06:	4a3c      	ldr	r2, [pc, #240]	; (406af8 <_vfiprintf_r+0x230>)
  406a08:	1a80      	subs	r0, r0, r2
  406a0a:	fa07 f000 	lsl.w	r0, r7, r0
  406a0e:	4318      	orrs	r0, r3
  406a10:	9004      	str	r0, [sp, #16]
  406a12:	4645      	mov	r5, r8
  406a14:	e7ee      	b.n	4069f4 <_vfiprintf_r+0x12c>
  406a16:	06d9      	lsls	r1, r3, #27
  406a18:	bf44      	itt	mi
  406a1a:	2220      	movmi	r2, #32
  406a1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406a20:	071a      	lsls	r2, r3, #28
  406a22:	bf44      	itt	mi
  406a24:	222b      	movmi	r2, #43	; 0x2b
  406a26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406a2a:	782a      	ldrb	r2, [r5, #0]
  406a2c:	2a2a      	cmp	r2, #42	; 0x2a
  406a2e:	f43f af7e 	beq.w	40692e <_vfiprintf_r+0x66>
  406a32:	9a07      	ldr	r2, [sp, #28]
  406a34:	2100      	movs	r1, #0
  406a36:	200a      	movs	r0, #10
  406a38:	46a8      	mov	r8, r5
  406a3a:	3501      	adds	r5, #1
  406a3c:	f898 3000 	ldrb.w	r3, [r8]
  406a40:	3b30      	subs	r3, #48	; 0x30
  406a42:	2b09      	cmp	r3, #9
  406a44:	d803      	bhi.n	406a4e <_vfiprintf_r+0x186>
  406a46:	fb00 3202 	mla	r2, r0, r2, r3
  406a4a:	2101      	movs	r1, #1
  406a4c:	e7f4      	b.n	406a38 <_vfiprintf_r+0x170>
  406a4e:	2900      	cmp	r1, #0
  406a50:	f43f af79 	beq.w	406946 <_vfiprintf_r+0x7e>
  406a54:	9207      	str	r2, [sp, #28]
  406a56:	e776      	b.n	406946 <_vfiprintf_r+0x7e>
  406a58:	f898 3001 	ldrb.w	r3, [r8, #1]
  406a5c:	2b2a      	cmp	r3, #42	; 0x2a
  406a5e:	d10b      	bne.n	406a78 <_vfiprintf_r+0x1b0>
  406a60:	9b03      	ldr	r3, [sp, #12]
  406a62:	1d1a      	adds	r2, r3, #4
  406a64:	681b      	ldr	r3, [r3, #0]
  406a66:	9203      	str	r2, [sp, #12]
  406a68:	2b00      	cmp	r3, #0
  406a6a:	bfb8      	it	lt
  406a6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  406a70:	f108 0802 	add.w	r8, r8, #2
  406a74:	9305      	str	r3, [sp, #20]
  406a76:	e76b      	b.n	406950 <_vfiprintf_r+0x88>
  406a78:	2300      	movs	r3, #0
  406a7a:	9305      	str	r3, [sp, #20]
  406a7c:	f108 0001 	add.w	r0, r8, #1
  406a80:	4619      	mov	r1, r3
  406a82:	250a      	movs	r5, #10
  406a84:	4680      	mov	r8, r0
  406a86:	3001      	adds	r0, #1
  406a88:	f898 2000 	ldrb.w	r2, [r8]
  406a8c:	3a30      	subs	r2, #48	; 0x30
  406a8e:	2a09      	cmp	r2, #9
  406a90:	d803      	bhi.n	406a9a <_vfiprintf_r+0x1d2>
  406a92:	fb05 2101 	mla	r1, r5, r1, r2
  406a96:	2301      	movs	r3, #1
  406a98:	e7f4      	b.n	406a84 <_vfiprintf_r+0x1bc>
  406a9a:	2b00      	cmp	r3, #0
  406a9c:	f43f af58 	beq.w	406950 <_vfiprintf_r+0x88>
  406aa0:	9105      	str	r1, [sp, #20]
  406aa2:	e755      	b.n	406950 <_vfiprintf_r+0x88>
  406aa4:	ab03      	add	r3, sp, #12
  406aa6:	9300      	str	r3, [sp, #0]
  406aa8:	4622      	mov	r2, r4
  406aaa:	4b14      	ldr	r3, [pc, #80]	; (406afc <_vfiprintf_r+0x234>)
  406aac:	a904      	add	r1, sp, #16
  406aae:	4630      	mov	r0, r6
  406ab0:	f7fc f9b8 	bl	402e24 <_printf_float>
  406ab4:	e007      	b.n	406ac6 <_vfiprintf_r+0x1fe>
  406ab6:	ab03      	add	r3, sp, #12
  406ab8:	9300      	str	r3, [sp, #0]
  406aba:	4622      	mov	r2, r4
  406abc:	4b0f      	ldr	r3, [pc, #60]	; (406afc <_vfiprintf_r+0x234>)
  406abe:	a904      	add	r1, sp, #16
  406ac0:	4630      	mov	r0, r6
  406ac2:	f7fc fc69 	bl	403398 <_printf_i>
  406ac6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  406aca:	4682      	mov	sl, r0
  406acc:	f47f af68 	bne.w	4069a0 <_vfiprintf_r+0xd8>
  406ad0:	89a3      	ldrh	r3, [r4, #12]
  406ad2:	065b      	lsls	r3, r3, #25
  406ad4:	f53f af28 	bmi.w	406928 <_vfiprintf_r+0x60>
  406ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
  406ada:	b01d      	add	sp, #116	; 0x74
  406adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ae0:	004081a8 	.word	0x004081a8
  406ae4:	004081c8 	.word	0x004081c8
  406ae8:	004081e8 	.word	0x004081e8
  406aec:	0040831a 	.word	0x0040831a
  406af0:	0040831e 	.word	0x0040831e
  406af4:	00402e25 	.word	0x00402e25
  406af8:	00408314 	.word	0x00408314
  406afc:	004068a5 	.word	0x004068a5

00406b00 <_sbrk_r>:
  406b00:	b538      	push	{r3, r4, r5, lr}
  406b02:	4c06      	ldr	r4, [pc, #24]	; (406b1c <_sbrk_r+0x1c>)
  406b04:	2300      	movs	r3, #0
  406b06:	4605      	mov	r5, r0
  406b08:	4608      	mov	r0, r1
  406b0a:	6023      	str	r3, [r4, #0]
  406b0c:	f7fb fcfe 	bl	40250c <_sbrk>
  406b10:	1c43      	adds	r3, r0, #1
  406b12:	d102      	bne.n	406b1a <_sbrk_r+0x1a>
  406b14:	6823      	ldr	r3, [r4, #0]
  406b16:	b103      	cbz	r3, 406b1a <_sbrk_r+0x1a>
  406b18:	602b      	str	r3, [r5, #0]
  406b1a:	bd38      	pop	{r3, r4, r5, pc}
  406b1c:	20000838 	.word	0x20000838

00406b20 <__sread>:
  406b20:	b510      	push	{r4, lr}
  406b22:	460c      	mov	r4, r1
  406b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406b28:	f000 f8b8 	bl	406c9c <_read_r>
  406b2c:	2800      	cmp	r0, #0
  406b2e:	bfab      	itete	ge
  406b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  406b32:	89a3      	ldrhlt	r3, [r4, #12]
  406b34:	181b      	addge	r3, r3, r0
  406b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  406b3a:	bfac      	ite	ge
  406b3c:	6563      	strge	r3, [r4, #84]	; 0x54
  406b3e:	81a3      	strhlt	r3, [r4, #12]
  406b40:	bd10      	pop	{r4, pc}

00406b42 <__swrite>:
  406b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406b46:	461f      	mov	r7, r3
  406b48:	898b      	ldrh	r3, [r1, #12]
  406b4a:	05db      	lsls	r3, r3, #23
  406b4c:	4605      	mov	r5, r0
  406b4e:	460c      	mov	r4, r1
  406b50:	4616      	mov	r6, r2
  406b52:	d505      	bpl.n	406b60 <__swrite+0x1e>
  406b54:	2302      	movs	r3, #2
  406b56:	2200      	movs	r2, #0
  406b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406b5c:	f000 f88a 	bl	406c74 <_lseek_r>
  406b60:	89a3      	ldrh	r3, [r4, #12]
  406b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406b6a:	81a3      	strh	r3, [r4, #12]
  406b6c:	4632      	mov	r2, r6
  406b6e:	463b      	mov	r3, r7
  406b70:	4628      	mov	r0, r5
  406b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b76:	f000 b839 	b.w	406bec <_write_r>

00406b7a <__sseek>:
  406b7a:	b510      	push	{r4, lr}
  406b7c:	460c      	mov	r4, r1
  406b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406b82:	f000 f877 	bl	406c74 <_lseek_r>
  406b86:	1c43      	adds	r3, r0, #1
  406b88:	89a3      	ldrh	r3, [r4, #12]
  406b8a:	bf15      	itete	ne
  406b8c:	6560      	strne	r0, [r4, #84]	; 0x54
  406b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406b96:	81a3      	strheq	r3, [r4, #12]
  406b98:	bf18      	it	ne
  406b9a:	81a3      	strhne	r3, [r4, #12]
  406b9c:	bd10      	pop	{r4, pc}

00406b9e <__sclose>:
  406b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ba2:	f000 b835 	b.w	406c10 <_close_r>

00406ba6 <strncmp>:
  406ba6:	b530      	push	{r4, r5, lr}
  406ba8:	b182      	cbz	r2, 406bcc <strncmp+0x26>
  406baa:	1e45      	subs	r5, r0, #1
  406bac:	3901      	subs	r1, #1
  406bae:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  406bb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  406bb6:	42a3      	cmp	r3, r4
  406bb8:	d106      	bne.n	406bc8 <strncmp+0x22>
  406bba:	43ec      	mvns	r4, r5
  406bbc:	4414      	add	r4, r2
  406bbe:	42e0      	cmn	r0, r4
  406bc0:	d001      	beq.n	406bc6 <strncmp+0x20>
  406bc2:	2b00      	cmp	r3, #0
  406bc4:	d1f3      	bne.n	406bae <strncmp+0x8>
  406bc6:	461c      	mov	r4, r3
  406bc8:	1b18      	subs	r0, r3, r4
  406bca:	bd30      	pop	{r4, r5, pc}
  406bcc:	4610      	mov	r0, r2
  406bce:	bd30      	pop	{r4, r5, pc}

00406bd0 <__ascii_wctomb>:
  406bd0:	b149      	cbz	r1, 406be6 <__ascii_wctomb+0x16>
  406bd2:	2aff      	cmp	r2, #255	; 0xff
  406bd4:	bf85      	ittet	hi
  406bd6:	238a      	movhi	r3, #138	; 0x8a
  406bd8:	6003      	strhi	r3, [r0, #0]
  406bda:	700a      	strbls	r2, [r1, #0]
  406bdc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  406be0:	bf98      	it	ls
  406be2:	2001      	movls	r0, #1
  406be4:	4770      	bx	lr
  406be6:	4608      	mov	r0, r1
  406be8:	4770      	bx	lr
	...

00406bec <_write_r>:
  406bec:	b538      	push	{r3, r4, r5, lr}
  406bee:	4c07      	ldr	r4, [pc, #28]	; (406c0c <_write_r+0x20>)
  406bf0:	4605      	mov	r5, r0
  406bf2:	4608      	mov	r0, r1
  406bf4:	4611      	mov	r1, r2
  406bf6:	2200      	movs	r2, #0
  406bf8:	6022      	str	r2, [r4, #0]
  406bfa:	461a      	mov	r2, r3
  406bfc:	f7f9 fad6 	bl	4001ac <_write>
  406c00:	1c43      	adds	r3, r0, #1
  406c02:	d102      	bne.n	406c0a <_write_r+0x1e>
  406c04:	6823      	ldr	r3, [r4, #0]
  406c06:	b103      	cbz	r3, 406c0a <_write_r+0x1e>
  406c08:	602b      	str	r3, [r5, #0]
  406c0a:	bd38      	pop	{r3, r4, r5, pc}
  406c0c:	20000838 	.word	0x20000838

00406c10 <_close_r>:
  406c10:	b538      	push	{r3, r4, r5, lr}
  406c12:	4c06      	ldr	r4, [pc, #24]	; (406c2c <_close_r+0x1c>)
  406c14:	2300      	movs	r3, #0
  406c16:	4605      	mov	r5, r0
  406c18:	4608      	mov	r0, r1
  406c1a:	6023      	str	r3, [r4, #0]
  406c1c:	f7fb fc90 	bl	402540 <_close>
  406c20:	1c43      	adds	r3, r0, #1
  406c22:	d102      	bne.n	406c2a <_close_r+0x1a>
  406c24:	6823      	ldr	r3, [r4, #0]
  406c26:	b103      	cbz	r3, 406c2a <_close_r+0x1a>
  406c28:	602b      	str	r3, [r5, #0]
  406c2a:	bd38      	pop	{r3, r4, r5, pc}
  406c2c:	20000838 	.word	0x20000838

00406c30 <_fstat_r>:
  406c30:	b538      	push	{r3, r4, r5, lr}
  406c32:	4c07      	ldr	r4, [pc, #28]	; (406c50 <_fstat_r+0x20>)
  406c34:	2300      	movs	r3, #0
  406c36:	4605      	mov	r5, r0
  406c38:	4608      	mov	r0, r1
  406c3a:	4611      	mov	r1, r2
  406c3c:	6023      	str	r3, [r4, #0]
  406c3e:	f7fb fc83 	bl	402548 <_fstat>
  406c42:	1c43      	adds	r3, r0, #1
  406c44:	d102      	bne.n	406c4c <_fstat_r+0x1c>
  406c46:	6823      	ldr	r3, [r4, #0]
  406c48:	b103      	cbz	r3, 406c4c <_fstat_r+0x1c>
  406c4a:	602b      	str	r3, [r5, #0]
  406c4c:	bd38      	pop	{r3, r4, r5, pc}
  406c4e:	bf00      	nop
  406c50:	20000838 	.word	0x20000838

00406c54 <_isatty_r>:
  406c54:	b538      	push	{r3, r4, r5, lr}
  406c56:	4c06      	ldr	r4, [pc, #24]	; (406c70 <_isatty_r+0x1c>)
  406c58:	2300      	movs	r3, #0
  406c5a:	4605      	mov	r5, r0
  406c5c:	4608      	mov	r0, r1
  406c5e:	6023      	str	r3, [r4, #0]
  406c60:	f7fb fc78 	bl	402554 <_isatty>
  406c64:	1c43      	adds	r3, r0, #1
  406c66:	d102      	bne.n	406c6e <_isatty_r+0x1a>
  406c68:	6823      	ldr	r3, [r4, #0]
  406c6a:	b103      	cbz	r3, 406c6e <_isatty_r+0x1a>
  406c6c:	602b      	str	r3, [r5, #0]
  406c6e:	bd38      	pop	{r3, r4, r5, pc}
  406c70:	20000838 	.word	0x20000838

00406c74 <_lseek_r>:
  406c74:	b538      	push	{r3, r4, r5, lr}
  406c76:	4c07      	ldr	r4, [pc, #28]	; (406c94 <_lseek_r+0x20>)
  406c78:	4605      	mov	r5, r0
  406c7a:	4608      	mov	r0, r1
  406c7c:	4611      	mov	r1, r2
  406c7e:	2200      	movs	r2, #0
  406c80:	6022      	str	r2, [r4, #0]
  406c82:	461a      	mov	r2, r3
  406c84:	f7fb fc68 	bl	402558 <_lseek>
  406c88:	1c43      	adds	r3, r0, #1
  406c8a:	d102      	bne.n	406c92 <_lseek_r+0x1e>
  406c8c:	6823      	ldr	r3, [r4, #0]
  406c8e:	b103      	cbz	r3, 406c92 <_lseek_r+0x1e>
  406c90:	602b      	str	r3, [r5, #0]
  406c92:	bd38      	pop	{r3, r4, r5, pc}
  406c94:	20000838 	.word	0x20000838

00406c98 <__malloc_lock>:
  406c98:	4770      	bx	lr

00406c9a <__malloc_unlock>:
  406c9a:	4770      	bx	lr

00406c9c <_read_r>:
  406c9c:	b538      	push	{r3, r4, r5, lr}
  406c9e:	4c07      	ldr	r4, [pc, #28]	; (406cbc <_read_r+0x20>)
  406ca0:	4605      	mov	r5, r0
  406ca2:	4608      	mov	r0, r1
  406ca4:	4611      	mov	r1, r2
  406ca6:	2200      	movs	r2, #0
  406ca8:	6022      	str	r2, [r4, #0]
  406caa:	461a      	mov	r2, r3
  406cac:	f7f9 fa60 	bl	400170 <_read>
  406cb0:	1c43      	adds	r3, r0, #1
  406cb2:	d102      	bne.n	406cba <_read_r+0x1e>
  406cb4:	6823      	ldr	r3, [r4, #0]
  406cb6:	b103      	cbz	r3, 406cba <_read_r+0x1e>
  406cb8:	602b      	str	r3, [r5, #0]
  406cba:	bd38      	pop	{r3, r4, r5, pc}
  406cbc:	20000838 	.word	0x20000838

00406cc0 <__aeabi_drsub>:
  406cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406cc4:	e002      	b.n	406ccc <__adddf3>
  406cc6:	bf00      	nop

00406cc8 <__aeabi_dsub>:
  406cc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406ccc <__adddf3>:
  406ccc:	b530      	push	{r4, r5, lr}
  406cce:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406cd2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406cd6:	ea94 0f05 	teq	r4, r5
  406cda:	bf08      	it	eq
  406cdc:	ea90 0f02 	teqeq	r0, r2
  406ce0:	bf1f      	itttt	ne
  406ce2:	ea54 0c00 	orrsne.w	ip, r4, r0
  406ce6:	ea55 0c02 	orrsne.w	ip, r5, r2
  406cea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406cee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406cf2:	f000 80e2 	beq.w	406eba <__adddf3+0x1ee>
  406cf6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406cfa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406cfe:	bfb8      	it	lt
  406d00:	426d      	neglt	r5, r5
  406d02:	dd0c      	ble.n	406d1e <__adddf3+0x52>
  406d04:	442c      	add	r4, r5
  406d06:	ea80 0202 	eor.w	r2, r0, r2
  406d0a:	ea81 0303 	eor.w	r3, r1, r3
  406d0e:	ea82 0000 	eor.w	r0, r2, r0
  406d12:	ea83 0101 	eor.w	r1, r3, r1
  406d16:	ea80 0202 	eor.w	r2, r0, r2
  406d1a:	ea81 0303 	eor.w	r3, r1, r3
  406d1e:	2d36      	cmp	r5, #54	; 0x36
  406d20:	bf88      	it	hi
  406d22:	bd30      	pophi	{r4, r5, pc}
  406d24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406d28:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406d2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406d30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406d34:	d002      	beq.n	406d3c <__adddf3+0x70>
  406d36:	4240      	negs	r0, r0
  406d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406d3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406d40:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406d44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406d48:	d002      	beq.n	406d50 <__adddf3+0x84>
  406d4a:	4252      	negs	r2, r2
  406d4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406d50:	ea94 0f05 	teq	r4, r5
  406d54:	f000 80a7 	beq.w	406ea6 <__adddf3+0x1da>
  406d58:	f1a4 0401 	sub.w	r4, r4, #1
  406d5c:	f1d5 0e20 	rsbs	lr, r5, #32
  406d60:	db0d      	blt.n	406d7e <__adddf3+0xb2>
  406d62:	fa02 fc0e 	lsl.w	ip, r2, lr
  406d66:	fa22 f205 	lsr.w	r2, r2, r5
  406d6a:	1880      	adds	r0, r0, r2
  406d6c:	f141 0100 	adc.w	r1, r1, #0
  406d70:	fa03 f20e 	lsl.w	r2, r3, lr
  406d74:	1880      	adds	r0, r0, r2
  406d76:	fa43 f305 	asr.w	r3, r3, r5
  406d7a:	4159      	adcs	r1, r3
  406d7c:	e00e      	b.n	406d9c <__adddf3+0xd0>
  406d7e:	f1a5 0520 	sub.w	r5, r5, #32
  406d82:	f10e 0e20 	add.w	lr, lr, #32
  406d86:	2a01      	cmp	r2, #1
  406d88:	fa03 fc0e 	lsl.w	ip, r3, lr
  406d8c:	bf28      	it	cs
  406d8e:	f04c 0c02 	orrcs.w	ip, ip, #2
  406d92:	fa43 f305 	asr.w	r3, r3, r5
  406d96:	18c0      	adds	r0, r0, r3
  406d98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406d9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406da0:	d507      	bpl.n	406db2 <__adddf3+0xe6>
  406da2:	f04f 0e00 	mov.w	lr, #0
  406da6:	f1dc 0c00 	rsbs	ip, ip, #0
  406daa:	eb7e 0000 	sbcs.w	r0, lr, r0
  406dae:	eb6e 0101 	sbc.w	r1, lr, r1
  406db2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406db6:	d31b      	bcc.n	406df0 <__adddf3+0x124>
  406db8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406dbc:	d30c      	bcc.n	406dd8 <__adddf3+0x10c>
  406dbe:	0849      	lsrs	r1, r1, #1
  406dc0:	ea5f 0030 	movs.w	r0, r0, rrx
  406dc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406dc8:	f104 0401 	add.w	r4, r4, #1
  406dcc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406dd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406dd4:	f080 809a 	bcs.w	406f0c <__adddf3+0x240>
  406dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406ddc:	bf08      	it	eq
  406dde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406de2:	f150 0000 	adcs.w	r0, r0, #0
  406de6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406dea:	ea41 0105 	orr.w	r1, r1, r5
  406dee:	bd30      	pop	{r4, r5, pc}
  406df0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406df4:	4140      	adcs	r0, r0
  406df6:	eb41 0101 	adc.w	r1, r1, r1
  406dfa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406dfe:	f1a4 0401 	sub.w	r4, r4, #1
  406e02:	d1e9      	bne.n	406dd8 <__adddf3+0x10c>
  406e04:	f091 0f00 	teq	r1, #0
  406e08:	bf04      	itt	eq
  406e0a:	4601      	moveq	r1, r0
  406e0c:	2000      	moveq	r0, #0
  406e0e:	fab1 f381 	clz	r3, r1
  406e12:	bf08      	it	eq
  406e14:	3320      	addeq	r3, #32
  406e16:	f1a3 030b 	sub.w	r3, r3, #11
  406e1a:	f1b3 0220 	subs.w	r2, r3, #32
  406e1e:	da0c      	bge.n	406e3a <__adddf3+0x16e>
  406e20:	320c      	adds	r2, #12
  406e22:	dd08      	ble.n	406e36 <__adddf3+0x16a>
  406e24:	f102 0c14 	add.w	ip, r2, #20
  406e28:	f1c2 020c 	rsb	r2, r2, #12
  406e2c:	fa01 f00c 	lsl.w	r0, r1, ip
  406e30:	fa21 f102 	lsr.w	r1, r1, r2
  406e34:	e00c      	b.n	406e50 <__adddf3+0x184>
  406e36:	f102 0214 	add.w	r2, r2, #20
  406e3a:	bfd8      	it	le
  406e3c:	f1c2 0c20 	rsble	ip, r2, #32
  406e40:	fa01 f102 	lsl.w	r1, r1, r2
  406e44:	fa20 fc0c 	lsr.w	ip, r0, ip
  406e48:	bfdc      	itt	le
  406e4a:	ea41 010c 	orrle.w	r1, r1, ip
  406e4e:	4090      	lslle	r0, r2
  406e50:	1ae4      	subs	r4, r4, r3
  406e52:	bfa2      	ittt	ge
  406e54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406e58:	4329      	orrge	r1, r5
  406e5a:	bd30      	popge	{r4, r5, pc}
  406e5c:	ea6f 0404 	mvn.w	r4, r4
  406e60:	3c1f      	subs	r4, #31
  406e62:	da1c      	bge.n	406e9e <__adddf3+0x1d2>
  406e64:	340c      	adds	r4, #12
  406e66:	dc0e      	bgt.n	406e86 <__adddf3+0x1ba>
  406e68:	f104 0414 	add.w	r4, r4, #20
  406e6c:	f1c4 0220 	rsb	r2, r4, #32
  406e70:	fa20 f004 	lsr.w	r0, r0, r4
  406e74:	fa01 f302 	lsl.w	r3, r1, r2
  406e78:	ea40 0003 	orr.w	r0, r0, r3
  406e7c:	fa21 f304 	lsr.w	r3, r1, r4
  406e80:	ea45 0103 	orr.w	r1, r5, r3
  406e84:	bd30      	pop	{r4, r5, pc}
  406e86:	f1c4 040c 	rsb	r4, r4, #12
  406e8a:	f1c4 0220 	rsb	r2, r4, #32
  406e8e:	fa20 f002 	lsr.w	r0, r0, r2
  406e92:	fa01 f304 	lsl.w	r3, r1, r4
  406e96:	ea40 0003 	orr.w	r0, r0, r3
  406e9a:	4629      	mov	r1, r5
  406e9c:	bd30      	pop	{r4, r5, pc}
  406e9e:	fa21 f004 	lsr.w	r0, r1, r4
  406ea2:	4629      	mov	r1, r5
  406ea4:	bd30      	pop	{r4, r5, pc}
  406ea6:	f094 0f00 	teq	r4, #0
  406eaa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406eae:	bf06      	itte	eq
  406eb0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406eb4:	3401      	addeq	r4, #1
  406eb6:	3d01      	subne	r5, #1
  406eb8:	e74e      	b.n	406d58 <__adddf3+0x8c>
  406eba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406ebe:	bf18      	it	ne
  406ec0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406ec4:	d029      	beq.n	406f1a <__adddf3+0x24e>
  406ec6:	ea94 0f05 	teq	r4, r5
  406eca:	bf08      	it	eq
  406ecc:	ea90 0f02 	teqeq	r0, r2
  406ed0:	d005      	beq.n	406ede <__adddf3+0x212>
  406ed2:	ea54 0c00 	orrs.w	ip, r4, r0
  406ed6:	bf04      	itt	eq
  406ed8:	4619      	moveq	r1, r3
  406eda:	4610      	moveq	r0, r2
  406edc:	bd30      	pop	{r4, r5, pc}
  406ede:	ea91 0f03 	teq	r1, r3
  406ee2:	bf1e      	ittt	ne
  406ee4:	2100      	movne	r1, #0
  406ee6:	2000      	movne	r0, #0
  406ee8:	bd30      	popne	{r4, r5, pc}
  406eea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406eee:	d105      	bne.n	406efc <__adddf3+0x230>
  406ef0:	0040      	lsls	r0, r0, #1
  406ef2:	4149      	adcs	r1, r1
  406ef4:	bf28      	it	cs
  406ef6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406efa:	bd30      	pop	{r4, r5, pc}
  406efc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406f00:	bf3c      	itt	cc
  406f02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406f06:	bd30      	popcc	{r4, r5, pc}
  406f08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406f10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406f14:	f04f 0000 	mov.w	r0, #0
  406f18:	bd30      	pop	{r4, r5, pc}
  406f1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406f1e:	bf1a      	itte	ne
  406f20:	4619      	movne	r1, r3
  406f22:	4610      	movne	r0, r2
  406f24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406f28:	bf1c      	itt	ne
  406f2a:	460b      	movne	r3, r1
  406f2c:	4602      	movne	r2, r0
  406f2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406f32:	bf06      	itte	eq
  406f34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406f38:	ea91 0f03 	teqeq	r1, r3
  406f3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406f40:	bd30      	pop	{r4, r5, pc}
  406f42:	bf00      	nop

00406f44 <__aeabi_ui2d>:
  406f44:	f090 0f00 	teq	r0, #0
  406f48:	bf04      	itt	eq
  406f4a:	2100      	moveq	r1, #0
  406f4c:	4770      	bxeq	lr
  406f4e:	b530      	push	{r4, r5, lr}
  406f50:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406f54:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406f58:	f04f 0500 	mov.w	r5, #0
  406f5c:	f04f 0100 	mov.w	r1, #0
  406f60:	e750      	b.n	406e04 <__adddf3+0x138>
  406f62:	bf00      	nop

00406f64 <__aeabi_i2d>:
  406f64:	f090 0f00 	teq	r0, #0
  406f68:	bf04      	itt	eq
  406f6a:	2100      	moveq	r1, #0
  406f6c:	4770      	bxeq	lr
  406f6e:	b530      	push	{r4, r5, lr}
  406f70:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406f74:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406f78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406f7c:	bf48      	it	mi
  406f7e:	4240      	negmi	r0, r0
  406f80:	f04f 0100 	mov.w	r1, #0
  406f84:	e73e      	b.n	406e04 <__adddf3+0x138>
  406f86:	bf00      	nop

00406f88 <__aeabi_f2d>:
  406f88:	0042      	lsls	r2, r0, #1
  406f8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406f8e:	ea4f 0131 	mov.w	r1, r1, rrx
  406f92:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406f96:	bf1f      	itttt	ne
  406f98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406f9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406fa0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406fa4:	4770      	bxne	lr
  406fa6:	f092 0f00 	teq	r2, #0
  406faa:	bf14      	ite	ne
  406fac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406fb0:	4770      	bxeq	lr
  406fb2:	b530      	push	{r4, r5, lr}
  406fb4:	f44f 7460 	mov.w	r4, #896	; 0x380
  406fb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406fbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406fc0:	e720      	b.n	406e04 <__adddf3+0x138>
  406fc2:	bf00      	nop

00406fc4 <__aeabi_ul2d>:
  406fc4:	ea50 0201 	orrs.w	r2, r0, r1
  406fc8:	bf08      	it	eq
  406fca:	4770      	bxeq	lr
  406fcc:	b530      	push	{r4, r5, lr}
  406fce:	f04f 0500 	mov.w	r5, #0
  406fd2:	e00a      	b.n	406fea <__aeabi_l2d+0x16>

00406fd4 <__aeabi_l2d>:
  406fd4:	ea50 0201 	orrs.w	r2, r0, r1
  406fd8:	bf08      	it	eq
  406fda:	4770      	bxeq	lr
  406fdc:	b530      	push	{r4, r5, lr}
  406fde:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  406fe2:	d502      	bpl.n	406fea <__aeabi_l2d+0x16>
  406fe4:	4240      	negs	r0, r0
  406fe6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406fea:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406fee:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406ff2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  406ff6:	f43f aedc 	beq.w	406db2 <__adddf3+0xe6>
  406ffa:	f04f 0203 	mov.w	r2, #3
  406ffe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407002:	bf18      	it	ne
  407004:	3203      	addne	r2, #3
  407006:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40700a:	bf18      	it	ne
  40700c:	3203      	addne	r2, #3
  40700e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407012:	f1c2 0320 	rsb	r3, r2, #32
  407016:	fa00 fc03 	lsl.w	ip, r0, r3
  40701a:	fa20 f002 	lsr.w	r0, r0, r2
  40701e:	fa01 fe03 	lsl.w	lr, r1, r3
  407022:	ea40 000e 	orr.w	r0, r0, lr
  407026:	fa21 f102 	lsr.w	r1, r1, r2
  40702a:	4414      	add	r4, r2
  40702c:	e6c1      	b.n	406db2 <__adddf3+0xe6>
  40702e:	bf00      	nop

00407030 <__aeabi_dmul>:
  407030:	b570      	push	{r4, r5, r6, lr}
  407032:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407036:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40703a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40703e:	bf1d      	ittte	ne
  407040:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407044:	ea94 0f0c 	teqne	r4, ip
  407048:	ea95 0f0c 	teqne	r5, ip
  40704c:	f000 f8de 	bleq	40720c <__aeabi_dmul+0x1dc>
  407050:	442c      	add	r4, r5
  407052:	ea81 0603 	eor.w	r6, r1, r3
  407056:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40705a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40705e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407062:	bf18      	it	ne
  407064:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407068:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40706c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407070:	d038      	beq.n	4070e4 <__aeabi_dmul+0xb4>
  407072:	fba0 ce02 	umull	ip, lr, r0, r2
  407076:	f04f 0500 	mov.w	r5, #0
  40707a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40707e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407082:	fbe0 e503 	umlal	lr, r5, r0, r3
  407086:	f04f 0600 	mov.w	r6, #0
  40708a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40708e:	f09c 0f00 	teq	ip, #0
  407092:	bf18      	it	ne
  407094:	f04e 0e01 	orrne.w	lr, lr, #1
  407098:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40709c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4070a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4070a4:	d204      	bcs.n	4070b0 <__aeabi_dmul+0x80>
  4070a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4070aa:	416d      	adcs	r5, r5
  4070ac:	eb46 0606 	adc.w	r6, r6, r6
  4070b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4070b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4070b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4070bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4070c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4070c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4070c8:	bf88      	it	hi
  4070ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4070ce:	d81e      	bhi.n	40710e <__aeabi_dmul+0xde>
  4070d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4070d4:	bf08      	it	eq
  4070d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4070da:	f150 0000 	adcs.w	r0, r0, #0
  4070de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4070e2:	bd70      	pop	{r4, r5, r6, pc}
  4070e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4070e8:	ea46 0101 	orr.w	r1, r6, r1
  4070ec:	ea40 0002 	orr.w	r0, r0, r2
  4070f0:	ea81 0103 	eor.w	r1, r1, r3
  4070f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4070f8:	bfc2      	ittt	gt
  4070fa:	ebd4 050c 	rsbsgt	r5, r4, ip
  4070fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407102:	bd70      	popgt	{r4, r5, r6, pc}
  407104:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407108:	f04f 0e00 	mov.w	lr, #0
  40710c:	3c01      	subs	r4, #1
  40710e:	f300 80ab 	bgt.w	407268 <__aeabi_dmul+0x238>
  407112:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407116:	bfde      	ittt	le
  407118:	2000      	movle	r0, #0
  40711a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40711e:	bd70      	pople	{r4, r5, r6, pc}
  407120:	f1c4 0400 	rsb	r4, r4, #0
  407124:	3c20      	subs	r4, #32
  407126:	da35      	bge.n	407194 <__aeabi_dmul+0x164>
  407128:	340c      	adds	r4, #12
  40712a:	dc1b      	bgt.n	407164 <__aeabi_dmul+0x134>
  40712c:	f104 0414 	add.w	r4, r4, #20
  407130:	f1c4 0520 	rsb	r5, r4, #32
  407134:	fa00 f305 	lsl.w	r3, r0, r5
  407138:	fa20 f004 	lsr.w	r0, r0, r4
  40713c:	fa01 f205 	lsl.w	r2, r1, r5
  407140:	ea40 0002 	orr.w	r0, r0, r2
  407144:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407148:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40714c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407150:	fa21 f604 	lsr.w	r6, r1, r4
  407154:	eb42 0106 	adc.w	r1, r2, r6
  407158:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40715c:	bf08      	it	eq
  40715e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407162:	bd70      	pop	{r4, r5, r6, pc}
  407164:	f1c4 040c 	rsb	r4, r4, #12
  407168:	f1c4 0520 	rsb	r5, r4, #32
  40716c:	fa00 f304 	lsl.w	r3, r0, r4
  407170:	fa20 f005 	lsr.w	r0, r0, r5
  407174:	fa01 f204 	lsl.w	r2, r1, r4
  407178:	ea40 0002 	orr.w	r0, r0, r2
  40717c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407180:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407184:	f141 0100 	adc.w	r1, r1, #0
  407188:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40718c:	bf08      	it	eq
  40718e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407192:	bd70      	pop	{r4, r5, r6, pc}
  407194:	f1c4 0520 	rsb	r5, r4, #32
  407198:	fa00 f205 	lsl.w	r2, r0, r5
  40719c:	ea4e 0e02 	orr.w	lr, lr, r2
  4071a0:	fa20 f304 	lsr.w	r3, r0, r4
  4071a4:	fa01 f205 	lsl.w	r2, r1, r5
  4071a8:	ea43 0302 	orr.w	r3, r3, r2
  4071ac:	fa21 f004 	lsr.w	r0, r1, r4
  4071b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4071b4:	fa21 f204 	lsr.w	r2, r1, r4
  4071b8:	ea20 0002 	bic.w	r0, r0, r2
  4071bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4071c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4071c4:	bf08      	it	eq
  4071c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4071ca:	bd70      	pop	{r4, r5, r6, pc}
  4071cc:	f094 0f00 	teq	r4, #0
  4071d0:	d10f      	bne.n	4071f2 <__aeabi_dmul+0x1c2>
  4071d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4071d6:	0040      	lsls	r0, r0, #1
  4071d8:	eb41 0101 	adc.w	r1, r1, r1
  4071dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4071e0:	bf08      	it	eq
  4071e2:	3c01      	subeq	r4, #1
  4071e4:	d0f7      	beq.n	4071d6 <__aeabi_dmul+0x1a6>
  4071e6:	ea41 0106 	orr.w	r1, r1, r6
  4071ea:	f095 0f00 	teq	r5, #0
  4071ee:	bf18      	it	ne
  4071f0:	4770      	bxne	lr
  4071f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4071f6:	0052      	lsls	r2, r2, #1
  4071f8:	eb43 0303 	adc.w	r3, r3, r3
  4071fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407200:	bf08      	it	eq
  407202:	3d01      	subeq	r5, #1
  407204:	d0f7      	beq.n	4071f6 <__aeabi_dmul+0x1c6>
  407206:	ea43 0306 	orr.w	r3, r3, r6
  40720a:	4770      	bx	lr
  40720c:	ea94 0f0c 	teq	r4, ip
  407210:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407214:	bf18      	it	ne
  407216:	ea95 0f0c 	teqne	r5, ip
  40721a:	d00c      	beq.n	407236 <__aeabi_dmul+0x206>
  40721c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407220:	bf18      	it	ne
  407222:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407226:	d1d1      	bne.n	4071cc <__aeabi_dmul+0x19c>
  407228:	ea81 0103 	eor.w	r1, r1, r3
  40722c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407230:	f04f 0000 	mov.w	r0, #0
  407234:	bd70      	pop	{r4, r5, r6, pc}
  407236:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40723a:	bf06      	itte	eq
  40723c:	4610      	moveq	r0, r2
  40723e:	4619      	moveq	r1, r3
  407240:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407244:	d019      	beq.n	40727a <__aeabi_dmul+0x24a>
  407246:	ea94 0f0c 	teq	r4, ip
  40724a:	d102      	bne.n	407252 <__aeabi_dmul+0x222>
  40724c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407250:	d113      	bne.n	40727a <__aeabi_dmul+0x24a>
  407252:	ea95 0f0c 	teq	r5, ip
  407256:	d105      	bne.n	407264 <__aeabi_dmul+0x234>
  407258:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40725c:	bf1c      	itt	ne
  40725e:	4610      	movne	r0, r2
  407260:	4619      	movne	r1, r3
  407262:	d10a      	bne.n	40727a <__aeabi_dmul+0x24a>
  407264:	ea81 0103 	eor.w	r1, r1, r3
  407268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40726c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407274:	f04f 0000 	mov.w	r0, #0
  407278:	bd70      	pop	{r4, r5, r6, pc}
  40727a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40727e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407282:	bd70      	pop	{r4, r5, r6, pc}

00407284 <__aeabi_ddiv>:
  407284:	b570      	push	{r4, r5, r6, lr}
  407286:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40728a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40728e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407292:	bf1d      	ittte	ne
  407294:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407298:	ea94 0f0c 	teqne	r4, ip
  40729c:	ea95 0f0c 	teqne	r5, ip
  4072a0:	f000 f8a7 	bleq	4073f2 <__aeabi_ddiv+0x16e>
  4072a4:	eba4 0405 	sub.w	r4, r4, r5
  4072a8:	ea81 0e03 	eor.w	lr, r1, r3
  4072ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4072b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4072b4:	f000 8088 	beq.w	4073c8 <__aeabi_ddiv+0x144>
  4072b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4072bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4072c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4072c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4072c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4072cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4072d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4072d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4072d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4072dc:	429d      	cmp	r5, r3
  4072de:	bf08      	it	eq
  4072e0:	4296      	cmpeq	r6, r2
  4072e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4072e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4072ea:	d202      	bcs.n	4072f2 <__aeabi_ddiv+0x6e>
  4072ec:	085b      	lsrs	r3, r3, #1
  4072ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4072f2:	1ab6      	subs	r6, r6, r2
  4072f4:	eb65 0503 	sbc.w	r5, r5, r3
  4072f8:	085b      	lsrs	r3, r3, #1
  4072fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4072fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407302:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407306:	ebb6 0e02 	subs.w	lr, r6, r2
  40730a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40730e:	bf22      	ittt	cs
  407310:	1ab6      	subcs	r6, r6, r2
  407312:	4675      	movcs	r5, lr
  407314:	ea40 000c 	orrcs.w	r0, r0, ip
  407318:	085b      	lsrs	r3, r3, #1
  40731a:	ea4f 0232 	mov.w	r2, r2, rrx
  40731e:	ebb6 0e02 	subs.w	lr, r6, r2
  407322:	eb75 0e03 	sbcs.w	lr, r5, r3
  407326:	bf22      	ittt	cs
  407328:	1ab6      	subcs	r6, r6, r2
  40732a:	4675      	movcs	r5, lr
  40732c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407330:	085b      	lsrs	r3, r3, #1
  407332:	ea4f 0232 	mov.w	r2, r2, rrx
  407336:	ebb6 0e02 	subs.w	lr, r6, r2
  40733a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40733e:	bf22      	ittt	cs
  407340:	1ab6      	subcs	r6, r6, r2
  407342:	4675      	movcs	r5, lr
  407344:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407348:	085b      	lsrs	r3, r3, #1
  40734a:	ea4f 0232 	mov.w	r2, r2, rrx
  40734e:	ebb6 0e02 	subs.w	lr, r6, r2
  407352:	eb75 0e03 	sbcs.w	lr, r5, r3
  407356:	bf22      	ittt	cs
  407358:	1ab6      	subcs	r6, r6, r2
  40735a:	4675      	movcs	r5, lr
  40735c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407360:	ea55 0e06 	orrs.w	lr, r5, r6
  407364:	d018      	beq.n	407398 <__aeabi_ddiv+0x114>
  407366:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40736a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40736e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407372:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407376:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40737a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40737e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407382:	d1c0      	bne.n	407306 <__aeabi_ddiv+0x82>
  407384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407388:	d10b      	bne.n	4073a2 <__aeabi_ddiv+0x11e>
  40738a:	ea41 0100 	orr.w	r1, r1, r0
  40738e:	f04f 0000 	mov.w	r0, #0
  407392:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407396:	e7b6      	b.n	407306 <__aeabi_ddiv+0x82>
  407398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40739c:	bf04      	itt	eq
  40739e:	4301      	orreq	r1, r0
  4073a0:	2000      	moveq	r0, #0
  4073a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4073a6:	bf88      	it	hi
  4073a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4073ac:	f63f aeaf 	bhi.w	40710e <__aeabi_dmul+0xde>
  4073b0:	ebb5 0c03 	subs.w	ip, r5, r3
  4073b4:	bf04      	itt	eq
  4073b6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4073ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4073be:	f150 0000 	adcs.w	r0, r0, #0
  4073c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4073c6:	bd70      	pop	{r4, r5, r6, pc}
  4073c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4073cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4073d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4073d4:	bfc2      	ittt	gt
  4073d6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4073da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4073de:	bd70      	popgt	{r4, r5, r6, pc}
  4073e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4073e4:	f04f 0e00 	mov.w	lr, #0
  4073e8:	3c01      	subs	r4, #1
  4073ea:	e690      	b.n	40710e <__aeabi_dmul+0xde>
  4073ec:	ea45 0e06 	orr.w	lr, r5, r6
  4073f0:	e68d      	b.n	40710e <__aeabi_dmul+0xde>
  4073f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4073f6:	ea94 0f0c 	teq	r4, ip
  4073fa:	bf08      	it	eq
  4073fc:	ea95 0f0c 	teqeq	r5, ip
  407400:	f43f af3b 	beq.w	40727a <__aeabi_dmul+0x24a>
  407404:	ea94 0f0c 	teq	r4, ip
  407408:	d10a      	bne.n	407420 <__aeabi_ddiv+0x19c>
  40740a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40740e:	f47f af34 	bne.w	40727a <__aeabi_dmul+0x24a>
  407412:	ea95 0f0c 	teq	r5, ip
  407416:	f47f af25 	bne.w	407264 <__aeabi_dmul+0x234>
  40741a:	4610      	mov	r0, r2
  40741c:	4619      	mov	r1, r3
  40741e:	e72c      	b.n	40727a <__aeabi_dmul+0x24a>
  407420:	ea95 0f0c 	teq	r5, ip
  407424:	d106      	bne.n	407434 <__aeabi_ddiv+0x1b0>
  407426:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40742a:	f43f aefd 	beq.w	407228 <__aeabi_dmul+0x1f8>
  40742e:	4610      	mov	r0, r2
  407430:	4619      	mov	r1, r3
  407432:	e722      	b.n	40727a <__aeabi_dmul+0x24a>
  407434:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407438:	bf18      	it	ne
  40743a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40743e:	f47f aec5 	bne.w	4071cc <__aeabi_dmul+0x19c>
  407442:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407446:	f47f af0d 	bne.w	407264 <__aeabi_dmul+0x234>
  40744a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40744e:	f47f aeeb 	bne.w	407228 <__aeabi_dmul+0x1f8>
  407452:	e712      	b.n	40727a <__aeabi_dmul+0x24a>

00407454 <__gedf2>:
  407454:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  407458:	e006      	b.n	407468 <__cmpdf2+0x4>
  40745a:	bf00      	nop

0040745c <__ledf2>:
  40745c:	f04f 0c01 	mov.w	ip, #1
  407460:	e002      	b.n	407468 <__cmpdf2+0x4>
  407462:	bf00      	nop

00407464 <__cmpdf2>:
  407464:	f04f 0c01 	mov.w	ip, #1
  407468:	f84d cd04 	str.w	ip, [sp, #-4]!
  40746c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407474:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407478:	bf18      	it	ne
  40747a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40747e:	d01b      	beq.n	4074b8 <__cmpdf2+0x54>
  407480:	b001      	add	sp, #4
  407482:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407486:	bf0c      	ite	eq
  407488:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40748c:	ea91 0f03 	teqne	r1, r3
  407490:	bf02      	ittt	eq
  407492:	ea90 0f02 	teqeq	r0, r2
  407496:	2000      	moveq	r0, #0
  407498:	4770      	bxeq	lr
  40749a:	f110 0f00 	cmn.w	r0, #0
  40749e:	ea91 0f03 	teq	r1, r3
  4074a2:	bf58      	it	pl
  4074a4:	4299      	cmppl	r1, r3
  4074a6:	bf08      	it	eq
  4074a8:	4290      	cmpeq	r0, r2
  4074aa:	bf2c      	ite	cs
  4074ac:	17d8      	asrcs	r0, r3, #31
  4074ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4074b2:	f040 0001 	orr.w	r0, r0, #1
  4074b6:	4770      	bx	lr
  4074b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4074bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4074c0:	d102      	bne.n	4074c8 <__cmpdf2+0x64>
  4074c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4074c6:	d107      	bne.n	4074d8 <__cmpdf2+0x74>
  4074c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4074cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4074d0:	d1d6      	bne.n	407480 <__cmpdf2+0x1c>
  4074d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4074d6:	d0d3      	beq.n	407480 <__cmpdf2+0x1c>
  4074d8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4074dc:	4770      	bx	lr
  4074de:	bf00      	nop

004074e0 <__aeabi_cdrcmple>:
  4074e0:	4684      	mov	ip, r0
  4074e2:	4610      	mov	r0, r2
  4074e4:	4662      	mov	r2, ip
  4074e6:	468c      	mov	ip, r1
  4074e8:	4619      	mov	r1, r3
  4074ea:	4663      	mov	r3, ip
  4074ec:	e000      	b.n	4074f0 <__aeabi_cdcmpeq>
  4074ee:	bf00      	nop

004074f0 <__aeabi_cdcmpeq>:
  4074f0:	b501      	push	{r0, lr}
  4074f2:	f7ff ffb7 	bl	407464 <__cmpdf2>
  4074f6:	2800      	cmp	r0, #0
  4074f8:	bf48      	it	mi
  4074fa:	f110 0f00 	cmnmi.w	r0, #0
  4074fe:	bd01      	pop	{r0, pc}

00407500 <__aeabi_dcmpeq>:
  407500:	f84d ed08 	str.w	lr, [sp, #-8]!
  407504:	f7ff fff4 	bl	4074f0 <__aeabi_cdcmpeq>
  407508:	bf0c      	ite	eq
  40750a:	2001      	moveq	r0, #1
  40750c:	2000      	movne	r0, #0
  40750e:	f85d fb08 	ldr.w	pc, [sp], #8
  407512:	bf00      	nop

00407514 <__aeabi_dcmplt>:
  407514:	f84d ed08 	str.w	lr, [sp, #-8]!
  407518:	f7ff ffea 	bl	4074f0 <__aeabi_cdcmpeq>
  40751c:	bf34      	ite	cc
  40751e:	2001      	movcc	r0, #1
  407520:	2000      	movcs	r0, #0
  407522:	f85d fb08 	ldr.w	pc, [sp], #8
  407526:	bf00      	nop

00407528 <__aeabi_dcmple>:
  407528:	f84d ed08 	str.w	lr, [sp, #-8]!
  40752c:	f7ff ffe0 	bl	4074f0 <__aeabi_cdcmpeq>
  407530:	bf94      	ite	ls
  407532:	2001      	movls	r0, #1
  407534:	2000      	movhi	r0, #0
  407536:	f85d fb08 	ldr.w	pc, [sp], #8
  40753a:	bf00      	nop

0040753c <__aeabi_dcmpge>:
  40753c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407540:	f7ff ffce 	bl	4074e0 <__aeabi_cdrcmple>
  407544:	bf94      	ite	ls
  407546:	2001      	movls	r0, #1
  407548:	2000      	movhi	r0, #0
  40754a:	f85d fb08 	ldr.w	pc, [sp], #8
  40754e:	bf00      	nop

00407550 <__aeabi_dcmpgt>:
  407550:	f84d ed08 	str.w	lr, [sp, #-8]!
  407554:	f7ff ffc4 	bl	4074e0 <__aeabi_cdrcmple>
  407558:	bf34      	ite	cc
  40755a:	2001      	movcc	r0, #1
  40755c:	2000      	movcs	r0, #0
  40755e:	f85d fb08 	ldr.w	pc, [sp], #8
  407562:	bf00      	nop

00407564 <__aeabi_dcmpun>:
  407564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40756c:	d102      	bne.n	407574 <__aeabi_dcmpun+0x10>
  40756e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407572:	d10a      	bne.n	40758a <__aeabi_dcmpun+0x26>
  407574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40757c:	d102      	bne.n	407584 <__aeabi_dcmpun+0x20>
  40757e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407582:	d102      	bne.n	40758a <__aeabi_dcmpun+0x26>
  407584:	f04f 0000 	mov.w	r0, #0
  407588:	4770      	bx	lr
  40758a:	f04f 0001 	mov.w	r0, #1
  40758e:	4770      	bx	lr

00407590 <__aeabi_d2iz>:
  407590:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407594:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407598:	d215      	bcs.n	4075c6 <__aeabi_d2iz+0x36>
  40759a:	d511      	bpl.n	4075c0 <__aeabi_d2iz+0x30>
  40759c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4075a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4075a4:	d912      	bls.n	4075cc <__aeabi_d2iz+0x3c>
  4075a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4075aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4075ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4075b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4075b6:	fa23 f002 	lsr.w	r0, r3, r2
  4075ba:	bf18      	it	ne
  4075bc:	4240      	negne	r0, r0
  4075be:	4770      	bx	lr
  4075c0:	f04f 0000 	mov.w	r0, #0
  4075c4:	4770      	bx	lr
  4075c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4075ca:	d105      	bne.n	4075d8 <__aeabi_d2iz+0x48>
  4075cc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4075d0:	bf08      	it	eq
  4075d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4075d6:	4770      	bx	lr
  4075d8:	f04f 0000 	mov.w	r0, #0
  4075dc:	4770      	bx	lr
  4075de:	bf00      	nop

004075e0 <__aeabi_d2uiz>:
  4075e0:	004a      	lsls	r2, r1, #1
  4075e2:	d211      	bcs.n	407608 <__aeabi_d2uiz+0x28>
  4075e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4075e8:	d211      	bcs.n	40760e <__aeabi_d2uiz+0x2e>
  4075ea:	d50d      	bpl.n	407608 <__aeabi_d2uiz+0x28>
  4075ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4075f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4075f4:	d40e      	bmi.n	407614 <__aeabi_d2uiz+0x34>
  4075f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4075fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4075fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407602:	fa23 f002 	lsr.w	r0, r3, r2
  407606:	4770      	bx	lr
  407608:	f04f 0000 	mov.w	r0, #0
  40760c:	4770      	bx	lr
  40760e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407612:	d102      	bne.n	40761a <__aeabi_d2uiz+0x3a>
  407614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  407618:	4770      	bx	lr
  40761a:	f04f 0000 	mov.w	r0, #0
  40761e:	4770      	bx	lr

00407620 <__aeabi_d2f>:
  407620:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407624:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  407628:	bf24      	itt	cs
  40762a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40762e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  407632:	d90d      	bls.n	407650 <__aeabi_d2f+0x30>
  407634:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407638:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40763c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  407640:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  407644:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  407648:	bf08      	it	eq
  40764a:	f020 0001 	biceq.w	r0, r0, #1
  40764e:	4770      	bx	lr
  407650:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  407654:	d121      	bne.n	40769a <__aeabi_d2f+0x7a>
  407656:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40765a:	bfbc      	itt	lt
  40765c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  407660:	4770      	bxlt	lr
  407662:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407666:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40766a:	f1c2 0218 	rsb	r2, r2, #24
  40766e:	f1c2 0c20 	rsb	ip, r2, #32
  407672:	fa10 f30c 	lsls.w	r3, r0, ip
  407676:	fa20 f002 	lsr.w	r0, r0, r2
  40767a:	bf18      	it	ne
  40767c:	f040 0001 	orrne.w	r0, r0, #1
  407680:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407684:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  407688:	fa03 fc0c 	lsl.w	ip, r3, ip
  40768c:	ea40 000c 	orr.w	r0, r0, ip
  407690:	fa23 f302 	lsr.w	r3, r3, r2
  407694:	ea4f 0343 	mov.w	r3, r3, lsl #1
  407698:	e7cc      	b.n	407634 <__aeabi_d2f+0x14>
  40769a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40769e:	d107      	bne.n	4076b0 <__aeabi_d2f+0x90>
  4076a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4076a4:	bf1e      	ittt	ne
  4076a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4076aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4076ae:	4770      	bxne	lr
  4076b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4076b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4076b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4076bc:	4770      	bx	lr
  4076be:	bf00      	nop

004076c0 <__aeabi_frsub>:
  4076c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4076c4:	e002      	b.n	4076cc <__addsf3>
  4076c6:	bf00      	nop

004076c8 <__aeabi_fsub>:
  4076c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004076cc <__addsf3>:
  4076cc:	0042      	lsls	r2, r0, #1
  4076ce:	bf1f      	itttt	ne
  4076d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4076d4:	ea92 0f03 	teqne	r2, r3
  4076d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4076dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4076e0:	d06a      	beq.n	4077b8 <__addsf3+0xec>
  4076e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4076e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4076ea:	bfc1      	itttt	gt
  4076ec:	18d2      	addgt	r2, r2, r3
  4076ee:	4041      	eorgt	r1, r0
  4076f0:	4048      	eorgt	r0, r1
  4076f2:	4041      	eorgt	r1, r0
  4076f4:	bfb8      	it	lt
  4076f6:	425b      	neglt	r3, r3
  4076f8:	2b19      	cmp	r3, #25
  4076fa:	bf88      	it	hi
  4076fc:	4770      	bxhi	lr
  4076fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407702:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407706:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40770a:	bf18      	it	ne
  40770c:	4240      	negne	r0, r0
  40770e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407712:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  407716:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40771a:	bf18      	it	ne
  40771c:	4249      	negne	r1, r1
  40771e:	ea92 0f03 	teq	r2, r3
  407722:	d03f      	beq.n	4077a4 <__addsf3+0xd8>
  407724:	f1a2 0201 	sub.w	r2, r2, #1
  407728:	fa41 fc03 	asr.w	ip, r1, r3
  40772c:	eb10 000c 	adds.w	r0, r0, ip
  407730:	f1c3 0320 	rsb	r3, r3, #32
  407734:	fa01 f103 	lsl.w	r1, r1, r3
  407738:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40773c:	d502      	bpl.n	407744 <__addsf3+0x78>
  40773e:	4249      	negs	r1, r1
  407740:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  407744:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  407748:	d313      	bcc.n	407772 <__addsf3+0xa6>
  40774a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40774e:	d306      	bcc.n	40775e <__addsf3+0x92>
  407750:	0840      	lsrs	r0, r0, #1
  407752:	ea4f 0131 	mov.w	r1, r1, rrx
  407756:	f102 0201 	add.w	r2, r2, #1
  40775a:	2afe      	cmp	r2, #254	; 0xfe
  40775c:	d251      	bcs.n	407802 <__addsf3+0x136>
  40775e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  407762:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407766:	bf08      	it	eq
  407768:	f020 0001 	biceq.w	r0, r0, #1
  40776c:	ea40 0003 	orr.w	r0, r0, r3
  407770:	4770      	bx	lr
  407772:	0049      	lsls	r1, r1, #1
  407774:	eb40 0000 	adc.w	r0, r0, r0
  407778:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40777c:	f1a2 0201 	sub.w	r2, r2, #1
  407780:	d1ed      	bne.n	40775e <__addsf3+0x92>
  407782:	fab0 fc80 	clz	ip, r0
  407786:	f1ac 0c08 	sub.w	ip, ip, #8
  40778a:	ebb2 020c 	subs.w	r2, r2, ip
  40778e:	fa00 f00c 	lsl.w	r0, r0, ip
  407792:	bfaa      	itet	ge
  407794:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  407798:	4252      	neglt	r2, r2
  40779a:	4318      	orrge	r0, r3
  40779c:	bfbc      	itt	lt
  40779e:	40d0      	lsrlt	r0, r2
  4077a0:	4318      	orrlt	r0, r3
  4077a2:	4770      	bx	lr
  4077a4:	f092 0f00 	teq	r2, #0
  4077a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4077ac:	bf06      	itte	eq
  4077ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4077b2:	3201      	addeq	r2, #1
  4077b4:	3b01      	subne	r3, #1
  4077b6:	e7b5      	b.n	407724 <__addsf3+0x58>
  4077b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4077bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4077c0:	bf18      	it	ne
  4077c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4077c6:	d021      	beq.n	40780c <__addsf3+0x140>
  4077c8:	ea92 0f03 	teq	r2, r3
  4077cc:	d004      	beq.n	4077d8 <__addsf3+0x10c>
  4077ce:	f092 0f00 	teq	r2, #0
  4077d2:	bf08      	it	eq
  4077d4:	4608      	moveq	r0, r1
  4077d6:	4770      	bx	lr
  4077d8:	ea90 0f01 	teq	r0, r1
  4077dc:	bf1c      	itt	ne
  4077de:	2000      	movne	r0, #0
  4077e0:	4770      	bxne	lr
  4077e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4077e6:	d104      	bne.n	4077f2 <__addsf3+0x126>
  4077e8:	0040      	lsls	r0, r0, #1
  4077ea:	bf28      	it	cs
  4077ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4077f0:	4770      	bx	lr
  4077f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4077f6:	bf3c      	itt	cc
  4077f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4077fc:	4770      	bxcc	lr
  4077fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  407802:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  407806:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40780a:	4770      	bx	lr
  40780c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  407810:	bf16      	itet	ne
  407812:	4608      	movne	r0, r1
  407814:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  407818:	4601      	movne	r1, r0
  40781a:	0242      	lsls	r2, r0, #9
  40781c:	bf06      	itte	eq
  40781e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  407822:	ea90 0f01 	teqeq	r0, r1
  407826:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40782a:	4770      	bx	lr

0040782c <__aeabi_ui2f>:
  40782c:	f04f 0300 	mov.w	r3, #0
  407830:	e004      	b.n	40783c <__aeabi_i2f+0x8>
  407832:	bf00      	nop

00407834 <__aeabi_i2f>:
  407834:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  407838:	bf48      	it	mi
  40783a:	4240      	negmi	r0, r0
  40783c:	ea5f 0c00 	movs.w	ip, r0
  407840:	bf08      	it	eq
  407842:	4770      	bxeq	lr
  407844:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  407848:	4601      	mov	r1, r0
  40784a:	f04f 0000 	mov.w	r0, #0
  40784e:	e01c      	b.n	40788a <__aeabi_l2f+0x2a>

00407850 <__aeabi_ul2f>:
  407850:	ea50 0201 	orrs.w	r2, r0, r1
  407854:	bf08      	it	eq
  407856:	4770      	bxeq	lr
  407858:	f04f 0300 	mov.w	r3, #0
  40785c:	e00a      	b.n	407874 <__aeabi_l2f+0x14>
  40785e:	bf00      	nop

00407860 <__aeabi_l2f>:
  407860:	ea50 0201 	orrs.w	r2, r0, r1
  407864:	bf08      	it	eq
  407866:	4770      	bxeq	lr
  407868:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40786c:	d502      	bpl.n	407874 <__aeabi_l2f+0x14>
  40786e:	4240      	negs	r0, r0
  407870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407874:	ea5f 0c01 	movs.w	ip, r1
  407878:	bf02      	ittt	eq
  40787a:	4684      	moveq	ip, r0
  40787c:	4601      	moveq	r1, r0
  40787e:	2000      	moveq	r0, #0
  407880:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  407884:	bf08      	it	eq
  407886:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40788a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40788e:	fabc f28c 	clz	r2, ip
  407892:	3a08      	subs	r2, #8
  407894:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  407898:	db10      	blt.n	4078bc <__aeabi_l2f+0x5c>
  40789a:	fa01 fc02 	lsl.w	ip, r1, r2
  40789e:	4463      	add	r3, ip
  4078a0:	fa00 fc02 	lsl.w	ip, r0, r2
  4078a4:	f1c2 0220 	rsb	r2, r2, #32
  4078a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4078ac:	fa20 f202 	lsr.w	r2, r0, r2
  4078b0:	eb43 0002 	adc.w	r0, r3, r2
  4078b4:	bf08      	it	eq
  4078b6:	f020 0001 	biceq.w	r0, r0, #1
  4078ba:	4770      	bx	lr
  4078bc:	f102 0220 	add.w	r2, r2, #32
  4078c0:	fa01 fc02 	lsl.w	ip, r1, r2
  4078c4:	f1c2 0220 	rsb	r2, r2, #32
  4078c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4078cc:	fa21 f202 	lsr.w	r2, r1, r2
  4078d0:	eb43 0002 	adc.w	r0, r3, r2
  4078d4:	bf08      	it	eq
  4078d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4078da:	4770      	bx	lr

004078dc <__aeabi_fmul>:
  4078dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4078e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4078e4:	bf1e      	ittt	ne
  4078e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4078ea:	ea92 0f0c 	teqne	r2, ip
  4078ee:	ea93 0f0c 	teqne	r3, ip
  4078f2:	d06f      	beq.n	4079d4 <__aeabi_fmul+0xf8>
  4078f4:	441a      	add	r2, r3
  4078f6:	ea80 0c01 	eor.w	ip, r0, r1
  4078fa:	0240      	lsls	r0, r0, #9
  4078fc:	bf18      	it	ne
  4078fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  407902:	d01e      	beq.n	407942 <__aeabi_fmul+0x66>
  407904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  407908:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40790c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  407910:	fba0 3101 	umull	r3, r1, r0, r1
  407914:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407918:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40791c:	bf3e      	ittt	cc
  40791e:	0049      	lslcc	r1, r1, #1
  407920:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  407924:	005b      	lslcc	r3, r3, #1
  407926:	ea40 0001 	orr.w	r0, r0, r1
  40792a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40792e:	2afd      	cmp	r2, #253	; 0xfd
  407930:	d81d      	bhi.n	40796e <__aeabi_fmul+0x92>
  407932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  407936:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40793a:	bf08      	it	eq
  40793c:	f020 0001 	biceq.w	r0, r0, #1
  407940:	4770      	bx	lr
  407942:	f090 0f00 	teq	r0, #0
  407946:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40794a:	bf08      	it	eq
  40794c:	0249      	lsleq	r1, r1, #9
  40794e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407952:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  407956:	3a7f      	subs	r2, #127	; 0x7f
  407958:	bfc2      	ittt	gt
  40795a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40795e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407962:	4770      	bxgt	lr
  407964:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407968:	f04f 0300 	mov.w	r3, #0
  40796c:	3a01      	subs	r2, #1
  40796e:	dc5d      	bgt.n	407a2c <__aeabi_fmul+0x150>
  407970:	f112 0f19 	cmn.w	r2, #25
  407974:	bfdc      	itt	le
  407976:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40797a:	4770      	bxle	lr
  40797c:	f1c2 0200 	rsb	r2, r2, #0
  407980:	0041      	lsls	r1, r0, #1
  407982:	fa21 f102 	lsr.w	r1, r1, r2
  407986:	f1c2 0220 	rsb	r2, r2, #32
  40798a:	fa00 fc02 	lsl.w	ip, r0, r2
  40798e:	ea5f 0031 	movs.w	r0, r1, rrx
  407992:	f140 0000 	adc.w	r0, r0, #0
  407996:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40799a:	bf08      	it	eq
  40799c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4079a0:	4770      	bx	lr
  4079a2:	f092 0f00 	teq	r2, #0
  4079a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4079aa:	bf02      	ittt	eq
  4079ac:	0040      	lsleq	r0, r0, #1
  4079ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4079b2:	3a01      	subeq	r2, #1
  4079b4:	d0f9      	beq.n	4079aa <__aeabi_fmul+0xce>
  4079b6:	ea40 000c 	orr.w	r0, r0, ip
  4079ba:	f093 0f00 	teq	r3, #0
  4079be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4079c2:	bf02      	ittt	eq
  4079c4:	0049      	lsleq	r1, r1, #1
  4079c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4079ca:	3b01      	subeq	r3, #1
  4079cc:	d0f9      	beq.n	4079c2 <__aeabi_fmul+0xe6>
  4079ce:	ea41 010c 	orr.w	r1, r1, ip
  4079d2:	e78f      	b.n	4078f4 <__aeabi_fmul+0x18>
  4079d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4079d8:	ea92 0f0c 	teq	r2, ip
  4079dc:	bf18      	it	ne
  4079de:	ea93 0f0c 	teqne	r3, ip
  4079e2:	d00a      	beq.n	4079fa <__aeabi_fmul+0x11e>
  4079e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4079e8:	bf18      	it	ne
  4079ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4079ee:	d1d8      	bne.n	4079a2 <__aeabi_fmul+0xc6>
  4079f0:	ea80 0001 	eor.w	r0, r0, r1
  4079f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4079f8:	4770      	bx	lr
  4079fa:	f090 0f00 	teq	r0, #0
  4079fe:	bf17      	itett	ne
  407a00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  407a04:	4608      	moveq	r0, r1
  407a06:	f091 0f00 	teqne	r1, #0
  407a0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  407a0e:	d014      	beq.n	407a3a <__aeabi_fmul+0x15e>
  407a10:	ea92 0f0c 	teq	r2, ip
  407a14:	d101      	bne.n	407a1a <__aeabi_fmul+0x13e>
  407a16:	0242      	lsls	r2, r0, #9
  407a18:	d10f      	bne.n	407a3a <__aeabi_fmul+0x15e>
  407a1a:	ea93 0f0c 	teq	r3, ip
  407a1e:	d103      	bne.n	407a28 <__aeabi_fmul+0x14c>
  407a20:	024b      	lsls	r3, r1, #9
  407a22:	bf18      	it	ne
  407a24:	4608      	movne	r0, r1
  407a26:	d108      	bne.n	407a3a <__aeabi_fmul+0x15e>
  407a28:	ea80 0001 	eor.w	r0, r0, r1
  407a2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407a38:	4770      	bx	lr
  407a3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407a3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  407a42:	4770      	bx	lr

00407a44 <__aeabi_fdiv>:
  407a44:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407a48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407a4c:	bf1e      	ittt	ne
  407a4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  407a52:	ea92 0f0c 	teqne	r2, ip
  407a56:	ea93 0f0c 	teqne	r3, ip
  407a5a:	d069      	beq.n	407b30 <__aeabi_fdiv+0xec>
  407a5c:	eba2 0203 	sub.w	r2, r2, r3
  407a60:	ea80 0c01 	eor.w	ip, r0, r1
  407a64:	0249      	lsls	r1, r1, #9
  407a66:	ea4f 2040 	mov.w	r0, r0, lsl #9
  407a6a:	d037      	beq.n	407adc <__aeabi_fdiv+0x98>
  407a6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  407a70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  407a74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  407a78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407a7c:	428b      	cmp	r3, r1
  407a7e:	bf38      	it	cc
  407a80:	005b      	lslcc	r3, r3, #1
  407a82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  407a86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  407a8a:	428b      	cmp	r3, r1
  407a8c:	bf24      	itt	cs
  407a8e:	1a5b      	subcs	r3, r3, r1
  407a90:	ea40 000c 	orrcs.w	r0, r0, ip
  407a94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  407a98:	bf24      	itt	cs
  407a9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  407a9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407aa2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  407aa6:	bf24      	itt	cs
  407aa8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  407aac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407ab0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  407ab4:	bf24      	itt	cs
  407ab6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  407aba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407abe:	011b      	lsls	r3, r3, #4
  407ac0:	bf18      	it	ne
  407ac2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  407ac6:	d1e0      	bne.n	407a8a <__aeabi_fdiv+0x46>
  407ac8:	2afd      	cmp	r2, #253	; 0xfd
  407aca:	f63f af50 	bhi.w	40796e <__aeabi_fmul+0x92>
  407ace:	428b      	cmp	r3, r1
  407ad0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407ad4:	bf08      	it	eq
  407ad6:	f020 0001 	biceq.w	r0, r0, #1
  407ada:	4770      	bx	lr
  407adc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  407ae0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407ae4:	327f      	adds	r2, #127	; 0x7f
  407ae6:	bfc2      	ittt	gt
  407ae8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  407aec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407af0:	4770      	bxgt	lr
  407af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407af6:	f04f 0300 	mov.w	r3, #0
  407afa:	3a01      	subs	r2, #1
  407afc:	e737      	b.n	40796e <__aeabi_fmul+0x92>
  407afe:	f092 0f00 	teq	r2, #0
  407b02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407b06:	bf02      	ittt	eq
  407b08:	0040      	lsleq	r0, r0, #1
  407b0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407b0e:	3a01      	subeq	r2, #1
  407b10:	d0f9      	beq.n	407b06 <__aeabi_fdiv+0xc2>
  407b12:	ea40 000c 	orr.w	r0, r0, ip
  407b16:	f093 0f00 	teq	r3, #0
  407b1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407b1e:	bf02      	ittt	eq
  407b20:	0049      	lsleq	r1, r1, #1
  407b22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407b26:	3b01      	subeq	r3, #1
  407b28:	d0f9      	beq.n	407b1e <__aeabi_fdiv+0xda>
  407b2a:	ea41 010c 	orr.w	r1, r1, ip
  407b2e:	e795      	b.n	407a5c <__aeabi_fdiv+0x18>
  407b30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407b34:	ea92 0f0c 	teq	r2, ip
  407b38:	d108      	bne.n	407b4c <__aeabi_fdiv+0x108>
  407b3a:	0242      	lsls	r2, r0, #9
  407b3c:	f47f af7d 	bne.w	407a3a <__aeabi_fmul+0x15e>
  407b40:	ea93 0f0c 	teq	r3, ip
  407b44:	f47f af70 	bne.w	407a28 <__aeabi_fmul+0x14c>
  407b48:	4608      	mov	r0, r1
  407b4a:	e776      	b.n	407a3a <__aeabi_fmul+0x15e>
  407b4c:	ea93 0f0c 	teq	r3, ip
  407b50:	d104      	bne.n	407b5c <__aeabi_fdiv+0x118>
  407b52:	024b      	lsls	r3, r1, #9
  407b54:	f43f af4c 	beq.w	4079f0 <__aeabi_fmul+0x114>
  407b58:	4608      	mov	r0, r1
  407b5a:	e76e      	b.n	407a3a <__aeabi_fmul+0x15e>
  407b5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407b60:	bf18      	it	ne
  407b62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407b66:	d1ca      	bne.n	407afe <__aeabi_fdiv+0xba>
  407b68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  407b6c:	f47f af5c 	bne.w	407a28 <__aeabi_fmul+0x14c>
  407b70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  407b74:	f47f af3c 	bne.w	4079f0 <__aeabi_fmul+0x114>
  407b78:	e75f      	b.n	407a3a <__aeabi_fmul+0x15e>
  407b7a:	bf00      	nop

00407b7c <__gesf2>:
  407b7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  407b80:	e006      	b.n	407b90 <__cmpsf2+0x4>
  407b82:	bf00      	nop

00407b84 <__lesf2>:
  407b84:	f04f 0c01 	mov.w	ip, #1
  407b88:	e002      	b.n	407b90 <__cmpsf2+0x4>
  407b8a:	bf00      	nop

00407b8c <__cmpsf2>:
  407b8c:	f04f 0c01 	mov.w	ip, #1
  407b90:	f84d cd04 	str.w	ip, [sp, #-4]!
  407b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407ba0:	bf18      	it	ne
  407ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407ba6:	d011      	beq.n	407bcc <__cmpsf2+0x40>
  407ba8:	b001      	add	sp, #4
  407baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  407bae:	bf18      	it	ne
  407bb0:	ea90 0f01 	teqne	r0, r1
  407bb4:	bf58      	it	pl
  407bb6:	ebb2 0003 	subspl.w	r0, r2, r3
  407bba:	bf88      	it	hi
  407bbc:	17c8      	asrhi	r0, r1, #31
  407bbe:	bf38      	it	cc
  407bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  407bc4:	bf18      	it	ne
  407bc6:	f040 0001 	orrne.w	r0, r0, #1
  407bca:	4770      	bx	lr
  407bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407bd0:	d102      	bne.n	407bd8 <__cmpsf2+0x4c>
  407bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  407bd6:	d105      	bne.n	407be4 <__cmpsf2+0x58>
  407bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  407bdc:	d1e4      	bne.n	407ba8 <__cmpsf2+0x1c>
  407bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  407be2:	d0e1      	beq.n	407ba8 <__cmpsf2+0x1c>
  407be4:	f85d 0b04 	ldr.w	r0, [sp], #4
  407be8:	4770      	bx	lr
  407bea:	bf00      	nop

00407bec <__aeabi_cfrcmple>:
  407bec:	4684      	mov	ip, r0
  407bee:	4608      	mov	r0, r1
  407bf0:	4661      	mov	r1, ip
  407bf2:	e7ff      	b.n	407bf4 <__aeabi_cfcmpeq>

00407bf4 <__aeabi_cfcmpeq>:
  407bf4:	b50f      	push	{r0, r1, r2, r3, lr}
  407bf6:	f7ff ffc9 	bl	407b8c <__cmpsf2>
  407bfa:	2800      	cmp	r0, #0
  407bfc:	bf48      	it	mi
  407bfe:	f110 0f00 	cmnmi.w	r0, #0
  407c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

00407c04 <__aeabi_fcmpeq>:
  407c04:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c08:	f7ff fff4 	bl	407bf4 <__aeabi_cfcmpeq>
  407c0c:	bf0c      	ite	eq
  407c0e:	2001      	moveq	r0, #1
  407c10:	2000      	movne	r0, #0
  407c12:	f85d fb08 	ldr.w	pc, [sp], #8
  407c16:	bf00      	nop

00407c18 <__aeabi_fcmplt>:
  407c18:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c1c:	f7ff ffea 	bl	407bf4 <__aeabi_cfcmpeq>
  407c20:	bf34      	ite	cc
  407c22:	2001      	movcc	r0, #1
  407c24:	2000      	movcs	r0, #0
  407c26:	f85d fb08 	ldr.w	pc, [sp], #8
  407c2a:	bf00      	nop

00407c2c <__aeabi_fcmple>:
  407c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c30:	f7ff ffe0 	bl	407bf4 <__aeabi_cfcmpeq>
  407c34:	bf94      	ite	ls
  407c36:	2001      	movls	r0, #1
  407c38:	2000      	movhi	r0, #0
  407c3a:	f85d fb08 	ldr.w	pc, [sp], #8
  407c3e:	bf00      	nop

00407c40 <__aeabi_fcmpge>:
  407c40:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c44:	f7ff ffd2 	bl	407bec <__aeabi_cfrcmple>
  407c48:	bf94      	ite	ls
  407c4a:	2001      	movls	r0, #1
  407c4c:	2000      	movhi	r0, #0
  407c4e:	f85d fb08 	ldr.w	pc, [sp], #8
  407c52:	bf00      	nop

00407c54 <__aeabi_fcmpgt>:
  407c54:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c58:	f7ff ffc8 	bl	407bec <__aeabi_cfrcmple>
  407c5c:	bf34      	ite	cc
  407c5e:	2001      	movcc	r0, #1
  407c60:	2000      	movcs	r0, #0
  407c62:	f85d fb08 	ldr.w	pc, [sp], #8
  407c66:	bf00      	nop

00407c68 <__aeabi_f2iz>:
  407c68:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407c6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407c70:	d30f      	bcc.n	407c92 <__aeabi_f2iz+0x2a>
  407c72:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407c76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407c7a:	d90d      	bls.n	407c98 <__aeabi_f2iz+0x30>
  407c7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407c84:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407c88:	fa23 f002 	lsr.w	r0, r3, r2
  407c8c:	bf18      	it	ne
  407c8e:	4240      	negne	r0, r0
  407c90:	4770      	bx	lr
  407c92:	f04f 0000 	mov.w	r0, #0
  407c96:	4770      	bx	lr
  407c98:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407c9c:	d101      	bne.n	407ca2 <__aeabi_f2iz+0x3a>
  407c9e:	0242      	lsls	r2, r0, #9
  407ca0:	d105      	bne.n	407cae <__aeabi_f2iz+0x46>
  407ca2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  407ca6:	bf08      	it	eq
  407ca8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407cac:	4770      	bx	lr
  407cae:	f04f 0000 	mov.w	r0, #0
  407cb2:	4770      	bx	lr

00407cb4 <__aeabi_f2uiz>:
  407cb4:	0042      	lsls	r2, r0, #1
  407cb6:	d20e      	bcs.n	407cd6 <__aeabi_f2uiz+0x22>
  407cb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407cbc:	d30b      	bcc.n	407cd6 <__aeabi_f2uiz+0x22>
  407cbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407cc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407cc6:	d409      	bmi.n	407cdc <__aeabi_f2uiz+0x28>
  407cc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407cd0:	fa23 f002 	lsr.w	r0, r3, r2
  407cd4:	4770      	bx	lr
  407cd6:	f04f 0000 	mov.w	r0, #0
  407cda:	4770      	bx	lr
  407cdc:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407ce0:	d101      	bne.n	407ce6 <__aeabi_f2uiz+0x32>
  407ce2:	0242      	lsls	r2, r0, #9
  407ce4:	d102      	bne.n	407cec <__aeabi_f2uiz+0x38>
  407ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  407cea:	4770      	bx	lr
  407cec:	f04f 0000 	mov.w	r0, #0
  407cf0:	4770      	bx	lr
  407cf2:	bf00      	nop
  407cf4:	0a0d0a0d 	.word	0x0a0d0a0d
  407cf8:	346d6173 	.word	0x346d6173
  407cfc:	63323364 	.word	0x63323364
  407d00:	756d6920 	.word	0x756d6920
  407d04:	6d656420 	.word	0x6d656420
  407d08:	2e2e2e6f 	.word	0x2e2e2e6f
  407d0c:	00000a0d 	.word	0x00000a0d
  407d10:	0000002e 	.word	0x0000002e
  407d14:	61656c70 	.word	0x61656c70
  407d18:	70206573 	.word	0x70206573
  407d1c:	73736572 	.word	0x73736572
  407d20:	74756220 	.word	0x74756220
  407d24:	206e6f74 	.word	0x206e6f74
  407d28:	61206f74 	.word	0x61206f74
  407d2c:	6d206d72 	.word	0x6d206d72
  407d30:	726f746f 	.word	0x726f746f
  407d34:	000a0d73 	.word	0x000a0d73
  407d38:	6f746f6d 	.word	0x6f746f6d
  407d3c:	72615f72 	.word	0x72615f72
  407d40:	3a64656d 	.word	0x3a64656d
  407d44:	0d642520 	.word	0x0d642520
  407d48:	0000000a 	.word	0x0000000a
  407d4c:	6c6c6f72 	.word	0x6c6c6f72
  407d50:	7469702f 	.word	0x7469702f
  407d54:	792f6863 	.word	0x792f6863
  407d58:	65207761 	.word	0x65207761
  407d5c:	726f7272 	.word	0x726f7272
  407d60:	6469702f 	.word	0x6469702f
  407d64:	6625203a 	.word	0x6625203a
  407d68:	20662520 	.word	0x20662520
  407d6c:	25206625 	.word	0x25206625
  407d70:	66252066 	.word	0x66252066
  407d74:	00000a0d 	.word	0x00000a0d
  407d78:	0000706b 	.word	0x0000706b
  407d7c:	666e6f63 	.word	0x666e6f63
  407d80:	702e6769 	.word	0x702e6769
  407d84:	6b5f6469 	.word	0x6b5f6469
  407d88:	25203a70 	.word	0x25203a70
  407d8c:	000a0d66 	.word	0x000a0d66
  407d90:	0000696b 	.word	0x0000696b
  407d94:	666e6f63 	.word	0x666e6f63
  407d98:	702e6769 	.word	0x702e6769
  407d9c:	6b5f6469 	.word	0x6b5f6469
  407da0:	25203a69 	.word	0x25203a69
  407da4:	000a0d66 	.word	0x000a0d66
  407da8:	0000646b 	.word	0x0000646b
  407dac:	666e6f63 	.word	0x666e6f63
  407db0:	702e6769 	.word	0x702e6769
  407db4:	6b5f6469 	.word	0x6b5f6469
  407db8:	25203a64 	.word	0x25203a64
  407dbc:	000a0d66 	.word	0x000a0d66
  407dc0:	5f676f6c 	.word	0x5f676f6c
  407dc4:	00756d69 	.word	0x00756d69
  407dc8:	5f676f6c 	.word	0x5f676f6c
  407dcc:	3a756d69 	.word	0x3a756d69
  407dd0:	0d642520 	.word	0x0d642520
  407dd4:	0000000a 	.word	0x0000000a
  407dd8:	5f756d69 	.word	0x5f756d69
  407ddc:	696c6163 	.word	0x696c6163
  407de0:	74617262 	.word	0x74617262
  407de4:	00000065 	.word	0x00000065
  407de8:	5f756d69 	.word	0x5f756d69
  407dec:	696c6163 	.word	0x696c6163
  407df0:	74617262 	.word	0x74617262
  407df4:	25203a65 	.word	0x25203a65
  407df8:	000a0d64 	.word	0x000a0d64
  407dfc:	6f746f6d 	.word	0x6f746f6d
  407e00:	72615f72 	.word	0x72615f72
  407e04:	0064656d 	.word	0x0064656d
  407e08:	6f746f6d 	.word	0x6f746f6d
  407e0c:	666f5f72 	.word	0x666f5f72
  407e10:	74657366 	.word	0x74657366
  407e14:	00000000 	.word	0x00000000
  407e18:	6f746f6d 	.word	0x6f746f6d
  407e1c:	666f5f72 	.word	0x666f5f72
  407e20:	74657366 	.word	0x74657366
  407e24:	6425203a 	.word	0x6425203a
  407e28:	00000a0d 	.word	0x00000a0d
  407e2c:	5f676f6c 	.word	0x5f676f6c
  407e30:	6f746f6d 	.word	0x6f746f6d
  407e34:	00000072 	.word	0x00000072
  407e38:	5f676f6c 	.word	0x5f676f6c
  407e3c:	6f746f6d 	.word	0x6f746f6d
  407e40:	25203a72 	.word	0x25203a72
  407e44:	000a0d64 	.word	0x000a0d64
  407e48:	6f746f6d 	.word	0x6f746f6d
  407e4c:	696d5f72 	.word	0x696d5f72
  407e50:	0000006e 	.word	0x0000006e
  407e54:	6f746f6d 	.word	0x6f746f6d
  407e58:	696d2072 	.word	0x696d2072
  407e5c:	6f63206e 	.word	0x6f63206e
  407e60:	6e616d6d 	.word	0x6e616d6d
  407e64:	73692064 	.word	0x73692064
  407e68:	64657573 	.word	0x64657573
  407e6c:	00000a0d 	.word	0x00000a0d
  407e70:	6f746f6d 	.word	0x6f746f6d
  407e74:	696d5f72 	.word	0x696d5f72
  407e78:	00000064 	.word	0x00000064
  407e7c:	6f746f6d 	.word	0x6f746f6d
  407e80:	696d2072 	.word	0x696d2072
  407e84:	6f632064 	.word	0x6f632064
  407e88:	6e616d6d 	.word	0x6e616d6d
  407e8c:	73692064 	.word	0x73692064
  407e90:	64657573 	.word	0x64657573
  407e94:	00000a0d 	.word	0x00000a0d
  407e98:	6f746f6d 	.word	0x6f746f6d
  407e9c:	616d5f72 	.word	0x616d5f72
  407ea0:	00000078 	.word	0x00000078
  407ea4:	6f746f6d 	.word	0x6f746f6d
  407ea8:	616d2072 	.word	0x616d2072
  407eac:	6f632078 	.word	0x6f632078
  407eb0:	6e616d6d 	.word	0x6e616d6d
  407eb4:	73692064 	.word	0x73692064
  407eb8:	64657573 	.word	0x64657573
  407ebc:	00000a0d 	.word	0x00000a0d
  407ec0:	00000020 	.word	0x00000020
  407ec4:	5f697774 	.word	0x5f697774
  407ec8:	7473616d 	.word	0x7473616d
  407ecc:	695f7265 	.word	0x695f7265
  407ed0:	3a74696e 	.word	0x3a74696e
  407ed4:	69616620 	.word	0x69616620
  407ed8:	0d64656c 	.word	0x0d64656c
  407edc:	0000000a 	.word	0x0000000a
  407ee0:	5f697774 	.word	0x5f697774
  407ee4:	7473616d 	.word	0x7473616d
  407ee8:	695f7265 	.word	0x695f7265
  407eec:	3a74696e 	.word	0x3a74696e
  407ef0:	63757320 	.word	0x63757320
  407ef4:	73736563 	.word	0x73736563
  407ef8:	00000a0d 	.word	0x00000a0d
  407efc:	5f697774 	.word	0x5f697774
  407f00:	626f7270 	.word	0x626f7270
  407f04:	66203a65 	.word	0x66203a65
  407f08:	656c6961 	.word	0x656c6961
  407f0c:	000a0d64 	.word	0x000a0d64
  407f10:	5f697774 	.word	0x5f697774
  407f14:	626f7270 	.word	0x626f7270
  407f18:	73203a65 	.word	0x73203a65
  407f1c:	65636375 	.word	0x65636375
  407f20:	0a0d7373 	.word	0x0a0d7373
  407f24:	00000000 	.word	0x00000000
  407f28:	62616e45 	.word	0x62616e45
  407f2c:	0064656c 	.word	0x0064656c
  407f30:	61736944 	.word	0x61736944
  407f34:	64656c62 	.word	0x64656c62
  407f38:	00000000 	.word	0x00000000
  407f3c:	69766544 	.word	0x69766544
  407f40:	203a6563 	.word	0x203a6563
  407f44:	31257830 	.word	0x31257830
  407f48:	000a0d78 	.word	0x000a0d78
  407f4c:	65656c53 	.word	0x65656c53
  407f50:	6f4d2070 	.word	0x6f4d2070
  407f54:	203a6564 	.word	0x203a6564
  407f58:	0a0d7325 	.word	0x0a0d7325
  407f5c:	00000000 	.word	0x00000000
  407f60:	636f6c43 	.word	0x636f6c43
  407f64:	6f53206b 	.word	0x6f53206b
  407f68:	65637275 	.word	0x65637275
  407f6c:	0000203a 	.word	0x0000203a
  407f70:	65746e49 	.word	0x65746e49
  407f74:	6c616e72 	.word	0x6c616e72
  407f78:	484d3820 	.word	0x484d3820
  407f7c:	736f207a 	.word	0x736f207a
  407f80:	6c6c6963 	.word	0x6c6c6963
  407f84:	726f7461 	.word	0x726f7461
  407f88:	00000a0d 	.word	0x00000a0d
  407f8c:	204c4c50 	.word	0x204c4c50
  407f90:	68746977 	.word	0x68746977
  407f94:	61205820 	.word	0x61205820
  407f98:	20736978 	.word	0x20736978
  407f9c:	6f727967 	.word	0x6f727967
  407fa0:	706f6373 	.word	0x706f6373
  407fa4:	65722065 	.word	0x65722065
  407fa8:	65726566 	.word	0x65726566
  407fac:	0d65636e 	.word	0x0d65636e
  407fb0:	0000000a 	.word	0x0000000a
  407fb4:	6f727947 	.word	0x6f727947
  407fb8:	706f6373 	.word	0x706f6373
  407fbc:	00203a65 	.word	0x00203a65
  407fc0:	20303532 	.word	0x20303532
  407fc4:	0d737064 	.word	0x0d737064
  407fc8:	0000000a 	.word	0x0000000a
  407fcc:	20303035 	.word	0x20303035
  407fd0:	0d737064 	.word	0x0d737064
  407fd4:	0000000a 	.word	0x0000000a
  407fd8:	30303031 	.word	0x30303031
  407fdc:	73706420 	.word	0x73706420
  407fe0:	00000a0d 	.word	0x00000a0d
  407fe4:	30303032 	.word	0x30303032
  407fe8:	73706420 	.word	0x73706420
  407fec:	00000a0d 	.word	0x00000a0d
  407ff0:	5f657375 	.word	0x5f657375
  407ff4:	696c6163 	.word	0x696c6163
  407ff8:	74617262 	.word	0x74617262
  407ffc:	25203a65 	.word	0x25203a65
  408000:	000a0d64 	.word	0x000a0d64
  408004:	75746361 	.word	0x75746361
  408008:	745f6c61 	.word	0x745f6c61
  40800c:	73657268 	.word	0x73657268
  408010:	646c6f68 	.word	0x646c6f68
  408014:	6625203a 	.word	0x6625203a
  408018:	00000a0d 	.word	0x00000a0d
  40801c:	5f737064 	.word	0x5f737064
  408020:	5f726570 	.word	0x5f726570
  408024:	69676964 	.word	0x69676964
  408028:	25203a74 	.word	0x25203a74
  40802c:	000a0d66 	.word	0x000a0d66
  408030:	676e6172 	.word	0x676e6172
  408034:	65705f65 	.word	0x65705f65
  408038:	69645f72 	.word	0x69645f72
  40803c:	3a746967 	.word	0x3a746967
  408040:	0d662520 	.word	0x0d662520
  408044:	0000000a 	.word	0x0000000a
  408048:	696c6163 	.word	0x696c6163
  40804c:	74617262 	.word	0x74617262
  408050:	20676e69 	.word	0x20676e69
  408054:	2e756d69 	.word	0x2e756d69
  408058:	0a0d2e2e 	.word	0x0a0d2e2e
  40805c:	00000000 	.word	0x00000000
  408060:	696c6163 	.word	0x696c6163
  408064:	74617262 	.word	0x74617262
  408068:	206e6f69 	.word	0x206e6f69
  40806c:	706d6f63 	.word	0x706d6f63
  408070:	6574656c 	.word	0x6574656c
  408074:	000a0d2e 	.word	0x000a0d2e
  408078:	6f746f6d 	.word	0x6f746f6d
  40807c:	6e695f72 	.word	0x6e695f72
  408080:	0a0d7469 	.word	0x0a0d7469
  408084:	00000000 	.word	0x00000000
  408088:	6f746f6d 	.word	0x6f746f6d
  40808c:	756f5f72 	.word	0x756f5f72
  408090:	74757074 	.word	0x74757074
  408094:	6425203a 	.word	0x6425203a
  408098:	00000a0d 	.word	0x00000a0d
  40809c:	00000001 	.word	0x00000001
  4080a0:	00000002 	.word	0x00000002
  4080a4:	00000004 	.word	0x00000004
  4080a8:	00000008 	.word	0x00000008
  4080ac:	00000010 	.word	0x00000010
  4080b0:	00000020 	.word	0x00000020
  4080b4:	00000040 	.word	0x00000040
  4080b8:	00000080 	.word	0x00000080
  4080bc:	00000100 	.word	0x00000100
  4080c0:	00000200 	.word	0x00000200
  4080c4:	00000400 	.word	0x00000400
  4080c8:	74727173 	.word	0x74727173
  4080cc:	00000000 	.word	0x00000000

004080d0 <atanlo>:
  4080d0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  4080e0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

004080f0 <atanhi>:
  4080f0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  408100:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00408110 <_global_impure_ptr>:
  408110:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  408120:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  408130:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  408140:	63626139 00666564                       9abcdef.

00408148 <tinytens>:
  408148:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  408158:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  408168:	64ac6f43 11680628                       Co.d(.h.

00408170 <fpi.6179>:
  408170:	00000035 fffffbce 000003cb 00000001     5...............
  408180:	00000000                                ....

00408184 <fpinan.6215>:
  408184:	00000034 fffffbce 000003cb 00000001     4...............
  408194:	00000000 69666e49 7974696e 4e614e00     ....Infinity.NaN
  4081a4:	00000000                                ....

004081a8 <__sf_fake_stdin>:
	...

004081c8 <__sf_fake_stdout>:
	...

004081e8 <__sf_fake_stderr>:
	...
  408208:	4f500043 00584953 0000002e 00000000     C.POSIX.........

00408218 <__mprec_tens>:
  408218:	00000000 3ff00000 00000000 40240000     .......?......$@
  408228:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408238:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408248:	00000000 412e8480 00000000 416312d0     .......A......cA
  408258:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408268:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408278:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408288:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408298:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4082a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4082b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4082c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4082d8:	79d99db4 44ea7843                       ...yCx.D

004082e0 <__mprec_bigtens>:
  4082e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4082f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408300:	7f73bf3c 75154fdd                       <.s..O.u

00408308 <p05.6097>:
  408308:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  408318:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

00408325 <_ctype_>:
  408325:	20202000 20202020 28282020 20282828     .         ((((( 
  408335:	20202020 20202020 20202020 20202020                     
  408345:	10108820 10101010 10101010 10101010      ...............
  408355:	04040410 04040404 10040404 10101010     ................
  408365:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408375:	01010101 01010101 01010101 10101010     ................
  408385:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408395:	02020202 02020202 02020202 10101010     ................
  4083a5:	00000020 00000000 00000000 00000000      ...............
	...

00408428 <_init>:
  408428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40842a:	bf00      	nop
  40842c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40842e:	bc08      	pop	{r3}
  408430:	469e      	mov	lr, r3
  408432:	4770      	bx	lr

00408434 <__init_array_start>:
  408434:	004000f1 	.word	0x004000f1

00408438 <_fini>:
  408438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40843a:	bf00      	nop
  40843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40843e:	bc08      	pop	{r3}
  408440:	469e      	mov	lr, r3
  408442:	4770      	bx	lr
  408444:	0000      	movs	r0, r0
	...

00408448 <__portable_delay_cycles_veneer>:
  408448:	f85f f000 	ldr.w	pc, [pc]	; 40844c <__portable_delay_cycles_veneer+0x4>
  40844c:	20000001 	.word	0x20000001

00408450 <__fini_array_start>:
  408450:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <kp>:
2000000c:	0000 3f80                                   ...?

20000010 <SystemCoreClock>:
20000010:	0900 003d                                   ..=.

20000014 <__fdlib_version>:
20000014:	0001 0000                                   ....

20000018 <impure_data>:
20000018:	0000 0000 81a8 0040 81c8 0040 81e8 0040     ......@...@...@.
	...

20000078 <_impure_ptr>:
20000078:	0018 2000                                   ... 

2000007c <__global_locale>:
2000007c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000009c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000011c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000013c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000015c:	6bd1 0040 5e65 0040 0000 0000 8325 0040     .k@.e^@.....%.@.
2000016c:	8210 0040 8319 0040 8319 0040 8319 0040     ..@...@...@...@.
2000017c:	8319 0040 8319 0040 8319 0040 8319 0040     ..@...@...@...@.
2000018c:	8319 0040 8319 0040 ffff ffff ffff ffff     ..@...@.........
2000019c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
