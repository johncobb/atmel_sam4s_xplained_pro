
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e64  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00400e64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000094  20000438  0040129c  00020438  2**2
                  ALLOC
  3 .stack        00003004  200004cc  00401330  00020438  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   000071b4  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000157e  00000000  00000000  00027684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002b6e  00000000  00000000  00028c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000618  00000000  00000000  0002b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005f8  00000000  00000000  0002bd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012a3f  00000000  00000000  0002c380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008034  00000000  00000000  0003edbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000515ea  00000000  00000000  00046df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000dd4  00000000  00000000  000983e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034d0 	.word	0x200034d0
  400004:	00400aa9 	.word	0x00400aa9
  400008:	00400aa5 	.word	0x00400aa5
  40000c:	00400aa5 	.word	0x00400aa5
  400010:	00400aa5 	.word	0x00400aa5
  400014:	00400aa5 	.word	0x00400aa5
  400018:	00400aa5 	.word	0x00400aa5
	...
  40002c:	00400aa5 	.word	0x00400aa5
  400030:	00400aa5 	.word	0x00400aa5
  400034:	00000000 	.word	0x00000000
  400038:	00400aa5 	.word	0x00400aa5
  40003c:	00400aa5 	.word	0x00400aa5
  400040:	00400aa5 	.word	0x00400aa5
  400044:	00400aa5 	.word	0x00400aa5
  400048:	00400aa5 	.word	0x00400aa5
  40004c:	00400aa5 	.word	0x00400aa5
  400050:	00400aa5 	.word	0x00400aa5
  400054:	00400aa5 	.word	0x00400aa5
  400058:	00400aa5 	.word	0x00400aa5
  40005c:	00400aa5 	.word	0x00400aa5
  400060:	00400aa5 	.word	0x00400aa5
  400064:	00400aa5 	.word	0x00400aa5
  400068:	00000000 	.word	0x00000000
  40006c:	0040092d 	.word	0x0040092d
  400070:	0040093d 	.word	0x0040093d
  400074:	0040094d 	.word	0x0040094d
  400078:	00400aa5 	.word	0x00400aa5
  40007c:	00400aa5 	.word	0x00400aa5
	...
  400088:	00400aa5 	.word	0x00400aa5
  40008c:	00400aa5 	.word	0x00400aa5
  400090:	00400aa5 	.word	0x00400aa5
  400094:	00400aa5 	.word	0x00400aa5
  400098:	00400aa5 	.word	0x00400aa5
  40009c:	00400aa5 	.word	0x00400aa5
  4000a0:	00400aa5 	.word	0x00400aa5
  4000a4:	00400aa5 	.word	0x00400aa5
  4000a8:	00400aa5 	.word	0x00400aa5
  4000ac:	00400aa5 	.word	0x00400aa5
  4000b0:	00400aa5 	.word	0x00400aa5
  4000b4:	00400aa5 	.word	0x00400aa5
  4000b8:	00400aa5 	.word	0x00400aa5
  4000bc:	00400aa5 	.word	0x00400aa5
  4000c0:	00400aa5 	.word	0x00400aa5
  4000c4:	00400aa5 	.word	0x00400aa5
  4000c8:	00400aa5 	.word	0x00400aa5

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400e64 	.word	0x00400e64

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000043c 	.word	0x2000043c
  40011c:	00400e64 	.word	0x00400e64
  400120:	00400e64 	.word	0x00400e64
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f000 fd9a 	bl	400c64 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f000 fc46 	bl	4009c4 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f000 fc6e 	bl	400a18 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f000 fc72 	bl	400a28 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f000 fc75 	bl	400a38 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f000 fc02 	bl	40095c <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f000 fcfa 	bl	400b50 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f000 fd81 	bl	400c64 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <twi_probe_imu>:
    }
}


void twi_probe_imu(void)
{
  400170:	b570      	push	{r4, r5, r6, lr}
  400172:	b08a      	sub	sp, #40	; 0x28
    twi_options_t opt;
    twi_packet_t packet_tx;
    twi_packet_t packet_rx;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400174:	4b2e      	ldr	r3, [pc, #184]	; (400230 <twi_probe_imu+0xc0>)
  400176:	9307      	str	r3, [sp, #28]
    opt.speed      = TWI_CLK;
  400178:	4b2e      	ldr	r3, [pc, #184]	; (400234 <twi_probe_imu+0xc4>)
  40017a:	9308      	str	r3, [sp, #32]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  40017c:	a907      	add	r1, sp, #28
  40017e:	482e      	ldr	r0, [pc, #184]	; (400238 <twi_probe_imu+0xc8>)
  400180:	f000 f948 	bl	400414 <twi_master_init>
  400184:	b168      	cbz	r0, 4001a2 <twi_probe_imu+0x32>
        
        while(true) {
            delay_ms(25);
  400186:	4e2d      	ldr	r6, [pc, #180]	; (40023c <twi_probe_imu+0xcc>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400188:	4c2d      	ldr	r4, [pc, #180]	; (400240 <twi_probe_imu+0xd0>)
		port->PIO_CODR = mask;
  40018a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  40018e:	4630      	mov	r0, r6
  400190:	f000 fe62 	bl	400e58 <__portable_delay_cycles_veneer>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400194:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400196:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  40019a:	bf14      	ite	ne
  40019c:	6365      	strne	r5, [r4, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  40019e:	6325      	streq	r5, [r4, #48]	; 0x30
  4001a0:	e7f5      	b.n	40018e <twi_probe_imu+0x1e>
        }
    }

    // delay_ms(20);

    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  4001a2:	2168      	movs	r1, #104	; 0x68
  4001a4:	4824      	ldr	r0, [pc, #144]	; (400238 <twi_probe_imu+0xc8>)
  4001a6:	f000 fa0f 	bl	4005c8 <twi_probe>
  4001aa:	b1e0      	cbz	r0, 4001e6 <twi_probe_imu+0x76>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4001ac:	4b24      	ldr	r3, [pc, #144]	; (400240 <twi_probe_imu+0xd0>)
  4001ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4001b0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  4001b4:	d008      	beq.n	4001c8 <twi_probe_imu+0x58>
		port->PIO_CODR = mask;
  4001b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4001ba:	4b21      	ldr	r3, [pc, #132]	; (400240 <twi_probe_imu+0xd0>)
  4001bc:	635a      	str	r2, [r3, #52]	; 0x34
        ioport_toggle_pin_level(LED0_GPIO);
        while(true) {
            delay_ms(50);
  4001be:	4e21      	ldr	r6, [pc, #132]	; (400244 <twi_probe_imu+0xd4>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4001c0:	4c1f      	ldr	r4, [pc, #124]	; (400240 <twi_probe_imu+0xd0>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  4001c2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  4001c6:	e004      	b.n	4001d2 <twi_probe_imu+0x62>
  4001c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4001cc:	4b1c      	ldr	r3, [pc, #112]	; (400240 <twi_probe_imu+0xd0>)
  4001ce:	631a      	str	r2, [r3, #48]	; 0x30
  4001d0:	e7f5      	b.n	4001be <twi_probe_imu+0x4e>
  4001d2:	4630      	mov	r0, r6
  4001d4:	f000 fe40 	bl	400e58 <__portable_delay_cycles_veneer>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4001d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4001da:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  4001de:	bf14      	ite	ne
  4001e0:	6365      	strne	r5, [r4, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4001e2:	6325      	streq	r5, [r4, #48]	; 0x30
  4001e4:	e7f5      	b.n	4001d2 <twi_probe_imu+0x62>
    }




    uint8_t data_received = 0;
  4001e6:	2300      	movs	r3, #0
  4001e8:	f88d 3007 	strb.w	r3, [sp, #7]

    packet_rx.chip = IMU_ADDRESS;
  4001ec:	2368      	movs	r3, #104	; 0x68
  4001ee:	f88d 3018 	strb.w	r3, [sp, #24]
    packet_rx.addr[0] = MPU6050_WHO_AM_I_BIT;
  4001f2:	2306      	movs	r3, #6
  4001f4:	f88d 3008 	strb.w	r3, [sp, #8]
    packet_rx.addr_length = sizeof(uint8_t);
  4001f8:	2301      	movs	r3, #1
  4001fa:	9303      	str	r3, [sp, #12]
    packet_rx.buffer = &data_received;
  4001fc:	f10d 0207 	add.w	r2, sp, #7
  400200:	9204      	str	r2, [sp, #16]
    packet_rx.length = sizeof(uint8_t);
  400202:	9305      	str	r3, [sp, #20]

    if (twi_master_read(IMU_TWI, &packet_rx) != TWI_SUCCESS) {
  400204:	a902      	add	r1, sp, #8
  400206:	480c      	ldr	r0, [pc, #48]	; (400238 <twi_probe_imu+0xc8>)
  400208:	f000 f934 	bl	400474 <twi_master_read>
  40020c:	b168      	cbz	r0, 40022a <twi_probe_imu+0xba>

        while(true) {
            delay_ms(25);
  40020e:	4e0b      	ldr	r6, [pc, #44]	; (40023c <twi_probe_imu+0xcc>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400210:	4c0b      	ldr	r4, [pc, #44]	; (400240 <twi_probe_imu+0xd0>)
		port->PIO_CODR = mask;
  400212:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  400216:	4630      	mov	r0, r6
  400218:	f000 fe1e 	bl	400e58 <__portable_delay_cycles_veneer>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40021c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40021e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  400222:	bf14      	ite	ne
  400224:	6365      	strne	r5, [r4, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400226:	6325      	streq	r5, [r4, #48]	; 0x30
  400228:	e7f5      	b.n	400216 <twi_probe_imu+0xa6>
    // }



    
}
  40022a:	b00a      	add	sp, #40	; 0x28
  40022c:	bd70      	pop	{r4, r5, r6, pc}
  40022e:	bf00      	nop
  400230:	07270e00 	.word	0x07270e00
  400234:	00061a80 	.word	0x00061a80
  400238:	40018000 	.word	0x40018000
  40023c:	0003450e 	.word	0x0003450e
  400240:	400e1200 	.word	0x400e1200
  400244:	00068a1c 	.word	0x00068a1c

00400248 <main>:

void test_twi(void);
void twi_probe_imu(void);

int main(void)
{
  400248:	b580      	push	{r7, lr}
    sysclk_init();
  40024a:	f7ff ff6d 	bl	400128 <sysclk_init>
    board_init();
  40024e:	f000 f81f 	bl	400290 <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400252:	2013      	movs	r0, #19
  400254:	f000 fbf8 	bl	400a48 <pmc_enable_periph_clk>


    twi_probe_imu();
  400258:	f7ff ff8a 	bl	400170 <twi_probe_imu>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40025c:	4c09      	ldr	r4, [pc, #36]	; (400284 <main+0x3c>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40025e:	4d0a      	ldr	r5, [pc, #40]	; (400288 <main+0x40>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  400260:	f44f 0700 	mov.w	r7, #8388608	; 0x800000

    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  400264:	4e09      	ldr	r6, [pc, #36]	; (40028c <main+0x44>)
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400266:	6be3      	ldr	r3, [r4, #60]	; 0x3c

    twi_probe_imu();

    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  400268:	f013 0f04 	tst.w	r3, #4
  40026c:	d1fb      	bne.n	400266 <main+0x1e>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40026e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  400270:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  400274:	bf14      	ite	ne
  400276:	636f      	strne	r7, [r5, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400278:	632f      	streq	r7, [r5, #48]	; 0x30
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  40027a:	4630      	mov	r0, r6
  40027c:	f000 fdec 	bl	400e58 <__portable_delay_cycles_veneer>
  400280:	e7f1      	b.n	400266 <main+0x1e>
  400282:	bf00      	nop
  400284:	400e0e00 	.word	0x400e0e00
  400288:	400e1200 	.word	0x400e1200
  40028c:	00416513 	.word	0x00416513

00400290 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400290:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  400292:	482c      	ldr	r0, [pc, #176]	; (400344 <board_init+0xb4>)
  400294:	f000 fc02 	bl	400a9c <wdt_disable>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400298:	200b      	movs	r0, #11
  40029a:	f000 fbd5 	bl	400a48 <pmc_enable_periph_clk>
  40029e:	200c      	movs	r0, #12
  4002a0:	f000 fbd2 	bl	400a48 <pmc_enable_periph_clk>
  4002a4:	200d      	movs	r0, #13
  4002a6:	f000 fbcf 	bl	400a48 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002aa:	4b27      	ldr	r3, [pc, #156]	; (400348 <board_init+0xb8>)
  4002ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4002b0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002b2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002b8:	4c24      	ldr	r4, [pc, #144]	; (40034c <board_init+0xbc>)
  4002ba:	2504      	movs	r5, #4
  4002bc:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002be:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4002c2:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002c4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002c8:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002ca:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002cc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002d0:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4002d2:	f022 0204 	bic.w	r2, r2, #4
  4002d6:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002d8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4002da:	f022 0204 	bic.w	r2, r2, #4
  4002de:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4002e4:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002e6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4002f0:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002f2:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002f4:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4002fc:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002fe:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400300:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400304:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400308:	210c      	movs	r1, #12
  40030a:	4811      	ldr	r0, [pc, #68]	; (400350 <board_init+0xc0>)
  40030c:	f000 fa76 	bl	4007fc <pio_configure_pin_group>
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400310:	4e10      	ldr	r6, [pc, #64]	; (400354 <board_init+0xc4>)
  400312:	4631      	mov	r1, r6
  400314:	2003      	movs	r0, #3
  400316:	f000 f9e5 	bl	4006e4 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40031a:	4631      	mov	r1, r6
  40031c:	4628      	mov	r0, r5
  40031e:	f000 f9e1 	bl	4006e4 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400322:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400324:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400328:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40032a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40032c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400330:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400332:	f023 0304 	bic.w	r3, r3, #4
  400336:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400338:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40033a:	f023 0304 	bic.w	r3, r3, #4
  40033e:	6763      	str	r3, [r4, #116]	; 0x74
  400340:	bd70      	pop	{r4, r5, r6, pc}
  400342:	bf00      	nop
  400344:	400e1450 	.word	0x400e1450
  400348:	400e1200 	.word	0x400e1200
  40034c:	400e0e00 	.word	0x400e0e00
  400350:	400e1000 	.word	0x400e1000
  400354:	08000001 	.word	0x08000001

00400358 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400358:	4b2b      	ldr	r3, [pc, #172]	; (400408 <twi_set_speed+0xb0>)
  40035a:	4299      	cmp	r1, r3
  40035c:	d849      	bhi.n	4003f2 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40035e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400362:	4299      	cmp	r1, r3
  400364:	d92b      	bls.n	4003be <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400366:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400368:	4c28      	ldr	r4, [pc, #160]	; (40040c <twi_set_speed+0xb4>)
  40036a:	fba4 3402 	umull	r3, r4, r4, r2
  40036e:	0ba4      	lsrs	r4, r4, #14
  400370:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400372:	4b27      	ldr	r3, [pc, #156]	; (400410 <twi_set_speed+0xb8>)
  400374:	440b      	add	r3, r1
  400376:	009b      	lsls	r3, r3, #2
  400378:	fbb2 f2f3 	udiv	r2, r2, r3
  40037c:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40037e:	2cff      	cmp	r4, #255	; 0xff
  400380:	d939      	bls.n	4003f6 <twi_set_speed+0x9e>
  400382:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  400384:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400386:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400388:	2cff      	cmp	r4, #255	; 0xff
  40038a:	d902      	bls.n	400392 <twi_set_speed+0x3a>
  40038c:	2b07      	cmp	r3, #7
  40038e:	d1f9      	bne.n	400384 <twi_set_speed+0x2c>
  400390:	e00a      	b.n	4003a8 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400392:	2aff      	cmp	r2, #255	; 0xff
  400394:	d908      	bls.n	4003a8 <twi_set_speed+0x50>
  400396:	2b06      	cmp	r3, #6
  400398:	d900      	bls.n	40039c <twi_set_speed+0x44>
  40039a:	e005      	b.n	4003a8 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  40039c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40039e:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003a0:	2aff      	cmp	r2, #255	; 0xff
  4003a2:	d901      	bls.n	4003a8 <twi_set_speed+0x50>
  4003a4:	2b06      	cmp	r3, #6
  4003a6:	d9f9      	bls.n	40039c <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003a8:	0212      	lsls	r2, r2, #8
  4003aa:	b292      	uxth	r2, r2
  4003ac:	041b      	lsls	r3, r3, #16
  4003ae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4003b2:	431a      	orrs	r2, r3
  4003b4:	b2e4      	uxtb	r4, r4
  4003b6:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4003b8:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4003ba:	2000      	movs	r0, #0
  4003bc:	e021      	b.n	400402 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4003be:	0049      	lsls	r1, r1, #1
  4003c0:	fbb2 f2f1 	udiv	r2, r2, r1
  4003c4:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003c6:	2aff      	cmp	r2, #255	; 0xff
  4003c8:	d907      	bls.n	4003da <twi_set_speed+0x82>
  4003ca:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4003cc:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4003ce:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003d0:	2aff      	cmp	r2, #255	; 0xff
  4003d2:	d903      	bls.n	4003dc <twi_set_speed+0x84>
  4003d4:	2b07      	cmp	r3, #7
  4003d6:	d1f9      	bne.n	4003cc <twi_set_speed+0x74>
  4003d8:	e000      	b.n	4003dc <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4003da:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4003dc:	0211      	lsls	r1, r2, #8
  4003de:	b289      	uxth	r1, r1
  4003e0:	041b      	lsls	r3, r3, #16
  4003e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4003e6:	430b      	orrs	r3, r1
  4003e8:	b2d2      	uxtb	r2, r2
  4003ea:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4003ec:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4003ee:	2000      	movs	r0, #0
}
  4003f0:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  4003f2:	2001      	movs	r0, #1
  4003f4:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003f6:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4003f8:	bf88      	it	hi
  4003fa:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003fc:	d8ce      	bhi.n	40039c <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4003fe:	2300      	movs	r3, #0
  400400:	e7d2      	b.n	4003a8 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  400402:	bc10      	pop	{r4}
  400404:	4770      	bx	lr
  400406:	bf00      	nop
  400408:	00061a80 	.word	0x00061a80
  40040c:	057619f1 	.word	0x057619f1
  400410:	3ffd1200 	.word	0x3ffd1200

00400414 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400414:	b538      	push	{r3, r4, r5, lr}
  400416:	4604      	mov	r4, r0
  400418:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40041a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  40041e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400420:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400422:	2380      	movs	r3, #128	; 0x80
  400424:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400426:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400428:	2308      	movs	r3, #8
  40042a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  40042c:	2320      	movs	r3, #32
  40042e:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400430:	2304      	movs	r3, #4
  400432:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400434:	680a      	ldr	r2, [r1, #0]
  400436:	6849      	ldr	r1, [r1, #4]
  400438:	f7ff ff8e 	bl	400358 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  40043c:	2801      	cmp	r0, #1
  40043e:	bf14      	ite	ne
  400440:	2000      	movne	r0, #0
  400442:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400444:	7a6b      	ldrb	r3, [r5, #9]
  400446:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400448:	bf04      	itt	eq
  40044a:	2340      	moveq	r3, #64	; 0x40
  40044c:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  40044e:	bd38      	pop	{r3, r4, r5, pc}

00400450 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400450:	460a      	mov	r2, r1
  400452:	b159      	cbz	r1, 40046c <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  400454:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  400456:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  400458:	bfc4      	itt	gt
  40045a:	7841      	ldrbgt	r1, [r0, #1]
  40045c:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  400460:	2a02      	cmp	r2, #2
  400462:	dd05      	ble.n	400470 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  400464:	7880      	ldrb	r0, [r0, #2]
  400466:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40046a:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40046c:	2000      	movs	r0, #0
  40046e:	4770      	bx	lr
  400470:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  400472:	4770      	bx	lr

00400474 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400478:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  40047a:	2c00      	cmp	r4, #0
  40047c:	d045      	beq.n	40050a <twi_master_read+0x96>
  40047e:	460b      	mov	r3, r1
  400480:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400482:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400484:	2000      	movs	r0, #0
  400486:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400488:	684a      	ldr	r2, [r1, #4]
  40048a:	0212      	lsls	r2, r2, #8
  40048c:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400490:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  400494:	7c1a      	ldrb	r2, [r3, #16]
  400496:	0412      	lsls	r2, r2, #16
  400498:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  40049c:	430a      	orrs	r2, r1
  40049e:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4004a0:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4004a2:	6859      	ldr	r1, [r3, #4]
  4004a4:	4618      	mov	r0, r3
  4004a6:	f7ff ffd3 	bl	400450 <twi_mk_addr>
  4004aa:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  4004ac:	2c01      	cmp	r4, #1
  4004ae:	d104      	bne.n	4004ba <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4004b0:	2303      	movs	r3, #3
  4004b2:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  4004b4:	f04f 0e01 	mov.w	lr, #1
  4004b8:	e033      	b.n	400522 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4004ba:	2301      	movs	r3, #1
  4004bc:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  4004be:	f04f 0e00 	mov.w	lr, #0
  4004c2:	e02e      	b.n	400522 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  4004c4:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4004c6:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4004c8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4004cc:	d120      	bne.n	400510 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  4004ce:	1e51      	subs	r1, r2, #1
  4004d0:	b30a      	cbz	r2, 400516 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4004d2:	2c01      	cmp	r4, #1
  4004d4:	d106      	bne.n	4004e4 <twi_master_read+0x70>
  4004d6:	f1be 0f00 	cmp.w	lr, #0
  4004da:	d12f      	bne.n	40053c <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  4004dc:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  4004e0:	46e6      	mov	lr, ip
  4004e2:	e02b      	b.n	40053c <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4004e4:	f013 0f02 	tst.w	r3, #2
  4004e8:	d005      	beq.n	4004f6 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4004ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4004ec:	7033      	strb	r3, [r6, #0]

		cnt--;
  4004ee:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4004f0:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4004f2:	463a      	mov	r2, r7
  4004f4:	e000      	b.n	4004f8 <twi_master_read+0x84>
  4004f6:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4004f8:	2c00      	cmp	r4, #0
  4004fa:	d1e4      	bne.n	4004c6 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4004fc:	6a2b      	ldr	r3, [r5, #32]
  4004fe:	f013 0f01 	tst.w	r3, #1
  400502:	d0fb      	beq.n	4004fc <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  400504:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  400506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40050a:	2001      	movs	r0, #1
  40050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400510:	2005      	movs	r0, #5
  400512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400516:	2009      	movs	r0, #9
  400518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40051c:	2005      	movs	r0, #5
  40051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400522:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400524:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400528:	d1f8      	bne.n	40051c <twi_master_read+0xa8>
  40052a:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  40052e:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  400532:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  400536:	f04f 0c01 	mov.w	ip, #1
  40053a:	e7ca      	b.n	4004d2 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  40053c:	f013 0f02 	tst.w	r3, #2
  400540:	d0c0      	beq.n	4004c4 <twi_master_read+0x50>
  400542:	e7d2      	b.n	4004ea <twi_master_read+0x76>

00400544 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400544:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400546:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  400548:	2d00      	cmp	r5, #0
  40054a:	d034      	beq.n	4005b6 <twi_master_write+0x72>
  40054c:	460b      	mov	r3, r1
  40054e:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400550:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400552:	2000      	movs	r0, #0
  400554:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400556:	7c0a      	ldrb	r2, [r1, #16]
  400558:	0412      	lsls	r2, r2, #16
  40055a:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  40055e:	685a      	ldr	r2, [r3, #4]
  400560:	0212      	lsls	r2, r2, #8
  400562:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400566:	430a      	orrs	r2, r1
  400568:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40056a:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40056c:	6859      	ldr	r1, [r3, #4]
  40056e:	4618      	mov	r0, r3
  400570:	f7ff ff6e 	bl	400450 <twi_mk_addr>
  400574:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400576:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400578:	f413 7f80 	tst.w	r3, #256	; 0x100
  40057c:	d004      	beq.n	400588 <twi_master_write+0x44>
  40057e:	e01c      	b.n	4005ba <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400580:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400582:	f413 7f80 	tst.w	r3, #256	; 0x100
  400586:	d11a      	bne.n	4005be <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  400588:	f013 0f04 	tst.w	r3, #4
  40058c:	d003      	beq.n	400596 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40058e:	7833      	ldrb	r3, [r6, #0]
  400590:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  400592:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400594:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400596:	2d00      	cmp	r5, #0
  400598:	d1f2      	bne.n	400580 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  40059a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40059c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4005a0:	d10f      	bne.n	4005c2 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  4005a2:	f013 0f04 	tst.w	r3, #4
  4005a6:	d0f8      	beq.n	40059a <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4005a8:	2302      	movs	r3, #2
  4005aa:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4005ac:	6a23      	ldr	r3, [r4, #32]
  4005ae:	f013 0f01 	tst.w	r3, #1
  4005b2:	d0fb      	beq.n	4005ac <twi_master_write+0x68>
  4005b4:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4005b6:	2001      	movs	r0, #1
  4005b8:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4005ba:	2005      	movs	r0, #5
  4005bc:	bd70      	pop	{r4, r5, r6, pc}
  4005be:	2005      	movs	r0, #5
  4005c0:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4005c2:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4005c4:	bd70      	pop	{r4, r5, r6, pc}
  4005c6:	bf00      	nop

004005c8 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  4005c8:	b500      	push	{lr}
  4005ca:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  4005cc:	2300      	movs	r3, #0
  4005ce:	aa06      	add	r2, sp, #24
  4005d0:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  4005d4:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  4005d6:	2201      	movs	r2, #1
  4005d8:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  4005da:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  4005de:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  4005e2:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  4005e4:	a901      	add	r1, sp, #4
  4005e6:	f7ff ffad 	bl	400544 <twi_master_write>
}
  4005ea:	b007      	add	sp, #28
  4005ec:	f85d fb04 	ldr.w	pc, [sp], #4

004005f0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4005f0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4005f2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4005f6:	d02f      	beq.n	400658 <pio_set_peripheral+0x68>
  4005f8:	d807      	bhi.n	40060a <pio_set_peripheral+0x1a>
  4005fa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4005fe:	d014      	beq.n	40062a <pio_set_peripheral+0x3a>
  400600:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400604:	d01e      	beq.n	400644 <pio_set_peripheral+0x54>
  400606:	b939      	cbnz	r1, 400618 <pio_set_peripheral+0x28>
  400608:	4770      	bx	lr
  40060a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40060e:	d036      	beq.n	40067e <pio_set_peripheral+0x8e>
  400610:	d804      	bhi.n	40061c <pio_set_peripheral+0x2c>
  400612:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400616:	d029      	beq.n	40066c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400618:	6042      	str	r2, [r0, #4]
  40061a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40061c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400620:	d02d      	beq.n	40067e <pio_set_peripheral+0x8e>
  400622:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400626:	d02a      	beq.n	40067e <pio_set_peripheral+0x8e>
  400628:	e7f6      	b.n	400618 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40062a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40062c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40062e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400630:	43d3      	mvns	r3, r2
  400632:	4021      	ands	r1, r4
  400634:	4019      	ands	r1, r3
  400636:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400638:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40063a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40063c:	4021      	ands	r1, r4
  40063e:	400b      	ands	r3, r1
  400640:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400642:	e01a      	b.n	40067a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400644:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400646:	4313      	orrs	r3, r2
  400648:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40064a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40064c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40064e:	400b      	ands	r3, r1
  400650:	ea23 0302 	bic.w	r3, r3, r2
  400654:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400656:	e7df      	b.n	400618 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400658:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40065a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  40065c:	400b      	ands	r3, r1
  40065e:	ea23 0302 	bic.w	r3, r3, r2
  400662:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400664:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400666:	4313      	orrs	r3, r2
  400668:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40066a:	e7d5      	b.n	400618 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40066c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40066e:	4313      	orrs	r3, r2
  400670:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400672:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400674:	4313      	orrs	r3, r2
  400676:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400678:	e7ce      	b.n	400618 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40067a:	6042      	str	r2, [r0, #4]
}
  40067c:	bc10      	pop	{r4}
  40067e:	4770      	bx	lr

00400680 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400680:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400682:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400686:	bf14      	ite	ne
  400688:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40068a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40068c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400690:	bf14      	ite	ne
  400692:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400694:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400696:	f012 0f02 	tst.w	r2, #2
  40069a:	d002      	beq.n	4006a2 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  40069c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4006a0:	e004      	b.n	4006ac <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4006a2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4006a6:	bf18      	it	ne
  4006a8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4006ac:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4006ae:	6001      	str	r1, [r0, #0]
  4006b0:	4770      	bx	lr
  4006b2:	bf00      	nop

004006b4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4006b4:	b410      	push	{r4}
  4006b6:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4006b8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006ba:	b10c      	cbz	r4, 4006c0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4006bc:	6641      	str	r1, [r0, #100]	; 0x64
  4006be:	e000      	b.n	4006c2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006c0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4006c2:	b10b      	cbz	r3, 4006c8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4006c4:	6501      	str	r1, [r0, #80]	; 0x50
  4006c6:	e000      	b.n	4006ca <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4006c8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4006ca:	b10a      	cbz	r2, 4006d0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4006cc:	6301      	str	r1, [r0, #48]	; 0x30
  4006ce:	e000      	b.n	4006d2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4006d0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4006d2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4006d4:	6001      	str	r1, [r0, #0]
}
  4006d6:	bc10      	pop	{r4}
  4006d8:	4770      	bx	lr
  4006da:	bf00      	nop

004006dc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4006dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4006de:	4770      	bx	lr

004006e0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4006e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4006e2:	4770      	bx	lr

004006e4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4006e4:	b570      	push	{r4, r5, r6, lr}
  4006e6:	b082      	sub	sp, #8
  4006e8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4006ea:	0943      	lsrs	r3, r0, #5
  4006ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4006f0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4006f4:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4006f6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4006fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4006fe:	d047      	beq.n	400790 <pio_configure_pin+0xac>
  400700:	d809      	bhi.n	400716 <pio_configure_pin+0x32>
  400702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400706:	d021      	beq.n	40074c <pio_configure_pin+0x68>
  400708:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40070c:	d02f      	beq.n	40076e <pio_configure_pin+0x8a>
  40070e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400712:	d16f      	bne.n	4007f4 <pio_configure_pin+0x110>
  400714:	e009      	b.n	40072a <pio_configure_pin+0x46>
  400716:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40071a:	d055      	beq.n	4007c8 <pio_configure_pin+0xe4>
  40071c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400720:	d052      	beq.n	4007c8 <pio_configure_pin+0xe4>
  400722:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400726:	d044      	beq.n	4007b2 <pio_configure_pin+0xce>
  400728:	e064      	b.n	4007f4 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40072a:	f000 001f 	and.w	r0, r0, #31
  40072e:	2601      	movs	r6, #1
  400730:	4086      	lsls	r6, r0
  400732:	4632      	mov	r2, r6
  400734:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400738:	4620      	mov	r0, r4
  40073a:	f7ff ff59 	bl	4005f0 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40073e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400742:	bf14      	ite	ne
  400744:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400746:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400748:	2001      	movs	r0, #1
  40074a:	e054      	b.n	4007f6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40074c:	f000 001f 	and.w	r0, r0, #31
  400750:	2601      	movs	r6, #1
  400752:	4086      	lsls	r6, r0
  400754:	4632      	mov	r2, r6
  400756:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40075a:	4620      	mov	r0, r4
  40075c:	f7ff ff48 	bl	4005f0 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400760:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400764:	bf14      	ite	ne
  400766:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400768:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40076a:	2001      	movs	r0, #1
  40076c:	e043      	b.n	4007f6 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40076e:	f000 001f 	and.w	r0, r0, #31
  400772:	2601      	movs	r6, #1
  400774:	4086      	lsls	r6, r0
  400776:	4632      	mov	r2, r6
  400778:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40077c:	4620      	mov	r0, r4
  40077e:	f7ff ff37 	bl	4005f0 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400782:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400786:	bf14      	ite	ne
  400788:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40078a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40078c:	2001      	movs	r0, #1
  40078e:	e032      	b.n	4007f6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400790:	f000 001f 	and.w	r0, r0, #31
  400794:	2601      	movs	r6, #1
  400796:	4086      	lsls	r6, r0
  400798:	4632      	mov	r2, r6
  40079a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40079e:	4620      	mov	r0, r4
  4007a0:	f7ff ff26 	bl	4005f0 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007a4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007a8:	bf14      	ite	ne
  4007aa:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007ac:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007ae:	2001      	movs	r0, #1
  4007b0:	e021      	b.n	4007f6 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4007b2:	f000 011f 	and.w	r1, r0, #31
  4007b6:	2601      	movs	r6, #1
  4007b8:	462a      	mov	r2, r5
  4007ba:	fa06 f101 	lsl.w	r1, r6, r1
  4007be:	4620      	mov	r0, r4
  4007c0:	f7ff ff5e 	bl	400680 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  4007c4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4007c6:	e016      	b.n	4007f6 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4007c8:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4007cc:	f000 011f 	and.w	r1, r0, #31
  4007d0:	2601      	movs	r6, #1
  4007d2:	ea05 0306 	and.w	r3, r5, r6
  4007d6:	9300      	str	r3, [sp, #0]
  4007d8:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4007dc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4007e0:	bf14      	ite	ne
  4007e2:	2200      	movne	r2, #0
  4007e4:	2201      	moveq	r2, #1
  4007e6:	fa06 f101 	lsl.w	r1, r6, r1
  4007ea:	4620      	mov	r0, r4
  4007ec:	f7ff ff62 	bl	4006b4 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  4007f0:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4007f2:	e000      	b.n	4007f6 <pio_configure_pin+0x112>

	default:
		return 0;
  4007f4:	2000      	movs	r0, #0
	}

	return 1;
}
  4007f6:	b002      	add	sp, #8
  4007f8:	bd70      	pop	{r4, r5, r6, pc}
  4007fa:	bf00      	nop

004007fc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4007fc:	b570      	push	{r4, r5, r6, lr}
  4007fe:	b082      	sub	sp, #8
  400800:	4605      	mov	r5, r0
  400802:	460e      	mov	r6, r1
  400804:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400806:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40080a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40080e:	d038      	beq.n	400882 <pio_configure_pin_group+0x86>
  400810:	d809      	bhi.n	400826 <pio_configure_pin_group+0x2a>
  400812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400816:	d01c      	beq.n	400852 <pio_configure_pin_group+0x56>
  400818:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40081c:	d025      	beq.n	40086a <pio_configure_pin_group+0x6e>
  40081e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400822:	d150      	bne.n	4008c6 <pio_configure_pin_group+0xca>
  400824:	e009      	b.n	40083a <pio_configure_pin_group+0x3e>
  400826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40082a:	d03a      	beq.n	4008a2 <pio_configure_pin_group+0xa6>
  40082c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400830:	d037      	beq.n	4008a2 <pio_configure_pin_group+0xa6>
  400832:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400836:	d030      	beq.n	40089a <pio_configure_pin_group+0x9e>
  400838:	e045      	b.n	4008c6 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40083a:	460a      	mov	r2, r1
  40083c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400840:	f7ff fed6 	bl	4005f0 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400844:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400848:	bf14      	ite	ne
  40084a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40084c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40084e:	2001      	movs	r0, #1
  400850:	e03a      	b.n	4008c8 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400852:	460a      	mov	r2, r1
  400854:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400858:	f7ff feca 	bl	4005f0 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40085c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400860:	bf14      	ite	ne
  400862:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400864:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400866:	2001      	movs	r0, #1
  400868:	e02e      	b.n	4008c8 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40086a:	460a      	mov	r2, r1
  40086c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400870:	f7ff febe 	bl	4005f0 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400874:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400878:	bf14      	ite	ne
  40087a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40087c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40087e:	2001      	movs	r0, #1
  400880:	e022      	b.n	4008c8 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400882:	460a      	mov	r2, r1
  400884:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400888:	f7ff feb2 	bl	4005f0 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40088c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400890:	bf14      	ite	ne
  400892:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400894:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400896:	2001      	movs	r0, #1
  400898:	e016      	b.n	4008c8 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40089a:	f7ff fef1 	bl	400680 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  40089e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4008a0:	e012      	b.n	4008c8 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4008a2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  4008a6:	f004 0301 	and.w	r3, r4, #1
  4008aa:	9300      	str	r3, [sp, #0]
  4008ac:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4008b0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4008b4:	bf14      	ite	ne
  4008b6:	2200      	movne	r2, #0
  4008b8:	2201      	moveq	r2, #1
  4008ba:	4631      	mov	r1, r6
  4008bc:	4628      	mov	r0, r5
  4008be:	f7ff fef9 	bl	4006b4 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  4008c2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4008c4:	e000      	b.n	4008c8 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4008c6:	2000      	movs	r0, #0
	}

	return 1;
}
  4008c8:	b002      	add	sp, #8
  4008ca:	bd70      	pop	{r4, r5, r6, pc}

004008cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4008cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008d0:	4681      	mov	r9, r0
  4008d2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4008d4:	f7ff ff02 	bl	4006dc <pio_get_interrupt_status>
  4008d8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4008da:	4648      	mov	r0, r9
  4008dc:	f7ff ff00 	bl	4006e0 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  4008e0:	4005      	ands	r5, r0
  4008e2:	d013      	beq.n	40090c <pio_handler_process+0x40>
  4008e4:	4c0e      	ldr	r4, [pc, #56]	; (400920 <pio_handler_process+0x54>)
  4008e6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4008ea:	6823      	ldr	r3, [r4, #0]
  4008ec:	4543      	cmp	r3, r8
  4008ee:	d108      	bne.n	400902 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4008f0:	6861      	ldr	r1, [r4, #4]
  4008f2:	4229      	tst	r1, r5
  4008f4:	d005      	beq.n	400902 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4008f6:	68e3      	ldr	r3, [r4, #12]
  4008f8:	4640      	mov	r0, r8
  4008fa:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4008fc:	6863      	ldr	r3, [r4, #4]
  4008fe:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400902:	42b4      	cmp	r4, r6
  400904:	d002      	beq.n	40090c <pio_handler_process+0x40>
  400906:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400908:	2d00      	cmp	r5, #0
  40090a:	d1ee      	bne.n	4008ea <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40090c:	4b05      	ldr	r3, [pc, #20]	; (400924 <pio_handler_process+0x58>)
  40090e:	681b      	ldr	r3, [r3, #0]
  400910:	b123      	cbz	r3, 40091c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400912:	4b05      	ldr	r3, [pc, #20]	; (400928 <pio_handler_process+0x5c>)
  400914:	681b      	ldr	r3, [r3, #0]
  400916:	b10b      	cbz	r3, 40091c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400918:	4648      	mov	r0, r9
  40091a:	4798      	blx	r3
  40091c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400920:	20000458 	.word	0x20000458
  400924:	200004c8 	.word	0x200004c8
  400928:	20000454 	.word	0x20000454

0040092c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40092c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40092e:	210b      	movs	r1, #11
  400930:	4801      	ldr	r0, [pc, #4]	; (400938 <PIOA_Handler+0xc>)
  400932:	f7ff ffcb 	bl	4008cc <pio_handler_process>
  400936:	bd08      	pop	{r3, pc}
  400938:	400e0e00 	.word	0x400e0e00

0040093c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40093c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40093e:	210c      	movs	r1, #12
  400940:	4801      	ldr	r0, [pc, #4]	; (400948 <PIOB_Handler+0xc>)
  400942:	f7ff ffc3 	bl	4008cc <pio_handler_process>
  400946:	bd08      	pop	{r3, pc}
  400948:	400e1000 	.word	0x400e1000

0040094c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40094c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40094e:	210d      	movs	r1, #13
  400950:	4801      	ldr	r0, [pc, #4]	; (400958 <PIOC_Handler+0xc>)
  400952:	f7ff ffbb 	bl	4008cc <pio_handler_process>
  400956:	bd08      	pop	{r3, pc}
  400958:	400e1200 	.word	0x400e1200

0040095c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40095c:	4a18      	ldr	r2, [pc, #96]	; (4009c0 <pmc_switch_mck_to_pllack+0x64>)
  40095e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400964:	4318      	orrs	r0, r3
  400966:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400968:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40096a:	f013 0f08 	tst.w	r3, #8
  40096e:	d003      	beq.n	400978 <pmc_switch_mck_to_pllack+0x1c>
  400970:	e009      	b.n	400986 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400972:	3b01      	subs	r3, #1
  400974:	d103      	bne.n	40097e <pmc_switch_mck_to_pllack+0x22>
  400976:	e01e      	b.n	4009b6 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400978:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40097c:	4910      	ldr	r1, [pc, #64]	; (4009c0 <pmc_switch_mck_to_pllack+0x64>)
  40097e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400980:	f012 0f08 	tst.w	r2, #8
  400984:	d0f5      	beq.n	400972 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400986:	4a0e      	ldr	r2, [pc, #56]	; (4009c0 <pmc_switch_mck_to_pllack+0x64>)
  400988:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40098a:	f023 0303 	bic.w	r3, r3, #3
  40098e:	f043 0302 	orr.w	r3, r3, #2
  400992:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400994:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400996:	f010 0008 	ands.w	r0, r0, #8
  40099a:	d004      	beq.n	4009a6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40099c:	2000      	movs	r0, #0
  40099e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009a0:	3b01      	subs	r3, #1
  4009a2:	d103      	bne.n	4009ac <pmc_switch_mck_to_pllack+0x50>
  4009a4:	e009      	b.n	4009ba <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4009a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009aa:	4905      	ldr	r1, [pc, #20]	; (4009c0 <pmc_switch_mck_to_pllack+0x64>)
  4009ac:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009ae:	f012 0f08 	tst.w	r2, #8
  4009b2:	d0f5      	beq.n	4009a0 <pmc_switch_mck_to_pllack+0x44>
  4009b4:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4009b6:	2001      	movs	r0, #1
  4009b8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4009ba:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4009bc:	4770      	bx	lr
  4009be:	bf00      	nop
  4009c0:	400e0400 	.word	0x400e0400

004009c4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4009c4:	b138      	cbz	r0, 4009d6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009c6:	4911      	ldr	r1, [pc, #68]	; (400a0c <pmc_switch_mainck_to_xtal+0x48>)
  4009c8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4009ca:	4a11      	ldr	r2, [pc, #68]	; (400a10 <pmc_switch_mainck_to_xtal+0x4c>)
  4009cc:	401a      	ands	r2, r3
  4009ce:	4b11      	ldr	r3, [pc, #68]	; (400a14 <pmc_switch_mainck_to_xtal+0x50>)
  4009d0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009d2:	620b      	str	r3, [r1, #32]
  4009d4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009d6:	480d      	ldr	r0, [pc, #52]	; (400a0c <pmc_switch_mainck_to_xtal+0x48>)
  4009d8:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009da:	0209      	lsls	r1, r1, #8
  4009dc:	b289      	uxth	r1, r1
  4009de:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  4009e2:	f023 0303 	bic.w	r3, r3, #3
  4009e6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009ea:	f043 0301 	orr.w	r3, r3, #1
  4009ee:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009f0:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4009f2:	4602      	mov	r2, r0
  4009f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009f6:	f013 0f01 	tst.w	r3, #1
  4009fa:	d0fb      	beq.n	4009f4 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4009fc:	4a03      	ldr	r2, [pc, #12]	; (400a0c <pmc_switch_mainck_to_xtal+0x48>)
  4009fe:	6a13      	ldr	r3, [r2, #32]
  400a00:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400a08:	6213      	str	r3, [r2, #32]
  400a0a:	4770      	bx	lr
  400a0c:	400e0400 	.word	0x400e0400
  400a10:	fec8fffc 	.word	0xfec8fffc
  400a14:	01370002 	.word	0x01370002

00400a18 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a18:	4b02      	ldr	r3, [pc, #8]	; (400a24 <pmc_osc_is_ready_mainck+0xc>)
  400a1a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a1c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a20:	4770      	bx	lr
  400a22:	bf00      	nop
  400a24:	400e0400 	.word	0x400e0400

00400a28 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a2c:	4b01      	ldr	r3, [pc, #4]	; (400a34 <pmc_disable_pllack+0xc>)
  400a2e:	629a      	str	r2, [r3, #40]	; 0x28
  400a30:	4770      	bx	lr
  400a32:	bf00      	nop
  400a34:	400e0400 	.word	0x400e0400

00400a38 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a38:	4b02      	ldr	r3, [pc, #8]	; (400a44 <pmc_is_locked_pllack+0xc>)
  400a3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a3c:	f000 0002 	and.w	r0, r0, #2
  400a40:	4770      	bx	lr
  400a42:	bf00      	nop
  400a44:	400e0400 	.word	0x400e0400

00400a48 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400a48:	2822      	cmp	r0, #34	; 0x22
  400a4a:	d81e      	bhi.n	400a8a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400a4c:	281f      	cmp	r0, #31
  400a4e:	d80c      	bhi.n	400a6a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400a50:	4b11      	ldr	r3, [pc, #68]	; (400a98 <pmc_enable_periph_clk+0x50>)
  400a52:	699a      	ldr	r2, [r3, #24]
  400a54:	2301      	movs	r3, #1
  400a56:	4083      	lsls	r3, r0
  400a58:	4393      	bics	r3, r2
  400a5a:	d018      	beq.n	400a8e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400a5c:	2301      	movs	r3, #1
  400a5e:	fa03 f000 	lsl.w	r0, r3, r0
  400a62:	4b0d      	ldr	r3, [pc, #52]	; (400a98 <pmc_enable_periph_clk+0x50>)
  400a64:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400a66:	2000      	movs	r0, #0
  400a68:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400a6a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400a6c:	4b0a      	ldr	r3, [pc, #40]	; (400a98 <pmc_enable_periph_clk+0x50>)
  400a6e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400a72:	2301      	movs	r3, #1
  400a74:	4083      	lsls	r3, r0
  400a76:	4393      	bics	r3, r2
  400a78:	d00b      	beq.n	400a92 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400a7a:	2301      	movs	r3, #1
  400a7c:	fa03 f000 	lsl.w	r0, r3, r0
  400a80:	4b05      	ldr	r3, [pc, #20]	; (400a98 <pmc_enable_periph_clk+0x50>)
  400a82:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400a86:	2000      	movs	r0, #0
  400a88:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400a8a:	2001      	movs	r0, #1
  400a8c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400a8e:	2000      	movs	r0, #0
  400a90:	4770      	bx	lr
  400a92:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400a94:	4770      	bx	lr
  400a96:	bf00      	nop
  400a98:	400e0400 	.word	0x400e0400

00400a9c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400aa0:	6043      	str	r3, [r0, #4]
  400aa2:	4770      	bx	lr

00400aa4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400aa4:	e7fe      	b.n	400aa4 <Dummy_Handler>
  400aa6:	bf00      	nop

00400aa8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400aa8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400aaa:	4b20      	ldr	r3, [pc, #128]	; (400b2c <Reset_Handler+0x84>)
  400aac:	4a20      	ldr	r2, [pc, #128]	; (400b30 <Reset_Handler+0x88>)
  400aae:	429a      	cmp	r2, r3
  400ab0:	d912      	bls.n	400ad8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400ab2:	4b20      	ldr	r3, [pc, #128]	; (400b34 <Reset_Handler+0x8c>)
  400ab4:	4a1d      	ldr	r2, [pc, #116]	; (400b2c <Reset_Handler+0x84>)
  400ab6:	429a      	cmp	r2, r3
  400ab8:	d21e      	bcs.n	400af8 <Reset_Handler+0x50>
  400aba:	4611      	mov	r1, r2
  400abc:	3b01      	subs	r3, #1
  400abe:	1a9b      	subs	r3, r3, r2
  400ac0:	f023 0303 	bic.w	r3, r3, #3
  400ac4:	3304      	adds	r3, #4
  400ac6:	4a1a      	ldr	r2, [pc, #104]	; (400b30 <Reset_Handler+0x88>)
  400ac8:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400aca:	f852 0b04 	ldr.w	r0, [r2], #4
  400ace:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400ad2:	429a      	cmp	r2, r3
  400ad4:	d1f9      	bne.n	400aca <Reset_Handler+0x22>
  400ad6:	e00f      	b.n	400af8 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400ad8:	4b14      	ldr	r3, [pc, #80]	; (400b2c <Reset_Handler+0x84>)
  400ada:	4a15      	ldr	r2, [pc, #84]	; (400b30 <Reset_Handler+0x88>)
  400adc:	429a      	cmp	r2, r3
  400ade:	d20b      	bcs.n	400af8 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400ae0:	4b14      	ldr	r3, [pc, #80]	; (400b34 <Reset_Handler+0x8c>)
  400ae2:	4a12      	ldr	r2, [pc, #72]	; (400b2c <Reset_Handler+0x84>)
  400ae4:	1a9a      	subs	r2, r3, r2
  400ae6:	4814      	ldr	r0, [pc, #80]	; (400b38 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400ae8:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400aea:	b12a      	cbz	r2, 400af8 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400aec:	f851 2904 	ldr.w	r2, [r1], #-4
  400af0:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400af4:	4281      	cmp	r1, r0
  400af6:	d1f9      	bne.n	400aec <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400af8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400afa:	4b10      	ldr	r3, [pc, #64]	; (400b3c <Reset_Handler+0x94>)
  400afc:	4a10      	ldr	r2, [pc, #64]	; (400b40 <Reset_Handler+0x98>)
  400afe:	429a      	cmp	r2, r3
  400b00:	d20b      	bcs.n	400b1a <Reset_Handler+0x72>
  400b02:	1d13      	adds	r3, r2, #4
  400b04:	4a0f      	ldr	r2, [pc, #60]	; (400b44 <Reset_Handler+0x9c>)
  400b06:	1ad2      	subs	r2, r2, r3
  400b08:	f022 0203 	bic.w	r2, r2, #3
  400b0c:	441a      	add	r2, r3
  400b0e:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400b10:	2100      	movs	r1, #0
  400b12:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400b16:	429a      	cmp	r2, r3
  400b18:	d1fb      	bne.n	400b12 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400b1a:	4b0b      	ldr	r3, [pc, #44]	; (400b48 <Reset_Handler+0xa0>)
  400b1c:	4a0b      	ldr	r2, [pc, #44]	; (400b4c <Reset_Handler+0xa4>)
  400b1e:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400b20:	f000 f8ea 	bl	400cf8 <__libc_init_array>

	/* Branch to main function */
	main();
  400b24:	f7ff fb90 	bl	400248 <main>
  400b28:	e7fe      	b.n	400b28 <Reset_Handler+0x80>
  400b2a:	bf00      	nop
  400b2c:	20000000 	.word	0x20000000
  400b30:	00400e64 	.word	0x00400e64
  400b34:	20000438 	.word	0x20000438
  400b38:	00400e60 	.word	0x00400e60
  400b3c:	200004cc 	.word	0x200004cc
  400b40:	20000438 	.word	0x20000438
  400b44:	200004cf 	.word	0x200004cf
  400b48:	e000ed00 	.word	0xe000ed00
  400b4c:	00400000 	.word	0x00400000

00400b50 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400b50:	4b3d      	ldr	r3, [pc, #244]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b54:	f003 0303 	and.w	r3, r3, #3
  400b58:	2b03      	cmp	r3, #3
  400b5a:	d85d      	bhi.n	400c18 <SystemCoreClockUpdate+0xc8>
  400b5c:	e8df f003 	tbb	[pc, r3]
  400b60:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400b64:	4b39      	ldr	r3, [pc, #228]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400b66:	695b      	ldr	r3, [r3, #20]
  400b68:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b6c:	bf14      	ite	ne
  400b6e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b72:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b76:	4b36      	ldr	r3, [pc, #216]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400b78:	601a      	str	r2, [r3, #0]
  400b7a:	e04d      	b.n	400c18 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400b7c:	4b32      	ldr	r3, [pc, #200]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400b7e:	6a1b      	ldr	r3, [r3, #32]
  400b80:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b84:	d003      	beq.n	400b8e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400b86:	4a33      	ldr	r2, [pc, #204]	; (400c54 <SystemCoreClockUpdate+0x104>)
  400b88:	4b31      	ldr	r3, [pc, #196]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400b8a:	601a      	str	r2, [r3, #0]
  400b8c:	e044      	b.n	400c18 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b8e:	4a32      	ldr	r2, [pc, #200]	; (400c58 <SystemCoreClockUpdate+0x108>)
  400b90:	4b2f      	ldr	r3, [pc, #188]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400b92:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b94:	4b2c      	ldr	r3, [pc, #176]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400b96:	6a1b      	ldr	r3, [r3, #32]
  400b98:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b9c:	2b10      	cmp	r3, #16
  400b9e:	d002      	beq.n	400ba6 <SystemCoreClockUpdate+0x56>
  400ba0:	2b20      	cmp	r3, #32
  400ba2:	d004      	beq.n	400bae <SystemCoreClockUpdate+0x5e>
  400ba4:	e038      	b.n	400c18 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400ba6:	4a2d      	ldr	r2, [pc, #180]	; (400c5c <SystemCoreClockUpdate+0x10c>)
  400ba8:	4b29      	ldr	r3, [pc, #164]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400baa:	601a      	str	r2, [r3, #0]
			break;
  400bac:	e034      	b.n	400c18 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400bae:	4a29      	ldr	r2, [pc, #164]	; (400c54 <SystemCoreClockUpdate+0x104>)
  400bb0:	4b27      	ldr	r3, [pc, #156]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400bb2:	601a      	str	r2, [r3, #0]
			break;
  400bb4:	e030      	b.n	400c18 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400bb6:	4b24      	ldr	r3, [pc, #144]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400bb8:	6a1b      	ldr	r3, [r3, #32]
  400bba:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bbe:	d003      	beq.n	400bc8 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400bc0:	4a24      	ldr	r2, [pc, #144]	; (400c54 <SystemCoreClockUpdate+0x104>)
  400bc2:	4b23      	ldr	r3, [pc, #140]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400bc4:	601a      	str	r2, [r3, #0]
  400bc6:	e012      	b.n	400bee <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400bc8:	4a23      	ldr	r2, [pc, #140]	; (400c58 <SystemCoreClockUpdate+0x108>)
  400bca:	4b21      	ldr	r3, [pc, #132]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400bcc:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400bce:	4b1e      	ldr	r3, [pc, #120]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400bd0:	6a1b      	ldr	r3, [r3, #32]
  400bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bd6:	2b10      	cmp	r3, #16
  400bd8:	d002      	beq.n	400be0 <SystemCoreClockUpdate+0x90>
  400bda:	2b20      	cmp	r3, #32
  400bdc:	d004      	beq.n	400be8 <SystemCoreClockUpdate+0x98>
  400bde:	e006      	b.n	400bee <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400be0:	4a1e      	ldr	r2, [pc, #120]	; (400c5c <SystemCoreClockUpdate+0x10c>)
  400be2:	4b1b      	ldr	r3, [pc, #108]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400be4:	601a      	str	r2, [r3, #0]
					break;
  400be6:	e002      	b.n	400bee <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400be8:	4a1a      	ldr	r2, [pc, #104]	; (400c54 <SystemCoreClockUpdate+0x104>)
  400bea:	4b19      	ldr	r3, [pc, #100]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400bec:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400bee:	4b16      	ldr	r3, [pc, #88]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bf2:	f003 0303 	and.w	r3, r3, #3
  400bf6:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400bf8:	4a13      	ldr	r2, [pc, #76]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400bfa:	bf07      	ittee	eq
  400bfc:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400bfe:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400c00:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c02:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400c04:	4812      	ldr	r0, [pc, #72]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400c06:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400c0a:	6803      	ldr	r3, [r0, #0]
  400c0c:	fb01 3303 	mla	r3, r1, r3, r3
  400c10:	b2d2      	uxtb	r2, r2
  400c12:	fbb3 f3f2 	udiv	r3, r3, r2
  400c16:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400c18:	4b0b      	ldr	r3, [pc, #44]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c20:	2b70      	cmp	r3, #112	; 0x70
  400c22:	d107      	bne.n	400c34 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400c24:	4a0a      	ldr	r2, [pc, #40]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400c26:	6813      	ldr	r3, [r2, #0]
  400c28:	490d      	ldr	r1, [pc, #52]	; (400c60 <SystemCoreClockUpdate+0x110>)
  400c2a:	fba1 1303 	umull	r1, r3, r1, r3
  400c2e:	085b      	lsrs	r3, r3, #1
  400c30:	6013      	str	r3, [r2, #0]
  400c32:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c34:	4b04      	ldr	r3, [pc, #16]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400c38:	4905      	ldr	r1, [pc, #20]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400c3a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400c3e:	680b      	ldr	r3, [r1, #0]
  400c40:	40d3      	lsrs	r3, r2
  400c42:	600b      	str	r3, [r1, #0]
  400c44:	4770      	bx	lr
  400c46:	bf00      	nop
  400c48:	400e0400 	.word	0x400e0400
  400c4c:	400e1410 	.word	0x400e1410
  400c50:	2000000c 	.word	0x2000000c
  400c54:	00b71b00 	.word	0x00b71b00
  400c58:	003d0900 	.word	0x003d0900
  400c5c:	007a1200 	.word	0x007a1200
  400c60:	aaaaaaab 	.word	0xaaaaaaab

00400c64 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400c64:	4b1a      	ldr	r3, [pc, #104]	; (400cd0 <system_init_flash+0x6c>)
  400c66:	4298      	cmp	r0, r3
  400c68:	d807      	bhi.n	400c7a <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400c6e:	4a19      	ldr	r2, [pc, #100]	; (400cd4 <system_init_flash+0x70>)
  400c70:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c72:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400c76:	6013      	str	r3, [r2, #0]
  400c78:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400c7a:	4b17      	ldr	r3, [pc, #92]	; (400cd8 <system_init_flash+0x74>)
  400c7c:	4298      	cmp	r0, r3
  400c7e:	d806      	bhi.n	400c8e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c80:	4b16      	ldr	r3, [pc, #88]	; (400cdc <system_init_flash+0x78>)
  400c82:	4a14      	ldr	r2, [pc, #80]	; (400cd4 <system_init_flash+0x70>)
  400c84:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c86:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400c8a:	6013      	str	r3, [r2, #0]
  400c8c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400c8e:	4b14      	ldr	r3, [pc, #80]	; (400ce0 <system_init_flash+0x7c>)
  400c90:	4298      	cmp	r0, r3
  400c92:	d806      	bhi.n	400ca2 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c94:	4b13      	ldr	r3, [pc, #76]	; (400ce4 <system_init_flash+0x80>)
  400c96:	4a0f      	ldr	r2, [pc, #60]	; (400cd4 <system_init_flash+0x70>)
  400c98:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c9a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400c9e:	6013      	str	r3, [r2, #0]
  400ca0:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400ca2:	4b11      	ldr	r3, [pc, #68]	; (400ce8 <system_init_flash+0x84>)
  400ca4:	4298      	cmp	r0, r3
  400ca6:	d806      	bhi.n	400cb6 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ca8:	4b10      	ldr	r3, [pc, #64]	; (400cec <system_init_flash+0x88>)
  400caa:	4a0a      	ldr	r2, [pc, #40]	; (400cd4 <system_init_flash+0x70>)
  400cac:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400cae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400cb2:	6013      	str	r3, [r2, #0]
  400cb4:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400cb6:	4b0e      	ldr	r3, [pc, #56]	; (400cf0 <system_init_flash+0x8c>)
  400cb8:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cba:	bf94      	ite	ls
  400cbc:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400cc0:	4b0c      	ldrhi	r3, [pc, #48]	; (400cf4 <system_init_flash+0x90>)
  400cc2:	4a04      	ldr	r2, [pc, #16]	; (400cd4 <system_init_flash+0x70>)
  400cc4:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400cc6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400cca:	6013      	str	r3, [r2, #0]
  400ccc:	4770      	bx	lr
  400cce:	bf00      	nop
  400cd0:	01312cff 	.word	0x01312cff
  400cd4:	400e0a00 	.word	0x400e0a00
  400cd8:	026259ff 	.word	0x026259ff
  400cdc:	04000100 	.word	0x04000100
  400ce0:	039386ff 	.word	0x039386ff
  400ce4:	04000200 	.word	0x04000200
  400ce8:	04c4b3ff 	.word	0x04c4b3ff
  400cec:	04000300 	.word	0x04000300
  400cf0:	05f5e0ff 	.word	0x05f5e0ff
  400cf4:	04000500 	.word	0x04000500

00400cf8 <__libc_init_array>:
  400cf8:	b570      	push	{r4, r5, r6, lr}
  400cfa:	4e0f      	ldr	r6, [pc, #60]	; (400d38 <__libc_init_array+0x40>)
  400cfc:	4d0f      	ldr	r5, [pc, #60]	; (400d3c <__libc_init_array+0x44>)
  400cfe:	1b76      	subs	r6, r6, r5
  400d00:	10b6      	asrs	r6, r6, #2
  400d02:	bf18      	it	ne
  400d04:	2400      	movne	r4, #0
  400d06:	d005      	beq.n	400d14 <__libc_init_array+0x1c>
  400d08:	3401      	adds	r4, #1
  400d0a:	f855 3b04 	ldr.w	r3, [r5], #4
  400d0e:	4798      	blx	r3
  400d10:	42a6      	cmp	r6, r4
  400d12:	d1f9      	bne.n	400d08 <__libc_init_array+0x10>
  400d14:	4e0a      	ldr	r6, [pc, #40]	; (400d40 <__libc_init_array+0x48>)
  400d16:	4d0b      	ldr	r5, [pc, #44]	; (400d44 <__libc_init_array+0x4c>)
  400d18:	1b76      	subs	r6, r6, r5
  400d1a:	f000 f88d 	bl	400e38 <_init>
  400d1e:	10b6      	asrs	r6, r6, #2
  400d20:	bf18      	it	ne
  400d22:	2400      	movne	r4, #0
  400d24:	d006      	beq.n	400d34 <__libc_init_array+0x3c>
  400d26:	3401      	adds	r4, #1
  400d28:	f855 3b04 	ldr.w	r3, [r5], #4
  400d2c:	4798      	blx	r3
  400d2e:	42a6      	cmp	r6, r4
  400d30:	d1f9      	bne.n	400d26 <__libc_init_array+0x2e>
  400d32:	bd70      	pop	{r4, r5, r6, pc}
  400d34:	bd70      	pop	{r4, r5, r6, pc}
  400d36:	bf00      	nop
  400d38:	00400e44 	.word	0x00400e44
  400d3c:	00400e44 	.word	0x00400e44
  400d40:	00400e4c 	.word	0x00400e4c
  400d44:	00400e44 	.word	0x00400e44

00400d48 <register_fini>:
  400d48:	4b02      	ldr	r3, [pc, #8]	; (400d54 <register_fini+0xc>)
  400d4a:	b113      	cbz	r3, 400d52 <register_fini+0xa>
  400d4c:	4802      	ldr	r0, [pc, #8]	; (400d58 <register_fini+0x10>)
  400d4e:	f000 b805 	b.w	400d5c <atexit>
  400d52:	4770      	bx	lr
  400d54:	00000000 	.word	0x00000000
  400d58:	00400d69 	.word	0x00400d69

00400d5c <atexit>:
  400d5c:	2300      	movs	r3, #0
  400d5e:	4601      	mov	r1, r0
  400d60:	461a      	mov	r2, r3
  400d62:	4618      	mov	r0, r3
  400d64:	f000 b814 	b.w	400d90 <__register_exitproc>

00400d68 <__libc_fini_array>:
  400d68:	b538      	push	{r3, r4, r5, lr}
  400d6a:	4d07      	ldr	r5, [pc, #28]	; (400d88 <__libc_fini_array+0x20>)
  400d6c:	4c07      	ldr	r4, [pc, #28]	; (400d8c <__libc_fini_array+0x24>)
  400d6e:	1b2c      	subs	r4, r5, r4
  400d70:	10a4      	asrs	r4, r4, #2
  400d72:	d005      	beq.n	400d80 <__libc_fini_array+0x18>
  400d74:	3c01      	subs	r4, #1
  400d76:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400d7a:	4798      	blx	r3
  400d7c:	2c00      	cmp	r4, #0
  400d7e:	d1f9      	bne.n	400d74 <__libc_fini_array+0xc>
  400d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400d84:	f000 b862 	b.w	400e4c <_fini>
  400d88:	00400e64 	.word	0x00400e64
  400d8c:	00400e60 	.word	0x00400e60

00400d90 <__register_exitproc>:
  400d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d94:	4c25      	ldr	r4, [pc, #148]	; (400e2c <__register_exitproc+0x9c>)
  400d96:	6825      	ldr	r5, [r4, #0]
  400d98:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400d9c:	4606      	mov	r6, r0
  400d9e:	4688      	mov	r8, r1
  400da0:	4692      	mov	sl, r2
  400da2:	4699      	mov	r9, r3
  400da4:	b3c4      	cbz	r4, 400e18 <__register_exitproc+0x88>
  400da6:	6860      	ldr	r0, [r4, #4]
  400da8:	281f      	cmp	r0, #31
  400daa:	dc17      	bgt.n	400ddc <__register_exitproc+0x4c>
  400dac:	1c43      	adds	r3, r0, #1
  400dae:	b176      	cbz	r6, 400dce <__register_exitproc+0x3e>
  400db0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400db4:	2201      	movs	r2, #1
  400db6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400dba:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400dbe:	4082      	lsls	r2, r0
  400dc0:	4311      	orrs	r1, r2
  400dc2:	2e02      	cmp	r6, #2
  400dc4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400dc8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400dcc:	d01e      	beq.n	400e0c <__register_exitproc+0x7c>
  400dce:	3002      	adds	r0, #2
  400dd0:	6063      	str	r3, [r4, #4]
  400dd2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400dd6:	2000      	movs	r0, #0
  400dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400ddc:	4b14      	ldr	r3, [pc, #80]	; (400e30 <__register_exitproc+0xa0>)
  400dde:	b303      	cbz	r3, 400e22 <__register_exitproc+0x92>
  400de0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400de4:	f3af 8000 	nop.w
  400de8:	4604      	mov	r4, r0
  400dea:	b1d0      	cbz	r0, 400e22 <__register_exitproc+0x92>
  400dec:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400df0:	2700      	movs	r7, #0
  400df2:	e880 0088 	stmia.w	r0, {r3, r7}
  400df6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400dfa:	4638      	mov	r0, r7
  400dfc:	2301      	movs	r3, #1
  400dfe:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400e02:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400e06:	2e00      	cmp	r6, #0
  400e08:	d0e1      	beq.n	400dce <__register_exitproc+0x3e>
  400e0a:	e7d1      	b.n	400db0 <__register_exitproc+0x20>
  400e0c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400e10:	430a      	orrs	r2, r1
  400e12:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400e16:	e7da      	b.n	400dce <__register_exitproc+0x3e>
  400e18:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400e1c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400e20:	e7c1      	b.n	400da6 <__register_exitproc+0x16>
  400e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  400e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400e2a:	bf00      	nop
  400e2c:	00400e34 	.word	0x00400e34
  400e30:	00000000 	.word	0x00000000

00400e34 <_global_impure_ptr>:
  400e34:	20000010                                ... 

00400e38 <_init>:
  400e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e3a:	bf00      	nop
  400e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400e3e:	bc08      	pop	{r3}
  400e40:	469e      	mov	lr, r3
  400e42:	4770      	bx	lr

00400e44 <__init_array_start>:
  400e44:	00400d49 	.word	0x00400d49

00400e48 <__frame_dummy_init_array_entry>:
  400e48:	004000f1                                ..@.

00400e4c <_fini>:
  400e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e4e:	bf00      	nop
  400e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400e52:	bc08      	pop	{r3}
  400e54:	469e      	mov	lr, r3
  400e56:	4770      	bx	lr

00400e58 <__portable_delay_cycles_veneer>:
  400e58:	f85f f000 	ldr.w	pc, [pc]	; 400e5c <__portable_delay_cycles_veneer+0x4>
  400e5c:	20000001 	.word	0x20000001

00400e60 <__fini_array_start>:
  400e60:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
