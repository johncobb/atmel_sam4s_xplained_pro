
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e5c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e0  20000000  00404e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000c0  200001e0  0040503c  000201e0  2**2
                  ALLOC
  3 .stack        00003000  200002a0  004050fc  000201e0  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000bdc6  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002222  00000000  00000000  0002c03e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000045fe  00000000  00000000  0002e260  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b38  00000000  00000000  0003285e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a58  00000000  00000000  00033396  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014a6e  00000000  00000000  00033dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c56d  00000000  00000000  0004885c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000536e8  00000000  00000000  00054dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002570  00000000  00000000  000a84b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200032a0 	.word	0x200032a0
  400004:	00400f8d 	.word	0x00400f8d
  400008:	00400f89 	.word	0x00400f89
  40000c:	00400f89 	.word	0x00400f89
  400010:	00400f89 	.word	0x00400f89
  400014:	00400f89 	.word	0x00400f89
  400018:	00400f89 	.word	0x00400f89
	...
  40002c:	00400f89 	.word	0x00400f89
  400030:	00400f89 	.word	0x00400f89
  400034:	00000000 	.word	0x00000000
  400038:	00400f89 	.word	0x00400f89
  40003c:	00400f89 	.word	0x00400f89
  400040:	00400f89 	.word	0x00400f89
  400044:	00400f89 	.word	0x00400f89
  400048:	00400f89 	.word	0x00400f89
  40004c:	00400f89 	.word	0x00400f89
  400050:	00400f89 	.word	0x00400f89
  400054:	00400f89 	.word	0x00400f89
  400058:	00400f89 	.word	0x00400f89
  40005c:	00400f89 	.word	0x00400f89
  400060:	00400f89 	.word	0x00400f89
  400064:	00400f89 	.word	0x00400f89
  400068:	00000000 	.word	0x00000000
  40006c:	00400d89 	.word	0x00400d89
  400070:	00400d99 	.word	0x00400d99
  400074:	00400da9 	.word	0x00400da9
  400078:	00400f89 	.word	0x00400f89
  40007c:	00400f89 	.word	0x00400f89
	...
  400088:	00400f89 	.word	0x00400f89
  40008c:	00400f89 	.word	0x00400f89
  400090:	00400f89 	.word	0x00400f89
  400094:	00400f89 	.word	0x00400f89
  400098:	00400f89 	.word	0x00400f89
  40009c:	00400f89 	.word	0x00400f89
  4000a0:	00400f89 	.word	0x00400f89
  4000a4:	00400f89 	.word	0x00400f89
  4000a8:	00400f89 	.word	0x00400f89
  4000ac:	00400f89 	.word	0x00400f89
  4000b0:	00400f89 	.word	0x00400f89
  4000b4:	00400f89 	.word	0x00400f89
  4000b8:	00400f89 	.word	0x00400f89
  4000bc:	00400f89 	.word	0x00400f89
  4000c0:	00400f89 	.word	0x00400f89
  4000c4:	00400f89 	.word	0x00400f89
  4000c8:	00400f89 	.word	0x00400f89

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e0 	.word	0x200001e0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404e5c 	.word	0x00404e5c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001e4 	.word	0x200001e4
  40011c:	00404e5c 	.word	0x00404e5c
  400120:	00404e5c 	.word	0x00404e5c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 f80c 	bl	401148 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f000 fe74 	bl	400e20 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f000 fe9c 	bl	400e74 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f000 fea0 	bl	400e84 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f000 fea3 	bl	400e94 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f000 fe30 	bl	400db8 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f000 ff6c 	bl	401034 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f000 fff3 	bl	401148 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000294 	.word	0x20000294
  4001a8:	2000028c 	.word	0x2000028c

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	20000290 	.word	0x20000290
  4001f8:	20000294 	.word	0x20000294

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f000 fe98 	bl	400f48 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f000 fe8d 	bl	400f48 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f000 fe96 	bl	400f70 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f000 fe89 	bl	400f70 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f000 fe54 	bl	400f38 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f000 fe48 	bl	400f38 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f000 fe4e 	bl	400f5c <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f000 fe42 	bl	400f5c <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000
  4002f4:	00000000 	.word	0x00000000

004002f8 <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002fa:	b085      	sub	sp, #20
    sysclk_init();
  4002fc:	f7ff ff14 	bl	400128 <sysclk_init>
    board_init();
  400300:	f000 f9f4 	bl	4006ec <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400304:	2013      	movs	r0, #19
  400306:	f000 fdcd 	bl	400ea4 <pmc_enable_periph_clk>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40030a:	2009      	movs	r0, #9
  40030c:	f000 fdca 	bl	400ea4 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400310:	4c45      	ldr	r4, [pc, #276]	; (400428 <main+0x130>)
  400312:	4b46      	ldr	r3, [pc, #280]	; (40042c <main+0x134>)
  400314:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400316:	4a46      	ldr	r2, [pc, #280]	; (400430 <main+0x138>)
  400318:	4b46      	ldr	r3, [pc, #280]	; (400434 <main+0x13c>)
  40031a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40031c:	4a46      	ldr	r2, [pc, #280]	; (400438 <main+0x140>)
  40031e:	4b47      	ldr	r3, [pc, #284]	; (40043c <main+0x144>)
  400320:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400322:	4b47      	ldr	r3, [pc, #284]	; (400440 <main+0x148>)
  400324:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400326:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40032a:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  40032c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400330:	9303      	str	r3, [sp, #12]
  400332:	2009      	movs	r0, #9
  400334:	f000 fdb6 	bl	400ea4 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400338:	a901      	add	r1, sp, #4
  40033a:	4620      	mov	r0, r4
  40033c:	f000 fde0 	bl	400f00 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400340:	4c40      	ldr	r4, [pc, #256]	; (400444 <main+0x14c>)
  400342:	6823      	ldr	r3, [r4, #0]
  400344:	2100      	movs	r1, #0
  400346:	6898      	ldr	r0, [r3, #8]
  400348:	f001 fc88 	bl	401c5c <setbuf>
	setbuf(stdin, NULL);
  40034c:	6823      	ldr	r3, [r4, #0]
  40034e:	2100      	movs	r1, #0
  400350:	6858      	ldr	r0, [r3, #4]
  400352:	f001 fc83 	bl	401c5c <setbuf>

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  400356:	483c      	ldr	r0, [pc, #240]	; (400448 <main+0x150>)
  400358:	f001 fc78 	bl	401c4c <puts>
  40035c:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        puts(".");
  40035e:	4e3b      	ldr	r6, [pc, #236]	; (40044c <main+0x154>)
        delay_ms(250);
  400360:	4d3b      	ldr	r5, [pc, #236]	; (400450 <main+0x158>)

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        puts(".");
  400362:	4630      	mov	r0, r6
  400364:	f001 fc72 	bl	401c4c <puts>
        delay_ms(250);
  400368:	4628      	mov	r0, r5
  40036a:	f004 fd71 	bl	404e50 <__portable_delay_cycles_veneer>
    pmc_enable_periph_clk(IMU_TWI_ID);

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  40036e:	3c01      	subs	r4, #1
  400370:	d1f7      	bne.n	400362 <main+0x6a>
        puts(".");
        delay_ms(250);
    }
    puts("\r\n");
  400372:	4838      	ldr	r0, [pc, #224]	; (400454 <main+0x15c>)
  400374:	f001 fc6a 	bl	401c4c <puts>

    imu_init();
  400378:	f000 f918 	bl	4005ac <imu_init>
    imu_probe();
  40037c:	f000 f93a 	bl	4005f4 <imu_probe>
    imu_who_am_i();
  400380:	f000 f94c 	bl	40061c <imu_who_am_i>

    float temperature = (float)imu_get_temperature()/340 + 36.53;
  400384:	f000 f95e 	bl	400644 <imu_get_temperature>
    printf("temperature: %f\r\n", temperature);
  400388:	f004 f9b2 	bl	4046f0 <__aeabi_i2f>
  40038c:	4932      	ldr	r1, [pc, #200]	; (400458 <main+0x160>)
  40038e:	f004 fab7 	bl	404900 <__aeabi_fdiv>
  400392:	f003 fd77 	bl	403e84 <__aeabi_f2d>
  400396:	a322      	add	r3, pc, #136	; (adr r3, 400420 <main+0x128>)
  400398:	e9d3 2300 	ldrd	r2, r3, [r3]
  40039c:	f003 fc14 	bl	403bc8 <__adddf3>
  4003a0:	f004 f89c 	bl	4044dc <__aeabi_d2f>
  4003a4:	f003 fd6e 	bl	403e84 <__aeabi_f2d>
  4003a8:	4602      	mov	r2, r0
  4003aa:	460b      	mov	r3, r1
  4003ac:	482b      	ldr	r0, [pc, #172]	; (40045c <main+0x164>)
  4003ae:	f001 fbdb 	bl	401b68 <iprintf>
    // printf("imu_temperature: %d\r\n", imu_get_temperature());

    imu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  4003b2:	2001      	movs	r0, #1
  4003b4:	f000 f94c 	bl	400650 <imu_set_clock_source>
    printf("clock_source: %d\r\n", imu_get_clock_source());
  4003b8:	f000 f956 	bl	400668 <imu_get_clock_source>
  4003bc:	4601      	mov	r1, r0
  4003be:	4828      	ldr	r0, [pc, #160]	; (400460 <main+0x168>)
  4003c0:	f001 fbd2 	bl	401b68 <iprintf>
    imu_set_gyro_scale(MPU6050_GYRO_FS_250);
  4003c4:	2000      	movs	r0, #0
  4003c6:	f000 f957 	bl	400678 <imu_set_gyro_scale>
    printf("imu_gyro_scale: %d\r\n", imu_get_gyro_scale());
  4003ca:	f000 f963 	bl	400694 <imu_get_gyro_scale>
  4003ce:	4601      	mov	r1, r0
  4003d0:	4824      	ldr	r0, [pc, #144]	; (400464 <main+0x16c>)
  4003d2:	f001 fbc9 	bl	401b68 <iprintf>

    imu_set_accel_range(MPU6050_ACCEL_FS_2);
  4003d6:	2000      	movs	r0, #0
  4003d8:	f000 f964 	bl	4006a4 <imu_set_accel_range>
    printf("imu_accel_range: %d\r\n", imu_get_accel_range());
  4003dc:	f000 f970 	bl	4006c0 <imu_get_accel_range>
  4003e0:	4601      	mov	r1, r0
  4003e2:	4821      	ldr	r0, [pc, #132]	; (400468 <main+0x170>)
  4003e4:	f001 fbc0 	bl	401b68 <iprintf>

    imu_set_sleep_enabled(false);
  4003e8:	2000      	movs	r0, #0
  4003ea:	f000 f971 	bl	4006d0 <imu_set_sleep_enabled>
    printf("imu_sleep_enabled: %d\r\n", imu_get_sleep_enabled());
  4003ee:	f000 f977 	bl	4006e0 <imu_get_sleep_enabled>
  4003f2:	4601      	mov	r1, r0
  4003f4:	481d      	ldr	r0, [pc, #116]	; (40046c <main+0x174>)
  4003f6:	f001 fbb7 	bl	401b68 <iprintf>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003fa:	4c1d      	ldr	r4, [pc, #116]	; (400470 <main+0x178>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4003fc:	4d1d      	ldr	r5, [pc, #116]	; (400474 <main+0x17c>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  4003fe:	f44f 0700 	mov.w	r7, #8388608	; 0x800000

    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  400402:	4e1d      	ldr	r6, [pc, #116]	; (400478 <main+0x180>)
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    
    // imu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);

    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  400406:	f013 0f04 	tst.w	r3, #4
  40040a:	d1fb      	bne.n	400404 <main+0x10c>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40040c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40040e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  400412:	bf14      	ite	ne
  400414:	636f      	strne	r7, [r5, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400416:	632f      	streq	r7, [r5, #48]	; 0x30
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  400418:	4630      	mov	r0, r6
  40041a:	f004 fd19 	bl	404e50 <__portable_delay_cycles_veneer>
  40041e:	e7f1      	b.n	400404 <main+0x10c>
  400420:	0a3d70a4 	.word	0x0a3d70a4
  400424:	404243d7 	.word	0x404243d7
  400428:	400e0800 	.word	0x400e0800
  40042c:	20000294 	.word	0x20000294
  400430:	0040027d 	.word	0x0040027d
  400434:	20000290 	.word	0x20000290
  400438:	004001fd 	.word	0x004001fd
  40043c:	2000028c 	.word	0x2000028c
  400440:	07270e00 	.word	0x07270e00
  400444:	20000070 	.word	0x20000070
  400448:	00404a38 	.word	0x00404a38
  40044c:	00404a54 	.word	0x00404a54
  400450:	0020b28a 	.word	0x0020b28a
  400454:	00404a50 	.word	0x00404a50
  400458:	43aa0000 	.word	0x43aa0000
  40045c:	00404a58 	.word	0x00404a58
  400460:	00404a6c 	.word	0x00404a6c
  400464:	00404a80 	.word	0x00404a80
  400468:	00404a98 	.word	0x00404a98
  40046c:	00404ab0 	.word	0x00404ab0
  400470:	400e0e00 	.word	0x400e0e00
  400474:	400e1200 	.word	0x400e1200
  400478:	00416513 	.word	0x00416513

0040047c <write_register8>:
bool read_register_bit(uint8_t reg, uint8_t pos);
int16_t read_register16(uint8_t reg);


void write_register8(uint8_t reg, uint8_t value)
{
  40047c:	b500      	push	{lr}
  40047e:	b089      	sub	sp, #36	; 0x24
  400480:	f88d 1007 	strb.w	r1, [sp, #7]

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
    opt.speed      = TWI_CLK;

    memset(imu_buffer, 0, sizeof(imu_buffer));
  400484:	4b0f      	ldr	r3, [pc, #60]	; (4004c4 <write_register8+0x48>)
  400486:	2200      	movs	r2, #0
  400488:	601a      	str	r2, [r3, #0]
  40048a:	605a      	str	r2, [r3, #4]
  40048c:	609a      	str	r2, [r3, #8]
  40048e:	60da      	str	r2, [r3, #12]

    packet_tx.chip = IMU_ADDRESS;
  400490:	2368      	movs	r3, #104	; 0x68
  400492:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  400496:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  40049a:	2301      	movs	r3, #1
  40049c:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  40049e:	f10d 0207 	add.w	r2, sp, #7
  4004a2:	9205      	str	r2, [sp, #20]
    // packet_tx.length = 1;
    packet_tx.length = sizeof(uint8_t);
  4004a4:	9306      	str	r3, [sp, #24]


    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4004a6:	a903      	add	r1, sp, #12
  4004a8:	4807      	ldr	r0, [pc, #28]	; (4004c8 <write_register8+0x4c>)
  4004aa:	f000 fa79 	bl	4009a0 <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4004ae:	b910      	cbnz	r0, 4004b6 <write_register8+0x3a>
        puts("write_register: success\r\n");
  4004b0:	4806      	ldr	r0, [pc, #24]	; (4004cc <write_register8+0x50>)
  4004b2:	f001 fbcb 	bl	401c4c <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  4004b6:	4806      	ldr	r0, [pc, #24]	; (4004d0 <write_register8+0x54>)
  4004b8:	f004 fcca 	bl	404e50 <__portable_delay_cycles_veneer>
}
  4004bc:	b009      	add	sp, #36	; 0x24
  4004be:	f85d fb04 	ldr.w	pc, [sp], #4
  4004c2:	bf00      	nop
  4004c4:	200001fc 	.word	0x200001fc
  4004c8:	40018000 	.word	0x40018000
  4004cc:	00404ac8 	.word	0x00404ac8
  4004d0:	00014ed3 	.word	0x00014ed3

004004d4 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  4004d4:	b510      	push	{r4, lr}
  4004d6:	b086      	sub	sp, #24
    uint8_t value;
    twi_packet_t packet_rx;

    memset(imu_buffer, 0, sizeof(imu_buffer));
  4004d8:	4b0d      	ldr	r3, [pc, #52]	; (400510 <read_register8+0x3c>)
  4004da:	2200      	movs	r2, #0
  4004dc:	601a      	str	r2, [r3, #0]
  4004de:	605a      	str	r2, [r3, #4]
  4004e0:	609a      	str	r2, [r3, #8]
  4004e2:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4004e4:	2268      	movs	r2, #104	; 0x68
  4004e6:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  4004ea:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4004ee:	2201      	movs	r2, #1
  4004f0:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &imu_buffer;
  4004f2:	9303      	str	r3, [sp, #12]

    // packet_rx.length = 1;
    packet_rx.length = sizeof(uint8_t);
  4004f4:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4004f6:	a901      	add	r1, sp, #4
  4004f8:	4806      	ldr	r0, [pc, #24]	; (400514 <read_register8+0x40>)
  4004fa:	f000 f9e9 	bl	4008d0 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4004fe:	b908      	cbnz	r0, 400504 <read_register8+0x30>
        // puts("read_register: success\r\n");
        value = imu_buffer[0];
  400500:	4b03      	ldr	r3, [pc, #12]	; (400510 <read_register8+0x3c>)
  400502:	781c      	ldrb	r4, [r3, #0]
    }

    delay_ms(TWI_WAIT_TIME);
  400504:	4804      	ldr	r0, [pc, #16]	; (400518 <read_register8+0x44>)
  400506:	f004 fca3 	bl	404e50 <__portable_delay_cycles_veneer>

    return value;
}
  40050a:	4620      	mov	r0, r4
  40050c:	b006      	add	sp, #24
  40050e:	bd10      	pop	{r4, pc}
  400510:	200001fc 	.word	0x200001fc
  400514:	40018000 	.word	0x40018000
  400518:	00014ed3 	.word	0x00014ed3

0040051c <read_register16>:

int16_t read_register16(uint8_t reg)
{
  40051c:	b510      	push	{r4, lr}
  40051e:	b086      	sub	sp, #24
    int16_t value;
    twi_packet_t packet_rx;

    memset(imu_buffer, 0, sizeof(imu_buffer));
  400520:	4b10      	ldr	r3, [pc, #64]	; (400564 <read_register16+0x48>)
  400522:	2200      	movs	r2, #0
  400524:	601a      	str	r2, [r3, #0]
  400526:	605a      	str	r2, [r3, #4]
  400528:	609a      	str	r2, [r3, #8]
  40052a:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  40052c:	2268      	movs	r2, #104	; 0x68
  40052e:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  400532:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400536:	2201      	movs	r2, #1
  400538:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &imu_buffer;
  40053a:	9303      	str	r3, [sp, #12]

    // packet_rx.length = 1;
    packet_rx.length = sizeof(uint16_t);
  40053c:	2302      	movs	r3, #2
  40053e:	9304      	str	r3, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400540:	a901      	add	r1, sp, #4
  400542:	4809      	ldr	r0, [pc, #36]	; (400568 <read_register16+0x4c>)
  400544:	f000 f9c4 	bl	4008d0 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  400548:	b928      	cbnz	r0, 400556 <read_register16+0x3a>
        // puts("read_register: success\r\n");
        uint8_t value_high = imu_buffer[0];
  40054a:	4b06      	ldr	r3, [pc, #24]	; (400564 <read_register16+0x48>)
        uint8_t value_low = imu_buffer[1];

        value = value_high << 8 | value_low;
  40054c:	781c      	ldrb	r4, [r3, #0]
  40054e:	785b      	ldrb	r3, [r3, #1]
  400550:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  400554:	b224      	sxth	r4, r4
    }

    delay_ms(TWI_WAIT_TIME);
  400556:	4805      	ldr	r0, [pc, #20]	; (40056c <read_register16+0x50>)
  400558:	f004 fc7a 	bl	404e50 <__portable_delay_cycles_veneer>

    return value;
}
  40055c:	4620      	mov	r0, r4
  40055e:	b006      	add	sp, #24
  400560:	bd10      	pop	{r4, pc}
  400562:	bf00      	nop
  400564:	200001fc 	.word	0x200001fc
  400568:	40018000 	.word	0x40018000
  40056c:	00014ed3 	.word	0x00014ed3

00400570 <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  400570:	b570      	push	{r4, r5, r6, lr}
  400572:	4604      	mov	r4, r0
  400574:	460d      	mov	r5, r1
  400576:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400578:	f7ff ffac 	bl	4004d4 <read_register8>

    if (state) {
  40057c:	b126      	cbz	r6, 400588 <write_register_bit+0x18>
        value |= (1 << pos);
  40057e:	2101      	movs	r1, #1
  400580:	40a9      	lsls	r1, r5
  400582:	4301      	orrs	r1, r0
  400584:	b2c9      	uxtb	r1, r1
  400586:	e004      	b.n	400592 <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400588:	2101      	movs	r1, #1
  40058a:	40a9      	lsls	r1, r5
  40058c:	ea20 0101 	bic.w	r1, r0, r1
  400590:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  400592:	4620      	mov	r0, r4
  400594:	f7ff ff72 	bl	40047c <write_register8>
  400598:	bd70      	pop	{r4, r5, r6, pc}
  40059a:	bf00      	nop

0040059c <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  40059c:	b510      	push	{r4, lr}
  40059e:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  4005a0:	f7ff ff98 	bl	4004d4 <read_register8>
    return ((value >> pos) & 1);
  4005a4:	4120      	asrs	r0, r4
}
  4005a6:	f000 0001 	and.w	r0, r0, #1
  4005aa:	bd10      	pop	{r4, pc}

004005ac <imu_init>:

void imu_init(void)
{
  4005ac:	b500      	push	{lr}
  4005ae:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  4005b0:	4b0a      	ldr	r3, [pc, #40]	; (4005dc <imu_init+0x30>)
  4005b2:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  4005b4:	4b0a      	ldr	r3, [pc, #40]	; (4005e0 <imu_init+0x34>)
  4005b6:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  4005b8:	a901      	add	r1, sp, #4
  4005ba:	480a      	ldr	r0, [pc, #40]	; (4005e4 <imu_init+0x38>)
  4005bc:	f000 f958 	bl	400870 <twi_master_init>
  4005c0:	b118      	cbz	r0, 4005ca <imu_init+0x1e>
        puts("twi_master_init: failed\r\n");
  4005c2:	4809      	ldr	r0, [pc, #36]	; (4005e8 <imu_init+0x3c>)
  4005c4:	f001 fb42 	bl	401c4c <puts>
  4005c8:	e002      	b.n	4005d0 <imu_init+0x24>
        
    } else {
        puts("twi_master_init: success\r\n");
  4005ca:	4808      	ldr	r0, [pc, #32]	; (4005ec <imu_init+0x40>)
  4005cc:	f001 fb3e 	bl	401c4c <puts>
    }
    // Give I2C time to settle
    delay_ms(TWI_WAIT_TIME);
  4005d0:	4807      	ldr	r0, [pc, #28]	; (4005f0 <imu_init+0x44>)
  4005d2:	f004 fc3d 	bl	404e50 <__portable_delay_cycles_veneer>
}
  4005d6:	b005      	add	sp, #20
  4005d8:	f85d fb04 	ldr.w	pc, [sp], #4
  4005dc:	07270e00 	.word	0x07270e00
  4005e0:	00061a80 	.word	0x00061a80
  4005e4:	40018000 	.word	0x40018000
  4005e8:	00404ae4 	.word	0x00404ae4
  4005ec:	00404b00 	.word	0x00404b00
  4005f0:	00014ed3 	.word	0x00014ed3

004005f4 <imu_probe>:

void imu_probe(void)
{
  4005f4:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  4005f6:	2168      	movs	r1, #104	; 0x68
  4005f8:	4805      	ldr	r0, [pc, #20]	; (400610 <imu_probe+0x1c>)
  4005fa:	f000 fa13 	bl	400a24 <twi_probe>
  4005fe:	b118      	cbz	r0, 400608 <imu_probe+0x14>
        puts("twi_probe: failed\r\n");
  400600:	4804      	ldr	r0, [pc, #16]	; (400614 <imu_probe+0x20>)
  400602:	f001 fb23 	bl	401c4c <puts>
  400606:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400608:	4803      	ldr	r0, [pc, #12]	; (400618 <imu_probe+0x24>)
  40060a:	f001 fb1f 	bl	401c4c <puts>
  40060e:	bd08      	pop	{r3, pc}
  400610:	40018000 	.word	0x40018000
  400614:	00404b1c 	.word	0x00404b1c
  400618:	00404b30 	.word	0x00404b30

0040061c <imu_who_am_i>:
    }
}

void imu_who_am_i(void)
{
  40061c:	b510      	push	{r4, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  40061e:	2075      	movs	r0, #117	; 0x75
  400620:	f7ff ff58 	bl	4004d4 <read_register8>
  400624:	4604      	mov	r4, r0

    printf("who_am_i: 0x%1x\r\n", value);
  400626:	4601      	mov	r1, r0
  400628:	4804      	ldr	r0, [pc, #16]	; (40063c <imu_who_am_i+0x20>)
  40062a:	f001 fa9d 	bl	401b68 <iprintf>

    if (value == 0x68) {
  40062e:	2c68      	cmp	r4, #104	; 0x68
  400630:	d102      	bne.n	400638 <imu_who_am_i+0x1c>
        puts("who_am_i: success\r\n");
  400632:	4803      	ldr	r0, [pc, #12]	; (400640 <imu_who_am_i+0x24>)
  400634:	f001 fb0a 	bl	401c4c <puts>
  400638:	bd10      	pop	{r4, pc}
  40063a:	bf00      	nop
  40063c:	00404b48 	.word	0x00404b48
  400640:	00404b5c 	.word	0x00404b5c

00400644 <imu_get_temperature>:
    }
}

int16_t imu_get_temperature(void)
{
  400644:	b508      	push	{r3, lr}
    int16_t T;
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
  400646:	2041      	movs	r0, #65	; 0x41
  400648:	f7ff ff68 	bl	40051c <read_register16>
    return T;
}
  40064c:	bd08      	pop	{r3, pc}
  40064e:	bf00      	nop

00400650 <imu_set_clock_source>:



void imu_set_clock_source(uint8_t source)
{
  400650:	b510      	push	{r4, lr}
  400652:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400654:	206b      	movs	r0, #107	; 0x6b
  400656:	f7ff ff3d 	bl	4004d4 <read_register8>
    value &= 0b11111000; // mask
  40065a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  40065e:	4321      	orrs	r1, r4
  400660:	206b      	movs	r0, #107	; 0x6b
  400662:	f7ff ff0b 	bl	40047c <write_register8>
  400666:	bd10      	pop	{r4, pc}

00400668 <imu_get_clock_source>:
}

uint8_t imu_get_clock_source(void)
{
  400668:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  40066a:	206b      	movs	r0, #107	; 0x6b
  40066c:	f7ff ff32 	bl	4004d4 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400670:	f000 0007 	and.w	r0, r0, #7
  400674:	bd08      	pop	{r3, pc}
  400676:	bf00      	nop

00400678 <imu_set_gyro_scale>:

void imu_set_gyro_scale(uint8_t scale)
{
  400678:	b510      	push	{r4, lr}
  40067a:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  40067c:	201b      	movs	r0, #27
  40067e:	f7ff ff29 	bl	4004d4 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400682:	f020 0018 	bic.w	r0, r0, #24
  400686:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  40068a:	b2c9      	uxtb	r1, r1
  40068c:	201b      	movs	r0, #27
  40068e:	f7ff fef5 	bl	40047c <write_register8>
  400692:	bd10      	pop	{r4, pc}

00400694 <imu_get_gyro_scale>:
}

uint8_t imu_get_gyro_scale(void)
{
  400694:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  400696:	201b      	movs	r0, #27
  400698:	f7ff ff1c 	bl	4004d4 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  40069c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  4006a0:	bd08      	pop	{r3, pc}
  4006a2:	bf00      	nop

004006a4 <imu_set_accel_range>:

void imu_set_accel_range(uint8_t range)
{
  4006a4:	b510      	push	{r4, lr}
  4006a6:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  4006a8:	201c      	movs	r0, #28
  4006aa:	f7ff ff13 	bl	4004d4 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  4006ae:	f020 0018 	bic.w	r0, r0, #24
  4006b2:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  4006b6:	b2c9      	uxtb	r1, r1
  4006b8:	201c      	movs	r0, #28
  4006ba:	f7ff fedf 	bl	40047c <write_register8>
  4006be:	bd10      	pop	{r4, pc}

004006c0 <imu_get_accel_range>:
}

uint8_t imu_get_accel_range(void)
{
  4006c0:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  4006c2:	201c      	movs	r0, #28
  4006c4:	f7ff ff06 	bl	4004d4 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  4006c8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  4006cc:	bd08      	pop	{r3, pc}
  4006ce:	bf00      	nop

004006d0 <imu_set_sleep_enabled>:

    return (uint8_t)value;
}

void imu_set_sleep_enabled(bool state)
{
  4006d0:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  4006d2:	4602      	mov	r2, r0
  4006d4:	2106      	movs	r1, #6
  4006d6:	206b      	movs	r0, #107	; 0x6b
  4006d8:	f7ff ff4a 	bl	400570 <write_register_bit>
  4006dc:	bd08      	pop	{r3, pc}
  4006de:	bf00      	nop

004006e0 <imu_get_sleep_enabled>:
}

bool imu_get_sleep_enabled(void)
{
  4006e0:	b508      	push	{r3, lr}
    read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  4006e2:	2106      	movs	r1, #6
  4006e4:	206b      	movs	r0, #107	; 0x6b
  4006e6:	f7ff ff59 	bl	40059c <read_register_bit>
}
  4006ea:	bd08      	pop	{r3, pc}

004006ec <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4006ec:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4006ee:	482c      	ldr	r0, [pc, #176]	; (4007a0 <board_init+0xb4>)
  4006f0:	f000 fc02 	bl	400ef8 <wdt_disable>
  4006f4:	200b      	movs	r0, #11
  4006f6:	f000 fbd5 	bl	400ea4 <pmc_enable_periph_clk>
  4006fa:	200c      	movs	r0, #12
  4006fc:	f000 fbd2 	bl	400ea4 <pmc_enable_periph_clk>
  400700:	200d      	movs	r0, #13
  400702:	f000 fbcf 	bl	400ea4 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400706:	4b27      	ldr	r3, [pc, #156]	; (4007a4 <board_init+0xb8>)
  400708:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40070c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40070e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400710:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400714:	4c24      	ldr	r4, [pc, #144]	; (4007a8 <board_init+0xbc>)
  400716:	2504      	movs	r5, #4
  400718:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40071a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40071e:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400720:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400724:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400726:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400728:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40072c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40072e:	f022 0204 	bic.w	r2, r2, #4
  400732:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400734:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400736:	f022 0204 	bic.w	r2, r2, #4
  40073a:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40073c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400740:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400742:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400744:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40074c:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40074e:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400750:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400754:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400758:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40075a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40075c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400760:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400764:	210c      	movs	r1, #12
  400766:	4811      	ldr	r0, [pc, #68]	; (4007ac <board_init+0xc0>)
  400768:	f000 fa76 	bl	400c58 <pio_configure_pin_group>
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  40076c:	4e10      	ldr	r6, [pc, #64]	; (4007b0 <board_init+0xc4>)
  40076e:	4631      	mov	r1, r6
  400770:	2003      	movs	r0, #3
  400772:	f000 f9e5 	bl	400b40 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  400776:	4631      	mov	r1, r6
  400778:	4628      	mov	r0, r5
  40077a:	f000 f9e1 	bl	400b40 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40077e:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400780:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400784:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400786:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400788:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40078c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40078e:	f023 0304 	bic.w	r3, r3, #4
  400792:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400794:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400796:	f023 0304 	bic.w	r3, r3, #4
  40079a:	6763      	str	r3, [r4, #116]	; 0x74
  40079c:	bd70      	pop	{r4, r5, r6, pc}
  40079e:	bf00      	nop
  4007a0:	400e1450 	.word	0x400e1450
  4007a4:	400e1200 	.word	0x400e1200
  4007a8:	400e0e00 	.word	0x400e0e00
  4007ac:	400e1000 	.word	0x400e1000
  4007b0:	08000001 	.word	0x08000001

004007b4 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4007b4:	4b2b      	ldr	r3, [pc, #172]	; (400864 <twi_set_speed+0xb0>)
  4007b6:	4299      	cmp	r1, r3
  4007b8:	d849      	bhi.n	40084e <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4007ba:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4007be:	4299      	cmp	r1, r3
  4007c0:	d92b      	bls.n	40081a <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4007c2:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4007c4:	4c28      	ldr	r4, [pc, #160]	; (400868 <twi_set_speed+0xb4>)
  4007c6:	fba4 3402 	umull	r3, r4, r4, r2
  4007ca:	0ba4      	lsrs	r4, r4, #14
  4007cc:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4007ce:	4b27      	ldr	r3, [pc, #156]	; (40086c <twi_set_speed+0xb8>)
  4007d0:	440b      	add	r3, r1
  4007d2:	009b      	lsls	r3, r3, #2
  4007d4:	fbb2 f2f3 	udiv	r2, r2, r3
  4007d8:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4007da:	2cff      	cmp	r4, #255	; 0xff
  4007dc:	d939      	bls.n	400852 <twi_set_speed+0x9e>
  4007de:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4007e0:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4007e2:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4007e4:	2cff      	cmp	r4, #255	; 0xff
  4007e6:	d902      	bls.n	4007ee <twi_set_speed+0x3a>
  4007e8:	2b07      	cmp	r3, #7
  4007ea:	d1f9      	bne.n	4007e0 <twi_set_speed+0x2c>
  4007ec:	e00a      	b.n	400804 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4007ee:	2aff      	cmp	r2, #255	; 0xff
  4007f0:	d908      	bls.n	400804 <twi_set_speed+0x50>
  4007f2:	2b06      	cmp	r3, #6
  4007f4:	d900      	bls.n	4007f8 <twi_set_speed+0x44>
  4007f6:	e005      	b.n	400804 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  4007f8:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4007fa:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4007fc:	2aff      	cmp	r2, #255	; 0xff
  4007fe:	d901      	bls.n	400804 <twi_set_speed+0x50>
  400800:	2b06      	cmp	r3, #6
  400802:	d9f9      	bls.n	4007f8 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400804:	0212      	lsls	r2, r2, #8
  400806:	b292      	uxth	r2, r2
  400808:	041b      	lsls	r3, r3, #16
  40080a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40080e:	431a      	orrs	r2, r3
  400810:	b2e4      	uxtb	r4, r4
  400812:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400814:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400816:	2000      	movs	r0, #0
  400818:	e021      	b.n	40085e <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40081a:	0049      	lsls	r1, r1, #1
  40081c:	fbb2 f2f1 	udiv	r2, r2, r1
  400820:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400822:	2aff      	cmp	r2, #255	; 0xff
  400824:	d907      	bls.n	400836 <twi_set_speed+0x82>
  400826:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  400828:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40082a:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40082c:	2aff      	cmp	r2, #255	; 0xff
  40082e:	d903      	bls.n	400838 <twi_set_speed+0x84>
  400830:	2b07      	cmp	r3, #7
  400832:	d1f9      	bne.n	400828 <twi_set_speed+0x74>
  400834:	e000      	b.n	400838 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400836:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400838:	0211      	lsls	r1, r2, #8
  40083a:	b289      	uxth	r1, r1
  40083c:	041b      	lsls	r3, r3, #16
  40083e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400842:	430b      	orrs	r3, r1
  400844:	b2d2      	uxtb	r2, r2
  400846:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400848:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40084a:	2000      	movs	r0, #0
}
  40084c:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  40084e:	2001      	movs	r0, #1
  400850:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400852:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400854:	bf88      	it	hi
  400856:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400858:	d8ce      	bhi.n	4007f8 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40085a:	2300      	movs	r3, #0
  40085c:	e7d2      	b.n	400804 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  40085e:	bc10      	pop	{r4}
  400860:	4770      	bx	lr
  400862:	bf00      	nop
  400864:	00061a80 	.word	0x00061a80
  400868:	057619f1 	.word	0x057619f1
  40086c:	3ffd1200 	.word	0x3ffd1200

00400870 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400870:	b538      	push	{r3, r4, r5, lr}
  400872:	4604      	mov	r4, r0
  400874:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  40087a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40087c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40087e:	2380      	movs	r3, #128	; 0x80
  400880:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400882:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400884:	2308      	movs	r3, #8
  400886:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400888:	2320      	movs	r3, #32
  40088a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  40088c:	2304      	movs	r3, #4
  40088e:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400890:	680a      	ldr	r2, [r1, #0]
  400892:	6849      	ldr	r1, [r1, #4]
  400894:	f7ff ff8e 	bl	4007b4 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  400898:	2801      	cmp	r0, #1
  40089a:	bf14      	ite	ne
  40089c:	2000      	movne	r0, #0
  40089e:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  4008a0:	7a6b      	ldrb	r3, [r5, #9]
  4008a2:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4008a4:	bf04      	itt	eq
  4008a6:	2340      	moveq	r3, #64	; 0x40
  4008a8:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  4008aa:	bd38      	pop	{r3, r4, r5, pc}

004008ac <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4008ac:	460a      	mov	r2, r1
  4008ae:	b159      	cbz	r1, 4008c8 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  4008b0:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  4008b2:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  4008b4:	bfc4      	itt	gt
  4008b6:	7841      	ldrbgt	r1, [r0, #1]
  4008b8:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  4008bc:	2a02      	cmp	r2, #2
  4008be:	dd05      	ble.n	4008cc <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  4008c0:	7880      	ldrb	r0, [r0, #2]
  4008c2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4008c6:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  4008c8:	2000      	movs	r0, #0
  4008ca:	4770      	bx	lr
  4008cc:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  4008ce:	4770      	bx	lr

004008d0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4008d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4008d4:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4008d6:	2c00      	cmp	r4, #0
  4008d8:	d045      	beq.n	400966 <twi_master_read+0x96>
  4008da:	460b      	mov	r3, r1
  4008dc:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4008de:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4008e0:	2000      	movs	r0, #0
  4008e2:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4008e4:	684a      	ldr	r2, [r1, #4]
  4008e6:	0212      	lsls	r2, r2, #8
  4008e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4008ec:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  4008f0:	7c1a      	ldrb	r2, [r3, #16]
  4008f2:	0412      	lsls	r2, r2, #16
  4008f4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  4008f8:	430a      	orrs	r2, r1
  4008fa:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4008fc:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4008fe:	6859      	ldr	r1, [r3, #4]
  400900:	4618      	mov	r0, r3
  400902:	f7ff ffd3 	bl	4008ac <twi_mk_addr>
  400906:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400908:	2c01      	cmp	r4, #1
  40090a:	d104      	bne.n	400916 <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40090c:	2303      	movs	r3, #3
  40090e:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  400910:	f04f 0e01 	mov.w	lr, #1
  400914:	e033      	b.n	40097e <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400916:	2301      	movs	r3, #1
  400918:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  40091a:	f04f 0e00 	mov.w	lr, #0
  40091e:	e02e      	b.n	40097e <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  400920:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400922:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400924:	f413 7f80 	tst.w	r3, #256	; 0x100
  400928:	d120      	bne.n	40096c <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  40092a:	1e51      	subs	r1, r2, #1
  40092c:	b30a      	cbz	r2, 400972 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  40092e:	2c01      	cmp	r4, #1
  400930:	d106      	bne.n	400940 <twi_master_read+0x70>
  400932:	f1be 0f00 	cmp.w	lr, #0
  400936:	d12f      	bne.n	400998 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  400938:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  40093c:	46e6      	mov	lr, ip
  40093e:	e02b      	b.n	400998 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400940:	f013 0f02 	tst.w	r3, #2
  400944:	d005      	beq.n	400952 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400946:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400948:	7033      	strb	r3, [r6, #0]

		cnt--;
  40094a:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  40094c:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  40094e:	463a      	mov	r2, r7
  400950:	e000      	b.n	400954 <twi_master_read+0x84>
  400952:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400954:	2c00      	cmp	r4, #0
  400956:	d1e4      	bne.n	400922 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400958:	6a2b      	ldr	r3, [r5, #32]
  40095a:	f013 0f01 	tst.w	r3, #1
  40095e:	d0fb      	beq.n	400958 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  400960:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  400962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400966:	2001      	movs	r0, #1
  400968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40096c:	2005      	movs	r0, #5
  40096e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400972:	2009      	movs	r0, #9
  400974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400978:	2005      	movs	r0, #5
  40097a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40097e:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400980:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400984:	d1f8      	bne.n	400978 <twi_master_read+0xa8>
  400986:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  40098a:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  40098e:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  400992:	f04f 0c01 	mov.w	ip, #1
  400996:	e7ca      	b.n	40092e <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400998:	f013 0f02 	tst.w	r3, #2
  40099c:	d0c0      	beq.n	400920 <twi_master_read+0x50>
  40099e:	e7d2      	b.n	400946 <twi_master_read+0x76>

004009a0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4009a0:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4009a2:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4009a4:	2d00      	cmp	r5, #0
  4009a6:	d034      	beq.n	400a12 <twi_master_write+0x72>
  4009a8:	460b      	mov	r3, r1
  4009aa:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4009ac:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4009ae:	2000      	movs	r0, #0
  4009b0:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4009b2:	7c0a      	ldrb	r2, [r1, #16]
  4009b4:	0412      	lsls	r2, r2, #16
  4009b6:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  4009ba:	685a      	ldr	r2, [r3, #4]
  4009bc:	0212      	lsls	r2, r2, #8
  4009be:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4009c2:	430a      	orrs	r2, r1
  4009c4:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4009c6:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4009c8:	6859      	ldr	r1, [r3, #4]
  4009ca:	4618      	mov	r0, r3
  4009cc:	f7ff ff6e 	bl	4008ac <twi_mk_addr>
  4009d0:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4009d2:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4009d4:	f413 7f80 	tst.w	r3, #256	; 0x100
  4009d8:	d004      	beq.n	4009e4 <twi_master_write+0x44>
  4009da:	e01c      	b.n	400a16 <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4009dc:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4009de:	f413 7f80 	tst.w	r3, #256	; 0x100
  4009e2:	d11a      	bne.n	400a1a <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  4009e4:	f013 0f04 	tst.w	r3, #4
  4009e8:	d003      	beq.n	4009f2 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4009ea:	7833      	ldrb	r3, [r6, #0]
  4009ec:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  4009ee:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4009f0:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  4009f2:	2d00      	cmp	r5, #0
  4009f4:	d1f2      	bne.n	4009dc <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  4009f6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4009f8:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4009fc:	d10f      	bne.n	400a1e <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  4009fe:	f013 0f04 	tst.w	r3, #4
  400a02:	d0f8      	beq.n	4009f6 <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400a04:	2302      	movs	r3, #2
  400a06:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400a08:	6a23      	ldr	r3, [r4, #32]
  400a0a:	f013 0f01 	tst.w	r3, #1
  400a0e:	d0fb      	beq.n	400a08 <twi_master_write+0x68>
  400a10:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400a12:	2001      	movs	r0, #1
  400a14:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400a16:	2005      	movs	r0, #5
  400a18:	bd70      	pop	{r4, r5, r6, pc}
  400a1a:	2005      	movs	r0, #5
  400a1c:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400a1e:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  400a20:	bd70      	pop	{r4, r5, r6, pc}
  400a22:	bf00      	nop

00400a24 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  400a24:	b500      	push	{lr}
  400a26:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  400a28:	2300      	movs	r3, #0
  400a2a:	aa06      	add	r2, sp, #24
  400a2c:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  400a30:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  400a32:	2201      	movs	r2, #1
  400a34:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  400a36:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  400a3a:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  400a3e:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  400a40:	a901      	add	r1, sp, #4
  400a42:	f7ff ffad 	bl	4009a0 <twi_master_write>
}
  400a46:	b007      	add	sp, #28
  400a48:	f85d fb04 	ldr.w	pc, [sp], #4

00400a4c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400a4c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400a4e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400a52:	d02f      	beq.n	400ab4 <pio_set_peripheral+0x68>
  400a54:	d807      	bhi.n	400a66 <pio_set_peripheral+0x1a>
  400a56:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400a5a:	d014      	beq.n	400a86 <pio_set_peripheral+0x3a>
  400a5c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400a60:	d01e      	beq.n	400aa0 <pio_set_peripheral+0x54>
  400a62:	b939      	cbnz	r1, 400a74 <pio_set_peripheral+0x28>
  400a64:	4770      	bx	lr
  400a66:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400a6a:	d036      	beq.n	400ada <pio_set_peripheral+0x8e>
  400a6c:	d804      	bhi.n	400a78 <pio_set_peripheral+0x2c>
  400a6e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400a72:	d029      	beq.n	400ac8 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a74:	6042      	str	r2, [r0, #4]
  400a76:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400a78:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400a7c:	d02d      	beq.n	400ada <pio_set_peripheral+0x8e>
  400a7e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400a82:	d02a      	beq.n	400ada <pio_set_peripheral+0x8e>
  400a84:	e7f6      	b.n	400a74 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400a86:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a88:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a8a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400a8c:	43d3      	mvns	r3, r2
  400a8e:	4021      	ands	r1, r4
  400a90:	4019      	ands	r1, r3
  400a92:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a94:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a96:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a98:	4021      	ands	r1, r4
  400a9a:	400b      	ands	r3, r1
  400a9c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a9e:	e01a      	b.n	400ad6 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400aa0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400aa2:	4313      	orrs	r3, r2
  400aa4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400aa6:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400aa8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400aaa:	400b      	ands	r3, r1
  400aac:	ea23 0302 	bic.w	r3, r3, r2
  400ab0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ab2:	e7df      	b.n	400a74 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ab4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ab6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400ab8:	400b      	ands	r3, r1
  400aba:	ea23 0302 	bic.w	r3, r3, r2
  400abe:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ac0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ac2:	4313      	orrs	r3, r2
  400ac4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ac6:	e7d5      	b.n	400a74 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ac8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400aca:	4313      	orrs	r3, r2
  400acc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ace:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ad0:	4313      	orrs	r3, r2
  400ad2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ad4:	e7ce      	b.n	400a74 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400ad6:	6042      	str	r2, [r0, #4]
}
  400ad8:	bc10      	pop	{r4}
  400ada:	4770      	bx	lr

00400adc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400adc:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ade:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400ae2:	bf14      	ite	ne
  400ae4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ae6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400ae8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400aec:	bf14      	ite	ne
  400aee:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400af0:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400af2:	f012 0f02 	tst.w	r2, #2
  400af6:	d002      	beq.n	400afe <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400af8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400afc:	e004      	b.n	400b08 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400afe:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400b02:	bf18      	it	ne
  400b04:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400b08:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400b0a:	6001      	str	r1, [r0, #0]
  400b0c:	4770      	bx	lr
  400b0e:	bf00      	nop

00400b10 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400b10:	b410      	push	{r4}
  400b12:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400b14:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b16:	b10c      	cbz	r4, 400b1c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400b18:	6641      	str	r1, [r0, #100]	; 0x64
  400b1a:	e000      	b.n	400b1e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b1c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400b1e:	b10b      	cbz	r3, 400b24 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400b20:	6501      	str	r1, [r0, #80]	; 0x50
  400b22:	e000      	b.n	400b26 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400b24:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400b26:	b10a      	cbz	r2, 400b2c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400b28:	6301      	str	r1, [r0, #48]	; 0x30
  400b2a:	e000      	b.n	400b2e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400b2c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400b2e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400b30:	6001      	str	r1, [r0, #0]
}
  400b32:	bc10      	pop	{r4}
  400b34:	4770      	bx	lr
  400b36:	bf00      	nop

00400b38 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400b38:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400b3a:	4770      	bx	lr

00400b3c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400b3c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400b3e:	4770      	bx	lr

00400b40 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400b40:	b570      	push	{r4, r5, r6, lr}
  400b42:	b082      	sub	sp, #8
  400b44:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400b46:	0943      	lsrs	r3, r0, #5
  400b48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400b4c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400b50:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400b52:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400b5a:	d047      	beq.n	400bec <pio_configure_pin+0xac>
  400b5c:	d809      	bhi.n	400b72 <pio_configure_pin+0x32>
  400b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400b62:	d021      	beq.n	400ba8 <pio_configure_pin+0x68>
  400b64:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400b68:	d02f      	beq.n	400bca <pio_configure_pin+0x8a>
  400b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400b6e:	d16f      	bne.n	400c50 <pio_configure_pin+0x110>
  400b70:	e009      	b.n	400b86 <pio_configure_pin+0x46>
  400b72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400b76:	d055      	beq.n	400c24 <pio_configure_pin+0xe4>
  400b78:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400b7c:	d052      	beq.n	400c24 <pio_configure_pin+0xe4>
  400b7e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400b82:	d044      	beq.n	400c0e <pio_configure_pin+0xce>
  400b84:	e064      	b.n	400c50 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400b86:	f000 001f 	and.w	r0, r0, #31
  400b8a:	2601      	movs	r6, #1
  400b8c:	4086      	lsls	r6, r0
  400b8e:	4632      	mov	r2, r6
  400b90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b94:	4620      	mov	r0, r4
  400b96:	f7ff ff59 	bl	400a4c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b9a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400b9e:	bf14      	ite	ne
  400ba0:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ba2:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ba4:	2001      	movs	r0, #1
  400ba6:	e054      	b.n	400c52 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400ba8:	f000 001f 	and.w	r0, r0, #31
  400bac:	2601      	movs	r6, #1
  400bae:	4086      	lsls	r6, r0
  400bb0:	4632      	mov	r2, r6
  400bb2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bb6:	4620      	mov	r0, r4
  400bb8:	f7ff ff48 	bl	400a4c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bbc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400bc0:	bf14      	ite	ne
  400bc2:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400bc4:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400bc6:	2001      	movs	r0, #1
  400bc8:	e043      	b.n	400c52 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400bca:	f000 001f 	and.w	r0, r0, #31
  400bce:	2601      	movs	r6, #1
  400bd0:	4086      	lsls	r6, r0
  400bd2:	4632      	mov	r2, r6
  400bd4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400bd8:	4620      	mov	r0, r4
  400bda:	f7ff ff37 	bl	400a4c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400bde:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400be2:	bf14      	ite	ne
  400be4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400be6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400be8:	2001      	movs	r0, #1
  400bea:	e032      	b.n	400c52 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400bec:	f000 001f 	and.w	r0, r0, #31
  400bf0:	2601      	movs	r6, #1
  400bf2:	4086      	lsls	r6, r0
  400bf4:	4632      	mov	r2, r6
  400bf6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400bfa:	4620      	mov	r0, r4
  400bfc:	f7ff ff26 	bl	400a4c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c00:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c04:	bf14      	ite	ne
  400c06:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c08:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c0a:	2001      	movs	r0, #1
  400c0c:	e021      	b.n	400c52 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400c0e:	f000 011f 	and.w	r1, r0, #31
  400c12:	2601      	movs	r6, #1
  400c14:	462a      	mov	r2, r5
  400c16:	fa06 f101 	lsl.w	r1, r6, r1
  400c1a:	4620      	mov	r0, r4
  400c1c:	f7ff ff5e 	bl	400adc <pio_set_input>

	default:
		return 0;
	}

	return 1;
  400c20:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400c22:	e016      	b.n	400c52 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400c24:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  400c28:	f000 011f 	and.w	r1, r0, #31
  400c2c:	2601      	movs	r6, #1
  400c2e:	ea05 0306 	and.w	r3, r5, r6
  400c32:	9300      	str	r3, [sp, #0]
  400c34:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400c38:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400c3c:	bf14      	ite	ne
  400c3e:	2200      	movne	r2, #0
  400c40:	2201      	moveq	r2, #1
  400c42:	fa06 f101 	lsl.w	r1, r6, r1
  400c46:	4620      	mov	r0, r4
  400c48:	f7ff ff62 	bl	400b10 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  400c4c:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400c4e:	e000      	b.n	400c52 <pio_configure_pin+0x112>

	default:
		return 0;
  400c50:	2000      	movs	r0, #0
	}

	return 1;
}
  400c52:	b002      	add	sp, #8
  400c54:	bd70      	pop	{r4, r5, r6, pc}
  400c56:	bf00      	nop

00400c58 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400c58:	b570      	push	{r4, r5, r6, lr}
  400c5a:	b082      	sub	sp, #8
  400c5c:	4605      	mov	r5, r0
  400c5e:	460e      	mov	r6, r1
  400c60:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400c62:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c6a:	d038      	beq.n	400cde <pio_configure_pin_group+0x86>
  400c6c:	d809      	bhi.n	400c82 <pio_configure_pin_group+0x2a>
  400c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400c72:	d01c      	beq.n	400cae <pio_configure_pin_group+0x56>
  400c74:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400c78:	d025      	beq.n	400cc6 <pio_configure_pin_group+0x6e>
  400c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400c7e:	d150      	bne.n	400d22 <pio_configure_pin_group+0xca>
  400c80:	e009      	b.n	400c96 <pio_configure_pin_group+0x3e>
  400c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400c86:	d03a      	beq.n	400cfe <pio_configure_pin_group+0xa6>
  400c88:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400c8c:	d037      	beq.n	400cfe <pio_configure_pin_group+0xa6>
  400c8e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400c92:	d030      	beq.n	400cf6 <pio_configure_pin_group+0x9e>
  400c94:	e045      	b.n	400d22 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400c96:	460a      	mov	r2, r1
  400c98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c9c:	f7ff fed6 	bl	400a4c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ca0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400ca4:	bf14      	ite	ne
  400ca6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ca8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400caa:	2001      	movs	r0, #1
  400cac:	e03a      	b.n	400d24 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400cae:	460a      	mov	r2, r1
  400cb0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cb4:	f7ff feca 	bl	400a4c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cb8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400cbc:	bf14      	ite	ne
  400cbe:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cc0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400cc2:	2001      	movs	r0, #1
  400cc4:	e02e      	b.n	400d24 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400cc6:	460a      	mov	r2, r1
  400cc8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ccc:	f7ff febe 	bl	400a4c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cd0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400cd4:	bf14      	ite	ne
  400cd6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cd8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400cda:	2001      	movs	r0, #1
  400cdc:	e022      	b.n	400d24 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400cde:	460a      	mov	r2, r1
  400ce0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400ce4:	f7ff feb2 	bl	400a4c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ce8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400cec:	bf14      	ite	ne
  400cee:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cf0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400cf2:	2001      	movs	r0, #1
  400cf4:	e016      	b.n	400d24 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400cf6:	f7ff fef1 	bl	400adc <pio_set_input>

	default:
		return 0;
	}

	return 1;
  400cfa:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400cfc:	e012      	b.n	400d24 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400cfe:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  400d02:	f004 0301 	and.w	r3, r4, #1
  400d06:	9300      	str	r3, [sp, #0]
  400d08:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400d0c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400d10:	bf14      	ite	ne
  400d12:	2200      	movne	r2, #0
  400d14:	2201      	moveq	r2, #1
  400d16:	4631      	mov	r1, r6
  400d18:	4628      	mov	r0, r5
  400d1a:	f7ff fef9 	bl	400b10 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  400d1e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400d20:	e000      	b.n	400d24 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400d22:	2000      	movs	r0, #0
	}

	return 1;
}
  400d24:	b002      	add	sp, #8
  400d26:	bd70      	pop	{r4, r5, r6, pc}

00400d28 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d2c:	4681      	mov	r9, r0
  400d2e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d30:	f7ff ff02 	bl	400b38 <pio_get_interrupt_status>
  400d34:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400d36:	4648      	mov	r0, r9
  400d38:	f7ff ff00 	bl	400b3c <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  400d3c:	4005      	ands	r5, r0
  400d3e:	d013      	beq.n	400d68 <pio_handler_process+0x40>
  400d40:	4c0e      	ldr	r4, [pc, #56]	; (400d7c <pio_handler_process+0x54>)
  400d42:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400d46:	6823      	ldr	r3, [r4, #0]
  400d48:	4543      	cmp	r3, r8
  400d4a:	d108      	bne.n	400d5e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d4c:	6861      	ldr	r1, [r4, #4]
  400d4e:	4229      	tst	r1, r5
  400d50:	d005      	beq.n	400d5e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d52:	68e3      	ldr	r3, [r4, #12]
  400d54:	4640      	mov	r0, r8
  400d56:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d58:	6863      	ldr	r3, [r4, #4]
  400d5a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d5e:	42b4      	cmp	r4, r6
  400d60:	d002      	beq.n	400d68 <pio_handler_process+0x40>
  400d62:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400d64:	2d00      	cmp	r5, #0
  400d66:	d1ee      	bne.n	400d46 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400d68:	4b05      	ldr	r3, [pc, #20]	; (400d80 <pio_handler_process+0x58>)
  400d6a:	681b      	ldr	r3, [r3, #0]
  400d6c:	b123      	cbz	r3, 400d78 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400d6e:	4b05      	ldr	r3, [pc, #20]	; (400d84 <pio_handler_process+0x5c>)
  400d70:	681b      	ldr	r3, [r3, #0]
  400d72:	b10b      	cbz	r3, 400d78 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400d74:	4648      	mov	r0, r9
  400d76:	4798      	blx	r3
  400d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d7c:	20000210 	.word	0x20000210
  400d80:	20000298 	.word	0x20000298
  400d84:	2000020c 	.word	0x2000020c

00400d88 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d88:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d8a:	210b      	movs	r1, #11
  400d8c:	4801      	ldr	r0, [pc, #4]	; (400d94 <PIOA_Handler+0xc>)
  400d8e:	f7ff ffcb 	bl	400d28 <pio_handler_process>
  400d92:	bd08      	pop	{r3, pc}
  400d94:	400e0e00 	.word	0x400e0e00

00400d98 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d98:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d9a:	210c      	movs	r1, #12
  400d9c:	4801      	ldr	r0, [pc, #4]	; (400da4 <PIOB_Handler+0xc>)
  400d9e:	f7ff ffc3 	bl	400d28 <pio_handler_process>
  400da2:	bd08      	pop	{r3, pc}
  400da4:	400e1000 	.word	0x400e1000

00400da8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400da8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400daa:	210d      	movs	r1, #13
  400dac:	4801      	ldr	r0, [pc, #4]	; (400db4 <PIOC_Handler+0xc>)
  400dae:	f7ff ffbb 	bl	400d28 <pio_handler_process>
  400db2:	bd08      	pop	{r3, pc}
  400db4:	400e1200 	.word	0x400e1200

00400db8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400db8:	4a18      	ldr	r2, [pc, #96]	; (400e1c <pmc_switch_mck_to_pllack+0x64>)
  400dba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400dc0:	4318      	orrs	r0, r3
  400dc2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dc4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dc6:	f013 0f08 	tst.w	r3, #8
  400dca:	d003      	beq.n	400dd4 <pmc_switch_mck_to_pllack+0x1c>
  400dcc:	e009      	b.n	400de2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dce:	3b01      	subs	r3, #1
  400dd0:	d103      	bne.n	400dda <pmc_switch_mck_to_pllack+0x22>
  400dd2:	e01e      	b.n	400e12 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400dd8:	4910      	ldr	r1, [pc, #64]	; (400e1c <pmc_switch_mck_to_pllack+0x64>)
  400dda:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ddc:	f012 0f08 	tst.w	r2, #8
  400de0:	d0f5      	beq.n	400dce <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400de2:	4a0e      	ldr	r2, [pc, #56]	; (400e1c <pmc_switch_mck_to_pllack+0x64>)
  400de4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400de6:	f023 0303 	bic.w	r3, r3, #3
  400dea:	f043 0302 	orr.w	r3, r3, #2
  400dee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400df0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400df2:	f010 0008 	ands.w	r0, r0, #8
  400df6:	d004      	beq.n	400e02 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400df8:	2000      	movs	r0, #0
  400dfa:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dfc:	3b01      	subs	r3, #1
  400dfe:	d103      	bne.n	400e08 <pmc_switch_mck_to_pllack+0x50>
  400e00:	e009      	b.n	400e16 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e06:	4905      	ldr	r1, [pc, #20]	; (400e1c <pmc_switch_mck_to_pllack+0x64>)
  400e08:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e0a:	f012 0f08 	tst.w	r2, #8
  400e0e:	d0f5      	beq.n	400dfc <pmc_switch_mck_to_pllack+0x44>
  400e10:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400e12:	2001      	movs	r0, #1
  400e14:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400e16:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e18:	4770      	bx	lr
  400e1a:	bf00      	nop
  400e1c:	400e0400 	.word	0x400e0400

00400e20 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e20:	b138      	cbz	r0, 400e32 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e22:	4911      	ldr	r1, [pc, #68]	; (400e68 <pmc_switch_mainck_to_xtal+0x48>)
  400e24:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e26:	4a11      	ldr	r2, [pc, #68]	; (400e6c <pmc_switch_mainck_to_xtal+0x4c>)
  400e28:	401a      	ands	r2, r3
  400e2a:	4b11      	ldr	r3, [pc, #68]	; (400e70 <pmc_switch_mainck_to_xtal+0x50>)
  400e2c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e2e:	620b      	str	r3, [r1, #32]
  400e30:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e32:	480d      	ldr	r0, [pc, #52]	; (400e68 <pmc_switch_mainck_to_xtal+0x48>)
  400e34:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e36:	0209      	lsls	r1, r1, #8
  400e38:	b289      	uxth	r1, r1
  400e3a:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  400e3e:	f023 0303 	bic.w	r3, r3, #3
  400e42:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e46:	f043 0301 	orr.w	r3, r3, #1
  400e4a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e4c:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e4e:	4602      	mov	r2, r0
  400e50:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e52:	f013 0f01 	tst.w	r3, #1
  400e56:	d0fb      	beq.n	400e50 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e58:	4a03      	ldr	r2, [pc, #12]	; (400e68 <pmc_switch_mainck_to_xtal+0x48>)
  400e5a:	6a13      	ldr	r3, [r2, #32]
  400e5c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400e64:	6213      	str	r3, [r2, #32]
  400e66:	4770      	bx	lr
  400e68:	400e0400 	.word	0x400e0400
  400e6c:	fec8fffc 	.word	0xfec8fffc
  400e70:	01370002 	.word	0x01370002

00400e74 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e74:	4b02      	ldr	r3, [pc, #8]	; (400e80 <pmc_osc_is_ready_mainck+0xc>)
  400e76:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e78:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e7c:	4770      	bx	lr
  400e7e:	bf00      	nop
  400e80:	400e0400 	.word	0x400e0400

00400e84 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e88:	4b01      	ldr	r3, [pc, #4]	; (400e90 <pmc_disable_pllack+0xc>)
  400e8a:	629a      	str	r2, [r3, #40]	; 0x28
  400e8c:	4770      	bx	lr
  400e8e:	bf00      	nop
  400e90:	400e0400 	.word	0x400e0400

00400e94 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e94:	4b02      	ldr	r3, [pc, #8]	; (400ea0 <pmc_is_locked_pllack+0xc>)
  400e96:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e98:	f000 0002 	and.w	r0, r0, #2
  400e9c:	4770      	bx	lr
  400e9e:	bf00      	nop
  400ea0:	400e0400 	.word	0x400e0400

00400ea4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400ea4:	2822      	cmp	r0, #34	; 0x22
  400ea6:	d81e      	bhi.n	400ee6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400ea8:	281f      	cmp	r0, #31
  400eaa:	d80c      	bhi.n	400ec6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400eac:	4b11      	ldr	r3, [pc, #68]	; (400ef4 <pmc_enable_periph_clk+0x50>)
  400eae:	699a      	ldr	r2, [r3, #24]
  400eb0:	2301      	movs	r3, #1
  400eb2:	4083      	lsls	r3, r0
  400eb4:	4393      	bics	r3, r2
  400eb6:	d018      	beq.n	400eea <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400eb8:	2301      	movs	r3, #1
  400eba:	fa03 f000 	lsl.w	r0, r3, r0
  400ebe:	4b0d      	ldr	r3, [pc, #52]	; (400ef4 <pmc_enable_periph_clk+0x50>)
  400ec0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ec2:	2000      	movs	r0, #0
  400ec4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400ec6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ec8:	4b0a      	ldr	r3, [pc, #40]	; (400ef4 <pmc_enable_periph_clk+0x50>)
  400eca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ece:	2301      	movs	r3, #1
  400ed0:	4083      	lsls	r3, r0
  400ed2:	4393      	bics	r3, r2
  400ed4:	d00b      	beq.n	400eee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400ed6:	2301      	movs	r3, #1
  400ed8:	fa03 f000 	lsl.w	r0, r3, r0
  400edc:	4b05      	ldr	r3, [pc, #20]	; (400ef4 <pmc_enable_periph_clk+0x50>)
  400ede:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400ee2:	2000      	movs	r0, #0
  400ee4:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400ee6:	2001      	movs	r0, #1
  400ee8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400eea:	2000      	movs	r0, #0
  400eec:	4770      	bx	lr
  400eee:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400ef0:	4770      	bx	lr
  400ef2:	bf00      	nop
  400ef4:	400e0400 	.word	0x400e0400

00400ef8 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400efc:	6043      	str	r3, [r0, #4]
  400efe:	4770      	bx	lr

00400f00 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400f00:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400f02:	23ac      	movs	r3, #172	; 0xac
  400f04:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400f06:	680b      	ldr	r3, [r1, #0]
  400f08:	684a      	ldr	r2, [r1, #4]
  400f0a:	fbb3 f3f2 	udiv	r3, r3, r2
  400f0e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400f10:	1e5c      	subs	r4, r3, #1
  400f12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400f16:	4294      	cmp	r4, r2
  400f18:	d80a      	bhi.n	400f30 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400f1a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400f1c:	688b      	ldr	r3, [r1, #8]
  400f1e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400f20:	f240 2302 	movw	r3, #514	; 0x202
  400f24:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400f28:	2350      	movs	r3, #80	; 0x50
  400f2a:	6003      	str	r3, [r0, #0]

	return 0;
  400f2c:	2000      	movs	r0, #0
  400f2e:	e000      	b.n	400f32 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400f30:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400f32:	bc10      	pop	{r4}
  400f34:	4770      	bx	lr
  400f36:	bf00      	nop

00400f38 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400f38:	6943      	ldr	r3, [r0, #20]
  400f3a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400f3e:	bf1a      	itte	ne
  400f40:	61c1      	strne	r1, [r0, #28]
	return 0;
  400f42:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400f44:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400f46:	4770      	bx	lr

00400f48 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400f48:	6943      	ldr	r3, [r0, #20]
  400f4a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400f4e:	bf1d      	ittte	ne
  400f50:	6983      	ldrne	r3, [r0, #24]
  400f52:	700b      	strbne	r3, [r1, #0]
	return 0;
  400f54:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400f56:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400f58:	4770      	bx	lr
  400f5a:	bf00      	nop

00400f5c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400f5c:	6943      	ldr	r3, [r0, #20]
  400f5e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400f62:	bf1d      	ittte	ne
  400f64:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400f68:	61c1      	strne	r1, [r0, #28]
	return 0;
  400f6a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400f6c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400f6e:	4770      	bx	lr

00400f70 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400f70:	6943      	ldr	r3, [r0, #20]
  400f72:	f013 0f01 	tst.w	r3, #1
  400f76:	d005      	beq.n	400f84 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400f78:	6983      	ldr	r3, [r0, #24]
  400f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400f7e:	600b      	str	r3, [r1, #0]

	return 0;
  400f80:	2000      	movs	r0, #0
  400f82:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400f84:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400f86:	4770      	bx	lr

00400f88 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400f88:	e7fe      	b.n	400f88 <Dummy_Handler>
  400f8a:	bf00      	nop

00400f8c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400f8c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400f8e:	4b20      	ldr	r3, [pc, #128]	; (401010 <Reset_Handler+0x84>)
  400f90:	4a20      	ldr	r2, [pc, #128]	; (401014 <Reset_Handler+0x88>)
  400f92:	429a      	cmp	r2, r3
  400f94:	d912      	bls.n	400fbc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400f96:	4b20      	ldr	r3, [pc, #128]	; (401018 <Reset_Handler+0x8c>)
  400f98:	4a1d      	ldr	r2, [pc, #116]	; (401010 <Reset_Handler+0x84>)
  400f9a:	429a      	cmp	r2, r3
  400f9c:	d21e      	bcs.n	400fdc <Reset_Handler+0x50>
  400f9e:	4611      	mov	r1, r2
  400fa0:	3b01      	subs	r3, #1
  400fa2:	1a9b      	subs	r3, r3, r2
  400fa4:	f023 0303 	bic.w	r3, r3, #3
  400fa8:	3304      	adds	r3, #4
  400faa:	4a1a      	ldr	r2, [pc, #104]	; (401014 <Reset_Handler+0x88>)
  400fac:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400fae:	f852 0b04 	ldr.w	r0, [r2], #4
  400fb2:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400fb6:	429a      	cmp	r2, r3
  400fb8:	d1f9      	bne.n	400fae <Reset_Handler+0x22>
  400fba:	e00f      	b.n	400fdc <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400fbc:	4b14      	ldr	r3, [pc, #80]	; (401010 <Reset_Handler+0x84>)
  400fbe:	4a15      	ldr	r2, [pc, #84]	; (401014 <Reset_Handler+0x88>)
  400fc0:	429a      	cmp	r2, r3
  400fc2:	d20b      	bcs.n	400fdc <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400fc4:	4b14      	ldr	r3, [pc, #80]	; (401018 <Reset_Handler+0x8c>)
  400fc6:	4a12      	ldr	r2, [pc, #72]	; (401010 <Reset_Handler+0x84>)
  400fc8:	1a9a      	subs	r2, r3, r2
  400fca:	4814      	ldr	r0, [pc, #80]	; (40101c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400fcc:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400fce:	b12a      	cbz	r2, 400fdc <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400fd0:	f851 2904 	ldr.w	r2, [r1], #-4
  400fd4:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400fd8:	4281      	cmp	r1, r0
  400fda:	d1f9      	bne.n	400fd0 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400fdc:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400fde:	4b10      	ldr	r3, [pc, #64]	; (401020 <Reset_Handler+0x94>)
  400fe0:	4a10      	ldr	r2, [pc, #64]	; (401024 <Reset_Handler+0x98>)
  400fe2:	429a      	cmp	r2, r3
  400fe4:	d20b      	bcs.n	400ffe <Reset_Handler+0x72>
  400fe6:	1d13      	adds	r3, r2, #4
  400fe8:	4a0f      	ldr	r2, [pc, #60]	; (401028 <Reset_Handler+0x9c>)
  400fea:	1ad2      	subs	r2, r2, r3
  400fec:	f022 0203 	bic.w	r2, r2, #3
  400ff0:	441a      	add	r2, r3
  400ff2:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400ff4:	2100      	movs	r1, #0
  400ff6:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400ffa:	429a      	cmp	r2, r3
  400ffc:	d1fb      	bne.n	400ff6 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400ffe:	4b0b      	ldr	r3, [pc, #44]	; (40102c <Reset_Handler+0xa0>)
  401000:	4a0b      	ldr	r2, [pc, #44]	; (401030 <Reset_Handler+0xa4>)
  401002:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401004:	f000 f912 	bl	40122c <__libc_init_array>

	/* Branch to main function */
	main();
  401008:	f7ff f976 	bl	4002f8 <main>
  40100c:	e7fe      	b.n	40100c <Reset_Handler+0x80>
  40100e:	bf00      	nop
  401010:	20000000 	.word	0x20000000
  401014:	00404e5c 	.word	0x00404e5c
  401018:	200001e0 	.word	0x200001e0
  40101c:	00404e58 	.word	0x00404e58
  401020:	200002a0 	.word	0x200002a0
  401024:	200001e0 	.word	0x200001e0
  401028:	200002a3 	.word	0x200002a3
  40102c:	e000ed00 	.word	0xe000ed00
  401030:	00400000 	.word	0x00400000

00401034 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401034:	4b3d      	ldr	r3, [pc, #244]	; (40112c <SystemCoreClockUpdate+0xf8>)
  401036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401038:	f003 0303 	and.w	r3, r3, #3
  40103c:	2b03      	cmp	r3, #3
  40103e:	d85d      	bhi.n	4010fc <SystemCoreClockUpdate+0xc8>
  401040:	e8df f003 	tbb	[pc, r3]
  401044:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401048:	4b39      	ldr	r3, [pc, #228]	; (401130 <SystemCoreClockUpdate+0xfc>)
  40104a:	695b      	ldr	r3, [r3, #20]
  40104c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401050:	bf14      	ite	ne
  401052:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401056:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40105a:	4b36      	ldr	r3, [pc, #216]	; (401134 <SystemCoreClockUpdate+0x100>)
  40105c:	601a      	str	r2, [r3, #0]
  40105e:	e04d      	b.n	4010fc <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401060:	4b32      	ldr	r3, [pc, #200]	; (40112c <SystemCoreClockUpdate+0xf8>)
  401062:	6a1b      	ldr	r3, [r3, #32]
  401064:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401068:	d003      	beq.n	401072 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40106a:	4a33      	ldr	r2, [pc, #204]	; (401138 <SystemCoreClockUpdate+0x104>)
  40106c:	4b31      	ldr	r3, [pc, #196]	; (401134 <SystemCoreClockUpdate+0x100>)
  40106e:	601a      	str	r2, [r3, #0]
  401070:	e044      	b.n	4010fc <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401072:	4a32      	ldr	r2, [pc, #200]	; (40113c <SystemCoreClockUpdate+0x108>)
  401074:	4b2f      	ldr	r3, [pc, #188]	; (401134 <SystemCoreClockUpdate+0x100>)
  401076:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401078:	4b2c      	ldr	r3, [pc, #176]	; (40112c <SystemCoreClockUpdate+0xf8>)
  40107a:	6a1b      	ldr	r3, [r3, #32]
  40107c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401080:	2b10      	cmp	r3, #16
  401082:	d002      	beq.n	40108a <SystemCoreClockUpdate+0x56>
  401084:	2b20      	cmp	r3, #32
  401086:	d004      	beq.n	401092 <SystemCoreClockUpdate+0x5e>
  401088:	e038      	b.n	4010fc <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40108a:	4a2d      	ldr	r2, [pc, #180]	; (401140 <SystemCoreClockUpdate+0x10c>)
  40108c:	4b29      	ldr	r3, [pc, #164]	; (401134 <SystemCoreClockUpdate+0x100>)
  40108e:	601a      	str	r2, [r3, #0]
			break;
  401090:	e034      	b.n	4010fc <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401092:	4a29      	ldr	r2, [pc, #164]	; (401138 <SystemCoreClockUpdate+0x104>)
  401094:	4b27      	ldr	r3, [pc, #156]	; (401134 <SystemCoreClockUpdate+0x100>)
  401096:	601a      	str	r2, [r3, #0]
			break;
  401098:	e030      	b.n	4010fc <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40109a:	4b24      	ldr	r3, [pc, #144]	; (40112c <SystemCoreClockUpdate+0xf8>)
  40109c:	6a1b      	ldr	r3, [r3, #32]
  40109e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010a2:	d003      	beq.n	4010ac <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4010a4:	4a24      	ldr	r2, [pc, #144]	; (401138 <SystemCoreClockUpdate+0x104>)
  4010a6:	4b23      	ldr	r3, [pc, #140]	; (401134 <SystemCoreClockUpdate+0x100>)
  4010a8:	601a      	str	r2, [r3, #0]
  4010aa:	e012      	b.n	4010d2 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4010ac:	4a23      	ldr	r2, [pc, #140]	; (40113c <SystemCoreClockUpdate+0x108>)
  4010ae:	4b21      	ldr	r3, [pc, #132]	; (401134 <SystemCoreClockUpdate+0x100>)
  4010b0:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4010b2:	4b1e      	ldr	r3, [pc, #120]	; (40112c <SystemCoreClockUpdate+0xf8>)
  4010b4:	6a1b      	ldr	r3, [r3, #32]
  4010b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010ba:	2b10      	cmp	r3, #16
  4010bc:	d002      	beq.n	4010c4 <SystemCoreClockUpdate+0x90>
  4010be:	2b20      	cmp	r3, #32
  4010c0:	d004      	beq.n	4010cc <SystemCoreClockUpdate+0x98>
  4010c2:	e006      	b.n	4010d2 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4010c4:	4a1e      	ldr	r2, [pc, #120]	; (401140 <SystemCoreClockUpdate+0x10c>)
  4010c6:	4b1b      	ldr	r3, [pc, #108]	; (401134 <SystemCoreClockUpdate+0x100>)
  4010c8:	601a      	str	r2, [r3, #0]
					break;
  4010ca:	e002      	b.n	4010d2 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4010cc:	4a1a      	ldr	r2, [pc, #104]	; (401138 <SystemCoreClockUpdate+0x104>)
  4010ce:	4b19      	ldr	r3, [pc, #100]	; (401134 <SystemCoreClockUpdate+0x100>)
  4010d0:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4010d2:	4b16      	ldr	r3, [pc, #88]	; (40112c <SystemCoreClockUpdate+0xf8>)
  4010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010d6:	f003 0303 	and.w	r3, r3, #3
  4010da:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4010dc:	4a13      	ldr	r2, [pc, #76]	; (40112c <SystemCoreClockUpdate+0xf8>)
  4010de:	bf07      	ittee	eq
  4010e0:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4010e2:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4010e4:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4010e6:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4010e8:	4812      	ldr	r0, [pc, #72]	; (401134 <SystemCoreClockUpdate+0x100>)
  4010ea:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4010ee:	6803      	ldr	r3, [r0, #0]
  4010f0:	fb01 3303 	mla	r3, r1, r3, r3
  4010f4:	b2d2      	uxtb	r2, r2
  4010f6:	fbb3 f3f2 	udiv	r3, r3, r2
  4010fa:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4010fc:	4b0b      	ldr	r3, [pc, #44]	; (40112c <SystemCoreClockUpdate+0xf8>)
  4010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401100:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401104:	2b70      	cmp	r3, #112	; 0x70
  401106:	d107      	bne.n	401118 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401108:	4a0a      	ldr	r2, [pc, #40]	; (401134 <SystemCoreClockUpdate+0x100>)
  40110a:	6813      	ldr	r3, [r2, #0]
  40110c:	490d      	ldr	r1, [pc, #52]	; (401144 <SystemCoreClockUpdate+0x110>)
  40110e:	fba1 1303 	umull	r1, r3, r1, r3
  401112:	085b      	lsrs	r3, r3, #1
  401114:	6013      	str	r3, [r2, #0]
  401116:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401118:	4b04      	ldr	r3, [pc, #16]	; (40112c <SystemCoreClockUpdate+0xf8>)
  40111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40111c:	4905      	ldr	r1, [pc, #20]	; (401134 <SystemCoreClockUpdate+0x100>)
  40111e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401122:	680b      	ldr	r3, [r1, #0]
  401124:	40d3      	lsrs	r3, r2
  401126:	600b      	str	r3, [r1, #0]
  401128:	4770      	bx	lr
  40112a:	bf00      	nop
  40112c:	400e0400 	.word	0x400e0400
  401130:	400e1410 	.word	0x400e1410
  401134:	2000000c 	.word	0x2000000c
  401138:	00b71b00 	.word	0x00b71b00
  40113c:	003d0900 	.word	0x003d0900
  401140:	007a1200 	.word	0x007a1200
  401144:	aaaaaaab 	.word	0xaaaaaaab

00401148 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401148:	4b1a      	ldr	r3, [pc, #104]	; (4011b4 <system_init_flash+0x6c>)
  40114a:	4298      	cmp	r0, r3
  40114c:	d807      	bhi.n	40115e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40114e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401152:	4a19      	ldr	r2, [pc, #100]	; (4011b8 <system_init_flash+0x70>)
  401154:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401156:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40115a:	6013      	str	r3, [r2, #0]
  40115c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40115e:	4b17      	ldr	r3, [pc, #92]	; (4011bc <system_init_flash+0x74>)
  401160:	4298      	cmp	r0, r3
  401162:	d806      	bhi.n	401172 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401164:	4b16      	ldr	r3, [pc, #88]	; (4011c0 <system_init_flash+0x78>)
  401166:	4a14      	ldr	r2, [pc, #80]	; (4011b8 <system_init_flash+0x70>)
  401168:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40116a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40116e:	6013      	str	r3, [r2, #0]
  401170:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401172:	4b14      	ldr	r3, [pc, #80]	; (4011c4 <system_init_flash+0x7c>)
  401174:	4298      	cmp	r0, r3
  401176:	d806      	bhi.n	401186 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401178:	4b13      	ldr	r3, [pc, #76]	; (4011c8 <system_init_flash+0x80>)
  40117a:	4a0f      	ldr	r2, [pc, #60]	; (4011b8 <system_init_flash+0x70>)
  40117c:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40117e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401182:	6013      	str	r3, [r2, #0]
  401184:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401186:	4b11      	ldr	r3, [pc, #68]	; (4011cc <system_init_flash+0x84>)
  401188:	4298      	cmp	r0, r3
  40118a:	d806      	bhi.n	40119a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40118c:	4b10      	ldr	r3, [pc, #64]	; (4011d0 <system_init_flash+0x88>)
  40118e:	4a0a      	ldr	r2, [pc, #40]	; (4011b8 <system_init_flash+0x70>)
  401190:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401192:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401196:	6013      	str	r3, [r2, #0]
  401198:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40119a:	4b0e      	ldr	r3, [pc, #56]	; (4011d4 <system_init_flash+0x8c>)
  40119c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40119e:	bf94      	ite	ls
  4011a0:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4011a4:	4b0c      	ldrhi	r3, [pc, #48]	; (4011d8 <system_init_flash+0x90>)
  4011a6:	4a04      	ldr	r2, [pc, #16]	; (4011b8 <system_init_flash+0x70>)
  4011a8:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4011aa:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4011ae:	6013      	str	r3, [r2, #0]
  4011b0:	4770      	bx	lr
  4011b2:	bf00      	nop
  4011b4:	01312cff 	.word	0x01312cff
  4011b8:	400e0a00 	.word	0x400e0a00
  4011bc:	026259ff 	.word	0x026259ff
  4011c0:	04000100 	.word	0x04000100
  4011c4:	039386ff 	.word	0x039386ff
  4011c8:	04000200 	.word	0x04000200
  4011cc:	04c4b3ff 	.word	0x04c4b3ff
  4011d0:	04000300 	.word	0x04000300
  4011d4:	05f5e0ff 	.word	0x05f5e0ff
  4011d8:	04000500 	.word	0x04000500

004011dc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4011dc:	4b09      	ldr	r3, [pc, #36]	; (401204 <_sbrk+0x28>)
  4011de:	681b      	ldr	r3, [r3, #0]
  4011e0:	b913      	cbnz	r3, 4011e8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4011e2:	4a09      	ldr	r2, [pc, #36]	; (401208 <_sbrk+0x2c>)
  4011e4:	4b07      	ldr	r3, [pc, #28]	; (401204 <_sbrk+0x28>)
  4011e6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4011e8:	4b06      	ldr	r3, [pc, #24]	; (401204 <_sbrk+0x28>)
  4011ea:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4011ec:	181a      	adds	r2, r3, r0
  4011ee:	4907      	ldr	r1, [pc, #28]	; (40120c <_sbrk+0x30>)
  4011f0:	4291      	cmp	r1, r2
  4011f2:	db04      	blt.n	4011fe <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4011f4:	4610      	mov	r0, r2
  4011f6:	4a03      	ldr	r2, [pc, #12]	; (401204 <_sbrk+0x28>)
  4011f8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4011fa:	4618      	mov	r0, r3
  4011fc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4011fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401202:	4770      	bx	lr
  401204:	20000280 	.word	0x20000280
  401208:	200032a0 	.word	0x200032a0
  40120c:	20027ffc 	.word	0x20027ffc

00401210 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401214:	4770      	bx	lr
  401216:	bf00      	nop

00401218 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40121c:	604b      	str	r3, [r1, #4]

	return 0;
}
  40121e:	2000      	movs	r0, #0
  401220:	4770      	bx	lr
  401222:	bf00      	nop

00401224 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401224:	2001      	movs	r0, #1
  401226:	4770      	bx	lr

00401228 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401228:	2000      	movs	r0, #0
  40122a:	4770      	bx	lr

0040122c <__libc_init_array>:
  40122c:	b570      	push	{r4, r5, r6, lr}
  40122e:	4b0e      	ldr	r3, [pc, #56]	; (401268 <__libc_init_array+0x3c>)
  401230:	4c0e      	ldr	r4, [pc, #56]	; (40126c <__libc_init_array+0x40>)
  401232:	1ae4      	subs	r4, r4, r3
  401234:	10a4      	asrs	r4, r4, #2
  401236:	2500      	movs	r5, #0
  401238:	461e      	mov	r6, r3
  40123a:	42a5      	cmp	r5, r4
  40123c:	d004      	beq.n	401248 <__libc_init_array+0x1c>
  40123e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401242:	4798      	blx	r3
  401244:	3501      	adds	r5, #1
  401246:	e7f8      	b.n	40123a <__libc_init_array+0xe>
  401248:	f003 fdf2 	bl	404e30 <_init>
  40124c:	4c08      	ldr	r4, [pc, #32]	; (401270 <__libc_init_array+0x44>)
  40124e:	4b09      	ldr	r3, [pc, #36]	; (401274 <__libc_init_array+0x48>)
  401250:	1ae4      	subs	r4, r4, r3
  401252:	10a4      	asrs	r4, r4, #2
  401254:	2500      	movs	r5, #0
  401256:	461e      	mov	r6, r3
  401258:	42a5      	cmp	r5, r4
  40125a:	d004      	beq.n	401266 <__libc_init_array+0x3a>
  40125c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401260:	4798      	blx	r3
  401262:	3501      	adds	r5, #1
  401264:	e7f8      	b.n	401258 <__libc_init_array+0x2c>
  401266:	bd70      	pop	{r4, r5, r6, pc}
  401268:	00404e3c 	.word	0x00404e3c
  40126c:	00404e3c 	.word	0x00404e3c
  401270:	00404e40 	.word	0x00404e40
  401274:	00404e3c 	.word	0x00404e3c

00401278 <memset>:
  401278:	4402      	add	r2, r0
  40127a:	4603      	mov	r3, r0
  40127c:	4293      	cmp	r3, r2
  40127e:	d002      	beq.n	401286 <memset+0xe>
  401280:	f803 1b01 	strb.w	r1, [r3], #1
  401284:	e7fa      	b.n	40127c <memset+0x4>
  401286:	4770      	bx	lr

00401288 <__cvt>:
  401288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40128c:	b088      	sub	sp, #32
  40128e:	2b00      	cmp	r3, #0
  401290:	9f14      	ldr	r7, [sp, #80]	; 0x50
  401292:	9912      	ldr	r1, [sp, #72]	; 0x48
  401294:	9d10      	ldr	r5, [sp, #64]	; 0x40
  401296:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  40129a:	461e      	mov	r6, r3
  40129c:	f027 0720 	bic.w	r7, r7, #32
  4012a0:	bfbb      	ittet	lt
  4012a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4012a6:	461e      	movlt	r6, r3
  4012a8:	2300      	movge	r3, #0
  4012aa:	232d      	movlt	r3, #45	; 0x2d
  4012ac:	2f46      	cmp	r7, #70	; 0x46
  4012ae:	4614      	mov	r4, r2
  4012b0:	700b      	strb	r3, [r1, #0]
  4012b2:	d003      	beq.n	4012bc <__cvt+0x34>
  4012b4:	2f45      	cmp	r7, #69	; 0x45
  4012b6:	d103      	bne.n	4012c0 <__cvt+0x38>
  4012b8:	3501      	adds	r5, #1
  4012ba:	e001      	b.n	4012c0 <__cvt+0x38>
  4012bc:	2303      	movs	r3, #3
  4012be:	e000      	b.n	4012c2 <__cvt+0x3a>
  4012c0:	2302      	movs	r3, #2
  4012c2:	aa07      	add	r2, sp, #28
  4012c4:	9204      	str	r2, [sp, #16]
  4012c6:	aa06      	add	r2, sp, #24
  4012c8:	9203      	str	r2, [sp, #12]
  4012ca:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4012ce:	4622      	mov	r2, r4
  4012d0:	4633      	mov	r3, r6
  4012d2:	f000 fed1 	bl	402078 <_dtoa_r>
  4012d6:	2f47      	cmp	r7, #71	; 0x47
  4012d8:	4680      	mov	r8, r0
  4012da:	d102      	bne.n	4012e2 <__cvt+0x5a>
  4012dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4012de:	07db      	lsls	r3, r3, #31
  4012e0:	d528      	bpl.n	401334 <__cvt+0xac>
  4012e2:	2f46      	cmp	r7, #70	; 0x46
  4012e4:	eb08 0905 	add.w	r9, r8, r5
  4012e8:	d111      	bne.n	40130e <__cvt+0x86>
  4012ea:	f898 3000 	ldrb.w	r3, [r8]
  4012ee:	2b30      	cmp	r3, #48	; 0x30
  4012f0:	d10a      	bne.n	401308 <__cvt+0x80>
  4012f2:	2200      	movs	r2, #0
  4012f4:	2300      	movs	r3, #0
  4012f6:	4620      	mov	r0, r4
  4012f8:	4631      	mov	r1, r6
  4012fa:	f003 f87f 	bl	4043fc <__aeabi_dcmpeq>
  4012fe:	b918      	cbnz	r0, 401308 <__cvt+0x80>
  401300:	f1c5 0501 	rsb	r5, r5, #1
  401304:	f8ca 5000 	str.w	r5, [sl]
  401308:	f8da 3000 	ldr.w	r3, [sl]
  40130c:	4499      	add	r9, r3
  40130e:	2200      	movs	r2, #0
  401310:	2300      	movs	r3, #0
  401312:	4620      	mov	r0, r4
  401314:	4631      	mov	r1, r6
  401316:	f003 f871 	bl	4043fc <__aeabi_dcmpeq>
  40131a:	b908      	cbnz	r0, 401320 <__cvt+0x98>
  40131c:	2230      	movs	r2, #48	; 0x30
  40131e:	e002      	b.n	401326 <__cvt+0x9e>
  401320:	f8cd 901c 	str.w	r9, [sp, #28]
  401324:	e006      	b.n	401334 <__cvt+0xac>
  401326:	9b07      	ldr	r3, [sp, #28]
  401328:	4599      	cmp	r9, r3
  40132a:	d903      	bls.n	401334 <__cvt+0xac>
  40132c:	1c59      	adds	r1, r3, #1
  40132e:	9107      	str	r1, [sp, #28]
  401330:	701a      	strb	r2, [r3, #0]
  401332:	e7f8      	b.n	401326 <__cvt+0x9e>
  401334:	9b07      	ldr	r3, [sp, #28]
  401336:	9a15      	ldr	r2, [sp, #84]	; 0x54
  401338:	ebc8 0303 	rsb	r3, r8, r3
  40133c:	4640      	mov	r0, r8
  40133e:	6013      	str	r3, [r2, #0]
  401340:	b008      	add	sp, #32
  401342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401346 <__exponent>:
  401346:	b573      	push	{r0, r1, r4, r5, r6, lr}
  401348:	4603      	mov	r3, r0
  40134a:	2900      	cmp	r1, #0
  40134c:	bfb8      	it	lt
  40134e:	4249      	neglt	r1, r1
  401350:	f803 2b02 	strb.w	r2, [r3], #2
  401354:	bfb4      	ite	lt
  401356:	222d      	movlt	r2, #45	; 0x2d
  401358:	222b      	movge	r2, #43	; 0x2b
  40135a:	2909      	cmp	r1, #9
  40135c:	7042      	strb	r2, [r0, #1]
  40135e:	dd19      	ble.n	401394 <__exponent+0x4e>
  401360:	f10d 0207 	add.w	r2, sp, #7
  401364:	4616      	mov	r6, r2
  401366:	250a      	movs	r5, #10
  401368:	fb91 f4f5 	sdiv	r4, r1, r5
  40136c:	fb05 1114 	mls	r1, r5, r4, r1
  401370:	3130      	adds	r1, #48	; 0x30
  401372:	2c09      	cmp	r4, #9
  401374:	f802 1d01 	strb.w	r1, [r2, #-1]!
  401378:	4621      	mov	r1, r4
  40137a:	dcf5      	bgt.n	401368 <__exponent+0x22>
  40137c:	3130      	adds	r1, #48	; 0x30
  40137e:	1e54      	subs	r4, r2, #1
  401380:	f802 1c01 	strb.w	r1, [r2, #-1]
  401384:	42b4      	cmp	r4, r6
  401386:	461a      	mov	r2, r3
  401388:	d20a      	bcs.n	4013a0 <__exponent+0x5a>
  40138a:	f814 2b01 	ldrb.w	r2, [r4], #1
  40138e:	f803 2b01 	strb.w	r2, [r3], #1
  401392:	e7f7      	b.n	401384 <__exponent+0x3e>
  401394:	2430      	movs	r4, #48	; 0x30
  401396:	461a      	mov	r2, r3
  401398:	4421      	add	r1, r4
  40139a:	f802 4b02 	strb.w	r4, [r2], #2
  40139e:	7059      	strb	r1, [r3, #1]
  4013a0:	1a10      	subs	r0, r2, r0
  4013a2:	b002      	add	sp, #8
  4013a4:	bd70      	pop	{r4, r5, r6, pc}
	...

004013a8 <_printf_float>:
  4013a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013ac:	b091      	sub	sp, #68	; 0x44
  4013ae:	460c      	mov	r4, r1
  4013b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  4013b4:	4616      	mov	r6, r2
  4013b6:	461f      	mov	r7, r3
  4013b8:	4605      	mov	r5, r0
  4013ba:	f001 fd75 	bl	402ea8 <_localeconv_r>
  4013be:	6803      	ldr	r3, [r0, #0]
  4013c0:	9309      	str	r3, [sp, #36]	; 0x24
  4013c2:	4618      	mov	r0, r3
  4013c4:	f000 fcfc 	bl	401dc0 <strlen>
  4013c8:	2300      	movs	r3, #0
  4013ca:	930e      	str	r3, [sp, #56]	; 0x38
  4013cc:	f8d8 3000 	ldr.w	r3, [r8]
  4013d0:	900a      	str	r0, [sp, #40]	; 0x28
  4013d2:	3307      	adds	r3, #7
  4013d4:	f023 0307 	bic.w	r3, r3, #7
  4013d8:	f103 0208 	add.w	r2, r3, #8
  4013dc:	f894 9018 	ldrb.w	r9, [r4, #24]
  4013e0:	f8d4 b000 	ldr.w	fp, [r4]
  4013e4:	f8c8 2000 	str.w	r2, [r8]
  4013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  4013f0:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  4013f4:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  4013f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  4013fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4013fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401402:	4ba7      	ldr	r3, [pc, #668]	; (4016a0 <_printf_float+0x2f8>)
  401404:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401406:	4640      	mov	r0, r8
  401408:	f003 f82a 	bl	404460 <__aeabi_dcmpun>
  40140c:	b9a0      	cbnz	r0, 401438 <_printf_float+0x90>
  40140e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401412:	4ba3      	ldr	r3, [pc, #652]	; (4016a0 <_printf_float+0x2f8>)
  401414:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401416:	4640      	mov	r0, r8
  401418:	f003 f804 	bl	404424 <__aeabi_dcmple>
  40141c:	b960      	cbnz	r0, 401438 <_printf_float+0x90>
  40141e:	2200      	movs	r2, #0
  401420:	2300      	movs	r3, #0
  401422:	4640      	mov	r0, r8
  401424:	4651      	mov	r1, sl
  401426:	f002 fff3 	bl	404410 <__aeabi_dcmplt>
  40142a:	b110      	cbz	r0, 401432 <_printf_float+0x8a>
  40142c:	232d      	movs	r3, #45	; 0x2d
  40142e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401432:	4b9c      	ldr	r3, [pc, #624]	; (4016a4 <_printf_float+0x2fc>)
  401434:	4a9c      	ldr	r2, [pc, #624]	; (4016a8 <_printf_float+0x300>)
  401436:	e00a      	b.n	40144e <_printf_float+0xa6>
  401438:	4642      	mov	r2, r8
  40143a:	4653      	mov	r3, sl
  40143c:	4640      	mov	r0, r8
  40143e:	4651      	mov	r1, sl
  401440:	f003 f80e 	bl	404460 <__aeabi_dcmpun>
  401444:	2800      	cmp	r0, #0
  401446:	f000 8192 	beq.w	40176e <_printf_float+0x3c6>
  40144a:	4b98      	ldr	r3, [pc, #608]	; (4016ac <_printf_float+0x304>)
  40144c:	4a98      	ldr	r2, [pc, #608]	; (4016b0 <_printf_float+0x308>)
  40144e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  401452:	bf8c      	ite	hi
  401454:	4690      	movhi	r8, r2
  401456:	4698      	movls	r8, r3
  401458:	2303      	movs	r3, #3
  40145a:	6123      	str	r3, [r4, #16]
  40145c:	f02b 0304 	bic.w	r3, fp, #4
  401460:	6023      	str	r3, [r4, #0]
  401462:	f04f 0a00 	mov.w	sl, #0
  401466:	e03d      	b.n	4014e4 <_printf_float+0x13c>
  401468:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  40146c:	f000 818a 	beq.w	401784 <_printf_float+0x3dc>
  401470:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  401474:	f000 8186 	beq.w	401784 <_printf_float+0x3dc>
  401478:	6023      	str	r3, [r4, #0]
  40147a:	2100      	movs	r1, #0
  40147c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  401480:	9301      	str	r3, [sp, #4]
  401482:	6863      	ldr	r3, [r4, #4]
  401484:	9005      	str	r0, [sp, #20]
  401486:	9202      	str	r2, [sp, #8]
  401488:	9300      	str	r3, [sp, #0]
  40148a:	4642      	mov	r2, r8
  40148c:	4653      	mov	r3, sl
  40148e:	9106      	str	r1, [sp, #24]
  401490:	f8cd 9010 	str.w	r9, [sp, #16]
  401494:	f8cd e00c 	str.w	lr, [sp, #12]
  401498:	4628      	mov	r0, r5
  40149a:	f7ff fef5 	bl	401288 <__cvt>
  40149e:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  4014a2:	2b47      	cmp	r3, #71	; 0x47
  4014a4:	4680      	mov	r8, r0
  4014a6:	f000 8184 	beq.w	4017b2 <_printf_float+0x40a>
  4014aa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  4014ae:	990d      	ldr	r1, [sp, #52]	; 0x34
  4014b0:	f200 818d 	bhi.w	4017ce <_printf_float+0x426>
  4014b4:	3901      	subs	r1, #1
  4014b6:	464a      	mov	r2, r9
  4014b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4014bc:	910d      	str	r1, [sp, #52]	; 0x34
  4014be:	f7ff ff42 	bl	401346 <__exponent>
  4014c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4014c4:	1883      	adds	r3, r0, r2
  4014c6:	2a01      	cmp	r2, #1
  4014c8:	4682      	mov	sl, r0
  4014ca:	6123      	str	r3, [r4, #16]
  4014cc:	f300 817c 	bgt.w	4017c8 <_printf_float+0x420>
  4014d0:	6822      	ldr	r2, [r4, #0]
  4014d2:	07d1      	lsls	r1, r2, #31
  4014d4:	f100 8178 	bmi.w	4017c8 <_printf_float+0x420>
  4014d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4014dc:	b113      	cbz	r3, 4014e4 <_printf_float+0x13c>
  4014de:	232d      	movs	r3, #45	; 0x2d
  4014e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4014e4:	9700      	str	r7, [sp, #0]
  4014e6:	4633      	mov	r3, r6
  4014e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4014ea:	4621      	mov	r1, r4
  4014ec:	4628      	mov	r0, r5
  4014ee:	f000 f99f 	bl	401830 <_printf_common>
  4014f2:	3001      	adds	r0, #1
  4014f4:	d102      	bne.n	4014fc <_printf_float+0x154>
  4014f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4014fa:	e196      	b.n	40182a <_printf_float+0x482>
  4014fc:	6823      	ldr	r3, [r4, #0]
  4014fe:	055a      	lsls	r2, r3, #21
  401500:	d401      	bmi.n	401506 <_printf_float+0x15e>
  401502:	6923      	ldr	r3, [r4, #16]
  401504:	e065      	b.n	4015d2 <_printf_float+0x22a>
  401506:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  40150a:	f240 80d5 	bls.w	4016b8 <_printf_float+0x310>
  40150e:	2200      	movs	r2, #0
  401510:	2300      	movs	r3, #0
  401512:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  401516:	f002 ff71 	bl	4043fc <__aeabi_dcmpeq>
  40151a:	b378      	cbz	r0, 40157c <_printf_float+0x1d4>
  40151c:	2301      	movs	r3, #1
  40151e:	4a65      	ldr	r2, [pc, #404]	; (4016b4 <_printf_float+0x30c>)
  401520:	4631      	mov	r1, r6
  401522:	4628      	mov	r0, r5
  401524:	47b8      	blx	r7
  401526:	3001      	adds	r0, #1
  401528:	d0e5      	beq.n	4014f6 <_printf_float+0x14e>
  40152a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40152c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40152e:	429a      	cmp	r2, r3
  401530:	db0b      	blt.n	40154a <_printf_float+0x1a2>
  401532:	6823      	ldr	r3, [r4, #0]
  401534:	07d8      	lsls	r0, r3, #31
  401536:	d408      	bmi.n	40154a <_printf_float+0x1a2>
  401538:	6823      	ldr	r3, [r4, #0]
  40153a:	079b      	lsls	r3, r3, #30
  40153c:	f140 8111 	bpl.w	401762 <_printf_float+0x3ba>
  401540:	f04f 0800 	mov.w	r8, #0
  401544:	f104 0919 	add.w	r9, r4, #25
  401548:	e106      	b.n	401758 <_printf_float+0x3b0>
  40154a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40154c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40154e:	4631      	mov	r1, r6
  401550:	4628      	mov	r0, r5
  401552:	47b8      	blx	r7
  401554:	3001      	adds	r0, #1
  401556:	d0ce      	beq.n	4014f6 <_printf_float+0x14e>
  401558:	f04f 0800 	mov.w	r8, #0
  40155c:	f104 091a 	add.w	r9, r4, #26
  401560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401562:	3b01      	subs	r3, #1
  401564:	4598      	cmp	r8, r3
  401566:	dae7      	bge.n	401538 <_printf_float+0x190>
  401568:	2301      	movs	r3, #1
  40156a:	464a      	mov	r2, r9
  40156c:	4631      	mov	r1, r6
  40156e:	4628      	mov	r0, r5
  401570:	47b8      	blx	r7
  401572:	3001      	adds	r0, #1
  401574:	d0bf      	beq.n	4014f6 <_printf_float+0x14e>
  401576:	f108 0801 	add.w	r8, r8, #1
  40157a:	e7f1      	b.n	401560 <_printf_float+0x1b8>
  40157c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40157e:	2b00      	cmp	r3, #0
  401580:	dc29      	bgt.n	4015d6 <_printf_float+0x22e>
  401582:	2301      	movs	r3, #1
  401584:	4a4b      	ldr	r2, [pc, #300]	; (4016b4 <_printf_float+0x30c>)
  401586:	4631      	mov	r1, r6
  401588:	4628      	mov	r0, r5
  40158a:	47b8      	blx	r7
  40158c:	3001      	adds	r0, #1
  40158e:	d0b2      	beq.n	4014f6 <_printf_float+0x14e>
  401590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401592:	b923      	cbnz	r3, 40159e <_printf_float+0x1f6>
  401594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401596:	b913      	cbnz	r3, 40159e <_printf_float+0x1f6>
  401598:	6823      	ldr	r3, [r4, #0]
  40159a:	07d9      	lsls	r1, r3, #31
  40159c:	d5cc      	bpl.n	401538 <_printf_float+0x190>
  40159e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4015a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4015a2:	4631      	mov	r1, r6
  4015a4:	4628      	mov	r0, r5
  4015a6:	47b8      	blx	r7
  4015a8:	3001      	adds	r0, #1
  4015aa:	d0a4      	beq.n	4014f6 <_printf_float+0x14e>
  4015ac:	f04f 0900 	mov.w	r9, #0
  4015b0:	f104 0a1a 	add.w	sl, r4, #26
  4015b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4015b6:	425b      	negs	r3, r3
  4015b8:	4599      	cmp	r9, r3
  4015ba:	da09      	bge.n	4015d0 <_printf_float+0x228>
  4015bc:	2301      	movs	r3, #1
  4015be:	4652      	mov	r2, sl
  4015c0:	4631      	mov	r1, r6
  4015c2:	4628      	mov	r0, r5
  4015c4:	47b8      	blx	r7
  4015c6:	3001      	adds	r0, #1
  4015c8:	d095      	beq.n	4014f6 <_printf_float+0x14e>
  4015ca:	f109 0901 	add.w	r9, r9, #1
  4015ce:	e7f1      	b.n	4015b4 <_printf_float+0x20c>
  4015d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4015d2:	4642      	mov	r2, r8
  4015d4:	e0a7      	b.n	401726 <_printf_float+0x37e>
  4015d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4015d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4015da:	429a      	cmp	r2, r3
  4015dc:	bfa8      	it	ge
  4015de:	461a      	movge	r2, r3
  4015e0:	2a00      	cmp	r2, #0
  4015e2:	4691      	mov	r9, r2
  4015e4:	dc06      	bgt.n	4015f4 <_printf_float+0x24c>
  4015e6:	f04f 0a00 	mov.w	sl, #0
  4015ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  4015ee:	f104 0b1a 	add.w	fp, r4, #26
  4015f2:	e011      	b.n	401618 <_printf_float+0x270>
  4015f4:	4613      	mov	r3, r2
  4015f6:	4631      	mov	r1, r6
  4015f8:	4642      	mov	r2, r8
  4015fa:	4628      	mov	r0, r5
  4015fc:	47b8      	blx	r7
  4015fe:	3001      	adds	r0, #1
  401600:	d1f1      	bne.n	4015e6 <_printf_float+0x23e>
  401602:	e778      	b.n	4014f6 <_printf_float+0x14e>
  401604:	2301      	movs	r3, #1
  401606:	465a      	mov	r2, fp
  401608:	4631      	mov	r1, r6
  40160a:	4628      	mov	r0, r5
  40160c:	47b8      	blx	r7
  40160e:	3001      	adds	r0, #1
  401610:	f43f af71 	beq.w	4014f6 <_printf_float+0x14e>
  401614:	f10a 0a01 	add.w	sl, sl, #1
  401618:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40161a:	ebc9 0203 	rsb	r2, r9, r3
  40161e:	4592      	cmp	sl, r2
  401620:	dbf0      	blt.n	401604 <_printf_float+0x25c>
  401622:	eb08 0903 	add.w	r9, r8, r3
  401626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40162a:	429a      	cmp	r2, r3
  40162c:	db0f      	blt.n	40164e <_printf_float+0x2a6>
  40162e:	6823      	ldr	r3, [r4, #0]
  401630:	07da      	lsls	r2, r3, #31
  401632:	d40c      	bmi.n	40164e <_printf_float+0x2a6>
  401634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401638:	4498      	add	r8, r3
  40163a:	ebc9 0808 	rsb	r8, r9, r8
  40163e:	1a9b      	subs	r3, r3, r2
  401640:	4598      	cmp	r8, r3
  401642:	bfa8      	it	ge
  401644:	4698      	movge	r8, r3
  401646:	f1b8 0f00 	cmp.w	r8, #0
  40164a:	dc08      	bgt.n	40165e <_printf_float+0x2b6>
  40164c:	e00f      	b.n	40166e <_printf_float+0x2c6>
  40164e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401650:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401652:	4631      	mov	r1, r6
  401654:	4628      	mov	r0, r5
  401656:	47b8      	blx	r7
  401658:	3001      	adds	r0, #1
  40165a:	d1eb      	bne.n	401634 <_printf_float+0x28c>
  40165c:	e74b      	b.n	4014f6 <_printf_float+0x14e>
  40165e:	4643      	mov	r3, r8
  401660:	464a      	mov	r2, r9
  401662:	4631      	mov	r1, r6
  401664:	4628      	mov	r0, r5
  401666:	47b8      	blx	r7
  401668:	3001      	adds	r0, #1
  40166a:	f43f af44 	beq.w	4014f6 <_printf_float+0x14e>
  40166e:	f04f 0900 	mov.w	r9, #0
  401672:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  401676:	f104 0a1a 	add.w	sl, r4, #26
  40167a:	e009      	b.n	401690 <_printf_float+0x2e8>
  40167c:	2301      	movs	r3, #1
  40167e:	4652      	mov	r2, sl
  401680:	4631      	mov	r1, r6
  401682:	4628      	mov	r0, r5
  401684:	47b8      	blx	r7
  401686:	3001      	adds	r0, #1
  401688:	f43f af35 	beq.w	4014f6 <_printf_float+0x14e>
  40168c:	f109 0901 	add.w	r9, r9, #1
  401690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401694:	1a9b      	subs	r3, r3, r2
  401696:	ebc8 0303 	rsb	r3, r8, r3
  40169a:	4599      	cmp	r9, r3
  40169c:	dbee      	blt.n	40167c <_printf_float+0x2d4>
  40169e:	e74b      	b.n	401538 <_printf_float+0x190>
  4016a0:	7fefffff 	.word	0x7fefffff
  4016a4:	00404b74 	.word	0x00404b74
  4016a8:	00404b78 	.word	0x00404b78
  4016ac:	00404b7c 	.word	0x00404b7c
  4016b0:	00404b80 	.word	0x00404b80
  4016b4:	00404b84 	.word	0x00404b84
  4016b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4016ba:	2a01      	cmp	r2, #1
  4016bc:	dc01      	bgt.n	4016c2 <_printf_float+0x31a>
  4016be:	07db      	lsls	r3, r3, #31
  4016c0:	d538      	bpl.n	401734 <_printf_float+0x38c>
  4016c2:	2301      	movs	r3, #1
  4016c4:	4642      	mov	r2, r8
  4016c6:	4631      	mov	r1, r6
  4016c8:	4628      	mov	r0, r5
  4016ca:	47b8      	blx	r7
  4016cc:	3001      	adds	r0, #1
  4016ce:	f43f af12 	beq.w	4014f6 <_printf_float+0x14e>
  4016d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4016d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4016d6:	4631      	mov	r1, r6
  4016d8:	4628      	mov	r0, r5
  4016da:	47b8      	blx	r7
  4016dc:	3001      	adds	r0, #1
  4016de:	f43f af0a 	beq.w	4014f6 <_printf_float+0x14e>
  4016e2:	2200      	movs	r2, #0
  4016e4:	2300      	movs	r3, #0
  4016e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4016ea:	f002 fe87 	bl	4043fc <__aeabi_dcmpeq>
  4016ee:	b120      	cbz	r0, 4016fa <_printf_float+0x352>
  4016f0:	f04f 0800 	mov.w	r8, #0
  4016f4:	f104 091a 	add.w	r9, r4, #26
  4016f8:	e00e      	b.n	401718 <_printf_float+0x370>
  4016fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4016fc:	f108 0201 	add.w	r2, r8, #1
  401700:	3b01      	subs	r3, #1
  401702:	e019      	b.n	401738 <_printf_float+0x390>
  401704:	2301      	movs	r3, #1
  401706:	464a      	mov	r2, r9
  401708:	4631      	mov	r1, r6
  40170a:	4628      	mov	r0, r5
  40170c:	47b8      	blx	r7
  40170e:	3001      	adds	r0, #1
  401710:	f43f aef1 	beq.w	4014f6 <_printf_float+0x14e>
  401714:	f108 0801 	add.w	r8, r8, #1
  401718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40171a:	3b01      	subs	r3, #1
  40171c:	4598      	cmp	r8, r3
  40171e:	dbf1      	blt.n	401704 <_printf_float+0x35c>
  401720:	4653      	mov	r3, sl
  401722:	f104 0250 	add.w	r2, r4, #80	; 0x50
  401726:	4631      	mov	r1, r6
  401728:	4628      	mov	r0, r5
  40172a:	47b8      	blx	r7
  40172c:	3001      	adds	r0, #1
  40172e:	f47f af03 	bne.w	401538 <_printf_float+0x190>
  401732:	e6e0      	b.n	4014f6 <_printf_float+0x14e>
  401734:	2301      	movs	r3, #1
  401736:	4642      	mov	r2, r8
  401738:	4631      	mov	r1, r6
  40173a:	4628      	mov	r0, r5
  40173c:	47b8      	blx	r7
  40173e:	3001      	adds	r0, #1
  401740:	d1ee      	bne.n	401720 <_printf_float+0x378>
  401742:	e6d8      	b.n	4014f6 <_printf_float+0x14e>
  401744:	2301      	movs	r3, #1
  401746:	464a      	mov	r2, r9
  401748:	4631      	mov	r1, r6
  40174a:	4628      	mov	r0, r5
  40174c:	47b8      	blx	r7
  40174e:	3001      	adds	r0, #1
  401750:	f43f aed1 	beq.w	4014f6 <_printf_float+0x14e>
  401754:	f108 0801 	add.w	r8, r8, #1
  401758:	68e3      	ldr	r3, [r4, #12]
  40175a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40175c:	1a9b      	subs	r3, r3, r2
  40175e:	4598      	cmp	r8, r3
  401760:	dbf0      	blt.n	401744 <_printf_float+0x39c>
  401762:	68e0      	ldr	r0, [r4, #12]
  401764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401766:	4298      	cmp	r0, r3
  401768:	bfb8      	it	lt
  40176a:	4618      	movlt	r0, r3
  40176c:	e05d      	b.n	40182a <_printf_float+0x482>
  40176e:	6862      	ldr	r2, [r4, #4]
  401770:	1c53      	adds	r3, r2, #1
  401772:	a80e      	add	r0, sp, #56	; 0x38
  401774:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  401778:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  40177c:	f47f ae74 	bne.w	401468 <_printf_float+0xc0>
  401780:	2206      	movs	r2, #6
  401782:	e001      	b.n	401788 <_printf_float+0x3e0>
  401784:	b912      	cbnz	r2, 40178c <_printf_float+0x3e4>
  401786:	2201      	movs	r2, #1
  401788:	6062      	str	r2, [r4, #4]
  40178a:	e675      	b.n	401478 <_printf_float+0xd0>
  40178c:	2100      	movs	r1, #0
  40178e:	9106      	str	r1, [sp, #24]
  401790:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  401794:	e88d 000c 	stmia.w	sp, {r2, r3}
  401798:	6023      	str	r3, [r4, #0]
  40179a:	9005      	str	r0, [sp, #20]
  40179c:	4642      	mov	r2, r8
  40179e:	f8cd 9010 	str.w	r9, [sp, #16]
  4017a2:	f8cd e00c 	str.w	lr, [sp, #12]
  4017a6:	9102      	str	r1, [sp, #8]
  4017a8:	4653      	mov	r3, sl
  4017aa:	4628      	mov	r0, r5
  4017ac:	f7ff fd6c 	bl	401288 <__cvt>
  4017b0:	4680      	mov	r8, r0
  4017b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4017b4:	1cd8      	adds	r0, r3, #3
  4017b6:	db02      	blt.n	4017be <_printf_float+0x416>
  4017b8:	6862      	ldr	r2, [r4, #4]
  4017ba:	4293      	cmp	r3, r2
  4017bc:	dd1d      	ble.n	4017fa <_printf_float+0x452>
  4017be:	f1a9 0902 	sub.w	r9, r9, #2
  4017c2:	fa5f f989 	uxtb.w	r9, r9
  4017c6:	e670      	b.n	4014aa <_printf_float+0x102>
  4017c8:	3301      	adds	r3, #1
  4017ca:	6123      	str	r3, [r4, #16]
  4017cc:	e684      	b.n	4014d8 <_printf_float+0x130>
  4017ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  4017d2:	d114      	bne.n	4017fe <_printf_float+0x456>
  4017d4:	2900      	cmp	r1, #0
  4017d6:	6863      	ldr	r3, [r4, #4]
  4017d8:	dd07      	ble.n	4017ea <_printf_float+0x442>
  4017da:	6121      	str	r1, [r4, #16]
  4017dc:	b913      	cbnz	r3, 4017e4 <_printf_float+0x43c>
  4017de:	6822      	ldr	r2, [r4, #0]
  4017e0:	07d2      	lsls	r2, r2, #31
  4017e2:	d51d      	bpl.n	401820 <_printf_float+0x478>
  4017e4:	3301      	adds	r3, #1
  4017e6:	440b      	add	r3, r1
  4017e8:	e019      	b.n	40181e <_printf_float+0x476>
  4017ea:	b913      	cbnz	r3, 4017f2 <_printf_float+0x44a>
  4017ec:	6822      	ldr	r2, [r4, #0]
  4017ee:	07d0      	lsls	r0, r2, #31
  4017f0:	d501      	bpl.n	4017f6 <_printf_float+0x44e>
  4017f2:	3302      	adds	r3, #2
  4017f4:	e013      	b.n	40181e <_printf_float+0x476>
  4017f6:	2301      	movs	r3, #1
  4017f8:	e011      	b.n	40181e <_printf_float+0x476>
  4017fa:	f04f 0967 	mov.w	r9, #103	; 0x67
  4017fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401802:	4293      	cmp	r3, r2
  401804:	db05      	blt.n	401812 <_printf_float+0x46a>
  401806:	6822      	ldr	r2, [r4, #0]
  401808:	6123      	str	r3, [r4, #16]
  40180a:	07d1      	lsls	r1, r2, #31
  40180c:	d508      	bpl.n	401820 <_printf_float+0x478>
  40180e:	3301      	adds	r3, #1
  401810:	e005      	b.n	40181e <_printf_float+0x476>
  401812:	2b00      	cmp	r3, #0
  401814:	bfd4      	ite	le
  401816:	f1c3 0302 	rsble	r3, r3, #2
  40181a:	2301      	movgt	r3, #1
  40181c:	4413      	add	r3, r2
  40181e:	6123      	str	r3, [r4, #16]
  401820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401822:	65a3      	str	r3, [r4, #88]	; 0x58
  401824:	f04f 0a00 	mov.w	sl, #0
  401828:	e656      	b.n	4014d8 <_printf_float+0x130>
  40182a:	b011      	add	sp, #68	; 0x44
  40182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00401830 <_printf_common>:
  401830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401834:	4691      	mov	r9, r2
  401836:	461f      	mov	r7, r3
  401838:	690a      	ldr	r2, [r1, #16]
  40183a:	688b      	ldr	r3, [r1, #8]
  40183c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  401840:	4293      	cmp	r3, r2
  401842:	bfb8      	it	lt
  401844:	4613      	movlt	r3, r2
  401846:	f8c9 3000 	str.w	r3, [r9]
  40184a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  40184e:	4606      	mov	r6, r0
  401850:	460c      	mov	r4, r1
  401852:	b112      	cbz	r2, 40185a <_printf_common+0x2a>
  401854:	3301      	adds	r3, #1
  401856:	f8c9 3000 	str.w	r3, [r9]
  40185a:	6823      	ldr	r3, [r4, #0]
  40185c:	0699      	lsls	r1, r3, #26
  40185e:	bf42      	ittt	mi
  401860:	f8d9 3000 	ldrmi.w	r3, [r9]
  401864:	3302      	addmi	r3, #2
  401866:	f8c9 3000 	strmi.w	r3, [r9]
  40186a:	6825      	ldr	r5, [r4, #0]
  40186c:	f015 0506 	ands.w	r5, r5, #6
  401870:	d110      	bne.n	401894 <_printf_common+0x64>
  401872:	f104 0a19 	add.w	sl, r4, #25
  401876:	e007      	b.n	401888 <_printf_common+0x58>
  401878:	2301      	movs	r3, #1
  40187a:	4652      	mov	r2, sl
  40187c:	4639      	mov	r1, r7
  40187e:	4630      	mov	r0, r6
  401880:	47c0      	blx	r8
  401882:	3001      	adds	r0, #1
  401884:	d01a      	beq.n	4018bc <_printf_common+0x8c>
  401886:	3501      	adds	r5, #1
  401888:	68e3      	ldr	r3, [r4, #12]
  40188a:	f8d9 2000 	ldr.w	r2, [r9]
  40188e:	1a9b      	subs	r3, r3, r2
  401890:	429d      	cmp	r5, r3
  401892:	dbf1      	blt.n	401878 <_printf_common+0x48>
  401894:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  401898:	6822      	ldr	r2, [r4, #0]
  40189a:	3300      	adds	r3, #0
  40189c:	bf18      	it	ne
  40189e:	2301      	movne	r3, #1
  4018a0:	0692      	lsls	r2, r2, #26
  4018a2:	d50f      	bpl.n	4018c4 <_printf_common+0x94>
  4018a4:	18e1      	adds	r1, r4, r3
  4018a6:	1c5a      	adds	r2, r3, #1
  4018a8:	2030      	movs	r0, #48	; 0x30
  4018aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4018ae:	4422      	add	r2, r4
  4018b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4018b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4018b8:	3302      	adds	r3, #2
  4018ba:	e003      	b.n	4018c4 <_printf_common+0x94>
  4018bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4018c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4018c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4018c8:	4639      	mov	r1, r7
  4018ca:	4630      	mov	r0, r6
  4018cc:	47c0      	blx	r8
  4018ce:	3001      	adds	r0, #1
  4018d0:	d0f4      	beq.n	4018bc <_printf_common+0x8c>
  4018d2:	6822      	ldr	r2, [r4, #0]
  4018d4:	f8d9 5000 	ldr.w	r5, [r9]
  4018d8:	68e3      	ldr	r3, [r4, #12]
  4018da:	f002 0206 	and.w	r2, r2, #6
  4018de:	2a04      	cmp	r2, #4
  4018e0:	bf08      	it	eq
  4018e2:	1b5d      	subeq	r5, r3, r5
  4018e4:	6922      	ldr	r2, [r4, #16]
  4018e6:	68a3      	ldr	r3, [r4, #8]
  4018e8:	bf0c      	ite	eq
  4018ea:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4018ee:	2500      	movne	r5, #0
  4018f0:	4293      	cmp	r3, r2
  4018f2:	bfc4      	itt	gt
  4018f4:	1a9b      	subgt	r3, r3, r2
  4018f6:	18ed      	addgt	r5, r5, r3
  4018f8:	f04f 0900 	mov.w	r9, #0
  4018fc:	341a      	adds	r4, #26
  4018fe:	454d      	cmp	r5, r9
  401900:	d009      	beq.n	401916 <_printf_common+0xe6>
  401902:	2301      	movs	r3, #1
  401904:	4622      	mov	r2, r4
  401906:	4639      	mov	r1, r7
  401908:	4630      	mov	r0, r6
  40190a:	47c0      	blx	r8
  40190c:	3001      	adds	r0, #1
  40190e:	d0d5      	beq.n	4018bc <_printf_common+0x8c>
  401910:	f109 0901 	add.w	r9, r9, #1
  401914:	e7f3      	b.n	4018fe <_printf_common+0xce>
  401916:	2000      	movs	r0, #0
  401918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040191c <_printf_i>:
  40191c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401920:	4617      	mov	r7, r2
  401922:	7e0a      	ldrb	r2, [r1, #24]
  401924:	b085      	sub	sp, #20
  401926:	2a6e      	cmp	r2, #110	; 0x6e
  401928:	4698      	mov	r8, r3
  40192a:	4606      	mov	r6, r0
  40192c:	460c      	mov	r4, r1
  40192e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401930:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  401934:	f000 80ae 	beq.w	401a94 <_printf_i+0x178>
  401938:	d811      	bhi.n	40195e <_printf_i+0x42>
  40193a:	2a63      	cmp	r2, #99	; 0x63
  40193c:	d022      	beq.n	401984 <_printf_i+0x68>
  40193e:	d809      	bhi.n	401954 <_printf_i+0x38>
  401940:	2a00      	cmp	r2, #0
  401942:	f000 80bb 	beq.w	401abc <_printf_i+0x1a0>
  401946:	2a58      	cmp	r2, #88	; 0x58
  401948:	f040 80ca 	bne.w	401ae0 <_printf_i+0x1c4>
  40194c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  401950:	4983      	ldr	r1, [pc, #524]	; (401b60 <_printf_i+0x244>)
  401952:	e055      	b.n	401a00 <_printf_i+0xe4>
  401954:	2a64      	cmp	r2, #100	; 0x64
  401956:	d01e      	beq.n	401996 <_printf_i+0x7a>
  401958:	2a69      	cmp	r2, #105	; 0x69
  40195a:	d01c      	beq.n	401996 <_printf_i+0x7a>
  40195c:	e0c0      	b.n	401ae0 <_printf_i+0x1c4>
  40195e:	2a73      	cmp	r2, #115	; 0x73
  401960:	f000 80b0 	beq.w	401ac4 <_printf_i+0x1a8>
  401964:	d809      	bhi.n	40197a <_printf_i+0x5e>
  401966:	2a6f      	cmp	r2, #111	; 0x6f
  401968:	d02e      	beq.n	4019c8 <_printf_i+0xac>
  40196a:	2a70      	cmp	r2, #112	; 0x70
  40196c:	f040 80b8 	bne.w	401ae0 <_printf_i+0x1c4>
  401970:	680a      	ldr	r2, [r1, #0]
  401972:	f042 0220 	orr.w	r2, r2, #32
  401976:	600a      	str	r2, [r1, #0]
  401978:	e03e      	b.n	4019f8 <_printf_i+0xdc>
  40197a:	2a75      	cmp	r2, #117	; 0x75
  40197c:	d024      	beq.n	4019c8 <_printf_i+0xac>
  40197e:	2a78      	cmp	r2, #120	; 0x78
  401980:	d03a      	beq.n	4019f8 <_printf_i+0xdc>
  401982:	e0ad      	b.n	401ae0 <_printf_i+0x1c4>
  401984:	681a      	ldr	r2, [r3, #0]
  401986:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40198a:	1d11      	adds	r1, r2, #4
  40198c:	6019      	str	r1, [r3, #0]
  40198e:	6813      	ldr	r3, [r2, #0]
  401990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  401994:	e0a8      	b.n	401ae8 <_printf_i+0x1cc>
  401996:	6821      	ldr	r1, [r4, #0]
  401998:	681a      	ldr	r2, [r3, #0]
  40199a:	f011 0f80 	tst.w	r1, #128	; 0x80
  40199e:	d002      	beq.n	4019a6 <_printf_i+0x8a>
  4019a0:	1d11      	adds	r1, r2, #4
  4019a2:	6019      	str	r1, [r3, #0]
  4019a4:	e008      	b.n	4019b8 <_printf_i+0x9c>
  4019a6:	f011 0f40 	tst.w	r1, #64	; 0x40
  4019aa:	f102 0104 	add.w	r1, r2, #4
  4019ae:	6019      	str	r1, [r3, #0]
  4019b0:	d002      	beq.n	4019b8 <_printf_i+0x9c>
  4019b2:	f9b2 3000 	ldrsh.w	r3, [r2]
  4019b6:	e000      	b.n	4019ba <_printf_i+0x9e>
  4019b8:	6813      	ldr	r3, [r2, #0]
  4019ba:	2b00      	cmp	r3, #0
  4019bc:	da3c      	bge.n	401a38 <_printf_i+0x11c>
  4019be:	222d      	movs	r2, #45	; 0x2d
  4019c0:	425b      	negs	r3, r3
  4019c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4019c6:	e037      	b.n	401a38 <_printf_i+0x11c>
  4019c8:	6821      	ldr	r1, [r4, #0]
  4019ca:	681a      	ldr	r2, [r3, #0]
  4019cc:	f011 0f80 	tst.w	r1, #128	; 0x80
  4019d0:	d002      	beq.n	4019d8 <_printf_i+0xbc>
  4019d2:	1d11      	adds	r1, r2, #4
  4019d4:	6019      	str	r1, [r3, #0]
  4019d6:	e007      	b.n	4019e8 <_printf_i+0xcc>
  4019d8:	f011 0f40 	tst.w	r1, #64	; 0x40
  4019dc:	f102 0104 	add.w	r1, r2, #4
  4019e0:	6019      	str	r1, [r3, #0]
  4019e2:	d001      	beq.n	4019e8 <_printf_i+0xcc>
  4019e4:	8813      	ldrh	r3, [r2, #0]
  4019e6:	e000      	b.n	4019ea <_printf_i+0xce>
  4019e8:	6813      	ldr	r3, [r2, #0]
  4019ea:	7e22      	ldrb	r2, [r4, #24]
  4019ec:	495c      	ldr	r1, [pc, #368]	; (401b60 <_printf_i+0x244>)
  4019ee:	2a6f      	cmp	r2, #111	; 0x6f
  4019f0:	bf14      	ite	ne
  4019f2:	220a      	movne	r2, #10
  4019f4:	2208      	moveq	r2, #8
  4019f6:	e01b      	b.n	401a30 <_printf_i+0x114>
  4019f8:	2278      	movs	r2, #120	; 0x78
  4019fa:	495a      	ldr	r1, [pc, #360]	; (401b64 <_printf_i+0x248>)
  4019fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  401a00:	6822      	ldr	r2, [r4, #0]
  401a02:	6818      	ldr	r0, [r3, #0]
  401a04:	f012 0f80 	tst.w	r2, #128	; 0x80
  401a08:	f100 0504 	add.w	r5, r0, #4
  401a0c:	601d      	str	r5, [r3, #0]
  401a0e:	d103      	bne.n	401a18 <_printf_i+0xfc>
  401a10:	0655      	lsls	r5, r2, #25
  401a12:	d501      	bpl.n	401a18 <_printf_i+0xfc>
  401a14:	8803      	ldrh	r3, [r0, #0]
  401a16:	e000      	b.n	401a1a <_printf_i+0xfe>
  401a18:	6803      	ldr	r3, [r0, #0]
  401a1a:	07d0      	lsls	r0, r2, #31
  401a1c:	bf44      	itt	mi
  401a1e:	f042 0220 	orrmi.w	r2, r2, #32
  401a22:	6022      	strmi	r2, [r4, #0]
  401a24:	b91b      	cbnz	r3, 401a2e <_printf_i+0x112>
  401a26:	6822      	ldr	r2, [r4, #0]
  401a28:	f022 0220 	bic.w	r2, r2, #32
  401a2c:	6022      	str	r2, [r4, #0]
  401a2e:	2210      	movs	r2, #16
  401a30:	2000      	movs	r0, #0
  401a32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  401a36:	e001      	b.n	401a3c <_printf_i+0x120>
  401a38:	4949      	ldr	r1, [pc, #292]	; (401b60 <_printf_i+0x244>)
  401a3a:	220a      	movs	r2, #10
  401a3c:	6865      	ldr	r5, [r4, #4]
  401a3e:	60a5      	str	r5, [r4, #8]
  401a40:	2d00      	cmp	r5, #0
  401a42:	db08      	blt.n	401a56 <_printf_i+0x13a>
  401a44:	6820      	ldr	r0, [r4, #0]
  401a46:	f020 0004 	bic.w	r0, r0, #4
  401a4a:	6020      	str	r0, [r4, #0]
  401a4c:	b92b      	cbnz	r3, 401a5a <_printf_i+0x13e>
  401a4e:	2d00      	cmp	r5, #0
  401a50:	d17d      	bne.n	401b4e <_printf_i+0x232>
  401a52:	4675      	mov	r5, lr
  401a54:	e00c      	b.n	401a70 <_printf_i+0x154>
  401a56:	2b00      	cmp	r3, #0
  401a58:	d079      	beq.n	401b4e <_printf_i+0x232>
  401a5a:	4675      	mov	r5, lr
  401a5c:	fbb3 f0f2 	udiv	r0, r3, r2
  401a60:	fb02 3310 	mls	r3, r2, r0, r3
  401a64:	5ccb      	ldrb	r3, [r1, r3]
  401a66:	f805 3d01 	strb.w	r3, [r5, #-1]!
  401a6a:	4603      	mov	r3, r0
  401a6c:	2800      	cmp	r0, #0
  401a6e:	d1f5      	bne.n	401a5c <_printf_i+0x140>
  401a70:	2a08      	cmp	r2, #8
  401a72:	d10b      	bne.n	401a8c <_printf_i+0x170>
  401a74:	6823      	ldr	r3, [r4, #0]
  401a76:	07da      	lsls	r2, r3, #31
  401a78:	d508      	bpl.n	401a8c <_printf_i+0x170>
  401a7a:	6923      	ldr	r3, [r4, #16]
  401a7c:	6862      	ldr	r2, [r4, #4]
  401a7e:	429a      	cmp	r2, r3
  401a80:	bfde      	ittt	le
  401a82:	2330      	movle	r3, #48	; 0x30
  401a84:	f805 3c01 	strble.w	r3, [r5, #-1]
  401a88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  401a8c:	ebc5 030e 	rsb	r3, r5, lr
  401a90:	6123      	str	r3, [r4, #16]
  401a92:	e02e      	b.n	401af2 <_printf_i+0x1d6>
  401a94:	6808      	ldr	r0, [r1, #0]
  401a96:	681a      	ldr	r2, [r3, #0]
  401a98:	6949      	ldr	r1, [r1, #20]
  401a9a:	f010 0f80 	tst.w	r0, #128	; 0x80
  401a9e:	d003      	beq.n	401aa8 <_printf_i+0x18c>
  401aa0:	1d10      	adds	r0, r2, #4
  401aa2:	6018      	str	r0, [r3, #0]
  401aa4:	6813      	ldr	r3, [r2, #0]
  401aa6:	e008      	b.n	401aba <_printf_i+0x19e>
  401aa8:	f010 0f40 	tst.w	r0, #64	; 0x40
  401aac:	f102 0004 	add.w	r0, r2, #4
  401ab0:	6018      	str	r0, [r3, #0]
  401ab2:	6813      	ldr	r3, [r2, #0]
  401ab4:	d001      	beq.n	401aba <_printf_i+0x19e>
  401ab6:	8019      	strh	r1, [r3, #0]
  401ab8:	e000      	b.n	401abc <_printf_i+0x1a0>
  401aba:	6019      	str	r1, [r3, #0]
  401abc:	2300      	movs	r3, #0
  401abe:	6123      	str	r3, [r4, #16]
  401ac0:	4675      	mov	r5, lr
  401ac2:	e016      	b.n	401af2 <_printf_i+0x1d6>
  401ac4:	681a      	ldr	r2, [r3, #0]
  401ac6:	1d11      	adds	r1, r2, #4
  401ac8:	6019      	str	r1, [r3, #0]
  401aca:	6815      	ldr	r5, [r2, #0]
  401acc:	6862      	ldr	r2, [r4, #4]
  401ace:	2100      	movs	r1, #0
  401ad0:	4628      	mov	r0, r5
  401ad2:	f001 fa65 	bl	402fa0 <memchr>
  401ad6:	b108      	cbz	r0, 401adc <_printf_i+0x1c0>
  401ad8:	1b40      	subs	r0, r0, r5
  401ada:	6060      	str	r0, [r4, #4]
  401adc:	6863      	ldr	r3, [r4, #4]
  401ade:	e004      	b.n	401aea <_printf_i+0x1ce>
  401ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  401ae4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  401ae8:	2301      	movs	r3, #1
  401aea:	6123      	str	r3, [r4, #16]
  401aec:	2300      	movs	r3, #0
  401aee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401af2:	f8cd 8000 	str.w	r8, [sp]
  401af6:	463b      	mov	r3, r7
  401af8:	aa03      	add	r2, sp, #12
  401afa:	4621      	mov	r1, r4
  401afc:	4630      	mov	r0, r6
  401afe:	f7ff fe97 	bl	401830 <_printf_common>
  401b02:	3001      	adds	r0, #1
  401b04:	d102      	bne.n	401b0c <_printf_i+0x1f0>
  401b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401b0a:	e026      	b.n	401b5a <_printf_i+0x23e>
  401b0c:	6923      	ldr	r3, [r4, #16]
  401b0e:	462a      	mov	r2, r5
  401b10:	4639      	mov	r1, r7
  401b12:	4630      	mov	r0, r6
  401b14:	47c0      	blx	r8
  401b16:	3001      	adds	r0, #1
  401b18:	d0f5      	beq.n	401b06 <_printf_i+0x1ea>
  401b1a:	6823      	ldr	r3, [r4, #0]
  401b1c:	079b      	lsls	r3, r3, #30
  401b1e:	d510      	bpl.n	401b42 <_printf_i+0x226>
  401b20:	2500      	movs	r5, #0
  401b22:	f104 0919 	add.w	r9, r4, #25
  401b26:	e007      	b.n	401b38 <_printf_i+0x21c>
  401b28:	2301      	movs	r3, #1
  401b2a:	464a      	mov	r2, r9
  401b2c:	4639      	mov	r1, r7
  401b2e:	4630      	mov	r0, r6
  401b30:	47c0      	blx	r8
  401b32:	3001      	adds	r0, #1
  401b34:	d0e7      	beq.n	401b06 <_printf_i+0x1ea>
  401b36:	3501      	adds	r5, #1
  401b38:	68e3      	ldr	r3, [r4, #12]
  401b3a:	9a03      	ldr	r2, [sp, #12]
  401b3c:	1a9b      	subs	r3, r3, r2
  401b3e:	429d      	cmp	r5, r3
  401b40:	dbf2      	blt.n	401b28 <_printf_i+0x20c>
  401b42:	68e0      	ldr	r0, [r4, #12]
  401b44:	9b03      	ldr	r3, [sp, #12]
  401b46:	4298      	cmp	r0, r3
  401b48:	bfb8      	it	lt
  401b4a:	4618      	movlt	r0, r3
  401b4c:	e005      	b.n	401b5a <_printf_i+0x23e>
  401b4e:	780b      	ldrb	r3, [r1, #0]
  401b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  401b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
  401b58:	e78a      	b.n	401a70 <_printf_i+0x154>
  401b5a:	b005      	add	sp, #20
  401b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401b60:	00404b86 	.word	0x00404b86
  401b64:	00404b97 	.word	0x00404b97

00401b68 <iprintf>:
  401b68:	b40f      	push	{r0, r1, r2, r3}
  401b6a:	4b0a      	ldr	r3, [pc, #40]	; (401b94 <iprintf+0x2c>)
  401b6c:	b513      	push	{r0, r1, r4, lr}
  401b6e:	681c      	ldr	r4, [r3, #0]
  401b70:	b124      	cbz	r4, 401b7c <iprintf+0x14>
  401b72:	69a3      	ldr	r3, [r4, #24]
  401b74:	b913      	cbnz	r3, 401b7c <iprintf+0x14>
  401b76:	4620      	mov	r0, r4
  401b78:	f001 f90c 	bl	402d94 <__sinit>
  401b7c:	ab05      	add	r3, sp, #20
  401b7e:	9a04      	ldr	r2, [sp, #16]
  401b80:	68a1      	ldr	r1, [r4, #8]
  401b82:	9301      	str	r3, [sp, #4]
  401b84:	4620      	mov	r0, r4
  401b86:	f001 fe1f 	bl	4037c8 <_vfiprintf_r>
  401b8a:	b002      	add	sp, #8
  401b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401b90:	b004      	add	sp, #16
  401b92:	4770      	bx	lr
  401b94:	20000070 	.word	0x20000070

00401b98 <_puts_r>:
  401b98:	b570      	push	{r4, r5, r6, lr}
  401b9a:	460e      	mov	r6, r1
  401b9c:	4605      	mov	r5, r0
  401b9e:	b118      	cbz	r0, 401ba8 <_puts_r+0x10>
  401ba0:	6983      	ldr	r3, [r0, #24]
  401ba2:	b90b      	cbnz	r3, 401ba8 <_puts_r+0x10>
  401ba4:	f001 f8f6 	bl	402d94 <__sinit>
  401ba8:	69ab      	ldr	r3, [r5, #24]
  401baa:	68ac      	ldr	r4, [r5, #8]
  401bac:	b913      	cbnz	r3, 401bb4 <_puts_r+0x1c>
  401bae:	4628      	mov	r0, r5
  401bb0:	f001 f8f0 	bl	402d94 <__sinit>
  401bb4:	4b22      	ldr	r3, [pc, #136]	; (401c40 <_puts_r+0xa8>)
  401bb6:	429c      	cmp	r4, r3
  401bb8:	d101      	bne.n	401bbe <_puts_r+0x26>
  401bba:	686c      	ldr	r4, [r5, #4]
  401bbc:	e008      	b.n	401bd0 <_puts_r+0x38>
  401bbe:	4b21      	ldr	r3, [pc, #132]	; (401c44 <_puts_r+0xac>)
  401bc0:	429c      	cmp	r4, r3
  401bc2:	d101      	bne.n	401bc8 <_puts_r+0x30>
  401bc4:	68ac      	ldr	r4, [r5, #8]
  401bc6:	e003      	b.n	401bd0 <_puts_r+0x38>
  401bc8:	4b1f      	ldr	r3, [pc, #124]	; (401c48 <_puts_r+0xb0>)
  401bca:	429c      	cmp	r4, r3
  401bcc:	bf08      	it	eq
  401bce:	68ec      	ldreq	r4, [r5, #12]
  401bd0:	89a3      	ldrh	r3, [r4, #12]
  401bd2:	071b      	lsls	r3, r3, #28
  401bd4:	d501      	bpl.n	401bda <_puts_r+0x42>
  401bd6:	6923      	ldr	r3, [r4, #16]
  401bd8:	b93b      	cbnz	r3, 401bea <_puts_r+0x52>
  401bda:	4621      	mov	r1, r4
  401bdc:	4628      	mov	r0, r5
  401bde:	f000 f94b 	bl	401e78 <__swsetup_r>
  401be2:	b110      	cbz	r0, 401bea <_puts_r+0x52>
  401be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401be8:	bd70      	pop	{r4, r5, r6, pc}
  401bea:	3e01      	subs	r6, #1
  401bec:	68a3      	ldr	r3, [r4, #8]
  401bee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  401bf2:	3b01      	subs	r3, #1
  401bf4:	60a3      	str	r3, [r4, #8]
  401bf6:	b191      	cbz	r1, 401c1e <_puts_r+0x86>
  401bf8:	2b00      	cmp	r3, #0
  401bfa:	da04      	bge.n	401c06 <_puts_r+0x6e>
  401bfc:	69a2      	ldr	r2, [r4, #24]
  401bfe:	4293      	cmp	r3, r2
  401c00:	db06      	blt.n	401c10 <_puts_r+0x78>
  401c02:	290a      	cmp	r1, #10
  401c04:	d004      	beq.n	401c10 <_puts_r+0x78>
  401c06:	6823      	ldr	r3, [r4, #0]
  401c08:	1c5a      	adds	r2, r3, #1
  401c0a:	6022      	str	r2, [r4, #0]
  401c0c:	7019      	strb	r1, [r3, #0]
  401c0e:	e7ed      	b.n	401bec <_puts_r+0x54>
  401c10:	4622      	mov	r2, r4
  401c12:	4628      	mov	r0, r5
  401c14:	f000 f8dc 	bl	401dd0 <__swbuf_r>
  401c18:	3001      	adds	r0, #1
  401c1a:	d1e7      	bne.n	401bec <_puts_r+0x54>
  401c1c:	e7e2      	b.n	401be4 <_puts_r+0x4c>
  401c1e:	2b00      	cmp	r3, #0
  401c20:	da08      	bge.n	401c34 <_puts_r+0x9c>
  401c22:	4622      	mov	r2, r4
  401c24:	210a      	movs	r1, #10
  401c26:	4628      	mov	r0, r5
  401c28:	f000 f8d2 	bl	401dd0 <__swbuf_r>
  401c2c:	3001      	adds	r0, #1
  401c2e:	d0d9      	beq.n	401be4 <_puts_r+0x4c>
  401c30:	200a      	movs	r0, #10
  401c32:	bd70      	pop	{r4, r5, r6, pc}
  401c34:	6823      	ldr	r3, [r4, #0]
  401c36:	200a      	movs	r0, #10
  401c38:	1c5a      	adds	r2, r3, #1
  401c3a:	6022      	str	r2, [r4, #0]
  401c3c:	7018      	strb	r0, [r3, #0]
  401c3e:	bd70      	pop	{r4, r5, r6, pc}
  401c40:	00404bb8 	.word	0x00404bb8
  401c44:	00404bd8 	.word	0x00404bd8
  401c48:	00404bf8 	.word	0x00404bf8

00401c4c <puts>:
  401c4c:	4b02      	ldr	r3, [pc, #8]	; (401c58 <puts+0xc>)
  401c4e:	4601      	mov	r1, r0
  401c50:	6818      	ldr	r0, [r3, #0]
  401c52:	f7ff bfa1 	b.w	401b98 <_puts_r>
  401c56:	bf00      	nop
  401c58:	20000070 	.word	0x20000070

00401c5c <setbuf>:
  401c5c:	2900      	cmp	r1, #0
  401c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401c62:	bf0c      	ite	eq
  401c64:	2202      	moveq	r2, #2
  401c66:	2200      	movne	r2, #0
  401c68:	f000 b800 	b.w	401c6c <setvbuf>

00401c6c <setvbuf>:
  401c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  401c70:	461d      	mov	r5, r3
  401c72:	4b4f      	ldr	r3, [pc, #316]	; (401db0 <setvbuf+0x144>)
  401c74:	681e      	ldr	r6, [r3, #0]
  401c76:	4604      	mov	r4, r0
  401c78:	460f      	mov	r7, r1
  401c7a:	4690      	mov	r8, r2
  401c7c:	b126      	cbz	r6, 401c88 <setvbuf+0x1c>
  401c7e:	69b3      	ldr	r3, [r6, #24]
  401c80:	b913      	cbnz	r3, 401c88 <setvbuf+0x1c>
  401c82:	4630      	mov	r0, r6
  401c84:	f001 f886 	bl	402d94 <__sinit>
  401c88:	4b4a      	ldr	r3, [pc, #296]	; (401db4 <setvbuf+0x148>)
  401c8a:	429c      	cmp	r4, r3
  401c8c:	d101      	bne.n	401c92 <setvbuf+0x26>
  401c8e:	6874      	ldr	r4, [r6, #4]
  401c90:	e008      	b.n	401ca4 <setvbuf+0x38>
  401c92:	4b49      	ldr	r3, [pc, #292]	; (401db8 <setvbuf+0x14c>)
  401c94:	429c      	cmp	r4, r3
  401c96:	d101      	bne.n	401c9c <setvbuf+0x30>
  401c98:	68b4      	ldr	r4, [r6, #8]
  401c9a:	e003      	b.n	401ca4 <setvbuf+0x38>
  401c9c:	4b47      	ldr	r3, [pc, #284]	; (401dbc <setvbuf+0x150>)
  401c9e:	429c      	cmp	r4, r3
  401ca0:	bf08      	it	eq
  401ca2:	68f4      	ldreq	r4, [r6, #12]
  401ca4:	f1b8 0f02 	cmp.w	r8, #2
  401ca8:	d004      	beq.n	401cb4 <setvbuf+0x48>
  401caa:	f1b8 0f01 	cmp.w	r8, #1
  401cae:	d879      	bhi.n	401da4 <setvbuf+0x138>
  401cb0:	2d00      	cmp	r5, #0
  401cb2:	db77      	blt.n	401da4 <setvbuf+0x138>
  401cb4:	4621      	mov	r1, r4
  401cb6:	4630      	mov	r0, r6
  401cb8:	f001 f802 	bl	402cc0 <_fflush_r>
  401cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401cbe:	b141      	cbz	r1, 401cd2 <setvbuf+0x66>
  401cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401cc4:	4299      	cmp	r1, r3
  401cc6:	d002      	beq.n	401cce <setvbuf+0x62>
  401cc8:	4630      	mov	r0, r6
  401cca:	f001 fca9 	bl	403620 <_free_r>
  401cce:	2300      	movs	r3, #0
  401cd0:	6363      	str	r3, [r4, #52]	; 0x34
  401cd2:	2300      	movs	r3, #0
  401cd4:	61a3      	str	r3, [r4, #24]
  401cd6:	6063      	str	r3, [r4, #4]
  401cd8:	89a3      	ldrh	r3, [r4, #12]
  401cda:	061b      	lsls	r3, r3, #24
  401cdc:	d503      	bpl.n	401ce6 <setvbuf+0x7a>
  401cde:	6921      	ldr	r1, [r4, #16]
  401ce0:	4630      	mov	r0, r6
  401ce2:	f001 fc9d 	bl	403620 <_free_r>
  401ce6:	89a3      	ldrh	r3, [r4, #12]
  401ce8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401cec:	f023 0303 	bic.w	r3, r3, #3
  401cf0:	f1b8 0f02 	cmp.w	r8, #2
  401cf4:	81a3      	strh	r3, [r4, #12]
  401cf6:	d01e      	beq.n	401d36 <setvbuf+0xca>
  401cf8:	ab01      	add	r3, sp, #4
  401cfa:	466a      	mov	r2, sp
  401cfc:	4621      	mov	r1, r4
  401cfe:	4630      	mov	r0, r6
  401d00:	f001 f8e0 	bl	402ec4 <__swhatbuf_r>
  401d04:	89a3      	ldrh	r3, [r4, #12]
  401d06:	4318      	orrs	r0, r3
  401d08:	81a0      	strh	r0, [r4, #12]
  401d0a:	b90d      	cbnz	r5, 401d10 <setvbuf+0xa4>
  401d0c:	9d00      	ldr	r5, [sp, #0]
  401d0e:	e000      	b.n	401d12 <setvbuf+0xa6>
  401d10:	bb2f      	cbnz	r7, 401d5e <setvbuf+0xf2>
  401d12:	4628      	mov	r0, r5
  401d14:	f001 f936 	bl	402f84 <malloc>
  401d18:	4607      	mov	r7, r0
  401d1a:	b9d0      	cbnz	r0, 401d52 <setvbuf+0xe6>
  401d1c:	f8dd 9000 	ldr.w	r9, [sp]
  401d20:	45a9      	cmp	r9, r5
  401d22:	d102      	bne.n	401d2a <setvbuf+0xbe>
  401d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401d28:	e006      	b.n	401d38 <setvbuf+0xcc>
  401d2a:	4648      	mov	r0, r9
  401d2c:	f001 f92a 	bl	402f84 <malloc>
  401d30:	4607      	mov	r7, r0
  401d32:	b978      	cbnz	r0, 401d54 <setvbuf+0xe8>
  401d34:	e7f6      	b.n	401d24 <setvbuf+0xb8>
  401d36:	2000      	movs	r0, #0
  401d38:	89a3      	ldrh	r3, [r4, #12]
  401d3a:	f043 0302 	orr.w	r3, r3, #2
  401d3e:	81a3      	strh	r3, [r4, #12]
  401d40:	2300      	movs	r3, #0
  401d42:	60a3      	str	r3, [r4, #8]
  401d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
  401d48:	6023      	str	r3, [r4, #0]
  401d4a:	6123      	str	r3, [r4, #16]
  401d4c:	2301      	movs	r3, #1
  401d4e:	6163      	str	r3, [r4, #20]
  401d50:	e02a      	b.n	401da8 <setvbuf+0x13c>
  401d52:	46a9      	mov	r9, r5
  401d54:	89a3      	ldrh	r3, [r4, #12]
  401d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401d5a:	81a3      	strh	r3, [r4, #12]
  401d5c:	464d      	mov	r5, r9
  401d5e:	69b3      	ldr	r3, [r6, #24]
  401d60:	b913      	cbnz	r3, 401d68 <setvbuf+0xfc>
  401d62:	4630      	mov	r0, r6
  401d64:	f001 f816 	bl	402d94 <__sinit>
  401d68:	f1b8 0f01 	cmp.w	r8, #1
  401d6c:	bf08      	it	eq
  401d6e:	89a3      	ldrheq	r3, [r4, #12]
  401d70:	6027      	str	r7, [r4, #0]
  401d72:	bf04      	itt	eq
  401d74:	f043 0301 	orreq.w	r3, r3, #1
  401d78:	81a3      	strheq	r3, [r4, #12]
  401d7a:	89a3      	ldrh	r3, [r4, #12]
  401d7c:	6127      	str	r7, [r4, #16]
  401d7e:	f003 0008 	and.w	r0, r3, #8
  401d82:	b280      	uxth	r0, r0
  401d84:	6165      	str	r5, [r4, #20]
  401d86:	b158      	cbz	r0, 401da0 <setvbuf+0x134>
  401d88:	f013 0301 	ands.w	r3, r3, #1
  401d8c:	f04f 0000 	mov.w	r0, #0
  401d90:	bf1d      	ittte	ne
  401d92:	426d      	negne	r5, r5
  401d94:	60a0      	strne	r0, [r4, #8]
  401d96:	61a5      	strne	r5, [r4, #24]
  401d98:	60a5      	streq	r5, [r4, #8]
  401d9a:	bf08      	it	eq
  401d9c:	4618      	moveq	r0, r3
  401d9e:	e003      	b.n	401da8 <setvbuf+0x13c>
  401da0:	60a0      	str	r0, [r4, #8]
  401da2:	e001      	b.n	401da8 <setvbuf+0x13c>
  401da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401da8:	b003      	add	sp, #12
  401daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401dae:	bf00      	nop
  401db0:	20000070 	.word	0x20000070
  401db4:	00404bb8 	.word	0x00404bb8
  401db8:	00404bd8 	.word	0x00404bd8
  401dbc:	00404bf8 	.word	0x00404bf8

00401dc0 <strlen>:
  401dc0:	4603      	mov	r3, r0
  401dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
  401dc6:	2a00      	cmp	r2, #0
  401dc8:	d1fb      	bne.n	401dc2 <strlen+0x2>
  401dca:	1a18      	subs	r0, r3, r0
  401dcc:	3801      	subs	r0, #1
  401dce:	4770      	bx	lr

00401dd0 <__swbuf_r>:
  401dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401dd2:	460f      	mov	r7, r1
  401dd4:	4614      	mov	r4, r2
  401dd6:	4605      	mov	r5, r0
  401dd8:	b118      	cbz	r0, 401de2 <__swbuf_r+0x12>
  401dda:	6983      	ldr	r3, [r0, #24]
  401ddc:	b90b      	cbnz	r3, 401de2 <__swbuf_r+0x12>
  401dde:	f000 ffd9 	bl	402d94 <__sinit>
  401de2:	4b22      	ldr	r3, [pc, #136]	; (401e6c <__swbuf_r+0x9c>)
  401de4:	429c      	cmp	r4, r3
  401de6:	d101      	bne.n	401dec <__swbuf_r+0x1c>
  401de8:	686c      	ldr	r4, [r5, #4]
  401dea:	e008      	b.n	401dfe <__swbuf_r+0x2e>
  401dec:	4b20      	ldr	r3, [pc, #128]	; (401e70 <__swbuf_r+0xa0>)
  401dee:	429c      	cmp	r4, r3
  401df0:	d101      	bne.n	401df6 <__swbuf_r+0x26>
  401df2:	68ac      	ldr	r4, [r5, #8]
  401df4:	e003      	b.n	401dfe <__swbuf_r+0x2e>
  401df6:	4b1f      	ldr	r3, [pc, #124]	; (401e74 <__swbuf_r+0xa4>)
  401df8:	429c      	cmp	r4, r3
  401dfa:	bf08      	it	eq
  401dfc:	68ec      	ldreq	r4, [r5, #12]
  401dfe:	69a3      	ldr	r3, [r4, #24]
  401e00:	60a3      	str	r3, [r4, #8]
  401e02:	89a3      	ldrh	r3, [r4, #12]
  401e04:	071a      	lsls	r2, r3, #28
  401e06:	d509      	bpl.n	401e1c <__swbuf_r+0x4c>
  401e08:	6923      	ldr	r3, [r4, #16]
  401e0a:	b13b      	cbz	r3, 401e1c <__swbuf_r+0x4c>
  401e0c:	6823      	ldr	r3, [r4, #0]
  401e0e:	6920      	ldr	r0, [r4, #16]
  401e10:	1a18      	subs	r0, r3, r0
  401e12:	6963      	ldr	r3, [r4, #20]
  401e14:	4298      	cmp	r0, r3
  401e16:	b2fe      	uxtb	r6, r7
  401e18:	db0f      	blt.n	401e3a <__swbuf_r+0x6a>
  401e1a:	e008      	b.n	401e2e <__swbuf_r+0x5e>
  401e1c:	4621      	mov	r1, r4
  401e1e:	4628      	mov	r0, r5
  401e20:	f000 f82a 	bl	401e78 <__swsetup_r>
  401e24:	2800      	cmp	r0, #0
  401e26:	d0f1      	beq.n	401e0c <__swbuf_r+0x3c>
  401e28:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  401e2c:	e01b      	b.n	401e66 <__swbuf_r+0x96>
  401e2e:	4621      	mov	r1, r4
  401e30:	4628      	mov	r0, r5
  401e32:	f000 ff45 	bl	402cc0 <_fflush_r>
  401e36:	2800      	cmp	r0, #0
  401e38:	d1f6      	bne.n	401e28 <__swbuf_r+0x58>
  401e3a:	68a3      	ldr	r3, [r4, #8]
  401e3c:	3b01      	subs	r3, #1
  401e3e:	60a3      	str	r3, [r4, #8]
  401e40:	6823      	ldr	r3, [r4, #0]
  401e42:	1c5a      	adds	r2, r3, #1
  401e44:	6022      	str	r2, [r4, #0]
  401e46:	701f      	strb	r7, [r3, #0]
  401e48:	6963      	ldr	r3, [r4, #20]
  401e4a:	3001      	adds	r0, #1
  401e4c:	4298      	cmp	r0, r3
  401e4e:	d004      	beq.n	401e5a <__swbuf_r+0x8a>
  401e50:	89a3      	ldrh	r3, [r4, #12]
  401e52:	07db      	lsls	r3, r3, #31
  401e54:	d507      	bpl.n	401e66 <__swbuf_r+0x96>
  401e56:	2e0a      	cmp	r6, #10
  401e58:	d105      	bne.n	401e66 <__swbuf_r+0x96>
  401e5a:	4621      	mov	r1, r4
  401e5c:	4628      	mov	r0, r5
  401e5e:	f000 ff2f 	bl	402cc0 <_fflush_r>
  401e62:	2800      	cmp	r0, #0
  401e64:	d1e0      	bne.n	401e28 <__swbuf_r+0x58>
  401e66:	4630      	mov	r0, r6
  401e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e6a:	bf00      	nop
  401e6c:	00404bb8 	.word	0x00404bb8
  401e70:	00404bd8 	.word	0x00404bd8
  401e74:	00404bf8 	.word	0x00404bf8

00401e78 <__swsetup_r>:
  401e78:	4b32      	ldr	r3, [pc, #200]	; (401f44 <__swsetup_r+0xcc>)
  401e7a:	b570      	push	{r4, r5, r6, lr}
  401e7c:	681d      	ldr	r5, [r3, #0]
  401e7e:	4606      	mov	r6, r0
  401e80:	460c      	mov	r4, r1
  401e82:	b125      	cbz	r5, 401e8e <__swsetup_r+0x16>
  401e84:	69ab      	ldr	r3, [r5, #24]
  401e86:	b913      	cbnz	r3, 401e8e <__swsetup_r+0x16>
  401e88:	4628      	mov	r0, r5
  401e8a:	f000 ff83 	bl	402d94 <__sinit>
  401e8e:	4b2e      	ldr	r3, [pc, #184]	; (401f48 <__swsetup_r+0xd0>)
  401e90:	429c      	cmp	r4, r3
  401e92:	d101      	bne.n	401e98 <__swsetup_r+0x20>
  401e94:	686c      	ldr	r4, [r5, #4]
  401e96:	e008      	b.n	401eaa <__swsetup_r+0x32>
  401e98:	4b2c      	ldr	r3, [pc, #176]	; (401f4c <__swsetup_r+0xd4>)
  401e9a:	429c      	cmp	r4, r3
  401e9c:	d101      	bne.n	401ea2 <__swsetup_r+0x2a>
  401e9e:	68ac      	ldr	r4, [r5, #8]
  401ea0:	e003      	b.n	401eaa <__swsetup_r+0x32>
  401ea2:	4b2b      	ldr	r3, [pc, #172]	; (401f50 <__swsetup_r+0xd8>)
  401ea4:	429c      	cmp	r4, r3
  401ea6:	bf08      	it	eq
  401ea8:	68ec      	ldreq	r4, [r5, #12]
  401eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401eae:	b29a      	uxth	r2, r3
  401eb0:	0715      	lsls	r5, r2, #28
  401eb2:	d41d      	bmi.n	401ef0 <__swsetup_r+0x78>
  401eb4:	06d0      	lsls	r0, r2, #27
  401eb6:	d402      	bmi.n	401ebe <__swsetup_r+0x46>
  401eb8:	2209      	movs	r2, #9
  401eba:	6032      	str	r2, [r6, #0]
  401ebc:	e03a      	b.n	401f34 <__swsetup_r+0xbc>
  401ebe:	0751      	lsls	r1, r2, #29
  401ec0:	d512      	bpl.n	401ee8 <__swsetup_r+0x70>
  401ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  401ec4:	b141      	cbz	r1, 401ed8 <__swsetup_r+0x60>
  401ec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
  401eca:	4299      	cmp	r1, r3
  401ecc:	d002      	beq.n	401ed4 <__swsetup_r+0x5c>
  401ece:	4630      	mov	r0, r6
  401ed0:	f001 fba6 	bl	403620 <_free_r>
  401ed4:	2300      	movs	r3, #0
  401ed6:	6363      	str	r3, [r4, #52]	; 0x34
  401ed8:	89a3      	ldrh	r3, [r4, #12]
  401eda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  401ede:	81a3      	strh	r3, [r4, #12]
  401ee0:	2300      	movs	r3, #0
  401ee2:	6063      	str	r3, [r4, #4]
  401ee4:	6923      	ldr	r3, [r4, #16]
  401ee6:	6023      	str	r3, [r4, #0]
  401ee8:	89a3      	ldrh	r3, [r4, #12]
  401eea:	f043 0308 	orr.w	r3, r3, #8
  401eee:	81a3      	strh	r3, [r4, #12]
  401ef0:	6923      	ldr	r3, [r4, #16]
  401ef2:	b94b      	cbnz	r3, 401f08 <__swsetup_r+0x90>
  401ef4:	89a3      	ldrh	r3, [r4, #12]
  401ef6:	f403 7320 	and.w	r3, r3, #640	; 0x280
  401efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401efe:	d003      	beq.n	401f08 <__swsetup_r+0x90>
  401f00:	4621      	mov	r1, r4
  401f02:	4630      	mov	r0, r6
  401f04:	f001 f802 	bl	402f0c <__smakebuf_r>
  401f08:	89a2      	ldrh	r2, [r4, #12]
  401f0a:	f012 0301 	ands.w	r3, r2, #1
  401f0e:	d005      	beq.n	401f1c <__swsetup_r+0xa4>
  401f10:	2300      	movs	r3, #0
  401f12:	60a3      	str	r3, [r4, #8]
  401f14:	6963      	ldr	r3, [r4, #20]
  401f16:	425b      	negs	r3, r3
  401f18:	61a3      	str	r3, [r4, #24]
  401f1a:	e003      	b.n	401f24 <__swsetup_r+0xac>
  401f1c:	0792      	lsls	r2, r2, #30
  401f1e:	bf58      	it	pl
  401f20:	6963      	ldrpl	r3, [r4, #20]
  401f22:	60a3      	str	r3, [r4, #8]
  401f24:	6923      	ldr	r3, [r4, #16]
  401f26:	b95b      	cbnz	r3, 401f40 <__swsetup_r+0xc8>
  401f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f2c:	f003 0080 	and.w	r0, r3, #128	; 0x80
  401f30:	b280      	uxth	r0, r0
  401f32:	b130      	cbz	r0, 401f42 <__swsetup_r+0xca>
  401f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401f38:	81a3      	strh	r3, [r4, #12]
  401f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401f3e:	bd70      	pop	{r4, r5, r6, pc}
  401f40:	2000      	movs	r0, #0
  401f42:	bd70      	pop	{r4, r5, r6, pc}
  401f44:	20000070 	.word	0x20000070
  401f48:	00404bb8 	.word	0x00404bb8
  401f4c:	00404bd8 	.word	0x00404bd8
  401f50:	00404bf8 	.word	0x00404bf8

00401f54 <quorem>:
  401f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f58:	6903      	ldr	r3, [r0, #16]
  401f5a:	690c      	ldr	r4, [r1, #16]
  401f5c:	429c      	cmp	r4, r3
  401f5e:	4680      	mov	r8, r0
  401f60:	f300 8083 	bgt.w	40206a <quorem+0x116>
  401f64:	3c01      	subs	r4, #1
  401f66:	f101 0714 	add.w	r7, r1, #20
  401f6a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  401f6e:	f100 0614 	add.w	r6, r0, #20
  401f72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  401f76:	eb06 030e 	add.w	r3, r6, lr
  401f7a:	9301      	str	r3, [sp, #4]
  401f7c:	3501      	adds	r5, #1
  401f7e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  401f82:	fbb3 f5f5 	udiv	r5, r3, r5
  401f86:	eb07 090e 	add.w	r9, r7, lr
  401f8a:	2d00      	cmp	r5, #0
  401f8c:	d039      	beq.n	402002 <quorem+0xae>
  401f8e:	f04f 0a00 	mov.w	sl, #0
  401f92:	4638      	mov	r0, r7
  401f94:	46b4      	mov	ip, r6
  401f96:	46d3      	mov	fp, sl
  401f98:	f850 2b04 	ldr.w	r2, [r0], #4
  401f9c:	b293      	uxth	r3, r2
  401f9e:	fb05 a303 	mla	r3, r5, r3, sl
  401fa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  401fa6:	b29b      	uxth	r3, r3
  401fa8:	ebc3 030b 	rsb	r3, r3, fp
  401fac:	0c12      	lsrs	r2, r2, #16
  401fae:	f8bc b000 	ldrh.w	fp, [ip]
  401fb2:	fb05 a202 	mla	r2, r5, r2, sl
  401fb6:	fa13 f38b 	uxtah	r3, r3, fp
  401fba:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  401fbe:	fa1f fb82 	uxth.w	fp, r2
  401fc2:	f8dc 2000 	ldr.w	r2, [ip]
  401fc6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  401fca:	eb02 4223 	add.w	r2, r2, r3, asr #16
  401fce:	b29b      	uxth	r3, r3
  401fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401fd4:	4581      	cmp	r9, r0
  401fd6:	ea4f 4b22 	mov.w	fp, r2, asr #16
  401fda:	f84c 3b04 	str.w	r3, [ip], #4
  401fde:	d2db      	bcs.n	401f98 <quorem+0x44>
  401fe0:	f856 300e 	ldr.w	r3, [r6, lr]
  401fe4:	b96b      	cbnz	r3, 402002 <quorem+0xae>
  401fe6:	9b01      	ldr	r3, [sp, #4]
  401fe8:	3b04      	subs	r3, #4
  401fea:	429e      	cmp	r6, r3
  401fec:	461a      	mov	r2, r3
  401fee:	d302      	bcc.n	401ff6 <quorem+0xa2>
  401ff0:	f8c8 4010 	str.w	r4, [r8, #16]
  401ff4:	e005      	b.n	402002 <quorem+0xae>
  401ff6:	6812      	ldr	r2, [r2, #0]
  401ff8:	3b04      	subs	r3, #4
  401ffa:	2a00      	cmp	r2, #0
  401ffc:	d1f8      	bne.n	401ff0 <quorem+0x9c>
  401ffe:	3c01      	subs	r4, #1
  402000:	e7f3      	b.n	401fea <quorem+0x96>
  402002:	4640      	mov	r0, r8
  402004:	f001 fa35 	bl	403472 <__mcmp>
  402008:	2800      	cmp	r0, #0
  40200a:	db2c      	blt.n	402066 <quorem+0x112>
  40200c:	3501      	adds	r5, #1
  40200e:	4630      	mov	r0, r6
  402010:	f04f 0e00 	mov.w	lr, #0
  402014:	f857 1b04 	ldr.w	r1, [r7], #4
  402018:	f8d0 c000 	ldr.w	ip, [r0]
  40201c:	b28a      	uxth	r2, r1
  40201e:	ebc2 030e 	rsb	r3, r2, lr
  402022:	0c09      	lsrs	r1, r1, #16
  402024:	fa13 f38c 	uxtah	r3, r3, ip
  402028:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  40202c:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402030:	b29b      	uxth	r3, r3
  402032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402036:	45b9      	cmp	r9, r7
  402038:	ea4f 4e22 	mov.w	lr, r2, asr #16
  40203c:	f840 3b04 	str.w	r3, [r0], #4
  402040:	d2e8      	bcs.n	402014 <quorem+0xc0>
  402042:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402046:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40204a:	b962      	cbnz	r2, 402066 <quorem+0x112>
  40204c:	3b04      	subs	r3, #4
  40204e:	429e      	cmp	r6, r3
  402050:	461a      	mov	r2, r3
  402052:	d302      	bcc.n	40205a <quorem+0x106>
  402054:	f8c8 4010 	str.w	r4, [r8, #16]
  402058:	e005      	b.n	402066 <quorem+0x112>
  40205a:	6812      	ldr	r2, [r2, #0]
  40205c:	3b04      	subs	r3, #4
  40205e:	2a00      	cmp	r2, #0
  402060:	d1f8      	bne.n	402054 <quorem+0x100>
  402062:	3c01      	subs	r4, #1
  402064:	e7f3      	b.n	40204e <quorem+0xfa>
  402066:	4628      	mov	r0, r5
  402068:	e000      	b.n	40206c <quorem+0x118>
  40206a:	2000      	movs	r0, #0
  40206c:	b003      	add	sp, #12
  40206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402072:	0000      	movs	r0, r0
  402074:	0000      	movs	r0, r0
	...

00402078 <_dtoa_r>:
  402078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40207c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40207e:	b095      	sub	sp, #84	; 0x54
  402080:	4682      	mov	sl, r0
  402082:	9c21      	ldr	r4, [sp, #132]	; 0x84
  402084:	e9cd 2302 	strd	r2, r3, [sp, #8]
  402088:	b945      	cbnz	r5, 40209c <_dtoa_r+0x24>
  40208a:	2010      	movs	r0, #16
  40208c:	f000 ff7a 	bl	402f84 <malloc>
  402090:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  402094:	6045      	str	r5, [r0, #4]
  402096:	6085      	str	r5, [r0, #8]
  402098:	6005      	str	r5, [r0, #0]
  40209a:	60c5      	str	r5, [r0, #12]
  40209c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4020a0:	6819      	ldr	r1, [r3, #0]
  4020a2:	b159      	cbz	r1, 4020bc <_dtoa_r+0x44>
  4020a4:	685a      	ldr	r2, [r3, #4]
  4020a6:	604a      	str	r2, [r1, #4]
  4020a8:	2301      	movs	r3, #1
  4020aa:	4093      	lsls	r3, r2
  4020ac:	608b      	str	r3, [r1, #8]
  4020ae:	4650      	mov	r0, sl
  4020b0:	f001 f806 	bl	4030c0 <_Bfree>
  4020b4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4020b8:	2200      	movs	r2, #0
  4020ba:	601a      	str	r2, [r3, #0]
  4020bc:	9b03      	ldr	r3, [sp, #12]
  4020be:	4aa0      	ldr	r2, [pc, #640]	; (402340 <_dtoa_r+0x2c8>)
  4020c0:	2b00      	cmp	r3, #0
  4020c2:	bfbf      	itttt	lt
  4020c4:	2301      	movlt	r3, #1
  4020c6:	6023      	strlt	r3, [r4, #0]
  4020c8:	9b03      	ldrlt	r3, [sp, #12]
  4020ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4020ce:	bfb8      	it	lt
  4020d0:	9303      	strlt	r3, [sp, #12]
  4020d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4020d6:	bfa4      	itt	ge
  4020d8:	2300      	movge	r3, #0
  4020da:	6023      	strge	r3, [r4, #0]
  4020dc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  4020e0:	0d1b      	lsrs	r3, r3, #20
  4020e2:	051b      	lsls	r3, r3, #20
  4020e4:	4293      	cmp	r3, r2
  4020e6:	d11d      	bne.n	402124 <_dtoa_r+0xac>
  4020e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4020ea:	f242 730f 	movw	r3, #9999	; 0x270f
  4020ee:	6013      	str	r3, [r2, #0]
  4020f0:	9b02      	ldr	r3, [sp, #8]
  4020f2:	b943      	cbnz	r3, 402106 <_dtoa_r+0x8e>
  4020f4:	4a93      	ldr	r2, [pc, #588]	; (402344 <_dtoa_r+0x2cc>)
  4020f6:	4b94      	ldr	r3, [pc, #592]	; (402348 <_dtoa_r+0x2d0>)
  4020f8:	f3c8 0013 	ubfx	r0, r8, #0, #20
  4020fc:	2800      	cmp	r0, #0
  4020fe:	bf14      	ite	ne
  402100:	4618      	movne	r0, r3
  402102:	4610      	moveq	r0, r2
  402104:	e000      	b.n	402108 <_dtoa_r+0x90>
  402106:	4890      	ldr	r0, [pc, #576]	; (402348 <_dtoa_r+0x2d0>)
  402108:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40210a:	2b00      	cmp	r3, #0
  40210c:	f000 854a 	beq.w	402ba4 <_dtoa_r+0xb2c>
  402110:	78c3      	ldrb	r3, [r0, #3]
  402112:	b113      	cbz	r3, 40211a <_dtoa_r+0xa2>
  402114:	f100 0308 	add.w	r3, r0, #8
  402118:	e000      	b.n	40211c <_dtoa_r+0xa4>
  40211a:	1cc3      	adds	r3, r0, #3
  40211c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40211e:	6013      	str	r3, [r2, #0]
  402120:	f000 bd40 	b.w	402ba4 <_dtoa_r+0xb2c>
  402124:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  402128:	2200      	movs	r2, #0
  40212a:	2300      	movs	r3, #0
  40212c:	4620      	mov	r0, r4
  40212e:	4629      	mov	r1, r5
  402130:	f002 f964 	bl	4043fc <__aeabi_dcmpeq>
  402134:	4607      	mov	r7, r0
  402136:	b158      	cbz	r0, 402150 <_dtoa_r+0xd8>
  402138:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40213a:	2301      	movs	r3, #1
  40213c:	6013      	str	r3, [r2, #0]
  40213e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402140:	2b00      	cmp	r3, #0
  402142:	f000 8522 	beq.w	402b8a <_dtoa_r+0xb12>
  402146:	4881      	ldr	r0, [pc, #516]	; (40234c <_dtoa_r+0x2d4>)
  402148:	6018      	str	r0, [r3, #0]
  40214a:	3801      	subs	r0, #1
  40214c:	f000 bd2a 	b.w	402ba4 <_dtoa_r+0xb2c>
  402150:	ab12      	add	r3, sp, #72	; 0x48
  402152:	9301      	str	r3, [sp, #4]
  402154:	ab13      	add	r3, sp, #76	; 0x4c
  402156:	9300      	str	r3, [sp, #0]
  402158:	4622      	mov	r2, r4
  40215a:	462b      	mov	r3, r5
  40215c:	4650      	mov	r0, sl
  40215e:	f001 fa03 	bl	403568 <__d2b>
  402162:	f3c8 560a 	ubfx	r6, r8, #20, #11
  402166:	9004      	str	r0, [sp, #16]
  402168:	b156      	cbz	r6, 402180 <_dtoa_r+0x108>
  40216a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  40216e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  402172:	4620      	mov	r0, r4
  402174:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  402178:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  40217c:	9711      	str	r7, [sp, #68]	; 0x44
  40217e:	e01d      	b.n	4021bc <_dtoa_r+0x144>
  402180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402182:	9e12      	ldr	r6, [sp, #72]	; 0x48
  402184:	441e      	add	r6, r3
  402186:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40218a:	2b20      	cmp	r3, #32
  40218c:	dd0a      	ble.n	4021a4 <_dtoa_r+0x12c>
  40218e:	9a02      	ldr	r2, [sp, #8]
  402190:	f206 4012 	addw	r0, r6, #1042	; 0x412
  402194:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  402198:	fa22 f000 	lsr.w	r0, r2, r0
  40219c:	fa08 f303 	lsl.w	r3, r8, r3
  4021a0:	4318      	orrs	r0, r3
  4021a2:	e004      	b.n	4021ae <_dtoa_r+0x136>
  4021a4:	f1c3 0020 	rsb	r0, r3, #32
  4021a8:	9b02      	ldr	r3, [sp, #8]
  4021aa:	fa03 f000 	lsl.w	r0, r3, r0
  4021ae:	f001 fe47 	bl	403e40 <__aeabi_ui2d>
  4021b2:	2301      	movs	r3, #1
  4021b4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4021b8:	3e01      	subs	r6, #1
  4021ba:	9311      	str	r3, [sp, #68]	; 0x44
  4021bc:	2200      	movs	r2, #0
  4021be:	4b64      	ldr	r3, [pc, #400]	; (402350 <_dtoa_r+0x2d8>)
  4021c0:	f001 fd00 	bl	403bc4 <__aeabi_dsub>
  4021c4:	a358      	add	r3, pc, #352	; (adr r3, 402328 <_dtoa_r+0x2b0>)
  4021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021ca:	f001 feaf 	bl	403f2c <__aeabi_dmul>
  4021ce:	a358      	add	r3, pc, #352	; (adr r3, 402330 <_dtoa_r+0x2b8>)
  4021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021d4:	f001 fcf8 	bl	403bc8 <__adddf3>
  4021d8:	4604      	mov	r4, r0
  4021da:	4630      	mov	r0, r6
  4021dc:	460d      	mov	r5, r1
  4021de:	f001 fe3f 	bl	403e60 <__aeabi_i2d>
  4021e2:	a355      	add	r3, pc, #340	; (adr r3, 402338 <_dtoa_r+0x2c0>)
  4021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021e8:	f001 fea0 	bl	403f2c <__aeabi_dmul>
  4021ec:	4602      	mov	r2, r0
  4021ee:	460b      	mov	r3, r1
  4021f0:	4620      	mov	r0, r4
  4021f2:	4629      	mov	r1, r5
  4021f4:	f001 fce8 	bl	403bc8 <__adddf3>
  4021f8:	4604      	mov	r4, r0
  4021fa:	460d      	mov	r5, r1
  4021fc:	f002 f946 	bl	40448c <__aeabi_d2iz>
  402200:	2200      	movs	r2, #0
  402202:	4683      	mov	fp, r0
  402204:	2300      	movs	r3, #0
  402206:	4620      	mov	r0, r4
  402208:	4629      	mov	r1, r5
  40220a:	f002 f901 	bl	404410 <__aeabi_dcmplt>
  40220e:	b158      	cbz	r0, 402228 <_dtoa_r+0x1b0>
  402210:	4658      	mov	r0, fp
  402212:	f001 fe25 	bl	403e60 <__aeabi_i2d>
  402216:	4602      	mov	r2, r0
  402218:	460b      	mov	r3, r1
  40221a:	4620      	mov	r0, r4
  40221c:	4629      	mov	r1, r5
  40221e:	f002 f8ed 	bl	4043fc <__aeabi_dcmpeq>
  402222:	b908      	cbnz	r0, 402228 <_dtoa_r+0x1b0>
  402224:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402228:	f1bb 0f16 	cmp.w	fp, #22
  40222c:	d80d      	bhi.n	40224a <_dtoa_r+0x1d2>
  40222e:	4949      	ldr	r1, [pc, #292]	; (402354 <_dtoa_r+0x2dc>)
  402230:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  402234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402238:	e9d1 0100 	ldrd	r0, r1, [r1]
  40223c:	f002 f906 	bl	40444c <__aeabi_dcmpgt>
  402240:	b130      	cbz	r0, 402250 <_dtoa_r+0x1d8>
  402242:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402246:	2300      	movs	r3, #0
  402248:	e000      	b.n	40224c <_dtoa_r+0x1d4>
  40224a:	2301      	movs	r3, #1
  40224c:	9310      	str	r3, [sp, #64]	; 0x40
  40224e:	e000      	b.n	402252 <_dtoa_r+0x1da>
  402250:	9010      	str	r0, [sp, #64]	; 0x40
  402252:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402254:	1b9e      	subs	r6, r3, r6
  402256:	1e73      	subs	r3, r6, #1
  402258:	9307      	str	r3, [sp, #28]
  40225a:	bf43      	ittte	mi
  40225c:	f1c3 0800 	rsbmi	r8, r3, #0
  402260:	2300      	movmi	r3, #0
  402262:	9307      	strmi	r3, [sp, #28]
  402264:	f04f 0800 	movpl.w	r8, #0
  402268:	f1bb 0f00 	cmp.w	fp, #0
  40226c:	db06      	blt.n	40227c <_dtoa_r+0x204>
  40226e:	9b07      	ldr	r3, [sp, #28]
  402270:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  402274:	445b      	add	r3, fp
  402276:	9307      	str	r3, [sp, #28]
  402278:	2700      	movs	r7, #0
  40227a:	e005      	b.n	402288 <_dtoa_r+0x210>
  40227c:	2300      	movs	r3, #0
  40227e:	ebcb 0808 	rsb	r8, fp, r8
  402282:	f1cb 0700 	rsb	r7, fp, #0
  402286:	930b      	str	r3, [sp, #44]	; 0x2c
  402288:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40228a:	2b09      	cmp	r3, #9
  40228c:	d827      	bhi.n	4022de <_dtoa_r+0x266>
  40228e:	2b05      	cmp	r3, #5
  402290:	bfc4      	itt	gt
  402292:	3b04      	subgt	r3, #4
  402294:	931e      	strgt	r3, [sp, #120]	; 0x78
  402296:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402298:	f1a3 0302 	sub.w	r3, r3, #2
  40229c:	bfcc      	ite	gt
  40229e:	2500      	movgt	r5, #0
  4022a0:	2501      	movle	r5, #1
  4022a2:	2b03      	cmp	r3, #3
  4022a4:	d820      	bhi.n	4022e8 <_dtoa_r+0x270>
  4022a6:	e8df f003 	tbb	[pc, r3]
  4022aa:	0e06      	.short	0x0e06
  4022ac:	0402      	.short	0x0402
  4022ae:	2301      	movs	r3, #1
  4022b0:	e002      	b.n	4022b8 <_dtoa_r+0x240>
  4022b2:	2301      	movs	r3, #1
  4022b4:	e008      	b.n	4022c8 <_dtoa_r+0x250>
  4022b6:	2300      	movs	r3, #0
  4022b8:	930a      	str	r3, [sp, #40]	; 0x28
  4022ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4022bc:	2b00      	cmp	r3, #0
  4022be:	dd1d      	ble.n	4022fc <_dtoa_r+0x284>
  4022c0:	4699      	mov	r9, r3
  4022c2:	9305      	str	r3, [sp, #20]
  4022c4:	e021      	b.n	40230a <_dtoa_r+0x292>
  4022c6:	2300      	movs	r3, #0
  4022c8:	930a      	str	r3, [sp, #40]	; 0x28
  4022ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4022cc:	eb0b 0903 	add.w	r9, fp, r3
  4022d0:	f109 0301 	add.w	r3, r9, #1
  4022d4:	2b01      	cmp	r3, #1
  4022d6:	9305      	str	r3, [sp, #20]
  4022d8:	bfb8      	it	lt
  4022da:	2301      	movlt	r3, #1
  4022dc:	e015      	b.n	40230a <_dtoa_r+0x292>
  4022de:	2501      	movs	r5, #1
  4022e0:	2300      	movs	r3, #0
  4022e2:	931e      	str	r3, [sp, #120]	; 0x78
  4022e4:	950a      	str	r5, [sp, #40]	; 0x28
  4022e6:	e001      	b.n	4022ec <_dtoa_r+0x274>
  4022e8:	2301      	movs	r3, #1
  4022ea:	930a      	str	r3, [sp, #40]	; 0x28
  4022ec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  4022f0:	2200      	movs	r2, #0
  4022f2:	f8cd 9014 	str.w	r9, [sp, #20]
  4022f6:	2312      	movs	r3, #18
  4022f8:	921f      	str	r2, [sp, #124]	; 0x7c
  4022fa:	e006      	b.n	40230a <_dtoa_r+0x292>
  4022fc:	f04f 0901 	mov.w	r9, #1
  402300:	f8cd 9014 	str.w	r9, [sp, #20]
  402304:	464b      	mov	r3, r9
  402306:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  40230a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  40230e:	2200      	movs	r2, #0
  402310:	6062      	str	r2, [r4, #4]
  402312:	2104      	movs	r1, #4
  402314:	f101 0214 	add.w	r2, r1, #20
  402318:	429a      	cmp	r2, r3
  40231a:	d81d      	bhi.n	402358 <_dtoa_r+0x2e0>
  40231c:	6862      	ldr	r2, [r4, #4]
  40231e:	3201      	adds	r2, #1
  402320:	6062      	str	r2, [r4, #4]
  402322:	0049      	lsls	r1, r1, #1
  402324:	e7f6      	b.n	402314 <_dtoa_r+0x29c>
  402326:	bf00      	nop
  402328:	636f4361 	.word	0x636f4361
  40232c:	3fd287a7 	.word	0x3fd287a7
  402330:	8b60c8b3 	.word	0x8b60c8b3
  402334:	3fc68a28 	.word	0x3fc68a28
  402338:	509f79fb 	.word	0x509f79fb
  40233c:	3fd34413 	.word	0x3fd34413
  402340:	7ff00000 	.word	0x7ff00000
  402344:	00404ba8 	.word	0x00404ba8
  402348:	00404bb1 	.word	0x00404bb1
  40234c:	00404b85 	.word	0x00404b85
  402350:	3ff80000 	.word	0x3ff80000
  402354:	00404c18 	.word	0x00404c18
  402358:	6861      	ldr	r1, [r4, #4]
  40235a:	4650      	mov	r0, sl
  40235c:	f000 fe7b 	bl	403056 <_Balloc>
  402360:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402364:	6020      	str	r0, [r4, #0]
  402366:	681b      	ldr	r3, [r3, #0]
  402368:	9306      	str	r3, [sp, #24]
  40236a:	9b05      	ldr	r3, [sp, #20]
  40236c:	2b0e      	cmp	r3, #14
  40236e:	f200 815d 	bhi.w	40262c <_dtoa_r+0x5b4>
  402372:	2d00      	cmp	r5, #0
  402374:	f000 815a 	beq.w	40262c <_dtoa_r+0x5b4>
  402378:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  40237c:	f1bb 0f00 	cmp.w	fp, #0
  402380:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  402384:	dd31      	ble.n	4023ea <_dtoa_r+0x372>
  402386:	4aa0      	ldr	r2, [pc, #640]	; (402608 <_dtoa_r+0x590>)
  402388:	f00b 030f 	and.w	r3, fp, #15
  40238c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402390:	e9d3 3400 	ldrd	r3, r4, [r3]
  402394:	ea4f 152b 	mov.w	r5, fp, asr #4
  402398:	06e8      	lsls	r0, r5, #27
  40239a:	e9cd 3408 	strd	r3, r4, [sp, #32]
  40239e:	d50c      	bpl.n	4023ba <_dtoa_r+0x342>
  4023a0:	4b9a      	ldr	r3, [pc, #616]	; (40260c <_dtoa_r+0x594>)
  4023a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4023a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4023aa:	f001 fee9 	bl	404180 <__aeabi_ddiv>
  4023ae:	f005 050f 	and.w	r5, r5, #15
  4023b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4023b6:	2403      	movs	r4, #3
  4023b8:	e000      	b.n	4023bc <_dtoa_r+0x344>
  4023ba:	2402      	movs	r4, #2
  4023bc:	4e93      	ldr	r6, [pc, #588]	; (40260c <_dtoa_r+0x594>)
  4023be:	b16d      	cbz	r5, 4023dc <_dtoa_r+0x364>
  4023c0:	07e9      	lsls	r1, r5, #31
  4023c2:	d508      	bpl.n	4023d6 <_dtoa_r+0x35e>
  4023c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4023c8:	e9d6 2300 	ldrd	r2, r3, [r6]
  4023cc:	f001 fdae 	bl	403f2c <__aeabi_dmul>
  4023d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4023d4:	3401      	adds	r4, #1
  4023d6:	106d      	asrs	r5, r5, #1
  4023d8:	3608      	adds	r6, #8
  4023da:	e7f0      	b.n	4023be <_dtoa_r+0x346>
  4023dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4023e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4023e4:	f001 fecc 	bl	404180 <__aeabi_ddiv>
  4023e8:	e020      	b.n	40242c <_dtoa_r+0x3b4>
  4023ea:	f1cb 0500 	rsb	r5, fp, #0
  4023ee:	b305      	cbz	r5, 402432 <_dtoa_r+0x3ba>
  4023f0:	4b85      	ldr	r3, [pc, #532]	; (402608 <_dtoa_r+0x590>)
  4023f2:	4e86      	ldr	r6, [pc, #536]	; (40260c <_dtoa_r+0x594>)
  4023f4:	f005 020f 	and.w	r2, r5, #15
  4023f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402400:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402404:	f001 fd92 	bl	403f2c <__aeabi_dmul>
  402408:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40240c:	112d      	asrs	r5, r5, #4
  40240e:	2300      	movs	r3, #0
  402410:	2402      	movs	r4, #2
  402412:	b155      	cbz	r5, 40242a <_dtoa_r+0x3b2>
  402414:	07ea      	lsls	r2, r5, #31
  402416:	d505      	bpl.n	402424 <_dtoa_r+0x3ac>
  402418:	e9d6 2300 	ldrd	r2, r3, [r6]
  40241c:	f001 fd86 	bl	403f2c <__aeabi_dmul>
  402420:	3401      	adds	r4, #1
  402422:	2301      	movs	r3, #1
  402424:	106d      	asrs	r5, r5, #1
  402426:	3608      	adds	r6, #8
  402428:	e7f3      	b.n	402412 <_dtoa_r+0x39a>
  40242a:	b11b      	cbz	r3, 402434 <_dtoa_r+0x3bc>
  40242c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402430:	e000      	b.n	402434 <_dtoa_r+0x3bc>
  402432:	2402      	movs	r4, #2
  402434:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402436:	b1e3      	cbz	r3, 402472 <_dtoa_r+0x3fa>
  402438:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  40243c:	2200      	movs	r2, #0
  40243e:	4b74      	ldr	r3, [pc, #464]	; (402610 <_dtoa_r+0x598>)
  402440:	4628      	mov	r0, r5
  402442:	4631      	mov	r1, r6
  402444:	f001 ffe4 	bl	404410 <__aeabi_dcmplt>
  402448:	b198      	cbz	r0, 402472 <_dtoa_r+0x3fa>
  40244a:	9b05      	ldr	r3, [sp, #20]
  40244c:	b18b      	cbz	r3, 402472 <_dtoa_r+0x3fa>
  40244e:	f1b9 0f00 	cmp.w	r9, #0
  402452:	f340 80e7 	ble.w	402624 <_dtoa_r+0x5ac>
  402456:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  40245a:	9308      	str	r3, [sp, #32]
  40245c:	4631      	mov	r1, r6
  40245e:	2200      	movs	r2, #0
  402460:	4b6c      	ldr	r3, [pc, #432]	; (402614 <_dtoa_r+0x59c>)
  402462:	4628      	mov	r0, r5
  402464:	f001 fd62 	bl	403f2c <__aeabi_dmul>
  402468:	3401      	adds	r4, #1
  40246a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40246e:	464e      	mov	r6, r9
  402470:	e002      	b.n	402478 <_dtoa_r+0x400>
  402472:	9e05      	ldr	r6, [sp, #20]
  402474:	f8cd b020 	str.w	fp, [sp, #32]
  402478:	4620      	mov	r0, r4
  40247a:	f001 fcf1 	bl	403e60 <__aeabi_i2d>
  40247e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402482:	f001 fd53 	bl	403f2c <__aeabi_dmul>
  402486:	4b64      	ldr	r3, [pc, #400]	; (402618 <_dtoa_r+0x5a0>)
  402488:	2200      	movs	r2, #0
  40248a:	f001 fb9d 	bl	403bc8 <__adddf3>
  40248e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  402492:	4604      	mov	r4, r0
  402494:	930c      	str	r3, [sp, #48]	; 0x30
  402496:	461d      	mov	r5, r3
  402498:	b9d6      	cbnz	r6, 4024d0 <_dtoa_r+0x458>
  40249a:	2200      	movs	r2, #0
  40249c:	4b5f      	ldr	r3, [pc, #380]	; (40261c <_dtoa_r+0x5a4>)
  40249e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4024a2:	f001 fb8f 	bl	403bc4 <__aeabi_dsub>
  4024a6:	4622      	mov	r2, r4
  4024a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4024aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4024ae:	f001 ffcd 	bl	40444c <__aeabi_dcmpgt>
  4024b2:	2800      	cmp	r0, #0
  4024b4:	f040 8240 	bne.w	402938 <_dtoa_r+0x8c0>
  4024b8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4024ba:	4622      	mov	r2, r4
  4024bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4024c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4024c4:	f001 ffa4 	bl	404410 <__aeabi_dcmplt>
  4024c8:	2800      	cmp	r0, #0
  4024ca:	f040 822c 	bne.w	402926 <_dtoa_r+0x8ae>
  4024ce:	e0a9      	b.n	402624 <_dtoa_r+0x5ac>
  4024d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4024d2:	4b4d      	ldr	r3, [pc, #308]	; (402608 <_dtoa_r+0x590>)
  4024d4:	1e71      	subs	r1, r6, #1
  4024d6:	2a00      	cmp	r2, #0
  4024d8:	d049      	beq.n	40256e <_dtoa_r+0x4f6>
  4024da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4024de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024e2:	2000      	movs	r0, #0
  4024e4:	494e      	ldr	r1, [pc, #312]	; (402620 <_dtoa_r+0x5a8>)
  4024e6:	f001 fe4b 	bl	404180 <__aeabi_ddiv>
  4024ea:	4622      	mov	r2, r4
  4024ec:	462b      	mov	r3, r5
  4024ee:	f001 fb69 	bl	403bc4 <__aeabi_dsub>
  4024f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4024f6:	9c06      	ldr	r4, [sp, #24]
  4024f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4024fc:	f001 ffc6 	bl	40448c <__aeabi_d2iz>
  402500:	4605      	mov	r5, r0
  402502:	f001 fcad 	bl	403e60 <__aeabi_i2d>
  402506:	4602      	mov	r2, r0
  402508:	460b      	mov	r3, r1
  40250a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40250e:	f001 fb59 	bl	403bc4 <__aeabi_dsub>
  402512:	3530      	adds	r5, #48	; 0x30
  402514:	f804 5b01 	strb.w	r5, [r4], #1
  402518:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40251c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402520:	f001 ff76 	bl	404410 <__aeabi_dcmplt>
  402524:	2800      	cmp	r0, #0
  402526:	f040 8320 	bne.w	402b6a <_dtoa_r+0xaf2>
  40252a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40252e:	2000      	movs	r0, #0
  402530:	4937      	ldr	r1, [pc, #220]	; (402610 <_dtoa_r+0x598>)
  402532:	f001 fb47 	bl	403bc4 <__aeabi_dsub>
  402536:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40253a:	f001 ff69 	bl	404410 <__aeabi_dcmplt>
  40253e:	2800      	cmp	r0, #0
  402540:	f040 80d2 	bne.w	4026e8 <_dtoa_r+0x670>
  402544:	9b06      	ldr	r3, [sp, #24]
  402546:	1ae3      	subs	r3, r4, r3
  402548:	42b3      	cmp	r3, r6
  40254a:	da6b      	bge.n	402624 <_dtoa_r+0x5ac>
  40254c:	2200      	movs	r2, #0
  40254e:	4b31      	ldr	r3, [pc, #196]	; (402614 <_dtoa_r+0x59c>)
  402550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402554:	f001 fcea 	bl	403f2c <__aeabi_dmul>
  402558:	2200      	movs	r2, #0
  40255a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40255e:	4b2d      	ldr	r3, [pc, #180]	; (402614 <_dtoa_r+0x59c>)
  402560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402564:	f001 fce2 	bl	403f2c <__aeabi_dmul>
  402568:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40256c:	e7c4      	b.n	4024f8 <_dtoa_r+0x480>
  40256e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  402572:	4622      	mov	r2, r4
  402574:	462b      	mov	r3, r5
  402576:	e9d1 0100 	ldrd	r0, r1, [r1]
  40257a:	f001 fcd7 	bl	403f2c <__aeabi_dmul>
  40257e:	9b06      	ldr	r3, [sp, #24]
  402580:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402584:	199c      	adds	r4, r3, r6
  402586:	461d      	mov	r5, r3
  402588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40258c:	f001 ff7e 	bl	40448c <__aeabi_d2iz>
  402590:	4606      	mov	r6, r0
  402592:	f001 fc65 	bl	403e60 <__aeabi_i2d>
  402596:	3630      	adds	r6, #48	; 0x30
  402598:	4602      	mov	r2, r0
  40259a:	460b      	mov	r3, r1
  40259c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4025a0:	f001 fb10 	bl	403bc4 <__aeabi_dsub>
  4025a4:	f805 6b01 	strb.w	r6, [r5], #1
  4025a8:	42ac      	cmp	r4, r5
  4025aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4025ae:	f04f 0200 	mov.w	r2, #0
  4025b2:	d123      	bne.n	4025fc <_dtoa_r+0x584>
  4025b4:	4b1a      	ldr	r3, [pc, #104]	; (402620 <_dtoa_r+0x5a8>)
  4025b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4025ba:	f001 fb05 	bl	403bc8 <__adddf3>
  4025be:	4602      	mov	r2, r0
  4025c0:	460b      	mov	r3, r1
  4025c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4025c6:	f001 ff41 	bl	40444c <__aeabi_dcmpgt>
  4025ca:	2800      	cmp	r0, #0
  4025cc:	f040 808c 	bne.w	4026e8 <_dtoa_r+0x670>
  4025d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4025d4:	2000      	movs	r0, #0
  4025d6:	4912      	ldr	r1, [pc, #72]	; (402620 <_dtoa_r+0x5a8>)
  4025d8:	f001 faf4 	bl	403bc4 <__aeabi_dsub>
  4025dc:	4602      	mov	r2, r0
  4025de:	460b      	mov	r3, r1
  4025e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4025e4:	f001 ff14 	bl	404410 <__aeabi_dcmplt>
  4025e8:	b1e0      	cbz	r0, 402624 <_dtoa_r+0x5ac>
  4025ea:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  4025ee:	2b30      	cmp	r3, #48	; 0x30
  4025f0:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  4025f4:	f040 82b9 	bne.w	402b6a <_dtoa_r+0xaf2>
  4025f8:	4614      	mov	r4, r2
  4025fa:	e7f6      	b.n	4025ea <_dtoa_r+0x572>
  4025fc:	4b05      	ldr	r3, [pc, #20]	; (402614 <_dtoa_r+0x59c>)
  4025fe:	f001 fc95 	bl	403f2c <__aeabi_dmul>
  402602:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402606:	e7bf      	b.n	402588 <_dtoa_r+0x510>
  402608:	00404c18 	.word	0x00404c18
  40260c:	00404ce0 	.word	0x00404ce0
  402610:	3ff00000 	.word	0x3ff00000
  402614:	40240000 	.word	0x40240000
  402618:	401c0000 	.word	0x401c0000
  40261c:	40140000 	.word	0x40140000
  402620:	3fe00000 	.word	0x3fe00000
  402624:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  402628:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40262c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40262e:	2b00      	cmp	r3, #0
  402630:	db7d      	blt.n	40272e <_dtoa_r+0x6b6>
  402632:	f1bb 0f0e 	cmp.w	fp, #14
  402636:	dc7a      	bgt.n	40272e <_dtoa_r+0x6b6>
  402638:	4bab      	ldr	r3, [pc, #684]	; (4028e8 <_dtoa_r+0x870>)
  40263a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  40263e:	e9d3 6700 	ldrd	r6, r7, [r3]
  402642:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402644:	2b00      	cmp	r3, #0
  402646:	da14      	bge.n	402672 <_dtoa_r+0x5fa>
  402648:	9b05      	ldr	r3, [sp, #20]
  40264a:	2b00      	cmp	r3, #0
  40264c:	dc11      	bgt.n	402672 <_dtoa_r+0x5fa>
  40264e:	f040 816c 	bne.w	40292a <_dtoa_r+0x8b2>
  402652:	2200      	movs	r2, #0
  402654:	4ba5      	ldr	r3, [pc, #660]	; (4028ec <_dtoa_r+0x874>)
  402656:	4630      	mov	r0, r6
  402658:	4639      	mov	r1, r7
  40265a:	f001 fc67 	bl	403f2c <__aeabi_dmul>
  40265e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402662:	f001 fee9 	bl	404438 <__aeabi_dcmpge>
  402666:	9d05      	ldr	r5, [sp, #20]
  402668:	462e      	mov	r6, r5
  40266a:	2800      	cmp	r0, #0
  40266c:	f040 815f 	bne.w	40292e <_dtoa_r+0x8b6>
  402670:	e165      	b.n	40293e <_dtoa_r+0x8c6>
  402672:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  402676:	9c06      	ldr	r4, [sp, #24]
  402678:	4632      	mov	r2, r6
  40267a:	463b      	mov	r3, r7
  40267c:	4640      	mov	r0, r8
  40267e:	4649      	mov	r1, r9
  402680:	f001 fd7e 	bl	404180 <__aeabi_ddiv>
  402684:	f001 ff02 	bl	40448c <__aeabi_d2iz>
  402688:	4605      	mov	r5, r0
  40268a:	f001 fbe9 	bl	403e60 <__aeabi_i2d>
  40268e:	4632      	mov	r2, r6
  402690:	463b      	mov	r3, r7
  402692:	f001 fc4b 	bl	403f2c <__aeabi_dmul>
  402696:	460b      	mov	r3, r1
  402698:	4602      	mov	r2, r0
  40269a:	4649      	mov	r1, r9
  40269c:	4640      	mov	r0, r8
  40269e:	f001 fa91 	bl	403bc4 <__aeabi_dsub>
  4026a2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  4026a6:	9b06      	ldr	r3, [sp, #24]
  4026a8:	f804 eb01 	strb.w	lr, [r4], #1
  4026ac:	ebc3 0e04 	rsb	lr, r3, r4
  4026b0:	9b05      	ldr	r3, [sp, #20]
  4026b2:	4573      	cmp	r3, lr
  4026b4:	d12e      	bne.n	402714 <_dtoa_r+0x69c>
  4026b6:	4602      	mov	r2, r0
  4026b8:	460b      	mov	r3, r1
  4026ba:	f001 fa85 	bl	403bc8 <__adddf3>
  4026be:	4680      	mov	r8, r0
  4026c0:	4689      	mov	r9, r1
  4026c2:	4602      	mov	r2, r0
  4026c4:	460b      	mov	r3, r1
  4026c6:	4630      	mov	r0, r6
  4026c8:	4639      	mov	r1, r7
  4026ca:	f001 fea1 	bl	404410 <__aeabi_dcmplt>
  4026ce:	b978      	cbnz	r0, 4026f0 <_dtoa_r+0x678>
  4026d0:	4642      	mov	r2, r8
  4026d2:	464b      	mov	r3, r9
  4026d4:	4630      	mov	r0, r6
  4026d6:	4639      	mov	r1, r7
  4026d8:	f001 fe90 	bl	4043fc <__aeabi_dcmpeq>
  4026dc:	2800      	cmp	r0, #0
  4026de:	f000 8246 	beq.w	402b6e <_dtoa_r+0xaf6>
  4026e2:	07eb      	lsls	r3, r5, #31
  4026e4:	d404      	bmi.n	4026f0 <_dtoa_r+0x678>
  4026e6:	e242      	b.n	402b6e <_dtoa_r+0xaf6>
  4026e8:	f8dd b020 	ldr.w	fp, [sp, #32]
  4026ec:	e000      	b.n	4026f0 <_dtoa_r+0x678>
  4026ee:	461c      	mov	r4, r3
  4026f0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  4026f4:	2a39      	cmp	r2, #57	; 0x39
  4026f6:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  4026fa:	d107      	bne.n	40270c <_dtoa_r+0x694>
  4026fc:	9a06      	ldr	r2, [sp, #24]
  4026fe:	429a      	cmp	r2, r3
  402700:	d1f5      	bne.n	4026ee <_dtoa_r+0x676>
  402702:	9906      	ldr	r1, [sp, #24]
  402704:	2230      	movs	r2, #48	; 0x30
  402706:	f10b 0b01 	add.w	fp, fp, #1
  40270a:	700a      	strb	r2, [r1, #0]
  40270c:	781a      	ldrb	r2, [r3, #0]
  40270e:	3201      	adds	r2, #1
  402710:	701a      	strb	r2, [r3, #0]
  402712:	e22c      	b.n	402b6e <_dtoa_r+0xaf6>
  402714:	2200      	movs	r2, #0
  402716:	4b76      	ldr	r3, [pc, #472]	; (4028f0 <_dtoa_r+0x878>)
  402718:	f001 fc08 	bl	403f2c <__aeabi_dmul>
  40271c:	2200      	movs	r2, #0
  40271e:	2300      	movs	r3, #0
  402720:	4680      	mov	r8, r0
  402722:	4689      	mov	r9, r1
  402724:	f001 fe6a 	bl	4043fc <__aeabi_dcmpeq>
  402728:	2800      	cmp	r0, #0
  40272a:	d0a5      	beq.n	402678 <_dtoa_r+0x600>
  40272c:	e21f      	b.n	402b6e <_dtoa_r+0xaf6>
  40272e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402730:	2a00      	cmp	r2, #0
  402732:	d02b      	beq.n	40278c <_dtoa_r+0x714>
  402734:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  402736:	2a01      	cmp	r2, #1
  402738:	dc0a      	bgt.n	402750 <_dtoa_r+0x6d8>
  40273a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40273c:	b112      	cbz	r2, 402744 <_dtoa_r+0x6cc>
  40273e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  402742:	e002      	b.n	40274a <_dtoa_r+0x6d2>
  402744:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402746:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40274a:	463d      	mov	r5, r7
  40274c:	4644      	mov	r4, r8
  40274e:	e013      	b.n	402778 <_dtoa_r+0x700>
  402750:	9b05      	ldr	r3, [sp, #20]
  402752:	1e5d      	subs	r5, r3, #1
  402754:	42af      	cmp	r7, r5
  402756:	bfbf      	itttt	lt
  402758:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  40275a:	1bea      	sublt	r2, r5, r7
  40275c:	189b      	addlt	r3, r3, r2
  40275e:	930b      	strlt	r3, [sp, #44]	; 0x2c
  402760:	9b05      	ldr	r3, [sp, #20]
  402762:	bfb6      	itet	lt
  402764:	462f      	movlt	r7, r5
  402766:	1b7d      	subge	r5, r7, r5
  402768:	2500      	movlt	r5, #0
  40276a:	2b00      	cmp	r3, #0
  40276c:	bfab      	itete	ge
  40276e:	9b05      	ldrge	r3, [sp, #20]
  402770:	ebc3 0408 	rsblt	r4, r3, r8
  402774:	4644      	movge	r4, r8
  402776:	2300      	movlt	r3, #0
  402778:	9a07      	ldr	r2, [sp, #28]
  40277a:	2101      	movs	r1, #1
  40277c:	441a      	add	r2, r3
  40277e:	4650      	mov	r0, sl
  402780:	4498      	add	r8, r3
  402782:	9207      	str	r2, [sp, #28]
  402784:	f000 fd3b 	bl	4031fe <__i2b>
  402788:	4606      	mov	r6, r0
  40278a:	e002      	b.n	402792 <_dtoa_r+0x71a>
  40278c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40278e:	463d      	mov	r5, r7
  402790:	4644      	mov	r4, r8
  402792:	b15c      	cbz	r4, 4027ac <_dtoa_r+0x734>
  402794:	9b07      	ldr	r3, [sp, #28]
  402796:	2b00      	cmp	r3, #0
  402798:	dd08      	ble.n	4027ac <_dtoa_r+0x734>
  40279a:	42a3      	cmp	r3, r4
  40279c:	9a07      	ldr	r2, [sp, #28]
  40279e:	bfa8      	it	ge
  4027a0:	4623      	movge	r3, r4
  4027a2:	ebc3 0808 	rsb	r8, r3, r8
  4027a6:	1ae4      	subs	r4, r4, r3
  4027a8:	1ad3      	subs	r3, r2, r3
  4027aa:	9307      	str	r3, [sp, #28]
  4027ac:	2f00      	cmp	r7, #0
  4027ae:	dd1d      	ble.n	4027ec <_dtoa_r+0x774>
  4027b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4027b2:	b1ab      	cbz	r3, 4027e0 <_dtoa_r+0x768>
  4027b4:	b18d      	cbz	r5, 4027da <_dtoa_r+0x762>
  4027b6:	4631      	mov	r1, r6
  4027b8:	462a      	mov	r2, r5
  4027ba:	4650      	mov	r0, sl
  4027bc:	f000 fdba 	bl	403334 <__pow5mult>
  4027c0:	9a04      	ldr	r2, [sp, #16]
  4027c2:	4601      	mov	r1, r0
  4027c4:	4606      	mov	r6, r0
  4027c6:	4650      	mov	r0, sl
  4027c8:	f000 fd22 	bl	403210 <__multiply>
  4027cc:	9904      	ldr	r1, [sp, #16]
  4027ce:	9008      	str	r0, [sp, #32]
  4027d0:	4650      	mov	r0, sl
  4027d2:	f000 fc75 	bl	4030c0 <_Bfree>
  4027d6:	9b08      	ldr	r3, [sp, #32]
  4027d8:	9304      	str	r3, [sp, #16]
  4027da:	1b7a      	subs	r2, r7, r5
  4027dc:	d006      	beq.n	4027ec <_dtoa_r+0x774>
  4027de:	e000      	b.n	4027e2 <_dtoa_r+0x76a>
  4027e0:	463a      	mov	r2, r7
  4027e2:	9904      	ldr	r1, [sp, #16]
  4027e4:	4650      	mov	r0, sl
  4027e6:	f000 fda5 	bl	403334 <__pow5mult>
  4027ea:	9004      	str	r0, [sp, #16]
  4027ec:	2101      	movs	r1, #1
  4027ee:	4650      	mov	r0, sl
  4027f0:	f000 fd05 	bl	4031fe <__i2b>
  4027f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4027f6:	4605      	mov	r5, r0
  4027f8:	b35b      	cbz	r3, 402852 <_dtoa_r+0x7da>
  4027fa:	461a      	mov	r2, r3
  4027fc:	4601      	mov	r1, r0
  4027fe:	4650      	mov	r0, sl
  402800:	f000 fd98 	bl	403334 <__pow5mult>
  402804:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402806:	2b01      	cmp	r3, #1
  402808:	4605      	mov	r5, r0
  40280a:	dc18      	bgt.n	40283e <_dtoa_r+0x7c6>
  40280c:	9b02      	ldr	r3, [sp, #8]
  40280e:	b983      	cbnz	r3, 402832 <_dtoa_r+0x7ba>
  402810:	9b03      	ldr	r3, [sp, #12]
  402812:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402816:	b973      	cbnz	r3, 402836 <_dtoa_r+0x7be>
  402818:	9b03      	ldr	r3, [sp, #12]
  40281a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  40281e:	0d3f      	lsrs	r7, r7, #20
  402820:	053f      	lsls	r7, r7, #20
  402822:	b14f      	cbz	r7, 402838 <_dtoa_r+0x7c0>
  402824:	9b07      	ldr	r3, [sp, #28]
  402826:	3301      	adds	r3, #1
  402828:	f108 0801 	add.w	r8, r8, #1
  40282c:	9307      	str	r3, [sp, #28]
  40282e:	2701      	movs	r7, #1
  402830:	e002      	b.n	402838 <_dtoa_r+0x7c0>
  402832:	2700      	movs	r7, #0
  402834:	e000      	b.n	402838 <_dtoa_r+0x7c0>
  402836:	9f02      	ldr	r7, [sp, #8]
  402838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40283a:	b173      	cbz	r3, 40285a <_dtoa_r+0x7e2>
  40283c:	e000      	b.n	402840 <_dtoa_r+0x7c8>
  40283e:	2700      	movs	r7, #0
  402840:	692b      	ldr	r3, [r5, #16]
  402842:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402846:	6918      	ldr	r0, [r3, #16]
  402848:	f000 fc8c 	bl	403164 <__hi0bits>
  40284c:	f1c0 0020 	rsb	r0, r0, #32
  402850:	e004      	b.n	40285c <_dtoa_r+0x7e4>
  402852:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402854:	2b01      	cmp	r3, #1
  402856:	ddd9      	ble.n	40280c <_dtoa_r+0x794>
  402858:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40285a:	2001      	movs	r0, #1
  40285c:	9b07      	ldr	r3, [sp, #28]
  40285e:	4418      	add	r0, r3
  402860:	f010 001f 	ands.w	r0, r0, #31
  402864:	d008      	beq.n	402878 <_dtoa_r+0x800>
  402866:	f1c0 0320 	rsb	r3, r0, #32
  40286a:	2b04      	cmp	r3, #4
  40286c:	dd02      	ble.n	402874 <_dtoa_r+0x7fc>
  40286e:	f1c0 001c 	rsb	r0, r0, #28
  402872:	e002      	b.n	40287a <_dtoa_r+0x802>
  402874:	d006      	beq.n	402884 <_dtoa_r+0x80c>
  402876:	4618      	mov	r0, r3
  402878:	301c      	adds	r0, #28
  40287a:	9b07      	ldr	r3, [sp, #28]
  40287c:	4403      	add	r3, r0
  40287e:	4480      	add	r8, r0
  402880:	4404      	add	r4, r0
  402882:	9307      	str	r3, [sp, #28]
  402884:	f1b8 0f00 	cmp.w	r8, #0
  402888:	dd05      	ble.n	402896 <_dtoa_r+0x81e>
  40288a:	4642      	mov	r2, r8
  40288c:	9904      	ldr	r1, [sp, #16]
  40288e:	4650      	mov	r0, sl
  402890:	f000 fd9e 	bl	4033d0 <__lshift>
  402894:	9004      	str	r0, [sp, #16]
  402896:	9b07      	ldr	r3, [sp, #28]
  402898:	2b00      	cmp	r3, #0
  40289a:	dd05      	ble.n	4028a8 <_dtoa_r+0x830>
  40289c:	4629      	mov	r1, r5
  40289e:	461a      	mov	r2, r3
  4028a0:	4650      	mov	r0, sl
  4028a2:	f000 fd95 	bl	4033d0 <__lshift>
  4028a6:	4605      	mov	r5, r0
  4028a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4028aa:	b31b      	cbz	r3, 4028f4 <_dtoa_r+0x87c>
  4028ac:	4629      	mov	r1, r5
  4028ae:	9804      	ldr	r0, [sp, #16]
  4028b0:	f000 fddf 	bl	403472 <__mcmp>
  4028b4:	2800      	cmp	r0, #0
  4028b6:	da1d      	bge.n	4028f4 <_dtoa_r+0x87c>
  4028b8:	2300      	movs	r3, #0
  4028ba:	220a      	movs	r2, #10
  4028bc:	9904      	ldr	r1, [sp, #16]
  4028be:	4650      	mov	r0, sl
  4028c0:	f000 fc15 	bl	4030ee <__multadd>
  4028c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4028c6:	9004      	str	r0, [sp, #16]
  4028c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4028cc:	2b00      	cmp	r3, #0
  4028ce:	f000 8160 	beq.w	402b92 <_dtoa_r+0xb1a>
  4028d2:	4631      	mov	r1, r6
  4028d4:	2300      	movs	r3, #0
  4028d6:	220a      	movs	r2, #10
  4028d8:	4650      	mov	r0, sl
  4028da:	f000 fc08 	bl	4030ee <__multadd>
  4028de:	f1b9 0f00 	cmp.w	r9, #0
  4028e2:	4606      	mov	r6, r0
  4028e4:	dc3e      	bgt.n	402964 <_dtoa_r+0x8ec>
  4028e6:	e03a      	b.n	40295e <_dtoa_r+0x8e6>
  4028e8:	00404c18 	.word	0x00404c18
  4028ec:	40140000 	.word	0x40140000
  4028f0:	40240000 	.word	0x40240000
  4028f4:	9b05      	ldr	r3, [sp, #20]
  4028f6:	2b00      	cmp	r3, #0
  4028f8:	dc2b      	bgt.n	402952 <_dtoa_r+0x8da>
  4028fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4028fc:	2b02      	cmp	r3, #2
  4028fe:	dd28      	ble.n	402952 <_dtoa_r+0x8da>
  402900:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402904:	f1b9 0f00 	cmp.w	r9, #0
  402908:	d111      	bne.n	40292e <_dtoa_r+0x8b6>
  40290a:	4629      	mov	r1, r5
  40290c:	464b      	mov	r3, r9
  40290e:	2205      	movs	r2, #5
  402910:	4650      	mov	r0, sl
  402912:	f000 fbec 	bl	4030ee <__multadd>
  402916:	4601      	mov	r1, r0
  402918:	4605      	mov	r5, r0
  40291a:	9804      	ldr	r0, [sp, #16]
  40291c:	f000 fda9 	bl	403472 <__mcmp>
  402920:	2800      	cmp	r0, #0
  402922:	dc0c      	bgt.n	40293e <_dtoa_r+0x8c6>
  402924:	e003      	b.n	40292e <_dtoa_r+0x8b6>
  402926:	4635      	mov	r5, r6
  402928:	e000      	b.n	40292c <_dtoa_r+0x8b4>
  40292a:	2500      	movs	r5, #0
  40292c:	462e      	mov	r6, r5
  40292e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402930:	9c06      	ldr	r4, [sp, #24]
  402932:	ea6f 0b03 	mvn.w	fp, r3
  402936:	e009      	b.n	40294c <_dtoa_r+0x8d4>
  402938:	f8dd b020 	ldr.w	fp, [sp, #32]
  40293c:	4635      	mov	r5, r6
  40293e:	9b06      	ldr	r3, [sp, #24]
  402940:	9a06      	ldr	r2, [sp, #24]
  402942:	1c5c      	adds	r4, r3, #1
  402944:	2331      	movs	r3, #49	; 0x31
  402946:	7013      	strb	r3, [r2, #0]
  402948:	f10b 0b01 	add.w	fp, fp, #1
  40294c:	9605      	str	r6, [sp, #20]
  40294e:	2600      	movs	r6, #0
  402950:	e0f9      	b.n	402b46 <_dtoa_r+0xace>
  402952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402954:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402958:	b923      	cbnz	r3, 402964 <_dtoa_r+0x8ec>
  40295a:	9c06      	ldr	r4, [sp, #24]
  40295c:	e0b2      	b.n	402ac4 <_dtoa_r+0xa4c>
  40295e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402960:	2b02      	cmp	r3, #2
  402962:	dccf      	bgt.n	402904 <_dtoa_r+0x88c>
  402964:	2c00      	cmp	r4, #0
  402966:	dd05      	ble.n	402974 <_dtoa_r+0x8fc>
  402968:	4631      	mov	r1, r6
  40296a:	4622      	mov	r2, r4
  40296c:	4650      	mov	r0, sl
  40296e:	f000 fd2f 	bl	4033d0 <__lshift>
  402972:	4606      	mov	r6, r0
  402974:	b19f      	cbz	r7, 40299e <_dtoa_r+0x926>
  402976:	6871      	ldr	r1, [r6, #4]
  402978:	4650      	mov	r0, sl
  40297a:	f000 fb6c 	bl	403056 <_Balloc>
  40297e:	6932      	ldr	r2, [r6, #16]
  402980:	3202      	adds	r2, #2
  402982:	4604      	mov	r4, r0
  402984:	0092      	lsls	r2, r2, #2
  402986:	f106 010c 	add.w	r1, r6, #12
  40298a:	300c      	adds	r0, #12
  40298c:	f000 fb58 	bl	403040 <memcpy>
  402990:	2201      	movs	r2, #1
  402992:	4621      	mov	r1, r4
  402994:	4650      	mov	r0, sl
  402996:	f000 fd1b 	bl	4033d0 <__lshift>
  40299a:	9005      	str	r0, [sp, #20]
  40299c:	e000      	b.n	4029a0 <_dtoa_r+0x928>
  40299e:	9605      	str	r6, [sp, #20]
  4029a0:	9b02      	ldr	r3, [sp, #8]
  4029a2:	9f06      	ldr	r7, [sp, #24]
  4029a4:	f003 0301 	and.w	r3, r3, #1
  4029a8:	9307      	str	r3, [sp, #28]
  4029aa:	4629      	mov	r1, r5
  4029ac:	9804      	ldr	r0, [sp, #16]
  4029ae:	f7ff fad1 	bl	401f54 <quorem>
  4029b2:	4631      	mov	r1, r6
  4029b4:	4604      	mov	r4, r0
  4029b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4029ba:	9804      	ldr	r0, [sp, #16]
  4029bc:	f000 fd59 	bl	403472 <__mcmp>
  4029c0:	9a05      	ldr	r2, [sp, #20]
  4029c2:	9002      	str	r0, [sp, #8]
  4029c4:	4629      	mov	r1, r5
  4029c6:	4650      	mov	r0, sl
  4029c8:	f000 fd6f 	bl	4034aa <__mdiff>
  4029cc:	68c3      	ldr	r3, [r0, #12]
  4029ce:	4602      	mov	r2, r0
  4029d0:	b93b      	cbnz	r3, 4029e2 <_dtoa_r+0x96a>
  4029d2:	4601      	mov	r1, r0
  4029d4:	900a      	str	r0, [sp, #40]	; 0x28
  4029d6:	9804      	ldr	r0, [sp, #16]
  4029d8:	f000 fd4b 	bl	403472 <__mcmp>
  4029dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4029de:	4603      	mov	r3, r0
  4029e0:	e000      	b.n	4029e4 <_dtoa_r+0x96c>
  4029e2:	2301      	movs	r3, #1
  4029e4:	4611      	mov	r1, r2
  4029e6:	4650      	mov	r0, sl
  4029e8:	930a      	str	r3, [sp, #40]	; 0x28
  4029ea:	f000 fb69 	bl	4030c0 <_Bfree>
  4029ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4029f0:	b953      	cbnz	r3, 402a08 <_dtoa_r+0x990>
  4029f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4029f4:	b942      	cbnz	r2, 402a08 <_dtoa_r+0x990>
  4029f6:	9a07      	ldr	r2, [sp, #28]
  4029f8:	b932      	cbnz	r2, 402a08 <_dtoa_r+0x990>
  4029fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4029fe:	d02a      	beq.n	402a56 <_dtoa_r+0x9de>
  402a00:	9b02      	ldr	r3, [sp, #8]
  402a02:	2b00      	cmp	r3, #0
  402a04:	dc1c      	bgt.n	402a40 <_dtoa_r+0x9c8>
  402a06:	e01d      	b.n	402a44 <_dtoa_r+0x9cc>
  402a08:	9a02      	ldr	r2, [sp, #8]
  402a0a:	2a00      	cmp	r2, #0
  402a0c:	db04      	blt.n	402a18 <_dtoa_r+0x9a0>
  402a0e:	d11b      	bne.n	402a48 <_dtoa_r+0x9d0>
  402a10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  402a12:	b9ca      	cbnz	r2, 402a48 <_dtoa_r+0x9d0>
  402a14:	9a07      	ldr	r2, [sp, #28]
  402a16:	b9ba      	cbnz	r2, 402a48 <_dtoa_r+0x9d0>
  402a18:	2b00      	cmp	r3, #0
  402a1a:	dd13      	ble.n	402a44 <_dtoa_r+0x9cc>
  402a1c:	2201      	movs	r2, #1
  402a1e:	9904      	ldr	r1, [sp, #16]
  402a20:	4650      	mov	r0, sl
  402a22:	f000 fcd5 	bl	4033d0 <__lshift>
  402a26:	4629      	mov	r1, r5
  402a28:	9004      	str	r0, [sp, #16]
  402a2a:	f000 fd22 	bl	403472 <__mcmp>
  402a2e:	2800      	cmp	r0, #0
  402a30:	dc03      	bgt.n	402a3a <_dtoa_r+0x9c2>
  402a32:	d107      	bne.n	402a44 <_dtoa_r+0x9cc>
  402a34:	f018 0f01 	tst.w	r8, #1
  402a38:	d004      	beq.n	402a44 <_dtoa_r+0x9cc>
  402a3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  402a3e:	d00a      	beq.n	402a56 <_dtoa_r+0x9de>
  402a40:	f104 0831 	add.w	r8, r4, #49	; 0x31
  402a44:	1c7c      	adds	r4, r7, #1
  402a46:	e00c      	b.n	402a62 <_dtoa_r+0x9ea>
  402a48:	2b00      	cmp	r3, #0
  402a4a:	f107 0401 	add.w	r4, r7, #1
  402a4e:	dd0b      	ble.n	402a68 <_dtoa_r+0x9f0>
  402a50:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  402a54:	d103      	bne.n	402a5e <_dtoa_r+0x9e6>
  402a56:	2339      	movs	r3, #57	; 0x39
  402a58:	703b      	strb	r3, [r7, #0]
  402a5a:	3701      	adds	r7, #1
  402a5c:	e056      	b.n	402b0c <_dtoa_r+0xa94>
  402a5e:	f108 0801 	add.w	r8, r8, #1
  402a62:	f887 8000 	strb.w	r8, [r7]
  402a66:	e06e      	b.n	402b46 <_dtoa_r+0xace>
  402a68:	9b06      	ldr	r3, [sp, #24]
  402a6a:	f804 8c01 	strb.w	r8, [r4, #-1]
  402a6e:	1ae3      	subs	r3, r4, r3
  402a70:	454b      	cmp	r3, r9
  402a72:	4627      	mov	r7, r4
  402a74:	d03b      	beq.n	402aee <_dtoa_r+0xa76>
  402a76:	2300      	movs	r3, #0
  402a78:	220a      	movs	r2, #10
  402a7a:	9904      	ldr	r1, [sp, #16]
  402a7c:	4650      	mov	r0, sl
  402a7e:	f000 fb36 	bl	4030ee <__multadd>
  402a82:	9b05      	ldr	r3, [sp, #20]
  402a84:	9004      	str	r0, [sp, #16]
  402a86:	429e      	cmp	r6, r3
  402a88:	f04f 020a 	mov.w	r2, #10
  402a8c:	f04f 0300 	mov.w	r3, #0
  402a90:	4631      	mov	r1, r6
  402a92:	4650      	mov	r0, sl
  402a94:	d104      	bne.n	402aa0 <_dtoa_r+0xa28>
  402a96:	f000 fb2a 	bl	4030ee <__multadd>
  402a9a:	4606      	mov	r6, r0
  402a9c:	9005      	str	r0, [sp, #20]
  402a9e:	e784      	b.n	4029aa <_dtoa_r+0x932>
  402aa0:	f000 fb25 	bl	4030ee <__multadd>
  402aa4:	2300      	movs	r3, #0
  402aa6:	4606      	mov	r6, r0
  402aa8:	220a      	movs	r2, #10
  402aaa:	9905      	ldr	r1, [sp, #20]
  402aac:	4650      	mov	r0, sl
  402aae:	f000 fb1e 	bl	4030ee <__multadd>
  402ab2:	9005      	str	r0, [sp, #20]
  402ab4:	e779      	b.n	4029aa <_dtoa_r+0x932>
  402ab6:	2300      	movs	r3, #0
  402ab8:	220a      	movs	r2, #10
  402aba:	9904      	ldr	r1, [sp, #16]
  402abc:	4650      	mov	r0, sl
  402abe:	f000 fb16 	bl	4030ee <__multadd>
  402ac2:	9004      	str	r0, [sp, #16]
  402ac4:	4629      	mov	r1, r5
  402ac6:	9804      	ldr	r0, [sp, #16]
  402ac8:	f7ff fa44 	bl	401f54 <quorem>
  402acc:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402ad0:	f804 8b01 	strb.w	r8, [r4], #1
  402ad4:	9b06      	ldr	r3, [sp, #24]
  402ad6:	1ae3      	subs	r3, r4, r3
  402ad8:	454b      	cmp	r3, r9
  402ada:	dbec      	blt.n	402ab6 <_dtoa_r+0xa3e>
  402adc:	9b06      	ldr	r3, [sp, #24]
  402ade:	9605      	str	r6, [sp, #20]
  402ae0:	f1b9 0f01 	cmp.w	r9, #1
  402ae4:	bfac      	ite	ge
  402ae6:	444b      	addge	r3, r9
  402ae8:	3301      	addlt	r3, #1
  402aea:	461f      	mov	r7, r3
  402aec:	2600      	movs	r6, #0
  402aee:	2201      	movs	r2, #1
  402af0:	9904      	ldr	r1, [sp, #16]
  402af2:	4650      	mov	r0, sl
  402af4:	f000 fc6c 	bl	4033d0 <__lshift>
  402af8:	4629      	mov	r1, r5
  402afa:	9004      	str	r0, [sp, #16]
  402afc:	f000 fcb9 	bl	403472 <__mcmp>
  402b00:	2800      	cmp	r0, #0
  402b02:	dc03      	bgt.n	402b0c <_dtoa_r+0xa94>
  402b04:	d116      	bne.n	402b34 <_dtoa_r+0xabc>
  402b06:	f018 0f01 	tst.w	r8, #1
  402b0a:	d013      	beq.n	402b34 <_dtoa_r+0xabc>
  402b0c:	463c      	mov	r4, r7
  402b0e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  402b12:	2b39      	cmp	r3, #57	; 0x39
  402b14:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  402b18:	d109      	bne.n	402b2e <_dtoa_r+0xab6>
  402b1a:	9b06      	ldr	r3, [sp, #24]
  402b1c:	4293      	cmp	r3, r2
  402b1e:	d104      	bne.n	402b2a <_dtoa_r+0xab2>
  402b20:	f10b 0b01 	add.w	fp, fp, #1
  402b24:	2331      	movs	r3, #49	; 0x31
  402b26:	9a06      	ldr	r2, [sp, #24]
  402b28:	e002      	b.n	402b30 <_dtoa_r+0xab8>
  402b2a:	4614      	mov	r4, r2
  402b2c:	e7ef      	b.n	402b0e <_dtoa_r+0xa96>
  402b2e:	3301      	adds	r3, #1
  402b30:	7013      	strb	r3, [r2, #0]
  402b32:	e008      	b.n	402b46 <_dtoa_r+0xace>
  402b34:	463c      	mov	r4, r7
  402b36:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  402b3a:	2b30      	cmp	r3, #48	; 0x30
  402b3c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  402b40:	d101      	bne.n	402b46 <_dtoa_r+0xace>
  402b42:	4614      	mov	r4, r2
  402b44:	e7f7      	b.n	402b36 <_dtoa_r+0xabe>
  402b46:	4629      	mov	r1, r5
  402b48:	4650      	mov	r0, sl
  402b4a:	f000 fab9 	bl	4030c0 <_Bfree>
  402b4e:	9b05      	ldr	r3, [sp, #20]
  402b50:	b16b      	cbz	r3, 402b6e <_dtoa_r+0xaf6>
  402b52:	b12e      	cbz	r6, 402b60 <_dtoa_r+0xae8>
  402b54:	429e      	cmp	r6, r3
  402b56:	d003      	beq.n	402b60 <_dtoa_r+0xae8>
  402b58:	4631      	mov	r1, r6
  402b5a:	4650      	mov	r0, sl
  402b5c:	f000 fab0 	bl	4030c0 <_Bfree>
  402b60:	9905      	ldr	r1, [sp, #20]
  402b62:	4650      	mov	r0, sl
  402b64:	f000 faac 	bl	4030c0 <_Bfree>
  402b68:	e001      	b.n	402b6e <_dtoa_r+0xaf6>
  402b6a:	f8dd b020 	ldr.w	fp, [sp, #32]
  402b6e:	9904      	ldr	r1, [sp, #16]
  402b70:	4650      	mov	r0, sl
  402b72:	f000 faa5 	bl	4030c0 <_Bfree>
  402b76:	2300      	movs	r3, #0
  402b78:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402b7a:	7023      	strb	r3, [r4, #0]
  402b7c:	f10b 0301 	add.w	r3, fp, #1
  402b80:	6013      	str	r3, [r2, #0]
  402b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402b84:	b11b      	cbz	r3, 402b8e <_dtoa_r+0xb16>
  402b86:	601c      	str	r4, [r3, #0]
  402b88:	e001      	b.n	402b8e <_dtoa_r+0xb16>
  402b8a:	4808      	ldr	r0, [pc, #32]	; (402bac <_dtoa_r+0xb34>)
  402b8c:	e00a      	b.n	402ba4 <_dtoa_r+0xb2c>
  402b8e:	9806      	ldr	r0, [sp, #24]
  402b90:	e008      	b.n	402ba4 <_dtoa_r+0xb2c>
  402b92:	f1b9 0f00 	cmp.w	r9, #0
  402b96:	f73f aee0 	bgt.w	40295a <_dtoa_r+0x8e2>
  402b9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402b9c:	2b02      	cmp	r3, #2
  402b9e:	f77f aedc 	ble.w	40295a <_dtoa_r+0x8e2>
  402ba2:	e6af      	b.n	402904 <_dtoa_r+0x88c>
  402ba4:	b015      	add	sp, #84	; 0x54
  402ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402baa:	bf00      	nop
  402bac:	00404b84 	.word	0x00404b84

00402bb0 <__sflush_r>:
  402bb0:	898a      	ldrh	r2, [r1, #12]
  402bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bb6:	4605      	mov	r5, r0
  402bb8:	0710      	lsls	r0, r2, #28
  402bba:	460c      	mov	r4, r1
  402bbc:	d459      	bmi.n	402c72 <__sflush_r+0xc2>
  402bbe:	684b      	ldr	r3, [r1, #4]
  402bc0:	2b00      	cmp	r3, #0
  402bc2:	dc02      	bgt.n	402bca <__sflush_r+0x1a>
  402bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	dd17      	ble.n	402bfa <__sflush_r+0x4a>
  402bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  402bcc:	b1ae      	cbz	r6, 402bfa <__sflush_r+0x4a>
  402bce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  402bd2:	2300      	movs	r3, #0
  402bd4:	b292      	uxth	r2, r2
  402bd6:	682f      	ldr	r7, [r5, #0]
  402bd8:	602b      	str	r3, [r5, #0]
  402bda:	b10a      	cbz	r2, 402be0 <__sflush_r+0x30>
  402bdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
  402bde:	e015      	b.n	402c0c <__sflush_r+0x5c>
  402be0:	6a21      	ldr	r1, [r4, #32]
  402be2:	2301      	movs	r3, #1
  402be4:	4628      	mov	r0, r5
  402be6:	47b0      	blx	r6
  402be8:	1c41      	adds	r1, r0, #1
  402bea:	d10f      	bne.n	402c0c <__sflush_r+0x5c>
  402bec:	682b      	ldr	r3, [r5, #0]
  402bee:	b16b      	cbz	r3, 402c0c <__sflush_r+0x5c>
  402bf0:	2b1d      	cmp	r3, #29
  402bf2:	d001      	beq.n	402bf8 <__sflush_r+0x48>
  402bf4:	2b16      	cmp	r3, #22
  402bf6:	d103      	bne.n	402c00 <__sflush_r+0x50>
  402bf8:	602f      	str	r7, [r5, #0]
  402bfa:	2000      	movs	r0, #0
  402bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c00:	89a3      	ldrh	r3, [r4, #12]
  402c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402c06:	81a3      	strh	r3, [r4, #12]
  402c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c0c:	89a3      	ldrh	r3, [r4, #12]
  402c0e:	075a      	lsls	r2, r3, #29
  402c10:	d505      	bpl.n	402c1e <__sflush_r+0x6e>
  402c12:	6863      	ldr	r3, [r4, #4]
  402c14:	1ac0      	subs	r0, r0, r3
  402c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
  402c18:	b10b      	cbz	r3, 402c1e <__sflush_r+0x6e>
  402c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402c1c:	1ac0      	subs	r0, r0, r3
  402c1e:	2300      	movs	r3, #0
  402c20:	4602      	mov	r2, r0
  402c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  402c24:	6a21      	ldr	r1, [r4, #32]
  402c26:	4628      	mov	r0, r5
  402c28:	47b0      	blx	r6
  402c2a:	1c43      	adds	r3, r0, #1
  402c2c:	89a3      	ldrh	r3, [r4, #12]
  402c2e:	d106      	bne.n	402c3e <__sflush_r+0x8e>
  402c30:	6829      	ldr	r1, [r5, #0]
  402c32:	291d      	cmp	r1, #29
  402c34:	d83a      	bhi.n	402cac <__sflush_r+0xfc>
  402c36:	4a21      	ldr	r2, [pc, #132]	; (402cbc <__sflush_r+0x10c>)
  402c38:	40ca      	lsrs	r2, r1
  402c3a:	07d6      	lsls	r6, r2, #31
  402c3c:	d536      	bpl.n	402cac <__sflush_r+0xfc>
  402c3e:	2200      	movs	r2, #0
  402c40:	6062      	str	r2, [r4, #4]
  402c42:	04d9      	lsls	r1, r3, #19
  402c44:	6922      	ldr	r2, [r4, #16]
  402c46:	6022      	str	r2, [r4, #0]
  402c48:	d504      	bpl.n	402c54 <__sflush_r+0xa4>
  402c4a:	1c42      	adds	r2, r0, #1
  402c4c:	d101      	bne.n	402c52 <__sflush_r+0xa2>
  402c4e:	682b      	ldr	r3, [r5, #0]
  402c50:	b903      	cbnz	r3, 402c54 <__sflush_r+0xa4>
  402c52:	6560      	str	r0, [r4, #84]	; 0x54
  402c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402c56:	602f      	str	r7, [r5, #0]
  402c58:	2900      	cmp	r1, #0
  402c5a:	d0ce      	beq.n	402bfa <__sflush_r+0x4a>
  402c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402c60:	4299      	cmp	r1, r3
  402c62:	d002      	beq.n	402c6a <__sflush_r+0xba>
  402c64:	4628      	mov	r0, r5
  402c66:	f000 fcdb 	bl	403620 <_free_r>
  402c6a:	2000      	movs	r0, #0
  402c6c:	6360      	str	r0, [r4, #52]	; 0x34
  402c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c72:	690f      	ldr	r7, [r1, #16]
  402c74:	2f00      	cmp	r7, #0
  402c76:	d0c0      	beq.n	402bfa <__sflush_r+0x4a>
  402c78:	0793      	lsls	r3, r2, #30
  402c7a:	680e      	ldr	r6, [r1, #0]
  402c7c:	bf08      	it	eq
  402c7e:	694b      	ldreq	r3, [r1, #20]
  402c80:	600f      	str	r7, [r1, #0]
  402c82:	bf18      	it	ne
  402c84:	2300      	movne	r3, #0
  402c86:	ebc7 0806 	rsb	r8, r7, r6
  402c8a:	608b      	str	r3, [r1, #8]
  402c8c:	e002      	b.n	402c94 <__sflush_r+0xe4>
  402c8e:	4407      	add	r7, r0
  402c90:	ebc0 0808 	rsb	r8, r0, r8
  402c94:	f1b8 0f00 	cmp.w	r8, #0
  402c98:	ddaf      	ble.n	402bfa <__sflush_r+0x4a>
  402c9a:	4643      	mov	r3, r8
  402c9c:	463a      	mov	r2, r7
  402c9e:	6a21      	ldr	r1, [r4, #32]
  402ca0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  402ca2:	4628      	mov	r0, r5
  402ca4:	47b0      	blx	r6
  402ca6:	2800      	cmp	r0, #0
  402ca8:	dcf1      	bgt.n	402c8e <__sflush_r+0xde>
  402caa:	89a3      	ldrh	r3, [r4, #12]
  402cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402cb0:	81a3      	strh	r3, [r4, #12]
  402cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402cba:	bf00      	nop
  402cbc:	20400001 	.word	0x20400001

00402cc0 <_fflush_r>:
  402cc0:	b538      	push	{r3, r4, r5, lr}
  402cc2:	690b      	ldr	r3, [r1, #16]
  402cc4:	4605      	mov	r5, r0
  402cc6:	460c      	mov	r4, r1
  402cc8:	b1db      	cbz	r3, 402d02 <_fflush_r+0x42>
  402cca:	b118      	cbz	r0, 402cd4 <_fflush_r+0x14>
  402ccc:	6983      	ldr	r3, [r0, #24]
  402cce:	b90b      	cbnz	r3, 402cd4 <_fflush_r+0x14>
  402cd0:	f000 f860 	bl	402d94 <__sinit>
  402cd4:	4b0c      	ldr	r3, [pc, #48]	; (402d08 <_fflush_r+0x48>)
  402cd6:	429c      	cmp	r4, r3
  402cd8:	d101      	bne.n	402cde <_fflush_r+0x1e>
  402cda:	686c      	ldr	r4, [r5, #4]
  402cdc:	e008      	b.n	402cf0 <_fflush_r+0x30>
  402cde:	4b0b      	ldr	r3, [pc, #44]	; (402d0c <_fflush_r+0x4c>)
  402ce0:	429c      	cmp	r4, r3
  402ce2:	d101      	bne.n	402ce8 <_fflush_r+0x28>
  402ce4:	68ac      	ldr	r4, [r5, #8]
  402ce6:	e003      	b.n	402cf0 <_fflush_r+0x30>
  402ce8:	4b09      	ldr	r3, [pc, #36]	; (402d10 <_fflush_r+0x50>)
  402cea:	429c      	cmp	r4, r3
  402cec:	bf08      	it	eq
  402cee:	68ec      	ldreq	r4, [r5, #12]
  402cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402cf4:	b12b      	cbz	r3, 402d02 <_fflush_r+0x42>
  402cf6:	4621      	mov	r1, r4
  402cf8:	4628      	mov	r0, r5
  402cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402cfe:	f7ff bf57 	b.w	402bb0 <__sflush_r>
  402d02:	2000      	movs	r0, #0
  402d04:	bd38      	pop	{r3, r4, r5, pc}
  402d06:	bf00      	nop
  402d08:	00404bb8 	.word	0x00404bb8
  402d0c:	00404bd8 	.word	0x00404bd8
  402d10:	00404bf8 	.word	0x00404bf8

00402d14 <_cleanup_r>:
  402d14:	4901      	ldr	r1, [pc, #4]	; (402d1c <_cleanup_r+0x8>)
  402d16:	f000 b8a9 	b.w	402e6c <_fwalk_reent>
  402d1a:	bf00      	nop
  402d1c:	00402cc1 	.word	0x00402cc1

00402d20 <std.isra.0>:
  402d20:	2300      	movs	r3, #0
  402d22:	b510      	push	{r4, lr}
  402d24:	4604      	mov	r4, r0
  402d26:	6003      	str	r3, [r0, #0]
  402d28:	6043      	str	r3, [r0, #4]
  402d2a:	6083      	str	r3, [r0, #8]
  402d2c:	8181      	strh	r1, [r0, #12]
  402d2e:	6643      	str	r3, [r0, #100]	; 0x64
  402d30:	81c2      	strh	r2, [r0, #14]
  402d32:	6103      	str	r3, [r0, #16]
  402d34:	6143      	str	r3, [r0, #20]
  402d36:	6183      	str	r3, [r0, #24]
  402d38:	4619      	mov	r1, r3
  402d3a:	2208      	movs	r2, #8
  402d3c:	305c      	adds	r0, #92	; 0x5c
  402d3e:	f7fe fa9b 	bl	401278 <memset>
  402d42:	4b05      	ldr	r3, [pc, #20]	; (402d58 <std.isra.0+0x38>)
  402d44:	6263      	str	r3, [r4, #36]	; 0x24
  402d46:	4b05      	ldr	r3, [pc, #20]	; (402d5c <std.isra.0+0x3c>)
  402d48:	62a3      	str	r3, [r4, #40]	; 0x28
  402d4a:	4b05      	ldr	r3, [pc, #20]	; (402d60 <std.isra.0+0x40>)
  402d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
  402d4e:	4b05      	ldr	r3, [pc, #20]	; (402d64 <std.isra.0+0x44>)
  402d50:	6224      	str	r4, [r4, #32]
  402d52:	6323      	str	r3, [r4, #48]	; 0x30
  402d54:	bd10      	pop	{r4, pc}
  402d56:	bf00      	nop
  402d58:	00403a21 	.word	0x00403a21
  402d5c:	00403a43 	.word	0x00403a43
  402d60:	00403a7b 	.word	0x00403a7b
  402d64:	00403a9f 	.word	0x00403a9f

00402d68 <__sfmoreglue>:
  402d68:	b570      	push	{r4, r5, r6, lr}
  402d6a:	2368      	movs	r3, #104	; 0x68
  402d6c:	1e4d      	subs	r5, r1, #1
  402d6e:	435d      	muls	r5, r3
  402d70:	460e      	mov	r6, r1
  402d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
  402d76:	f000 fca1 	bl	4036bc <_malloc_r>
  402d7a:	4604      	mov	r4, r0
  402d7c:	b140      	cbz	r0, 402d90 <__sfmoreglue+0x28>
  402d7e:	2100      	movs	r1, #0
  402d80:	e880 0042 	stmia.w	r0, {r1, r6}
  402d84:	300c      	adds	r0, #12
  402d86:	60a0      	str	r0, [r4, #8]
  402d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
  402d8c:	f7fe fa74 	bl	401278 <memset>
  402d90:	4620      	mov	r0, r4
  402d92:	bd70      	pop	{r4, r5, r6, pc}

00402d94 <__sinit>:
  402d94:	6983      	ldr	r3, [r0, #24]
  402d96:	b510      	push	{r4, lr}
  402d98:	4604      	mov	r4, r0
  402d9a:	bb33      	cbnz	r3, 402dea <__sinit+0x56>
  402d9c:	6483      	str	r3, [r0, #72]	; 0x48
  402d9e:	64c3      	str	r3, [r0, #76]	; 0x4c
  402da0:	6503      	str	r3, [r0, #80]	; 0x50
  402da2:	4b12      	ldr	r3, [pc, #72]	; (402dec <__sinit+0x58>)
  402da4:	4a12      	ldr	r2, [pc, #72]	; (402df0 <__sinit+0x5c>)
  402da6:	681b      	ldr	r3, [r3, #0]
  402da8:	6282      	str	r2, [r0, #40]	; 0x28
  402daa:	4298      	cmp	r0, r3
  402dac:	bf04      	itt	eq
  402dae:	2301      	moveq	r3, #1
  402db0:	6183      	streq	r3, [r0, #24]
  402db2:	f000 f81f 	bl	402df4 <__sfp>
  402db6:	6060      	str	r0, [r4, #4]
  402db8:	4620      	mov	r0, r4
  402dba:	f000 f81b 	bl	402df4 <__sfp>
  402dbe:	60a0      	str	r0, [r4, #8]
  402dc0:	4620      	mov	r0, r4
  402dc2:	f000 f817 	bl	402df4 <__sfp>
  402dc6:	2200      	movs	r2, #0
  402dc8:	60e0      	str	r0, [r4, #12]
  402dca:	2104      	movs	r1, #4
  402dcc:	6860      	ldr	r0, [r4, #4]
  402dce:	f7ff ffa7 	bl	402d20 <std.isra.0>
  402dd2:	2201      	movs	r2, #1
  402dd4:	2109      	movs	r1, #9
  402dd6:	68a0      	ldr	r0, [r4, #8]
  402dd8:	f7ff ffa2 	bl	402d20 <std.isra.0>
  402ddc:	2202      	movs	r2, #2
  402dde:	2112      	movs	r1, #18
  402de0:	68e0      	ldr	r0, [r4, #12]
  402de2:	f7ff ff9d 	bl	402d20 <std.isra.0>
  402de6:	2301      	movs	r3, #1
  402de8:	61a3      	str	r3, [r4, #24]
  402dea:	bd10      	pop	{r4, pc}
  402dec:	00404b70 	.word	0x00404b70
  402df0:	00402d15 	.word	0x00402d15

00402df4 <__sfp>:
  402df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402df6:	4b1c      	ldr	r3, [pc, #112]	; (402e68 <__sfp+0x74>)
  402df8:	681e      	ldr	r6, [r3, #0]
  402dfa:	69b3      	ldr	r3, [r6, #24]
  402dfc:	4607      	mov	r7, r0
  402dfe:	b913      	cbnz	r3, 402e06 <__sfp+0x12>
  402e00:	4630      	mov	r0, r6
  402e02:	f7ff ffc7 	bl	402d94 <__sinit>
  402e06:	3648      	adds	r6, #72	; 0x48
  402e08:	68b4      	ldr	r4, [r6, #8]
  402e0a:	6873      	ldr	r3, [r6, #4]
  402e0c:	3b01      	subs	r3, #1
  402e0e:	d404      	bmi.n	402e1a <__sfp+0x26>
  402e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  402e14:	b17d      	cbz	r5, 402e36 <__sfp+0x42>
  402e16:	3468      	adds	r4, #104	; 0x68
  402e18:	e7f8      	b.n	402e0c <__sfp+0x18>
  402e1a:	6833      	ldr	r3, [r6, #0]
  402e1c:	b10b      	cbz	r3, 402e22 <__sfp+0x2e>
  402e1e:	6836      	ldr	r6, [r6, #0]
  402e20:	e7f2      	b.n	402e08 <__sfp+0x14>
  402e22:	2104      	movs	r1, #4
  402e24:	4638      	mov	r0, r7
  402e26:	f7ff ff9f 	bl	402d68 <__sfmoreglue>
  402e2a:	6030      	str	r0, [r6, #0]
  402e2c:	2800      	cmp	r0, #0
  402e2e:	d1f6      	bne.n	402e1e <__sfp+0x2a>
  402e30:	230c      	movs	r3, #12
  402e32:	603b      	str	r3, [r7, #0]
  402e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402e3a:	81e3      	strh	r3, [r4, #14]
  402e3c:	2301      	movs	r3, #1
  402e3e:	81a3      	strh	r3, [r4, #12]
  402e40:	6665      	str	r5, [r4, #100]	; 0x64
  402e42:	6025      	str	r5, [r4, #0]
  402e44:	60a5      	str	r5, [r4, #8]
  402e46:	6065      	str	r5, [r4, #4]
  402e48:	6125      	str	r5, [r4, #16]
  402e4a:	6165      	str	r5, [r4, #20]
  402e4c:	61a5      	str	r5, [r4, #24]
  402e4e:	2208      	movs	r2, #8
  402e50:	4629      	mov	r1, r5
  402e52:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  402e56:	f7fe fa0f 	bl	401278 <memset>
  402e5a:	6365      	str	r5, [r4, #52]	; 0x34
  402e5c:	63a5      	str	r5, [r4, #56]	; 0x38
  402e5e:	64a5      	str	r5, [r4, #72]	; 0x48
  402e60:	64e5      	str	r5, [r4, #76]	; 0x4c
  402e62:	4620      	mov	r0, r4
  402e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402e66:	bf00      	nop
  402e68:	00404b70 	.word	0x00404b70

00402e6c <_fwalk_reent>:
  402e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402e70:	4680      	mov	r8, r0
  402e72:	4689      	mov	r9, r1
  402e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
  402e78:	2600      	movs	r6, #0
  402e7a:	b194      	cbz	r4, 402ea2 <_fwalk_reent+0x36>
  402e7c:	68a5      	ldr	r5, [r4, #8]
  402e7e:	6867      	ldr	r7, [r4, #4]
  402e80:	3f01      	subs	r7, #1
  402e82:	d40c      	bmi.n	402e9e <_fwalk_reent+0x32>
  402e84:	89ab      	ldrh	r3, [r5, #12]
  402e86:	2b01      	cmp	r3, #1
  402e88:	d907      	bls.n	402e9a <_fwalk_reent+0x2e>
  402e8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  402e8e:	3301      	adds	r3, #1
  402e90:	d003      	beq.n	402e9a <_fwalk_reent+0x2e>
  402e92:	4629      	mov	r1, r5
  402e94:	4640      	mov	r0, r8
  402e96:	47c8      	blx	r9
  402e98:	4306      	orrs	r6, r0
  402e9a:	3568      	adds	r5, #104	; 0x68
  402e9c:	e7f0      	b.n	402e80 <_fwalk_reent+0x14>
  402e9e:	6824      	ldr	r4, [r4, #0]
  402ea0:	e7eb      	b.n	402e7a <_fwalk_reent+0xe>
  402ea2:	4630      	mov	r0, r6
  402ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00402ea8 <_localeconv_r>:
  402ea8:	4b04      	ldr	r3, [pc, #16]	; (402ebc <_localeconv_r+0x14>)
  402eaa:	681b      	ldr	r3, [r3, #0]
  402eac:	6a18      	ldr	r0, [r3, #32]
  402eae:	4b04      	ldr	r3, [pc, #16]	; (402ec0 <_localeconv_r+0x18>)
  402eb0:	2800      	cmp	r0, #0
  402eb2:	bf08      	it	eq
  402eb4:	4618      	moveq	r0, r3
  402eb6:	30f0      	adds	r0, #240	; 0xf0
  402eb8:	4770      	bx	lr
  402eba:	bf00      	nop
  402ebc:	20000070 	.word	0x20000070
  402ec0:	20000074 	.word	0x20000074

00402ec4 <__swhatbuf_r>:
  402ec4:	b570      	push	{r4, r5, r6, lr}
  402ec6:	460e      	mov	r6, r1
  402ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402ecc:	2900      	cmp	r1, #0
  402ece:	b090      	sub	sp, #64	; 0x40
  402ed0:	4614      	mov	r4, r2
  402ed2:	461d      	mov	r5, r3
  402ed4:	da06      	bge.n	402ee4 <__swhatbuf_r+0x20>
  402ed6:	2300      	movs	r3, #0
  402ed8:	602b      	str	r3, [r5, #0]
  402eda:	89b3      	ldrh	r3, [r6, #12]
  402edc:	061a      	lsls	r2, r3, #24
  402ede:	d50e      	bpl.n	402efe <__swhatbuf_r+0x3a>
  402ee0:	2340      	movs	r3, #64	; 0x40
  402ee2:	e00e      	b.n	402f02 <__swhatbuf_r+0x3e>
  402ee4:	aa01      	add	r2, sp, #4
  402ee6:	f000 fe01 	bl	403aec <_fstat_r>
  402eea:	2800      	cmp	r0, #0
  402eec:	dbf3      	blt.n	402ed6 <__swhatbuf_r+0x12>
  402eee:	9a02      	ldr	r2, [sp, #8]
  402ef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402ef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  402ef8:	425a      	negs	r2, r3
  402efa:	415a      	adcs	r2, r3
  402efc:	602a      	str	r2, [r5, #0]
  402efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402f02:	2000      	movs	r0, #0
  402f04:	6023      	str	r3, [r4, #0]
  402f06:	b010      	add	sp, #64	; 0x40
  402f08:	bd70      	pop	{r4, r5, r6, pc}
	...

00402f0c <__smakebuf_r>:
  402f0c:	898b      	ldrh	r3, [r1, #12]
  402f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402f10:	079e      	lsls	r6, r3, #30
  402f12:	4605      	mov	r5, r0
  402f14:	460c      	mov	r4, r1
  402f16:	d410      	bmi.n	402f3a <__smakebuf_r+0x2e>
  402f18:	ab01      	add	r3, sp, #4
  402f1a:	466a      	mov	r2, sp
  402f1c:	f7ff ffd2 	bl	402ec4 <__swhatbuf_r>
  402f20:	9900      	ldr	r1, [sp, #0]
  402f22:	4606      	mov	r6, r0
  402f24:	4628      	mov	r0, r5
  402f26:	f000 fbc9 	bl	4036bc <_malloc_r>
  402f2a:	b968      	cbnz	r0, 402f48 <__smakebuf_r+0x3c>
  402f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f30:	059a      	lsls	r2, r3, #22
  402f32:	d422      	bmi.n	402f7a <__smakebuf_r+0x6e>
  402f34:	f043 0302 	orr.w	r3, r3, #2
  402f38:	81a3      	strh	r3, [r4, #12]
  402f3a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402f3e:	6023      	str	r3, [r4, #0]
  402f40:	6123      	str	r3, [r4, #16]
  402f42:	2301      	movs	r3, #1
  402f44:	6163      	str	r3, [r4, #20]
  402f46:	e018      	b.n	402f7a <__smakebuf_r+0x6e>
  402f48:	4b0d      	ldr	r3, [pc, #52]	; (402f80 <__smakebuf_r+0x74>)
  402f4a:	62ab      	str	r3, [r5, #40]	; 0x28
  402f4c:	89a3      	ldrh	r3, [r4, #12]
  402f4e:	6020      	str	r0, [r4, #0]
  402f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402f54:	81a3      	strh	r3, [r4, #12]
  402f56:	9b00      	ldr	r3, [sp, #0]
  402f58:	6163      	str	r3, [r4, #20]
  402f5a:	9b01      	ldr	r3, [sp, #4]
  402f5c:	6120      	str	r0, [r4, #16]
  402f5e:	b14b      	cbz	r3, 402f74 <__smakebuf_r+0x68>
  402f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402f64:	4628      	mov	r0, r5
  402f66:	f000 fdd3 	bl	403b10 <_isatty_r>
  402f6a:	b118      	cbz	r0, 402f74 <__smakebuf_r+0x68>
  402f6c:	89a3      	ldrh	r3, [r4, #12]
  402f6e:	f043 0301 	orr.w	r3, r3, #1
  402f72:	81a3      	strh	r3, [r4, #12]
  402f74:	89a0      	ldrh	r0, [r4, #12]
  402f76:	4330      	orrs	r0, r6
  402f78:	81a0      	strh	r0, [r4, #12]
  402f7a:	b002      	add	sp, #8
  402f7c:	bd70      	pop	{r4, r5, r6, pc}
  402f7e:	bf00      	nop
  402f80:	00402d15 	.word	0x00402d15

00402f84 <malloc>:
  402f84:	4b02      	ldr	r3, [pc, #8]	; (402f90 <malloc+0xc>)
  402f86:	4601      	mov	r1, r0
  402f88:	6818      	ldr	r0, [r3, #0]
  402f8a:	f000 bb97 	b.w	4036bc <_malloc_r>
  402f8e:	bf00      	nop
  402f90:	20000070 	.word	0x20000070
	...

00402fa0 <memchr>:
  402fa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402fa4:	2a10      	cmp	r2, #16
  402fa6:	db2b      	blt.n	403000 <memchr+0x60>
  402fa8:	f010 0f07 	tst.w	r0, #7
  402fac:	d008      	beq.n	402fc0 <memchr+0x20>
  402fae:	f810 3b01 	ldrb.w	r3, [r0], #1
  402fb2:	3a01      	subs	r2, #1
  402fb4:	428b      	cmp	r3, r1
  402fb6:	d02d      	beq.n	403014 <memchr+0x74>
  402fb8:	f010 0f07 	tst.w	r0, #7
  402fbc:	b342      	cbz	r2, 403010 <memchr+0x70>
  402fbe:	d1f6      	bne.n	402fae <memchr+0xe>
  402fc0:	b4f0      	push	{r4, r5, r6, r7}
  402fc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402fc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  402fca:	f022 0407 	bic.w	r4, r2, #7
  402fce:	f07f 0700 	mvns.w	r7, #0
  402fd2:	2300      	movs	r3, #0
  402fd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  402fd8:	3c08      	subs	r4, #8
  402fda:	ea85 0501 	eor.w	r5, r5, r1
  402fde:	ea86 0601 	eor.w	r6, r6, r1
  402fe2:	fa85 f547 	uadd8	r5, r5, r7
  402fe6:	faa3 f587 	sel	r5, r3, r7
  402fea:	fa86 f647 	uadd8	r6, r6, r7
  402fee:	faa5 f687 	sel	r6, r5, r7
  402ff2:	b98e      	cbnz	r6, 403018 <memchr+0x78>
  402ff4:	d1ee      	bne.n	402fd4 <memchr+0x34>
  402ff6:	bcf0      	pop	{r4, r5, r6, r7}
  402ff8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402ffc:	f002 0207 	and.w	r2, r2, #7
  403000:	b132      	cbz	r2, 403010 <memchr+0x70>
  403002:	f810 3b01 	ldrb.w	r3, [r0], #1
  403006:	3a01      	subs	r2, #1
  403008:	ea83 0301 	eor.w	r3, r3, r1
  40300c:	b113      	cbz	r3, 403014 <memchr+0x74>
  40300e:	d1f8      	bne.n	403002 <memchr+0x62>
  403010:	2000      	movs	r0, #0
  403012:	4770      	bx	lr
  403014:	3801      	subs	r0, #1
  403016:	4770      	bx	lr
  403018:	2d00      	cmp	r5, #0
  40301a:	bf06      	itte	eq
  40301c:	4635      	moveq	r5, r6
  40301e:	3803      	subeq	r0, #3
  403020:	3807      	subne	r0, #7
  403022:	f015 0f01 	tst.w	r5, #1
  403026:	d107      	bne.n	403038 <memchr+0x98>
  403028:	3001      	adds	r0, #1
  40302a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40302e:	bf02      	ittt	eq
  403030:	3001      	addeq	r0, #1
  403032:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403036:	3001      	addeq	r0, #1
  403038:	bcf0      	pop	{r4, r5, r6, r7}
  40303a:	3801      	subs	r0, #1
  40303c:	4770      	bx	lr
  40303e:	bf00      	nop

00403040 <memcpy>:
  403040:	b510      	push	{r4, lr}
  403042:	1e43      	subs	r3, r0, #1
  403044:	440a      	add	r2, r1
  403046:	4291      	cmp	r1, r2
  403048:	d004      	beq.n	403054 <memcpy+0x14>
  40304a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40304e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403052:	e7f8      	b.n	403046 <memcpy+0x6>
  403054:	bd10      	pop	{r4, pc}

00403056 <_Balloc>:
  403056:	b570      	push	{r4, r5, r6, lr}
  403058:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40305a:	4604      	mov	r4, r0
  40305c:	460e      	mov	r6, r1
  40305e:	b93d      	cbnz	r5, 403070 <_Balloc+0x1a>
  403060:	2010      	movs	r0, #16
  403062:	f7ff ff8f 	bl	402f84 <malloc>
  403066:	6260      	str	r0, [r4, #36]	; 0x24
  403068:	6045      	str	r5, [r0, #4]
  40306a:	6085      	str	r5, [r0, #8]
  40306c:	6005      	str	r5, [r0, #0]
  40306e:	60c5      	str	r5, [r0, #12]
  403070:	6a65      	ldr	r5, [r4, #36]	; 0x24
  403072:	68eb      	ldr	r3, [r5, #12]
  403074:	b143      	cbz	r3, 403088 <_Balloc+0x32>
  403076:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403078:	68db      	ldr	r3, [r3, #12]
  40307a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  40307e:	b178      	cbz	r0, 4030a0 <_Balloc+0x4a>
  403080:	6802      	ldr	r2, [r0, #0]
  403082:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  403086:	e017      	b.n	4030b8 <_Balloc+0x62>
  403088:	2221      	movs	r2, #33	; 0x21
  40308a:	2104      	movs	r1, #4
  40308c:	4620      	mov	r0, r4
  40308e:	f000 fab9 	bl	403604 <_calloc_r>
  403092:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403094:	60e8      	str	r0, [r5, #12]
  403096:	68db      	ldr	r3, [r3, #12]
  403098:	2b00      	cmp	r3, #0
  40309a:	d1ec      	bne.n	403076 <_Balloc+0x20>
  40309c:	2000      	movs	r0, #0
  40309e:	bd70      	pop	{r4, r5, r6, pc}
  4030a0:	2101      	movs	r1, #1
  4030a2:	fa01 f506 	lsl.w	r5, r1, r6
  4030a6:	1d6a      	adds	r2, r5, #5
  4030a8:	0092      	lsls	r2, r2, #2
  4030aa:	4620      	mov	r0, r4
  4030ac:	f000 faaa 	bl	403604 <_calloc_r>
  4030b0:	2800      	cmp	r0, #0
  4030b2:	d0f3      	beq.n	40309c <_Balloc+0x46>
  4030b4:	6046      	str	r6, [r0, #4]
  4030b6:	6085      	str	r5, [r0, #8]
  4030b8:	2300      	movs	r3, #0
  4030ba:	6103      	str	r3, [r0, #16]
  4030bc:	60c3      	str	r3, [r0, #12]
  4030be:	bd70      	pop	{r4, r5, r6, pc}

004030c0 <_Bfree>:
  4030c0:	b570      	push	{r4, r5, r6, lr}
  4030c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4030c4:	4606      	mov	r6, r0
  4030c6:	460d      	mov	r5, r1
  4030c8:	b93c      	cbnz	r4, 4030da <_Bfree+0x1a>
  4030ca:	2010      	movs	r0, #16
  4030cc:	f7ff ff5a 	bl	402f84 <malloc>
  4030d0:	6270      	str	r0, [r6, #36]	; 0x24
  4030d2:	6044      	str	r4, [r0, #4]
  4030d4:	6084      	str	r4, [r0, #8]
  4030d6:	6004      	str	r4, [r0, #0]
  4030d8:	60c4      	str	r4, [r0, #12]
  4030da:	b13d      	cbz	r5, 4030ec <_Bfree+0x2c>
  4030dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4030de:	686a      	ldr	r2, [r5, #4]
  4030e0:	68db      	ldr	r3, [r3, #12]
  4030e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4030e6:	6029      	str	r1, [r5, #0]
  4030e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4030ec:	bd70      	pop	{r4, r5, r6, pc}

004030ee <__multadd>:
  4030ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030f2:	690d      	ldr	r5, [r1, #16]
  4030f4:	461f      	mov	r7, r3
  4030f6:	4606      	mov	r6, r0
  4030f8:	460c      	mov	r4, r1
  4030fa:	f101 0e14 	add.w	lr, r1, #20
  4030fe:	2300      	movs	r3, #0
  403100:	f8de 0000 	ldr.w	r0, [lr]
  403104:	b281      	uxth	r1, r0
  403106:	fb02 7101 	mla	r1, r2, r1, r7
  40310a:	0c0f      	lsrs	r7, r1, #16
  40310c:	0c00      	lsrs	r0, r0, #16
  40310e:	fb02 7000 	mla	r0, r2, r0, r7
  403112:	b289      	uxth	r1, r1
  403114:	3301      	adds	r3, #1
  403116:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40311a:	429d      	cmp	r5, r3
  40311c:	ea4f 4710 	mov.w	r7, r0, lsr #16
  403120:	f84e 1b04 	str.w	r1, [lr], #4
  403124:	dcec      	bgt.n	403100 <__multadd+0x12>
  403126:	b1d7      	cbz	r7, 40315e <__multadd+0x70>
  403128:	68a3      	ldr	r3, [r4, #8]
  40312a:	429d      	cmp	r5, r3
  40312c:	db12      	blt.n	403154 <__multadd+0x66>
  40312e:	6861      	ldr	r1, [r4, #4]
  403130:	4630      	mov	r0, r6
  403132:	3101      	adds	r1, #1
  403134:	f7ff ff8f 	bl	403056 <_Balloc>
  403138:	6922      	ldr	r2, [r4, #16]
  40313a:	3202      	adds	r2, #2
  40313c:	f104 010c 	add.w	r1, r4, #12
  403140:	4680      	mov	r8, r0
  403142:	0092      	lsls	r2, r2, #2
  403144:	300c      	adds	r0, #12
  403146:	f7ff ff7b 	bl	403040 <memcpy>
  40314a:	4621      	mov	r1, r4
  40314c:	4630      	mov	r0, r6
  40314e:	f7ff ffb7 	bl	4030c0 <_Bfree>
  403152:	4644      	mov	r4, r8
  403154:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403158:	3501      	adds	r5, #1
  40315a:	615f      	str	r7, [r3, #20]
  40315c:	6125      	str	r5, [r4, #16]
  40315e:	4620      	mov	r0, r4
  403160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403164 <__hi0bits>:
  403164:	0c03      	lsrs	r3, r0, #16
  403166:	041b      	lsls	r3, r3, #16
  403168:	b913      	cbnz	r3, 403170 <__hi0bits+0xc>
  40316a:	0400      	lsls	r0, r0, #16
  40316c:	2310      	movs	r3, #16
  40316e:	e000      	b.n	403172 <__hi0bits+0xe>
  403170:	2300      	movs	r3, #0
  403172:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  403176:	bf04      	itt	eq
  403178:	0200      	lsleq	r0, r0, #8
  40317a:	3308      	addeq	r3, #8
  40317c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  403180:	bf04      	itt	eq
  403182:	0100      	lsleq	r0, r0, #4
  403184:	3304      	addeq	r3, #4
  403186:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40318a:	bf04      	itt	eq
  40318c:	0080      	lsleq	r0, r0, #2
  40318e:	3302      	addeq	r3, #2
  403190:	2800      	cmp	r0, #0
  403192:	db03      	blt.n	40319c <__hi0bits+0x38>
  403194:	0042      	lsls	r2, r0, #1
  403196:	d503      	bpl.n	4031a0 <__hi0bits+0x3c>
  403198:	1c58      	adds	r0, r3, #1
  40319a:	4770      	bx	lr
  40319c:	4618      	mov	r0, r3
  40319e:	4770      	bx	lr
  4031a0:	2020      	movs	r0, #32
  4031a2:	4770      	bx	lr

004031a4 <__lo0bits>:
  4031a4:	6803      	ldr	r3, [r0, #0]
  4031a6:	f013 0207 	ands.w	r2, r3, #7
  4031aa:	d00b      	beq.n	4031c4 <__lo0bits+0x20>
  4031ac:	07d9      	lsls	r1, r3, #31
  4031ae:	d422      	bmi.n	4031f6 <__lo0bits+0x52>
  4031b0:	079a      	lsls	r2, r3, #30
  4031b2:	bf4b      	itete	mi
  4031b4:	085b      	lsrmi	r3, r3, #1
  4031b6:	089b      	lsrpl	r3, r3, #2
  4031b8:	6003      	strmi	r3, [r0, #0]
  4031ba:	6003      	strpl	r3, [r0, #0]
  4031bc:	bf4c      	ite	mi
  4031be:	2001      	movmi	r0, #1
  4031c0:	2002      	movpl	r0, #2
  4031c2:	4770      	bx	lr
  4031c4:	b299      	uxth	r1, r3
  4031c6:	b909      	cbnz	r1, 4031cc <__lo0bits+0x28>
  4031c8:	0c1b      	lsrs	r3, r3, #16
  4031ca:	2210      	movs	r2, #16
  4031cc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4031d0:	bf04      	itt	eq
  4031d2:	0a1b      	lsreq	r3, r3, #8
  4031d4:	3208      	addeq	r2, #8
  4031d6:	0719      	lsls	r1, r3, #28
  4031d8:	bf04      	itt	eq
  4031da:	091b      	lsreq	r3, r3, #4
  4031dc:	3204      	addeq	r2, #4
  4031de:	0799      	lsls	r1, r3, #30
  4031e0:	bf04      	itt	eq
  4031e2:	089b      	lsreq	r3, r3, #2
  4031e4:	3202      	addeq	r2, #2
  4031e6:	07d9      	lsls	r1, r3, #31
  4031e8:	d402      	bmi.n	4031f0 <__lo0bits+0x4c>
  4031ea:	085b      	lsrs	r3, r3, #1
  4031ec:	d005      	beq.n	4031fa <__lo0bits+0x56>
  4031ee:	3201      	adds	r2, #1
  4031f0:	6003      	str	r3, [r0, #0]
  4031f2:	4610      	mov	r0, r2
  4031f4:	4770      	bx	lr
  4031f6:	2000      	movs	r0, #0
  4031f8:	4770      	bx	lr
  4031fa:	2020      	movs	r0, #32
  4031fc:	4770      	bx	lr

004031fe <__i2b>:
  4031fe:	b510      	push	{r4, lr}
  403200:	460c      	mov	r4, r1
  403202:	2101      	movs	r1, #1
  403204:	f7ff ff27 	bl	403056 <_Balloc>
  403208:	2201      	movs	r2, #1
  40320a:	6144      	str	r4, [r0, #20]
  40320c:	6102      	str	r2, [r0, #16]
  40320e:	bd10      	pop	{r4, pc}

00403210 <__multiply>:
  403210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403214:	4614      	mov	r4, r2
  403216:	690a      	ldr	r2, [r1, #16]
  403218:	6923      	ldr	r3, [r4, #16]
  40321a:	429a      	cmp	r2, r3
  40321c:	bfb8      	it	lt
  40321e:	460b      	movlt	r3, r1
  403220:	4688      	mov	r8, r1
  403222:	bfbc      	itt	lt
  403224:	46a0      	movlt	r8, r4
  403226:	461c      	movlt	r4, r3
  403228:	f8d8 7010 	ldr.w	r7, [r8, #16]
  40322c:	f8d4 9010 	ldr.w	r9, [r4, #16]
  403230:	f8d8 3008 	ldr.w	r3, [r8, #8]
  403234:	f8d8 1004 	ldr.w	r1, [r8, #4]
  403238:	eb07 0609 	add.w	r6, r7, r9
  40323c:	429e      	cmp	r6, r3
  40323e:	bfc8      	it	gt
  403240:	3101      	addgt	r1, #1
  403242:	f7ff ff08 	bl	403056 <_Balloc>
  403246:	f100 0514 	add.w	r5, r0, #20
  40324a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  40324e:	462b      	mov	r3, r5
  403250:	2200      	movs	r2, #0
  403252:	4563      	cmp	r3, ip
  403254:	d202      	bcs.n	40325c <__multiply+0x4c>
  403256:	f843 2b04 	str.w	r2, [r3], #4
  40325a:	e7fa      	b.n	403252 <__multiply+0x42>
  40325c:	f104 0214 	add.w	r2, r4, #20
  403260:	f108 0114 	add.w	r1, r8, #20
  403264:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  403268:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  40326c:	9300      	str	r3, [sp, #0]
  40326e:	9b00      	ldr	r3, [sp, #0]
  403270:	9201      	str	r2, [sp, #4]
  403272:	4293      	cmp	r3, r2
  403274:	d957      	bls.n	403326 <__multiply+0x116>
  403276:	f8b2 b000 	ldrh.w	fp, [r2]
  40327a:	f1bb 0f00 	cmp.w	fp, #0
  40327e:	d023      	beq.n	4032c8 <__multiply+0xb8>
  403280:	4689      	mov	r9, r1
  403282:	46ae      	mov	lr, r5
  403284:	f04f 0800 	mov.w	r8, #0
  403288:	f859 4b04 	ldr.w	r4, [r9], #4
  40328c:	f8be a000 	ldrh.w	sl, [lr]
  403290:	b2a3      	uxth	r3, r4
  403292:	fb0b a303 	mla	r3, fp, r3, sl
  403296:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  40329a:	f8de 4000 	ldr.w	r4, [lr]
  40329e:	4443      	add	r3, r8
  4032a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4032a4:	fb0b 840a 	mla	r4, fp, sl, r8
  4032a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4032ac:	46f2      	mov	sl, lr
  4032ae:	b29b      	uxth	r3, r3
  4032b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4032b4:	454f      	cmp	r7, r9
  4032b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4032ba:	f84a 3b04 	str.w	r3, [sl], #4
  4032be:	d901      	bls.n	4032c4 <__multiply+0xb4>
  4032c0:	46d6      	mov	lr, sl
  4032c2:	e7e1      	b.n	403288 <__multiply+0x78>
  4032c4:	f8ce 8004 	str.w	r8, [lr, #4]
  4032c8:	9b01      	ldr	r3, [sp, #4]
  4032ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  4032ce:	3204      	adds	r2, #4
  4032d0:	f1ba 0f00 	cmp.w	sl, #0
  4032d4:	d021      	beq.n	40331a <__multiply+0x10a>
  4032d6:	682b      	ldr	r3, [r5, #0]
  4032d8:	462c      	mov	r4, r5
  4032da:	4689      	mov	r9, r1
  4032dc:	f04f 0800 	mov.w	r8, #0
  4032e0:	f8b9 e000 	ldrh.w	lr, [r9]
  4032e4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  4032e8:	fb0a be0e 	mla	lr, sl, lr, fp
  4032ec:	44f0      	add	r8, lr
  4032ee:	46a3      	mov	fp, r4
  4032f0:	b29b      	uxth	r3, r3
  4032f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4032f6:	f84b 3b04 	str.w	r3, [fp], #4
  4032fa:	f859 3b04 	ldr.w	r3, [r9], #4
  4032fe:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  403302:	0c1b      	lsrs	r3, r3, #16
  403304:	fb0a e303 	mla	r3, sl, r3, lr
  403308:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  40330c:	454f      	cmp	r7, r9
  40330e:	ea4f 4813 	mov.w	r8, r3, lsr #16
  403312:	d901      	bls.n	403318 <__multiply+0x108>
  403314:	465c      	mov	r4, fp
  403316:	e7e3      	b.n	4032e0 <__multiply+0xd0>
  403318:	6063      	str	r3, [r4, #4]
  40331a:	3504      	adds	r5, #4
  40331c:	e7a7      	b.n	40326e <__multiply+0x5e>
  40331e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  403322:	b913      	cbnz	r3, 40332a <__multiply+0x11a>
  403324:	3e01      	subs	r6, #1
  403326:	2e00      	cmp	r6, #0
  403328:	dcf9      	bgt.n	40331e <__multiply+0x10e>
  40332a:	6106      	str	r6, [r0, #16]
  40332c:	b003      	add	sp, #12
  40332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00403334 <__pow5mult>:
  403334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403338:	4615      	mov	r5, r2
  40333a:	f012 0203 	ands.w	r2, r2, #3
  40333e:	4606      	mov	r6, r0
  403340:	460f      	mov	r7, r1
  403342:	d007      	beq.n	403354 <__pow5mult+0x20>
  403344:	3a01      	subs	r2, #1
  403346:	4c21      	ldr	r4, [pc, #132]	; (4033cc <__pow5mult+0x98>)
  403348:	2300      	movs	r3, #0
  40334a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40334e:	f7ff fece 	bl	4030ee <__multadd>
  403352:	4607      	mov	r7, r0
  403354:	10ad      	asrs	r5, r5, #2
  403356:	d036      	beq.n	4033c6 <__pow5mult+0x92>
  403358:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40335a:	b93c      	cbnz	r4, 40336c <__pow5mult+0x38>
  40335c:	2010      	movs	r0, #16
  40335e:	f7ff fe11 	bl	402f84 <malloc>
  403362:	6270      	str	r0, [r6, #36]	; 0x24
  403364:	6044      	str	r4, [r0, #4]
  403366:	6084      	str	r4, [r0, #8]
  403368:	6004      	str	r4, [r0, #0]
  40336a:	60c4      	str	r4, [r0, #12]
  40336c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  403370:	f8d8 4008 	ldr.w	r4, [r8, #8]
  403374:	b94c      	cbnz	r4, 40338a <__pow5mult+0x56>
  403376:	f240 2171 	movw	r1, #625	; 0x271
  40337a:	4630      	mov	r0, r6
  40337c:	f7ff ff3f 	bl	4031fe <__i2b>
  403380:	2300      	movs	r3, #0
  403382:	f8c8 0008 	str.w	r0, [r8, #8]
  403386:	4604      	mov	r4, r0
  403388:	6003      	str	r3, [r0, #0]
  40338a:	f04f 0800 	mov.w	r8, #0
  40338e:	07eb      	lsls	r3, r5, #31
  403390:	d50a      	bpl.n	4033a8 <__pow5mult+0x74>
  403392:	4639      	mov	r1, r7
  403394:	4622      	mov	r2, r4
  403396:	4630      	mov	r0, r6
  403398:	f7ff ff3a 	bl	403210 <__multiply>
  40339c:	4639      	mov	r1, r7
  40339e:	4681      	mov	r9, r0
  4033a0:	4630      	mov	r0, r6
  4033a2:	f7ff fe8d 	bl	4030c0 <_Bfree>
  4033a6:	464f      	mov	r7, r9
  4033a8:	106d      	asrs	r5, r5, #1
  4033aa:	d00c      	beq.n	4033c6 <__pow5mult+0x92>
  4033ac:	6820      	ldr	r0, [r4, #0]
  4033ae:	b108      	cbz	r0, 4033b4 <__pow5mult+0x80>
  4033b0:	4604      	mov	r4, r0
  4033b2:	e7ec      	b.n	40338e <__pow5mult+0x5a>
  4033b4:	4622      	mov	r2, r4
  4033b6:	4621      	mov	r1, r4
  4033b8:	4630      	mov	r0, r6
  4033ba:	f7ff ff29 	bl	403210 <__multiply>
  4033be:	6020      	str	r0, [r4, #0]
  4033c0:	f8c0 8000 	str.w	r8, [r0]
  4033c4:	e7f4      	b.n	4033b0 <__pow5mult+0x7c>
  4033c6:	4638      	mov	r0, r7
  4033c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4033cc:	00404d08 	.word	0x00404d08

004033d0 <__lshift>:
  4033d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4033d4:	460c      	mov	r4, r1
  4033d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4033da:	6926      	ldr	r6, [r4, #16]
  4033dc:	6849      	ldr	r1, [r1, #4]
  4033de:	68a3      	ldr	r3, [r4, #8]
  4033e0:	4456      	add	r6, sl
  4033e2:	4607      	mov	r7, r0
  4033e4:	4691      	mov	r9, r2
  4033e6:	1c75      	adds	r5, r6, #1
  4033e8:	42ab      	cmp	r3, r5
  4033ea:	da02      	bge.n	4033f2 <__lshift+0x22>
  4033ec:	3101      	adds	r1, #1
  4033ee:	005b      	lsls	r3, r3, #1
  4033f0:	e7fa      	b.n	4033e8 <__lshift+0x18>
  4033f2:	4638      	mov	r0, r7
  4033f4:	f7ff fe2f 	bl	403056 <_Balloc>
  4033f8:	2300      	movs	r3, #0
  4033fa:	4680      	mov	r8, r0
  4033fc:	f100 0114 	add.w	r1, r0, #20
  403400:	461a      	mov	r2, r3
  403402:	4553      	cmp	r3, sl
  403404:	da03      	bge.n	40340e <__lshift+0x3e>
  403406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40340a:	3301      	adds	r3, #1
  40340c:	e7f9      	b.n	403402 <__lshift+0x32>
  40340e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  403412:	6920      	ldr	r0, [r4, #16]
  403414:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403418:	f019 091f 	ands.w	r9, r9, #31
  40341c:	f104 0114 	add.w	r1, r4, #20
  403420:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  403424:	d014      	beq.n	403450 <__lshift+0x80>
  403426:	f1c9 0c20 	rsb	ip, r9, #32
  40342a:	2200      	movs	r2, #0
  40342c:	6808      	ldr	r0, [r1, #0]
  40342e:	fa00 f009 	lsl.w	r0, r0, r9
  403432:	4302      	orrs	r2, r0
  403434:	469a      	mov	sl, r3
  403436:	f843 2b04 	str.w	r2, [r3], #4
  40343a:	f851 2b04 	ldr.w	r2, [r1], #4
  40343e:	458e      	cmp	lr, r1
  403440:	fa22 f20c 	lsr.w	r2, r2, ip
  403444:	d8f2      	bhi.n	40342c <__lshift+0x5c>
  403446:	f8ca 2004 	str.w	r2, [sl, #4]
  40344a:	b142      	cbz	r2, 40345e <__lshift+0x8e>
  40344c:	1cb5      	adds	r5, r6, #2
  40344e:	e006      	b.n	40345e <__lshift+0x8e>
  403450:	3b04      	subs	r3, #4
  403452:	f851 2b04 	ldr.w	r2, [r1], #4
  403456:	f843 2f04 	str.w	r2, [r3, #4]!
  40345a:	458e      	cmp	lr, r1
  40345c:	d8f9      	bhi.n	403452 <__lshift+0x82>
  40345e:	3d01      	subs	r5, #1
  403460:	4638      	mov	r0, r7
  403462:	f8c8 5010 	str.w	r5, [r8, #16]
  403466:	4621      	mov	r1, r4
  403468:	f7ff fe2a 	bl	4030c0 <_Bfree>
  40346c:	4640      	mov	r0, r8
  40346e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403472 <__mcmp>:
  403472:	6903      	ldr	r3, [r0, #16]
  403474:	690a      	ldr	r2, [r1, #16]
  403476:	1a9b      	subs	r3, r3, r2
  403478:	b510      	push	{r4, lr}
  40347a:	d111      	bne.n	4034a0 <__mcmp+0x2e>
  40347c:	0092      	lsls	r2, r2, #2
  40347e:	3014      	adds	r0, #20
  403480:	3114      	adds	r1, #20
  403482:	1883      	adds	r3, r0, r2
  403484:	440a      	add	r2, r1
  403486:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40348a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  40348e:	428c      	cmp	r4, r1
  403490:	d002      	beq.n	403498 <__mcmp+0x26>
  403492:	d307      	bcc.n	4034a4 <__mcmp+0x32>
  403494:	2001      	movs	r0, #1
  403496:	bd10      	pop	{r4, pc}
  403498:	4298      	cmp	r0, r3
  40349a:	d3f4      	bcc.n	403486 <__mcmp+0x14>
  40349c:	2000      	movs	r0, #0
  40349e:	bd10      	pop	{r4, pc}
  4034a0:	4618      	mov	r0, r3
  4034a2:	bd10      	pop	{r4, pc}
  4034a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4034a8:	bd10      	pop	{r4, pc}

004034aa <__mdiff>:
  4034aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4034ae:	460c      	mov	r4, r1
  4034b0:	4607      	mov	r7, r0
  4034b2:	4611      	mov	r1, r2
  4034b4:	4620      	mov	r0, r4
  4034b6:	4615      	mov	r5, r2
  4034b8:	f7ff ffdb 	bl	403472 <__mcmp>
  4034bc:	1e06      	subs	r6, r0, #0
  4034be:	d108      	bne.n	4034d2 <__mdiff+0x28>
  4034c0:	4631      	mov	r1, r6
  4034c2:	4638      	mov	r0, r7
  4034c4:	f7ff fdc7 	bl	403056 <_Balloc>
  4034c8:	2301      	movs	r3, #1
  4034ca:	6103      	str	r3, [r0, #16]
  4034cc:	6146      	str	r6, [r0, #20]
  4034ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4034d2:	bfbc      	itt	lt
  4034d4:	4623      	movlt	r3, r4
  4034d6:	462c      	movlt	r4, r5
  4034d8:	4638      	mov	r0, r7
  4034da:	6861      	ldr	r1, [r4, #4]
  4034dc:	bfba      	itte	lt
  4034de:	461d      	movlt	r5, r3
  4034e0:	2601      	movlt	r6, #1
  4034e2:	2600      	movge	r6, #0
  4034e4:	f7ff fdb7 	bl	403056 <_Balloc>
  4034e8:	692b      	ldr	r3, [r5, #16]
  4034ea:	60c6      	str	r6, [r0, #12]
  4034ec:	6926      	ldr	r6, [r4, #16]
  4034ee:	f105 0914 	add.w	r9, r5, #20
  4034f2:	3414      	adds	r4, #20
  4034f4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  4034f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4034fc:	f100 0514 	add.w	r5, r0, #20
  403500:	f04f 0c00 	mov.w	ip, #0
  403504:	f854 3b04 	ldr.w	r3, [r4], #4
  403508:	f859 2b04 	ldr.w	r2, [r9], #4
  40350c:	fa1c f183 	uxtah	r1, ip, r3
  403510:	fa1f fe82 	uxth.w	lr, r2
  403514:	0c12      	lsrs	r2, r2, #16
  403516:	ebce 0101 	rsb	r1, lr, r1
  40351a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  40351e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  403522:	b289      	uxth	r1, r1
  403524:	ea4f 4c23 	mov.w	ip, r3, asr #16
  403528:	45c8      	cmp	r8, r9
  40352a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40352e:	46a6      	mov	lr, r4
  403530:	f845 3b04 	str.w	r3, [r5], #4
  403534:	d8e6      	bhi.n	403504 <__mdiff+0x5a>
  403536:	45be      	cmp	lr, r7
  403538:	d20e      	bcs.n	403558 <__mdiff+0xae>
  40353a:	f85e 1b04 	ldr.w	r1, [lr], #4
  40353e:	fa1c f281 	uxtah	r2, ip, r1
  403542:	1413      	asrs	r3, r2, #16
  403544:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  403548:	b292      	uxth	r2, r2
  40354a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40354e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  403552:	f845 2b04 	str.w	r2, [r5], #4
  403556:	e7ee      	b.n	403536 <__mdiff+0x8c>
  403558:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40355c:	b90b      	cbnz	r3, 403562 <__mdiff+0xb8>
  40355e:	3e01      	subs	r6, #1
  403560:	e7fa      	b.n	403558 <__mdiff+0xae>
  403562:	6106      	str	r6, [r0, #16]
  403564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00403568 <__d2b>:
  403568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  40356c:	2101      	movs	r1, #1
  40356e:	461c      	mov	r4, r3
  403570:	4690      	mov	r8, r2
  403572:	9e08      	ldr	r6, [sp, #32]
  403574:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403576:	f7ff fd6e 	bl	403056 <_Balloc>
  40357a:	f3c4 0213 	ubfx	r2, r4, #0, #20
  40357e:	f3c4 540a 	ubfx	r4, r4, #20, #11
  403582:	4607      	mov	r7, r0
  403584:	b10c      	cbz	r4, 40358a <__d2b+0x22>
  403586:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40358a:	9201      	str	r2, [sp, #4]
  40358c:	f1b8 0f00 	cmp.w	r8, #0
  403590:	d019      	beq.n	4035c6 <__d2b+0x5e>
  403592:	a802      	add	r0, sp, #8
  403594:	f840 8d08 	str.w	r8, [r0, #-8]!
  403598:	f7ff fe04 	bl	4031a4 <__lo0bits>
  40359c:	9b00      	ldr	r3, [sp, #0]
  40359e:	b148      	cbz	r0, 4035b4 <__d2b+0x4c>
  4035a0:	9a01      	ldr	r2, [sp, #4]
  4035a2:	f1c0 0120 	rsb	r1, r0, #32
  4035a6:	fa02 f101 	lsl.w	r1, r2, r1
  4035aa:	430b      	orrs	r3, r1
  4035ac:	40c2      	lsrs	r2, r0
  4035ae:	617b      	str	r3, [r7, #20]
  4035b0:	9201      	str	r2, [sp, #4]
  4035b2:	e000      	b.n	4035b6 <__d2b+0x4e>
  4035b4:	617b      	str	r3, [r7, #20]
  4035b6:	9b01      	ldr	r3, [sp, #4]
  4035b8:	61bb      	str	r3, [r7, #24]
  4035ba:	2b00      	cmp	r3, #0
  4035bc:	bf14      	ite	ne
  4035be:	2102      	movne	r1, #2
  4035c0:	2101      	moveq	r1, #1
  4035c2:	6139      	str	r1, [r7, #16]
  4035c4:	e007      	b.n	4035d6 <__d2b+0x6e>
  4035c6:	a801      	add	r0, sp, #4
  4035c8:	f7ff fdec 	bl	4031a4 <__lo0bits>
  4035cc:	9b01      	ldr	r3, [sp, #4]
  4035ce:	617b      	str	r3, [r7, #20]
  4035d0:	2101      	movs	r1, #1
  4035d2:	6139      	str	r1, [r7, #16]
  4035d4:	3020      	adds	r0, #32
  4035d6:	b134      	cbz	r4, 4035e6 <__d2b+0x7e>
  4035d8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4035dc:	4404      	add	r4, r0
  4035de:	6034      	str	r4, [r6, #0]
  4035e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4035e4:	e009      	b.n	4035fa <__d2b+0x92>
  4035e6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4035ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4035ee:	6030      	str	r0, [r6, #0]
  4035f0:	6918      	ldr	r0, [r3, #16]
  4035f2:	f7ff fdb7 	bl	403164 <__hi0bits>
  4035f6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4035fa:	6028      	str	r0, [r5, #0]
  4035fc:	4638      	mov	r0, r7
  4035fe:	b002      	add	sp, #8
  403600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403604 <_calloc_r>:
  403604:	b538      	push	{r3, r4, r5, lr}
  403606:	fb02 f401 	mul.w	r4, r2, r1
  40360a:	4621      	mov	r1, r4
  40360c:	f000 f856 	bl	4036bc <_malloc_r>
  403610:	4605      	mov	r5, r0
  403612:	b118      	cbz	r0, 40361c <_calloc_r+0x18>
  403614:	4622      	mov	r2, r4
  403616:	2100      	movs	r1, #0
  403618:	f7fd fe2e 	bl	401278 <memset>
  40361c:	4628      	mov	r0, r5
  40361e:	bd38      	pop	{r3, r4, r5, pc}

00403620 <_free_r>:
  403620:	b538      	push	{r3, r4, r5, lr}
  403622:	4605      	mov	r5, r0
  403624:	2900      	cmp	r1, #0
  403626:	d046      	beq.n	4036b6 <_free_r+0x96>
  403628:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40362c:	1f0c      	subs	r4, r1, #4
  40362e:	2b00      	cmp	r3, #0
  403630:	bfb8      	it	lt
  403632:	18e4      	addlt	r4, r4, r3
  403634:	f000 faa0 	bl	403b78 <__malloc_lock>
  403638:	4a1f      	ldr	r2, [pc, #124]	; (4036b8 <_free_r+0x98>)
  40363a:	6813      	ldr	r3, [r2, #0]
  40363c:	4611      	mov	r1, r2
  40363e:	b913      	cbnz	r3, 403646 <_free_r+0x26>
  403640:	6063      	str	r3, [r4, #4]
  403642:	6014      	str	r4, [r2, #0]
  403644:	e032      	b.n	4036ac <_free_r+0x8c>
  403646:	42a3      	cmp	r3, r4
  403648:	d90e      	bls.n	403668 <_free_r+0x48>
  40364a:	6822      	ldr	r2, [r4, #0]
  40364c:	18a0      	adds	r0, r4, r2
  40364e:	4283      	cmp	r3, r0
  403650:	bf04      	itt	eq
  403652:	6818      	ldreq	r0, [r3, #0]
  403654:	685b      	ldreq	r3, [r3, #4]
  403656:	6063      	str	r3, [r4, #4]
  403658:	bf04      	itt	eq
  40365a:	1812      	addeq	r2, r2, r0
  40365c:	6022      	streq	r2, [r4, #0]
  40365e:	600c      	str	r4, [r1, #0]
  403660:	e024      	b.n	4036ac <_free_r+0x8c>
  403662:	42a2      	cmp	r2, r4
  403664:	d803      	bhi.n	40366e <_free_r+0x4e>
  403666:	4613      	mov	r3, r2
  403668:	685a      	ldr	r2, [r3, #4]
  40366a:	2a00      	cmp	r2, #0
  40366c:	d1f9      	bne.n	403662 <_free_r+0x42>
  40366e:	6818      	ldr	r0, [r3, #0]
  403670:	1819      	adds	r1, r3, r0
  403672:	42a1      	cmp	r1, r4
  403674:	d10b      	bne.n	40368e <_free_r+0x6e>
  403676:	6821      	ldr	r1, [r4, #0]
  403678:	4401      	add	r1, r0
  40367a:	1858      	adds	r0, r3, r1
  40367c:	4282      	cmp	r2, r0
  40367e:	6019      	str	r1, [r3, #0]
  403680:	d114      	bne.n	4036ac <_free_r+0x8c>
  403682:	6810      	ldr	r0, [r2, #0]
  403684:	6852      	ldr	r2, [r2, #4]
  403686:	605a      	str	r2, [r3, #4]
  403688:	4401      	add	r1, r0
  40368a:	6019      	str	r1, [r3, #0]
  40368c:	e00e      	b.n	4036ac <_free_r+0x8c>
  40368e:	d902      	bls.n	403696 <_free_r+0x76>
  403690:	230c      	movs	r3, #12
  403692:	602b      	str	r3, [r5, #0]
  403694:	e00a      	b.n	4036ac <_free_r+0x8c>
  403696:	6821      	ldr	r1, [r4, #0]
  403698:	1860      	adds	r0, r4, r1
  40369a:	4282      	cmp	r2, r0
  40369c:	bf04      	itt	eq
  40369e:	6810      	ldreq	r0, [r2, #0]
  4036a0:	6852      	ldreq	r2, [r2, #4]
  4036a2:	6062      	str	r2, [r4, #4]
  4036a4:	bf04      	itt	eq
  4036a6:	1809      	addeq	r1, r1, r0
  4036a8:	6021      	streq	r1, [r4, #0]
  4036aa:	605c      	str	r4, [r3, #4]
  4036ac:	4628      	mov	r0, r5
  4036ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4036b2:	f000 ba62 	b.w	403b7a <__malloc_unlock>
  4036b6:	bd38      	pop	{r3, r4, r5, pc}
  4036b8:	20000288 	.word	0x20000288

004036bc <_malloc_r>:
  4036bc:	b570      	push	{r4, r5, r6, lr}
  4036be:	1ccd      	adds	r5, r1, #3
  4036c0:	f025 0503 	bic.w	r5, r5, #3
  4036c4:	3508      	adds	r5, #8
  4036c6:	2d0c      	cmp	r5, #12
  4036c8:	bf38      	it	cc
  4036ca:	250c      	movcc	r5, #12
  4036cc:	2d00      	cmp	r5, #0
  4036ce:	4606      	mov	r6, r0
  4036d0:	db01      	blt.n	4036d6 <_malloc_r+0x1a>
  4036d2:	42a9      	cmp	r1, r5
  4036d4:	d902      	bls.n	4036dc <_malloc_r+0x20>
  4036d6:	230c      	movs	r3, #12
  4036d8:	6033      	str	r3, [r6, #0]
  4036da:	e046      	b.n	40376a <_malloc_r+0xae>
  4036dc:	f000 fa4c 	bl	403b78 <__malloc_lock>
  4036e0:	4b23      	ldr	r3, [pc, #140]	; (403770 <_malloc_r+0xb4>)
  4036e2:	681c      	ldr	r4, [r3, #0]
  4036e4:	461a      	mov	r2, r3
  4036e6:	4621      	mov	r1, r4
  4036e8:	b1a1      	cbz	r1, 403714 <_malloc_r+0x58>
  4036ea:	680b      	ldr	r3, [r1, #0]
  4036ec:	1b5b      	subs	r3, r3, r5
  4036ee:	d40e      	bmi.n	40370e <_malloc_r+0x52>
  4036f0:	2b0b      	cmp	r3, #11
  4036f2:	d903      	bls.n	4036fc <_malloc_r+0x40>
  4036f4:	600b      	str	r3, [r1, #0]
  4036f6:	18cc      	adds	r4, r1, r3
  4036f8:	50cd      	str	r5, [r1, r3]
  4036fa:	e01e      	b.n	40373a <_malloc_r+0x7e>
  4036fc:	428c      	cmp	r4, r1
  4036fe:	bf0d      	iteet	eq
  403700:	6863      	ldreq	r3, [r4, #4]
  403702:	684b      	ldrne	r3, [r1, #4]
  403704:	6063      	strne	r3, [r4, #4]
  403706:	6013      	streq	r3, [r2, #0]
  403708:	bf18      	it	ne
  40370a:	460c      	movne	r4, r1
  40370c:	e015      	b.n	40373a <_malloc_r+0x7e>
  40370e:	460c      	mov	r4, r1
  403710:	6849      	ldr	r1, [r1, #4]
  403712:	e7e9      	b.n	4036e8 <_malloc_r+0x2c>
  403714:	4c17      	ldr	r4, [pc, #92]	; (403774 <_malloc_r+0xb8>)
  403716:	6823      	ldr	r3, [r4, #0]
  403718:	b91b      	cbnz	r3, 403722 <_malloc_r+0x66>
  40371a:	4630      	mov	r0, r6
  40371c:	f000 f970 	bl	403a00 <_sbrk_r>
  403720:	6020      	str	r0, [r4, #0]
  403722:	4629      	mov	r1, r5
  403724:	4630      	mov	r0, r6
  403726:	f000 f96b 	bl	403a00 <_sbrk_r>
  40372a:	1c43      	adds	r3, r0, #1
  40372c:	d018      	beq.n	403760 <_malloc_r+0xa4>
  40372e:	1cc4      	adds	r4, r0, #3
  403730:	f024 0403 	bic.w	r4, r4, #3
  403734:	42a0      	cmp	r0, r4
  403736:	d10d      	bne.n	403754 <_malloc_r+0x98>
  403738:	6025      	str	r5, [r4, #0]
  40373a:	4630      	mov	r0, r6
  40373c:	f000 fa1d 	bl	403b7a <__malloc_unlock>
  403740:	f104 000b 	add.w	r0, r4, #11
  403744:	1d23      	adds	r3, r4, #4
  403746:	f020 0007 	bic.w	r0, r0, #7
  40374a:	1ac3      	subs	r3, r0, r3
  40374c:	d00e      	beq.n	40376c <_malloc_r+0xb0>
  40374e:	425a      	negs	r2, r3
  403750:	50e2      	str	r2, [r4, r3]
  403752:	bd70      	pop	{r4, r5, r6, pc}
  403754:	1a21      	subs	r1, r4, r0
  403756:	4630      	mov	r0, r6
  403758:	f000 f952 	bl	403a00 <_sbrk_r>
  40375c:	3001      	adds	r0, #1
  40375e:	d1eb      	bne.n	403738 <_malloc_r+0x7c>
  403760:	230c      	movs	r3, #12
  403762:	6033      	str	r3, [r6, #0]
  403764:	4630      	mov	r0, r6
  403766:	f000 fa08 	bl	403b7a <__malloc_unlock>
  40376a:	2000      	movs	r0, #0
  40376c:	bd70      	pop	{r4, r5, r6, pc}
  40376e:	bf00      	nop
  403770:	20000288 	.word	0x20000288
  403774:	20000284 	.word	0x20000284

00403778 <__sfputc_r>:
  403778:	6893      	ldr	r3, [r2, #8]
  40377a:	3b01      	subs	r3, #1
  40377c:	2b00      	cmp	r3, #0
  40377e:	b410      	push	{r4}
  403780:	6093      	str	r3, [r2, #8]
  403782:	da08      	bge.n	403796 <__sfputc_r+0x1e>
  403784:	6994      	ldr	r4, [r2, #24]
  403786:	42a3      	cmp	r3, r4
  403788:	db02      	blt.n	403790 <__sfputc_r+0x18>
  40378a:	b2cb      	uxtb	r3, r1
  40378c:	2b0a      	cmp	r3, #10
  40378e:	d102      	bne.n	403796 <__sfputc_r+0x1e>
  403790:	bc10      	pop	{r4}
  403792:	f7fe bb1d 	b.w	401dd0 <__swbuf_r>
  403796:	6813      	ldr	r3, [r2, #0]
  403798:	1c58      	adds	r0, r3, #1
  40379a:	6010      	str	r0, [r2, #0]
  40379c:	7019      	strb	r1, [r3, #0]
  40379e:	b2c8      	uxtb	r0, r1
  4037a0:	bc10      	pop	{r4}
  4037a2:	4770      	bx	lr

004037a4 <__sfputs_r>:
  4037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4037a6:	4606      	mov	r6, r0
  4037a8:	460f      	mov	r7, r1
  4037aa:	4614      	mov	r4, r2
  4037ac:	18d5      	adds	r5, r2, r3
  4037ae:	42ac      	cmp	r4, r5
  4037b0:	d008      	beq.n	4037c4 <__sfputs_r+0x20>
  4037b2:	463a      	mov	r2, r7
  4037b4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4037b8:	4630      	mov	r0, r6
  4037ba:	f7ff ffdd 	bl	403778 <__sfputc_r>
  4037be:	1c43      	adds	r3, r0, #1
  4037c0:	d1f5      	bne.n	4037ae <__sfputs_r+0xa>
  4037c2:	e000      	b.n	4037c6 <__sfputs_r+0x22>
  4037c4:	2000      	movs	r0, #0
  4037c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004037c8 <_vfiprintf_r>:
  4037c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037cc:	b09d      	sub	sp, #116	; 0x74
  4037ce:	460c      	mov	r4, r1
  4037d0:	4617      	mov	r7, r2
  4037d2:	9303      	str	r3, [sp, #12]
  4037d4:	4606      	mov	r6, r0
  4037d6:	b118      	cbz	r0, 4037e0 <_vfiprintf_r+0x18>
  4037d8:	6983      	ldr	r3, [r0, #24]
  4037da:	b90b      	cbnz	r3, 4037e0 <_vfiprintf_r+0x18>
  4037dc:	f7ff fada 	bl	402d94 <__sinit>
  4037e0:	4b7f      	ldr	r3, [pc, #508]	; (4039e0 <_vfiprintf_r+0x218>)
  4037e2:	429c      	cmp	r4, r3
  4037e4:	d101      	bne.n	4037ea <_vfiprintf_r+0x22>
  4037e6:	6874      	ldr	r4, [r6, #4]
  4037e8:	e008      	b.n	4037fc <_vfiprintf_r+0x34>
  4037ea:	4b7e      	ldr	r3, [pc, #504]	; (4039e4 <_vfiprintf_r+0x21c>)
  4037ec:	429c      	cmp	r4, r3
  4037ee:	d101      	bne.n	4037f4 <_vfiprintf_r+0x2c>
  4037f0:	68b4      	ldr	r4, [r6, #8]
  4037f2:	e003      	b.n	4037fc <_vfiprintf_r+0x34>
  4037f4:	4b7c      	ldr	r3, [pc, #496]	; (4039e8 <_vfiprintf_r+0x220>)
  4037f6:	429c      	cmp	r4, r3
  4037f8:	bf08      	it	eq
  4037fa:	68f4      	ldreq	r4, [r6, #12]
  4037fc:	89a3      	ldrh	r3, [r4, #12]
  4037fe:	0718      	lsls	r0, r3, #28
  403800:	d50c      	bpl.n	40381c <_vfiprintf_r+0x54>
  403802:	6923      	ldr	r3, [r4, #16]
  403804:	b153      	cbz	r3, 40381c <_vfiprintf_r+0x54>
  403806:	2300      	movs	r3, #0
  403808:	9309      	str	r3, [sp, #36]	; 0x24
  40380a:	2320      	movs	r3, #32
  40380c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  403810:	2330      	movs	r3, #48	; 0x30
  403812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  403816:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 4039ec <_vfiprintf_r+0x224>
  40381a:	e044      	b.n	4038a6 <_vfiprintf_r+0xde>
  40381c:	4621      	mov	r1, r4
  40381e:	4630      	mov	r0, r6
  403820:	f7fe fb2a 	bl	401e78 <__swsetup_r>
  403824:	2800      	cmp	r0, #0
  403826:	d0ee      	beq.n	403806 <_vfiprintf_r+0x3e>
  403828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40382c:	e0d5      	b.n	4039da <_vfiprintf_r+0x212>
  40382e:	9a03      	ldr	r2, [sp, #12]
  403830:	1d11      	adds	r1, r2, #4
  403832:	6812      	ldr	r2, [r2, #0]
  403834:	9103      	str	r1, [sp, #12]
  403836:	2a00      	cmp	r2, #0
  403838:	f280 808c 	bge.w	403954 <_vfiprintf_r+0x18c>
  40383c:	4252      	negs	r2, r2
  40383e:	f043 0002 	orr.w	r0, r3, #2
  403842:	9207      	str	r2, [sp, #28]
  403844:	9004      	str	r0, [sp, #16]
  403846:	f898 3000 	ldrb.w	r3, [r8]
  40384a:	2b2e      	cmp	r3, #46	; 0x2e
  40384c:	f000 8084 	beq.w	403958 <_vfiprintf_r+0x190>
  403850:	2203      	movs	r2, #3
  403852:	f898 1000 	ldrb.w	r1, [r8]
  403856:	4865      	ldr	r0, [pc, #404]	; (4039ec <_vfiprintf_r+0x224>)
  403858:	f7ff fba2 	bl	402fa0 <memchr>
  40385c:	b148      	cbz	r0, 403872 <_vfiprintf_r+0xaa>
  40385e:	2340      	movs	r3, #64	; 0x40
  403860:	ebcb 0000 	rsb	r0, fp, r0
  403864:	fa03 f000 	lsl.w	r0, r3, r0
  403868:	9b04      	ldr	r3, [sp, #16]
  40386a:	4318      	orrs	r0, r3
  40386c:	9004      	str	r0, [sp, #16]
  40386e:	f108 0801 	add.w	r8, r8, #1
  403872:	f898 1000 	ldrb.w	r1, [r8]
  403876:	485e      	ldr	r0, [pc, #376]	; (4039f0 <_vfiprintf_r+0x228>)
  403878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  40387c:	2206      	movs	r2, #6
  40387e:	f108 0701 	add.w	r7, r8, #1
  403882:	f7ff fb8d 	bl	402fa0 <memchr>
  403886:	2800      	cmp	r0, #0
  403888:	f000 8095 	beq.w	4039b6 <_vfiprintf_r+0x1ee>
  40388c:	4b59      	ldr	r3, [pc, #356]	; (4039f4 <_vfiprintf_r+0x22c>)
  40388e:	2b00      	cmp	r3, #0
  403890:	f040 8088 	bne.w	4039a4 <_vfiprintf_r+0x1dc>
  403894:	9b03      	ldr	r3, [sp, #12]
  403896:	3307      	adds	r3, #7
  403898:	f023 0307 	bic.w	r3, r3, #7
  40389c:	3308      	adds	r3, #8
  40389e:	9303      	str	r3, [sp, #12]
  4038a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4038a2:	4453      	add	r3, sl
  4038a4:	9309      	str	r3, [sp, #36]	; 0x24
  4038a6:	46b8      	mov	r8, r7
  4038a8:	4645      	mov	r5, r8
  4038aa:	f815 3b01 	ldrb.w	r3, [r5], #1
  4038ae:	b91b      	cbnz	r3, 4038b8 <_vfiprintf_r+0xf0>
  4038b0:	ebb8 0907 	subs.w	r9, r8, r7
  4038b4:	d00f      	beq.n	4038d6 <_vfiprintf_r+0x10e>
  4038b6:	e003      	b.n	4038c0 <_vfiprintf_r+0xf8>
  4038b8:	2b25      	cmp	r3, #37	; 0x25
  4038ba:	d0f9      	beq.n	4038b0 <_vfiprintf_r+0xe8>
  4038bc:	46a8      	mov	r8, r5
  4038be:	e7f3      	b.n	4038a8 <_vfiprintf_r+0xe0>
  4038c0:	464b      	mov	r3, r9
  4038c2:	463a      	mov	r2, r7
  4038c4:	4621      	mov	r1, r4
  4038c6:	4630      	mov	r0, r6
  4038c8:	f7ff ff6c 	bl	4037a4 <__sfputs_r>
  4038cc:	3001      	adds	r0, #1
  4038ce:	d07f      	beq.n	4039d0 <_vfiprintf_r+0x208>
  4038d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4038d2:	444b      	add	r3, r9
  4038d4:	9309      	str	r3, [sp, #36]	; 0x24
  4038d6:	f898 3000 	ldrb.w	r3, [r8]
  4038da:	2b00      	cmp	r3, #0
  4038dc:	d078      	beq.n	4039d0 <_vfiprintf_r+0x208>
  4038de:	2300      	movs	r3, #0
  4038e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4038e4:	9304      	str	r3, [sp, #16]
  4038e6:	9307      	str	r3, [sp, #28]
  4038e8:	9205      	str	r2, [sp, #20]
  4038ea:	9306      	str	r3, [sp, #24]
  4038ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  4038f0:	931a      	str	r3, [sp, #104]	; 0x68
  4038f2:	2701      	movs	r7, #1
  4038f4:	2205      	movs	r2, #5
  4038f6:	7829      	ldrb	r1, [r5, #0]
  4038f8:	483f      	ldr	r0, [pc, #252]	; (4039f8 <_vfiprintf_r+0x230>)
  4038fa:	f7ff fb51 	bl	402fa0 <memchr>
  4038fe:	f105 0801 	add.w	r8, r5, #1
  403902:	9b04      	ldr	r3, [sp, #16]
  403904:	b138      	cbz	r0, 403916 <_vfiprintf_r+0x14e>
  403906:	4a3c      	ldr	r2, [pc, #240]	; (4039f8 <_vfiprintf_r+0x230>)
  403908:	1a80      	subs	r0, r0, r2
  40390a:	fa07 f000 	lsl.w	r0, r7, r0
  40390e:	4318      	orrs	r0, r3
  403910:	9004      	str	r0, [sp, #16]
  403912:	4645      	mov	r5, r8
  403914:	e7ee      	b.n	4038f4 <_vfiprintf_r+0x12c>
  403916:	06d9      	lsls	r1, r3, #27
  403918:	bf44      	itt	mi
  40391a:	2220      	movmi	r2, #32
  40391c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  403920:	071a      	lsls	r2, r3, #28
  403922:	bf44      	itt	mi
  403924:	222b      	movmi	r2, #43	; 0x2b
  403926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40392a:	782a      	ldrb	r2, [r5, #0]
  40392c:	2a2a      	cmp	r2, #42	; 0x2a
  40392e:	f43f af7e 	beq.w	40382e <_vfiprintf_r+0x66>
  403932:	9a07      	ldr	r2, [sp, #28]
  403934:	2100      	movs	r1, #0
  403936:	200a      	movs	r0, #10
  403938:	46a8      	mov	r8, r5
  40393a:	3501      	adds	r5, #1
  40393c:	f898 3000 	ldrb.w	r3, [r8]
  403940:	3b30      	subs	r3, #48	; 0x30
  403942:	2b09      	cmp	r3, #9
  403944:	d803      	bhi.n	40394e <_vfiprintf_r+0x186>
  403946:	fb00 3202 	mla	r2, r0, r2, r3
  40394a:	2101      	movs	r1, #1
  40394c:	e7f4      	b.n	403938 <_vfiprintf_r+0x170>
  40394e:	2900      	cmp	r1, #0
  403950:	f43f af79 	beq.w	403846 <_vfiprintf_r+0x7e>
  403954:	9207      	str	r2, [sp, #28]
  403956:	e776      	b.n	403846 <_vfiprintf_r+0x7e>
  403958:	f898 3001 	ldrb.w	r3, [r8, #1]
  40395c:	2b2a      	cmp	r3, #42	; 0x2a
  40395e:	d10b      	bne.n	403978 <_vfiprintf_r+0x1b0>
  403960:	9b03      	ldr	r3, [sp, #12]
  403962:	1d1a      	adds	r2, r3, #4
  403964:	681b      	ldr	r3, [r3, #0]
  403966:	9203      	str	r2, [sp, #12]
  403968:	2b00      	cmp	r3, #0
  40396a:	bfb8      	it	lt
  40396c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  403970:	f108 0802 	add.w	r8, r8, #2
  403974:	9305      	str	r3, [sp, #20]
  403976:	e76b      	b.n	403850 <_vfiprintf_r+0x88>
  403978:	2300      	movs	r3, #0
  40397a:	9305      	str	r3, [sp, #20]
  40397c:	f108 0001 	add.w	r0, r8, #1
  403980:	4619      	mov	r1, r3
  403982:	250a      	movs	r5, #10
  403984:	4680      	mov	r8, r0
  403986:	3001      	adds	r0, #1
  403988:	f898 2000 	ldrb.w	r2, [r8]
  40398c:	3a30      	subs	r2, #48	; 0x30
  40398e:	2a09      	cmp	r2, #9
  403990:	d803      	bhi.n	40399a <_vfiprintf_r+0x1d2>
  403992:	fb05 2101 	mla	r1, r5, r1, r2
  403996:	2301      	movs	r3, #1
  403998:	e7f4      	b.n	403984 <_vfiprintf_r+0x1bc>
  40399a:	2b00      	cmp	r3, #0
  40399c:	f43f af58 	beq.w	403850 <_vfiprintf_r+0x88>
  4039a0:	9105      	str	r1, [sp, #20]
  4039a2:	e755      	b.n	403850 <_vfiprintf_r+0x88>
  4039a4:	ab03      	add	r3, sp, #12
  4039a6:	9300      	str	r3, [sp, #0]
  4039a8:	4622      	mov	r2, r4
  4039aa:	4b14      	ldr	r3, [pc, #80]	; (4039fc <_vfiprintf_r+0x234>)
  4039ac:	a904      	add	r1, sp, #16
  4039ae:	4630      	mov	r0, r6
  4039b0:	f7fd fcfa 	bl	4013a8 <_printf_float>
  4039b4:	e007      	b.n	4039c6 <_vfiprintf_r+0x1fe>
  4039b6:	ab03      	add	r3, sp, #12
  4039b8:	9300      	str	r3, [sp, #0]
  4039ba:	4622      	mov	r2, r4
  4039bc:	4b0f      	ldr	r3, [pc, #60]	; (4039fc <_vfiprintf_r+0x234>)
  4039be:	a904      	add	r1, sp, #16
  4039c0:	4630      	mov	r0, r6
  4039c2:	f7fd ffab 	bl	40191c <_printf_i>
  4039c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  4039ca:	4682      	mov	sl, r0
  4039cc:	f47f af68 	bne.w	4038a0 <_vfiprintf_r+0xd8>
  4039d0:	89a3      	ldrh	r3, [r4, #12]
  4039d2:	065b      	lsls	r3, r3, #25
  4039d4:	f53f af28 	bmi.w	403828 <_vfiprintf_r+0x60>
  4039d8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4039da:	b01d      	add	sp, #116	; 0x74
  4039dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039e0:	00404bb8 	.word	0x00404bb8
  4039e4:	00404bd8 	.word	0x00404bd8
  4039e8:	00404bf8 	.word	0x00404bf8
  4039ec:	00404d1a 	.word	0x00404d1a
  4039f0:	00404d1e 	.word	0x00404d1e
  4039f4:	004013a9 	.word	0x004013a9
  4039f8:	00404d14 	.word	0x00404d14
  4039fc:	004037a5 	.word	0x004037a5

00403a00 <_sbrk_r>:
  403a00:	b538      	push	{r3, r4, r5, lr}
  403a02:	4c06      	ldr	r4, [pc, #24]	; (403a1c <_sbrk_r+0x1c>)
  403a04:	2300      	movs	r3, #0
  403a06:	4605      	mov	r5, r0
  403a08:	4608      	mov	r0, r1
  403a0a:	6023      	str	r3, [r4, #0]
  403a0c:	f7fd fbe6 	bl	4011dc <_sbrk>
  403a10:	1c43      	adds	r3, r0, #1
  403a12:	d102      	bne.n	403a1a <_sbrk_r+0x1a>
  403a14:	6823      	ldr	r3, [r4, #0]
  403a16:	b103      	cbz	r3, 403a1a <_sbrk_r+0x1a>
  403a18:	602b      	str	r3, [r5, #0]
  403a1a:	bd38      	pop	{r3, r4, r5, pc}
  403a1c:	2000029c 	.word	0x2000029c

00403a20 <__sread>:
  403a20:	b510      	push	{r4, lr}
  403a22:	460c      	mov	r4, r1
  403a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a28:	f000 f8a8 	bl	403b7c <_read_r>
  403a2c:	2800      	cmp	r0, #0
  403a2e:	bfab      	itete	ge
  403a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  403a32:	89a3      	ldrhlt	r3, [r4, #12]
  403a34:	181b      	addge	r3, r3, r0
  403a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  403a3a:	bfac      	ite	ge
  403a3c:	6563      	strge	r3, [r4, #84]	; 0x54
  403a3e:	81a3      	strhlt	r3, [r4, #12]
  403a40:	bd10      	pop	{r4, pc}

00403a42 <__swrite>:
  403a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a46:	461f      	mov	r7, r3
  403a48:	898b      	ldrh	r3, [r1, #12]
  403a4a:	05db      	lsls	r3, r3, #23
  403a4c:	4605      	mov	r5, r0
  403a4e:	460c      	mov	r4, r1
  403a50:	4616      	mov	r6, r2
  403a52:	d505      	bpl.n	403a60 <__swrite+0x1e>
  403a54:	2302      	movs	r3, #2
  403a56:	2200      	movs	r2, #0
  403a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a5c:	f000 f868 	bl	403b30 <_lseek_r>
  403a60:	89a3      	ldrh	r3, [r4, #12]
  403a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403a6a:	81a3      	strh	r3, [r4, #12]
  403a6c:	4632      	mov	r2, r6
  403a6e:	463b      	mov	r3, r7
  403a70:	4628      	mov	r0, r5
  403a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403a76:	f000 b817 	b.w	403aa8 <_write_r>

00403a7a <__sseek>:
  403a7a:	b510      	push	{r4, lr}
  403a7c:	460c      	mov	r4, r1
  403a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a82:	f000 f855 	bl	403b30 <_lseek_r>
  403a86:	1c43      	adds	r3, r0, #1
  403a88:	89a3      	ldrh	r3, [r4, #12]
  403a8a:	bf15      	itete	ne
  403a8c:	6560      	strne	r0, [r4, #84]	; 0x54
  403a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403a96:	81a3      	strheq	r3, [r4, #12]
  403a98:	bf18      	it	ne
  403a9a:	81a3      	strhne	r3, [r4, #12]
  403a9c:	bd10      	pop	{r4, pc}

00403a9e <__sclose>:
  403a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403aa2:	f000 b813 	b.w	403acc <_close_r>
	...

00403aa8 <_write_r>:
  403aa8:	b538      	push	{r3, r4, r5, lr}
  403aaa:	4c07      	ldr	r4, [pc, #28]	; (403ac8 <_write_r+0x20>)
  403aac:	4605      	mov	r5, r0
  403aae:	4608      	mov	r0, r1
  403ab0:	4611      	mov	r1, r2
  403ab2:	2200      	movs	r2, #0
  403ab4:	6022      	str	r2, [r4, #0]
  403ab6:	461a      	mov	r2, r3
  403ab8:	f7fc fb78 	bl	4001ac <_write>
  403abc:	1c43      	adds	r3, r0, #1
  403abe:	d102      	bne.n	403ac6 <_write_r+0x1e>
  403ac0:	6823      	ldr	r3, [r4, #0]
  403ac2:	b103      	cbz	r3, 403ac6 <_write_r+0x1e>
  403ac4:	602b      	str	r3, [r5, #0]
  403ac6:	bd38      	pop	{r3, r4, r5, pc}
  403ac8:	2000029c 	.word	0x2000029c

00403acc <_close_r>:
  403acc:	b538      	push	{r3, r4, r5, lr}
  403ace:	4c06      	ldr	r4, [pc, #24]	; (403ae8 <_close_r+0x1c>)
  403ad0:	2300      	movs	r3, #0
  403ad2:	4605      	mov	r5, r0
  403ad4:	4608      	mov	r0, r1
  403ad6:	6023      	str	r3, [r4, #0]
  403ad8:	f7fd fb9a 	bl	401210 <_close>
  403adc:	1c43      	adds	r3, r0, #1
  403ade:	d102      	bne.n	403ae6 <_close_r+0x1a>
  403ae0:	6823      	ldr	r3, [r4, #0]
  403ae2:	b103      	cbz	r3, 403ae6 <_close_r+0x1a>
  403ae4:	602b      	str	r3, [r5, #0]
  403ae6:	bd38      	pop	{r3, r4, r5, pc}
  403ae8:	2000029c 	.word	0x2000029c

00403aec <_fstat_r>:
  403aec:	b538      	push	{r3, r4, r5, lr}
  403aee:	4c07      	ldr	r4, [pc, #28]	; (403b0c <_fstat_r+0x20>)
  403af0:	2300      	movs	r3, #0
  403af2:	4605      	mov	r5, r0
  403af4:	4608      	mov	r0, r1
  403af6:	4611      	mov	r1, r2
  403af8:	6023      	str	r3, [r4, #0]
  403afa:	f7fd fb8d 	bl	401218 <_fstat>
  403afe:	1c43      	adds	r3, r0, #1
  403b00:	d102      	bne.n	403b08 <_fstat_r+0x1c>
  403b02:	6823      	ldr	r3, [r4, #0]
  403b04:	b103      	cbz	r3, 403b08 <_fstat_r+0x1c>
  403b06:	602b      	str	r3, [r5, #0]
  403b08:	bd38      	pop	{r3, r4, r5, pc}
  403b0a:	bf00      	nop
  403b0c:	2000029c 	.word	0x2000029c

00403b10 <_isatty_r>:
  403b10:	b538      	push	{r3, r4, r5, lr}
  403b12:	4c06      	ldr	r4, [pc, #24]	; (403b2c <_isatty_r+0x1c>)
  403b14:	2300      	movs	r3, #0
  403b16:	4605      	mov	r5, r0
  403b18:	4608      	mov	r0, r1
  403b1a:	6023      	str	r3, [r4, #0]
  403b1c:	f7fd fb82 	bl	401224 <_isatty>
  403b20:	1c43      	adds	r3, r0, #1
  403b22:	d102      	bne.n	403b2a <_isatty_r+0x1a>
  403b24:	6823      	ldr	r3, [r4, #0]
  403b26:	b103      	cbz	r3, 403b2a <_isatty_r+0x1a>
  403b28:	602b      	str	r3, [r5, #0]
  403b2a:	bd38      	pop	{r3, r4, r5, pc}
  403b2c:	2000029c 	.word	0x2000029c

00403b30 <_lseek_r>:
  403b30:	b538      	push	{r3, r4, r5, lr}
  403b32:	4c07      	ldr	r4, [pc, #28]	; (403b50 <_lseek_r+0x20>)
  403b34:	4605      	mov	r5, r0
  403b36:	4608      	mov	r0, r1
  403b38:	4611      	mov	r1, r2
  403b3a:	2200      	movs	r2, #0
  403b3c:	6022      	str	r2, [r4, #0]
  403b3e:	461a      	mov	r2, r3
  403b40:	f7fd fb72 	bl	401228 <_lseek>
  403b44:	1c43      	adds	r3, r0, #1
  403b46:	d102      	bne.n	403b4e <_lseek_r+0x1e>
  403b48:	6823      	ldr	r3, [r4, #0]
  403b4a:	b103      	cbz	r3, 403b4e <_lseek_r+0x1e>
  403b4c:	602b      	str	r3, [r5, #0]
  403b4e:	bd38      	pop	{r3, r4, r5, pc}
  403b50:	2000029c 	.word	0x2000029c

00403b54 <__ascii_mbtowc>:
  403b54:	b082      	sub	sp, #8
  403b56:	b901      	cbnz	r1, 403b5a <__ascii_mbtowc+0x6>
  403b58:	a901      	add	r1, sp, #4
  403b5a:	b13a      	cbz	r2, 403b6c <__ascii_mbtowc+0x18>
  403b5c:	b143      	cbz	r3, 403b70 <__ascii_mbtowc+0x1c>
  403b5e:	7813      	ldrb	r3, [r2, #0]
  403b60:	600b      	str	r3, [r1, #0]
  403b62:	7812      	ldrb	r2, [r2, #0]
  403b64:	1c10      	adds	r0, r2, #0
  403b66:	bf18      	it	ne
  403b68:	2001      	movne	r0, #1
  403b6a:	e003      	b.n	403b74 <__ascii_mbtowc+0x20>
  403b6c:	4610      	mov	r0, r2
  403b6e:	e001      	b.n	403b74 <__ascii_mbtowc+0x20>
  403b70:	f06f 0001 	mvn.w	r0, #1
  403b74:	b002      	add	sp, #8
  403b76:	4770      	bx	lr

00403b78 <__malloc_lock>:
  403b78:	4770      	bx	lr

00403b7a <__malloc_unlock>:
  403b7a:	4770      	bx	lr

00403b7c <_read_r>:
  403b7c:	b538      	push	{r3, r4, r5, lr}
  403b7e:	4c07      	ldr	r4, [pc, #28]	; (403b9c <_read_r+0x20>)
  403b80:	4605      	mov	r5, r0
  403b82:	4608      	mov	r0, r1
  403b84:	4611      	mov	r1, r2
  403b86:	2200      	movs	r2, #0
  403b88:	6022      	str	r2, [r4, #0]
  403b8a:	461a      	mov	r2, r3
  403b8c:	f7fc faf0 	bl	400170 <_read>
  403b90:	1c43      	adds	r3, r0, #1
  403b92:	d102      	bne.n	403b9a <_read_r+0x1e>
  403b94:	6823      	ldr	r3, [r4, #0]
  403b96:	b103      	cbz	r3, 403b9a <_read_r+0x1e>
  403b98:	602b      	str	r3, [r5, #0]
  403b9a:	bd38      	pop	{r3, r4, r5, pc}
  403b9c:	2000029c 	.word	0x2000029c

00403ba0 <__ascii_wctomb>:
  403ba0:	b149      	cbz	r1, 403bb6 <__ascii_wctomb+0x16>
  403ba2:	2aff      	cmp	r2, #255	; 0xff
  403ba4:	bf85      	ittet	hi
  403ba6:	238a      	movhi	r3, #138	; 0x8a
  403ba8:	6003      	strhi	r3, [r0, #0]
  403baa:	700a      	strbls	r2, [r1, #0]
  403bac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  403bb0:	bf98      	it	ls
  403bb2:	2001      	movls	r0, #1
  403bb4:	4770      	bx	lr
  403bb6:	4608      	mov	r0, r1
  403bb8:	4770      	bx	lr
	...

00403bbc <__aeabi_drsub>:
  403bbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403bc0:	e002      	b.n	403bc8 <__adddf3>
  403bc2:	bf00      	nop

00403bc4 <__aeabi_dsub>:
  403bc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403bc8 <__adddf3>:
  403bc8:	b530      	push	{r4, r5, lr}
  403bca:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403bce:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403bd2:	ea94 0f05 	teq	r4, r5
  403bd6:	bf08      	it	eq
  403bd8:	ea90 0f02 	teqeq	r0, r2
  403bdc:	bf1f      	itttt	ne
  403bde:	ea54 0c00 	orrsne.w	ip, r4, r0
  403be2:	ea55 0c02 	orrsne.w	ip, r5, r2
  403be6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403bea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403bee:	f000 80e2 	beq.w	403db6 <__adddf3+0x1ee>
  403bf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403bf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403bfa:	bfb8      	it	lt
  403bfc:	426d      	neglt	r5, r5
  403bfe:	dd0c      	ble.n	403c1a <__adddf3+0x52>
  403c00:	442c      	add	r4, r5
  403c02:	ea80 0202 	eor.w	r2, r0, r2
  403c06:	ea81 0303 	eor.w	r3, r1, r3
  403c0a:	ea82 0000 	eor.w	r0, r2, r0
  403c0e:	ea83 0101 	eor.w	r1, r3, r1
  403c12:	ea80 0202 	eor.w	r2, r0, r2
  403c16:	ea81 0303 	eor.w	r3, r1, r3
  403c1a:	2d36      	cmp	r5, #54	; 0x36
  403c1c:	bf88      	it	hi
  403c1e:	bd30      	pophi	{r4, r5, pc}
  403c20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403c24:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403c28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403c2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403c30:	d002      	beq.n	403c38 <__adddf3+0x70>
  403c32:	4240      	negs	r0, r0
  403c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403c38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403c3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403c40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403c44:	d002      	beq.n	403c4c <__adddf3+0x84>
  403c46:	4252      	negs	r2, r2
  403c48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403c4c:	ea94 0f05 	teq	r4, r5
  403c50:	f000 80a7 	beq.w	403da2 <__adddf3+0x1da>
  403c54:	f1a4 0401 	sub.w	r4, r4, #1
  403c58:	f1d5 0e20 	rsbs	lr, r5, #32
  403c5c:	db0d      	blt.n	403c7a <__adddf3+0xb2>
  403c5e:	fa02 fc0e 	lsl.w	ip, r2, lr
  403c62:	fa22 f205 	lsr.w	r2, r2, r5
  403c66:	1880      	adds	r0, r0, r2
  403c68:	f141 0100 	adc.w	r1, r1, #0
  403c6c:	fa03 f20e 	lsl.w	r2, r3, lr
  403c70:	1880      	adds	r0, r0, r2
  403c72:	fa43 f305 	asr.w	r3, r3, r5
  403c76:	4159      	adcs	r1, r3
  403c78:	e00e      	b.n	403c98 <__adddf3+0xd0>
  403c7a:	f1a5 0520 	sub.w	r5, r5, #32
  403c7e:	f10e 0e20 	add.w	lr, lr, #32
  403c82:	2a01      	cmp	r2, #1
  403c84:	fa03 fc0e 	lsl.w	ip, r3, lr
  403c88:	bf28      	it	cs
  403c8a:	f04c 0c02 	orrcs.w	ip, ip, #2
  403c8e:	fa43 f305 	asr.w	r3, r3, r5
  403c92:	18c0      	adds	r0, r0, r3
  403c94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403c9c:	d507      	bpl.n	403cae <__adddf3+0xe6>
  403c9e:	f04f 0e00 	mov.w	lr, #0
  403ca2:	f1dc 0c00 	rsbs	ip, ip, #0
  403ca6:	eb7e 0000 	sbcs.w	r0, lr, r0
  403caa:	eb6e 0101 	sbc.w	r1, lr, r1
  403cae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403cb2:	d31b      	bcc.n	403cec <__adddf3+0x124>
  403cb4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403cb8:	d30c      	bcc.n	403cd4 <__adddf3+0x10c>
  403cba:	0849      	lsrs	r1, r1, #1
  403cbc:	ea5f 0030 	movs.w	r0, r0, rrx
  403cc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403cc4:	f104 0401 	add.w	r4, r4, #1
  403cc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403ccc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403cd0:	f080 809a 	bcs.w	403e08 <__adddf3+0x240>
  403cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403cd8:	bf08      	it	eq
  403cda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403cde:	f150 0000 	adcs.w	r0, r0, #0
  403ce2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403ce6:	ea41 0105 	orr.w	r1, r1, r5
  403cea:	bd30      	pop	{r4, r5, pc}
  403cec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403cf0:	4140      	adcs	r0, r0
  403cf2:	eb41 0101 	adc.w	r1, r1, r1
  403cf6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403cfa:	f1a4 0401 	sub.w	r4, r4, #1
  403cfe:	d1e9      	bne.n	403cd4 <__adddf3+0x10c>
  403d00:	f091 0f00 	teq	r1, #0
  403d04:	bf04      	itt	eq
  403d06:	4601      	moveq	r1, r0
  403d08:	2000      	moveq	r0, #0
  403d0a:	fab1 f381 	clz	r3, r1
  403d0e:	bf08      	it	eq
  403d10:	3320      	addeq	r3, #32
  403d12:	f1a3 030b 	sub.w	r3, r3, #11
  403d16:	f1b3 0220 	subs.w	r2, r3, #32
  403d1a:	da0c      	bge.n	403d36 <__adddf3+0x16e>
  403d1c:	320c      	adds	r2, #12
  403d1e:	dd08      	ble.n	403d32 <__adddf3+0x16a>
  403d20:	f102 0c14 	add.w	ip, r2, #20
  403d24:	f1c2 020c 	rsb	r2, r2, #12
  403d28:	fa01 f00c 	lsl.w	r0, r1, ip
  403d2c:	fa21 f102 	lsr.w	r1, r1, r2
  403d30:	e00c      	b.n	403d4c <__adddf3+0x184>
  403d32:	f102 0214 	add.w	r2, r2, #20
  403d36:	bfd8      	it	le
  403d38:	f1c2 0c20 	rsble	ip, r2, #32
  403d3c:	fa01 f102 	lsl.w	r1, r1, r2
  403d40:	fa20 fc0c 	lsr.w	ip, r0, ip
  403d44:	bfdc      	itt	le
  403d46:	ea41 010c 	orrle.w	r1, r1, ip
  403d4a:	4090      	lslle	r0, r2
  403d4c:	1ae4      	subs	r4, r4, r3
  403d4e:	bfa2      	ittt	ge
  403d50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403d54:	4329      	orrge	r1, r5
  403d56:	bd30      	popge	{r4, r5, pc}
  403d58:	ea6f 0404 	mvn.w	r4, r4
  403d5c:	3c1f      	subs	r4, #31
  403d5e:	da1c      	bge.n	403d9a <__adddf3+0x1d2>
  403d60:	340c      	adds	r4, #12
  403d62:	dc0e      	bgt.n	403d82 <__adddf3+0x1ba>
  403d64:	f104 0414 	add.w	r4, r4, #20
  403d68:	f1c4 0220 	rsb	r2, r4, #32
  403d6c:	fa20 f004 	lsr.w	r0, r0, r4
  403d70:	fa01 f302 	lsl.w	r3, r1, r2
  403d74:	ea40 0003 	orr.w	r0, r0, r3
  403d78:	fa21 f304 	lsr.w	r3, r1, r4
  403d7c:	ea45 0103 	orr.w	r1, r5, r3
  403d80:	bd30      	pop	{r4, r5, pc}
  403d82:	f1c4 040c 	rsb	r4, r4, #12
  403d86:	f1c4 0220 	rsb	r2, r4, #32
  403d8a:	fa20 f002 	lsr.w	r0, r0, r2
  403d8e:	fa01 f304 	lsl.w	r3, r1, r4
  403d92:	ea40 0003 	orr.w	r0, r0, r3
  403d96:	4629      	mov	r1, r5
  403d98:	bd30      	pop	{r4, r5, pc}
  403d9a:	fa21 f004 	lsr.w	r0, r1, r4
  403d9e:	4629      	mov	r1, r5
  403da0:	bd30      	pop	{r4, r5, pc}
  403da2:	f094 0f00 	teq	r4, #0
  403da6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403daa:	bf06      	itte	eq
  403dac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403db0:	3401      	addeq	r4, #1
  403db2:	3d01      	subne	r5, #1
  403db4:	e74e      	b.n	403c54 <__adddf3+0x8c>
  403db6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403dba:	bf18      	it	ne
  403dbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403dc0:	d029      	beq.n	403e16 <__adddf3+0x24e>
  403dc2:	ea94 0f05 	teq	r4, r5
  403dc6:	bf08      	it	eq
  403dc8:	ea90 0f02 	teqeq	r0, r2
  403dcc:	d005      	beq.n	403dda <__adddf3+0x212>
  403dce:	ea54 0c00 	orrs.w	ip, r4, r0
  403dd2:	bf04      	itt	eq
  403dd4:	4619      	moveq	r1, r3
  403dd6:	4610      	moveq	r0, r2
  403dd8:	bd30      	pop	{r4, r5, pc}
  403dda:	ea91 0f03 	teq	r1, r3
  403dde:	bf1e      	ittt	ne
  403de0:	2100      	movne	r1, #0
  403de2:	2000      	movne	r0, #0
  403de4:	bd30      	popne	{r4, r5, pc}
  403de6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403dea:	d105      	bne.n	403df8 <__adddf3+0x230>
  403dec:	0040      	lsls	r0, r0, #1
  403dee:	4149      	adcs	r1, r1
  403df0:	bf28      	it	cs
  403df2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403df6:	bd30      	pop	{r4, r5, pc}
  403df8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403dfc:	bf3c      	itt	cc
  403dfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403e02:	bd30      	popcc	{r4, r5, pc}
  403e04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403e08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403e0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403e10:	f04f 0000 	mov.w	r0, #0
  403e14:	bd30      	pop	{r4, r5, pc}
  403e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403e1a:	bf1a      	itte	ne
  403e1c:	4619      	movne	r1, r3
  403e1e:	4610      	movne	r0, r2
  403e20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403e24:	bf1c      	itt	ne
  403e26:	460b      	movne	r3, r1
  403e28:	4602      	movne	r2, r0
  403e2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403e2e:	bf06      	itte	eq
  403e30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403e34:	ea91 0f03 	teqeq	r1, r3
  403e38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403e3c:	bd30      	pop	{r4, r5, pc}
  403e3e:	bf00      	nop

00403e40 <__aeabi_ui2d>:
  403e40:	f090 0f00 	teq	r0, #0
  403e44:	bf04      	itt	eq
  403e46:	2100      	moveq	r1, #0
  403e48:	4770      	bxeq	lr
  403e4a:	b530      	push	{r4, r5, lr}
  403e4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403e50:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403e54:	f04f 0500 	mov.w	r5, #0
  403e58:	f04f 0100 	mov.w	r1, #0
  403e5c:	e750      	b.n	403d00 <__adddf3+0x138>
  403e5e:	bf00      	nop

00403e60 <__aeabi_i2d>:
  403e60:	f090 0f00 	teq	r0, #0
  403e64:	bf04      	itt	eq
  403e66:	2100      	moveq	r1, #0
  403e68:	4770      	bxeq	lr
  403e6a:	b530      	push	{r4, r5, lr}
  403e6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403e70:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403e74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403e78:	bf48      	it	mi
  403e7a:	4240      	negmi	r0, r0
  403e7c:	f04f 0100 	mov.w	r1, #0
  403e80:	e73e      	b.n	403d00 <__adddf3+0x138>
  403e82:	bf00      	nop

00403e84 <__aeabi_f2d>:
  403e84:	0042      	lsls	r2, r0, #1
  403e86:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403e8a:	ea4f 0131 	mov.w	r1, r1, rrx
  403e8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403e92:	bf1f      	itttt	ne
  403e94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403e98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403e9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403ea0:	4770      	bxne	lr
  403ea2:	f092 0f00 	teq	r2, #0
  403ea6:	bf14      	ite	ne
  403ea8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403eac:	4770      	bxeq	lr
  403eae:	b530      	push	{r4, r5, lr}
  403eb0:	f44f 7460 	mov.w	r4, #896	; 0x380
  403eb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403eb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403ebc:	e720      	b.n	403d00 <__adddf3+0x138>
  403ebe:	bf00      	nop

00403ec0 <__aeabi_ul2d>:
  403ec0:	ea50 0201 	orrs.w	r2, r0, r1
  403ec4:	bf08      	it	eq
  403ec6:	4770      	bxeq	lr
  403ec8:	b530      	push	{r4, r5, lr}
  403eca:	f04f 0500 	mov.w	r5, #0
  403ece:	e00a      	b.n	403ee6 <__aeabi_l2d+0x16>

00403ed0 <__aeabi_l2d>:
  403ed0:	ea50 0201 	orrs.w	r2, r0, r1
  403ed4:	bf08      	it	eq
  403ed6:	4770      	bxeq	lr
  403ed8:	b530      	push	{r4, r5, lr}
  403eda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403ede:	d502      	bpl.n	403ee6 <__aeabi_l2d+0x16>
  403ee0:	4240      	negs	r0, r0
  403ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403ee6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403eea:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403eee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403ef2:	f43f aedc 	beq.w	403cae <__adddf3+0xe6>
  403ef6:	f04f 0203 	mov.w	r2, #3
  403efa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403efe:	bf18      	it	ne
  403f00:	3203      	addne	r2, #3
  403f02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403f06:	bf18      	it	ne
  403f08:	3203      	addne	r2, #3
  403f0a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403f0e:	f1c2 0320 	rsb	r3, r2, #32
  403f12:	fa00 fc03 	lsl.w	ip, r0, r3
  403f16:	fa20 f002 	lsr.w	r0, r0, r2
  403f1a:	fa01 fe03 	lsl.w	lr, r1, r3
  403f1e:	ea40 000e 	orr.w	r0, r0, lr
  403f22:	fa21 f102 	lsr.w	r1, r1, r2
  403f26:	4414      	add	r4, r2
  403f28:	e6c1      	b.n	403cae <__adddf3+0xe6>
  403f2a:	bf00      	nop

00403f2c <__aeabi_dmul>:
  403f2c:	b570      	push	{r4, r5, r6, lr}
  403f2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403f32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403f36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403f3a:	bf1d      	ittte	ne
  403f3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403f40:	ea94 0f0c 	teqne	r4, ip
  403f44:	ea95 0f0c 	teqne	r5, ip
  403f48:	f000 f8de 	bleq	404108 <__aeabi_dmul+0x1dc>
  403f4c:	442c      	add	r4, r5
  403f4e:	ea81 0603 	eor.w	r6, r1, r3
  403f52:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403f56:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403f5a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403f5e:	bf18      	it	ne
  403f60:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403f64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403f6c:	d038      	beq.n	403fe0 <__aeabi_dmul+0xb4>
  403f6e:	fba0 ce02 	umull	ip, lr, r0, r2
  403f72:	f04f 0500 	mov.w	r5, #0
  403f76:	fbe1 e502 	umlal	lr, r5, r1, r2
  403f7a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403f7e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403f82:	f04f 0600 	mov.w	r6, #0
  403f86:	fbe1 5603 	umlal	r5, r6, r1, r3
  403f8a:	f09c 0f00 	teq	ip, #0
  403f8e:	bf18      	it	ne
  403f90:	f04e 0e01 	orrne.w	lr, lr, #1
  403f94:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403f98:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403f9c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403fa0:	d204      	bcs.n	403fac <__aeabi_dmul+0x80>
  403fa2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403fa6:	416d      	adcs	r5, r5
  403fa8:	eb46 0606 	adc.w	r6, r6, r6
  403fac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403fb0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403fb4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403fb8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403fbc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403fc0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403fc4:	bf88      	it	hi
  403fc6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403fca:	d81e      	bhi.n	40400a <__aeabi_dmul+0xde>
  403fcc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403fd0:	bf08      	it	eq
  403fd2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403fd6:	f150 0000 	adcs.w	r0, r0, #0
  403fda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403fde:	bd70      	pop	{r4, r5, r6, pc}
  403fe0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403fe4:	ea46 0101 	orr.w	r1, r6, r1
  403fe8:	ea40 0002 	orr.w	r0, r0, r2
  403fec:	ea81 0103 	eor.w	r1, r1, r3
  403ff0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403ff4:	bfc2      	ittt	gt
  403ff6:	ebd4 050c 	rsbsgt	r5, r4, ip
  403ffa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403ffe:	bd70      	popgt	{r4, r5, r6, pc}
  404000:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404004:	f04f 0e00 	mov.w	lr, #0
  404008:	3c01      	subs	r4, #1
  40400a:	f300 80ab 	bgt.w	404164 <__aeabi_dmul+0x238>
  40400e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404012:	bfde      	ittt	le
  404014:	2000      	movle	r0, #0
  404016:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40401a:	bd70      	pople	{r4, r5, r6, pc}
  40401c:	f1c4 0400 	rsb	r4, r4, #0
  404020:	3c20      	subs	r4, #32
  404022:	da35      	bge.n	404090 <__aeabi_dmul+0x164>
  404024:	340c      	adds	r4, #12
  404026:	dc1b      	bgt.n	404060 <__aeabi_dmul+0x134>
  404028:	f104 0414 	add.w	r4, r4, #20
  40402c:	f1c4 0520 	rsb	r5, r4, #32
  404030:	fa00 f305 	lsl.w	r3, r0, r5
  404034:	fa20 f004 	lsr.w	r0, r0, r4
  404038:	fa01 f205 	lsl.w	r2, r1, r5
  40403c:	ea40 0002 	orr.w	r0, r0, r2
  404040:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404044:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404048:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40404c:	fa21 f604 	lsr.w	r6, r1, r4
  404050:	eb42 0106 	adc.w	r1, r2, r6
  404054:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404058:	bf08      	it	eq
  40405a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40405e:	bd70      	pop	{r4, r5, r6, pc}
  404060:	f1c4 040c 	rsb	r4, r4, #12
  404064:	f1c4 0520 	rsb	r5, r4, #32
  404068:	fa00 f304 	lsl.w	r3, r0, r4
  40406c:	fa20 f005 	lsr.w	r0, r0, r5
  404070:	fa01 f204 	lsl.w	r2, r1, r4
  404074:	ea40 0002 	orr.w	r0, r0, r2
  404078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40407c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404080:	f141 0100 	adc.w	r1, r1, #0
  404084:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404088:	bf08      	it	eq
  40408a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40408e:	bd70      	pop	{r4, r5, r6, pc}
  404090:	f1c4 0520 	rsb	r5, r4, #32
  404094:	fa00 f205 	lsl.w	r2, r0, r5
  404098:	ea4e 0e02 	orr.w	lr, lr, r2
  40409c:	fa20 f304 	lsr.w	r3, r0, r4
  4040a0:	fa01 f205 	lsl.w	r2, r1, r5
  4040a4:	ea43 0302 	orr.w	r3, r3, r2
  4040a8:	fa21 f004 	lsr.w	r0, r1, r4
  4040ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4040b0:	fa21 f204 	lsr.w	r2, r1, r4
  4040b4:	ea20 0002 	bic.w	r0, r0, r2
  4040b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4040bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4040c0:	bf08      	it	eq
  4040c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4040c6:	bd70      	pop	{r4, r5, r6, pc}
  4040c8:	f094 0f00 	teq	r4, #0
  4040cc:	d10f      	bne.n	4040ee <__aeabi_dmul+0x1c2>
  4040ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4040d2:	0040      	lsls	r0, r0, #1
  4040d4:	eb41 0101 	adc.w	r1, r1, r1
  4040d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4040dc:	bf08      	it	eq
  4040de:	3c01      	subeq	r4, #1
  4040e0:	d0f7      	beq.n	4040d2 <__aeabi_dmul+0x1a6>
  4040e2:	ea41 0106 	orr.w	r1, r1, r6
  4040e6:	f095 0f00 	teq	r5, #0
  4040ea:	bf18      	it	ne
  4040ec:	4770      	bxne	lr
  4040ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4040f2:	0052      	lsls	r2, r2, #1
  4040f4:	eb43 0303 	adc.w	r3, r3, r3
  4040f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4040fc:	bf08      	it	eq
  4040fe:	3d01      	subeq	r5, #1
  404100:	d0f7      	beq.n	4040f2 <__aeabi_dmul+0x1c6>
  404102:	ea43 0306 	orr.w	r3, r3, r6
  404106:	4770      	bx	lr
  404108:	ea94 0f0c 	teq	r4, ip
  40410c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404110:	bf18      	it	ne
  404112:	ea95 0f0c 	teqne	r5, ip
  404116:	d00c      	beq.n	404132 <__aeabi_dmul+0x206>
  404118:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40411c:	bf18      	it	ne
  40411e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404122:	d1d1      	bne.n	4040c8 <__aeabi_dmul+0x19c>
  404124:	ea81 0103 	eor.w	r1, r1, r3
  404128:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40412c:	f04f 0000 	mov.w	r0, #0
  404130:	bd70      	pop	{r4, r5, r6, pc}
  404132:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404136:	bf06      	itte	eq
  404138:	4610      	moveq	r0, r2
  40413a:	4619      	moveq	r1, r3
  40413c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404140:	d019      	beq.n	404176 <__aeabi_dmul+0x24a>
  404142:	ea94 0f0c 	teq	r4, ip
  404146:	d102      	bne.n	40414e <__aeabi_dmul+0x222>
  404148:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40414c:	d113      	bne.n	404176 <__aeabi_dmul+0x24a>
  40414e:	ea95 0f0c 	teq	r5, ip
  404152:	d105      	bne.n	404160 <__aeabi_dmul+0x234>
  404154:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404158:	bf1c      	itt	ne
  40415a:	4610      	movne	r0, r2
  40415c:	4619      	movne	r1, r3
  40415e:	d10a      	bne.n	404176 <__aeabi_dmul+0x24a>
  404160:	ea81 0103 	eor.w	r1, r1, r3
  404164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404168:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40416c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404170:	f04f 0000 	mov.w	r0, #0
  404174:	bd70      	pop	{r4, r5, r6, pc}
  404176:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40417a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40417e:	bd70      	pop	{r4, r5, r6, pc}

00404180 <__aeabi_ddiv>:
  404180:	b570      	push	{r4, r5, r6, lr}
  404182:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404186:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40418a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40418e:	bf1d      	ittte	ne
  404190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404194:	ea94 0f0c 	teqne	r4, ip
  404198:	ea95 0f0c 	teqne	r5, ip
  40419c:	f000 f8a7 	bleq	4042ee <__aeabi_ddiv+0x16e>
  4041a0:	eba4 0405 	sub.w	r4, r4, r5
  4041a4:	ea81 0e03 	eor.w	lr, r1, r3
  4041a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4041ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4041b0:	f000 8088 	beq.w	4042c4 <__aeabi_ddiv+0x144>
  4041b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4041b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4041bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4041c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4041c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4041c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4041cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4041d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4041d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4041d8:	429d      	cmp	r5, r3
  4041da:	bf08      	it	eq
  4041dc:	4296      	cmpeq	r6, r2
  4041de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4041e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4041e6:	d202      	bcs.n	4041ee <__aeabi_ddiv+0x6e>
  4041e8:	085b      	lsrs	r3, r3, #1
  4041ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4041ee:	1ab6      	subs	r6, r6, r2
  4041f0:	eb65 0503 	sbc.w	r5, r5, r3
  4041f4:	085b      	lsrs	r3, r3, #1
  4041f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4041fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4041fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404202:	ebb6 0e02 	subs.w	lr, r6, r2
  404206:	eb75 0e03 	sbcs.w	lr, r5, r3
  40420a:	bf22      	ittt	cs
  40420c:	1ab6      	subcs	r6, r6, r2
  40420e:	4675      	movcs	r5, lr
  404210:	ea40 000c 	orrcs.w	r0, r0, ip
  404214:	085b      	lsrs	r3, r3, #1
  404216:	ea4f 0232 	mov.w	r2, r2, rrx
  40421a:	ebb6 0e02 	subs.w	lr, r6, r2
  40421e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404222:	bf22      	ittt	cs
  404224:	1ab6      	subcs	r6, r6, r2
  404226:	4675      	movcs	r5, lr
  404228:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40422c:	085b      	lsrs	r3, r3, #1
  40422e:	ea4f 0232 	mov.w	r2, r2, rrx
  404232:	ebb6 0e02 	subs.w	lr, r6, r2
  404236:	eb75 0e03 	sbcs.w	lr, r5, r3
  40423a:	bf22      	ittt	cs
  40423c:	1ab6      	subcs	r6, r6, r2
  40423e:	4675      	movcs	r5, lr
  404240:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404244:	085b      	lsrs	r3, r3, #1
  404246:	ea4f 0232 	mov.w	r2, r2, rrx
  40424a:	ebb6 0e02 	subs.w	lr, r6, r2
  40424e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404252:	bf22      	ittt	cs
  404254:	1ab6      	subcs	r6, r6, r2
  404256:	4675      	movcs	r5, lr
  404258:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40425c:	ea55 0e06 	orrs.w	lr, r5, r6
  404260:	d018      	beq.n	404294 <__aeabi_ddiv+0x114>
  404262:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404266:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40426a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40426e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404272:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404276:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40427a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40427e:	d1c0      	bne.n	404202 <__aeabi_ddiv+0x82>
  404280:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404284:	d10b      	bne.n	40429e <__aeabi_ddiv+0x11e>
  404286:	ea41 0100 	orr.w	r1, r1, r0
  40428a:	f04f 0000 	mov.w	r0, #0
  40428e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404292:	e7b6      	b.n	404202 <__aeabi_ddiv+0x82>
  404294:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404298:	bf04      	itt	eq
  40429a:	4301      	orreq	r1, r0
  40429c:	2000      	moveq	r0, #0
  40429e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4042a2:	bf88      	it	hi
  4042a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4042a8:	f63f aeaf 	bhi.w	40400a <__aeabi_dmul+0xde>
  4042ac:	ebb5 0c03 	subs.w	ip, r5, r3
  4042b0:	bf04      	itt	eq
  4042b2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4042b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4042ba:	f150 0000 	adcs.w	r0, r0, #0
  4042be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4042c2:	bd70      	pop	{r4, r5, r6, pc}
  4042c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4042c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4042cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4042d0:	bfc2      	ittt	gt
  4042d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4042d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4042da:	bd70      	popgt	{r4, r5, r6, pc}
  4042dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4042e0:	f04f 0e00 	mov.w	lr, #0
  4042e4:	3c01      	subs	r4, #1
  4042e6:	e690      	b.n	40400a <__aeabi_dmul+0xde>
  4042e8:	ea45 0e06 	orr.w	lr, r5, r6
  4042ec:	e68d      	b.n	40400a <__aeabi_dmul+0xde>
  4042ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4042f2:	ea94 0f0c 	teq	r4, ip
  4042f6:	bf08      	it	eq
  4042f8:	ea95 0f0c 	teqeq	r5, ip
  4042fc:	f43f af3b 	beq.w	404176 <__aeabi_dmul+0x24a>
  404300:	ea94 0f0c 	teq	r4, ip
  404304:	d10a      	bne.n	40431c <__aeabi_ddiv+0x19c>
  404306:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40430a:	f47f af34 	bne.w	404176 <__aeabi_dmul+0x24a>
  40430e:	ea95 0f0c 	teq	r5, ip
  404312:	f47f af25 	bne.w	404160 <__aeabi_dmul+0x234>
  404316:	4610      	mov	r0, r2
  404318:	4619      	mov	r1, r3
  40431a:	e72c      	b.n	404176 <__aeabi_dmul+0x24a>
  40431c:	ea95 0f0c 	teq	r5, ip
  404320:	d106      	bne.n	404330 <__aeabi_ddiv+0x1b0>
  404322:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404326:	f43f aefd 	beq.w	404124 <__aeabi_dmul+0x1f8>
  40432a:	4610      	mov	r0, r2
  40432c:	4619      	mov	r1, r3
  40432e:	e722      	b.n	404176 <__aeabi_dmul+0x24a>
  404330:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404334:	bf18      	it	ne
  404336:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40433a:	f47f aec5 	bne.w	4040c8 <__aeabi_dmul+0x19c>
  40433e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404342:	f47f af0d 	bne.w	404160 <__aeabi_dmul+0x234>
  404346:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40434a:	f47f aeeb 	bne.w	404124 <__aeabi_dmul+0x1f8>
  40434e:	e712      	b.n	404176 <__aeabi_dmul+0x24a>

00404350 <__gedf2>:
  404350:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  404354:	e006      	b.n	404364 <__cmpdf2+0x4>
  404356:	bf00      	nop

00404358 <__ledf2>:
  404358:	f04f 0c01 	mov.w	ip, #1
  40435c:	e002      	b.n	404364 <__cmpdf2+0x4>
  40435e:	bf00      	nop

00404360 <__cmpdf2>:
  404360:	f04f 0c01 	mov.w	ip, #1
  404364:	f84d cd04 	str.w	ip, [sp, #-4]!
  404368:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40436c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404370:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404374:	bf18      	it	ne
  404376:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40437a:	d01b      	beq.n	4043b4 <__cmpdf2+0x54>
  40437c:	b001      	add	sp, #4
  40437e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  404382:	bf0c      	ite	eq
  404384:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404388:	ea91 0f03 	teqne	r1, r3
  40438c:	bf02      	ittt	eq
  40438e:	ea90 0f02 	teqeq	r0, r2
  404392:	2000      	moveq	r0, #0
  404394:	4770      	bxeq	lr
  404396:	f110 0f00 	cmn.w	r0, #0
  40439a:	ea91 0f03 	teq	r1, r3
  40439e:	bf58      	it	pl
  4043a0:	4299      	cmppl	r1, r3
  4043a2:	bf08      	it	eq
  4043a4:	4290      	cmpeq	r0, r2
  4043a6:	bf2c      	ite	cs
  4043a8:	17d8      	asrcs	r0, r3, #31
  4043aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4043ae:	f040 0001 	orr.w	r0, r0, #1
  4043b2:	4770      	bx	lr
  4043b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4043b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4043bc:	d102      	bne.n	4043c4 <__cmpdf2+0x64>
  4043be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4043c2:	d107      	bne.n	4043d4 <__cmpdf2+0x74>
  4043c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4043c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4043cc:	d1d6      	bne.n	40437c <__cmpdf2+0x1c>
  4043ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4043d2:	d0d3      	beq.n	40437c <__cmpdf2+0x1c>
  4043d4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4043d8:	4770      	bx	lr
  4043da:	bf00      	nop

004043dc <__aeabi_cdrcmple>:
  4043dc:	4684      	mov	ip, r0
  4043de:	4610      	mov	r0, r2
  4043e0:	4662      	mov	r2, ip
  4043e2:	468c      	mov	ip, r1
  4043e4:	4619      	mov	r1, r3
  4043e6:	4663      	mov	r3, ip
  4043e8:	e000      	b.n	4043ec <__aeabi_cdcmpeq>
  4043ea:	bf00      	nop

004043ec <__aeabi_cdcmpeq>:
  4043ec:	b501      	push	{r0, lr}
  4043ee:	f7ff ffb7 	bl	404360 <__cmpdf2>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	bf48      	it	mi
  4043f6:	f110 0f00 	cmnmi.w	r0, #0
  4043fa:	bd01      	pop	{r0, pc}

004043fc <__aeabi_dcmpeq>:
  4043fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  404400:	f7ff fff4 	bl	4043ec <__aeabi_cdcmpeq>
  404404:	bf0c      	ite	eq
  404406:	2001      	moveq	r0, #1
  404408:	2000      	movne	r0, #0
  40440a:	f85d fb08 	ldr.w	pc, [sp], #8
  40440e:	bf00      	nop

00404410 <__aeabi_dcmplt>:
  404410:	f84d ed08 	str.w	lr, [sp, #-8]!
  404414:	f7ff ffea 	bl	4043ec <__aeabi_cdcmpeq>
  404418:	bf34      	ite	cc
  40441a:	2001      	movcc	r0, #1
  40441c:	2000      	movcs	r0, #0
  40441e:	f85d fb08 	ldr.w	pc, [sp], #8
  404422:	bf00      	nop

00404424 <__aeabi_dcmple>:
  404424:	f84d ed08 	str.w	lr, [sp, #-8]!
  404428:	f7ff ffe0 	bl	4043ec <__aeabi_cdcmpeq>
  40442c:	bf94      	ite	ls
  40442e:	2001      	movls	r0, #1
  404430:	2000      	movhi	r0, #0
  404432:	f85d fb08 	ldr.w	pc, [sp], #8
  404436:	bf00      	nop

00404438 <__aeabi_dcmpge>:
  404438:	f84d ed08 	str.w	lr, [sp, #-8]!
  40443c:	f7ff ffce 	bl	4043dc <__aeabi_cdrcmple>
  404440:	bf94      	ite	ls
  404442:	2001      	movls	r0, #1
  404444:	2000      	movhi	r0, #0
  404446:	f85d fb08 	ldr.w	pc, [sp], #8
  40444a:	bf00      	nop

0040444c <__aeabi_dcmpgt>:
  40444c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404450:	f7ff ffc4 	bl	4043dc <__aeabi_cdrcmple>
  404454:	bf34      	ite	cc
  404456:	2001      	movcc	r0, #1
  404458:	2000      	movcs	r0, #0
  40445a:	f85d fb08 	ldr.w	pc, [sp], #8
  40445e:	bf00      	nop

00404460 <__aeabi_dcmpun>:
  404460:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404464:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404468:	d102      	bne.n	404470 <__aeabi_dcmpun+0x10>
  40446a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40446e:	d10a      	bne.n	404486 <__aeabi_dcmpun+0x26>
  404470:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404478:	d102      	bne.n	404480 <__aeabi_dcmpun+0x20>
  40447a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40447e:	d102      	bne.n	404486 <__aeabi_dcmpun+0x26>
  404480:	f04f 0000 	mov.w	r0, #0
  404484:	4770      	bx	lr
  404486:	f04f 0001 	mov.w	r0, #1
  40448a:	4770      	bx	lr

0040448c <__aeabi_d2iz>:
  40448c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404490:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  404494:	d215      	bcs.n	4044c2 <__aeabi_d2iz+0x36>
  404496:	d511      	bpl.n	4044bc <__aeabi_d2iz+0x30>
  404498:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40449c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4044a0:	d912      	bls.n	4044c8 <__aeabi_d2iz+0x3c>
  4044a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4044a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4044aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4044ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4044b2:	fa23 f002 	lsr.w	r0, r3, r2
  4044b6:	bf18      	it	ne
  4044b8:	4240      	negne	r0, r0
  4044ba:	4770      	bx	lr
  4044bc:	f04f 0000 	mov.w	r0, #0
  4044c0:	4770      	bx	lr
  4044c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4044c6:	d105      	bne.n	4044d4 <__aeabi_d2iz+0x48>
  4044c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4044cc:	bf08      	it	eq
  4044ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4044d2:	4770      	bx	lr
  4044d4:	f04f 0000 	mov.w	r0, #0
  4044d8:	4770      	bx	lr
  4044da:	bf00      	nop

004044dc <__aeabi_d2f>:
  4044dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4044e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4044e4:	bf24      	itt	cs
  4044e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4044ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4044ee:	d90d      	bls.n	40450c <__aeabi_d2f+0x30>
  4044f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4044f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4044f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4044fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  404500:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404504:	bf08      	it	eq
  404506:	f020 0001 	biceq.w	r0, r0, #1
  40450a:	4770      	bx	lr
  40450c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  404510:	d121      	bne.n	404556 <__aeabi_d2f+0x7a>
  404512:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  404516:	bfbc      	itt	lt
  404518:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40451c:	4770      	bxlt	lr
  40451e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404522:	ea4f 5252 	mov.w	r2, r2, lsr #21
  404526:	f1c2 0218 	rsb	r2, r2, #24
  40452a:	f1c2 0c20 	rsb	ip, r2, #32
  40452e:	fa10 f30c 	lsls.w	r3, r0, ip
  404532:	fa20 f002 	lsr.w	r0, r0, r2
  404536:	bf18      	it	ne
  404538:	f040 0001 	orrne.w	r0, r0, #1
  40453c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404540:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404544:	fa03 fc0c 	lsl.w	ip, r3, ip
  404548:	ea40 000c 	orr.w	r0, r0, ip
  40454c:	fa23 f302 	lsr.w	r3, r3, r2
  404550:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404554:	e7cc      	b.n	4044f0 <__aeabi_d2f+0x14>
  404556:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40455a:	d107      	bne.n	40456c <__aeabi_d2f+0x90>
  40455c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  404560:	bf1e      	ittt	ne
  404562:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  404566:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40456a:	4770      	bxne	lr
  40456c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  404570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404578:	4770      	bx	lr
  40457a:	bf00      	nop

0040457c <__aeabi_frsub>:
  40457c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  404580:	e002      	b.n	404588 <__addsf3>
  404582:	bf00      	nop

00404584 <__aeabi_fsub>:
  404584:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00404588 <__addsf3>:
  404588:	0042      	lsls	r2, r0, #1
  40458a:	bf1f      	itttt	ne
  40458c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  404590:	ea92 0f03 	teqne	r2, r3
  404594:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  404598:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40459c:	d06a      	beq.n	404674 <__addsf3+0xec>
  40459e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4045a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4045a6:	bfc1      	itttt	gt
  4045a8:	18d2      	addgt	r2, r2, r3
  4045aa:	4041      	eorgt	r1, r0
  4045ac:	4048      	eorgt	r0, r1
  4045ae:	4041      	eorgt	r1, r0
  4045b0:	bfb8      	it	lt
  4045b2:	425b      	neglt	r3, r3
  4045b4:	2b19      	cmp	r3, #25
  4045b6:	bf88      	it	hi
  4045b8:	4770      	bxhi	lr
  4045ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4045be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4045c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4045c6:	bf18      	it	ne
  4045c8:	4240      	negne	r0, r0
  4045ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4045ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4045d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4045d6:	bf18      	it	ne
  4045d8:	4249      	negne	r1, r1
  4045da:	ea92 0f03 	teq	r2, r3
  4045de:	d03f      	beq.n	404660 <__addsf3+0xd8>
  4045e0:	f1a2 0201 	sub.w	r2, r2, #1
  4045e4:	fa41 fc03 	asr.w	ip, r1, r3
  4045e8:	eb10 000c 	adds.w	r0, r0, ip
  4045ec:	f1c3 0320 	rsb	r3, r3, #32
  4045f0:	fa01 f103 	lsl.w	r1, r1, r3
  4045f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4045f8:	d502      	bpl.n	404600 <__addsf3+0x78>
  4045fa:	4249      	negs	r1, r1
  4045fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  404600:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  404604:	d313      	bcc.n	40462e <__addsf3+0xa6>
  404606:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40460a:	d306      	bcc.n	40461a <__addsf3+0x92>
  40460c:	0840      	lsrs	r0, r0, #1
  40460e:	ea4f 0131 	mov.w	r1, r1, rrx
  404612:	f102 0201 	add.w	r2, r2, #1
  404616:	2afe      	cmp	r2, #254	; 0xfe
  404618:	d251      	bcs.n	4046be <__addsf3+0x136>
  40461a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40461e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404622:	bf08      	it	eq
  404624:	f020 0001 	biceq.w	r0, r0, #1
  404628:	ea40 0003 	orr.w	r0, r0, r3
  40462c:	4770      	bx	lr
  40462e:	0049      	lsls	r1, r1, #1
  404630:	eb40 0000 	adc.w	r0, r0, r0
  404634:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  404638:	f1a2 0201 	sub.w	r2, r2, #1
  40463c:	d1ed      	bne.n	40461a <__addsf3+0x92>
  40463e:	fab0 fc80 	clz	ip, r0
  404642:	f1ac 0c08 	sub.w	ip, ip, #8
  404646:	ebb2 020c 	subs.w	r2, r2, ip
  40464a:	fa00 f00c 	lsl.w	r0, r0, ip
  40464e:	bfaa      	itet	ge
  404650:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  404654:	4252      	neglt	r2, r2
  404656:	4318      	orrge	r0, r3
  404658:	bfbc      	itt	lt
  40465a:	40d0      	lsrlt	r0, r2
  40465c:	4318      	orrlt	r0, r3
  40465e:	4770      	bx	lr
  404660:	f092 0f00 	teq	r2, #0
  404664:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  404668:	bf06      	itte	eq
  40466a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40466e:	3201      	addeq	r2, #1
  404670:	3b01      	subne	r3, #1
  404672:	e7b5      	b.n	4045e0 <__addsf3+0x58>
  404674:	ea4f 0341 	mov.w	r3, r1, lsl #1
  404678:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40467c:	bf18      	it	ne
  40467e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404682:	d021      	beq.n	4046c8 <__addsf3+0x140>
  404684:	ea92 0f03 	teq	r2, r3
  404688:	d004      	beq.n	404694 <__addsf3+0x10c>
  40468a:	f092 0f00 	teq	r2, #0
  40468e:	bf08      	it	eq
  404690:	4608      	moveq	r0, r1
  404692:	4770      	bx	lr
  404694:	ea90 0f01 	teq	r0, r1
  404698:	bf1c      	itt	ne
  40469a:	2000      	movne	r0, #0
  40469c:	4770      	bxne	lr
  40469e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4046a2:	d104      	bne.n	4046ae <__addsf3+0x126>
  4046a4:	0040      	lsls	r0, r0, #1
  4046a6:	bf28      	it	cs
  4046a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4046ac:	4770      	bx	lr
  4046ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4046b2:	bf3c      	itt	cc
  4046b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4046b8:	4770      	bxcc	lr
  4046ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4046be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  4046c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4046c6:	4770      	bx	lr
  4046c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4046cc:	bf16      	itet	ne
  4046ce:	4608      	movne	r0, r1
  4046d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4046d4:	4601      	movne	r1, r0
  4046d6:	0242      	lsls	r2, r0, #9
  4046d8:	bf06      	itte	eq
  4046da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4046de:	ea90 0f01 	teqeq	r0, r1
  4046e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4046e6:	4770      	bx	lr

004046e8 <__aeabi_ui2f>:
  4046e8:	f04f 0300 	mov.w	r3, #0
  4046ec:	e004      	b.n	4046f8 <__aeabi_i2f+0x8>
  4046ee:	bf00      	nop

004046f0 <__aeabi_i2f>:
  4046f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4046f4:	bf48      	it	mi
  4046f6:	4240      	negmi	r0, r0
  4046f8:	ea5f 0c00 	movs.w	ip, r0
  4046fc:	bf08      	it	eq
  4046fe:	4770      	bxeq	lr
  404700:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  404704:	4601      	mov	r1, r0
  404706:	f04f 0000 	mov.w	r0, #0
  40470a:	e01c      	b.n	404746 <__aeabi_l2f+0x2a>

0040470c <__aeabi_ul2f>:
  40470c:	ea50 0201 	orrs.w	r2, r0, r1
  404710:	bf08      	it	eq
  404712:	4770      	bxeq	lr
  404714:	f04f 0300 	mov.w	r3, #0
  404718:	e00a      	b.n	404730 <__aeabi_l2f+0x14>
  40471a:	bf00      	nop

0040471c <__aeabi_l2f>:
  40471c:	ea50 0201 	orrs.w	r2, r0, r1
  404720:	bf08      	it	eq
  404722:	4770      	bxeq	lr
  404724:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  404728:	d502      	bpl.n	404730 <__aeabi_l2f+0x14>
  40472a:	4240      	negs	r0, r0
  40472c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404730:	ea5f 0c01 	movs.w	ip, r1
  404734:	bf02      	ittt	eq
  404736:	4684      	moveq	ip, r0
  404738:	4601      	moveq	r1, r0
  40473a:	2000      	moveq	r0, #0
  40473c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  404740:	bf08      	it	eq
  404742:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  404746:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40474a:	fabc f28c 	clz	r2, ip
  40474e:	3a08      	subs	r2, #8
  404750:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  404754:	db10      	blt.n	404778 <__aeabi_l2f+0x5c>
  404756:	fa01 fc02 	lsl.w	ip, r1, r2
  40475a:	4463      	add	r3, ip
  40475c:	fa00 fc02 	lsl.w	ip, r0, r2
  404760:	f1c2 0220 	rsb	r2, r2, #32
  404764:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404768:	fa20 f202 	lsr.w	r2, r0, r2
  40476c:	eb43 0002 	adc.w	r0, r3, r2
  404770:	bf08      	it	eq
  404772:	f020 0001 	biceq.w	r0, r0, #1
  404776:	4770      	bx	lr
  404778:	f102 0220 	add.w	r2, r2, #32
  40477c:	fa01 fc02 	lsl.w	ip, r1, r2
  404780:	f1c2 0220 	rsb	r2, r2, #32
  404784:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  404788:	fa21 f202 	lsr.w	r2, r1, r2
  40478c:	eb43 0002 	adc.w	r0, r3, r2
  404790:	bf08      	it	eq
  404792:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404796:	4770      	bx	lr

00404798 <__aeabi_fmul>:
  404798:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40479c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4047a0:	bf1e      	ittt	ne
  4047a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4047a6:	ea92 0f0c 	teqne	r2, ip
  4047aa:	ea93 0f0c 	teqne	r3, ip
  4047ae:	d06f      	beq.n	404890 <__aeabi_fmul+0xf8>
  4047b0:	441a      	add	r2, r3
  4047b2:	ea80 0c01 	eor.w	ip, r0, r1
  4047b6:	0240      	lsls	r0, r0, #9
  4047b8:	bf18      	it	ne
  4047ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4047be:	d01e      	beq.n	4047fe <__aeabi_fmul+0x66>
  4047c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4047c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4047c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4047cc:	fba0 3101 	umull	r3, r1, r0, r1
  4047d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4047d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4047d8:	bf3e      	ittt	cc
  4047da:	0049      	lslcc	r1, r1, #1
  4047dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4047e0:	005b      	lslcc	r3, r3, #1
  4047e2:	ea40 0001 	orr.w	r0, r0, r1
  4047e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4047ea:	2afd      	cmp	r2, #253	; 0xfd
  4047ec:	d81d      	bhi.n	40482a <__aeabi_fmul+0x92>
  4047ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4047f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4047f6:	bf08      	it	eq
  4047f8:	f020 0001 	biceq.w	r0, r0, #1
  4047fc:	4770      	bx	lr
  4047fe:	f090 0f00 	teq	r0, #0
  404802:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  404806:	bf08      	it	eq
  404808:	0249      	lsleq	r1, r1, #9
  40480a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40480e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  404812:	3a7f      	subs	r2, #127	; 0x7f
  404814:	bfc2      	ittt	gt
  404816:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40481a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40481e:	4770      	bxgt	lr
  404820:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404824:	f04f 0300 	mov.w	r3, #0
  404828:	3a01      	subs	r2, #1
  40482a:	dc5d      	bgt.n	4048e8 <__aeabi_fmul+0x150>
  40482c:	f112 0f19 	cmn.w	r2, #25
  404830:	bfdc      	itt	le
  404832:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  404836:	4770      	bxle	lr
  404838:	f1c2 0200 	rsb	r2, r2, #0
  40483c:	0041      	lsls	r1, r0, #1
  40483e:	fa21 f102 	lsr.w	r1, r1, r2
  404842:	f1c2 0220 	rsb	r2, r2, #32
  404846:	fa00 fc02 	lsl.w	ip, r0, r2
  40484a:	ea5f 0031 	movs.w	r0, r1, rrx
  40484e:	f140 0000 	adc.w	r0, r0, #0
  404852:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  404856:	bf08      	it	eq
  404858:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40485c:	4770      	bx	lr
  40485e:	f092 0f00 	teq	r2, #0
  404862:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  404866:	bf02      	ittt	eq
  404868:	0040      	lsleq	r0, r0, #1
  40486a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40486e:	3a01      	subeq	r2, #1
  404870:	d0f9      	beq.n	404866 <__aeabi_fmul+0xce>
  404872:	ea40 000c 	orr.w	r0, r0, ip
  404876:	f093 0f00 	teq	r3, #0
  40487a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40487e:	bf02      	ittt	eq
  404880:	0049      	lsleq	r1, r1, #1
  404882:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  404886:	3b01      	subeq	r3, #1
  404888:	d0f9      	beq.n	40487e <__aeabi_fmul+0xe6>
  40488a:	ea41 010c 	orr.w	r1, r1, ip
  40488e:	e78f      	b.n	4047b0 <__aeabi_fmul+0x18>
  404890:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404894:	ea92 0f0c 	teq	r2, ip
  404898:	bf18      	it	ne
  40489a:	ea93 0f0c 	teqne	r3, ip
  40489e:	d00a      	beq.n	4048b6 <__aeabi_fmul+0x11e>
  4048a0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4048a4:	bf18      	it	ne
  4048a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4048aa:	d1d8      	bne.n	40485e <__aeabi_fmul+0xc6>
  4048ac:	ea80 0001 	eor.w	r0, r0, r1
  4048b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4048b4:	4770      	bx	lr
  4048b6:	f090 0f00 	teq	r0, #0
  4048ba:	bf17      	itett	ne
  4048bc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  4048c0:	4608      	moveq	r0, r1
  4048c2:	f091 0f00 	teqne	r1, #0
  4048c6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  4048ca:	d014      	beq.n	4048f6 <__aeabi_fmul+0x15e>
  4048cc:	ea92 0f0c 	teq	r2, ip
  4048d0:	d101      	bne.n	4048d6 <__aeabi_fmul+0x13e>
  4048d2:	0242      	lsls	r2, r0, #9
  4048d4:	d10f      	bne.n	4048f6 <__aeabi_fmul+0x15e>
  4048d6:	ea93 0f0c 	teq	r3, ip
  4048da:	d103      	bne.n	4048e4 <__aeabi_fmul+0x14c>
  4048dc:	024b      	lsls	r3, r1, #9
  4048de:	bf18      	it	ne
  4048e0:	4608      	movne	r0, r1
  4048e2:	d108      	bne.n	4048f6 <__aeabi_fmul+0x15e>
  4048e4:	ea80 0001 	eor.w	r0, r0, r1
  4048e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4048ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4048f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4048f4:	4770      	bx	lr
  4048f6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4048fa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  4048fe:	4770      	bx	lr

00404900 <__aeabi_fdiv>:
  404900:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404904:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  404908:	bf1e      	ittt	ne
  40490a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40490e:	ea92 0f0c 	teqne	r2, ip
  404912:	ea93 0f0c 	teqne	r3, ip
  404916:	d069      	beq.n	4049ec <__aeabi_fdiv+0xec>
  404918:	eba2 0203 	sub.w	r2, r2, r3
  40491c:	ea80 0c01 	eor.w	ip, r0, r1
  404920:	0249      	lsls	r1, r1, #9
  404922:	ea4f 2040 	mov.w	r0, r0, lsl #9
  404926:	d037      	beq.n	404998 <__aeabi_fdiv+0x98>
  404928:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40492c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  404930:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  404934:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  404938:	428b      	cmp	r3, r1
  40493a:	bf38      	it	cc
  40493c:	005b      	lslcc	r3, r3, #1
  40493e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  404942:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  404946:	428b      	cmp	r3, r1
  404948:	bf24      	itt	cs
  40494a:	1a5b      	subcs	r3, r3, r1
  40494c:	ea40 000c 	orrcs.w	r0, r0, ip
  404950:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  404954:	bf24      	itt	cs
  404956:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40495a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40495e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  404962:	bf24      	itt	cs
  404964:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  404968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40496c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  404970:	bf24      	itt	cs
  404972:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  404976:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40497a:	011b      	lsls	r3, r3, #4
  40497c:	bf18      	it	ne
  40497e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  404982:	d1e0      	bne.n	404946 <__aeabi_fdiv+0x46>
  404984:	2afd      	cmp	r2, #253	; 0xfd
  404986:	f63f af50 	bhi.w	40482a <__aeabi_fmul+0x92>
  40498a:	428b      	cmp	r3, r1
  40498c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404990:	bf08      	it	eq
  404992:	f020 0001 	biceq.w	r0, r0, #1
  404996:	4770      	bx	lr
  404998:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40499c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4049a0:	327f      	adds	r2, #127	; 0x7f
  4049a2:	bfc2      	ittt	gt
  4049a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4049a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4049ac:	4770      	bxgt	lr
  4049ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4049b2:	f04f 0300 	mov.w	r3, #0
  4049b6:	3a01      	subs	r2, #1
  4049b8:	e737      	b.n	40482a <__aeabi_fmul+0x92>
  4049ba:	f092 0f00 	teq	r2, #0
  4049be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4049c2:	bf02      	ittt	eq
  4049c4:	0040      	lsleq	r0, r0, #1
  4049c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4049ca:	3a01      	subeq	r2, #1
  4049cc:	d0f9      	beq.n	4049c2 <__aeabi_fdiv+0xc2>
  4049ce:	ea40 000c 	orr.w	r0, r0, ip
  4049d2:	f093 0f00 	teq	r3, #0
  4049d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4049da:	bf02      	ittt	eq
  4049dc:	0049      	lsleq	r1, r1, #1
  4049de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4049e2:	3b01      	subeq	r3, #1
  4049e4:	d0f9      	beq.n	4049da <__aeabi_fdiv+0xda>
  4049e6:	ea41 010c 	orr.w	r1, r1, ip
  4049ea:	e795      	b.n	404918 <__aeabi_fdiv+0x18>
  4049ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4049f0:	ea92 0f0c 	teq	r2, ip
  4049f4:	d108      	bne.n	404a08 <__aeabi_fdiv+0x108>
  4049f6:	0242      	lsls	r2, r0, #9
  4049f8:	f47f af7d 	bne.w	4048f6 <__aeabi_fmul+0x15e>
  4049fc:	ea93 0f0c 	teq	r3, ip
  404a00:	f47f af70 	bne.w	4048e4 <__aeabi_fmul+0x14c>
  404a04:	4608      	mov	r0, r1
  404a06:	e776      	b.n	4048f6 <__aeabi_fmul+0x15e>
  404a08:	ea93 0f0c 	teq	r3, ip
  404a0c:	d104      	bne.n	404a18 <__aeabi_fdiv+0x118>
  404a0e:	024b      	lsls	r3, r1, #9
  404a10:	f43f af4c 	beq.w	4048ac <__aeabi_fmul+0x114>
  404a14:	4608      	mov	r0, r1
  404a16:	e76e      	b.n	4048f6 <__aeabi_fmul+0x15e>
  404a18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  404a1c:	bf18      	it	ne
  404a1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  404a22:	d1ca      	bne.n	4049ba <__aeabi_fdiv+0xba>
  404a24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  404a28:	f47f af5c 	bne.w	4048e4 <__aeabi_fmul+0x14c>
  404a2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  404a30:	f47f af3c 	bne.w	4048ac <__aeabi_fmul+0x114>
  404a34:	e75f      	b.n	4048f6 <__aeabi_fmul+0x15e>
  404a36:	bf00      	nop
  404a38:	0a0d0a0d 	.word	0x0a0d0a0d
  404a3c:	346d6173 	.word	0x346d6173
  404a40:	63323364 	.word	0x63323364
  404a44:	756d6920 	.word	0x756d6920
  404a48:	6d656420 	.word	0x6d656420
  404a4c:	2e2e2e6f 	.word	0x2e2e2e6f
  404a50:	00000a0d 	.word	0x00000a0d
  404a54:	0000002e 	.word	0x0000002e
  404a58:	706d6574 	.word	0x706d6574
  404a5c:	74617265 	.word	0x74617265
  404a60:	3a657275 	.word	0x3a657275
  404a64:	0d662520 	.word	0x0d662520
  404a68:	0000000a 	.word	0x0000000a
  404a6c:	636f6c63 	.word	0x636f6c63
  404a70:	6f735f6b 	.word	0x6f735f6b
  404a74:	65637275 	.word	0x65637275
  404a78:	6425203a 	.word	0x6425203a
  404a7c:	00000a0d 	.word	0x00000a0d
  404a80:	5f756d69 	.word	0x5f756d69
  404a84:	6f727967 	.word	0x6f727967
  404a88:	6163735f 	.word	0x6163735f
  404a8c:	203a656c 	.word	0x203a656c
  404a90:	0a0d6425 	.word	0x0a0d6425
  404a94:	00000000 	.word	0x00000000
  404a98:	5f756d69 	.word	0x5f756d69
  404a9c:	65636361 	.word	0x65636361
  404aa0:	61725f6c 	.word	0x61725f6c
  404aa4:	3a65676e 	.word	0x3a65676e
  404aa8:	0d642520 	.word	0x0d642520
  404aac:	0000000a 	.word	0x0000000a
  404ab0:	5f756d69 	.word	0x5f756d69
  404ab4:	65656c73 	.word	0x65656c73
  404ab8:	6e655f70 	.word	0x6e655f70
  404abc:	656c6261 	.word	0x656c6261
  404ac0:	25203a64 	.word	0x25203a64
  404ac4:	000a0d64 	.word	0x000a0d64
  404ac8:	74697277 	.word	0x74697277
  404acc:	65725f65 	.word	0x65725f65
  404ad0:	74736967 	.word	0x74736967
  404ad4:	203a7265 	.word	0x203a7265
  404ad8:	63637573 	.word	0x63637573
  404adc:	0d737365 	.word	0x0d737365
  404ae0:	0000000a 	.word	0x0000000a
  404ae4:	5f697774 	.word	0x5f697774
  404ae8:	7473616d 	.word	0x7473616d
  404aec:	695f7265 	.word	0x695f7265
  404af0:	3a74696e 	.word	0x3a74696e
  404af4:	69616620 	.word	0x69616620
  404af8:	0d64656c 	.word	0x0d64656c
  404afc:	0000000a 	.word	0x0000000a
  404b00:	5f697774 	.word	0x5f697774
  404b04:	7473616d 	.word	0x7473616d
  404b08:	695f7265 	.word	0x695f7265
  404b0c:	3a74696e 	.word	0x3a74696e
  404b10:	63757320 	.word	0x63757320
  404b14:	73736563 	.word	0x73736563
  404b18:	00000a0d 	.word	0x00000a0d
  404b1c:	5f697774 	.word	0x5f697774
  404b20:	626f7270 	.word	0x626f7270
  404b24:	66203a65 	.word	0x66203a65
  404b28:	656c6961 	.word	0x656c6961
  404b2c:	000a0d64 	.word	0x000a0d64
  404b30:	5f697774 	.word	0x5f697774
  404b34:	626f7270 	.word	0x626f7270
  404b38:	73203a65 	.word	0x73203a65
  404b3c:	65636375 	.word	0x65636375
  404b40:	0a0d7373 	.word	0x0a0d7373
  404b44:	00000000 	.word	0x00000000
  404b48:	5f6f6877 	.word	0x5f6f6877
  404b4c:	695f6d61 	.word	0x695f6d61
  404b50:	7830203a 	.word	0x7830203a
  404b54:	0d783125 	.word	0x0d783125
  404b58:	0000000a 	.word	0x0000000a
  404b5c:	5f6f6877 	.word	0x5f6f6877
  404b60:	695f6d61 	.word	0x695f6d61
  404b64:	7573203a 	.word	0x7573203a
  404b68:	73656363 	.word	0x73656363
  404b6c:	000a0d73 	.word	0x000a0d73

00404b70 <_global_impure_ptr>:
  404b70:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  404b80:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  404b90:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  404ba0:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  404bb0:	4e614e00 00000000                       .NaN....

00404bb8 <__sf_fake_stdin>:
	...

00404bd8 <__sf_fake_stdout>:
	...

00404bf8 <__sf_fake_stderr>:
	...

00404c18 <__mprec_tens>:
  404c18:	00000000 3ff00000 00000000 40240000     .......?......$@
  404c28:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  404c38:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  404c48:	00000000 412e8480 00000000 416312d0     .......A......cA
  404c58:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  404c68:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  404c78:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  404c88:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  404c98:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  404ca8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  404cb8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  404cc8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  404cd8:	79d99db4 44ea7843                       ...yCx.D

00404ce0 <__mprec_bigtens>:
  404ce0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  404cf0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  404d00:	7f73bf3c 75154fdd                       <.s..O.u

00404d08 <p05.6097>:
  404d08:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  404d18:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  404d28:	5849534f 00002e00                                OSIX...

00404d2f <_ctype_>:
  404d2f:	20202000 20202020 28282020 20282828     .         ((((( 
  404d3f:	20202020 20202020 20202020 20202020                     
  404d4f:	10108820 10101010 10101010 10101010      ...............
  404d5f:	04040410 04040404 10040404 10101010     ................
  404d6f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404d7f:	01010101 01010101 01010101 10101010     ................
  404d8f:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404d9f:	02020202 02020202 02020202 10101010     ................
  404daf:	00000020 00000000 00000000 00000000      ...............
	...

00404e30 <_init>:
  404e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e32:	bf00      	nop
  404e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404e36:	bc08      	pop	{r3}
  404e38:	469e      	mov	lr, r3
  404e3a:	4770      	bx	lr

00404e3c <__init_array_start>:
  404e3c:	004000f1 	.word	0x004000f1

00404e40 <_fini>:
  404e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e42:	bf00      	nop
  404e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404e46:	bc08      	pop	{r3}
  404e48:	469e      	mov	lr, r3
  404e4a:	4770      	bx	lr
  404e4c:	0000      	movs	r0, r0
	...

00404e50 <__portable_delay_cycles_veneer>:
  404e50:	f85f f000 	ldr.w	pc, [pc]	; 404e54 <__portable_delay_cycles_veneer+0x4>
  404e54:	20000001 	.word	0x20000001

00404e58 <__fini_array_start>:
  404e58:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 4bb8 0040 4bd8 0040 4bf8 0040     .....K@..K@..K@.
	...

20000070 <_impure_ptr>:
20000070:	0010 2000                                   ... 

20000074 <__global_locale>:
20000074:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000094:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000114:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000134:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000154:	3ba1 0040 3b55 0040 0000 0000 4d2f 0040     .;@.U;@...../M@.
20000164:	4d2d 0040 4d19 0040 4d19 0040 4d19 0040     -M@..M@..M@..M@.
20000174:	4d19 0040 4d19 0040 4d19 0040 4d19 0040     .M@..M@..M@..M@.
20000184:	4d19 0040 4d19 0040 ffff ffff ffff ffff     .M@..M@.........
20000194:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001bc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
