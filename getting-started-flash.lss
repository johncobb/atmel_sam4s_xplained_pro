
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009bc  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  004009bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000094  20000438  00400df4  00020438  2**2
                  ALLOC
  3 .stack        00003004  200004cc  00400e88  00020438  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   000062a2  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001297  00000000  00000000  00026772  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000022ab  00000000  00000000  00027a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000548  00000000  00000000  00029cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004d8  00000000  00000000  0002a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000123c9  00000000  00000000  0002a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007297  00000000  00000000  0003ca9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00050fb9  00000000  00000000  00043d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000be0  00000000  00000000  00094cf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034d0 	.word	0x200034d0
  400004:	004005fd 	.word	0x004005fd
  400008:	004005f9 	.word	0x004005f9
  40000c:	004005f9 	.word	0x004005f9
  400010:	004005f9 	.word	0x004005f9
  400014:	004005f9 	.word	0x004005f9
  400018:	004005f9 	.word	0x004005f9
	...
  40002c:	004005f9 	.word	0x004005f9
  400030:	004005f9 	.word	0x004005f9
  400034:	00000000 	.word	0x00000000
  400038:	004005f9 	.word	0x004005f9
  40003c:	004005f9 	.word	0x004005f9
  400040:	004005f9 	.word	0x004005f9
  400044:	004005f9 	.word	0x004005f9
  400048:	004005f9 	.word	0x004005f9
  40004c:	004005f9 	.word	0x004005f9
  400050:	004005f9 	.word	0x004005f9
  400054:	004005f9 	.word	0x004005f9
  400058:	004005f9 	.word	0x004005f9
  40005c:	004005f9 	.word	0x004005f9
  400060:	004005f9 	.word	0x004005f9
  400064:	004005f9 	.word	0x004005f9
  400068:	00000000 	.word	0x00000000
  40006c:	00400481 	.word	0x00400481
  400070:	00400491 	.word	0x00400491
  400074:	004004a1 	.word	0x004004a1
  400078:	004005f9 	.word	0x004005f9
  40007c:	004005f9 	.word	0x004005f9
	...
  400088:	004005f9 	.word	0x004005f9
  40008c:	004005f9 	.word	0x004005f9
  400090:	004005f9 	.word	0x004005f9
  400094:	004005f9 	.word	0x004005f9
  400098:	004005f9 	.word	0x004005f9
  40009c:	004005f9 	.word	0x004005f9
  4000a0:	004005f9 	.word	0x004005f9
  4000a4:	004005f9 	.word	0x004005f9
  4000a8:	004005f9 	.word	0x004005f9
  4000ac:	004005f9 	.word	0x004005f9
  4000b0:	004005f9 	.word	0x004005f9
  4000b4:	004005f9 	.word	0x004005f9
  4000b8:	004005f9 	.word	0x004005f9
  4000bc:	004005f9 	.word	0x004005f9
  4000c0:	004005f9 	.word	0x004005f9
  4000c4:	004005f9 	.word	0x004005f9
  4000c8:	004005f9 	.word	0x004005f9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004009bc 	.word	0x004009bc

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000043c 	.word	0x2000043c
  40011c:	004009bc 	.word	0x004009bc
  400120:	004009bc 	.word	0x004009bc
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f000 fb44 	bl	4007b8 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f000 f9f0 	bl	400518 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f000 fa18 	bl	40056c <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f000 fa1c 	bl	40057c <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f000 fa1f 	bl	40058c <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f000 f9ac 	bl	4004b0 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f000 faa4 	bl	4006a4 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f000 fb2b 	bl	4007b8 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <main>:
#include <asf.h>

int main(void)
{
  400170:	b508      	push	{r3, lr}
    sysclk_init();
  400172:	f7ff ffd9 	bl	400128 <sysclk_init>
    board_init();
  400176:	f000 f819 	bl	4001ac <board_init>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40017a:	4c09      	ldr	r4, [pc, #36]	; (4001a0 <main+0x30>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40017c:	4d09      	ldr	r5, [pc, #36]	; (4001a4 <main+0x34>)
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40017e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    delay_init();


    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  400180:	f013 0f04 	tst.w	r3, #4
  400184:	d1fb      	bne.n	40017e <main+0xe>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400186:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  400188:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  40018c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  400190:	bf14      	ite	ne
  400192:	636b      	strne	r3, [r5, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400194:	632b      	streq	r3, [r5, #48]	; 0x30
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(100); 
  400196:	4804      	ldr	r0, [pc, #16]	; (4001a8 <main+0x38>)
  400198:	f000 fc0a 	bl	4009b0 <__portable_delay_cycles_veneer>
  40019c:	e7ef      	b.n	40017e <main+0xe>
  40019e:	bf00      	nop
  4001a0:	400e0e00 	.word	0x400e0e00
  4001a4:	400e1200 	.word	0x400e1200
  4001a8:	000d1437 	.word	0x000d1437

004001ac <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4001ac:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4001ae:	4827      	ldr	r0, [pc, #156]	; (40024c <board_init+0xa0>)
  4001b0:	f000 fa1e 	bl	4005f0 <wdt_disable>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001b4:	200b      	movs	r0, #11
  4001b6:	f000 f9f1 	bl	40059c <pmc_enable_periph_clk>
  4001ba:	200c      	movs	r0, #12
  4001bc:	f000 f9ee 	bl	40059c <pmc_enable_periph_clk>
  4001c0:	200d      	movs	r0, #13
  4001c2:	f000 f9eb 	bl	40059c <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001c6:	4b22      	ldr	r3, [pc, #136]	; (400250 <board_init+0xa4>)
  4001c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4001cc:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001ce:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4001d4:	4c1f      	ldr	r4, [pc, #124]	; (400254 <board_init+0xa8>)
  4001d6:	2504      	movs	r5, #4
  4001d8:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001da:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4001de:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4001e0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4001e4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4001e6:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4001e8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4001ec:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4001ee:	f022 0204 	bic.w	r2, r2, #4
  4001f2:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4001f6:	f022 0204 	bic.w	r2, r2, #4
  4001fa:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400200:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400202:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400204:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400208:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40020c:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40020e:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400210:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400214:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400218:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40021a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40021c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400220:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400224:	210c      	movs	r1, #12
  400226:	480c      	ldr	r0, [pc, #48]	; (400258 <board_init+0xac>)
  400228:	f000 f892 	bl	400350 <pio_configure_pin_group>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40022c:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40022e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400232:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400234:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400236:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40023a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40023c:	f023 0304 	bic.w	r3, r3, #4
  400240:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400242:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400244:	f023 0304 	bic.w	r3, r3, #4
  400248:	6763      	str	r3, [r4, #116]	; 0x74
  40024a:	bd38      	pop	{r3, r4, r5, pc}
  40024c:	400e1450 	.word	0x400e1450
  400250:	400e1200 	.word	0x400e1200
  400254:	400e0e00 	.word	0x400e0e00
  400258:	400e1000 	.word	0x400e1000

0040025c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40025c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40025e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400262:	d02f      	beq.n	4002c4 <pio_set_peripheral+0x68>
  400264:	d807      	bhi.n	400276 <pio_set_peripheral+0x1a>
  400266:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40026a:	d014      	beq.n	400296 <pio_set_peripheral+0x3a>
  40026c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400270:	d01e      	beq.n	4002b0 <pio_set_peripheral+0x54>
  400272:	b939      	cbnz	r1, 400284 <pio_set_peripheral+0x28>
  400274:	4770      	bx	lr
  400276:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40027a:	d036      	beq.n	4002ea <pio_set_peripheral+0x8e>
  40027c:	d804      	bhi.n	400288 <pio_set_peripheral+0x2c>
  40027e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400282:	d029      	beq.n	4002d8 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400284:	6042      	str	r2, [r0, #4]
  400286:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400288:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40028c:	d02d      	beq.n	4002ea <pio_set_peripheral+0x8e>
  40028e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400292:	d02a      	beq.n	4002ea <pio_set_peripheral+0x8e>
  400294:	e7f6      	b.n	400284 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400296:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400298:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40029a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40029c:	43d3      	mvns	r3, r2
  40029e:	4021      	ands	r1, r4
  4002a0:	4019      	ands	r1, r3
  4002a2:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002a4:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002a6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4002a8:	4021      	ands	r1, r4
  4002aa:	400b      	ands	r3, r1
  4002ac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002ae:	e01a      	b.n	4002e6 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002b2:	4313      	orrs	r3, r2
  4002b4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002b6:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4002b8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4002ba:	400b      	ands	r3, r1
  4002bc:	ea23 0302 	bic.w	r3, r3, r2
  4002c0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002c2:	e7df      	b.n	400284 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002c4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4002c8:	400b      	ands	r3, r1
  4002ca:	ea23 0302 	bic.w	r3, r3, r2
  4002ce:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002d2:	4313      	orrs	r3, r2
  4002d4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002d6:	e7d5      	b.n	400284 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4002da:	4313      	orrs	r3, r2
  4002dc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4002de:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002e0:	4313      	orrs	r3, r2
  4002e2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002e4:	e7ce      	b.n	400284 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4002e6:	6042      	str	r2, [r0, #4]
}
  4002e8:	bc10      	pop	{r4}
  4002ea:	4770      	bx	lr

004002ec <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4002ec:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4002ee:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4002f2:	bf14      	ite	ne
  4002f4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4002f6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4002f8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4002fc:	bf14      	ite	ne
  4002fe:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400300:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400302:	f012 0f02 	tst.w	r2, #2
  400306:	d002      	beq.n	40030e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400308:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40030c:	e004      	b.n	400318 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40030e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400312:	bf18      	it	ne
  400314:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400318:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40031a:	6001      	str	r1, [r0, #0]
  40031c:	4770      	bx	lr
  40031e:	bf00      	nop

00400320 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400320:	b410      	push	{r4}
  400322:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400324:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400326:	b10c      	cbz	r4, 40032c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400328:	6641      	str	r1, [r0, #100]	; 0x64
  40032a:	e000      	b.n	40032e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40032c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40032e:	b10b      	cbz	r3, 400334 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400330:	6501      	str	r1, [r0, #80]	; 0x50
  400332:	e000      	b.n	400336 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400334:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400336:	b10a      	cbz	r2, 40033c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400338:	6301      	str	r1, [r0, #48]	; 0x30
  40033a:	e000      	b.n	40033e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40033c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40033e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400340:	6001      	str	r1, [r0, #0]
}
  400342:	bc10      	pop	{r4}
  400344:	4770      	bx	lr
  400346:	bf00      	nop

00400348 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400348:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40034a:	4770      	bx	lr

0040034c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40034c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40034e:	4770      	bx	lr

00400350 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400350:	b570      	push	{r4, r5, r6, lr}
  400352:	b082      	sub	sp, #8
  400354:	4605      	mov	r5, r0
  400356:	460e      	mov	r6, r1
  400358:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40035a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40035e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400362:	d038      	beq.n	4003d6 <pio_configure_pin_group+0x86>
  400364:	d809      	bhi.n	40037a <pio_configure_pin_group+0x2a>
  400366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40036a:	d01c      	beq.n	4003a6 <pio_configure_pin_group+0x56>
  40036c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400370:	d025      	beq.n	4003be <pio_configure_pin_group+0x6e>
  400372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400376:	d150      	bne.n	40041a <pio_configure_pin_group+0xca>
  400378:	e009      	b.n	40038e <pio_configure_pin_group+0x3e>
  40037a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40037e:	d03a      	beq.n	4003f6 <pio_configure_pin_group+0xa6>
  400380:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400384:	d037      	beq.n	4003f6 <pio_configure_pin_group+0xa6>
  400386:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40038a:	d030      	beq.n	4003ee <pio_configure_pin_group+0x9e>
  40038c:	e045      	b.n	40041a <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40038e:	460a      	mov	r2, r1
  400390:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400394:	f7ff ff62 	bl	40025c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400398:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40039c:	bf14      	ite	ne
  40039e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003a0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4003a2:	2001      	movs	r0, #1
  4003a4:	e03a      	b.n	40041c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4003a6:	460a      	mov	r2, r1
  4003a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4003ac:	f7ff ff56 	bl	40025c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003b0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4003b4:	bf14      	ite	ne
  4003b6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003b8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4003ba:	2001      	movs	r0, #1
  4003bc:	e02e      	b.n	40041c <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4003be:	460a      	mov	r2, r1
  4003c0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4003c4:	f7ff ff4a 	bl	40025c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003c8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4003cc:	bf14      	ite	ne
  4003ce:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003d0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4003d2:	2001      	movs	r0, #1
  4003d4:	e022      	b.n	40041c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4003d6:	460a      	mov	r2, r1
  4003d8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4003dc:	f7ff ff3e 	bl	40025c <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003e0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4003e4:	bf14      	ite	ne
  4003e6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003e8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4003ea:	2001      	movs	r0, #1
  4003ec:	e016      	b.n	40041c <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4003ee:	f7ff ff7d 	bl	4002ec <pio_set_input>

	default:
		return 0;
	}

	return 1;
  4003f2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4003f4:	e012      	b.n	40041c <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4003f6:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  4003fa:	f004 0301 	and.w	r3, r4, #1
  4003fe:	9300      	str	r3, [sp, #0]
  400400:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400404:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400408:	bf14      	ite	ne
  40040a:	2200      	movne	r2, #0
  40040c:	2201      	moveq	r2, #1
  40040e:	4631      	mov	r1, r6
  400410:	4628      	mov	r0, r5
  400412:	f7ff ff85 	bl	400320 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  400416:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400418:	e000      	b.n	40041c <pio_configure_pin_group+0xcc>

	default:
		return 0;
  40041a:	2000      	movs	r0, #0
	}

	return 1;
}
  40041c:	b002      	add	sp, #8
  40041e:	bd70      	pop	{r4, r5, r6, pc}

00400420 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400424:	4681      	mov	r9, r0
  400426:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400428:	f7ff ff8e 	bl	400348 <pio_get_interrupt_status>
  40042c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40042e:	4648      	mov	r0, r9
  400430:	f7ff ff8c 	bl	40034c <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  400434:	4005      	ands	r5, r0
  400436:	d013      	beq.n	400460 <pio_handler_process+0x40>
  400438:	4c0e      	ldr	r4, [pc, #56]	; (400474 <pio_handler_process+0x54>)
  40043a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40043e:	6823      	ldr	r3, [r4, #0]
  400440:	4543      	cmp	r3, r8
  400442:	d108      	bne.n	400456 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400444:	6861      	ldr	r1, [r4, #4]
  400446:	4229      	tst	r1, r5
  400448:	d005      	beq.n	400456 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40044a:	68e3      	ldr	r3, [r4, #12]
  40044c:	4640      	mov	r0, r8
  40044e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400450:	6863      	ldr	r3, [r4, #4]
  400452:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400456:	42b4      	cmp	r4, r6
  400458:	d002      	beq.n	400460 <pio_handler_process+0x40>
  40045a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40045c:	2d00      	cmp	r5, #0
  40045e:	d1ee      	bne.n	40043e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400460:	4b05      	ldr	r3, [pc, #20]	; (400478 <pio_handler_process+0x58>)
  400462:	681b      	ldr	r3, [r3, #0]
  400464:	b123      	cbz	r3, 400470 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400466:	4b05      	ldr	r3, [pc, #20]	; (40047c <pio_handler_process+0x5c>)
  400468:	681b      	ldr	r3, [r3, #0]
  40046a:	b10b      	cbz	r3, 400470 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40046c:	4648      	mov	r0, r9
  40046e:	4798      	blx	r3
  400470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400474:	20000458 	.word	0x20000458
  400478:	200004c8 	.word	0x200004c8
  40047c:	20000454 	.word	0x20000454

00400480 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400480:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400482:	210b      	movs	r1, #11
  400484:	4801      	ldr	r0, [pc, #4]	; (40048c <PIOA_Handler+0xc>)
  400486:	f7ff ffcb 	bl	400420 <pio_handler_process>
  40048a:	bd08      	pop	{r3, pc}
  40048c:	400e0e00 	.word	0x400e0e00

00400490 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400490:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400492:	210c      	movs	r1, #12
  400494:	4801      	ldr	r0, [pc, #4]	; (40049c <PIOB_Handler+0xc>)
  400496:	f7ff ffc3 	bl	400420 <pio_handler_process>
  40049a:	bd08      	pop	{r3, pc}
  40049c:	400e1000 	.word	0x400e1000

004004a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4004a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4004a2:	210d      	movs	r1, #13
  4004a4:	4801      	ldr	r0, [pc, #4]	; (4004ac <PIOC_Handler+0xc>)
  4004a6:	f7ff ffbb 	bl	400420 <pio_handler_process>
  4004aa:	bd08      	pop	{r3, pc}
  4004ac:	400e1200 	.word	0x400e1200

004004b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4004b0:	4a18      	ldr	r2, [pc, #96]	; (400514 <pmc_switch_mck_to_pllack+0x64>)
  4004b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4004b8:	4318      	orrs	r0, r3
  4004ba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004be:	f013 0f08 	tst.w	r3, #8
  4004c2:	d003      	beq.n	4004cc <pmc_switch_mck_to_pllack+0x1c>
  4004c4:	e009      	b.n	4004da <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004c6:	3b01      	subs	r3, #1
  4004c8:	d103      	bne.n	4004d2 <pmc_switch_mck_to_pllack+0x22>
  4004ca:	e01e      	b.n	40050a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004d0:	4910      	ldr	r1, [pc, #64]	; (400514 <pmc_switch_mck_to_pllack+0x64>)
  4004d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004d4:	f012 0f08 	tst.w	r2, #8
  4004d8:	d0f5      	beq.n	4004c6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4004da:	4a0e      	ldr	r2, [pc, #56]	; (400514 <pmc_switch_mck_to_pllack+0x64>)
  4004dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004de:	f023 0303 	bic.w	r3, r3, #3
  4004e2:	f043 0302 	orr.w	r3, r3, #2
  4004e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004e8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4004ea:	f010 0008 	ands.w	r0, r0, #8
  4004ee:	d004      	beq.n	4004fa <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4004f0:	2000      	movs	r0, #0
  4004f2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004f4:	3b01      	subs	r3, #1
  4004f6:	d103      	bne.n	400500 <pmc_switch_mck_to_pllack+0x50>
  4004f8:	e009      	b.n	40050e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004fe:	4905      	ldr	r1, [pc, #20]	; (400514 <pmc_switch_mck_to_pllack+0x64>)
  400500:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400502:	f012 0f08 	tst.w	r2, #8
  400506:	d0f5      	beq.n	4004f4 <pmc_switch_mck_to_pllack+0x44>
  400508:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40050a:	2001      	movs	r0, #1
  40050c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40050e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	400e0400 	.word	0x400e0400

00400518 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400518:	b138      	cbz	r0, 40052a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40051a:	4911      	ldr	r1, [pc, #68]	; (400560 <pmc_switch_mainck_to_xtal+0x48>)
  40051c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40051e:	4a11      	ldr	r2, [pc, #68]	; (400564 <pmc_switch_mainck_to_xtal+0x4c>)
  400520:	401a      	ands	r2, r3
  400522:	4b11      	ldr	r3, [pc, #68]	; (400568 <pmc_switch_mainck_to_xtal+0x50>)
  400524:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400526:	620b      	str	r3, [r1, #32]
  400528:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40052a:	480d      	ldr	r0, [pc, #52]	; (400560 <pmc_switch_mainck_to_xtal+0x48>)
  40052c:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40052e:	0209      	lsls	r1, r1, #8
  400530:	b289      	uxth	r1, r1
  400532:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  400536:	f023 0303 	bic.w	r3, r3, #3
  40053a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40053e:	f043 0301 	orr.w	r3, r3, #1
  400542:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400544:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400546:	4602      	mov	r2, r0
  400548:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40054a:	f013 0f01 	tst.w	r3, #1
  40054e:	d0fb      	beq.n	400548 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400550:	4a03      	ldr	r2, [pc, #12]	; (400560 <pmc_switch_mainck_to_xtal+0x48>)
  400552:	6a13      	ldr	r3, [r2, #32]
  400554:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40055c:	6213      	str	r3, [r2, #32]
  40055e:	4770      	bx	lr
  400560:	400e0400 	.word	0x400e0400
  400564:	fec8fffc 	.word	0xfec8fffc
  400568:	01370002 	.word	0x01370002

0040056c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40056c:	4b02      	ldr	r3, [pc, #8]	; (400578 <pmc_osc_is_ready_mainck+0xc>)
  40056e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400570:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400574:	4770      	bx	lr
  400576:	bf00      	nop
  400578:	400e0400 	.word	0x400e0400

0040057c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40057c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400580:	4b01      	ldr	r3, [pc, #4]	; (400588 <pmc_disable_pllack+0xc>)
  400582:	629a      	str	r2, [r3, #40]	; 0x28
  400584:	4770      	bx	lr
  400586:	bf00      	nop
  400588:	400e0400 	.word	0x400e0400

0040058c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40058c:	4b02      	ldr	r3, [pc, #8]	; (400598 <pmc_is_locked_pllack+0xc>)
  40058e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400590:	f000 0002 	and.w	r0, r0, #2
  400594:	4770      	bx	lr
  400596:	bf00      	nop
  400598:	400e0400 	.word	0x400e0400

0040059c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40059c:	2822      	cmp	r0, #34	; 0x22
  40059e:	d81e      	bhi.n	4005de <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4005a0:	281f      	cmp	r0, #31
  4005a2:	d80c      	bhi.n	4005be <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4005a4:	4b11      	ldr	r3, [pc, #68]	; (4005ec <pmc_enable_periph_clk+0x50>)
  4005a6:	699a      	ldr	r2, [r3, #24]
  4005a8:	2301      	movs	r3, #1
  4005aa:	4083      	lsls	r3, r0
  4005ac:	4393      	bics	r3, r2
  4005ae:	d018      	beq.n	4005e2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4005b0:	2301      	movs	r3, #1
  4005b2:	fa03 f000 	lsl.w	r0, r3, r0
  4005b6:	4b0d      	ldr	r3, [pc, #52]	; (4005ec <pmc_enable_periph_clk+0x50>)
  4005b8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005ba:	2000      	movs	r0, #0
  4005bc:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4005be:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4005c0:	4b0a      	ldr	r3, [pc, #40]	; (4005ec <pmc_enable_periph_clk+0x50>)
  4005c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4005c6:	2301      	movs	r3, #1
  4005c8:	4083      	lsls	r3, r0
  4005ca:	4393      	bics	r3, r2
  4005cc:	d00b      	beq.n	4005e6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4005ce:	2301      	movs	r3, #1
  4005d0:	fa03 f000 	lsl.w	r0, r3, r0
  4005d4:	4b05      	ldr	r3, [pc, #20]	; (4005ec <pmc_enable_periph_clk+0x50>)
  4005d6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4005da:	2000      	movs	r0, #0
  4005dc:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4005de:	2001      	movs	r0, #1
  4005e0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4005e2:	2000      	movs	r0, #0
  4005e4:	4770      	bx	lr
  4005e6:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4005e8:	4770      	bx	lr
  4005ea:	bf00      	nop
  4005ec:	400e0400 	.word	0x400e0400

004005f0 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4005f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4005f4:	6043      	str	r3, [r0, #4]
  4005f6:	4770      	bx	lr

004005f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4005f8:	e7fe      	b.n	4005f8 <Dummy_Handler>
  4005fa:	bf00      	nop

004005fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4005fc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4005fe:	4b20      	ldr	r3, [pc, #128]	; (400680 <Reset_Handler+0x84>)
  400600:	4a20      	ldr	r2, [pc, #128]	; (400684 <Reset_Handler+0x88>)
  400602:	429a      	cmp	r2, r3
  400604:	d912      	bls.n	40062c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400606:	4b20      	ldr	r3, [pc, #128]	; (400688 <Reset_Handler+0x8c>)
  400608:	4a1d      	ldr	r2, [pc, #116]	; (400680 <Reset_Handler+0x84>)
  40060a:	429a      	cmp	r2, r3
  40060c:	d21e      	bcs.n	40064c <Reset_Handler+0x50>
  40060e:	4611      	mov	r1, r2
  400610:	3b01      	subs	r3, #1
  400612:	1a9b      	subs	r3, r3, r2
  400614:	f023 0303 	bic.w	r3, r3, #3
  400618:	3304      	adds	r3, #4
  40061a:	4a1a      	ldr	r2, [pc, #104]	; (400684 <Reset_Handler+0x88>)
  40061c:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  40061e:	f852 0b04 	ldr.w	r0, [r2], #4
  400622:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400626:	429a      	cmp	r2, r3
  400628:	d1f9      	bne.n	40061e <Reset_Handler+0x22>
  40062a:	e00f      	b.n	40064c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40062c:	4b14      	ldr	r3, [pc, #80]	; (400680 <Reset_Handler+0x84>)
  40062e:	4a15      	ldr	r2, [pc, #84]	; (400684 <Reset_Handler+0x88>)
  400630:	429a      	cmp	r2, r3
  400632:	d20b      	bcs.n	40064c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400634:	4b14      	ldr	r3, [pc, #80]	; (400688 <Reset_Handler+0x8c>)
  400636:	4a12      	ldr	r2, [pc, #72]	; (400680 <Reset_Handler+0x84>)
  400638:	1a9a      	subs	r2, r3, r2
  40063a:	4814      	ldr	r0, [pc, #80]	; (40068c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40063c:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40063e:	b12a      	cbz	r2, 40064c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400640:	f851 2904 	ldr.w	r2, [r1], #-4
  400644:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400648:	4281      	cmp	r1, r0
  40064a:	d1f9      	bne.n	400640 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40064c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40064e:	4b10      	ldr	r3, [pc, #64]	; (400690 <Reset_Handler+0x94>)
  400650:	4a10      	ldr	r2, [pc, #64]	; (400694 <Reset_Handler+0x98>)
  400652:	429a      	cmp	r2, r3
  400654:	d20b      	bcs.n	40066e <Reset_Handler+0x72>
  400656:	1d13      	adds	r3, r2, #4
  400658:	4a0f      	ldr	r2, [pc, #60]	; (400698 <Reset_Handler+0x9c>)
  40065a:	1ad2      	subs	r2, r2, r3
  40065c:	f022 0203 	bic.w	r2, r2, #3
  400660:	441a      	add	r2, r3
  400662:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400664:	2100      	movs	r1, #0
  400666:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40066a:	429a      	cmp	r2, r3
  40066c:	d1fb      	bne.n	400666 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  40066e:	4b0b      	ldr	r3, [pc, #44]	; (40069c <Reset_Handler+0xa0>)
  400670:	4a0b      	ldr	r2, [pc, #44]	; (4006a0 <Reset_Handler+0xa4>)
  400672:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400674:	f000 f8ea 	bl	40084c <__libc_init_array>

	/* Branch to main function */
	main();
  400678:	f7ff fd7a 	bl	400170 <main>
  40067c:	e7fe      	b.n	40067c <Reset_Handler+0x80>
  40067e:	bf00      	nop
  400680:	20000000 	.word	0x20000000
  400684:	004009bc 	.word	0x004009bc
  400688:	20000438 	.word	0x20000438
  40068c:	004009b8 	.word	0x004009b8
  400690:	200004cc 	.word	0x200004cc
  400694:	20000438 	.word	0x20000438
  400698:	200004cf 	.word	0x200004cf
  40069c:	e000ed00 	.word	0xe000ed00
  4006a0:	00400000 	.word	0x00400000

004006a4 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4006a4:	4b3d      	ldr	r3, [pc, #244]	; (40079c <SystemCoreClockUpdate+0xf8>)
  4006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006a8:	f003 0303 	and.w	r3, r3, #3
  4006ac:	2b03      	cmp	r3, #3
  4006ae:	d85d      	bhi.n	40076c <SystemCoreClockUpdate+0xc8>
  4006b0:	e8df f003 	tbb	[pc, r3]
  4006b4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4006b8:	4b39      	ldr	r3, [pc, #228]	; (4007a0 <SystemCoreClockUpdate+0xfc>)
  4006ba:	695b      	ldr	r3, [r3, #20]
  4006bc:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4006c0:	bf14      	ite	ne
  4006c2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4006c6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4006ca:	4b36      	ldr	r3, [pc, #216]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  4006cc:	601a      	str	r2, [r3, #0]
  4006ce:	e04d      	b.n	40076c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4006d0:	4b32      	ldr	r3, [pc, #200]	; (40079c <SystemCoreClockUpdate+0xf8>)
  4006d2:	6a1b      	ldr	r3, [r3, #32]
  4006d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4006d8:	d003      	beq.n	4006e2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4006da:	4a33      	ldr	r2, [pc, #204]	; (4007a8 <SystemCoreClockUpdate+0x104>)
  4006dc:	4b31      	ldr	r3, [pc, #196]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  4006de:	601a      	str	r2, [r3, #0]
  4006e0:	e044      	b.n	40076c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4006e2:	4a32      	ldr	r2, [pc, #200]	; (4007ac <SystemCoreClockUpdate+0x108>)
  4006e4:	4b2f      	ldr	r3, [pc, #188]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  4006e6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4006e8:	4b2c      	ldr	r3, [pc, #176]	; (40079c <SystemCoreClockUpdate+0xf8>)
  4006ea:	6a1b      	ldr	r3, [r3, #32]
  4006ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006f0:	2b10      	cmp	r3, #16
  4006f2:	d002      	beq.n	4006fa <SystemCoreClockUpdate+0x56>
  4006f4:	2b20      	cmp	r3, #32
  4006f6:	d004      	beq.n	400702 <SystemCoreClockUpdate+0x5e>
  4006f8:	e038      	b.n	40076c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4006fa:	4a2d      	ldr	r2, [pc, #180]	; (4007b0 <SystemCoreClockUpdate+0x10c>)
  4006fc:	4b29      	ldr	r3, [pc, #164]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  4006fe:	601a      	str	r2, [r3, #0]
			break;
  400700:	e034      	b.n	40076c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400702:	4a29      	ldr	r2, [pc, #164]	; (4007a8 <SystemCoreClockUpdate+0x104>)
  400704:	4b27      	ldr	r3, [pc, #156]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  400706:	601a      	str	r2, [r3, #0]
			break;
  400708:	e030      	b.n	40076c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40070a:	4b24      	ldr	r3, [pc, #144]	; (40079c <SystemCoreClockUpdate+0xf8>)
  40070c:	6a1b      	ldr	r3, [r3, #32]
  40070e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400712:	d003      	beq.n	40071c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400714:	4a24      	ldr	r2, [pc, #144]	; (4007a8 <SystemCoreClockUpdate+0x104>)
  400716:	4b23      	ldr	r3, [pc, #140]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  400718:	601a      	str	r2, [r3, #0]
  40071a:	e012      	b.n	400742 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40071c:	4a23      	ldr	r2, [pc, #140]	; (4007ac <SystemCoreClockUpdate+0x108>)
  40071e:	4b21      	ldr	r3, [pc, #132]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  400720:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400722:	4b1e      	ldr	r3, [pc, #120]	; (40079c <SystemCoreClockUpdate+0xf8>)
  400724:	6a1b      	ldr	r3, [r3, #32]
  400726:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40072a:	2b10      	cmp	r3, #16
  40072c:	d002      	beq.n	400734 <SystemCoreClockUpdate+0x90>
  40072e:	2b20      	cmp	r3, #32
  400730:	d004      	beq.n	40073c <SystemCoreClockUpdate+0x98>
  400732:	e006      	b.n	400742 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400734:	4a1e      	ldr	r2, [pc, #120]	; (4007b0 <SystemCoreClockUpdate+0x10c>)
  400736:	4b1b      	ldr	r3, [pc, #108]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  400738:	601a      	str	r2, [r3, #0]
					break;
  40073a:	e002      	b.n	400742 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40073c:	4a1a      	ldr	r2, [pc, #104]	; (4007a8 <SystemCoreClockUpdate+0x104>)
  40073e:	4b19      	ldr	r3, [pc, #100]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  400740:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400742:	4b16      	ldr	r3, [pc, #88]	; (40079c <SystemCoreClockUpdate+0xf8>)
  400744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400746:	f003 0303 	and.w	r3, r3, #3
  40074a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40074c:	4a13      	ldr	r2, [pc, #76]	; (40079c <SystemCoreClockUpdate+0xf8>)
  40074e:	bf07      	ittee	eq
  400750:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400752:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400754:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400756:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400758:	4812      	ldr	r0, [pc, #72]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  40075a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40075e:	6803      	ldr	r3, [r0, #0]
  400760:	fb01 3303 	mla	r3, r1, r3, r3
  400764:	b2d2      	uxtb	r2, r2
  400766:	fbb3 f3f2 	udiv	r3, r3, r2
  40076a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40076c:	4b0b      	ldr	r3, [pc, #44]	; (40079c <SystemCoreClockUpdate+0xf8>)
  40076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400770:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400774:	2b70      	cmp	r3, #112	; 0x70
  400776:	d107      	bne.n	400788 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400778:	4a0a      	ldr	r2, [pc, #40]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  40077a:	6813      	ldr	r3, [r2, #0]
  40077c:	490d      	ldr	r1, [pc, #52]	; (4007b4 <SystemCoreClockUpdate+0x110>)
  40077e:	fba1 1303 	umull	r1, r3, r1, r3
  400782:	085b      	lsrs	r3, r3, #1
  400784:	6013      	str	r3, [r2, #0]
  400786:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400788:	4b04      	ldr	r3, [pc, #16]	; (40079c <SystemCoreClockUpdate+0xf8>)
  40078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40078c:	4905      	ldr	r1, [pc, #20]	; (4007a4 <SystemCoreClockUpdate+0x100>)
  40078e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400792:	680b      	ldr	r3, [r1, #0]
  400794:	40d3      	lsrs	r3, r2
  400796:	600b      	str	r3, [r1, #0]
  400798:	4770      	bx	lr
  40079a:	bf00      	nop
  40079c:	400e0400 	.word	0x400e0400
  4007a0:	400e1410 	.word	0x400e1410
  4007a4:	2000000c 	.word	0x2000000c
  4007a8:	00b71b00 	.word	0x00b71b00
  4007ac:	003d0900 	.word	0x003d0900
  4007b0:	007a1200 	.word	0x007a1200
  4007b4:	aaaaaaab 	.word	0xaaaaaaab

004007b8 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4007b8:	4b1a      	ldr	r3, [pc, #104]	; (400824 <system_init_flash+0x6c>)
  4007ba:	4298      	cmp	r0, r3
  4007bc:	d807      	bhi.n	4007ce <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4007be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4007c2:	4a19      	ldr	r2, [pc, #100]	; (400828 <system_init_flash+0x70>)
  4007c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4007c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4007ca:	6013      	str	r3, [r2, #0]
  4007cc:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4007ce:	4b17      	ldr	r3, [pc, #92]	; (40082c <system_init_flash+0x74>)
  4007d0:	4298      	cmp	r0, r3
  4007d2:	d806      	bhi.n	4007e2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4007d4:	4b16      	ldr	r3, [pc, #88]	; (400830 <system_init_flash+0x78>)
  4007d6:	4a14      	ldr	r2, [pc, #80]	; (400828 <system_init_flash+0x70>)
  4007d8:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4007da:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4007de:	6013      	str	r3, [r2, #0]
  4007e0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4007e2:	4b14      	ldr	r3, [pc, #80]	; (400834 <system_init_flash+0x7c>)
  4007e4:	4298      	cmp	r0, r3
  4007e6:	d806      	bhi.n	4007f6 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4007e8:	4b13      	ldr	r3, [pc, #76]	; (400838 <system_init_flash+0x80>)
  4007ea:	4a0f      	ldr	r2, [pc, #60]	; (400828 <system_init_flash+0x70>)
  4007ec:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4007ee:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4007f2:	6013      	str	r3, [r2, #0]
  4007f4:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4007f6:	4b11      	ldr	r3, [pc, #68]	; (40083c <system_init_flash+0x84>)
  4007f8:	4298      	cmp	r0, r3
  4007fa:	d806      	bhi.n	40080a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4007fc:	4b10      	ldr	r3, [pc, #64]	; (400840 <system_init_flash+0x88>)
  4007fe:	4a0a      	ldr	r2, [pc, #40]	; (400828 <system_init_flash+0x70>)
  400800:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400802:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400806:	6013      	str	r3, [r2, #0]
  400808:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40080a:	4b0e      	ldr	r3, [pc, #56]	; (400844 <system_init_flash+0x8c>)
  40080c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40080e:	bf94      	ite	ls
  400810:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400814:	4b0c      	ldrhi	r3, [pc, #48]	; (400848 <system_init_flash+0x90>)
  400816:	4a04      	ldr	r2, [pc, #16]	; (400828 <system_init_flash+0x70>)
  400818:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40081a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40081e:	6013      	str	r3, [r2, #0]
  400820:	4770      	bx	lr
  400822:	bf00      	nop
  400824:	01312cff 	.word	0x01312cff
  400828:	400e0a00 	.word	0x400e0a00
  40082c:	026259ff 	.word	0x026259ff
  400830:	04000100 	.word	0x04000100
  400834:	039386ff 	.word	0x039386ff
  400838:	04000200 	.word	0x04000200
  40083c:	04c4b3ff 	.word	0x04c4b3ff
  400840:	04000300 	.word	0x04000300
  400844:	05f5e0ff 	.word	0x05f5e0ff
  400848:	04000500 	.word	0x04000500

0040084c <__libc_init_array>:
  40084c:	b570      	push	{r4, r5, r6, lr}
  40084e:	4e0f      	ldr	r6, [pc, #60]	; (40088c <__libc_init_array+0x40>)
  400850:	4d0f      	ldr	r5, [pc, #60]	; (400890 <__libc_init_array+0x44>)
  400852:	1b76      	subs	r6, r6, r5
  400854:	10b6      	asrs	r6, r6, #2
  400856:	bf18      	it	ne
  400858:	2400      	movne	r4, #0
  40085a:	d005      	beq.n	400868 <__libc_init_array+0x1c>
  40085c:	3401      	adds	r4, #1
  40085e:	f855 3b04 	ldr.w	r3, [r5], #4
  400862:	4798      	blx	r3
  400864:	42a6      	cmp	r6, r4
  400866:	d1f9      	bne.n	40085c <__libc_init_array+0x10>
  400868:	4e0a      	ldr	r6, [pc, #40]	; (400894 <__libc_init_array+0x48>)
  40086a:	4d0b      	ldr	r5, [pc, #44]	; (400898 <__libc_init_array+0x4c>)
  40086c:	1b76      	subs	r6, r6, r5
  40086e:	f000 f88d 	bl	40098c <_init>
  400872:	10b6      	asrs	r6, r6, #2
  400874:	bf18      	it	ne
  400876:	2400      	movne	r4, #0
  400878:	d006      	beq.n	400888 <__libc_init_array+0x3c>
  40087a:	3401      	adds	r4, #1
  40087c:	f855 3b04 	ldr.w	r3, [r5], #4
  400880:	4798      	blx	r3
  400882:	42a6      	cmp	r6, r4
  400884:	d1f9      	bne.n	40087a <__libc_init_array+0x2e>
  400886:	bd70      	pop	{r4, r5, r6, pc}
  400888:	bd70      	pop	{r4, r5, r6, pc}
  40088a:	bf00      	nop
  40088c:	00400998 	.word	0x00400998
  400890:	00400998 	.word	0x00400998
  400894:	004009a0 	.word	0x004009a0
  400898:	00400998 	.word	0x00400998

0040089c <register_fini>:
  40089c:	4b02      	ldr	r3, [pc, #8]	; (4008a8 <register_fini+0xc>)
  40089e:	b113      	cbz	r3, 4008a6 <register_fini+0xa>
  4008a0:	4802      	ldr	r0, [pc, #8]	; (4008ac <register_fini+0x10>)
  4008a2:	f000 b805 	b.w	4008b0 <atexit>
  4008a6:	4770      	bx	lr
  4008a8:	00000000 	.word	0x00000000
  4008ac:	004008bd 	.word	0x004008bd

004008b0 <atexit>:
  4008b0:	2300      	movs	r3, #0
  4008b2:	4601      	mov	r1, r0
  4008b4:	461a      	mov	r2, r3
  4008b6:	4618      	mov	r0, r3
  4008b8:	f000 b814 	b.w	4008e4 <__register_exitproc>

004008bc <__libc_fini_array>:
  4008bc:	b538      	push	{r3, r4, r5, lr}
  4008be:	4d07      	ldr	r5, [pc, #28]	; (4008dc <__libc_fini_array+0x20>)
  4008c0:	4c07      	ldr	r4, [pc, #28]	; (4008e0 <__libc_fini_array+0x24>)
  4008c2:	1b2c      	subs	r4, r5, r4
  4008c4:	10a4      	asrs	r4, r4, #2
  4008c6:	d005      	beq.n	4008d4 <__libc_fini_array+0x18>
  4008c8:	3c01      	subs	r4, #1
  4008ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4008ce:	4798      	blx	r3
  4008d0:	2c00      	cmp	r4, #0
  4008d2:	d1f9      	bne.n	4008c8 <__libc_fini_array+0xc>
  4008d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4008d8:	f000 b862 	b.w	4009a0 <_fini>
  4008dc:	004009bc 	.word	0x004009bc
  4008e0:	004009b8 	.word	0x004009b8

004008e4 <__register_exitproc>:
  4008e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4008e8:	4c25      	ldr	r4, [pc, #148]	; (400980 <__register_exitproc+0x9c>)
  4008ea:	6825      	ldr	r5, [r4, #0]
  4008ec:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4008f0:	4606      	mov	r6, r0
  4008f2:	4688      	mov	r8, r1
  4008f4:	4692      	mov	sl, r2
  4008f6:	4699      	mov	r9, r3
  4008f8:	b3c4      	cbz	r4, 40096c <__register_exitproc+0x88>
  4008fa:	6860      	ldr	r0, [r4, #4]
  4008fc:	281f      	cmp	r0, #31
  4008fe:	dc17      	bgt.n	400930 <__register_exitproc+0x4c>
  400900:	1c43      	adds	r3, r0, #1
  400902:	b176      	cbz	r6, 400922 <__register_exitproc+0x3e>
  400904:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400908:	2201      	movs	r2, #1
  40090a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40090e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400912:	4082      	lsls	r2, r0
  400914:	4311      	orrs	r1, r2
  400916:	2e02      	cmp	r6, #2
  400918:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40091c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400920:	d01e      	beq.n	400960 <__register_exitproc+0x7c>
  400922:	3002      	adds	r0, #2
  400924:	6063      	str	r3, [r4, #4]
  400926:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40092a:	2000      	movs	r0, #0
  40092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400930:	4b14      	ldr	r3, [pc, #80]	; (400984 <__register_exitproc+0xa0>)
  400932:	b303      	cbz	r3, 400976 <__register_exitproc+0x92>
  400934:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400938:	f3af 8000 	nop.w
  40093c:	4604      	mov	r4, r0
  40093e:	b1d0      	cbz	r0, 400976 <__register_exitproc+0x92>
  400940:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400944:	2700      	movs	r7, #0
  400946:	e880 0088 	stmia.w	r0, {r3, r7}
  40094a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40094e:	4638      	mov	r0, r7
  400950:	2301      	movs	r3, #1
  400952:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400956:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40095a:	2e00      	cmp	r6, #0
  40095c:	d0e1      	beq.n	400922 <__register_exitproc+0x3e>
  40095e:	e7d1      	b.n	400904 <__register_exitproc+0x20>
  400960:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400964:	430a      	orrs	r2, r1
  400966:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40096a:	e7da      	b.n	400922 <__register_exitproc+0x3e>
  40096c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400970:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400974:	e7c1      	b.n	4008fa <__register_exitproc+0x16>
  400976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40097e:	bf00      	nop
  400980:	00400988 	.word	0x00400988
  400984:	00000000 	.word	0x00000000

00400988 <_global_impure_ptr>:
  400988:	20000010                                ... 

0040098c <_init>:
  40098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40098e:	bf00      	nop
  400990:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400992:	bc08      	pop	{r3}
  400994:	469e      	mov	lr, r3
  400996:	4770      	bx	lr

00400998 <__init_array_start>:
  400998:	0040089d 	.word	0x0040089d

0040099c <__frame_dummy_init_array_entry>:
  40099c:	004000f1                                ..@.

004009a0 <_fini>:
  4009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009a2:	bf00      	nop
  4009a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4009a6:	bc08      	pop	{r3}
  4009a8:	469e      	mov	lr, r3
  4009aa:	4770      	bx	lr
  4009ac:	0000      	movs	r0, r0
	...

004009b0 <__portable_delay_cycles_veneer>:
  4009b0:	f85f f000 	ldr.w	pc, [pc]	; 4009b4 <__portable_delay_cycles_veneer+0x4>
  4009b4:	20000001 	.word	0x20000001

004009b8 <__fini_array_start>:
  4009b8:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
