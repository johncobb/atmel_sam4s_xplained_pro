
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004364  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404364  00404364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  0040436c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000fc  200009b8  00404d24  000209b8  2**2
                  ALLOC
  4 .stack        00003004  20000ab4  00404e20  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      0000006e  00000000  00000000  000209e2  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000b1cb  00000000  00000000  00020a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000217a  00000000  00000000  0002bc1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004007  00000000  00000000  0002dd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009f0  00000000  00000000  00031d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000910  00000000  00000000  0003278c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000149b4  00000000  00000000  0003309c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c25d  00000000  00000000  00047a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00052f80  00000000  00000000  00053cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000021a0  00000000  00000000  000a6c30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003ab8 	.word	0x20003ab8
  400004:	00400d2d 	.word	0x00400d2d
  400008:	00400d29 	.word	0x00400d29
  40000c:	00400d29 	.word	0x00400d29
  400010:	00400d29 	.word	0x00400d29
  400014:	00400d29 	.word	0x00400d29
  400018:	00400d29 	.word	0x00400d29
	...
  40002c:	00400d29 	.word	0x00400d29
  400030:	00400d29 	.word	0x00400d29
  400034:	00000000 	.word	0x00000000
  400038:	00400d29 	.word	0x00400d29
  40003c:	00400d29 	.word	0x00400d29
  400040:	00400d29 	.word	0x00400d29
  400044:	00400d29 	.word	0x00400d29
  400048:	00400d29 	.word	0x00400d29
  40004c:	00400d29 	.word	0x00400d29
  400050:	00400d29 	.word	0x00400d29
  400054:	00400d29 	.word	0x00400d29
  400058:	00400d29 	.word	0x00400d29
  40005c:	00400d29 	.word	0x00400d29
  400060:	00400d29 	.word	0x00400d29
  400064:	00400d29 	.word	0x00400d29
  400068:	00000000 	.word	0x00000000
  40006c:	00400b29 	.word	0x00400b29
  400070:	00400b39 	.word	0x00400b39
  400074:	00400b49 	.word	0x00400b49
  400078:	00400d29 	.word	0x00400d29
  40007c:	00400d29 	.word	0x00400d29
	...
  400088:	00400d29 	.word	0x00400d29
  40008c:	00400d29 	.word	0x00400d29
  400090:	00400d29 	.word	0x00400d29
  400094:	00400d29 	.word	0x00400d29
  400098:	00400d29 	.word	0x00400d29
  40009c:	00400d29 	.word	0x00400d29
  4000a0:	00400d29 	.word	0x00400d29
  4000a4:	00400d29 	.word	0x00400d29
  4000a8:	00400d29 	.word	0x00400d29
  4000ac:	00400d29 	.word	0x00400d29
  4000b0:	00400d29 	.word	0x00400d29
  4000b4:	00400d29 	.word	0x00400d29
  4000b8:	00400d29 	.word	0x00400d29
  4000bc:	00400d29 	.word	0x00400d29
  4000c0:	00400d29 	.word	0x00400d29
  4000c4:	00400d29 	.word	0x00400d29
  4000c8:	00400d29 	.word	0x00400d29

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200009b8 	.word	0x200009b8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040436c 	.word	0x0040436c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200009bc 	.word	0x200009bc
  40011c:	0040436c 	.word	0x0040436c
  400120:	0040436c 	.word	0x0040436c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f000 fedc 	bl	400ee8 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f000 fd44 	bl	400bc0 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f000 fd6c 	bl	400c14 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f000 fd70 	bl	400c24 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f000 fd73 	bl	400c34 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f000 fd00 	bl	400b58 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f000 fe3c 	bl	400dd4 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f000 fec3 	bl	400ee8 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000aa8 	.word	0x20000aa8
  4001a8:	20000aa0 	.word	0x20000aa0

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	20000aa4 	.word	0x20000aa4
  4001f8:	20000aa8 	.word	0x20000aa8

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f000 fd68 	bl	400ce8 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f000 fd5d 	bl	400ce8 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f000 fd66 	bl	400d10 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f000 fd59 	bl	400d10 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f000 fd24 	bl	400cd8 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f000 fd18 	bl	400cd8 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f000 fd1e 	bl	400cfc <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f000 fd12 	bl	400cfc <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b084      	sub	sp, #16
    sysclk_init();
  4002f8:	f7ff ff16 	bl	400128 <sysclk_init>
    board_init();
  4002fc:	f000 f8c6 	bl	40048c <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400300:	2013      	movs	r0, #19
  400302:	f000 fc9f 	bl	400c44 <pmc_enable_periph_clk>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400306:	2009      	movs	r0, #9
  400308:	f000 fc9c 	bl	400c44 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40030c:	4c1f      	ldr	r4, [pc, #124]	; (40038c <main+0x98>)
  40030e:	4b20      	ldr	r3, [pc, #128]	; (400390 <main+0x9c>)
  400310:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400312:	4a20      	ldr	r2, [pc, #128]	; (400394 <main+0xa0>)
  400314:	4b20      	ldr	r3, [pc, #128]	; (400398 <main+0xa4>)
  400316:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400318:	4a20      	ldr	r2, [pc, #128]	; (40039c <main+0xa8>)
  40031a:	4b21      	ldr	r3, [pc, #132]	; (4003a0 <main+0xac>)
  40031c:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40031e:	4b21      	ldr	r3, [pc, #132]	; (4003a4 <main+0xb0>)
  400320:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400322:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400326:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400328:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40032c:	9303      	str	r3, [sp, #12]
  40032e:	2009      	movs	r0, #9
  400330:	f000 fc88 	bl	400c44 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400334:	a901      	add	r1, sp, #4
  400336:	4620      	mov	r0, r4
  400338:	f000 fcb2 	bl	400ca0 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40033c:	4c1a      	ldr	r4, [pc, #104]	; (4003a8 <main+0xb4>)
  40033e:	6823      	ldr	r3, [r4, #0]
  400340:	2100      	movs	r1, #0
  400342:	6898      	ldr	r0, [r3, #8]
  400344:	f000 ff08 	bl	401158 <setbuf>
	setbuf(stdin, NULL);
  400348:	6823      	ldr	r3, [r4, #0]
  40034a:	2100      	movs	r1, #0
  40034c:	6858      	ldr	r0, [r3, #4]
  40034e:	f000 ff03 	bl	401158 <setbuf>

    configure_console();
    puts("sam4d32c imu demo...\r\n");
  400352:	4816      	ldr	r0, [pc, #88]	; (4003ac <main+0xb8>)
  400354:	f000 fef8 	bl	401148 <puts>


    imu_init();
  400358:	f000 f830 	bl	4003bc <imu_init>
    imu_probe();
  40035c:	f000 f84e 	bl	4003fc <imu_probe>
    imu_who_am_i();
  400360:	f000 f860 	bl	400424 <imu_who_am_i>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400364:	4c12      	ldr	r4, [pc, #72]	; (4003b0 <main+0xbc>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400366:	4d13      	ldr	r5, [pc, #76]	; (4003b4 <main+0xc0>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  400368:	f44f 0700 	mov.w	r7, #8388608	; 0x800000

    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  40036c:	4e12      	ldr	r6, [pc, #72]	; (4003b8 <main+0xc4>)
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40036e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    imu_who_am_i();
    // imu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);

    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  400370:	f013 0f04 	tst.w	r3, #4
  400374:	d1fb      	bne.n	40036e <main+0x7a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400376:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  400378:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  40037c:	bf14      	ite	ne
  40037e:	636f      	strne	r7, [r5, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400380:	632f      	streq	r7, [r5, #48]	; 0x30
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  400382:	4630      	mov	r0, r6
  400384:	f003 ffe8 	bl	404358 <__portable_delay_cycles_veneer>
  400388:	e7f1      	b.n	40036e <main+0x7a>
  40038a:	bf00      	nop
  40038c:	400e0800 	.word	0x400e0800
  400390:	20000aa8 	.word	0x20000aa8
  400394:	0040027d 	.word	0x0040027d
  400398:	20000aa4 	.word	0x20000aa4
  40039c:	004001fd 	.word	0x004001fd
  4003a0:	20000aa0 	.word	0x20000aa0
  4003a4:	07270e00 	.word	0x07270e00
  4003a8:	20000438 	.word	0x20000438
  4003ac:	004040c0 	.word	0x004040c0
  4003b0:	400e0e00 	.word	0x400e0e00
  4003b4:	400e1200 	.word	0x400e1200
  4003b8:	00416513 	.word	0x00416513

004003bc <imu_init>:
#include "mpu6050.h"

static uint8_t imu_buffer[32] = {0};

void imu_init(void)
{
  4003bc:	b500      	push	{lr}
  4003be:	b085      	sub	sp, #20
    twi_options_t opt;
    twi_packet_t packet_tx;
    twi_packet_t packet_rx;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <imu_init+0x2c>)
  4003c2:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  4003c4:	4b09      	ldr	r3, [pc, #36]	; (4003ec <imu_init+0x30>)
  4003c6:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  4003c8:	a901      	add	r1, sp, #4
  4003ca:	4809      	ldr	r0, [pc, #36]	; (4003f0 <imu_init+0x34>)
  4003cc:	f000 f920 	bl	400610 <twi_master_init>
  4003d0:	b118      	cbz	r0, 4003da <imu_init+0x1e>
        puts("twi_master_init: failed\r\n");
  4003d2:	4808      	ldr	r0, [pc, #32]	; (4003f4 <imu_init+0x38>)
  4003d4:	f000 feb8 	bl	401148 <puts>
  4003d8:	e002      	b.n	4003e0 <imu_init+0x24>
        
    } else {
        puts("twi_master_init: success\r\n");
  4003da:	4807      	ldr	r0, [pc, #28]	; (4003f8 <imu_init+0x3c>)
  4003dc:	f000 feb4 	bl	401148 <puts>
    }
}
  4003e0:	b005      	add	sp, #20
  4003e2:	f85d fb04 	ldr.w	pc, [sp], #4
  4003e6:	bf00      	nop
  4003e8:	07270e00 	.word	0x07270e00
  4003ec:	00061a80 	.word	0x00061a80
  4003f0:	40018000 	.word	0x40018000
  4003f4:	004040d8 	.word	0x004040d8
  4003f8:	004040f4 	.word	0x004040f4

004003fc <imu_probe>:

void imu_probe(void)
{
  4003fc:	b508      	push	{r3, lr}
    // delay_ms(20);

    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  4003fe:	2168      	movs	r1, #104	; 0x68
  400400:	4805      	ldr	r0, [pc, #20]	; (400418 <imu_probe+0x1c>)
  400402:	f000 f9df 	bl	4007c4 <twi_probe>
  400406:	b118      	cbz	r0, 400410 <imu_probe+0x14>
        puts("twi_probe: failed\r\n");
  400408:	4804      	ldr	r0, [pc, #16]	; (40041c <imu_probe+0x20>)
  40040a:	f000 fe9d 	bl	401148 <puts>
  40040e:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400410:	4803      	ldr	r0, [pc, #12]	; (400420 <imu_probe+0x24>)
  400412:	f000 fe99 	bl	401148 <puts>
  400416:	bd08      	pop	{r3, pc}
  400418:	40018000 	.word	0x40018000
  40041c:	00404110 	.word	0x00404110
  400420:	00404124 	.word	0x00404124

00400424 <imu_who_am_i>:
    }
}


void imu_who_am_i(void)
{
  400424:	b510      	push	{r4, lr}
  400426:	b086      	sub	sp, #24

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
    opt.speed      = TWI_CLK;

     memset(imu_buffer, 0, sizeof(imu_buffer));
  400428:	4c13      	ldr	r4, [pc, #76]	; (400478 <imu_who_am_i+0x54>)
  40042a:	2220      	movs	r2, #32
  40042c:	2100      	movs	r1, #0
  40042e:	4620      	mov	r0, r4
  400430:	f000 fe08 	bl	401044 <memset>

    packet_rx.chip = IMU_ADDRESS;
  400434:	2368      	movs	r3, #104	; 0x68
  400436:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = MPU6050_RA_WHO_AM_I;
  40043a:	2375      	movs	r3, #117	; 0x75
  40043c:	f88d 3004 	strb.w	r3, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400440:	2301      	movs	r3, #1
  400442:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = &imu_buffer;
  400444:	9403      	str	r4, [sp, #12]
    packet_rx.length = 1;
  400446:	9304      	str	r3, [sp, #16]


    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400448:	a901      	add	r1, sp, #4
  40044a:	480c      	ldr	r0, [pc, #48]	; (40047c <imu_who_am_i+0x58>)
  40044c:	f000 f910 	bl	400670 <twi_master_read>
  400450:	4604      	mov	r4, r0

    printf("twi_master_read status: %d\r\n", status);
  400452:	4601      	mov	r1, r0
  400454:	480a      	ldr	r0, [pc, #40]	; (400480 <imu_who_am_i+0x5c>)
  400456:	f000 fde1 	bl	40101c <iprintf>
    
    if (status == TWI_SUCCESS) {
  40045a:	b954      	cbnz	r4, 400472 <imu_who_am_i+0x4e>

        uint8_t device_id = imu_buffer[0];
  40045c:	4b06      	ldr	r3, [pc, #24]	; (400478 <imu_who_am_i+0x54>)
  40045e:	781c      	ldrb	r4, [r3, #0]
        printf("twi_master_read buffer: 0x%1x\r\n", imu_buffer[0]);
  400460:	4621      	mov	r1, r4
  400462:	4808      	ldr	r0, [pc, #32]	; (400484 <imu_who_am_i+0x60>)
  400464:	f000 fdda 	bl	40101c <iprintf>

        if (device_id == 0x68) {
  400468:	2c68      	cmp	r4, #104	; 0x68
  40046a:	d102      	bne.n	400472 <imu_who_am_i+0x4e>
            puts("who_am_i: success\r\n");
  40046c:	4806      	ldr	r0, [pc, #24]	; (400488 <imu_who_am_i+0x64>)
  40046e:	f000 fe6b 	bl	401148 <puts>

        }

    }
}
  400472:	b006      	add	sp, #24
  400474:	bd10      	pop	{r4, pc}
  400476:	bf00      	nop
  400478:	200009d4 	.word	0x200009d4
  40047c:	40018000 	.word	0x40018000
  400480:	0040413c 	.word	0x0040413c
  400484:	0040415c 	.word	0x0040415c
  400488:	0040417c 	.word	0x0040417c

0040048c <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  40048c:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40048e:	482c      	ldr	r0, [pc, #176]	; (400540 <board_init+0xb4>)
  400490:	f000 fc02 	bl	400c98 <wdt_disable>
  400494:	200b      	movs	r0, #11
  400496:	f000 fbd5 	bl	400c44 <pmc_enable_periph_clk>
  40049a:	200c      	movs	r0, #12
  40049c:	f000 fbd2 	bl	400c44 <pmc_enable_periph_clk>
  4004a0:	200d      	movs	r0, #13
  4004a2:	f000 fbcf 	bl	400c44 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004a6:	4b27      	ldr	r3, [pc, #156]	; (400544 <board_init+0xb8>)
  4004a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4004ac:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004b4:	4c24      	ldr	r4, [pc, #144]	; (400548 <board_init+0xbc>)
  4004b6:	2504      	movs	r5, #4
  4004b8:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004ba:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4004be:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4004c0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4004c4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4004c6:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4004c8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4004cc:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4004ce:	f022 0204 	bic.w	r2, r2, #4
  4004d2:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4004d4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4004d6:	f022 0204 	bic.w	r2, r2, #4
  4004da:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4004e0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004e2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4004ec:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004ee:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004f0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4004f8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004fa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400500:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400504:	210c      	movs	r1, #12
  400506:	4811      	ldr	r0, [pc, #68]	; (40054c <board_init+0xc0>)
  400508:	f000 fa76 	bl	4009f8 <pio_configure_pin_group>
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  40050c:	4e10      	ldr	r6, [pc, #64]	; (400550 <board_init+0xc4>)
  40050e:	4631      	mov	r1, r6
  400510:	2003      	movs	r0, #3
  400512:	f000 f9e5 	bl	4008e0 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  400516:	4631      	mov	r1, r6
  400518:	4628      	mov	r0, r5
  40051a:	f000 f9e1 	bl	4008e0 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40051e:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400520:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400524:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400526:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400528:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40052c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40052e:	f023 0304 	bic.w	r3, r3, #4
  400532:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400534:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400536:	f023 0304 	bic.w	r3, r3, #4
  40053a:	6763      	str	r3, [r4, #116]	; 0x74
  40053c:	bd70      	pop	{r4, r5, r6, pc}
  40053e:	bf00      	nop
  400540:	400e1450 	.word	0x400e1450
  400544:	400e1200 	.word	0x400e1200
  400548:	400e0e00 	.word	0x400e0e00
  40054c:	400e1000 	.word	0x400e1000
  400550:	08000001 	.word	0x08000001

00400554 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400554:	4b2b      	ldr	r3, [pc, #172]	; (400604 <twi_set_speed+0xb0>)
  400556:	4299      	cmp	r1, r3
  400558:	d849      	bhi.n	4005ee <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40055a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40055e:	4299      	cmp	r1, r3
  400560:	d92b      	bls.n	4005ba <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400562:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400564:	4c28      	ldr	r4, [pc, #160]	; (400608 <twi_set_speed+0xb4>)
  400566:	fba4 3402 	umull	r3, r4, r4, r2
  40056a:	0ba4      	lsrs	r4, r4, #14
  40056c:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40056e:	4b27      	ldr	r3, [pc, #156]	; (40060c <twi_set_speed+0xb8>)
  400570:	440b      	add	r3, r1
  400572:	009b      	lsls	r3, r3, #2
  400574:	fbb2 f2f3 	udiv	r2, r2, r3
  400578:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40057a:	2cff      	cmp	r4, #255	; 0xff
  40057c:	d939      	bls.n	4005f2 <twi_set_speed+0x9e>
  40057e:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  400580:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400582:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400584:	2cff      	cmp	r4, #255	; 0xff
  400586:	d902      	bls.n	40058e <twi_set_speed+0x3a>
  400588:	2b07      	cmp	r3, #7
  40058a:	d1f9      	bne.n	400580 <twi_set_speed+0x2c>
  40058c:	e00a      	b.n	4005a4 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40058e:	2aff      	cmp	r2, #255	; 0xff
  400590:	d908      	bls.n	4005a4 <twi_set_speed+0x50>
  400592:	2b06      	cmp	r3, #6
  400594:	d900      	bls.n	400598 <twi_set_speed+0x44>
  400596:	e005      	b.n	4005a4 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  400598:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40059a:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40059c:	2aff      	cmp	r2, #255	; 0xff
  40059e:	d901      	bls.n	4005a4 <twi_set_speed+0x50>
  4005a0:	2b06      	cmp	r3, #6
  4005a2:	d9f9      	bls.n	400598 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4005a4:	0212      	lsls	r2, r2, #8
  4005a6:	b292      	uxth	r2, r2
  4005a8:	041b      	lsls	r3, r3, #16
  4005aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4005ae:	431a      	orrs	r2, r3
  4005b0:	b2e4      	uxtb	r4, r4
  4005b2:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4005b4:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4005b6:	2000      	movs	r0, #0
  4005b8:	e021      	b.n	4005fe <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4005ba:	0049      	lsls	r1, r1, #1
  4005bc:	fbb2 f2f1 	udiv	r2, r2, r1
  4005c0:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4005c2:	2aff      	cmp	r2, #255	; 0xff
  4005c4:	d907      	bls.n	4005d6 <twi_set_speed+0x82>
  4005c6:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4005c8:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4005ca:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4005cc:	2aff      	cmp	r2, #255	; 0xff
  4005ce:	d903      	bls.n	4005d8 <twi_set_speed+0x84>
  4005d0:	2b07      	cmp	r3, #7
  4005d2:	d1f9      	bne.n	4005c8 <twi_set_speed+0x74>
  4005d4:	e000      	b.n	4005d8 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4005d6:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4005d8:	0211      	lsls	r1, r2, #8
  4005da:	b289      	uxth	r1, r1
  4005dc:	041b      	lsls	r3, r3, #16
  4005de:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4005e2:	430b      	orrs	r3, r1
  4005e4:	b2d2      	uxtb	r2, r2
  4005e6:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4005e8:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4005ea:	2000      	movs	r0, #0
}
  4005ec:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  4005ee:	2001      	movs	r0, #1
  4005f0:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4005f2:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4005f4:	bf88      	it	hi
  4005f6:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4005f8:	d8ce      	bhi.n	400598 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4005fa:	2300      	movs	r3, #0
  4005fc:	e7d2      	b.n	4005a4 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  4005fe:	bc10      	pop	{r4}
  400600:	4770      	bx	lr
  400602:	bf00      	nop
  400604:	00061a80 	.word	0x00061a80
  400608:	057619f1 	.word	0x057619f1
  40060c:	3ffd1200 	.word	0x3ffd1200

00400610 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400610:	b538      	push	{r3, r4, r5, lr}
  400612:	4604      	mov	r4, r0
  400614:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  40061a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40061c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40061e:	2380      	movs	r3, #128	; 0x80
  400620:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400622:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400624:	2308      	movs	r3, #8
  400626:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400628:	2320      	movs	r3, #32
  40062a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  40062c:	2304      	movs	r3, #4
  40062e:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400630:	680a      	ldr	r2, [r1, #0]
  400632:	6849      	ldr	r1, [r1, #4]
  400634:	f7ff ff8e 	bl	400554 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  400638:	2801      	cmp	r0, #1
  40063a:	bf14      	ite	ne
  40063c:	2000      	movne	r0, #0
  40063e:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400640:	7a6b      	ldrb	r3, [r5, #9]
  400642:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400644:	bf04      	itt	eq
  400646:	2340      	moveq	r3, #64	; 0x40
  400648:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  40064a:	bd38      	pop	{r3, r4, r5, pc}

0040064c <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  40064c:	460a      	mov	r2, r1
  40064e:	b159      	cbz	r1, 400668 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  400650:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  400652:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  400654:	bfc4      	itt	gt
  400656:	7841      	ldrbgt	r1, [r0, #1]
  400658:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  40065c:	2a02      	cmp	r2, #2
  40065e:	dd05      	ble.n	40066c <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  400660:	7880      	ldrb	r0, [r0, #2]
  400662:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  400666:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400668:	2000      	movs	r0, #0
  40066a:	4770      	bx	lr
  40066c:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  40066e:	4770      	bx	lr

00400670 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400674:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  400676:	2c00      	cmp	r4, #0
  400678:	d045      	beq.n	400706 <twi_master_read+0x96>
  40067a:	460b      	mov	r3, r1
  40067c:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  40067e:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400680:	2000      	movs	r0, #0
  400682:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400684:	684a      	ldr	r2, [r1, #4]
  400686:	0212      	lsls	r2, r2, #8
  400688:	f402 7240 	and.w	r2, r2, #768	; 0x300
  40068c:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  400690:	7c1a      	ldrb	r2, [r3, #16]
  400692:	0412      	lsls	r2, r2, #16
  400694:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  400698:	430a      	orrs	r2, r1
  40069a:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40069c:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40069e:	6859      	ldr	r1, [r3, #4]
  4006a0:	4618      	mov	r0, r3
  4006a2:	f7ff ffd3 	bl	40064c <twi_mk_addr>
  4006a6:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  4006a8:	2c01      	cmp	r4, #1
  4006aa:	d104      	bne.n	4006b6 <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4006ac:	2303      	movs	r3, #3
  4006ae:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  4006b0:	f04f 0e01 	mov.w	lr, #1
  4006b4:	e033      	b.n	40071e <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4006b6:	2301      	movs	r3, #1
  4006b8:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  4006ba:	f04f 0e00 	mov.w	lr, #0
  4006be:	e02e      	b.n	40071e <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  4006c0:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4006c2:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4006c4:	f413 7f80 	tst.w	r3, #256	; 0x100
  4006c8:	d120      	bne.n	40070c <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  4006ca:	1e51      	subs	r1, r2, #1
  4006cc:	b30a      	cbz	r2, 400712 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4006ce:	2c01      	cmp	r4, #1
  4006d0:	d106      	bne.n	4006e0 <twi_master_read+0x70>
  4006d2:	f1be 0f00 	cmp.w	lr, #0
  4006d6:	d12f      	bne.n	400738 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  4006d8:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  4006dc:	46e6      	mov	lr, ip
  4006de:	e02b      	b.n	400738 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4006e0:	f013 0f02 	tst.w	r3, #2
  4006e4:	d005      	beq.n	4006f2 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4006e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4006e8:	7033      	strb	r3, [r6, #0]

		cnt--;
  4006ea:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4006ec:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4006ee:	463a      	mov	r2, r7
  4006f0:	e000      	b.n	4006f4 <twi_master_read+0x84>
  4006f2:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4006f4:	2c00      	cmp	r4, #0
  4006f6:	d1e4      	bne.n	4006c2 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4006f8:	6a2b      	ldr	r3, [r5, #32]
  4006fa:	f013 0f01 	tst.w	r3, #1
  4006fe:	d0fb      	beq.n	4006f8 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  400700:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  400702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400706:	2001      	movs	r0, #1
  400708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40070c:	2005      	movs	r0, #5
  40070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400712:	2009      	movs	r0, #9
  400714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400718:	2005      	movs	r0, #5
  40071a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40071e:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400720:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400724:	d1f8      	bne.n	400718 <twi_master_read+0xa8>
  400726:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  40072a:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  40072e:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  400732:	f04f 0c01 	mov.w	ip, #1
  400736:	e7ca      	b.n	4006ce <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400738:	f013 0f02 	tst.w	r3, #2
  40073c:	d0c0      	beq.n	4006c0 <twi_master_read+0x50>
  40073e:	e7d2      	b.n	4006e6 <twi_master_read+0x76>

00400740 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400740:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400742:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  400744:	2d00      	cmp	r5, #0
  400746:	d034      	beq.n	4007b2 <twi_master_write+0x72>
  400748:	460b      	mov	r3, r1
  40074a:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  40074c:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40074e:	2000      	movs	r0, #0
  400750:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400752:	7c0a      	ldrb	r2, [r1, #16]
  400754:	0412      	lsls	r2, r2, #16
  400756:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  40075a:	685a      	ldr	r2, [r3, #4]
  40075c:	0212      	lsls	r2, r2, #8
  40075e:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400762:	430a      	orrs	r2, r1
  400764:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400766:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400768:	6859      	ldr	r1, [r3, #4]
  40076a:	4618      	mov	r0, r3
  40076c:	f7ff ff6e 	bl	40064c <twi_mk_addr>
  400770:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400772:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400774:	f413 7f80 	tst.w	r3, #256	; 0x100
  400778:	d004      	beq.n	400784 <twi_master_write+0x44>
  40077a:	e01c      	b.n	4007b6 <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40077c:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40077e:	f413 7f80 	tst.w	r3, #256	; 0x100
  400782:	d11a      	bne.n	4007ba <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  400784:	f013 0f04 	tst.w	r3, #4
  400788:	d003      	beq.n	400792 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40078a:	7833      	ldrb	r3, [r6, #0]
  40078c:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  40078e:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400790:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400792:	2d00      	cmp	r5, #0
  400794:	d1f2      	bne.n	40077c <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400796:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400798:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  40079c:	d10f      	bne.n	4007be <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  40079e:	f013 0f04 	tst.w	r3, #4
  4007a2:	d0f8      	beq.n	400796 <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4007a4:	2302      	movs	r3, #2
  4007a6:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4007a8:	6a23      	ldr	r3, [r4, #32]
  4007aa:	f013 0f01 	tst.w	r3, #1
  4007ae:	d0fb      	beq.n	4007a8 <twi_master_write+0x68>
  4007b0:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4007b2:	2001      	movs	r0, #1
  4007b4:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4007b6:	2005      	movs	r0, #5
  4007b8:	bd70      	pop	{r4, r5, r6, pc}
  4007ba:	2005      	movs	r0, #5
  4007bc:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4007be:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4007c0:	bd70      	pop	{r4, r5, r6, pc}
  4007c2:	bf00      	nop

004007c4 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  4007c4:	b500      	push	{lr}
  4007c6:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  4007c8:	2300      	movs	r3, #0
  4007ca:	aa06      	add	r2, sp, #24
  4007cc:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  4007d0:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  4007d2:	2201      	movs	r2, #1
  4007d4:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  4007d6:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  4007da:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  4007de:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  4007e0:	a901      	add	r1, sp, #4
  4007e2:	f7ff ffad 	bl	400740 <twi_master_write>
}
  4007e6:	b007      	add	sp, #28
  4007e8:	f85d fb04 	ldr.w	pc, [sp], #4

004007ec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4007ec:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4007ee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4007f2:	d02f      	beq.n	400854 <pio_set_peripheral+0x68>
  4007f4:	d807      	bhi.n	400806 <pio_set_peripheral+0x1a>
  4007f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4007fa:	d014      	beq.n	400826 <pio_set_peripheral+0x3a>
  4007fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400800:	d01e      	beq.n	400840 <pio_set_peripheral+0x54>
  400802:	b939      	cbnz	r1, 400814 <pio_set_peripheral+0x28>
  400804:	4770      	bx	lr
  400806:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40080a:	d036      	beq.n	40087a <pio_set_peripheral+0x8e>
  40080c:	d804      	bhi.n	400818 <pio_set_peripheral+0x2c>
  40080e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400812:	d029      	beq.n	400868 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400814:	6042      	str	r2, [r0, #4]
  400816:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400818:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40081c:	d02d      	beq.n	40087a <pio_set_peripheral+0x8e>
  40081e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400822:	d02a      	beq.n	40087a <pio_set_peripheral+0x8e>
  400824:	e7f6      	b.n	400814 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400826:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400828:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40082a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40082c:	43d3      	mvns	r3, r2
  40082e:	4021      	ands	r1, r4
  400830:	4019      	ands	r1, r3
  400832:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400834:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400836:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400838:	4021      	ands	r1, r4
  40083a:	400b      	ands	r3, r1
  40083c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40083e:	e01a      	b.n	400876 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400840:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400842:	4313      	orrs	r3, r2
  400844:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400846:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400848:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40084a:	400b      	ands	r3, r1
  40084c:	ea23 0302 	bic.w	r3, r3, r2
  400850:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400852:	e7df      	b.n	400814 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400854:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400856:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400858:	400b      	ands	r3, r1
  40085a:	ea23 0302 	bic.w	r3, r3, r2
  40085e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400860:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400862:	4313      	orrs	r3, r2
  400864:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400866:	e7d5      	b.n	400814 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400868:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40086a:	4313      	orrs	r3, r2
  40086c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40086e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400870:	4313      	orrs	r3, r2
  400872:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400874:	e7ce      	b.n	400814 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400876:	6042      	str	r2, [r0, #4]
}
  400878:	bc10      	pop	{r4}
  40087a:	4770      	bx	lr

0040087c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40087c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40087e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400882:	bf14      	ite	ne
  400884:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400886:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400888:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40088c:	bf14      	ite	ne
  40088e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400890:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400892:	f012 0f02 	tst.w	r2, #2
  400896:	d002      	beq.n	40089e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400898:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40089c:	e004      	b.n	4008a8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40089e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4008a2:	bf18      	it	ne
  4008a4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4008a8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4008aa:	6001      	str	r1, [r0, #0]
  4008ac:	4770      	bx	lr
  4008ae:	bf00      	nop

004008b0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4008b0:	b410      	push	{r4}
  4008b2:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4008b4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4008b6:	b10c      	cbz	r4, 4008bc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4008b8:	6641      	str	r1, [r0, #100]	; 0x64
  4008ba:	e000      	b.n	4008be <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4008bc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4008be:	b10b      	cbz	r3, 4008c4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4008c0:	6501      	str	r1, [r0, #80]	; 0x50
  4008c2:	e000      	b.n	4008c6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4008c4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4008c6:	b10a      	cbz	r2, 4008cc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4008c8:	6301      	str	r1, [r0, #48]	; 0x30
  4008ca:	e000      	b.n	4008ce <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4008cc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4008ce:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4008d0:	6001      	str	r1, [r0, #0]
}
  4008d2:	bc10      	pop	{r4}
  4008d4:	4770      	bx	lr
  4008d6:	bf00      	nop

004008d8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4008d8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4008da:	4770      	bx	lr

004008dc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4008dc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4008de:	4770      	bx	lr

004008e0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4008e0:	b570      	push	{r4, r5, r6, lr}
  4008e2:	b082      	sub	sp, #8
  4008e4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4008e6:	0943      	lsrs	r3, r0, #5
  4008e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4008ec:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4008f0:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4008f2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4008f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4008fa:	d047      	beq.n	40098c <pio_configure_pin+0xac>
  4008fc:	d809      	bhi.n	400912 <pio_configure_pin+0x32>
  4008fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400902:	d021      	beq.n	400948 <pio_configure_pin+0x68>
  400904:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400908:	d02f      	beq.n	40096a <pio_configure_pin+0x8a>
  40090a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40090e:	d16f      	bne.n	4009f0 <pio_configure_pin+0x110>
  400910:	e009      	b.n	400926 <pio_configure_pin+0x46>
  400912:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400916:	d055      	beq.n	4009c4 <pio_configure_pin+0xe4>
  400918:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40091c:	d052      	beq.n	4009c4 <pio_configure_pin+0xe4>
  40091e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400922:	d044      	beq.n	4009ae <pio_configure_pin+0xce>
  400924:	e064      	b.n	4009f0 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400926:	f000 001f 	and.w	r0, r0, #31
  40092a:	2601      	movs	r6, #1
  40092c:	4086      	lsls	r6, r0
  40092e:	4632      	mov	r2, r6
  400930:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400934:	4620      	mov	r0, r4
  400936:	f7ff ff59 	bl	4007ec <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40093a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40093e:	bf14      	ite	ne
  400940:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400942:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400944:	2001      	movs	r0, #1
  400946:	e054      	b.n	4009f2 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400948:	f000 001f 	and.w	r0, r0, #31
  40094c:	2601      	movs	r6, #1
  40094e:	4086      	lsls	r6, r0
  400950:	4632      	mov	r2, r6
  400952:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400956:	4620      	mov	r0, r4
  400958:	f7ff ff48 	bl	4007ec <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40095c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400960:	bf14      	ite	ne
  400962:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400964:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400966:	2001      	movs	r0, #1
  400968:	e043      	b.n	4009f2 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40096a:	f000 001f 	and.w	r0, r0, #31
  40096e:	2601      	movs	r6, #1
  400970:	4086      	lsls	r6, r0
  400972:	4632      	mov	r2, r6
  400974:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400978:	4620      	mov	r0, r4
  40097a:	f7ff ff37 	bl	4007ec <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40097e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400982:	bf14      	ite	ne
  400984:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400986:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400988:	2001      	movs	r0, #1
  40098a:	e032      	b.n	4009f2 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40098c:	f000 001f 	and.w	r0, r0, #31
  400990:	2601      	movs	r6, #1
  400992:	4086      	lsls	r6, r0
  400994:	4632      	mov	r2, r6
  400996:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40099a:	4620      	mov	r0, r4
  40099c:	f7ff ff26 	bl	4007ec <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4009a0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4009a4:	bf14      	ite	ne
  4009a6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4009a8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4009aa:	2001      	movs	r0, #1
  4009ac:	e021      	b.n	4009f2 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4009ae:	f000 011f 	and.w	r1, r0, #31
  4009b2:	2601      	movs	r6, #1
  4009b4:	462a      	mov	r2, r5
  4009b6:	fa06 f101 	lsl.w	r1, r6, r1
  4009ba:	4620      	mov	r0, r4
  4009bc:	f7ff ff5e 	bl	40087c <pio_set_input>

	default:
		return 0;
	}

	return 1;
  4009c0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4009c2:	e016      	b.n	4009f2 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4009c4:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4009c8:	f000 011f 	and.w	r1, r0, #31
  4009cc:	2601      	movs	r6, #1
  4009ce:	ea05 0306 	and.w	r3, r5, r6
  4009d2:	9300      	str	r3, [sp, #0]
  4009d4:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4009d8:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4009dc:	bf14      	ite	ne
  4009de:	2200      	movne	r2, #0
  4009e0:	2201      	moveq	r2, #1
  4009e2:	fa06 f101 	lsl.w	r1, r6, r1
  4009e6:	4620      	mov	r0, r4
  4009e8:	f7ff ff62 	bl	4008b0 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  4009ec:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4009ee:	e000      	b.n	4009f2 <pio_configure_pin+0x112>

	default:
		return 0;
  4009f0:	2000      	movs	r0, #0
	}

	return 1;
}
  4009f2:	b002      	add	sp, #8
  4009f4:	bd70      	pop	{r4, r5, r6, pc}
  4009f6:	bf00      	nop

004009f8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4009f8:	b570      	push	{r4, r5, r6, lr}
  4009fa:	b082      	sub	sp, #8
  4009fc:	4605      	mov	r5, r0
  4009fe:	460e      	mov	r6, r1
  400a00:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400a02:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400a0a:	d038      	beq.n	400a7e <pio_configure_pin_group+0x86>
  400a0c:	d809      	bhi.n	400a22 <pio_configure_pin_group+0x2a>
  400a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400a12:	d01c      	beq.n	400a4e <pio_configure_pin_group+0x56>
  400a14:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400a18:	d025      	beq.n	400a66 <pio_configure_pin_group+0x6e>
  400a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400a1e:	d150      	bne.n	400ac2 <pio_configure_pin_group+0xca>
  400a20:	e009      	b.n	400a36 <pio_configure_pin_group+0x3e>
  400a22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400a26:	d03a      	beq.n	400a9e <pio_configure_pin_group+0xa6>
  400a28:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400a2c:	d037      	beq.n	400a9e <pio_configure_pin_group+0xa6>
  400a2e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400a32:	d030      	beq.n	400a96 <pio_configure_pin_group+0x9e>
  400a34:	e045      	b.n	400ac2 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400a36:	460a      	mov	r2, r1
  400a38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a3c:	f7ff fed6 	bl	4007ec <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a40:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400a44:	bf14      	ite	ne
  400a46:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400a48:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400a4a:	2001      	movs	r0, #1
  400a4c:	e03a      	b.n	400ac4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400a4e:	460a      	mov	r2, r1
  400a50:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a54:	f7ff feca 	bl	4007ec <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a58:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400a5c:	bf14      	ite	ne
  400a5e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400a60:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400a62:	2001      	movs	r0, #1
  400a64:	e02e      	b.n	400ac4 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400a66:	460a      	mov	r2, r1
  400a68:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400a6c:	f7ff febe 	bl	4007ec <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a70:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400a74:	bf14      	ite	ne
  400a76:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400a78:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400a7a:	2001      	movs	r0, #1
  400a7c:	e022      	b.n	400ac4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400a7e:	460a      	mov	r2, r1
  400a80:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400a84:	f7ff feb2 	bl	4007ec <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a88:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400a8c:	bf14      	ite	ne
  400a8e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400a90:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400a92:	2001      	movs	r0, #1
  400a94:	e016      	b.n	400ac4 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400a96:	f7ff fef1 	bl	40087c <pio_set_input>

	default:
		return 0;
	}

	return 1;
  400a9a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400a9c:	e012      	b.n	400ac4 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400a9e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  400aa2:	f004 0301 	and.w	r3, r4, #1
  400aa6:	9300      	str	r3, [sp, #0]
  400aa8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400aac:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400ab0:	bf14      	ite	ne
  400ab2:	2200      	movne	r2, #0
  400ab4:	2201      	moveq	r2, #1
  400ab6:	4631      	mov	r1, r6
  400ab8:	4628      	mov	r0, r5
  400aba:	f7ff fef9 	bl	4008b0 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  400abe:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400ac0:	e000      	b.n	400ac4 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400ac2:	2000      	movs	r0, #0
	}

	return 1;
}
  400ac4:	b002      	add	sp, #8
  400ac6:	bd70      	pop	{r4, r5, r6, pc}

00400ac8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400acc:	4681      	mov	r9, r0
  400ace:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400ad0:	f7ff ff02 	bl	4008d8 <pio_get_interrupt_status>
  400ad4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ad6:	4648      	mov	r0, r9
  400ad8:	f7ff ff00 	bl	4008dc <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  400adc:	4005      	ands	r5, r0
  400ade:	d013      	beq.n	400b08 <pio_handler_process+0x40>
  400ae0:	4c0e      	ldr	r4, [pc, #56]	; (400b1c <pio_handler_process+0x54>)
  400ae2:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400ae6:	6823      	ldr	r3, [r4, #0]
  400ae8:	4543      	cmp	r3, r8
  400aea:	d108      	bne.n	400afe <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400aec:	6861      	ldr	r1, [r4, #4]
  400aee:	4229      	tst	r1, r5
  400af0:	d005      	beq.n	400afe <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400af2:	68e3      	ldr	r3, [r4, #12]
  400af4:	4640      	mov	r0, r8
  400af6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400af8:	6863      	ldr	r3, [r4, #4]
  400afa:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400afe:	42b4      	cmp	r4, r6
  400b00:	d002      	beq.n	400b08 <pio_handler_process+0x40>
  400b02:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400b04:	2d00      	cmp	r5, #0
  400b06:	d1ee      	bne.n	400ae6 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400b08:	4b05      	ldr	r3, [pc, #20]	; (400b20 <pio_handler_process+0x58>)
  400b0a:	681b      	ldr	r3, [r3, #0]
  400b0c:	b123      	cbz	r3, 400b18 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400b0e:	4b05      	ldr	r3, [pc, #20]	; (400b24 <pio_handler_process+0x5c>)
  400b10:	681b      	ldr	r3, [r3, #0]
  400b12:	b10b      	cbz	r3, 400b18 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400b14:	4648      	mov	r0, r9
  400b16:	4798      	blx	r3
  400b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400b1c:	200009f8 	.word	0x200009f8
  400b20:	20000aac 	.word	0x20000aac
  400b24:	200009f4 	.word	0x200009f4

00400b28 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400b28:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400b2a:	210b      	movs	r1, #11
  400b2c:	4801      	ldr	r0, [pc, #4]	; (400b34 <PIOA_Handler+0xc>)
  400b2e:	f7ff ffcb 	bl	400ac8 <pio_handler_process>
  400b32:	bd08      	pop	{r3, pc}
  400b34:	400e0e00 	.word	0x400e0e00

00400b38 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400b38:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400b3a:	210c      	movs	r1, #12
  400b3c:	4801      	ldr	r0, [pc, #4]	; (400b44 <PIOB_Handler+0xc>)
  400b3e:	f7ff ffc3 	bl	400ac8 <pio_handler_process>
  400b42:	bd08      	pop	{r3, pc}
  400b44:	400e1000 	.word	0x400e1000

00400b48 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400b48:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400b4a:	210d      	movs	r1, #13
  400b4c:	4801      	ldr	r0, [pc, #4]	; (400b54 <PIOC_Handler+0xc>)
  400b4e:	f7ff ffbb 	bl	400ac8 <pio_handler_process>
  400b52:	bd08      	pop	{r3, pc}
  400b54:	400e1200 	.word	0x400e1200

00400b58 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400b58:	4a18      	ldr	r2, [pc, #96]	; (400bbc <pmc_switch_mck_to_pllack+0x64>)
  400b5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400b60:	4318      	orrs	r0, r3
  400b62:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b64:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b66:	f013 0f08 	tst.w	r3, #8
  400b6a:	d003      	beq.n	400b74 <pmc_switch_mck_to_pllack+0x1c>
  400b6c:	e009      	b.n	400b82 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b6e:	3b01      	subs	r3, #1
  400b70:	d103      	bne.n	400b7a <pmc_switch_mck_to_pllack+0x22>
  400b72:	e01e      	b.n	400bb2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400b78:	4910      	ldr	r1, [pc, #64]	; (400bbc <pmc_switch_mck_to_pllack+0x64>)
  400b7a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400b7c:	f012 0f08 	tst.w	r2, #8
  400b80:	d0f5      	beq.n	400b6e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400b82:	4a0e      	ldr	r2, [pc, #56]	; (400bbc <pmc_switch_mck_to_pllack+0x64>)
  400b84:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400b86:	f023 0303 	bic.w	r3, r3, #3
  400b8a:	f043 0302 	orr.w	r3, r3, #2
  400b8e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400b90:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400b92:	f010 0008 	ands.w	r0, r0, #8
  400b96:	d004      	beq.n	400ba2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400b98:	2000      	movs	r0, #0
  400b9a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400b9c:	3b01      	subs	r3, #1
  400b9e:	d103      	bne.n	400ba8 <pmc_switch_mck_to_pllack+0x50>
  400ba0:	e009      	b.n	400bb6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ba6:	4905      	ldr	r1, [pc, #20]	; (400bbc <pmc_switch_mck_to_pllack+0x64>)
  400ba8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400baa:	f012 0f08 	tst.w	r2, #8
  400bae:	d0f5      	beq.n	400b9c <pmc_switch_mck_to_pllack+0x44>
  400bb0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400bb2:	2001      	movs	r0, #1
  400bb4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400bb6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400bb8:	4770      	bx	lr
  400bba:	bf00      	nop
  400bbc:	400e0400 	.word	0x400e0400

00400bc0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400bc0:	b138      	cbz	r0, 400bd2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bc2:	4911      	ldr	r1, [pc, #68]	; (400c08 <pmc_switch_mainck_to_xtal+0x48>)
  400bc4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400bc6:	4a11      	ldr	r2, [pc, #68]	; (400c0c <pmc_switch_mainck_to_xtal+0x4c>)
  400bc8:	401a      	ands	r2, r3
  400bca:	4b11      	ldr	r3, [pc, #68]	; (400c10 <pmc_switch_mainck_to_xtal+0x50>)
  400bcc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400bce:	620b      	str	r3, [r1, #32]
  400bd0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bd2:	480d      	ldr	r0, [pc, #52]	; (400c08 <pmc_switch_mainck_to_xtal+0x48>)
  400bd4:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400bd6:	0209      	lsls	r1, r1, #8
  400bd8:	b289      	uxth	r1, r1
  400bda:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  400bde:	f023 0303 	bic.w	r3, r3, #3
  400be2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400be6:	f043 0301 	orr.w	r3, r3, #1
  400bea:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400bec:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400bee:	4602      	mov	r2, r0
  400bf0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400bf2:	f013 0f01 	tst.w	r3, #1
  400bf6:	d0fb      	beq.n	400bf0 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400bf8:	4a03      	ldr	r2, [pc, #12]	; (400c08 <pmc_switch_mainck_to_xtal+0x48>)
  400bfa:	6a13      	ldr	r3, [r2, #32]
  400bfc:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400c04:	6213      	str	r3, [r2, #32]
  400c06:	4770      	bx	lr
  400c08:	400e0400 	.word	0x400e0400
  400c0c:	fec8fffc 	.word	0xfec8fffc
  400c10:	01370002 	.word	0x01370002

00400c14 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400c14:	4b02      	ldr	r3, [pc, #8]	; (400c20 <pmc_osc_is_ready_mainck+0xc>)
  400c16:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c18:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400c1c:	4770      	bx	lr
  400c1e:	bf00      	nop
  400c20:	400e0400 	.word	0x400e0400

00400c24 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400c24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400c28:	4b01      	ldr	r3, [pc, #4]	; (400c30 <pmc_disable_pllack+0xc>)
  400c2a:	629a      	str	r2, [r3, #40]	; 0x28
  400c2c:	4770      	bx	lr
  400c2e:	bf00      	nop
  400c30:	400e0400 	.word	0x400e0400

00400c34 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400c34:	4b02      	ldr	r3, [pc, #8]	; (400c40 <pmc_is_locked_pllack+0xc>)
  400c36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400c38:	f000 0002 	and.w	r0, r0, #2
  400c3c:	4770      	bx	lr
  400c3e:	bf00      	nop
  400c40:	400e0400 	.word	0x400e0400

00400c44 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400c44:	2822      	cmp	r0, #34	; 0x22
  400c46:	d81e      	bhi.n	400c86 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400c48:	281f      	cmp	r0, #31
  400c4a:	d80c      	bhi.n	400c66 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400c4c:	4b11      	ldr	r3, [pc, #68]	; (400c94 <pmc_enable_periph_clk+0x50>)
  400c4e:	699a      	ldr	r2, [r3, #24]
  400c50:	2301      	movs	r3, #1
  400c52:	4083      	lsls	r3, r0
  400c54:	4393      	bics	r3, r2
  400c56:	d018      	beq.n	400c8a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400c58:	2301      	movs	r3, #1
  400c5a:	fa03 f000 	lsl.w	r0, r3, r0
  400c5e:	4b0d      	ldr	r3, [pc, #52]	; (400c94 <pmc_enable_periph_clk+0x50>)
  400c60:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c62:	2000      	movs	r0, #0
  400c64:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400c66:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400c68:	4b0a      	ldr	r3, [pc, #40]	; (400c94 <pmc_enable_periph_clk+0x50>)
  400c6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400c6e:	2301      	movs	r3, #1
  400c70:	4083      	lsls	r3, r0
  400c72:	4393      	bics	r3, r2
  400c74:	d00b      	beq.n	400c8e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400c76:	2301      	movs	r3, #1
  400c78:	fa03 f000 	lsl.w	r0, r3, r0
  400c7c:	4b05      	ldr	r3, [pc, #20]	; (400c94 <pmc_enable_periph_clk+0x50>)
  400c7e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400c82:	2000      	movs	r0, #0
  400c84:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400c86:	2001      	movs	r0, #1
  400c88:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400c8a:	2000      	movs	r0, #0
  400c8c:	4770      	bx	lr
  400c8e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400c90:	4770      	bx	lr
  400c92:	bf00      	nop
  400c94:	400e0400 	.word	0x400e0400

00400c98 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c9c:	6043      	str	r3, [r0, #4]
  400c9e:	4770      	bx	lr

00400ca0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400ca0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400ca2:	23ac      	movs	r3, #172	; 0xac
  400ca4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400ca6:	680b      	ldr	r3, [r1, #0]
  400ca8:	684a      	ldr	r2, [r1, #4]
  400caa:	fbb3 f3f2 	udiv	r3, r3, r2
  400cae:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400cb0:	1e5c      	subs	r4, r3, #1
  400cb2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400cb6:	4294      	cmp	r4, r2
  400cb8:	d80a      	bhi.n	400cd0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400cba:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400cbc:	688b      	ldr	r3, [r1, #8]
  400cbe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400cc0:	f240 2302 	movw	r3, #514	; 0x202
  400cc4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400cc8:	2350      	movs	r3, #80	; 0x50
  400cca:	6003      	str	r3, [r0, #0]

	return 0;
  400ccc:	2000      	movs	r0, #0
  400cce:	e000      	b.n	400cd2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400cd0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400cd2:	bc10      	pop	{r4}
  400cd4:	4770      	bx	lr
  400cd6:	bf00      	nop

00400cd8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400cd8:	6943      	ldr	r3, [r0, #20]
  400cda:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400cde:	bf1a      	itte	ne
  400ce0:	61c1      	strne	r1, [r0, #28]
	return 0;
  400ce2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400ce4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400ce6:	4770      	bx	lr

00400ce8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400ce8:	6943      	ldr	r3, [r0, #20]
  400cea:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400cee:	bf1d      	ittte	ne
  400cf0:	6983      	ldrne	r3, [r0, #24]
  400cf2:	700b      	strbne	r3, [r1, #0]
	return 0;
  400cf4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400cf6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop

00400cfc <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400cfc:	6943      	ldr	r3, [r0, #20]
  400cfe:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400d02:	bf1d      	ittte	ne
  400d04:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400d08:	61c1      	strne	r1, [r0, #28]
	return 0;
  400d0a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400d0c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400d0e:	4770      	bx	lr

00400d10 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d10:	6943      	ldr	r3, [r0, #20]
  400d12:	f013 0f01 	tst.w	r3, #1
  400d16:	d005      	beq.n	400d24 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d18:	6983      	ldr	r3, [r0, #24]
  400d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400d1e:	600b      	str	r3, [r1, #0]

	return 0;
  400d20:	2000      	movs	r0, #0
  400d22:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400d24:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400d26:	4770      	bx	lr

00400d28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d28:	e7fe      	b.n	400d28 <Dummy_Handler>
  400d2a:	bf00      	nop

00400d2c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400d2c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400d2e:	4b20      	ldr	r3, [pc, #128]	; (400db0 <Reset_Handler+0x84>)
  400d30:	4a20      	ldr	r2, [pc, #128]	; (400db4 <Reset_Handler+0x88>)
  400d32:	429a      	cmp	r2, r3
  400d34:	d912      	bls.n	400d5c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400d36:	4b20      	ldr	r3, [pc, #128]	; (400db8 <Reset_Handler+0x8c>)
  400d38:	4a1d      	ldr	r2, [pc, #116]	; (400db0 <Reset_Handler+0x84>)
  400d3a:	429a      	cmp	r2, r3
  400d3c:	d21e      	bcs.n	400d7c <Reset_Handler+0x50>
  400d3e:	4611      	mov	r1, r2
  400d40:	3b01      	subs	r3, #1
  400d42:	1a9b      	subs	r3, r3, r2
  400d44:	f023 0303 	bic.w	r3, r3, #3
  400d48:	3304      	adds	r3, #4
  400d4a:	4a1a      	ldr	r2, [pc, #104]	; (400db4 <Reset_Handler+0x88>)
  400d4c:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400d4e:	f852 0b04 	ldr.w	r0, [r2], #4
  400d52:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400d56:	429a      	cmp	r2, r3
  400d58:	d1f9      	bne.n	400d4e <Reset_Handler+0x22>
  400d5a:	e00f      	b.n	400d7c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400d5c:	4b14      	ldr	r3, [pc, #80]	; (400db0 <Reset_Handler+0x84>)
  400d5e:	4a15      	ldr	r2, [pc, #84]	; (400db4 <Reset_Handler+0x88>)
  400d60:	429a      	cmp	r2, r3
  400d62:	d20b      	bcs.n	400d7c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400d64:	4b14      	ldr	r3, [pc, #80]	; (400db8 <Reset_Handler+0x8c>)
  400d66:	4a12      	ldr	r2, [pc, #72]	; (400db0 <Reset_Handler+0x84>)
  400d68:	1a9a      	subs	r2, r3, r2
  400d6a:	4814      	ldr	r0, [pc, #80]	; (400dbc <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400d6c:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400d6e:	b12a      	cbz	r2, 400d7c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400d70:	f851 2904 	ldr.w	r2, [r1], #-4
  400d74:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400d78:	4281      	cmp	r1, r0
  400d7a:	d1f9      	bne.n	400d70 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400d7c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400d7e:	4b10      	ldr	r3, [pc, #64]	; (400dc0 <Reset_Handler+0x94>)
  400d80:	4a10      	ldr	r2, [pc, #64]	; (400dc4 <Reset_Handler+0x98>)
  400d82:	429a      	cmp	r2, r3
  400d84:	d20b      	bcs.n	400d9e <Reset_Handler+0x72>
  400d86:	1d13      	adds	r3, r2, #4
  400d88:	4a0f      	ldr	r2, [pc, #60]	; (400dc8 <Reset_Handler+0x9c>)
  400d8a:	1ad2      	subs	r2, r2, r3
  400d8c:	f022 0203 	bic.w	r2, r2, #3
  400d90:	441a      	add	r2, r3
  400d92:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400d94:	2100      	movs	r1, #0
  400d96:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400d9a:	429a      	cmp	r2, r3
  400d9c:	d1fb      	bne.n	400d96 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400d9e:	4b0b      	ldr	r3, [pc, #44]	; (400dcc <Reset_Handler+0xa0>)
  400da0:	4a0b      	ldr	r2, [pc, #44]	; (400dd0 <Reset_Handler+0xa4>)
  400da2:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400da4:	f000 f912 	bl	400fcc <__libc_init_array>

	/* Branch to main function */
	main();
  400da8:	f7ff faa4 	bl	4002f4 <main>
  400dac:	e7fe      	b.n	400dac <Reset_Handler+0x80>
  400dae:	bf00      	nop
  400db0:	20000000 	.word	0x20000000
  400db4:	0040436c 	.word	0x0040436c
  400db8:	200009b8 	.word	0x200009b8
  400dbc:	00404368 	.word	0x00404368
  400dc0:	20000ab4 	.word	0x20000ab4
  400dc4:	200009b8 	.word	0x200009b8
  400dc8:	20000ab7 	.word	0x20000ab7
  400dcc:	e000ed00 	.word	0xe000ed00
  400dd0:	00400000 	.word	0x00400000

00400dd4 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400dd4:	4b3d      	ldr	r3, [pc, #244]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dd8:	f003 0303 	and.w	r3, r3, #3
  400ddc:	2b03      	cmp	r3, #3
  400dde:	d85d      	bhi.n	400e9c <SystemCoreClockUpdate+0xc8>
  400de0:	e8df f003 	tbb	[pc, r3]
  400de4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400de8:	4b39      	ldr	r3, [pc, #228]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400dea:	695b      	ldr	r3, [r3, #20]
  400dec:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400df0:	bf14      	ite	ne
  400df2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400df6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400dfa:	4b36      	ldr	r3, [pc, #216]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400dfc:	601a      	str	r2, [r3, #0]
  400dfe:	e04d      	b.n	400e9c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e00:	4b32      	ldr	r3, [pc, #200]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400e02:	6a1b      	ldr	r3, [r3, #32]
  400e04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e08:	d003      	beq.n	400e12 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400e0a:	4a33      	ldr	r2, [pc, #204]	; (400ed8 <SystemCoreClockUpdate+0x104>)
  400e0c:	4b31      	ldr	r3, [pc, #196]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e0e:	601a      	str	r2, [r3, #0]
  400e10:	e044      	b.n	400e9c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e12:	4a32      	ldr	r2, [pc, #200]	; (400edc <SystemCoreClockUpdate+0x108>)
  400e14:	4b2f      	ldr	r3, [pc, #188]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e16:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e18:	4b2c      	ldr	r3, [pc, #176]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400e1a:	6a1b      	ldr	r3, [r3, #32]
  400e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e20:	2b10      	cmp	r3, #16
  400e22:	d002      	beq.n	400e2a <SystemCoreClockUpdate+0x56>
  400e24:	2b20      	cmp	r3, #32
  400e26:	d004      	beq.n	400e32 <SystemCoreClockUpdate+0x5e>
  400e28:	e038      	b.n	400e9c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e2a:	4a2d      	ldr	r2, [pc, #180]	; (400ee0 <SystemCoreClockUpdate+0x10c>)
  400e2c:	4b29      	ldr	r3, [pc, #164]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e2e:	601a      	str	r2, [r3, #0]
			break;
  400e30:	e034      	b.n	400e9c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e32:	4a29      	ldr	r2, [pc, #164]	; (400ed8 <SystemCoreClockUpdate+0x104>)
  400e34:	4b27      	ldr	r3, [pc, #156]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e36:	601a      	str	r2, [r3, #0]
			break;
  400e38:	e030      	b.n	400e9c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e3a:	4b24      	ldr	r3, [pc, #144]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400e3c:	6a1b      	ldr	r3, [r3, #32]
  400e3e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e42:	d003      	beq.n	400e4c <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400e44:	4a24      	ldr	r2, [pc, #144]	; (400ed8 <SystemCoreClockUpdate+0x104>)
  400e46:	4b23      	ldr	r3, [pc, #140]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e48:	601a      	str	r2, [r3, #0]
  400e4a:	e012      	b.n	400e72 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e4c:	4a23      	ldr	r2, [pc, #140]	; (400edc <SystemCoreClockUpdate+0x108>)
  400e4e:	4b21      	ldr	r3, [pc, #132]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e50:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e52:	4b1e      	ldr	r3, [pc, #120]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400e54:	6a1b      	ldr	r3, [r3, #32]
  400e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e5a:	2b10      	cmp	r3, #16
  400e5c:	d002      	beq.n	400e64 <SystemCoreClockUpdate+0x90>
  400e5e:	2b20      	cmp	r3, #32
  400e60:	d004      	beq.n	400e6c <SystemCoreClockUpdate+0x98>
  400e62:	e006      	b.n	400e72 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400e64:	4a1e      	ldr	r2, [pc, #120]	; (400ee0 <SystemCoreClockUpdate+0x10c>)
  400e66:	4b1b      	ldr	r3, [pc, #108]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e68:	601a      	str	r2, [r3, #0]
					break;
  400e6a:	e002      	b.n	400e72 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400e6c:	4a1a      	ldr	r2, [pc, #104]	; (400ed8 <SystemCoreClockUpdate+0x104>)
  400e6e:	4b19      	ldr	r3, [pc, #100]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e70:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400e72:	4b16      	ldr	r3, [pc, #88]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e76:	f003 0303 	and.w	r3, r3, #3
  400e7a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400e7c:	4a13      	ldr	r2, [pc, #76]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400e7e:	bf07      	ittee	eq
  400e80:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400e82:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400e84:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400e86:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400e88:	4812      	ldr	r0, [pc, #72]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e8a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400e8e:	6803      	ldr	r3, [r0, #0]
  400e90:	fb01 3303 	mla	r3, r1, r3, r3
  400e94:	b2d2      	uxtb	r2, r2
  400e96:	fbb3 f3f2 	udiv	r3, r3, r2
  400e9a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400e9c:	4b0b      	ldr	r3, [pc, #44]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ea4:	2b70      	cmp	r3, #112	; 0x70
  400ea6:	d107      	bne.n	400eb8 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400ea8:	4a0a      	ldr	r2, [pc, #40]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400eaa:	6813      	ldr	r3, [r2, #0]
  400eac:	490d      	ldr	r1, [pc, #52]	; (400ee4 <SystemCoreClockUpdate+0x110>)
  400eae:	fba1 1303 	umull	r1, r3, r1, r3
  400eb2:	085b      	lsrs	r3, r3, #1
  400eb4:	6013      	str	r3, [r2, #0]
  400eb6:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400eb8:	4b04      	ldr	r3, [pc, #16]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400ebc:	4905      	ldr	r1, [pc, #20]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400ebe:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400ec2:	680b      	ldr	r3, [r1, #0]
  400ec4:	40d3      	lsrs	r3, r2
  400ec6:	600b      	str	r3, [r1, #0]
  400ec8:	4770      	bx	lr
  400eca:	bf00      	nop
  400ecc:	400e0400 	.word	0x400e0400
  400ed0:	400e1410 	.word	0x400e1410
  400ed4:	2000000c 	.word	0x2000000c
  400ed8:	00b71b00 	.word	0x00b71b00
  400edc:	003d0900 	.word	0x003d0900
  400ee0:	007a1200 	.word	0x007a1200
  400ee4:	aaaaaaab 	.word	0xaaaaaaab

00400ee8 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400ee8:	4b1a      	ldr	r3, [pc, #104]	; (400f54 <system_init_flash+0x6c>)
  400eea:	4298      	cmp	r0, r3
  400eec:	d807      	bhi.n	400efe <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400eee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400ef2:	4a19      	ldr	r2, [pc, #100]	; (400f58 <system_init_flash+0x70>)
  400ef4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400ef6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400efa:	6013      	str	r3, [r2, #0]
  400efc:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400efe:	4b17      	ldr	r3, [pc, #92]	; (400f5c <system_init_flash+0x74>)
  400f00:	4298      	cmp	r0, r3
  400f02:	d806      	bhi.n	400f12 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f04:	4b16      	ldr	r3, [pc, #88]	; (400f60 <system_init_flash+0x78>)
  400f06:	4a14      	ldr	r2, [pc, #80]	; (400f58 <system_init_flash+0x70>)
  400f08:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f0a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f0e:	6013      	str	r3, [r2, #0]
  400f10:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400f12:	4b14      	ldr	r3, [pc, #80]	; (400f64 <system_init_flash+0x7c>)
  400f14:	4298      	cmp	r0, r3
  400f16:	d806      	bhi.n	400f26 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f18:	4b13      	ldr	r3, [pc, #76]	; (400f68 <system_init_flash+0x80>)
  400f1a:	4a0f      	ldr	r2, [pc, #60]	; (400f58 <system_init_flash+0x70>)
  400f1c:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f1e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f22:	6013      	str	r3, [r2, #0]
  400f24:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400f26:	4b11      	ldr	r3, [pc, #68]	; (400f6c <system_init_flash+0x84>)
  400f28:	4298      	cmp	r0, r3
  400f2a:	d806      	bhi.n	400f3a <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f2c:	4b10      	ldr	r3, [pc, #64]	; (400f70 <system_init_flash+0x88>)
  400f2e:	4a0a      	ldr	r2, [pc, #40]	; (400f58 <system_init_flash+0x70>)
  400f30:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f32:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f36:	6013      	str	r3, [r2, #0]
  400f38:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400f3a:	4b0e      	ldr	r3, [pc, #56]	; (400f74 <system_init_flash+0x8c>)
  400f3c:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400f3e:	bf94      	ite	ls
  400f40:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f44:	4b0c      	ldrhi	r3, [pc, #48]	; (400f78 <system_init_flash+0x90>)
  400f46:	4a04      	ldr	r2, [pc, #16]	; (400f58 <system_init_flash+0x70>)
  400f48:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f4a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400f4e:	6013      	str	r3, [r2, #0]
  400f50:	4770      	bx	lr
  400f52:	bf00      	nop
  400f54:	01312cff 	.word	0x01312cff
  400f58:	400e0a00 	.word	0x400e0a00
  400f5c:	026259ff 	.word	0x026259ff
  400f60:	04000100 	.word	0x04000100
  400f64:	039386ff 	.word	0x039386ff
  400f68:	04000200 	.word	0x04000200
  400f6c:	04c4b3ff 	.word	0x04c4b3ff
  400f70:	04000300 	.word	0x04000300
  400f74:	05f5e0ff 	.word	0x05f5e0ff
  400f78:	04000500 	.word	0x04000500

00400f7c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400f7c:	4b09      	ldr	r3, [pc, #36]	; (400fa4 <_sbrk+0x28>)
  400f7e:	681b      	ldr	r3, [r3, #0]
  400f80:	b913      	cbnz	r3, 400f88 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400f82:	4a09      	ldr	r2, [pc, #36]	; (400fa8 <_sbrk+0x2c>)
  400f84:	4b07      	ldr	r3, [pc, #28]	; (400fa4 <_sbrk+0x28>)
  400f86:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400f88:	4b06      	ldr	r3, [pc, #24]	; (400fa4 <_sbrk+0x28>)
  400f8a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400f8c:	181a      	adds	r2, r3, r0
  400f8e:	4907      	ldr	r1, [pc, #28]	; (400fac <_sbrk+0x30>)
  400f90:	4291      	cmp	r1, r2
  400f92:	db04      	blt.n	400f9e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400f94:	4610      	mov	r0, r2
  400f96:	4a03      	ldr	r2, [pc, #12]	; (400fa4 <_sbrk+0x28>)
  400f98:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400f9a:	4618      	mov	r0, r3
  400f9c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400fa2:	4770      	bx	lr
  400fa4:	20000a68 	.word	0x20000a68
  400fa8:	20003ab8 	.word	0x20003ab8
  400fac:	20027ffc 	.word	0x20027ffc

00400fb0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  400fb4:	4770      	bx	lr
  400fb6:	bf00      	nop

00400fb8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400fbc:	604b      	str	r3, [r1, #4]

	return 0;
}
  400fbe:	2000      	movs	r0, #0
  400fc0:	4770      	bx	lr
  400fc2:	bf00      	nop

00400fc4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400fc4:	2001      	movs	r0, #1
  400fc6:	4770      	bx	lr

00400fc8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400fc8:	2000      	movs	r0, #0
  400fca:	4770      	bx	lr

00400fcc <__libc_init_array>:
  400fcc:	b570      	push	{r4, r5, r6, lr}
  400fce:	4e0f      	ldr	r6, [pc, #60]	; (40100c <__libc_init_array+0x40>)
  400fd0:	4d0f      	ldr	r5, [pc, #60]	; (401010 <__libc_init_array+0x44>)
  400fd2:	1b76      	subs	r6, r6, r5
  400fd4:	10b6      	asrs	r6, r6, #2
  400fd6:	bf18      	it	ne
  400fd8:	2400      	movne	r4, #0
  400fda:	d005      	beq.n	400fe8 <__libc_init_array+0x1c>
  400fdc:	3401      	adds	r4, #1
  400fde:	f855 3b04 	ldr.w	r3, [r5], #4
  400fe2:	4798      	blx	r3
  400fe4:	42a6      	cmp	r6, r4
  400fe6:	d1f9      	bne.n	400fdc <__libc_init_array+0x10>
  400fe8:	4e0a      	ldr	r6, [pc, #40]	; (401014 <__libc_init_array+0x48>)
  400fea:	4d0b      	ldr	r5, [pc, #44]	; (401018 <__libc_init_array+0x4c>)
  400fec:	1b76      	subs	r6, r6, r5
  400fee:	f003 f9a3 	bl	404338 <_init>
  400ff2:	10b6      	asrs	r6, r6, #2
  400ff4:	bf18      	it	ne
  400ff6:	2400      	movne	r4, #0
  400ff8:	d006      	beq.n	401008 <__libc_init_array+0x3c>
  400ffa:	3401      	adds	r4, #1
  400ffc:	f855 3b04 	ldr.w	r3, [r5], #4
  401000:	4798      	blx	r3
  401002:	42a6      	cmp	r6, r4
  401004:	d1f9      	bne.n	400ffa <__libc_init_array+0x2e>
  401006:	bd70      	pop	{r4, r5, r6, pc}
  401008:	bd70      	pop	{r4, r5, r6, pc}
  40100a:	bf00      	nop
  40100c:	00404344 	.word	0x00404344
  401010:	00404344 	.word	0x00404344
  401014:	0040434c 	.word	0x0040434c
  401018:	00404344 	.word	0x00404344

0040101c <iprintf>:
  40101c:	b40f      	push	{r0, r1, r2, r3}
  40101e:	b500      	push	{lr}
  401020:	4907      	ldr	r1, [pc, #28]	; (401040 <iprintf+0x24>)
  401022:	b083      	sub	sp, #12
  401024:	ab04      	add	r3, sp, #16
  401026:	6808      	ldr	r0, [r1, #0]
  401028:	f853 2b04 	ldr.w	r2, [r3], #4
  40102c:	6881      	ldr	r1, [r0, #8]
  40102e:	9301      	str	r3, [sp, #4]
  401030:	f000 f9f0 	bl	401414 <_vfiprintf_r>
  401034:	b003      	add	sp, #12
  401036:	f85d eb04 	ldr.w	lr, [sp], #4
  40103a:	b004      	add	sp, #16
  40103c:	4770      	bx	lr
  40103e:	bf00      	nop
  401040:	20000438 	.word	0x20000438

00401044 <memset>:
  401044:	b470      	push	{r4, r5, r6}
  401046:	0784      	lsls	r4, r0, #30
  401048:	d046      	beq.n	4010d8 <memset+0x94>
  40104a:	1e54      	subs	r4, r2, #1
  40104c:	2a00      	cmp	r2, #0
  40104e:	d041      	beq.n	4010d4 <memset+0x90>
  401050:	b2cd      	uxtb	r5, r1
  401052:	4603      	mov	r3, r0
  401054:	e002      	b.n	40105c <memset+0x18>
  401056:	1e62      	subs	r2, r4, #1
  401058:	b3e4      	cbz	r4, 4010d4 <memset+0x90>
  40105a:	4614      	mov	r4, r2
  40105c:	f803 5b01 	strb.w	r5, [r3], #1
  401060:	079a      	lsls	r2, r3, #30
  401062:	d1f8      	bne.n	401056 <memset+0x12>
  401064:	2c03      	cmp	r4, #3
  401066:	d92e      	bls.n	4010c6 <memset+0x82>
  401068:	b2cd      	uxtb	r5, r1
  40106a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40106e:	2c0f      	cmp	r4, #15
  401070:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401074:	d919      	bls.n	4010aa <memset+0x66>
  401076:	f103 0210 	add.w	r2, r3, #16
  40107a:	4626      	mov	r6, r4
  40107c:	3e10      	subs	r6, #16
  40107e:	2e0f      	cmp	r6, #15
  401080:	f842 5c10 	str.w	r5, [r2, #-16]
  401084:	f842 5c0c 	str.w	r5, [r2, #-12]
  401088:	f842 5c08 	str.w	r5, [r2, #-8]
  40108c:	f842 5c04 	str.w	r5, [r2, #-4]
  401090:	f102 0210 	add.w	r2, r2, #16
  401094:	d8f2      	bhi.n	40107c <memset+0x38>
  401096:	f1a4 0210 	sub.w	r2, r4, #16
  40109a:	f022 020f 	bic.w	r2, r2, #15
  40109e:	f004 040f 	and.w	r4, r4, #15
  4010a2:	3210      	adds	r2, #16
  4010a4:	2c03      	cmp	r4, #3
  4010a6:	4413      	add	r3, r2
  4010a8:	d90d      	bls.n	4010c6 <memset+0x82>
  4010aa:	461e      	mov	r6, r3
  4010ac:	4622      	mov	r2, r4
  4010ae:	3a04      	subs	r2, #4
  4010b0:	2a03      	cmp	r2, #3
  4010b2:	f846 5b04 	str.w	r5, [r6], #4
  4010b6:	d8fa      	bhi.n	4010ae <memset+0x6a>
  4010b8:	1f22      	subs	r2, r4, #4
  4010ba:	f022 0203 	bic.w	r2, r2, #3
  4010be:	3204      	adds	r2, #4
  4010c0:	4413      	add	r3, r2
  4010c2:	f004 0403 	and.w	r4, r4, #3
  4010c6:	b12c      	cbz	r4, 4010d4 <memset+0x90>
  4010c8:	b2c9      	uxtb	r1, r1
  4010ca:	441c      	add	r4, r3
  4010cc:	f803 1b01 	strb.w	r1, [r3], #1
  4010d0:	42a3      	cmp	r3, r4
  4010d2:	d1fb      	bne.n	4010cc <memset+0x88>
  4010d4:	bc70      	pop	{r4, r5, r6}
  4010d6:	4770      	bx	lr
  4010d8:	4614      	mov	r4, r2
  4010da:	4603      	mov	r3, r0
  4010dc:	e7c2      	b.n	401064 <memset+0x20>
  4010de:	bf00      	nop

004010e0 <_puts_r>:
  4010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4010e2:	4605      	mov	r5, r0
  4010e4:	b089      	sub	sp, #36	; 0x24
  4010e6:	4608      	mov	r0, r1
  4010e8:	460c      	mov	r4, r1
  4010ea:	f000 f8e9 	bl	4012c0 <strlen>
  4010ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010f0:	4f14      	ldr	r7, [pc, #80]	; (401144 <_puts_r+0x64>)
  4010f2:	9404      	str	r4, [sp, #16]
  4010f4:	2601      	movs	r6, #1
  4010f6:	1c44      	adds	r4, r0, #1
  4010f8:	a904      	add	r1, sp, #16
  4010fa:	2202      	movs	r2, #2
  4010fc:	9403      	str	r4, [sp, #12]
  4010fe:	9005      	str	r0, [sp, #20]
  401100:	68ac      	ldr	r4, [r5, #8]
  401102:	9706      	str	r7, [sp, #24]
  401104:	9607      	str	r6, [sp, #28]
  401106:	9101      	str	r1, [sp, #4]
  401108:	9202      	str	r2, [sp, #8]
  40110a:	b1b3      	cbz	r3, 40113a <_puts_r+0x5a>
  40110c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401110:	049a      	lsls	r2, r3, #18
  401112:	d406      	bmi.n	401122 <_puts_r+0x42>
  401114:	6e62      	ldr	r2, [r4, #100]	; 0x64
  401116:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40111a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40111e:	81a3      	strh	r3, [r4, #12]
  401120:	6662      	str	r2, [r4, #100]	; 0x64
  401122:	4621      	mov	r1, r4
  401124:	4628      	mov	r0, r5
  401126:	aa01      	add	r2, sp, #4
  401128:	f001 fc06 	bl	402938 <__sfvwrite_r>
  40112c:	2800      	cmp	r0, #0
  40112e:	bf14      	ite	ne
  401130:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  401134:	200a      	moveq	r0, #10
  401136:	b009      	add	sp, #36	; 0x24
  401138:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40113a:	4628      	mov	r0, r5
  40113c:	f001 fa4a 	bl	4025d4 <__sinit>
  401140:	e7e4      	b.n	40110c <_puts_r+0x2c>
  401142:	bf00      	nop
  401144:	004041ac 	.word	0x004041ac

00401148 <puts>:
  401148:	4b02      	ldr	r3, [pc, #8]	; (401154 <puts+0xc>)
  40114a:	4601      	mov	r1, r0
  40114c:	6818      	ldr	r0, [r3, #0]
  40114e:	f7ff bfc7 	b.w	4010e0 <_puts_r>
  401152:	bf00      	nop
  401154:	20000438 	.word	0x20000438

00401158 <setbuf>:
  401158:	2900      	cmp	r1, #0
  40115a:	bf0c      	ite	eq
  40115c:	2202      	moveq	r2, #2
  40115e:	2200      	movne	r2, #0
  401160:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401164:	f000 b800 	b.w	401168 <setvbuf>

00401168 <setvbuf>:
  401168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40116c:	4c51      	ldr	r4, [pc, #324]	; (4012b4 <setvbuf+0x14c>)
  40116e:	6825      	ldr	r5, [r4, #0]
  401170:	b083      	sub	sp, #12
  401172:	4604      	mov	r4, r0
  401174:	460f      	mov	r7, r1
  401176:	4690      	mov	r8, r2
  401178:	461e      	mov	r6, r3
  40117a:	b115      	cbz	r5, 401182 <setvbuf+0x1a>
  40117c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40117e:	2b00      	cmp	r3, #0
  401180:	d079      	beq.n	401276 <setvbuf+0x10e>
  401182:	f1b8 0f02 	cmp.w	r8, #2
  401186:	d004      	beq.n	401192 <setvbuf+0x2a>
  401188:	f1b8 0f01 	cmp.w	r8, #1
  40118c:	d87f      	bhi.n	40128e <setvbuf+0x126>
  40118e:	2e00      	cmp	r6, #0
  401190:	db7d      	blt.n	40128e <setvbuf+0x126>
  401192:	4621      	mov	r1, r4
  401194:	4628      	mov	r0, r5
  401196:	f001 f989 	bl	4024ac <_fflush_r>
  40119a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40119c:	b141      	cbz	r1, 4011b0 <setvbuf+0x48>
  40119e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4011a2:	4299      	cmp	r1, r3
  4011a4:	d002      	beq.n	4011ac <setvbuf+0x44>
  4011a6:	4628      	mov	r0, r5
  4011a8:	f001 fade 	bl	402768 <_free_r>
  4011ac:	2300      	movs	r3, #0
  4011ae:	6323      	str	r3, [r4, #48]	; 0x30
  4011b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4011b4:	2200      	movs	r2, #0
  4011b6:	61a2      	str	r2, [r4, #24]
  4011b8:	6062      	str	r2, [r4, #4]
  4011ba:	061a      	lsls	r2, r3, #24
  4011bc:	d454      	bmi.n	401268 <setvbuf+0x100>
  4011be:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4011c2:	f023 0303 	bic.w	r3, r3, #3
  4011c6:	f1b8 0f02 	cmp.w	r8, #2
  4011ca:	81a3      	strh	r3, [r4, #12]
  4011cc:	d039      	beq.n	401242 <setvbuf+0xda>
  4011ce:	ab01      	add	r3, sp, #4
  4011d0:	466a      	mov	r2, sp
  4011d2:	4621      	mov	r1, r4
  4011d4:	4628      	mov	r0, r5
  4011d6:	f001 fd69 	bl	402cac <__swhatbuf_r>
  4011da:	89a3      	ldrh	r3, [r4, #12]
  4011dc:	4318      	orrs	r0, r3
  4011de:	81a0      	strh	r0, [r4, #12]
  4011e0:	b326      	cbz	r6, 40122c <setvbuf+0xc4>
  4011e2:	b327      	cbz	r7, 40122e <setvbuf+0xc6>
  4011e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4011e6:	2b00      	cmp	r3, #0
  4011e8:	d04d      	beq.n	401286 <setvbuf+0x11e>
  4011ea:	9b00      	ldr	r3, [sp, #0]
  4011ec:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4011f0:	6027      	str	r7, [r4, #0]
  4011f2:	429e      	cmp	r6, r3
  4011f4:	bf1c      	itt	ne
  4011f6:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4011fa:	81a0      	strhne	r0, [r4, #12]
  4011fc:	f1b8 0f01 	cmp.w	r8, #1
  401200:	bf08      	it	eq
  401202:	f040 0001 	orreq.w	r0, r0, #1
  401206:	b283      	uxth	r3, r0
  401208:	bf08      	it	eq
  40120a:	81a0      	strheq	r0, [r4, #12]
  40120c:	f003 0008 	and.w	r0, r3, #8
  401210:	b280      	uxth	r0, r0
  401212:	6127      	str	r7, [r4, #16]
  401214:	6166      	str	r6, [r4, #20]
  401216:	b318      	cbz	r0, 401260 <setvbuf+0xf8>
  401218:	f013 0001 	ands.w	r0, r3, #1
  40121c:	d02f      	beq.n	40127e <setvbuf+0x116>
  40121e:	2000      	movs	r0, #0
  401220:	4276      	negs	r6, r6
  401222:	61a6      	str	r6, [r4, #24]
  401224:	60a0      	str	r0, [r4, #8]
  401226:	b003      	add	sp, #12
  401228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40122c:	9e00      	ldr	r6, [sp, #0]
  40122e:	4630      	mov	r0, r6
  401230:	f001 fdb0 	bl	402d94 <malloc>
  401234:	4607      	mov	r7, r0
  401236:	b368      	cbz	r0, 401294 <setvbuf+0x12c>
  401238:	89a3      	ldrh	r3, [r4, #12]
  40123a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40123e:	81a3      	strh	r3, [r4, #12]
  401240:	e7d0      	b.n	4011e4 <setvbuf+0x7c>
  401242:	2000      	movs	r0, #0
  401244:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401248:	f043 0302 	orr.w	r3, r3, #2
  40124c:	2500      	movs	r5, #0
  40124e:	2101      	movs	r1, #1
  401250:	81a3      	strh	r3, [r4, #12]
  401252:	60a5      	str	r5, [r4, #8]
  401254:	6022      	str	r2, [r4, #0]
  401256:	6122      	str	r2, [r4, #16]
  401258:	6161      	str	r1, [r4, #20]
  40125a:	b003      	add	sp, #12
  40125c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401260:	60a0      	str	r0, [r4, #8]
  401262:	b003      	add	sp, #12
  401264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401268:	6921      	ldr	r1, [r4, #16]
  40126a:	4628      	mov	r0, r5
  40126c:	f001 fa7c 	bl	402768 <_free_r>
  401270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401274:	e7a3      	b.n	4011be <setvbuf+0x56>
  401276:	4628      	mov	r0, r5
  401278:	f001 f9ac 	bl	4025d4 <__sinit>
  40127c:	e781      	b.n	401182 <setvbuf+0x1a>
  40127e:	60a6      	str	r6, [r4, #8]
  401280:	b003      	add	sp, #12
  401282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401286:	4628      	mov	r0, r5
  401288:	f001 f9a4 	bl	4025d4 <__sinit>
  40128c:	e7ad      	b.n	4011ea <setvbuf+0x82>
  40128e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401292:	e7e2      	b.n	40125a <setvbuf+0xf2>
  401294:	f8dd 9000 	ldr.w	r9, [sp]
  401298:	45b1      	cmp	r9, r6
  40129a:	d006      	beq.n	4012aa <setvbuf+0x142>
  40129c:	4648      	mov	r0, r9
  40129e:	f001 fd79 	bl	402d94 <malloc>
  4012a2:	4607      	mov	r7, r0
  4012a4:	b108      	cbz	r0, 4012aa <setvbuf+0x142>
  4012a6:	464e      	mov	r6, r9
  4012a8:	e7c6      	b.n	401238 <setvbuf+0xd0>
  4012aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4012ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4012b2:	e7c7      	b.n	401244 <setvbuf+0xdc>
  4012b4:	20000438 	.word	0x20000438
	...

004012c0 <strlen>:
  4012c0:	f890 f000 	pld	[r0]
  4012c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4012c8:	f020 0107 	bic.w	r1, r0, #7
  4012cc:	f06f 0c00 	mvn.w	ip, #0
  4012d0:	f010 0407 	ands.w	r4, r0, #7
  4012d4:	f891 f020 	pld	[r1, #32]
  4012d8:	f040 8049 	bne.w	40136e <strlen+0xae>
  4012dc:	f04f 0400 	mov.w	r4, #0
  4012e0:	f06f 0007 	mvn.w	r0, #7
  4012e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4012e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4012ec:	f100 0008 	add.w	r0, r0, #8
  4012f0:	fa82 f24c 	uadd8	r2, r2, ip
  4012f4:	faa4 f28c 	sel	r2, r4, ip
  4012f8:	fa83 f34c 	uadd8	r3, r3, ip
  4012fc:	faa2 f38c 	sel	r3, r2, ip
  401300:	bb4b      	cbnz	r3, 401356 <strlen+0x96>
  401302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401306:	fa82 f24c 	uadd8	r2, r2, ip
  40130a:	f100 0008 	add.w	r0, r0, #8
  40130e:	faa4 f28c 	sel	r2, r4, ip
  401312:	fa83 f34c 	uadd8	r3, r3, ip
  401316:	faa2 f38c 	sel	r3, r2, ip
  40131a:	b9e3      	cbnz	r3, 401356 <strlen+0x96>
  40131c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  401320:	fa82 f24c 	uadd8	r2, r2, ip
  401324:	f100 0008 	add.w	r0, r0, #8
  401328:	faa4 f28c 	sel	r2, r4, ip
  40132c:	fa83 f34c 	uadd8	r3, r3, ip
  401330:	faa2 f38c 	sel	r3, r2, ip
  401334:	b97b      	cbnz	r3, 401356 <strlen+0x96>
  401336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40133a:	f101 0120 	add.w	r1, r1, #32
  40133e:	fa82 f24c 	uadd8	r2, r2, ip
  401342:	f100 0008 	add.w	r0, r0, #8
  401346:	faa4 f28c 	sel	r2, r4, ip
  40134a:	fa83 f34c 	uadd8	r3, r3, ip
  40134e:	faa2 f38c 	sel	r3, r2, ip
  401352:	2b00      	cmp	r3, #0
  401354:	d0c6      	beq.n	4012e4 <strlen+0x24>
  401356:	2a00      	cmp	r2, #0
  401358:	bf04      	itt	eq
  40135a:	3004      	addeq	r0, #4
  40135c:	461a      	moveq	r2, r3
  40135e:	ba12      	rev	r2, r2
  401360:	fab2 f282 	clz	r2, r2
  401364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  401368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40136c:	4770      	bx	lr
  40136e:	e9d1 2300 	ldrd	r2, r3, [r1]
  401372:	f004 0503 	and.w	r5, r4, #3
  401376:	f1c4 0000 	rsb	r0, r4, #0
  40137a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40137e:	f014 0f04 	tst.w	r4, #4
  401382:	f891 f040 	pld	[r1, #64]	; 0x40
  401386:	fa0c f505 	lsl.w	r5, ip, r5
  40138a:	ea62 0205 	orn	r2, r2, r5
  40138e:	bf1c      	itt	ne
  401390:	ea63 0305 	ornne	r3, r3, r5
  401394:	4662      	movne	r2, ip
  401396:	f04f 0400 	mov.w	r4, #0
  40139a:	e7a9      	b.n	4012f0 <strlen+0x30>

0040139c <__sprint_r.part.0>:
  40139c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40139e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4013a2:	049c      	lsls	r4, r3, #18
  4013a4:	4692      	mov	sl, r2
  4013a6:	d52c      	bpl.n	401402 <__sprint_r.part.0+0x66>
  4013a8:	6893      	ldr	r3, [r2, #8]
  4013aa:	6812      	ldr	r2, [r2, #0]
  4013ac:	b33b      	cbz	r3, 4013fe <__sprint_r.part.0+0x62>
  4013ae:	460f      	mov	r7, r1
  4013b0:	4680      	mov	r8, r0
  4013b2:	f102 0908 	add.w	r9, r2, #8
  4013b6:	e919 0060 	ldmdb	r9, {r5, r6}
  4013ba:	08b6      	lsrs	r6, r6, #2
  4013bc:	d017      	beq.n	4013ee <__sprint_r.part.0+0x52>
  4013be:	3d04      	subs	r5, #4
  4013c0:	2400      	movs	r4, #0
  4013c2:	e001      	b.n	4013c8 <__sprint_r.part.0+0x2c>
  4013c4:	42a6      	cmp	r6, r4
  4013c6:	d010      	beq.n	4013ea <__sprint_r.part.0+0x4e>
  4013c8:	463a      	mov	r2, r7
  4013ca:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4013ce:	4640      	mov	r0, r8
  4013d0:	f001 f96a 	bl	4026a8 <_fputwc_r>
  4013d4:	1c43      	adds	r3, r0, #1
  4013d6:	f104 0401 	add.w	r4, r4, #1
  4013da:	d1f3      	bne.n	4013c4 <__sprint_r.part.0+0x28>
  4013dc:	2300      	movs	r3, #0
  4013de:	f8ca 3008 	str.w	r3, [sl, #8]
  4013e2:	f8ca 3004 	str.w	r3, [sl, #4]
  4013e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4013ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4013ee:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  4013f2:	f8ca 3008 	str.w	r3, [sl, #8]
  4013f6:	f109 0908 	add.w	r9, r9, #8
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d1db      	bne.n	4013b6 <__sprint_r.part.0+0x1a>
  4013fe:	2000      	movs	r0, #0
  401400:	e7ec      	b.n	4013dc <__sprint_r.part.0+0x40>
  401402:	f001 fa99 	bl	402938 <__sfvwrite_r>
  401406:	2300      	movs	r3, #0
  401408:	f8ca 3008 	str.w	r3, [sl, #8]
  40140c:	f8ca 3004 	str.w	r3, [sl, #4]
  401410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401414 <_vfiprintf_r>:
  401414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401418:	b0ab      	sub	sp, #172	; 0xac
  40141a:	461c      	mov	r4, r3
  40141c:	9100      	str	r1, [sp, #0]
  40141e:	4690      	mov	r8, r2
  401420:	9304      	str	r3, [sp, #16]
  401422:	9005      	str	r0, [sp, #20]
  401424:	b118      	cbz	r0, 40142e <_vfiprintf_r+0x1a>
  401426:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401428:	2b00      	cmp	r3, #0
  40142a:	f000 80de 	beq.w	4015ea <_vfiprintf_r+0x1d6>
  40142e:	9800      	ldr	r0, [sp, #0]
  401430:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  401434:	b28a      	uxth	r2, r1
  401436:	0495      	lsls	r5, r2, #18
  401438:	d407      	bmi.n	40144a <_vfiprintf_r+0x36>
  40143a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  40143c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  401440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401444:	8182      	strh	r2, [r0, #12]
  401446:	6643      	str	r3, [r0, #100]	; 0x64
  401448:	b292      	uxth	r2, r2
  40144a:	0711      	lsls	r1, r2, #28
  40144c:	f140 80b1 	bpl.w	4015b2 <_vfiprintf_r+0x19e>
  401450:	9b00      	ldr	r3, [sp, #0]
  401452:	691b      	ldr	r3, [r3, #16]
  401454:	2b00      	cmp	r3, #0
  401456:	f000 80ac 	beq.w	4015b2 <_vfiprintf_r+0x19e>
  40145a:	f002 021a 	and.w	r2, r2, #26
  40145e:	2a0a      	cmp	r2, #10
  401460:	f000 80b5 	beq.w	4015ce <_vfiprintf_r+0x1ba>
  401464:	2300      	movs	r3, #0
  401466:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  40146a:	9302      	str	r3, [sp, #8]
  40146c:	930f      	str	r3, [sp, #60]	; 0x3c
  40146e:	930e      	str	r3, [sp, #56]	; 0x38
  401470:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  401474:	46da      	mov	sl, fp
  401476:	f898 3000 	ldrb.w	r3, [r8]
  40147a:	4644      	mov	r4, r8
  40147c:	b1fb      	cbz	r3, 4014be <_vfiprintf_r+0xaa>
  40147e:	2b25      	cmp	r3, #37	; 0x25
  401480:	d102      	bne.n	401488 <_vfiprintf_r+0x74>
  401482:	e01c      	b.n	4014be <_vfiprintf_r+0xaa>
  401484:	2b25      	cmp	r3, #37	; 0x25
  401486:	d003      	beq.n	401490 <_vfiprintf_r+0x7c>
  401488:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40148c:	2b00      	cmp	r3, #0
  40148e:	d1f9      	bne.n	401484 <_vfiprintf_r+0x70>
  401490:	ebc8 0504 	rsb	r5, r8, r4
  401494:	b19d      	cbz	r5, 4014be <_vfiprintf_r+0xaa>
  401496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40149a:	f8ca 8000 	str.w	r8, [sl]
  40149e:	3301      	adds	r3, #1
  4014a0:	442a      	add	r2, r5
  4014a2:	2b07      	cmp	r3, #7
  4014a4:	f8ca 5004 	str.w	r5, [sl, #4]
  4014a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4014aa:	930e      	str	r3, [sp, #56]	; 0x38
  4014ac:	dd7b      	ble.n	4015a6 <_vfiprintf_r+0x192>
  4014ae:	2a00      	cmp	r2, #0
  4014b0:	f040 8528 	bne.w	401f04 <_vfiprintf_r+0xaf0>
  4014b4:	9b02      	ldr	r3, [sp, #8]
  4014b6:	920e      	str	r2, [sp, #56]	; 0x38
  4014b8:	442b      	add	r3, r5
  4014ba:	46da      	mov	sl, fp
  4014bc:	9302      	str	r3, [sp, #8]
  4014be:	7823      	ldrb	r3, [r4, #0]
  4014c0:	2b00      	cmp	r3, #0
  4014c2:	f000 843e 	beq.w	401d42 <_vfiprintf_r+0x92e>
  4014c6:	2100      	movs	r1, #0
  4014c8:	f04f 0300 	mov.w	r3, #0
  4014cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4014d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4014d4:	f104 0801 	add.w	r8, r4, #1
  4014d8:	7863      	ldrb	r3, [r4, #1]
  4014da:	9201      	str	r2, [sp, #4]
  4014dc:	4608      	mov	r0, r1
  4014de:	460e      	mov	r6, r1
  4014e0:	460c      	mov	r4, r1
  4014e2:	f108 0801 	add.w	r8, r8, #1
  4014e6:	f1a3 0220 	sub.w	r2, r3, #32
  4014ea:	2a58      	cmp	r2, #88	; 0x58
  4014ec:	f200 8393 	bhi.w	401c16 <_vfiprintf_r+0x802>
  4014f0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4014f4:	03910346 	.word	0x03910346
  4014f8:	034e0391 	.word	0x034e0391
  4014fc:	03910391 	.word	0x03910391
  401500:	03910391 	.word	0x03910391
  401504:	03910391 	.word	0x03910391
  401508:	02670289 	.word	0x02670289
  40150c:	00800391 	.word	0x00800391
  401510:	0391026c 	.word	0x0391026c
  401514:	025901c6 	.word	0x025901c6
  401518:	02590259 	.word	0x02590259
  40151c:	02590259 	.word	0x02590259
  401520:	02590259 	.word	0x02590259
  401524:	02590259 	.word	0x02590259
  401528:	03910391 	.word	0x03910391
  40152c:	03910391 	.word	0x03910391
  401530:	03910391 	.word	0x03910391
  401534:	03910391 	.word	0x03910391
  401538:	03910391 	.word	0x03910391
  40153c:	039101cb 	.word	0x039101cb
  401540:	03910391 	.word	0x03910391
  401544:	03910391 	.word	0x03910391
  401548:	03910391 	.word	0x03910391
  40154c:	03910391 	.word	0x03910391
  401550:	02140391 	.word	0x02140391
  401554:	03910391 	.word	0x03910391
  401558:	03910391 	.word	0x03910391
  40155c:	02ee0391 	.word	0x02ee0391
  401560:	03910391 	.word	0x03910391
  401564:	03910311 	.word	0x03910311
  401568:	03910391 	.word	0x03910391
  40156c:	03910391 	.word	0x03910391
  401570:	03910391 	.word	0x03910391
  401574:	03910391 	.word	0x03910391
  401578:	03340391 	.word	0x03340391
  40157c:	0391038a 	.word	0x0391038a
  401580:	03910391 	.word	0x03910391
  401584:	038a0367 	.word	0x038a0367
  401588:	03910391 	.word	0x03910391
  40158c:	0391036c 	.word	0x0391036c
  401590:	02950379 	.word	0x02950379
  401594:	02e90085 	.word	0x02e90085
  401598:	029b0391 	.word	0x029b0391
  40159c:	02ba0391 	.word	0x02ba0391
  4015a0:	03910391 	.word	0x03910391
  4015a4:	0353      	.short	0x0353
  4015a6:	f10a 0a08 	add.w	sl, sl, #8
  4015aa:	9b02      	ldr	r3, [sp, #8]
  4015ac:	442b      	add	r3, r5
  4015ae:	9302      	str	r3, [sp, #8]
  4015b0:	e785      	b.n	4014be <_vfiprintf_r+0xaa>
  4015b2:	9900      	ldr	r1, [sp, #0]
  4015b4:	9805      	ldr	r0, [sp, #20]
  4015b6:	f000 fe61 	bl	40227c <__swsetup_r>
  4015ba:	2800      	cmp	r0, #0
  4015bc:	f040 8558 	bne.w	402070 <_vfiprintf_r+0xc5c>
  4015c0:	9b00      	ldr	r3, [sp, #0]
  4015c2:	899a      	ldrh	r2, [r3, #12]
  4015c4:	f002 021a 	and.w	r2, r2, #26
  4015c8:	2a0a      	cmp	r2, #10
  4015ca:	f47f af4b 	bne.w	401464 <_vfiprintf_r+0x50>
  4015ce:	9900      	ldr	r1, [sp, #0]
  4015d0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  4015d4:	2b00      	cmp	r3, #0
  4015d6:	f6ff af45 	blt.w	401464 <_vfiprintf_r+0x50>
  4015da:	4623      	mov	r3, r4
  4015dc:	4642      	mov	r2, r8
  4015de:	9805      	ldr	r0, [sp, #20]
  4015e0:	f000 fe16 	bl	402210 <__sbprintf>
  4015e4:	b02b      	add	sp, #172	; 0xac
  4015e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ea:	f000 fff3 	bl	4025d4 <__sinit>
  4015ee:	e71e      	b.n	40142e <_vfiprintf_r+0x1a>
  4015f0:	4264      	negs	r4, r4
  4015f2:	9304      	str	r3, [sp, #16]
  4015f4:	f046 0604 	orr.w	r6, r6, #4
  4015f8:	f898 3000 	ldrb.w	r3, [r8]
  4015fc:	e771      	b.n	4014e2 <_vfiprintf_r+0xce>
  4015fe:	2130      	movs	r1, #48	; 0x30
  401600:	9804      	ldr	r0, [sp, #16]
  401602:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  401606:	9901      	ldr	r1, [sp, #4]
  401608:	9406      	str	r4, [sp, #24]
  40160a:	f04f 0300 	mov.w	r3, #0
  40160e:	2278      	movs	r2, #120	; 0x78
  401610:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401614:	2900      	cmp	r1, #0
  401616:	4603      	mov	r3, r0
  401618:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  40161c:	6804      	ldr	r4, [r0, #0]
  40161e:	f103 0304 	add.w	r3, r3, #4
  401622:	f04f 0500 	mov.w	r5, #0
  401626:	f046 0202 	orr.w	r2, r6, #2
  40162a:	f2c0 8525 	blt.w	402078 <_vfiprintf_r+0xc64>
  40162e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401632:	ea54 0205 	orrs.w	r2, r4, r5
  401636:	f046 0602 	orr.w	r6, r6, #2
  40163a:	9304      	str	r3, [sp, #16]
  40163c:	f040 84bf 	bne.w	401fbe <_vfiprintf_r+0xbaa>
  401640:	48b3      	ldr	r0, [pc, #716]	; (401910 <_vfiprintf_r+0x4fc>)
  401642:	9b01      	ldr	r3, [sp, #4]
  401644:	2b00      	cmp	r3, #0
  401646:	f040 841c 	bne.w	401e82 <_vfiprintf_r+0xa6e>
  40164a:	4699      	mov	r9, r3
  40164c:	2300      	movs	r3, #0
  40164e:	9301      	str	r3, [sp, #4]
  401650:	9303      	str	r3, [sp, #12]
  401652:	465f      	mov	r7, fp
  401654:	9b01      	ldr	r3, [sp, #4]
  401656:	9a03      	ldr	r2, [sp, #12]
  401658:	4293      	cmp	r3, r2
  40165a:	bfb8      	it	lt
  40165c:	4613      	movlt	r3, r2
  40165e:	461d      	mov	r5, r3
  401660:	f1b9 0f00 	cmp.w	r9, #0
  401664:	d000      	beq.n	401668 <_vfiprintf_r+0x254>
  401666:	3501      	adds	r5, #1
  401668:	f016 0302 	ands.w	r3, r6, #2
  40166c:	9307      	str	r3, [sp, #28]
  40166e:	bf18      	it	ne
  401670:	3502      	addne	r5, #2
  401672:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  401676:	9308      	str	r3, [sp, #32]
  401678:	f040 82f1 	bne.w	401c5e <_vfiprintf_r+0x84a>
  40167c:	9b06      	ldr	r3, [sp, #24]
  40167e:	1b5c      	subs	r4, r3, r5
  401680:	2c00      	cmp	r4, #0
  401682:	f340 82ec 	ble.w	401c5e <_vfiprintf_r+0x84a>
  401686:	2c10      	cmp	r4, #16
  401688:	f340 8556 	ble.w	402138 <_vfiprintf_r+0xd24>
  40168c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 401914 <_vfiprintf_r+0x500>
  401690:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  401694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401696:	46d4      	mov	ip, sl
  401698:	2310      	movs	r3, #16
  40169a:	46c2      	mov	sl, r8
  40169c:	4670      	mov	r0, lr
  40169e:	46a8      	mov	r8, r5
  4016a0:	464d      	mov	r5, r9
  4016a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4016a6:	e007      	b.n	4016b8 <_vfiprintf_r+0x2a4>
  4016a8:	f100 0e02 	add.w	lr, r0, #2
  4016ac:	f10c 0c08 	add.w	ip, ip, #8
  4016b0:	4608      	mov	r0, r1
  4016b2:	3c10      	subs	r4, #16
  4016b4:	2c10      	cmp	r4, #16
  4016b6:	dd13      	ble.n	4016e0 <_vfiprintf_r+0x2cc>
  4016b8:	1c41      	adds	r1, r0, #1
  4016ba:	3210      	adds	r2, #16
  4016bc:	2907      	cmp	r1, #7
  4016be:	920f      	str	r2, [sp, #60]	; 0x3c
  4016c0:	f8cc 5000 	str.w	r5, [ip]
  4016c4:	f8cc 3004 	str.w	r3, [ip, #4]
  4016c8:	910e      	str	r1, [sp, #56]	; 0x38
  4016ca:	dded      	ble.n	4016a8 <_vfiprintf_r+0x294>
  4016cc:	2a00      	cmp	r2, #0
  4016ce:	f040 82b7 	bne.w	401c40 <_vfiprintf_r+0x82c>
  4016d2:	3c10      	subs	r4, #16
  4016d4:	2c10      	cmp	r4, #16
  4016d6:	4610      	mov	r0, r2
  4016d8:	f04f 0e01 	mov.w	lr, #1
  4016dc:	46dc      	mov	ip, fp
  4016de:	dceb      	bgt.n	4016b8 <_vfiprintf_r+0x2a4>
  4016e0:	46a9      	mov	r9, r5
  4016e2:	4670      	mov	r0, lr
  4016e4:	4645      	mov	r5, r8
  4016e6:	46d0      	mov	r8, sl
  4016e8:	46e2      	mov	sl, ip
  4016ea:	4422      	add	r2, r4
  4016ec:	2807      	cmp	r0, #7
  4016ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4016f0:	f8ca 9000 	str.w	r9, [sl]
  4016f4:	f8ca 4004 	str.w	r4, [sl, #4]
  4016f8:	900e      	str	r0, [sp, #56]	; 0x38
  4016fa:	f300 8375 	bgt.w	401de8 <_vfiprintf_r+0x9d4>
  4016fe:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401702:	f10a 0a08 	add.w	sl, sl, #8
  401706:	f100 0e01 	add.w	lr, r0, #1
  40170a:	2b00      	cmp	r3, #0
  40170c:	f040 82b0 	bne.w	401c70 <_vfiprintf_r+0x85c>
  401710:	9b07      	ldr	r3, [sp, #28]
  401712:	2b00      	cmp	r3, #0
  401714:	f000 82c3 	beq.w	401c9e <_vfiprintf_r+0x88a>
  401718:	3202      	adds	r2, #2
  40171a:	a90c      	add	r1, sp, #48	; 0x30
  40171c:	2302      	movs	r3, #2
  40171e:	f1be 0f07 	cmp.w	lr, #7
  401722:	920f      	str	r2, [sp, #60]	; 0x3c
  401724:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401728:	e88a 000a 	stmia.w	sl, {r1, r3}
  40172c:	f340 8378 	ble.w	401e20 <_vfiprintf_r+0xa0c>
  401730:	2a00      	cmp	r2, #0
  401732:	f040 840a 	bne.w	401f4a <_vfiprintf_r+0xb36>
  401736:	9b08      	ldr	r3, [sp, #32]
  401738:	2b80      	cmp	r3, #128	; 0x80
  40173a:	f04f 0e01 	mov.w	lr, #1
  40173e:	4610      	mov	r0, r2
  401740:	46da      	mov	sl, fp
  401742:	f040 82b0 	bne.w	401ca6 <_vfiprintf_r+0x892>
  401746:	9b06      	ldr	r3, [sp, #24]
  401748:	1b5c      	subs	r4, r3, r5
  40174a:	2c00      	cmp	r4, #0
  40174c:	f340 82ab 	ble.w	401ca6 <_vfiprintf_r+0x892>
  401750:	2c10      	cmp	r4, #16
  401752:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 401918 <_vfiprintf_r+0x504>
  401756:	f340 850b 	ble.w	402170 <_vfiprintf_r+0xd5c>
  40175a:	46d6      	mov	lr, sl
  40175c:	2310      	movs	r3, #16
  40175e:	46c2      	mov	sl, r8
  401760:	46a8      	mov	r8, r5
  401762:	464d      	mov	r5, r9
  401764:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401768:	e007      	b.n	40177a <_vfiprintf_r+0x366>
  40176a:	f100 0c02 	add.w	ip, r0, #2
  40176e:	f10e 0e08 	add.w	lr, lr, #8
  401772:	4608      	mov	r0, r1
  401774:	3c10      	subs	r4, #16
  401776:	2c10      	cmp	r4, #16
  401778:	dd13      	ble.n	4017a2 <_vfiprintf_r+0x38e>
  40177a:	1c41      	adds	r1, r0, #1
  40177c:	3210      	adds	r2, #16
  40177e:	2907      	cmp	r1, #7
  401780:	920f      	str	r2, [sp, #60]	; 0x3c
  401782:	f8ce 5000 	str.w	r5, [lr]
  401786:	f8ce 3004 	str.w	r3, [lr, #4]
  40178a:	910e      	str	r1, [sp, #56]	; 0x38
  40178c:	dded      	ble.n	40176a <_vfiprintf_r+0x356>
  40178e:	2a00      	cmp	r2, #0
  401790:	f040 8315 	bne.w	401dbe <_vfiprintf_r+0x9aa>
  401794:	3c10      	subs	r4, #16
  401796:	2c10      	cmp	r4, #16
  401798:	f04f 0c01 	mov.w	ip, #1
  40179c:	4610      	mov	r0, r2
  40179e:	46de      	mov	lr, fp
  4017a0:	dceb      	bgt.n	40177a <_vfiprintf_r+0x366>
  4017a2:	46a9      	mov	r9, r5
  4017a4:	4645      	mov	r5, r8
  4017a6:	46d0      	mov	r8, sl
  4017a8:	46f2      	mov	sl, lr
  4017aa:	4422      	add	r2, r4
  4017ac:	f1bc 0f07 	cmp.w	ip, #7
  4017b0:	920f      	str	r2, [sp, #60]	; 0x3c
  4017b2:	f8ca 9000 	str.w	r9, [sl]
  4017b6:	f8ca 4004 	str.w	r4, [sl, #4]
  4017ba:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  4017be:	f300 83d2 	bgt.w	401f66 <_vfiprintf_r+0xb52>
  4017c2:	9b01      	ldr	r3, [sp, #4]
  4017c4:	9903      	ldr	r1, [sp, #12]
  4017c6:	1a5c      	subs	r4, r3, r1
  4017c8:	2c00      	cmp	r4, #0
  4017ca:	f10a 0a08 	add.w	sl, sl, #8
  4017ce:	f10c 0e01 	add.w	lr, ip, #1
  4017d2:	4660      	mov	r0, ip
  4017d4:	f300 826d 	bgt.w	401cb2 <_vfiprintf_r+0x89e>
  4017d8:	9903      	ldr	r1, [sp, #12]
  4017da:	f8ca 7000 	str.w	r7, [sl]
  4017de:	440a      	add	r2, r1
  4017e0:	f1be 0f07 	cmp.w	lr, #7
  4017e4:	920f      	str	r2, [sp, #60]	; 0x3c
  4017e6:	f8ca 1004 	str.w	r1, [sl, #4]
  4017ea:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4017ee:	f340 82ce 	ble.w	401d8e <_vfiprintf_r+0x97a>
  4017f2:	2a00      	cmp	r2, #0
  4017f4:	f040 833a 	bne.w	401e6c <_vfiprintf_r+0xa58>
  4017f8:	0770      	lsls	r0, r6, #29
  4017fa:	920e      	str	r2, [sp, #56]	; 0x38
  4017fc:	d538      	bpl.n	401870 <_vfiprintf_r+0x45c>
  4017fe:	9b06      	ldr	r3, [sp, #24]
  401800:	1b5c      	subs	r4, r3, r5
  401802:	2c00      	cmp	r4, #0
  401804:	dd34      	ble.n	401870 <_vfiprintf_r+0x45c>
  401806:	46da      	mov	sl, fp
  401808:	2c10      	cmp	r4, #16
  40180a:	f340 84ab 	ble.w	402164 <_vfiprintf_r+0xd50>
  40180e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 401914 <_vfiprintf_r+0x500>
  401812:	990e      	ldr	r1, [sp, #56]	; 0x38
  401814:	464f      	mov	r7, r9
  401816:	2610      	movs	r6, #16
  401818:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40181c:	e006      	b.n	40182c <_vfiprintf_r+0x418>
  40181e:	1c88      	adds	r0, r1, #2
  401820:	f10a 0a08 	add.w	sl, sl, #8
  401824:	4619      	mov	r1, r3
  401826:	3c10      	subs	r4, #16
  401828:	2c10      	cmp	r4, #16
  40182a:	dd13      	ble.n	401854 <_vfiprintf_r+0x440>
  40182c:	1c4b      	adds	r3, r1, #1
  40182e:	3210      	adds	r2, #16
  401830:	2b07      	cmp	r3, #7
  401832:	920f      	str	r2, [sp, #60]	; 0x3c
  401834:	f8ca 7000 	str.w	r7, [sl]
  401838:	f8ca 6004 	str.w	r6, [sl, #4]
  40183c:	930e      	str	r3, [sp, #56]	; 0x38
  40183e:	ddee      	ble.n	40181e <_vfiprintf_r+0x40a>
  401840:	2a00      	cmp	r2, #0
  401842:	f040 828e 	bne.w	401d62 <_vfiprintf_r+0x94e>
  401846:	3c10      	subs	r4, #16
  401848:	2c10      	cmp	r4, #16
  40184a:	f04f 0001 	mov.w	r0, #1
  40184e:	4611      	mov	r1, r2
  401850:	46da      	mov	sl, fp
  401852:	dceb      	bgt.n	40182c <_vfiprintf_r+0x418>
  401854:	46b9      	mov	r9, r7
  401856:	4422      	add	r2, r4
  401858:	2807      	cmp	r0, #7
  40185a:	920f      	str	r2, [sp, #60]	; 0x3c
  40185c:	f8ca 9000 	str.w	r9, [sl]
  401860:	f8ca 4004 	str.w	r4, [sl, #4]
  401864:	900e      	str	r0, [sp, #56]	; 0x38
  401866:	f340 829b 	ble.w	401da0 <_vfiprintf_r+0x98c>
  40186a:	2a00      	cmp	r2, #0
  40186c:	f040 8425 	bne.w	4020ba <_vfiprintf_r+0xca6>
  401870:	9b02      	ldr	r3, [sp, #8]
  401872:	9a06      	ldr	r2, [sp, #24]
  401874:	42aa      	cmp	r2, r5
  401876:	bfac      	ite	ge
  401878:	189b      	addge	r3, r3, r2
  40187a:	195b      	addlt	r3, r3, r5
  40187c:	9302      	str	r3, [sp, #8]
  40187e:	e299      	b.n	401db4 <_vfiprintf_r+0x9a0>
  401880:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401884:	f898 3000 	ldrb.w	r3, [r8]
  401888:	e62b      	b.n	4014e2 <_vfiprintf_r+0xce>
  40188a:	9406      	str	r4, [sp, #24]
  40188c:	2900      	cmp	r1, #0
  40188e:	f040 84af 	bne.w	4021f0 <_vfiprintf_r+0xddc>
  401892:	f046 0610 	orr.w	r6, r6, #16
  401896:	06b3      	lsls	r3, r6, #26
  401898:	f140 8312 	bpl.w	401ec0 <_vfiprintf_r+0xaac>
  40189c:	9904      	ldr	r1, [sp, #16]
  40189e:	3107      	adds	r1, #7
  4018a0:	f021 0107 	bic.w	r1, r1, #7
  4018a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4018a8:	3108      	adds	r1, #8
  4018aa:	9104      	str	r1, [sp, #16]
  4018ac:	4614      	mov	r4, r2
  4018ae:	461d      	mov	r5, r3
  4018b0:	2a00      	cmp	r2, #0
  4018b2:	f173 0300 	sbcs.w	r3, r3, #0
  4018b6:	f2c0 8386 	blt.w	401fc6 <_vfiprintf_r+0xbb2>
  4018ba:	9b01      	ldr	r3, [sp, #4]
  4018bc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  4018c0:	2b00      	cmp	r3, #0
  4018c2:	f2c0 831a 	blt.w	401efa <_vfiprintf_r+0xae6>
  4018c6:	ea54 0305 	orrs.w	r3, r4, r5
  4018ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4018ce:	f000 80ed 	beq.w	401aac <_vfiprintf_r+0x698>
  4018d2:	2d00      	cmp	r5, #0
  4018d4:	bf08      	it	eq
  4018d6:	2c0a      	cmpeq	r4, #10
  4018d8:	f0c0 80ed 	bcc.w	401ab6 <_vfiprintf_r+0x6a2>
  4018dc:	465f      	mov	r7, fp
  4018de:	4620      	mov	r0, r4
  4018e0:	4629      	mov	r1, r5
  4018e2:	220a      	movs	r2, #10
  4018e4:	2300      	movs	r3, #0
  4018e6:	f002 fa5f 	bl	403da8 <__aeabi_uldivmod>
  4018ea:	3230      	adds	r2, #48	; 0x30
  4018ec:	f807 2d01 	strb.w	r2, [r7, #-1]!
  4018f0:	4620      	mov	r0, r4
  4018f2:	4629      	mov	r1, r5
  4018f4:	2300      	movs	r3, #0
  4018f6:	220a      	movs	r2, #10
  4018f8:	f002 fa56 	bl	403da8 <__aeabi_uldivmod>
  4018fc:	4604      	mov	r4, r0
  4018fe:	460d      	mov	r5, r1
  401900:	ea54 0305 	orrs.w	r3, r4, r5
  401904:	d1eb      	bne.n	4018de <_vfiprintf_r+0x4ca>
  401906:	ebc7 030b 	rsb	r3, r7, fp
  40190a:	9303      	str	r3, [sp, #12]
  40190c:	e6a2      	b.n	401654 <_vfiprintf_r+0x240>
  40190e:	bf00      	nop
  401910:	004041f8 	.word	0x004041f8
  401914:	00404214 	.word	0x00404214
  401918:	004041d4 	.word	0x004041d4
  40191c:	9406      	str	r4, [sp, #24]
  40191e:	2900      	cmp	r1, #0
  401920:	f040 8462 	bne.w	4021e8 <_vfiprintf_r+0xdd4>
  401924:	f046 0610 	orr.w	r6, r6, #16
  401928:	f016 0320 	ands.w	r3, r6, #32
  40192c:	f000 82ae 	beq.w	401e8c <_vfiprintf_r+0xa78>
  401930:	9b04      	ldr	r3, [sp, #16]
  401932:	3307      	adds	r3, #7
  401934:	f023 0307 	bic.w	r3, r3, #7
  401938:	f04f 0200 	mov.w	r2, #0
  40193c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401940:	e9d3 4500 	ldrd	r4, r5, [r3]
  401944:	f103 0208 	add.w	r2, r3, #8
  401948:	9b01      	ldr	r3, [sp, #4]
  40194a:	9204      	str	r2, [sp, #16]
  40194c:	2b00      	cmp	r3, #0
  40194e:	f2c0 8174 	blt.w	401c3a <_vfiprintf_r+0x826>
  401952:	ea54 0305 	orrs.w	r3, r4, r5
  401956:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40195a:	f040 816e 	bne.w	401c3a <_vfiprintf_r+0x826>
  40195e:	9b01      	ldr	r3, [sp, #4]
  401960:	2b00      	cmp	r3, #0
  401962:	f000 8430 	beq.w	4021c6 <_vfiprintf_r+0xdb2>
  401966:	f04f 0900 	mov.w	r9, #0
  40196a:	2400      	movs	r4, #0
  40196c:	2500      	movs	r5, #0
  40196e:	465f      	mov	r7, fp
  401970:	08e2      	lsrs	r2, r4, #3
  401972:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  401976:	08e9      	lsrs	r1, r5, #3
  401978:	f004 0307 	and.w	r3, r4, #7
  40197c:	460d      	mov	r5, r1
  40197e:	4614      	mov	r4, r2
  401980:	3330      	adds	r3, #48	; 0x30
  401982:	ea54 0205 	orrs.w	r2, r4, r5
  401986:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40198a:	d1f1      	bne.n	401970 <_vfiprintf_r+0x55c>
  40198c:	07f4      	lsls	r4, r6, #31
  40198e:	d5ba      	bpl.n	401906 <_vfiprintf_r+0x4f2>
  401990:	2b30      	cmp	r3, #48	; 0x30
  401992:	d0b8      	beq.n	401906 <_vfiprintf_r+0x4f2>
  401994:	2230      	movs	r2, #48	; 0x30
  401996:	1e7b      	subs	r3, r7, #1
  401998:	f807 2c01 	strb.w	r2, [r7, #-1]
  40199c:	ebc3 020b 	rsb	r2, r3, fp
  4019a0:	9203      	str	r2, [sp, #12]
  4019a2:	461f      	mov	r7, r3
  4019a4:	e656      	b.n	401654 <_vfiprintf_r+0x240>
  4019a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4019aa:	2400      	movs	r4, #0
  4019ac:	f818 3b01 	ldrb.w	r3, [r8], #1
  4019b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4019b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  4019b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4019bc:	2a09      	cmp	r2, #9
  4019be:	d9f5      	bls.n	4019ac <_vfiprintf_r+0x598>
  4019c0:	e591      	b.n	4014e6 <_vfiprintf_r+0xd2>
  4019c2:	f898 3000 	ldrb.w	r3, [r8]
  4019c6:	2101      	movs	r1, #1
  4019c8:	202b      	movs	r0, #43	; 0x2b
  4019ca:	e58a      	b.n	4014e2 <_vfiprintf_r+0xce>
  4019cc:	f898 3000 	ldrb.w	r3, [r8]
  4019d0:	2b2a      	cmp	r3, #42	; 0x2a
  4019d2:	f108 0501 	add.w	r5, r8, #1
  4019d6:	f000 83dd 	beq.w	402194 <_vfiprintf_r+0xd80>
  4019da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4019de:	2a09      	cmp	r2, #9
  4019e0:	46a8      	mov	r8, r5
  4019e2:	bf98      	it	ls
  4019e4:	2500      	movls	r5, #0
  4019e6:	f200 83ce 	bhi.w	402186 <_vfiprintf_r+0xd72>
  4019ea:	f818 3b01 	ldrb.w	r3, [r8], #1
  4019ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4019f2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  4019f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4019fa:	2a09      	cmp	r2, #9
  4019fc:	d9f5      	bls.n	4019ea <_vfiprintf_r+0x5d6>
  4019fe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  401a02:	9201      	str	r2, [sp, #4]
  401a04:	e56f      	b.n	4014e6 <_vfiprintf_r+0xd2>
  401a06:	9a04      	ldr	r2, [sp, #16]
  401a08:	6814      	ldr	r4, [r2, #0]
  401a0a:	4613      	mov	r3, r2
  401a0c:	2c00      	cmp	r4, #0
  401a0e:	f103 0304 	add.w	r3, r3, #4
  401a12:	f6ff aded 	blt.w	4015f0 <_vfiprintf_r+0x1dc>
  401a16:	9304      	str	r3, [sp, #16]
  401a18:	f898 3000 	ldrb.w	r3, [r8]
  401a1c:	e561      	b.n	4014e2 <_vfiprintf_r+0xce>
  401a1e:	9406      	str	r4, [sp, #24]
  401a20:	2900      	cmp	r1, #0
  401a22:	d081      	beq.n	401928 <_vfiprintf_r+0x514>
  401a24:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  401a28:	e77e      	b.n	401928 <_vfiprintf_r+0x514>
  401a2a:	9a04      	ldr	r2, [sp, #16]
  401a2c:	9406      	str	r4, [sp, #24]
  401a2e:	6817      	ldr	r7, [r2, #0]
  401a30:	f04f 0300 	mov.w	r3, #0
  401a34:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401a38:	1d14      	adds	r4, r2, #4
  401a3a:	9b01      	ldr	r3, [sp, #4]
  401a3c:	2f00      	cmp	r7, #0
  401a3e:	f000 8386 	beq.w	40214e <_vfiprintf_r+0xd3a>
  401a42:	2b00      	cmp	r3, #0
  401a44:	f2c0 835f 	blt.w	402106 <_vfiprintf_r+0xcf2>
  401a48:	461a      	mov	r2, r3
  401a4a:	2100      	movs	r1, #0
  401a4c:	4638      	mov	r0, r7
  401a4e:	f001 fc77 	bl	403340 <memchr>
  401a52:	2800      	cmp	r0, #0
  401a54:	f000 838f 	beq.w	402176 <_vfiprintf_r+0xd62>
  401a58:	1bc3      	subs	r3, r0, r7
  401a5a:	9303      	str	r3, [sp, #12]
  401a5c:	2300      	movs	r3, #0
  401a5e:	9404      	str	r4, [sp, #16]
  401a60:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  401a64:	9301      	str	r3, [sp, #4]
  401a66:	e5f5      	b.n	401654 <_vfiprintf_r+0x240>
  401a68:	9406      	str	r4, [sp, #24]
  401a6a:	2900      	cmp	r1, #0
  401a6c:	f040 83b9 	bne.w	4021e2 <_vfiprintf_r+0xdce>
  401a70:	f016 0920 	ands.w	r9, r6, #32
  401a74:	d135      	bne.n	401ae2 <_vfiprintf_r+0x6ce>
  401a76:	f016 0310 	ands.w	r3, r6, #16
  401a7a:	d103      	bne.n	401a84 <_vfiprintf_r+0x670>
  401a7c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  401a80:	f040 832a 	bne.w	4020d8 <_vfiprintf_r+0xcc4>
  401a84:	9a04      	ldr	r2, [sp, #16]
  401a86:	4613      	mov	r3, r2
  401a88:	6814      	ldr	r4, [r2, #0]
  401a8a:	9a01      	ldr	r2, [sp, #4]
  401a8c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401a90:	2a00      	cmp	r2, #0
  401a92:	f103 0304 	add.w	r3, r3, #4
  401a96:	f04f 0500 	mov.w	r5, #0
  401a9a:	f2c0 8332 	blt.w	402102 <_vfiprintf_r+0xcee>
  401a9e:	ea54 0205 	orrs.w	r2, r4, r5
  401aa2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401aa6:	9304      	str	r3, [sp, #16]
  401aa8:	f47f af13 	bne.w	4018d2 <_vfiprintf_r+0x4be>
  401aac:	9b01      	ldr	r3, [sp, #4]
  401aae:	2b00      	cmp	r3, #0
  401ab0:	f43f adcc 	beq.w	40164c <_vfiprintf_r+0x238>
  401ab4:	2400      	movs	r4, #0
  401ab6:	af2a      	add	r7, sp, #168	; 0xa8
  401ab8:	3430      	adds	r4, #48	; 0x30
  401aba:	f807 4d41 	strb.w	r4, [r7, #-65]!
  401abe:	ebc7 030b 	rsb	r3, r7, fp
  401ac2:	9303      	str	r3, [sp, #12]
  401ac4:	e5c6      	b.n	401654 <_vfiprintf_r+0x240>
  401ac6:	f046 0620 	orr.w	r6, r6, #32
  401aca:	f898 3000 	ldrb.w	r3, [r8]
  401ace:	e508      	b.n	4014e2 <_vfiprintf_r+0xce>
  401ad0:	9406      	str	r4, [sp, #24]
  401ad2:	2900      	cmp	r1, #0
  401ad4:	f040 836e 	bne.w	4021b4 <_vfiprintf_r+0xda0>
  401ad8:	f046 0610 	orr.w	r6, r6, #16
  401adc:	f016 0920 	ands.w	r9, r6, #32
  401ae0:	d0c9      	beq.n	401a76 <_vfiprintf_r+0x662>
  401ae2:	9b04      	ldr	r3, [sp, #16]
  401ae4:	3307      	adds	r3, #7
  401ae6:	f023 0307 	bic.w	r3, r3, #7
  401aea:	f04f 0200 	mov.w	r2, #0
  401aee:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  401af2:	e9d3 4500 	ldrd	r4, r5, [r3]
  401af6:	f103 0208 	add.w	r2, r3, #8
  401afa:	9b01      	ldr	r3, [sp, #4]
  401afc:	9204      	str	r2, [sp, #16]
  401afe:	2b00      	cmp	r3, #0
  401b00:	f2c0 81f9 	blt.w	401ef6 <_vfiprintf_r+0xae2>
  401b04:	ea54 0305 	orrs.w	r3, r4, r5
  401b08:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401b0c:	f04f 0900 	mov.w	r9, #0
  401b10:	f47f aedf 	bne.w	4018d2 <_vfiprintf_r+0x4be>
  401b14:	e7ca      	b.n	401aac <_vfiprintf_r+0x698>
  401b16:	9406      	str	r4, [sp, #24]
  401b18:	2900      	cmp	r1, #0
  401b1a:	f040 8351 	bne.w	4021c0 <_vfiprintf_r+0xdac>
  401b1e:	06b2      	lsls	r2, r6, #26
  401b20:	48ae      	ldr	r0, [pc, #696]	; (401ddc <_vfiprintf_r+0x9c8>)
  401b22:	d541      	bpl.n	401ba8 <_vfiprintf_r+0x794>
  401b24:	9a04      	ldr	r2, [sp, #16]
  401b26:	3207      	adds	r2, #7
  401b28:	f022 0207 	bic.w	r2, r2, #7
  401b2c:	e9d2 4500 	ldrd	r4, r5, [r2]
  401b30:	f102 0108 	add.w	r1, r2, #8
  401b34:	9104      	str	r1, [sp, #16]
  401b36:	f016 0901 	ands.w	r9, r6, #1
  401b3a:	f000 8177 	beq.w	401e2c <_vfiprintf_r+0xa18>
  401b3e:	ea54 0205 	orrs.w	r2, r4, r5
  401b42:	f040 8226 	bne.w	401f92 <_vfiprintf_r+0xb7e>
  401b46:	f04f 0300 	mov.w	r3, #0
  401b4a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401b4e:	9b01      	ldr	r3, [sp, #4]
  401b50:	2b00      	cmp	r3, #0
  401b52:	f2c0 8196 	blt.w	401e82 <_vfiprintf_r+0xa6e>
  401b56:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401b5a:	e572      	b.n	401642 <_vfiprintf_r+0x22e>
  401b5c:	9a04      	ldr	r2, [sp, #16]
  401b5e:	9406      	str	r4, [sp, #24]
  401b60:	6813      	ldr	r3, [r2, #0]
  401b62:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401b66:	4613      	mov	r3, r2
  401b68:	f04f 0100 	mov.w	r1, #0
  401b6c:	2501      	movs	r5, #1
  401b6e:	3304      	adds	r3, #4
  401b70:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  401b74:	9304      	str	r3, [sp, #16]
  401b76:	9503      	str	r5, [sp, #12]
  401b78:	af10      	add	r7, sp, #64	; 0x40
  401b7a:	2300      	movs	r3, #0
  401b7c:	9301      	str	r3, [sp, #4]
  401b7e:	e573      	b.n	401668 <_vfiprintf_r+0x254>
  401b80:	f898 3000 	ldrb.w	r3, [r8]
  401b84:	2800      	cmp	r0, #0
  401b86:	f47f acac 	bne.w	4014e2 <_vfiprintf_r+0xce>
  401b8a:	2101      	movs	r1, #1
  401b8c:	2020      	movs	r0, #32
  401b8e:	e4a8      	b.n	4014e2 <_vfiprintf_r+0xce>
  401b90:	f046 0601 	orr.w	r6, r6, #1
  401b94:	f898 3000 	ldrb.w	r3, [r8]
  401b98:	e4a3      	b.n	4014e2 <_vfiprintf_r+0xce>
  401b9a:	9406      	str	r4, [sp, #24]
  401b9c:	2900      	cmp	r1, #0
  401b9e:	f040 830c 	bne.w	4021ba <_vfiprintf_r+0xda6>
  401ba2:	06b2      	lsls	r2, r6, #26
  401ba4:	488e      	ldr	r0, [pc, #568]	; (401de0 <_vfiprintf_r+0x9cc>)
  401ba6:	d4bd      	bmi.n	401b24 <_vfiprintf_r+0x710>
  401ba8:	9904      	ldr	r1, [sp, #16]
  401baa:	06f7      	lsls	r7, r6, #27
  401bac:	460a      	mov	r2, r1
  401bae:	f100 819d 	bmi.w	401eec <_vfiprintf_r+0xad8>
  401bb2:	0675      	lsls	r5, r6, #25
  401bb4:	f140 819a 	bpl.w	401eec <_vfiprintf_r+0xad8>
  401bb8:	3204      	adds	r2, #4
  401bba:	880c      	ldrh	r4, [r1, #0]
  401bbc:	9204      	str	r2, [sp, #16]
  401bbe:	2500      	movs	r5, #0
  401bc0:	e7b9      	b.n	401b36 <_vfiprintf_r+0x722>
  401bc2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401bc6:	f898 3000 	ldrb.w	r3, [r8]
  401bca:	e48a      	b.n	4014e2 <_vfiprintf_r+0xce>
  401bcc:	f898 3000 	ldrb.w	r3, [r8]
  401bd0:	2b6c      	cmp	r3, #108	; 0x6c
  401bd2:	bf03      	ittte	eq
  401bd4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  401bd8:	f046 0620 	orreq.w	r6, r6, #32
  401bdc:	f108 0801 	addeq.w	r8, r8, #1
  401be0:	f046 0610 	orrne.w	r6, r6, #16
  401be4:	e47d      	b.n	4014e2 <_vfiprintf_r+0xce>
  401be6:	2900      	cmp	r1, #0
  401be8:	f040 8309 	bne.w	4021fe <_vfiprintf_r+0xdea>
  401bec:	06b4      	lsls	r4, r6, #26
  401bee:	f140 821c 	bpl.w	40202a <_vfiprintf_r+0xc16>
  401bf2:	9a04      	ldr	r2, [sp, #16]
  401bf4:	9902      	ldr	r1, [sp, #8]
  401bf6:	6813      	ldr	r3, [r2, #0]
  401bf8:	17cd      	asrs	r5, r1, #31
  401bfa:	4608      	mov	r0, r1
  401bfc:	3204      	adds	r2, #4
  401bfe:	4629      	mov	r1, r5
  401c00:	9204      	str	r2, [sp, #16]
  401c02:	e9c3 0100 	strd	r0, r1, [r3]
  401c06:	e436      	b.n	401476 <_vfiprintf_r+0x62>
  401c08:	9406      	str	r4, [sp, #24]
  401c0a:	2900      	cmp	r1, #0
  401c0c:	f43f ae43 	beq.w	401896 <_vfiprintf_r+0x482>
  401c10:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  401c14:	e63f      	b.n	401896 <_vfiprintf_r+0x482>
  401c16:	9406      	str	r4, [sp, #24]
  401c18:	2900      	cmp	r1, #0
  401c1a:	f040 82ed 	bne.w	4021f8 <_vfiprintf_r+0xde4>
  401c1e:	2b00      	cmp	r3, #0
  401c20:	f000 808f 	beq.w	401d42 <_vfiprintf_r+0x92e>
  401c24:	2501      	movs	r5, #1
  401c26:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  401c2a:	f04f 0300 	mov.w	r3, #0
  401c2e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401c32:	9503      	str	r5, [sp, #12]
  401c34:	af10      	add	r7, sp, #64	; 0x40
  401c36:	e7a0      	b.n	401b7a <_vfiprintf_r+0x766>
  401c38:	9304      	str	r3, [sp, #16]
  401c3a:	f04f 0900 	mov.w	r9, #0
  401c3e:	e696      	b.n	40196e <_vfiprintf_r+0x55a>
  401c40:	aa0d      	add	r2, sp, #52	; 0x34
  401c42:	9900      	ldr	r1, [sp, #0]
  401c44:	9309      	str	r3, [sp, #36]	; 0x24
  401c46:	4648      	mov	r0, r9
  401c48:	f7ff fba8 	bl	40139c <__sprint_r.part.0>
  401c4c:	2800      	cmp	r0, #0
  401c4e:	d17f      	bne.n	401d50 <_vfiprintf_r+0x93c>
  401c50:	980e      	ldr	r0, [sp, #56]	; 0x38
  401c52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c56:	f100 0e01 	add.w	lr, r0, #1
  401c5a:	46dc      	mov	ip, fp
  401c5c:	e529      	b.n	4016b2 <_vfiprintf_r+0x29e>
  401c5e:	980e      	ldr	r0, [sp, #56]	; 0x38
  401c60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401c62:	f100 0e01 	add.w	lr, r0, #1
  401c66:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	f43f ad50 	beq.w	401710 <_vfiprintf_r+0x2fc>
  401c70:	3201      	adds	r2, #1
  401c72:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401c76:	2301      	movs	r3, #1
  401c78:	f1be 0f07 	cmp.w	lr, #7
  401c7c:	920f      	str	r2, [sp, #60]	; 0x3c
  401c7e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401c82:	e88a 000a 	stmia.w	sl, {r1, r3}
  401c86:	f340 80bf 	ble.w	401e08 <_vfiprintf_r+0x9f4>
  401c8a:	2a00      	cmp	r2, #0
  401c8c:	f040 814e 	bne.w	401f2c <_vfiprintf_r+0xb18>
  401c90:	9907      	ldr	r1, [sp, #28]
  401c92:	2900      	cmp	r1, #0
  401c94:	f040 80be 	bne.w	401e14 <_vfiprintf_r+0xa00>
  401c98:	469e      	mov	lr, r3
  401c9a:	4610      	mov	r0, r2
  401c9c:	46da      	mov	sl, fp
  401c9e:	9b08      	ldr	r3, [sp, #32]
  401ca0:	2b80      	cmp	r3, #128	; 0x80
  401ca2:	f43f ad50 	beq.w	401746 <_vfiprintf_r+0x332>
  401ca6:	9b01      	ldr	r3, [sp, #4]
  401ca8:	9903      	ldr	r1, [sp, #12]
  401caa:	1a5c      	subs	r4, r3, r1
  401cac:	2c00      	cmp	r4, #0
  401cae:	f77f ad93 	ble.w	4017d8 <_vfiprintf_r+0x3c4>
  401cb2:	2c10      	cmp	r4, #16
  401cb4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401de4 <_vfiprintf_r+0x9d0>
  401cb8:	dd25      	ble.n	401d06 <_vfiprintf_r+0x8f2>
  401cba:	46d4      	mov	ip, sl
  401cbc:	2310      	movs	r3, #16
  401cbe:	46c2      	mov	sl, r8
  401cc0:	46a8      	mov	r8, r5
  401cc2:	464d      	mov	r5, r9
  401cc4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  401cc8:	e007      	b.n	401cda <_vfiprintf_r+0x8c6>
  401cca:	f100 0e02 	add.w	lr, r0, #2
  401cce:	f10c 0c08 	add.w	ip, ip, #8
  401cd2:	4608      	mov	r0, r1
  401cd4:	3c10      	subs	r4, #16
  401cd6:	2c10      	cmp	r4, #16
  401cd8:	dd11      	ble.n	401cfe <_vfiprintf_r+0x8ea>
  401cda:	1c41      	adds	r1, r0, #1
  401cdc:	3210      	adds	r2, #16
  401cde:	2907      	cmp	r1, #7
  401ce0:	920f      	str	r2, [sp, #60]	; 0x3c
  401ce2:	f8cc 5000 	str.w	r5, [ip]
  401ce6:	f8cc 3004 	str.w	r3, [ip, #4]
  401cea:	910e      	str	r1, [sp, #56]	; 0x38
  401cec:	dded      	ble.n	401cca <_vfiprintf_r+0x8b6>
  401cee:	b9d2      	cbnz	r2, 401d26 <_vfiprintf_r+0x912>
  401cf0:	3c10      	subs	r4, #16
  401cf2:	2c10      	cmp	r4, #16
  401cf4:	f04f 0e01 	mov.w	lr, #1
  401cf8:	4610      	mov	r0, r2
  401cfa:	46dc      	mov	ip, fp
  401cfc:	dced      	bgt.n	401cda <_vfiprintf_r+0x8c6>
  401cfe:	46a9      	mov	r9, r5
  401d00:	4645      	mov	r5, r8
  401d02:	46d0      	mov	r8, sl
  401d04:	46e2      	mov	sl, ip
  401d06:	4422      	add	r2, r4
  401d08:	f1be 0f07 	cmp.w	lr, #7
  401d0c:	920f      	str	r2, [sp, #60]	; 0x3c
  401d0e:	f8ca 9000 	str.w	r9, [sl]
  401d12:	f8ca 4004 	str.w	r4, [sl, #4]
  401d16:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  401d1a:	dc2e      	bgt.n	401d7a <_vfiprintf_r+0x966>
  401d1c:	f10a 0a08 	add.w	sl, sl, #8
  401d20:	f10e 0e01 	add.w	lr, lr, #1
  401d24:	e558      	b.n	4017d8 <_vfiprintf_r+0x3c4>
  401d26:	aa0d      	add	r2, sp, #52	; 0x34
  401d28:	9900      	ldr	r1, [sp, #0]
  401d2a:	9301      	str	r3, [sp, #4]
  401d2c:	4648      	mov	r0, r9
  401d2e:	f7ff fb35 	bl	40139c <__sprint_r.part.0>
  401d32:	b968      	cbnz	r0, 401d50 <_vfiprintf_r+0x93c>
  401d34:	980e      	ldr	r0, [sp, #56]	; 0x38
  401d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d38:	9b01      	ldr	r3, [sp, #4]
  401d3a:	f100 0e01 	add.w	lr, r0, #1
  401d3e:	46dc      	mov	ip, fp
  401d40:	e7c8      	b.n	401cd4 <_vfiprintf_r+0x8c0>
  401d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401d44:	b123      	cbz	r3, 401d50 <_vfiprintf_r+0x93c>
  401d46:	9805      	ldr	r0, [sp, #20]
  401d48:	9900      	ldr	r1, [sp, #0]
  401d4a:	aa0d      	add	r2, sp, #52	; 0x34
  401d4c:	f7ff fb26 	bl	40139c <__sprint_r.part.0>
  401d50:	9b00      	ldr	r3, [sp, #0]
  401d52:	899b      	ldrh	r3, [r3, #12]
  401d54:	065a      	lsls	r2, r3, #25
  401d56:	f100 818b 	bmi.w	402070 <_vfiprintf_r+0xc5c>
  401d5a:	9802      	ldr	r0, [sp, #8]
  401d5c:	b02b      	add	sp, #172	; 0xac
  401d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d62:	aa0d      	add	r2, sp, #52	; 0x34
  401d64:	9900      	ldr	r1, [sp, #0]
  401d66:	4648      	mov	r0, r9
  401d68:	f7ff fb18 	bl	40139c <__sprint_r.part.0>
  401d6c:	2800      	cmp	r0, #0
  401d6e:	d1ef      	bne.n	401d50 <_vfiprintf_r+0x93c>
  401d70:	990e      	ldr	r1, [sp, #56]	; 0x38
  401d72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401d74:	1c48      	adds	r0, r1, #1
  401d76:	46da      	mov	sl, fp
  401d78:	e555      	b.n	401826 <_vfiprintf_r+0x412>
  401d7a:	2a00      	cmp	r2, #0
  401d7c:	f040 80fb 	bne.w	401f76 <_vfiprintf_r+0xb62>
  401d80:	9a03      	ldr	r2, [sp, #12]
  401d82:	921b      	str	r2, [sp, #108]	; 0x6c
  401d84:	2301      	movs	r3, #1
  401d86:	920f      	str	r2, [sp, #60]	; 0x3c
  401d88:	971a      	str	r7, [sp, #104]	; 0x68
  401d8a:	930e      	str	r3, [sp, #56]	; 0x38
  401d8c:	46da      	mov	sl, fp
  401d8e:	f10a 0a08 	add.w	sl, sl, #8
  401d92:	0771      	lsls	r1, r6, #29
  401d94:	d504      	bpl.n	401da0 <_vfiprintf_r+0x98c>
  401d96:	9b06      	ldr	r3, [sp, #24]
  401d98:	1b5c      	subs	r4, r3, r5
  401d9a:	2c00      	cmp	r4, #0
  401d9c:	f73f ad34 	bgt.w	401808 <_vfiprintf_r+0x3f4>
  401da0:	9b02      	ldr	r3, [sp, #8]
  401da2:	9906      	ldr	r1, [sp, #24]
  401da4:	42a9      	cmp	r1, r5
  401da6:	bfac      	ite	ge
  401da8:	185b      	addge	r3, r3, r1
  401daa:	195b      	addlt	r3, r3, r5
  401dac:	9302      	str	r3, [sp, #8]
  401dae:	2a00      	cmp	r2, #0
  401db0:	f040 80b3 	bne.w	401f1a <_vfiprintf_r+0xb06>
  401db4:	2300      	movs	r3, #0
  401db6:	930e      	str	r3, [sp, #56]	; 0x38
  401db8:	46da      	mov	sl, fp
  401dba:	f7ff bb5c 	b.w	401476 <_vfiprintf_r+0x62>
  401dbe:	aa0d      	add	r2, sp, #52	; 0x34
  401dc0:	9900      	ldr	r1, [sp, #0]
  401dc2:	9307      	str	r3, [sp, #28]
  401dc4:	4648      	mov	r0, r9
  401dc6:	f7ff fae9 	bl	40139c <__sprint_r.part.0>
  401dca:	2800      	cmp	r0, #0
  401dcc:	d1c0      	bne.n	401d50 <_vfiprintf_r+0x93c>
  401dce:	980e      	ldr	r0, [sp, #56]	; 0x38
  401dd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401dd2:	9b07      	ldr	r3, [sp, #28]
  401dd4:	f100 0c01 	add.w	ip, r0, #1
  401dd8:	46de      	mov	lr, fp
  401dda:	e4cb      	b.n	401774 <_vfiprintf_r+0x360>
  401ddc:	004041e4 	.word	0x004041e4
  401de0:	004041f8 	.word	0x004041f8
  401de4:	004041d4 	.word	0x004041d4
  401de8:	2a00      	cmp	r2, #0
  401dea:	f040 8133 	bne.w	402054 <_vfiprintf_r+0xc40>
  401dee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  401df2:	2b00      	cmp	r3, #0
  401df4:	f000 80f5 	beq.w	401fe2 <_vfiprintf_r+0xbce>
  401df8:	2301      	movs	r3, #1
  401dfa:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  401dfe:	461a      	mov	r2, r3
  401e00:	931b      	str	r3, [sp, #108]	; 0x6c
  401e02:	469e      	mov	lr, r3
  401e04:	911a      	str	r1, [sp, #104]	; 0x68
  401e06:	46da      	mov	sl, fp
  401e08:	4670      	mov	r0, lr
  401e0a:	f10a 0a08 	add.w	sl, sl, #8
  401e0e:	f10e 0e01 	add.w	lr, lr, #1
  401e12:	e47d      	b.n	401710 <_vfiprintf_r+0x2fc>
  401e14:	a90c      	add	r1, sp, #48	; 0x30
  401e16:	2202      	movs	r2, #2
  401e18:	469e      	mov	lr, r3
  401e1a:	911a      	str	r1, [sp, #104]	; 0x68
  401e1c:	921b      	str	r2, [sp, #108]	; 0x6c
  401e1e:	46da      	mov	sl, fp
  401e20:	4670      	mov	r0, lr
  401e22:	f10a 0a08 	add.w	sl, sl, #8
  401e26:	f10e 0e01 	add.w	lr, lr, #1
  401e2a:	e738      	b.n	401c9e <_vfiprintf_r+0x88a>
  401e2c:	9b01      	ldr	r3, [sp, #4]
  401e2e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401e32:	2b00      	cmp	r3, #0
  401e34:	f2c0 812a 	blt.w	40208c <_vfiprintf_r+0xc78>
  401e38:	ea54 0305 	orrs.w	r3, r4, r5
  401e3c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401e40:	f43f abff 	beq.w	401642 <_vfiprintf_r+0x22e>
  401e44:	465f      	mov	r7, fp
  401e46:	0923      	lsrs	r3, r4, #4
  401e48:	f004 010f 	and.w	r1, r4, #15
  401e4c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  401e50:	092a      	lsrs	r2, r5, #4
  401e52:	461c      	mov	r4, r3
  401e54:	4615      	mov	r5, r2
  401e56:	5c43      	ldrb	r3, [r0, r1]
  401e58:	f807 3d01 	strb.w	r3, [r7, #-1]!
  401e5c:	ea54 0305 	orrs.w	r3, r4, r5
  401e60:	d1f1      	bne.n	401e46 <_vfiprintf_r+0xa32>
  401e62:	ebc7 030b 	rsb	r3, r7, fp
  401e66:	9303      	str	r3, [sp, #12]
  401e68:	f7ff bbf4 	b.w	401654 <_vfiprintf_r+0x240>
  401e6c:	aa0d      	add	r2, sp, #52	; 0x34
  401e6e:	9900      	ldr	r1, [sp, #0]
  401e70:	9805      	ldr	r0, [sp, #20]
  401e72:	f7ff fa93 	bl	40139c <__sprint_r.part.0>
  401e76:	2800      	cmp	r0, #0
  401e78:	f47f af6a 	bne.w	401d50 <_vfiprintf_r+0x93c>
  401e7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401e7e:	46da      	mov	sl, fp
  401e80:	e787      	b.n	401d92 <_vfiprintf_r+0x97e>
  401e82:	f04f 0900 	mov.w	r9, #0
  401e86:	2400      	movs	r4, #0
  401e88:	2500      	movs	r5, #0
  401e8a:	e7db      	b.n	401e44 <_vfiprintf_r+0xa30>
  401e8c:	f016 0210 	ands.w	r2, r6, #16
  401e90:	f000 80b2 	beq.w	401ff8 <_vfiprintf_r+0xbe4>
  401e94:	9904      	ldr	r1, [sp, #16]
  401e96:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401e9a:	460a      	mov	r2, r1
  401e9c:	680c      	ldr	r4, [r1, #0]
  401e9e:	9901      	ldr	r1, [sp, #4]
  401ea0:	2900      	cmp	r1, #0
  401ea2:	f102 0204 	add.w	r2, r2, #4
  401ea6:	f04f 0500 	mov.w	r5, #0
  401eaa:	f2c0 8159 	blt.w	402160 <_vfiprintf_r+0xd4c>
  401eae:	ea54 0105 	orrs.w	r1, r4, r5
  401eb2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401eb6:	9204      	str	r2, [sp, #16]
  401eb8:	f43f ad51 	beq.w	40195e <_vfiprintf_r+0x54a>
  401ebc:	4699      	mov	r9, r3
  401ebe:	e556      	b.n	40196e <_vfiprintf_r+0x55a>
  401ec0:	06f7      	lsls	r7, r6, #27
  401ec2:	d40a      	bmi.n	401eda <_vfiprintf_r+0xac6>
  401ec4:	0675      	lsls	r5, r6, #25
  401ec6:	d508      	bpl.n	401eda <_vfiprintf_r+0xac6>
  401ec8:	9904      	ldr	r1, [sp, #16]
  401eca:	f9b1 4000 	ldrsh.w	r4, [r1]
  401ece:	3104      	adds	r1, #4
  401ed0:	17e5      	asrs	r5, r4, #31
  401ed2:	4622      	mov	r2, r4
  401ed4:	462b      	mov	r3, r5
  401ed6:	9104      	str	r1, [sp, #16]
  401ed8:	e4ea      	b.n	4018b0 <_vfiprintf_r+0x49c>
  401eda:	9a04      	ldr	r2, [sp, #16]
  401edc:	6814      	ldr	r4, [r2, #0]
  401ede:	4613      	mov	r3, r2
  401ee0:	3304      	adds	r3, #4
  401ee2:	17e5      	asrs	r5, r4, #31
  401ee4:	9304      	str	r3, [sp, #16]
  401ee6:	4622      	mov	r2, r4
  401ee8:	462b      	mov	r3, r5
  401eea:	e4e1      	b.n	4018b0 <_vfiprintf_r+0x49c>
  401eec:	6814      	ldr	r4, [r2, #0]
  401eee:	3204      	adds	r2, #4
  401ef0:	9204      	str	r2, [sp, #16]
  401ef2:	2500      	movs	r5, #0
  401ef4:	e61f      	b.n	401b36 <_vfiprintf_r+0x722>
  401ef6:	f04f 0900 	mov.w	r9, #0
  401efa:	ea54 0305 	orrs.w	r3, r4, r5
  401efe:	f47f ace8 	bne.w	4018d2 <_vfiprintf_r+0x4be>
  401f02:	e5d8      	b.n	401ab6 <_vfiprintf_r+0x6a2>
  401f04:	aa0d      	add	r2, sp, #52	; 0x34
  401f06:	9900      	ldr	r1, [sp, #0]
  401f08:	9805      	ldr	r0, [sp, #20]
  401f0a:	f7ff fa47 	bl	40139c <__sprint_r.part.0>
  401f0e:	2800      	cmp	r0, #0
  401f10:	f47f af1e 	bne.w	401d50 <_vfiprintf_r+0x93c>
  401f14:	46da      	mov	sl, fp
  401f16:	f7ff bb48 	b.w	4015aa <_vfiprintf_r+0x196>
  401f1a:	aa0d      	add	r2, sp, #52	; 0x34
  401f1c:	9900      	ldr	r1, [sp, #0]
  401f1e:	9805      	ldr	r0, [sp, #20]
  401f20:	f7ff fa3c 	bl	40139c <__sprint_r.part.0>
  401f24:	2800      	cmp	r0, #0
  401f26:	f43f af45 	beq.w	401db4 <_vfiprintf_r+0x9a0>
  401f2a:	e711      	b.n	401d50 <_vfiprintf_r+0x93c>
  401f2c:	aa0d      	add	r2, sp, #52	; 0x34
  401f2e:	9900      	ldr	r1, [sp, #0]
  401f30:	9805      	ldr	r0, [sp, #20]
  401f32:	f7ff fa33 	bl	40139c <__sprint_r.part.0>
  401f36:	2800      	cmp	r0, #0
  401f38:	f47f af0a 	bne.w	401d50 <_vfiprintf_r+0x93c>
  401f3c:	980e      	ldr	r0, [sp, #56]	; 0x38
  401f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f40:	f100 0e01 	add.w	lr, r0, #1
  401f44:	46da      	mov	sl, fp
  401f46:	f7ff bbe3 	b.w	401710 <_vfiprintf_r+0x2fc>
  401f4a:	aa0d      	add	r2, sp, #52	; 0x34
  401f4c:	9900      	ldr	r1, [sp, #0]
  401f4e:	9805      	ldr	r0, [sp, #20]
  401f50:	f7ff fa24 	bl	40139c <__sprint_r.part.0>
  401f54:	2800      	cmp	r0, #0
  401f56:	f47f aefb 	bne.w	401d50 <_vfiprintf_r+0x93c>
  401f5a:	980e      	ldr	r0, [sp, #56]	; 0x38
  401f5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f5e:	f100 0e01 	add.w	lr, r0, #1
  401f62:	46da      	mov	sl, fp
  401f64:	e69b      	b.n	401c9e <_vfiprintf_r+0x88a>
  401f66:	2a00      	cmp	r2, #0
  401f68:	f040 80d8 	bne.w	40211c <_vfiprintf_r+0xd08>
  401f6c:	f04f 0e01 	mov.w	lr, #1
  401f70:	4610      	mov	r0, r2
  401f72:	46da      	mov	sl, fp
  401f74:	e697      	b.n	401ca6 <_vfiprintf_r+0x892>
  401f76:	aa0d      	add	r2, sp, #52	; 0x34
  401f78:	9900      	ldr	r1, [sp, #0]
  401f7a:	9805      	ldr	r0, [sp, #20]
  401f7c:	f7ff fa0e 	bl	40139c <__sprint_r.part.0>
  401f80:	2800      	cmp	r0, #0
  401f82:	f47f aee5 	bne.w	401d50 <_vfiprintf_r+0x93c>
  401f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401f88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401f8a:	f103 0e01 	add.w	lr, r3, #1
  401f8e:	46da      	mov	sl, fp
  401f90:	e422      	b.n	4017d8 <_vfiprintf_r+0x3c4>
  401f92:	2230      	movs	r2, #48	; 0x30
  401f94:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  401f98:	9a01      	ldr	r2, [sp, #4]
  401f9a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  401f9e:	2a00      	cmp	r2, #0
  401fa0:	f04f 0300 	mov.w	r3, #0
  401fa4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  401fa8:	f046 0302 	orr.w	r3, r6, #2
  401fac:	f2c0 80cb 	blt.w	402146 <_vfiprintf_r+0xd32>
  401fb0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401fb4:	f046 0602 	orr.w	r6, r6, #2
  401fb8:	f04f 0900 	mov.w	r9, #0
  401fbc:	e742      	b.n	401e44 <_vfiprintf_r+0xa30>
  401fbe:	f04f 0900 	mov.w	r9, #0
  401fc2:	4890      	ldr	r0, [pc, #576]	; (402204 <_vfiprintf_r+0xdf0>)
  401fc4:	e73e      	b.n	401e44 <_vfiprintf_r+0xa30>
  401fc6:	9b01      	ldr	r3, [sp, #4]
  401fc8:	4264      	negs	r4, r4
  401fca:	f04f 092d 	mov.w	r9, #45	; 0x2d
  401fce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  401fd2:	2b00      	cmp	r3, #0
  401fd4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  401fd8:	f6ff ac7b 	blt.w	4018d2 <_vfiprintf_r+0x4be>
  401fdc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  401fe0:	e477      	b.n	4018d2 <_vfiprintf_r+0x4be>
  401fe2:	9b07      	ldr	r3, [sp, #28]
  401fe4:	2b00      	cmp	r3, #0
  401fe6:	d072      	beq.n	4020ce <_vfiprintf_r+0xcba>
  401fe8:	ab0c      	add	r3, sp, #48	; 0x30
  401fea:	2202      	movs	r2, #2
  401fec:	931a      	str	r3, [sp, #104]	; 0x68
  401fee:	921b      	str	r2, [sp, #108]	; 0x6c
  401ff0:	f04f 0e01 	mov.w	lr, #1
  401ff4:	46da      	mov	sl, fp
  401ff6:	e713      	b.n	401e20 <_vfiprintf_r+0xa0c>
  401ff8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  401ffc:	d048      	beq.n	402090 <_vfiprintf_r+0xc7c>
  401ffe:	9904      	ldr	r1, [sp, #16]
  402000:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  402004:	460b      	mov	r3, r1
  402006:	880c      	ldrh	r4, [r1, #0]
  402008:	9901      	ldr	r1, [sp, #4]
  40200a:	2900      	cmp	r1, #0
  40200c:	f103 0304 	add.w	r3, r3, #4
  402010:	f04f 0500 	mov.w	r5, #0
  402014:	f6ff ae10 	blt.w	401c38 <_vfiprintf_r+0x824>
  402018:	ea54 0105 	orrs.w	r1, r4, r5
  40201c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  402020:	9304      	str	r3, [sp, #16]
  402022:	f43f ac9c 	beq.w	40195e <_vfiprintf_r+0x54a>
  402026:	4691      	mov	r9, r2
  402028:	e4a1      	b.n	40196e <_vfiprintf_r+0x55a>
  40202a:	06f0      	lsls	r0, r6, #27
  40202c:	d40a      	bmi.n	402044 <_vfiprintf_r+0xc30>
  40202e:	0671      	lsls	r1, r6, #25
  402030:	d508      	bpl.n	402044 <_vfiprintf_r+0xc30>
  402032:	9a04      	ldr	r2, [sp, #16]
  402034:	6813      	ldr	r3, [r2, #0]
  402036:	3204      	adds	r2, #4
  402038:	9204      	str	r2, [sp, #16]
  40203a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  40203e:	801a      	strh	r2, [r3, #0]
  402040:	f7ff ba19 	b.w	401476 <_vfiprintf_r+0x62>
  402044:	9a04      	ldr	r2, [sp, #16]
  402046:	6813      	ldr	r3, [r2, #0]
  402048:	3204      	adds	r2, #4
  40204a:	9204      	str	r2, [sp, #16]
  40204c:	9a02      	ldr	r2, [sp, #8]
  40204e:	601a      	str	r2, [r3, #0]
  402050:	f7ff ba11 	b.w	401476 <_vfiprintf_r+0x62>
  402054:	aa0d      	add	r2, sp, #52	; 0x34
  402056:	9900      	ldr	r1, [sp, #0]
  402058:	9805      	ldr	r0, [sp, #20]
  40205a:	f7ff f99f 	bl	40139c <__sprint_r.part.0>
  40205e:	2800      	cmp	r0, #0
  402060:	f47f ae76 	bne.w	401d50 <_vfiprintf_r+0x93c>
  402064:	980e      	ldr	r0, [sp, #56]	; 0x38
  402066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402068:	f100 0e01 	add.w	lr, r0, #1
  40206c:	46da      	mov	sl, fp
  40206e:	e5fa      	b.n	401c66 <_vfiprintf_r+0x852>
  402070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402074:	f7ff bab6 	b.w	4015e4 <_vfiprintf_r+0x1d0>
  402078:	4862      	ldr	r0, [pc, #392]	; (402204 <_vfiprintf_r+0xdf0>)
  40207a:	4616      	mov	r6, r2
  40207c:	ea54 0205 	orrs.w	r2, r4, r5
  402080:	9304      	str	r3, [sp, #16]
  402082:	f04f 0900 	mov.w	r9, #0
  402086:	f47f aedd 	bne.w	401e44 <_vfiprintf_r+0xa30>
  40208a:	e6fc      	b.n	401e86 <_vfiprintf_r+0xa72>
  40208c:	9b04      	ldr	r3, [sp, #16]
  40208e:	e7f5      	b.n	40207c <_vfiprintf_r+0xc68>
  402090:	9a04      	ldr	r2, [sp, #16]
  402092:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  402096:	4613      	mov	r3, r2
  402098:	6814      	ldr	r4, [r2, #0]
  40209a:	9a01      	ldr	r2, [sp, #4]
  40209c:	2a00      	cmp	r2, #0
  40209e:	f103 0304 	add.w	r3, r3, #4
  4020a2:	f04f 0500 	mov.w	r5, #0
  4020a6:	f6ff adc7 	blt.w	401c38 <_vfiprintf_r+0x824>
  4020aa:	ea54 0205 	orrs.w	r2, r4, r5
  4020ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4020b2:	9304      	str	r3, [sp, #16]
  4020b4:	f47f ac5b 	bne.w	40196e <_vfiprintf_r+0x55a>
  4020b8:	e451      	b.n	40195e <_vfiprintf_r+0x54a>
  4020ba:	aa0d      	add	r2, sp, #52	; 0x34
  4020bc:	9900      	ldr	r1, [sp, #0]
  4020be:	9805      	ldr	r0, [sp, #20]
  4020c0:	f7ff f96c 	bl	40139c <__sprint_r.part.0>
  4020c4:	2800      	cmp	r0, #0
  4020c6:	f47f ae43 	bne.w	401d50 <_vfiprintf_r+0x93c>
  4020ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4020cc:	e668      	b.n	401da0 <_vfiprintf_r+0x98c>
  4020ce:	4610      	mov	r0, r2
  4020d0:	f04f 0e01 	mov.w	lr, #1
  4020d4:	46da      	mov	sl, fp
  4020d6:	e5e6      	b.n	401ca6 <_vfiprintf_r+0x892>
  4020d8:	9904      	ldr	r1, [sp, #16]
  4020da:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4020de:	460a      	mov	r2, r1
  4020e0:	880c      	ldrh	r4, [r1, #0]
  4020e2:	9901      	ldr	r1, [sp, #4]
  4020e4:	2900      	cmp	r1, #0
  4020e6:	f102 0204 	add.w	r2, r2, #4
  4020ea:	f04f 0500 	mov.w	r5, #0
  4020ee:	db4e      	blt.n	40218e <_vfiprintf_r+0xd7a>
  4020f0:	ea54 0105 	orrs.w	r1, r4, r5
  4020f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4020f8:	9204      	str	r2, [sp, #16]
  4020fa:	4699      	mov	r9, r3
  4020fc:	f47f abe9 	bne.w	4018d2 <_vfiprintf_r+0x4be>
  402100:	e4d4      	b.n	401aac <_vfiprintf_r+0x698>
  402102:	9304      	str	r3, [sp, #16]
  402104:	e6f9      	b.n	401efa <_vfiprintf_r+0xae6>
  402106:	4638      	mov	r0, r7
  402108:	9404      	str	r4, [sp, #16]
  40210a:	f7ff f8d9 	bl	4012c0 <strlen>
  40210e:	2300      	movs	r3, #0
  402110:	9003      	str	r0, [sp, #12]
  402112:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  402116:	9301      	str	r3, [sp, #4]
  402118:	f7ff ba9c 	b.w	401654 <_vfiprintf_r+0x240>
  40211c:	aa0d      	add	r2, sp, #52	; 0x34
  40211e:	9900      	ldr	r1, [sp, #0]
  402120:	9805      	ldr	r0, [sp, #20]
  402122:	f7ff f93b 	bl	40139c <__sprint_r.part.0>
  402126:	2800      	cmp	r0, #0
  402128:	f47f ae12 	bne.w	401d50 <_vfiprintf_r+0x93c>
  40212c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40212e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402130:	f100 0e01 	add.w	lr, r0, #1
  402134:	46da      	mov	sl, fp
  402136:	e5b6      	b.n	401ca6 <_vfiprintf_r+0x892>
  402138:	980e      	ldr	r0, [sp, #56]	; 0x38
  40213a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40213c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 40220c <_vfiprintf_r+0xdf8>
  402140:	3001      	adds	r0, #1
  402142:	f7ff bad2 	b.w	4016ea <_vfiprintf_r+0x2d6>
  402146:	461e      	mov	r6, r3
  402148:	f04f 0900 	mov.w	r9, #0
  40214c:	e67a      	b.n	401e44 <_vfiprintf_r+0xa30>
  40214e:	2b06      	cmp	r3, #6
  402150:	bf28      	it	cs
  402152:	2306      	movcs	r3, #6
  402154:	9303      	str	r3, [sp, #12]
  402156:	9404      	str	r4, [sp, #16]
  402158:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  40215c:	4f2a      	ldr	r7, [pc, #168]	; (402208 <_vfiprintf_r+0xdf4>)
  40215e:	e50c      	b.n	401b7a <_vfiprintf_r+0x766>
  402160:	9204      	str	r2, [sp, #16]
  402162:	e56a      	b.n	401c3a <_vfiprintf_r+0x826>
  402164:	980e      	ldr	r0, [sp, #56]	; 0x38
  402166:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40220c <_vfiprintf_r+0xdf8>
  40216a:	3001      	adds	r0, #1
  40216c:	f7ff bb73 	b.w	401856 <_vfiprintf_r+0x442>
  402170:	46f4      	mov	ip, lr
  402172:	f7ff bb1a 	b.w	4017aa <_vfiprintf_r+0x396>
  402176:	9b01      	ldr	r3, [sp, #4]
  402178:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40217c:	9303      	str	r3, [sp, #12]
  40217e:	9404      	str	r4, [sp, #16]
  402180:	9001      	str	r0, [sp, #4]
  402182:	f7ff ba67 	b.w	401654 <_vfiprintf_r+0x240>
  402186:	2200      	movs	r2, #0
  402188:	9201      	str	r2, [sp, #4]
  40218a:	f7ff b9ac 	b.w	4014e6 <_vfiprintf_r+0xd2>
  40218e:	9204      	str	r2, [sp, #16]
  402190:	4699      	mov	r9, r3
  402192:	e6b2      	b.n	401efa <_vfiprintf_r+0xae6>
  402194:	9a04      	ldr	r2, [sp, #16]
  402196:	6813      	ldr	r3, [r2, #0]
  402198:	9301      	str	r3, [sp, #4]
  40219a:	3204      	adds	r2, #4
  40219c:	2b00      	cmp	r3, #0
  40219e:	9204      	str	r2, [sp, #16]
  4021a0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4021a4:	46a8      	mov	r8, r5
  4021a6:	f6bf a99c 	bge.w	4014e2 <_vfiprintf_r+0xce>
  4021aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4021ae:	9201      	str	r2, [sp, #4]
  4021b0:	f7ff b997 	b.w	4014e2 <_vfiprintf_r+0xce>
  4021b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4021b8:	e48e      	b.n	401ad8 <_vfiprintf_r+0x6c4>
  4021ba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4021be:	e4f0      	b.n	401ba2 <_vfiprintf_r+0x78e>
  4021c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4021c4:	e4ab      	b.n	401b1e <_vfiprintf_r+0x70a>
  4021c6:	4699      	mov	r9, r3
  4021c8:	07f3      	lsls	r3, r6, #31
  4021ca:	d505      	bpl.n	4021d8 <_vfiprintf_r+0xdc4>
  4021cc:	af2a      	add	r7, sp, #168	; 0xa8
  4021ce:	2330      	movs	r3, #48	; 0x30
  4021d0:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4021d4:	f7ff bb97 	b.w	401906 <_vfiprintf_r+0x4f2>
  4021d8:	9b01      	ldr	r3, [sp, #4]
  4021da:	9303      	str	r3, [sp, #12]
  4021dc:	465f      	mov	r7, fp
  4021de:	f7ff ba39 	b.w	401654 <_vfiprintf_r+0x240>
  4021e2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4021e6:	e443      	b.n	401a70 <_vfiprintf_r+0x65c>
  4021e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4021ec:	f7ff bb9a 	b.w	401924 <_vfiprintf_r+0x510>
  4021f0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4021f4:	f7ff bb4d 	b.w	401892 <_vfiprintf_r+0x47e>
  4021f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4021fc:	e50f      	b.n	401c1e <_vfiprintf_r+0x80a>
  4021fe:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  402202:	e4f3      	b.n	401bec <_vfiprintf_r+0x7d8>
  402204:	004041f8 	.word	0x004041f8
  402208:	0040420c 	.word	0x0040420c
  40220c:	00404214 	.word	0x00404214

00402210 <__sbprintf>:
  402210:	b5f0      	push	{r4, r5, r6, r7, lr}
  402212:	460c      	mov	r4, r1
  402214:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  402218:	8989      	ldrh	r1, [r1, #12]
  40221a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40221c:	89e5      	ldrh	r5, [r4, #14]
  40221e:	9619      	str	r6, [sp, #100]	; 0x64
  402220:	f021 0102 	bic.w	r1, r1, #2
  402224:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402226:	f8ad 500e 	strh.w	r5, [sp, #14]
  40222a:	2500      	movs	r5, #0
  40222c:	69e7      	ldr	r7, [r4, #28]
  40222e:	f8ad 100c 	strh.w	r1, [sp, #12]
  402232:	9609      	str	r6, [sp, #36]	; 0x24
  402234:	9506      	str	r5, [sp, #24]
  402236:	ae1a      	add	r6, sp, #104	; 0x68
  402238:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40223c:	4669      	mov	r1, sp
  40223e:	9600      	str	r6, [sp, #0]
  402240:	9604      	str	r6, [sp, #16]
  402242:	9502      	str	r5, [sp, #8]
  402244:	9505      	str	r5, [sp, #20]
  402246:	9707      	str	r7, [sp, #28]
  402248:	4606      	mov	r6, r0
  40224a:	f7ff f8e3 	bl	401414 <_vfiprintf_r>
  40224e:	1e05      	subs	r5, r0, #0
  402250:	db07      	blt.n	402262 <__sbprintf+0x52>
  402252:	4630      	mov	r0, r6
  402254:	4669      	mov	r1, sp
  402256:	f000 f929 	bl	4024ac <_fflush_r>
  40225a:	2800      	cmp	r0, #0
  40225c:	bf18      	it	ne
  40225e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
  402262:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  402266:	065b      	lsls	r3, r3, #25
  402268:	d503      	bpl.n	402272 <__sbprintf+0x62>
  40226a:	89a3      	ldrh	r3, [r4, #12]
  40226c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402270:	81a3      	strh	r3, [r4, #12]
  402272:	4628      	mov	r0, r5
  402274:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  402278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40227a:	bf00      	nop

0040227c <__swsetup_r>:
  40227c:	b538      	push	{r3, r4, r5, lr}
  40227e:	4b30      	ldr	r3, [pc, #192]	; (402340 <__swsetup_r+0xc4>)
  402280:	681b      	ldr	r3, [r3, #0]
  402282:	4605      	mov	r5, r0
  402284:	460c      	mov	r4, r1
  402286:	b113      	cbz	r3, 40228e <__swsetup_r+0x12>
  402288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40228a:	2a00      	cmp	r2, #0
  40228c:	d038      	beq.n	402300 <__swsetup_r+0x84>
  40228e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402292:	b293      	uxth	r3, r2
  402294:	0718      	lsls	r0, r3, #28
  402296:	d50c      	bpl.n	4022b2 <__swsetup_r+0x36>
  402298:	6920      	ldr	r0, [r4, #16]
  40229a:	b1a8      	cbz	r0, 4022c8 <__swsetup_r+0x4c>
  40229c:	f013 0201 	ands.w	r2, r3, #1
  4022a0:	d01e      	beq.n	4022e0 <__swsetup_r+0x64>
  4022a2:	6963      	ldr	r3, [r4, #20]
  4022a4:	2200      	movs	r2, #0
  4022a6:	425b      	negs	r3, r3
  4022a8:	61a3      	str	r3, [r4, #24]
  4022aa:	60a2      	str	r2, [r4, #8]
  4022ac:	b1f0      	cbz	r0, 4022ec <__swsetup_r+0x70>
  4022ae:	2000      	movs	r0, #0
  4022b0:	bd38      	pop	{r3, r4, r5, pc}
  4022b2:	06d9      	lsls	r1, r3, #27
  4022b4:	d53c      	bpl.n	402330 <__swsetup_r+0xb4>
  4022b6:	0758      	lsls	r0, r3, #29
  4022b8:	d426      	bmi.n	402308 <__swsetup_r+0x8c>
  4022ba:	6920      	ldr	r0, [r4, #16]
  4022bc:	f042 0308 	orr.w	r3, r2, #8
  4022c0:	81a3      	strh	r3, [r4, #12]
  4022c2:	b29b      	uxth	r3, r3
  4022c4:	2800      	cmp	r0, #0
  4022c6:	d1e9      	bne.n	40229c <__swsetup_r+0x20>
  4022c8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4022cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4022d0:	d0e4      	beq.n	40229c <__swsetup_r+0x20>
  4022d2:	4628      	mov	r0, r5
  4022d4:	4621      	mov	r1, r4
  4022d6:	f000 fd19 	bl	402d0c <__smakebuf_r>
  4022da:	89a3      	ldrh	r3, [r4, #12]
  4022dc:	6920      	ldr	r0, [r4, #16]
  4022de:	e7dd      	b.n	40229c <__swsetup_r+0x20>
  4022e0:	0799      	lsls	r1, r3, #30
  4022e2:	bf58      	it	pl
  4022e4:	6962      	ldrpl	r2, [r4, #20]
  4022e6:	60a2      	str	r2, [r4, #8]
  4022e8:	2800      	cmp	r0, #0
  4022ea:	d1e0      	bne.n	4022ae <__swsetup_r+0x32>
  4022ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4022f0:	061a      	lsls	r2, r3, #24
  4022f2:	d5dd      	bpl.n	4022b0 <__swsetup_r+0x34>
  4022f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4022f8:	81a3      	strh	r3, [r4, #12]
  4022fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4022fe:	bd38      	pop	{r3, r4, r5, pc}
  402300:	4618      	mov	r0, r3
  402302:	f000 f967 	bl	4025d4 <__sinit>
  402306:	e7c2      	b.n	40228e <__swsetup_r+0x12>
  402308:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40230a:	b151      	cbz	r1, 402322 <__swsetup_r+0xa6>
  40230c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402310:	4299      	cmp	r1, r3
  402312:	d004      	beq.n	40231e <__swsetup_r+0xa2>
  402314:	4628      	mov	r0, r5
  402316:	f000 fa27 	bl	402768 <_free_r>
  40231a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40231e:	2300      	movs	r3, #0
  402320:	6323      	str	r3, [r4, #48]	; 0x30
  402322:	2300      	movs	r3, #0
  402324:	6920      	ldr	r0, [r4, #16]
  402326:	6063      	str	r3, [r4, #4]
  402328:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40232c:	6020      	str	r0, [r4, #0]
  40232e:	e7c5      	b.n	4022bc <__swsetup_r+0x40>
  402330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402334:	2309      	movs	r3, #9
  402336:	602b      	str	r3, [r5, #0]
  402338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40233c:	81a2      	strh	r2, [r4, #12]
  40233e:	bd38      	pop	{r3, r4, r5, pc}
  402340:	20000438 	.word	0x20000438

00402344 <register_fini>:
  402344:	4b02      	ldr	r3, [pc, #8]	; (402350 <register_fini+0xc>)
  402346:	b113      	cbz	r3, 40234e <register_fini+0xa>
  402348:	4802      	ldr	r0, [pc, #8]	; (402354 <register_fini+0x10>)
  40234a:	f000 b805 	b.w	402358 <atexit>
  40234e:	4770      	bx	lr
  402350:	00000000 	.word	0x00000000
  402354:	004025e9 	.word	0x004025e9

00402358 <atexit>:
  402358:	2300      	movs	r3, #0
  40235a:	4601      	mov	r1, r0
  40235c:	461a      	mov	r2, r3
  40235e:	4618      	mov	r0, r3
  402360:	f001 bc2a 	b.w	403bb8 <__register_exitproc>

00402364 <__sflush_r>:
  402364:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  402368:	b29a      	uxth	r2, r3
  40236a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40236e:	460d      	mov	r5, r1
  402370:	0711      	lsls	r1, r2, #28
  402372:	4680      	mov	r8, r0
  402374:	d43c      	bmi.n	4023f0 <__sflush_r+0x8c>
  402376:	686a      	ldr	r2, [r5, #4]
  402378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40237c:	2a00      	cmp	r2, #0
  40237e:	81ab      	strh	r3, [r5, #12]
  402380:	dd73      	ble.n	40246a <__sflush_r+0x106>
  402382:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402384:	2c00      	cmp	r4, #0
  402386:	d04b      	beq.n	402420 <__sflush_r+0xbc>
  402388:	b29b      	uxth	r3, r3
  40238a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40238e:	2100      	movs	r1, #0
  402390:	b292      	uxth	r2, r2
  402392:	f8d8 6000 	ldr.w	r6, [r8]
  402396:	f8c8 1000 	str.w	r1, [r8]
  40239a:	2a00      	cmp	r2, #0
  40239c:	d069      	beq.n	402472 <__sflush_r+0x10e>
  40239e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4023a0:	075f      	lsls	r7, r3, #29
  4023a2:	d505      	bpl.n	4023b0 <__sflush_r+0x4c>
  4023a4:	6869      	ldr	r1, [r5, #4]
  4023a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4023a8:	1a52      	subs	r2, r2, r1
  4023aa:	b10b      	cbz	r3, 4023b0 <__sflush_r+0x4c>
  4023ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4023ae:	1ad2      	subs	r2, r2, r3
  4023b0:	2300      	movs	r3, #0
  4023b2:	69e9      	ldr	r1, [r5, #28]
  4023b4:	4640      	mov	r0, r8
  4023b6:	47a0      	blx	r4
  4023b8:	1c44      	adds	r4, r0, #1
  4023ba:	d03c      	beq.n	402436 <__sflush_r+0xd2>
  4023bc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4023c0:	692a      	ldr	r2, [r5, #16]
  4023c2:	602a      	str	r2, [r5, #0]
  4023c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4023c8:	2200      	movs	r2, #0
  4023ca:	81ab      	strh	r3, [r5, #12]
  4023cc:	04db      	lsls	r3, r3, #19
  4023ce:	606a      	str	r2, [r5, #4]
  4023d0:	d449      	bmi.n	402466 <__sflush_r+0x102>
  4023d2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4023d4:	f8c8 6000 	str.w	r6, [r8]
  4023d8:	b311      	cbz	r1, 402420 <__sflush_r+0xbc>
  4023da:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4023de:	4299      	cmp	r1, r3
  4023e0:	d002      	beq.n	4023e8 <__sflush_r+0x84>
  4023e2:	4640      	mov	r0, r8
  4023e4:	f000 f9c0 	bl	402768 <_free_r>
  4023e8:	2000      	movs	r0, #0
  4023ea:	6328      	str	r0, [r5, #48]	; 0x30
  4023ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023f0:	692e      	ldr	r6, [r5, #16]
  4023f2:	b1ae      	cbz	r6, 402420 <__sflush_r+0xbc>
  4023f4:	682c      	ldr	r4, [r5, #0]
  4023f6:	602e      	str	r6, [r5, #0]
  4023f8:	0790      	lsls	r0, r2, #30
  4023fa:	bf0c      	ite	eq
  4023fc:	696b      	ldreq	r3, [r5, #20]
  4023fe:	2300      	movne	r3, #0
  402400:	1ba4      	subs	r4, r4, r6
  402402:	60ab      	str	r3, [r5, #8]
  402404:	e00a      	b.n	40241c <__sflush_r+0xb8>
  402406:	4623      	mov	r3, r4
  402408:	4632      	mov	r2, r6
  40240a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40240c:	69e9      	ldr	r1, [r5, #28]
  40240e:	4640      	mov	r0, r8
  402410:	47b8      	blx	r7
  402412:	2800      	cmp	r0, #0
  402414:	eba4 0400 	sub.w	r4, r4, r0
  402418:	4406      	add	r6, r0
  40241a:	dd04      	ble.n	402426 <__sflush_r+0xc2>
  40241c:	2c00      	cmp	r4, #0
  40241e:	dcf2      	bgt.n	402406 <__sflush_r+0xa2>
  402420:	2000      	movs	r0, #0
  402422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402426:	89ab      	ldrh	r3, [r5, #12]
  402428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40242c:	81ab      	strh	r3, [r5, #12]
  40242e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402436:	f8d8 2000 	ldr.w	r2, [r8]
  40243a:	2a1d      	cmp	r2, #29
  40243c:	d8f3      	bhi.n	402426 <__sflush_r+0xc2>
  40243e:	4b1a      	ldr	r3, [pc, #104]	; (4024a8 <__sflush_r+0x144>)
  402440:	40d3      	lsrs	r3, r2
  402442:	f003 0301 	and.w	r3, r3, #1
  402446:	f083 0401 	eor.w	r4, r3, #1
  40244a:	2b00      	cmp	r3, #0
  40244c:	d0eb      	beq.n	402426 <__sflush_r+0xc2>
  40244e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402452:	6929      	ldr	r1, [r5, #16]
  402454:	6029      	str	r1, [r5, #0]
  402456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40245a:	04d9      	lsls	r1, r3, #19
  40245c:	606c      	str	r4, [r5, #4]
  40245e:	81ab      	strh	r3, [r5, #12]
  402460:	d5b7      	bpl.n	4023d2 <__sflush_r+0x6e>
  402462:	2a00      	cmp	r2, #0
  402464:	d1b5      	bne.n	4023d2 <__sflush_r+0x6e>
  402466:	6528      	str	r0, [r5, #80]	; 0x50
  402468:	e7b3      	b.n	4023d2 <__sflush_r+0x6e>
  40246a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40246c:	2a00      	cmp	r2, #0
  40246e:	dc88      	bgt.n	402382 <__sflush_r+0x1e>
  402470:	e7d6      	b.n	402420 <__sflush_r+0xbc>
  402472:	2301      	movs	r3, #1
  402474:	69e9      	ldr	r1, [r5, #28]
  402476:	4640      	mov	r0, r8
  402478:	47a0      	blx	r4
  40247a:	1c43      	adds	r3, r0, #1
  40247c:	4602      	mov	r2, r0
  40247e:	d002      	beq.n	402486 <__sflush_r+0x122>
  402480:	89ab      	ldrh	r3, [r5, #12]
  402482:	6aac      	ldr	r4, [r5, #40]	; 0x28
  402484:	e78c      	b.n	4023a0 <__sflush_r+0x3c>
  402486:	f8d8 3000 	ldr.w	r3, [r8]
  40248a:	2b00      	cmp	r3, #0
  40248c:	d0f8      	beq.n	402480 <__sflush_r+0x11c>
  40248e:	2b1d      	cmp	r3, #29
  402490:	d001      	beq.n	402496 <__sflush_r+0x132>
  402492:	2b16      	cmp	r3, #22
  402494:	d102      	bne.n	40249c <__sflush_r+0x138>
  402496:	f8c8 6000 	str.w	r6, [r8]
  40249a:	e7c1      	b.n	402420 <__sflush_r+0xbc>
  40249c:	89ab      	ldrh	r3, [r5, #12]
  40249e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4024a2:	81ab      	strh	r3, [r5, #12]
  4024a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024a8:	20400001 	.word	0x20400001

004024ac <_fflush_r>:
  4024ac:	b510      	push	{r4, lr}
  4024ae:	4604      	mov	r4, r0
  4024b0:	b082      	sub	sp, #8
  4024b2:	b108      	cbz	r0, 4024b8 <_fflush_r+0xc>
  4024b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4024b6:	b153      	cbz	r3, 4024ce <_fflush_r+0x22>
  4024b8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4024bc:	b908      	cbnz	r0, 4024c2 <_fflush_r+0x16>
  4024be:	b002      	add	sp, #8
  4024c0:	bd10      	pop	{r4, pc}
  4024c2:	4620      	mov	r0, r4
  4024c4:	b002      	add	sp, #8
  4024c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4024ca:	f7ff bf4b 	b.w	402364 <__sflush_r>
  4024ce:	9101      	str	r1, [sp, #4]
  4024d0:	f000 f880 	bl	4025d4 <__sinit>
  4024d4:	9901      	ldr	r1, [sp, #4]
  4024d6:	e7ef      	b.n	4024b8 <_fflush_r+0xc>

004024d8 <_cleanup_r>:
  4024d8:	4901      	ldr	r1, [pc, #4]	; (4024e0 <_cleanup_r+0x8>)
  4024da:	f000 bbaf 	b.w	402c3c <_fwalk_reent>
  4024de:	bf00      	nop
  4024e0:	00403c81 	.word	0x00403c81

004024e4 <__sinit.part.1>:
  4024e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024e8:	4b35      	ldr	r3, [pc, #212]	; (4025c0 <__sinit.part.1+0xdc>)
  4024ea:	6845      	ldr	r5, [r0, #4]
  4024ec:	63c3      	str	r3, [r0, #60]	; 0x3c
  4024ee:	2400      	movs	r4, #0
  4024f0:	4607      	mov	r7, r0
  4024f2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4024f6:	2304      	movs	r3, #4
  4024f8:	2103      	movs	r1, #3
  4024fa:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4024fe:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  402502:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  402506:	b083      	sub	sp, #12
  402508:	602c      	str	r4, [r5, #0]
  40250a:	606c      	str	r4, [r5, #4]
  40250c:	60ac      	str	r4, [r5, #8]
  40250e:	666c      	str	r4, [r5, #100]	; 0x64
  402510:	81ec      	strh	r4, [r5, #14]
  402512:	612c      	str	r4, [r5, #16]
  402514:	616c      	str	r4, [r5, #20]
  402516:	61ac      	str	r4, [r5, #24]
  402518:	81ab      	strh	r3, [r5, #12]
  40251a:	4621      	mov	r1, r4
  40251c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  402520:	2208      	movs	r2, #8
  402522:	f7fe fd8f 	bl	401044 <memset>
  402526:	68be      	ldr	r6, [r7, #8]
  402528:	f8df b098 	ldr.w	fp, [pc, #152]	; 4025c4 <__sinit.part.1+0xe0>
  40252c:	f8df a098 	ldr.w	sl, [pc, #152]	; 4025c8 <__sinit.part.1+0xe4>
  402530:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4025cc <__sinit.part.1+0xe8>
  402534:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4025d0 <__sinit.part.1+0xec>
  402538:	f8c5 b020 	str.w	fp, [r5, #32]
  40253c:	2301      	movs	r3, #1
  40253e:	2209      	movs	r2, #9
  402540:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  402544:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  402548:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40254c:	61ed      	str	r5, [r5, #28]
  40254e:	4621      	mov	r1, r4
  402550:	81f3      	strh	r3, [r6, #14]
  402552:	81b2      	strh	r2, [r6, #12]
  402554:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  402558:	6034      	str	r4, [r6, #0]
  40255a:	6074      	str	r4, [r6, #4]
  40255c:	60b4      	str	r4, [r6, #8]
  40255e:	6674      	str	r4, [r6, #100]	; 0x64
  402560:	6134      	str	r4, [r6, #16]
  402562:	6174      	str	r4, [r6, #20]
  402564:	61b4      	str	r4, [r6, #24]
  402566:	2208      	movs	r2, #8
  402568:	9301      	str	r3, [sp, #4]
  40256a:	f7fe fd6b 	bl	401044 <memset>
  40256e:	68fd      	ldr	r5, [r7, #12]
  402570:	61f6      	str	r6, [r6, #28]
  402572:	2012      	movs	r0, #18
  402574:	2202      	movs	r2, #2
  402576:	f8c6 b020 	str.w	fp, [r6, #32]
  40257a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40257e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  402582:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  402586:	4621      	mov	r1, r4
  402588:	81a8      	strh	r0, [r5, #12]
  40258a:	81ea      	strh	r2, [r5, #14]
  40258c:	602c      	str	r4, [r5, #0]
  40258e:	606c      	str	r4, [r5, #4]
  402590:	60ac      	str	r4, [r5, #8]
  402592:	666c      	str	r4, [r5, #100]	; 0x64
  402594:	612c      	str	r4, [r5, #16]
  402596:	616c      	str	r4, [r5, #20]
  402598:	61ac      	str	r4, [r5, #24]
  40259a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40259e:	2208      	movs	r2, #8
  4025a0:	f7fe fd50 	bl	401044 <memset>
  4025a4:	9b01      	ldr	r3, [sp, #4]
  4025a6:	61ed      	str	r5, [r5, #28]
  4025a8:	f8c5 b020 	str.w	fp, [r5, #32]
  4025ac:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4025b0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4025b4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4025b8:	63bb      	str	r3, [r7, #56]	; 0x38
  4025ba:	b003      	add	sp, #12
  4025bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025c0:	004024d9 	.word	0x004024d9
  4025c4:	004039e9 	.word	0x004039e9
  4025c8:	00403a0d 	.word	0x00403a0d
  4025cc:	00403a49 	.word	0x00403a49
  4025d0:	00403a69 	.word	0x00403a69

004025d4 <__sinit>:
  4025d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4025d6:	b103      	cbz	r3, 4025da <__sinit+0x6>
  4025d8:	4770      	bx	lr
  4025da:	f7ff bf83 	b.w	4024e4 <__sinit.part.1>
  4025de:	bf00      	nop

004025e0 <__sfp_lock_acquire>:
  4025e0:	4770      	bx	lr
  4025e2:	bf00      	nop

004025e4 <__sfp_lock_release>:
  4025e4:	4770      	bx	lr
  4025e6:	bf00      	nop

004025e8 <__libc_fini_array>:
  4025e8:	b538      	push	{r3, r4, r5, lr}
  4025ea:	4d07      	ldr	r5, [pc, #28]	; (402608 <__libc_fini_array+0x20>)
  4025ec:	4c07      	ldr	r4, [pc, #28]	; (40260c <__libc_fini_array+0x24>)
  4025ee:	1b2c      	subs	r4, r5, r4
  4025f0:	10a4      	asrs	r4, r4, #2
  4025f2:	d005      	beq.n	402600 <__libc_fini_array+0x18>
  4025f4:	3c01      	subs	r4, #1
  4025f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4025fa:	4798      	blx	r3
  4025fc:	2c00      	cmp	r4, #0
  4025fe:	d1f9      	bne.n	4025f4 <__libc_fini_array+0xc>
  402600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402604:	f001 bea2 	b.w	40434c <_fini>
  402608:	00404364 	.word	0x00404364
  40260c:	00404360 	.word	0x00404360

00402610 <__fputwc>:
  402610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402614:	b082      	sub	sp, #8
  402616:	4680      	mov	r8, r0
  402618:	4689      	mov	r9, r1
  40261a:	4614      	mov	r4, r2
  40261c:	f000 fb38 	bl	402c90 <__locale_mb_cur_max>
  402620:	2801      	cmp	r0, #1
  402622:	d033      	beq.n	40268c <__fputwc+0x7c>
  402624:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  402628:	464a      	mov	r2, r9
  40262a:	a901      	add	r1, sp, #4
  40262c:	4640      	mov	r0, r8
  40262e:	f001 fa75 	bl	403b1c <_wcrtomb_r>
  402632:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  402636:	4682      	mov	sl, r0
  402638:	d021      	beq.n	40267e <__fputwc+0x6e>
  40263a:	b388      	cbz	r0, 4026a0 <__fputwc+0x90>
  40263c:	f89d 6004 	ldrb.w	r6, [sp, #4]
  402640:	2500      	movs	r5, #0
  402642:	e008      	b.n	402656 <__fputwc+0x46>
  402644:	6823      	ldr	r3, [r4, #0]
  402646:	1c5a      	adds	r2, r3, #1
  402648:	6022      	str	r2, [r4, #0]
  40264a:	701e      	strb	r6, [r3, #0]
  40264c:	3501      	adds	r5, #1
  40264e:	4555      	cmp	r5, sl
  402650:	d226      	bcs.n	4026a0 <__fputwc+0x90>
  402652:	ab01      	add	r3, sp, #4
  402654:	5d5e      	ldrb	r6, [r3, r5]
  402656:	68a3      	ldr	r3, [r4, #8]
  402658:	3b01      	subs	r3, #1
  40265a:	2b00      	cmp	r3, #0
  40265c:	60a3      	str	r3, [r4, #8]
  40265e:	daf1      	bge.n	402644 <__fputwc+0x34>
  402660:	69a7      	ldr	r7, [r4, #24]
  402662:	42bb      	cmp	r3, r7
  402664:	4631      	mov	r1, r6
  402666:	4622      	mov	r2, r4
  402668:	4640      	mov	r0, r8
  40266a:	db01      	blt.n	402670 <__fputwc+0x60>
  40266c:	2e0a      	cmp	r6, #10
  40266e:	d1e9      	bne.n	402644 <__fputwc+0x34>
  402670:	f001 f9fe 	bl	403a70 <__swbuf_r>
  402674:	1c43      	adds	r3, r0, #1
  402676:	d1e9      	bne.n	40264c <__fputwc+0x3c>
  402678:	b002      	add	sp, #8
  40267a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40267e:	89a3      	ldrh	r3, [r4, #12]
  402680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402684:	81a3      	strh	r3, [r4, #12]
  402686:	b002      	add	sp, #8
  402688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40268c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
  402690:	2bfe      	cmp	r3, #254	; 0xfe
  402692:	d8c7      	bhi.n	402624 <__fputwc+0x14>
  402694:	fa5f f689 	uxtb.w	r6, r9
  402698:	4682      	mov	sl, r0
  40269a:	f88d 6004 	strb.w	r6, [sp, #4]
  40269e:	e7cf      	b.n	402640 <__fputwc+0x30>
  4026a0:	4648      	mov	r0, r9
  4026a2:	b002      	add	sp, #8
  4026a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004026a8 <_fputwc_r>:
  4026a8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4026ac:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4026b0:	d10a      	bne.n	4026c8 <_fputwc_r+0x20>
  4026b2:	b410      	push	{r4}
  4026b4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4026b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4026ba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4026be:	6654      	str	r4, [r2, #100]	; 0x64
  4026c0:	8193      	strh	r3, [r2, #12]
  4026c2:	bc10      	pop	{r4}
  4026c4:	f7ff bfa4 	b.w	402610 <__fputwc>
  4026c8:	f7ff bfa2 	b.w	402610 <__fputwc>

004026cc <_malloc_trim_r>:
  4026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4026ce:	4f23      	ldr	r7, [pc, #140]	; (40275c <_malloc_trim_r+0x90>)
  4026d0:	460c      	mov	r4, r1
  4026d2:	4606      	mov	r6, r0
  4026d4:	f000 ff82 	bl	4035dc <__malloc_lock>
  4026d8:	68bb      	ldr	r3, [r7, #8]
  4026da:	685d      	ldr	r5, [r3, #4]
  4026dc:	f025 0503 	bic.w	r5, r5, #3
  4026e0:	1b29      	subs	r1, r5, r4
  4026e2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4026e6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4026ea:	f021 010f 	bic.w	r1, r1, #15
  4026ee:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4026f2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4026f6:	db07      	blt.n	402708 <_malloc_trim_r+0x3c>
  4026f8:	2100      	movs	r1, #0
  4026fa:	4630      	mov	r0, r6
  4026fc:	f001 f962 	bl	4039c4 <_sbrk_r>
  402700:	68bb      	ldr	r3, [r7, #8]
  402702:	442b      	add	r3, r5
  402704:	4298      	cmp	r0, r3
  402706:	d004      	beq.n	402712 <_malloc_trim_r+0x46>
  402708:	4630      	mov	r0, r6
  40270a:	f000 ff69 	bl	4035e0 <__malloc_unlock>
  40270e:	2000      	movs	r0, #0
  402710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402712:	4261      	negs	r1, r4
  402714:	4630      	mov	r0, r6
  402716:	f001 f955 	bl	4039c4 <_sbrk_r>
  40271a:	3001      	adds	r0, #1
  40271c:	d00d      	beq.n	40273a <_malloc_trim_r+0x6e>
  40271e:	4b10      	ldr	r3, [pc, #64]	; (402760 <_malloc_trim_r+0x94>)
  402720:	68ba      	ldr	r2, [r7, #8]
  402722:	6819      	ldr	r1, [r3, #0]
  402724:	1b2d      	subs	r5, r5, r4
  402726:	f045 0501 	orr.w	r5, r5, #1
  40272a:	4630      	mov	r0, r6
  40272c:	1b09      	subs	r1, r1, r4
  40272e:	6055      	str	r5, [r2, #4]
  402730:	6019      	str	r1, [r3, #0]
  402732:	f000 ff55 	bl	4035e0 <__malloc_unlock>
  402736:	2001      	movs	r0, #1
  402738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40273a:	2100      	movs	r1, #0
  40273c:	4630      	mov	r0, r6
  40273e:	f001 f941 	bl	4039c4 <_sbrk_r>
  402742:	68ba      	ldr	r2, [r7, #8]
  402744:	1a83      	subs	r3, r0, r2
  402746:	2b0f      	cmp	r3, #15
  402748:	ddde      	ble.n	402708 <_malloc_trim_r+0x3c>
  40274a:	4c06      	ldr	r4, [pc, #24]	; (402764 <_malloc_trim_r+0x98>)
  40274c:	4904      	ldr	r1, [pc, #16]	; (402760 <_malloc_trim_r+0x94>)
  40274e:	6824      	ldr	r4, [r4, #0]
  402750:	f043 0301 	orr.w	r3, r3, #1
  402754:	1b00      	subs	r0, r0, r4
  402756:	6053      	str	r3, [r2, #4]
  402758:	6008      	str	r0, [r1, #0]
  40275a:	e7d5      	b.n	402708 <_malloc_trim_r+0x3c>
  40275c:	200005a8 	.word	0x200005a8
  402760:	20000a78 	.word	0x20000a78
  402764:	200009b4 	.word	0x200009b4

00402768 <_free_r>:
  402768:	2900      	cmp	r1, #0
  40276a:	d045      	beq.n	4027f8 <_free_r+0x90>
  40276c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402770:	460d      	mov	r5, r1
  402772:	4680      	mov	r8, r0
  402774:	f000 ff32 	bl	4035dc <__malloc_lock>
  402778:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40277c:	496a      	ldr	r1, [pc, #424]	; (402928 <_free_r+0x1c0>)
  40277e:	f027 0301 	bic.w	r3, r7, #1
  402782:	f1a5 0408 	sub.w	r4, r5, #8
  402786:	18e2      	adds	r2, r4, r3
  402788:	688e      	ldr	r6, [r1, #8]
  40278a:	6850      	ldr	r0, [r2, #4]
  40278c:	42b2      	cmp	r2, r6
  40278e:	f020 0003 	bic.w	r0, r0, #3
  402792:	d062      	beq.n	40285a <_free_r+0xf2>
  402794:	07fe      	lsls	r6, r7, #31
  402796:	6050      	str	r0, [r2, #4]
  402798:	d40b      	bmi.n	4027b2 <_free_r+0x4a>
  40279a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40279e:	1be4      	subs	r4, r4, r7
  4027a0:	f101 0e08 	add.w	lr, r1, #8
  4027a4:	68a5      	ldr	r5, [r4, #8]
  4027a6:	4575      	cmp	r5, lr
  4027a8:	443b      	add	r3, r7
  4027aa:	d06f      	beq.n	40288c <_free_r+0x124>
  4027ac:	68e7      	ldr	r7, [r4, #12]
  4027ae:	60ef      	str	r7, [r5, #12]
  4027b0:	60bd      	str	r5, [r7, #8]
  4027b2:	1815      	adds	r5, r2, r0
  4027b4:	686d      	ldr	r5, [r5, #4]
  4027b6:	07ed      	lsls	r5, r5, #31
  4027b8:	d542      	bpl.n	402840 <_free_r+0xd8>
  4027ba:	f043 0201 	orr.w	r2, r3, #1
  4027be:	6062      	str	r2, [r4, #4]
  4027c0:	50e3      	str	r3, [r4, r3]
  4027c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4027c6:	d218      	bcs.n	4027fa <_free_r+0x92>
  4027c8:	08db      	lsrs	r3, r3, #3
  4027ca:	1c5a      	adds	r2, r3, #1
  4027cc:	684d      	ldr	r5, [r1, #4]
  4027ce:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4027d2:	60a7      	str	r7, [r4, #8]
  4027d4:	2001      	movs	r0, #1
  4027d6:	109b      	asrs	r3, r3, #2
  4027d8:	fa00 f303 	lsl.w	r3, r0, r3
  4027dc:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4027e0:	431d      	orrs	r5, r3
  4027e2:	3808      	subs	r0, #8
  4027e4:	60e0      	str	r0, [r4, #12]
  4027e6:	604d      	str	r5, [r1, #4]
  4027e8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  4027ec:	60fc      	str	r4, [r7, #12]
  4027ee:	4640      	mov	r0, r8
  4027f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4027f4:	f000 bef4 	b.w	4035e0 <__malloc_unlock>
  4027f8:	4770      	bx	lr
  4027fa:	0a5a      	lsrs	r2, r3, #9
  4027fc:	2a04      	cmp	r2, #4
  4027fe:	d853      	bhi.n	4028a8 <_free_r+0x140>
  402800:	099a      	lsrs	r2, r3, #6
  402802:	f102 0739 	add.w	r7, r2, #57	; 0x39
  402806:	007f      	lsls	r7, r7, #1
  402808:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40280c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  402810:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  402814:	4944      	ldr	r1, [pc, #272]	; (402928 <_free_r+0x1c0>)
  402816:	3808      	subs	r0, #8
  402818:	4290      	cmp	r0, r2
  40281a:	d04d      	beq.n	4028b8 <_free_r+0x150>
  40281c:	6851      	ldr	r1, [r2, #4]
  40281e:	f021 0103 	bic.w	r1, r1, #3
  402822:	428b      	cmp	r3, r1
  402824:	d202      	bcs.n	40282c <_free_r+0xc4>
  402826:	6892      	ldr	r2, [r2, #8]
  402828:	4290      	cmp	r0, r2
  40282a:	d1f7      	bne.n	40281c <_free_r+0xb4>
  40282c:	68d0      	ldr	r0, [r2, #12]
  40282e:	60e0      	str	r0, [r4, #12]
  402830:	60a2      	str	r2, [r4, #8]
  402832:	6084      	str	r4, [r0, #8]
  402834:	60d4      	str	r4, [r2, #12]
  402836:	4640      	mov	r0, r8
  402838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40283c:	f000 bed0 	b.w	4035e0 <__malloc_unlock>
  402840:	6895      	ldr	r5, [r2, #8]
  402842:	4f3a      	ldr	r7, [pc, #232]	; (40292c <_free_r+0x1c4>)
  402844:	42bd      	cmp	r5, r7
  402846:	4403      	add	r3, r0
  402848:	d03f      	beq.n	4028ca <_free_r+0x162>
  40284a:	68d0      	ldr	r0, [r2, #12]
  40284c:	60e8      	str	r0, [r5, #12]
  40284e:	f043 0201 	orr.w	r2, r3, #1
  402852:	6085      	str	r5, [r0, #8]
  402854:	6062      	str	r2, [r4, #4]
  402856:	50e3      	str	r3, [r4, r3]
  402858:	e7b3      	b.n	4027c2 <_free_r+0x5a>
  40285a:	07ff      	lsls	r7, r7, #31
  40285c:	4403      	add	r3, r0
  40285e:	d407      	bmi.n	402870 <_free_r+0x108>
  402860:	f855 2c08 	ldr.w	r2, [r5, #-8]
  402864:	1aa4      	subs	r4, r4, r2
  402866:	4413      	add	r3, r2
  402868:	68a0      	ldr	r0, [r4, #8]
  40286a:	68e2      	ldr	r2, [r4, #12]
  40286c:	60c2      	str	r2, [r0, #12]
  40286e:	6090      	str	r0, [r2, #8]
  402870:	4a2f      	ldr	r2, [pc, #188]	; (402930 <_free_r+0x1c8>)
  402872:	6812      	ldr	r2, [r2, #0]
  402874:	f043 0001 	orr.w	r0, r3, #1
  402878:	4293      	cmp	r3, r2
  40287a:	6060      	str	r0, [r4, #4]
  40287c:	608c      	str	r4, [r1, #8]
  40287e:	d3b6      	bcc.n	4027ee <_free_r+0x86>
  402880:	4b2c      	ldr	r3, [pc, #176]	; (402934 <_free_r+0x1cc>)
  402882:	4640      	mov	r0, r8
  402884:	6819      	ldr	r1, [r3, #0]
  402886:	f7ff ff21 	bl	4026cc <_malloc_trim_r>
  40288a:	e7b0      	b.n	4027ee <_free_r+0x86>
  40288c:	1811      	adds	r1, r2, r0
  40288e:	6849      	ldr	r1, [r1, #4]
  402890:	07c9      	lsls	r1, r1, #31
  402892:	d444      	bmi.n	40291e <_free_r+0x1b6>
  402894:	6891      	ldr	r1, [r2, #8]
  402896:	68d2      	ldr	r2, [r2, #12]
  402898:	60ca      	str	r2, [r1, #12]
  40289a:	4403      	add	r3, r0
  40289c:	f043 0001 	orr.w	r0, r3, #1
  4028a0:	6091      	str	r1, [r2, #8]
  4028a2:	6060      	str	r0, [r4, #4]
  4028a4:	50e3      	str	r3, [r4, r3]
  4028a6:	e7a2      	b.n	4027ee <_free_r+0x86>
  4028a8:	2a14      	cmp	r2, #20
  4028aa:	d817      	bhi.n	4028dc <_free_r+0x174>
  4028ac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4028b0:	007f      	lsls	r7, r7, #1
  4028b2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4028b6:	e7a9      	b.n	40280c <_free_r+0xa4>
  4028b8:	10aa      	asrs	r2, r5, #2
  4028ba:	684b      	ldr	r3, [r1, #4]
  4028bc:	2501      	movs	r5, #1
  4028be:	fa05 f202 	lsl.w	r2, r5, r2
  4028c2:	4313      	orrs	r3, r2
  4028c4:	604b      	str	r3, [r1, #4]
  4028c6:	4602      	mov	r2, r0
  4028c8:	e7b1      	b.n	40282e <_free_r+0xc6>
  4028ca:	f043 0201 	orr.w	r2, r3, #1
  4028ce:	614c      	str	r4, [r1, #20]
  4028d0:	610c      	str	r4, [r1, #16]
  4028d2:	60e5      	str	r5, [r4, #12]
  4028d4:	60a5      	str	r5, [r4, #8]
  4028d6:	6062      	str	r2, [r4, #4]
  4028d8:	50e3      	str	r3, [r4, r3]
  4028da:	e788      	b.n	4027ee <_free_r+0x86>
  4028dc:	2a54      	cmp	r2, #84	; 0x54
  4028de:	d806      	bhi.n	4028ee <_free_r+0x186>
  4028e0:	0b1a      	lsrs	r2, r3, #12
  4028e2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4028e6:	007f      	lsls	r7, r7, #1
  4028e8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4028ec:	e78e      	b.n	40280c <_free_r+0xa4>
  4028ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4028f2:	d806      	bhi.n	402902 <_free_r+0x19a>
  4028f4:	0bda      	lsrs	r2, r3, #15
  4028f6:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4028fa:	007f      	lsls	r7, r7, #1
  4028fc:	f102 0577 	add.w	r5, r2, #119	; 0x77
  402900:	e784      	b.n	40280c <_free_r+0xa4>
  402902:	f240 5054 	movw	r0, #1364	; 0x554
  402906:	4282      	cmp	r2, r0
  402908:	d806      	bhi.n	402918 <_free_r+0x1b0>
  40290a:	0c9a      	lsrs	r2, r3, #18
  40290c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  402910:	007f      	lsls	r7, r7, #1
  402912:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  402916:	e779      	b.n	40280c <_free_r+0xa4>
  402918:	27fe      	movs	r7, #254	; 0xfe
  40291a:	257e      	movs	r5, #126	; 0x7e
  40291c:	e776      	b.n	40280c <_free_r+0xa4>
  40291e:	f043 0201 	orr.w	r2, r3, #1
  402922:	6062      	str	r2, [r4, #4]
  402924:	50e3      	str	r3, [r4, r3]
  402926:	e762      	b.n	4027ee <_free_r+0x86>
  402928:	200005a8 	.word	0x200005a8
  40292c:	200005b0 	.word	0x200005b0
  402930:	200009b0 	.word	0x200009b0
  402934:	20000a74 	.word	0x20000a74

00402938 <__sfvwrite_r>:
  402938:	6893      	ldr	r3, [r2, #8]
  40293a:	2b00      	cmp	r3, #0
  40293c:	d076      	beq.n	402a2c <__sfvwrite_r+0xf4>
  40293e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402942:	898b      	ldrh	r3, [r1, #12]
  402944:	b085      	sub	sp, #20
  402946:	460c      	mov	r4, r1
  402948:	0719      	lsls	r1, r3, #28
  40294a:	9001      	str	r0, [sp, #4]
  40294c:	4616      	mov	r6, r2
  40294e:	d529      	bpl.n	4029a4 <__sfvwrite_r+0x6c>
  402950:	6922      	ldr	r2, [r4, #16]
  402952:	b33a      	cbz	r2, 4029a4 <__sfvwrite_r+0x6c>
  402954:	f003 0802 	and.w	r8, r3, #2
  402958:	fa1f f088 	uxth.w	r0, r8
  40295c:	6835      	ldr	r5, [r6, #0]
  40295e:	2800      	cmp	r0, #0
  402960:	d02f      	beq.n	4029c2 <__sfvwrite_r+0x8a>
  402962:	f04f 0900 	mov.w	r9, #0
  402966:	4fb4      	ldr	r7, [pc, #720]	; (402c38 <__sfvwrite_r+0x300>)
  402968:	46c8      	mov	r8, r9
  40296a:	46b2      	mov	sl, r6
  40296c:	45b8      	cmp	r8, r7
  40296e:	4643      	mov	r3, r8
  402970:	464a      	mov	r2, r9
  402972:	bf28      	it	cs
  402974:	463b      	movcs	r3, r7
  402976:	9801      	ldr	r0, [sp, #4]
  402978:	f1b8 0f00 	cmp.w	r8, #0
  40297c:	d050      	beq.n	402a20 <__sfvwrite_r+0xe8>
  40297e:	69e1      	ldr	r1, [r4, #28]
  402980:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402982:	47b0      	blx	r6
  402984:	2800      	cmp	r0, #0
  402986:	dd71      	ble.n	402a6c <__sfvwrite_r+0x134>
  402988:	f8da 3008 	ldr.w	r3, [sl, #8]
  40298c:	1a1b      	subs	r3, r3, r0
  40298e:	4481      	add	r9, r0
  402990:	ebc0 0808 	rsb	r8, r0, r8
  402994:	f8ca 3008 	str.w	r3, [sl, #8]
  402998:	2b00      	cmp	r3, #0
  40299a:	d1e7      	bne.n	40296c <__sfvwrite_r+0x34>
  40299c:	2000      	movs	r0, #0
  40299e:	b005      	add	sp, #20
  4029a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029a4:	4621      	mov	r1, r4
  4029a6:	9801      	ldr	r0, [sp, #4]
  4029a8:	f7ff fc68 	bl	40227c <__swsetup_r>
  4029ac:	2800      	cmp	r0, #0
  4029ae:	f040 813a 	bne.w	402c26 <__sfvwrite_r+0x2ee>
  4029b2:	89a3      	ldrh	r3, [r4, #12]
  4029b4:	6835      	ldr	r5, [r6, #0]
  4029b6:	f003 0802 	and.w	r8, r3, #2
  4029ba:	fa1f f088 	uxth.w	r0, r8
  4029be:	2800      	cmp	r0, #0
  4029c0:	d1cf      	bne.n	402962 <__sfvwrite_r+0x2a>
  4029c2:	f013 0901 	ands.w	r9, r3, #1
  4029c6:	d15b      	bne.n	402a80 <__sfvwrite_r+0x148>
  4029c8:	464f      	mov	r7, r9
  4029ca:	9602      	str	r6, [sp, #8]
  4029cc:	b31f      	cbz	r7, 402a16 <__sfvwrite_r+0xde>
  4029ce:	059a      	lsls	r2, r3, #22
  4029d0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4029d4:	d52c      	bpl.n	402a30 <__sfvwrite_r+0xf8>
  4029d6:	4547      	cmp	r7, r8
  4029d8:	46c2      	mov	sl, r8
  4029da:	f0c0 80a4 	bcc.w	402b26 <__sfvwrite_r+0x1ee>
  4029de:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4029e2:	f040 80b1 	bne.w	402b48 <__sfvwrite_r+0x210>
  4029e6:	6820      	ldr	r0, [r4, #0]
  4029e8:	4652      	mov	r2, sl
  4029ea:	4649      	mov	r1, r9
  4029ec:	f000 fd92 	bl	403514 <memmove>
  4029f0:	68a0      	ldr	r0, [r4, #8]
  4029f2:	6823      	ldr	r3, [r4, #0]
  4029f4:	ebc8 0000 	rsb	r0, r8, r0
  4029f8:	4453      	add	r3, sl
  4029fa:	60a0      	str	r0, [r4, #8]
  4029fc:	6023      	str	r3, [r4, #0]
  4029fe:	4638      	mov	r0, r7
  402a00:	9a02      	ldr	r2, [sp, #8]
  402a02:	6893      	ldr	r3, [r2, #8]
  402a04:	1a1b      	subs	r3, r3, r0
  402a06:	4481      	add	r9, r0
  402a08:	1a3f      	subs	r7, r7, r0
  402a0a:	6093      	str	r3, [r2, #8]
  402a0c:	2b00      	cmp	r3, #0
  402a0e:	d0c5      	beq.n	40299c <__sfvwrite_r+0x64>
  402a10:	89a3      	ldrh	r3, [r4, #12]
  402a12:	2f00      	cmp	r7, #0
  402a14:	d1db      	bne.n	4029ce <__sfvwrite_r+0x96>
  402a16:	f8d5 9000 	ldr.w	r9, [r5]
  402a1a:	686f      	ldr	r7, [r5, #4]
  402a1c:	3508      	adds	r5, #8
  402a1e:	e7d5      	b.n	4029cc <__sfvwrite_r+0x94>
  402a20:	f8d5 9000 	ldr.w	r9, [r5]
  402a24:	f8d5 8004 	ldr.w	r8, [r5, #4]
  402a28:	3508      	adds	r5, #8
  402a2a:	e79f      	b.n	40296c <__sfvwrite_r+0x34>
  402a2c:	2000      	movs	r0, #0
  402a2e:	4770      	bx	lr
  402a30:	6820      	ldr	r0, [r4, #0]
  402a32:	6923      	ldr	r3, [r4, #16]
  402a34:	4298      	cmp	r0, r3
  402a36:	d803      	bhi.n	402a40 <__sfvwrite_r+0x108>
  402a38:	6961      	ldr	r1, [r4, #20]
  402a3a:	428f      	cmp	r7, r1
  402a3c:	f080 80b7 	bcs.w	402bae <__sfvwrite_r+0x276>
  402a40:	45b8      	cmp	r8, r7
  402a42:	bf28      	it	cs
  402a44:	46b8      	movcs	r8, r7
  402a46:	4642      	mov	r2, r8
  402a48:	4649      	mov	r1, r9
  402a4a:	f000 fd63 	bl	403514 <memmove>
  402a4e:	68a3      	ldr	r3, [r4, #8]
  402a50:	6822      	ldr	r2, [r4, #0]
  402a52:	ebc8 0303 	rsb	r3, r8, r3
  402a56:	4442      	add	r2, r8
  402a58:	60a3      	str	r3, [r4, #8]
  402a5a:	6022      	str	r2, [r4, #0]
  402a5c:	2b00      	cmp	r3, #0
  402a5e:	d149      	bne.n	402af4 <__sfvwrite_r+0x1bc>
  402a60:	4621      	mov	r1, r4
  402a62:	9801      	ldr	r0, [sp, #4]
  402a64:	f7ff fd22 	bl	4024ac <_fflush_r>
  402a68:	2800      	cmp	r0, #0
  402a6a:	d043      	beq.n	402af4 <__sfvwrite_r+0x1bc>
  402a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402a78:	81a3      	strh	r3, [r4, #12]
  402a7a:	b005      	add	sp, #20
  402a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a80:	4680      	mov	r8, r0
  402a82:	9002      	str	r0, [sp, #8]
  402a84:	4682      	mov	sl, r0
  402a86:	4681      	mov	r9, r0
  402a88:	f1b9 0f00 	cmp.w	r9, #0
  402a8c:	d02a      	beq.n	402ae4 <__sfvwrite_r+0x1ac>
  402a8e:	9b02      	ldr	r3, [sp, #8]
  402a90:	2b00      	cmp	r3, #0
  402a92:	d04c      	beq.n	402b2e <__sfvwrite_r+0x1f6>
  402a94:	6820      	ldr	r0, [r4, #0]
  402a96:	6923      	ldr	r3, [r4, #16]
  402a98:	6962      	ldr	r2, [r4, #20]
  402a9a:	45c8      	cmp	r8, r9
  402a9c:	46c3      	mov	fp, r8
  402a9e:	bf28      	it	cs
  402aa0:	46cb      	movcs	fp, r9
  402aa2:	4298      	cmp	r0, r3
  402aa4:	465f      	mov	r7, fp
  402aa6:	d904      	bls.n	402ab2 <__sfvwrite_r+0x17a>
  402aa8:	68a3      	ldr	r3, [r4, #8]
  402aaa:	4413      	add	r3, r2
  402aac:	459b      	cmp	fp, r3
  402aae:	f300 8090 	bgt.w	402bd2 <__sfvwrite_r+0x29a>
  402ab2:	4593      	cmp	fp, r2
  402ab4:	db20      	blt.n	402af8 <__sfvwrite_r+0x1c0>
  402ab6:	4613      	mov	r3, r2
  402ab8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  402aba:	69e1      	ldr	r1, [r4, #28]
  402abc:	9801      	ldr	r0, [sp, #4]
  402abe:	4652      	mov	r2, sl
  402ac0:	47b8      	blx	r7
  402ac2:	1e07      	subs	r7, r0, #0
  402ac4:	ddd2      	ble.n	402a6c <__sfvwrite_r+0x134>
  402ac6:	ebb8 0807 	subs.w	r8, r8, r7
  402aca:	d023      	beq.n	402b14 <__sfvwrite_r+0x1dc>
  402acc:	68b3      	ldr	r3, [r6, #8]
  402ace:	1bdb      	subs	r3, r3, r7
  402ad0:	44ba      	add	sl, r7
  402ad2:	ebc7 0909 	rsb	r9, r7, r9
  402ad6:	60b3      	str	r3, [r6, #8]
  402ad8:	2b00      	cmp	r3, #0
  402ada:	f43f af5f 	beq.w	40299c <__sfvwrite_r+0x64>
  402ade:	f1b9 0f00 	cmp.w	r9, #0
  402ae2:	d1d4      	bne.n	402a8e <__sfvwrite_r+0x156>
  402ae4:	2300      	movs	r3, #0
  402ae6:	f8d5 a000 	ldr.w	sl, [r5]
  402aea:	f8d5 9004 	ldr.w	r9, [r5, #4]
  402aee:	9302      	str	r3, [sp, #8]
  402af0:	3508      	adds	r5, #8
  402af2:	e7c9      	b.n	402a88 <__sfvwrite_r+0x150>
  402af4:	4640      	mov	r0, r8
  402af6:	e783      	b.n	402a00 <__sfvwrite_r+0xc8>
  402af8:	465a      	mov	r2, fp
  402afa:	4651      	mov	r1, sl
  402afc:	f000 fd0a 	bl	403514 <memmove>
  402b00:	68a2      	ldr	r2, [r4, #8]
  402b02:	6823      	ldr	r3, [r4, #0]
  402b04:	ebcb 0202 	rsb	r2, fp, r2
  402b08:	445b      	add	r3, fp
  402b0a:	ebb8 0807 	subs.w	r8, r8, r7
  402b0e:	60a2      	str	r2, [r4, #8]
  402b10:	6023      	str	r3, [r4, #0]
  402b12:	d1db      	bne.n	402acc <__sfvwrite_r+0x194>
  402b14:	4621      	mov	r1, r4
  402b16:	9801      	ldr	r0, [sp, #4]
  402b18:	f7ff fcc8 	bl	4024ac <_fflush_r>
  402b1c:	2800      	cmp	r0, #0
  402b1e:	d1a5      	bne.n	402a6c <__sfvwrite_r+0x134>
  402b20:	f8cd 8008 	str.w	r8, [sp, #8]
  402b24:	e7d2      	b.n	402acc <__sfvwrite_r+0x194>
  402b26:	6820      	ldr	r0, [r4, #0]
  402b28:	46b8      	mov	r8, r7
  402b2a:	46ba      	mov	sl, r7
  402b2c:	e75c      	b.n	4029e8 <__sfvwrite_r+0xb0>
  402b2e:	464a      	mov	r2, r9
  402b30:	210a      	movs	r1, #10
  402b32:	4650      	mov	r0, sl
  402b34:	f000 fc04 	bl	403340 <memchr>
  402b38:	2800      	cmp	r0, #0
  402b3a:	d06f      	beq.n	402c1c <__sfvwrite_r+0x2e4>
  402b3c:	3001      	adds	r0, #1
  402b3e:	2301      	movs	r3, #1
  402b40:	ebca 0800 	rsb	r8, sl, r0
  402b44:	9302      	str	r3, [sp, #8]
  402b46:	e7a5      	b.n	402a94 <__sfvwrite_r+0x15c>
  402b48:	6962      	ldr	r2, [r4, #20]
  402b4a:	6820      	ldr	r0, [r4, #0]
  402b4c:	6921      	ldr	r1, [r4, #16]
  402b4e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  402b52:	ebc1 0a00 	rsb	sl, r1, r0
  402b56:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  402b5a:	f10a 0001 	add.w	r0, sl, #1
  402b5e:	ea4f 0868 	mov.w	r8, r8, asr #1
  402b62:	4438      	add	r0, r7
  402b64:	4540      	cmp	r0, r8
  402b66:	4642      	mov	r2, r8
  402b68:	bf84      	itt	hi
  402b6a:	4680      	movhi	r8, r0
  402b6c:	4642      	movhi	r2, r8
  402b6e:	055b      	lsls	r3, r3, #21
  402b70:	d542      	bpl.n	402bf8 <__sfvwrite_r+0x2c0>
  402b72:	4611      	mov	r1, r2
  402b74:	9801      	ldr	r0, [sp, #4]
  402b76:	f000 f915 	bl	402da4 <_malloc_r>
  402b7a:	4683      	mov	fp, r0
  402b7c:	2800      	cmp	r0, #0
  402b7e:	d055      	beq.n	402c2c <__sfvwrite_r+0x2f4>
  402b80:	4652      	mov	r2, sl
  402b82:	6921      	ldr	r1, [r4, #16]
  402b84:	f000 fc2c 	bl	4033e0 <memcpy>
  402b88:	89a3      	ldrh	r3, [r4, #12]
  402b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  402b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402b92:	81a3      	strh	r3, [r4, #12]
  402b94:	ebca 0308 	rsb	r3, sl, r8
  402b98:	eb0b 000a 	add.w	r0, fp, sl
  402b9c:	f8c4 8014 	str.w	r8, [r4, #20]
  402ba0:	f8c4 b010 	str.w	fp, [r4, #16]
  402ba4:	6020      	str	r0, [r4, #0]
  402ba6:	60a3      	str	r3, [r4, #8]
  402ba8:	46b8      	mov	r8, r7
  402baa:	46ba      	mov	sl, r7
  402bac:	e71c      	b.n	4029e8 <__sfvwrite_r+0xb0>
  402bae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  402bb2:	42bb      	cmp	r3, r7
  402bb4:	bf28      	it	cs
  402bb6:	463b      	movcs	r3, r7
  402bb8:	464a      	mov	r2, r9
  402bba:	fb93 f3f1 	sdiv	r3, r3, r1
  402bbe:	9801      	ldr	r0, [sp, #4]
  402bc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  402bc2:	fb01 f303 	mul.w	r3, r1, r3
  402bc6:	69e1      	ldr	r1, [r4, #28]
  402bc8:	47b0      	blx	r6
  402bca:	2800      	cmp	r0, #0
  402bcc:	f73f af18 	bgt.w	402a00 <__sfvwrite_r+0xc8>
  402bd0:	e74c      	b.n	402a6c <__sfvwrite_r+0x134>
  402bd2:	461a      	mov	r2, r3
  402bd4:	4651      	mov	r1, sl
  402bd6:	9303      	str	r3, [sp, #12]
  402bd8:	f000 fc9c 	bl	403514 <memmove>
  402bdc:	6822      	ldr	r2, [r4, #0]
  402bde:	9b03      	ldr	r3, [sp, #12]
  402be0:	9801      	ldr	r0, [sp, #4]
  402be2:	441a      	add	r2, r3
  402be4:	6022      	str	r2, [r4, #0]
  402be6:	4621      	mov	r1, r4
  402be8:	f7ff fc60 	bl	4024ac <_fflush_r>
  402bec:	9b03      	ldr	r3, [sp, #12]
  402bee:	2800      	cmp	r0, #0
  402bf0:	f47f af3c 	bne.w	402a6c <__sfvwrite_r+0x134>
  402bf4:	461f      	mov	r7, r3
  402bf6:	e766      	b.n	402ac6 <__sfvwrite_r+0x18e>
  402bf8:	9801      	ldr	r0, [sp, #4]
  402bfa:	f000 fcf3 	bl	4035e4 <_realloc_r>
  402bfe:	4683      	mov	fp, r0
  402c00:	2800      	cmp	r0, #0
  402c02:	d1c7      	bne.n	402b94 <__sfvwrite_r+0x25c>
  402c04:	9d01      	ldr	r5, [sp, #4]
  402c06:	6921      	ldr	r1, [r4, #16]
  402c08:	4628      	mov	r0, r5
  402c0a:	f7ff fdad 	bl	402768 <_free_r>
  402c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c12:	220c      	movs	r2, #12
  402c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402c18:	602a      	str	r2, [r5, #0]
  402c1a:	e729      	b.n	402a70 <__sfvwrite_r+0x138>
  402c1c:	2301      	movs	r3, #1
  402c1e:	f109 0801 	add.w	r8, r9, #1
  402c22:	9302      	str	r3, [sp, #8]
  402c24:	e736      	b.n	402a94 <__sfvwrite_r+0x15c>
  402c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402c2a:	e6b8      	b.n	40299e <__sfvwrite_r+0x66>
  402c2c:	9a01      	ldr	r2, [sp, #4]
  402c2e:	230c      	movs	r3, #12
  402c30:	6013      	str	r3, [r2, #0]
  402c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402c36:	e71b      	b.n	402a70 <__sfvwrite_r+0x138>
  402c38:	7ffffc00 	.word	0x7ffffc00

00402c3c <_fwalk_reent>:
  402c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402c40:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  402c44:	d01f      	beq.n	402c86 <_fwalk_reent+0x4a>
  402c46:	4688      	mov	r8, r1
  402c48:	4606      	mov	r6, r0
  402c4a:	f04f 0900 	mov.w	r9, #0
  402c4e:	687d      	ldr	r5, [r7, #4]
  402c50:	68bc      	ldr	r4, [r7, #8]
  402c52:	3d01      	subs	r5, #1
  402c54:	d411      	bmi.n	402c7a <_fwalk_reent+0x3e>
  402c56:	89a3      	ldrh	r3, [r4, #12]
  402c58:	2b01      	cmp	r3, #1
  402c5a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
  402c5e:	d908      	bls.n	402c72 <_fwalk_reent+0x36>
  402c60:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  402c64:	3301      	adds	r3, #1
  402c66:	4621      	mov	r1, r4
  402c68:	4630      	mov	r0, r6
  402c6a:	d002      	beq.n	402c72 <_fwalk_reent+0x36>
  402c6c:	47c0      	blx	r8
  402c6e:	ea49 0900 	orr.w	r9, r9, r0
  402c72:	1c6b      	adds	r3, r5, #1
  402c74:	f104 0468 	add.w	r4, r4, #104	; 0x68
  402c78:	d1ed      	bne.n	402c56 <_fwalk_reent+0x1a>
  402c7a:	683f      	ldr	r7, [r7, #0]
  402c7c:	2f00      	cmp	r7, #0
  402c7e:	d1e6      	bne.n	402c4e <_fwalk_reent+0x12>
  402c80:	4648      	mov	r0, r9
  402c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c86:	46b9      	mov	r9, r7
  402c88:	4648      	mov	r0, r9
  402c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c8e:	bf00      	nop

00402c90 <__locale_mb_cur_max>:
  402c90:	4b04      	ldr	r3, [pc, #16]	; (402ca4 <__locale_mb_cur_max+0x14>)
  402c92:	4a05      	ldr	r2, [pc, #20]	; (402ca8 <__locale_mb_cur_max+0x18>)
  402c94:	681b      	ldr	r3, [r3, #0]
  402c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402c98:	2b00      	cmp	r3, #0
  402c9a:	bf08      	it	eq
  402c9c:	4613      	moveq	r3, r2
  402c9e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  402ca2:	4770      	bx	lr
  402ca4:	20000438 	.word	0x20000438
  402ca8:	2000043c 	.word	0x2000043c

00402cac <__swhatbuf_r>:
  402cac:	b570      	push	{r4, r5, r6, lr}
  402cae:	460d      	mov	r5, r1
  402cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402cb4:	2900      	cmp	r1, #0
  402cb6:	b090      	sub	sp, #64	; 0x40
  402cb8:	4614      	mov	r4, r2
  402cba:	461e      	mov	r6, r3
  402cbc:	db14      	blt.n	402ce8 <__swhatbuf_r+0x3c>
  402cbe:	aa01      	add	r2, sp, #4
  402cc0:	f001 f820 	bl	403d04 <_fstat_r>
  402cc4:	2800      	cmp	r0, #0
  402cc6:	db0f      	blt.n	402ce8 <__swhatbuf_r+0x3c>
  402cc8:	9a02      	ldr	r2, [sp, #8]
  402cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  402cce:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  402cd2:	fab2 f282 	clz	r2, r2
  402cd6:	0952      	lsrs	r2, r2, #5
  402cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402cdc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402ce0:	6032      	str	r2, [r6, #0]
  402ce2:	6023      	str	r3, [r4, #0]
  402ce4:	b010      	add	sp, #64	; 0x40
  402ce6:	bd70      	pop	{r4, r5, r6, pc}
  402ce8:	89a8      	ldrh	r0, [r5, #12]
  402cea:	f000 0080 	and.w	r0, r0, #128	; 0x80
  402cee:	b282      	uxth	r2, r0
  402cf0:	2000      	movs	r0, #0
  402cf2:	6030      	str	r0, [r6, #0]
  402cf4:	b11a      	cbz	r2, 402cfe <__swhatbuf_r+0x52>
  402cf6:	2340      	movs	r3, #64	; 0x40
  402cf8:	6023      	str	r3, [r4, #0]
  402cfa:	b010      	add	sp, #64	; 0x40
  402cfc:	bd70      	pop	{r4, r5, r6, pc}
  402cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402d02:	4610      	mov	r0, r2
  402d04:	6023      	str	r3, [r4, #0]
  402d06:	b010      	add	sp, #64	; 0x40
  402d08:	bd70      	pop	{r4, r5, r6, pc}
  402d0a:	bf00      	nop

00402d0c <__smakebuf_r>:
  402d0c:	898a      	ldrh	r2, [r1, #12]
  402d0e:	0792      	lsls	r2, r2, #30
  402d10:	460b      	mov	r3, r1
  402d12:	d506      	bpl.n	402d22 <__smakebuf_r+0x16>
  402d14:	f101 0243 	add.w	r2, r1, #67	; 0x43
  402d18:	2101      	movs	r1, #1
  402d1a:	601a      	str	r2, [r3, #0]
  402d1c:	611a      	str	r2, [r3, #16]
  402d1e:	6159      	str	r1, [r3, #20]
  402d20:	4770      	bx	lr
  402d22:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d24:	b083      	sub	sp, #12
  402d26:	ab01      	add	r3, sp, #4
  402d28:	466a      	mov	r2, sp
  402d2a:	460c      	mov	r4, r1
  402d2c:	4605      	mov	r5, r0
  402d2e:	f7ff ffbd 	bl	402cac <__swhatbuf_r>
  402d32:	9900      	ldr	r1, [sp, #0]
  402d34:	4606      	mov	r6, r0
  402d36:	4628      	mov	r0, r5
  402d38:	f000 f834 	bl	402da4 <_malloc_r>
  402d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d40:	b1d0      	cbz	r0, 402d78 <__smakebuf_r+0x6c>
  402d42:	9a01      	ldr	r2, [sp, #4]
  402d44:	4f12      	ldr	r7, [pc, #72]	; (402d90 <__smakebuf_r+0x84>)
  402d46:	9900      	ldr	r1, [sp, #0]
  402d48:	63ef      	str	r7, [r5, #60]	; 0x3c
  402d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402d4e:	81a3      	strh	r3, [r4, #12]
  402d50:	6020      	str	r0, [r4, #0]
  402d52:	6120      	str	r0, [r4, #16]
  402d54:	6161      	str	r1, [r4, #20]
  402d56:	b91a      	cbnz	r2, 402d60 <__smakebuf_r+0x54>
  402d58:	4333      	orrs	r3, r6
  402d5a:	81a3      	strh	r3, [r4, #12]
  402d5c:	b003      	add	sp, #12
  402d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402d60:	4628      	mov	r0, r5
  402d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402d66:	f000 ffe1 	bl	403d2c <_isatty_r>
  402d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402d6e:	2800      	cmp	r0, #0
  402d70:	d0f2      	beq.n	402d58 <__smakebuf_r+0x4c>
  402d72:	f043 0301 	orr.w	r3, r3, #1
  402d76:	e7ef      	b.n	402d58 <__smakebuf_r+0x4c>
  402d78:	059a      	lsls	r2, r3, #22
  402d7a:	d4ef      	bmi.n	402d5c <__smakebuf_r+0x50>
  402d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402d80:	f043 0302 	orr.w	r3, r3, #2
  402d84:	2101      	movs	r1, #1
  402d86:	81a3      	strh	r3, [r4, #12]
  402d88:	6022      	str	r2, [r4, #0]
  402d8a:	6122      	str	r2, [r4, #16]
  402d8c:	6161      	str	r1, [r4, #20]
  402d8e:	e7e5      	b.n	402d5c <__smakebuf_r+0x50>
  402d90:	004024d9 	.word	0x004024d9

00402d94 <malloc>:
  402d94:	4b02      	ldr	r3, [pc, #8]	; (402da0 <malloc+0xc>)
  402d96:	4601      	mov	r1, r0
  402d98:	6818      	ldr	r0, [r3, #0]
  402d9a:	f000 b803 	b.w	402da4 <_malloc_r>
  402d9e:	bf00      	nop
  402da0:	20000438 	.word	0x20000438

00402da4 <_malloc_r>:
  402da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402da8:	f101 050b 	add.w	r5, r1, #11
  402dac:	2d16      	cmp	r5, #22
  402dae:	b083      	sub	sp, #12
  402db0:	4606      	mov	r6, r0
  402db2:	f240 809f 	bls.w	402ef4 <_malloc_r+0x150>
  402db6:	f035 0507 	bics.w	r5, r5, #7
  402dba:	f100 80bf 	bmi.w	402f3c <_malloc_r+0x198>
  402dbe:	42a9      	cmp	r1, r5
  402dc0:	f200 80bc 	bhi.w	402f3c <_malloc_r+0x198>
  402dc4:	f000 fc0a 	bl	4035dc <__malloc_lock>
  402dc8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402dcc:	f0c0 829c 	bcc.w	403308 <_malloc_r+0x564>
  402dd0:	0a6b      	lsrs	r3, r5, #9
  402dd2:	f000 80ba 	beq.w	402f4a <_malloc_r+0x1a6>
  402dd6:	2b04      	cmp	r3, #4
  402dd8:	f200 8183 	bhi.w	4030e2 <_malloc_r+0x33e>
  402ddc:	09a8      	lsrs	r0, r5, #6
  402dde:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402de2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402de6:	3038      	adds	r0, #56	; 0x38
  402de8:	4fc4      	ldr	r7, [pc, #784]	; (4030fc <_malloc_r+0x358>)
  402dea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402dee:	f1a3 0108 	sub.w	r1, r3, #8
  402df2:	685c      	ldr	r4, [r3, #4]
  402df4:	42a1      	cmp	r1, r4
  402df6:	d107      	bne.n	402e08 <_malloc_r+0x64>
  402df8:	e0ac      	b.n	402f54 <_malloc_r+0x1b0>
  402dfa:	2a00      	cmp	r2, #0
  402dfc:	f280 80ac 	bge.w	402f58 <_malloc_r+0x1b4>
  402e00:	68e4      	ldr	r4, [r4, #12]
  402e02:	42a1      	cmp	r1, r4
  402e04:	f000 80a6 	beq.w	402f54 <_malloc_r+0x1b0>
  402e08:	6863      	ldr	r3, [r4, #4]
  402e0a:	f023 0303 	bic.w	r3, r3, #3
  402e0e:	1b5a      	subs	r2, r3, r5
  402e10:	2a0f      	cmp	r2, #15
  402e12:	ddf2      	ble.n	402dfa <_malloc_r+0x56>
  402e14:	49b9      	ldr	r1, [pc, #740]	; (4030fc <_malloc_r+0x358>)
  402e16:	693c      	ldr	r4, [r7, #16]
  402e18:	f101 0e08 	add.w	lr, r1, #8
  402e1c:	4574      	cmp	r4, lr
  402e1e:	f000 81b3 	beq.w	403188 <_malloc_r+0x3e4>
  402e22:	6863      	ldr	r3, [r4, #4]
  402e24:	f023 0303 	bic.w	r3, r3, #3
  402e28:	1b5a      	subs	r2, r3, r5
  402e2a:	2a0f      	cmp	r2, #15
  402e2c:	f300 8199 	bgt.w	403162 <_malloc_r+0x3be>
  402e30:	2a00      	cmp	r2, #0
  402e32:	f8c1 e014 	str.w	lr, [r1, #20]
  402e36:	f8c1 e010 	str.w	lr, [r1, #16]
  402e3a:	f280 809e 	bge.w	402f7a <_malloc_r+0x1d6>
  402e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e42:	f080 8167 	bcs.w	403114 <_malloc_r+0x370>
  402e46:	08db      	lsrs	r3, r3, #3
  402e48:	f103 0c01 	add.w	ip, r3, #1
  402e4c:	2201      	movs	r2, #1
  402e4e:	109b      	asrs	r3, r3, #2
  402e50:	fa02 f303 	lsl.w	r3, r2, r3
  402e54:	684a      	ldr	r2, [r1, #4]
  402e56:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  402e5a:	f8c4 8008 	str.w	r8, [r4, #8]
  402e5e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  402e62:	431a      	orrs	r2, r3
  402e64:	f1a9 0308 	sub.w	r3, r9, #8
  402e68:	60e3      	str	r3, [r4, #12]
  402e6a:	604a      	str	r2, [r1, #4]
  402e6c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  402e70:	f8c8 400c 	str.w	r4, [r8, #12]
  402e74:	1083      	asrs	r3, r0, #2
  402e76:	2401      	movs	r4, #1
  402e78:	409c      	lsls	r4, r3
  402e7a:	4294      	cmp	r4, r2
  402e7c:	f200 808a 	bhi.w	402f94 <_malloc_r+0x1f0>
  402e80:	4214      	tst	r4, r2
  402e82:	d106      	bne.n	402e92 <_malloc_r+0xee>
  402e84:	f020 0003 	bic.w	r0, r0, #3
  402e88:	0064      	lsls	r4, r4, #1
  402e8a:	4214      	tst	r4, r2
  402e8c:	f100 0004 	add.w	r0, r0, #4
  402e90:	d0fa      	beq.n	402e88 <_malloc_r+0xe4>
  402e92:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402e96:	46cc      	mov	ip, r9
  402e98:	4680      	mov	r8, r0
  402e9a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  402e9e:	458c      	cmp	ip, r1
  402ea0:	d107      	bne.n	402eb2 <_malloc_r+0x10e>
  402ea2:	e173      	b.n	40318c <_malloc_r+0x3e8>
  402ea4:	2a00      	cmp	r2, #0
  402ea6:	f280 8181 	bge.w	4031ac <_malloc_r+0x408>
  402eaa:	68c9      	ldr	r1, [r1, #12]
  402eac:	458c      	cmp	ip, r1
  402eae:	f000 816d 	beq.w	40318c <_malloc_r+0x3e8>
  402eb2:	684b      	ldr	r3, [r1, #4]
  402eb4:	f023 0303 	bic.w	r3, r3, #3
  402eb8:	1b5a      	subs	r2, r3, r5
  402eba:	2a0f      	cmp	r2, #15
  402ebc:	ddf2      	ble.n	402ea4 <_malloc_r+0x100>
  402ebe:	460c      	mov	r4, r1
  402ec0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  402ec4:	f854 8f08 	ldr.w	r8, [r4, #8]!
  402ec8:	194b      	adds	r3, r1, r5
  402eca:	f045 0501 	orr.w	r5, r5, #1
  402ece:	604d      	str	r5, [r1, #4]
  402ed0:	f042 0101 	orr.w	r1, r2, #1
  402ed4:	f8c8 c00c 	str.w	ip, [r8, #12]
  402ed8:	4630      	mov	r0, r6
  402eda:	f8cc 8008 	str.w	r8, [ip, #8]
  402ede:	617b      	str	r3, [r7, #20]
  402ee0:	613b      	str	r3, [r7, #16]
  402ee2:	f8c3 e00c 	str.w	lr, [r3, #12]
  402ee6:	f8c3 e008 	str.w	lr, [r3, #8]
  402eea:	6059      	str	r1, [r3, #4]
  402eec:	509a      	str	r2, [r3, r2]
  402eee:	f000 fb77 	bl	4035e0 <__malloc_unlock>
  402ef2:	e01f      	b.n	402f34 <_malloc_r+0x190>
  402ef4:	2910      	cmp	r1, #16
  402ef6:	d821      	bhi.n	402f3c <_malloc_r+0x198>
  402ef8:	f000 fb70 	bl	4035dc <__malloc_lock>
  402efc:	2510      	movs	r5, #16
  402efe:	2306      	movs	r3, #6
  402f00:	2002      	movs	r0, #2
  402f02:	4f7e      	ldr	r7, [pc, #504]	; (4030fc <_malloc_r+0x358>)
  402f04:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402f08:	f1a3 0208 	sub.w	r2, r3, #8
  402f0c:	685c      	ldr	r4, [r3, #4]
  402f0e:	4294      	cmp	r4, r2
  402f10:	f000 8145 	beq.w	40319e <_malloc_r+0x3fa>
  402f14:	6863      	ldr	r3, [r4, #4]
  402f16:	68e1      	ldr	r1, [r4, #12]
  402f18:	68a5      	ldr	r5, [r4, #8]
  402f1a:	f023 0303 	bic.w	r3, r3, #3
  402f1e:	4423      	add	r3, r4
  402f20:	4630      	mov	r0, r6
  402f22:	685a      	ldr	r2, [r3, #4]
  402f24:	60e9      	str	r1, [r5, #12]
  402f26:	f042 0201 	orr.w	r2, r2, #1
  402f2a:	608d      	str	r5, [r1, #8]
  402f2c:	605a      	str	r2, [r3, #4]
  402f2e:	f000 fb57 	bl	4035e0 <__malloc_unlock>
  402f32:	3408      	adds	r4, #8
  402f34:	4620      	mov	r0, r4
  402f36:	b003      	add	sp, #12
  402f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f3c:	2400      	movs	r4, #0
  402f3e:	230c      	movs	r3, #12
  402f40:	4620      	mov	r0, r4
  402f42:	6033      	str	r3, [r6, #0]
  402f44:	b003      	add	sp, #12
  402f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f4a:	2380      	movs	r3, #128	; 0x80
  402f4c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  402f50:	203f      	movs	r0, #63	; 0x3f
  402f52:	e749      	b.n	402de8 <_malloc_r+0x44>
  402f54:	4670      	mov	r0, lr
  402f56:	e75d      	b.n	402e14 <_malloc_r+0x70>
  402f58:	4423      	add	r3, r4
  402f5a:	68e1      	ldr	r1, [r4, #12]
  402f5c:	685a      	ldr	r2, [r3, #4]
  402f5e:	68a5      	ldr	r5, [r4, #8]
  402f60:	f042 0201 	orr.w	r2, r2, #1
  402f64:	60e9      	str	r1, [r5, #12]
  402f66:	4630      	mov	r0, r6
  402f68:	608d      	str	r5, [r1, #8]
  402f6a:	605a      	str	r2, [r3, #4]
  402f6c:	f000 fb38 	bl	4035e0 <__malloc_unlock>
  402f70:	3408      	adds	r4, #8
  402f72:	4620      	mov	r0, r4
  402f74:	b003      	add	sp, #12
  402f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f7a:	4423      	add	r3, r4
  402f7c:	4630      	mov	r0, r6
  402f7e:	685a      	ldr	r2, [r3, #4]
  402f80:	f042 0201 	orr.w	r2, r2, #1
  402f84:	605a      	str	r2, [r3, #4]
  402f86:	f000 fb2b 	bl	4035e0 <__malloc_unlock>
  402f8a:	3408      	adds	r4, #8
  402f8c:	4620      	mov	r0, r4
  402f8e:	b003      	add	sp, #12
  402f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f94:	68bc      	ldr	r4, [r7, #8]
  402f96:	6863      	ldr	r3, [r4, #4]
  402f98:	f023 0803 	bic.w	r8, r3, #3
  402f9c:	45a8      	cmp	r8, r5
  402f9e:	d304      	bcc.n	402faa <_malloc_r+0x206>
  402fa0:	ebc5 0308 	rsb	r3, r5, r8
  402fa4:	2b0f      	cmp	r3, #15
  402fa6:	f300 808c 	bgt.w	4030c2 <_malloc_r+0x31e>
  402faa:	4b55      	ldr	r3, [pc, #340]	; (403100 <_malloc_r+0x35c>)
  402fac:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403110 <_malloc_r+0x36c>
  402fb0:	681a      	ldr	r2, [r3, #0]
  402fb2:	f8d9 3000 	ldr.w	r3, [r9]
  402fb6:	3301      	adds	r3, #1
  402fb8:	442a      	add	r2, r5
  402fba:	eb04 0a08 	add.w	sl, r4, r8
  402fbe:	f000 8160 	beq.w	403282 <_malloc_r+0x4de>
  402fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  402fc6:	320f      	adds	r2, #15
  402fc8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  402fcc:	f022 020f 	bic.w	r2, r2, #15
  402fd0:	4611      	mov	r1, r2
  402fd2:	4630      	mov	r0, r6
  402fd4:	9201      	str	r2, [sp, #4]
  402fd6:	f000 fcf5 	bl	4039c4 <_sbrk_r>
  402fda:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  402fde:	4683      	mov	fp, r0
  402fe0:	9a01      	ldr	r2, [sp, #4]
  402fe2:	f000 8158 	beq.w	403296 <_malloc_r+0x4f2>
  402fe6:	4582      	cmp	sl, r0
  402fe8:	f200 80fc 	bhi.w	4031e4 <_malloc_r+0x440>
  402fec:	4b45      	ldr	r3, [pc, #276]	; (403104 <_malloc_r+0x360>)
  402fee:	6819      	ldr	r1, [r3, #0]
  402ff0:	45da      	cmp	sl, fp
  402ff2:	4411      	add	r1, r2
  402ff4:	6019      	str	r1, [r3, #0]
  402ff6:	f000 8153 	beq.w	4032a0 <_malloc_r+0x4fc>
  402ffa:	f8d9 0000 	ldr.w	r0, [r9]
  402ffe:	f8df e110 	ldr.w	lr, [pc, #272]	; 403110 <_malloc_r+0x36c>
  403002:	3001      	adds	r0, #1
  403004:	bf1b      	ittet	ne
  403006:	ebca 0a0b 	rsbne	sl, sl, fp
  40300a:	4451      	addne	r1, sl
  40300c:	f8ce b000 	streq.w	fp, [lr]
  403010:	6019      	strne	r1, [r3, #0]
  403012:	f01b 0107 	ands.w	r1, fp, #7
  403016:	f000 8117 	beq.w	403248 <_malloc_r+0x4a4>
  40301a:	f1c1 0008 	rsb	r0, r1, #8
  40301e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403022:	4483      	add	fp, r0
  403024:	3108      	adds	r1, #8
  403026:	445a      	add	r2, fp
  403028:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40302c:	ebc2 0901 	rsb	r9, r2, r1
  403030:	4649      	mov	r1, r9
  403032:	4630      	mov	r0, r6
  403034:	9301      	str	r3, [sp, #4]
  403036:	f000 fcc5 	bl	4039c4 <_sbrk_r>
  40303a:	1c43      	adds	r3, r0, #1
  40303c:	9b01      	ldr	r3, [sp, #4]
  40303e:	f000 813f 	beq.w	4032c0 <_malloc_r+0x51c>
  403042:	ebcb 0200 	rsb	r2, fp, r0
  403046:	444a      	add	r2, r9
  403048:	f042 0201 	orr.w	r2, r2, #1
  40304c:	6819      	ldr	r1, [r3, #0]
  40304e:	f8c7 b008 	str.w	fp, [r7, #8]
  403052:	4449      	add	r1, r9
  403054:	42bc      	cmp	r4, r7
  403056:	f8cb 2004 	str.w	r2, [fp, #4]
  40305a:	6019      	str	r1, [r3, #0]
  40305c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403104 <_malloc_r+0x360>
  403060:	d016      	beq.n	403090 <_malloc_r+0x2ec>
  403062:	f1b8 0f0f 	cmp.w	r8, #15
  403066:	f240 80fd 	bls.w	403264 <_malloc_r+0x4c0>
  40306a:	6862      	ldr	r2, [r4, #4]
  40306c:	f1a8 030c 	sub.w	r3, r8, #12
  403070:	f023 0307 	bic.w	r3, r3, #7
  403074:	18e0      	adds	r0, r4, r3
  403076:	f002 0201 	and.w	r2, r2, #1
  40307a:	f04f 0e05 	mov.w	lr, #5
  40307e:	431a      	orrs	r2, r3
  403080:	2b0f      	cmp	r3, #15
  403082:	6062      	str	r2, [r4, #4]
  403084:	f8c0 e004 	str.w	lr, [r0, #4]
  403088:	f8c0 e008 	str.w	lr, [r0, #8]
  40308c:	f200 811c 	bhi.w	4032c8 <_malloc_r+0x524>
  403090:	4b1d      	ldr	r3, [pc, #116]	; (403108 <_malloc_r+0x364>)
  403092:	68bc      	ldr	r4, [r7, #8]
  403094:	681a      	ldr	r2, [r3, #0]
  403096:	4291      	cmp	r1, r2
  403098:	bf88      	it	hi
  40309a:	6019      	strhi	r1, [r3, #0]
  40309c:	4b1b      	ldr	r3, [pc, #108]	; (40310c <_malloc_r+0x368>)
  40309e:	681a      	ldr	r2, [r3, #0]
  4030a0:	4291      	cmp	r1, r2
  4030a2:	6862      	ldr	r2, [r4, #4]
  4030a4:	bf88      	it	hi
  4030a6:	6019      	strhi	r1, [r3, #0]
  4030a8:	f022 0203 	bic.w	r2, r2, #3
  4030ac:	4295      	cmp	r5, r2
  4030ae:	eba2 0305 	sub.w	r3, r2, r5
  4030b2:	d801      	bhi.n	4030b8 <_malloc_r+0x314>
  4030b4:	2b0f      	cmp	r3, #15
  4030b6:	dc04      	bgt.n	4030c2 <_malloc_r+0x31e>
  4030b8:	4630      	mov	r0, r6
  4030ba:	f000 fa91 	bl	4035e0 <__malloc_unlock>
  4030be:	2400      	movs	r4, #0
  4030c0:	e738      	b.n	402f34 <_malloc_r+0x190>
  4030c2:	1962      	adds	r2, r4, r5
  4030c4:	f043 0301 	orr.w	r3, r3, #1
  4030c8:	f045 0501 	orr.w	r5, r5, #1
  4030cc:	6065      	str	r5, [r4, #4]
  4030ce:	4630      	mov	r0, r6
  4030d0:	60ba      	str	r2, [r7, #8]
  4030d2:	6053      	str	r3, [r2, #4]
  4030d4:	f000 fa84 	bl	4035e0 <__malloc_unlock>
  4030d8:	3408      	adds	r4, #8
  4030da:	4620      	mov	r0, r4
  4030dc:	b003      	add	sp, #12
  4030de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030e2:	2b14      	cmp	r3, #20
  4030e4:	d971      	bls.n	4031ca <_malloc_r+0x426>
  4030e6:	2b54      	cmp	r3, #84	; 0x54
  4030e8:	f200 80a4 	bhi.w	403234 <_malloc_r+0x490>
  4030ec:	0b28      	lsrs	r0, r5, #12
  4030ee:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  4030f2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4030f6:	306e      	adds	r0, #110	; 0x6e
  4030f8:	e676      	b.n	402de8 <_malloc_r+0x44>
  4030fa:	bf00      	nop
  4030fc:	200005a8 	.word	0x200005a8
  403100:	20000a74 	.word	0x20000a74
  403104:	20000a78 	.word	0x20000a78
  403108:	20000a70 	.word	0x20000a70
  40310c:	20000a6c 	.word	0x20000a6c
  403110:	200009b4 	.word	0x200009b4
  403114:	0a5a      	lsrs	r2, r3, #9
  403116:	2a04      	cmp	r2, #4
  403118:	d95e      	bls.n	4031d8 <_malloc_r+0x434>
  40311a:	2a14      	cmp	r2, #20
  40311c:	f200 80b3 	bhi.w	403286 <_malloc_r+0x4e2>
  403120:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403124:	0049      	lsls	r1, r1, #1
  403126:	325b      	adds	r2, #91	; 0x5b
  403128:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40312c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  403130:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403310 <_malloc_r+0x56c>
  403134:	f1ac 0c08 	sub.w	ip, ip, #8
  403138:	458c      	cmp	ip, r1
  40313a:	f000 8088 	beq.w	40324e <_malloc_r+0x4aa>
  40313e:	684a      	ldr	r2, [r1, #4]
  403140:	f022 0203 	bic.w	r2, r2, #3
  403144:	4293      	cmp	r3, r2
  403146:	d202      	bcs.n	40314e <_malloc_r+0x3aa>
  403148:	6889      	ldr	r1, [r1, #8]
  40314a:	458c      	cmp	ip, r1
  40314c:	d1f7      	bne.n	40313e <_malloc_r+0x39a>
  40314e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403152:	687a      	ldr	r2, [r7, #4]
  403154:	f8c4 c00c 	str.w	ip, [r4, #12]
  403158:	60a1      	str	r1, [r4, #8]
  40315a:	f8cc 4008 	str.w	r4, [ip, #8]
  40315e:	60cc      	str	r4, [r1, #12]
  403160:	e688      	b.n	402e74 <_malloc_r+0xd0>
  403162:	1963      	adds	r3, r4, r5
  403164:	f042 0701 	orr.w	r7, r2, #1
  403168:	f045 0501 	orr.w	r5, r5, #1
  40316c:	6065      	str	r5, [r4, #4]
  40316e:	4630      	mov	r0, r6
  403170:	614b      	str	r3, [r1, #20]
  403172:	610b      	str	r3, [r1, #16]
  403174:	f8c3 e00c 	str.w	lr, [r3, #12]
  403178:	f8c3 e008 	str.w	lr, [r3, #8]
  40317c:	605f      	str	r7, [r3, #4]
  40317e:	509a      	str	r2, [r3, r2]
  403180:	3408      	adds	r4, #8
  403182:	f000 fa2d 	bl	4035e0 <__malloc_unlock>
  403186:	e6d5      	b.n	402f34 <_malloc_r+0x190>
  403188:	684a      	ldr	r2, [r1, #4]
  40318a:	e673      	b.n	402e74 <_malloc_r+0xd0>
  40318c:	f108 0801 	add.w	r8, r8, #1
  403190:	f018 0f03 	tst.w	r8, #3
  403194:	f10c 0c08 	add.w	ip, ip, #8
  403198:	f47f ae7f 	bne.w	402e9a <_malloc_r+0xf6>
  40319c:	e030      	b.n	403200 <_malloc_r+0x45c>
  40319e:	68dc      	ldr	r4, [r3, #12]
  4031a0:	42a3      	cmp	r3, r4
  4031a2:	bf08      	it	eq
  4031a4:	3002      	addeq	r0, #2
  4031a6:	f43f ae35 	beq.w	402e14 <_malloc_r+0x70>
  4031aa:	e6b3      	b.n	402f14 <_malloc_r+0x170>
  4031ac:	440b      	add	r3, r1
  4031ae:	460c      	mov	r4, r1
  4031b0:	685a      	ldr	r2, [r3, #4]
  4031b2:	68c9      	ldr	r1, [r1, #12]
  4031b4:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4031b8:	f042 0201 	orr.w	r2, r2, #1
  4031bc:	605a      	str	r2, [r3, #4]
  4031be:	4630      	mov	r0, r6
  4031c0:	60e9      	str	r1, [r5, #12]
  4031c2:	608d      	str	r5, [r1, #8]
  4031c4:	f000 fa0c 	bl	4035e0 <__malloc_unlock>
  4031c8:	e6b4      	b.n	402f34 <_malloc_r+0x190>
  4031ca:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4031ce:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4031d2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4031d6:	e607      	b.n	402de8 <_malloc_r+0x44>
  4031d8:	099a      	lsrs	r2, r3, #6
  4031da:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4031de:	0049      	lsls	r1, r1, #1
  4031e0:	3238      	adds	r2, #56	; 0x38
  4031e2:	e7a1      	b.n	403128 <_malloc_r+0x384>
  4031e4:	42bc      	cmp	r4, r7
  4031e6:	4b4a      	ldr	r3, [pc, #296]	; (403310 <_malloc_r+0x56c>)
  4031e8:	f43f af00 	beq.w	402fec <_malloc_r+0x248>
  4031ec:	689c      	ldr	r4, [r3, #8]
  4031ee:	6862      	ldr	r2, [r4, #4]
  4031f0:	f022 0203 	bic.w	r2, r2, #3
  4031f4:	e75a      	b.n	4030ac <_malloc_r+0x308>
  4031f6:	f859 3908 	ldr.w	r3, [r9], #-8
  4031fa:	4599      	cmp	r9, r3
  4031fc:	f040 8082 	bne.w	403304 <_malloc_r+0x560>
  403200:	f010 0f03 	tst.w	r0, #3
  403204:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
  403208:	d1f5      	bne.n	4031f6 <_malloc_r+0x452>
  40320a:	687b      	ldr	r3, [r7, #4]
  40320c:	ea23 0304 	bic.w	r3, r3, r4
  403210:	607b      	str	r3, [r7, #4]
  403212:	0064      	lsls	r4, r4, #1
  403214:	429c      	cmp	r4, r3
  403216:	f63f aebd 	bhi.w	402f94 <_malloc_r+0x1f0>
  40321a:	2c00      	cmp	r4, #0
  40321c:	f43f aeba 	beq.w	402f94 <_malloc_r+0x1f0>
  403220:	421c      	tst	r4, r3
  403222:	4640      	mov	r0, r8
  403224:	f47f ae35 	bne.w	402e92 <_malloc_r+0xee>
  403228:	0064      	lsls	r4, r4, #1
  40322a:	421c      	tst	r4, r3
  40322c:	f100 0004 	add.w	r0, r0, #4
  403230:	d0fa      	beq.n	403228 <_malloc_r+0x484>
  403232:	e62e      	b.n	402e92 <_malloc_r+0xee>
  403234:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403238:	d818      	bhi.n	40326c <_malloc_r+0x4c8>
  40323a:	0be8      	lsrs	r0, r5, #15
  40323c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  403240:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403244:	3077      	adds	r0, #119	; 0x77
  403246:	e5cf      	b.n	402de8 <_malloc_r+0x44>
  403248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40324c:	e6eb      	b.n	403026 <_malloc_r+0x282>
  40324e:	2101      	movs	r1, #1
  403250:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403254:	1092      	asrs	r2, r2, #2
  403256:	fa01 f202 	lsl.w	r2, r1, r2
  40325a:	431a      	orrs	r2, r3
  40325c:	f8c8 2004 	str.w	r2, [r8, #4]
  403260:	4661      	mov	r1, ip
  403262:	e777      	b.n	403154 <_malloc_r+0x3b0>
  403264:	2301      	movs	r3, #1
  403266:	f8cb 3004 	str.w	r3, [fp, #4]
  40326a:	e725      	b.n	4030b8 <_malloc_r+0x314>
  40326c:	f240 5254 	movw	r2, #1364	; 0x554
  403270:	4293      	cmp	r3, r2
  403272:	d820      	bhi.n	4032b6 <_malloc_r+0x512>
  403274:	0ca8      	lsrs	r0, r5, #18
  403276:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40327a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40327e:	307c      	adds	r0, #124	; 0x7c
  403280:	e5b2      	b.n	402de8 <_malloc_r+0x44>
  403282:	3210      	adds	r2, #16
  403284:	e6a4      	b.n	402fd0 <_malloc_r+0x22c>
  403286:	2a54      	cmp	r2, #84	; 0x54
  403288:	d826      	bhi.n	4032d8 <_malloc_r+0x534>
  40328a:	0b1a      	lsrs	r2, r3, #12
  40328c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403290:	0049      	lsls	r1, r1, #1
  403292:	326e      	adds	r2, #110	; 0x6e
  403294:	e748      	b.n	403128 <_malloc_r+0x384>
  403296:	68bc      	ldr	r4, [r7, #8]
  403298:	6862      	ldr	r2, [r4, #4]
  40329a:	f022 0203 	bic.w	r2, r2, #3
  40329e:	e705      	b.n	4030ac <_malloc_r+0x308>
  4032a0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4032a4:	2800      	cmp	r0, #0
  4032a6:	f47f aea8 	bne.w	402ffa <_malloc_r+0x256>
  4032aa:	4442      	add	r2, r8
  4032ac:	68bb      	ldr	r3, [r7, #8]
  4032ae:	f042 0201 	orr.w	r2, r2, #1
  4032b2:	605a      	str	r2, [r3, #4]
  4032b4:	e6ec      	b.n	403090 <_malloc_r+0x2ec>
  4032b6:	23fe      	movs	r3, #254	; 0xfe
  4032b8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4032bc:	207e      	movs	r0, #126	; 0x7e
  4032be:	e593      	b.n	402de8 <_malloc_r+0x44>
  4032c0:	2201      	movs	r2, #1
  4032c2:	f04f 0900 	mov.w	r9, #0
  4032c6:	e6c1      	b.n	40304c <_malloc_r+0x2a8>
  4032c8:	f104 0108 	add.w	r1, r4, #8
  4032cc:	4630      	mov	r0, r6
  4032ce:	f7ff fa4b 	bl	402768 <_free_r>
  4032d2:	f8d9 1000 	ldr.w	r1, [r9]
  4032d6:	e6db      	b.n	403090 <_malloc_r+0x2ec>
  4032d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4032dc:	d805      	bhi.n	4032ea <_malloc_r+0x546>
  4032de:	0bda      	lsrs	r2, r3, #15
  4032e0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4032e4:	0049      	lsls	r1, r1, #1
  4032e6:	3277      	adds	r2, #119	; 0x77
  4032e8:	e71e      	b.n	403128 <_malloc_r+0x384>
  4032ea:	f240 5154 	movw	r1, #1364	; 0x554
  4032ee:	428a      	cmp	r2, r1
  4032f0:	d805      	bhi.n	4032fe <_malloc_r+0x55a>
  4032f2:	0c9a      	lsrs	r2, r3, #18
  4032f4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4032f8:	0049      	lsls	r1, r1, #1
  4032fa:	327c      	adds	r2, #124	; 0x7c
  4032fc:	e714      	b.n	403128 <_malloc_r+0x384>
  4032fe:	21fe      	movs	r1, #254	; 0xfe
  403300:	227e      	movs	r2, #126	; 0x7e
  403302:	e711      	b.n	403128 <_malloc_r+0x384>
  403304:	687b      	ldr	r3, [r7, #4]
  403306:	e784      	b.n	403212 <_malloc_r+0x46e>
  403308:	08e8      	lsrs	r0, r5, #3
  40330a:	1c43      	adds	r3, r0, #1
  40330c:	005b      	lsls	r3, r3, #1
  40330e:	e5f8      	b.n	402f02 <_malloc_r+0x15e>
  403310:	200005a8 	.word	0x200005a8

00403314 <__ascii_mbtowc>:
  403314:	b082      	sub	sp, #8
  403316:	b149      	cbz	r1, 40332c <__ascii_mbtowc+0x18>
  403318:	b15a      	cbz	r2, 403332 <__ascii_mbtowc+0x1e>
  40331a:	b16b      	cbz	r3, 403338 <__ascii_mbtowc+0x24>
  40331c:	7813      	ldrb	r3, [r2, #0]
  40331e:	600b      	str	r3, [r1, #0]
  403320:	7812      	ldrb	r2, [r2, #0]
  403322:	1c10      	adds	r0, r2, #0
  403324:	bf18      	it	ne
  403326:	2001      	movne	r0, #1
  403328:	b002      	add	sp, #8
  40332a:	4770      	bx	lr
  40332c:	a901      	add	r1, sp, #4
  40332e:	2a00      	cmp	r2, #0
  403330:	d1f3      	bne.n	40331a <__ascii_mbtowc+0x6>
  403332:	4610      	mov	r0, r2
  403334:	b002      	add	sp, #8
  403336:	4770      	bx	lr
  403338:	f06f 0001 	mvn.w	r0, #1
  40333c:	e7f4      	b.n	403328 <__ascii_mbtowc+0x14>
  40333e:	bf00      	nop

00403340 <memchr>:
  403340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403344:	2a10      	cmp	r2, #16
  403346:	db2b      	blt.n	4033a0 <memchr+0x60>
  403348:	f010 0f07 	tst.w	r0, #7
  40334c:	d008      	beq.n	403360 <memchr+0x20>
  40334e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403352:	3a01      	subs	r2, #1
  403354:	428b      	cmp	r3, r1
  403356:	d02d      	beq.n	4033b4 <memchr+0x74>
  403358:	f010 0f07 	tst.w	r0, #7
  40335c:	b342      	cbz	r2, 4033b0 <memchr+0x70>
  40335e:	d1f6      	bne.n	40334e <memchr+0xe>
  403360:	b4f0      	push	{r4, r5, r6, r7}
  403362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40336a:	f022 0407 	bic.w	r4, r2, #7
  40336e:	f07f 0700 	mvns.w	r7, #0
  403372:	2300      	movs	r3, #0
  403374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403378:	3c08      	subs	r4, #8
  40337a:	ea85 0501 	eor.w	r5, r5, r1
  40337e:	ea86 0601 	eor.w	r6, r6, r1
  403382:	fa85 f547 	uadd8	r5, r5, r7
  403386:	faa3 f587 	sel	r5, r3, r7
  40338a:	fa86 f647 	uadd8	r6, r6, r7
  40338e:	faa5 f687 	sel	r6, r5, r7
  403392:	b98e      	cbnz	r6, 4033b8 <memchr+0x78>
  403394:	d1ee      	bne.n	403374 <memchr+0x34>
  403396:	bcf0      	pop	{r4, r5, r6, r7}
  403398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40339c:	f002 0207 	and.w	r2, r2, #7
  4033a0:	b132      	cbz	r2, 4033b0 <memchr+0x70>
  4033a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4033a6:	3a01      	subs	r2, #1
  4033a8:	ea83 0301 	eor.w	r3, r3, r1
  4033ac:	b113      	cbz	r3, 4033b4 <memchr+0x74>
  4033ae:	d1f8      	bne.n	4033a2 <memchr+0x62>
  4033b0:	2000      	movs	r0, #0
  4033b2:	4770      	bx	lr
  4033b4:	3801      	subs	r0, #1
  4033b6:	4770      	bx	lr
  4033b8:	2d00      	cmp	r5, #0
  4033ba:	bf06      	itte	eq
  4033bc:	4635      	moveq	r5, r6
  4033be:	3803      	subeq	r0, #3
  4033c0:	3807      	subne	r0, #7
  4033c2:	f015 0f01 	tst.w	r5, #1
  4033c6:	d107      	bne.n	4033d8 <memchr+0x98>
  4033c8:	3001      	adds	r0, #1
  4033ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  4033ce:	bf02      	ittt	eq
  4033d0:	3001      	addeq	r0, #1
  4033d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4033d6:	3001      	addeq	r0, #1
  4033d8:	bcf0      	pop	{r4, r5, r6, r7}
  4033da:	3801      	subs	r0, #1
  4033dc:	4770      	bx	lr
  4033de:	bf00      	nop

004033e0 <memcpy>:
  4033e0:	4684      	mov	ip, r0
  4033e2:	ea41 0300 	orr.w	r3, r1, r0
  4033e6:	f013 0303 	ands.w	r3, r3, #3
  4033ea:	d16d      	bne.n	4034c8 <memcpy+0xe8>
  4033ec:	3a40      	subs	r2, #64	; 0x40
  4033ee:	d341      	bcc.n	403474 <memcpy+0x94>
  4033f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4033f4:	f840 3b04 	str.w	r3, [r0], #4
  4033f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4033fc:	f840 3b04 	str.w	r3, [r0], #4
  403400:	f851 3b04 	ldr.w	r3, [r1], #4
  403404:	f840 3b04 	str.w	r3, [r0], #4
  403408:	f851 3b04 	ldr.w	r3, [r1], #4
  40340c:	f840 3b04 	str.w	r3, [r0], #4
  403410:	f851 3b04 	ldr.w	r3, [r1], #4
  403414:	f840 3b04 	str.w	r3, [r0], #4
  403418:	f851 3b04 	ldr.w	r3, [r1], #4
  40341c:	f840 3b04 	str.w	r3, [r0], #4
  403420:	f851 3b04 	ldr.w	r3, [r1], #4
  403424:	f840 3b04 	str.w	r3, [r0], #4
  403428:	f851 3b04 	ldr.w	r3, [r1], #4
  40342c:	f840 3b04 	str.w	r3, [r0], #4
  403430:	f851 3b04 	ldr.w	r3, [r1], #4
  403434:	f840 3b04 	str.w	r3, [r0], #4
  403438:	f851 3b04 	ldr.w	r3, [r1], #4
  40343c:	f840 3b04 	str.w	r3, [r0], #4
  403440:	f851 3b04 	ldr.w	r3, [r1], #4
  403444:	f840 3b04 	str.w	r3, [r0], #4
  403448:	f851 3b04 	ldr.w	r3, [r1], #4
  40344c:	f840 3b04 	str.w	r3, [r0], #4
  403450:	f851 3b04 	ldr.w	r3, [r1], #4
  403454:	f840 3b04 	str.w	r3, [r0], #4
  403458:	f851 3b04 	ldr.w	r3, [r1], #4
  40345c:	f840 3b04 	str.w	r3, [r0], #4
  403460:	f851 3b04 	ldr.w	r3, [r1], #4
  403464:	f840 3b04 	str.w	r3, [r0], #4
  403468:	f851 3b04 	ldr.w	r3, [r1], #4
  40346c:	f840 3b04 	str.w	r3, [r0], #4
  403470:	3a40      	subs	r2, #64	; 0x40
  403472:	d2bd      	bcs.n	4033f0 <memcpy+0x10>
  403474:	3230      	adds	r2, #48	; 0x30
  403476:	d311      	bcc.n	40349c <memcpy+0xbc>
  403478:	f851 3b04 	ldr.w	r3, [r1], #4
  40347c:	f840 3b04 	str.w	r3, [r0], #4
  403480:	f851 3b04 	ldr.w	r3, [r1], #4
  403484:	f840 3b04 	str.w	r3, [r0], #4
  403488:	f851 3b04 	ldr.w	r3, [r1], #4
  40348c:	f840 3b04 	str.w	r3, [r0], #4
  403490:	f851 3b04 	ldr.w	r3, [r1], #4
  403494:	f840 3b04 	str.w	r3, [r0], #4
  403498:	3a10      	subs	r2, #16
  40349a:	d2ed      	bcs.n	403478 <memcpy+0x98>
  40349c:	320c      	adds	r2, #12
  40349e:	d305      	bcc.n	4034ac <memcpy+0xcc>
  4034a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034a4:	f840 3b04 	str.w	r3, [r0], #4
  4034a8:	3a04      	subs	r2, #4
  4034aa:	d2f9      	bcs.n	4034a0 <memcpy+0xc0>
  4034ac:	3204      	adds	r2, #4
  4034ae:	d008      	beq.n	4034c2 <memcpy+0xe2>
  4034b0:	07d2      	lsls	r2, r2, #31
  4034b2:	bf1c      	itt	ne
  4034b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4034b8:	f800 3b01 	strbne.w	r3, [r0], #1
  4034bc:	d301      	bcc.n	4034c2 <memcpy+0xe2>
  4034be:	880b      	ldrh	r3, [r1, #0]
  4034c0:	8003      	strh	r3, [r0, #0]
  4034c2:	4660      	mov	r0, ip
  4034c4:	4770      	bx	lr
  4034c6:	bf00      	nop
  4034c8:	2a08      	cmp	r2, #8
  4034ca:	d313      	bcc.n	4034f4 <memcpy+0x114>
  4034cc:	078b      	lsls	r3, r1, #30
  4034ce:	d08d      	beq.n	4033ec <memcpy+0xc>
  4034d0:	f010 0303 	ands.w	r3, r0, #3
  4034d4:	d08a      	beq.n	4033ec <memcpy+0xc>
  4034d6:	f1c3 0304 	rsb	r3, r3, #4
  4034da:	1ad2      	subs	r2, r2, r3
  4034dc:	07db      	lsls	r3, r3, #31
  4034de:	bf1c      	itt	ne
  4034e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4034e4:	f800 3b01 	strbne.w	r3, [r0], #1
  4034e8:	d380      	bcc.n	4033ec <memcpy+0xc>
  4034ea:	f831 3b02 	ldrh.w	r3, [r1], #2
  4034ee:	f820 3b02 	strh.w	r3, [r0], #2
  4034f2:	e77b      	b.n	4033ec <memcpy+0xc>
  4034f4:	3a04      	subs	r2, #4
  4034f6:	d3d9      	bcc.n	4034ac <memcpy+0xcc>
  4034f8:	3a01      	subs	r2, #1
  4034fa:	f811 3b01 	ldrb.w	r3, [r1], #1
  4034fe:	f800 3b01 	strb.w	r3, [r0], #1
  403502:	d2f9      	bcs.n	4034f8 <memcpy+0x118>
  403504:	780b      	ldrb	r3, [r1, #0]
  403506:	7003      	strb	r3, [r0, #0]
  403508:	784b      	ldrb	r3, [r1, #1]
  40350a:	7043      	strb	r3, [r0, #1]
  40350c:	788b      	ldrb	r3, [r1, #2]
  40350e:	7083      	strb	r3, [r0, #2]
  403510:	4660      	mov	r0, ip
  403512:	4770      	bx	lr

00403514 <memmove>:
  403514:	4288      	cmp	r0, r1
  403516:	b5f0      	push	{r4, r5, r6, r7, lr}
  403518:	d90d      	bls.n	403536 <memmove+0x22>
  40351a:	188b      	adds	r3, r1, r2
  40351c:	4298      	cmp	r0, r3
  40351e:	d20a      	bcs.n	403536 <memmove+0x22>
  403520:	1881      	adds	r1, r0, r2
  403522:	2a00      	cmp	r2, #0
  403524:	d051      	beq.n	4035ca <memmove+0xb6>
  403526:	1a9a      	subs	r2, r3, r2
  403528:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40352c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  403530:	4293      	cmp	r3, r2
  403532:	d1f9      	bne.n	403528 <memmove+0x14>
  403534:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403536:	2a0f      	cmp	r2, #15
  403538:	d948      	bls.n	4035cc <memmove+0xb8>
  40353a:	ea41 0300 	orr.w	r3, r1, r0
  40353e:	079b      	lsls	r3, r3, #30
  403540:	d146      	bne.n	4035d0 <memmove+0xbc>
  403542:	f100 0410 	add.w	r4, r0, #16
  403546:	f101 0310 	add.w	r3, r1, #16
  40354a:	4615      	mov	r5, r2
  40354c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  403550:	f844 6c10 	str.w	r6, [r4, #-16]
  403554:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  403558:	f844 6c0c 	str.w	r6, [r4, #-12]
  40355c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  403560:	f844 6c08 	str.w	r6, [r4, #-8]
  403564:	3d10      	subs	r5, #16
  403566:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40356a:	f844 6c04 	str.w	r6, [r4, #-4]
  40356e:	2d0f      	cmp	r5, #15
  403570:	f103 0310 	add.w	r3, r3, #16
  403574:	f104 0410 	add.w	r4, r4, #16
  403578:	d8e8      	bhi.n	40354c <memmove+0x38>
  40357a:	f1a2 0310 	sub.w	r3, r2, #16
  40357e:	f023 030f 	bic.w	r3, r3, #15
  403582:	f002 0e0f 	and.w	lr, r2, #15
  403586:	3310      	adds	r3, #16
  403588:	f1be 0f03 	cmp.w	lr, #3
  40358c:	4419      	add	r1, r3
  40358e:	4403      	add	r3, r0
  403590:	d921      	bls.n	4035d6 <memmove+0xc2>
  403592:	1f1e      	subs	r6, r3, #4
  403594:	460d      	mov	r5, r1
  403596:	4674      	mov	r4, lr
  403598:	3c04      	subs	r4, #4
  40359a:	f855 7b04 	ldr.w	r7, [r5], #4
  40359e:	f846 7f04 	str.w	r7, [r6, #4]!
  4035a2:	2c03      	cmp	r4, #3
  4035a4:	d8f8      	bhi.n	403598 <memmove+0x84>
  4035a6:	f1ae 0404 	sub.w	r4, lr, #4
  4035aa:	f024 0403 	bic.w	r4, r4, #3
  4035ae:	3404      	adds	r4, #4
  4035b0:	4423      	add	r3, r4
  4035b2:	4421      	add	r1, r4
  4035b4:	f002 0203 	and.w	r2, r2, #3
  4035b8:	b162      	cbz	r2, 4035d4 <memmove+0xc0>
  4035ba:	3b01      	subs	r3, #1
  4035bc:	440a      	add	r2, r1
  4035be:	f811 4b01 	ldrb.w	r4, [r1], #1
  4035c2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4035c6:	428a      	cmp	r2, r1
  4035c8:	d1f9      	bne.n	4035be <memmove+0xaa>
  4035ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4035cc:	4603      	mov	r3, r0
  4035ce:	e7f3      	b.n	4035b8 <memmove+0xa4>
  4035d0:	4603      	mov	r3, r0
  4035d2:	e7f2      	b.n	4035ba <memmove+0xa6>
  4035d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4035d6:	4672      	mov	r2, lr
  4035d8:	e7ee      	b.n	4035b8 <memmove+0xa4>
  4035da:	bf00      	nop

004035dc <__malloc_lock>:
  4035dc:	4770      	bx	lr
  4035de:	bf00      	nop

004035e0 <__malloc_unlock>:
  4035e0:	4770      	bx	lr
  4035e2:	bf00      	nop

004035e4 <_realloc_r>:
  4035e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4035e8:	4617      	mov	r7, r2
  4035ea:	b083      	sub	sp, #12
  4035ec:	2900      	cmp	r1, #0
  4035ee:	f000 80c1 	beq.w	403774 <_realloc_r+0x190>
  4035f2:	460e      	mov	r6, r1
  4035f4:	4681      	mov	r9, r0
  4035f6:	f107 050b 	add.w	r5, r7, #11
  4035fa:	f7ff ffef 	bl	4035dc <__malloc_lock>
  4035fe:	f856 ec04 	ldr.w	lr, [r6, #-4]
  403602:	2d16      	cmp	r5, #22
  403604:	f02e 0403 	bic.w	r4, lr, #3
  403608:	f1a6 0808 	sub.w	r8, r6, #8
  40360c:	d840      	bhi.n	403690 <_realloc_r+0xac>
  40360e:	2210      	movs	r2, #16
  403610:	4615      	mov	r5, r2
  403612:	42af      	cmp	r7, r5
  403614:	d841      	bhi.n	40369a <_realloc_r+0xb6>
  403616:	4294      	cmp	r4, r2
  403618:	da75      	bge.n	403706 <_realloc_r+0x122>
  40361a:	4bc9      	ldr	r3, [pc, #804]	; (403940 <_realloc_r+0x35c>)
  40361c:	6899      	ldr	r1, [r3, #8]
  40361e:	eb08 0004 	add.w	r0, r8, r4
  403622:	4288      	cmp	r0, r1
  403624:	6841      	ldr	r1, [r0, #4]
  403626:	f000 80d9 	beq.w	4037dc <_realloc_r+0x1f8>
  40362a:	f021 0301 	bic.w	r3, r1, #1
  40362e:	4403      	add	r3, r0
  403630:	685b      	ldr	r3, [r3, #4]
  403632:	07db      	lsls	r3, r3, #31
  403634:	d57d      	bpl.n	403732 <_realloc_r+0x14e>
  403636:	f01e 0f01 	tst.w	lr, #1
  40363a:	d035      	beq.n	4036a8 <_realloc_r+0xc4>
  40363c:	4639      	mov	r1, r7
  40363e:	4648      	mov	r0, r9
  403640:	f7ff fbb0 	bl	402da4 <_malloc_r>
  403644:	4607      	mov	r7, r0
  403646:	b1e0      	cbz	r0, 403682 <_realloc_r+0x9e>
  403648:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40364c:	f023 0301 	bic.w	r3, r3, #1
  403650:	4443      	add	r3, r8
  403652:	f1a0 0208 	sub.w	r2, r0, #8
  403656:	429a      	cmp	r2, r3
  403658:	f000 8144 	beq.w	4038e4 <_realloc_r+0x300>
  40365c:	1f22      	subs	r2, r4, #4
  40365e:	2a24      	cmp	r2, #36	; 0x24
  403660:	f200 8131 	bhi.w	4038c6 <_realloc_r+0x2e2>
  403664:	2a13      	cmp	r2, #19
  403666:	f200 8104 	bhi.w	403872 <_realloc_r+0x28e>
  40366a:	4603      	mov	r3, r0
  40366c:	4632      	mov	r2, r6
  40366e:	6811      	ldr	r1, [r2, #0]
  403670:	6019      	str	r1, [r3, #0]
  403672:	6851      	ldr	r1, [r2, #4]
  403674:	6059      	str	r1, [r3, #4]
  403676:	6892      	ldr	r2, [r2, #8]
  403678:	609a      	str	r2, [r3, #8]
  40367a:	4631      	mov	r1, r6
  40367c:	4648      	mov	r0, r9
  40367e:	f7ff f873 	bl	402768 <_free_r>
  403682:	4648      	mov	r0, r9
  403684:	f7ff ffac 	bl	4035e0 <__malloc_unlock>
  403688:	4638      	mov	r0, r7
  40368a:	b003      	add	sp, #12
  40368c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403690:	f025 0507 	bic.w	r5, r5, #7
  403694:	2d00      	cmp	r5, #0
  403696:	462a      	mov	r2, r5
  403698:	dabb      	bge.n	403612 <_realloc_r+0x2e>
  40369a:	230c      	movs	r3, #12
  40369c:	2000      	movs	r0, #0
  40369e:	f8c9 3000 	str.w	r3, [r9]
  4036a2:	b003      	add	sp, #12
  4036a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4036a8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4036ac:	ebc3 0a08 	rsb	sl, r3, r8
  4036b0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4036b4:	f023 0c03 	bic.w	ip, r3, #3
  4036b8:	eb04 030c 	add.w	r3, r4, ip
  4036bc:	4293      	cmp	r3, r2
  4036be:	dbbd      	blt.n	40363c <_realloc_r+0x58>
  4036c0:	4657      	mov	r7, sl
  4036c2:	f8da 100c 	ldr.w	r1, [sl, #12]
  4036c6:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4036ca:	1f22      	subs	r2, r4, #4
  4036cc:	2a24      	cmp	r2, #36	; 0x24
  4036ce:	60c1      	str	r1, [r0, #12]
  4036d0:	6088      	str	r0, [r1, #8]
  4036d2:	f200 8117 	bhi.w	403904 <_realloc_r+0x320>
  4036d6:	2a13      	cmp	r2, #19
  4036d8:	f240 8112 	bls.w	403900 <_realloc_r+0x31c>
  4036dc:	6831      	ldr	r1, [r6, #0]
  4036de:	f8ca 1008 	str.w	r1, [sl, #8]
  4036e2:	6871      	ldr	r1, [r6, #4]
  4036e4:	f8ca 100c 	str.w	r1, [sl, #12]
  4036e8:	2a1b      	cmp	r2, #27
  4036ea:	f200 812b 	bhi.w	403944 <_realloc_r+0x360>
  4036ee:	3608      	adds	r6, #8
  4036f0:	f10a 0210 	add.w	r2, sl, #16
  4036f4:	6831      	ldr	r1, [r6, #0]
  4036f6:	6011      	str	r1, [r2, #0]
  4036f8:	6871      	ldr	r1, [r6, #4]
  4036fa:	6051      	str	r1, [r2, #4]
  4036fc:	68b1      	ldr	r1, [r6, #8]
  4036fe:	6091      	str	r1, [r2, #8]
  403700:	463e      	mov	r6, r7
  403702:	461c      	mov	r4, r3
  403704:	46d0      	mov	r8, sl
  403706:	1b63      	subs	r3, r4, r5
  403708:	2b0f      	cmp	r3, #15
  40370a:	d81d      	bhi.n	403748 <_realloc_r+0x164>
  40370c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403710:	f003 0301 	and.w	r3, r3, #1
  403714:	4323      	orrs	r3, r4
  403716:	4444      	add	r4, r8
  403718:	f8c8 3004 	str.w	r3, [r8, #4]
  40371c:	6863      	ldr	r3, [r4, #4]
  40371e:	f043 0301 	orr.w	r3, r3, #1
  403722:	6063      	str	r3, [r4, #4]
  403724:	4648      	mov	r0, r9
  403726:	f7ff ff5b 	bl	4035e0 <__malloc_unlock>
  40372a:	4630      	mov	r0, r6
  40372c:	b003      	add	sp, #12
  40372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403732:	f021 0103 	bic.w	r1, r1, #3
  403736:	4421      	add	r1, r4
  403738:	4291      	cmp	r1, r2
  40373a:	db21      	blt.n	403780 <_realloc_r+0x19c>
  40373c:	68c3      	ldr	r3, [r0, #12]
  40373e:	6882      	ldr	r2, [r0, #8]
  403740:	460c      	mov	r4, r1
  403742:	60d3      	str	r3, [r2, #12]
  403744:	609a      	str	r2, [r3, #8]
  403746:	e7de      	b.n	403706 <_realloc_r+0x122>
  403748:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40374c:	eb08 0105 	add.w	r1, r8, r5
  403750:	f002 0201 	and.w	r2, r2, #1
  403754:	4315      	orrs	r5, r2
  403756:	f043 0201 	orr.w	r2, r3, #1
  40375a:	440b      	add	r3, r1
  40375c:	f8c8 5004 	str.w	r5, [r8, #4]
  403760:	604a      	str	r2, [r1, #4]
  403762:	685a      	ldr	r2, [r3, #4]
  403764:	f042 0201 	orr.w	r2, r2, #1
  403768:	3108      	adds	r1, #8
  40376a:	605a      	str	r2, [r3, #4]
  40376c:	4648      	mov	r0, r9
  40376e:	f7fe fffb 	bl	402768 <_free_r>
  403772:	e7d7      	b.n	403724 <_realloc_r+0x140>
  403774:	4611      	mov	r1, r2
  403776:	b003      	add	sp, #12
  403778:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40377c:	f7ff bb12 	b.w	402da4 <_malloc_r>
  403780:	f01e 0f01 	tst.w	lr, #1
  403784:	f47f af5a 	bne.w	40363c <_realloc_r+0x58>
  403788:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40378c:	ebc3 0a08 	rsb	sl, r3, r8
  403790:	f8da 3004 	ldr.w	r3, [sl, #4]
  403794:	f023 0c03 	bic.w	ip, r3, #3
  403798:	eb01 0e0c 	add.w	lr, r1, ip
  40379c:	4596      	cmp	lr, r2
  40379e:	db8b      	blt.n	4036b8 <_realloc_r+0xd4>
  4037a0:	68c3      	ldr	r3, [r0, #12]
  4037a2:	6882      	ldr	r2, [r0, #8]
  4037a4:	4657      	mov	r7, sl
  4037a6:	60d3      	str	r3, [r2, #12]
  4037a8:	609a      	str	r2, [r3, #8]
  4037aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4037ae:	f8da 300c 	ldr.w	r3, [sl, #12]
  4037b2:	60cb      	str	r3, [r1, #12]
  4037b4:	1f22      	subs	r2, r4, #4
  4037b6:	2a24      	cmp	r2, #36	; 0x24
  4037b8:	6099      	str	r1, [r3, #8]
  4037ba:	f200 8099 	bhi.w	4038f0 <_realloc_r+0x30c>
  4037be:	2a13      	cmp	r2, #19
  4037c0:	d962      	bls.n	403888 <_realloc_r+0x2a4>
  4037c2:	6833      	ldr	r3, [r6, #0]
  4037c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4037c8:	6873      	ldr	r3, [r6, #4]
  4037ca:	f8ca 300c 	str.w	r3, [sl, #12]
  4037ce:	2a1b      	cmp	r2, #27
  4037d0:	f200 80a0 	bhi.w	403914 <_realloc_r+0x330>
  4037d4:	3608      	adds	r6, #8
  4037d6:	f10a 0310 	add.w	r3, sl, #16
  4037da:	e056      	b.n	40388a <_realloc_r+0x2a6>
  4037dc:	f021 0b03 	bic.w	fp, r1, #3
  4037e0:	44a3      	add	fp, r4
  4037e2:	f105 0010 	add.w	r0, r5, #16
  4037e6:	4583      	cmp	fp, r0
  4037e8:	da59      	bge.n	40389e <_realloc_r+0x2ba>
  4037ea:	f01e 0f01 	tst.w	lr, #1
  4037ee:	f47f af25 	bne.w	40363c <_realloc_r+0x58>
  4037f2:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4037f6:	ebc1 0a08 	rsb	sl, r1, r8
  4037fa:	f8da 1004 	ldr.w	r1, [sl, #4]
  4037fe:	f021 0c03 	bic.w	ip, r1, #3
  403802:	44e3      	add	fp, ip
  403804:	4558      	cmp	r0, fp
  403806:	f73f af57 	bgt.w	4036b8 <_realloc_r+0xd4>
  40380a:	4657      	mov	r7, sl
  40380c:	f8da 100c 	ldr.w	r1, [sl, #12]
  403810:	f857 0f08 	ldr.w	r0, [r7, #8]!
  403814:	1f22      	subs	r2, r4, #4
  403816:	2a24      	cmp	r2, #36	; 0x24
  403818:	60c1      	str	r1, [r0, #12]
  40381a:	6088      	str	r0, [r1, #8]
  40381c:	f200 80b4 	bhi.w	403988 <_realloc_r+0x3a4>
  403820:	2a13      	cmp	r2, #19
  403822:	f240 80a5 	bls.w	403970 <_realloc_r+0x38c>
  403826:	6831      	ldr	r1, [r6, #0]
  403828:	f8ca 1008 	str.w	r1, [sl, #8]
  40382c:	6871      	ldr	r1, [r6, #4]
  40382e:	f8ca 100c 	str.w	r1, [sl, #12]
  403832:	2a1b      	cmp	r2, #27
  403834:	f200 80af 	bhi.w	403996 <_realloc_r+0x3b2>
  403838:	3608      	adds	r6, #8
  40383a:	f10a 0210 	add.w	r2, sl, #16
  40383e:	6831      	ldr	r1, [r6, #0]
  403840:	6011      	str	r1, [r2, #0]
  403842:	6871      	ldr	r1, [r6, #4]
  403844:	6051      	str	r1, [r2, #4]
  403846:	68b1      	ldr	r1, [r6, #8]
  403848:	6091      	str	r1, [r2, #8]
  40384a:	eb0a 0105 	add.w	r1, sl, r5
  40384e:	ebc5 020b 	rsb	r2, r5, fp
  403852:	f042 0201 	orr.w	r2, r2, #1
  403856:	6099      	str	r1, [r3, #8]
  403858:	604a      	str	r2, [r1, #4]
  40385a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40385e:	f003 0301 	and.w	r3, r3, #1
  403862:	431d      	orrs	r5, r3
  403864:	4648      	mov	r0, r9
  403866:	f8ca 5004 	str.w	r5, [sl, #4]
  40386a:	f7ff feb9 	bl	4035e0 <__malloc_unlock>
  40386e:	4638      	mov	r0, r7
  403870:	e75c      	b.n	40372c <_realloc_r+0x148>
  403872:	6833      	ldr	r3, [r6, #0]
  403874:	6003      	str	r3, [r0, #0]
  403876:	6873      	ldr	r3, [r6, #4]
  403878:	6043      	str	r3, [r0, #4]
  40387a:	2a1b      	cmp	r2, #27
  40387c:	d827      	bhi.n	4038ce <_realloc_r+0x2ea>
  40387e:	f100 0308 	add.w	r3, r0, #8
  403882:	f106 0208 	add.w	r2, r6, #8
  403886:	e6f2      	b.n	40366e <_realloc_r+0x8a>
  403888:	463b      	mov	r3, r7
  40388a:	6832      	ldr	r2, [r6, #0]
  40388c:	601a      	str	r2, [r3, #0]
  40388e:	6872      	ldr	r2, [r6, #4]
  403890:	605a      	str	r2, [r3, #4]
  403892:	68b2      	ldr	r2, [r6, #8]
  403894:	609a      	str	r2, [r3, #8]
  403896:	463e      	mov	r6, r7
  403898:	4674      	mov	r4, lr
  40389a:	46d0      	mov	r8, sl
  40389c:	e733      	b.n	403706 <_realloc_r+0x122>
  40389e:	eb08 0105 	add.w	r1, r8, r5
  4038a2:	ebc5 0b0b 	rsb	fp, r5, fp
  4038a6:	f04b 0201 	orr.w	r2, fp, #1
  4038aa:	6099      	str	r1, [r3, #8]
  4038ac:	604a      	str	r2, [r1, #4]
  4038ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4038b2:	f003 0301 	and.w	r3, r3, #1
  4038b6:	431d      	orrs	r5, r3
  4038b8:	4648      	mov	r0, r9
  4038ba:	f846 5c04 	str.w	r5, [r6, #-4]
  4038be:	f7ff fe8f 	bl	4035e0 <__malloc_unlock>
  4038c2:	4630      	mov	r0, r6
  4038c4:	e732      	b.n	40372c <_realloc_r+0x148>
  4038c6:	4631      	mov	r1, r6
  4038c8:	f7ff fe24 	bl	403514 <memmove>
  4038cc:	e6d5      	b.n	40367a <_realloc_r+0x96>
  4038ce:	68b3      	ldr	r3, [r6, #8]
  4038d0:	6083      	str	r3, [r0, #8]
  4038d2:	68f3      	ldr	r3, [r6, #12]
  4038d4:	60c3      	str	r3, [r0, #12]
  4038d6:	2a24      	cmp	r2, #36	; 0x24
  4038d8:	d028      	beq.n	40392c <_realloc_r+0x348>
  4038da:	f100 0310 	add.w	r3, r0, #16
  4038de:	f106 0210 	add.w	r2, r6, #16
  4038e2:	e6c4      	b.n	40366e <_realloc_r+0x8a>
  4038e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4038e8:	f023 0303 	bic.w	r3, r3, #3
  4038ec:	441c      	add	r4, r3
  4038ee:	e70a      	b.n	403706 <_realloc_r+0x122>
  4038f0:	4631      	mov	r1, r6
  4038f2:	4638      	mov	r0, r7
  4038f4:	4674      	mov	r4, lr
  4038f6:	46d0      	mov	r8, sl
  4038f8:	f7ff fe0c 	bl	403514 <memmove>
  4038fc:	463e      	mov	r6, r7
  4038fe:	e702      	b.n	403706 <_realloc_r+0x122>
  403900:	463a      	mov	r2, r7
  403902:	e6f7      	b.n	4036f4 <_realloc_r+0x110>
  403904:	4631      	mov	r1, r6
  403906:	4638      	mov	r0, r7
  403908:	461c      	mov	r4, r3
  40390a:	46d0      	mov	r8, sl
  40390c:	f7ff fe02 	bl	403514 <memmove>
  403910:	463e      	mov	r6, r7
  403912:	e6f8      	b.n	403706 <_realloc_r+0x122>
  403914:	68b3      	ldr	r3, [r6, #8]
  403916:	f8ca 3010 	str.w	r3, [sl, #16]
  40391a:	68f3      	ldr	r3, [r6, #12]
  40391c:	f8ca 3014 	str.w	r3, [sl, #20]
  403920:	2a24      	cmp	r2, #36	; 0x24
  403922:	d01b      	beq.n	40395c <_realloc_r+0x378>
  403924:	3610      	adds	r6, #16
  403926:	f10a 0318 	add.w	r3, sl, #24
  40392a:	e7ae      	b.n	40388a <_realloc_r+0x2a6>
  40392c:	6933      	ldr	r3, [r6, #16]
  40392e:	6103      	str	r3, [r0, #16]
  403930:	6973      	ldr	r3, [r6, #20]
  403932:	6143      	str	r3, [r0, #20]
  403934:	f106 0218 	add.w	r2, r6, #24
  403938:	f100 0318 	add.w	r3, r0, #24
  40393c:	e697      	b.n	40366e <_realloc_r+0x8a>
  40393e:	bf00      	nop
  403940:	200005a8 	.word	0x200005a8
  403944:	68b1      	ldr	r1, [r6, #8]
  403946:	f8ca 1010 	str.w	r1, [sl, #16]
  40394a:	68f1      	ldr	r1, [r6, #12]
  40394c:	f8ca 1014 	str.w	r1, [sl, #20]
  403950:	2a24      	cmp	r2, #36	; 0x24
  403952:	d00f      	beq.n	403974 <_realloc_r+0x390>
  403954:	3610      	adds	r6, #16
  403956:	f10a 0218 	add.w	r2, sl, #24
  40395a:	e6cb      	b.n	4036f4 <_realloc_r+0x110>
  40395c:	6933      	ldr	r3, [r6, #16]
  40395e:	f8ca 3018 	str.w	r3, [sl, #24]
  403962:	6973      	ldr	r3, [r6, #20]
  403964:	f8ca 301c 	str.w	r3, [sl, #28]
  403968:	3618      	adds	r6, #24
  40396a:	f10a 0320 	add.w	r3, sl, #32
  40396e:	e78c      	b.n	40388a <_realloc_r+0x2a6>
  403970:	463a      	mov	r2, r7
  403972:	e764      	b.n	40383e <_realloc_r+0x25a>
  403974:	6932      	ldr	r2, [r6, #16]
  403976:	f8ca 2018 	str.w	r2, [sl, #24]
  40397a:	6972      	ldr	r2, [r6, #20]
  40397c:	f8ca 201c 	str.w	r2, [sl, #28]
  403980:	3618      	adds	r6, #24
  403982:	f10a 0220 	add.w	r2, sl, #32
  403986:	e6b5      	b.n	4036f4 <_realloc_r+0x110>
  403988:	4631      	mov	r1, r6
  40398a:	4638      	mov	r0, r7
  40398c:	9301      	str	r3, [sp, #4]
  40398e:	f7ff fdc1 	bl	403514 <memmove>
  403992:	9b01      	ldr	r3, [sp, #4]
  403994:	e759      	b.n	40384a <_realloc_r+0x266>
  403996:	68b1      	ldr	r1, [r6, #8]
  403998:	f8ca 1010 	str.w	r1, [sl, #16]
  40399c:	68f1      	ldr	r1, [r6, #12]
  40399e:	f8ca 1014 	str.w	r1, [sl, #20]
  4039a2:	2a24      	cmp	r2, #36	; 0x24
  4039a4:	d003      	beq.n	4039ae <_realloc_r+0x3ca>
  4039a6:	3610      	adds	r6, #16
  4039a8:	f10a 0218 	add.w	r2, sl, #24
  4039ac:	e747      	b.n	40383e <_realloc_r+0x25a>
  4039ae:	6932      	ldr	r2, [r6, #16]
  4039b0:	f8ca 2018 	str.w	r2, [sl, #24]
  4039b4:	6972      	ldr	r2, [r6, #20]
  4039b6:	f8ca 201c 	str.w	r2, [sl, #28]
  4039ba:	3618      	adds	r6, #24
  4039bc:	f10a 0220 	add.w	r2, sl, #32
  4039c0:	e73d      	b.n	40383e <_realloc_r+0x25a>
  4039c2:	bf00      	nop

004039c4 <_sbrk_r>:
  4039c4:	b538      	push	{r3, r4, r5, lr}
  4039c6:	4c07      	ldr	r4, [pc, #28]	; (4039e4 <_sbrk_r+0x20>)
  4039c8:	2300      	movs	r3, #0
  4039ca:	4605      	mov	r5, r0
  4039cc:	4608      	mov	r0, r1
  4039ce:	6023      	str	r3, [r4, #0]
  4039d0:	f7fd fad4 	bl	400f7c <_sbrk>
  4039d4:	1c43      	adds	r3, r0, #1
  4039d6:	d000      	beq.n	4039da <_sbrk_r+0x16>
  4039d8:	bd38      	pop	{r3, r4, r5, pc}
  4039da:	6823      	ldr	r3, [r4, #0]
  4039dc:	2b00      	cmp	r3, #0
  4039de:	d0fb      	beq.n	4039d8 <_sbrk_r+0x14>
  4039e0:	602b      	str	r3, [r5, #0]
  4039e2:	bd38      	pop	{r3, r4, r5, pc}
  4039e4:	20000ab0 	.word	0x20000ab0

004039e8 <__sread>:
  4039e8:	b510      	push	{r4, lr}
  4039ea:	460c      	mov	r4, r1
  4039ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4039f0:	f000 f9c4 	bl	403d7c <_read_r>
  4039f4:	2800      	cmp	r0, #0
  4039f6:	db03      	blt.n	403a00 <__sread+0x18>
  4039f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4039fa:	4403      	add	r3, r0
  4039fc:	6523      	str	r3, [r4, #80]	; 0x50
  4039fe:	bd10      	pop	{r4, pc}
  403a00:	89a3      	ldrh	r3, [r4, #12]
  403a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403a06:	81a3      	strh	r3, [r4, #12]
  403a08:	bd10      	pop	{r4, pc}
  403a0a:	bf00      	nop

00403a0c <__swrite>:
  403a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a10:	4616      	mov	r6, r2
  403a12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  403a16:	461f      	mov	r7, r3
  403a18:	05d3      	lsls	r3, r2, #23
  403a1a:	460c      	mov	r4, r1
  403a1c:	4605      	mov	r5, r0
  403a1e:	d507      	bpl.n	403a30 <__swrite+0x24>
  403a20:	2200      	movs	r2, #0
  403a22:	2302      	movs	r3, #2
  403a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a28:	f000 f992 	bl	403d50 <_lseek_r>
  403a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403a34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  403a38:	81a2      	strh	r2, [r4, #12]
  403a3a:	463b      	mov	r3, r7
  403a3c:	4632      	mov	r2, r6
  403a3e:	4628      	mov	r0, r5
  403a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403a44:	f000 b8a2 	b.w	403b8c <_write_r>

00403a48 <__sseek>:
  403a48:	b510      	push	{r4, lr}
  403a4a:	460c      	mov	r4, r1
  403a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a50:	f000 f97e 	bl	403d50 <_lseek_r>
  403a54:	89a3      	ldrh	r3, [r4, #12]
  403a56:	1c42      	adds	r2, r0, #1
  403a58:	bf0e      	itee	eq
  403a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403a62:	6520      	strne	r0, [r4, #80]	; 0x50
  403a64:	81a3      	strh	r3, [r4, #12]
  403a66:	bd10      	pop	{r4, pc}

00403a68 <__sclose>:
  403a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403a6c:	f000 b8f6 	b.w	403c5c <_close_r>

00403a70 <__swbuf_r>:
  403a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403a72:	460d      	mov	r5, r1
  403a74:	4614      	mov	r4, r2
  403a76:	4606      	mov	r6, r0
  403a78:	b110      	cbz	r0, 403a80 <__swbuf_r+0x10>
  403a7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403a7c:	2b00      	cmp	r3, #0
  403a7e:	d04a      	beq.n	403b16 <__swbuf_r+0xa6>
  403a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403a84:	69a3      	ldr	r3, [r4, #24]
  403a86:	60a3      	str	r3, [r4, #8]
  403a88:	b291      	uxth	r1, r2
  403a8a:	0708      	lsls	r0, r1, #28
  403a8c:	d538      	bpl.n	403b00 <__swbuf_r+0x90>
  403a8e:	6923      	ldr	r3, [r4, #16]
  403a90:	2b00      	cmp	r3, #0
  403a92:	d035      	beq.n	403b00 <__swbuf_r+0x90>
  403a94:	0489      	lsls	r1, r1, #18
  403a96:	b2ef      	uxtb	r7, r5
  403a98:	d515      	bpl.n	403ac6 <__swbuf_r+0x56>
  403a9a:	6822      	ldr	r2, [r4, #0]
  403a9c:	6961      	ldr	r1, [r4, #20]
  403a9e:	1ad3      	subs	r3, r2, r3
  403aa0:	428b      	cmp	r3, r1
  403aa2:	da1c      	bge.n	403ade <__swbuf_r+0x6e>
  403aa4:	3301      	adds	r3, #1
  403aa6:	68a1      	ldr	r1, [r4, #8]
  403aa8:	1c50      	adds	r0, r2, #1
  403aaa:	3901      	subs	r1, #1
  403aac:	60a1      	str	r1, [r4, #8]
  403aae:	6020      	str	r0, [r4, #0]
  403ab0:	7015      	strb	r5, [r2, #0]
  403ab2:	6962      	ldr	r2, [r4, #20]
  403ab4:	429a      	cmp	r2, r3
  403ab6:	d01a      	beq.n	403aee <__swbuf_r+0x7e>
  403ab8:	89a3      	ldrh	r3, [r4, #12]
  403aba:	07db      	lsls	r3, r3, #31
  403abc:	d501      	bpl.n	403ac2 <__swbuf_r+0x52>
  403abe:	2f0a      	cmp	r7, #10
  403ac0:	d015      	beq.n	403aee <__swbuf_r+0x7e>
  403ac2:	4638      	mov	r0, r7
  403ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ac6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403acc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  403ad0:	81a2      	strh	r2, [r4, #12]
  403ad2:	6822      	ldr	r2, [r4, #0]
  403ad4:	6661      	str	r1, [r4, #100]	; 0x64
  403ad6:	6961      	ldr	r1, [r4, #20]
  403ad8:	1ad3      	subs	r3, r2, r3
  403ada:	428b      	cmp	r3, r1
  403adc:	dbe2      	blt.n	403aa4 <__swbuf_r+0x34>
  403ade:	4621      	mov	r1, r4
  403ae0:	4630      	mov	r0, r6
  403ae2:	f7fe fce3 	bl	4024ac <_fflush_r>
  403ae6:	b940      	cbnz	r0, 403afa <__swbuf_r+0x8a>
  403ae8:	6822      	ldr	r2, [r4, #0]
  403aea:	2301      	movs	r3, #1
  403aec:	e7db      	b.n	403aa6 <__swbuf_r+0x36>
  403aee:	4621      	mov	r1, r4
  403af0:	4630      	mov	r0, r6
  403af2:	f7fe fcdb 	bl	4024ac <_fflush_r>
  403af6:	2800      	cmp	r0, #0
  403af8:	d0e3      	beq.n	403ac2 <__swbuf_r+0x52>
  403afa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  403afe:	e7e0      	b.n	403ac2 <__swbuf_r+0x52>
  403b00:	4621      	mov	r1, r4
  403b02:	4630      	mov	r0, r6
  403b04:	f7fe fbba 	bl	40227c <__swsetup_r>
  403b08:	2800      	cmp	r0, #0
  403b0a:	d1f6      	bne.n	403afa <__swbuf_r+0x8a>
  403b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403b10:	6923      	ldr	r3, [r4, #16]
  403b12:	b291      	uxth	r1, r2
  403b14:	e7be      	b.n	403a94 <__swbuf_r+0x24>
  403b16:	f7fe fd5d 	bl	4025d4 <__sinit>
  403b1a:	e7b1      	b.n	403a80 <__swbuf_r+0x10>

00403b1c <_wcrtomb_r>:
  403b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403b1e:	4606      	mov	r6, r0
  403b20:	b085      	sub	sp, #20
  403b22:	461f      	mov	r7, r3
  403b24:	b189      	cbz	r1, 403b4a <_wcrtomb_r+0x2e>
  403b26:	4c10      	ldr	r4, [pc, #64]	; (403b68 <_wcrtomb_r+0x4c>)
  403b28:	4d10      	ldr	r5, [pc, #64]	; (403b6c <_wcrtomb_r+0x50>)
  403b2a:	6824      	ldr	r4, [r4, #0]
  403b2c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  403b2e:	2c00      	cmp	r4, #0
  403b30:	bf08      	it	eq
  403b32:	462c      	moveq	r4, r5
  403b34:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  403b38:	47a0      	blx	r4
  403b3a:	1c43      	adds	r3, r0, #1
  403b3c:	d103      	bne.n	403b46 <_wcrtomb_r+0x2a>
  403b3e:	2200      	movs	r2, #0
  403b40:	238a      	movs	r3, #138	; 0x8a
  403b42:	603a      	str	r2, [r7, #0]
  403b44:	6033      	str	r3, [r6, #0]
  403b46:	b005      	add	sp, #20
  403b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403b4a:	460c      	mov	r4, r1
  403b4c:	4906      	ldr	r1, [pc, #24]	; (403b68 <_wcrtomb_r+0x4c>)
  403b4e:	4a07      	ldr	r2, [pc, #28]	; (403b6c <_wcrtomb_r+0x50>)
  403b50:	6809      	ldr	r1, [r1, #0]
  403b52:	6b49      	ldr	r1, [r1, #52]	; 0x34
  403b54:	2900      	cmp	r1, #0
  403b56:	bf08      	it	eq
  403b58:	4611      	moveq	r1, r2
  403b5a:	4622      	mov	r2, r4
  403b5c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  403b60:	a901      	add	r1, sp, #4
  403b62:	47a0      	blx	r4
  403b64:	e7e9      	b.n	403b3a <_wcrtomb_r+0x1e>
  403b66:	bf00      	nop
  403b68:	20000438 	.word	0x20000438
  403b6c:	2000043c 	.word	0x2000043c

00403b70 <__ascii_wctomb>:
  403b70:	b121      	cbz	r1, 403b7c <__ascii_wctomb+0xc>
  403b72:	2aff      	cmp	r2, #255	; 0xff
  403b74:	d804      	bhi.n	403b80 <__ascii_wctomb+0x10>
  403b76:	700a      	strb	r2, [r1, #0]
  403b78:	2001      	movs	r0, #1
  403b7a:	4770      	bx	lr
  403b7c:	4608      	mov	r0, r1
  403b7e:	4770      	bx	lr
  403b80:	238a      	movs	r3, #138	; 0x8a
  403b82:	6003      	str	r3, [r0, #0]
  403b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403b88:	4770      	bx	lr
  403b8a:	bf00      	nop

00403b8c <_write_r>:
  403b8c:	b570      	push	{r4, r5, r6, lr}
  403b8e:	460d      	mov	r5, r1
  403b90:	4c08      	ldr	r4, [pc, #32]	; (403bb4 <_write_r+0x28>)
  403b92:	4611      	mov	r1, r2
  403b94:	4606      	mov	r6, r0
  403b96:	461a      	mov	r2, r3
  403b98:	4628      	mov	r0, r5
  403b9a:	2300      	movs	r3, #0
  403b9c:	6023      	str	r3, [r4, #0]
  403b9e:	f7fc fb05 	bl	4001ac <_write>
  403ba2:	1c43      	adds	r3, r0, #1
  403ba4:	d000      	beq.n	403ba8 <_write_r+0x1c>
  403ba6:	bd70      	pop	{r4, r5, r6, pc}
  403ba8:	6823      	ldr	r3, [r4, #0]
  403baa:	2b00      	cmp	r3, #0
  403bac:	d0fb      	beq.n	403ba6 <_write_r+0x1a>
  403bae:	6033      	str	r3, [r6, #0]
  403bb0:	bd70      	pop	{r4, r5, r6, pc}
  403bb2:	bf00      	nop
  403bb4:	20000ab0 	.word	0x20000ab0

00403bb8 <__register_exitproc>:
  403bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403bbc:	4c25      	ldr	r4, [pc, #148]	; (403c54 <__register_exitproc+0x9c>)
  403bbe:	6825      	ldr	r5, [r4, #0]
  403bc0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403bc4:	4606      	mov	r6, r0
  403bc6:	4688      	mov	r8, r1
  403bc8:	4692      	mov	sl, r2
  403bca:	4699      	mov	r9, r3
  403bcc:	b3c4      	cbz	r4, 403c40 <__register_exitproc+0x88>
  403bce:	6860      	ldr	r0, [r4, #4]
  403bd0:	281f      	cmp	r0, #31
  403bd2:	dc17      	bgt.n	403c04 <__register_exitproc+0x4c>
  403bd4:	1c43      	adds	r3, r0, #1
  403bd6:	b176      	cbz	r6, 403bf6 <__register_exitproc+0x3e>
  403bd8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403bdc:	2201      	movs	r2, #1
  403bde:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403be2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403be6:	4082      	lsls	r2, r0
  403be8:	4311      	orrs	r1, r2
  403bea:	2e02      	cmp	r6, #2
  403bec:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403bf0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403bf4:	d01e      	beq.n	403c34 <__register_exitproc+0x7c>
  403bf6:	3002      	adds	r0, #2
  403bf8:	6063      	str	r3, [r4, #4]
  403bfa:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403bfe:	2000      	movs	r0, #0
  403c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c04:	4b14      	ldr	r3, [pc, #80]	; (403c58 <__register_exitproc+0xa0>)
  403c06:	b303      	cbz	r3, 403c4a <__register_exitproc+0x92>
  403c08:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403c0c:	f7ff f8c2 	bl	402d94 <malloc>
  403c10:	4604      	mov	r4, r0
  403c12:	b1d0      	cbz	r0, 403c4a <__register_exitproc+0x92>
  403c14:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403c18:	2700      	movs	r7, #0
  403c1a:	e880 0088 	stmia.w	r0, {r3, r7}
  403c1e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403c22:	4638      	mov	r0, r7
  403c24:	2301      	movs	r3, #1
  403c26:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403c2a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403c2e:	2e00      	cmp	r6, #0
  403c30:	d0e1      	beq.n	403bf6 <__register_exitproc+0x3e>
  403c32:	e7d1      	b.n	403bd8 <__register_exitproc+0x20>
  403c34:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403c38:	430a      	orrs	r2, r1
  403c3a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403c3e:	e7da      	b.n	403bf6 <__register_exitproc+0x3e>
  403c40:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403c44:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403c48:	e7c1      	b.n	403bce <__register_exitproc+0x16>
  403c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c52:	bf00      	nop
  403c54:	004041d0 	.word	0x004041d0
  403c58:	00402d95 	.word	0x00402d95

00403c5c <_close_r>:
  403c5c:	b538      	push	{r3, r4, r5, lr}
  403c5e:	4c07      	ldr	r4, [pc, #28]	; (403c7c <_close_r+0x20>)
  403c60:	2300      	movs	r3, #0
  403c62:	4605      	mov	r5, r0
  403c64:	4608      	mov	r0, r1
  403c66:	6023      	str	r3, [r4, #0]
  403c68:	f7fd f9a2 	bl	400fb0 <_close>
  403c6c:	1c43      	adds	r3, r0, #1
  403c6e:	d000      	beq.n	403c72 <_close_r+0x16>
  403c70:	bd38      	pop	{r3, r4, r5, pc}
  403c72:	6823      	ldr	r3, [r4, #0]
  403c74:	2b00      	cmp	r3, #0
  403c76:	d0fb      	beq.n	403c70 <_close_r+0x14>
  403c78:	602b      	str	r3, [r5, #0]
  403c7a:	bd38      	pop	{r3, r4, r5, pc}
  403c7c:	20000ab0 	.word	0x20000ab0

00403c80 <_fclose_r>:
  403c80:	2900      	cmp	r1, #0
  403c82:	d03d      	beq.n	403d00 <_fclose_r+0x80>
  403c84:	b570      	push	{r4, r5, r6, lr}
  403c86:	4605      	mov	r5, r0
  403c88:	460c      	mov	r4, r1
  403c8a:	b108      	cbz	r0, 403c90 <_fclose_r+0x10>
  403c8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403c8e:	b37b      	cbz	r3, 403cf0 <_fclose_r+0x70>
  403c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c94:	b90b      	cbnz	r3, 403c9a <_fclose_r+0x1a>
  403c96:	2000      	movs	r0, #0
  403c98:	bd70      	pop	{r4, r5, r6, pc}
  403c9a:	4621      	mov	r1, r4
  403c9c:	4628      	mov	r0, r5
  403c9e:	f7fe fb61 	bl	402364 <__sflush_r>
  403ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  403ca4:	4606      	mov	r6, r0
  403ca6:	b133      	cbz	r3, 403cb6 <_fclose_r+0x36>
  403ca8:	69e1      	ldr	r1, [r4, #28]
  403caa:	4628      	mov	r0, r5
  403cac:	4798      	blx	r3
  403cae:	2800      	cmp	r0, #0
  403cb0:	bfb8      	it	lt
  403cb2:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
  403cb6:	89a3      	ldrh	r3, [r4, #12]
  403cb8:	061b      	lsls	r3, r3, #24
  403cba:	d41c      	bmi.n	403cf6 <_fclose_r+0x76>
  403cbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403cbe:	b141      	cbz	r1, 403cd2 <_fclose_r+0x52>
  403cc0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403cc4:	4299      	cmp	r1, r3
  403cc6:	d002      	beq.n	403cce <_fclose_r+0x4e>
  403cc8:	4628      	mov	r0, r5
  403cca:	f7fe fd4d 	bl	402768 <_free_r>
  403cce:	2300      	movs	r3, #0
  403cd0:	6323      	str	r3, [r4, #48]	; 0x30
  403cd2:	6c61      	ldr	r1, [r4, #68]	; 0x44
  403cd4:	b121      	cbz	r1, 403ce0 <_fclose_r+0x60>
  403cd6:	4628      	mov	r0, r5
  403cd8:	f7fe fd46 	bl	402768 <_free_r>
  403cdc:	2300      	movs	r3, #0
  403cde:	6463      	str	r3, [r4, #68]	; 0x44
  403ce0:	f7fe fc7e 	bl	4025e0 <__sfp_lock_acquire>
  403ce4:	2300      	movs	r3, #0
  403ce6:	81a3      	strh	r3, [r4, #12]
  403ce8:	f7fe fc7c 	bl	4025e4 <__sfp_lock_release>
  403cec:	4630      	mov	r0, r6
  403cee:	bd70      	pop	{r4, r5, r6, pc}
  403cf0:	f7fe fc70 	bl	4025d4 <__sinit>
  403cf4:	e7cc      	b.n	403c90 <_fclose_r+0x10>
  403cf6:	6921      	ldr	r1, [r4, #16]
  403cf8:	4628      	mov	r0, r5
  403cfa:	f7fe fd35 	bl	402768 <_free_r>
  403cfe:	e7dd      	b.n	403cbc <_fclose_r+0x3c>
  403d00:	2000      	movs	r0, #0
  403d02:	4770      	bx	lr

00403d04 <_fstat_r>:
  403d04:	b538      	push	{r3, r4, r5, lr}
  403d06:	460b      	mov	r3, r1
  403d08:	4c07      	ldr	r4, [pc, #28]	; (403d28 <_fstat_r+0x24>)
  403d0a:	4605      	mov	r5, r0
  403d0c:	4611      	mov	r1, r2
  403d0e:	4618      	mov	r0, r3
  403d10:	2300      	movs	r3, #0
  403d12:	6023      	str	r3, [r4, #0]
  403d14:	f7fd f950 	bl	400fb8 <_fstat>
  403d18:	1c43      	adds	r3, r0, #1
  403d1a:	d000      	beq.n	403d1e <_fstat_r+0x1a>
  403d1c:	bd38      	pop	{r3, r4, r5, pc}
  403d1e:	6823      	ldr	r3, [r4, #0]
  403d20:	2b00      	cmp	r3, #0
  403d22:	d0fb      	beq.n	403d1c <_fstat_r+0x18>
  403d24:	602b      	str	r3, [r5, #0]
  403d26:	bd38      	pop	{r3, r4, r5, pc}
  403d28:	20000ab0 	.word	0x20000ab0

00403d2c <_isatty_r>:
  403d2c:	b538      	push	{r3, r4, r5, lr}
  403d2e:	4c07      	ldr	r4, [pc, #28]	; (403d4c <_isatty_r+0x20>)
  403d30:	2300      	movs	r3, #0
  403d32:	4605      	mov	r5, r0
  403d34:	4608      	mov	r0, r1
  403d36:	6023      	str	r3, [r4, #0]
  403d38:	f7fd f944 	bl	400fc4 <_isatty>
  403d3c:	1c43      	adds	r3, r0, #1
  403d3e:	d000      	beq.n	403d42 <_isatty_r+0x16>
  403d40:	bd38      	pop	{r3, r4, r5, pc}
  403d42:	6823      	ldr	r3, [r4, #0]
  403d44:	2b00      	cmp	r3, #0
  403d46:	d0fb      	beq.n	403d40 <_isatty_r+0x14>
  403d48:	602b      	str	r3, [r5, #0]
  403d4a:	bd38      	pop	{r3, r4, r5, pc}
  403d4c:	20000ab0 	.word	0x20000ab0

00403d50 <_lseek_r>:
  403d50:	b570      	push	{r4, r5, r6, lr}
  403d52:	460d      	mov	r5, r1
  403d54:	4c08      	ldr	r4, [pc, #32]	; (403d78 <_lseek_r+0x28>)
  403d56:	4611      	mov	r1, r2
  403d58:	4606      	mov	r6, r0
  403d5a:	461a      	mov	r2, r3
  403d5c:	4628      	mov	r0, r5
  403d5e:	2300      	movs	r3, #0
  403d60:	6023      	str	r3, [r4, #0]
  403d62:	f7fd f931 	bl	400fc8 <_lseek>
  403d66:	1c43      	adds	r3, r0, #1
  403d68:	d000      	beq.n	403d6c <_lseek_r+0x1c>
  403d6a:	bd70      	pop	{r4, r5, r6, pc}
  403d6c:	6823      	ldr	r3, [r4, #0]
  403d6e:	2b00      	cmp	r3, #0
  403d70:	d0fb      	beq.n	403d6a <_lseek_r+0x1a>
  403d72:	6033      	str	r3, [r6, #0]
  403d74:	bd70      	pop	{r4, r5, r6, pc}
  403d76:	bf00      	nop
  403d78:	20000ab0 	.word	0x20000ab0

00403d7c <_read_r>:
  403d7c:	b570      	push	{r4, r5, r6, lr}
  403d7e:	460d      	mov	r5, r1
  403d80:	4c08      	ldr	r4, [pc, #32]	; (403da4 <_read_r+0x28>)
  403d82:	4611      	mov	r1, r2
  403d84:	4606      	mov	r6, r0
  403d86:	461a      	mov	r2, r3
  403d88:	4628      	mov	r0, r5
  403d8a:	2300      	movs	r3, #0
  403d8c:	6023      	str	r3, [r4, #0]
  403d8e:	f7fc f9ef 	bl	400170 <_read>
  403d92:	1c43      	adds	r3, r0, #1
  403d94:	d000      	beq.n	403d98 <_read_r+0x1c>
  403d96:	bd70      	pop	{r4, r5, r6, pc}
  403d98:	6823      	ldr	r3, [r4, #0]
  403d9a:	2b00      	cmp	r3, #0
  403d9c:	d0fb      	beq.n	403d96 <_read_r+0x1a>
  403d9e:	6033      	str	r3, [r6, #0]
  403da0:	bd70      	pop	{r4, r5, r6, pc}
  403da2:	bf00      	nop
  403da4:	20000ab0 	.word	0x20000ab0

00403da8 <__aeabi_uldivmod>:
  403da8:	b953      	cbnz	r3, 403dc0 <__aeabi_uldivmod+0x18>
  403daa:	b94a      	cbnz	r2, 403dc0 <__aeabi_uldivmod+0x18>
  403dac:	2900      	cmp	r1, #0
  403dae:	bf08      	it	eq
  403db0:	2800      	cmpeq	r0, #0
  403db2:	bf1c      	itt	ne
  403db4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
  403db8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  403dbc:	f000 b97e 	b.w	4040bc <__aeabi_idiv0>
  403dc0:	f1ad 0c08 	sub.w	ip, sp, #8
  403dc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403dc8:	f000 f806 	bl	403dd8 <__udivmoddi4>
  403dcc:	f8dd e004 	ldr.w	lr, [sp, #4]
  403dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403dd4:	b004      	add	sp, #16
  403dd6:	4770      	bx	lr

00403dd8 <__udivmoddi4>:
  403dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403ddc:	468c      	mov	ip, r1
  403dde:	460e      	mov	r6, r1
  403de0:	4604      	mov	r4, r0
  403de2:	9d08      	ldr	r5, [sp, #32]
  403de4:	2b00      	cmp	r3, #0
  403de6:	d150      	bne.n	403e8a <__udivmoddi4+0xb2>
  403de8:	428a      	cmp	r2, r1
  403dea:	4617      	mov	r7, r2
  403dec:	d96c      	bls.n	403ec8 <__udivmoddi4+0xf0>
  403dee:	fab2 fe82 	clz	lr, r2
  403df2:	f1be 0f00 	cmp.w	lr, #0
  403df6:	d00b      	beq.n	403e10 <__udivmoddi4+0x38>
  403df8:	f1ce 0420 	rsb	r4, lr, #32
  403dfc:	fa20 f404 	lsr.w	r4, r0, r4
  403e00:	fa01 f60e 	lsl.w	r6, r1, lr
  403e04:	ea44 0c06 	orr.w	ip, r4, r6
  403e08:	fa02 f70e 	lsl.w	r7, r2, lr
  403e0c:	fa00 f40e 	lsl.w	r4, r0, lr
  403e10:	ea4f 4917 	mov.w	r9, r7, lsr #16
  403e14:	0c22      	lsrs	r2, r4, #16
  403e16:	fbbc f0f9 	udiv	r0, ip, r9
  403e1a:	fa1f f887 	uxth.w	r8, r7
  403e1e:	fb09 c610 	mls	r6, r9, r0, ip
  403e22:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403e26:	fb00 f308 	mul.w	r3, r0, r8
  403e2a:	42b3      	cmp	r3, r6
  403e2c:	d909      	bls.n	403e42 <__udivmoddi4+0x6a>
  403e2e:	19f6      	adds	r6, r6, r7
  403e30:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
  403e34:	f080 8122 	bcs.w	40407c <__udivmoddi4+0x2a4>
  403e38:	42b3      	cmp	r3, r6
  403e3a:	f240 811f 	bls.w	40407c <__udivmoddi4+0x2a4>
  403e3e:	3802      	subs	r0, #2
  403e40:	443e      	add	r6, r7
  403e42:	1af6      	subs	r6, r6, r3
  403e44:	b2a2      	uxth	r2, r4
  403e46:	fbb6 f3f9 	udiv	r3, r6, r9
  403e4a:	fb09 6613 	mls	r6, r9, r3, r6
  403e4e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403e52:	fb03 f808 	mul.w	r8, r3, r8
  403e56:	45a0      	cmp	r8, r4
  403e58:	d909      	bls.n	403e6e <__udivmoddi4+0x96>
  403e5a:	19e4      	adds	r4, r4, r7
  403e5c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
  403e60:	f080 810a 	bcs.w	404078 <__udivmoddi4+0x2a0>
  403e64:	45a0      	cmp	r8, r4
  403e66:	f240 8107 	bls.w	404078 <__udivmoddi4+0x2a0>
  403e6a:	3b02      	subs	r3, #2
  403e6c:	443c      	add	r4, r7
  403e6e:	ebc8 0404 	rsb	r4, r8, r4
  403e72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403e76:	2100      	movs	r1, #0
  403e78:	2d00      	cmp	r5, #0
  403e7a:	d062      	beq.n	403f42 <__udivmoddi4+0x16a>
  403e7c:	fa24 f40e 	lsr.w	r4, r4, lr
  403e80:	2300      	movs	r3, #0
  403e82:	602c      	str	r4, [r5, #0]
  403e84:	606b      	str	r3, [r5, #4]
  403e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e8a:	428b      	cmp	r3, r1
  403e8c:	d907      	bls.n	403e9e <__udivmoddi4+0xc6>
  403e8e:	2d00      	cmp	r5, #0
  403e90:	d055      	beq.n	403f3e <__udivmoddi4+0x166>
  403e92:	2100      	movs	r1, #0
  403e94:	e885 0041 	stmia.w	r5, {r0, r6}
  403e98:	4608      	mov	r0, r1
  403e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e9e:	fab3 f183 	clz	r1, r3
  403ea2:	2900      	cmp	r1, #0
  403ea4:	f040 8090 	bne.w	403fc8 <__udivmoddi4+0x1f0>
  403ea8:	42b3      	cmp	r3, r6
  403eaa:	d302      	bcc.n	403eb2 <__udivmoddi4+0xda>
  403eac:	4282      	cmp	r2, r0
  403eae:	f200 80f8 	bhi.w	4040a2 <__udivmoddi4+0x2ca>
  403eb2:	1a84      	subs	r4, r0, r2
  403eb4:	eb66 0603 	sbc.w	r6, r6, r3
  403eb8:	2001      	movs	r0, #1
  403eba:	46b4      	mov	ip, r6
  403ebc:	2d00      	cmp	r5, #0
  403ebe:	d040      	beq.n	403f42 <__udivmoddi4+0x16a>
  403ec0:	e885 1010 	stmia.w	r5, {r4, ip}
  403ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ec8:	b912      	cbnz	r2, 403ed0 <__udivmoddi4+0xf8>
  403eca:	2701      	movs	r7, #1
  403ecc:	fbb7 f7f2 	udiv	r7, r7, r2
  403ed0:	fab7 fe87 	clz	lr, r7
  403ed4:	f1be 0f00 	cmp.w	lr, #0
  403ed8:	d135      	bne.n	403f46 <__udivmoddi4+0x16e>
  403eda:	1bf3      	subs	r3, r6, r7
  403edc:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403ee0:	fa1f fc87 	uxth.w	ip, r7
  403ee4:	2101      	movs	r1, #1
  403ee6:	fbb3 f0f8 	udiv	r0, r3, r8
  403eea:	0c22      	lsrs	r2, r4, #16
  403eec:	fb08 3610 	mls	r6, r8, r0, r3
  403ef0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  403ef4:	fb0c f300 	mul.w	r3, ip, r0
  403ef8:	42b3      	cmp	r3, r6
  403efa:	d907      	bls.n	403f0c <__udivmoddi4+0x134>
  403efc:	19f6      	adds	r6, r6, r7
  403efe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
  403f02:	d202      	bcs.n	403f0a <__udivmoddi4+0x132>
  403f04:	42b3      	cmp	r3, r6
  403f06:	f200 80ce 	bhi.w	4040a6 <__udivmoddi4+0x2ce>
  403f0a:	4610      	mov	r0, r2
  403f0c:	1af6      	subs	r6, r6, r3
  403f0e:	b2a2      	uxth	r2, r4
  403f10:	fbb6 f3f8 	udiv	r3, r6, r8
  403f14:	fb08 6613 	mls	r6, r8, r3, r6
  403f18:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  403f1c:	fb0c fc03 	mul.w	ip, ip, r3
  403f20:	45a4      	cmp	ip, r4
  403f22:	d907      	bls.n	403f34 <__udivmoddi4+0x15c>
  403f24:	19e4      	adds	r4, r4, r7
  403f26:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
  403f2a:	d202      	bcs.n	403f32 <__udivmoddi4+0x15a>
  403f2c:	45a4      	cmp	ip, r4
  403f2e:	f200 80b5 	bhi.w	40409c <__udivmoddi4+0x2c4>
  403f32:	4613      	mov	r3, r2
  403f34:	ebcc 0404 	rsb	r4, ip, r4
  403f38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  403f3c:	e79c      	b.n	403e78 <__udivmoddi4+0xa0>
  403f3e:	4629      	mov	r1, r5
  403f40:	4628      	mov	r0, r5
  403f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f46:	f1ce 0120 	rsb	r1, lr, #32
  403f4a:	fa06 f30e 	lsl.w	r3, r6, lr
  403f4e:	fa07 f70e 	lsl.w	r7, r7, lr
  403f52:	fa20 f901 	lsr.w	r9, r0, r1
  403f56:	ea4f 4817 	mov.w	r8, r7, lsr #16
  403f5a:	40ce      	lsrs	r6, r1
  403f5c:	ea49 0903 	orr.w	r9, r9, r3
  403f60:	fbb6 faf8 	udiv	sl, r6, r8
  403f64:	ea4f 4419 	mov.w	r4, r9, lsr #16
  403f68:	fb08 661a 	mls	r6, r8, sl, r6
  403f6c:	fa1f fc87 	uxth.w	ip, r7
  403f70:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  403f74:	fb0a f20c 	mul.w	r2, sl, ip
  403f78:	429a      	cmp	r2, r3
  403f7a:	fa00 f40e 	lsl.w	r4, r0, lr
  403f7e:	d90a      	bls.n	403f96 <__udivmoddi4+0x1be>
  403f80:	19db      	adds	r3, r3, r7
  403f82:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
  403f86:	f080 8087 	bcs.w	404098 <__udivmoddi4+0x2c0>
  403f8a:	429a      	cmp	r2, r3
  403f8c:	f240 8084 	bls.w	404098 <__udivmoddi4+0x2c0>
  403f90:	f1aa 0a02 	sub.w	sl, sl, #2
  403f94:	443b      	add	r3, r7
  403f96:	1a9b      	subs	r3, r3, r2
  403f98:	fa1f f989 	uxth.w	r9, r9
  403f9c:	fbb3 f1f8 	udiv	r1, r3, r8
  403fa0:	fb08 3311 	mls	r3, r8, r1, r3
  403fa4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  403fa8:	fb01 f60c 	mul.w	r6, r1, ip
  403fac:	429e      	cmp	r6, r3
  403fae:	d907      	bls.n	403fc0 <__udivmoddi4+0x1e8>
  403fb0:	19db      	adds	r3, r3, r7
  403fb2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
  403fb6:	d26b      	bcs.n	404090 <__udivmoddi4+0x2b8>
  403fb8:	429e      	cmp	r6, r3
  403fba:	d969      	bls.n	404090 <__udivmoddi4+0x2b8>
  403fbc:	3902      	subs	r1, #2
  403fbe:	443b      	add	r3, r7
  403fc0:	1b9b      	subs	r3, r3, r6
  403fc2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  403fc6:	e78e      	b.n	403ee6 <__udivmoddi4+0x10e>
  403fc8:	f1c1 0e20 	rsb	lr, r1, #32
  403fcc:	fa22 f40e 	lsr.w	r4, r2, lr
  403fd0:	408b      	lsls	r3, r1
  403fd2:	4323      	orrs	r3, r4
  403fd4:	fa20 f70e 	lsr.w	r7, r0, lr
  403fd8:	fa06 f401 	lsl.w	r4, r6, r1
  403fdc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403fe0:	fa26 f60e 	lsr.w	r6, r6, lr
  403fe4:	433c      	orrs	r4, r7
  403fe6:	fbb6 f9fc 	udiv	r9, r6, ip
  403fea:	0c27      	lsrs	r7, r4, #16
  403fec:	fb0c 6619 	mls	r6, ip, r9, r6
  403ff0:	fa1f f883 	uxth.w	r8, r3
  403ff4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  403ff8:	fb09 f708 	mul.w	r7, r9, r8
  403ffc:	42b7      	cmp	r7, r6
  403ffe:	fa02 f201 	lsl.w	r2, r2, r1
  404002:	fa00 fa01 	lsl.w	sl, r0, r1
  404006:	d908      	bls.n	40401a <__udivmoddi4+0x242>
  404008:	18f6      	adds	r6, r6, r3
  40400a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
  40400e:	d241      	bcs.n	404094 <__udivmoddi4+0x2bc>
  404010:	42b7      	cmp	r7, r6
  404012:	d93f      	bls.n	404094 <__udivmoddi4+0x2bc>
  404014:	f1a9 0902 	sub.w	r9, r9, #2
  404018:	441e      	add	r6, r3
  40401a:	1bf6      	subs	r6, r6, r7
  40401c:	b2a0      	uxth	r0, r4
  40401e:	fbb6 f4fc 	udiv	r4, r6, ip
  404022:	fb0c 6614 	mls	r6, ip, r4, r6
  404026:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  40402a:	fb04 f808 	mul.w	r8, r4, r8
  40402e:	45b8      	cmp	r8, r7
  404030:	d907      	bls.n	404042 <__udivmoddi4+0x26a>
  404032:	18ff      	adds	r7, r7, r3
  404034:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
  404038:	d228      	bcs.n	40408c <__udivmoddi4+0x2b4>
  40403a:	45b8      	cmp	r8, r7
  40403c:	d926      	bls.n	40408c <__udivmoddi4+0x2b4>
  40403e:	3c02      	subs	r4, #2
  404040:	441f      	add	r7, r3
  404042:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  404046:	ebc8 0707 	rsb	r7, r8, r7
  40404a:	fba0 8902 	umull	r8, r9, r0, r2
  40404e:	454f      	cmp	r7, r9
  404050:	4644      	mov	r4, r8
  404052:	464e      	mov	r6, r9
  404054:	d314      	bcc.n	404080 <__udivmoddi4+0x2a8>
  404056:	d029      	beq.n	4040ac <__udivmoddi4+0x2d4>
  404058:	b365      	cbz	r5, 4040b4 <__udivmoddi4+0x2dc>
  40405a:	ebba 0304 	subs.w	r3, sl, r4
  40405e:	eb67 0706 	sbc.w	r7, r7, r6
  404062:	fa07 fe0e 	lsl.w	lr, r7, lr
  404066:	40cb      	lsrs	r3, r1
  404068:	40cf      	lsrs	r7, r1
  40406a:	ea4e 0303 	orr.w	r3, lr, r3
  40406e:	e885 0088 	stmia.w	r5, {r3, r7}
  404072:	2100      	movs	r1, #0
  404074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404078:	4613      	mov	r3, r2
  40407a:	e6f8      	b.n	403e6e <__udivmoddi4+0x96>
  40407c:	4610      	mov	r0, r2
  40407e:	e6e0      	b.n	403e42 <__udivmoddi4+0x6a>
  404080:	ebb8 0402 	subs.w	r4, r8, r2
  404084:	eb69 0603 	sbc.w	r6, r9, r3
  404088:	3801      	subs	r0, #1
  40408a:	e7e5      	b.n	404058 <__udivmoddi4+0x280>
  40408c:	4604      	mov	r4, r0
  40408e:	e7d8      	b.n	404042 <__udivmoddi4+0x26a>
  404090:	4611      	mov	r1, r2
  404092:	e795      	b.n	403fc0 <__udivmoddi4+0x1e8>
  404094:	4681      	mov	r9, r0
  404096:	e7c0      	b.n	40401a <__udivmoddi4+0x242>
  404098:	468a      	mov	sl, r1
  40409a:	e77c      	b.n	403f96 <__udivmoddi4+0x1be>
  40409c:	3b02      	subs	r3, #2
  40409e:	443c      	add	r4, r7
  4040a0:	e748      	b.n	403f34 <__udivmoddi4+0x15c>
  4040a2:	4608      	mov	r0, r1
  4040a4:	e70a      	b.n	403ebc <__udivmoddi4+0xe4>
  4040a6:	3802      	subs	r0, #2
  4040a8:	443e      	add	r6, r7
  4040aa:	e72f      	b.n	403f0c <__udivmoddi4+0x134>
  4040ac:	45c2      	cmp	sl, r8
  4040ae:	d3e7      	bcc.n	404080 <__udivmoddi4+0x2a8>
  4040b0:	463e      	mov	r6, r7
  4040b2:	e7d1      	b.n	404058 <__udivmoddi4+0x280>
  4040b4:	4629      	mov	r1, r5
  4040b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4040ba:	bf00      	nop

004040bc <__aeabi_idiv0>:
  4040bc:	4770      	bx	lr
  4040be:	bf00      	nop
  4040c0:	346d6173 	.word	0x346d6173
  4040c4:	63323364 	.word	0x63323364
  4040c8:	756d6920 	.word	0x756d6920
  4040cc:	6d656420 	.word	0x6d656420
  4040d0:	2e2e2e6f 	.word	0x2e2e2e6f
  4040d4:	00000a0d 	.word	0x00000a0d
  4040d8:	5f697774 	.word	0x5f697774
  4040dc:	7473616d 	.word	0x7473616d
  4040e0:	695f7265 	.word	0x695f7265
  4040e4:	3a74696e 	.word	0x3a74696e
  4040e8:	69616620 	.word	0x69616620
  4040ec:	0d64656c 	.word	0x0d64656c
  4040f0:	0000000a 	.word	0x0000000a
  4040f4:	5f697774 	.word	0x5f697774
  4040f8:	7473616d 	.word	0x7473616d
  4040fc:	695f7265 	.word	0x695f7265
  404100:	3a74696e 	.word	0x3a74696e
  404104:	63757320 	.word	0x63757320
  404108:	73736563 	.word	0x73736563
  40410c:	00000a0d 	.word	0x00000a0d
  404110:	5f697774 	.word	0x5f697774
  404114:	626f7270 	.word	0x626f7270
  404118:	66203a65 	.word	0x66203a65
  40411c:	656c6961 	.word	0x656c6961
  404120:	000a0d64 	.word	0x000a0d64
  404124:	5f697774 	.word	0x5f697774
  404128:	626f7270 	.word	0x626f7270
  40412c:	73203a65 	.word	0x73203a65
  404130:	65636375 	.word	0x65636375
  404134:	0a0d7373 	.word	0x0a0d7373
  404138:	00000000 	.word	0x00000000
  40413c:	5f697774 	.word	0x5f697774
  404140:	7473616d 	.word	0x7473616d
  404144:	725f7265 	.word	0x725f7265
  404148:	20646165 	.word	0x20646165
  40414c:	74617473 	.word	0x74617473
  404150:	203a7375 	.word	0x203a7375
  404154:	0a0d6425 	.word	0x0a0d6425
  404158:	00000000 	.word	0x00000000
  40415c:	5f697774 	.word	0x5f697774
  404160:	7473616d 	.word	0x7473616d
  404164:	725f7265 	.word	0x725f7265
  404168:	20646165 	.word	0x20646165
  40416c:	66667562 	.word	0x66667562
  404170:	203a7265 	.word	0x203a7265
  404174:	31257830 	.word	0x31257830
  404178:	000a0d78 	.word	0x000a0d78
  40417c:	5f6f6877 	.word	0x5f6f6877
  404180:	695f6d61 	.word	0x695f6d61
  404184:	7573203a 	.word	0x7573203a
  404188:	73656363 	.word	0x73656363
  40418c:	000a0d73 	.word	0x000a0d73
  404190:	5f697774 	.word	0x5f697774
  404194:	7473616d 	.word	0x7473616d
  404198:	775f7265 	.word	0x775f7265
  40419c:	65746972 	.word	0x65746972
  4041a0:	61747320 	.word	0x61747320
  4041a4:	3a737574 	.word	0x3a737574
  4041a8:	0d642520 	.word	0x0d642520
  4041ac:	0000000a 	.word	0x0000000a
  4041b0:	5f756d69 	.word	0x5f756d69
  4041b4:	5f746573 	.word	0x5f746573
  4041b8:	636f6c63 	.word	0x636f6c63
  4041bc:	6f735f6b 	.word	0x6f735f6b
  4041c0:	65637275 	.word	0x65637275
  4041c4:	7573203a 	.word	0x7573203a
  4041c8:	73656363 	.word	0x73656363
  4041cc:	000a0d73 	.word	0x000a0d73

004041d0 <_global_impure_ptr>:
  4041d0:	20000010                                ... 

004041d4 <zeroes.7250>:
  4041d4:	30303030 30303030 30303030 30303030     0000000000000000
  4041e4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4041f4:	00000000 33323130 37363534 62613938     ....0123456789ab
  404204:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00404214 <blanks.7249>:
  404214:	20202020 20202020 20202020 20202020                     
  404224:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00404234 <_ctype_>:
  404234:	20202000 20202020 28282020 20282828     .         ((((( 
  404244:	20202020 20202020 20202020 20202020                     
  404254:	10108820 10101010 10101010 10101010      ...............
  404264:	04040410 04040404 10040404 10101010     ................
  404274:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404284:	01010101 01010101 01010101 10101010     ................
  404294:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4042a4:	02020202 02020202 02020202 10101010     ................
  4042b4:	00000020 00000000 00000000 00000000      ...............
	...

00404338 <_init>:
  404338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40433a:	bf00      	nop
  40433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40433e:	bc08      	pop	{r3}
  404340:	469e      	mov	lr, r3
  404342:	4770      	bx	lr

00404344 <__init_array_start>:
  404344:	00402345 	.word	0x00402345

00404348 <__frame_dummy_init_array_entry>:
  404348:	004000f1                                ..@.

0040434c <_fini>:
  40434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40434e:	bf00      	nop
  404350:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404352:	bc08      	pop	{r3}
  404354:	469e      	mov	lr, r3
  404356:	4770      	bx	lr

00404358 <__portable_delay_cycles_veneer>:
  404358:	f85f f000 	ldr.w	pc, [pc]	; 40435c <__portable_delay_cycles_veneer+0x4>
  40435c:	20000001 	.word	0x20000001

00404360 <__fini_array_start>:
  404360:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <_impure_ptr>:
20000438:	0010 2000                                   ... 

2000043c <__global_locale>:
2000043c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000051c:	3b71 0040 3315 0040 0000 0000 4234 0040     q;@..3@.....4B@.
2000052c:	4230 0040 4158 0040 4158 0040 4158 0040     0B@.XA@.XA@.XA@.
2000053c:	4158 0040 4158 0040 4158 0040 4158 0040     XA@.XA@.XA@.XA@.
2000054c:	4158 0040 4158 0040 ffff ffff ffff ffff     XA@.XA@.........
2000055c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000584:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

200005a8 <__malloc_av_>:
	...
200005b0:	05a8 2000 05a8 2000 05b0 2000 05b0 2000     ... ... ... ... 
200005c0:	05b8 2000 05b8 2000 05c0 2000 05c0 2000     ... ... ... ... 
200005d0:	05c8 2000 05c8 2000 05d0 2000 05d0 2000     ... ... ... ... 
200005e0:	05d8 2000 05d8 2000 05e0 2000 05e0 2000     ... ... ... ... 
200005f0:	05e8 2000 05e8 2000 05f0 2000 05f0 2000     ... ... ... ... 
20000600:	05f8 2000 05f8 2000 0600 2000 0600 2000     ... ... ... ... 
20000610:	0608 2000 0608 2000 0610 2000 0610 2000     ... ... ... ... 
20000620:	0618 2000 0618 2000 0620 2000 0620 2000     ... ...  ..  .. 
20000630:	0628 2000 0628 2000 0630 2000 0630 2000     (.. (.. 0.. 0.. 
20000640:	0638 2000 0638 2000 0640 2000 0640 2000     8.. 8.. @.. @.. 
20000650:	0648 2000 0648 2000 0650 2000 0650 2000     H.. H.. P.. P.. 
20000660:	0658 2000 0658 2000 0660 2000 0660 2000     X.. X.. `.. `.. 
20000670:	0668 2000 0668 2000 0670 2000 0670 2000     h.. h.. p.. p.. 
20000680:	0678 2000 0678 2000 0680 2000 0680 2000     x.. x.. ... ... 
20000690:	0688 2000 0688 2000 0690 2000 0690 2000     ... ... ... ... 
200006a0:	0698 2000 0698 2000 06a0 2000 06a0 2000     ... ... ... ... 
200006b0:	06a8 2000 06a8 2000 06b0 2000 06b0 2000     ... ... ... ... 
200006c0:	06b8 2000 06b8 2000 06c0 2000 06c0 2000     ... ... ... ... 
200006d0:	06c8 2000 06c8 2000 06d0 2000 06d0 2000     ... ... ... ... 
200006e0:	06d8 2000 06d8 2000 06e0 2000 06e0 2000     ... ... ... ... 
200006f0:	06e8 2000 06e8 2000 06f0 2000 06f0 2000     ... ... ... ... 
20000700:	06f8 2000 06f8 2000 0700 2000 0700 2000     ... ... ... ... 
20000710:	0708 2000 0708 2000 0710 2000 0710 2000     ... ... ... ... 
20000720:	0718 2000 0718 2000 0720 2000 0720 2000     ... ...  ..  .. 
20000730:	0728 2000 0728 2000 0730 2000 0730 2000     (.. (.. 0.. 0.. 
20000740:	0738 2000 0738 2000 0740 2000 0740 2000     8.. 8.. @.. @.. 
20000750:	0748 2000 0748 2000 0750 2000 0750 2000     H.. H.. P.. P.. 
20000760:	0758 2000 0758 2000 0760 2000 0760 2000     X.. X.. `.. `.. 
20000770:	0768 2000 0768 2000 0770 2000 0770 2000     h.. h.. p.. p.. 
20000780:	0778 2000 0778 2000 0780 2000 0780 2000     x.. x.. ... ... 
20000790:	0788 2000 0788 2000 0790 2000 0790 2000     ... ... ... ... 
200007a0:	0798 2000 0798 2000 07a0 2000 07a0 2000     ... ... ... ... 
200007b0:	07a8 2000 07a8 2000 07b0 2000 07b0 2000     ... ... ... ... 
200007c0:	07b8 2000 07b8 2000 07c0 2000 07c0 2000     ... ... ... ... 
200007d0:	07c8 2000 07c8 2000 07d0 2000 07d0 2000     ... ... ... ... 
200007e0:	07d8 2000 07d8 2000 07e0 2000 07e0 2000     ... ... ... ... 
200007f0:	07e8 2000 07e8 2000 07f0 2000 07f0 2000     ... ... ... ... 
20000800:	07f8 2000 07f8 2000 0800 2000 0800 2000     ... ... ... ... 
20000810:	0808 2000 0808 2000 0810 2000 0810 2000     ... ... ... ... 
20000820:	0818 2000 0818 2000 0820 2000 0820 2000     ... ...  ..  .. 
20000830:	0828 2000 0828 2000 0830 2000 0830 2000     (.. (.. 0.. 0.. 
20000840:	0838 2000 0838 2000 0840 2000 0840 2000     8.. 8.. @.. @.. 
20000850:	0848 2000 0848 2000 0850 2000 0850 2000     H.. H.. P.. P.. 
20000860:	0858 2000 0858 2000 0860 2000 0860 2000     X.. X.. `.. `.. 
20000870:	0868 2000 0868 2000 0870 2000 0870 2000     h.. h.. p.. p.. 
20000880:	0878 2000 0878 2000 0880 2000 0880 2000     x.. x.. ... ... 
20000890:	0888 2000 0888 2000 0890 2000 0890 2000     ... ... ... ... 
200008a0:	0898 2000 0898 2000 08a0 2000 08a0 2000     ... ... ... ... 
200008b0:	08a8 2000 08a8 2000 08b0 2000 08b0 2000     ... ... ... ... 
200008c0:	08b8 2000 08b8 2000 08c0 2000 08c0 2000     ... ... ... ... 
200008d0:	08c8 2000 08c8 2000 08d0 2000 08d0 2000     ... ... ... ... 
200008e0:	08d8 2000 08d8 2000 08e0 2000 08e0 2000     ... ... ... ... 
200008f0:	08e8 2000 08e8 2000 08f0 2000 08f0 2000     ... ... ... ... 
20000900:	08f8 2000 08f8 2000 0900 2000 0900 2000     ... ... ... ... 
20000910:	0908 2000 0908 2000 0910 2000 0910 2000     ... ... ... ... 
20000920:	0918 2000 0918 2000 0920 2000 0920 2000     ... ...  ..  .. 
20000930:	0928 2000 0928 2000 0930 2000 0930 2000     (.. (.. 0.. 0.. 
20000940:	0938 2000 0938 2000 0940 2000 0940 2000     8.. 8.. @.. @.. 
20000950:	0948 2000 0948 2000 0950 2000 0950 2000     H.. H.. P.. P.. 
20000960:	0958 2000 0958 2000 0960 2000 0960 2000     X.. X.. `.. `.. 
20000970:	0968 2000 0968 2000 0970 2000 0970 2000     h.. h.. p.. p.. 
20000980:	0978 2000 0978 2000 0980 2000 0980 2000     x.. x.. ... ... 
20000990:	0988 2000 0988 2000 0990 2000 0990 2000     ... ... ... ... 
200009a0:	0998 2000 0998 2000 09a0 2000 09a0 2000     ... ... ... ... 

200009b0 <__malloc_trim_threshold>:
200009b0:	0000 0002                                   ....

200009b4 <__malloc_sbrk_base>:
200009b4:	ffff ffff                                   ....
