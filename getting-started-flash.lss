
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ed4  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e0  20000000  00404ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002d8  200001e0  004050b4  000201e0  2**2
                  ALLOC
  3 .stack        00003000  200004b8  0040538c  000201e0  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011da6  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fa5  00000000  00000000  0003201e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005a17  00000000  00000000  00034fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000de8  00000000  00000000  0003a9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c88  00000000  00000000  0003b7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016e36  00000000  00000000  0003c44a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010f7e  00000000  00000000  00053280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00055402  00000000  00000000  000641fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c88  00000000  00000000  000b9600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034b8 	.word	0x200034b8
  400004:	00401489 	.word	0x00401489
  400008:	00401485 	.word	0x00401485
  40000c:	00401485 	.word	0x00401485
  400010:	00401485 	.word	0x00401485
  400014:	00401485 	.word	0x00401485
  400018:	00401485 	.word	0x00401485
	...
  40002c:	00401485 	.word	0x00401485
  400030:	00401485 	.word	0x00401485
  400034:	00000000 	.word	0x00000000
  400038:	00401485 	.word	0x00401485
  40003c:	00400469 	.word	0x00400469
  400040:	00401485 	.word	0x00401485
  400044:	00401485 	.word	0x00401485
  400048:	00401485 	.word	0x00401485
  40004c:	00401485 	.word	0x00401485
  400050:	00401485 	.word	0x00401485
  400054:	00401485 	.word	0x00401485
  400058:	00401485 	.word	0x00401485
  40005c:	00401485 	.word	0x00401485
  400060:	00401485 	.word	0x00401485
  400064:	00401485 	.word	0x00401485
  400068:	00000000 	.word	0x00000000
  40006c:	004010cd 	.word	0x004010cd
  400070:	004010dd 	.word	0x004010dd
  400074:	004010ed 	.word	0x004010ed
  400078:	00401485 	.word	0x00401485
  40007c:	00401485 	.word	0x00401485
	...
  400088:	00401485 	.word	0x00401485
  40008c:	00401485 	.word	0x00401485
  400090:	00401485 	.word	0x00401485
  400094:	00401485 	.word	0x00401485
  400098:	00401485 	.word	0x00401485
  40009c:	00401485 	.word	0x00401485
  4000a0:	00401485 	.word	0x00401485
  4000a4:	00401485 	.word	0x00401485
  4000a8:	00401485 	.word	0x00401485
  4000ac:	00401485 	.word	0x00401485
  4000b0:	00401485 	.word	0x00401485
  4000b4:	00401485 	.word	0x00401485
  4000b8:	00401485 	.word	0x00401485
  4000bc:	00401485 	.word	0x00401485
  4000c0:	00401485 	.word	0x00401485
  4000c4:	00401485 	.word	0x00401485
  4000c8:	00401485 	.word	0x00401485

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e0 	.word	0x200001e0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404ed4 	.word	0x00404ed4

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001e4 	.word	0x200001e4
  40011c:	00404ed4 	.word	0x00404ed4
  400120:	00404ed4 	.word	0x00404ed4
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 fa8a 	bl	401644 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 f816 	bl	401164 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 f83e 	bl	4011b8 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 f842 	bl	4011c8 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 f845 	bl	4011d8 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f000 ffd2 	bl	4010fc <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f001 f9ea 	bl	401530 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f001 fa71 	bl	401644 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	200002ac 	.word	0x200002ac
  4001a8:	200002a4 	.word	0x200002a4

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200002a8 	.word	0x200002a8
  4001f8:	200002ac 	.word	0x200002ac

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 f83a 	bl	40128c <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 f82f 	bl	40128c <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 f838 	bl	4012b4 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 f82b 	bl	4012b4 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f000 fff6 	bl	40127c <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f000 ffea 	bl	40127c <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f000 fff0 	bl	4012a0 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f000 ffe4 	bl	4012a0 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <handle_console>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

void handle_console(uint8_t cmd)
{
  4002f4:	b510      	push	{r4, lr}
  4002f6:	b092      	sub	sp, #72	; 0x48
    switch(cmd) {
  4002f8:	3802      	subs	r0, #2
  4002fa:	2804      	cmp	r0, #4
  4002fc:	d83f      	bhi.n	40037e <handle_console+0x8a>
  4002fe:	e8df f000 	tbb	[pc, r0]
  400302:	0f1b      	.short	0x0f1b
  400304:	3303      	.short	0x3303
  400306:	27          	.byte	0x27
  400307:	00          	.byte	0x00
        case CS_PWMMAX:
        //servo_max();
        motor_max(motors[0]);
  400308:	4c1e      	ldr	r4, [pc, #120]	; (400384 <handle_console+0x90>)
  40030a:	2244      	movs	r2, #68	; 0x44
  40030c:	f104 0110 	add.w	r1, r4, #16
  400310:	4668      	mov	r0, sp
  400312:	f001 fa2f 	bl	401774 <memcpy>
  400316:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  40031a:	f000 fb2b 	bl	400974 <motor_max>
        break;
  40031e:	e02e      	b.n	40037e <handle_console+0x8a>
        case CS_PWMMID:
        //servo_mid();
        motor_mid(motors[0]);
  400320:	4c18      	ldr	r4, [pc, #96]	; (400384 <handle_console+0x90>)
  400322:	2244      	movs	r2, #68	; 0x44
  400324:	f104 0110 	add.w	r1, r4, #16
  400328:	4668      	mov	r0, sp
  40032a:	f001 fa23 	bl	401774 <memcpy>
  40032e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  400332:	f000 fb03 	bl	40093c <motor_mid>
        break;
  400336:	e022      	b.n	40037e <handle_console+0x8a>
        case CS_PWMMIN:
        //servo_min();
        motor_min(motors[0]);
  400338:	4c12      	ldr	r4, [pc, #72]	; (400384 <handle_console+0x90>)
  40033a:	2244      	movs	r2, #68	; 0x44
  40033c:	f104 0110 	add.w	r1, r4, #16
  400340:	4668      	mov	r0, sp
  400342:	f001 fa17 	bl	401774 <memcpy>
  400346:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  40034a:	f000 fadb 	bl	400904 <motor_min>
        break;
  40034e:	e016      	b.n	40037e <handle_console+0x8a>
        case CS_PWMSTEPDEC:
        //servo_decrement();
        motor_decrement(motors[0]);
  400350:	4c0c      	ldr	r4, [pc, #48]	; (400384 <handle_console+0x90>)
  400352:	2244      	movs	r2, #68	; 0x44
  400354:	f104 0110 	add.w	r1, r4, #16
  400358:	4668      	mov	r0, sp
  40035a:	f001 fa0b 	bl	401774 <memcpy>
  40035e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  400362:	f000 fb43 	bl	4009ec <motor_decrement>
        break;
  400366:	e00a      	b.n	40037e <handle_console+0x8a>
        case CS_PWMSTEPINC:
        //servo_increment();
        motor_increment(motors[0]);
  400368:	4c06      	ldr	r4, [pc, #24]	; (400384 <handle_console+0x90>)
  40036a:	2244      	movs	r2, #68	; 0x44
  40036c:	f104 0110 	add.w	r1, r4, #16
  400370:	4668      	mov	r0, sp
  400372:	f001 f9ff 	bl	401774 <memcpy>
  400376:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  40037a:	f000 fb17 	bl	4009ac <motor_increment>
        break;               
    }
}
  40037e:	b012      	add	sp, #72	; 0x48
  400380:	bd10      	pop	{r4, pc}
  400382:	bf00      	nop
  400384:	200002dc 	.word	0x200002dc

00400388 <main>:

int main(void)
{
  400388:	b570      	push	{r4, r5, r6, lr}
  40038a:	b084      	sub	sp, #16
    sysclk_init();
  40038c:	f7ff fecc 	bl	400128 <sysclk_init>
    board_init();
  400390:	f000 fb4e 	bl	400a30 <board_init>

    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400394:	2013      	movs	r0, #19
  400396:	f000 ff27 	bl	4011e8 <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  40039a:	201f      	movs	r0, #31
  40039c:	f000 ff24 	bl	4011e8 <pmc_enable_periph_clk>
    cph_millis_init();
  4003a0:	f000 f86a 	bl	400478 <cph_millis_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003a4:	2009      	movs	r0, #9
  4003a6:	f000 ff1f 	bl	4011e8 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4003aa:	4c22      	ldr	r4, [pc, #136]	; (400434 <main+0xac>)
  4003ac:	4b22      	ldr	r3, [pc, #136]	; (400438 <main+0xb0>)
  4003ae:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4003b0:	4a22      	ldr	r2, [pc, #136]	; (40043c <main+0xb4>)
  4003b2:	4b23      	ldr	r3, [pc, #140]	; (400440 <main+0xb8>)
  4003b4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4003b6:	4a23      	ldr	r2, [pc, #140]	; (400444 <main+0xbc>)
  4003b8:	4b23      	ldr	r3, [pc, #140]	; (400448 <main+0xc0>)
  4003ba:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4003bc:	4b23      	ldr	r3, [pc, #140]	; (40044c <main+0xc4>)
  4003be:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  4003c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4003c4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  4003c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ca:	9303      	str	r3, [sp, #12]
  4003cc:	2009      	movs	r0, #9
  4003ce:	f000 ff0b 	bl	4011e8 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4003d2:	a901      	add	r1, sp, #4
  4003d4:	4620      	mov	r0, r4
  4003d6:	f000 ff35 	bl	401244 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4003da:	4c1d      	ldr	r4, [pc, #116]	; (400450 <main+0xc8>)
  4003dc:	6823      	ldr	r3, [r4, #0]
  4003de:	2100      	movs	r1, #0
  4003e0:	6898      	ldr	r0, [r3, #8]
  4003e2:	f001 fec3 	bl	40216c <setbuf>
	setbuf(stdin, NULL);
  4003e6:	6823      	ldr	r3, [r4, #0]
  4003e8:	2100      	movs	r1, #0
  4003ea:	6858      	ldr	r0, [r3, #4]
  4003ec:	f001 febe 	bl	40216c <setbuf>
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  4003f0:	4818      	ldr	r0, [pc, #96]	; (400454 <main+0xcc>)
  4003f2:	f001 feb3 	bl	40215c <puts>
  4003f6:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        printf(".");
  4003f8:	4e17      	ldr	r6, [pc, #92]	; (400458 <main+0xd0>)
        delay_ms(250);
  4003fa:	4d18      	ldr	r5, [pc, #96]	; (40045c <main+0xd4>)
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        printf(".");
  4003fc:	4630      	mov	r0, r6
  4003fe:	f001 fe3b 	bl	402078 <iprintf>
        delay_ms(250);
  400402:	4628      	mov	r0, r5
  400404:	f004 fd60 	bl	404ec8 <__portable_delay_cycles_veneer>
    cph_millis_init();
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  400408:	3c01      	subs	r4, #1
  40040a:	d1f7      	bne.n	4003fc <main+0x74>
        printf(".");
        delay_ms(250);
    }
    printf("\r\n");
  40040c:	4814      	ldr	r0, [pc, #80]	; (400460 <main+0xd8>)
  40040e:	f001 fe33 	bl	402078 <iprintf>

    
    if (imu_init()) {
  400412:	f000 f9b7 	bl	400784 <imu_init>
  400416:	b150      	cbz	r0, 40042e <main+0xa6>

        // servo_init();
        motor_init();
  400418:	f000 f9f4 	bl	400804 <motor_init>

        while (true) {
            uint8_t command = cph_console_tick();
            handle_console(command);
            delay_ms(100);
  40041c:	4c11      	ldr	r4, [pc, #68]	; (400464 <main+0xdc>)

        // servo_init();
        motor_init();

        while (true) {
            uint8_t command = cph_console_tick();
  40041e:	f000 f83d 	bl	40049c <cph_console_tick>
            handle_console(command);
  400422:	f7ff ff67 	bl	4002f4 <handle_console>
            delay_ms(100);
  400426:	4620      	mov	r0, r4
  400428:	f004 fd4e 	bl	404ec8 <__portable_delay_cycles_veneer>
  40042c:	e7f7      	b.n	40041e <main+0x96>
    //         delay_ms(500); 
    //     }


    // }
}
  40042e:	2000      	movs	r0, #0
  400430:	b004      	add	sp, #16
  400432:	bd70      	pop	{r4, r5, r6, pc}
  400434:	400e0800 	.word	0x400e0800
  400438:	200002ac 	.word	0x200002ac
  40043c:	0040027d 	.word	0x0040027d
  400440:	200002a8 	.word	0x200002a8
  400444:	004001fd 	.word	0x004001fd
  400448:	200002a4 	.word	0x200002a4
  40044c:	07270e00 	.word	0x07270e00
  400450:	20000070 	.word	0x20000070
  400454:	004049d4 	.word	0x004049d4
  400458:	004049f0 	.word	0x004049f0
  40045c:	0020b28a 	.word	0x0020b28a
  400460:	004049ec 	.word	0x004049ec
  400464:	000d1437 	.word	0x000d1437

00400468 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  400468:	4a02      	ldr	r2, [pc, #8]	; (400474 <SysTick_Handler+0xc>)
  40046a:	6813      	ldr	r3, [r2, #0]
  40046c:	3301      	adds	r3, #1
  40046e:	6013      	str	r3, [r2, #0]
  400470:	4770      	bx	lr
  400472:	bf00      	nop
  400474:	200001fc 	.word	0x200001fc

00400478 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400478:	4b05      	ldr	r3, [pc, #20]	; (400490 <cph_millis_init+0x18>)
  40047a:	4a06      	ldr	r2, [pc, #24]	; (400494 <cph_millis_init+0x1c>)
  40047c:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40047e:	21f0      	movs	r1, #240	; 0xf0
  400480:	4a05      	ldr	r2, [pc, #20]	; (400498 <cph_millis_init+0x20>)
  400482:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400486:	2200      	movs	r2, #0
  400488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40048a:	2207      	movs	r2, #7
  40048c:	601a      	str	r2, [r3, #0]
  40048e:	4770      	bx	lr
  400490:	e000e010 	.word	0xe000e010
  400494:	0001d4bf 	.word	0x0001d4bf
  400498:	e000ed00 	.word	0xe000ed00

0040049c <cph_console_tick>:

uint8_t uc_char;
uint8_t uc_flag;

uint8_t cph_console_tick(void)
{
  40049c:	b508      	push	{r3, lr}
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
  40049e:	4910      	ldr	r1, [pc, #64]	; (4004e0 <cph_console_tick+0x44>)
  4004a0:	4810      	ldr	r0, [pc, #64]	; (4004e4 <cph_console_tick+0x48>)
  4004a2:	f000 fef3 	bl	40128c <uart_read>
  4004a6:	b2c0      	uxtb	r0, r0
  4004a8:	4b0f      	ldr	r3, [pc, #60]	; (4004e8 <cph_console_tick+0x4c>)
  4004aa:	7018      	strb	r0, [r3, #0]
    if (!uc_flag) {
  4004ac:	b9a0      	cbnz	r0, 4004d8 <cph_console_tick+0x3c>
        switch (uc_char) {
  4004ae:	4b0c      	ldr	r3, [pc, #48]	; (4004e0 <cph_console_tick+0x44>)
  4004b0:	781b      	ldrb	r3, [r3, #0]
  4004b2:	2b68      	cmp	r3, #104	; 0x68
  4004b4:	d00c      	beq.n	4004d0 <cph_console_tick+0x34>
  4004b6:	d805      	bhi.n	4004c4 <cph_console_tick+0x28>
  4004b8:	2b2b      	cmp	r3, #43	; 0x2b
  4004ba:	d00b      	beq.n	4004d4 <cph_console_tick+0x38>
            case 'm':
            return CS_PWMMID;
            case 'h':
            return CS_PWMMAX;
            case '-':
            return CS_PWMSTEPDEC;
  4004bc:	2b2d      	cmp	r3, #45	; 0x2d
  4004be:	bf08      	it	eq
  4004c0:	2006      	moveq	r0, #6
  4004c2:	bd08      	pop	{r3, pc}

uint8_t cph_console_tick(void)
{
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
    if (!uc_flag) {
        switch (uc_char) {
  4004c4:	2b6c      	cmp	r3, #108	; 0x6c
  4004c6:	d009      	beq.n	4004dc <cph_console_tick+0x40>
            case 'l':
            return CS_PWMMIN;
            case 'm':
            return CS_PWMMID;
  4004c8:	2b6d      	cmp	r3, #109	; 0x6d
  4004ca:	bf08      	it	eq
  4004cc:	2003      	moveq	r0, #3
  4004ce:	bd08      	pop	{r3, pc}
            case 'h':
            return CS_PWMMAX;
  4004d0:	2004      	movs	r0, #4
  4004d2:	bd08      	pop	{r3, pc}
            case '-':
            return CS_PWMSTEPDEC;
            case '+':
            return CS_PWMSTEPINC;
  4004d4:	2005      	movs	r0, #5
  4004d6:	bd08      	pop	{r3, pc}
            default:
            return CS_NOINPUT;              
        }
    } else {
        return CS_NOINPUT;
  4004d8:	2000      	movs	r0, #0
  4004da:	bd08      	pop	{r3, pc}
{
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
    if (!uc_flag) {
        switch (uc_char) {
            case 'l':
            return CS_PWMMIN;
  4004dc:	2002      	movs	r0, #2
            return CS_NOINPUT;              
        }
    } else {
        return CS_NOINPUT;
    }
  4004de:	bd08      	pop	{r3, pc}
  4004e0:	2000047d 	.word	0x2000047d
  4004e4:	400e0800 	.word	0x400e0800
  4004e8:	2000047c 	.word	0x2000047c

004004ec <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  4004ec:	b500      	push	{lr}
  4004ee:	b089      	sub	sp, #36	; 0x24
  4004f0:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  4004f4:	2368      	movs	r3, #104	; 0x68
  4004f6:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  4004fa:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  4004fe:	2301      	movs	r3, #1
  400500:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  400502:	f10d 0207 	add.w	r2, sp, #7
  400506:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  400508:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  40050a:	a903      	add	r1, sp, #12
  40050c:	4806      	ldr	r0, [pc, #24]	; (400528 <write_register8+0x3c>)
  40050e:	f000 fbe9 	bl	400ce4 <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  400512:	b910      	cbnz	r0, 40051a <write_register8+0x2e>
        puts("write_register: success\r\n");
  400514:	4805      	ldr	r0, [pc, #20]	; (40052c <write_register8+0x40>)
  400516:	f001 fe21 	bl	40215c <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  40051a:	4805      	ldr	r0, [pc, #20]	; (400530 <write_register8+0x44>)
  40051c:	f004 fcd4 	bl	404ec8 <__portable_delay_cycles_veneer>
}
  400520:	b009      	add	sp, #36	; 0x24
  400522:	f85d fb04 	ldr.w	pc, [sp], #4
  400526:	bf00      	nop
  400528:	40018000 	.word	0x40018000
  40052c:	004049f4 	.word	0x004049f4
  400530:	00014ed3 	.word	0x00014ed3

00400534 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  400534:	b510      	push	{r4, lr}
  400536:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400538:	4b0e      	ldr	r3, [pc, #56]	; (400574 <read_register8+0x40>)
  40053a:	2200      	movs	r2, #0
  40053c:	601a      	str	r2, [r3, #0]
  40053e:	605a      	str	r2, [r3, #4]
  400540:	609a      	str	r2, [r3, #8]
  400542:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  400544:	2268      	movs	r2, #104	; 0x68
  400546:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  40054a:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  40054e:	2201      	movs	r2, #1
  400550:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  400552:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  400554:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400556:	a901      	add	r1, sp, #4
  400558:	4807      	ldr	r0, [pc, #28]	; (400578 <read_register8+0x44>)
  40055a:	f000 fb5b 	bl	400c14 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  40055e:	b910      	cbnz	r0, 400566 <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  400560:	4b04      	ldr	r3, [pc, #16]	; (400574 <read_register8+0x40>)
  400562:	781c      	ldrb	r4, [r3, #0]
  400564:	e000      	b.n	400568 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  400566:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400568:	4804      	ldr	r0, [pc, #16]	; (40057c <read_register8+0x48>)
  40056a:	f004 fcad 	bl	404ec8 <__portable_delay_cycles_veneer>

    return value;
}
  40056e:	4620      	mov	r0, r4
  400570:	b006      	add	sp, #24
  400572:	bd10      	pop	{r4, pc}
  400574:	20000200 	.word	0x20000200
  400578:	40018000 	.word	0x40018000
  40057c:	00014ed3 	.word	0x00014ed3

00400580 <write_register_bit>:
    return length;
}


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  400580:	b570      	push	{r4, r5, r6, lr}
  400582:	4604      	mov	r4, r0
  400584:	460d      	mov	r5, r1
  400586:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400588:	f7ff ffd4 	bl	400534 <read_register8>

    if (state) {
  40058c:	b126      	cbz	r6, 400598 <write_register_bit+0x18>
        value |= (1 << pos);
  40058e:	2101      	movs	r1, #1
  400590:	40a9      	lsls	r1, r5
  400592:	4301      	orrs	r1, r0
  400594:	b2c9      	uxtb	r1, r1
  400596:	e004      	b.n	4005a2 <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400598:	2101      	movs	r1, #1
  40059a:	40a9      	lsls	r1, r5
  40059c:	ea20 0101 	bic.w	r1, r0, r1
  4005a0:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  4005a2:	4620      	mov	r0, r4
  4005a4:	f7ff ffa2 	bl	4004ec <write_register8>
  4005a8:	bd70      	pop	{r4, r5, r6, pc}
  4005aa:	bf00      	nop

004005ac <mpu_init>:
    value = read_register8(reg);
    return ((value >> pos) & 1);
}

bool mpu_init(void)
{
  4005ac:	b500      	push	{lr}
  4005ae:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  4005b0:	4b0d      	ldr	r3, [pc, #52]	; (4005e8 <mpu_init+0x3c>)
  4005b2:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  4005b4:	4b0d      	ldr	r3, [pc, #52]	; (4005ec <mpu_init+0x40>)
  4005b6:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  4005b8:	a901      	add	r1, sp, #4
  4005ba:	480d      	ldr	r0, [pc, #52]	; (4005f0 <mpu_init+0x44>)
  4005bc:	f000 fafa 	bl	400bb4 <twi_master_init>
  4005c0:	b138      	cbz	r0, 4005d2 <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  4005c2:	480c      	ldr	r0, [pc, #48]	; (4005f4 <mpu_init+0x48>)
  4005c4:	f001 fdca 	bl	40215c <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005c8:	480b      	ldr	r0, [pc, #44]	; (4005f8 <mpu_init+0x4c>)
  4005ca:	f004 fc7d 	bl	404ec8 <__portable_delay_cycles_veneer>
        return false;
  4005ce:	2000      	movs	r0, #0
  4005d0:	e006      	b.n	4005e0 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  4005d2:	480a      	ldr	r0, [pc, #40]	; (4005fc <mpu_init+0x50>)
  4005d4:	f001 fdc2 	bl	40215c <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005d8:	4807      	ldr	r0, [pc, #28]	; (4005f8 <mpu_init+0x4c>)
  4005da:	f004 fc75 	bl	404ec8 <__portable_delay_cycles_veneer>
        return true;
  4005de:	2001      	movs	r0, #1
    }
    
}
  4005e0:	b005      	add	sp, #20
  4005e2:	f85d fb04 	ldr.w	pc, [sp], #4
  4005e6:	bf00      	nop
  4005e8:	07270e00 	.word	0x07270e00
  4005ec:	00061a80 	.word	0x00061a80
  4005f0:	40018000 	.word	0x40018000
  4005f4:	00404a10 	.word	0x00404a10
  4005f8:	00014ed3 	.word	0x00014ed3
  4005fc:	00404a2c 	.word	0x00404a2c

00400600 <mpu_probe>:

bool mpu_probe(void)
{
  400600:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  400602:	2168      	movs	r1, #104	; 0x68
  400604:	4809      	ldr	r0, [pc, #36]	; (40062c <mpu_probe+0x2c>)
  400606:	f000 fbaf 	bl	400d68 <twi_probe>
  40060a:	b138      	cbz	r0, 40061c <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  40060c:	4808      	ldr	r0, [pc, #32]	; (400630 <mpu_probe+0x30>)
  40060e:	f001 fda5 	bl	40215c <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400612:	4808      	ldr	r0, [pc, #32]	; (400634 <mpu_probe+0x34>)
  400614:	f004 fc58 	bl	404ec8 <__portable_delay_cycles_veneer>
        return false;
  400618:	2000      	movs	r0, #0
  40061a:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  40061c:	4806      	ldr	r0, [pc, #24]	; (400638 <mpu_probe+0x38>)
  40061e:	f001 fd9d 	bl	40215c <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400622:	4804      	ldr	r0, [pc, #16]	; (400634 <mpu_probe+0x34>)
  400624:	f004 fc50 	bl	404ec8 <__portable_delay_cycles_veneer>
        return true;
  400628:	2001      	movs	r0, #1
    }
}
  40062a:	bd08      	pop	{r3, pc}
  40062c:	40018000 	.word	0x40018000
  400630:	00404a48 	.word	0x00404a48
  400634:	00014ed3 	.word	0x00014ed3
  400638:	00404a5c 	.word	0x00404a5c

0040063c <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  40063c:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  40063e:	2075      	movs	r0, #117	; 0x75
  400640:	f7ff ff78 	bl	400534 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400644:	bd08      	pop	{r3, pc}
  400646:	bf00      	nop

00400648 <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400648:	b510      	push	{r4, lr}
  40064a:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  40064c:	206b      	movs	r0, #107	; 0x6b
  40064e:	f7ff ff71 	bl	400534 <read_register8>
    value &= 0b11111000; // mask
  400652:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  400656:	4321      	orrs	r1, r4
  400658:	206b      	movs	r0, #107	; 0x6b
  40065a:	f7ff ff47 	bl	4004ec <write_register8>
  40065e:	bd10      	pop	{r4, pc}

00400660 <mpu_set_gyro_scale>:

    return (uint8_t)value;
}

void mpu_set_gyro_scale(uint8_t scale)
{
  400660:	b510      	push	{r4, lr}
  400662:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400664:	2803      	cmp	r0, #3
  400666:	d812      	bhi.n	40068e <mpu_set_gyro_scale+0x2e>
  400668:	e8df f000 	tbb	[pc, r0]
  40066c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400670:	4a0d      	ldr	r2, [pc, #52]	; (4006a8 <mpu_set_gyro_scale+0x48>)
  400672:	4b0e      	ldr	r3, [pc, #56]	; (4006ac <mpu_set_gyro_scale+0x4c>)
  400674:	601a      	str	r2, [r3, #0]
            break;
  400676:	e00a      	b.n	40068e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400678:	4a0d      	ldr	r2, [pc, #52]	; (4006b0 <mpu_set_gyro_scale+0x50>)
  40067a:	4b0c      	ldr	r3, [pc, #48]	; (4006ac <mpu_set_gyro_scale+0x4c>)
  40067c:	601a      	str	r2, [r3, #0]
            break;
  40067e:	e006      	b.n	40068e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400680:	4a0c      	ldr	r2, [pc, #48]	; (4006b4 <mpu_set_gyro_scale+0x54>)
  400682:	4b0a      	ldr	r3, [pc, #40]	; (4006ac <mpu_set_gyro_scale+0x4c>)
  400684:	601a      	str	r2, [r3, #0]
            break;
  400686:	e002      	b.n	40068e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400688:	4a0b      	ldr	r2, [pc, #44]	; (4006b8 <mpu_set_gyro_scale+0x58>)
  40068a:	4b08      	ldr	r3, [pc, #32]	; (4006ac <mpu_set_gyro_scale+0x4c>)
  40068c:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  40068e:	201b      	movs	r0, #27
  400690:	f7ff ff50 	bl	400534 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400694:	f020 0018 	bic.w	r0, r0, #24
  400698:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  40069c:	b2c9      	uxtb	r1, r1
  40069e:	201b      	movs	r0, #27
  4006a0:	f7ff ff24 	bl	4004ec <write_register8>
  4006a4:	bd10      	pop	{r4, pc}
  4006a6:	bf00      	nop
  4006a8:	3bfa1e3f 	.word	0x3bfa1e3f
  4006ac:	20000214 	.word	0x20000214
  4006b0:	3c7a2270 	.word	0x3c7a2270
  4006b4:	3cf9bfdf 	.word	0x3cf9bfdf
  4006b8:	3d79c0ec 	.word	0x3d79c0ec

004006bc <mpu_set_accel_range>:

    return (uint8_t)value;
}

void mpu_set_accel_range(uint8_t range)
{
  4006bc:	b510      	push	{r4, lr}
  4006be:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  4006c0:	2803      	cmp	r0, #3
  4006c2:	d812      	bhi.n	4006ea <mpu_set_accel_range+0x2e>
  4006c4:	e8df f000 	tbb	[pc, r0]
  4006c8:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  4006cc:	4a0d      	ldr	r2, [pc, #52]	; (400704 <mpu_set_accel_range+0x48>)
  4006ce:	4b0e      	ldr	r3, [pc, #56]	; (400708 <mpu_set_accel_range+0x4c>)
  4006d0:	601a      	str	r2, [r3, #0]
            break;
  4006d2:	e00a      	b.n	4006ea <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  4006d4:	4a0d      	ldr	r2, [pc, #52]	; (40070c <mpu_set_accel_range+0x50>)
  4006d6:	4b0c      	ldr	r3, [pc, #48]	; (400708 <mpu_set_accel_range+0x4c>)
  4006d8:	601a      	str	r2, [r3, #0]
            break;   
  4006da:	e006      	b.n	4006ea <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  4006dc:	4a0c      	ldr	r2, [pc, #48]	; (400710 <mpu_set_accel_range+0x54>)
  4006de:	4b0a      	ldr	r3, [pc, #40]	; (400708 <mpu_set_accel_range+0x4c>)
  4006e0:	601a      	str	r2, [r3, #0]
            break;   
  4006e2:	e002      	b.n	4006ea <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  4006e4:	4a0b      	ldr	r2, [pc, #44]	; (400714 <mpu_set_accel_range+0x58>)
  4006e6:	4b08      	ldr	r3, [pc, #32]	; (400708 <mpu_set_accel_range+0x4c>)
  4006e8:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  4006ea:	201c      	movs	r0, #28
  4006ec:	f7ff ff22 	bl	400534 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  4006f0:	f020 0018 	bic.w	r0, r0, #24
  4006f4:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  4006f8:	b2c9      	uxtb	r1, r1
  4006fa:	201c      	movs	r0, #28
  4006fc:	f7ff fef6 	bl	4004ec <write_register8>
  400700:	bd10      	pop	{r4, pc}
  400702:	bf00      	nop
  400704:	387fda40 	.word	0x387fda40
  400708:	20000210 	.word	0x20000210
  40070c:	38ffda40 	.word	0x38ffda40
  400710:	397fda40 	.word	0x397fda40
  400714:	39fff518 	.word	0x39fff518

00400718 <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400718:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  40071a:	4602      	mov	r2, r0
  40071c:	2106      	movs	r1, #6
  40071e:	206b      	movs	r0, #107	; 0x6b
  400720:	f7ff ff2e 	bl	400580 <write_register_bit>
  400724:	bd08      	pop	{r3, pc}
  400726:	bf00      	nop

00400728 <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400728:	b538      	push	{r3, r4, r5, lr}
  40072a:	4605      	mov	r5, r0
  40072c:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  40072e:	4a11      	ldr	r2, [pc, #68]	; (400774 <mpu_begin+0x4c>)
  400730:	2300      	movs	r3, #0
  400732:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400734:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400736:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400738:	2100      	movs	r1, #0
  40073a:	4a0f      	ldr	r2, [pc, #60]	; (400778 <mpu_begin+0x50>)
  40073c:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  40073e:	4a0f      	ldr	r2, [pc, #60]	; (40077c <mpu_begin+0x54>)
  400740:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400742:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400744:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400746:	4a0e      	ldr	r2, [pc, #56]	; (400780 <mpu_begin+0x58>)
  400748:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  40074a:	f7ff ff77 	bl	40063c <mpu_who_am_i>
  40074e:	2868      	cmp	r0, #104	; 0x68
  400750:	d10d      	bne.n	40076e <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400752:	2001      	movs	r0, #1
  400754:	f7ff ff78 	bl	400648 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400758:	4628      	mov	r0, r5
  40075a:	f7ff ff81 	bl	400660 <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  40075e:	4620      	mov	r0, r4
  400760:	f7ff ffac 	bl	4006bc <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400764:	2000      	movs	r0, #0
  400766:	f7ff ffd7 	bl	400718 <mpu_set_sleep_enabled>

    return true;
  40076a:	2001      	movs	r0, #1
  40076c:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  40076e:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400770:	bd38      	pop	{r3, r4, r5, pc}
  400772:	bf00      	nop
  400774:	20000460 	.word	0x20000460
  400778:	20000218 	.word	0x20000218
  40077c:	2000042c 	.word	0x2000042c
  400780:	2000021c 	.word	0x2000021c

00400784 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  400784:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  400786:	4b0c      	ldr	r3, [pc, #48]	; (4007b8 <imu_init+0x34>)
  400788:	2200      	movs	r2, #0
  40078a:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  40078c:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  40078e:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  400790:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  400792:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  400794:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  400796:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  400798:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  40079a:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  40079c:	f7ff ff06 	bl	4005ac <mpu_init>
  4007a0:	4604      	mov	r4, r0
  4007a2:	f7ff ff2d 	bl	400600 <mpu_probe>
  4007a6:	4020      	ands	r0, r4
  4007a8:	b2c4      	uxtb	r4, r0
  4007aa:	2100      	movs	r1, #0
  4007ac:	4608      	mov	r0, r1
  4007ae:	f7ff ffbb 	bl	400728 <mpu_begin>
}
  4007b2:	4020      	ands	r0, r4
  4007b4:	bd10      	pop	{r4, pc}
  4007b6:	bf00      	nop
  4007b8:	20000480 	.word	0x20000480

004007bc <motor_config_pins>:
	motors[0].angle_max = AP_ANGLE_MAX;
	motors[0].timeout = 1000;
}

void motor_config_pins(t_motor_config motor_cfg)
{
  4007bc:	b084      	sub	sp, #16
  4007be:	b538      	push	{r3, r4, r5, lr}
  4007c0:	ac04      	add	r4, sp, #16
  4007c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_configure_pin(motor_cfg.ul_pin, motor_cfg.ul_flag);
  4007c6:	9906      	ldr	r1, [sp, #24]
  4007c8:	9805      	ldr	r0, [sp, #20]
  4007ca:	f000 fb5b 	bl	400e84 <pio_configure_pin>

	pmc_enable_periph_clk(motor_cfg.ul_periph_clkid);
  4007ce:	9807      	ldr	r0, [sp, #28]
  4007d0:	f000 fd0a 	bl	4011e8 <pmc_enable_periph_clk>

	pwm_channel_disable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  4007d4:	ad04      	add	r5, sp, #16
  4007d6:	9908      	ldr	r1, [sp, #32]
  4007d8:	f855 0b14 	ldr.w	r0, [r5], #20
  4007dc:	f000 fe4c 	bl	401478 <pwm_channel_disable>
	pwm_init(motor_cfg.p_pwm, &motor_cfg.clock_setting);
  4007e0:	ac04      	add	r4, sp, #16
  4007e2:	4629      	mov	r1, r5
  4007e4:	f854 0b20 	ldr.w	r0, [r4], #32
  4007e8:	f000 fd9a 	bl	401320 <pwm_init>

	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
  4007ec:	4621      	mov	r1, r4
  4007ee:	9804      	ldr	r0, [sp, #16]
  4007f0:	f000 fdba 	bl	401368 <pwm_channel_init>
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  4007f4:	9908      	ldr	r1, [sp, #32]
  4007f6:	9804      	ldr	r0, [sp, #16]
  4007f8:	f000 fe38 	bl	40146c <pwm_channel_enable>
}
  4007fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400800:	b004      	add	sp, #16
  400802:	4770      	bx	lr

00400804 <motor_init>:
uint32_t motor_current_duty = 0;
void motor_config_pins(t_motor_config motor_cfg);


void motor_init(void)
{
  400804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400808:	b0a1      	sub	sp, #132	; 0x84
	printf("motor_init\r\n");
  40080a:	482e      	ldr	r0, [pc, #184]	; (4008c4 <motor_init+0xc0>)
  40080c:	f001 fc34 	bl	402078 <iprintf>
        .ul_clka = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	t_motor_config motor_cfg = {
  400810:	2248      	movs	r2, #72	; 0x48
  400812:	2100      	movs	r1, #0
  400814:	a80e      	add	r0, sp, #56	; 0x38
  400816:	f000 ffb8 	bl	40178a <memset>
		.pwm_channel.ul_period = MOTOR_PWM_PERIOD_TICKS,
		.pwm_channel.ul_duty = MOTOR_PWM_MIN,
		.pwm_channel.channel = EXT1_PWM_CHANNEL
	};

	motor_config_pins(motor_cfg);
  40081a:	4b2b      	ldr	r3, [pc, #172]	; (4008c8 <motor_init+0xc4>)
  40081c:	930e      	str	r3, [sp, #56]	; 0x38
  40081e:	f04f 0a17 	mov.w	sl, #23
  400822:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  400826:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
  40082a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  40082e:	231f      	movs	r3, #31
  400830:	9311      	str	r3, [sp, #68]	; 0x44
  400832:	4f26      	ldr	r7, [pc, #152]	; (4008cc <motor_init+0xc8>)
  400834:	9713      	str	r7, [sp, #76]	; 0x4c
  400836:	4e26      	ldr	r6, [pc, #152]	; (4008d0 <motor_init+0xcc>)
  400838:	9615      	str	r6, [sp, #84]	; 0x54
  40083a:	250b      	movs	r5, #11
  40083c:	9517      	str	r5, [sp, #92]	; 0x5c
  40083e:	f04f 0801 	mov.w	r8, #1
  400842:	f88d 8062 	strb.w	r8, [sp, #98]	; 0x62
  400846:	f240 4b7e 	movw	fp, #1150	; 0x47e
  40084a:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
  40084e:	f644 6420 	movw	r4, #20000	; 0x4e20
  400852:	941a      	str	r4, [sp, #104]	; 0x68
  400854:	46ee      	mov	lr, sp
  400856:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  40085a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40085e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  400862:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  400866:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  40086a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40086e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  400872:	e89c 0003 	ldmia.w	ip, {r0, r1}
  400876:	e88e 0003 	stmia.w	lr, {r0, r1}
  40087a:	ab0e      	add	r3, sp, #56	; 0x38
  40087c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40087e:	f7ff ff9d 	bl	4007bc <motor_config_pins>

	motors[0].config = motor_cfg;
  400882:	4b11      	ldr	r3, [pc, #68]	; (4008c8 <motor_init+0xc4>)
  400884:	930e      	str	r3, [sp, #56]	; 0x38
  400886:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40088a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  40088e:	231f      	movs	r3, #31
  400890:	9311      	str	r3, [sp, #68]	; 0x44
  400892:	9713      	str	r7, [sp, #76]	; 0x4c
  400894:	9615      	str	r6, [sp, #84]	; 0x54
  400896:	9517      	str	r5, [sp, #92]	; 0x5c
  400898:	f88d 8062 	strb.w	r8, [sp, #98]	; 0x62
  40089c:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
  4008a0:	941a      	str	r4, [sp, #104]	; 0x68
  4008a2:	4d0c      	ldr	r5, [pc, #48]	; (4008d4 <motor_init+0xd0>)
  4008a4:	2248      	movs	r2, #72	; 0x48
  4008a6:	a90e      	add	r1, sp, #56	; 0x38
  4008a8:	4628      	mov	r0, r5
  4008aa:	f000 ff63 	bl	401774 <memcpy>
	motors[0].angle_min = AP_ANGLE_MIN;
  4008ae:	f06f 0359 	mvn.w	r3, #89	; 0x59
  4008b2:	64ab      	str	r3, [r5, #72]	; 0x48
	motors[0].angle_max = AP_ANGLE_MAX;
  4008b4:	235a      	movs	r3, #90	; 0x5a
  4008b6:	64eb      	str	r3, [r5, #76]	; 0x4c
	motors[0].timeout = 1000;
  4008b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4008bc:	652b      	str	r3, [r5, #80]	; 0x50
}
  4008be:	b021      	add	sp, #132	; 0x84
  4008c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4008c4:	00404b94 	.word	0x00404b94
  4008c8:	40020000 	.word	0x40020000
  4008cc:	000f4240 	.word	0x000f4240
  4008d0:	07270e00 	.word	0x07270e00
  4008d4:	200002dc 	.word	0x200002dc

004008d8 <motor_set_power>:
{

}

void motor_set_power(t_motor motor, uint32_t power)
{
  4008d8:	b084      	sub	sp, #16
  4008da:	b508      	push	{r3, lr}
  4008dc:	f10d 0e08 	add.w	lr, sp, #8
  4008e0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  4008e4:	9917      	ldr	r1, [sp, #92]	; 0x5c
	motor.config.pwm_channel.ul_duty = power;
  4008e6:	910d      	str	r1, [sp, #52]	; 0x34
	printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
  4008e8:	4805      	ldr	r0, [pc, #20]	; (400900 <motor_set_power+0x28>)
  4008ea:	f001 fbc5 	bl	402078 <iprintf>
	pwm_channel_update_duty(motor.config.p_pwm, &motor.config.pwm_channel, motor.config.pwm_channel.ul_duty);
  4008ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4008f0:	a90a      	add	r1, sp, #40	; 0x28
  4008f2:	9802      	ldr	r0, [sp, #8]
  4008f4:	f000 fdac 	bl	401450 <pwm_channel_update_duty>
}
  4008f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4008fc:	b004      	add	sp, #16
  4008fe:	4770      	bx	lr
  400900:	00404ba4 	.word	0x00404ba4

00400904 <motor_min>:

void motor_min(t_motor motor)
{
  400904:	b084      	sub	sp, #16
  400906:	b500      	push	{lr}
  400908:	b093      	sub	sp, #76	; 0x4c
  40090a:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  40090e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MIN;
  400912:	f240 437e 	movw	r3, #1150	; 0x47e
  400916:	4a08      	ldr	r2, [pc, #32]	; (400938 <motor_min+0x34>)
  400918:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, MOTOR_PWM_MIN);
  40091a:	9311      	str	r3, [sp, #68]	; 0x44
  40091c:	2244      	movs	r2, #68	; 0x44
  40091e:	a918      	add	r1, sp, #96	; 0x60
  400920:	4668      	mov	r0, sp
  400922:	f000 ff27 	bl	401774 <memcpy>
  400926:	ab14      	add	r3, sp, #80	; 0x50
  400928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40092a:	f7ff ffd5 	bl	4008d8 <motor_set_power>
}
  40092e:	b013      	add	sp, #76	; 0x4c
  400930:	f85d eb04 	ldr.w	lr, [sp], #4
  400934:	b004      	add	sp, #16
  400936:	4770      	bx	lr
  400938:	20000220 	.word	0x20000220

0040093c <motor_mid>:

void motor_mid(t_motor motor)
{
  40093c:	b084      	sub	sp, #16
  40093e:	b500      	push	{lr}
  400940:	b093      	sub	sp, #76	; 0x4c
  400942:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  400946:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MID;
  40094a:	f240 5346 	movw	r3, #1350	; 0x546
  40094e:	4a08      	ldr	r2, [pc, #32]	; (400970 <motor_mid+0x34>)
  400950:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  400952:	9311      	str	r3, [sp, #68]	; 0x44
  400954:	2244      	movs	r2, #68	; 0x44
  400956:	a918      	add	r1, sp, #96	; 0x60
  400958:	4668      	mov	r0, sp
  40095a:	f000 ff0b 	bl	401774 <memcpy>
  40095e:	ab14      	add	r3, sp, #80	; 0x50
  400960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400962:	f7ff ffb9 	bl	4008d8 <motor_set_power>
}
  400966:	b013      	add	sp, #76	; 0x4c
  400968:	f85d eb04 	ldr.w	lr, [sp], #4
  40096c:	b004      	add	sp, #16
  40096e:	4770      	bx	lr
  400970:	20000220 	.word	0x20000220

00400974 <motor_max>:

void motor_max(t_motor motor)
{
  400974:	b084      	sub	sp, #16
  400976:	b500      	push	{lr}
  400978:	b093      	sub	sp, #76	; 0x4c
  40097a:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  40097e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MAX;
  400982:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  400986:	4a08      	ldr	r2, [pc, #32]	; (4009a8 <motor_max+0x34>)
  400988:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, motor_current_duty);
  40098a:	9311      	str	r3, [sp, #68]	; 0x44
  40098c:	2244      	movs	r2, #68	; 0x44
  40098e:	a918      	add	r1, sp, #96	; 0x60
  400990:	4668      	mov	r0, sp
  400992:	f000 feef 	bl	401774 <memcpy>
  400996:	ab14      	add	r3, sp, #80	; 0x50
  400998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40099a:	f7ff ff9d 	bl	4008d8 <motor_set_power>
}
  40099e:	b013      	add	sp, #76	; 0x4c
  4009a0:	f85d eb04 	ldr.w	lr, [sp], #4
  4009a4:	b004      	add	sp, #16
  4009a6:	4770      	bx	lr
  4009a8:	20000220 	.word	0x20000220

004009ac <motor_increment>:

void motor_increment(t_motor motor)
{
  4009ac:	b084      	sub	sp, #16
  4009ae:	b500      	push	{lr}
  4009b0:	b093      	sub	sp, #76	; 0x4c
  4009b2:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  4009b6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    if (motor_current_duty == MOTOR_PWM_MAX)
  4009ba:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <motor_increment+0x3c>)
  4009bc:	681b      	ldr	r3, [r3, #0]
  4009be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  4009c2:	d00c      	beq.n	4009de <motor_increment+0x32>
        return;
	motor_current_duty += MOTOR_PWM_STEP;
  4009c4:	330a      	adds	r3, #10
  4009c6:	4a08      	ldr	r2, [pc, #32]	; (4009e8 <motor_increment+0x3c>)
  4009c8:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  4009ca:	9311      	str	r3, [sp, #68]	; 0x44
  4009cc:	2244      	movs	r2, #68	; 0x44
  4009ce:	a918      	add	r1, sp, #96	; 0x60
  4009d0:	4668      	mov	r0, sp
  4009d2:	f000 fecf 	bl	401774 <memcpy>
  4009d6:	ab14      	add	r3, sp, #80	; 0x50
  4009d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4009da:	f7ff ff7d 	bl	4008d8 <motor_set_power>
}
  4009de:	b013      	add	sp, #76	; 0x4c
  4009e0:	f85d eb04 	ldr.w	lr, [sp], #4
  4009e4:	b004      	add	sp, #16
  4009e6:	4770      	bx	lr
  4009e8:	20000220 	.word	0x20000220

004009ec <motor_decrement>:

void motor_decrement(t_motor motor)
{
  4009ec:	b084      	sub	sp, #16
  4009ee:	b500      	push	{lr}
  4009f0:	b093      	sub	sp, #76	; 0x4c
  4009f2:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  4009f6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    if (motor_current_duty == MOTOR_PWM_MIN)
  4009fa:	4b0c      	ldr	r3, [pc, #48]	; (400a2c <motor_decrement+0x40>)
  4009fc:	681b      	ldr	r3, [r3, #0]
  4009fe:	f240 427e 	movw	r2, #1150	; 0x47e
  400a02:	4293      	cmp	r3, r2
  400a04:	d00c      	beq.n	400a20 <motor_decrement+0x34>
        return;
	motor_current_duty -= MOTOR_PWM_STEP;
  400a06:	3b0a      	subs	r3, #10
  400a08:	4a08      	ldr	r2, [pc, #32]	; (400a2c <motor_decrement+0x40>)
  400a0a:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  400a0c:	9311      	str	r3, [sp, #68]	; 0x44
  400a0e:	2244      	movs	r2, #68	; 0x44
  400a10:	a918      	add	r1, sp, #96	; 0x60
  400a12:	4668      	mov	r0, sp
  400a14:	f000 feae 	bl	401774 <memcpy>
  400a18:	ab14      	add	r3, sp, #80	; 0x50
  400a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400a1c:	f7ff ff5c 	bl	4008d8 <motor_set_power>
  400a20:	b013      	add	sp, #76	; 0x4c
  400a22:	f85d eb04 	ldr.w	lr, [sp], #4
  400a26:	b004      	add	sp, #16
  400a28:	4770      	bx	lr
  400a2a:	bf00      	nop
  400a2c:	20000220 	.word	0x20000220

00400a30 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400a30:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  400a32:	482c      	ldr	r0, [pc, #176]	; (400ae4 <board_init+0xb4>)
  400a34:	f000 fc02 	bl	40123c <wdt_disable>
  400a38:	200b      	movs	r0, #11
  400a3a:	f000 fbd5 	bl	4011e8 <pmc_enable_periph_clk>
  400a3e:	200c      	movs	r0, #12
  400a40:	f000 fbd2 	bl	4011e8 <pmc_enable_periph_clk>
  400a44:	200d      	movs	r0, #13
  400a46:	f000 fbcf 	bl	4011e8 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a4a:	4b27      	ldr	r3, [pc, #156]	; (400ae8 <board_init+0xb8>)
  400a4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400a50:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a52:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400a58:	4c24      	ldr	r4, [pc, #144]	; (400aec <board_init+0xbc>)
  400a5a:	2504      	movs	r5, #4
  400a5c:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a5e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400a62:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400a64:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400a68:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400a6a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400a6c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400a70:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400a72:	f022 0204 	bic.w	r2, r2, #4
  400a76:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400a78:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400a7a:	f022 0204 	bic.w	r2, r2, #4
  400a7e:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400a84:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a86:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a88:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400a90:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a92:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a94:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400a9c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a9e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400aa0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400aa8:	210c      	movs	r1, #12
  400aaa:	4811      	ldr	r0, [pc, #68]	; (400af0 <board_init+0xc0>)
  400aac:	f000 fa76 	bl	400f9c <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400ab0:	4e10      	ldr	r6, [pc, #64]	; (400af4 <board_init+0xc4>)
  400ab2:	4631      	mov	r1, r6
  400ab4:	2003      	movs	r0, #3
  400ab6:	f000 f9e5 	bl	400e84 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  400aba:	4631      	mov	r1, r6
  400abc:	4628      	mov	r0, r5
  400abe:	f000 f9e1 	bl	400e84 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400ac2:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400ac4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400ac8:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400aca:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400acc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400ad0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400ad2:	f023 0304 	bic.w	r3, r3, #4
  400ad6:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400ad8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400ada:	f023 0304 	bic.w	r3, r3, #4
  400ade:	6763      	str	r3, [r4, #116]	; 0x74
  400ae0:	bd70      	pop	{r4, r5, r6, pc}
  400ae2:	bf00      	nop
  400ae4:	400e1450 	.word	0x400e1450
  400ae8:	400e1200 	.word	0x400e1200
  400aec:	400e0e00 	.word	0x400e0e00
  400af0:	400e1000 	.word	0x400e1000
  400af4:	08000001 	.word	0x08000001

00400af8 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400af8:	4b2b      	ldr	r3, [pc, #172]	; (400ba8 <twi_set_speed+0xb0>)
  400afa:	4299      	cmp	r1, r3
  400afc:	d849      	bhi.n	400b92 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400afe:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400b02:	4299      	cmp	r1, r3
  400b04:	d92b      	bls.n	400b5e <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400b06:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400b08:	4c28      	ldr	r4, [pc, #160]	; (400bac <twi_set_speed+0xb4>)
  400b0a:	fba4 3402 	umull	r3, r4, r4, r2
  400b0e:	0ba4      	lsrs	r4, r4, #14
  400b10:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400b12:	4b27      	ldr	r3, [pc, #156]	; (400bb0 <twi_set_speed+0xb8>)
  400b14:	440b      	add	r3, r1
  400b16:	009b      	lsls	r3, r3, #2
  400b18:	fbb2 f2f3 	udiv	r2, r2, r3
  400b1c:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b1e:	2cff      	cmp	r4, #255	; 0xff
  400b20:	d939      	bls.n	400b96 <twi_set_speed+0x9e>
  400b22:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  400b24:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400b26:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b28:	2cff      	cmp	r4, #255	; 0xff
  400b2a:	d902      	bls.n	400b32 <twi_set_speed+0x3a>
  400b2c:	2b07      	cmp	r3, #7
  400b2e:	d1f9      	bne.n	400b24 <twi_set_speed+0x2c>
  400b30:	e00a      	b.n	400b48 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b32:	2aff      	cmp	r2, #255	; 0xff
  400b34:	d908      	bls.n	400b48 <twi_set_speed+0x50>
  400b36:	2b06      	cmp	r3, #6
  400b38:	d900      	bls.n	400b3c <twi_set_speed+0x44>
  400b3a:	e005      	b.n	400b48 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  400b3c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  400b3e:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b40:	2aff      	cmp	r2, #255	; 0xff
  400b42:	d901      	bls.n	400b48 <twi_set_speed+0x50>
  400b44:	2b06      	cmp	r3, #6
  400b46:	d9f9      	bls.n	400b3c <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400b48:	0212      	lsls	r2, r2, #8
  400b4a:	b292      	uxth	r2, r2
  400b4c:	041b      	lsls	r3, r3, #16
  400b4e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400b52:	431a      	orrs	r2, r3
  400b54:	b2e4      	uxtb	r4, r4
  400b56:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400b58:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400b5a:	2000      	movs	r0, #0
  400b5c:	e021      	b.n	400ba2 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400b5e:	0049      	lsls	r1, r1, #1
  400b60:	fbb2 f2f1 	udiv	r2, r2, r1
  400b64:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b66:	2aff      	cmp	r2, #255	; 0xff
  400b68:	d907      	bls.n	400b7a <twi_set_speed+0x82>
  400b6a:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  400b6c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  400b6e:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b70:	2aff      	cmp	r2, #255	; 0xff
  400b72:	d903      	bls.n	400b7c <twi_set_speed+0x84>
  400b74:	2b07      	cmp	r3, #7
  400b76:	d1f9      	bne.n	400b6c <twi_set_speed+0x74>
  400b78:	e000      	b.n	400b7c <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400b7a:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400b7c:	0211      	lsls	r1, r2, #8
  400b7e:	b289      	uxth	r1, r1
  400b80:	041b      	lsls	r3, r3, #16
  400b82:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400b86:	430b      	orrs	r3, r1
  400b88:	b2d2      	uxtb	r2, r2
  400b8a:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400b8c:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400b8e:	2000      	movs	r0, #0
}
  400b90:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400b92:	2001      	movs	r0, #1
  400b94:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b96:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400b98:	bf88      	it	hi
  400b9a:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400b9c:	d8ce      	bhi.n	400b3c <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400b9e:	2300      	movs	r3, #0
  400ba0:	e7d2      	b.n	400b48 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  400ba2:	bc10      	pop	{r4}
  400ba4:	4770      	bx	lr
  400ba6:	bf00      	nop
  400ba8:	00061a80 	.word	0x00061a80
  400bac:	057619f1 	.word	0x057619f1
  400bb0:	3ffd1200 	.word	0x3ffd1200

00400bb4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400bb4:	b538      	push	{r3, r4, r5, lr}
  400bb6:	4604      	mov	r4, r0
  400bb8:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  400bbe:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400bc0:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400bc2:	2380      	movs	r3, #128	; 0x80
  400bc4:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400bc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400bc8:	2308      	movs	r3, #8
  400bca:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400bcc:	2320      	movs	r3, #32
  400bce:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400bd0:	2304      	movs	r3, #4
  400bd2:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400bd4:	680a      	ldr	r2, [r1, #0]
  400bd6:	6849      	ldr	r1, [r1, #4]
  400bd8:	f7ff ff8e 	bl	400af8 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  400bdc:	2801      	cmp	r0, #1
  400bde:	bf14      	ite	ne
  400be0:	2000      	movne	r0, #0
  400be2:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400be4:	7a6b      	ldrb	r3, [r5, #9]
  400be6:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400be8:	bf04      	itt	eq
  400bea:	2340      	moveq	r3, #64	; 0x40
  400bec:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400bee:	bd38      	pop	{r3, r4, r5, pc}

00400bf0 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400bf0:	460a      	mov	r2, r1
  400bf2:	b159      	cbz	r1, 400c0c <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  400bf4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  400bf6:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  400bf8:	bfc4      	itt	gt
  400bfa:	7841      	ldrbgt	r1, [r0, #1]
  400bfc:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  400c00:	2a02      	cmp	r2, #2
  400c02:	dd05      	ble.n	400c10 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  400c04:	7880      	ldrb	r0, [r0, #2]
  400c06:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  400c0a:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400c0c:	2000      	movs	r0, #0
  400c0e:	4770      	bx	lr
  400c10:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  400c12:	4770      	bx	lr

00400c14 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400c18:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  400c1a:	2c00      	cmp	r4, #0
  400c1c:	d045      	beq.n	400caa <twi_master_read+0x96>
  400c1e:	460b      	mov	r3, r1
  400c20:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400c22:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400c24:	2000      	movs	r0, #0
  400c26:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400c28:	684a      	ldr	r2, [r1, #4]
  400c2a:	0212      	lsls	r2, r2, #8
  400c2c:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400c30:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  400c34:	7c1a      	ldrb	r2, [r3, #16]
  400c36:	0412      	lsls	r2, r2, #16
  400c38:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  400c3c:	430a      	orrs	r2, r1
  400c3e:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400c40:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400c42:	6859      	ldr	r1, [r3, #4]
  400c44:	4618      	mov	r0, r3
  400c46:	f7ff ffd3 	bl	400bf0 <twi_mk_addr>
  400c4a:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400c4c:	2c01      	cmp	r4, #1
  400c4e:	d104      	bne.n	400c5a <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400c50:	2303      	movs	r3, #3
  400c52:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  400c54:	f04f 0e01 	mov.w	lr, #1
  400c58:	e033      	b.n	400cc2 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400c5a:	2301      	movs	r3, #1
  400c5c:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  400c5e:	f04f 0e00 	mov.w	lr, #0
  400c62:	e02e      	b.n	400cc2 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  400c64:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400c66:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400c68:	f413 7f80 	tst.w	r3, #256	; 0x100
  400c6c:	d120      	bne.n	400cb0 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400c6e:	1e51      	subs	r1, r2, #1
  400c70:	b30a      	cbz	r2, 400cb6 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400c72:	2c01      	cmp	r4, #1
  400c74:	d106      	bne.n	400c84 <twi_master_read+0x70>
  400c76:	f1be 0f00 	cmp.w	lr, #0
  400c7a:	d12f      	bne.n	400cdc <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  400c7c:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  400c80:	46e6      	mov	lr, ip
  400c82:	e02b      	b.n	400cdc <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400c84:	f013 0f02 	tst.w	r3, #2
  400c88:	d005      	beq.n	400c96 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400c8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400c8c:	7033      	strb	r3, [r6, #0]

		cnt--;
  400c8e:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400c90:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400c92:	463a      	mov	r2, r7
  400c94:	e000      	b.n	400c98 <twi_master_read+0x84>
  400c96:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400c98:	2c00      	cmp	r4, #0
  400c9a:	d1e4      	bne.n	400c66 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400c9c:	6a2b      	ldr	r3, [r5, #32]
  400c9e:	f013 0f01 	tst.w	r3, #1
  400ca2:	d0fb      	beq.n	400c9c <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  400ca4:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  400ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400caa:	2001      	movs	r0, #1
  400cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400cb0:	2005      	movs	r0, #5
  400cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400cb6:	2009      	movs	r0, #9
  400cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400cbc:	2005      	movs	r0, #5
  400cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400cc2:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400cc4:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400cc8:	d1f8      	bne.n	400cbc <twi_master_read+0xa8>
  400cca:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  400cce:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  400cd2:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  400cd6:	f04f 0c01 	mov.w	ip, #1
  400cda:	e7ca      	b.n	400c72 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400cdc:	f013 0f02 	tst.w	r3, #2
  400ce0:	d0c0      	beq.n	400c64 <twi_master_read+0x50>
  400ce2:	e7d2      	b.n	400c8a <twi_master_read+0x76>

00400ce4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400ce4:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400ce6:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  400ce8:	2d00      	cmp	r5, #0
  400cea:	d034      	beq.n	400d56 <twi_master_write+0x72>
  400cec:	460b      	mov	r3, r1
  400cee:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400cf0:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400cf2:	2000      	movs	r0, #0
  400cf4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400cf6:	7c0a      	ldrb	r2, [r1, #16]
  400cf8:	0412      	lsls	r2, r2, #16
  400cfa:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  400cfe:	685a      	ldr	r2, [r3, #4]
  400d00:	0212      	lsls	r2, r2, #8
  400d02:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400d06:	430a      	orrs	r2, r1
  400d08:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400d0a:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400d0c:	6859      	ldr	r1, [r3, #4]
  400d0e:	4618      	mov	r0, r3
  400d10:	f7ff ff6e 	bl	400bf0 <twi_mk_addr>
  400d14:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400d16:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400d18:	f413 7f80 	tst.w	r3, #256	; 0x100
  400d1c:	d004      	beq.n	400d28 <twi_master_write+0x44>
  400d1e:	e01c      	b.n	400d5a <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400d20:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400d22:	f413 7f80 	tst.w	r3, #256	; 0x100
  400d26:	d11a      	bne.n	400d5e <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  400d28:	f013 0f04 	tst.w	r3, #4
  400d2c:	d003      	beq.n	400d36 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400d2e:	7833      	ldrb	r3, [r6, #0]
  400d30:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  400d32:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400d34:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400d36:	2d00      	cmp	r5, #0
  400d38:	d1f2      	bne.n	400d20 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400d3a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400d3c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400d40:	d10f      	bne.n	400d62 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400d42:	f013 0f04 	tst.w	r3, #4
  400d46:	d0f8      	beq.n	400d3a <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400d48:	2302      	movs	r3, #2
  400d4a:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400d4c:	6a23      	ldr	r3, [r4, #32]
  400d4e:	f013 0f01 	tst.w	r3, #1
  400d52:	d0fb      	beq.n	400d4c <twi_master_write+0x68>
  400d54:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400d56:	2001      	movs	r0, #1
  400d58:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400d5a:	2005      	movs	r0, #5
  400d5c:	bd70      	pop	{r4, r5, r6, pc}
  400d5e:	2005      	movs	r0, #5
  400d60:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400d62:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  400d64:	bd70      	pop	{r4, r5, r6, pc}
  400d66:	bf00      	nop

00400d68 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  400d68:	b500      	push	{lr}
  400d6a:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  400d6c:	2300      	movs	r3, #0
  400d6e:	aa06      	add	r2, sp, #24
  400d70:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  400d74:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  400d76:	2201      	movs	r2, #1
  400d78:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  400d7a:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  400d7e:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  400d82:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  400d84:	a901      	add	r1, sp, #4
  400d86:	f7ff ffad 	bl	400ce4 <twi_master_write>
}
  400d8a:	b007      	add	sp, #28
  400d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00400d90 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d90:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d92:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d96:	d02f      	beq.n	400df8 <pio_set_peripheral+0x68>
  400d98:	d807      	bhi.n	400daa <pio_set_peripheral+0x1a>
  400d9a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d9e:	d014      	beq.n	400dca <pio_set_peripheral+0x3a>
  400da0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400da4:	d01e      	beq.n	400de4 <pio_set_peripheral+0x54>
  400da6:	b939      	cbnz	r1, 400db8 <pio_set_peripheral+0x28>
  400da8:	4770      	bx	lr
  400daa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400dae:	d036      	beq.n	400e1e <pio_set_peripheral+0x8e>
  400db0:	d804      	bhi.n	400dbc <pio_set_peripheral+0x2c>
  400db2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400db6:	d029      	beq.n	400e0c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400db8:	6042      	str	r2, [r0, #4]
  400dba:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400dbc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400dc0:	d02d      	beq.n	400e1e <pio_set_peripheral+0x8e>
  400dc2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400dc6:	d02a      	beq.n	400e1e <pio_set_peripheral+0x8e>
  400dc8:	e7f6      	b.n	400db8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400dca:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400dcc:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400dce:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400dd0:	43d3      	mvns	r3, r2
  400dd2:	4021      	ands	r1, r4
  400dd4:	4019      	ands	r1, r3
  400dd6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400dd8:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400dda:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ddc:	4021      	ands	r1, r4
  400dde:	400b      	ands	r3, r1
  400de0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400de2:	e01a      	b.n	400e1a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400de4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400de6:	4313      	orrs	r3, r2
  400de8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400dea:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400dec:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400dee:	400b      	ands	r3, r1
  400df0:	ea23 0302 	bic.w	r3, r3, r2
  400df4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400df6:	e7df      	b.n	400db8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400df8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400dfa:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400dfc:	400b      	ands	r3, r1
  400dfe:	ea23 0302 	bic.w	r3, r3, r2
  400e02:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e04:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e06:	4313      	orrs	r3, r2
  400e08:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e0a:	e7d5      	b.n	400db8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400e0c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400e0e:	4313      	orrs	r3, r2
  400e10:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400e12:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400e14:	4313      	orrs	r3, r2
  400e16:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400e18:	e7ce      	b.n	400db8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400e1a:	6042      	str	r2, [r0, #4]
}
  400e1c:	bc10      	pop	{r4}
  400e1e:	4770      	bx	lr

00400e20 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400e20:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e22:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400e26:	bf14      	ite	ne
  400e28:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e2a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400e2c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400e30:	bf14      	ite	ne
  400e32:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400e34:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400e36:	f012 0f02 	tst.w	r2, #2
  400e3a:	d002      	beq.n	400e42 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400e3c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400e40:	e004      	b.n	400e4c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400e42:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400e46:	bf18      	it	ne
  400e48:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400e4c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400e4e:	6001      	str	r1, [r0, #0]
  400e50:	4770      	bx	lr
  400e52:	bf00      	nop

00400e54 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400e54:	b410      	push	{r4}
  400e56:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400e58:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e5a:	b10c      	cbz	r4, 400e60 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400e5c:	6641      	str	r1, [r0, #100]	; 0x64
  400e5e:	e000      	b.n	400e62 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e60:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400e62:	b10b      	cbz	r3, 400e68 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400e64:	6501      	str	r1, [r0, #80]	; 0x50
  400e66:	e000      	b.n	400e6a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400e68:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400e6a:	b10a      	cbz	r2, 400e70 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400e6c:	6301      	str	r1, [r0, #48]	; 0x30
  400e6e:	e000      	b.n	400e72 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400e70:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400e72:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400e74:	6001      	str	r1, [r0, #0]
}
  400e76:	bc10      	pop	{r4}
  400e78:	4770      	bx	lr
  400e7a:	bf00      	nop

00400e7c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400e7c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400e7e:	4770      	bx	lr

00400e80 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400e80:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400e82:	4770      	bx	lr

00400e84 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400e84:	b570      	push	{r4, r5, r6, lr}
  400e86:	b082      	sub	sp, #8
  400e88:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400e8a:	0943      	lsrs	r3, r0, #5
  400e8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400e90:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400e94:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400e96:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400e9e:	d047      	beq.n	400f30 <pio_configure_pin+0xac>
  400ea0:	d809      	bhi.n	400eb6 <pio_configure_pin+0x32>
  400ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400ea6:	d021      	beq.n	400eec <pio_configure_pin+0x68>
  400ea8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400eac:	d02f      	beq.n	400f0e <pio_configure_pin+0x8a>
  400eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400eb2:	d16f      	bne.n	400f94 <pio_configure_pin+0x110>
  400eb4:	e009      	b.n	400eca <pio_configure_pin+0x46>
  400eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400eba:	d055      	beq.n	400f68 <pio_configure_pin+0xe4>
  400ebc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ec0:	d052      	beq.n	400f68 <pio_configure_pin+0xe4>
  400ec2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400ec6:	d044      	beq.n	400f52 <pio_configure_pin+0xce>
  400ec8:	e064      	b.n	400f94 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400eca:	f000 001f 	and.w	r0, r0, #31
  400ece:	2601      	movs	r6, #1
  400ed0:	4086      	lsls	r6, r0
  400ed2:	4632      	mov	r2, r6
  400ed4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ed8:	4620      	mov	r0, r4
  400eda:	f7ff ff59 	bl	400d90 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ede:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ee2:	bf14      	ite	ne
  400ee4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ee6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ee8:	2001      	movs	r0, #1
  400eea:	e054      	b.n	400f96 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400eec:	f000 001f 	and.w	r0, r0, #31
  400ef0:	2601      	movs	r6, #1
  400ef2:	4086      	lsls	r6, r0
  400ef4:	4632      	mov	r2, r6
  400ef6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400efa:	4620      	mov	r0, r4
  400efc:	f7ff ff48 	bl	400d90 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f00:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400f04:	bf14      	ite	ne
  400f06:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f08:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400f0a:	2001      	movs	r0, #1
  400f0c:	e043      	b.n	400f96 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400f0e:	f000 001f 	and.w	r0, r0, #31
  400f12:	2601      	movs	r6, #1
  400f14:	4086      	lsls	r6, r0
  400f16:	4632      	mov	r2, r6
  400f18:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400f1c:	4620      	mov	r0, r4
  400f1e:	f7ff ff37 	bl	400d90 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f22:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400f26:	bf14      	ite	ne
  400f28:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f2a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400f2c:	2001      	movs	r0, #1
  400f2e:	e032      	b.n	400f96 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400f30:	f000 001f 	and.w	r0, r0, #31
  400f34:	2601      	movs	r6, #1
  400f36:	4086      	lsls	r6, r0
  400f38:	4632      	mov	r2, r6
  400f3a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400f3e:	4620      	mov	r0, r4
  400f40:	f7ff ff26 	bl	400d90 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f44:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400f48:	bf14      	ite	ne
  400f4a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f4c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400f4e:	2001      	movs	r0, #1
  400f50:	e021      	b.n	400f96 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400f52:	f000 011f 	and.w	r1, r0, #31
  400f56:	2601      	movs	r6, #1
  400f58:	462a      	mov	r2, r5
  400f5a:	fa06 f101 	lsl.w	r1, r6, r1
  400f5e:	4620      	mov	r0, r4
  400f60:	f7ff ff5e 	bl	400e20 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  400f64:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400f66:	e016      	b.n	400f96 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400f68:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  400f6c:	f000 011f 	and.w	r1, r0, #31
  400f70:	2601      	movs	r6, #1
  400f72:	ea05 0306 	and.w	r3, r5, r6
  400f76:	9300      	str	r3, [sp, #0]
  400f78:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400f7c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400f80:	bf14      	ite	ne
  400f82:	2200      	movne	r2, #0
  400f84:	2201      	moveq	r2, #1
  400f86:	fa06 f101 	lsl.w	r1, r6, r1
  400f8a:	4620      	mov	r0, r4
  400f8c:	f7ff ff62 	bl	400e54 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  400f90:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400f92:	e000      	b.n	400f96 <pio_configure_pin+0x112>

	default:
		return 0;
  400f94:	2000      	movs	r0, #0
	}

	return 1;
}
  400f96:	b002      	add	sp, #8
  400f98:	bd70      	pop	{r4, r5, r6, pc}
  400f9a:	bf00      	nop

00400f9c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400f9c:	b570      	push	{r4, r5, r6, lr}
  400f9e:	b082      	sub	sp, #8
  400fa0:	4605      	mov	r5, r0
  400fa2:	460e      	mov	r6, r1
  400fa4:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400fa6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400fae:	d038      	beq.n	401022 <pio_configure_pin_group+0x86>
  400fb0:	d809      	bhi.n	400fc6 <pio_configure_pin_group+0x2a>
  400fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400fb6:	d01c      	beq.n	400ff2 <pio_configure_pin_group+0x56>
  400fb8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400fbc:	d025      	beq.n	40100a <pio_configure_pin_group+0x6e>
  400fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400fc2:	d150      	bne.n	401066 <pio_configure_pin_group+0xca>
  400fc4:	e009      	b.n	400fda <pio_configure_pin_group+0x3e>
  400fc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400fca:	d03a      	beq.n	401042 <pio_configure_pin_group+0xa6>
  400fcc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400fd0:	d037      	beq.n	401042 <pio_configure_pin_group+0xa6>
  400fd2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400fd6:	d030      	beq.n	40103a <pio_configure_pin_group+0x9e>
  400fd8:	e045      	b.n	401066 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400fda:	460a      	mov	r2, r1
  400fdc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fe0:	f7ff fed6 	bl	400d90 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400fe4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400fe8:	bf14      	ite	ne
  400fea:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400fec:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400fee:	2001      	movs	r0, #1
  400ff0:	e03a      	b.n	401068 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400ff2:	460a      	mov	r2, r1
  400ff4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ff8:	f7ff feca 	bl	400d90 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ffc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401000:	bf14      	ite	ne
  401002:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401004:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401006:	2001      	movs	r0, #1
  401008:	e02e      	b.n	401068 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40100a:	460a      	mov	r2, r1
  40100c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401010:	f7ff febe 	bl	400d90 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401014:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401018:	bf14      	ite	ne
  40101a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40101c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40101e:	2001      	movs	r0, #1
  401020:	e022      	b.n	401068 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401022:	460a      	mov	r2, r1
  401024:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401028:	f7ff feb2 	bl	400d90 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40102c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401030:	bf14      	ite	ne
  401032:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401034:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401036:	2001      	movs	r0, #1
  401038:	e016      	b.n	401068 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40103a:	f7ff fef1 	bl	400e20 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  40103e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401040:	e012      	b.n	401068 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401042:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401046:	f004 0301 	and.w	r3, r4, #1
  40104a:	9300      	str	r3, [sp, #0]
  40104c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401050:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401054:	bf14      	ite	ne
  401056:	2200      	movne	r2, #0
  401058:	2201      	moveq	r2, #1
  40105a:	4631      	mov	r1, r6
  40105c:	4628      	mov	r0, r5
  40105e:	f7ff fef9 	bl	400e54 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401062:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401064:	e000      	b.n	401068 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401066:	2000      	movs	r0, #0
	}

	return 1;
}
  401068:	b002      	add	sp, #8
  40106a:	bd70      	pop	{r4, r5, r6, pc}

0040106c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40106c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401070:	4681      	mov	r9, r0
  401072:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401074:	f7ff ff02 	bl	400e7c <pio_get_interrupt_status>
  401078:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40107a:	4648      	mov	r0, r9
  40107c:	f7ff ff00 	bl	400e80 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401080:	4005      	ands	r5, r0
  401082:	d013      	beq.n	4010ac <pio_handler_process+0x40>
  401084:	4c0e      	ldr	r4, [pc, #56]	; (4010c0 <pio_handler_process+0x54>)
  401086:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40108a:	6823      	ldr	r3, [r4, #0]
  40108c:	4543      	cmp	r3, r8
  40108e:	d108      	bne.n	4010a2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401090:	6861      	ldr	r1, [r4, #4]
  401092:	4229      	tst	r1, r5
  401094:	d005      	beq.n	4010a2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401096:	68e3      	ldr	r3, [r4, #12]
  401098:	4640      	mov	r0, r8
  40109a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40109c:	6863      	ldr	r3, [r4, #4]
  40109e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4010a2:	42b4      	cmp	r4, r6
  4010a4:	d002      	beq.n	4010ac <pio_handler_process+0x40>
  4010a6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4010a8:	2d00      	cmp	r5, #0
  4010aa:	d1ee      	bne.n	40108a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4010ac:	4b05      	ldr	r3, [pc, #20]	; (4010c4 <pio_handler_process+0x58>)
  4010ae:	681b      	ldr	r3, [r3, #0]
  4010b0:	b123      	cbz	r3, 4010bc <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4010b2:	4b05      	ldr	r3, [pc, #20]	; (4010c8 <pio_handler_process+0x5c>)
  4010b4:	681b      	ldr	r3, [r3, #0]
  4010b6:	b10b      	cbz	r3, 4010bc <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4010b8:	4648      	mov	r0, r9
  4010ba:	4798      	blx	r3
  4010bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4010c0:	20000228 	.word	0x20000228
  4010c4:	200004b0 	.word	0x200004b0
  4010c8:	20000224 	.word	0x20000224

004010cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010ce:	210b      	movs	r1, #11
  4010d0:	4801      	ldr	r0, [pc, #4]	; (4010d8 <PIOA_Handler+0xc>)
  4010d2:	f7ff ffcb 	bl	40106c <pio_handler_process>
  4010d6:	bd08      	pop	{r3, pc}
  4010d8:	400e0e00 	.word	0x400e0e00

004010dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010de:	210c      	movs	r1, #12
  4010e0:	4801      	ldr	r0, [pc, #4]	; (4010e8 <PIOB_Handler+0xc>)
  4010e2:	f7ff ffc3 	bl	40106c <pio_handler_process>
  4010e6:	bd08      	pop	{r3, pc}
  4010e8:	400e1000 	.word	0x400e1000

004010ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4010ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4010ee:	210d      	movs	r1, #13
  4010f0:	4801      	ldr	r0, [pc, #4]	; (4010f8 <PIOC_Handler+0xc>)
  4010f2:	f7ff ffbb 	bl	40106c <pio_handler_process>
  4010f6:	bd08      	pop	{r3, pc}
  4010f8:	400e1200 	.word	0x400e1200

004010fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4010fc:	4a18      	ldr	r2, [pc, #96]	; (401160 <pmc_switch_mck_to_pllack+0x64>)
  4010fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401104:	4318      	orrs	r0, r3
  401106:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401108:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40110a:	f013 0f08 	tst.w	r3, #8
  40110e:	d003      	beq.n	401118 <pmc_switch_mck_to_pllack+0x1c>
  401110:	e009      	b.n	401126 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401112:	3b01      	subs	r3, #1
  401114:	d103      	bne.n	40111e <pmc_switch_mck_to_pllack+0x22>
  401116:	e01e      	b.n	401156 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401118:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40111c:	4910      	ldr	r1, [pc, #64]	; (401160 <pmc_switch_mck_to_pllack+0x64>)
  40111e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401120:	f012 0f08 	tst.w	r2, #8
  401124:	d0f5      	beq.n	401112 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401126:	4a0e      	ldr	r2, [pc, #56]	; (401160 <pmc_switch_mck_to_pllack+0x64>)
  401128:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40112a:	f023 0303 	bic.w	r3, r3, #3
  40112e:	f043 0302 	orr.w	r3, r3, #2
  401132:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401134:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401136:	f010 0008 	ands.w	r0, r0, #8
  40113a:	d004      	beq.n	401146 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40113c:	2000      	movs	r0, #0
  40113e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401140:	3b01      	subs	r3, #1
  401142:	d103      	bne.n	40114c <pmc_switch_mck_to_pllack+0x50>
  401144:	e009      	b.n	40115a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401146:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40114a:	4905      	ldr	r1, [pc, #20]	; (401160 <pmc_switch_mck_to_pllack+0x64>)
  40114c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40114e:	f012 0f08 	tst.w	r2, #8
  401152:	d0f5      	beq.n	401140 <pmc_switch_mck_to_pllack+0x44>
  401154:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401156:	2001      	movs	r0, #1
  401158:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40115a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40115c:	4770      	bx	lr
  40115e:	bf00      	nop
  401160:	400e0400 	.word	0x400e0400

00401164 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401164:	b138      	cbz	r0, 401176 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401166:	4911      	ldr	r1, [pc, #68]	; (4011ac <pmc_switch_mainck_to_xtal+0x48>)
  401168:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40116a:	4a11      	ldr	r2, [pc, #68]	; (4011b0 <pmc_switch_mainck_to_xtal+0x4c>)
  40116c:	401a      	ands	r2, r3
  40116e:	4b11      	ldr	r3, [pc, #68]	; (4011b4 <pmc_switch_mainck_to_xtal+0x50>)
  401170:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401172:	620b      	str	r3, [r1, #32]
  401174:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401176:	480d      	ldr	r0, [pc, #52]	; (4011ac <pmc_switch_mainck_to_xtal+0x48>)
  401178:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40117a:	0209      	lsls	r1, r1, #8
  40117c:	b289      	uxth	r1, r1
  40117e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  401182:	f023 0303 	bic.w	r3, r3, #3
  401186:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40118a:	f043 0301 	orr.w	r3, r3, #1
  40118e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401190:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401192:	4602      	mov	r2, r0
  401194:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401196:	f013 0f01 	tst.w	r3, #1
  40119a:	d0fb      	beq.n	401194 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40119c:	4a03      	ldr	r2, [pc, #12]	; (4011ac <pmc_switch_mainck_to_xtal+0x48>)
  40119e:	6a13      	ldr	r3, [r2, #32]
  4011a0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4011a8:	6213      	str	r3, [r2, #32]
  4011aa:	4770      	bx	lr
  4011ac:	400e0400 	.word	0x400e0400
  4011b0:	fec8fffc 	.word	0xfec8fffc
  4011b4:	01370002 	.word	0x01370002

004011b8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4011b8:	4b02      	ldr	r3, [pc, #8]	; (4011c4 <pmc_osc_is_ready_mainck+0xc>)
  4011ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4011bc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4011c0:	4770      	bx	lr
  4011c2:	bf00      	nop
  4011c4:	400e0400 	.word	0x400e0400

004011c8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4011c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4011cc:	4b01      	ldr	r3, [pc, #4]	; (4011d4 <pmc_disable_pllack+0xc>)
  4011ce:	629a      	str	r2, [r3, #40]	; 0x28
  4011d0:	4770      	bx	lr
  4011d2:	bf00      	nop
  4011d4:	400e0400 	.word	0x400e0400

004011d8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4011d8:	4b02      	ldr	r3, [pc, #8]	; (4011e4 <pmc_is_locked_pllack+0xc>)
  4011da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4011dc:	f000 0002 	and.w	r0, r0, #2
  4011e0:	4770      	bx	lr
  4011e2:	bf00      	nop
  4011e4:	400e0400 	.word	0x400e0400

004011e8 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4011e8:	2822      	cmp	r0, #34	; 0x22
  4011ea:	d81e      	bhi.n	40122a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4011ec:	281f      	cmp	r0, #31
  4011ee:	d80c      	bhi.n	40120a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4011f0:	4b11      	ldr	r3, [pc, #68]	; (401238 <pmc_enable_periph_clk+0x50>)
  4011f2:	699a      	ldr	r2, [r3, #24]
  4011f4:	2301      	movs	r3, #1
  4011f6:	4083      	lsls	r3, r0
  4011f8:	4393      	bics	r3, r2
  4011fa:	d018      	beq.n	40122e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4011fc:	2301      	movs	r3, #1
  4011fe:	fa03 f000 	lsl.w	r0, r3, r0
  401202:	4b0d      	ldr	r3, [pc, #52]	; (401238 <pmc_enable_periph_clk+0x50>)
  401204:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401206:	2000      	movs	r0, #0
  401208:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40120a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40120c:	4b0a      	ldr	r3, [pc, #40]	; (401238 <pmc_enable_periph_clk+0x50>)
  40120e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401212:	2301      	movs	r3, #1
  401214:	4083      	lsls	r3, r0
  401216:	4393      	bics	r3, r2
  401218:	d00b      	beq.n	401232 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40121a:	2301      	movs	r3, #1
  40121c:	fa03 f000 	lsl.w	r0, r3, r0
  401220:	4b05      	ldr	r3, [pc, #20]	; (401238 <pmc_enable_periph_clk+0x50>)
  401222:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401226:	2000      	movs	r0, #0
  401228:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40122a:	2001      	movs	r0, #1
  40122c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40122e:	2000      	movs	r0, #0
  401230:	4770      	bx	lr
  401232:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401234:	4770      	bx	lr
  401236:	bf00      	nop
  401238:	400e0400 	.word	0x400e0400

0040123c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40123c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401240:	6043      	str	r3, [r0, #4]
  401242:	4770      	bx	lr

00401244 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401244:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401246:	23ac      	movs	r3, #172	; 0xac
  401248:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40124a:	680b      	ldr	r3, [r1, #0]
  40124c:	684a      	ldr	r2, [r1, #4]
  40124e:	fbb3 f3f2 	udiv	r3, r3, r2
  401252:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401254:	1e5c      	subs	r4, r3, #1
  401256:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40125a:	4294      	cmp	r4, r2
  40125c:	d80a      	bhi.n	401274 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40125e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401260:	688b      	ldr	r3, [r1, #8]
  401262:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401264:	f240 2302 	movw	r3, #514	; 0x202
  401268:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40126c:	2350      	movs	r3, #80	; 0x50
  40126e:	6003      	str	r3, [r0, #0]

	return 0;
  401270:	2000      	movs	r0, #0
  401272:	e000      	b.n	401276 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  401274:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  401276:	bc10      	pop	{r4}
  401278:	4770      	bx	lr
  40127a:	bf00      	nop

0040127c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40127c:	6943      	ldr	r3, [r0, #20]
  40127e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401282:	bf1a      	itte	ne
  401284:	61c1      	strne	r1, [r0, #28]
	return 0;
  401286:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401288:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40128a:	4770      	bx	lr

0040128c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40128c:	6943      	ldr	r3, [r0, #20]
  40128e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401292:	bf1d      	ittte	ne
  401294:	6983      	ldrne	r3, [r0, #24]
  401296:	700b      	strbne	r3, [r1, #0]
	return 0;
  401298:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  40129a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  40129c:	4770      	bx	lr
  40129e:	bf00      	nop

004012a0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4012a0:	6943      	ldr	r3, [r0, #20]
  4012a2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4012a6:	bf1d      	ittte	ne
  4012a8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4012ac:	61c1      	strne	r1, [r0, #28]
	return 0;
  4012ae:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4012b0:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4012b2:	4770      	bx	lr

004012b4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4012b4:	6943      	ldr	r3, [r0, #20]
  4012b6:	f013 0f01 	tst.w	r3, #1
  4012ba:	d005      	beq.n	4012c8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4012bc:	6983      	ldr	r3, [r0, #24]
  4012be:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4012c2:	600b      	str	r3, [r1, #0]

	return 0;
  4012c4:	2000      	movs	r0, #0
  4012c6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4012c8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4012ca:	4770      	bx	lr

004012cc <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4012cc:	b4f0      	push	{r4, r5, r6, r7}
  4012ce:	b08c      	sub	sp, #48	; 0x30
  4012d0:	4607      	mov	r7, r0
  4012d2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4012d4:	ac01      	add	r4, sp, #4
  4012d6:	4d11      	ldr	r5, [pc, #68]	; (40131c <pwm_clocks_generate+0x50>)
  4012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4012dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4012de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4012e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4012e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4012e8:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4012ea:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4012ec:	f852 3b04 	ldr.w	r3, [r2], #4
  4012f0:	fbb6 f3f3 	udiv	r3, r6, r3
  4012f4:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4012f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4012fc:	d905      	bls.n	40130a <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  4012fe:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401300:	280b      	cmp	r0, #11
  401302:	d1f3      	bne.n	4012ec <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401304:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401308:	e005      	b.n	401316 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40130a:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  40130c:	bf94      	ite	ls
  40130e:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  401312:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  401316:	b00c      	add	sp, #48	; 0x30
  401318:	bcf0      	pop	{r4, r5, r6, r7}
  40131a:	4770      	bx	lr
  40131c:	00404bb8 	.word	0x00404bb8

00401320 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401320:	b570      	push	{r4, r5, r6, lr}
  401322:	4606      	mov	r6, r0
  401324:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  401326:	6808      	ldr	r0, [r1, #0]
  401328:	b140      	cbz	r0, 40133c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40132a:	6889      	ldr	r1, [r1, #8]
  40132c:	f7ff ffce 	bl	4012cc <pwm_clocks_generate>
  401330:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  401332:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401336:	4298      	cmp	r0, r3
  401338:	d101      	bne.n	40133e <pwm_init+0x1e>
  40133a:	e00e      	b.n	40135a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  40133c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40133e:	6860      	ldr	r0, [r4, #4]
  401340:	b140      	cbz	r0, 401354 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401342:	68a1      	ldr	r1, [r4, #8]
  401344:	f7ff ffc2 	bl	4012cc <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  401348:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40134c:	4298      	cmp	r0, r3
  40134e:	d007      	beq.n	401360 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  401350:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  401354:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  401356:	2000      	movs	r0, #0
  401358:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40135a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40135e:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401360:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  401364:	bd70      	pop	{r4, r5, r6, pc}
  401366:	bf00      	nop

00401368 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401368:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40136a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40136c:	684a      	ldr	r2, [r1, #4]
  40136e:	f002 020f 	and.w	r2, r2, #15
  401372:	8a8c      	ldrh	r4, [r1, #20]
  401374:	4322      	orrs	r2, r4
  401376:	890c      	ldrh	r4, [r1, #8]
  401378:	4322      	orrs	r2, r4
  40137a:	7a8c      	ldrb	r4, [r1, #10]
  40137c:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  401380:	7d8c      	ldrb	r4, [r1, #22]
  401382:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  401386:	7dcc      	ldrb	r4, [r1, #23]
  401388:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  40138c:	7e0c      	ldrb	r4, [r1, #24]
  40138e:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  401392:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401396:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  40139a:	68ca      	ldr	r2, [r1, #12]
  40139c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4013a0:	690a      	ldr	r2, [r1, #16]
  4013a2:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4013a6:	7d8a      	ldrb	r2, [r1, #22]
  4013a8:	b13a      	cbz	r2, 4013ba <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4013aa:	8b8c      	ldrh	r4, [r1, #28]
  4013ac:	8b4a      	ldrh	r2, [r1, #26]
  4013ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4013b2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4013b6:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4013ba:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4013bc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  4013c0:	409a      	lsls	r2, r3
  4013c2:	43d2      	mvns	r2, r2
  4013c4:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4013c8:	7fcc      	ldrb	r4, [r1, #31]
  4013ca:	fa04 f603 	lsl.w	r6, r4, r3
  4013ce:	7f8c      	ldrb	r4, [r1, #30]
  4013d0:	409c      	lsls	r4, r3
  4013d2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4013d6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4013d8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4013da:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4013dc:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4013de:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4013e2:	fa04 f503 	lsl.w	r5, r4, r3
  4013e6:	f891 4020 	ldrb.w	r4, [r1, #32]
  4013ea:	409c      	lsls	r4, r3
  4013ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4013f0:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4013f2:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4013f4:	2201      	movs	r2, #1
  4013f6:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  4013f8:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4013fc:	b11c      	cbz	r4, 401406 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  4013fe:	6a04      	ldr	r4, [r0, #32]
  401400:	4314      	orrs	r4, r2
  401402:	6204      	str	r4, [r0, #32]
  401404:	e003      	b.n	40140e <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  401406:	6a04      	ldr	r4, [r0, #32]
  401408:	ea24 0402 	bic.w	r4, r4, r2
  40140c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40140e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  401412:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  401414:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401416:	bf0c      	ite	eq
  401418:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  40141a:	4394      	bicne	r4, r2
  40141c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  40141e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  401422:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  401424:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401426:	bf0c      	ite	eq
  401428:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  40142c:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  401430:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401432:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401434:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  401436:	22ff      	movs	r2, #255	; 0xff
  401438:	409a      	lsls	r2, r3
  40143a:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  40143e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  401442:	fa01 f303 	lsl.w	r3, r1, r3
  401446:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  401448:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  40144a:	2000      	movs	r0, #0
  40144c:	bc70      	pop	{r4, r5, r6}
  40144e:	4770      	bx	lr

00401450 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401450:	690b      	ldr	r3, [r1, #16]
  401452:	4293      	cmp	r3, r2
  401454:	d307      	bcc.n	401466 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  401456:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401458:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  40145a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40145e:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  401462:	2000      	movs	r0, #0
  401464:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  401466:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  40146a:	4770      	bx	lr

0040146c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  40146c:	2301      	movs	r3, #1
  40146e:	fa03 f101 	lsl.w	r1, r3, r1
  401472:	6041      	str	r1, [r0, #4]
  401474:	4770      	bx	lr
  401476:	bf00      	nop

00401478 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  401478:	2301      	movs	r3, #1
  40147a:	fa03 f101 	lsl.w	r1, r3, r1
  40147e:	6081      	str	r1, [r0, #8]
  401480:	4770      	bx	lr
  401482:	bf00      	nop

00401484 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401484:	e7fe      	b.n	401484 <Dummy_Handler>
  401486:	bf00      	nop

00401488 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401488:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40148a:	4b20      	ldr	r3, [pc, #128]	; (40150c <Reset_Handler+0x84>)
  40148c:	4a20      	ldr	r2, [pc, #128]	; (401510 <Reset_Handler+0x88>)
  40148e:	429a      	cmp	r2, r3
  401490:	d912      	bls.n	4014b8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  401492:	4b20      	ldr	r3, [pc, #128]	; (401514 <Reset_Handler+0x8c>)
  401494:	4a1d      	ldr	r2, [pc, #116]	; (40150c <Reset_Handler+0x84>)
  401496:	429a      	cmp	r2, r3
  401498:	d21e      	bcs.n	4014d8 <Reset_Handler+0x50>
  40149a:	4611      	mov	r1, r2
  40149c:	3b01      	subs	r3, #1
  40149e:	1a9b      	subs	r3, r3, r2
  4014a0:	f023 0303 	bic.w	r3, r3, #3
  4014a4:	3304      	adds	r3, #4
  4014a6:	4a1a      	ldr	r2, [pc, #104]	; (401510 <Reset_Handler+0x88>)
  4014a8:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4014aa:	f852 0b04 	ldr.w	r0, [r2], #4
  4014ae:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4014b2:	429a      	cmp	r2, r3
  4014b4:	d1f9      	bne.n	4014aa <Reset_Handler+0x22>
  4014b6:	e00f      	b.n	4014d8 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4014b8:	4b14      	ldr	r3, [pc, #80]	; (40150c <Reset_Handler+0x84>)
  4014ba:	4a15      	ldr	r2, [pc, #84]	; (401510 <Reset_Handler+0x88>)
  4014bc:	429a      	cmp	r2, r3
  4014be:	d20b      	bcs.n	4014d8 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4014c0:	4b14      	ldr	r3, [pc, #80]	; (401514 <Reset_Handler+0x8c>)
  4014c2:	4a12      	ldr	r2, [pc, #72]	; (40150c <Reset_Handler+0x84>)
  4014c4:	1a9a      	subs	r2, r3, r2
  4014c6:	4814      	ldr	r0, [pc, #80]	; (401518 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4014c8:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4014ca:	b12a      	cbz	r2, 4014d8 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  4014cc:	f851 2904 	ldr.w	r2, [r1], #-4
  4014d0:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4014d4:	4281      	cmp	r1, r0
  4014d6:	d1f9      	bne.n	4014cc <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4014d8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4014da:	4b10      	ldr	r3, [pc, #64]	; (40151c <Reset_Handler+0x94>)
  4014dc:	4a10      	ldr	r2, [pc, #64]	; (401520 <Reset_Handler+0x98>)
  4014de:	429a      	cmp	r2, r3
  4014e0:	d20b      	bcs.n	4014fa <Reset_Handler+0x72>
  4014e2:	1d13      	adds	r3, r2, #4
  4014e4:	4a0f      	ldr	r2, [pc, #60]	; (401524 <Reset_Handler+0x9c>)
  4014e6:	1ad2      	subs	r2, r2, r3
  4014e8:	f022 0203 	bic.w	r2, r2, #3
  4014ec:	441a      	add	r2, r3
  4014ee:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4014f0:	2100      	movs	r1, #0
  4014f2:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4014f6:	429a      	cmp	r2, r3
  4014f8:	d1fb      	bne.n	4014f2 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4014fa:	4b0b      	ldr	r3, [pc, #44]	; (401528 <Reset_Handler+0xa0>)
  4014fc:	4a0b      	ldr	r2, [pc, #44]	; (40152c <Reset_Handler+0xa4>)
  4014fe:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401500:	f000 f912 	bl	401728 <__libc_init_array>

	/* Branch to main function */
	main();
  401504:	f7fe ff40 	bl	400388 <main>
  401508:	e7fe      	b.n	401508 <Reset_Handler+0x80>
  40150a:	bf00      	nop
  40150c:	20000000 	.word	0x20000000
  401510:	00404ed4 	.word	0x00404ed4
  401514:	200001e0 	.word	0x200001e0
  401518:	00404ed0 	.word	0x00404ed0
  40151c:	200004b8 	.word	0x200004b8
  401520:	200001e0 	.word	0x200001e0
  401524:	200004bb 	.word	0x200004bb
  401528:	e000ed00 	.word	0xe000ed00
  40152c:	00400000 	.word	0x00400000

00401530 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401530:	4b3d      	ldr	r3, [pc, #244]	; (401628 <SystemCoreClockUpdate+0xf8>)
  401532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401534:	f003 0303 	and.w	r3, r3, #3
  401538:	2b03      	cmp	r3, #3
  40153a:	d85d      	bhi.n	4015f8 <SystemCoreClockUpdate+0xc8>
  40153c:	e8df f003 	tbb	[pc, r3]
  401540:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401544:	4b39      	ldr	r3, [pc, #228]	; (40162c <SystemCoreClockUpdate+0xfc>)
  401546:	695b      	ldr	r3, [r3, #20]
  401548:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40154c:	bf14      	ite	ne
  40154e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401552:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401556:	4b36      	ldr	r3, [pc, #216]	; (401630 <SystemCoreClockUpdate+0x100>)
  401558:	601a      	str	r2, [r3, #0]
  40155a:	e04d      	b.n	4015f8 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40155c:	4b32      	ldr	r3, [pc, #200]	; (401628 <SystemCoreClockUpdate+0xf8>)
  40155e:	6a1b      	ldr	r3, [r3, #32]
  401560:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401564:	d003      	beq.n	40156e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401566:	4a33      	ldr	r2, [pc, #204]	; (401634 <SystemCoreClockUpdate+0x104>)
  401568:	4b31      	ldr	r3, [pc, #196]	; (401630 <SystemCoreClockUpdate+0x100>)
  40156a:	601a      	str	r2, [r3, #0]
  40156c:	e044      	b.n	4015f8 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40156e:	4a32      	ldr	r2, [pc, #200]	; (401638 <SystemCoreClockUpdate+0x108>)
  401570:	4b2f      	ldr	r3, [pc, #188]	; (401630 <SystemCoreClockUpdate+0x100>)
  401572:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401574:	4b2c      	ldr	r3, [pc, #176]	; (401628 <SystemCoreClockUpdate+0xf8>)
  401576:	6a1b      	ldr	r3, [r3, #32]
  401578:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40157c:	2b10      	cmp	r3, #16
  40157e:	d002      	beq.n	401586 <SystemCoreClockUpdate+0x56>
  401580:	2b20      	cmp	r3, #32
  401582:	d004      	beq.n	40158e <SystemCoreClockUpdate+0x5e>
  401584:	e038      	b.n	4015f8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401586:	4a2d      	ldr	r2, [pc, #180]	; (40163c <SystemCoreClockUpdate+0x10c>)
  401588:	4b29      	ldr	r3, [pc, #164]	; (401630 <SystemCoreClockUpdate+0x100>)
  40158a:	601a      	str	r2, [r3, #0]
			break;
  40158c:	e034      	b.n	4015f8 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40158e:	4a29      	ldr	r2, [pc, #164]	; (401634 <SystemCoreClockUpdate+0x104>)
  401590:	4b27      	ldr	r3, [pc, #156]	; (401630 <SystemCoreClockUpdate+0x100>)
  401592:	601a      	str	r2, [r3, #0]
			break;
  401594:	e030      	b.n	4015f8 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401596:	4b24      	ldr	r3, [pc, #144]	; (401628 <SystemCoreClockUpdate+0xf8>)
  401598:	6a1b      	ldr	r3, [r3, #32]
  40159a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40159e:	d003      	beq.n	4015a8 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4015a0:	4a24      	ldr	r2, [pc, #144]	; (401634 <SystemCoreClockUpdate+0x104>)
  4015a2:	4b23      	ldr	r3, [pc, #140]	; (401630 <SystemCoreClockUpdate+0x100>)
  4015a4:	601a      	str	r2, [r3, #0]
  4015a6:	e012      	b.n	4015ce <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4015a8:	4a23      	ldr	r2, [pc, #140]	; (401638 <SystemCoreClockUpdate+0x108>)
  4015aa:	4b21      	ldr	r3, [pc, #132]	; (401630 <SystemCoreClockUpdate+0x100>)
  4015ac:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4015ae:	4b1e      	ldr	r3, [pc, #120]	; (401628 <SystemCoreClockUpdate+0xf8>)
  4015b0:	6a1b      	ldr	r3, [r3, #32]
  4015b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015b6:	2b10      	cmp	r3, #16
  4015b8:	d002      	beq.n	4015c0 <SystemCoreClockUpdate+0x90>
  4015ba:	2b20      	cmp	r3, #32
  4015bc:	d004      	beq.n	4015c8 <SystemCoreClockUpdate+0x98>
  4015be:	e006      	b.n	4015ce <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4015c0:	4a1e      	ldr	r2, [pc, #120]	; (40163c <SystemCoreClockUpdate+0x10c>)
  4015c2:	4b1b      	ldr	r3, [pc, #108]	; (401630 <SystemCoreClockUpdate+0x100>)
  4015c4:	601a      	str	r2, [r3, #0]
					break;
  4015c6:	e002      	b.n	4015ce <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4015c8:	4a1a      	ldr	r2, [pc, #104]	; (401634 <SystemCoreClockUpdate+0x104>)
  4015ca:	4b19      	ldr	r3, [pc, #100]	; (401630 <SystemCoreClockUpdate+0x100>)
  4015cc:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4015ce:	4b16      	ldr	r3, [pc, #88]	; (401628 <SystemCoreClockUpdate+0xf8>)
  4015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015d2:	f003 0303 	and.w	r3, r3, #3
  4015d6:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4015d8:	4a13      	ldr	r2, [pc, #76]	; (401628 <SystemCoreClockUpdate+0xf8>)
  4015da:	bf07      	ittee	eq
  4015dc:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4015de:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4015e0:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4015e2:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4015e4:	4812      	ldr	r0, [pc, #72]	; (401630 <SystemCoreClockUpdate+0x100>)
  4015e6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4015ea:	6803      	ldr	r3, [r0, #0]
  4015ec:	fb01 3303 	mla	r3, r1, r3, r3
  4015f0:	b2d2      	uxtb	r2, r2
  4015f2:	fbb3 f3f2 	udiv	r3, r3, r2
  4015f6:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4015f8:	4b0b      	ldr	r3, [pc, #44]	; (401628 <SystemCoreClockUpdate+0xf8>)
  4015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401600:	2b70      	cmp	r3, #112	; 0x70
  401602:	d107      	bne.n	401614 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401604:	4a0a      	ldr	r2, [pc, #40]	; (401630 <SystemCoreClockUpdate+0x100>)
  401606:	6813      	ldr	r3, [r2, #0]
  401608:	490d      	ldr	r1, [pc, #52]	; (401640 <SystemCoreClockUpdate+0x110>)
  40160a:	fba1 1303 	umull	r1, r3, r1, r3
  40160e:	085b      	lsrs	r3, r3, #1
  401610:	6013      	str	r3, [r2, #0]
  401612:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401614:	4b04      	ldr	r3, [pc, #16]	; (401628 <SystemCoreClockUpdate+0xf8>)
  401616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401618:	4905      	ldr	r1, [pc, #20]	; (401630 <SystemCoreClockUpdate+0x100>)
  40161a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40161e:	680b      	ldr	r3, [r1, #0]
  401620:	40d3      	lsrs	r3, r2
  401622:	600b      	str	r3, [r1, #0]
  401624:	4770      	bx	lr
  401626:	bf00      	nop
  401628:	400e0400 	.word	0x400e0400
  40162c:	400e1410 	.word	0x400e1410
  401630:	2000000c 	.word	0x2000000c
  401634:	00b71b00 	.word	0x00b71b00
  401638:	003d0900 	.word	0x003d0900
  40163c:	007a1200 	.word	0x007a1200
  401640:	aaaaaaab 	.word	0xaaaaaaab

00401644 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401644:	4b1a      	ldr	r3, [pc, #104]	; (4016b0 <system_init_flash+0x6c>)
  401646:	4298      	cmp	r0, r3
  401648:	d807      	bhi.n	40165a <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40164a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  40164e:	4a19      	ldr	r2, [pc, #100]	; (4016b4 <system_init_flash+0x70>)
  401650:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401652:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401656:	6013      	str	r3, [r2, #0]
  401658:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40165a:	4b17      	ldr	r3, [pc, #92]	; (4016b8 <system_init_flash+0x74>)
  40165c:	4298      	cmp	r0, r3
  40165e:	d806      	bhi.n	40166e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401660:	4b16      	ldr	r3, [pc, #88]	; (4016bc <system_init_flash+0x78>)
  401662:	4a14      	ldr	r2, [pc, #80]	; (4016b4 <system_init_flash+0x70>)
  401664:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401666:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40166a:	6013      	str	r3, [r2, #0]
  40166c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40166e:	4b14      	ldr	r3, [pc, #80]	; (4016c0 <system_init_flash+0x7c>)
  401670:	4298      	cmp	r0, r3
  401672:	d806      	bhi.n	401682 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401674:	4b13      	ldr	r3, [pc, #76]	; (4016c4 <system_init_flash+0x80>)
  401676:	4a0f      	ldr	r2, [pc, #60]	; (4016b4 <system_init_flash+0x70>)
  401678:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40167a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40167e:	6013      	str	r3, [r2, #0]
  401680:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401682:	4b11      	ldr	r3, [pc, #68]	; (4016c8 <system_init_flash+0x84>)
  401684:	4298      	cmp	r0, r3
  401686:	d806      	bhi.n	401696 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401688:	4b10      	ldr	r3, [pc, #64]	; (4016cc <system_init_flash+0x88>)
  40168a:	4a0a      	ldr	r2, [pc, #40]	; (4016b4 <system_init_flash+0x70>)
  40168c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40168e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401692:	6013      	str	r3, [r2, #0]
  401694:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401696:	4b0e      	ldr	r3, [pc, #56]	; (4016d0 <system_init_flash+0x8c>)
  401698:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40169a:	bf94      	ite	ls
  40169c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4016a0:	4b0c      	ldrhi	r3, [pc, #48]	; (4016d4 <system_init_flash+0x90>)
  4016a2:	4a04      	ldr	r2, [pc, #16]	; (4016b4 <system_init_flash+0x70>)
  4016a4:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4016a6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4016aa:	6013      	str	r3, [r2, #0]
  4016ac:	4770      	bx	lr
  4016ae:	bf00      	nop
  4016b0:	01312cff 	.word	0x01312cff
  4016b4:	400e0a00 	.word	0x400e0a00
  4016b8:	026259ff 	.word	0x026259ff
  4016bc:	04000100 	.word	0x04000100
  4016c0:	039386ff 	.word	0x039386ff
  4016c4:	04000200 	.word	0x04000200
  4016c8:	04c4b3ff 	.word	0x04c4b3ff
  4016cc:	04000300 	.word	0x04000300
  4016d0:	05f5e0ff 	.word	0x05f5e0ff
  4016d4:	04000500 	.word	0x04000500

004016d8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4016d8:	4b09      	ldr	r3, [pc, #36]	; (401700 <_sbrk+0x28>)
  4016da:	681b      	ldr	r3, [r3, #0]
  4016dc:	b913      	cbnz	r3, 4016e4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4016de:	4a09      	ldr	r2, [pc, #36]	; (401704 <_sbrk+0x2c>)
  4016e0:	4b07      	ldr	r3, [pc, #28]	; (401700 <_sbrk+0x28>)
  4016e2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4016e4:	4b06      	ldr	r3, [pc, #24]	; (401700 <_sbrk+0x28>)
  4016e6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4016e8:	181a      	adds	r2, r3, r0
  4016ea:	4907      	ldr	r1, [pc, #28]	; (401708 <_sbrk+0x30>)
  4016ec:	4291      	cmp	r1, r2
  4016ee:	db04      	blt.n	4016fa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4016f0:	4610      	mov	r0, r2
  4016f2:	4a03      	ldr	r2, [pc, #12]	; (401700 <_sbrk+0x28>)
  4016f4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4016f6:	4618      	mov	r0, r3
  4016f8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4016fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4016fe:	4770      	bx	lr
  401700:	20000298 	.word	0x20000298
  401704:	200034b8 	.word	0x200034b8
  401708:	20027ffc 	.word	0x20027ffc

0040170c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401710:	4770      	bx	lr
  401712:	bf00      	nop

00401714 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401718:	604b      	str	r3, [r1, #4]

	return 0;
}
  40171a:	2000      	movs	r0, #0
  40171c:	4770      	bx	lr
  40171e:	bf00      	nop

00401720 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401720:	2001      	movs	r0, #1
  401722:	4770      	bx	lr

00401724 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401724:	2000      	movs	r0, #0
  401726:	4770      	bx	lr

00401728 <__libc_init_array>:
  401728:	b570      	push	{r4, r5, r6, lr}
  40172a:	4b0e      	ldr	r3, [pc, #56]	; (401764 <__libc_init_array+0x3c>)
  40172c:	4c0e      	ldr	r4, [pc, #56]	; (401768 <__libc_init_array+0x40>)
  40172e:	1ae4      	subs	r4, r4, r3
  401730:	10a4      	asrs	r4, r4, #2
  401732:	2500      	movs	r5, #0
  401734:	461e      	mov	r6, r3
  401736:	42a5      	cmp	r5, r4
  401738:	d004      	beq.n	401744 <__libc_init_array+0x1c>
  40173a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40173e:	4798      	blx	r3
  401740:	3501      	adds	r5, #1
  401742:	e7f8      	b.n	401736 <__libc_init_array+0xe>
  401744:	f003 fbb0 	bl	404ea8 <_init>
  401748:	4c08      	ldr	r4, [pc, #32]	; (40176c <__libc_init_array+0x44>)
  40174a:	4b09      	ldr	r3, [pc, #36]	; (401770 <__libc_init_array+0x48>)
  40174c:	1ae4      	subs	r4, r4, r3
  40174e:	10a4      	asrs	r4, r4, #2
  401750:	2500      	movs	r5, #0
  401752:	461e      	mov	r6, r3
  401754:	42a5      	cmp	r5, r4
  401756:	d004      	beq.n	401762 <__libc_init_array+0x3a>
  401758:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40175c:	4798      	blx	r3
  40175e:	3501      	adds	r5, #1
  401760:	e7f8      	b.n	401754 <__libc_init_array+0x2c>
  401762:	bd70      	pop	{r4, r5, r6, pc}
  401764:	00404eb4 	.word	0x00404eb4
  401768:	00404eb4 	.word	0x00404eb4
  40176c:	00404eb8 	.word	0x00404eb8
  401770:	00404eb4 	.word	0x00404eb4

00401774 <memcpy>:
  401774:	b510      	push	{r4, lr}
  401776:	1e43      	subs	r3, r0, #1
  401778:	440a      	add	r2, r1
  40177a:	4291      	cmp	r1, r2
  40177c:	d004      	beq.n	401788 <memcpy+0x14>
  40177e:	f811 4b01 	ldrb.w	r4, [r1], #1
  401782:	f803 4f01 	strb.w	r4, [r3, #1]!
  401786:	e7f8      	b.n	40177a <memcpy+0x6>
  401788:	bd10      	pop	{r4, pc}

0040178a <memset>:
  40178a:	4402      	add	r2, r0
  40178c:	4603      	mov	r3, r0
  40178e:	4293      	cmp	r3, r2
  401790:	d002      	beq.n	401798 <memset+0xe>
  401792:	f803 1b01 	strb.w	r1, [r3], #1
  401796:	e7fa      	b.n	40178e <memset+0x4>
  401798:	4770      	bx	lr

0040179a <__cvt>:
  40179a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40179e:	b088      	sub	sp, #32
  4017a0:	2b00      	cmp	r3, #0
  4017a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
  4017a4:	9912      	ldr	r1, [sp, #72]	; 0x48
  4017a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4017a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4017ac:	461e      	mov	r6, r3
  4017ae:	f027 0720 	bic.w	r7, r7, #32
  4017b2:	bfbb      	ittet	lt
  4017b4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4017b8:	461e      	movlt	r6, r3
  4017ba:	2300      	movge	r3, #0
  4017bc:	232d      	movlt	r3, #45	; 0x2d
  4017be:	2f46      	cmp	r7, #70	; 0x46
  4017c0:	4614      	mov	r4, r2
  4017c2:	700b      	strb	r3, [r1, #0]
  4017c4:	d003      	beq.n	4017ce <__cvt+0x34>
  4017c6:	2f45      	cmp	r7, #69	; 0x45
  4017c8:	d103      	bne.n	4017d2 <__cvt+0x38>
  4017ca:	3501      	adds	r5, #1
  4017cc:	e001      	b.n	4017d2 <__cvt+0x38>
  4017ce:	2303      	movs	r3, #3
  4017d0:	e000      	b.n	4017d4 <__cvt+0x3a>
  4017d2:	2302      	movs	r3, #2
  4017d4:	aa07      	add	r2, sp, #28
  4017d6:	9204      	str	r2, [sp, #16]
  4017d8:	aa06      	add	r2, sp, #24
  4017da:	9203      	str	r2, [sp, #12]
  4017dc:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4017e0:	4622      	mov	r2, r4
  4017e2:	4633      	mov	r3, r6
  4017e4:	f000 fed0 	bl	402588 <_dtoa_r>
  4017e8:	2f47      	cmp	r7, #71	; 0x47
  4017ea:	4680      	mov	r8, r0
  4017ec:	d102      	bne.n	4017f4 <__cvt+0x5a>
  4017ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4017f0:	07db      	lsls	r3, r3, #31
  4017f2:	d528      	bpl.n	401846 <__cvt+0xac>
  4017f4:	2f46      	cmp	r7, #70	; 0x46
  4017f6:	eb08 0905 	add.w	r9, r8, r5
  4017fa:	d111      	bne.n	401820 <__cvt+0x86>
  4017fc:	f898 3000 	ldrb.w	r3, [r8]
  401800:	2b30      	cmp	r3, #48	; 0x30
  401802:	d10a      	bne.n	40181a <__cvt+0x80>
  401804:	2200      	movs	r2, #0
  401806:	2300      	movs	r3, #0
  401808:	4620      	mov	r0, r4
  40180a:	4631      	mov	r1, r6
  40180c:	f003 f872 	bl	4048f4 <__aeabi_dcmpeq>
  401810:	b918      	cbnz	r0, 40181a <__cvt+0x80>
  401812:	f1c5 0501 	rsb	r5, r5, #1
  401816:	f8ca 5000 	str.w	r5, [sl]
  40181a:	f8da 3000 	ldr.w	r3, [sl]
  40181e:	4499      	add	r9, r3
  401820:	2200      	movs	r2, #0
  401822:	2300      	movs	r3, #0
  401824:	4620      	mov	r0, r4
  401826:	4631      	mov	r1, r6
  401828:	f003 f864 	bl	4048f4 <__aeabi_dcmpeq>
  40182c:	b908      	cbnz	r0, 401832 <__cvt+0x98>
  40182e:	2230      	movs	r2, #48	; 0x30
  401830:	e002      	b.n	401838 <__cvt+0x9e>
  401832:	f8cd 901c 	str.w	r9, [sp, #28]
  401836:	e006      	b.n	401846 <__cvt+0xac>
  401838:	9b07      	ldr	r3, [sp, #28]
  40183a:	4599      	cmp	r9, r3
  40183c:	d903      	bls.n	401846 <__cvt+0xac>
  40183e:	1c59      	adds	r1, r3, #1
  401840:	9107      	str	r1, [sp, #28]
  401842:	701a      	strb	r2, [r3, #0]
  401844:	e7f8      	b.n	401838 <__cvt+0x9e>
  401846:	9b07      	ldr	r3, [sp, #28]
  401848:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40184a:	ebc8 0303 	rsb	r3, r8, r3
  40184e:	4640      	mov	r0, r8
  401850:	6013      	str	r3, [r2, #0]
  401852:	b008      	add	sp, #32
  401854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401858 <__exponent>:
  401858:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40185a:	4603      	mov	r3, r0
  40185c:	2900      	cmp	r1, #0
  40185e:	bfb8      	it	lt
  401860:	4249      	neglt	r1, r1
  401862:	f803 2b02 	strb.w	r2, [r3], #2
  401866:	bfb4      	ite	lt
  401868:	222d      	movlt	r2, #45	; 0x2d
  40186a:	222b      	movge	r2, #43	; 0x2b
  40186c:	2909      	cmp	r1, #9
  40186e:	7042      	strb	r2, [r0, #1]
  401870:	dd19      	ble.n	4018a6 <__exponent+0x4e>
  401872:	f10d 0207 	add.w	r2, sp, #7
  401876:	4616      	mov	r6, r2
  401878:	250a      	movs	r5, #10
  40187a:	fb91 f4f5 	sdiv	r4, r1, r5
  40187e:	fb05 1114 	mls	r1, r5, r4, r1
  401882:	3130      	adds	r1, #48	; 0x30
  401884:	2c09      	cmp	r4, #9
  401886:	f802 1d01 	strb.w	r1, [r2, #-1]!
  40188a:	4621      	mov	r1, r4
  40188c:	dcf5      	bgt.n	40187a <__exponent+0x22>
  40188e:	3130      	adds	r1, #48	; 0x30
  401890:	1e54      	subs	r4, r2, #1
  401892:	f802 1c01 	strb.w	r1, [r2, #-1]
  401896:	42b4      	cmp	r4, r6
  401898:	461a      	mov	r2, r3
  40189a:	d20a      	bcs.n	4018b2 <__exponent+0x5a>
  40189c:	f814 2b01 	ldrb.w	r2, [r4], #1
  4018a0:	f803 2b01 	strb.w	r2, [r3], #1
  4018a4:	e7f7      	b.n	401896 <__exponent+0x3e>
  4018a6:	2430      	movs	r4, #48	; 0x30
  4018a8:	461a      	mov	r2, r3
  4018aa:	4421      	add	r1, r4
  4018ac:	f802 4b02 	strb.w	r4, [r2], #2
  4018b0:	7059      	strb	r1, [r3, #1]
  4018b2:	1a10      	subs	r0, r2, r0
  4018b4:	b002      	add	sp, #8
  4018b6:	bd70      	pop	{r4, r5, r6, pc}

004018b8 <_printf_float>:
  4018b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4018bc:	b091      	sub	sp, #68	; 0x44
  4018be:	460c      	mov	r4, r1
  4018c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  4018c4:	4616      	mov	r6, r2
  4018c6:	461f      	mov	r7, r3
  4018c8:	4605      	mov	r5, r0
  4018ca:	f001 fd75 	bl	4033b8 <_localeconv_r>
  4018ce:	6803      	ldr	r3, [r0, #0]
  4018d0:	9309      	str	r3, [sp, #36]	; 0x24
  4018d2:	4618      	mov	r0, r3
  4018d4:	f000 fcfc 	bl	4022d0 <strlen>
  4018d8:	2300      	movs	r3, #0
  4018da:	930e      	str	r3, [sp, #56]	; 0x38
  4018dc:	f8d8 3000 	ldr.w	r3, [r8]
  4018e0:	900a      	str	r0, [sp, #40]	; 0x28
  4018e2:	3307      	adds	r3, #7
  4018e4:	f023 0307 	bic.w	r3, r3, #7
  4018e8:	f103 0208 	add.w	r2, r3, #8
  4018ec:	f894 9018 	ldrb.w	r9, [r4, #24]
  4018f0:	f8d4 b000 	ldr.w	fp, [r4]
  4018f4:	f8c8 2000 	str.w	r2, [r8]
  4018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4018fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  401900:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  401904:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  401908:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  40190c:	930b      	str	r3, [sp, #44]	; 0x2c
  40190e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401912:	4ba7      	ldr	r3, [pc, #668]	; (401bb0 <_printf_float+0x2f8>)
  401914:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401916:	4640      	mov	r0, r8
  401918:	f003 f81e 	bl	404958 <__aeabi_dcmpun>
  40191c:	b9a0      	cbnz	r0, 401948 <_printf_float+0x90>
  40191e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401922:	4ba3      	ldr	r3, [pc, #652]	; (401bb0 <_printf_float+0x2f8>)
  401924:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401926:	4640      	mov	r0, r8
  401928:	f002 fff8 	bl	40491c <__aeabi_dcmple>
  40192c:	b960      	cbnz	r0, 401948 <_printf_float+0x90>
  40192e:	2200      	movs	r2, #0
  401930:	2300      	movs	r3, #0
  401932:	4640      	mov	r0, r8
  401934:	4651      	mov	r1, sl
  401936:	f002 ffe7 	bl	404908 <__aeabi_dcmplt>
  40193a:	b110      	cbz	r0, 401942 <_printf_float+0x8a>
  40193c:	232d      	movs	r3, #45	; 0x2d
  40193e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401942:	4b9c      	ldr	r3, [pc, #624]	; (401bb4 <_printf_float+0x2fc>)
  401944:	4a9c      	ldr	r2, [pc, #624]	; (401bb8 <_printf_float+0x300>)
  401946:	e00a      	b.n	40195e <_printf_float+0xa6>
  401948:	4642      	mov	r2, r8
  40194a:	4653      	mov	r3, sl
  40194c:	4640      	mov	r0, r8
  40194e:	4651      	mov	r1, sl
  401950:	f003 f802 	bl	404958 <__aeabi_dcmpun>
  401954:	2800      	cmp	r0, #0
  401956:	f000 8192 	beq.w	401c7e <_printf_float+0x3c6>
  40195a:	4b98      	ldr	r3, [pc, #608]	; (401bbc <_printf_float+0x304>)
  40195c:	4a98      	ldr	r2, [pc, #608]	; (401bc0 <_printf_float+0x308>)
  40195e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  401962:	bf8c      	ite	hi
  401964:	4690      	movhi	r8, r2
  401966:	4698      	movls	r8, r3
  401968:	2303      	movs	r3, #3
  40196a:	6123      	str	r3, [r4, #16]
  40196c:	f02b 0304 	bic.w	r3, fp, #4
  401970:	6023      	str	r3, [r4, #0]
  401972:	f04f 0a00 	mov.w	sl, #0
  401976:	e03d      	b.n	4019f4 <_printf_float+0x13c>
  401978:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  40197c:	f000 818a 	beq.w	401c94 <_printf_float+0x3dc>
  401980:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  401984:	f000 8186 	beq.w	401c94 <_printf_float+0x3dc>
  401988:	6023      	str	r3, [r4, #0]
  40198a:	2100      	movs	r1, #0
  40198c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  401990:	9301      	str	r3, [sp, #4]
  401992:	6863      	ldr	r3, [r4, #4]
  401994:	9005      	str	r0, [sp, #20]
  401996:	9202      	str	r2, [sp, #8]
  401998:	9300      	str	r3, [sp, #0]
  40199a:	4642      	mov	r2, r8
  40199c:	4653      	mov	r3, sl
  40199e:	9106      	str	r1, [sp, #24]
  4019a0:	f8cd 9010 	str.w	r9, [sp, #16]
  4019a4:	f8cd e00c 	str.w	lr, [sp, #12]
  4019a8:	4628      	mov	r0, r5
  4019aa:	f7ff fef6 	bl	40179a <__cvt>
  4019ae:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  4019b2:	2b47      	cmp	r3, #71	; 0x47
  4019b4:	4680      	mov	r8, r0
  4019b6:	f000 8184 	beq.w	401cc2 <_printf_float+0x40a>
  4019ba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  4019be:	990d      	ldr	r1, [sp, #52]	; 0x34
  4019c0:	f200 818d 	bhi.w	401cde <_printf_float+0x426>
  4019c4:	3901      	subs	r1, #1
  4019c6:	464a      	mov	r2, r9
  4019c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4019cc:	910d      	str	r1, [sp, #52]	; 0x34
  4019ce:	f7ff ff43 	bl	401858 <__exponent>
  4019d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4019d4:	1883      	adds	r3, r0, r2
  4019d6:	2a01      	cmp	r2, #1
  4019d8:	4682      	mov	sl, r0
  4019da:	6123      	str	r3, [r4, #16]
  4019dc:	f300 817c 	bgt.w	401cd8 <_printf_float+0x420>
  4019e0:	6822      	ldr	r2, [r4, #0]
  4019e2:	07d1      	lsls	r1, r2, #31
  4019e4:	f100 8178 	bmi.w	401cd8 <_printf_float+0x420>
  4019e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4019ec:	b113      	cbz	r3, 4019f4 <_printf_float+0x13c>
  4019ee:	232d      	movs	r3, #45	; 0x2d
  4019f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4019f4:	9700      	str	r7, [sp, #0]
  4019f6:	4633      	mov	r3, r6
  4019f8:	aa0f      	add	r2, sp, #60	; 0x3c
  4019fa:	4621      	mov	r1, r4
  4019fc:	4628      	mov	r0, r5
  4019fe:	f000 f99f 	bl	401d40 <_printf_common>
  401a02:	3001      	adds	r0, #1
  401a04:	d102      	bne.n	401a0c <_printf_float+0x154>
  401a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401a0a:	e196      	b.n	401d3a <_printf_float+0x482>
  401a0c:	6823      	ldr	r3, [r4, #0]
  401a0e:	055a      	lsls	r2, r3, #21
  401a10:	d401      	bmi.n	401a16 <_printf_float+0x15e>
  401a12:	6923      	ldr	r3, [r4, #16]
  401a14:	e065      	b.n	401ae2 <_printf_float+0x22a>
  401a16:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  401a1a:	f240 80d5 	bls.w	401bc8 <_printf_float+0x310>
  401a1e:	2200      	movs	r2, #0
  401a20:	2300      	movs	r3, #0
  401a22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  401a26:	f002 ff65 	bl	4048f4 <__aeabi_dcmpeq>
  401a2a:	b378      	cbz	r0, 401a8c <_printf_float+0x1d4>
  401a2c:	2301      	movs	r3, #1
  401a2e:	4a65      	ldr	r2, [pc, #404]	; (401bc4 <_printf_float+0x30c>)
  401a30:	4631      	mov	r1, r6
  401a32:	4628      	mov	r0, r5
  401a34:	47b8      	blx	r7
  401a36:	3001      	adds	r0, #1
  401a38:	d0e5      	beq.n	401a06 <_printf_float+0x14e>
  401a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401a3e:	429a      	cmp	r2, r3
  401a40:	db0b      	blt.n	401a5a <_printf_float+0x1a2>
  401a42:	6823      	ldr	r3, [r4, #0]
  401a44:	07d8      	lsls	r0, r3, #31
  401a46:	d408      	bmi.n	401a5a <_printf_float+0x1a2>
  401a48:	6823      	ldr	r3, [r4, #0]
  401a4a:	079b      	lsls	r3, r3, #30
  401a4c:	f140 8111 	bpl.w	401c72 <_printf_float+0x3ba>
  401a50:	f04f 0800 	mov.w	r8, #0
  401a54:	f104 0919 	add.w	r9, r4, #25
  401a58:	e106      	b.n	401c68 <_printf_float+0x3b0>
  401a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401a5e:	4631      	mov	r1, r6
  401a60:	4628      	mov	r0, r5
  401a62:	47b8      	blx	r7
  401a64:	3001      	adds	r0, #1
  401a66:	d0ce      	beq.n	401a06 <_printf_float+0x14e>
  401a68:	f04f 0800 	mov.w	r8, #0
  401a6c:	f104 091a 	add.w	r9, r4, #26
  401a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401a72:	3b01      	subs	r3, #1
  401a74:	4598      	cmp	r8, r3
  401a76:	dae7      	bge.n	401a48 <_printf_float+0x190>
  401a78:	2301      	movs	r3, #1
  401a7a:	464a      	mov	r2, r9
  401a7c:	4631      	mov	r1, r6
  401a7e:	4628      	mov	r0, r5
  401a80:	47b8      	blx	r7
  401a82:	3001      	adds	r0, #1
  401a84:	d0bf      	beq.n	401a06 <_printf_float+0x14e>
  401a86:	f108 0801 	add.w	r8, r8, #1
  401a8a:	e7f1      	b.n	401a70 <_printf_float+0x1b8>
  401a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a8e:	2b00      	cmp	r3, #0
  401a90:	dc29      	bgt.n	401ae6 <_printf_float+0x22e>
  401a92:	2301      	movs	r3, #1
  401a94:	4a4b      	ldr	r2, [pc, #300]	; (401bc4 <_printf_float+0x30c>)
  401a96:	4631      	mov	r1, r6
  401a98:	4628      	mov	r0, r5
  401a9a:	47b8      	blx	r7
  401a9c:	3001      	adds	r0, #1
  401a9e:	d0b2      	beq.n	401a06 <_printf_float+0x14e>
  401aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401aa2:	b923      	cbnz	r3, 401aae <_printf_float+0x1f6>
  401aa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401aa6:	b913      	cbnz	r3, 401aae <_printf_float+0x1f6>
  401aa8:	6823      	ldr	r3, [r4, #0]
  401aaa:	07d9      	lsls	r1, r3, #31
  401aac:	d5cc      	bpl.n	401a48 <_printf_float+0x190>
  401aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401ab2:	4631      	mov	r1, r6
  401ab4:	4628      	mov	r0, r5
  401ab6:	47b8      	blx	r7
  401ab8:	3001      	adds	r0, #1
  401aba:	d0a4      	beq.n	401a06 <_printf_float+0x14e>
  401abc:	f04f 0900 	mov.w	r9, #0
  401ac0:	f104 0a1a 	add.w	sl, r4, #26
  401ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401ac6:	425b      	negs	r3, r3
  401ac8:	4599      	cmp	r9, r3
  401aca:	da09      	bge.n	401ae0 <_printf_float+0x228>
  401acc:	2301      	movs	r3, #1
  401ace:	4652      	mov	r2, sl
  401ad0:	4631      	mov	r1, r6
  401ad2:	4628      	mov	r0, r5
  401ad4:	47b8      	blx	r7
  401ad6:	3001      	adds	r0, #1
  401ad8:	d095      	beq.n	401a06 <_printf_float+0x14e>
  401ada:	f109 0901 	add.w	r9, r9, #1
  401ade:	e7f1      	b.n	401ac4 <_printf_float+0x20c>
  401ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401ae2:	4642      	mov	r2, r8
  401ae4:	e0a7      	b.n	401c36 <_printf_float+0x37e>
  401ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
  401aea:	429a      	cmp	r2, r3
  401aec:	bfa8      	it	ge
  401aee:	461a      	movge	r2, r3
  401af0:	2a00      	cmp	r2, #0
  401af2:	4691      	mov	r9, r2
  401af4:	dc06      	bgt.n	401b04 <_printf_float+0x24c>
  401af6:	f04f 0a00 	mov.w	sl, #0
  401afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  401afe:	f104 0b1a 	add.w	fp, r4, #26
  401b02:	e011      	b.n	401b28 <_printf_float+0x270>
  401b04:	4613      	mov	r3, r2
  401b06:	4631      	mov	r1, r6
  401b08:	4642      	mov	r2, r8
  401b0a:	4628      	mov	r0, r5
  401b0c:	47b8      	blx	r7
  401b0e:	3001      	adds	r0, #1
  401b10:	d1f1      	bne.n	401af6 <_printf_float+0x23e>
  401b12:	e778      	b.n	401a06 <_printf_float+0x14e>
  401b14:	2301      	movs	r3, #1
  401b16:	465a      	mov	r2, fp
  401b18:	4631      	mov	r1, r6
  401b1a:	4628      	mov	r0, r5
  401b1c:	47b8      	blx	r7
  401b1e:	3001      	adds	r0, #1
  401b20:	f43f af71 	beq.w	401a06 <_printf_float+0x14e>
  401b24:	f10a 0a01 	add.w	sl, sl, #1
  401b28:	6da3      	ldr	r3, [r4, #88]	; 0x58
  401b2a:	ebc9 0203 	rsb	r2, r9, r3
  401b2e:	4592      	cmp	sl, r2
  401b30:	dbf0      	blt.n	401b14 <_printf_float+0x25c>
  401b32:	eb08 0903 	add.w	r9, r8, r3
  401b36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b3a:	429a      	cmp	r2, r3
  401b3c:	db0f      	blt.n	401b5e <_printf_float+0x2a6>
  401b3e:	6823      	ldr	r3, [r4, #0]
  401b40:	07da      	lsls	r2, r3, #31
  401b42:	d40c      	bmi.n	401b5e <_printf_float+0x2a6>
  401b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401b48:	4498      	add	r8, r3
  401b4a:	ebc9 0808 	rsb	r8, r9, r8
  401b4e:	1a9b      	subs	r3, r3, r2
  401b50:	4598      	cmp	r8, r3
  401b52:	bfa8      	it	ge
  401b54:	4698      	movge	r8, r3
  401b56:	f1b8 0f00 	cmp.w	r8, #0
  401b5a:	dc08      	bgt.n	401b6e <_printf_float+0x2b6>
  401b5c:	e00f      	b.n	401b7e <_printf_float+0x2c6>
  401b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401b62:	4631      	mov	r1, r6
  401b64:	4628      	mov	r0, r5
  401b66:	47b8      	blx	r7
  401b68:	3001      	adds	r0, #1
  401b6a:	d1eb      	bne.n	401b44 <_printf_float+0x28c>
  401b6c:	e74b      	b.n	401a06 <_printf_float+0x14e>
  401b6e:	4643      	mov	r3, r8
  401b70:	464a      	mov	r2, r9
  401b72:	4631      	mov	r1, r6
  401b74:	4628      	mov	r0, r5
  401b76:	47b8      	blx	r7
  401b78:	3001      	adds	r0, #1
  401b7a:	f43f af44 	beq.w	401a06 <_printf_float+0x14e>
  401b7e:	f04f 0900 	mov.w	r9, #0
  401b82:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  401b86:	f104 0a1a 	add.w	sl, r4, #26
  401b8a:	e009      	b.n	401ba0 <_printf_float+0x2e8>
  401b8c:	2301      	movs	r3, #1
  401b8e:	4652      	mov	r2, sl
  401b90:	4631      	mov	r1, r6
  401b92:	4628      	mov	r0, r5
  401b94:	47b8      	blx	r7
  401b96:	3001      	adds	r0, #1
  401b98:	f43f af35 	beq.w	401a06 <_printf_float+0x14e>
  401b9c:	f109 0901 	add.w	r9, r9, #1
  401ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401ba4:	1a9b      	subs	r3, r3, r2
  401ba6:	ebc8 0303 	rsb	r3, r8, r3
  401baa:	4599      	cmp	r9, r3
  401bac:	dbee      	blt.n	401b8c <_printf_float+0x2d4>
  401bae:	e74b      	b.n	401a48 <_printf_float+0x190>
  401bb0:	7fefffff 	.word	0x7fefffff
  401bb4:	00404be8 	.word	0x00404be8
  401bb8:	00404bec 	.word	0x00404bec
  401bbc:	00404bf0 	.word	0x00404bf0
  401bc0:	00404bf4 	.word	0x00404bf4
  401bc4:	00404bf8 	.word	0x00404bf8
  401bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401bca:	2a01      	cmp	r2, #1
  401bcc:	dc01      	bgt.n	401bd2 <_printf_float+0x31a>
  401bce:	07db      	lsls	r3, r3, #31
  401bd0:	d538      	bpl.n	401c44 <_printf_float+0x38c>
  401bd2:	2301      	movs	r3, #1
  401bd4:	4642      	mov	r2, r8
  401bd6:	4631      	mov	r1, r6
  401bd8:	4628      	mov	r0, r5
  401bda:	47b8      	blx	r7
  401bdc:	3001      	adds	r0, #1
  401bde:	f43f af12 	beq.w	401a06 <_printf_float+0x14e>
  401be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401be6:	4631      	mov	r1, r6
  401be8:	4628      	mov	r0, r5
  401bea:	47b8      	blx	r7
  401bec:	3001      	adds	r0, #1
  401bee:	f43f af0a 	beq.w	401a06 <_printf_float+0x14e>
  401bf2:	2200      	movs	r2, #0
  401bf4:	2300      	movs	r3, #0
  401bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  401bfa:	f002 fe7b 	bl	4048f4 <__aeabi_dcmpeq>
  401bfe:	b120      	cbz	r0, 401c0a <_printf_float+0x352>
  401c00:	f04f 0800 	mov.w	r8, #0
  401c04:	f104 091a 	add.w	r9, r4, #26
  401c08:	e00e      	b.n	401c28 <_printf_float+0x370>
  401c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c0c:	f108 0201 	add.w	r2, r8, #1
  401c10:	3b01      	subs	r3, #1
  401c12:	e019      	b.n	401c48 <_printf_float+0x390>
  401c14:	2301      	movs	r3, #1
  401c16:	464a      	mov	r2, r9
  401c18:	4631      	mov	r1, r6
  401c1a:	4628      	mov	r0, r5
  401c1c:	47b8      	blx	r7
  401c1e:	3001      	adds	r0, #1
  401c20:	f43f aef1 	beq.w	401a06 <_printf_float+0x14e>
  401c24:	f108 0801 	add.w	r8, r8, #1
  401c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c2a:	3b01      	subs	r3, #1
  401c2c:	4598      	cmp	r8, r3
  401c2e:	dbf1      	blt.n	401c14 <_printf_float+0x35c>
  401c30:	4653      	mov	r3, sl
  401c32:	f104 0250 	add.w	r2, r4, #80	; 0x50
  401c36:	4631      	mov	r1, r6
  401c38:	4628      	mov	r0, r5
  401c3a:	47b8      	blx	r7
  401c3c:	3001      	adds	r0, #1
  401c3e:	f47f af03 	bne.w	401a48 <_printf_float+0x190>
  401c42:	e6e0      	b.n	401a06 <_printf_float+0x14e>
  401c44:	2301      	movs	r3, #1
  401c46:	4642      	mov	r2, r8
  401c48:	4631      	mov	r1, r6
  401c4a:	4628      	mov	r0, r5
  401c4c:	47b8      	blx	r7
  401c4e:	3001      	adds	r0, #1
  401c50:	d1ee      	bne.n	401c30 <_printf_float+0x378>
  401c52:	e6d8      	b.n	401a06 <_printf_float+0x14e>
  401c54:	2301      	movs	r3, #1
  401c56:	464a      	mov	r2, r9
  401c58:	4631      	mov	r1, r6
  401c5a:	4628      	mov	r0, r5
  401c5c:	47b8      	blx	r7
  401c5e:	3001      	adds	r0, #1
  401c60:	f43f aed1 	beq.w	401a06 <_printf_float+0x14e>
  401c64:	f108 0801 	add.w	r8, r8, #1
  401c68:	68e3      	ldr	r3, [r4, #12]
  401c6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401c6c:	1a9b      	subs	r3, r3, r2
  401c6e:	4598      	cmp	r8, r3
  401c70:	dbf0      	blt.n	401c54 <_printf_float+0x39c>
  401c72:	68e0      	ldr	r0, [r4, #12]
  401c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c76:	4298      	cmp	r0, r3
  401c78:	bfb8      	it	lt
  401c7a:	4618      	movlt	r0, r3
  401c7c:	e05d      	b.n	401d3a <_printf_float+0x482>
  401c7e:	6862      	ldr	r2, [r4, #4]
  401c80:	1c53      	adds	r3, r2, #1
  401c82:	a80e      	add	r0, sp, #56	; 0x38
  401c84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  401c88:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  401c8c:	f47f ae74 	bne.w	401978 <_printf_float+0xc0>
  401c90:	2206      	movs	r2, #6
  401c92:	e001      	b.n	401c98 <_printf_float+0x3e0>
  401c94:	b912      	cbnz	r2, 401c9c <_printf_float+0x3e4>
  401c96:	2201      	movs	r2, #1
  401c98:	6062      	str	r2, [r4, #4]
  401c9a:	e675      	b.n	401988 <_printf_float+0xd0>
  401c9c:	2100      	movs	r1, #0
  401c9e:	9106      	str	r1, [sp, #24]
  401ca0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  401ca4:	e88d 000c 	stmia.w	sp, {r2, r3}
  401ca8:	6023      	str	r3, [r4, #0]
  401caa:	9005      	str	r0, [sp, #20]
  401cac:	4642      	mov	r2, r8
  401cae:	f8cd 9010 	str.w	r9, [sp, #16]
  401cb2:	f8cd e00c 	str.w	lr, [sp, #12]
  401cb6:	9102      	str	r1, [sp, #8]
  401cb8:	4653      	mov	r3, sl
  401cba:	4628      	mov	r0, r5
  401cbc:	f7ff fd6d 	bl	40179a <__cvt>
  401cc0:	4680      	mov	r8, r0
  401cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401cc4:	1cd8      	adds	r0, r3, #3
  401cc6:	db02      	blt.n	401cce <_printf_float+0x416>
  401cc8:	6862      	ldr	r2, [r4, #4]
  401cca:	4293      	cmp	r3, r2
  401ccc:	dd1d      	ble.n	401d0a <_printf_float+0x452>
  401cce:	f1a9 0902 	sub.w	r9, r9, #2
  401cd2:	fa5f f989 	uxtb.w	r9, r9
  401cd6:	e670      	b.n	4019ba <_printf_float+0x102>
  401cd8:	3301      	adds	r3, #1
  401cda:	6123      	str	r3, [r4, #16]
  401cdc:	e684      	b.n	4019e8 <_printf_float+0x130>
  401cde:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  401ce2:	d114      	bne.n	401d0e <_printf_float+0x456>
  401ce4:	2900      	cmp	r1, #0
  401ce6:	6863      	ldr	r3, [r4, #4]
  401ce8:	dd07      	ble.n	401cfa <_printf_float+0x442>
  401cea:	6121      	str	r1, [r4, #16]
  401cec:	b913      	cbnz	r3, 401cf4 <_printf_float+0x43c>
  401cee:	6822      	ldr	r2, [r4, #0]
  401cf0:	07d2      	lsls	r2, r2, #31
  401cf2:	d51d      	bpl.n	401d30 <_printf_float+0x478>
  401cf4:	3301      	adds	r3, #1
  401cf6:	440b      	add	r3, r1
  401cf8:	e019      	b.n	401d2e <_printf_float+0x476>
  401cfa:	b913      	cbnz	r3, 401d02 <_printf_float+0x44a>
  401cfc:	6822      	ldr	r2, [r4, #0]
  401cfe:	07d0      	lsls	r0, r2, #31
  401d00:	d501      	bpl.n	401d06 <_printf_float+0x44e>
  401d02:	3302      	adds	r3, #2
  401d04:	e013      	b.n	401d2e <_printf_float+0x476>
  401d06:	2301      	movs	r3, #1
  401d08:	e011      	b.n	401d2e <_printf_float+0x476>
  401d0a:	f04f 0967 	mov.w	r9, #103	; 0x67
  401d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401d12:	4293      	cmp	r3, r2
  401d14:	db05      	blt.n	401d22 <_printf_float+0x46a>
  401d16:	6822      	ldr	r2, [r4, #0]
  401d18:	6123      	str	r3, [r4, #16]
  401d1a:	07d1      	lsls	r1, r2, #31
  401d1c:	d508      	bpl.n	401d30 <_printf_float+0x478>
  401d1e:	3301      	adds	r3, #1
  401d20:	e005      	b.n	401d2e <_printf_float+0x476>
  401d22:	2b00      	cmp	r3, #0
  401d24:	bfd4      	ite	le
  401d26:	f1c3 0302 	rsble	r3, r3, #2
  401d2a:	2301      	movgt	r3, #1
  401d2c:	4413      	add	r3, r2
  401d2e:	6123      	str	r3, [r4, #16]
  401d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401d32:	65a3      	str	r3, [r4, #88]	; 0x58
  401d34:	f04f 0a00 	mov.w	sl, #0
  401d38:	e656      	b.n	4019e8 <_printf_float+0x130>
  401d3a:	b011      	add	sp, #68	; 0x44
  401d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00401d40 <_printf_common>:
  401d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d44:	4691      	mov	r9, r2
  401d46:	461f      	mov	r7, r3
  401d48:	690a      	ldr	r2, [r1, #16]
  401d4a:	688b      	ldr	r3, [r1, #8]
  401d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  401d50:	4293      	cmp	r3, r2
  401d52:	bfb8      	it	lt
  401d54:	4613      	movlt	r3, r2
  401d56:	f8c9 3000 	str.w	r3, [r9]
  401d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  401d5e:	4606      	mov	r6, r0
  401d60:	460c      	mov	r4, r1
  401d62:	b112      	cbz	r2, 401d6a <_printf_common+0x2a>
  401d64:	3301      	adds	r3, #1
  401d66:	f8c9 3000 	str.w	r3, [r9]
  401d6a:	6823      	ldr	r3, [r4, #0]
  401d6c:	0699      	lsls	r1, r3, #26
  401d6e:	bf42      	ittt	mi
  401d70:	f8d9 3000 	ldrmi.w	r3, [r9]
  401d74:	3302      	addmi	r3, #2
  401d76:	f8c9 3000 	strmi.w	r3, [r9]
  401d7a:	6825      	ldr	r5, [r4, #0]
  401d7c:	f015 0506 	ands.w	r5, r5, #6
  401d80:	d110      	bne.n	401da4 <_printf_common+0x64>
  401d82:	f104 0a19 	add.w	sl, r4, #25
  401d86:	e007      	b.n	401d98 <_printf_common+0x58>
  401d88:	2301      	movs	r3, #1
  401d8a:	4652      	mov	r2, sl
  401d8c:	4639      	mov	r1, r7
  401d8e:	4630      	mov	r0, r6
  401d90:	47c0      	blx	r8
  401d92:	3001      	adds	r0, #1
  401d94:	d01a      	beq.n	401dcc <_printf_common+0x8c>
  401d96:	3501      	adds	r5, #1
  401d98:	68e3      	ldr	r3, [r4, #12]
  401d9a:	f8d9 2000 	ldr.w	r2, [r9]
  401d9e:	1a9b      	subs	r3, r3, r2
  401da0:	429d      	cmp	r5, r3
  401da2:	dbf1      	blt.n	401d88 <_printf_common+0x48>
  401da4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  401da8:	6822      	ldr	r2, [r4, #0]
  401daa:	3300      	adds	r3, #0
  401dac:	bf18      	it	ne
  401dae:	2301      	movne	r3, #1
  401db0:	0692      	lsls	r2, r2, #26
  401db2:	d50f      	bpl.n	401dd4 <_printf_common+0x94>
  401db4:	18e1      	adds	r1, r4, r3
  401db6:	1c5a      	adds	r2, r3, #1
  401db8:	2030      	movs	r0, #48	; 0x30
  401dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  401dbe:	4422      	add	r2, r4
  401dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  401dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  401dc8:	3302      	adds	r3, #2
  401dca:	e003      	b.n	401dd4 <_printf_common+0x94>
  401dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401dd8:	4639      	mov	r1, r7
  401dda:	4630      	mov	r0, r6
  401ddc:	47c0      	blx	r8
  401dde:	3001      	adds	r0, #1
  401de0:	d0f4      	beq.n	401dcc <_printf_common+0x8c>
  401de2:	6822      	ldr	r2, [r4, #0]
  401de4:	f8d9 5000 	ldr.w	r5, [r9]
  401de8:	68e3      	ldr	r3, [r4, #12]
  401dea:	f002 0206 	and.w	r2, r2, #6
  401dee:	2a04      	cmp	r2, #4
  401df0:	bf08      	it	eq
  401df2:	1b5d      	subeq	r5, r3, r5
  401df4:	6922      	ldr	r2, [r4, #16]
  401df6:	68a3      	ldr	r3, [r4, #8]
  401df8:	bf0c      	ite	eq
  401dfa:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  401dfe:	2500      	movne	r5, #0
  401e00:	4293      	cmp	r3, r2
  401e02:	bfc4      	itt	gt
  401e04:	1a9b      	subgt	r3, r3, r2
  401e06:	18ed      	addgt	r5, r5, r3
  401e08:	f04f 0900 	mov.w	r9, #0
  401e0c:	341a      	adds	r4, #26
  401e0e:	454d      	cmp	r5, r9
  401e10:	d009      	beq.n	401e26 <_printf_common+0xe6>
  401e12:	2301      	movs	r3, #1
  401e14:	4622      	mov	r2, r4
  401e16:	4639      	mov	r1, r7
  401e18:	4630      	mov	r0, r6
  401e1a:	47c0      	blx	r8
  401e1c:	3001      	adds	r0, #1
  401e1e:	d0d5      	beq.n	401dcc <_printf_common+0x8c>
  401e20:	f109 0901 	add.w	r9, r9, #1
  401e24:	e7f3      	b.n	401e0e <_printf_common+0xce>
  401e26:	2000      	movs	r0, #0
  401e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401e2c <_printf_i>:
  401e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401e30:	4617      	mov	r7, r2
  401e32:	7e0a      	ldrb	r2, [r1, #24]
  401e34:	b085      	sub	sp, #20
  401e36:	2a6e      	cmp	r2, #110	; 0x6e
  401e38:	4698      	mov	r8, r3
  401e3a:	4606      	mov	r6, r0
  401e3c:	460c      	mov	r4, r1
  401e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401e40:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  401e44:	f000 80ae 	beq.w	401fa4 <_printf_i+0x178>
  401e48:	d811      	bhi.n	401e6e <_printf_i+0x42>
  401e4a:	2a63      	cmp	r2, #99	; 0x63
  401e4c:	d022      	beq.n	401e94 <_printf_i+0x68>
  401e4e:	d809      	bhi.n	401e64 <_printf_i+0x38>
  401e50:	2a00      	cmp	r2, #0
  401e52:	f000 80bb 	beq.w	401fcc <_printf_i+0x1a0>
  401e56:	2a58      	cmp	r2, #88	; 0x58
  401e58:	f040 80ca 	bne.w	401ff0 <_printf_i+0x1c4>
  401e5c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  401e60:	4983      	ldr	r1, [pc, #524]	; (402070 <_printf_i+0x244>)
  401e62:	e055      	b.n	401f10 <_printf_i+0xe4>
  401e64:	2a64      	cmp	r2, #100	; 0x64
  401e66:	d01e      	beq.n	401ea6 <_printf_i+0x7a>
  401e68:	2a69      	cmp	r2, #105	; 0x69
  401e6a:	d01c      	beq.n	401ea6 <_printf_i+0x7a>
  401e6c:	e0c0      	b.n	401ff0 <_printf_i+0x1c4>
  401e6e:	2a73      	cmp	r2, #115	; 0x73
  401e70:	f000 80b0 	beq.w	401fd4 <_printf_i+0x1a8>
  401e74:	d809      	bhi.n	401e8a <_printf_i+0x5e>
  401e76:	2a6f      	cmp	r2, #111	; 0x6f
  401e78:	d02e      	beq.n	401ed8 <_printf_i+0xac>
  401e7a:	2a70      	cmp	r2, #112	; 0x70
  401e7c:	f040 80b8 	bne.w	401ff0 <_printf_i+0x1c4>
  401e80:	680a      	ldr	r2, [r1, #0]
  401e82:	f042 0220 	orr.w	r2, r2, #32
  401e86:	600a      	str	r2, [r1, #0]
  401e88:	e03e      	b.n	401f08 <_printf_i+0xdc>
  401e8a:	2a75      	cmp	r2, #117	; 0x75
  401e8c:	d024      	beq.n	401ed8 <_printf_i+0xac>
  401e8e:	2a78      	cmp	r2, #120	; 0x78
  401e90:	d03a      	beq.n	401f08 <_printf_i+0xdc>
  401e92:	e0ad      	b.n	401ff0 <_printf_i+0x1c4>
  401e94:	681a      	ldr	r2, [r3, #0]
  401e96:	f101 0542 	add.w	r5, r1, #66	; 0x42
  401e9a:	1d11      	adds	r1, r2, #4
  401e9c:	6019      	str	r1, [r3, #0]
  401e9e:	6813      	ldr	r3, [r2, #0]
  401ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  401ea4:	e0a8      	b.n	401ff8 <_printf_i+0x1cc>
  401ea6:	6821      	ldr	r1, [r4, #0]
  401ea8:	681a      	ldr	r2, [r3, #0]
  401eaa:	f011 0f80 	tst.w	r1, #128	; 0x80
  401eae:	d002      	beq.n	401eb6 <_printf_i+0x8a>
  401eb0:	1d11      	adds	r1, r2, #4
  401eb2:	6019      	str	r1, [r3, #0]
  401eb4:	e008      	b.n	401ec8 <_printf_i+0x9c>
  401eb6:	f011 0f40 	tst.w	r1, #64	; 0x40
  401eba:	f102 0104 	add.w	r1, r2, #4
  401ebe:	6019      	str	r1, [r3, #0]
  401ec0:	d002      	beq.n	401ec8 <_printf_i+0x9c>
  401ec2:	f9b2 3000 	ldrsh.w	r3, [r2]
  401ec6:	e000      	b.n	401eca <_printf_i+0x9e>
  401ec8:	6813      	ldr	r3, [r2, #0]
  401eca:	2b00      	cmp	r3, #0
  401ecc:	da3c      	bge.n	401f48 <_printf_i+0x11c>
  401ece:	222d      	movs	r2, #45	; 0x2d
  401ed0:	425b      	negs	r3, r3
  401ed2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  401ed6:	e037      	b.n	401f48 <_printf_i+0x11c>
  401ed8:	6821      	ldr	r1, [r4, #0]
  401eda:	681a      	ldr	r2, [r3, #0]
  401edc:	f011 0f80 	tst.w	r1, #128	; 0x80
  401ee0:	d002      	beq.n	401ee8 <_printf_i+0xbc>
  401ee2:	1d11      	adds	r1, r2, #4
  401ee4:	6019      	str	r1, [r3, #0]
  401ee6:	e007      	b.n	401ef8 <_printf_i+0xcc>
  401ee8:	f011 0f40 	tst.w	r1, #64	; 0x40
  401eec:	f102 0104 	add.w	r1, r2, #4
  401ef0:	6019      	str	r1, [r3, #0]
  401ef2:	d001      	beq.n	401ef8 <_printf_i+0xcc>
  401ef4:	8813      	ldrh	r3, [r2, #0]
  401ef6:	e000      	b.n	401efa <_printf_i+0xce>
  401ef8:	6813      	ldr	r3, [r2, #0]
  401efa:	7e22      	ldrb	r2, [r4, #24]
  401efc:	495c      	ldr	r1, [pc, #368]	; (402070 <_printf_i+0x244>)
  401efe:	2a6f      	cmp	r2, #111	; 0x6f
  401f00:	bf14      	ite	ne
  401f02:	220a      	movne	r2, #10
  401f04:	2208      	moveq	r2, #8
  401f06:	e01b      	b.n	401f40 <_printf_i+0x114>
  401f08:	2278      	movs	r2, #120	; 0x78
  401f0a:	495a      	ldr	r1, [pc, #360]	; (402074 <_printf_i+0x248>)
  401f0c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  401f10:	6822      	ldr	r2, [r4, #0]
  401f12:	6818      	ldr	r0, [r3, #0]
  401f14:	f012 0f80 	tst.w	r2, #128	; 0x80
  401f18:	f100 0504 	add.w	r5, r0, #4
  401f1c:	601d      	str	r5, [r3, #0]
  401f1e:	d103      	bne.n	401f28 <_printf_i+0xfc>
  401f20:	0655      	lsls	r5, r2, #25
  401f22:	d501      	bpl.n	401f28 <_printf_i+0xfc>
  401f24:	8803      	ldrh	r3, [r0, #0]
  401f26:	e000      	b.n	401f2a <_printf_i+0xfe>
  401f28:	6803      	ldr	r3, [r0, #0]
  401f2a:	07d0      	lsls	r0, r2, #31
  401f2c:	bf44      	itt	mi
  401f2e:	f042 0220 	orrmi.w	r2, r2, #32
  401f32:	6022      	strmi	r2, [r4, #0]
  401f34:	b91b      	cbnz	r3, 401f3e <_printf_i+0x112>
  401f36:	6822      	ldr	r2, [r4, #0]
  401f38:	f022 0220 	bic.w	r2, r2, #32
  401f3c:	6022      	str	r2, [r4, #0]
  401f3e:	2210      	movs	r2, #16
  401f40:	2000      	movs	r0, #0
  401f42:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  401f46:	e001      	b.n	401f4c <_printf_i+0x120>
  401f48:	4949      	ldr	r1, [pc, #292]	; (402070 <_printf_i+0x244>)
  401f4a:	220a      	movs	r2, #10
  401f4c:	6865      	ldr	r5, [r4, #4]
  401f4e:	60a5      	str	r5, [r4, #8]
  401f50:	2d00      	cmp	r5, #0
  401f52:	db08      	blt.n	401f66 <_printf_i+0x13a>
  401f54:	6820      	ldr	r0, [r4, #0]
  401f56:	f020 0004 	bic.w	r0, r0, #4
  401f5a:	6020      	str	r0, [r4, #0]
  401f5c:	b92b      	cbnz	r3, 401f6a <_printf_i+0x13e>
  401f5e:	2d00      	cmp	r5, #0
  401f60:	d17d      	bne.n	40205e <_printf_i+0x232>
  401f62:	4675      	mov	r5, lr
  401f64:	e00c      	b.n	401f80 <_printf_i+0x154>
  401f66:	2b00      	cmp	r3, #0
  401f68:	d079      	beq.n	40205e <_printf_i+0x232>
  401f6a:	4675      	mov	r5, lr
  401f6c:	fbb3 f0f2 	udiv	r0, r3, r2
  401f70:	fb02 3310 	mls	r3, r2, r0, r3
  401f74:	5ccb      	ldrb	r3, [r1, r3]
  401f76:	f805 3d01 	strb.w	r3, [r5, #-1]!
  401f7a:	4603      	mov	r3, r0
  401f7c:	2800      	cmp	r0, #0
  401f7e:	d1f5      	bne.n	401f6c <_printf_i+0x140>
  401f80:	2a08      	cmp	r2, #8
  401f82:	d10b      	bne.n	401f9c <_printf_i+0x170>
  401f84:	6823      	ldr	r3, [r4, #0]
  401f86:	07da      	lsls	r2, r3, #31
  401f88:	d508      	bpl.n	401f9c <_printf_i+0x170>
  401f8a:	6923      	ldr	r3, [r4, #16]
  401f8c:	6862      	ldr	r2, [r4, #4]
  401f8e:	429a      	cmp	r2, r3
  401f90:	bfde      	ittt	le
  401f92:	2330      	movle	r3, #48	; 0x30
  401f94:	f805 3c01 	strble.w	r3, [r5, #-1]
  401f98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  401f9c:	ebc5 030e 	rsb	r3, r5, lr
  401fa0:	6123      	str	r3, [r4, #16]
  401fa2:	e02e      	b.n	402002 <_printf_i+0x1d6>
  401fa4:	6808      	ldr	r0, [r1, #0]
  401fa6:	681a      	ldr	r2, [r3, #0]
  401fa8:	6949      	ldr	r1, [r1, #20]
  401faa:	f010 0f80 	tst.w	r0, #128	; 0x80
  401fae:	d003      	beq.n	401fb8 <_printf_i+0x18c>
  401fb0:	1d10      	adds	r0, r2, #4
  401fb2:	6018      	str	r0, [r3, #0]
  401fb4:	6813      	ldr	r3, [r2, #0]
  401fb6:	e008      	b.n	401fca <_printf_i+0x19e>
  401fb8:	f010 0f40 	tst.w	r0, #64	; 0x40
  401fbc:	f102 0004 	add.w	r0, r2, #4
  401fc0:	6018      	str	r0, [r3, #0]
  401fc2:	6813      	ldr	r3, [r2, #0]
  401fc4:	d001      	beq.n	401fca <_printf_i+0x19e>
  401fc6:	8019      	strh	r1, [r3, #0]
  401fc8:	e000      	b.n	401fcc <_printf_i+0x1a0>
  401fca:	6019      	str	r1, [r3, #0]
  401fcc:	2300      	movs	r3, #0
  401fce:	6123      	str	r3, [r4, #16]
  401fd0:	4675      	mov	r5, lr
  401fd2:	e016      	b.n	402002 <_printf_i+0x1d6>
  401fd4:	681a      	ldr	r2, [r3, #0]
  401fd6:	1d11      	adds	r1, r2, #4
  401fd8:	6019      	str	r1, [r3, #0]
  401fda:	6815      	ldr	r5, [r2, #0]
  401fdc:	6862      	ldr	r2, [r4, #4]
  401fde:	2100      	movs	r1, #0
  401fe0:	4628      	mov	r0, r5
  401fe2:	f001 fa65 	bl	4034b0 <memchr>
  401fe6:	b108      	cbz	r0, 401fec <_printf_i+0x1c0>
  401fe8:	1b40      	subs	r0, r0, r5
  401fea:	6060      	str	r0, [r4, #4]
  401fec:	6863      	ldr	r3, [r4, #4]
  401fee:	e004      	b.n	401ffa <_printf_i+0x1ce>
  401ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
  401ff4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  401ff8:	2301      	movs	r3, #1
  401ffa:	6123      	str	r3, [r4, #16]
  401ffc:	2300      	movs	r3, #0
  401ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402002:	f8cd 8000 	str.w	r8, [sp]
  402006:	463b      	mov	r3, r7
  402008:	aa03      	add	r2, sp, #12
  40200a:	4621      	mov	r1, r4
  40200c:	4630      	mov	r0, r6
  40200e:	f7ff fe97 	bl	401d40 <_printf_common>
  402012:	3001      	adds	r0, #1
  402014:	d102      	bne.n	40201c <_printf_i+0x1f0>
  402016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40201a:	e026      	b.n	40206a <_printf_i+0x23e>
  40201c:	6923      	ldr	r3, [r4, #16]
  40201e:	462a      	mov	r2, r5
  402020:	4639      	mov	r1, r7
  402022:	4630      	mov	r0, r6
  402024:	47c0      	blx	r8
  402026:	3001      	adds	r0, #1
  402028:	d0f5      	beq.n	402016 <_printf_i+0x1ea>
  40202a:	6823      	ldr	r3, [r4, #0]
  40202c:	079b      	lsls	r3, r3, #30
  40202e:	d510      	bpl.n	402052 <_printf_i+0x226>
  402030:	2500      	movs	r5, #0
  402032:	f104 0919 	add.w	r9, r4, #25
  402036:	e007      	b.n	402048 <_printf_i+0x21c>
  402038:	2301      	movs	r3, #1
  40203a:	464a      	mov	r2, r9
  40203c:	4639      	mov	r1, r7
  40203e:	4630      	mov	r0, r6
  402040:	47c0      	blx	r8
  402042:	3001      	adds	r0, #1
  402044:	d0e7      	beq.n	402016 <_printf_i+0x1ea>
  402046:	3501      	adds	r5, #1
  402048:	68e3      	ldr	r3, [r4, #12]
  40204a:	9a03      	ldr	r2, [sp, #12]
  40204c:	1a9b      	subs	r3, r3, r2
  40204e:	429d      	cmp	r5, r3
  402050:	dbf2      	blt.n	402038 <_printf_i+0x20c>
  402052:	68e0      	ldr	r0, [r4, #12]
  402054:	9b03      	ldr	r3, [sp, #12]
  402056:	4298      	cmp	r0, r3
  402058:	bfb8      	it	lt
  40205a:	4618      	movlt	r0, r3
  40205c:	e005      	b.n	40206a <_printf_i+0x23e>
  40205e:	780b      	ldrb	r3, [r1, #0]
  402060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402064:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402068:	e78a      	b.n	401f80 <_printf_i+0x154>
  40206a:	b005      	add	sp, #20
  40206c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402070:	00404bfa 	.word	0x00404bfa
  402074:	00404c0b 	.word	0x00404c0b

00402078 <iprintf>:
  402078:	b40f      	push	{r0, r1, r2, r3}
  40207a:	4b0a      	ldr	r3, [pc, #40]	; (4020a4 <iprintf+0x2c>)
  40207c:	b513      	push	{r0, r1, r4, lr}
  40207e:	681c      	ldr	r4, [r3, #0]
  402080:	b124      	cbz	r4, 40208c <iprintf+0x14>
  402082:	69a3      	ldr	r3, [r4, #24]
  402084:	b913      	cbnz	r3, 40208c <iprintf+0x14>
  402086:	4620      	mov	r0, r4
  402088:	f001 f90c 	bl	4032a4 <__sinit>
  40208c:	ab05      	add	r3, sp, #20
  40208e:	9a04      	ldr	r2, [sp, #16]
  402090:	68a1      	ldr	r1, [r4, #8]
  402092:	9301      	str	r3, [sp, #4]
  402094:	4620      	mov	r0, r4
  402096:	f001 fe13 	bl	403cc0 <_vfiprintf_r>
  40209a:	b002      	add	sp, #8
  40209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4020a0:	b004      	add	sp, #16
  4020a2:	4770      	bx	lr
  4020a4:	20000070 	.word	0x20000070

004020a8 <_puts_r>:
  4020a8:	b570      	push	{r4, r5, r6, lr}
  4020aa:	460e      	mov	r6, r1
  4020ac:	4605      	mov	r5, r0
  4020ae:	b118      	cbz	r0, 4020b8 <_puts_r+0x10>
  4020b0:	6983      	ldr	r3, [r0, #24]
  4020b2:	b90b      	cbnz	r3, 4020b8 <_puts_r+0x10>
  4020b4:	f001 f8f6 	bl	4032a4 <__sinit>
  4020b8:	69ab      	ldr	r3, [r5, #24]
  4020ba:	68ac      	ldr	r4, [r5, #8]
  4020bc:	b913      	cbnz	r3, 4020c4 <_puts_r+0x1c>
  4020be:	4628      	mov	r0, r5
  4020c0:	f001 f8f0 	bl	4032a4 <__sinit>
  4020c4:	4b22      	ldr	r3, [pc, #136]	; (402150 <_puts_r+0xa8>)
  4020c6:	429c      	cmp	r4, r3
  4020c8:	d101      	bne.n	4020ce <_puts_r+0x26>
  4020ca:	686c      	ldr	r4, [r5, #4]
  4020cc:	e008      	b.n	4020e0 <_puts_r+0x38>
  4020ce:	4b21      	ldr	r3, [pc, #132]	; (402154 <_puts_r+0xac>)
  4020d0:	429c      	cmp	r4, r3
  4020d2:	d101      	bne.n	4020d8 <_puts_r+0x30>
  4020d4:	68ac      	ldr	r4, [r5, #8]
  4020d6:	e003      	b.n	4020e0 <_puts_r+0x38>
  4020d8:	4b1f      	ldr	r3, [pc, #124]	; (402158 <_puts_r+0xb0>)
  4020da:	429c      	cmp	r4, r3
  4020dc:	bf08      	it	eq
  4020de:	68ec      	ldreq	r4, [r5, #12]
  4020e0:	89a3      	ldrh	r3, [r4, #12]
  4020e2:	071b      	lsls	r3, r3, #28
  4020e4:	d501      	bpl.n	4020ea <_puts_r+0x42>
  4020e6:	6923      	ldr	r3, [r4, #16]
  4020e8:	b93b      	cbnz	r3, 4020fa <_puts_r+0x52>
  4020ea:	4621      	mov	r1, r4
  4020ec:	4628      	mov	r0, r5
  4020ee:	f000 f94b 	bl	402388 <__swsetup_r>
  4020f2:	b110      	cbz	r0, 4020fa <_puts_r+0x52>
  4020f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4020f8:	bd70      	pop	{r4, r5, r6, pc}
  4020fa:	3e01      	subs	r6, #1
  4020fc:	68a3      	ldr	r3, [r4, #8]
  4020fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  402102:	3b01      	subs	r3, #1
  402104:	60a3      	str	r3, [r4, #8]
  402106:	b191      	cbz	r1, 40212e <_puts_r+0x86>
  402108:	2b00      	cmp	r3, #0
  40210a:	da04      	bge.n	402116 <_puts_r+0x6e>
  40210c:	69a2      	ldr	r2, [r4, #24]
  40210e:	4293      	cmp	r3, r2
  402110:	db06      	blt.n	402120 <_puts_r+0x78>
  402112:	290a      	cmp	r1, #10
  402114:	d004      	beq.n	402120 <_puts_r+0x78>
  402116:	6823      	ldr	r3, [r4, #0]
  402118:	1c5a      	adds	r2, r3, #1
  40211a:	6022      	str	r2, [r4, #0]
  40211c:	7019      	strb	r1, [r3, #0]
  40211e:	e7ed      	b.n	4020fc <_puts_r+0x54>
  402120:	4622      	mov	r2, r4
  402122:	4628      	mov	r0, r5
  402124:	f000 f8dc 	bl	4022e0 <__swbuf_r>
  402128:	3001      	adds	r0, #1
  40212a:	d1e7      	bne.n	4020fc <_puts_r+0x54>
  40212c:	e7e2      	b.n	4020f4 <_puts_r+0x4c>
  40212e:	2b00      	cmp	r3, #0
  402130:	da08      	bge.n	402144 <_puts_r+0x9c>
  402132:	4622      	mov	r2, r4
  402134:	210a      	movs	r1, #10
  402136:	4628      	mov	r0, r5
  402138:	f000 f8d2 	bl	4022e0 <__swbuf_r>
  40213c:	3001      	adds	r0, #1
  40213e:	d0d9      	beq.n	4020f4 <_puts_r+0x4c>
  402140:	200a      	movs	r0, #10
  402142:	bd70      	pop	{r4, r5, r6, pc}
  402144:	6823      	ldr	r3, [r4, #0]
  402146:	200a      	movs	r0, #10
  402148:	1c5a      	adds	r2, r3, #1
  40214a:	6022      	str	r2, [r4, #0]
  40214c:	7018      	strb	r0, [r3, #0]
  40214e:	bd70      	pop	{r4, r5, r6, pc}
  402150:	00404c2c 	.word	0x00404c2c
  402154:	00404c4c 	.word	0x00404c4c
  402158:	00404c6c 	.word	0x00404c6c

0040215c <puts>:
  40215c:	4b02      	ldr	r3, [pc, #8]	; (402168 <puts+0xc>)
  40215e:	4601      	mov	r1, r0
  402160:	6818      	ldr	r0, [r3, #0]
  402162:	f7ff bfa1 	b.w	4020a8 <_puts_r>
  402166:	bf00      	nop
  402168:	20000070 	.word	0x20000070

0040216c <setbuf>:
  40216c:	2900      	cmp	r1, #0
  40216e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402172:	bf0c      	ite	eq
  402174:	2202      	moveq	r2, #2
  402176:	2200      	movne	r2, #0
  402178:	f000 b800 	b.w	40217c <setvbuf>

0040217c <setvbuf>:
  40217c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  402180:	461d      	mov	r5, r3
  402182:	4b4f      	ldr	r3, [pc, #316]	; (4022c0 <setvbuf+0x144>)
  402184:	681e      	ldr	r6, [r3, #0]
  402186:	4604      	mov	r4, r0
  402188:	460f      	mov	r7, r1
  40218a:	4690      	mov	r8, r2
  40218c:	b126      	cbz	r6, 402198 <setvbuf+0x1c>
  40218e:	69b3      	ldr	r3, [r6, #24]
  402190:	b913      	cbnz	r3, 402198 <setvbuf+0x1c>
  402192:	4630      	mov	r0, r6
  402194:	f001 f886 	bl	4032a4 <__sinit>
  402198:	4b4a      	ldr	r3, [pc, #296]	; (4022c4 <setvbuf+0x148>)
  40219a:	429c      	cmp	r4, r3
  40219c:	d101      	bne.n	4021a2 <setvbuf+0x26>
  40219e:	6874      	ldr	r4, [r6, #4]
  4021a0:	e008      	b.n	4021b4 <setvbuf+0x38>
  4021a2:	4b49      	ldr	r3, [pc, #292]	; (4022c8 <setvbuf+0x14c>)
  4021a4:	429c      	cmp	r4, r3
  4021a6:	d101      	bne.n	4021ac <setvbuf+0x30>
  4021a8:	68b4      	ldr	r4, [r6, #8]
  4021aa:	e003      	b.n	4021b4 <setvbuf+0x38>
  4021ac:	4b47      	ldr	r3, [pc, #284]	; (4022cc <setvbuf+0x150>)
  4021ae:	429c      	cmp	r4, r3
  4021b0:	bf08      	it	eq
  4021b2:	68f4      	ldreq	r4, [r6, #12]
  4021b4:	f1b8 0f02 	cmp.w	r8, #2
  4021b8:	d004      	beq.n	4021c4 <setvbuf+0x48>
  4021ba:	f1b8 0f01 	cmp.w	r8, #1
  4021be:	d879      	bhi.n	4022b4 <setvbuf+0x138>
  4021c0:	2d00      	cmp	r5, #0
  4021c2:	db77      	blt.n	4022b4 <setvbuf+0x138>
  4021c4:	4621      	mov	r1, r4
  4021c6:	4630      	mov	r0, r6
  4021c8:	f001 f802 	bl	4031d0 <_fflush_r>
  4021cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4021ce:	b141      	cbz	r1, 4021e2 <setvbuf+0x66>
  4021d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4021d4:	4299      	cmp	r1, r3
  4021d6:	d002      	beq.n	4021de <setvbuf+0x62>
  4021d8:	4630      	mov	r0, r6
  4021da:	f001 fc9d 	bl	403b18 <_free_r>
  4021de:	2300      	movs	r3, #0
  4021e0:	6363      	str	r3, [r4, #52]	; 0x34
  4021e2:	2300      	movs	r3, #0
  4021e4:	61a3      	str	r3, [r4, #24]
  4021e6:	6063      	str	r3, [r4, #4]
  4021e8:	89a3      	ldrh	r3, [r4, #12]
  4021ea:	061b      	lsls	r3, r3, #24
  4021ec:	d503      	bpl.n	4021f6 <setvbuf+0x7a>
  4021ee:	6921      	ldr	r1, [r4, #16]
  4021f0:	4630      	mov	r0, r6
  4021f2:	f001 fc91 	bl	403b18 <_free_r>
  4021f6:	89a3      	ldrh	r3, [r4, #12]
  4021f8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4021fc:	f023 0303 	bic.w	r3, r3, #3
  402200:	f1b8 0f02 	cmp.w	r8, #2
  402204:	81a3      	strh	r3, [r4, #12]
  402206:	d01e      	beq.n	402246 <setvbuf+0xca>
  402208:	ab01      	add	r3, sp, #4
  40220a:	466a      	mov	r2, sp
  40220c:	4621      	mov	r1, r4
  40220e:	4630      	mov	r0, r6
  402210:	f001 f8e0 	bl	4033d4 <__swhatbuf_r>
  402214:	89a3      	ldrh	r3, [r4, #12]
  402216:	4318      	orrs	r0, r3
  402218:	81a0      	strh	r0, [r4, #12]
  40221a:	b90d      	cbnz	r5, 402220 <setvbuf+0xa4>
  40221c:	9d00      	ldr	r5, [sp, #0]
  40221e:	e000      	b.n	402222 <setvbuf+0xa6>
  402220:	bb2f      	cbnz	r7, 40226e <setvbuf+0xf2>
  402222:	4628      	mov	r0, r5
  402224:	f001 f936 	bl	403494 <malloc>
  402228:	4607      	mov	r7, r0
  40222a:	b9d0      	cbnz	r0, 402262 <setvbuf+0xe6>
  40222c:	f8dd 9000 	ldr.w	r9, [sp]
  402230:	45a9      	cmp	r9, r5
  402232:	d102      	bne.n	40223a <setvbuf+0xbe>
  402234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402238:	e006      	b.n	402248 <setvbuf+0xcc>
  40223a:	4648      	mov	r0, r9
  40223c:	f001 f92a 	bl	403494 <malloc>
  402240:	4607      	mov	r7, r0
  402242:	b978      	cbnz	r0, 402264 <setvbuf+0xe8>
  402244:	e7f6      	b.n	402234 <setvbuf+0xb8>
  402246:	2000      	movs	r0, #0
  402248:	89a3      	ldrh	r3, [r4, #12]
  40224a:	f043 0302 	orr.w	r3, r3, #2
  40224e:	81a3      	strh	r3, [r4, #12]
  402250:	2300      	movs	r3, #0
  402252:	60a3      	str	r3, [r4, #8]
  402254:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402258:	6023      	str	r3, [r4, #0]
  40225a:	6123      	str	r3, [r4, #16]
  40225c:	2301      	movs	r3, #1
  40225e:	6163      	str	r3, [r4, #20]
  402260:	e02a      	b.n	4022b8 <setvbuf+0x13c>
  402262:	46a9      	mov	r9, r5
  402264:	89a3      	ldrh	r3, [r4, #12]
  402266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40226a:	81a3      	strh	r3, [r4, #12]
  40226c:	464d      	mov	r5, r9
  40226e:	69b3      	ldr	r3, [r6, #24]
  402270:	b913      	cbnz	r3, 402278 <setvbuf+0xfc>
  402272:	4630      	mov	r0, r6
  402274:	f001 f816 	bl	4032a4 <__sinit>
  402278:	f1b8 0f01 	cmp.w	r8, #1
  40227c:	bf08      	it	eq
  40227e:	89a3      	ldrheq	r3, [r4, #12]
  402280:	6027      	str	r7, [r4, #0]
  402282:	bf04      	itt	eq
  402284:	f043 0301 	orreq.w	r3, r3, #1
  402288:	81a3      	strheq	r3, [r4, #12]
  40228a:	89a3      	ldrh	r3, [r4, #12]
  40228c:	6127      	str	r7, [r4, #16]
  40228e:	f003 0008 	and.w	r0, r3, #8
  402292:	b280      	uxth	r0, r0
  402294:	6165      	str	r5, [r4, #20]
  402296:	b158      	cbz	r0, 4022b0 <setvbuf+0x134>
  402298:	f013 0301 	ands.w	r3, r3, #1
  40229c:	f04f 0000 	mov.w	r0, #0
  4022a0:	bf1d      	ittte	ne
  4022a2:	426d      	negne	r5, r5
  4022a4:	60a0      	strne	r0, [r4, #8]
  4022a6:	61a5      	strne	r5, [r4, #24]
  4022a8:	60a5      	streq	r5, [r4, #8]
  4022aa:	bf08      	it	eq
  4022ac:	4618      	moveq	r0, r3
  4022ae:	e003      	b.n	4022b8 <setvbuf+0x13c>
  4022b0:	60a0      	str	r0, [r4, #8]
  4022b2:	e001      	b.n	4022b8 <setvbuf+0x13c>
  4022b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4022b8:	b003      	add	sp, #12
  4022ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4022be:	bf00      	nop
  4022c0:	20000070 	.word	0x20000070
  4022c4:	00404c2c 	.word	0x00404c2c
  4022c8:	00404c4c 	.word	0x00404c4c
  4022cc:	00404c6c 	.word	0x00404c6c

004022d0 <strlen>:
  4022d0:	4603      	mov	r3, r0
  4022d2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4022d6:	2a00      	cmp	r2, #0
  4022d8:	d1fb      	bne.n	4022d2 <strlen+0x2>
  4022da:	1a18      	subs	r0, r3, r0
  4022dc:	3801      	subs	r0, #1
  4022de:	4770      	bx	lr

004022e0 <__swbuf_r>:
  4022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022e2:	460f      	mov	r7, r1
  4022e4:	4614      	mov	r4, r2
  4022e6:	4605      	mov	r5, r0
  4022e8:	b118      	cbz	r0, 4022f2 <__swbuf_r+0x12>
  4022ea:	6983      	ldr	r3, [r0, #24]
  4022ec:	b90b      	cbnz	r3, 4022f2 <__swbuf_r+0x12>
  4022ee:	f000 ffd9 	bl	4032a4 <__sinit>
  4022f2:	4b22      	ldr	r3, [pc, #136]	; (40237c <__swbuf_r+0x9c>)
  4022f4:	429c      	cmp	r4, r3
  4022f6:	d101      	bne.n	4022fc <__swbuf_r+0x1c>
  4022f8:	686c      	ldr	r4, [r5, #4]
  4022fa:	e008      	b.n	40230e <__swbuf_r+0x2e>
  4022fc:	4b20      	ldr	r3, [pc, #128]	; (402380 <__swbuf_r+0xa0>)
  4022fe:	429c      	cmp	r4, r3
  402300:	d101      	bne.n	402306 <__swbuf_r+0x26>
  402302:	68ac      	ldr	r4, [r5, #8]
  402304:	e003      	b.n	40230e <__swbuf_r+0x2e>
  402306:	4b1f      	ldr	r3, [pc, #124]	; (402384 <__swbuf_r+0xa4>)
  402308:	429c      	cmp	r4, r3
  40230a:	bf08      	it	eq
  40230c:	68ec      	ldreq	r4, [r5, #12]
  40230e:	69a3      	ldr	r3, [r4, #24]
  402310:	60a3      	str	r3, [r4, #8]
  402312:	89a3      	ldrh	r3, [r4, #12]
  402314:	071a      	lsls	r2, r3, #28
  402316:	d509      	bpl.n	40232c <__swbuf_r+0x4c>
  402318:	6923      	ldr	r3, [r4, #16]
  40231a:	b13b      	cbz	r3, 40232c <__swbuf_r+0x4c>
  40231c:	6823      	ldr	r3, [r4, #0]
  40231e:	6920      	ldr	r0, [r4, #16]
  402320:	1a18      	subs	r0, r3, r0
  402322:	6963      	ldr	r3, [r4, #20]
  402324:	4298      	cmp	r0, r3
  402326:	b2fe      	uxtb	r6, r7
  402328:	db0f      	blt.n	40234a <__swbuf_r+0x6a>
  40232a:	e008      	b.n	40233e <__swbuf_r+0x5e>
  40232c:	4621      	mov	r1, r4
  40232e:	4628      	mov	r0, r5
  402330:	f000 f82a 	bl	402388 <__swsetup_r>
  402334:	2800      	cmp	r0, #0
  402336:	d0f1      	beq.n	40231c <__swbuf_r+0x3c>
  402338:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  40233c:	e01b      	b.n	402376 <__swbuf_r+0x96>
  40233e:	4621      	mov	r1, r4
  402340:	4628      	mov	r0, r5
  402342:	f000 ff45 	bl	4031d0 <_fflush_r>
  402346:	2800      	cmp	r0, #0
  402348:	d1f6      	bne.n	402338 <__swbuf_r+0x58>
  40234a:	68a3      	ldr	r3, [r4, #8]
  40234c:	3b01      	subs	r3, #1
  40234e:	60a3      	str	r3, [r4, #8]
  402350:	6823      	ldr	r3, [r4, #0]
  402352:	1c5a      	adds	r2, r3, #1
  402354:	6022      	str	r2, [r4, #0]
  402356:	701f      	strb	r7, [r3, #0]
  402358:	6963      	ldr	r3, [r4, #20]
  40235a:	3001      	adds	r0, #1
  40235c:	4298      	cmp	r0, r3
  40235e:	d004      	beq.n	40236a <__swbuf_r+0x8a>
  402360:	89a3      	ldrh	r3, [r4, #12]
  402362:	07db      	lsls	r3, r3, #31
  402364:	d507      	bpl.n	402376 <__swbuf_r+0x96>
  402366:	2e0a      	cmp	r6, #10
  402368:	d105      	bne.n	402376 <__swbuf_r+0x96>
  40236a:	4621      	mov	r1, r4
  40236c:	4628      	mov	r0, r5
  40236e:	f000 ff2f 	bl	4031d0 <_fflush_r>
  402372:	2800      	cmp	r0, #0
  402374:	d1e0      	bne.n	402338 <__swbuf_r+0x58>
  402376:	4630      	mov	r0, r6
  402378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40237a:	bf00      	nop
  40237c:	00404c2c 	.word	0x00404c2c
  402380:	00404c4c 	.word	0x00404c4c
  402384:	00404c6c 	.word	0x00404c6c

00402388 <__swsetup_r>:
  402388:	4b32      	ldr	r3, [pc, #200]	; (402454 <__swsetup_r+0xcc>)
  40238a:	b570      	push	{r4, r5, r6, lr}
  40238c:	681d      	ldr	r5, [r3, #0]
  40238e:	4606      	mov	r6, r0
  402390:	460c      	mov	r4, r1
  402392:	b125      	cbz	r5, 40239e <__swsetup_r+0x16>
  402394:	69ab      	ldr	r3, [r5, #24]
  402396:	b913      	cbnz	r3, 40239e <__swsetup_r+0x16>
  402398:	4628      	mov	r0, r5
  40239a:	f000 ff83 	bl	4032a4 <__sinit>
  40239e:	4b2e      	ldr	r3, [pc, #184]	; (402458 <__swsetup_r+0xd0>)
  4023a0:	429c      	cmp	r4, r3
  4023a2:	d101      	bne.n	4023a8 <__swsetup_r+0x20>
  4023a4:	686c      	ldr	r4, [r5, #4]
  4023a6:	e008      	b.n	4023ba <__swsetup_r+0x32>
  4023a8:	4b2c      	ldr	r3, [pc, #176]	; (40245c <__swsetup_r+0xd4>)
  4023aa:	429c      	cmp	r4, r3
  4023ac:	d101      	bne.n	4023b2 <__swsetup_r+0x2a>
  4023ae:	68ac      	ldr	r4, [r5, #8]
  4023b0:	e003      	b.n	4023ba <__swsetup_r+0x32>
  4023b2:	4b2b      	ldr	r3, [pc, #172]	; (402460 <__swsetup_r+0xd8>)
  4023b4:	429c      	cmp	r4, r3
  4023b6:	bf08      	it	eq
  4023b8:	68ec      	ldreq	r4, [r5, #12]
  4023ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023be:	b29a      	uxth	r2, r3
  4023c0:	0715      	lsls	r5, r2, #28
  4023c2:	d41d      	bmi.n	402400 <__swsetup_r+0x78>
  4023c4:	06d0      	lsls	r0, r2, #27
  4023c6:	d402      	bmi.n	4023ce <__swsetup_r+0x46>
  4023c8:	2209      	movs	r2, #9
  4023ca:	6032      	str	r2, [r6, #0]
  4023cc:	e03a      	b.n	402444 <__swsetup_r+0xbc>
  4023ce:	0751      	lsls	r1, r2, #29
  4023d0:	d512      	bpl.n	4023f8 <__swsetup_r+0x70>
  4023d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4023d4:	b141      	cbz	r1, 4023e8 <__swsetup_r+0x60>
  4023d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4023da:	4299      	cmp	r1, r3
  4023dc:	d002      	beq.n	4023e4 <__swsetup_r+0x5c>
  4023de:	4630      	mov	r0, r6
  4023e0:	f001 fb9a 	bl	403b18 <_free_r>
  4023e4:	2300      	movs	r3, #0
  4023e6:	6363      	str	r3, [r4, #52]	; 0x34
  4023e8:	89a3      	ldrh	r3, [r4, #12]
  4023ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4023ee:	81a3      	strh	r3, [r4, #12]
  4023f0:	2300      	movs	r3, #0
  4023f2:	6063      	str	r3, [r4, #4]
  4023f4:	6923      	ldr	r3, [r4, #16]
  4023f6:	6023      	str	r3, [r4, #0]
  4023f8:	89a3      	ldrh	r3, [r4, #12]
  4023fa:	f043 0308 	orr.w	r3, r3, #8
  4023fe:	81a3      	strh	r3, [r4, #12]
  402400:	6923      	ldr	r3, [r4, #16]
  402402:	b94b      	cbnz	r3, 402418 <__swsetup_r+0x90>
  402404:	89a3      	ldrh	r3, [r4, #12]
  402406:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40240a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40240e:	d003      	beq.n	402418 <__swsetup_r+0x90>
  402410:	4621      	mov	r1, r4
  402412:	4630      	mov	r0, r6
  402414:	f001 f802 	bl	40341c <__smakebuf_r>
  402418:	89a2      	ldrh	r2, [r4, #12]
  40241a:	f012 0301 	ands.w	r3, r2, #1
  40241e:	d005      	beq.n	40242c <__swsetup_r+0xa4>
  402420:	2300      	movs	r3, #0
  402422:	60a3      	str	r3, [r4, #8]
  402424:	6963      	ldr	r3, [r4, #20]
  402426:	425b      	negs	r3, r3
  402428:	61a3      	str	r3, [r4, #24]
  40242a:	e003      	b.n	402434 <__swsetup_r+0xac>
  40242c:	0792      	lsls	r2, r2, #30
  40242e:	bf58      	it	pl
  402430:	6963      	ldrpl	r3, [r4, #20]
  402432:	60a3      	str	r3, [r4, #8]
  402434:	6923      	ldr	r3, [r4, #16]
  402436:	b95b      	cbnz	r3, 402450 <__swsetup_r+0xc8>
  402438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40243c:	f003 0080 	and.w	r0, r3, #128	; 0x80
  402440:	b280      	uxth	r0, r0
  402442:	b130      	cbz	r0, 402452 <__swsetup_r+0xca>
  402444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402448:	81a3      	strh	r3, [r4, #12]
  40244a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40244e:	bd70      	pop	{r4, r5, r6, pc}
  402450:	2000      	movs	r0, #0
  402452:	bd70      	pop	{r4, r5, r6, pc}
  402454:	20000070 	.word	0x20000070
  402458:	00404c2c 	.word	0x00404c2c
  40245c:	00404c4c 	.word	0x00404c4c
  402460:	00404c6c 	.word	0x00404c6c

00402464 <quorem>:
  402464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402468:	6903      	ldr	r3, [r0, #16]
  40246a:	690c      	ldr	r4, [r1, #16]
  40246c:	429c      	cmp	r4, r3
  40246e:	4680      	mov	r8, r0
  402470:	f300 8083 	bgt.w	40257a <quorem+0x116>
  402474:	3c01      	subs	r4, #1
  402476:	f101 0714 	add.w	r7, r1, #20
  40247a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  40247e:	f100 0614 	add.w	r6, r0, #20
  402482:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  402486:	eb06 030e 	add.w	r3, r6, lr
  40248a:	9301      	str	r3, [sp, #4]
  40248c:	3501      	adds	r5, #1
  40248e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  402492:	fbb3 f5f5 	udiv	r5, r3, r5
  402496:	eb07 090e 	add.w	r9, r7, lr
  40249a:	2d00      	cmp	r5, #0
  40249c:	d039      	beq.n	402512 <quorem+0xae>
  40249e:	f04f 0a00 	mov.w	sl, #0
  4024a2:	4638      	mov	r0, r7
  4024a4:	46b4      	mov	ip, r6
  4024a6:	46d3      	mov	fp, sl
  4024a8:	f850 2b04 	ldr.w	r2, [r0], #4
  4024ac:	b293      	uxth	r3, r2
  4024ae:	fb05 a303 	mla	r3, r5, r3, sl
  4024b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4024b6:	b29b      	uxth	r3, r3
  4024b8:	ebc3 030b 	rsb	r3, r3, fp
  4024bc:	0c12      	lsrs	r2, r2, #16
  4024be:	f8bc b000 	ldrh.w	fp, [ip]
  4024c2:	fb05 a202 	mla	r2, r5, r2, sl
  4024c6:	fa13 f38b 	uxtah	r3, r3, fp
  4024ca:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4024ce:	fa1f fb82 	uxth.w	fp, r2
  4024d2:	f8dc 2000 	ldr.w	r2, [ip]
  4024d6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4024da:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4024de:	b29b      	uxth	r3, r3
  4024e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4024e4:	4581      	cmp	r9, r0
  4024e6:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4024ea:	f84c 3b04 	str.w	r3, [ip], #4
  4024ee:	d2db      	bcs.n	4024a8 <quorem+0x44>
  4024f0:	f856 300e 	ldr.w	r3, [r6, lr]
  4024f4:	b96b      	cbnz	r3, 402512 <quorem+0xae>
  4024f6:	9b01      	ldr	r3, [sp, #4]
  4024f8:	3b04      	subs	r3, #4
  4024fa:	429e      	cmp	r6, r3
  4024fc:	461a      	mov	r2, r3
  4024fe:	d302      	bcc.n	402506 <quorem+0xa2>
  402500:	f8c8 4010 	str.w	r4, [r8, #16]
  402504:	e005      	b.n	402512 <quorem+0xae>
  402506:	6812      	ldr	r2, [r2, #0]
  402508:	3b04      	subs	r3, #4
  40250a:	2a00      	cmp	r2, #0
  40250c:	d1f8      	bne.n	402500 <quorem+0x9c>
  40250e:	3c01      	subs	r4, #1
  402510:	e7f3      	b.n	4024fa <quorem+0x96>
  402512:	4640      	mov	r0, r8
  402514:	f001 fa29 	bl	40396a <__mcmp>
  402518:	2800      	cmp	r0, #0
  40251a:	db2c      	blt.n	402576 <quorem+0x112>
  40251c:	3501      	adds	r5, #1
  40251e:	4630      	mov	r0, r6
  402520:	f04f 0e00 	mov.w	lr, #0
  402524:	f857 1b04 	ldr.w	r1, [r7], #4
  402528:	f8d0 c000 	ldr.w	ip, [r0]
  40252c:	b28a      	uxth	r2, r1
  40252e:	ebc2 030e 	rsb	r3, r2, lr
  402532:	0c09      	lsrs	r1, r1, #16
  402534:	fa13 f38c 	uxtah	r3, r3, ip
  402538:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  40253c:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402540:	b29b      	uxth	r3, r3
  402542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402546:	45b9      	cmp	r9, r7
  402548:	ea4f 4e22 	mov.w	lr, r2, asr #16
  40254c:	f840 3b04 	str.w	r3, [r0], #4
  402550:	d2e8      	bcs.n	402524 <quorem+0xc0>
  402552:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402556:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40255a:	b962      	cbnz	r2, 402576 <quorem+0x112>
  40255c:	3b04      	subs	r3, #4
  40255e:	429e      	cmp	r6, r3
  402560:	461a      	mov	r2, r3
  402562:	d302      	bcc.n	40256a <quorem+0x106>
  402564:	f8c8 4010 	str.w	r4, [r8, #16]
  402568:	e005      	b.n	402576 <quorem+0x112>
  40256a:	6812      	ldr	r2, [r2, #0]
  40256c:	3b04      	subs	r3, #4
  40256e:	2a00      	cmp	r2, #0
  402570:	d1f8      	bne.n	402564 <quorem+0x100>
  402572:	3c01      	subs	r4, #1
  402574:	e7f3      	b.n	40255e <quorem+0xfa>
  402576:	4628      	mov	r0, r5
  402578:	e000      	b.n	40257c <quorem+0x118>
  40257a:	2000      	movs	r0, #0
  40257c:	b003      	add	sp, #12
  40257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402582:	0000      	movs	r0, r0
  402584:	0000      	movs	r0, r0
	...

00402588 <_dtoa_r>:
  402588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40258c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40258e:	b095      	sub	sp, #84	; 0x54
  402590:	4682      	mov	sl, r0
  402592:	9c21      	ldr	r4, [sp, #132]	; 0x84
  402594:	e9cd 2302 	strd	r2, r3, [sp, #8]
  402598:	b945      	cbnz	r5, 4025ac <_dtoa_r+0x24>
  40259a:	2010      	movs	r0, #16
  40259c:	f000 ff7a 	bl	403494 <malloc>
  4025a0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  4025a4:	6045      	str	r5, [r0, #4]
  4025a6:	6085      	str	r5, [r0, #8]
  4025a8:	6005      	str	r5, [r0, #0]
  4025aa:	60c5      	str	r5, [r0, #12]
  4025ac:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4025b0:	6819      	ldr	r1, [r3, #0]
  4025b2:	b159      	cbz	r1, 4025cc <_dtoa_r+0x44>
  4025b4:	685a      	ldr	r2, [r3, #4]
  4025b6:	604a      	str	r2, [r1, #4]
  4025b8:	2301      	movs	r3, #1
  4025ba:	4093      	lsls	r3, r2
  4025bc:	608b      	str	r3, [r1, #8]
  4025be:	4650      	mov	r0, sl
  4025c0:	f000 fffb 	bl	4035ba <_Bfree>
  4025c4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4025c8:	2200      	movs	r2, #0
  4025ca:	601a      	str	r2, [r3, #0]
  4025cc:	9b03      	ldr	r3, [sp, #12]
  4025ce:	4aa0      	ldr	r2, [pc, #640]	; (402850 <_dtoa_r+0x2c8>)
  4025d0:	2b00      	cmp	r3, #0
  4025d2:	bfbf      	itttt	lt
  4025d4:	2301      	movlt	r3, #1
  4025d6:	6023      	strlt	r3, [r4, #0]
  4025d8:	9b03      	ldrlt	r3, [sp, #12]
  4025da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4025de:	bfb8      	it	lt
  4025e0:	9303      	strlt	r3, [sp, #12]
  4025e2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4025e6:	bfa4      	itt	ge
  4025e8:	2300      	movge	r3, #0
  4025ea:	6023      	strge	r3, [r4, #0]
  4025ec:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  4025f0:	0d1b      	lsrs	r3, r3, #20
  4025f2:	051b      	lsls	r3, r3, #20
  4025f4:	4293      	cmp	r3, r2
  4025f6:	d11d      	bne.n	402634 <_dtoa_r+0xac>
  4025f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4025fa:	f242 730f 	movw	r3, #9999	; 0x270f
  4025fe:	6013      	str	r3, [r2, #0]
  402600:	9b02      	ldr	r3, [sp, #8]
  402602:	b943      	cbnz	r3, 402616 <_dtoa_r+0x8e>
  402604:	4a93      	ldr	r2, [pc, #588]	; (402854 <_dtoa_r+0x2cc>)
  402606:	4b94      	ldr	r3, [pc, #592]	; (402858 <_dtoa_r+0x2d0>)
  402608:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40260c:	2800      	cmp	r0, #0
  40260e:	bf14      	ite	ne
  402610:	4618      	movne	r0, r3
  402612:	4610      	moveq	r0, r2
  402614:	e000      	b.n	402618 <_dtoa_r+0x90>
  402616:	4890      	ldr	r0, [pc, #576]	; (402858 <_dtoa_r+0x2d0>)
  402618:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40261a:	2b00      	cmp	r3, #0
  40261c:	f000 854a 	beq.w	4030b4 <_dtoa_r+0xb2c>
  402620:	78c3      	ldrb	r3, [r0, #3]
  402622:	b113      	cbz	r3, 40262a <_dtoa_r+0xa2>
  402624:	f100 0308 	add.w	r3, r0, #8
  402628:	e000      	b.n	40262c <_dtoa_r+0xa4>
  40262a:	1cc3      	adds	r3, r0, #3
  40262c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40262e:	6013      	str	r3, [r2, #0]
  402630:	f000 bd40 	b.w	4030b4 <_dtoa_r+0xb2c>
  402634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  402638:	2200      	movs	r2, #0
  40263a:	2300      	movs	r3, #0
  40263c:	4620      	mov	r0, r4
  40263e:	4629      	mov	r1, r5
  402640:	f002 f958 	bl	4048f4 <__aeabi_dcmpeq>
  402644:	4607      	mov	r7, r0
  402646:	b158      	cbz	r0, 402660 <_dtoa_r+0xd8>
  402648:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40264a:	2301      	movs	r3, #1
  40264c:	6013      	str	r3, [r2, #0]
  40264e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402650:	2b00      	cmp	r3, #0
  402652:	f000 8522 	beq.w	40309a <_dtoa_r+0xb12>
  402656:	4881      	ldr	r0, [pc, #516]	; (40285c <_dtoa_r+0x2d4>)
  402658:	6018      	str	r0, [r3, #0]
  40265a:	3801      	subs	r0, #1
  40265c:	f000 bd2a 	b.w	4030b4 <_dtoa_r+0xb2c>
  402660:	ab12      	add	r3, sp, #72	; 0x48
  402662:	9301      	str	r3, [sp, #4]
  402664:	ab13      	add	r3, sp, #76	; 0x4c
  402666:	9300      	str	r3, [sp, #0]
  402668:	4622      	mov	r2, r4
  40266a:	462b      	mov	r3, r5
  40266c:	4650      	mov	r0, sl
  40266e:	f001 f9f7 	bl	403a60 <__d2b>
  402672:	f3c8 560a 	ubfx	r6, r8, #20, #11
  402676:	9004      	str	r0, [sp, #16]
  402678:	b156      	cbz	r6, 402690 <_dtoa_r+0x108>
  40267a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  40267e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  402682:	4620      	mov	r0, r4
  402684:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  402688:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  40268c:	9711      	str	r7, [sp, #68]	; 0x44
  40268e:	e01d      	b.n	4026cc <_dtoa_r+0x144>
  402690:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402692:	9e12      	ldr	r6, [sp, #72]	; 0x48
  402694:	441e      	add	r6, r3
  402696:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40269a:	2b20      	cmp	r3, #32
  40269c:	dd0a      	ble.n	4026b4 <_dtoa_r+0x12c>
  40269e:	9a02      	ldr	r2, [sp, #8]
  4026a0:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4026a4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4026a8:	fa22 f000 	lsr.w	r0, r2, r0
  4026ac:	fa08 f303 	lsl.w	r3, r8, r3
  4026b0:	4318      	orrs	r0, r3
  4026b2:	e004      	b.n	4026be <_dtoa_r+0x136>
  4026b4:	f1c3 0020 	rsb	r0, r3, #32
  4026b8:	9b02      	ldr	r3, [sp, #8]
  4026ba:	fa03 f000 	lsl.w	r0, r3, r0
  4026be:	f001 fe3b 	bl	404338 <__aeabi_ui2d>
  4026c2:	2301      	movs	r3, #1
  4026c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4026c8:	3e01      	subs	r6, #1
  4026ca:	9311      	str	r3, [sp, #68]	; 0x44
  4026cc:	2200      	movs	r2, #0
  4026ce:	4b64      	ldr	r3, [pc, #400]	; (402860 <_dtoa_r+0x2d8>)
  4026d0:	f001 fcf4 	bl	4040bc <__aeabi_dsub>
  4026d4:	a358      	add	r3, pc, #352	; (adr r3, 402838 <_dtoa_r+0x2b0>)
  4026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026da:	f001 fea3 	bl	404424 <__aeabi_dmul>
  4026de:	a358      	add	r3, pc, #352	; (adr r3, 402840 <_dtoa_r+0x2b8>)
  4026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026e4:	f001 fcec 	bl	4040c0 <__adddf3>
  4026e8:	4604      	mov	r4, r0
  4026ea:	4630      	mov	r0, r6
  4026ec:	460d      	mov	r5, r1
  4026ee:	f001 fe33 	bl	404358 <__aeabi_i2d>
  4026f2:	a355      	add	r3, pc, #340	; (adr r3, 402848 <_dtoa_r+0x2c0>)
  4026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4026f8:	f001 fe94 	bl	404424 <__aeabi_dmul>
  4026fc:	4602      	mov	r2, r0
  4026fe:	460b      	mov	r3, r1
  402700:	4620      	mov	r0, r4
  402702:	4629      	mov	r1, r5
  402704:	f001 fcdc 	bl	4040c0 <__adddf3>
  402708:	4604      	mov	r4, r0
  40270a:	460d      	mov	r5, r1
  40270c:	f002 f93a 	bl	404984 <__aeabi_d2iz>
  402710:	2200      	movs	r2, #0
  402712:	4683      	mov	fp, r0
  402714:	2300      	movs	r3, #0
  402716:	4620      	mov	r0, r4
  402718:	4629      	mov	r1, r5
  40271a:	f002 f8f5 	bl	404908 <__aeabi_dcmplt>
  40271e:	b158      	cbz	r0, 402738 <_dtoa_r+0x1b0>
  402720:	4658      	mov	r0, fp
  402722:	f001 fe19 	bl	404358 <__aeabi_i2d>
  402726:	4602      	mov	r2, r0
  402728:	460b      	mov	r3, r1
  40272a:	4620      	mov	r0, r4
  40272c:	4629      	mov	r1, r5
  40272e:	f002 f8e1 	bl	4048f4 <__aeabi_dcmpeq>
  402732:	b908      	cbnz	r0, 402738 <_dtoa_r+0x1b0>
  402734:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402738:	f1bb 0f16 	cmp.w	fp, #22
  40273c:	d80d      	bhi.n	40275a <_dtoa_r+0x1d2>
  40273e:	4949      	ldr	r1, [pc, #292]	; (402864 <_dtoa_r+0x2dc>)
  402740:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  402744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402748:	e9d1 0100 	ldrd	r0, r1, [r1]
  40274c:	f002 f8fa 	bl	404944 <__aeabi_dcmpgt>
  402750:	b130      	cbz	r0, 402760 <_dtoa_r+0x1d8>
  402752:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402756:	2300      	movs	r3, #0
  402758:	e000      	b.n	40275c <_dtoa_r+0x1d4>
  40275a:	2301      	movs	r3, #1
  40275c:	9310      	str	r3, [sp, #64]	; 0x40
  40275e:	e000      	b.n	402762 <_dtoa_r+0x1da>
  402760:	9010      	str	r0, [sp, #64]	; 0x40
  402762:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402764:	1b9e      	subs	r6, r3, r6
  402766:	1e73      	subs	r3, r6, #1
  402768:	9307      	str	r3, [sp, #28]
  40276a:	bf43      	ittte	mi
  40276c:	f1c3 0800 	rsbmi	r8, r3, #0
  402770:	2300      	movmi	r3, #0
  402772:	9307      	strmi	r3, [sp, #28]
  402774:	f04f 0800 	movpl.w	r8, #0
  402778:	f1bb 0f00 	cmp.w	fp, #0
  40277c:	db06      	blt.n	40278c <_dtoa_r+0x204>
  40277e:	9b07      	ldr	r3, [sp, #28]
  402780:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  402784:	445b      	add	r3, fp
  402786:	9307      	str	r3, [sp, #28]
  402788:	2700      	movs	r7, #0
  40278a:	e005      	b.n	402798 <_dtoa_r+0x210>
  40278c:	2300      	movs	r3, #0
  40278e:	ebcb 0808 	rsb	r8, fp, r8
  402792:	f1cb 0700 	rsb	r7, fp, #0
  402796:	930b      	str	r3, [sp, #44]	; 0x2c
  402798:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40279a:	2b09      	cmp	r3, #9
  40279c:	d827      	bhi.n	4027ee <_dtoa_r+0x266>
  40279e:	2b05      	cmp	r3, #5
  4027a0:	bfc4      	itt	gt
  4027a2:	3b04      	subgt	r3, #4
  4027a4:	931e      	strgt	r3, [sp, #120]	; 0x78
  4027a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4027a8:	f1a3 0302 	sub.w	r3, r3, #2
  4027ac:	bfcc      	ite	gt
  4027ae:	2500      	movgt	r5, #0
  4027b0:	2501      	movle	r5, #1
  4027b2:	2b03      	cmp	r3, #3
  4027b4:	d820      	bhi.n	4027f8 <_dtoa_r+0x270>
  4027b6:	e8df f003 	tbb	[pc, r3]
  4027ba:	0e06      	.short	0x0e06
  4027bc:	0402      	.short	0x0402
  4027be:	2301      	movs	r3, #1
  4027c0:	e002      	b.n	4027c8 <_dtoa_r+0x240>
  4027c2:	2301      	movs	r3, #1
  4027c4:	e008      	b.n	4027d8 <_dtoa_r+0x250>
  4027c6:	2300      	movs	r3, #0
  4027c8:	930a      	str	r3, [sp, #40]	; 0x28
  4027ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4027cc:	2b00      	cmp	r3, #0
  4027ce:	dd1d      	ble.n	40280c <_dtoa_r+0x284>
  4027d0:	4699      	mov	r9, r3
  4027d2:	9305      	str	r3, [sp, #20]
  4027d4:	e021      	b.n	40281a <_dtoa_r+0x292>
  4027d6:	2300      	movs	r3, #0
  4027d8:	930a      	str	r3, [sp, #40]	; 0x28
  4027da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4027dc:	eb0b 0903 	add.w	r9, fp, r3
  4027e0:	f109 0301 	add.w	r3, r9, #1
  4027e4:	2b01      	cmp	r3, #1
  4027e6:	9305      	str	r3, [sp, #20]
  4027e8:	bfb8      	it	lt
  4027ea:	2301      	movlt	r3, #1
  4027ec:	e015      	b.n	40281a <_dtoa_r+0x292>
  4027ee:	2501      	movs	r5, #1
  4027f0:	2300      	movs	r3, #0
  4027f2:	931e      	str	r3, [sp, #120]	; 0x78
  4027f4:	950a      	str	r5, [sp, #40]	; 0x28
  4027f6:	e001      	b.n	4027fc <_dtoa_r+0x274>
  4027f8:	2301      	movs	r3, #1
  4027fa:	930a      	str	r3, [sp, #40]	; 0x28
  4027fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  402800:	2200      	movs	r2, #0
  402802:	f8cd 9014 	str.w	r9, [sp, #20]
  402806:	2312      	movs	r3, #18
  402808:	921f      	str	r2, [sp, #124]	; 0x7c
  40280a:	e006      	b.n	40281a <_dtoa_r+0x292>
  40280c:	f04f 0901 	mov.w	r9, #1
  402810:	f8cd 9014 	str.w	r9, [sp, #20]
  402814:	464b      	mov	r3, r9
  402816:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  40281a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  40281e:	2200      	movs	r2, #0
  402820:	6062      	str	r2, [r4, #4]
  402822:	2104      	movs	r1, #4
  402824:	f101 0214 	add.w	r2, r1, #20
  402828:	429a      	cmp	r2, r3
  40282a:	d81d      	bhi.n	402868 <_dtoa_r+0x2e0>
  40282c:	6862      	ldr	r2, [r4, #4]
  40282e:	3201      	adds	r2, #1
  402830:	6062      	str	r2, [r4, #4]
  402832:	0049      	lsls	r1, r1, #1
  402834:	e7f6      	b.n	402824 <_dtoa_r+0x29c>
  402836:	bf00      	nop
  402838:	636f4361 	.word	0x636f4361
  40283c:	3fd287a7 	.word	0x3fd287a7
  402840:	8b60c8b3 	.word	0x8b60c8b3
  402844:	3fc68a28 	.word	0x3fc68a28
  402848:	509f79fb 	.word	0x509f79fb
  40284c:	3fd34413 	.word	0x3fd34413
  402850:	7ff00000 	.word	0x7ff00000
  402854:	00404c1c 	.word	0x00404c1c
  402858:	00404c25 	.word	0x00404c25
  40285c:	00404bf9 	.word	0x00404bf9
  402860:	3ff80000 	.word	0x3ff80000
  402864:	00404c90 	.word	0x00404c90
  402868:	6861      	ldr	r1, [r4, #4]
  40286a:	4650      	mov	r0, sl
  40286c:	f000 fe70 	bl	403550 <_Balloc>
  402870:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402874:	6020      	str	r0, [r4, #0]
  402876:	681b      	ldr	r3, [r3, #0]
  402878:	9306      	str	r3, [sp, #24]
  40287a:	9b05      	ldr	r3, [sp, #20]
  40287c:	2b0e      	cmp	r3, #14
  40287e:	f200 815d 	bhi.w	402b3c <_dtoa_r+0x5b4>
  402882:	2d00      	cmp	r5, #0
  402884:	f000 815a 	beq.w	402b3c <_dtoa_r+0x5b4>
  402888:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  40288c:	f1bb 0f00 	cmp.w	fp, #0
  402890:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  402894:	dd31      	ble.n	4028fa <_dtoa_r+0x372>
  402896:	4aa0      	ldr	r2, [pc, #640]	; (402b18 <_dtoa_r+0x590>)
  402898:	f00b 030f 	and.w	r3, fp, #15
  40289c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4028a0:	e9d3 3400 	ldrd	r3, r4, [r3]
  4028a4:	ea4f 152b 	mov.w	r5, fp, asr #4
  4028a8:	06e8      	lsls	r0, r5, #27
  4028aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
  4028ae:	d50c      	bpl.n	4028ca <_dtoa_r+0x342>
  4028b0:	4b9a      	ldr	r3, [pc, #616]	; (402b1c <_dtoa_r+0x594>)
  4028b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4028b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4028ba:	f001 fedd 	bl	404678 <__aeabi_ddiv>
  4028be:	f005 050f 	and.w	r5, r5, #15
  4028c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4028c6:	2403      	movs	r4, #3
  4028c8:	e000      	b.n	4028cc <_dtoa_r+0x344>
  4028ca:	2402      	movs	r4, #2
  4028cc:	4e93      	ldr	r6, [pc, #588]	; (402b1c <_dtoa_r+0x594>)
  4028ce:	b16d      	cbz	r5, 4028ec <_dtoa_r+0x364>
  4028d0:	07e9      	lsls	r1, r5, #31
  4028d2:	d508      	bpl.n	4028e6 <_dtoa_r+0x35e>
  4028d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4028d8:	e9d6 2300 	ldrd	r2, r3, [r6]
  4028dc:	f001 fda2 	bl	404424 <__aeabi_dmul>
  4028e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4028e4:	3401      	adds	r4, #1
  4028e6:	106d      	asrs	r5, r5, #1
  4028e8:	3608      	adds	r6, #8
  4028ea:	e7f0      	b.n	4028ce <_dtoa_r+0x346>
  4028ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4028f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4028f4:	f001 fec0 	bl	404678 <__aeabi_ddiv>
  4028f8:	e020      	b.n	40293c <_dtoa_r+0x3b4>
  4028fa:	f1cb 0500 	rsb	r5, fp, #0
  4028fe:	b305      	cbz	r5, 402942 <_dtoa_r+0x3ba>
  402900:	4b85      	ldr	r3, [pc, #532]	; (402b18 <_dtoa_r+0x590>)
  402902:	4e86      	ldr	r6, [pc, #536]	; (402b1c <_dtoa_r+0x594>)
  402904:	f005 020f 	and.w	r2, r5, #15
  402908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40290c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402910:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402914:	f001 fd86 	bl	404424 <__aeabi_dmul>
  402918:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40291c:	112d      	asrs	r5, r5, #4
  40291e:	2300      	movs	r3, #0
  402920:	2402      	movs	r4, #2
  402922:	b155      	cbz	r5, 40293a <_dtoa_r+0x3b2>
  402924:	07ea      	lsls	r2, r5, #31
  402926:	d505      	bpl.n	402934 <_dtoa_r+0x3ac>
  402928:	e9d6 2300 	ldrd	r2, r3, [r6]
  40292c:	f001 fd7a 	bl	404424 <__aeabi_dmul>
  402930:	3401      	adds	r4, #1
  402932:	2301      	movs	r3, #1
  402934:	106d      	asrs	r5, r5, #1
  402936:	3608      	adds	r6, #8
  402938:	e7f3      	b.n	402922 <_dtoa_r+0x39a>
  40293a:	b11b      	cbz	r3, 402944 <_dtoa_r+0x3bc>
  40293c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402940:	e000      	b.n	402944 <_dtoa_r+0x3bc>
  402942:	2402      	movs	r4, #2
  402944:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402946:	b1e3      	cbz	r3, 402982 <_dtoa_r+0x3fa>
  402948:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  40294c:	2200      	movs	r2, #0
  40294e:	4b74      	ldr	r3, [pc, #464]	; (402b20 <_dtoa_r+0x598>)
  402950:	4628      	mov	r0, r5
  402952:	4631      	mov	r1, r6
  402954:	f001 ffd8 	bl	404908 <__aeabi_dcmplt>
  402958:	b198      	cbz	r0, 402982 <_dtoa_r+0x3fa>
  40295a:	9b05      	ldr	r3, [sp, #20]
  40295c:	b18b      	cbz	r3, 402982 <_dtoa_r+0x3fa>
  40295e:	f1b9 0f00 	cmp.w	r9, #0
  402962:	f340 80e7 	ble.w	402b34 <_dtoa_r+0x5ac>
  402966:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  40296a:	9308      	str	r3, [sp, #32]
  40296c:	4631      	mov	r1, r6
  40296e:	2200      	movs	r2, #0
  402970:	4b6c      	ldr	r3, [pc, #432]	; (402b24 <_dtoa_r+0x59c>)
  402972:	4628      	mov	r0, r5
  402974:	f001 fd56 	bl	404424 <__aeabi_dmul>
  402978:	3401      	adds	r4, #1
  40297a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40297e:	464e      	mov	r6, r9
  402980:	e002      	b.n	402988 <_dtoa_r+0x400>
  402982:	9e05      	ldr	r6, [sp, #20]
  402984:	f8cd b020 	str.w	fp, [sp, #32]
  402988:	4620      	mov	r0, r4
  40298a:	f001 fce5 	bl	404358 <__aeabi_i2d>
  40298e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402992:	f001 fd47 	bl	404424 <__aeabi_dmul>
  402996:	4b64      	ldr	r3, [pc, #400]	; (402b28 <_dtoa_r+0x5a0>)
  402998:	2200      	movs	r2, #0
  40299a:	f001 fb91 	bl	4040c0 <__adddf3>
  40299e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  4029a2:	4604      	mov	r4, r0
  4029a4:	930c      	str	r3, [sp, #48]	; 0x30
  4029a6:	461d      	mov	r5, r3
  4029a8:	b9d6      	cbnz	r6, 4029e0 <_dtoa_r+0x458>
  4029aa:	2200      	movs	r2, #0
  4029ac:	4b5f      	ldr	r3, [pc, #380]	; (402b2c <_dtoa_r+0x5a4>)
  4029ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4029b2:	f001 fb83 	bl	4040bc <__aeabi_dsub>
  4029b6:	4622      	mov	r2, r4
  4029b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4029ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4029be:	f001 ffc1 	bl	404944 <__aeabi_dcmpgt>
  4029c2:	2800      	cmp	r0, #0
  4029c4:	f040 8240 	bne.w	402e48 <_dtoa_r+0x8c0>
  4029c8:	990c      	ldr	r1, [sp, #48]	; 0x30
  4029ca:	4622      	mov	r2, r4
  4029cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4029d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4029d4:	f001 ff98 	bl	404908 <__aeabi_dcmplt>
  4029d8:	2800      	cmp	r0, #0
  4029da:	f040 822c 	bne.w	402e36 <_dtoa_r+0x8ae>
  4029de:	e0a9      	b.n	402b34 <_dtoa_r+0x5ac>
  4029e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4029e2:	4b4d      	ldr	r3, [pc, #308]	; (402b18 <_dtoa_r+0x590>)
  4029e4:	1e71      	subs	r1, r6, #1
  4029e6:	2a00      	cmp	r2, #0
  4029e8:	d049      	beq.n	402a7e <_dtoa_r+0x4f6>
  4029ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4029f2:	2000      	movs	r0, #0
  4029f4:	494e      	ldr	r1, [pc, #312]	; (402b30 <_dtoa_r+0x5a8>)
  4029f6:	f001 fe3f 	bl	404678 <__aeabi_ddiv>
  4029fa:	4622      	mov	r2, r4
  4029fc:	462b      	mov	r3, r5
  4029fe:	f001 fb5d 	bl	4040bc <__aeabi_dsub>
  402a02:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402a06:	9c06      	ldr	r4, [sp, #24]
  402a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402a0c:	f001 ffba 	bl	404984 <__aeabi_d2iz>
  402a10:	4605      	mov	r5, r0
  402a12:	f001 fca1 	bl	404358 <__aeabi_i2d>
  402a16:	4602      	mov	r2, r0
  402a18:	460b      	mov	r3, r1
  402a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402a1e:	f001 fb4d 	bl	4040bc <__aeabi_dsub>
  402a22:	3530      	adds	r5, #48	; 0x30
  402a24:	f804 5b01 	strb.w	r5, [r4], #1
  402a28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402a30:	f001 ff6a 	bl	404908 <__aeabi_dcmplt>
  402a34:	2800      	cmp	r0, #0
  402a36:	f040 8320 	bne.w	40307a <_dtoa_r+0xaf2>
  402a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402a3e:	2000      	movs	r0, #0
  402a40:	4937      	ldr	r1, [pc, #220]	; (402b20 <_dtoa_r+0x598>)
  402a42:	f001 fb3b 	bl	4040bc <__aeabi_dsub>
  402a46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402a4a:	f001 ff5d 	bl	404908 <__aeabi_dcmplt>
  402a4e:	2800      	cmp	r0, #0
  402a50:	f040 80d2 	bne.w	402bf8 <_dtoa_r+0x670>
  402a54:	9b06      	ldr	r3, [sp, #24]
  402a56:	1ae3      	subs	r3, r4, r3
  402a58:	42b3      	cmp	r3, r6
  402a5a:	da6b      	bge.n	402b34 <_dtoa_r+0x5ac>
  402a5c:	2200      	movs	r2, #0
  402a5e:	4b31      	ldr	r3, [pc, #196]	; (402b24 <_dtoa_r+0x59c>)
  402a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402a64:	f001 fcde 	bl	404424 <__aeabi_dmul>
  402a68:	2200      	movs	r2, #0
  402a6a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402a6e:	4b2d      	ldr	r3, [pc, #180]	; (402b24 <_dtoa_r+0x59c>)
  402a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402a74:	f001 fcd6 	bl	404424 <__aeabi_dmul>
  402a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402a7c:	e7c4      	b.n	402a08 <_dtoa_r+0x480>
  402a7e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  402a82:	4622      	mov	r2, r4
  402a84:	462b      	mov	r3, r5
  402a86:	e9d1 0100 	ldrd	r0, r1, [r1]
  402a8a:	f001 fccb 	bl	404424 <__aeabi_dmul>
  402a8e:	9b06      	ldr	r3, [sp, #24]
  402a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402a94:	199c      	adds	r4, r3, r6
  402a96:	461d      	mov	r5, r3
  402a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402a9c:	f001 ff72 	bl	404984 <__aeabi_d2iz>
  402aa0:	4606      	mov	r6, r0
  402aa2:	f001 fc59 	bl	404358 <__aeabi_i2d>
  402aa6:	3630      	adds	r6, #48	; 0x30
  402aa8:	4602      	mov	r2, r0
  402aaa:	460b      	mov	r3, r1
  402aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402ab0:	f001 fb04 	bl	4040bc <__aeabi_dsub>
  402ab4:	f805 6b01 	strb.w	r6, [r5], #1
  402ab8:	42ac      	cmp	r4, r5
  402aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402abe:	f04f 0200 	mov.w	r2, #0
  402ac2:	d123      	bne.n	402b0c <_dtoa_r+0x584>
  402ac4:	4b1a      	ldr	r3, [pc, #104]	; (402b30 <_dtoa_r+0x5a8>)
  402ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402aca:	f001 faf9 	bl	4040c0 <__adddf3>
  402ace:	4602      	mov	r2, r0
  402ad0:	460b      	mov	r3, r1
  402ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402ad6:	f001 ff35 	bl	404944 <__aeabi_dcmpgt>
  402ada:	2800      	cmp	r0, #0
  402adc:	f040 808c 	bne.w	402bf8 <_dtoa_r+0x670>
  402ae0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402ae4:	2000      	movs	r0, #0
  402ae6:	4912      	ldr	r1, [pc, #72]	; (402b30 <_dtoa_r+0x5a8>)
  402ae8:	f001 fae8 	bl	4040bc <__aeabi_dsub>
  402aec:	4602      	mov	r2, r0
  402aee:	460b      	mov	r3, r1
  402af0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402af4:	f001 ff08 	bl	404908 <__aeabi_dcmplt>
  402af8:	b1e0      	cbz	r0, 402b34 <_dtoa_r+0x5ac>
  402afa:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  402afe:	2b30      	cmp	r3, #48	; 0x30
  402b00:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  402b04:	f040 82b9 	bne.w	40307a <_dtoa_r+0xaf2>
  402b08:	4614      	mov	r4, r2
  402b0a:	e7f6      	b.n	402afa <_dtoa_r+0x572>
  402b0c:	4b05      	ldr	r3, [pc, #20]	; (402b24 <_dtoa_r+0x59c>)
  402b0e:	f001 fc89 	bl	404424 <__aeabi_dmul>
  402b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402b16:	e7bf      	b.n	402a98 <_dtoa_r+0x510>
  402b18:	00404c90 	.word	0x00404c90
  402b1c:	00404d58 	.word	0x00404d58
  402b20:	3ff00000 	.word	0x3ff00000
  402b24:	40240000 	.word	0x40240000
  402b28:	401c0000 	.word	0x401c0000
  402b2c:	40140000 	.word	0x40140000
  402b30:	3fe00000 	.word	0x3fe00000
  402b34:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  402b38:	e9cd 3402 	strd	r3, r4, [sp, #8]
  402b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402b3e:	2b00      	cmp	r3, #0
  402b40:	db7d      	blt.n	402c3e <_dtoa_r+0x6b6>
  402b42:	f1bb 0f0e 	cmp.w	fp, #14
  402b46:	dc7a      	bgt.n	402c3e <_dtoa_r+0x6b6>
  402b48:	4bab      	ldr	r3, [pc, #684]	; (402df8 <_dtoa_r+0x870>)
  402b4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  402b4e:	e9d3 6700 	ldrd	r6, r7, [r3]
  402b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402b54:	2b00      	cmp	r3, #0
  402b56:	da14      	bge.n	402b82 <_dtoa_r+0x5fa>
  402b58:	9b05      	ldr	r3, [sp, #20]
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	dc11      	bgt.n	402b82 <_dtoa_r+0x5fa>
  402b5e:	f040 816c 	bne.w	402e3a <_dtoa_r+0x8b2>
  402b62:	2200      	movs	r2, #0
  402b64:	4ba5      	ldr	r3, [pc, #660]	; (402dfc <_dtoa_r+0x874>)
  402b66:	4630      	mov	r0, r6
  402b68:	4639      	mov	r1, r7
  402b6a:	f001 fc5b 	bl	404424 <__aeabi_dmul>
  402b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402b72:	f001 fedd 	bl	404930 <__aeabi_dcmpge>
  402b76:	9d05      	ldr	r5, [sp, #20]
  402b78:	462e      	mov	r6, r5
  402b7a:	2800      	cmp	r0, #0
  402b7c:	f040 815f 	bne.w	402e3e <_dtoa_r+0x8b6>
  402b80:	e165      	b.n	402e4e <_dtoa_r+0x8c6>
  402b82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  402b86:	9c06      	ldr	r4, [sp, #24]
  402b88:	4632      	mov	r2, r6
  402b8a:	463b      	mov	r3, r7
  402b8c:	4640      	mov	r0, r8
  402b8e:	4649      	mov	r1, r9
  402b90:	f001 fd72 	bl	404678 <__aeabi_ddiv>
  402b94:	f001 fef6 	bl	404984 <__aeabi_d2iz>
  402b98:	4605      	mov	r5, r0
  402b9a:	f001 fbdd 	bl	404358 <__aeabi_i2d>
  402b9e:	4632      	mov	r2, r6
  402ba0:	463b      	mov	r3, r7
  402ba2:	f001 fc3f 	bl	404424 <__aeabi_dmul>
  402ba6:	460b      	mov	r3, r1
  402ba8:	4602      	mov	r2, r0
  402baa:	4649      	mov	r1, r9
  402bac:	4640      	mov	r0, r8
  402bae:	f001 fa85 	bl	4040bc <__aeabi_dsub>
  402bb2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  402bb6:	9b06      	ldr	r3, [sp, #24]
  402bb8:	f804 eb01 	strb.w	lr, [r4], #1
  402bbc:	ebc3 0e04 	rsb	lr, r3, r4
  402bc0:	9b05      	ldr	r3, [sp, #20]
  402bc2:	4573      	cmp	r3, lr
  402bc4:	d12e      	bne.n	402c24 <_dtoa_r+0x69c>
  402bc6:	4602      	mov	r2, r0
  402bc8:	460b      	mov	r3, r1
  402bca:	f001 fa79 	bl	4040c0 <__adddf3>
  402bce:	4680      	mov	r8, r0
  402bd0:	4689      	mov	r9, r1
  402bd2:	4602      	mov	r2, r0
  402bd4:	460b      	mov	r3, r1
  402bd6:	4630      	mov	r0, r6
  402bd8:	4639      	mov	r1, r7
  402bda:	f001 fe95 	bl	404908 <__aeabi_dcmplt>
  402bde:	b978      	cbnz	r0, 402c00 <_dtoa_r+0x678>
  402be0:	4642      	mov	r2, r8
  402be2:	464b      	mov	r3, r9
  402be4:	4630      	mov	r0, r6
  402be6:	4639      	mov	r1, r7
  402be8:	f001 fe84 	bl	4048f4 <__aeabi_dcmpeq>
  402bec:	2800      	cmp	r0, #0
  402bee:	f000 8246 	beq.w	40307e <_dtoa_r+0xaf6>
  402bf2:	07eb      	lsls	r3, r5, #31
  402bf4:	d404      	bmi.n	402c00 <_dtoa_r+0x678>
  402bf6:	e242      	b.n	40307e <_dtoa_r+0xaf6>
  402bf8:	f8dd b020 	ldr.w	fp, [sp, #32]
  402bfc:	e000      	b.n	402c00 <_dtoa_r+0x678>
  402bfe:	461c      	mov	r4, r3
  402c00:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  402c04:	2a39      	cmp	r2, #57	; 0x39
  402c06:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  402c0a:	d107      	bne.n	402c1c <_dtoa_r+0x694>
  402c0c:	9a06      	ldr	r2, [sp, #24]
  402c0e:	429a      	cmp	r2, r3
  402c10:	d1f5      	bne.n	402bfe <_dtoa_r+0x676>
  402c12:	9906      	ldr	r1, [sp, #24]
  402c14:	2230      	movs	r2, #48	; 0x30
  402c16:	f10b 0b01 	add.w	fp, fp, #1
  402c1a:	700a      	strb	r2, [r1, #0]
  402c1c:	781a      	ldrb	r2, [r3, #0]
  402c1e:	3201      	adds	r2, #1
  402c20:	701a      	strb	r2, [r3, #0]
  402c22:	e22c      	b.n	40307e <_dtoa_r+0xaf6>
  402c24:	2200      	movs	r2, #0
  402c26:	4b76      	ldr	r3, [pc, #472]	; (402e00 <_dtoa_r+0x878>)
  402c28:	f001 fbfc 	bl	404424 <__aeabi_dmul>
  402c2c:	2200      	movs	r2, #0
  402c2e:	2300      	movs	r3, #0
  402c30:	4680      	mov	r8, r0
  402c32:	4689      	mov	r9, r1
  402c34:	f001 fe5e 	bl	4048f4 <__aeabi_dcmpeq>
  402c38:	2800      	cmp	r0, #0
  402c3a:	d0a5      	beq.n	402b88 <_dtoa_r+0x600>
  402c3c:	e21f      	b.n	40307e <_dtoa_r+0xaf6>
  402c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402c40:	2a00      	cmp	r2, #0
  402c42:	d02b      	beq.n	402c9c <_dtoa_r+0x714>
  402c44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  402c46:	2a01      	cmp	r2, #1
  402c48:	dc0a      	bgt.n	402c60 <_dtoa_r+0x6d8>
  402c4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402c4c:	b112      	cbz	r2, 402c54 <_dtoa_r+0x6cc>
  402c4e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  402c52:	e002      	b.n	402c5a <_dtoa_r+0x6d2>
  402c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402c56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  402c5a:	463d      	mov	r5, r7
  402c5c:	4644      	mov	r4, r8
  402c5e:	e013      	b.n	402c88 <_dtoa_r+0x700>
  402c60:	9b05      	ldr	r3, [sp, #20]
  402c62:	1e5d      	subs	r5, r3, #1
  402c64:	42af      	cmp	r7, r5
  402c66:	bfbf      	itttt	lt
  402c68:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  402c6a:	1bea      	sublt	r2, r5, r7
  402c6c:	189b      	addlt	r3, r3, r2
  402c6e:	930b      	strlt	r3, [sp, #44]	; 0x2c
  402c70:	9b05      	ldr	r3, [sp, #20]
  402c72:	bfb6      	itet	lt
  402c74:	462f      	movlt	r7, r5
  402c76:	1b7d      	subge	r5, r7, r5
  402c78:	2500      	movlt	r5, #0
  402c7a:	2b00      	cmp	r3, #0
  402c7c:	bfab      	itete	ge
  402c7e:	9b05      	ldrge	r3, [sp, #20]
  402c80:	ebc3 0408 	rsblt	r4, r3, r8
  402c84:	4644      	movge	r4, r8
  402c86:	2300      	movlt	r3, #0
  402c88:	9a07      	ldr	r2, [sp, #28]
  402c8a:	2101      	movs	r1, #1
  402c8c:	441a      	add	r2, r3
  402c8e:	4650      	mov	r0, sl
  402c90:	4498      	add	r8, r3
  402c92:	9207      	str	r2, [sp, #28]
  402c94:	f000 fd30 	bl	4036f8 <__i2b>
  402c98:	4606      	mov	r6, r0
  402c9a:	e002      	b.n	402ca2 <_dtoa_r+0x71a>
  402c9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  402c9e:	463d      	mov	r5, r7
  402ca0:	4644      	mov	r4, r8
  402ca2:	b15c      	cbz	r4, 402cbc <_dtoa_r+0x734>
  402ca4:	9b07      	ldr	r3, [sp, #28]
  402ca6:	2b00      	cmp	r3, #0
  402ca8:	dd08      	ble.n	402cbc <_dtoa_r+0x734>
  402caa:	42a3      	cmp	r3, r4
  402cac:	9a07      	ldr	r2, [sp, #28]
  402cae:	bfa8      	it	ge
  402cb0:	4623      	movge	r3, r4
  402cb2:	ebc3 0808 	rsb	r8, r3, r8
  402cb6:	1ae4      	subs	r4, r4, r3
  402cb8:	1ad3      	subs	r3, r2, r3
  402cba:	9307      	str	r3, [sp, #28]
  402cbc:	2f00      	cmp	r7, #0
  402cbe:	dd1d      	ble.n	402cfc <_dtoa_r+0x774>
  402cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402cc2:	b1ab      	cbz	r3, 402cf0 <_dtoa_r+0x768>
  402cc4:	b18d      	cbz	r5, 402cea <_dtoa_r+0x762>
  402cc6:	4631      	mov	r1, r6
  402cc8:	462a      	mov	r2, r5
  402cca:	4650      	mov	r0, sl
  402ccc:	f000 fdae 	bl	40382c <__pow5mult>
  402cd0:	9a04      	ldr	r2, [sp, #16]
  402cd2:	4601      	mov	r1, r0
  402cd4:	4606      	mov	r6, r0
  402cd6:	4650      	mov	r0, sl
  402cd8:	f000 fd17 	bl	40370a <__multiply>
  402cdc:	9904      	ldr	r1, [sp, #16]
  402cde:	9008      	str	r0, [sp, #32]
  402ce0:	4650      	mov	r0, sl
  402ce2:	f000 fc6a 	bl	4035ba <_Bfree>
  402ce6:	9b08      	ldr	r3, [sp, #32]
  402ce8:	9304      	str	r3, [sp, #16]
  402cea:	1b7a      	subs	r2, r7, r5
  402cec:	d006      	beq.n	402cfc <_dtoa_r+0x774>
  402cee:	e000      	b.n	402cf2 <_dtoa_r+0x76a>
  402cf0:	463a      	mov	r2, r7
  402cf2:	9904      	ldr	r1, [sp, #16]
  402cf4:	4650      	mov	r0, sl
  402cf6:	f000 fd99 	bl	40382c <__pow5mult>
  402cfa:	9004      	str	r0, [sp, #16]
  402cfc:	2101      	movs	r1, #1
  402cfe:	4650      	mov	r0, sl
  402d00:	f000 fcfa 	bl	4036f8 <__i2b>
  402d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402d06:	4605      	mov	r5, r0
  402d08:	b35b      	cbz	r3, 402d62 <_dtoa_r+0x7da>
  402d0a:	461a      	mov	r2, r3
  402d0c:	4601      	mov	r1, r0
  402d0e:	4650      	mov	r0, sl
  402d10:	f000 fd8c 	bl	40382c <__pow5mult>
  402d14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402d16:	2b01      	cmp	r3, #1
  402d18:	4605      	mov	r5, r0
  402d1a:	dc18      	bgt.n	402d4e <_dtoa_r+0x7c6>
  402d1c:	9b02      	ldr	r3, [sp, #8]
  402d1e:	b983      	cbnz	r3, 402d42 <_dtoa_r+0x7ba>
  402d20:	9b03      	ldr	r3, [sp, #12]
  402d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402d26:	b973      	cbnz	r3, 402d46 <_dtoa_r+0x7be>
  402d28:	9b03      	ldr	r3, [sp, #12]
  402d2a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  402d2e:	0d3f      	lsrs	r7, r7, #20
  402d30:	053f      	lsls	r7, r7, #20
  402d32:	b14f      	cbz	r7, 402d48 <_dtoa_r+0x7c0>
  402d34:	9b07      	ldr	r3, [sp, #28]
  402d36:	3301      	adds	r3, #1
  402d38:	f108 0801 	add.w	r8, r8, #1
  402d3c:	9307      	str	r3, [sp, #28]
  402d3e:	2701      	movs	r7, #1
  402d40:	e002      	b.n	402d48 <_dtoa_r+0x7c0>
  402d42:	2700      	movs	r7, #0
  402d44:	e000      	b.n	402d48 <_dtoa_r+0x7c0>
  402d46:	9f02      	ldr	r7, [sp, #8]
  402d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402d4a:	b173      	cbz	r3, 402d6a <_dtoa_r+0x7e2>
  402d4c:	e000      	b.n	402d50 <_dtoa_r+0x7c8>
  402d4e:	2700      	movs	r7, #0
  402d50:	692b      	ldr	r3, [r5, #16]
  402d52:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402d56:	6918      	ldr	r0, [r3, #16]
  402d58:	f000 fc81 	bl	40365e <__hi0bits>
  402d5c:	f1c0 0020 	rsb	r0, r0, #32
  402d60:	e004      	b.n	402d6c <_dtoa_r+0x7e4>
  402d62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402d64:	2b01      	cmp	r3, #1
  402d66:	ddd9      	ble.n	402d1c <_dtoa_r+0x794>
  402d68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  402d6a:	2001      	movs	r0, #1
  402d6c:	9b07      	ldr	r3, [sp, #28]
  402d6e:	4418      	add	r0, r3
  402d70:	f010 001f 	ands.w	r0, r0, #31
  402d74:	d008      	beq.n	402d88 <_dtoa_r+0x800>
  402d76:	f1c0 0320 	rsb	r3, r0, #32
  402d7a:	2b04      	cmp	r3, #4
  402d7c:	dd02      	ble.n	402d84 <_dtoa_r+0x7fc>
  402d7e:	f1c0 001c 	rsb	r0, r0, #28
  402d82:	e002      	b.n	402d8a <_dtoa_r+0x802>
  402d84:	d006      	beq.n	402d94 <_dtoa_r+0x80c>
  402d86:	4618      	mov	r0, r3
  402d88:	301c      	adds	r0, #28
  402d8a:	9b07      	ldr	r3, [sp, #28]
  402d8c:	4403      	add	r3, r0
  402d8e:	4480      	add	r8, r0
  402d90:	4404      	add	r4, r0
  402d92:	9307      	str	r3, [sp, #28]
  402d94:	f1b8 0f00 	cmp.w	r8, #0
  402d98:	dd05      	ble.n	402da6 <_dtoa_r+0x81e>
  402d9a:	4642      	mov	r2, r8
  402d9c:	9904      	ldr	r1, [sp, #16]
  402d9e:	4650      	mov	r0, sl
  402da0:	f000 fd92 	bl	4038c8 <__lshift>
  402da4:	9004      	str	r0, [sp, #16]
  402da6:	9b07      	ldr	r3, [sp, #28]
  402da8:	2b00      	cmp	r3, #0
  402daa:	dd05      	ble.n	402db8 <_dtoa_r+0x830>
  402dac:	4629      	mov	r1, r5
  402dae:	461a      	mov	r2, r3
  402db0:	4650      	mov	r0, sl
  402db2:	f000 fd89 	bl	4038c8 <__lshift>
  402db6:	4605      	mov	r5, r0
  402db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402dba:	b31b      	cbz	r3, 402e04 <_dtoa_r+0x87c>
  402dbc:	4629      	mov	r1, r5
  402dbe:	9804      	ldr	r0, [sp, #16]
  402dc0:	f000 fdd3 	bl	40396a <__mcmp>
  402dc4:	2800      	cmp	r0, #0
  402dc6:	da1d      	bge.n	402e04 <_dtoa_r+0x87c>
  402dc8:	2300      	movs	r3, #0
  402dca:	220a      	movs	r2, #10
  402dcc:	9904      	ldr	r1, [sp, #16]
  402dce:	4650      	mov	r0, sl
  402dd0:	f000 fc0a 	bl	4035e8 <__multadd>
  402dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402dd6:	9004      	str	r0, [sp, #16]
  402dd8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402ddc:	2b00      	cmp	r3, #0
  402dde:	f000 8160 	beq.w	4030a2 <_dtoa_r+0xb1a>
  402de2:	4631      	mov	r1, r6
  402de4:	2300      	movs	r3, #0
  402de6:	220a      	movs	r2, #10
  402de8:	4650      	mov	r0, sl
  402dea:	f000 fbfd 	bl	4035e8 <__multadd>
  402dee:	f1b9 0f00 	cmp.w	r9, #0
  402df2:	4606      	mov	r6, r0
  402df4:	dc3e      	bgt.n	402e74 <_dtoa_r+0x8ec>
  402df6:	e03a      	b.n	402e6e <_dtoa_r+0x8e6>
  402df8:	00404c90 	.word	0x00404c90
  402dfc:	40140000 	.word	0x40140000
  402e00:	40240000 	.word	0x40240000
  402e04:	9b05      	ldr	r3, [sp, #20]
  402e06:	2b00      	cmp	r3, #0
  402e08:	dc2b      	bgt.n	402e62 <_dtoa_r+0x8da>
  402e0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402e0c:	2b02      	cmp	r3, #2
  402e0e:	dd28      	ble.n	402e62 <_dtoa_r+0x8da>
  402e10:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402e14:	f1b9 0f00 	cmp.w	r9, #0
  402e18:	d111      	bne.n	402e3e <_dtoa_r+0x8b6>
  402e1a:	4629      	mov	r1, r5
  402e1c:	464b      	mov	r3, r9
  402e1e:	2205      	movs	r2, #5
  402e20:	4650      	mov	r0, sl
  402e22:	f000 fbe1 	bl	4035e8 <__multadd>
  402e26:	4601      	mov	r1, r0
  402e28:	4605      	mov	r5, r0
  402e2a:	9804      	ldr	r0, [sp, #16]
  402e2c:	f000 fd9d 	bl	40396a <__mcmp>
  402e30:	2800      	cmp	r0, #0
  402e32:	dc0c      	bgt.n	402e4e <_dtoa_r+0x8c6>
  402e34:	e003      	b.n	402e3e <_dtoa_r+0x8b6>
  402e36:	4635      	mov	r5, r6
  402e38:	e000      	b.n	402e3c <_dtoa_r+0x8b4>
  402e3a:	2500      	movs	r5, #0
  402e3c:	462e      	mov	r6, r5
  402e3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402e40:	9c06      	ldr	r4, [sp, #24]
  402e42:	ea6f 0b03 	mvn.w	fp, r3
  402e46:	e009      	b.n	402e5c <_dtoa_r+0x8d4>
  402e48:	f8dd b020 	ldr.w	fp, [sp, #32]
  402e4c:	4635      	mov	r5, r6
  402e4e:	9b06      	ldr	r3, [sp, #24]
  402e50:	9a06      	ldr	r2, [sp, #24]
  402e52:	1c5c      	adds	r4, r3, #1
  402e54:	2331      	movs	r3, #49	; 0x31
  402e56:	7013      	strb	r3, [r2, #0]
  402e58:	f10b 0b01 	add.w	fp, fp, #1
  402e5c:	9605      	str	r6, [sp, #20]
  402e5e:	2600      	movs	r6, #0
  402e60:	e0f9      	b.n	403056 <_dtoa_r+0xace>
  402e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e64:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402e68:	b923      	cbnz	r3, 402e74 <_dtoa_r+0x8ec>
  402e6a:	9c06      	ldr	r4, [sp, #24]
  402e6c:	e0b2      	b.n	402fd4 <_dtoa_r+0xa4c>
  402e6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402e70:	2b02      	cmp	r3, #2
  402e72:	dccf      	bgt.n	402e14 <_dtoa_r+0x88c>
  402e74:	2c00      	cmp	r4, #0
  402e76:	dd05      	ble.n	402e84 <_dtoa_r+0x8fc>
  402e78:	4631      	mov	r1, r6
  402e7a:	4622      	mov	r2, r4
  402e7c:	4650      	mov	r0, sl
  402e7e:	f000 fd23 	bl	4038c8 <__lshift>
  402e82:	4606      	mov	r6, r0
  402e84:	b19f      	cbz	r7, 402eae <_dtoa_r+0x926>
  402e86:	6871      	ldr	r1, [r6, #4]
  402e88:	4650      	mov	r0, sl
  402e8a:	f000 fb61 	bl	403550 <_Balloc>
  402e8e:	6932      	ldr	r2, [r6, #16]
  402e90:	3202      	adds	r2, #2
  402e92:	4604      	mov	r4, r0
  402e94:	0092      	lsls	r2, r2, #2
  402e96:	f106 010c 	add.w	r1, r6, #12
  402e9a:	300c      	adds	r0, #12
  402e9c:	f7fe fc6a 	bl	401774 <memcpy>
  402ea0:	2201      	movs	r2, #1
  402ea2:	4621      	mov	r1, r4
  402ea4:	4650      	mov	r0, sl
  402ea6:	f000 fd0f 	bl	4038c8 <__lshift>
  402eaa:	9005      	str	r0, [sp, #20]
  402eac:	e000      	b.n	402eb0 <_dtoa_r+0x928>
  402eae:	9605      	str	r6, [sp, #20]
  402eb0:	9b02      	ldr	r3, [sp, #8]
  402eb2:	9f06      	ldr	r7, [sp, #24]
  402eb4:	f003 0301 	and.w	r3, r3, #1
  402eb8:	9307      	str	r3, [sp, #28]
  402eba:	4629      	mov	r1, r5
  402ebc:	9804      	ldr	r0, [sp, #16]
  402ebe:	f7ff fad1 	bl	402464 <quorem>
  402ec2:	4631      	mov	r1, r6
  402ec4:	4604      	mov	r4, r0
  402ec6:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402eca:	9804      	ldr	r0, [sp, #16]
  402ecc:	f000 fd4d 	bl	40396a <__mcmp>
  402ed0:	9a05      	ldr	r2, [sp, #20]
  402ed2:	9002      	str	r0, [sp, #8]
  402ed4:	4629      	mov	r1, r5
  402ed6:	4650      	mov	r0, sl
  402ed8:	f000 fd63 	bl	4039a2 <__mdiff>
  402edc:	68c3      	ldr	r3, [r0, #12]
  402ede:	4602      	mov	r2, r0
  402ee0:	b93b      	cbnz	r3, 402ef2 <_dtoa_r+0x96a>
  402ee2:	4601      	mov	r1, r0
  402ee4:	900a      	str	r0, [sp, #40]	; 0x28
  402ee6:	9804      	ldr	r0, [sp, #16]
  402ee8:	f000 fd3f 	bl	40396a <__mcmp>
  402eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402eee:	4603      	mov	r3, r0
  402ef0:	e000      	b.n	402ef4 <_dtoa_r+0x96c>
  402ef2:	2301      	movs	r3, #1
  402ef4:	4611      	mov	r1, r2
  402ef6:	4650      	mov	r0, sl
  402ef8:	930a      	str	r3, [sp, #40]	; 0x28
  402efa:	f000 fb5e 	bl	4035ba <_Bfree>
  402efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402f00:	b953      	cbnz	r3, 402f18 <_dtoa_r+0x990>
  402f02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  402f04:	b942      	cbnz	r2, 402f18 <_dtoa_r+0x990>
  402f06:	9a07      	ldr	r2, [sp, #28]
  402f08:	b932      	cbnz	r2, 402f18 <_dtoa_r+0x990>
  402f0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  402f0e:	d02a      	beq.n	402f66 <_dtoa_r+0x9de>
  402f10:	9b02      	ldr	r3, [sp, #8]
  402f12:	2b00      	cmp	r3, #0
  402f14:	dc1c      	bgt.n	402f50 <_dtoa_r+0x9c8>
  402f16:	e01d      	b.n	402f54 <_dtoa_r+0x9cc>
  402f18:	9a02      	ldr	r2, [sp, #8]
  402f1a:	2a00      	cmp	r2, #0
  402f1c:	db04      	blt.n	402f28 <_dtoa_r+0x9a0>
  402f1e:	d11b      	bne.n	402f58 <_dtoa_r+0x9d0>
  402f20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  402f22:	b9ca      	cbnz	r2, 402f58 <_dtoa_r+0x9d0>
  402f24:	9a07      	ldr	r2, [sp, #28]
  402f26:	b9ba      	cbnz	r2, 402f58 <_dtoa_r+0x9d0>
  402f28:	2b00      	cmp	r3, #0
  402f2a:	dd13      	ble.n	402f54 <_dtoa_r+0x9cc>
  402f2c:	2201      	movs	r2, #1
  402f2e:	9904      	ldr	r1, [sp, #16]
  402f30:	4650      	mov	r0, sl
  402f32:	f000 fcc9 	bl	4038c8 <__lshift>
  402f36:	4629      	mov	r1, r5
  402f38:	9004      	str	r0, [sp, #16]
  402f3a:	f000 fd16 	bl	40396a <__mcmp>
  402f3e:	2800      	cmp	r0, #0
  402f40:	dc03      	bgt.n	402f4a <_dtoa_r+0x9c2>
  402f42:	d107      	bne.n	402f54 <_dtoa_r+0x9cc>
  402f44:	f018 0f01 	tst.w	r8, #1
  402f48:	d004      	beq.n	402f54 <_dtoa_r+0x9cc>
  402f4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  402f4e:	d00a      	beq.n	402f66 <_dtoa_r+0x9de>
  402f50:	f104 0831 	add.w	r8, r4, #49	; 0x31
  402f54:	1c7c      	adds	r4, r7, #1
  402f56:	e00c      	b.n	402f72 <_dtoa_r+0x9ea>
  402f58:	2b00      	cmp	r3, #0
  402f5a:	f107 0401 	add.w	r4, r7, #1
  402f5e:	dd0b      	ble.n	402f78 <_dtoa_r+0x9f0>
  402f60:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  402f64:	d103      	bne.n	402f6e <_dtoa_r+0x9e6>
  402f66:	2339      	movs	r3, #57	; 0x39
  402f68:	703b      	strb	r3, [r7, #0]
  402f6a:	3701      	adds	r7, #1
  402f6c:	e056      	b.n	40301c <_dtoa_r+0xa94>
  402f6e:	f108 0801 	add.w	r8, r8, #1
  402f72:	f887 8000 	strb.w	r8, [r7]
  402f76:	e06e      	b.n	403056 <_dtoa_r+0xace>
  402f78:	9b06      	ldr	r3, [sp, #24]
  402f7a:	f804 8c01 	strb.w	r8, [r4, #-1]
  402f7e:	1ae3      	subs	r3, r4, r3
  402f80:	454b      	cmp	r3, r9
  402f82:	4627      	mov	r7, r4
  402f84:	d03b      	beq.n	402ffe <_dtoa_r+0xa76>
  402f86:	2300      	movs	r3, #0
  402f88:	220a      	movs	r2, #10
  402f8a:	9904      	ldr	r1, [sp, #16]
  402f8c:	4650      	mov	r0, sl
  402f8e:	f000 fb2b 	bl	4035e8 <__multadd>
  402f92:	9b05      	ldr	r3, [sp, #20]
  402f94:	9004      	str	r0, [sp, #16]
  402f96:	429e      	cmp	r6, r3
  402f98:	f04f 020a 	mov.w	r2, #10
  402f9c:	f04f 0300 	mov.w	r3, #0
  402fa0:	4631      	mov	r1, r6
  402fa2:	4650      	mov	r0, sl
  402fa4:	d104      	bne.n	402fb0 <_dtoa_r+0xa28>
  402fa6:	f000 fb1f 	bl	4035e8 <__multadd>
  402faa:	4606      	mov	r6, r0
  402fac:	9005      	str	r0, [sp, #20]
  402fae:	e784      	b.n	402eba <_dtoa_r+0x932>
  402fb0:	f000 fb1a 	bl	4035e8 <__multadd>
  402fb4:	2300      	movs	r3, #0
  402fb6:	4606      	mov	r6, r0
  402fb8:	220a      	movs	r2, #10
  402fba:	9905      	ldr	r1, [sp, #20]
  402fbc:	4650      	mov	r0, sl
  402fbe:	f000 fb13 	bl	4035e8 <__multadd>
  402fc2:	9005      	str	r0, [sp, #20]
  402fc4:	e779      	b.n	402eba <_dtoa_r+0x932>
  402fc6:	2300      	movs	r3, #0
  402fc8:	220a      	movs	r2, #10
  402fca:	9904      	ldr	r1, [sp, #16]
  402fcc:	4650      	mov	r0, sl
  402fce:	f000 fb0b 	bl	4035e8 <__multadd>
  402fd2:	9004      	str	r0, [sp, #16]
  402fd4:	4629      	mov	r1, r5
  402fd6:	9804      	ldr	r0, [sp, #16]
  402fd8:	f7ff fa44 	bl	402464 <quorem>
  402fdc:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402fe0:	f804 8b01 	strb.w	r8, [r4], #1
  402fe4:	9b06      	ldr	r3, [sp, #24]
  402fe6:	1ae3      	subs	r3, r4, r3
  402fe8:	454b      	cmp	r3, r9
  402fea:	dbec      	blt.n	402fc6 <_dtoa_r+0xa3e>
  402fec:	9b06      	ldr	r3, [sp, #24]
  402fee:	9605      	str	r6, [sp, #20]
  402ff0:	f1b9 0f01 	cmp.w	r9, #1
  402ff4:	bfac      	ite	ge
  402ff6:	444b      	addge	r3, r9
  402ff8:	3301      	addlt	r3, #1
  402ffa:	461f      	mov	r7, r3
  402ffc:	2600      	movs	r6, #0
  402ffe:	2201      	movs	r2, #1
  403000:	9904      	ldr	r1, [sp, #16]
  403002:	4650      	mov	r0, sl
  403004:	f000 fc60 	bl	4038c8 <__lshift>
  403008:	4629      	mov	r1, r5
  40300a:	9004      	str	r0, [sp, #16]
  40300c:	f000 fcad 	bl	40396a <__mcmp>
  403010:	2800      	cmp	r0, #0
  403012:	dc03      	bgt.n	40301c <_dtoa_r+0xa94>
  403014:	d116      	bne.n	403044 <_dtoa_r+0xabc>
  403016:	f018 0f01 	tst.w	r8, #1
  40301a:	d013      	beq.n	403044 <_dtoa_r+0xabc>
  40301c:	463c      	mov	r4, r7
  40301e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403022:	2b39      	cmp	r3, #57	; 0x39
  403024:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403028:	d109      	bne.n	40303e <_dtoa_r+0xab6>
  40302a:	9b06      	ldr	r3, [sp, #24]
  40302c:	4293      	cmp	r3, r2
  40302e:	d104      	bne.n	40303a <_dtoa_r+0xab2>
  403030:	f10b 0b01 	add.w	fp, fp, #1
  403034:	2331      	movs	r3, #49	; 0x31
  403036:	9a06      	ldr	r2, [sp, #24]
  403038:	e002      	b.n	403040 <_dtoa_r+0xab8>
  40303a:	4614      	mov	r4, r2
  40303c:	e7ef      	b.n	40301e <_dtoa_r+0xa96>
  40303e:	3301      	adds	r3, #1
  403040:	7013      	strb	r3, [r2, #0]
  403042:	e008      	b.n	403056 <_dtoa_r+0xace>
  403044:	463c      	mov	r4, r7
  403046:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40304a:	2b30      	cmp	r3, #48	; 0x30
  40304c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403050:	d101      	bne.n	403056 <_dtoa_r+0xace>
  403052:	4614      	mov	r4, r2
  403054:	e7f7      	b.n	403046 <_dtoa_r+0xabe>
  403056:	4629      	mov	r1, r5
  403058:	4650      	mov	r0, sl
  40305a:	f000 faae 	bl	4035ba <_Bfree>
  40305e:	9b05      	ldr	r3, [sp, #20]
  403060:	b16b      	cbz	r3, 40307e <_dtoa_r+0xaf6>
  403062:	b12e      	cbz	r6, 403070 <_dtoa_r+0xae8>
  403064:	429e      	cmp	r6, r3
  403066:	d003      	beq.n	403070 <_dtoa_r+0xae8>
  403068:	4631      	mov	r1, r6
  40306a:	4650      	mov	r0, sl
  40306c:	f000 faa5 	bl	4035ba <_Bfree>
  403070:	9905      	ldr	r1, [sp, #20]
  403072:	4650      	mov	r0, sl
  403074:	f000 faa1 	bl	4035ba <_Bfree>
  403078:	e001      	b.n	40307e <_dtoa_r+0xaf6>
  40307a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40307e:	9904      	ldr	r1, [sp, #16]
  403080:	4650      	mov	r0, sl
  403082:	f000 fa9a 	bl	4035ba <_Bfree>
  403086:	2300      	movs	r3, #0
  403088:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40308a:	7023      	strb	r3, [r4, #0]
  40308c:	f10b 0301 	add.w	r3, fp, #1
  403090:	6013      	str	r3, [r2, #0]
  403092:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403094:	b11b      	cbz	r3, 40309e <_dtoa_r+0xb16>
  403096:	601c      	str	r4, [r3, #0]
  403098:	e001      	b.n	40309e <_dtoa_r+0xb16>
  40309a:	4808      	ldr	r0, [pc, #32]	; (4030bc <_dtoa_r+0xb34>)
  40309c:	e00a      	b.n	4030b4 <_dtoa_r+0xb2c>
  40309e:	9806      	ldr	r0, [sp, #24]
  4030a0:	e008      	b.n	4030b4 <_dtoa_r+0xb2c>
  4030a2:	f1b9 0f00 	cmp.w	r9, #0
  4030a6:	f73f aee0 	bgt.w	402e6a <_dtoa_r+0x8e2>
  4030aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4030ac:	2b02      	cmp	r3, #2
  4030ae:	f77f aedc 	ble.w	402e6a <_dtoa_r+0x8e2>
  4030b2:	e6af      	b.n	402e14 <_dtoa_r+0x88c>
  4030b4:	b015      	add	sp, #84	; 0x54
  4030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030ba:	bf00      	nop
  4030bc:	00404bf8 	.word	0x00404bf8

004030c0 <__sflush_r>:
  4030c0:	898a      	ldrh	r2, [r1, #12]
  4030c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4030c6:	4605      	mov	r5, r0
  4030c8:	0710      	lsls	r0, r2, #28
  4030ca:	460c      	mov	r4, r1
  4030cc:	d459      	bmi.n	403182 <__sflush_r+0xc2>
  4030ce:	684b      	ldr	r3, [r1, #4]
  4030d0:	2b00      	cmp	r3, #0
  4030d2:	dc02      	bgt.n	4030da <__sflush_r+0x1a>
  4030d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4030d6:	2b00      	cmp	r3, #0
  4030d8:	dd17      	ble.n	40310a <__sflush_r+0x4a>
  4030da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4030dc:	b1ae      	cbz	r6, 40310a <__sflush_r+0x4a>
  4030de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  4030e2:	2300      	movs	r3, #0
  4030e4:	b292      	uxth	r2, r2
  4030e6:	682f      	ldr	r7, [r5, #0]
  4030e8:	602b      	str	r3, [r5, #0]
  4030ea:	b10a      	cbz	r2, 4030f0 <__sflush_r+0x30>
  4030ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4030ee:	e015      	b.n	40311c <__sflush_r+0x5c>
  4030f0:	6a21      	ldr	r1, [r4, #32]
  4030f2:	2301      	movs	r3, #1
  4030f4:	4628      	mov	r0, r5
  4030f6:	47b0      	blx	r6
  4030f8:	1c41      	adds	r1, r0, #1
  4030fa:	d10f      	bne.n	40311c <__sflush_r+0x5c>
  4030fc:	682b      	ldr	r3, [r5, #0]
  4030fe:	b16b      	cbz	r3, 40311c <__sflush_r+0x5c>
  403100:	2b1d      	cmp	r3, #29
  403102:	d001      	beq.n	403108 <__sflush_r+0x48>
  403104:	2b16      	cmp	r3, #22
  403106:	d103      	bne.n	403110 <__sflush_r+0x50>
  403108:	602f      	str	r7, [r5, #0]
  40310a:	2000      	movs	r0, #0
  40310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403110:	89a3      	ldrh	r3, [r4, #12]
  403112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403116:	81a3      	strh	r3, [r4, #12]
  403118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40311c:	89a3      	ldrh	r3, [r4, #12]
  40311e:	075a      	lsls	r2, r3, #29
  403120:	d505      	bpl.n	40312e <__sflush_r+0x6e>
  403122:	6863      	ldr	r3, [r4, #4]
  403124:	1ac0      	subs	r0, r0, r3
  403126:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403128:	b10b      	cbz	r3, 40312e <__sflush_r+0x6e>
  40312a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40312c:	1ac0      	subs	r0, r0, r3
  40312e:	2300      	movs	r3, #0
  403130:	4602      	mov	r2, r0
  403132:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403134:	6a21      	ldr	r1, [r4, #32]
  403136:	4628      	mov	r0, r5
  403138:	47b0      	blx	r6
  40313a:	1c43      	adds	r3, r0, #1
  40313c:	89a3      	ldrh	r3, [r4, #12]
  40313e:	d106      	bne.n	40314e <__sflush_r+0x8e>
  403140:	6829      	ldr	r1, [r5, #0]
  403142:	291d      	cmp	r1, #29
  403144:	d83a      	bhi.n	4031bc <__sflush_r+0xfc>
  403146:	4a21      	ldr	r2, [pc, #132]	; (4031cc <__sflush_r+0x10c>)
  403148:	40ca      	lsrs	r2, r1
  40314a:	07d6      	lsls	r6, r2, #31
  40314c:	d536      	bpl.n	4031bc <__sflush_r+0xfc>
  40314e:	2200      	movs	r2, #0
  403150:	6062      	str	r2, [r4, #4]
  403152:	04d9      	lsls	r1, r3, #19
  403154:	6922      	ldr	r2, [r4, #16]
  403156:	6022      	str	r2, [r4, #0]
  403158:	d504      	bpl.n	403164 <__sflush_r+0xa4>
  40315a:	1c42      	adds	r2, r0, #1
  40315c:	d101      	bne.n	403162 <__sflush_r+0xa2>
  40315e:	682b      	ldr	r3, [r5, #0]
  403160:	b903      	cbnz	r3, 403164 <__sflush_r+0xa4>
  403162:	6560      	str	r0, [r4, #84]	; 0x54
  403164:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403166:	602f      	str	r7, [r5, #0]
  403168:	2900      	cmp	r1, #0
  40316a:	d0ce      	beq.n	40310a <__sflush_r+0x4a>
  40316c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403170:	4299      	cmp	r1, r3
  403172:	d002      	beq.n	40317a <__sflush_r+0xba>
  403174:	4628      	mov	r0, r5
  403176:	f000 fccf 	bl	403b18 <_free_r>
  40317a:	2000      	movs	r0, #0
  40317c:	6360      	str	r0, [r4, #52]	; 0x34
  40317e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403182:	690f      	ldr	r7, [r1, #16]
  403184:	2f00      	cmp	r7, #0
  403186:	d0c0      	beq.n	40310a <__sflush_r+0x4a>
  403188:	0793      	lsls	r3, r2, #30
  40318a:	680e      	ldr	r6, [r1, #0]
  40318c:	bf08      	it	eq
  40318e:	694b      	ldreq	r3, [r1, #20]
  403190:	600f      	str	r7, [r1, #0]
  403192:	bf18      	it	ne
  403194:	2300      	movne	r3, #0
  403196:	ebc7 0806 	rsb	r8, r7, r6
  40319a:	608b      	str	r3, [r1, #8]
  40319c:	e002      	b.n	4031a4 <__sflush_r+0xe4>
  40319e:	4407      	add	r7, r0
  4031a0:	ebc0 0808 	rsb	r8, r0, r8
  4031a4:	f1b8 0f00 	cmp.w	r8, #0
  4031a8:	ddaf      	ble.n	40310a <__sflush_r+0x4a>
  4031aa:	4643      	mov	r3, r8
  4031ac:	463a      	mov	r2, r7
  4031ae:	6a21      	ldr	r1, [r4, #32]
  4031b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4031b2:	4628      	mov	r0, r5
  4031b4:	47b0      	blx	r6
  4031b6:	2800      	cmp	r0, #0
  4031b8:	dcf1      	bgt.n	40319e <__sflush_r+0xde>
  4031ba:	89a3      	ldrh	r3, [r4, #12]
  4031bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4031c0:	81a3      	strh	r3, [r4, #12]
  4031c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4031c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4031ca:	bf00      	nop
  4031cc:	20400001 	.word	0x20400001

004031d0 <_fflush_r>:
  4031d0:	b538      	push	{r3, r4, r5, lr}
  4031d2:	690b      	ldr	r3, [r1, #16]
  4031d4:	4605      	mov	r5, r0
  4031d6:	460c      	mov	r4, r1
  4031d8:	b1db      	cbz	r3, 403212 <_fflush_r+0x42>
  4031da:	b118      	cbz	r0, 4031e4 <_fflush_r+0x14>
  4031dc:	6983      	ldr	r3, [r0, #24]
  4031de:	b90b      	cbnz	r3, 4031e4 <_fflush_r+0x14>
  4031e0:	f000 f860 	bl	4032a4 <__sinit>
  4031e4:	4b0c      	ldr	r3, [pc, #48]	; (403218 <_fflush_r+0x48>)
  4031e6:	429c      	cmp	r4, r3
  4031e8:	d101      	bne.n	4031ee <_fflush_r+0x1e>
  4031ea:	686c      	ldr	r4, [r5, #4]
  4031ec:	e008      	b.n	403200 <_fflush_r+0x30>
  4031ee:	4b0b      	ldr	r3, [pc, #44]	; (40321c <_fflush_r+0x4c>)
  4031f0:	429c      	cmp	r4, r3
  4031f2:	d101      	bne.n	4031f8 <_fflush_r+0x28>
  4031f4:	68ac      	ldr	r4, [r5, #8]
  4031f6:	e003      	b.n	403200 <_fflush_r+0x30>
  4031f8:	4b09      	ldr	r3, [pc, #36]	; (403220 <_fflush_r+0x50>)
  4031fa:	429c      	cmp	r4, r3
  4031fc:	bf08      	it	eq
  4031fe:	68ec      	ldreq	r4, [r5, #12]
  403200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403204:	b12b      	cbz	r3, 403212 <_fflush_r+0x42>
  403206:	4621      	mov	r1, r4
  403208:	4628      	mov	r0, r5
  40320a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40320e:	f7ff bf57 	b.w	4030c0 <__sflush_r>
  403212:	2000      	movs	r0, #0
  403214:	bd38      	pop	{r3, r4, r5, pc}
  403216:	bf00      	nop
  403218:	00404c2c 	.word	0x00404c2c
  40321c:	00404c4c 	.word	0x00404c4c
  403220:	00404c6c 	.word	0x00404c6c

00403224 <_cleanup_r>:
  403224:	4901      	ldr	r1, [pc, #4]	; (40322c <_cleanup_r+0x8>)
  403226:	f000 b8a9 	b.w	40337c <_fwalk_reent>
  40322a:	bf00      	nop
  40322c:	004031d1 	.word	0x004031d1

00403230 <std.isra.0>:
  403230:	2300      	movs	r3, #0
  403232:	b510      	push	{r4, lr}
  403234:	4604      	mov	r4, r0
  403236:	6003      	str	r3, [r0, #0]
  403238:	6043      	str	r3, [r0, #4]
  40323a:	6083      	str	r3, [r0, #8]
  40323c:	8181      	strh	r1, [r0, #12]
  40323e:	6643      	str	r3, [r0, #100]	; 0x64
  403240:	81c2      	strh	r2, [r0, #14]
  403242:	6103      	str	r3, [r0, #16]
  403244:	6143      	str	r3, [r0, #20]
  403246:	6183      	str	r3, [r0, #24]
  403248:	4619      	mov	r1, r3
  40324a:	2208      	movs	r2, #8
  40324c:	305c      	adds	r0, #92	; 0x5c
  40324e:	f7fe fa9c 	bl	40178a <memset>
  403252:	4b05      	ldr	r3, [pc, #20]	; (403268 <std.isra.0+0x38>)
  403254:	6263      	str	r3, [r4, #36]	; 0x24
  403256:	4b05      	ldr	r3, [pc, #20]	; (40326c <std.isra.0+0x3c>)
  403258:	62a3      	str	r3, [r4, #40]	; 0x28
  40325a:	4b05      	ldr	r3, [pc, #20]	; (403270 <std.isra.0+0x40>)
  40325c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40325e:	4b05      	ldr	r3, [pc, #20]	; (403274 <std.isra.0+0x44>)
  403260:	6224      	str	r4, [r4, #32]
  403262:	6323      	str	r3, [r4, #48]	; 0x30
  403264:	bd10      	pop	{r4, pc}
  403266:	bf00      	nop
  403268:	00403f19 	.word	0x00403f19
  40326c:	00403f3b 	.word	0x00403f3b
  403270:	00403f73 	.word	0x00403f73
  403274:	00403f97 	.word	0x00403f97

00403278 <__sfmoreglue>:
  403278:	b570      	push	{r4, r5, r6, lr}
  40327a:	2368      	movs	r3, #104	; 0x68
  40327c:	1e4d      	subs	r5, r1, #1
  40327e:	435d      	muls	r5, r3
  403280:	460e      	mov	r6, r1
  403282:	f105 0174 	add.w	r1, r5, #116	; 0x74
  403286:	f000 fc95 	bl	403bb4 <_malloc_r>
  40328a:	4604      	mov	r4, r0
  40328c:	b140      	cbz	r0, 4032a0 <__sfmoreglue+0x28>
  40328e:	2100      	movs	r1, #0
  403290:	e880 0042 	stmia.w	r0, {r1, r6}
  403294:	300c      	adds	r0, #12
  403296:	60a0      	str	r0, [r4, #8]
  403298:	f105 0268 	add.w	r2, r5, #104	; 0x68
  40329c:	f7fe fa75 	bl	40178a <memset>
  4032a0:	4620      	mov	r0, r4
  4032a2:	bd70      	pop	{r4, r5, r6, pc}

004032a4 <__sinit>:
  4032a4:	6983      	ldr	r3, [r0, #24]
  4032a6:	b510      	push	{r4, lr}
  4032a8:	4604      	mov	r4, r0
  4032aa:	bb33      	cbnz	r3, 4032fa <__sinit+0x56>
  4032ac:	6483      	str	r3, [r0, #72]	; 0x48
  4032ae:	64c3      	str	r3, [r0, #76]	; 0x4c
  4032b0:	6503      	str	r3, [r0, #80]	; 0x50
  4032b2:	4b12      	ldr	r3, [pc, #72]	; (4032fc <__sinit+0x58>)
  4032b4:	4a12      	ldr	r2, [pc, #72]	; (403300 <__sinit+0x5c>)
  4032b6:	681b      	ldr	r3, [r3, #0]
  4032b8:	6282      	str	r2, [r0, #40]	; 0x28
  4032ba:	4298      	cmp	r0, r3
  4032bc:	bf04      	itt	eq
  4032be:	2301      	moveq	r3, #1
  4032c0:	6183      	streq	r3, [r0, #24]
  4032c2:	f000 f81f 	bl	403304 <__sfp>
  4032c6:	6060      	str	r0, [r4, #4]
  4032c8:	4620      	mov	r0, r4
  4032ca:	f000 f81b 	bl	403304 <__sfp>
  4032ce:	60a0      	str	r0, [r4, #8]
  4032d0:	4620      	mov	r0, r4
  4032d2:	f000 f817 	bl	403304 <__sfp>
  4032d6:	2200      	movs	r2, #0
  4032d8:	60e0      	str	r0, [r4, #12]
  4032da:	2104      	movs	r1, #4
  4032dc:	6860      	ldr	r0, [r4, #4]
  4032de:	f7ff ffa7 	bl	403230 <std.isra.0>
  4032e2:	2201      	movs	r2, #1
  4032e4:	2109      	movs	r1, #9
  4032e6:	68a0      	ldr	r0, [r4, #8]
  4032e8:	f7ff ffa2 	bl	403230 <std.isra.0>
  4032ec:	2202      	movs	r2, #2
  4032ee:	2112      	movs	r1, #18
  4032f0:	68e0      	ldr	r0, [r4, #12]
  4032f2:	f7ff ff9d 	bl	403230 <std.isra.0>
  4032f6:	2301      	movs	r3, #1
  4032f8:	61a3      	str	r3, [r4, #24]
  4032fa:	bd10      	pop	{r4, pc}
  4032fc:	00404be4 	.word	0x00404be4
  403300:	00403225 	.word	0x00403225

00403304 <__sfp>:
  403304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403306:	4b1c      	ldr	r3, [pc, #112]	; (403378 <__sfp+0x74>)
  403308:	681e      	ldr	r6, [r3, #0]
  40330a:	69b3      	ldr	r3, [r6, #24]
  40330c:	4607      	mov	r7, r0
  40330e:	b913      	cbnz	r3, 403316 <__sfp+0x12>
  403310:	4630      	mov	r0, r6
  403312:	f7ff ffc7 	bl	4032a4 <__sinit>
  403316:	3648      	adds	r6, #72	; 0x48
  403318:	68b4      	ldr	r4, [r6, #8]
  40331a:	6873      	ldr	r3, [r6, #4]
  40331c:	3b01      	subs	r3, #1
  40331e:	d404      	bmi.n	40332a <__sfp+0x26>
  403320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  403324:	b17d      	cbz	r5, 403346 <__sfp+0x42>
  403326:	3468      	adds	r4, #104	; 0x68
  403328:	e7f8      	b.n	40331c <__sfp+0x18>
  40332a:	6833      	ldr	r3, [r6, #0]
  40332c:	b10b      	cbz	r3, 403332 <__sfp+0x2e>
  40332e:	6836      	ldr	r6, [r6, #0]
  403330:	e7f2      	b.n	403318 <__sfp+0x14>
  403332:	2104      	movs	r1, #4
  403334:	4638      	mov	r0, r7
  403336:	f7ff ff9f 	bl	403278 <__sfmoreglue>
  40333a:	6030      	str	r0, [r6, #0]
  40333c:	2800      	cmp	r0, #0
  40333e:	d1f6      	bne.n	40332e <__sfp+0x2a>
  403340:	230c      	movs	r3, #12
  403342:	603b      	str	r3, [r7, #0]
  403344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403346:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40334a:	81e3      	strh	r3, [r4, #14]
  40334c:	2301      	movs	r3, #1
  40334e:	81a3      	strh	r3, [r4, #12]
  403350:	6665      	str	r5, [r4, #100]	; 0x64
  403352:	6025      	str	r5, [r4, #0]
  403354:	60a5      	str	r5, [r4, #8]
  403356:	6065      	str	r5, [r4, #4]
  403358:	6125      	str	r5, [r4, #16]
  40335a:	6165      	str	r5, [r4, #20]
  40335c:	61a5      	str	r5, [r4, #24]
  40335e:	2208      	movs	r2, #8
  403360:	4629      	mov	r1, r5
  403362:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  403366:	f7fe fa10 	bl	40178a <memset>
  40336a:	6365      	str	r5, [r4, #52]	; 0x34
  40336c:	63a5      	str	r5, [r4, #56]	; 0x38
  40336e:	64a5      	str	r5, [r4, #72]	; 0x48
  403370:	64e5      	str	r5, [r4, #76]	; 0x4c
  403372:	4620      	mov	r0, r4
  403374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403376:	bf00      	nop
  403378:	00404be4 	.word	0x00404be4

0040337c <_fwalk_reent>:
  40337c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403380:	4680      	mov	r8, r0
  403382:	4689      	mov	r9, r1
  403384:	f100 0448 	add.w	r4, r0, #72	; 0x48
  403388:	2600      	movs	r6, #0
  40338a:	b194      	cbz	r4, 4033b2 <_fwalk_reent+0x36>
  40338c:	68a5      	ldr	r5, [r4, #8]
  40338e:	6867      	ldr	r7, [r4, #4]
  403390:	3f01      	subs	r7, #1
  403392:	d40c      	bmi.n	4033ae <_fwalk_reent+0x32>
  403394:	89ab      	ldrh	r3, [r5, #12]
  403396:	2b01      	cmp	r3, #1
  403398:	d907      	bls.n	4033aa <_fwalk_reent+0x2e>
  40339a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40339e:	3301      	adds	r3, #1
  4033a0:	d003      	beq.n	4033aa <_fwalk_reent+0x2e>
  4033a2:	4629      	mov	r1, r5
  4033a4:	4640      	mov	r0, r8
  4033a6:	47c8      	blx	r9
  4033a8:	4306      	orrs	r6, r0
  4033aa:	3568      	adds	r5, #104	; 0x68
  4033ac:	e7f0      	b.n	403390 <_fwalk_reent+0x14>
  4033ae:	6824      	ldr	r4, [r4, #0]
  4033b0:	e7eb      	b.n	40338a <_fwalk_reent+0xe>
  4033b2:	4630      	mov	r0, r6
  4033b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004033b8 <_localeconv_r>:
  4033b8:	4b04      	ldr	r3, [pc, #16]	; (4033cc <_localeconv_r+0x14>)
  4033ba:	681b      	ldr	r3, [r3, #0]
  4033bc:	6a18      	ldr	r0, [r3, #32]
  4033be:	4b04      	ldr	r3, [pc, #16]	; (4033d0 <_localeconv_r+0x18>)
  4033c0:	2800      	cmp	r0, #0
  4033c2:	bf08      	it	eq
  4033c4:	4618      	moveq	r0, r3
  4033c6:	30f0      	adds	r0, #240	; 0xf0
  4033c8:	4770      	bx	lr
  4033ca:	bf00      	nop
  4033cc:	20000070 	.word	0x20000070
  4033d0:	20000074 	.word	0x20000074

004033d4 <__swhatbuf_r>:
  4033d4:	b570      	push	{r4, r5, r6, lr}
  4033d6:	460e      	mov	r6, r1
  4033d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4033dc:	2900      	cmp	r1, #0
  4033de:	b090      	sub	sp, #64	; 0x40
  4033e0:	4614      	mov	r4, r2
  4033e2:	461d      	mov	r5, r3
  4033e4:	da06      	bge.n	4033f4 <__swhatbuf_r+0x20>
  4033e6:	2300      	movs	r3, #0
  4033e8:	602b      	str	r3, [r5, #0]
  4033ea:	89b3      	ldrh	r3, [r6, #12]
  4033ec:	061a      	lsls	r2, r3, #24
  4033ee:	d50e      	bpl.n	40340e <__swhatbuf_r+0x3a>
  4033f0:	2340      	movs	r3, #64	; 0x40
  4033f2:	e00e      	b.n	403412 <__swhatbuf_r+0x3e>
  4033f4:	aa01      	add	r2, sp, #4
  4033f6:	f000 fdf5 	bl	403fe4 <_fstat_r>
  4033fa:	2800      	cmp	r0, #0
  4033fc:	dbf3      	blt.n	4033e6 <__swhatbuf_r+0x12>
  4033fe:	9a02      	ldr	r2, [sp, #8]
  403400:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403404:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  403408:	425a      	negs	r2, r3
  40340a:	415a      	adcs	r2, r3
  40340c:	602a      	str	r2, [r5, #0]
  40340e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403412:	2000      	movs	r0, #0
  403414:	6023      	str	r3, [r4, #0]
  403416:	b010      	add	sp, #64	; 0x40
  403418:	bd70      	pop	{r4, r5, r6, pc}
	...

0040341c <__smakebuf_r>:
  40341c:	898b      	ldrh	r3, [r1, #12]
  40341e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  403420:	079e      	lsls	r6, r3, #30
  403422:	4605      	mov	r5, r0
  403424:	460c      	mov	r4, r1
  403426:	d410      	bmi.n	40344a <__smakebuf_r+0x2e>
  403428:	ab01      	add	r3, sp, #4
  40342a:	466a      	mov	r2, sp
  40342c:	f7ff ffd2 	bl	4033d4 <__swhatbuf_r>
  403430:	9900      	ldr	r1, [sp, #0]
  403432:	4606      	mov	r6, r0
  403434:	4628      	mov	r0, r5
  403436:	f000 fbbd 	bl	403bb4 <_malloc_r>
  40343a:	b968      	cbnz	r0, 403458 <__smakebuf_r+0x3c>
  40343c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403440:	059a      	lsls	r2, r3, #22
  403442:	d422      	bmi.n	40348a <__smakebuf_r+0x6e>
  403444:	f043 0302 	orr.w	r3, r3, #2
  403448:	81a3      	strh	r3, [r4, #12]
  40344a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40344e:	6023      	str	r3, [r4, #0]
  403450:	6123      	str	r3, [r4, #16]
  403452:	2301      	movs	r3, #1
  403454:	6163      	str	r3, [r4, #20]
  403456:	e018      	b.n	40348a <__smakebuf_r+0x6e>
  403458:	4b0d      	ldr	r3, [pc, #52]	; (403490 <__smakebuf_r+0x74>)
  40345a:	62ab      	str	r3, [r5, #40]	; 0x28
  40345c:	89a3      	ldrh	r3, [r4, #12]
  40345e:	6020      	str	r0, [r4, #0]
  403460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403464:	81a3      	strh	r3, [r4, #12]
  403466:	9b00      	ldr	r3, [sp, #0]
  403468:	6163      	str	r3, [r4, #20]
  40346a:	9b01      	ldr	r3, [sp, #4]
  40346c:	6120      	str	r0, [r4, #16]
  40346e:	b14b      	cbz	r3, 403484 <__smakebuf_r+0x68>
  403470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403474:	4628      	mov	r0, r5
  403476:	f000 fdc7 	bl	404008 <_isatty_r>
  40347a:	b118      	cbz	r0, 403484 <__smakebuf_r+0x68>
  40347c:	89a3      	ldrh	r3, [r4, #12]
  40347e:	f043 0301 	orr.w	r3, r3, #1
  403482:	81a3      	strh	r3, [r4, #12]
  403484:	89a0      	ldrh	r0, [r4, #12]
  403486:	4330      	orrs	r0, r6
  403488:	81a0      	strh	r0, [r4, #12]
  40348a:	b002      	add	sp, #8
  40348c:	bd70      	pop	{r4, r5, r6, pc}
  40348e:	bf00      	nop
  403490:	00403225 	.word	0x00403225

00403494 <malloc>:
  403494:	4b02      	ldr	r3, [pc, #8]	; (4034a0 <malloc+0xc>)
  403496:	4601      	mov	r1, r0
  403498:	6818      	ldr	r0, [r3, #0]
  40349a:	f000 bb8b 	b.w	403bb4 <_malloc_r>
  40349e:	bf00      	nop
  4034a0:	20000070 	.word	0x20000070
	...

004034b0 <memchr>:
  4034b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4034b4:	2a10      	cmp	r2, #16
  4034b6:	db2b      	blt.n	403510 <memchr+0x60>
  4034b8:	f010 0f07 	tst.w	r0, #7
  4034bc:	d008      	beq.n	4034d0 <memchr+0x20>
  4034be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4034c2:	3a01      	subs	r2, #1
  4034c4:	428b      	cmp	r3, r1
  4034c6:	d02d      	beq.n	403524 <memchr+0x74>
  4034c8:	f010 0f07 	tst.w	r0, #7
  4034cc:	b342      	cbz	r2, 403520 <memchr+0x70>
  4034ce:	d1f6      	bne.n	4034be <memchr+0xe>
  4034d0:	b4f0      	push	{r4, r5, r6, r7}
  4034d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4034d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4034da:	f022 0407 	bic.w	r4, r2, #7
  4034de:	f07f 0700 	mvns.w	r7, #0
  4034e2:	2300      	movs	r3, #0
  4034e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4034e8:	3c08      	subs	r4, #8
  4034ea:	ea85 0501 	eor.w	r5, r5, r1
  4034ee:	ea86 0601 	eor.w	r6, r6, r1
  4034f2:	fa85 f547 	uadd8	r5, r5, r7
  4034f6:	faa3 f587 	sel	r5, r3, r7
  4034fa:	fa86 f647 	uadd8	r6, r6, r7
  4034fe:	faa5 f687 	sel	r6, r5, r7
  403502:	b98e      	cbnz	r6, 403528 <memchr+0x78>
  403504:	d1ee      	bne.n	4034e4 <memchr+0x34>
  403506:	bcf0      	pop	{r4, r5, r6, r7}
  403508:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40350c:	f002 0207 	and.w	r2, r2, #7
  403510:	b132      	cbz	r2, 403520 <memchr+0x70>
  403512:	f810 3b01 	ldrb.w	r3, [r0], #1
  403516:	3a01      	subs	r2, #1
  403518:	ea83 0301 	eor.w	r3, r3, r1
  40351c:	b113      	cbz	r3, 403524 <memchr+0x74>
  40351e:	d1f8      	bne.n	403512 <memchr+0x62>
  403520:	2000      	movs	r0, #0
  403522:	4770      	bx	lr
  403524:	3801      	subs	r0, #1
  403526:	4770      	bx	lr
  403528:	2d00      	cmp	r5, #0
  40352a:	bf06      	itte	eq
  40352c:	4635      	moveq	r5, r6
  40352e:	3803      	subeq	r0, #3
  403530:	3807      	subne	r0, #7
  403532:	f015 0f01 	tst.w	r5, #1
  403536:	d107      	bne.n	403548 <memchr+0x98>
  403538:	3001      	adds	r0, #1
  40353a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40353e:	bf02      	ittt	eq
  403540:	3001      	addeq	r0, #1
  403542:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403546:	3001      	addeq	r0, #1
  403548:	bcf0      	pop	{r4, r5, r6, r7}
  40354a:	3801      	subs	r0, #1
  40354c:	4770      	bx	lr
  40354e:	bf00      	nop

00403550 <_Balloc>:
  403550:	b570      	push	{r4, r5, r6, lr}
  403552:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403554:	4604      	mov	r4, r0
  403556:	460e      	mov	r6, r1
  403558:	b93d      	cbnz	r5, 40356a <_Balloc+0x1a>
  40355a:	2010      	movs	r0, #16
  40355c:	f7ff ff9a 	bl	403494 <malloc>
  403560:	6260      	str	r0, [r4, #36]	; 0x24
  403562:	6045      	str	r5, [r0, #4]
  403564:	6085      	str	r5, [r0, #8]
  403566:	6005      	str	r5, [r0, #0]
  403568:	60c5      	str	r5, [r0, #12]
  40356a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40356c:	68eb      	ldr	r3, [r5, #12]
  40356e:	b143      	cbz	r3, 403582 <_Balloc+0x32>
  403570:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403572:	68db      	ldr	r3, [r3, #12]
  403574:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  403578:	b178      	cbz	r0, 40359a <_Balloc+0x4a>
  40357a:	6802      	ldr	r2, [r0, #0]
  40357c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  403580:	e017      	b.n	4035b2 <_Balloc+0x62>
  403582:	2221      	movs	r2, #33	; 0x21
  403584:	2104      	movs	r1, #4
  403586:	4620      	mov	r0, r4
  403588:	f000 fab8 	bl	403afc <_calloc_r>
  40358c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40358e:	60e8      	str	r0, [r5, #12]
  403590:	68db      	ldr	r3, [r3, #12]
  403592:	2b00      	cmp	r3, #0
  403594:	d1ec      	bne.n	403570 <_Balloc+0x20>
  403596:	2000      	movs	r0, #0
  403598:	bd70      	pop	{r4, r5, r6, pc}
  40359a:	2101      	movs	r1, #1
  40359c:	fa01 f506 	lsl.w	r5, r1, r6
  4035a0:	1d6a      	adds	r2, r5, #5
  4035a2:	0092      	lsls	r2, r2, #2
  4035a4:	4620      	mov	r0, r4
  4035a6:	f000 faa9 	bl	403afc <_calloc_r>
  4035aa:	2800      	cmp	r0, #0
  4035ac:	d0f3      	beq.n	403596 <_Balloc+0x46>
  4035ae:	6046      	str	r6, [r0, #4]
  4035b0:	6085      	str	r5, [r0, #8]
  4035b2:	2300      	movs	r3, #0
  4035b4:	6103      	str	r3, [r0, #16]
  4035b6:	60c3      	str	r3, [r0, #12]
  4035b8:	bd70      	pop	{r4, r5, r6, pc}

004035ba <_Bfree>:
  4035ba:	b570      	push	{r4, r5, r6, lr}
  4035bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4035be:	4606      	mov	r6, r0
  4035c0:	460d      	mov	r5, r1
  4035c2:	b93c      	cbnz	r4, 4035d4 <_Bfree+0x1a>
  4035c4:	2010      	movs	r0, #16
  4035c6:	f7ff ff65 	bl	403494 <malloc>
  4035ca:	6270      	str	r0, [r6, #36]	; 0x24
  4035cc:	6044      	str	r4, [r0, #4]
  4035ce:	6084      	str	r4, [r0, #8]
  4035d0:	6004      	str	r4, [r0, #0]
  4035d2:	60c4      	str	r4, [r0, #12]
  4035d4:	b13d      	cbz	r5, 4035e6 <_Bfree+0x2c>
  4035d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4035d8:	686a      	ldr	r2, [r5, #4]
  4035da:	68db      	ldr	r3, [r3, #12]
  4035dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4035e0:	6029      	str	r1, [r5, #0]
  4035e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4035e6:	bd70      	pop	{r4, r5, r6, pc}

004035e8 <__multadd>:
  4035e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4035ec:	690d      	ldr	r5, [r1, #16]
  4035ee:	461f      	mov	r7, r3
  4035f0:	4606      	mov	r6, r0
  4035f2:	460c      	mov	r4, r1
  4035f4:	f101 0e14 	add.w	lr, r1, #20
  4035f8:	2300      	movs	r3, #0
  4035fa:	f8de 0000 	ldr.w	r0, [lr]
  4035fe:	b281      	uxth	r1, r0
  403600:	fb02 7101 	mla	r1, r2, r1, r7
  403604:	0c0f      	lsrs	r7, r1, #16
  403606:	0c00      	lsrs	r0, r0, #16
  403608:	fb02 7000 	mla	r0, r2, r0, r7
  40360c:	b289      	uxth	r1, r1
  40360e:	3301      	adds	r3, #1
  403610:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  403614:	429d      	cmp	r5, r3
  403616:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40361a:	f84e 1b04 	str.w	r1, [lr], #4
  40361e:	dcec      	bgt.n	4035fa <__multadd+0x12>
  403620:	b1d7      	cbz	r7, 403658 <__multadd+0x70>
  403622:	68a3      	ldr	r3, [r4, #8]
  403624:	429d      	cmp	r5, r3
  403626:	db12      	blt.n	40364e <__multadd+0x66>
  403628:	6861      	ldr	r1, [r4, #4]
  40362a:	4630      	mov	r0, r6
  40362c:	3101      	adds	r1, #1
  40362e:	f7ff ff8f 	bl	403550 <_Balloc>
  403632:	6922      	ldr	r2, [r4, #16]
  403634:	3202      	adds	r2, #2
  403636:	f104 010c 	add.w	r1, r4, #12
  40363a:	4680      	mov	r8, r0
  40363c:	0092      	lsls	r2, r2, #2
  40363e:	300c      	adds	r0, #12
  403640:	f7fe f898 	bl	401774 <memcpy>
  403644:	4621      	mov	r1, r4
  403646:	4630      	mov	r0, r6
  403648:	f7ff ffb7 	bl	4035ba <_Bfree>
  40364c:	4644      	mov	r4, r8
  40364e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403652:	3501      	adds	r5, #1
  403654:	615f      	str	r7, [r3, #20]
  403656:	6125      	str	r5, [r4, #16]
  403658:	4620      	mov	r0, r4
  40365a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040365e <__hi0bits>:
  40365e:	0c03      	lsrs	r3, r0, #16
  403660:	041b      	lsls	r3, r3, #16
  403662:	b913      	cbnz	r3, 40366a <__hi0bits+0xc>
  403664:	0400      	lsls	r0, r0, #16
  403666:	2310      	movs	r3, #16
  403668:	e000      	b.n	40366c <__hi0bits+0xe>
  40366a:	2300      	movs	r3, #0
  40366c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  403670:	bf04      	itt	eq
  403672:	0200      	lsleq	r0, r0, #8
  403674:	3308      	addeq	r3, #8
  403676:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40367a:	bf04      	itt	eq
  40367c:	0100      	lsleq	r0, r0, #4
  40367e:	3304      	addeq	r3, #4
  403680:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  403684:	bf04      	itt	eq
  403686:	0080      	lsleq	r0, r0, #2
  403688:	3302      	addeq	r3, #2
  40368a:	2800      	cmp	r0, #0
  40368c:	db03      	blt.n	403696 <__hi0bits+0x38>
  40368e:	0042      	lsls	r2, r0, #1
  403690:	d503      	bpl.n	40369a <__hi0bits+0x3c>
  403692:	1c58      	adds	r0, r3, #1
  403694:	4770      	bx	lr
  403696:	4618      	mov	r0, r3
  403698:	4770      	bx	lr
  40369a:	2020      	movs	r0, #32
  40369c:	4770      	bx	lr

0040369e <__lo0bits>:
  40369e:	6803      	ldr	r3, [r0, #0]
  4036a0:	f013 0207 	ands.w	r2, r3, #7
  4036a4:	d00b      	beq.n	4036be <__lo0bits+0x20>
  4036a6:	07d9      	lsls	r1, r3, #31
  4036a8:	d422      	bmi.n	4036f0 <__lo0bits+0x52>
  4036aa:	079a      	lsls	r2, r3, #30
  4036ac:	bf4b      	itete	mi
  4036ae:	085b      	lsrmi	r3, r3, #1
  4036b0:	089b      	lsrpl	r3, r3, #2
  4036b2:	6003      	strmi	r3, [r0, #0]
  4036b4:	6003      	strpl	r3, [r0, #0]
  4036b6:	bf4c      	ite	mi
  4036b8:	2001      	movmi	r0, #1
  4036ba:	2002      	movpl	r0, #2
  4036bc:	4770      	bx	lr
  4036be:	b299      	uxth	r1, r3
  4036c0:	b909      	cbnz	r1, 4036c6 <__lo0bits+0x28>
  4036c2:	0c1b      	lsrs	r3, r3, #16
  4036c4:	2210      	movs	r2, #16
  4036c6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4036ca:	bf04      	itt	eq
  4036cc:	0a1b      	lsreq	r3, r3, #8
  4036ce:	3208      	addeq	r2, #8
  4036d0:	0719      	lsls	r1, r3, #28
  4036d2:	bf04      	itt	eq
  4036d4:	091b      	lsreq	r3, r3, #4
  4036d6:	3204      	addeq	r2, #4
  4036d8:	0799      	lsls	r1, r3, #30
  4036da:	bf04      	itt	eq
  4036dc:	089b      	lsreq	r3, r3, #2
  4036de:	3202      	addeq	r2, #2
  4036e0:	07d9      	lsls	r1, r3, #31
  4036e2:	d402      	bmi.n	4036ea <__lo0bits+0x4c>
  4036e4:	085b      	lsrs	r3, r3, #1
  4036e6:	d005      	beq.n	4036f4 <__lo0bits+0x56>
  4036e8:	3201      	adds	r2, #1
  4036ea:	6003      	str	r3, [r0, #0]
  4036ec:	4610      	mov	r0, r2
  4036ee:	4770      	bx	lr
  4036f0:	2000      	movs	r0, #0
  4036f2:	4770      	bx	lr
  4036f4:	2020      	movs	r0, #32
  4036f6:	4770      	bx	lr

004036f8 <__i2b>:
  4036f8:	b510      	push	{r4, lr}
  4036fa:	460c      	mov	r4, r1
  4036fc:	2101      	movs	r1, #1
  4036fe:	f7ff ff27 	bl	403550 <_Balloc>
  403702:	2201      	movs	r2, #1
  403704:	6144      	str	r4, [r0, #20]
  403706:	6102      	str	r2, [r0, #16]
  403708:	bd10      	pop	{r4, pc}

0040370a <__multiply>:
  40370a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40370e:	4614      	mov	r4, r2
  403710:	690a      	ldr	r2, [r1, #16]
  403712:	6923      	ldr	r3, [r4, #16]
  403714:	429a      	cmp	r2, r3
  403716:	bfb8      	it	lt
  403718:	460b      	movlt	r3, r1
  40371a:	4688      	mov	r8, r1
  40371c:	bfbc      	itt	lt
  40371e:	46a0      	movlt	r8, r4
  403720:	461c      	movlt	r4, r3
  403722:	f8d8 7010 	ldr.w	r7, [r8, #16]
  403726:	f8d4 9010 	ldr.w	r9, [r4, #16]
  40372a:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40372e:	f8d8 1004 	ldr.w	r1, [r8, #4]
  403732:	eb07 0609 	add.w	r6, r7, r9
  403736:	429e      	cmp	r6, r3
  403738:	bfc8      	it	gt
  40373a:	3101      	addgt	r1, #1
  40373c:	f7ff ff08 	bl	403550 <_Balloc>
  403740:	f100 0514 	add.w	r5, r0, #20
  403744:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  403748:	462b      	mov	r3, r5
  40374a:	2200      	movs	r2, #0
  40374c:	4563      	cmp	r3, ip
  40374e:	d202      	bcs.n	403756 <__multiply+0x4c>
  403750:	f843 2b04 	str.w	r2, [r3], #4
  403754:	e7fa      	b.n	40374c <__multiply+0x42>
  403756:	f104 0214 	add.w	r2, r4, #20
  40375a:	f108 0114 	add.w	r1, r8, #20
  40375e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  403762:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  403766:	9300      	str	r3, [sp, #0]
  403768:	9b00      	ldr	r3, [sp, #0]
  40376a:	9201      	str	r2, [sp, #4]
  40376c:	4293      	cmp	r3, r2
  40376e:	d957      	bls.n	403820 <__multiply+0x116>
  403770:	f8b2 b000 	ldrh.w	fp, [r2]
  403774:	f1bb 0f00 	cmp.w	fp, #0
  403778:	d023      	beq.n	4037c2 <__multiply+0xb8>
  40377a:	4689      	mov	r9, r1
  40377c:	46ae      	mov	lr, r5
  40377e:	f04f 0800 	mov.w	r8, #0
  403782:	f859 4b04 	ldr.w	r4, [r9], #4
  403786:	f8be a000 	ldrh.w	sl, [lr]
  40378a:	b2a3      	uxth	r3, r4
  40378c:	fb0b a303 	mla	r3, fp, r3, sl
  403790:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  403794:	f8de 4000 	ldr.w	r4, [lr]
  403798:	4443      	add	r3, r8
  40379a:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40379e:	fb0b 840a 	mla	r4, fp, sl, r8
  4037a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4037a6:	46f2      	mov	sl, lr
  4037a8:	b29b      	uxth	r3, r3
  4037aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4037ae:	454f      	cmp	r7, r9
  4037b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4037b4:	f84a 3b04 	str.w	r3, [sl], #4
  4037b8:	d901      	bls.n	4037be <__multiply+0xb4>
  4037ba:	46d6      	mov	lr, sl
  4037bc:	e7e1      	b.n	403782 <__multiply+0x78>
  4037be:	f8ce 8004 	str.w	r8, [lr, #4]
  4037c2:	9b01      	ldr	r3, [sp, #4]
  4037c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  4037c8:	3204      	adds	r2, #4
  4037ca:	f1ba 0f00 	cmp.w	sl, #0
  4037ce:	d021      	beq.n	403814 <__multiply+0x10a>
  4037d0:	682b      	ldr	r3, [r5, #0]
  4037d2:	462c      	mov	r4, r5
  4037d4:	4689      	mov	r9, r1
  4037d6:	f04f 0800 	mov.w	r8, #0
  4037da:	f8b9 e000 	ldrh.w	lr, [r9]
  4037de:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  4037e2:	fb0a be0e 	mla	lr, sl, lr, fp
  4037e6:	44f0      	add	r8, lr
  4037e8:	46a3      	mov	fp, r4
  4037ea:	b29b      	uxth	r3, r3
  4037ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4037f0:	f84b 3b04 	str.w	r3, [fp], #4
  4037f4:	f859 3b04 	ldr.w	r3, [r9], #4
  4037f8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  4037fc:	0c1b      	lsrs	r3, r3, #16
  4037fe:	fb0a e303 	mla	r3, sl, r3, lr
  403802:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  403806:	454f      	cmp	r7, r9
  403808:	ea4f 4813 	mov.w	r8, r3, lsr #16
  40380c:	d901      	bls.n	403812 <__multiply+0x108>
  40380e:	465c      	mov	r4, fp
  403810:	e7e3      	b.n	4037da <__multiply+0xd0>
  403812:	6063      	str	r3, [r4, #4]
  403814:	3504      	adds	r5, #4
  403816:	e7a7      	b.n	403768 <__multiply+0x5e>
  403818:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  40381c:	b913      	cbnz	r3, 403824 <__multiply+0x11a>
  40381e:	3e01      	subs	r6, #1
  403820:	2e00      	cmp	r6, #0
  403822:	dcf9      	bgt.n	403818 <__multiply+0x10e>
  403824:	6106      	str	r6, [r0, #16]
  403826:	b003      	add	sp, #12
  403828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040382c <__pow5mult>:
  40382c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403830:	4615      	mov	r5, r2
  403832:	f012 0203 	ands.w	r2, r2, #3
  403836:	4606      	mov	r6, r0
  403838:	460f      	mov	r7, r1
  40383a:	d007      	beq.n	40384c <__pow5mult+0x20>
  40383c:	3a01      	subs	r2, #1
  40383e:	4c21      	ldr	r4, [pc, #132]	; (4038c4 <__pow5mult+0x98>)
  403840:	2300      	movs	r3, #0
  403842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  403846:	f7ff fecf 	bl	4035e8 <__multadd>
  40384a:	4607      	mov	r7, r0
  40384c:	10ad      	asrs	r5, r5, #2
  40384e:	d036      	beq.n	4038be <__pow5mult+0x92>
  403850:	6a74      	ldr	r4, [r6, #36]	; 0x24
  403852:	b93c      	cbnz	r4, 403864 <__pow5mult+0x38>
  403854:	2010      	movs	r0, #16
  403856:	f7ff fe1d 	bl	403494 <malloc>
  40385a:	6270      	str	r0, [r6, #36]	; 0x24
  40385c:	6044      	str	r4, [r0, #4]
  40385e:	6084      	str	r4, [r0, #8]
  403860:	6004      	str	r4, [r0, #0]
  403862:	60c4      	str	r4, [r0, #12]
  403864:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  403868:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40386c:	b94c      	cbnz	r4, 403882 <__pow5mult+0x56>
  40386e:	f240 2171 	movw	r1, #625	; 0x271
  403872:	4630      	mov	r0, r6
  403874:	f7ff ff40 	bl	4036f8 <__i2b>
  403878:	2300      	movs	r3, #0
  40387a:	f8c8 0008 	str.w	r0, [r8, #8]
  40387e:	4604      	mov	r4, r0
  403880:	6003      	str	r3, [r0, #0]
  403882:	f04f 0800 	mov.w	r8, #0
  403886:	07eb      	lsls	r3, r5, #31
  403888:	d50a      	bpl.n	4038a0 <__pow5mult+0x74>
  40388a:	4639      	mov	r1, r7
  40388c:	4622      	mov	r2, r4
  40388e:	4630      	mov	r0, r6
  403890:	f7ff ff3b 	bl	40370a <__multiply>
  403894:	4639      	mov	r1, r7
  403896:	4681      	mov	r9, r0
  403898:	4630      	mov	r0, r6
  40389a:	f7ff fe8e 	bl	4035ba <_Bfree>
  40389e:	464f      	mov	r7, r9
  4038a0:	106d      	asrs	r5, r5, #1
  4038a2:	d00c      	beq.n	4038be <__pow5mult+0x92>
  4038a4:	6820      	ldr	r0, [r4, #0]
  4038a6:	b108      	cbz	r0, 4038ac <__pow5mult+0x80>
  4038a8:	4604      	mov	r4, r0
  4038aa:	e7ec      	b.n	403886 <__pow5mult+0x5a>
  4038ac:	4622      	mov	r2, r4
  4038ae:	4621      	mov	r1, r4
  4038b0:	4630      	mov	r0, r6
  4038b2:	f7ff ff2a 	bl	40370a <__multiply>
  4038b6:	6020      	str	r0, [r4, #0]
  4038b8:	f8c0 8000 	str.w	r8, [r0]
  4038bc:	e7f4      	b.n	4038a8 <__pow5mult+0x7c>
  4038be:	4638      	mov	r0, r7
  4038c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4038c4:	00404d80 	.word	0x00404d80

004038c8 <__lshift>:
  4038c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4038cc:	460c      	mov	r4, r1
  4038ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4038d2:	6926      	ldr	r6, [r4, #16]
  4038d4:	6849      	ldr	r1, [r1, #4]
  4038d6:	68a3      	ldr	r3, [r4, #8]
  4038d8:	4456      	add	r6, sl
  4038da:	4607      	mov	r7, r0
  4038dc:	4691      	mov	r9, r2
  4038de:	1c75      	adds	r5, r6, #1
  4038e0:	42ab      	cmp	r3, r5
  4038e2:	da02      	bge.n	4038ea <__lshift+0x22>
  4038e4:	3101      	adds	r1, #1
  4038e6:	005b      	lsls	r3, r3, #1
  4038e8:	e7fa      	b.n	4038e0 <__lshift+0x18>
  4038ea:	4638      	mov	r0, r7
  4038ec:	f7ff fe30 	bl	403550 <_Balloc>
  4038f0:	2300      	movs	r3, #0
  4038f2:	4680      	mov	r8, r0
  4038f4:	f100 0114 	add.w	r1, r0, #20
  4038f8:	461a      	mov	r2, r3
  4038fa:	4553      	cmp	r3, sl
  4038fc:	da03      	bge.n	403906 <__lshift+0x3e>
  4038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403902:	3301      	adds	r3, #1
  403904:	e7f9      	b.n	4038fa <__lshift+0x32>
  403906:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  40390a:	6920      	ldr	r0, [r4, #16]
  40390c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403910:	f019 091f 	ands.w	r9, r9, #31
  403914:	f104 0114 	add.w	r1, r4, #20
  403918:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  40391c:	d014      	beq.n	403948 <__lshift+0x80>
  40391e:	f1c9 0c20 	rsb	ip, r9, #32
  403922:	2200      	movs	r2, #0
  403924:	6808      	ldr	r0, [r1, #0]
  403926:	fa00 f009 	lsl.w	r0, r0, r9
  40392a:	4302      	orrs	r2, r0
  40392c:	469a      	mov	sl, r3
  40392e:	f843 2b04 	str.w	r2, [r3], #4
  403932:	f851 2b04 	ldr.w	r2, [r1], #4
  403936:	458e      	cmp	lr, r1
  403938:	fa22 f20c 	lsr.w	r2, r2, ip
  40393c:	d8f2      	bhi.n	403924 <__lshift+0x5c>
  40393e:	f8ca 2004 	str.w	r2, [sl, #4]
  403942:	b142      	cbz	r2, 403956 <__lshift+0x8e>
  403944:	1cb5      	adds	r5, r6, #2
  403946:	e006      	b.n	403956 <__lshift+0x8e>
  403948:	3b04      	subs	r3, #4
  40394a:	f851 2b04 	ldr.w	r2, [r1], #4
  40394e:	f843 2f04 	str.w	r2, [r3, #4]!
  403952:	458e      	cmp	lr, r1
  403954:	d8f9      	bhi.n	40394a <__lshift+0x82>
  403956:	3d01      	subs	r5, #1
  403958:	4638      	mov	r0, r7
  40395a:	f8c8 5010 	str.w	r5, [r8, #16]
  40395e:	4621      	mov	r1, r4
  403960:	f7ff fe2b 	bl	4035ba <_Bfree>
  403964:	4640      	mov	r0, r8
  403966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040396a <__mcmp>:
  40396a:	6903      	ldr	r3, [r0, #16]
  40396c:	690a      	ldr	r2, [r1, #16]
  40396e:	1a9b      	subs	r3, r3, r2
  403970:	b510      	push	{r4, lr}
  403972:	d111      	bne.n	403998 <__mcmp+0x2e>
  403974:	0092      	lsls	r2, r2, #2
  403976:	3014      	adds	r0, #20
  403978:	3114      	adds	r1, #20
  40397a:	1883      	adds	r3, r0, r2
  40397c:	440a      	add	r2, r1
  40397e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  403982:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  403986:	428c      	cmp	r4, r1
  403988:	d002      	beq.n	403990 <__mcmp+0x26>
  40398a:	d307      	bcc.n	40399c <__mcmp+0x32>
  40398c:	2001      	movs	r0, #1
  40398e:	bd10      	pop	{r4, pc}
  403990:	4298      	cmp	r0, r3
  403992:	d3f4      	bcc.n	40397e <__mcmp+0x14>
  403994:	2000      	movs	r0, #0
  403996:	bd10      	pop	{r4, pc}
  403998:	4618      	mov	r0, r3
  40399a:	bd10      	pop	{r4, pc}
  40399c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4039a0:	bd10      	pop	{r4, pc}

004039a2 <__mdiff>:
  4039a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4039a6:	460c      	mov	r4, r1
  4039a8:	4607      	mov	r7, r0
  4039aa:	4611      	mov	r1, r2
  4039ac:	4620      	mov	r0, r4
  4039ae:	4615      	mov	r5, r2
  4039b0:	f7ff ffdb 	bl	40396a <__mcmp>
  4039b4:	1e06      	subs	r6, r0, #0
  4039b6:	d108      	bne.n	4039ca <__mdiff+0x28>
  4039b8:	4631      	mov	r1, r6
  4039ba:	4638      	mov	r0, r7
  4039bc:	f7ff fdc8 	bl	403550 <_Balloc>
  4039c0:	2301      	movs	r3, #1
  4039c2:	6103      	str	r3, [r0, #16]
  4039c4:	6146      	str	r6, [r0, #20]
  4039c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4039ca:	bfbc      	itt	lt
  4039cc:	4623      	movlt	r3, r4
  4039ce:	462c      	movlt	r4, r5
  4039d0:	4638      	mov	r0, r7
  4039d2:	6861      	ldr	r1, [r4, #4]
  4039d4:	bfba      	itte	lt
  4039d6:	461d      	movlt	r5, r3
  4039d8:	2601      	movlt	r6, #1
  4039da:	2600      	movge	r6, #0
  4039dc:	f7ff fdb8 	bl	403550 <_Balloc>
  4039e0:	692b      	ldr	r3, [r5, #16]
  4039e2:	60c6      	str	r6, [r0, #12]
  4039e4:	6926      	ldr	r6, [r4, #16]
  4039e6:	f105 0914 	add.w	r9, r5, #20
  4039ea:	3414      	adds	r4, #20
  4039ec:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  4039f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4039f4:	f100 0514 	add.w	r5, r0, #20
  4039f8:	f04f 0c00 	mov.w	ip, #0
  4039fc:	f854 3b04 	ldr.w	r3, [r4], #4
  403a00:	f859 2b04 	ldr.w	r2, [r9], #4
  403a04:	fa1c f183 	uxtah	r1, ip, r3
  403a08:	fa1f fe82 	uxth.w	lr, r2
  403a0c:	0c12      	lsrs	r2, r2, #16
  403a0e:	ebce 0101 	rsb	r1, lr, r1
  403a12:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  403a16:	eb03 4321 	add.w	r3, r3, r1, asr #16
  403a1a:	b289      	uxth	r1, r1
  403a1c:	ea4f 4c23 	mov.w	ip, r3, asr #16
  403a20:	45c8      	cmp	r8, r9
  403a22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  403a26:	46a6      	mov	lr, r4
  403a28:	f845 3b04 	str.w	r3, [r5], #4
  403a2c:	d8e6      	bhi.n	4039fc <__mdiff+0x5a>
  403a2e:	45be      	cmp	lr, r7
  403a30:	d20e      	bcs.n	403a50 <__mdiff+0xae>
  403a32:	f85e 1b04 	ldr.w	r1, [lr], #4
  403a36:	fa1c f281 	uxtah	r2, ip, r1
  403a3a:	1413      	asrs	r3, r2, #16
  403a3c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  403a40:	b292      	uxth	r2, r2
  403a42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403a46:	ea4f 4c23 	mov.w	ip, r3, asr #16
  403a4a:	f845 2b04 	str.w	r2, [r5], #4
  403a4e:	e7ee      	b.n	403a2e <__mdiff+0x8c>
  403a50:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403a54:	b90b      	cbnz	r3, 403a5a <__mdiff+0xb8>
  403a56:	3e01      	subs	r6, #1
  403a58:	e7fa      	b.n	403a50 <__mdiff+0xae>
  403a5a:	6106      	str	r6, [r0, #16]
  403a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00403a60 <__d2b>:
  403a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  403a64:	2101      	movs	r1, #1
  403a66:	461c      	mov	r4, r3
  403a68:	4690      	mov	r8, r2
  403a6a:	9e08      	ldr	r6, [sp, #32]
  403a6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403a6e:	f7ff fd6f 	bl	403550 <_Balloc>
  403a72:	f3c4 0213 	ubfx	r2, r4, #0, #20
  403a76:	f3c4 540a 	ubfx	r4, r4, #20, #11
  403a7a:	4607      	mov	r7, r0
  403a7c:	b10c      	cbz	r4, 403a82 <__d2b+0x22>
  403a7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  403a82:	9201      	str	r2, [sp, #4]
  403a84:	f1b8 0f00 	cmp.w	r8, #0
  403a88:	d019      	beq.n	403abe <__d2b+0x5e>
  403a8a:	a802      	add	r0, sp, #8
  403a8c:	f840 8d08 	str.w	r8, [r0, #-8]!
  403a90:	f7ff fe05 	bl	40369e <__lo0bits>
  403a94:	9b00      	ldr	r3, [sp, #0]
  403a96:	b148      	cbz	r0, 403aac <__d2b+0x4c>
  403a98:	9a01      	ldr	r2, [sp, #4]
  403a9a:	f1c0 0120 	rsb	r1, r0, #32
  403a9e:	fa02 f101 	lsl.w	r1, r2, r1
  403aa2:	430b      	orrs	r3, r1
  403aa4:	40c2      	lsrs	r2, r0
  403aa6:	617b      	str	r3, [r7, #20]
  403aa8:	9201      	str	r2, [sp, #4]
  403aaa:	e000      	b.n	403aae <__d2b+0x4e>
  403aac:	617b      	str	r3, [r7, #20]
  403aae:	9b01      	ldr	r3, [sp, #4]
  403ab0:	61bb      	str	r3, [r7, #24]
  403ab2:	2b00      	cmp	r3, #0
  403ab4:	bf14      	ite	ne
  403ab6:	2102      	movne	r1, #2
  403ab8:	2101      	moveq	r1, #1
  403aba:	6139      	str	r1, [r7, #16]
  403abc:	e007      	b.n	403ace <__d2b+0x6e>
  403abe:	a801      	add	r0, sp, #4
  403ac0:	f7ff fded 	bl	40369e <__lo0bits>
  403ac4:	9b01      	ldr	r3, [sp, #4]
  403ac6:	617b      	str	r3, [r7, #20]
  403ac8:	2101      	movs	r1, #1
  403aca:	6139      	str	r1, [r7, #16]
  403acc:	3020      	adds	r0, #32
  403ace:	b134      	cbz	r4, 403ade <__d2b+0x7e>
  403ad0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  403ad4:	4404      	add	r4, r0
  403ad6:	6034      	str	r4, [r6, #0]
  403ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  403adc:	e009      	b.n	403af2 <__d2b+0x92>
  403ade:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  403ae2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  403ae6:	6030      	str	r0, [r6, #0]
  403ae8:	6918      	ldr	r0, [r3, #16]
  403aea:	f7ff fdb8 	bl	40365e <__hi0bits>
  403aee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  403af2:	6028      	str	r0, [r5, #0]
  403af4:	4638      	mov	r0, r7
  403af6:	b002      	add	sp, #8
  403af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403afc <_calloc_r>:
  403afc:	b538      	push	{r3, r4, r5, lr}
  403afe:	fb02 f401 	mul.w	r4, r2, r1
  403b02:	4621      	mov	r1, r4
  403b04:	f000 f856 	bl	403bb4 <_malloc_r>
  403b08:	4605      	mov	r5, r0
  403b0a:	b118      	cbz	r0, 403b14 <_calloc_r+0x18>
  403b0c:	4622      	mov	r2, r4
  403b0e:	2100      	movs	r1, #0
  403b10:	f7fd fe3b 	bl	40178a <memset>
  403b14:	4628      	mov	r0, r5
  403b16:	bd38      	pop	{r3, r4, r5, pc}

00403b18 <_free_r>:
  403b18:	b538      	push	{r3, r4, r5, lr}
  403b1a:	4605      	mov	r5, r0
  403b1c:	2900      	cmp	r1, #0
  403b1e:	d046      	beq.n	403bae <_free_r+0x96>
  403b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
  403b24:	1f0c      	subs	r4, r1, #4
  403b26:	2b00      	cmp	r3, #0
  403b28:	bfb8      	it	lt
  403b2a:	18e4      	addlt	r4, r4, r3
  403b2c:	f000 faa0 	bl	404070 <__malloc_lock>
  403b30:	4a1f      	ldr	r2, [pc, #124]	; (403bb0 <_free_r+0x98>)
  403b32:	6813      	ldr	r3, [r2, #0]
  403b34:	4611      	mov	r1, r2
  403b36:	b913      	cbnz	r3, 403b3e <_free_r+0x26>
  403b38:	6063      	str	r3, [r4, #4]
  403b3a:	6014      	str	r4, [r2, #0]
  403b3c:	e032      	b.n	403ba4 <_free_r+0x8c>
  403b3e:	42a3      	cmp	r3, r4
  403b40:	d90e      	bls.n	403b60 <_free_r+0x48>
  403b42:	6822      	ldr	r2, [r4, #0]
  403b44:	18a0      	adds	r0, r4, r2
  403b46:	4283      	cmp	r3, r0
  403b48:	bf04      	itt	eq
  403b4a:	6818      	ldreq	r0, [r3, #0]
  403b4c:	685b      	ldreq	r3, [r3, #4]
  403b4e:	6063      	str	r3, [r4, #4]
  403b50:	bf04      	itt	eq
  403b52:	1812      	addeq	r2, r2, r0
  403b54:	6022      	streq	r2, [r4, #0]
  403b56:	600c      	str	r4, [r1, #0]
  403b58:	e024      	b.n	403ba4 <_free_r+0x8c>
  403b5a:	42a2      	cmp	r2, r4
  403b5c:	d803      	bhi.n	403b66 <_free_r+0x4e>
  403b5e:	4613      	mov	r3, r2
  403b60:	685a      	ldr	r2, [r3, #4]
  403b62:	2a00      	cmp	r2, #0
  403b64:	d1f9      	bne.n	403b5a <_free_r+0x42>
  403b66:	6818      	ldr	r0, [r3, #0]
  403b68:	1819      	adds	r1, r3, r0
  403b6a:	42a1      	cmp	r1, r4
  403b6c:	d10b      	bne.n	403b86 <_free_r+0x6e>
  403b6e:	6821      	ldr	r1, [r4, #0]
  403b70:	4401      	add	r1, r0
  403b72:	1858      	adds	r0, r3, r1
  403b74:	4282      	cmp	r2, r0
  403b76:	6019      	str	r1, [r3, #0]
  403b78:	d114      	bne.n	403ba4 <_free_r+0x8c>
  403b7a:	6810      	ldr	r0, [r2, #0]
  403b7c:	6852      	ldr	r2, [r2, #4]
  403b7e:	605a      	str	r2, [r3, #4]
  403b80:	4401      	add	r1, r0
  403b82:	6019      	str	r1, [r3, #0]
  403b84:	e00e      	b.n	403ba4 <_free_r+0x8c>
  403b86:	d902      	bls.n	403b8e <_free_r+0x76>
  403b88:	230c      	movs	r3, #12
  403b8a:	602b      	str	r3, [r5, #0]
  403b8c:	e00a      	b.n	403ba4 <_free_r+0x8c>
  403b8e:	6821      	ldr	r1, [r4, #0]
  403b90:	1860      	adds	r0, r4, r1
  403b92:	4282      	cmp	r2, r0
  403b94:	bf04      	itt	eq
  403b96:	6810      	ldreq	r0, [r2, #0]
  403b98:	6852      	ldreq	r2, [r2, #4]
  403b9a:	6062      	str	r2, [r4, #4]
  403b9c:	bf04      	itt	eq
  403b9e:	1809      	addeq	r1, r1, r0
  403ba0:	6021      	streq	r1, [r4, #0]
  403ba2:	605c      	str	r4, [r3, #4]
  403ba4:	4628      	mov	r0, r5
  403ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403baa:	f000 ba62 	b.w	404072 <__malloc_unlock>
  403bae:	bd38      	pop	{r3, r4, r5, pc}
  403bb0:	200002a0 	.word	0x200002a0

00403bb4 <_malloc_r>:
  403bb4:	b570      	push	{r4, r5, r6, lr}
  403bb6:	1ccd      	adds	r5, r1, #3
  403bb8:	f025 0503 	bic.w	r5, r5, #3
  403bbc:	3508      	adds	r5, #8
  403bbe:	2d0c      	cmp	r5, #12
  403bc0:	bf38      	it	cc
  403bc2:	250c      	movcc	r5, #12
  403bc4:	2d00      	cmp	r5, #0
  403bc6:	4606      	mov	r6, r0
  403bc8:	db01      	blt.n	403bce <_malloc_r+0x1a>
  403bca:	42a9      	cmp	r1, r5
  403bcc:	d902      	bls.n	403bd4 <_malloc_r+0x20>
  403bce:	230c      	movs	r3, #12
  403bd0:	6033      	str	r3, [r6, #0]
  403bd2:	e046      	b.n	403c62 <_malloc_r+0xae>
  403bd4:	f000 fa4c 	bl	404070 <__malloc_lock>
  403bd8:	4b23      	ldr	r3, [pc, #140]	; (403c68 <_malloc_r+0xb4>)
  403bda:	681c      	ldr	r4, [r3, #0]
  403bdc:	461a      	mov	r2, r3
  403bde:	4621      	mov	r1, r4
  403be0:	b1a1      	cbz	r1, 403c0c <_malloc_r+0x58>
  403be2:	680b      	ldr	r3, [r1, #0]
  403be4:	1b5b      	subs	r3, r3, r5
  403be6:	d40e      	bmi.n	403c06 <_malloc_r+0x52>
  403be8:	2b0b      	cmp	r3, #11
  403bea:	d903      	bls.n	403bf4 <_malloc_r+0x40>
  403bec:	600b      	str	r3, [r1, #0]
  403bee:	18cc      	adds	r4, r1, r3
  403bf0:	50cd      	str	r5, [r1, r3]
  403bf2:	e01e      	b.n	403c32 <_malloc_r+0x7e>
  403bf4:	428c      	cmp	r4, r1
  403bf6:	bf0d      	iteet	eq
  403bf8:	6863      	ldreq	r3, [r4, #4]
  403bfa:	684b      	ldrne	r3, [r1, #4]
  403bfc:	6063      	strne	r3, [r4, #4]
  403bfe:	6013      	streq	r3, [r2, #0]
  403c00:	bf18      	it	ne
  403c02:	460c      	movne	r4, r1
  403c04:	e015      	b.n	403c32 <_malloc_r+0x7e>
  403c06:	460c      	mov	r4, r1
  403c08:	6849      	ldr	r1, [r1, #4]
  403c0a:	e7e9      	b.n	403be0 <_malloc_r+0x2c>
  403c0c:	4c17      	ldr	r4, [pc, #92]	; (403c6c <_malloc_r+0xb8>)
  403c0e:	6823      	ldr	r3, [r4, #0]
  403c10:	b91b      	cbnz	r3, 403c1a <_malloc_r+0x66>
  403c12:	4630      	mov	r0, r6
  403c14:	f000 f970 	bl	403ef8 <_sbrk_r>
  403c18:	6020      	str	r0, [r4, #0]
  403c1a:	4629      	mov	r1, r5
  403c1c:	4630      	mov	r0, r6
  403c1e:	f000 f96b 	bl	403ef8 <_sbrk_r>
  403c22:	1c43      	adds	r3, r0, #1
  403c24:	d018      	beq.n	403c58 <_malloc_r+0xa4>
  403c26:	1cc4      	adds	r4, r0, #3
  403c28:	f024 0403 	bic.w	r4, r4, #3
  403c2c:	42a0      	cmp	r0, r4
  403c2e:	d10d      	bne.n	403c4c <_malloc_r+0x98>
  403c30:	6025      	str	r5, [r4, #0]
  403c32:	4630      	mov	r0, r6
  403c34:	f000 fa1d 	bl	404072 <__malloc_unlock>
  403c38:	f104 000b 	add.w	r0, r4, #11
  403c3c:	1d23      	adds	r3, r4, #4
  403c3e:	f020 0007 	bic.w	r0, r0, #7
  403c42:	1ac3      	subs	r3, r0, r3
  403c44:	d00e      	beq.n	403c64 <_malloc_r+0xb0>
  403c46:	425a      	negs	r2, r3
  403c48:	50e2      	str	r2, [r4, r3]
  403c4a:	bd70      	pop	{r4, r5, r6, pc}
  403c4c:	1a21      	subs	r1, r4, r0
  403c4e:	4630      	mov	r0, r6
  403c50:	f000 f952 	bl	403ef8 <_sbrk_r>
  403c54:	3001      	adds	r0, #1
  403c56:	d1eb      	bne.n	403c30 <_malloc_r+0x7c>
  403c58:	230c      	movs	r3, #12
  403c5a:	6033      	str	r3, [r6, #0]
  403c5c:	4630      	mov	r0, r6
  403c5e:	f000 fa08 	bl	404072 <__malloc_unlock>
  403c62:	2000      	movs	r0, #0
  403c64:	bd70      	pop	{r4, r5, r6, pc}
  403c66:	bf00      	nop
  403c68:	200002a0 	.word	0x200002a0
  403c6c:	2000029c 	.word	0x2000029c

00403c70 <__sfputc_r>:
  403c70:	6893      	ldr	r3, [r2, #8]
  403c72:	3b01      	subs	r3, #1
  403c74:	2b00      	cmp	r3, #0
  403c76:	b410      	push	{r4}
  403c78:	6093      	str	r3, [r2, #8]
  403c7a:	da08      	bge.n	403c8e <__sfputc_r+0x1e>
  403c7c:	6994      	ldr	r4, [r2, #24]
  403c7e:	42a3      	cmp	r3, r4
  403c80:	db02      	blt.n	403c88 <__sfputc_r+0x18>
  403c82:	b2cb      	uxtb	r3, r1
  403c84:	2b0a      	cmp	r3, #10
  403c86:	d102      	bne.n	403c8e <__sfputc_r+0x1e>
  403c88:	bc10      	pop	{r4}
  403c8a:	f7fe bb29 	b.w	4022e0 <__swbuf_r>
  403c8e:	6813      	ldr	r3, [r2, #0]
  403c90:	1c58      	adds	r0, r3, #1
  403c92:	6010      	str	r0, [r2, #0]
  403c94:	7019      	strb	r1, [r3, #0]
  403c96:	b2c8      	uxtb	r0, r1
  403c98:	bc10      	pop	{r4}
  403c9a:	4770      	bx	lr

00403c9c <__sfputs_r>:
  403c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c9e:	4606      	mov	r6, r0
  403ca0:	460f      	mov	r7, r1
  403ca2:	4614      	mov	r4, r2
  403ca4:	18d5      	adds	r5, r2, r3
  403ca6:	42ac      	cmp	r4, r5
  403ca8:	d008      	beq.n	403cbc <__sfputs_r+0x20>
  403caa:	463a      	mov	r2, r7
  403cac:	f814 1b01 	ldrb.w	r1, [r4], #1
  403cb0:	4630      	mov	r0, r6
  403cb2:	f7ff ffdd 	bl	403c70 <__sfputc_r>
  403cb6:	1c43      	adds	r3, r0, #1
  403cb8:	d1f5      	bne.n	403ca6 <__sfputs_r+0xa>
  403cba:	e000      	b.n	403cbe <__sfputs_r+0x22>
  403cbc:	2000      	movs	r0, #0
  403cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00403cc0 <_vfiprintf_r>:
  403cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403cc4:	b09d      	sub	sp, #116	; 0x74
  403cc6:	460c      	mov	r4, r1
  403cc8:	4617      	mov	r7, r2
  403cca:	9303      	str	r3, [sp, #12]
  403ccc:	4606      	mov	r6, r0
  403cce:	b118      	cbz	r0, 403cd8 <_vfiprintf_r+0x18>
  403cd0:	6983      	ldr	r3, [r0, #24]
  403cd2:	b90b      	cbnz	r3, 403cd8 <_vfiprintf_r+0x18>
  403cd4:	f7ff fae6 	bl	4032a4 <__sinit>
  403cd8:	4b7f      	ldr	r3, [pc, #508]	; (403ed8 <_vfiprintf_r+0x218>)
  403cda:	429c      	cmp	r4, r3
  403cdc:	d101      	bne.n	403ce2 <_vfiprintf_r+0x22>
  403cde:	6874      	ldr	r4, [r6, #4]
  403ce0:	e008      	b.n	403cf4 <_vfiprintf_r+0x34>
  403ce2:	4b7e      	ldr	r3, [pc, #504]	; (403edc <_vfiprintf_r+0x21c>)
  403ce4:	429c      	cmp	r4, r3
  403ce6:	d101      	bne.n	403cec <_vfiprintf_r+0x2c>
  403ce8:	68b4      	ldr	r4, [r6, #8]
  403cea:	e003      	b.n	403cf4 <_vfiprintf_r+0x34>
  403cec:	4b7c      	ldr	r3, [pc, #496]	; (403ee0 <_vfiprintf_r+0x220>)
  403cee:	429c      	cmp	r4, r3
  403cf0:	bf08      	it	eq
  403cf2:	68f4      	ldreq	r4, [r6, #12]
  403cf4:	89a3      	ldrh	r3, [r4, #12]
  403cf6:	0718      	lsls	r0, r3, #28
  403cf8:	d50c      	bpl.n	403d14 <_vfiprintf_r+0x54>
  403cfa:	6923      	ldr	r3, [r4, #16]
  403cfc:	b153      	cbz	r3, 403d14 <_vfiprintf_r+0x54>
  403cfe:	2300      	movs	r3, #0
  403d00:	9309      	str	r3, [sp, #36]	; 0x24
  403d02:	2320      	movs	r3, #32
  403d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  403d08:	2330      	movs	r3, #48	; 0x30
  403d0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  403d0e:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 403ee4 <_vfiprintf_r+0x224>
  403d12:	e044      	b.n	403d9e <_vfiprintf_r+0xde>
  403d14:	4621      	mov	r1, r4
  403d16:	4630      	mov	r0, r6
  403d18:	f7fe fb36 	bl	402388 <__swsetup_r>
  403d1c:	2800      	cmp	r0, #0
  403d1e:	d0ee      	beq.n	403cfe <_vfiprintf_r+0x3e>
  403d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403d24:	e0d5      	b.n	403ed2 <_vfiprintf_r+0x212>
  403d26:	9a03      	ldr	r2, [sp, #12]
  403d28:	1d11      	adds	r1, r2, #4
  403d2a:	6812      	ldr	r2, [r2, #0]
  403d2c:	9103      	str	r1, [sp, #12]
  403d2e:	2a00      	cmp	r2, #0
  403d30:	f280 808c 	bge.w	403e4c <_vfiprintf_r+0x18c>
  403d34:	4252      	negs	r2, r2
  403d36:	f043 0002 	orr.w	r0, r3, #2
  403d3a:	9207      	str	r2, [sp, #28]
  403d3c:	9004      	str	r0, [sp, #16]
  403d3e:	f898 3000 	ldrb.w	r3, [r8]
  403d42:	2b2e      	cmp	r3, #46	; 0x2e
  403d44:	f000 8084 	beq.w	403e50 <_vfiprintf_r+0x190>
  403d48:	2203      	movs	r2, #3
  403d4a:	f898 1000 	ldrb.w	r1, [r8]
  403d4e:	4865      	ldr	r0, [pc, #404]	; (403ee4 <_vfiprintf_r+0x224>)
  403d50:	f7ff fbae 	bl	4034b0 <memchr>
  403d54:	b148      	cbz	r0, 403d6a <_vfiprintf_r+0xaa>
  403d56:	2340      	movs	r3, #64	; 0x40
  403d58:	ebcb 0000 	rsb	r0, fp, r0
  403d5c:	fa03 f000 	lsl.w	r0, r3, r0
  403d60:	9b04      	ldr	r3, [sp, #16]
  403d62:	4318      	orrs	r0, r3
  403d64:	9004      	str	r0, [sp, #16]
  403d66:	f108 0801 	add.w	r8, r8, #1
  403d6a:	f898 1000 	ldrb.w	r1, [r8]
  403d6e:	485e      	ldr	r0, [pc, #376]	; (403ee8 <_vfiprintf_r+0x228>)
  403d70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  403d74:	2206      	movs	r2, #6
  403d76:	f108 0701 	add.w	r7, r8, #1
  403d7a:	f7ff fb99 	bl	4034b0 <memchr>
  403d7e:	2800      	cmp	r0, #0
  403d80:	f000 8095 	beq.w	403eae <_vfiprintf_r+0x1ee>
  403d84:	4b59      	ldr	r3, [pc, #356]	; (403eec <_vfiprintf_r+0x22c>)
  403d86:	2b00      	cmp	r3, #0
  403d88:	f040 8088 	bne.w	403e9c <_vfiprintf_r+0x1dc>
  403d8c:	9b03      	ldr	r3, [sp, #12]
  403d8e:	3307      	adds	r3, #7
  403d90:	f023 0307 	bic.w	r3, r3, #7
  403d94:	3308      	adds	r3, #8
  403d96:	9303      	str	r3, [sp, #12]
  403d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d9a:	4453      	add	r3, sl
  403d9c:	9309      	str	r3, [sp, #36]	; 0x24
  403d9e:	46b8      	mov	r8, r7
  403da0:	4645      	mov	r5, r8
  403da2:	f815 3b01 	ldrb.w	r3, [r5], #1
  403da6:	b91b      	cbnz	r3, 403db0 <_vfiprintf_r+0xf0>
  403da8:	ebb8 0907 	subs.w	r9, r8, r7
  403dac:	d00f      	beq.n	403dce <_vfiprintf_r+0x10e>
  403dae:	e003      	b.n	403db8 <_vfiprintf_r+0xf8>
  403db0:	2b25      	cmp	r3, #37	; 0x25
  403db2:	d0f9      	beq.n	403da8 <_vfiprintf_r+0xe8>
  403db4:	46a8      	mov	r8, r5
  403db6:	e7f3      	b.n	403da0 <_vfiprintf_r+0xe0>
  403db8:	464b      	mov	r3, r9
  403dba:	463a      	mov	r2, r7
  403dbc:	4621      	mov	r1, r4
  403dbe:	4630      	mov	r0, r6
  403dc0:	f7ff ff6c 	bl	403c9c <__sfputs_r>
  403dc4:	3001      	adds	r0, #1
  403dc6:	d07f      	beq.n	403ec8 <_vfiprintf_r+0x208>
  403dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403dca:	444b      	add	r3, r9
  403dcc:	9309      	str	r3, [sp, #36]	; 0x24
  403dce:	f898 3000 	ldrb.w	r3, [r8]
  403dd2:	2b00      	cmp	r3, #0
  403dd4:	d078      	beq.n	403ec8 <_vfiprintf_r+0x208>
  403dd6:	2300      	movs	r3, #0
  403dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  403ddc:	9304      	str	r3, [sp, #16]
  403dde:	9307      	str	r3, [sp, #28]
  403de0:	9205      	str	r2, [sp, #20]
  403de2:	9306      	str	r3, [sp, #24]
  403de4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  403de8:	931a      	str	r3, [sp, #104]	; 0x68
  403dea:	2701      	movs	r7, #1
  403dec:	2205      	movs	r2, #5
  403dee:	7829      	ldrb	r1, [r5, #0]
  403df0:	483f      	ldr	r0, [pc, #252]	; (403ef0 <_vfiprintf_r+0x230>)
  403df2:	f7ff fb5d 	bl	4034b0 <memchr>
  403df6:	f105 0801 	add.w	r8, r5, #1
  403dfa:	9b04      	ldr	r3, [sp, #16]
  403dfc:	b138      	cbz	r0, 403e0e <_vfiprintf_r+0x14e>
  403dfe:	4a3c      	ldr	r2, [pc, #240]	; (403ef0 <_vfiprintf_r+0x230>)
  403e00:	1a80      	subs	r0, r0, r2
  403e02:	fa07 f000 	lsl.w	r0, r7, r0
  403e06:	4318      	orrs	r0, r3
  403e08:	9004      	str	r0, [sp, #16]
  403e0a:	4645      	mov	r5, r8
  403e0c:	e7ee      	b.n	403dec <_vfiprintf_r+0x12c>
  403e0e:	06d9      	lsls	r1, r3, #27
  403e10:	bf44      	itt	mi
  403e12:	2220      	movmi	r2, #32
  403e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  403e18:	071a      	lsls	r2, r3, #28
  403e1a:	bf44      	itt	mi
  403e1c:	222b      	movmi	r2, #43	; 0x2b
  403e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  403e22:	782a      	ldrb	r2, [r5, #0]
  403e24:	2a2a      	cmp	r2, #42	; 0x2a
  403e26:	f43f af7e 	beq.w	403d26 <_vfiprintf_r+0x66>
  403e2a:	9a07      	ldr	r2, [sp, #28]
  403e2c:	2100      	movs	r1, #0
  403e2e:	200a      	movs	r0, #10
  403e30:	46a8      	mov	r8, r5
  403e32:	3501      	adds	r5, #1
  403e34:	f898 3000 	ldrb.w	r3, [r8]
  403e38:	3b30      	subs	r3, #48	; 0x30
  403e3a:	2b09      	cmp	r3, #9
  403e3c:	d803      	bhi.n	403e46 <_vfiprintf_r+0x186>
  403e3e:	fb00 3202 	mla	r2, r0, r2, r3
  403e42:	2101      	movs	r1, #1
  403e44:	e7f4      	b.n	403e30 <_vfiprintf_r+0x170>
  403e46:	2900      	cmp	r1, #0
  403e48:	f43f af79 	beq.w	403d3e <_vfiprintf_r+0x7e>
  403e4c:	9207      	str	r2, [sp, #28]
  403e4e:	e776      	b.n	403d3e <_vfiprintf_r+0x7e>
  403e50:	f898 3001 	ldrb.w	r3, [r8, #1]
  403e54:	2b2a      	cmp	r3, #42	; 0x2a
  403e56:	d10b      	bne.n	403e70 <_vfiprintf_r+0x1b0>
  403e58:	9b03      	ldr	r3, [sp, #12]
  403e5a:	1d1a      	adds	r2, r3, #4
  403e5c:	681b      	ldr	r3, [r3, #0]
  403e5e:	9203      	str	r2, [sp, #12]
  403e60:	2b00      	cmp	r3, #0
  403e62:	bfb8      	it	lt
  403e64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  403e68:	f108 0802 	add.w	r8, r8, #2
  403e6c:	9305      	str	r3, [sp, #20]
  403e6e:	e76b      	b.n	403d48 <_vfiprintf_r+0x88>
  403e70:	2300      	movs	r3, #0
  403e72:	9305      	str	r3, [sp, #20]
  403e74:	f108 0001 	add.w	r0, r8, #1
  403e78:	4619      	mov	r1, r3
  403e7a:	250a      	movs	r5, #10
  403e7c:	4680      	mov	r8, r0
  403e7e:	3001      	adds	r0, #1
  403e80:	f898 2000 	ldrb.w	r2, [r8]
  403e84:	3a30      	subs	r2, #48	; 0x30
  403e86:	2a09      	cmp	r2, #9
  403e88:	d803      	bhi.n	403e92 <_vfiprintf_r+0x1d2>
  403e8a:	fb05 2101 	mla	r1, r5, r1, r2
  403e8e:	2301      	movs	r3, #1
  403e90:	e7f4      	b.n	403e7c <_vfiprintf_r+0x1bc>
  403e92:	2b00      	cmp	r3, #0
  403e94:	f43f af58 	beq.w	403d48 <_vfiprintf_r+0x88>
  403e98:	9105      	str	r1, [sp, #20]
  403e9a:	e755      	b.n	403d48 <_vfiprintf_r+0x88>
  403e9c:	ab03      	add	r3, sp, #12
  403e9e:	9300      	str	r3, [sp, #0]
  403ea0:	4622      	mov	r2, r4
  403ea2:	4b14      	ldr	r3, [pc, #80]	; (403ef4 <_vfiprintf_r+0x234>)
  403ea4:	a904      	add	r1, sp, #16
  403ea6:	4630      	mov	r0, r6
  403ea8:	f7fd fd06 	bl	4018b8 <_printf_float>
  403eac:	e007      	b.n	403ebe <_vfiprintf_r+0x1fe>
  403eae:	ab03      	add	r3, sp, #12
  403eb0:	9300      	str	r3, [sp, #0]
  403eb2:	4622      	mov	r2, r4
  403eb4:	4b0f      	ldr	r3, [pc, #60]	; (403ef4 <_vfiprintf_r+0x234>)
  403eb6:	a904      	add	r1, sp, #16
  403eb8:	4630      	mov	r0, r6
  403eba:	f7fd ffb7 	bl	401e2c <_printf_i>
  403ebe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  403ec2:	4682      	mov	sl, r0
  403ec4:	f47f af68 	bne.w	403d98 <_vfiprintf_r+0xd8>
  403ec8:	89a3      	ldrh	r3, [r4, #12]
  403eca:	065b      	lsls	r3, r3, #25
  403ecc:	f53f af28 	bmi.w	403d20 <_vfiprintf_r+0x60>
  403ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
  403ed2:	b01d      	add	sp, #116	; 0x74
  403ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ed8:	00404c2c 	.word	0x00404c2c
  403edc:	00404c4c 	.word	0x00404c4c
  403ee0:	00404c6c 	.word	0x00404c6c
  403ee4:	00404d92 	.word	0x00404d92
  403ee8:	00404d96 	.word	0x00404d96
  403eec:	004018b9 	.word	0x004018b9
  403ef0:	00404d8c 	.word	0x00404d8c
  403ef4:	00403c9d 	.word	0x00403c9d

00403ef8 <_sbrk_r>:
  403ef8:	b538      	push	{r3, r4, r5, lr}
  403efa:	4c06      	ldr	r4, [pc, #24]	; (403f14 <_sbrk_r+0x1c>)
  403efc:	2300      	movs	r3, #0
  403efe:	4605      	mov	r5, r0
  403f00:	4608      	mov	r0, r1
  403f02:	6023      	str	r3, [r4, #0]
  403f04:	f7fd fbe8 	bl	4016d8 <_sbrk>
  403f08:	1c43      	adds	r3, r0, #1
  403f0a:	d102      	bne.n	403f12 <_sbrk_r+0x1a>
  403f0c:	6823      	ldr	r3, [r4, #0]
  403f0e:	b103      	cbz	r3, 403f12 <_sbrk_r+0x1a>
  403f10:	602b      	str	r3, [r5, #0]
  403f12:	bd38      	pop	{r3, r4, r5, pc}
  403f14:	200004b4 	.word	0x200004b4

00403f18 <__sread>:
  403f18:	b510      	push	{r4, lr}
  403f1a:	460c      	mov	r4, r1
  403f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f20:	f000 f8a8 	bl	404074 <_read_r>
  403f24:	2800      	cmp	r0, #0
  403f26:	bfab      	itete	ge
  403f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  403f2a:	89a3      	ldrhlt	r3, [r4, #12]
  403f2c:	181b      	addge	r3, r3, r0
  403f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  403f32:	bfac      	ite	ge
  403f34:	6563      	strge	r3, [r4, #84]	; 0x54
  403f36:	81a3      	strhlt	r3, [r4, #12]
  403f38:	bd10      	pop	{r4, pc}

00403f3a <__swrite>:
  403f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f3e:	461f      	mov	r7, r3
  403f40:	898b      	ldrh	r3, [r1, #12]
  403f42:	05db      	lsls	r3, r3, #23
  403f44:	4605      	mov	r5, r0
  403f46:	460c      	mov	r4, r1
  403f48:	4616      	mov	r6, r2
  403f4a:	d505      	bpl.n	403f58 <__swrite+0x1e>
  403f4c:	2302      	movs	r3, #2
  403f4e:	2200      	movs	r2, #0
  403f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f54:	f000 f868 	bl	404028 <_lseek_r>
  403f58:	89a3      	ldrh	r3, [r4, #12]
  403f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403f5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403f62:	81a3      	strh	r3, [r4, #12]
  403f64:	4632      	mov	r2, r6
  403f66:	463b      	mov	r3, r7
  403f68:	4628      	mov	r0, r5
  403f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403f6e:	f000 b817 	b.w	403fa0 <_write_r>

00403f72 <__sseek>:
  403f72:	b510      	push	{r4, lr}
  403f74:	460c      	mov	r4, r1
  403f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f7a:	f000 f855 	bl	404028 <_lseek_r>
  403f7e:	1c43      	adds	r3, r0, #1
  403f80:	89a3      	ldrh	r3, [r4, #12]
  403f82:	bf15      	itete	ne
  403f84:	6560      	strne	r0, [r4, #84]	; 0x54
  403f86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  403f8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  403f8e:	81a3      	strheq	r3, [r4, #12]
  403f90:	bf18      	it	ne
  403f92:	81a3      	strhne	r3, [r4, #12]
  403f94:	bd10      	pop	{r4, pc}

00403f96 <__sclose>:
  403f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403f9a:	f000 b813 	b.w	403fc4 <_close_r>
	...

00403fa0 <_write_r>:
  403fa0:	b538      	push	{r3, r4, r5, lr}
  403fa2:	4c07      	ldr	r4, [pc, #28]	; (403fc0 <_write_r+0x20>)
  403fa4:	4605      	mov	r5, r0
  403fa6:	4608      	mov	r0, r1
  403fa8:	4611      	mov	r1, r2
  403faa:	2200      	movs	r2, #0
  403fac:	6022      	str	r2, [r4, #0]
  403fae:	461a      	mov	r2, r3
  403fb0:	f7fc f8fc 	bl	4001ac <_write>
  403fb4:	1c43      	adds	r3, r0, #1
  403fb6:	d102      	bne.n	403fbe <_write_r+0x1e>
  403fb8:	6823      	ldr	r3, [r4, #0]
  403fba:	b103      	cbz	r3, 403fbe <_write_r+0x1e>
  403fbc:	602b      	str	r3, [r5, #0]
  403fbe:	bd38      	pop	{r3, r4, r5, pc}
  403fc0:	200004b4 	.word	0x200004b4

00403fc4 <_close_r>:
  403fc4:	b538      	push	{r3, r4, r5, lr}
  403fc6:	4c06      	ldr	r4, [pc, #24]	; (403fe0 <_close_r+0x1c>)
  403fc8:	2300      	movs	r3, #0
  403fca:	4605      	mov	r5, r0
  403fcc:	4608      	mov	r0, r1
  403fce:	6023      	str	r3, [r4, #0]
  403fd0:	f7fd fb9c 	bl	40170c <_close>
  403fd4:	1c43      	adds	r3, r0, #1
  403fd6:	d102      	bne.n	403fde <_close_r+0x1a>
  403fd8:	6823      	ldr	r3, [r4, #0]
  403fda:	b103      	cbz	r3, 403fde <_close_r+0x1a>
  403fdc:	602b      	str	r3, [r5, #0]
  403fde:	bd38      	pop	{r3, r4, r5, pc}
  403fe0:	200004b4 	.word	0x200004b4

00403fe4 <_fstat_r>:
  403fe4:	b538      	push	{r3, r4, r5, lr}
  403fe6:	4c07      	ldr	r4, [pc, #28]	; (404004 <_fstat_r+0x20>)
  403fe8:	2300      	movs	r3, #0
  403fea:	4605      	mov	r5, r0
  403fec:	4608      	mov	r0, r1
  403fee:	4611      	mov	r1, r2
  403ff0:	6023      	str	r3, [r4, #0]
  403ff2:	f7fd fb8f 	bl	401714 <_fstat>
  403ff6:	1c43      	adds	r3, r0, #1
  403ff8:	d102      	bne.n	404000 <_fstat_r+0x1c>
  403ffa:	6823      	ldr	r3, [r4, #0]
  403ffc:	b103      	cbz	r3, 404000 <_fstat_r+0x1c>
  403ffe:	602b      	str	r3, [r5, #0]
  404000:	bd38      	pop	{r3, r4, r5, pc}
  404002:	bf00      	nop
  404004:	200004b4 	.word	0x200004b4

00404008 <_isatty_r>:
  404008:	b538      	push	{r3, r4, r5, lr}
  40400a:	4c06      	ldr	r4, [pc, #24]	; (404024 <_isatty_r+0x1c>)
  40400c:	2300      	movs	r3, #0
  40400e:	4605      	mov	r5, r0
  404010:	4608      	mov	r0, r1
  404012:	6023      	str	r3, [r4, #0]
  404014:	f7fd fb84 	bl	401720 <_isatty>
  404018:	1c43      	adds	r3, r0, #1
  40401a:	d102      	bne.n	404022 <_isatty_r+0x1a>
  40401c:	6823      	ldr	r3, [r4, #0]
  40401e:	b103      	cbz	r3, 404022 <_isatty_r+0x1a>
  404020:	602b      	str	r3, [r5, #0]
  404022:	bd38      	pop	{r3, r4, r5, pc}
  404024:	200004b4 	.word	0x200004b4

00404028 <_lseek_r>:
  404028:	b538      	push	{r3, r4, r5, lr}
  40402a:	4c07      	ldr	r4, [pc, #28]	; (404048 <_lseek_r+0x20>)
  40402c:	4605      	mov	r5, r0
  40402e:	4608      	mov	r0, r1
  404030:	4611      	mov	r1, r2
  404032:	2200      	movs	r2, #0
  404034:	6022      	str	r2, [r4, #0]
  404036:	461a      	mov	r2, r3
  404038:	f7fd fb74 	bl	401724 <_lseek>
  40403c:	1c43      	adds	r3, r0, #1
  40403e:	d102      	bne.n	404046 <_lseek_r+0x1e>
  404040:	6823      	ldr	r3, [r4, #0]
  404042:	b103      	cbz	r3, 404046 <_lseek_r+0x1e>
  404044:	602b      	str	r3, [r5, #0]
  404046:	bd38      	pop	{r3, r4, r5, pc}
  404048:	200004b4 	.word	0x200004b4

0040404c <__ascii_mbtowc>:
  40404c:	b082      	sub	sp, #8
  40404e:	b901      	cbnz	r1, 404052 <__ascii_mbtowc+0x6>
  404050:	a901      	add	r1, sp, #4
  404052:	b13a      	cbz	r2, 404064 <__ascii_mbtowc+0x18>
  404054:	b143      	cbz	r3, 404068 <__ascii_mbtowc+0x1c>
  404056:	7813      	ldrb	r3, [r2, #0]
  404058:	600b      	str	r3, [r1, #0]
  40405a:	7812      	ldrb	r2, [r2, #0]
  40405c:	1c10      	adds	r0, r2, #0
  40405e:	bf18      	it	ne
  404060:	2001      	movne	r0, #1
  404062:	e003      	b.n	40406c <__ascii_mbtowc+0x20>
  404064:	4610      	mov	r0, r2
  404066:	e001      	b.n	40406c <__ascii_mbtowc+0x20>
  404068:	f06f 0001 	mvn.w	r0, #1
  40406c:	b002      	add	sp, #8
  40406e:	4770      	bx	lr

00404070 <__malloc_lock>:
  404070:	4770      	bx	lr

00404072 <__malloc_unlock>:
  404072:	4770      	bx	lr

00404074 <_read_r>:
  404074:	b538      	push	{r3, r4, r5, lr}
  404076:	4c07      	ldr	r4, [pc, #28]	; (404094 <_read_r+0x20>)
  404078:	4605      	mov	r5, r0
  40407a:	4608      	mov	r0, r1
  40407c:	4611      	mov	r1, r2
  40407e:	2200      	movs	r2, #0
  404080:	6022      	str	r2, [r4, #0]
  404082:	461a      	mov	r2, r3
  404084:	f7fc f874 	bl	400170 <_read>
  404088:	1c43      	adds	r3, r0, #1
  40408a:	d102      	bne.n	404092 <_read_r+0x1e>
  40408c:	6823      	ldr	r3, [r4, #0]
  40408e:	b103      	cbz	r3, 404092 <_read_r+0x1e>
  404090:	602b      	str	r3, [r5, #0]
  404092:	bd38      	pop	{r3, r4, r5, pc}
  404094:	200004b4 	.word	0x200004b4

00404098 <__ascii_wctomb>:
  404098:	b149      	cbz	r1, 4040ae <__ascii_wctomb+0x16>
  40409a:	2aff      	cmp	r2, #255	; 0xff
  40409c:	bf85      	ittet	hi
  40409e:	238a      	movhi	r3, #138	; 0x8a
  4040a0:	6003      	strhi	r3, [r0, #0]
  4040a2:	700a      	strbls	r2, [r1, #0]
  4040a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  4040a8:	bf98      	it	ls
  4040aa:	2001      	movls	r0, #1
  4040ac:	4770      	bx	lr
  4040ae:	4608      	mov	r0, r1
  4040b0:	4770      	bx	lr
	...

004040b4 <__aeabi_drsub>:
  4040b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4040b8:	e002      	b.n	4040c0 <__adddf3>
  4040ba:	bf00      	nop

004040bc <__aeabi_dsub>:
  4040bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004040c0 <__adddf3>:
  4040c0:	b530      	push	{r4, r5, lr}
  4040c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4040c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4040ca:	ea94 0f05 	teq	r4, r5
  4040ce:	bf08      	it	eq
  4040d0:	ea90 0f02 	teqeq	r0, r2
  4040d4:	bf1f      	itttt	ne
  4040d6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4040da:	ea55 0c02 	orrsne.w	ip, r5, r2
  4040de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4040e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4040e6:	f000 80e2 	beq.w	4042ae <__adddf3+0x1ee>
  4040ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4040ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4040f2:	bfb8      	it	lt
  4040f4:	426d      	neglt	r5, r5
  4040f6:	dd0c      	ble.n	404112 <__adddf3+0x52>
  4040f8:	442c      	add	r4, r5
  4040fa:	ea80 0202 	eor.w	r2, r0, r2
  4040fe:	ea81 0303 	eor.w	r3, r1, r3
  404102:	ea82 0000 	eor.w	r0, r2, r0
  404106:	ea83 0101 	eor.w	r1, r3, r1
  40410a:	ea80 0202 	eor.w	r2, r0, r2
  40410e:	ea81 0303 	eor.w	r3, r1, r3
  404112:	2d36      	cmp	r5, #54	; 0x36
  404114:	bf88      	it	hi
  404116:	bd30      	pophi	{r4, r5, pc}
  404118:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40411c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404120:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404124:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404128:	d002      	beq.n	404130 <__adddf3+0x70>
  40412a:	4240      	negs	r0, r0
  40412c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404130:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404134:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404138:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40413c:	d002      	beq.n	404144 <__adddf3+0x84>
  40413e:	4252      	negs	r2, r2
  404140:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404144:	ea94 0f05 	teq	r4, r5
  404148:	f000 80a7 	beq.w	40429a <__adddf3+0x1da>
  40414c:	f1a4 0401 	sub.w	r4, r4, #1
  404150:	f1d5 0e20 	rsbs	lr, r5, #32
  404154:	db0d      	blt.n	404172 <__adddf3+0xb2>
  404156:	fa02 fc0e 	lsl.w	ip, r2, lr
  40415a:	fa22 f205 	lsr.w	r2, r2, r5
  40415e:	1880      	adds	r0, r0, r2
  404160:	f141 0100 	adc.w	r1, r1, #0
  404164:	fa03 f20e 	lsl.w	r2, r3, lr
  404168:	1880      	adds	r0, r0, r2
  40416a:	fa43 f305 	asr.w	r3, r3, r5
  40416e:	4159      	adcs	r1, r3
  404170:	e00e      	b.n	404190 <__adddf3+0xd0>
  404172:	f1a5 0520 	sub.w	r5, r5, #32
  404176:	f10e 0e20 	add.w	lr, lr, #32
  40417a:	2a01      	cmp	r2, #1
  40417c:	fa03 fc0e 	lsl.w	ip, r3, lr
  404180:	bf28      	it	cs
  404182:	f04c 0c02 	orrcs.w	ip, ip, #2
  404186:	fa43 f305 	asr.w	r3, r3, r5
  40418a:	18c0      	adds	r0, r0, r3
  40418c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404190:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404194:	d507      	bpl.n	4041a6 <__adddf3+0xe6>
  404196:	f04f 0e00 	mov.w	lr, #0
  40419a:	f1dc 0c00 	rsbs	ip, ip, #0
  40419e:	eb7e 0000 	sbcs.w	r0, lr, r0
  4041a2:	eb6e 0101 	sbc.w	r1, lr, r1
  4041a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4041aa:	d31b      	bcc.n	4041e4 <__adddf3+0x124>
  4041ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4041b0:	d30c      	bcc.n	4041cc <__adddf3+0x10c>
  4041b2:	0849      	lsrs	r1, r1, #1
  4041b4:	ea5f 0030 	movs.w	r0, r0, rrx
  4041b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4041bc:	f104 0401 	add.w	r4, r4, #1
  4041c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4041c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4041c8:	f080 809a 	bcs.w	404300 <__adddf3+0x240>
  4041cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4041d0:	bf08      	it	eq
  4041d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4041d6:	f150 0000 	adcs.w	r0, r0, #0
  4041da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4041de:	ea41 0105 	orr.w	r1, r1, r5
  4041e2:	bd30      	pop	{r4, r5, pc}
  4041e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4041e8:	4140      	adcs	r0, r0
  4041ea:	eb41 0101 	adc.w	r1, r1, r1
  4041ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4041f2:	f1a4 0401 	sub.w	r4, r4, #1
  4041f6:	d1e9      	bne.n	4041cc <__adddf3+0x10c>
  4041f8:	f091 0f00 	teq	r1, #0
  4041fc:	bf04      	itt	eq
  4041fe:	4601      	moveq	r1, r0
  404200:	2000      	moveq	r0, #0
  404202:	fab1 f381 	clz	r3, r1
  404206:	bf08      	it	eq
  404208:	3320      	addeq	r3, #32
  40420a:	f1a3 030b 	sub.w	r3, r3, #11
  40420e:	f1b3 0220 	subs.w	r2, r3, #32
  404212:	da0c      	bge.n	40422e <__adddf3+0x16e>
  404214:	320c      	adds	r2, #12
  404216:	dd08      	ble.n	40422a <__adddf3+0x16a>
  404218:	f102 0c14 	add.w	ip, r2, #20
  40421c:	f1c2 020c 	rsb	r2, r2, #12
  404220:	fa01 f00c 	lsl.w	r0, r1, ip
  404224:	fa21 f102 	lsr.w	r1, r1, r2
  404228:	e00c      	b.n	404244 <__adddf3+0x184>
  40422a:	f102 0214 	add.w	r2, r2, #20
  40422e:	bfd8      	it	le
  404230:	f1c2 0c20 	rsble	ip, r2, #32
  404234:	fa01 f102 	lsl.w	r1, r1, r2
  404238:	fa20 fc0c 	lsr.w	ip, r0, ip
  40423c:	bfdc      	itt	le
  40423e:	ea41 010c 	orrle.w	r1, r1, ip
  404242:	4090      	lslle	r0, r2
  404244:	1ae4      	subs	r4, r4, r3
  404246:	bfa2      	ittt	ge
  404248:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40424c:	4329      	orrge	r1, r5
  40424e:	bd30      	popge	{r4, r5, pc}
  404250:	ea6f 0404 	mvn.w	r4, r4
  404254:	3c1f      	subs	r4, #31
  404256:	da1c      	bge.n	404292 <__adddf3+0x1d2>
  404258:	340c      	adds	r4, #12
  40425a:	dc0e      	bgt.n	40427a <__adddf3+0x1ba>
  40425c:	f104 0414 	add.w	r4, r4, #20
  404260:	f1c4 0220 	rsb	r2, r4, #32
  404264:	fa20 f004 	lsr.w	r0, r0, r4
  404268:	fa01 f302 	lsl.w	r3, r1, r2
  40426c:	ea40 0003 	orr.w	r0, r0, r3
  404270:	fa21 f304 	lsr.w	r3, r1, r4
  404274:	ea45 0103 	orr.w	r1, r5, r3
  404278:	bd30      	pop	{r4, r5, pc}
  40427a:	f1c4 040c 	rsb	r4, r4, #12
  40427e:	f1c4 0220 	rsb	r2, r4, #32
  404282:	fa20 f002 	lsr.w	r0, r0, r2
  404286:	fa01 f304 	lsl.w	r3, r1, r4
  40428a:	ea40 0003 	orr.w	r0, r0, r3
  40428e:	4629      	mov	r1, r5
  404290:	bd30      	pop	{r4, r5, pc}
  404292:	fa21 f004 	lsr.w	r0, r1, r4
  404296:	4629      	mov	r1, r5
  404298:	bd30      	pop	{r4, r5, pc}
  40429a:	f094 0f00 	teq	r4, #0
  40429e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4042a2:	bf06      	itte	eq
  4042a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4042a8:	3401      	addeq	r4, #1
  4042aa:	3d01      	subne	r5, #1
  4042ac:	e74e      	b.n	40414c <__adddf3+0x8c>
  4042ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4042b2:	bf18      	it	ne
  4042b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4042b8:	d029      	beq.n	40430e <__adddf3+0x24e>
  4042ba:	ea94 0f05 	teq	r4, r5
  4042be:	bf08      	it	eq
  4042c0:	ea90 0f02 	teqeq	r0, r2
  4042c4:	d005      	beq.n	4042d2 <__adddf3+0x212>
  4042c6:	ea54 0c00 	orrs.w	ip, r4, r0
  4042ca:	bf04      	itt	eq
  4042cc:	4619      	moveq	r1, r3
  4042ce:	4610      	moveq	r0, r2
  4042d0:	bd30      	pop	{r4, r5, pc}
  4042d2:	ea91 0f03 	teq	r1, r3
  4042d6:	bf1e      	ittt	ne
  4042d8:	2100      	movne	r1, #0
  4042da:	2000      	movne	r0, #0
  4042dc:	bd30      	popne	{r4, r5, pc}
  4042de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4042e2:	d105      	bne.n	4042f0 <__adddf3+0x230>
  4042e4:	0040      	lsls	r0, r0, #1
  4042e6:	4149      	adcs	r1, r1
  4042e8:	bf28      	it	cs
  4042ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4042ee:	bd30      	pop	{r4, r5, pc}
  4042f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4042f4:	bf3c      	itt	cc
  4042f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4042fa:	bd30      	popcc	{r4, r5, pc}
  4042fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404300:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404304:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404308:	f04f 0000 	mov.w	r0, #0
  40430c:	bd30      	pop	{r4, r5, pc}
  40430e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404312:	bf1a      	itte	ne
  404314:	4619      	movne	r1, r3
  404316:	4610      	movne	r0, r2
  404318:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40431c:	bf1c      	itt	ne
  40431e:	460b      	movne	r3, r1
  404320:	4602      	movne	r2, r0
  404322:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404326:	bf06      	itte	eq
  404328:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40432c:	ea91 0f03 	teqeq	r1, r3
  404330:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404334:	bd30      	pop	{r4, r5, pc}
  404336:	bf00      	nop

00404338 <__aeabi_ui2d>:
  404338:	f090 0f00 	teq	r0, #0
  40433c:	bf04      	itt	eq
  40433e:	2100      	moveq	r1, #0
  404340:	4770      	bxeq	lr
  404342:	b530      	push	{r4, r5, lr}
  404344:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404348:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40434c:	f04f 0500 	mov.w	r5, #0
  404350:	f04f 0100 	mov.w	r1, #0
  404354:	e750      	b.n	4041f8 <__adddf3+0x138>
  404356:	bf00      	nop

00404358 <__aeabi_i2d>:
  404358:	f090 0f00 	teq	r0, #0
  40435c:	bf04      	itt	eq
  40435e:	2100      	moveq	r1, #0
  404360:	4770      	bxeq	lr
  404362:	b530      	push	{r4, r5, lr}
  404364:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404368:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40436c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404370:	bf48      	it	mi
  404372:	4240      	negmi	r0, r0
  404374:	f04f 0100 	mov.w	r1, #0
  404378:	e73e      	b.n	4041f8 <__adddf3+0x138>
  40437a:	bf00      	nop

0040437c <__aeabi_f2d>:
  40437c:	0042      	lsls	r2, r0, #1
  40437e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404382:	ea4f 0131 	mov.w	r1, r1, rrx
  404386:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40438a:	bf1f      	itttt	ne
  40438c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404390:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404394:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404398:	4770      	bxne	lr
  40439a:	f092 0f00 	teq	r2, #0
  40439e:	bf14      	ite	ne
  4043a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4043a4:	4770      	bxeq	lr
  4043a6:	b530      	push	{r4, r5, lr}
  4043a8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4043ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4043b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4043b4:	e720      	b.n	4041f8 <__adddf3+0x138>
  4043b6:	bf00      	nop

004043b8 <__aeabi_ul2d>:
  4043b8:	ea50 0201 	orrs.w	r2, r0, r1
  4043bc:	bf08      	it	eq
  4043be:	4770      	bxeq	lr
  4043c0:	b530      	push	{r4, r5, lr}
  4043c2:	f04f 0500 	mov.w	r5, #0
  4043c6:	e00a      	b.n	4043de <__aeabi_l2d+0x16>

004043c8 <__aeabi_l2d>:
  4043c8:	ea50 0201 	orrs.w	r2, r0, r1
  4043cc:	bf08      	it	eq
  4043ce:	4770      	bxeq	lr
  4043d0:	b530      	push	{r4, r5, lr}
  4043d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4043d6:	d502      	bpl.n	4043de <__aeabi_l2d+0x16>
  4043d8:	4240      	negs	r0, r0
  4043da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4043de:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4043e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4043e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4043ea:	f43f aedc 	beq.w	4041a6 <__adddf3+0xe6>
  4043ee:	f04f 0203 	mov.w	r2, #3
  4043f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4043f6:	bf18      	it	ne
  4043f8:	3203      	addne	r2, #3
  4043fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4043fe:	bf18      	it	ne
  404400:	3203      	addne	r2, #3
  404402:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404406:	f1c2 0320 	rsb	r3, r2, #32
  40440a:	fa00 fc03 	lsl.w	ip, r0, r3
  40440e:	fa20 f002 	lsr.w	r0, r0, r2
  404412:	fa01 fe03 	lsl.w	lr, r1, r3
  404416:	ea40 000e 	orr.w	r0, r0, lr
  40441a:	fa21 f102 	lsr.w	r1, r1, r2
  40441e:	4414      	add	r4, r2
  404420:	e6c1      	b.n	4041a6 <__adddf3+0xe6>
  404422:	bf00      	nop

00404424 <__aeabi_dmul>:
  404424:	b570      	push	{r4, r5, r6, lr}
  404426:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40442a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40442e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404432:	bf1d      	ittte	ne
  404434:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404438:	ea94 0f0c 	teqne	r4, ip
  40443c:	ea95 0f0c 	teqne	r5, ip
  404440:	f000 f8de 	bleq	404600 <__aeabi_dmul+0x1dc>
  404444:	442c      	add	r4, r5
  404446:	ea81 0603 	eor.w	r6, r1, r3
  40444a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40444e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404452:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404456:	bf18      	it	ne
  404458:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40445c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404464:	d038      	beq.n	4044d8 <__aeabi_dmul+0xb4>
  404466:	fba0 ce02 	umull	ip, lr, r0, r2
  40446a:	f04f 0500 	mov.w	r5, #0
  40446e:	fbe1 e502 	umlal	lr, r5, r1, r2
  404472:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404476:	fbe0 e503 	umlal	lr, r5, r0, r3
  40447a:	f04f 0600 	mov.w	r6, #0
  40447e:	fbe1 5603 	umlal	r5, r6, r1, r3
  404482:	f09c 0f00 	teq	ip, #0
  404486:	bf18      	it	ne
  404488:	f04e 0e01 	orrne.w	lr, lr, #1
  40448c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404490:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404494:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404498:	d204      	bcs.n	4044a4 <__aeabi_dmul+0x80>
  40449a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40449e:	416d      	adcs	r5, r5
  4044a0:	eb46 0606 	adc.w	r6, r6, r6
  4044a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4044a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4044ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4044b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4044b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4044b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4044bc:	bf88      	it	hi
  4044be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4044c2:	d81e      	bhi.n	404502 <__aeabi_dmul+0xde>
  4044c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4044c8:	bf08      	it	eq
  4044ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4044ce:	f150 0000 	adcs.w	r0, r0, #0
  4044d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4044d6:	bd70      	pop	{r4, r5, r6, pc}
  4044d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4044dc:	ea46 0101 	orr.w	r1, r6, r1
  4044e0:	ea40 0002 	orr.w	r0, r0, r2
  4044e4:	ea81 0103 	eor.w	r1, r1, r3
  4044e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4044ec:	bfc2      	ittt	gt
  4044ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  4044f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4044f6:	bd70      	popgt	{r4, r5, r6, pc}
  4044f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4044fc:	f04f 0e00 	mov.w	lr, #0
  404500:	3c01      	subs	r4, #1
  404502:	f300 80ab 	bgt.w	40465c <__aeabi_dmul+0x238>
  404506:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40450a:	bfde      	ittt	le
  40450c:	2000      	movle	r0, #0
  40450e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  404512:	bd70      	pople	{r4, r5, r6, pc}
  404514:	f1c4 0400 	rsb	r4, r4, #0
  404518:	3c20      	subs	r4, #32
  40451a:	da35      	bge.n	404588 <__aeabi_dmul+0x164>
  40451c:	340c      	adds	r4, #12
  40451e:	dc1b      	bgt.n	404558 <__aeabi_dmul+0x134>
  404520:	f104 0414 	add.w	r4, r4, #20
  404524:	f1c4 0520 	rsb	r5, r4, #32
  404528:	fa00 f305 	lsl.w	r3, r0, r5
  40452c:	fa20 f004 	lsr.w	r0, r0, r4
  404530:	fa01 f205 	lsl.w	r2, r1, r5
  404534:	ea40 0002 	orr.w	r0, r0, r2
  404538:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40453c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404540:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404544:	fa21 f604 	lsr.w	r6, r1, r4
  404548:	eb42 0106 	adc.w	r1, r2, r6
  40454c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404550:	bf08      	it	eq
  404552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404556:	bd70      	pop	{r4, r5, r6, pc}
  404558:	f1c4 040c 	rsb	r4, r4, #12
  40455c:	f1c4 0520 	rsb	r5, r4, #32
  404560:	fa00 f304 	lsl.w	r3, r0, r4
  404564:	fa20 f005 	lsr.w	r0, r0, r5
  404568:	fa01 f204 	lsl.w	r2, r1, r4
  40456c:	ea40 0002 	orr.w	r0, r0, r2
  404570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404578:	f141 0100 	adc.w	r1, r1, #0
  40457c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404580:	bf08      	it	eq
  404582:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404586:	bd70      	pop	{r4, r5, r6, pc}
  404588:	f1c4 0520 	rsb	r5, r4, #32
  40458c:	fa00 f205 	lsl.w	r2, r0, r5
  404590:	ea4e 0e02 	orr.w	lr, lr, r2
  404594:	fa20 f304 	lsr.w	r3, r0, r4
  404598:	fa01 f205 	lsl.w	r2, r1, r5
  40459c:	ea43 0302 	orr.w	r3, r3, r2
  4045a0:	fa21 f004 	lsr.w	r0, r1, r4
  4045a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4045a8:	fa21 f204 	lsr.w	r2, r1, r4
  4045ac:	ea20 0002 	bic.w	r0, r0, r2
  4045b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4045b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4045b8:	bf08      	it	eq
  4045ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4045be:	bd70      	pop	{r4, r5, r6, pc}
  4045c0:	f094 0f00 	teq	r4, #0
  4045c4:	d10f      	bne.n	4045e6 <__aeabi_dmul+0x1c2>
  4045c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4045ca:	0040      	lsls	r0, r0, #1
  4045cc:	eb41 0101 	adc.w	r1, r1, r1
  4045d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4045d4:	bf08      	it	eq
  4045d6:	3c01      	subeq	r4, #1
  4045d8:	d0f7      	beq.n	4045ca <__aeabi_dmul+0x1a6>
  4045da:	ea41 0106 	orr.w	r1, r1, r6
  4045de:	f095 0f00 	teq	r5, #0
  4045e2:	bf18      	it	ne
  4045e4:	4770      	bxne	lr
  4045e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4045ea:	0052      	lsls	r2, r2, #1
  4045ec:	eb43 0303 	adc.w	r3, r3, r3
  4045f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4045f4:	bf08      	it	eq
  4045f6:	3d01      	subeq	r5, #1
  4045f8:	d0f7      	beq.n	4045ea <__aeabi_dmul+0x1c6>
  4045fa:	ea43 0306 	orr.w	r3, r3, r6
  4045fe:	4770      	bx	lr
  404600:	ea94 0f0c 	teq	r4, ip
  404604:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404608:	bf18      	it	ne
  40460a:	ea95 0f0c 	teqne	r5, ip
  40460e:	d00c      	beq.n	40462a <__aeabi_dmul+0x206>
  404610:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404614:	bf18      	it	ne
  404616:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40461a:	d1d1      	bne.n	4045c0 <__aeabi_dmul+0x19c>
  40461c:	ea81 0103 	eor.w	r1, r1, r3
  404620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404624:	f04f 0000 	mov.w	r0, #0
  404628:	bd70      	pop	{r4, r5, r6, pc}
  40462a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40462e:	bf06      	itte	eq
  404630:	4610      	moveq	r0, r2
  404632:	4619      	moveq	r1, r3
  404634:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404638:	d019      	beq.n	40466e <__aeabi_dmul+0x24a>
  40463a:	ea94 0f0c 	teq	r4, ip
  40463e:	d102      	bne.n	404646 <__aeabi_dmul+0x222>
  404640:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404644:	d113      	bne.n	40466e <__aeabi_dmul+0x24a>
  404646:	ea95 0f0c 	teq	r5, ip
  40464a:	d105      	bne.n	404658 <__aeabi_dmul+0x234>
  40464c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404650:	bf1c      	itt	ne
  404652:	4610      	movne	r0, r2
  404654:	4619      	movne	r1, r3
  404656:	d10a      	bne.n	40466e <__aeabi_dmul+0x24a>
  404658:	ea81 0103 	eor.w	r1, r1, r3
  40465c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404660:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404664:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404668:	f04f 0000 	mov.w	r0, #0
  40466c:	bd70      	pop	{r4, r5, r6, pc}
  40466e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404672:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404676:	bd70      	pop	{r4, r5, r6, pc}

00404678 <__aeabi_ddiv>:
  404678:	b570      	push	{r4, r5, r6, lr}
  40467a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40467e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404686:	bf1d      	ittte	ne
  404688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40468c:	ea94 0f0c 	teqne	r4, ip
  404690:	ea95 0f0c 	teqne	r5, ip
  404694:	f000 f8a7 	bleq	4047e6 <__aeabi_ddiv+0x16e>
  404698:	eba4 0405 	sub.w	r4, r4, r5
  40469c:	ea81 0e03 	eor.w	lr, r1, r3
  4046a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4046a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4046a8:	f000 8088 	beq.w	4047bc <__aeabi_ddiv+0x144>
  4046ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4046b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4046b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4046b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4046bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4046c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4046c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4046c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4046cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4046d0:	429d      	cmp	r5, r3
  4046d2:	bf08      	it	eq
  4046d4:	4296      	cmpeq	r6, r2
  4046d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4046da:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4046de:	d202      	bcs.n	4046e6 <__aeabi_ddiv+0x6e>
  4046e0:	085b      	lsrs	r3, r3, #1
  4046e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4046e6:	1ab6      	subs	r6, r6, r2
  4046e8:	eb65 0503 	sbc.w	r5, r5, r3
  4046ec:	085b      	lsrs	r3, r3, #1
  4046ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4046f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4046f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4046fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4046fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  404702:	bf22      	ittt	cs
  404704:	1ab6      	subcs	r6, r6, r2
  404706:	4675      	movcs	r5, lr
  404708:	ea40 000c 	orrcs.w	r0, r0, ip
  40470c:	085b      	lsrs	r3, r3, #1
  40470e:	ea4f 0232 	mov.w	r2, r2, rrx
  404712:	ebb6 0e02 	subs.w	lr, r6, r2
  404716:	eb75 0e03 	sbcs.w	lr, r5, r3
  40471a:	bf22      	ittt	cs
  40471c:	1ab6      	subcs	r6, r6, r2
  40471e:	4675      	movcs	r5, lr
  404720:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404724:	085b      	lsrs	r3, r3, #1
  404726:	ea4f 0232 	mov.w	r2, r2, rrx
  40472a:	ebb6 0e02 	subs.w	lr, r6, r2
  40472e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404732:	bf22      	ittt	cs
  404734:	1ab6      	subcs	r6, r6, r2
  404736:	4675      	movcs	r5, lr
  404738:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40473c:	085b      	lsrs	r3, r3, #1
  40473e:	ea4f 0232 	mov.w	r2, r2, rrx
  404742:	ebb6 0e02 	subs.w	lr, r6, r2
  404746:	eb75 0e03 	sbcs.w	lr, r5, r3
  40474a:	bf22      	ittt	cs
  40474c:	1ab6      	subcs	r6, r6, r2
  40474e:	4675      	movcs	r5, lr
  404750:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404754:	ea55 0e06 	orrs.w	lr, r5, r6
  404758:	d018      	beq.n	40478c <__aeabi_ddiv+0x114>
  40475a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40475e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404762:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404766:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40476a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40476e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404772:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404776:	d1c0      	bne.n	4046fa <__aeabi_ddiv+0x82>
  404778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40477c:	d10b      	bne.n	404796 <__aeabi_ddiv+0x11e>
  40477e:	ea41 0100 	orr.w	r1, r1, r0
  404782:	f04f 0000 	mov.w	r0, #0
  404786:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40478a:	e7b6      	b.n	4046fa <__aeabi_ddiv+0x82>
  40478c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404790:	bf04      	itt	eq
  404792:	4301      	orreq	r1, r0
  404794:	2000      	moveq	r0, #0
  404796:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40479a:	bf88      	it	hi
  40479c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4047a0:	f63f aeaf 	bhi.w	404502 <__aeabi_dmul+0xde>
  4047a4:	ebb5 0c03 	subs.w	ip, r5, r3
  4047a8:	bf04      	itt	eq
  4047aa:	ebb6 0c02 	subseq.w	ip, r6, r2
  4047ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4047b2:	f150 0000 	adcs.w	r0, r0, #0
  4047b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4047ba:	bd70      	pop	{r4, r5, r6, pc}
  4047bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4047c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4047c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4047c8:	bfc2      	ittt	gt
  4047ca:	ebd4 050c 	rsbsgt	r5, r4, ip
  4047ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4047d2:	bd70      	popgt	{r4, r5, r6, pc}
  4047d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4047d8:	f04f 0e00 	mov.w	lr, #0
  4047dc:	3c01      	subs	r4, #1
  4047de:	e690      	b.n	404502 <__aeabi_dmul+0xde>
  4047e0:	ea45 0e06 	orr.w	lr, r5, r6
  4047e4:	e68d      	b.n	404502 <__aeabi_dmul+0xde>
  4047e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4047ea:	ea94 0f0c 	teq	r4, ip
  4047ee:	bf08      	it	eq
  4047f0:	ea95 0f0c 	teqeq	r5, ip
  4047f4:	f43f af3b 	beq.w	40466e <__aeabi_dmul+0x24a>
  4047f8:	ea94 0f0c 	teq	r4, ip
  4047fc:	d10a      	bne.n	404814 <__aeabi_ddiv+0x19c>
  4047fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404802:	f47f af34 	bne.w	40466e <__aeabi_dmul+0x24a>
  404806:	ea95 0f0c 	teq	r5, ip
  40480a:	f47f af25 	bne.w	404658 <__aeabi_dmul+0x234>
  40480e:	4610      	mov	r0, r2
  404810:	4619      	mov	r1, r3
  404812:	e72c      	b.n	40466e <__aeabi_dmul+0x24a>
  404814:	ea95 0f0c 	teq	r5, ip
  404818:	d106      	bne.n	404828 <__aeabi_ddiv+0x1b0>
  40481a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40481e:	f43f aefd 	beq.w	40461c <__aeabi_dmul+0x1f8>
  404822:	4610      	mov	r0, r2
  404824:	4619      	mov	r1, r3
  404826:	e722      	b.n	40466e <__aeabi_dmul+0x24a>
  404828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40482c:	bf18      	it	ne
  40482e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404832:	f47f aec5 	bne.w	4045c0 <__aeabi_dmul+0x19c>
  404836:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40483a:	f47f af0d 	bne.w	404658 <__aeabi_dmul+0x234>
  40483e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404842:	f47f aeeb 	bne.w	40461c <__aeabi_dmul+0x1f8>
  404846:	e712      	b.n	40466e <__aeabi_dmul+0x24a>

00404848 <__gedf2>:
  404848:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  40484c:	e006      	b.n	40485c <__cmpdf2+0x4>
  40484e:	bf00      	nop

00404850 <__ledf2>:
  404850:	f04f 0c01 	mov.w	ip, #1
  404854:	e002      	b.n	40485c <__cmpdf2+0x4>
  404856:	bf00      	nop

00404858 <__cmpdf2>:
  404858:	f04f 0c01 	mov.w	ip, #1
  40485c:	f84d cd04 	str.w	ip, [sp, #-4]!
  404860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404868:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40486c:	bf18      	it	ne
  40486e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404872:	d01b      	beq.n	4048ac <__cmpdf2+0x54>
  404874:	b001      	add	sp, #4
  404876:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40487a:	bf0c      	ite	eq
  40487c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404880:	ea91 0f03 	teqne	r1, r3
  404884:	bf02      	ittt	eq
  404886:	ea90 0f02 	teqeq	r0, r2
  40488a:	2000      	moveq	r0, #0
  40488c:	4770      	bxeq	lr
  40488e:	f110 0f00 	cmn.w	r0, #0
  404892:	ea91 0f03 	teq	r1, r3
  404896:	bf58      	it	pl
  404898:	4299      	cmppl	r1, r3
  40489a:	bf08      	it	eq
  40489c:	4290      	cmpeq	r0, r2
  40489e:	bf2c      	ite	cs
  4048a0:	17d8      	asrcs	r0, r3, #31
  4048a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4048a6:	f040 0001 	orr.w	r0, r0, #1
  4048aa:	4770      	bx	lr
  4048ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4048b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4048b4:	d102      	bne.n	4048bc <__cmpdf2+0x64>
  4048b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4048ba:	d107      	bne.n	4048cc <__cmpdf2+0x74>
  4048bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4048c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4048c4:	d1d6      	bne.n	404874 <__cmpdf2+0x1c>
  4048c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4048ca:	d0d3      	beq.n	404874 <__cmpdf2+0x1c>
  4048cc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4048d0:	4770      	bx	lr
  4048d2:	bf00      	nop

004048d4 <__aeabi_cdrcmple>:
  4048d4:	4684      	mov	ip, r0
  4048d6:	4610      	mov	r0, r2
  4048d8:	4662      	mov	r2, ip
  4048da:	468c      	mov	ip, r1
  4048dc:	4619      	mov	r1, r3
  4048de:	4663      	mov	r3, ip
  4048e0:	e000      	b.n	4048e4 <__aeabi_cdcmpeq>
  4048e2:	bf00      	nop

004048e4 <__aeabi_cdcmpeq>:
  4048e4:	b501      	push	{r0, lr}
  4048e6:	f7ff ffb7 	bl	404858 <__cmpdf2>
  4048ea:	2800      	cmp	r0, #0
  4048ec:	bf48      	it	mi
  4048ee:	f110 0f00 	cmnmi.w	r0, #0
  4048f2:	bd01      	pop	{r0, pc}

004048f4 <__aeabi_dcmpeq>:
  4048f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4048f8:	f7ff fff4 	bl	4048e4 <__aeabi_cdcmpeq>
  4048fc:	bf0c      	ite	eq
  4048fe:	2001      	moveq	r0, #1
  404900:	2000      	movne	r0, #0
  404902:	f85d fb08 	ldr.w	pc, [sp], #8
  404906:	bf00      	nop

00404908 <__aeabi_dcmplt>:
  404908:	f84d ed08 	str.w	lr, [sp, #-8]!
  40490c:	f7ff ffea 	bl	4048e4 <__aeabi_cdcmpeq>
  404910:	bf34      	ite	cc
  404912:	2001      	movcc	r0, #1
  404914:	2000      	movcs	r0, #0
  404916:	f85d fb08 	ldr.w	pc, [sp], #8
  40491a:	bf00      	nop

0040491c <__aeabi_dcmple>:
  40491c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404920:	f7ff ffe0 	bl	4048e4 <__aeabi_cdcmpeq>
  404924:	bf94      	ite	ls
  404926:	2001      	movls	r0, #1
  404928:	2000      	movhi	r0, #0
  40492a:	f85d fb08 	ldr.w	pc, [sp], #8
  40492e:	bf00      	nop

00404930 <__aeabi_dcmpge>:
  404930:	f84d ed08 	str.w	lr, [sp, #-8]!
  404934:	f7ff ffce 	bl	4048d4 <__aeabi_cdrcmple>
  404938:	bf94      	ite	ls
  40493a:	2001      	movls	r0, #1
  40493c:	2000      	movhi	r0, #0
  40493e:	f85d fb08 	ldr.w	pc, [sp], #8
  404942:	bf00      	nop

00404944 <__aeabi_dcmpgt>:
  404944:	f84d ed08 	str.w	lr, [sp, #-8]!
  404948:	f7ff ffc4 	bl	4048d4 <__aeabi_cdrcmple>
  40494c:	bf34      	ite	cc
  40494e:	2001      	movcc	r0, #1
  404950:	2000      	movcs	r0, #0
  404952:	f85d fb08 	ldr.w	pc, [sp], #8
  404956:	bf00      	nop

00404958 <__aeabi_dcmpun>:
  404958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40495c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404960:	d102      	bne.n	404968 <__aeabi_dcmpun+0x10>
  404962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404966:	d10a      	bne.n	40497e <__aeabi_dcmpun+0x26>
  404968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40496c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404970:	d102      	bne.n	404978 <__aeabi_dcmpun+0x20>
  404972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404976:	d102      	bne.n	40497e <__aeabi_dcmpun+0x26>
  404978:	f04f 0000 	mov.w	r0, #0
  40497c:	4770      	bx	lr
  40497e:	f04f 0001 	mov.w	r0, #1
  404982:	4770      	bx	lr

00404984 <__aeabi_d2iz>:
  404984:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40498c:	d215      	bcs.n	4049ba <__aeabi_d2iz+0x36>
  40498e:	d511      	bpl.n	4049b4 <__aeabi_d2iz+0x30>
  404990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  404994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  404998:	d912      	bls.n	4049c0 <__aeabi_d2iz+0x3c>
  40499a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40499e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4049a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4049a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4049aa:	fa23 f002 	lsr.w	r0, r3, r2
  4049ae:	bf18      	it	ne
  4049b0:	4240      	negne	r0, r0
  4049b2:	4770      	bx	lr
  4049b4:	f04f 0000 	mov.w	r0, #0
  4049b8:	4770      	bx	lr
  4049ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4049be:	d105      	bne.n	4049cc <__aeabi_d2iz+0x48>
  4049c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4049c4:	bf08      	it	eq
  4049c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4049ca:	4770      	bx	lr
  4049cc:	f04f 0000 	mov.w	r0, #0
  4049d0:	4770      	bx	lr
  4049d2:	bf00      	nop
  4049d4:	0a0d0a0d 	.word	0x0a0d0a0d
  4049d8:	346d6173 	.word	0x346d6173
  4049dc:	63323364 	.word	0x63323364
  4049e0:	756d6920 	.word	0x756d6920
  4049e4:	6d656420 	.word	0x6d656420
  4049e8:	2e2e2e6f 	.word	0x2e2e2e6f
  4049ec:	00000a0d 	.word	0x00000a0d
  4049f0:	0000002e 	.word	0x0000002e
  4049f4:	74697277 	.word	0x74697277
  4049f8:	65725f65 	.word	0x65725f65
  4049fc:	74736967 	.word	0x74736967
  404a00:	203a7265 	.word	0x203a7265
  404a04:	63637573 	.word	0x63637573
  404a08:	0d737365 	.word	0x0d737365
  404a0c:	0000000a 	.word	0x0000000a
  404a10:	5f697774 	.word	0x5f697774
  404a14:	7473616d 	.word	0x7473616d
  404a18:	695f7265 	.word	0x695f7265
  404a1c:	3a74696e 	.word	0x3a74696e
  404a20:	69616620 	.word	0x69616620
  404a24:	0d64656c 	.word	0x0d64656c
  404a28:	0000000a 	.word	0x0000000a
  404a2c:	5f697774 	.word	0x5f697774
  404a30:	7473616d 	.word	0x7473616d
  404a34:	695f7265 	.word	0x695f7265
  404a38:	3a74696e 	.word	0x3a74696e
  404a3c:	63757320 	.word	0x63757320
  404a40:	73736563 	.word	0x73736563
  404a44:	00000a0d 	.word	0x00000a0d
  404a48:	5f697774 	.word	0x5f697774
  404a4c:	626f7270 	.word	0x626f7270
  404a50:	66203a65 	.word	0x66203a65
  404a54:	656c6961 	.word	0x656c6961
  404a58:	000a0d64 	.word	0x000a0d64
  404a5c:	5f697774 	.word	0x5f697774
  404a60:	626f7270 	.word	0x626f7270
  404a64:	73203a65 	.word	0x73203a65
  404a68:	65636375 	.word	0x65636375
  404a6c:	0a0d7373 	.word	0x0a0d7373
  404a70:	00000000 	.word	0x00000000
  404a74:	62616e45 	.word	0x62616e45
  404a78:	0064656c 	.word	0x0064656c
  404a7c:	61736944 	.word	0x61736944
  404a80:	64656c62 	.word	0x64656c62
  404a84:	00000000 	.word	0x00000000
  404a88:	69766544 	.word	0x69766544
  404a8c:	203a6563 	.word	0x203a6563
  404a90:	31257830 	.word	0x31257830
  404a94:	000a0d78 	.word	0x000a0d78
  404a98:	65656c53 	.word	0x65656c53
  404a9c:	6f4d2070 	.word	0x6f4d2070
  404aa0:	203a6564 	.word	0x203a6564
  404aa4:	0a0d7325 	.word	0x0a0d7325
  404aa8:	00000000 	.word	0x00000000
  404aac:	636f6c43 	.word	0x636f6c43
  404ab0:	6f53206b 	.word	0x6f53206b
  404ab4:	65637275 	.word	0x65637275
  404ab8:	0000203a 	.word	0x0000203a
  404abc:	65746e49 	.word	0x65746e49
  404ac0:	6c616e72 	.word	0x6c616e72
  404ac4:	484d3820 	.word	0x484d3820
  404ac8:	736f207a 	.word	0x736f207a
  404acc:	6c6c6963 	.word	0x6c6c6963
  404ad0:	726f7461 	.word	0x726f7461
  404ad4:	00000a0d 	.word	0x00000a0d
  404ad8:	204c4c50 	.word	0x204c4c50
  404adc:	68746977 	.word	0x68746977
  404ae0:	61205820 	.word	0x61205820
  404ae4:	20736978 	.word	0x20736978
  404ae8:	6f727967 	.word	0x6f727967
  404aec:	706f6373 	.word	0x706f6373
  404af0:	65722065 	.word	0x65722065
  404af4:	65726566 	.word	0x65726566
  404af8:	0d65636e 	.word	0x0d65636e
  404afc:	0000000a 	.word	0x0000000a
  404b00:	6f727947 	.word	0x6f727947
  404b04:	706f6373 	.word	0x706f6373
  404b08:	00203a65 	.word	0x00203a65
  404b0c:	20303532 	.word	0x20303532
  404b10:	0d737064 	.word	0x0d737064
  404b14:	0000000a 	.word	0x0000000a
  404b18:	20303035 	.word	0x20303035
  404b1c:	0d737064 	.word	0x0d737064
  404b20:	0000000a 	.word	0x0000000a
  404b24:	30303031 	.word	0x30303031
  404b28:	73706420 	.word	0x73706420
  404b2c:	00000a0d 	.word	0x00000a0d
  404b30:	30303032 	.word	0x30303032
  404b34:	73706420 	.word	0x73706420
  404b38:	00000a0d 	.word	0x00000a0d
  404b3c:	5f657375 	.word	0x5f657375
  404b40:	696c6163 	.word	0x696c6163
  404b44:	74617262 	.word	0x74617262
  404b48:	25203a65 	.word	0x25203a65
  404b4c:	000a0d64 	.word	0x000a0d64
  404b50:	75746361 	.word	0x75746361
  404b54:	745f6c61 	.word	0x745f6c61
  404b58:	73657268 	.word	0x73657268
  404b5c:	646c6f68 	.word	0x646c6f68
  404b60:	6625203a 	.word	0x6625203a
  404b64:	00000a0d 	.word	0x00000a0d
  404b68:	5f737064 	.word	0x5f737064
  404b6c:	5f726570 	.word	0x5f726570
  404b70:	69676964 	.word	0x69676964
  404b74:	25203a74 	.word	0x25203a74
  404b78:	000a0d66 	.word	0x000a0d66
  404b7c:	676e6172 	.word	0x676e6172
  404b80:	65705f65 	.word	0x65705f65
  404b84:	69645f72 	.word	0x69645f72
  404b88:	3a746967 	.word	0x3a746967
  404b8c:	0d662520 	.word	0x0d662520
  404b90:	0000000a 	.word	0x0000000a
  404b94:	6f746f6d 	.word	0x6f746f6d
  404b98:	6e695f72 	.word	0x6e695f72
  404b9c:	0a0d7469 	.word	0x0a0d7469
  404ba0:	00000000 	.word	0x00000000
  404ba4:	6f746f6d 	.word	0x6f746f6d
  404ba8:	756f5f72 	.word	0x756f5f72
  404bac:	74757074 	.word	0x74757074
  404bb0:	6425203a 	.word	0x6425203a
  404bb4:	00000a0d 	.word	0x00000a0d
  404bb8:	00000001 	.word	0x00000001
  404bbc:	00000002 	.word	0x00000002
  404bc0:	00000004 	.word	0x00000004
  404bc4:	00000008 	.word	0x00000008
  404bc8:	00000010 	.word	0x00000010
  404bcc:	00000020 	.word	0x00000020
  404bd0:	00000040 	.word	0x00000040
  404bd4:	00000080 	.word	0x00000080
  404bd8:	00000100 	.word	0x00000100
  404bdc:	00000200 	.word	0x00000200
  404be0:	00000400 	.word	0x00000400

00404be4 <_global_impure_ptr>:
  404be4:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  404bf4:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  404c04:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  404c14:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  404c24:	4e614e00 00000000                       .NaN....

00404c2c <__sf_fake_stdin>:
	...

00404c4c <__sf_fake_stdout>:
	...

00404c6c <__sf_fake_stderr>:
	...

00404c90 <__mprec_tens>:
  404c90:	00000000 3ff00000 00000000 40240000     .......?......$@
  404ca0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  404cb0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  404cc0:	00000000 412e8480 00000000 416312d0     .......A......cA
  404cd0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  404ce0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  404cf0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  404d00:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  404d10:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  404d20:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  404d30:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  404d40:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  404d50:	79d99db4 44ea7843                       ...yCx.D

00404d58 <__mprec_bigtens>:
  404d58:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  404d68:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  404d78:	7f73bf3c 75154fdd                       <.s..O.u

00404d80 <p05.6097>:
  404d80:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  404d90:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  404da0:	5849534f 00002e00                                OSIX...

00404da7 <_ctype_>:
  404da7:	20202000 20202020 28282020 20282828     .         ((((( 
  404db7:	20202020 20202020 20202020 20202020                     
  404dc7:	10108820 10101010 10101010 10101010      ...............
  404dd7:	04040410 04040404 10040404 10101010     ................
  404de7:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404df7:	01010101 01010101 01010101 10101010     ................
  404e07:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404e17:	02020202 02020202 02020202 10101010     ................
  404e27:	00000020 00000000 00000000 00000000      ...............
	...

00404ea8 <_init>:
  404ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404eaa:	bf00      	nop
  404eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404eae:	bc08      	pop	{r3}
  404eb0:	469e      	mov	lr, r3
  404eb2:	4770      	bx	lr

00404eb4 <__init_array_start>:
  404eb4:	004000f1 	.word	0x004000f1

00404eb8 <_fini>:
  404eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404eba:	bf00      	nop
  404ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404ebe:	bc08      	pop	{r3}
  404ec0:	469e      	mov	lr, r3
  404ec2:	4770      	bx	lr
  404ec4:	0000      	movs	r0, r0
	...

00404ec8 <__portable_delay_cycles_veneer>:
  404ec8:	f85f f000 	ldr.w	pc, [pc]	; 404ecc <__portable_delay_cycles_veneer+0x4>
  404ecc:	20000001 	.word	0x20000001

00404ed0 <__fini_array_start>:
  404ed0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 4c2c 0040 4c4c 0040 4c6c 0040     ....,L@.LL@.lL@.
	...

20000070 <_impure_ptr>:
20000070:	0010 2000                                   ... 

20000074 <__global_locale>:
20000074:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000094:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000114:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000134:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000154:	4099 0040 404d 0040 0000 0000 4da7 0040     .@@.M@@......M@.
20000164:	4da5 0040 4d91 0040 4d91 0040 4d91 0040     .M@..M@..M@..M@.
20000174:	4d91 0040 4d91 0040 4d91 0040 4d91 0040     .M@..M@..M@..M@.
20000184:	4d91 0040 4d91 0040 ffff ffff ffff ffff     .M@..M@.........
20000194:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001bc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
