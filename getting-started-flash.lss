
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008514  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  00408514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000680  200001e8  004086fc  000201e8  2**2
                  ALLOC
  3 .stack        00003000  20000868  00408d7c  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   000167a5  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003952  00000000  00000000  00036a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005dfa  00000000  00000000  0003a377  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ed0  00000000  00000000  00040171  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d30  00000000  00000000  00041041  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000189c1  00000000  00000000  00041d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014a66  00000000  00000000  0005a732  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000558b4  00000000  00000000  0006f198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000334c  00000000  00000000  000c4a4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003868 	.word	0x20003868
  400004:	00402341 	.word	0x00402341
  400008:	0040233d 	.word	0x0040233d
  40000c:	0040233d 	.word	0x0040233d
  400010:	0040233d 	.word	0x0040233d
  400014:	0040233d 	.word	0x0040233d
  400018:	0040233d 	.word	0x0040233d
	...
  40002c:	0040233d 	.word	0x0040233d
  400030:	0040233d 	.word	0x0040233d
  400034:	00000000 	.word	0x00000000
  400038:	0040233d 	.word	0x0040233d
  40003c:	0040056d 	.word	0x0040056d
  400040:	0040233d 	.word	0x0040233d
  400044:	0040233d 	.word	0x0040233d
  400048:	0040233d 	.word	0x0040233d
  40004c:	0040233d 	.word	0x0040233d
  400050:	0040233d 	.word	0x0040233d
  400054:	0040233d 	.word	0x0040233d
  400058:	0040233d 	.word	0x0040233d
  40005c:	0040233d 	.word	0x0040233d
  400060:	0040233d 	.word	0x0040233d
  400064:	0040233d 	.word	0x0040233d
  400068:	00000000 	.word	0x00000000
  40006c:	00401f7d 	.word	0x00401f7d
  400070:	00401f8d 	.word	0x00401f8d
  400074:	00401f9d 	.word	0x00401f9d
  400078:	0040233d 	.word	0x0040233d
  40007c:	0040233d 	.word	0x0040233d
	...
  400088:	0040233d 	.word	0x0040233d
  40008c:	0040233d 	.word	0x0040233d
  400090:	0040233d 	.word	0x0040233d
  400094:	0040233d 	.word	0x0040233d
  400098:	0040233d 	.word	0x0040233d
  40009c:	0040233d 	.word	0x0040233d
  4000a0:	0040233d 	.word	0x0040233d
  4000a4:	0040233d 	.word	0x0040233d
  4000a8:	0040233d 	.word	0x0040233d
  4000ac:	0040233d 	.word	0x0040233d
  4000b0:	0040233d 	.word	0x0040233d
  4000b4:	0040233d 	.word	0x0040233d
  4000b8:	0040233d 	.word	0x0040233d
  4000bc:	0040233d 	.word	0x0040233d
  4000c0:	0040233d 	.word	0x0040233d
  4000c4:	0040233d 	.word	0x0040233d
  4000c8:	0040233d 	.word	0x0040233d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e8 	.word	0x200001e8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00408514 	.word	0x00408514

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001ec 	.word	0x200001ec
  40011c:	00408514 	.word	0x00408514
  400120:	00408514 	.word	0x00408514
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f002 f9e6 	bl	4024fc <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 ff6e 	bl	402014 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 ff96 	bl	402068 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 ff9a 	bl	402078 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 ff9d 	bl	402088 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 ff2a 	bl	401fac <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f002 f946 	bl	4023e8 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f002 f9cd 	bl	4024fc <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000500 	.word	0x20000500
  4001a8:	200004f8 	.word	0x200004f8

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200004fc 	.word	0x200004fc
  4001f8:	20000500 	.word	0x20000500

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 ff96 	bl	402144 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 ff8b 	bl	402144 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 ff94 	bl	40216c <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 ff87 	bl	40216c <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 ff52 	bl	402134 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 ff46 	bl	402134 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 ff4c 	bl	402158 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 ff40 	bl	402158 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002f8:	b099      	sub	sp, #100	; 0x64
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f001 faef 	bl	4018e0 <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 fec8 	bl	402098 <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 fec5 	bl	402098 <pmc_enable_periph_clk>
    config_init();
  40030e:	f000 f913 	bl	400538 <config_init>
    cph_millis_init();
  400312:	f000 f933 	bl	40057c <cph_millis_init>
    cli_init();
  400316:	f000 f95b 	bl	4005d0 <cli_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40031a:	2009      	movs	r0, #9
  40031c:	f001 febc 	bl	402098 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400320:	4c6d      	ldr	r4, [pc, #436]	; (4004d8 <main+0x1e4>)
  400322:	4b6e      	ldr	r3, [pc, #440]	; (4004dc <main+0x1e8>)
  400324:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400326:	4a6e      	ldr	r2, [pc, #440]	; (4004e0 <main+0x1ec>)
  400328:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <main+0x1f0>)
  40032a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40032c:	4a6e      	ldr	r2, [pc, #440]	; (4004e8 <main+0x1f4>)
  40032e:	4b6f      	ldr	r3, [pc, #444]	; (4004ec <main+0x1f8>)
  400330:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400332:	4b6f      	ldr	r3, [pc, #444]	; (4004f0 <main+0x1fc>)
  400334:	9315      	str	r3, [sp, #84]	; 0x54
	uart_settings.ul_baudrate = opt->baudrate;
  400336:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40033a:	9316      	str	r3, [sp, #88]	; 0x58
	uart_settings.ul_mode = opt->paritytype;
  40033c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400340:	9317      	str	r3, [sp, #92]	; 0x5c
  400342:	2009      	movs	r0, #9
  400344:	f001 fea8 	bl	402098 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400348:	a915      	add	r1, sp, #84	; 0x54
  40034a:	4620      	mov	r0, r4
  40034c:	f001 fed2 	bl	4020f4 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400350:	4c68      	ldr	r4, [pc, #416]	; (4004f4 <main+0x200>)
  400352:	6823      	ldr	r3, [r4, #0]
  400354:	2100      	movs	r1, #0
  400356:	6898      	ldr	r0, [r3, #8]
  400358:	f003 fa02 	bl	403760 <setbuf>
	setbuf(stdin, NULL);
  40035c:	6823      	ldr	r3, [r4, #0]
  40035e:	2100      	movs	r1, #0
  400360:	6858      	ldr	r0, [r3, #4]
  400362:	f003 f9fd 	bl	403760 <setbuf>
    configure_console();
    ap_init();
  400366:	f001 fab1 	bl	4018cc <ap_init>

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  40036a:	4863      	ldr	r0, [pc, #396]	; (4004f8 <main+0x204>)
  40036c:	f003 f9f0 	bl	403750 <puts>
  400370:	240a      	movs	r4, #10

    for (int i=0; i<10; i++) {
        printf(".");
  400372:	4e62      	ldr	r6, [pc, #392]	; (4004fc <main+0x208>)
        delay_ms(100);
  400374:	4d62      	ldr	r5, [pc, #392]	; (400500 <main+0x20c>)
    ap_init();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
        printf(".");
  400376:	4630      	mov	r0, r6
  400378:	f003 f978 	bl	40366c <iprintf>
        delay_ms(100);
  40037c:	4628      	mov	r0, r5
  40037e:	f008 f8c3 	bl	408508 <__portable_delay_cycles_veneer>
    configure_console();
    ap_init();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
  400382:	3c01      	subs	r4, #1
  400384:	d1f7      	bne.n	400376 <main+0x82>
        printf(".");
        delay_ms(100);
    }
    printf("\r\n");
  400386:	485f      	ldr	r0, [pc, #380]	; (400504 <main+0x210>)
  400388:	f003 f970 	bl	40366c <iprintf>

    
    if (imu_init()) {
  40038c:	f000 ff58 	bl	401240 <imu_init>
  400390:	2800      	cmp	r0, #0
  400392:	f000 809d 	beq.w	4004d0 <main+0x1dc>

        motor_init();
  400396:	f001 f8c9 	bl	40152c <motor_init>
        //     cli_tick();
        //     delay_ms(100);
        // }

        // Calibrate the imu
        imu_calibrate();
  40039a:	f000 ff6d 	bl	401278 <imu_calibrate>
        config.imu_calibrate = false;
  40039e:	2200      	movs	r2, #0
  4003a0:	4b59      	ldr	r3, [pc, #356]	; (400508 <main+0x214>)
  4003a2:	75da      	strb	r2, [r3, #23]
 
        

        printf("please press button to arm motors\r\n");
  4003a4:	4859      	ldr	r0, [pc, #356]	; (40050c <main+0x218>)
  4003a6:	f003 f961 	bl	40366c <iprintf>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003aa:	4b59      	ldr	r3, [pc, #356]	; (400510 <main+0x21c>)
  4003ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        while(true) {
            if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  4003ae:	f012 0f04 	tst.w	r2, #4
  4003b2:	d1fb      	bne.n	4003ac <main+0xb8>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4003b4:	4b57      	ldr	r3, [pc, #348]	; (400514 <main+0x220>)
  4003b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4003b8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  4003bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003c0:	4b54      	ldr	r3, [pc, #336]	; (400514 <main+0x220>)
  4003c2:	bf14      	ite	ne
  4003c4:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4003c6:	631a      	streq	r2, [r3, #48]	; 0x30
                ioport_toggle_pin_level(LED0_GPIO);
                config.motor_armed = true;
  4003c8:	2101      	movs	r1, #1
  4003ca:	4b4f      	ldr	r3, [pc, #316]	; (400508 <main+0x214>)
  4003cc:	7519      	strb	r1, [r3, #20]
                printf("motor_armed: %d\r\n", config.motor_armed);
  4003ce:	4852      	ldr	r0, [pc, #328]	; (400518 <main+0x224>)
  4003d0:	f003 f94c 	bl	40366c <iprintf>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003d4:	4c4c      	ldr	r4, [pc, #304]	; (400508 <main+0x214>)
                imu_calibrate();
                pid_init();
                config.imu_calibrate = false;
  4003d6:	2600      	movs	r6, #0

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  4003d8:	f240 477e 	movw	r7, #1150	; 0x47e
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);

            if (config.motor_armed) {
                motor_set_power(motors[1], power_left + config.motor_offset);
  4003dc:	f8df a150 	ldr.w	sl, [pc, #336]	; 400530 <main+0x23c>
  4003e0:	f10a 0364 	add.w	r3, sl, #100	; 0x64
  4003e4:	9313      	str	r3, [sp, #76]	; 0x4c
                motor_set_power(motors[0], power_right + config.motor_offset);
            }


            if (config.log_imu) {
                if (cph_get_millis() >= f_log_timeout) {
  4003e6:	f8df b14c 	ldr.w	fp, [pc, #332]	; 400534 <main+0x240>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003ea:	7de3      	ldrb	r3, [r4, #23]
  4003ec:	b123      	cbz	r3, 4003f8 <main+0x104>
                imu_calibrate();
  4003ee:	f000 ff43 	bl	401278 <imu_calibrate>
                pid_init();
  4003f2:	f001 f9d1 	bl	401798 <pid_init>
                config.imu_calibrate = false;
  4003f6:	75e6      	strb	r6, [r4, #23]
            }
            cli_tick();
  4003f8:	f000 faa6 	bl	400948 <cli_tick>
            imu_tick();
  4003fc:	f000 ff50 	bl	4012a0 <imu_tick>
            motor_tick();
  400400:	f001 f958 	bl	4016b4 <motor_tick>

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();
  400404:	f001 f9f0 	bl	4017e8 <pid_tick>
  400408:	f007 fc6e 	bl	407ce8 <__aeabi_f2iz>
  40040c:	4680      	mov	r8, r0

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  40040e:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  400412:	9500      	str	r5, [sp, #0]
  400414:	463b      	mov	r3, r7
  400416:	225a      	movs	r2, #90	; 0x5a
  400418:	4631      	mov	r1, r6
  40041a:	f000 f89b 	bl	400554 <map>
  40041e:	4681      	mov	r9, r0
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);
  400420:	9500      	str	r5, [sp, #0]
  400422:	463b      	mov	r3, r7
  400424:	f06f 0259 	mvn.w	r2, #89	; 0x59
  400428:	4631      	mov	r1, r6
  40042a:	4640      	mov	r0, r8
  40042c:	f000 f892 	bl	400554 <map>
  400430:	4605      	mov	r5, r0

            if (config.motor_armed) {
  400432:	7d23      	ldrb	r3, [r4, #20]
  400434:	b1db      	cbz	r3, 40046e <main+0x17a>
                motor_set_power(motors[1], power_left + config.motor_offset);
  400436:	6923      	ldr	r3, [r4, #16]
  400438:	444b      	add	r3, r9
  40043a:	9311      	str	r3, [sp, #68]	; 0x44
  40043c:	f04f 0844 	mov.w	r8, #68	; 0x44
  400440:	4642      	mov	r2, r8
  400442:	9913      	ldr	r1, [sp, #76]	; 0x4c
  400444:	4668      	mov	r0, sp
  400446:	f002 fc8f 	bl	402d68 <memcpy>
  40044a:	f10a 0354 	add.w	r3, sl, #84	; 0x54
  40044e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400450:	f001 f932 	bl	4016b8 <motor_set_power>
                motor_set_power(motors[0], power_right + config.motor_offset);
  400454:	6923      	ldr	r3, [r4, #16]
  400456:	441d      	add	r5, r3
  400458:	9511      	str	r5, [sp, #68]	; 0x44
  40045a:	4642      	mov	r2, r8
  40045c:	f10a 0110 	add.w	r1, sl, #16
  400460:	4668      	mov	r0, sp
  400462:	f002 fc81 	bl	402d68 <memcpy>
  400466:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  40046a:	f001 f925 	bl	4016b8 <motor_set_power>
            }


            if (config.log_imu) {
  40046e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  400472:	2b00      	cmp	r3, #0
  400474:	d0b9      	beq.n	4003ea <main+0xf6>
                if (cph_get_millis() >= f_log_timeout) {
  400476:	f8db 2000 	ldr.w	r2, [fp]
  40047a:	4b28      	ldr	r3, [pc, #160]	; (40051c <main+0x228>)
  40047c:	681b      	ldr	r3, [r3, #0]
  40047e:	429a      	cmp	r2, r3
  400480:	d3b3      	bcc.n	4003ea <main+0xf6>
                    f_log_timeout = cph_get_millis() + 50;
  400482:	f8db 3000 	ldr.w	r3, [fp]
  400486:	3332      	adds	r3, #50	; 0x32
  400488:	4a24      	ldr	r2, [pc, #144]	; (40051c <main+0x228>)
  40048a:	6013      	str	r3, [r2, #0]
                    printf("roll/pitch/yaw error/pid: %f %f %f %f %f\r\n", ap.imu.x_axis, ap.imu.y_axis, ap.imu.z_axis, error, pid);
  40048c:	4d24      	ldr	r5, [pc, #144]	; (400520 <main+0x22c>)
  40048e:	6828      	ldr	r0, [r5, #0]
  400490:	f006 fdba 	bl	407008 <__aeabi_f2d>
  400494:	4680      	mov	r8, r0
  400496:	4689      	mov	r9, r1
  400498:	4b22      	ldr	r3, [pc, #136]	; (400524 <main+0x230>)
  40049a:	6818      	ldr	r0, [r3, #0]
  40049c:	f006 fdb4 	bl	407008 <__aeabi_f2d>
  4004a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4004a4:	4b20      	ldr	r3, [pc, #128]	; (400528 <main+0x234>)
  4004a6:	6818      	ldr	r0, [r3, #0]
  4004a8:	f006 fdae 	bl	407008 <__aeabi_f2d>
  4004ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4004b0:	68a8      	ldr	r0, [r5, #8]
  4004b2:	f006 fda9 	bl	407008 <__aeabi_f2d>
  4004b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4004ba:	6868      	ldr	r0, [r5, #4]
  4004bc:	f006 fda4 	bl	407008 <__aeabi_f2d>
  4004c0:	e9cd 0100 	strd	r0, r1, [sp]
  4004c4:	4642      	mov	r2, r8
  4004c6:	464b      	mov	r3, r9
  4004c8:	4818      	ldr	r0, [pc, #96]	; (40052c <main+0x238>)
  4004ca:	f003 f8cf 	bl	40366c <iprintf>
  4004ce:	e78c      	b.n	4003ea <main+0xf6>
    //         delay_ms(500); 
    //     }


    // }
}
  4004d0:	2000      	movs	r0, #0
  4004d2:	b019      	add	sp, #100	; 0x64
  4004d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004d8:	400e0800 	.word	0x400e0800
  4004dc:	20000500 	.word	0x20000500
  4004e0:	0040027d 	.word	0x0040027d
  4004e4:	200004fc 	.word	0x200004fc
  4004e8:	004001fd 	.word	0x004001fd
  4004ec:	200004f8 	.word	0x200004f8
  4004f0:	07270e00 	.word	0x07270e00
  4004f4:	20000078 	.word	0x20000078
  4004f8:	00407d74 	.word	0x00407d74
  4004fc:	00407d90 	.word	0x00407d90
  400500:	000d1437 	.word	0x000d1437
  400504:	00407d8c 	.word	0x00407d8c
  400508:	200006e4 	.word	0x200006e4
  40050c:	00407d94 	.word	0x00407d94
  400510:	400e0e00 	.word	0x400e0e00
  400514:	400e1200 	.word	0x400e1200
  400518:	00407db8 	.word	0x00407db8
  40051c:	20000204 	.word	0x20000204
  400520:	20000814 	.word	0x20000814
  400524:	2000044c 	.word	0x2000044c
  400528:	20000458 	.word	0x20000458
  40052c:	00407dcc 	.word	0x00407dcc
  400530:	20000534 	.word	0x20000534
  400534:	20000208 	.word	0x20000208

00400538 <config_init>:
	// config.axis_swap_xy = false;
	// config.fpv_freeze_pitch = false;
	// config.fpv_freeze_roll = false;
	// config.max_pwm_fpv_pitch = 80;
	// config.max_pwm_fpv_roll = 80;
    config.gyro_calibrate = true;
  400538:	4b05      	ldr	r3, [pc, #20]	; (400550 <config_init+0x18>)
  40053a:	2101      	movs	r1, #1
  40053c:	7559      	strb	r1, [r3, #21]
	config.accel_calibrate = false;
  40053e:	2200      	movs	r2, #0
  400540:	759a      	strb	r2, [r3, #22]
	config.imu_calibrate = true;
  400542:	75d9      	strb	r1, [r3, #23]
	config.log_motor = false;
  400544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	config.log_imu = false;
  400548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	200006e4 	.word	0x200006e4

00400554 <map>:
#include "cph_util.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  400554:	b410      	push	{r4}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  400556:	1a40      	subs	r0, r0, r1
  400558:	9c01      	ldr	r4, [sp, #4]
  40055a:	1ae4      	subs	r4, r4, r3
  40055c:	fb04 f000 	mul.w	r0, r4, r0
  400560:	1a52      	subs	r2, r2, r1
  400562:	fb90 f0f2 	sdiv	r0, r0, r2
  400566:	4418      	add	r0, r3
  400568:	bc10      	pop	{r4}
  40056a:	4770      	bx	lr

0040056c <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  40056c:	4a02      	ldr	r2, [pc, #8]	; (400578 <SysTick_Handler+0xc>)
  40056e:	6813      	ldr	r3, [r2, #0]
  400570:	3301      	adds	r3, #1
  400572:	6013      	str	r3, [r2, #0]
  400574:	4770      	bx	lr
  400576:	bf00      	nop
  400578:	20000208 	.word	0x20000208

0040057c <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40057c:	4b05      	ldr	r3, [pc, #20]	; (400594 <cph_millis_init+0x18>)
  40057e:	4a06      	ldr	r2, [pc, #24]	; (400598 <cph_millis_init+0x1c>)
  400580:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400582:	21f0      	movs	r1, #240	; 0xf0
  400584:	4a05      	ldr	r2, [pc, #20]	; (40059c <cph_millis_init+0x20>)
  400586:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40058a:	2200      	movs	r2, #0
  40058c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40058e:	2207      	movs	r2, #7
  400590:	601a      	str	r2, [r3, #0]
  400592:	4770      	bx	lr
  400594:	e000e010 	.word	0xe000e010
  400598:	0001d4bf 	.word	0x0001d4bf
  40059c:	e000ed00 	.word	0xe000ed00

004005a0 <init_buffer>:
	init_buffer();
	init_lines();
}

void init_buffer()
{
  4005a0:	b508      	push	{r3, lr}
	cli_line_index = 0;
  4005a2:	2100      	movs	r1, #0
  4005a4:	4b03      	ldr	r3, [pc, #12]	; (4005b4 <init_buffer+0x14>)
  4005a6:	6019      	str	r1, [r3, #0]
	memset(cli_line_buffer, '\0', sizeof(cli_line_buffer));
  4005a8:	2281      	movs	r2, #129	; 0x81
  4005aa:	4803      	ldr	r0, [pc, #12]	; (4005b8 <init_buffer+0x18>)
  4005ac:	f002 fbe7 	bl	402d7e <memset>
  4005b0:	bd08      	pop	{r3, pc}
  4005b2:	bf00      	nop
  4005b4:	20000414 	.word	0x20000414
  4005b8:	2000070c 	.word	0x2000070c

004005bc <init_lines>:
}

void init_lines()
{
  4005bc:	b508      	push	{r3, lr}
	memset(cli_lines, '\0', sizeof(cli_lines));
  4005be:	2281      	movs	r2, #129	; 0x81
  4005c0:	2100      	movs	r1, #0
  4005c2:	4802      	ldr	r0, [pc, #8]	; (4005cc <init_lines+0x10>)
  4005c4:	f002 fbdb 	bl	402d7e <memset>
  4005c8:	bd08      	pop	{r3, pc}
  4005ca:	bf00      	nop
  4005cc:	20000790 	.word	0x20000790

004005d0 <cli_init>:
char cli_line_buffer[CLI_MAX_CHARS+1];
int cli_line_index = 0;


void cli_init()
{
  4005d0:	b508      	push	{r3, lr}
	init_buffer();
  4005d2:	f7ff ffe5 	bl	4005a0 <init_buffer>
	init_lines();
  4005d6:	f7ff fff1 	bl	4005bc <init_lines>
  4005da:	bd08      	pop	{r3, pc}

004005dc <cli_handle_command>:

}

//printf("motor0: %d\r\n", atoi(parm));
void cli_handle_command(char *cmd, char *parm)
{
  4005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005de:	b093      	sub	sp, #76	; 0x4c
  4005e0:	4604      	mov	r4, r0
  4005e2:	460d      	mov	r5, r1

	/*
	 * 	Autopilot settings
	 */
	if (strcmp(cmd, "apx") == 0) {
  4005e4:	4986      	ldr	r1, [pc, #536]	; (400800 <cli_handle_command+0x224>)
  4005e6:	f003 f96d 	bl	4038c4 <strcmp>
  4005ea:	b968      	cbnz	r0, 400608 <cli_handle_command+0x2c>
		AP.desired_angle_x = atof(parm);
  4005ec:	4628      	mov	r0, r5
  4005ee:	f002 fb87 	bl	402d00 <atof>
  4005f2:	f007 f855 	bl	4076a0 <__aeabi_d2f>
  4005f6:	4b83      	ldr	r3, [pc, #524]	; (400804 <cli_handle_command+0x228>)
  4005f8:	6058      	str	r0, [r3, #4]
		printf("AP.desired_angle_x: %f\r\n", AP.desired_angle_x);
  4005fa:	f006 fd05 	bl	407008 <__aeabi_f2d>
  4005fe:	4602      	mov	r2, r0
  400600:	460b      	mov	r3, r1
  400602:	4881      	ldr	r0, [pc, #516]	; (400808 <cli_handle_command+0x22c>)
  400604:	f003 f832 	bl	40366c <iprintf>
	}
	if (strcmp(cmd, "apy") == 0) {
  400608:	4980      	ldr	r1, [pc, #512]	; (40080c <cli_handle_command+0x230>)
  40060a:	4620      	mov	r0, r4
  40060c:	f003 f95a 	bl	4038c4 <strcmp>
  400610:	b968      	cbnz	r0, 40062e <cli_handle_command+0x52>
		AP.desired_angle_y = atof(parm);
  400612:	4628      	mov	r0, r5
  400614:	f002 fb74 	bl	402d00 <atof>
  400618:	f007 f842 	bl	4076a0 <__aeabi_d2f>
  40061c:	4b79      	ldr	r3, [pc, #484]	; (400804 <cli_handle_command+0x228>)
  40061e:	6098      	str	r0, [r3, #8]
		printf("AP.desired_angle_y: %f\r\n", AP.desired_angle_y);
  400620:	f006 fcf2 	bl	407008 <__aeabi_f2d>
  400624:	4602      	mov	r2, r0
  400626:	460b      	mov	r3, r1
  400628:	4879      	ldr	r0, [pc, #484]	; (400810 <cli_handle_command+0x234>)
  40062a:	f003 f81f 	bl	40366c <iprintf>
	}	

	/*
	 * 	Pid loop configuration
	 */
	if (strcmp(cmd, "kp") == 0) {
  40062e:	4979      	ldr	r1, [pc, #484]	; (400814 <cli_handle_command+0x238>)
  400630:	4620      	mov	r0, r4
  400632:	f003 f947 	bl	4038c4 <strcmp>
  400636:	b968      	cbnz	r0, 400654 <cli_handle_command+0x78>
		config.pid_kp = atof(parm);
  400638:	4628      	mov	r0, r5
  40063a:	f002 fb61 	bl	402d00 <atof>
  40063e:	f007 f82f 	bl	4076a0 <__aeabi_d2f>
  400642:	4b75      	ldr	r3, [pc, #468]	; (400818 <cli_handle_command+0x23c>)
  400644:	6018      	str	r0, [r3, #0]
		printf("config.pid_kp: %f\r\n", config.pid_kp);
  400646:	f006 fcdf 	bl	407008 <__aeabi_f2d>
  40064a:	4602      	mov	r2, r0
  40064c:	460b      	mov	r3, r1
  40064e:	4873      	ldr	r0, [pc, #460]	; (40081c <cli_handle_command+0x240>)
  400650:	f003 f80c 	bl	40366c <iprintf>
	}

	if (strcmp(cmd, "ki") == 0) {
  400654:	4972      	ldr	r1, [pc, #456]	; (400820 <cli_handle_command+0x244>)
  400656:	4620      	mov	r0, r4
  400658:	f003 f934 	bl	4038c4 <strcmp>
  40065c:	b968      	cbnz	r0, 40067a <cli_handle_command+0x9e>
		config.pid_ki = atof(parm);
  40065e:	4628      	mov	r0, r5
  400660:	f002 fb4e 	bl	402d00 <atof>
  400664:	f007 f81c 	bl	4076a0 <__aeabi_d2f>
  400668:	4b6b      	ldr	r3, [pc, #428]	; (400818 <cli_handle_command+0x23c>)
  40066a:	6058      	str	r0, [r3, #4]
		printf("config.pid_ki: %f\r\n", config.pid_ki);
  40066c:	f006 fccc 	bl	407008 <__aeabi_f2d>
  400670:	4602      	mov	r2, r0
  400672:	460b      	mov	r3, r1
  400674:	486b      	ldr	r0, [pc, #428]	; (400824 <cli_handle_command+0x248>)
  400676:	f002 fff9 	bl	40366c <iprintf>
	}

	if (strcmp(cmd, "kd") == 0) {
  40067a:	496b      	ldr	r1, [pc, #428]	; (400828 <cli_handle_command+0x24c>)
  40067c:	4620      	mov	r0, r4
  40067e:	f003 f921 	bl	4038c4 <strcmp>
  400682:	b968      	cbnz	r0, 4006a0 <cli_handle_command+0xc4>
		config.pid_kd = atof(parm);
  400684:	4628      	mov	r0, r5
  400686:	f002 fb3b 	bl	402d00 <atof>
  40068a:	f007 f809 	bl	4076a0 <__aeabi_d2f>
  40068e:	4b62      	ldr	r3, [pc, #392]	; (400818 <cli_handle_command+0x23c>)
  400690:	6098      	str	r0, [r3, #8]
		printf("config.pid_kd: %f\r\n", config.pid_kd);
  400692:	f006 fcb9 	bl	407008 <__aeabi_f2d>
  400696:	4602      	mov	r2, r0
  400698:	460b      	mov	r3, r1
  40069a:	4864      	ldr	r0, [pc, #400]	; (40082c <cli_handle_command+0x250>)
  40069c:	f002 ffe6 	bl	40366c <iprintf>

	/*
	 * 	IMU settings
	 */	

	if (strcmp(cmd, "imu_calibrate") == 0) {
  4006a0:	4963      	ldr	r1, [pc, #396]	; (400830 <cli_handle_command+0x254>)
  4006a2:	4620      	mov	r0, r4
  4006a4:	f003 f90e 	bl	4038c4 <strcmp>
  4006a8:	b950      	cbnz	r0, 4006c0 <cli_handle_command+0xe4>
		config.imu_calibrate = atoi(parm);
  4006aa:	4628      	mov	r0, r5
  4006ac:	f002 fb2b 	bl	402d06 <atoi>
  4006b0:	1c01      	adds	r1, r0, #0
  4006b2:	bf18      	it	ne
  4006b4:	2101      	movne	r1, #1
  4006b6:	4b58      	ldr	r3, [pc, #352]	; (400818 <cli_handle_command+0x23c>)
  4006b8:	75d9      	strb	r1, [r3, #23]
		printf("imu_calibrate: %d\r\n", config.imu_calibrate);
  4006ba:	485e      	ldr	r0, [pc, #376]	; (400834 <cli_handle_command+0x258>)
  4006bc:	f002 ffd6 	bl	40366c <iprintf>
	}

	/*
	 * 	Motor settings
	 */	
	if (strcmp(cmd, "motor_armed") == 0) {
  4006c0:	495d      	ldr	r1, [pc, #372]	; (400838 <cli_handle_command+0x25c>)
  4006c2:	4620      	mov	r0, r4
  4006c4:	f003 f8fe 	bl	4038c4 <strcmp>
  4006c8:	b950      	cbnz	r0, 4006e0 <cli_handle_command+0x104>
		config.motor_armed = atoi(parm);
  4006ca:	4628      	mov	r0, r5
  4006cc:	f002 fb1b 	bl	402d06 <atoi>
  4006d0:	1c01      	adds	r1, r0, #0
  4006d2:	bf18      	it	ne
  4006d4:	2101      	movne	r1, #1
  4006d6:	4b50      	ldr	r3, [pc, #320]	; (400818 <cli_handle_command+0x23c>)
  4006d8:	7519      	strb	r1, [r3, #20]
		printf("motor_armed: %d\r\n", config.motor_armed);
  4006da:	4858      	ldr	r0, [pc, #352]	; (40083c <cli_handle_command+0x260>)
  4006dc:	f002 ffc6 	bl	40366c <iprintf>
	}

	if (strcmp(cmd, "motor_offset") == 0) {
  4006e0:	4957      	ldr	r1, [pc, #348]	; (400840 <cli_handle_command+0x264>)
  4006e2:	4620      	mov	r0, r4
  4006e4:	f003 f8ee 	bl	4038c4 <strcmp>
  4006e8:	b940      	cbnz	r0, 4006fc <cli_handle_command+0x120>
		config.motor_offset = atoi(parm);
  4006ea:	4628      	mov	r0, r5
  4006ec:	f002 fb0b 	bl	402d06 <atoi>
  4006f0:	4601      	mov	r1, r0
  4006f2:	4b49      	ldr	r3, [pc, #292]	; (400818 <cli_handle_command+0x23c>)
  4006f4:	6118      	str	r0, [r3, #16]
		printf("motor_offset: %d\r\n", config.motor_offset);
  4006f6:	4853      	ldr	r0, [pc, #332]	; (400844 <cli_handle_command+0x268>)
  4006f8:	f002 ffb8 	bl	40366c <iprintf>
	}

	if (strcmp(cmd, "motor_min") == 0) {
  4006fc:	4952      	ldr	r1, [pc, #328]	; (400848 <cli_handle_command+0x26c>)
  4006fe:	4620      	mov	r0, r4
  400700:	f003 f8e0 	bl	4038c4 <strcmp>
  400704:	b9c8      	cbnz	r0, 40073a <cli_handle_command+0x15e>
		printf("motor min command issued\r\n");
  400706:	4851      	ldr	r0, [pc, #324]	; (40084c <cli_handle_command+0x270>)
  400708:	f002 ffb0 	bl	40366c <iprintf>
		motor_min(motors[0]);
  40070c:	4e50      	ldr	r6, [pc, #320]	; (400850 <cli_handle_command+0x274>)
  40070e:	2744      	movs	r7, #68	; 0x44
  400710:	463a      	mov	r2, r7
  400712:	f106 0110 	add.w	r1, r6, #16
  400716:	4668      	mov	r0, sp
  400718:	f002 fb26 	bl	402d68 <memcpy>
  40071c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400720:	f000 ffe6 	bl	4016f0 <motor_min>
		motor_min(motors[1]);
  400724:	463a      	mov	r2, r7
  400726:	f106 0164 	add.w	r1, r6, #100	; 0x64
  40072a:	4668      	mov	r0, sp
  40072c:	f002 fb1c 	bl	402d68 <memcpy>
  400730:	3654      	adds	r6, #84	; 0x54
  400732:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400736:	f000 ffdb 	bl	4016f0 <motor_min>
	}

	if (strcmp(cmd, "motor_mid") == 0) {
  40073a:	4946      	ldr	r1, [pc, #280]	; (400854 <cli_handle_command+0x278>)
  40073c:	4620      	mov	r0, r4
  40073e:	f003 f8c1 	bl	4038c4 <strcmp>
  400742:	b9c8      	cbnz	r0, 400778 <cli_handle_command+0x19c>
		printf("motor mid command issued\r\n");
  400744:	4844      	ldr	r0, [pc, #272]	; (400858 <cli_handle_command+0x27c>)
  400746:	f002 ff91 	bl	40366c <iprintf>
		motor_mid(motors[0]);
  40074a:	4e41      	ldr	r6, [pc, #260]	; (400850 <cli_handle_command+0x274>)
  40074c:	2744      	movs	r7, #68	; 0x44
  40074e:	463a      	mov	r2, r7
  400750:	f106 0110 	add.w	r1, r6, #16
  400754:	4668      	mov	r0, sp
  400756:	f002 fb07 	bl	402d68 <memcpy>
  40075a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40075e:	f000 ffe3 	bl	401728 <motor_mid>
		motor_mid(motors[1]);
  400762:	463a      	mov	r2, r7
  400764:	f106 0164 	add.w	r1, r6, #100	; 0x64
  400768:	4668      	mov	r0, sp
  40076a:	f002 fafd 	bl	402d68 <memcpy>
  40076e:	3654      	adds	r6, #84	; 0x54
  400770:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400774:	f000 ffd8 	bl	401728 <motor_mid>
	}

	if (strcmp(cmd, "motor_max") == 0) {
  400778:	4938      	ldr	r1, [pc, #224]	; (40085c <cli_handle_command+0x280>)
  40077a:	4620      	mov	r0, r4
  40077c:	f003 f8a2 	bl	4038c4 <strcmp>
  400780:	b9c8      	cbnz	r0, 4007b6 <cli_handle_command+0x1da>
		printf("motor max command issued\r\n");
  400782:	4837      	ldr	r0, [pc, #220]	; (400860 <cli_handle_command+0x284>)
  400784:	f002 ff72 	bl	40366c <iprintf>
		motor_max(motors[0]);
  400788:	4e31      	ldr	r6, [pc, #196]	; (400850 <cli_handle_command+0x274>)
  40078a:	2744      	movs	r7, #68	; 0x44
  40078c:	463a      	mov	r2, r7
  40078e:	f106 0110 	add.w	r1, r6, #16
  400792:	4668      	mov	r0, sp
  400794:	f002 fae8 	bl	402d68 <memcpy>
  400798:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40079c:	f000 ffe0 	bl	401760 <motor_max>
		motor_max(motors[1]);
  4007a0:	463a      	mov	r2, r7
  4007a2:	f106 0164 	add.w	r1, r6, #100	; 0x64
  4007a6:	4668      	mov	r0, sp
  4007a8:	f002 fade 	bl	402d68 <memcpy>
  4007ac:	3654      	adds	r6, #84	; 0x54
  4007ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  4007b2:	f000 ffd5 	bl	401760 <motor_max>
	} 

	/*
	 * 	Log settings
	 */	
	if (strcmp(cmd, "log_imu") == 0) {
  4007b6:	492b      	ldr	r1, [pc, #172]	; (400864 <cli_handle_command+0x288>)
  4007b8:	4620      	mov	r0, r4
  4007ba:	f003 f883 	bl	4038c4 <strcmp>
  4007be:	b958      	cbnz	r0, 4007d8 <cli_handle_command+0x1fc>
		config.log_imu = atoi(parm);
  4007c0:	4628      	mov	r0, r5
  4007c2:	f002 faa0 	bl	402d06 <atoi>
  4007c6:	1c01      	adds	r1, r0, #0
  4007c8:	bf18      	it	ne
  4007ca:	2101      	movne	r1, #1
  4007cc:	4b12      	ldr	r3, [pc, #72]	; (400818 <cli_handle_command+0x23c>)
  4007ce:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
		printf("log_imu: %d\r\n", config.log_imu);
  4007d2:	4825      	ldr	r0, [pc, #148]	; (400868 <cli_handle_command+0x28c>)
  4007d4:	f002 ff4a 	bl	40366c <iprintf>
	}

	if (strcmp(cmd, "log_motor") == 0) {
  4007d8:	4924      	ldr	r1, [pc, #144]	; (40086c <cli_handle_command+0x290>)
  4007da:	4620      	mov	r0, r4
  4007dc:	f003 f872 	bl	4038c4 <strcmp>
  4007e0:	b958      	cbnz	r0, 4007fa <cli_handle_command+0x21e>
		config.log_motor = atoi(parm);
  4007e2:	4628      	mov	r0, r5
  4007e4:	f002 fa8f 	bl	402d06 <atoi>
  4007e8:	1c01      	adds	r1, r0, #0
  4007ea:	bf18      	it	ne
  4007ec:	2101      	movne	r1, #1
  4007ee:	4b0a      	ldr	r3, [pc, #40]	; (400818 <cli_handle_command+0x23c>)
  4007f0:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
		printf("log_motor: %d\r\n", config.log_motor);
  4007f4:	481e      	ldr	r0, [pc, #120]	; (400870 <cli_handle_command+0x294>)
  4007f6:	f002 ff39 	bl	40366c <iprintf>
	}	
}
  4007fa:	b013      	add	sp, #76	; 0x4c
  4007fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4007fe:	bf00      	nop
  400800:	00407df8 	.word	0x00407df8
  400804:	20000850 	.word	0x20000850
  400808:	00407dfc 	.word	0x00407dfc
  40080c:	00407e18 	.word	0x00407e18
  400810:	00407e1c 	.word	0x00407e1c
  400814:	00407e38 	.word	0x00407e38
  400818:	200006e4 	.word	0x200006e4
  40081c:	00407e3c 	.word	0x00407e3c
  400820:	00407e50 	.word	0x00407e50
  400824:	00407e54 	.word	0x00407e54
  400828:	00407e68 	.word	0x00407e68
  40082c:	00407e6c 	.word	0x00407e6c
  400830:	00407e80 	.word	0x00407e80
  400834:	00407e90 	.word	0x00407e90
  400838:	00407ea4 	.word	0x00407ea4
  40083c:	00407db8 	.word	0x00407db8
  400840:	00407eb0 	.word	0x00407eb0
  400844:	00407ec0 	.word	0x00407ec0
  400848:	00407ed4 	.word	0x00407ed4
  40084c:	00407ee0 	.word	0x00407ee0
  400850:	20000534 	.word	0x20000534
  400854:	00407efc 	.word	0x00407efc
  400858:	00407f08 	.word	0x00407f08
  40085c:	00407f24 	.word	0x00407f24
  400860:	00407f30 	.word	0x00407f30
  400864:	00407f4c 	.word	0x00407f4c
  400868:	00407f54 	.word	0x00407f54
  40086c:	00407f64 	.word	0x00407f64
  400870:	00407f70 	.word	0x00407f70

00400874 <cli_put_char>:
	return false;
}

void cli_put_char(unsigned char c)
{
	int i = (unsigned int)(cli_buffer.head + 1) % CLI_RX_BUFFER_SIZE;
  400874:	4a07      	ldr	r2, [pc, #28]	; (400894 <cli_put_char+0x20>)
  400876:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  40087a:	1c4b      	adds	r3, r1, #1
  40087c:	f3c3 0308 	ubfx	r3, r3, #0, #9

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != cli_buffer.tail) {
  400880:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  400884:	4293      	cmp	r3, r2
  400886:	d003      	beq.n	400890 <cli_put_char+0x1c>
		cli_buffer.buffer[cli_buffer.head] = c;
  400888:	4a02      	ldr	r2, [pc, #8]	; (400894 <cli_put_char+0x20>)
  40088a:	5450      	strb	r0, [r2, r1]
		cli_buffer.head = i;
  40088c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  400890:	4770      	bx	lr
  400892:	bf00      	nop
  400894:	2000020c 	.word	0x2000020c

00400898 <cli_read_device>:
{
	memset(cli_lines, '\0', sizeof(cli_lines));
}

void cli_read_device(void)
{
  400898:	b500      	push	{lr}
  40089a:	b083      	sub	sp, #12
    uint8_t uc_char;
	uint8_t uc_flag;

	if (uart_is_rx_ready(CONSOLE_UART)) {
  40089c:	4808      	ldr	r0, [pc, #32]	; (4008c0 <cli_read_device+0x28>)
  40089e:	f001 fc45 	bl	40212c <uart_is_rx_ready>
  4008a2:	b150      	cbz	r0, 4008ba <cli_read_device+0x22>
		uc_flag = uart_read(CONSOLE_UART, &uc_char);
  4008a4:	f10d 0107 	add.w	r1, sp, #7
  4008a8:	4805      	ldr	r0, [pc, #20]	; (4008c0 <cli_read_device+0x28>)
  4008aa:	f001 fc4b 	bl	402144 <uart_read>
		if (!uc_flag) {
  4008ae:	b2c0      	uxtb	r0, r0
  4008b0:	b918      	cbnz	r0, 4008ba <cli_read_device+0x22>
			cli_put_char(uc_char);
  4008b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4008b6:	f7ff ffdd 	bl	400874 <cli_put_char>
		}
	}
}
  4008ba:	b003      	add	sp, #12
  4008bc:	f85d fb04 	ldr.w	pc, [sp], #4
  4008c0:	400e0800 	.word	0x400e0800

004008c4 <cli_data_available>:
}

uint8_t cli_data_available()
{

	return (uint8_t)(CLI_RX_BUFFER_SIZE + cli_buffer.head - cli_buffer.tail) % CLI_RX_BUFFER_SIZE;
  4008c4:	4a03      	ldr	r2, [pc, #12]	; (4008d4 <cli_data_available+0x10>)
  4008c6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
  4008ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
  4008ce:	1a18      	subs	r0, r3, r0
}
  4008d0:	b2c0      	uxtb	r0, r0
  4008d2:	4770      	bx	lr
  4008d4:	2000020c 	.word	0x2000020c

004008d8 <cli_data_read>:

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
  4008d8:	4a08      	ldr	r2, [pc, #32]	; (4008fc <cli_data_read+0x24>)
  4008da:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
  4008de:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
  4008e2:	429a      	cmp	r2, r3
  4008e4:	d007      	beq.n	4008f6 <cli_data_read+0x1e>
		return -1;
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
  4008e6:	4a05      	ldr	r2, [pc, #20]	; (4008fc <cli_data_read+0x24>)
  4008e8:	5cd0      	ldrb	r0, [r2, r3]
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
  4008ea:	3301      	adds	r3, #1
  4008ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4008f0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		return c;
  4008f4:	4770      	bx	lr

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
		return -1;
  4008f6:	20ff      	movs	r0, #255	; 0xff
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
		return c;
	}
  4008f8:	4770      	bx	lr
  4008fa:	bf00      	nop
  4008fc:	2000020c 	.word	0x2000020c

00400900 <handle_data>:
	}	
}

// check to see if we have a new line
bool handle_data()
{
  400900:	b508      	push	{r3, lr}

	char c = cli_data_read();
  400902:	f7ff ffe9 	bl	4008d8 <cli_data_read>

	// ignore null terminated strings
	if(c == '\0') return false;
  400906:	b190      	cbz	r0, 40092e <handle_data+0x2e>
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  400908:	4b0c      	ldr	r3, [pc, #48]	; (40093c <handle_data+0x3c>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	2b7f      	cmp	r3, #127	; 0x7f
  40090e:	dc10      	bgt.n	400932 <handle_data+0x32>

	// store character in cli_line_buffer
	cli_line_buffer[cli_line_index] = c;
  400910:	490b      	ldr	r1, [pc, #44]	; (400940 <handle_data+0x40>)
  400912:	54c8      	strb	r0, [r1, r3]
	cli_line_index++;
  400914:	3301      	adds	r3, #1
  400916:	4909      	ldr	r1, [pc, #36]	; (40093c <handle_data+0x3c>)
  400918:	600b      	str	r3, [r1, #0]

	// check for end of line
	if(c == CLI_TKEND) {
  40091a:	280d      	cmp	r0, #13
  40091c:	d10b      	bne.n	400936 <handle_data+0x36>
		// copy new message into buffer
		strcpy(cli_lines, cli_line_buffer);
  40091e:	4908      	ldr	r1, [pc, #32]	; (400940 <handle_data+0x40>)
  400920:	4808      	ldr	r0, [pc, #32]	; (400944 <handle_data+0x44>)
  400922:	f002 ffd9 	bl	4038d8 <strcpy>
		init_buffer();
  400926:	f7ff fe3b 	bl	4005a0 <init_buffer>
		return true;
  40092a:	2001      	movs	r0, #1
  40092c:	bd08      	pop	{r3, pc}
{

	char c = cli_data_read();

	// ignore null terminated strings
	if(c == '\0') return false;
  40092e:	2000      	movs	r0, #0
  400930:	bd08      	pop	{r3, pc}
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  400932:	2000      	movs	r0, #0
  400934:	bd08      	pop	{r3, pc}
		strcpy(cli_lines, cli_line_buffer);
		init_buffer();
		return true;
	}

	return false;
  400936:	2000      	movs	r0, #0
}
  400938:	bd08      	pop	{r3, pc}
  40093a:	bf00      	nop
  40093c:	20000414 	.word	0x20000414
  400940:	2000070c 	.word	0x2000070c
  400944:	20000790 	.word	0x20000790

00400948 <cli_tick>:
		}
	}
}

void cli_tick()
{
  400948:	b530      	push	{r4, r5, lr}
  40094a:	b083      	sub	sp, #12
	// read the serial port
	cli_read_device();
  40094c:	f7ff ffa4 	bl	400898 <cli_read_device>

	if (cli_data_available()) {
  400950:	f7ff ffb8 	bl	4008c4 <cli_data_available>
  400954:	b1a8      	cbz	r0, 400982 <cli_tick+0x3a>
		if (handle_data()) {
  400956:	f7ff ffd3 	bl	400900 <handle_data>
  40095a:	b190      	cbz	r0, 400982 <cli_tick+0x3a>
			//config_test();

			char *saveptr;
			char *cmd, *parm;

			cmd = strtok_r(cli_lines, CLI_DELIM, &saveptr);
  40095c:	4c0a      	ldr	r4, [pc, #40]	; (400988 <cli_tick+0x40>)
  40095e:	aa01      	add	r2, sp, #4
  400960:	4621      	mov	r1, r4
  400962:	480a      	ldr	r0, [pc, #40]	; (40098c <cli_tick+0x44>)
  400964:	f003 fe1d 	bl	4045a2 <strtok_r>
  400968:	4605      	mov	r5, r0
			parm = strtok_r(NULL, CLI_DELIM, &saveptr);
  40096a:	aa01      	add	r2, sp, #4
  40096c:	4621      	mov	r1, r4
  40096e:	2000      	movs	r0, #0
  400970:	f003 fe17 	bl	4045a2 <strtok_r>

			// printf("cmd=%s\r\n", cmd);
			// printf("parm=%s\r\n", parm);

			if (parm != NULL)
  400974:	4601      	mov	r1, r0
  400976:	b110      	cbz	r0, 40097e <cli_tick+0x36>
				cli_handle_command(cmd, parm);
  400978:	4628      	mov	r0, r5
  40097a:	f7ff fe2f 	bl	4005dc <cli_handle_command>


			// reset cli_lines
			init_lines();
  40097e:	f7ff fe1d 	bl	4005bc <init_lines>

		}
	}

}
  400982:	b003      	add	sp, #12
  400984:	bd30      	pop	{r4, r5, pc}
  400986:	bf00      	nop
  400988:	00407f80 	.word	0x00407f80
  40098c:	20000790 	.word	0x20000790

00400990 <write_register8>:
int16_t read_register16(uint8_t address, uint8_t reg);
uint8_t read_bytes(uint8_t address, uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t address, uint8_t reg, uint8_t value)
{
  400990:	b500      	push	{lr}
  400992:	b089      	sub	sp, #36	; 0x24
  400994:	f88d 2007 	strb.w	r2, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = address;
  400998:	f88d 001c 	strb.w	r0, [sp, #28]
    packet_tx.addr[0] = reg;
  40099c:	f88d 100c 	strb.w	r1, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  4009a0:	2301      	movs	r3, #1
  4009a2:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  4009a4:	f10d 0207 	add.w	r2, sp, #7
  4009a8:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  4009aa:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4009ac:	a903      	add	r1, sp, #12
  4009ae:	4804      	ldr	r0, [pc, #16]	; (4009c0 <write_register8+0x30>)
  4009b0:	f001 f8f0 	bl	401b94 <twi_master_write>
    
    // if (status == TWI_SUCCESS) {
    //     puts("write_register: success\r\n");
    // }

    delay_ms(TWI_WAIT_TIME);
  4009b4:	4803      	ldr	r0, [pc, #12]	; (4009c4 <write_register8+0x34>)
  4009b6:	f007 fda7 	bl	408508 <__portable_delay_cycles_veneer>
}
  4009ba:	b009      	add	sp, #36	; 0x24
  4009bc:	f85d fb04 	ldr.w	pc, [sp], #4
  4009c0:	40018000 	.word	0x40018000
  4009c4:	00014ed3 	.word	0x00014ed3

004009c8 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t address, uint8_t reg)
{
  4009c8:	b510      	push	{r4, lr}
  4009ca:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4009cc:	4b0e      	ldr	r3, [pc, #56]	; (400a08 <read_register8+0x40>)
  4009ce:	2200      	movs	r2, #0
  4009d0:	601a      	str	r2, [r3, #0]
  4009d2:	605a      	str	r2, [r3, #4]
  4009d4:	609a      	str	r2, [r3, #8]
  4009d6:	60da      	str	r2, [r3, #12]

    packet_rx.chip = address;
  4009d8:	f88d 0014 	strb.w	r0, [sp, #20]
    packet_rx.addr[0] = reg;
  4009dc:	f88d 1004 	strb.w	r1, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4009e0:	2201      	movs	r2, #1
  4009e2:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  4009e4:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4009e6:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4009e8:	a901      	add	r1, sp, #4
  4009ea:	4808      	ldr	r0, [pc, #32]	; (400a0c <read_register8+0x44>)
  4009ec:	f001 f86a 	bl	401ac4 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4009f0:	b910      	cbnz	r0, 4009f8 <read_register8+0x30>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  4009f2:	4b05      	ldr	r3, [pc, #20]	; (400a08 <read_register8+0x40>)
  4009f4:	781c      	ldrb	r4, [r3, #0]
  4009f6:	e000      	b.n	4009fa <read_register8+0x32>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t address, uint8_t reg)
{
    uint8_t value = 0;
  4009f8:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  4009fa:	4805      	ldr	r0, [pc, #20]	; (400a10 <read_register8+0x48>)
  4009fc:	f007 fd84 	bl	408508 <__portable_delay_cycles_veneer>

    return value;
}
  400a00:	4620      	mov	r0, r4
  400a02:	b006      	add	sp, #24
  400a04:	bd10      	pop	{r4, pc}
  400a06:	bf00      	nop
  400a08:	20000418 	.word	0x20000418
  400a0c:	40018000 	.word	0x40018000
  400a10:	00014ed3 	.word	0x00014ed3

00400a14 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t address, uint8_t reg, int8_t length, uint8_t *data)
{
  400a14:	b530      	push	{r4, r5, lr}
  400a16:	b087      	sub	sp, #28
  400a18:	4615      	mov	r5, r2
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400a1a:	4a0c      	ldr	r2, [pc, #48]	; (400a4c <read_bytes+0x38>)
  400a1c:	2400      	movs	r4, #0
  400a1e:	6014      	str	r4, [r2, #0]
  400a20:	6054      	str	r4, [r2, #4]
  400a22:	6094      	str	r4, [r2, #8]
  400a24:	60d4      	str	r4, [r2, #12]

    packet_rx.chip = address;
  400a26:	f88d 0014 	strb.w	r0, [sp, #20]
    packet_rx.addr[0] = reg;
  400a2a:	f88d 1004 	strb.w	r1, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400a2e:	2201      	movs	r2, #1
  400a30:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = data;
  400a32:	9303      	str	r3, [sp, #12]
    packet_rx.length = length;
  400a34:	9504      	str	r5, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400a36:	a901      	add	r1, sp, #4
  400a38:	4805      	ldr	r0, [pc, #20]	; (400a50 <read_bytes+0x3c>)
  400a3a:	f001 f843 	bl	401ac4 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400a3e:	4805      	ldr	r0, [pc, #20]	; (400a54 <read_bytes+0x40>)
  400a40:	f007 fd62 	bl	408508 <__portable_delay_cycles_veneer>

    return length;
}
  400a44:	b2e8      	uxtb	r0, r5
  400a46:	b007      	add	sp, #28
  400a48:	bd30      	pop	{r4, r5, pc}
  400a4a:	bf00      	nop
  400a4c:	20000418 	.word	0x20000418
  400a50:	40018000 	.word	0x40018000
  400a54:	00014ed3 	.word	0x00014ed3

00400a58 <write_register_bit>:


void write_register_bit(uint8_t address, uint8_t reg, uint8_t pos, bool state)
{
  400a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a5a:	4604      	mov	r4, r0
  400a5c:	460d      	mov	r5, r1
  400a5e:	4616      	mov	r6, r2
  400a60:	461f      	mov	r7, r3
    uint8_t value;
    value = read_register8(address, reg);
  400a62:	f7ff ffb1 	bl	4009c8 <read_register8>

    if (state) {
  400a66:	b127      	cbz	r7, 400a72 <write_register_bit+0x1a>
        value |= (1 << pos);
  400a68:	2201      	movs	r2, #1
  400a6a:	40b2      	lsls	r2, r6
  400a6c:	4302      	orrs	r2, r0
  400a6e:	b2d2      	uxtb	r2, r2
  400a70:	e004      	b.n	400a7c <write_register_bit+0x24>
    } else {
        value &= ~(1 << pos);
  400a72:	2201      	movs	r2, #1
  400a74:	40b2      	lsls	r2, r6
  400a76:	ea20 0202 	bic.w	r2, r0, r2
  400a7a:	b2d2      	uxtb	r2, r2
    }

    write_register8(address, reg, value);
  400a7c:	4629      	mov	r1, r5
  400a7e:	4620      	mov	r0, r4
  400a80:	f7ff ff86 	bl	400990 <write_register8>
  400a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a86:	bf00      	nop

00400a88 <read_register_bit>:
}

bool read_register_bit(uint8_t address, uint8_t reg, uint8_t pos)
{
  400a88:	b510      	push	{r4, lr}
  400a8a:	4614      	mov	r4, r2
    uint8_t value;
    value = read_register8(address, reg);
  400a8c:	f7ff ff9c 	bl	4009c8 <read_register8>
    return ((value >> pos) & 1);
  400a90:	4120      	asrs	r0, r4
}
  400a92:	f000 0001 	and.w	r0, r0, #1
  400a96:	bd10      	pop	{r4, pc}

00400a98 <mpu_init>:

bool mpu_init(void)
{
  400a98:	b500      	push	{lr}
  400a9a:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400a9c:	4b0d      	ldr	r3, [pc, #52]	; (400ad4 <mpu_init+0x3c>)
  400a9e:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400aa0:	4b0d      	ldr	r3, [pc, #52]	; (400ad8 <mpu_init+0x40>)
  400aa2:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400aa4:	a901      	add	r1, sp, #4
  400aa6:	480d      	ldr	r0, [pc, #52]	; (400adc <mpu_init+0x44>)
  400aa8:	f000 ffdc 	bl	401a64 <twi_master_init>
  400aac:	b138      	cbz	r0, 400abe <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  400aae:	480c      	ldr	r0, [pc, #48]	; (400ae0 <mpu_init+0x48>)
  400ab0:	f002 fe4e 	bl	403750 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400ab4:	480b      	ldr	r0, [pc, #44]	; (400ae4 <mpu_init+0x4c>)
  400ab6:	f007 fd27 	bl	408508 <__portable_delay_cycles_veneer>
        return false;
  400aba:	2000      	movs	r0, #0
  400abc:	e006      	b.n	400acc <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  400abe:	480a      	ldr	r0, [pc, #40]	; (400ae8 <mpu_init+0x50>)
  400ac0:	f002 fe46 	bl	403750 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400ac4:	4807      	ldr	r0, [pc, #28]	; (400ae4 <mpu_init+0x4c>)
  400ac6:	f007 fd1f 	bl	408508 <__portable_delay_cycles_veneer>
        return true;
  400aca:	2001      	movs	r0, #1
    }
    
}
  400acc:	b005      	add	sp, #20
  400ace:	f85d fb04 	ldr.w	pc, [sp], #4
  400ad2:	bf00      	nop
  400ad4:	07270e00 	.word	0x07270e00
  400ad8:	00061a80 	.word	0x00061a80
  400adc:	40018000 	.word	0x40018000
  400ae0:	00407f84 	.word	0x00407f84
  400ae4:	00014ed3 	.word	0x00014ed3
  400ae8:	00407fa0 	.word	0x00407fa0

00400aec <mpu_probe>:

bool mpu_probe(void)
{
  400aec:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  400aee:	2168      	movs	r1, #104	; 0x68
  400af0:	4809      	ldr	r0, [pc, #36]	; (400b18 <mpu_probe+0x2c>)
  400af2:	f001 f891 	bl	401c18 <twi_probe>
  400af6:	b138      	cbz	r0, 400b08 <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  400af8:	4808      	ldr	r0, [pc, #32]	; (400b1c <mpu_probe+0x30>)
  400afa:	f002 fe29 	bl	403750 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400afe:	4808      	ldr	r0, [pc, #32]	; (400b20 <mpu_probe+0x34>)
  400b00:	f007 fd02 	bl	408508 <__portable_delay_cycles_veneer>
        return false;
  400b04:	2000      	movs	r0, #0
  400b06:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400b08:	4806      	ldr	r0, [pc, #24]	; (400b24 <mpu_probe+0x38>)
  400b0a:	f002 fe21 	bl	403750 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400b0e:	4804      	ldr	r0, [pc, #16]	; (400b20 <mpu_probe+0x34>)
  400b10:	f007 fcfa 	bl	408508 <__portable_delay_cycles_veneer>
        return true;
  400b14:	2001      	movs	r0, #1
    }
}
  400b16:	bd08      	pop	{r3, pc}
  400b18:	40018000 	.word	0x40018000
  400b1c:	00407fbc 	.word	0x00407fbc
  400b20:	00014ed3 	.word	0x00014ed3
  400b24:	00407fd0 	.word	0x00407fd0

00400b28 <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  400b28:	b508      	push	{r3, lr}
    uint8_t value = read_register8(IMU_ADDRESS, MPU6050_RA_WHO_AM_I);
  400b2a:	2175      	movs	r1, #117	; 0x75
  400b2c:	2068      	movs	r0, #104	; 0x68
  400b2e:	f7ff ff4b 	bl	4009c8 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400b32:	bd08      	pop	{r3, pc}

00400b34 <mpu_set_clock_source>:
    T = read_register16(IMU_ADDRESS, MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400b34:	b510      	push	{r4, lr}
  400b36:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1);
  400b38:	216b      	movs	r1, #107	; 0x6b
  400b3a:	2068      	movs	r0, #104	; 0x68
  400b3c:	f7ff ff44 	bl	4009c8 <read_register8>
    value &= 0b11111000; // mask
  400b40:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    value |= source;

    write_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, value);
  400b44:	4322      	orrs	r2, r4
  400b46:	216b      	movs	r1, #107	; 0x6b
  400b48:	2068      	movs	r0, #104	; 0x68
  400b4a:	f7ff ff21 	bl	400990 <write_register8>
  400b4e:	bd10      	pop	{r4, pc}

00400b50 <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  400b50:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1);
  400b52:	216b      	movs	r1, #107	; 0x6b
  400b54:	2068      	movs	r0, #104	; 0x68
  400b56:	f7ff ff37 	bl	4009c8 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400b5a:	f000 0007 	and.w	r0, r0, #7
  400b5e:	bd08      	pop	{r3, pc}

00400b60 <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  400b60:	b510      	push	{r4, lr}
  400b62:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400b64:	2803      	cmp	r0, #3
  400b66:	d812      	bhi.n	400b8e <mpu_set_gyro_scale+0x2e>
  400b68:	e8df f000 	tbb	[pc, r0]
  400b6c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400b70:	4a0e      	ldr	r2, [pc, #56]	; (400bac <mpu_set_gyro_scale+0x4c>)
  400b72:	4b0f      	ldr	r3, [pc, #60]	; (400bb0 <mpu_set_gyro_scale+0x50>)
  400b74:	601a      	str	r2, [r3, #0]
            break;
  400b76:	e00a      	b.n	400b8e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400b78:	4a0e      	ldr	r2, [pc, #56]	; (400bb4 <mpu_set_gyro_scale+0x54>)
  400b7a:	4b0d      	ldr	r3, [pc, #52]	; (400bb0 <mpu_set_gyro_scale+0x50>)
  400b7c:	601a      	str	r2, [r3, #0]
            break;
  400b7e:	e006      	b.n	400b8e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400b80:	4a0d      	ldr	r2, [pc, #52]	; (400bb8 <mpu_set_gyro_scale+0x58>)
  400b82:	4b0b      	ldr	r3, [pc, #44]	; (400bb0 <mpu_set_gyro_scale+0x50>)
  400b84:	601a      	str	r2, [r3, #0]
            break;
  400b86:	e002      	b.n	400b8e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400b88:	4a0c      	ldr	r2, [pc, #48]	; (400bbc <mpu_set_gyro_scale+0x5c>)
  400b8a:	4b09      	ldr	r3, [pc, #36]	; (400bb0 <mpu_set_gyro_scale+0x50>)
  400b8c:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG);
  400b8e:	211b      	movs	r1, #27
  400b90:	2068      	movs	r0, #104	; 0x68
  400b92:	f7ff ff19 	bl	4009c8 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400b96:	f020 0018 	bic.w	r0, r0, #24
  400b9a:	ea40 02c4 	orr.w	r2, r0, r4, lsl #3

    write_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG, value);
  400b9e:	b2d2      	uxtb	r2, r2
  400ba0:	211b      	movs	r1, #27
  400ba2:	2068      	movs	r0, #104	; 0x68
  400ba4:	f7ff fef4 	bl	400990 <write_register8>
  400ba8:	bd10      	pop	{r4, pc}
  400baa:	bf00      	nop
  400bac:	3bfa1e3f 	.word	0x3bfa1e3f
  400bb0:	20000438 	.word	0x20000438
  400bb4:	3c7a2270 	.word	0x3c7a2270
  400bb8:	3cf9bfdf 	.word	0x3cf9bfdf
  400bbc:	3d79c0ec 	.word	0x3d79c0ec

00400bc0 <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  400bc0:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(IMU_ADDRESS, MPU6050_RA_GYRO_CONFIG);
  400bc2:	211b      	movs	r1, #27
  400bc4:	2068      	movs	r0, #104	; 0x68
  400bc6:	f7ff feff 	bl	4009c8 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  400bca:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  400bce:	bd08      	pop	{r3, pc}

00400bd0 <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  400bd0:	b510      	push	{r4, lr}
  400bd2:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  400bd4:	2803      	cmp	r0, #3
  400bd6:	d812      	bhi.n	400bfe <mpu_set_accel_range+0x2e>
  400bd8:	e8df f000 	tbb	[pc, r0]
  400bdc:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  400be0:	4a0e      	ldr	r2, [pc, #56]	; (400c1c <mpu_set_accel_range+0x4c>)
  400be2:	4b0f      	ldr	r3, [pc, #60]	; (400c20 <mpu_set_accel_range+0x50>)
  400be4:	601a      	str	r2, [r3, #0]
            break;
  400be6:	e00a      	b.n	400bfe <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  400be8:	4a0e      	ldr	r2, [pc, #56]	; (400c24 <mpu_set_accel_range+0x54>)
  400bea:	4b0d      	ldr	r3, [pc, #52]	; (400c20 <mpu_set_accel_range+0x50>)
  400bec:	601a      	str	r2, [r3, #0]
            break;   
  400bee:	e006      	b.n	400bfe <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  400bf0:	4a0d      	ldr	r2, [pc, #52]	; (400c28 <mpu_set_accel_range+0x58>)
  400bf2:	4b0b      	ldr	r3, [pc, #44]	; (400c20 <mpu_set_accel_range+0x50>)
  400bf4:	601a      	str	r2, [r3, #0]
            break;   
  400bf6:	e002      	b.n	400bfe <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400bf8:	4a0c      	ldr	r2, [pc, #48]	; (400c2c <mpu_set_accel_range+0x5c>)
  400bfa:	4b09      	ldr	r3, [pc, #36]	; (400c20 <mpu_set_accel_range+0x50>)
  400bfc:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(IMU_ADDRESS, MPU6050_RA_ACCEL_CONFIG);
  400bfe:	211c      	movs	r1, #28
  400c00:	2068      	movs	r0, #104	; 0x68
  400c02:	f7ff fee1 	bl	4009c8 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400c06:	f020 0018 	bic.w	r0, r0, #24
  400c0a:	ea40 02c4 	orr.w	r2, r0, r4, lsl #3

    write_register8(IMU_ADDRESS, MPU6050_RA_ACCEL_CONFIG, value);
  400c0e:	b2d2      	uxtb	r2, r2
  400c10:	211c      	movs	r1, #28
  400c12:	2068      	movs	r0, #104	; 0x68
  400c14:	f7ff febc 	bl	400990 <write_register8>
  400c18:	bd10      	pop	{r4, pc}
  400c1a:	bf00      	nop
  400c1c:	387fda40 	.word	0x387fda40
  400c20:	20000428 	.word	0x20000428
  400c24:	38ffda40 	.word	0x38ffda40
  400c28:	397fda40 	.word	0x397fda40
  400c2c:	39fff518 	.word	0x39fff518

00400c30 <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400c30:	b508      	push	{r3, lr}
    write_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6, state);
  400c32:	4603      	mov	r3, r0
  400c34:	2206      	movs	r2, #6
  400c36:	216b      	movs	r1, #107	; 0x6b
  400c38:	2068      	movs	r0, #104	; 0x68
  400c3a:	f7ff ff0d 	bl	400a58 <write_register_bit>
  400c3e:	bd08      	pop	{r3, pc}

00400c40 <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400c40:	b538      	push	{r3, r4, r5, lr}
  400c42:	4605      	mov	r5, r0
  400c44:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  400c46:	4a11      	ldr	r2, [pc, #68]	; (400c8c <mpu_begin+0x4c>)
  400c48:	2300      	movs	r3, #0
  400c4a:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400c4c:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400c4e:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400c50:	2100      	movs	r1, #0
  400c52:	4a0f      	ldr	r2, [pc, #60]	; (400c90 <mpu_begin+0x50>)
  400c54:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  400c56:	4a0f      	ldr	r2, [pc, #60]	; (400c94 <mpu_begin+0x54>)
  400c58:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400c5a:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400c5c:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400c5e:	4a0e      	ldr	r2, [pc, #56]	; (400c98 <mpu_begin+0x58>)
  400c60:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  400c62:	f7ff ff61 	bl	400b28 <mpu_who_am_i>
  400c66:	2868      	cmp	r0, #104	; 0x68
  400c68:	d10d      	bne.n	400c86 <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400c6a:	2001      	movs	r0, #1
  400c6c:	f7ff ff62 	bl	400b34 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400c70:	4628      	mov	r0, r5
  400c72:	f7ff ff75 	bl	400b60 <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  400c76:	4620      	mov	r0, r4
  400c78:	f7ff ffaa 	bl	400bd0 <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400c7c:	2000      	movs	r0, #0
  400c7e:	f7ff ffd7 	bl	400c30 <mpu_set_sleep_enabled>

    return true;
  400c82:	2001      	movs	r0, #1
  400c84:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  400c86:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400c88:	bd38      	pop	{r3, r4, r5, pc}
  400c8a:	bf00      	nop
  400c8c:	200006c4 	.word	0x200006c4
  400c90:	2000043c 	.word	0x2000043c
  400c94:	20000684 	.word	0x20000684
  400c98:	20000444 	.word	0x20000444

00400c9c <mpu_get_sleep_enabled>:
{
    write_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400c9c:	b508      	push	{r3, lr}
    return read_register_bit(IMU_ADDRESS, MPU6050_RA_PWR_MGMT_1, 6);
  400c9e:	2206      	movs	r2, #6
  400ca0:	216b      	movs	r1, #107	; 0x6b
  400ca2:	2068      	movs	r0, #104	; 0x68
  400ca4:	f7ff fef0 	bl	400a88 <read_register_bit>
}
  400ca8:	bd08      	pop	{r3, pc}
  400caa:	bf00      	nop

00400cac <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  400cac:	b570      	push	{r4, r5, r6, lr}
  400cae:	b082      	sub	sp, #8
  400cb0:	4606      	mov	r6, r0
  400cb2:	460d      	mov	r5, r1
  400cb4:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400cb6:	2300      	movs	r3, #0
  400cb8:	9300      	str	r3, [sp, #0]
  400cba:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(IMU_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  400cbe:	466b      	mov	r3, sp
  400cc0:	2206      	movs	r2, #6
  400cc2:	2143      	movs	r1, #67	; 0x43
  400cc4:	2068      	movs	r0, #104	; 0x68
  400cc6:	f7ff fea5 	bl	400a14 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400cca:	f89d 2000 	ldrb.w	r2, [sp]
  400cce:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400cd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cd6:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400cd8:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400cdc:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400ce0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400ce4:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400ce6:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400cea:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cf2:	8023      	strh	r3, [r4, #0]

}
  400cf4:	b002      	add	sp, #8
  400cf6:	bd70      	pop	{r4, r5, r6, pc}

00400cf8 <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  400cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  400cfa:	4d0c      	ldr	r5, [pc, #48]	; (400d2c <mpu_read_raw_gyro+0x34>)
  400cfc:	4e0c      	ldr	r6, [pc, #48]	; (400d30 <mpu_read_raw_gyro+0x38>)
  400cfe:	4f0d      	ldr	r7, [pc, #52]	; (400d34 <mpu_read_raw_gyro+0x3c>)
  400d00:	462a      	mov	r2, r5
  400d02:	4631      	mov	r1, r6
  400d04:	4638      	mov	r0, r7
  400d06:	f7ff ffd1 	bl	400cac <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  400d0a:	4c0b      	ldr	r4, [pc, #44]	; (400d38 <mpu_read_raw_gyro+0x40>)
  400d0c:	f9b7 0000 	ldrsh.w	r0, [r7]
  400d10:	f006 fdd0 	bl	4078b4 <__aeabi_i2f>
  400d14:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  400d16:	f9b6 0000 	ldrsh.w	r0, [r6]
  400d1a:	f006 fdcb 	bl	4078b4 <__aeabi_i2f>
  400d1e:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400d20:	f9b5 0000 	ldrsh.w	r0, [r5]
  400d24:	f006 fdc6 	bl	4078b4 <__aeabi_i2f>
  400d28:	60a0      	str	r0, [r4, #8]
  400d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d2c:	200006b4 	.word	0x200006b4
  400d30:	2000051c 	.word	0x2000051c
  400d34:	200006d0 	.word	0x200006d0
  400d38:	20000510 	.word	0x20000510

00400d3c <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d40:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400d42:	f7ff ffd9 	bl	400cf8 <mpu_read_raw_gyro>

    if (use_calibrate) {
  400d46:	4b3d      	ldr	r3, [pc, #244]	; (400e3c <mpu_read_normalized_gyro+0x100>)
  400d48:	781b      	ldrb	r3, [r3, #0]
  400d4a:	b30b      	cbz	r3, 400d90 <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400d4c:	4b3c      	ldr	r3, [pc, #240]	; (400e40 <mpu_read_normalized_gyro+0x104>)
  400d4e:	681e      	ldr	r6, [r3, #0]
  400d50:	4d3c      	ldr	r5, [pc, #240]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400d52:	4f3d      	ldr	r7, [pc, #244]	; (400e48 <mpu_read_normalized_gyro+0x10c>)
  400d54:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400e54 <mpu_read_normalized_gyro+0x118>
  400d58:	f8d8 1000 	ldr.w	r1, [r8]
  400d5c:	6838      	ldr	r0, [r7, #0]
  400d5e:	f006 fcf3 	bl	407748 <__aeabi_fsub>
  400d62:	4631      	mov	r1, r6
  400d64:	f006 fdfa 	bl	40795c <__aeabi_fmul>
  400d68:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  400d6a:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400d6e:	6878      	ldr	r0, [r7, #4]
  400d70:	f006 fcea 	bl	407748 <__aeabi_fsub>
  400d74:	4631      	mov	r1, r6
  400d76:	f006 fdf1 	bl	40795c <__aeabi_fmul>
  400d7a:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400d7c:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400d80:	68b8      	ldr	r0, [r7, #8]
  400d82:	f006 fce1 	bl	407748 <__aeabi_fsub>
  400d86:	4631      	mov	r1, r6
  400d88:	f006 fde8 	bl	40795c <__aeabi_fmul>
  400d8c:	60a8      	str	r0, [r5, #8]
  400d8e:	e012      	b.n	400db6 <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400d90:	4b2b      	ldr	r3, [pc, #172]	; (400e40 <mpu_read_normalized_gyro+0x104>)
  400d92:	681f      	ldr	r7, [r3, #0]
  400d94:	4d2b      	ldr	r5, [pc, #172]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400d96:	4e2c      	ldr	r6, [pc, #176]	; (400e48 <mpu_read_normalized_gyro+0x10c>)
  400d98:	4639      	mov	r1, r7
  400d9a:	6830      	ldr	r0, [r6, #0]
  400d9c:	f006 fdde 	bl	40795c <__aeabi_fmul>
  400da0:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400da2:	4639      	mov	r1, r7
  400da4:	6870      	ldr	r0, [r6, #4]
  400da6:	f006 fdd9 	bl	40795c <__aeabi_fmul>
  400daa:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400dac:	4639      	mov	r1, r7
  400dae:	68b0      	ldr	r0, [r6, #8]
  400db0:	f006 fdd4 	bl	40795c <__aeabi_fmul>
  400db4:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  400db6:	2100      	movs	r1, #0
  400db8:	4b24      	ldr	r3, [pc, #144]	; (400e4c <mpu_read_normalized_gyro+0x110>)
  400dba:	6818      	ldr	r0, [r3, #0]
  400dbc:	f006 ff62 	bl	407c84 <__aeabi_fcmpeq>
  400dc0:	2800      	cmp	r0, #0
  400dc2:	d132      	bne.n	400e2a <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  400dc4:	4b1f      	ldr	r3, [pc, #124]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400dc6:	6818      	ldr	r0, [r3, #0]
  400dc8:	f006 ff8e 	bl	407ce8 <__aeabi_f2iz>
  400dcc:	2800      	cmp	r0, #0
  400dce:	bfb8      	it	lt
  400dd0:	4240      	neglt	r0, r0
  400dd2:	f006 fd6f 	bl	4078b4 <__aeabi_i2f>
  400dd6:	4b1e      	ldr	r3, [pc, #120]	; (400e50 <mpu_read_normalized_gyro+0x114>)
  400dd8:	6819      	ldr	r1, [r3, #0]
  400dda:	f006 ff5d 	bl	407c98 <__aeabi_fcmplt>
  400dde:	b110      	cbz	r0, 400de6 <mpu_read_normalized_gyro+0xaa>
  400de0:	2200      	movs	r2, #0
  400de2:	4b18      	ldr	r3, [pc, #96]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400de4:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  400de6:	4b17      	ldr	r3, [pc, #92]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400de8:	6858      	ldr	r0, [r3, #4]
  400dea:	f006 ff7d 	bl	407ce8 <__aeabi_f2iz>
  400dee:	2800      	cmp	r0, #0
  400df0:	bfb8      	it	lt
  400df2:	4240      	neglt	r0, r0
  400df4:	f006 fd5e 	bl	4078b4 <__aeabi_i2f>
  400df8:	4b15      	ldr	r3, [pc, #84]	; (400e50 <mpu_read_normalized_gyro+0x114>)
  400dfa:	6859      	ldr	r1, [r3, #4]
  400dfc:	f006 ff4c 	bl	407c98 <__aeabi_fcmplt>
  400e00:	b110      	cbz	r0, 400e08 <mpu_read_normalized_gyro+0xcc>
  400e02:	2200      	movs	r2, #0
  400e04:	4b0f      	ldr	r3, [pc, #60]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400e06:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400e08:	4b0e      	ldr	r3, [pc, #56]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400e0a:	6898      	ldr	r0, [r3, #8]
  400e0c:	f006 ff6c 	bl	407ce8 <__aeabi_f2iz>
  400e10:	2800      	cmp	r0, #0
  400e12:	bfb8      	it	lt
  400e14:	4240      	neglt	r0, r0
  400e16:	f006 fd4d 	bl	4078b4 <__aeabi_i2f>
  400e1a:	4b0d      	ldr	r3, [pc, #52]	; (400e50 <mpu_read_normalized_gyro+0x114>)
  400e1c:	6899      	ldr	r1, [r3, #8]
  400e1e:	f006 ff3b 	bl	407c98 <__aeabi_fcmplt>
  400e22:	b110      	cbz	r0, 400e2a <mpu_read_normalized_gyro+0xee>
  400e24:	2200      	movs	r2, #0
  400e26:	4b07      	ldr	r3, [pc, #28]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400e28:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  400e2a:	4b06      	ldr	r3, [pc, #24]	; (400e44 <mpu_read_normalized_gyro+0x108>)
  400e2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400e30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400e34:	4620      	mov	r0, r4
  400e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e3a:	bf00      	nop
  400e3c:	2000043c 	.word	0x2000043c
  400e40:	20000438 	.word	0x20000438
  400e44:	200006d8 	.word	0x200006d8
  400e48:	20000510 	.word	0x20000510
  400e4c:	20000444 	.word	0x20000444
  400e50:	20000684 	.word	0x20000684
  400e54:	200006c4 	.word	0x200006c4

00400e58 <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400e58:	b570      	push	{r4, r5, r6, lr}
  400e5a:	b082      	sub	sp, #8
  400e5c:	4606      	mov	r6, r0
  400e5e:	460d      	mov	r5, r1
  400e60:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400e62:	2300      	movs	r3, #0
  400e64:	9300      	str	r3, [sp, #0]
  400e66:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(IMU_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  400e6a:	466b      	mov	r3, sp
  400e6c:	2206      	movs	r2, #6
  400e6e:	213b      	movs	r1, #59	; 0x3b
  400e70:	2068      	movs	r0, #104	; 0x68
  400e72:	f7ff fdcf 	bl	400a14 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400e76:	f89d 2000 	ldrb.w	r2, [sp]
  400e7a:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400e7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e82:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400e84:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400e88:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e90:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400e92:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400e96:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400e9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e9e:	8023      	strh	r3, [r4, #0]
}
  400ea0:	b002      	add	sp, #8
  400ea2:	bd70      	pop	{r4, r5, r6, pc}

00400ea4 <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  400ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  400ea6:	4d0c      	ldr	r5, [pc, #48]	; (400ed8 <mpu_read_raw_acceleration+0x34>)
  400ea8:	4e0c      	ldr	r6, [pc, #48]	; (400edc <mpu_read_raw_acceleration+0x38>)
  400eaa:	4f0d      	ldr	r7, [pc, #52]	; (400ee0 <mpu_read_raw_acceleration+0x3c>)
  400eac:	462a      	mov	r2, r5
  400eae:	4631      	mov	r1, r6
  400eb0:	4638      	mov	r0, r7
  400eb2:	f7ff ffd1 	bl	400e58 <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  400eb6:	4c0b      	ldr	r4, [pc, #44]	; (400ee4 <mpu_read_raw_acceleration+0x40>)
  400eb8:	f9b7 0000 	ldrsh.w	r0, [r7]
  400ebc:	f006 fcfa 	bl	4078b4 <__aeabi_i2f>
  400ec0:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  400ec2:	f9b6 0000 	ldrsh.w	r0, [r6]
  400ec6:	f006 fcf5 	bl	4078b4 <__aeabi_i2f>
  400eca:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  400ecc:	f9b5 0000 	ldrsh.w	r0, [r5]
  400ed0:	f006 fcf0 	bl	4078b4 <__aeabi_i2f>
  400ed4:	60a0      	str	r0, [r4, #8]
  400ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ed8:	2000051e 	.word	0x2000051e
  400edc:	200006d2 	.word	0x200006d2
  400ee0:	20000530 	.word	0x20000530
  400ee4:	200006b8 	.word	0x200006b8

00400ee8 <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  400ee8:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  400eea:	f7ff ffdb 	bl	400ea4 <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  400eee:	4b0e      	ldr	r3, [pc, #56]	; (400f28 <mpu_read_normalized_acceleration+0x40>)
  400ef0:	681d      	ldr	r5, [r3, #0]
  400ef2:	4c0e      	ldr	r4, [pc, #56]	; (400f2c <mpu_read_normalized_acceleration+0x44>)
  400ef4:	4e0e      	ldr	r6, [pc, #56]	; (400f30 <mpu_read_normalized_acceleration+0x48>)
  400ef6:	6831      	ldr	r1, [r6, #0]
  400ef8:	4628      	mov	r0, r5
  400efa:	f006 fd2f 	bl	40795c <__aeabi_fmul>
  400efe:	490d      	ldr	r1, [pc, #52]	; (400f34 <mpu_read_normalized_acceleration+0x4c>)
  400f00:	f006 fd2c 	bl	40795c <__aeabi_fmul>
  400f04:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  400f06:	6871      	ldr	r1, [r6, #4]
  400f08:	4628      	mov	r0, r5
  400f0a:	f006 fd27 	bl	40795c <__aeabi_fmul>
  400f0e:	4909      	ldr	r1, [pc, #36]	; (400f34 <mpu_read_normalized_acceleration+0x4c>)
  400f10:	f006 fd24 	bl	40795c <__aeabi_fmul>
  400f14:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400f16:	68b1      	ldr	r1, [r6, #8]
  400f18:	4628      	mov	r0, r5
  400f1a:	f006 fd1f 	bl	40795c <__aeabi_fmul>
  400f1e:	4905      	ldr	r1, [pc, #20]	; (400f34 <mpu_read_normalized_acceleration+0x4c>)
  400f20:	f006 fd1c 	bl	40795c <__aeabi_fmul>
  400f24:	60a0      	str	r0, [r4, #8]
  400f26:	bd70      	pop	{r4, r5, r6, pc}
  400f28:	20000428 	.word	0x20000428
  400f2c:	200006a8 	.word	0x200006a8
  400f30:	200006b8 	.word	0x200006b8
  400f34:	411ce80a 	.word	0x411ce80a

00400f38 <mpu_log_settings>:
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
}

void mpu_log_settings(void)
{
  400f38:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400f3a:	f7ff fdf5 	bl	400b28 <mpu_who_am_i>
  400f3e:	4601      	mov	r1, r0
  400f40:	482b      	ldr	r0, [pc, #172]	; (400ff0 <mpu_log_settings+0xb8>)
  400f42:	f002 fb93 	bl	40366c <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400f46:	f7ff fea9 	bl	400c9c <mpu_get_sleep_enabled>
  400f4a:	492a      	ldr	r1, [pc, #168]	; (400ff4 <mpu_log_settings+0xbc>)
  400f4c:	4a2a      	ldr	r2, [pc, #168]	; (400ff8 <mpu_log_settings+0xc0>)
  400f4e:	2800      	cmp	r0, #0
  400f50:	bf18      	it	ne
  400f52:	4611      	movne	r1, r2
  400f54:	4829      	ldr	r0, [pc, #164]	; (400ffc <mpu_log_settings+0xc4>)
  400f56:	f002 fb89 	bl	40366c <iprintf>
    printf("Clock Source: ");
  400f5a:	4829      	ldr	r0, [pc, #164]	; (401000 <mpu_log_settings+0xc8>)
  400f5c:	f002 fb86 	bl	40366c <iprintf>
    switch (mpu_get_clock_source()) {
  400f60:	f7ff fdf6 	bl	400b50 <mpu_get_clock_source>
  400f64:	b110      	cbz	r0, 400f6c <mpu_log_settings+0x34>
  400f66:	2801      	cmp	r0, #1
  400f68:	d004      	beq.n	400f74 <mpu_log_settings+0x3c>
  400f6a:	e006      	b.n	400f7a <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400f6c:	4825      	ldr	r0, [pc, #148]	; (401004 <mpu_log_settings+0xcc>)
  400f6e:	f002 fb7d 	bl	40366c <iprintf>
        break;
  400f72:	e002      	b.n	400f7a <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400f74:	4824      	ldr	r0, [pc, #144]	; (401008 <mpu_log_settings+0xd0>)
  400f76:	f002 fb79 	bl	40366c <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400f7a:	4824      	ldr	r0, [pc, #144]	; (40100c <mpu_log_settings+0xd4>)
  400f7c:	f002 fb76 	bl	40366c <iprintf>
        switch (mpu_get_gyro_scale()) {
  400f80:	f7ff fe1e 	bl	400bc0 <mpu_get_gyro_scale>
  400f84:	2803      	cmp	r0, #3
  400f86:	d812      	bhi.n	400fae <mpu_log_settings+0x76>
  400f88:	e8df f000 	tbb	[pc, r0]
  400f8c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400f90:	481f      	ldr	r0, [pc, #124]	; (401010 <mpu_log_settings+0xd8>)
  400f92:	f002 fb6b 	bl	40366c <iprintf>
        break;
  400f96:	e00a      	b.n	400fae <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400f98:	481e      	ldr	r0, [pc, #120]	; (401014 <mpu_log_settings+0xdc>)
  400f9a:	f002 fb67 	bl	40366c <iprintf>
        break;
  400f9e:	e006      	b.n	400fae <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400fa0:	481d      	ldr	r0, [pc, #116]	; (401018 <mpu_log_settings+0xe0>)
  400fa2:	f002 fb63 	bl	40366c <iprintf>
        break;
  400fa6:	e002      	b.n	400fae <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400fa8:	481c      	ldr	r0, [pc, #112]	; (40101c <mpu_log_settings+0xe4>)
  400faa:	f002 fb5f 	bl	40366c <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400fae:	4b1c      	ldr	r3, [pc, #112]	; (401020 <mpu_log_settings+0xe8>)
  400fb0:	7819      	ldrb	r1, [r3, #0]
  400fb2:	481c      	ldr	r0, [pc, #112]	; (401024 <mpu_log_settings+0xec>)
  400fb4:	f002 fb5a 	bl	40366c <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400fb8:	4b1b      	ldr	r3, [pc, #108]	; (401028 <mpu_log_settings+0xf0>)
  400fba:	6818      	ldr	r0, [r3, #0]
  400fbc:	f006 f824 	bl	407008 <__aeabi_f2d>
  400fc0:	4602      	mov	r2, r0
  400fc2:	460b      	mov	r3, r1
  400fc4:	4819      	ldr	r0, [pc, #100]	; (40102c <mpu_log_settings+0xf4>)
  400fc6:	f002 fb51 	bl	40366c <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400fca:	4b19      	ldr	r3, [pc, #100]	; (401030 <mpu_log_settings+0xf8>)
  400fcc:	6818      	ldr	r0, [r3, #0]
  400fce:	f006 f81b 	bl	407008 <__aeabi_f2d>
  400fd2:	4602      	mov	r2, r0
  400fd4:	460b      	mov	r3, r1
  400fd6:	4817      	ldr	r0, [pc, #92]	; (401034 <mpu_log_settings+0xfc>)
  400fd8:	f002 fb48 	bl	40366c <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400fdc:	4b16      	ldr	r3, [pc, #88]	; (401038 <mpu_log_settings+0x100>)
  400fde:	6818      	ldr	r0, [r3, #0]
  400fe0:	f006 f812 	bl	407008 <__aeabi_f2d>
  400fe4:	4602      	mov	r2, r0
  400fe6:	460b      	mov	r3, r1
  400fe8:	4814      	ldr	r0, [pc, #80]	; (40103c <mpu_log_settings+0x104>)
  400fea:	f002 fb3f 	bl	40366c <iprintf>
  400fee:	bd08      	pop	{r3, pc}
  400ff0:	00407ffc 	.word	0x00407ffc
  400ff4:	00407ff0 	.word	0x00407ff0
  400ff8:	00407fe8 	.word	0x00407fe8
  400ffc:	0040800c 	.word	0x0040800c
  401000:	00408020 	.word	0x00408020
  401004:	00408030 	.word	0x00408030
  401008:	0040804c 	.word	0x0040804c
  40100c:	00408074 	.word	0x00408074
  401010:	00408080 	.word	0x00408080
  401014:	0040808c 	.word	0x0040808c
  401018:	00408098 	.word	0x00408098
  40101c:	004080a4 	.word	0x004080a4
  401020:	2000043c 	.word	0x2000043c
  401024:	004080b0 	.word	0x004080b0
  401028:	20000444 	.word	0x20000444
  40102c:	004080c4 	.word	0x004080c4
  401030:	20000438 	.word	0x20000438
  401034:	004080dc 	.word	0x004080dc
  401038:	20000428 	.word	0x20000428
  40103c:	004080f0 	.word	0x004080f0

00401040 <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  401040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  401042:	4604      	mov	r4, r0
  401044:	b1d8      	cbz	r0, 40107e <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  401046:	4b13      	ldr	r3, [pc, #76]	; (401094 <mpu_set_threshold+0x54>)
  401048:	781b      	ldrb	r3, [r3, #0]
  40104a:	b913      	cbnz	r3, 401052 <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  40104c:	2032      	movs	r0, #50	; 0x32
  40104e:	f000 f829 	bl	4010a4 <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  401052:	4620      	mov	r0, r4
  401054:	f006 fc2e 	bl	4078b4 <__aeabi_i2f>
  401058:	4607      	mov	r7, r0
  40105a:	4d0f      	ldr	r5, [pc, #60]	; (401098 <mpu_set_threshold+0x58>)
  40105c:	4e0f      	ldr	r6, [pc, #60]	; (40109c <mpu_set_threshold+0x5c>)
  40105e:	4601      	mov	r1, r0
  401060:	6830      	ldr	r0, [r6, #0]
  401062:	f006 fc7b 	bl	40795c <__aeabi_fmul>
  401066:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  401068:	4639      	mov	r1, r7
  40106a:	6870      	ldr	r0, [r6, #4]
  40106c:	f006 fc76 	bl	40795c <__aeabi_fmul>
  401070:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  401072:	4639      	mov	r1, r7
  401074:	68b0      	ldr	r0, [r6, #8]
  401076:	f006 fc71 	bl	40795c <__aeabi_fmul>
  40107a:	60a8      	str	r0, [r5, #8]
  40107c:	e004      	b.n	401088 <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  40107e:	4b06      	ldr	r3, [pc, #24]	; (401098 <mpu_set_threshold+0x58>)
  401080:	2200      	movs	r2, #0
  401082:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  401084:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  401086:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  401088:	4620      	mov	r0, r4
  40108a:	f006 fc0f 	bl	4078ac <__aeabi_ui2f>
  40108e:	4b04      	ldr	r3, [pc, #16]	; (4010a0 <mpu_set_threshold+0x60>)
  401090:	6018      	str	r0, [r3, #0]
  401092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401094:	2000043c 	.word	0x2000043c
  401098:	20000684 	.word	0x20000684
  40109c:	20000504 	.word	0x20000504
  4010a0:	20000444 	.word	0x20000444

004010a4 <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  4010a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010a8:	b085      	sub	sp, #20
	use_calibrate = true;
  4010aa:	2201      	movs	r2, #1
  4010ac:	4b5e      	ldr	r3, [pc, #376]	; (401228 <mpu_calibrate_gyro+0x184>)
  4010ae:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  4010b0:	4681      	mov	r9, r0
  4010b2:	2800      	cmp	r0, #0
  4010b4:	d048      	beq.n	401148 <mpu_calibrate_gyro+0xa4>
  4010b6:	2400      	movs	r4, #0
  4010b8:	f04f 0a00 	mov.w	sl, #0
  4010bc:	46d3      	mov	fp, sl
  4010be:	f8cd a00c 	str.w	sl, [sp, #12]
  4010c2:	f8cd a008 	str.w	sl, [sp, #8]
  4010c6:	f8cd a004 	str.w	sl, [sp, #4]
  4010ca:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  4010ce:	f8df 816c 	ldr.w	r8, [pc, #364]	; 40123c <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  4010d2:	f7ff fe11 	bl	400cf8 <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  4010d6:	f8d8 7000 	ldr.w	r7, [r8]
  4010da:	4639      	mov	r1, r7
  4010dc:	9800      	ldr	r0, [sp, #0]
  4010de:	f006 fb35 	bl	40774c <__addsf3>
  4010e2:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  4010e4:	f8d8 6004 	ldr.w	r6, [r8, #4]
  4010e8:	4631      	mov	r1, r6
  4010ea:	9801      	ldr	r0, [sp, #4]
  4010ec:	f006 fb2e 	bl	40774c <__addsf3>
  4010f0:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  4010f2:	f8d8 5008 	ldr.w	r5, [r8, #8]
  4010f6:	4629      	mov	r1, r5
  4010f8:	9802      	ldr	r0, [sp, #8]
  4010fa:	f006 fb27 	bl	40774c <__addsf3>
  4010fe:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  401100:	4639      	mov	r1, r7
  401102:	4638      	mov	r0, r7
  401104:	f006 fc2a 	bl	40795c <__aeabi_fmul>
  401108:	4601      	mov	r1, r0
  40110a:	9803      	ldr	r0, [sp, #12]
  40110c:	f006 fb1e 	bl	40774c <__addsf3>
  401110:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  401112:	4631      	mov	r1, r6
  401114:	4630      	mov	r0, r6
  401116:	f006 fc21 	bl	40795c <__aeabi_fmul>
  40111a:	4601      	mov	r1, r0
  40111c:	4658      	mov	r0, fp
  40111e:	f006 fb15 	bl	40774c <__addsf3>
  401122:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  401124:	4629      	mov	r1, r5
  401126:	4628      	mov	r0, r5
  401128:	f006 fc18 	bl	40795c <__aeabi_fmul>
  40112c:	4601      	mov	r1, r0
  40112e:	4650      	mov	r0, sl
  401130:	f006 fb0c 	bl	40774c <__addsf3>
  401134:	4682      	mov	sl, r0

		delay_ms(5);
  401136:	f24a 706a 	movw	r0, #42858	; 0xa76a
  40113a:	f007 f9e5 	bl	408508 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  40113e:	3401      	adds	r4, #1
  401140:	b2e4      	uxtb	r4, r4
  401142:	45a1      	cmp	r9, r4
  401144:	d1c5      	bne.n	4010d2 <mpu_calibrate_gyro+0x2e>
  401146:	e00a      	b.n	40115e <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  401148:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  40114c:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  40114e:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  401152:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  401156:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  40115a:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  40115e:	4648      	mov	r0, r9
  401160:	f006 fba8 	bl	4078b4 <__aeabi_i2f>
  401164:	4605      	mov	r5, r0
  401166:	4601      	mov	r1, r0
  401168:	9800      	ldr	r0, [sp, #0]
  40116a:	f006 fcab 	bl	407ac4 <__aeabi_fdiv>
  40116e:	4606      	mov	r6, r0
  401170:	4c2e      	ldr	r4, [pc, #184]	; (40122c <mpu_calibrate_gyro+0x188>)
  401172:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  401174:	4629      	mov	r1, r5
  401176:	9801      	ldr	r0, [sp, #4]
  401178:	f006 fca4 	bl	407ac4 <__aeabi_fdiv>
  40117c:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  40117e:	4629      	mov	r1, r5
  401180:	9802      	ldr	r0, [sp, #8]
  401182:	f006 fc9f 	bl	407ac4 <__aeabi_fdiv>
  401186:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  401188:	9f03      	ldr	r7, [sp, #12]
  40118a:	4929      	ldr	r1, [pc, #164]	; (401230 <mpu_calibrate_gyro+0x18c>)
  40118c:	4638      	mov	r0, r7
  40118e:	f006 fc99 	bl	407ac4 <__aeabi_fdiv>
  401192:	4605      	mov	r5, r0
  401194:	4631      	mov	r1, r6
  401196:	4630      	mov	r0, r6
  401198:	f006 fbe0 	bl	40795c <__aeabi_fmul>
  40119c:	4601      	mov	r1, r0
  40119e:	4628      	mov	r0, r5
  4011a0:	f006 fad2 	bl	407748 <__aeabi_fsub>
  4011a4:	f005 ff30 	bl	407008 <__aeabi_f2d>
  4011a8:	f001 fa1c 	bl	4025e4 <sqrt>
  4011ac:	4e21      	ldr	r6, [pc, #132]	; (401234 <mpu_calibrate_gyro+0x190>)
  4011ae:	f006 fa77 	bl	4076a0 <__aeabi_d2f>
  4011b2:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  4011b4:	6865      	ldr	r5, [r4, #4]
  4011b6:	491e      	ldr	r1, [pc, #120]	; (401230 <mpu_calibrate_gyro+0x18c>)
  4011b8:	4658      	mov	r0, fp
  4011ba:	f006 fc83 	bl	407ac4 <__aeabi_fdiv>
  4011be:	4607      	mov	r7, r0
  4011c0:	4629      	mov	r1, r5
  4011c2:	4628      	mov	r0, r5
  4011c4:	f006 fbca 	bl	40795c <__aeabi_fmul>
  4011c8:	4601      	mov	r1, r0
  4011ca:	4638      	mov	r0, r7
  4011cc:	f006 fabc 	bl	407748 <__aeabi_fsub>
  4011d0:	f005 ff1a 	bl	407008 <__aeabi_f2d>
  4011d4:	f001 fa06 	bl	4025e4 <sqrt>
  4011d8:	f006 fa62 	bl	4076a0 <__aeabi_d2f>
  4011dc:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  4011de:	68a4      	ldr	r4, [r4, #8]
  4011e0:	4913      	ldr	r1, [pc, #76]	; (401230 <mpu_calibrate_gyro+0x18c>)
  4011e2:	4650      	mov	r0, sl
  4011e4:	f006 fc6e 	bl	407ac4 <__aeabi_fdiv>
  4011e8:	4605      	mov	r5, r0
  4011ea:	4621      	mov	r1, r4
  4011ec:	4620      	mov	r0, r4
  4011ee:	f006 fbb5 	bl	40795c <__aeabi_fmul>
  4011f2:	4601      	mov	r1, r0
  4011f4:	4628      	mov	r0, r5
  4011f6:	f006 faa7 	bl	407748 <__aeabi_fsub>
  4011fa:	f005 ff05 	bl	407008 <__aeabi_f2d>
  4011fe:	f001 f9f1 	bl	4025e4 <sqrt>
  401202:	f006 fa4d 	bl	4076a0 <__aeabi_d2f>
  401206:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  401208:	4b0b      	ldr	r3, [pc, #44]	; (401238 <mpu_calibrate_gyro+0x194>)
  40120a:	681c      	ldr	r4, [r3, #0]
  40120c:	2100      	movs	r1, #0
  40120e:	4620      	mov	r0, r4
  401210:	f006 fd60 	bl	407cd4 <__aeabi_fcmpgt>
  401214:	b128      	cbz	r0, 401222 <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  401216:	4620      	mov	r0, r4
  401218:	f006 fd8c 	bl	407d34 <__aeabi_f2uiz>
  40121c:	b2c0      	uxtb	r0, r0
  40121e:	f7ff ff0f 	bl	401040 <mpu_set_threshold>
	}

}
  401222:	b005      	add	sp, #20
  401224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401228:	2000043c 	.word	0x2000043c
  40122c:	200006c4 	.word	0x200006c4
  401230:	42480000 	.word	0x42480000
  401234:	20000504 	.word	0x20000504
  401238:	20000444 	.word	0x20000444
  40123c:	20000510 	.word	0x20000510

00401240 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  401240:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  401242:	4b0c      	ldr	r3, [pc, #48]	; (401274 <imu_init+0x34>)
  401244:	2200      	movs	r2, #0
  401246:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  401248:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  40124a:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  40124c:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  40124e:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  401250:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  401252:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  401254:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  401256:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  401258:	f7ff fc1e 	bl	400a98 <mpu_init>
  40125c:	4604      	mov	r4, r0
  40125e:	f7ff fc45 	bl	400aec <mpu_probe>
  401262:	4020      	ands	r0, r4
  401264:	b2c4      	uxtb	r4, r0
  401266:	2100      	movs	r1, #0
  401268:	4608      	mov	r0, r1
  40126a:	f7ff fce9 	bl	400c40 <mpu_begin>
}
  40126e:	4020      	ands	r0, r4
  401270:	bd10      	pop	{r4, pc}
  401272:	bf00      	nop
  401274:	20000814 	.word	0x20000814

00401278 <imu_calibrate>:

void imu_calibrate(void)
{
  401278:	b508      	push	{r3, lr}
    printf("calibrating imu...\r\n");
  40127a:	4807      	ldr	r0, [pc, #28]	; (401298 <imu_calibrate+0x20>)
  40127c:	f002 f9f6 	bl	40366c <iprintf>
    mpu_calibrate_gyro(GYRO_SAMPLES);
  401280:	2032      	movs	r0, #50	; 0x32
  401282:	f7ff ff0f 	bl	4010a4 <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  401286:	2000      	movs	r0, #0
  401288:	f7ff feda 	bl	401040 <mpu_set_threshold>
    mpu_log_settings();
  40128c:	f7ff fe54 	bl	400f38 <mpu_log_settings>
    printf("calibration complete.\r\n");
  401290:	4802      	ldr	r0, [pc, #8]	; (40129c <imu_calibrate+0x24>)
  401292:	f002 f9eb 	bl	40366c <iprintf>
  401296:	bd08      	pop	{r3, pc}
  401298:	00408108 	.word	0x00408108
  40129c:	00408120 	.word	0x00408120

004012a0 <imu_tick>:
}

void imu_tick(void)
{
  4012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012a4:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  4012a6:	4b82      	ldr	r3, [pc, #520]	; (4014b0 <imu_tick+0x210>)
  4012a8:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  4012aa:	a808      	add	r0, sp, #32
  4012ac:	f7ff fd46 	bl	400d3c <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  4012b0:	f7ff fe1a 	bl	400ee8 <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  4012b4:	4c7f      	ldr	r4, [pc, #508]	; (4014b4 <imu_tick+0x214>)
  4012b6:	6820      	ldr	r0, [r4, #0]
  4012b8:	f005 fea6 	bl	407008 <__aeabi_f2d>
  4012bc:	a37a      	add	r3, pc, #488	; (adr r3, 4014a8 <imu_tick+0x208>)
  4012be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012c2:	f005 fef5 	bl	4070b0 <__aeabi_dmul>
  4012c6:	2200      	movs	r2, #0
  4012c8:	4b7b      	ldr	r3, [pc, #492]	; (4014b8 <imu_tick+0x218>)
  4012ca:	f006 f81b 	bl	407304 <__aeabi_ddiv>
  4012ce:	f006 f9e7 	bl	4076a0 <__aeabi_d2f>
  4012d2:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  4012d4:	6860      	ldr	r0, [r4, #4]
  4012d6:	f005 fe97 	bl	407008 <__aeabi_f2d>
  4012da:	a373      	add	r3, pc, #460	; (adr r3, 4014a8 <imu_tick+0x208>)
  4012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012e0:	f005 fee6 	bl	4070b0 <__aeabi_dmul>
  4012e4:	2200      	movs	r2, #0
  4012e6:	4b74      	ldr	r3, [pc, #464]	; (4014b8 <imu_tick+0x218>)
  4012e8:	f006 f80c 	bl	407304 <__aeabi_ddiv>
  4012ec:	f006 f9d8 	bl	4076a0 <__aeabi_d2f>
  4012f0:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  4012f2:	68a0      	ldr	r0, [r4, #8]
  4012f4:	f005 fe88 	bl	407008 <__aeabi_f2d>
  4012f8:	a36b      	add	r3, pc, #428	; (adr r3, 4014a8 <imu_tick+0x208>)
  4012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012fe:	f005 fed7 	bl	4070b0 <__aeabi_dmul>
  401302:	2200      	movs	r2, #0
  401304:	4b6c      	ldr	r3, [pc, #432]	; (4014b8 <imu_tick+0x218>)
  401306:	f005 fffd 	bl	407304 <__aeabi_ddiv>
  40130a:	f006 f9c9 	bl	4076a0 <__aeabi_d2f>
  40130e:	9007      	str	r0, [sp, #28]
    // float mag_y = ((float) raw_mag.y_axis)*M_PI/180.0f;
    // float mag_z = ((float) raw_mag.z_axis)*M_PI/180.0f;



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  401310:	4c6a      	ldr	r4, [pc, #424]	; (4014bc <imu_tick+0x21c>)
  401312:	6820      	ldr	r0, [r4, #0]
  401314:	f005 fe78 	bl	407008 <__aeabi_f2d>
  401318:	e9cd 0100 	strd	r0, r1, [sp]
  40131c:	6860      	ldr	r0, [r4, #4]
  40131e:	f005 fe73 	bl	407008 <__aeabi_f2d>
  401322:	4682      	mov	sl, r0
  401324:	468b      	mov	fp, r1
  401326:	68a0      	ldr	r0, [r4, #8]
  401328:	f005 fe6e 	bl	407008 <__aeabi_f2d>
  40132c:	4606      	mov	r6, r0
  40132e:	460f      	mov	r7, r1
  401330:	4632      	mov	r2, r6
  401332:	463b      	mov	r3, r7
  401334:	4630      	mov	r0, r6
  401336:	4639      	mov	r1, r7
  401338:	f005 feba 	bl	4070b0 <__aeabi_dmul>
  40133c:	4680      	mov	r8, r0
  40133e:	4689      	mov	r9, r1
  401340:	4652      	mov	r2, sl
  401342:	465b      	mov	r3, fp
  401344:	4650      	mov	r0, sl
  401346:	4659      	mov	r1, fp
  401348:	f005 feb2 	bl	4070b0 <__aeabi_dmul>
  40134c:	4602      	mov	r2, r0
  40134e:	460b      	mov	r3, r1
  401350:	4640      	mov	r0, r8
  401352:	4649      	mov	r1, r9
  401354:	f005 fcfa 	bl	406d4c <__adddf3>
  401358:	f001 f944 	bl	4025e4 <sqrt>
  40135c:	4602      	mov	r2, r0
  40135e:	460b      	mov	r3, r1
  401360:	e9dd 0100 	ldrd	r0, r1, [sp]
  401364:	f001 f93c 	bl	4025e0 <atan2>
  401368:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  40136c:	6860      	ldr	r0, [r4, #4]
  40136e:	f005 fe4b 	bl	407008 <__aeabi_f2d>
  401372:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401376:	6820      	ldr	r0, [r4, #0]
  401378:	f005 fe46 	bl	407008 <__aeabi_f2d>
  40137c:	4682      	mov	sl, r0
  40137e:	468b      	mov	fp, r1
  401380:	68a0      	ldr	r0, [r4, #8]
  401382:	f005 fe41 	bl	407008 <__aeabi_f2d>
  401386:	4606      	mov	r6, r0
  401388:	460f      	mov	r7, r1
  40138a:	4652      	mov	r2, sl
  40138c:	465b      	mov	r3, fp
  40138e:	4650      	mov	r0, sl
  401390:	4659      	mov	r1, fp
  401392:	f005 fe8d 	bl	4070b0 <__aeabi_dmul>
  401396:	4680      	mov	r8, r0
  401398:	4689      	mov	r9, r1
  40139a:	4632      	mov	r2, r6
  40139c:	463b      	mov	r3, r7
  40139e:	4630      	mov	r0, r6
  4013a0:	4639      	mov	r1, r7
  4013a2:	f005 fe85 	bl	4070b0 <__aeabi_dmul>
  4013a6:	4602      	mov	r2, r0
  4013a8:	460b      	mov	r3, r1
  4013aa:	4640      	mov	r0, r8
  4013ac:	4649      	mov	r1, r9
  4013ae:	f005 fccd 	bl	406d4c <__adddf3>
  4013b2:	f001 f917 	bl	4025e4 <sqrt>
  4013b6:	4602      	mov	r2, r0
  4013b8:	460b      	mov	r3, r1
  4013ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4013be:	f001 f90f 	bl	4025e0 <atan2>
  4013c2:	4680      	mov	r8, r0
  4013c4:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  4013c6:	f8df a118 	ldr.w	sl, [pc, #280]	; 4014e0 <imu_tick+0x240>
    float dt = ((float)delta_t/1000.0f);
  4013ca:	f8da 0000 	ldr.w	r0, [sl]
  4013ce:	1a28      	subs	r0, r5, r0
  4013d0:	f006 fa6c 	bl	4078ac <__aeabi_ui2f>
  4013d4:	493a      	ldr	r1, [pc, #232]	; (4014c0 <imu_tick+0x220>)
  4013d6:	f006 fb75 	bl	407ac4 <__aeabi_fdiv>
  4013da:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  4013dc:	4601      	mov	r1, r0
  4013de:	9805      	ldr	r0, [sp, #20]
  4013e0:	f006 fabc 	bl	40795c <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  4013e4:	4f37      	ldr	r7, [pc, #220]	; (4014c4 <imu_tick+0x224>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  4013e6:	6839      	ldr	r1, [r7, #0]
  4013e8:	f006 f9b0 	bl	40774c <__addsf3>
  4013ec:	4936      	ldr	r1, [pc, #216]	; (4014c8 <imu_tick+0x228>)
  4013ee:	f006 fab5 	bl	40795c <__aeabi_fmul>
  4013f2:	4683      	mov	fp, r0
  4013f4:	2200      	movs	r2, #0
  4013f6:	4b30      	ldr	r3, [pc, #192]	; (4014b8 <imu_tick+0x218>)
  4013f8:	4640      	mov	r0, r8
  4013fa:	4649      	mov	r1, r9
  4013fc:	f005 fe58 	bl	4070b0 <__aeabi_dmul>
  401400:	a329      	add	r3, pc, #164	; (adr r3, 4014a8 <imu_tick+0x208>)
  401402:	e9d3 2300 	ldrd	r2, r3, [r3]
  401406:	f005 ff7d 	bl	407304 <__aeabi_ddiv>
  40140a:	f006 f949 	bl	4076a0 <__aeabi_d2f>
  40140e:	492f      	ldr	r1, [pc, #188]	; (4014cc <imu_tick+0x22c>)
  401410:	f006 faa4 	bl	40795c <__aeabi_fmul>
  401414:	4601      	mov	r1, r0
  401416:	4658      	mov	r0, fp
  401418:	f006 f998 	bl	40774c <__addsf3>
  40141c:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  40141e:	4621      	mov	r1, r4
  401420:	9806      	ldr	r0, [sp, #24]
  401422:	f006 fa9b 	bl	40795c <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  401426:	4e2a      	ldr	r6, [pc, #168]	; (4014d0 <imu_tick+0x230>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  401428:	6831      	ldr	r1, [r6, #0]
  40142a:	f006 f98f 	bl	40774c <__addsf3>
  40142e:	4926      	ldr	r1, [pc, #152]	; (4014c8 <imu_tick+0x228>)
  401430:	f006 fa94 	bl	40795c <__aeabi_fmul>
  401434:	4681      	mov	r9, r0
  401436:	2200      	movs	r2, #0
  401438:	4b1f      	ldr	r3, [pc, #124]	; (4014b8 <imu_tick+0x218>)
  40143a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40143e:	f005 fe37 	bl	4070b0 <__aeabi_dmul>
  401442:	a319      	add	r3, pc, #100	; (adr r3, 4014a8 <imu_tick+0x208>)
  401444:	e9d3 2300 	ldrd	r2, r3, [r3]
  401448:	f005 ff5c 	bl	407304 <__aeabi_ddiv>
  40144c:	f006 f928 	bl	4076a0 <__aeabi_d2f>
  401450:	491e      	ldr	r1, [pc, #120]	; (4014cc <imu_tick+0x22c>)
  401452:	f006 fa83 	bl	40795c <__aeabi_fmul>
  401456:	4601      	mov	r1, r0
  401458:	4648      	mov	r0, r9
  40145a:	f006 f977 	bl	40774c <__addsf3>
  40145e:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  401460:	4621      	mov	r1, r4
  401462:	9807      	ldr	r0, [sp, #28]
  401464:	f006 fa7a 	bl	40795c <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  401468:	4c1a      	ldr	r4, [pc, #104]	; (4014d4 <imu_tick+0x234>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  40146a:	6821      	ldr	r1, [r4, #0]
  40146c:	f006 f96e 	bl	40774c <__addsf3>
  401470:	4915      	ldr	r1, [pc, #84]	; (4014c8 <imu_tick+0x228>)
  401472:	f006 fa73 	bl	40795c <__aeabi_fmul>
  401476:	2100      	movs	r1, #0
  401478:	f006 f968 	bl	40774c <__addsf3>


    last_time_read = t_now;
  40147c:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  401480:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  401484:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  401488:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  40148a:	4b13      	ldr	r3, [pc, #76]	; (4014d8 <imu_tick+0x238>)
  40148c:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  401490:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  401494:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  401496:	4b11      	ldr	r3, [pc, #68]	; (4014dc <imu_tick+0x23c>)
  401498:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  40149c:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  4014a0:	6098      	str	r0, [r3, #8]


  4014a2:	b00d      	add	sp, #52	; 0x34
  4014a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014a8:	54442d18 	.word	0x54442d18
  4014ac:	400921fb 	.word	0x400921fb
  4014b0:	20000208 	.word	0x20000208
  4014b4:	200006d8 	.word	0x200006d8
  4014b8:	40668000 	.word	0x40668000
  4014bc:	200006a8 	.word	0x200006a8
  4014c0:	447a0000 	.word	0x447a0000
  4014c4:	20000430 	.word	0x20000430
  4014c8:	3f75c28f 	.word	0x3f75c28f
  4014cc:	3d23d710 	.word	0x3d23d710
  4014d0:	20000434 	.word	0x20000434
  4014d4:	20000440 	.word	0x20000440
  4014d8:	20000844 	.word	0x20000844
  4014dc:	20000814 	.word	0x20000814
  4014e0:	2000042c 	.word	0x2000042c

004014e4 <motor_config_pins>:
	motors[1].angle_max = AP_ANGLE_MAX;
	motors[1].timeout = 1000;
}

void motor_config_pins(motor_config_t motor_cfg)
{
  4014e4:	b084      	sub	sp, #16
  4014e6:	b538      	push	{r3, r4, r5, lr}
  4014e8:	ac04      	add	r4, sp, #16
  4014ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_configure_pin(motor_cfg.ul_pin, motor_cfg.ul_flag);
  4014ee:	9906      	ldr	r1, [sp, #24]
  4014f0:	9805      	ldr	r0, [sp, #20]
  4014f2:	f000 fc1f 	bl	401d34 <pio_configure_pin>

	pmc_enable_periph_clk(motor_cfg.ul_periph_clkid);
  4014f6:	9807      	ldr	r0, [sp, #28]
  4014f8:	f000 fdce 	bl	402098 <pmc_enable_periph_clk>

	pwm_channel_disable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  4014fc:	ad04      	add	r5, sp, #16
  4014fe:	9908      	ldr	r1, [sp, #32]
  401500:	f855 0b14 	ldr.w	r0, [r5], #20
  401504:	f000 ff14 	bl	402330 <pwm_channel_disable>
	pwm_init(motor_cfg.p_pwm, &motor_cfg.clock_setting);
  401508:	ac04      	add	r4, sp, #16
  40150a:	4629      	mov	r1, r5
  40150c:	f854 0b20 	ldr.w	r0, [r4], #32
  401510:	f000 fe62 	bl	4021d8 <pwm_init>

	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
  401514:	4621      	mov	r1, r4
  401516:	9804      	ldr	r0, [sp, #16]
  401518:	f000 fe82 	bl	402220 <pwm_channel_init>
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  40151c:	9908      	ldr	r1, [sp, #32]
  40151e:	9804      	ldr	r0, [sp, #16]
  401520:	f000 ff00 	bl	402324 <pwm_channel_enable>
}
  401524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401528:	b004      	add	sp, #16
  40152a:	4770      	bx	lr

0040152c <motor_init>:
uint32_t motor_current_duty = 0;
void motor_config_pins(motor_config_t motor_cfg);


void motor_init(void)
{
  40152c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401530:	b0b3      	sub	sp, #204	; 0xcc
	printf("motor_init\r\n");
  401532:	485b      	ldr	r0, [pc, #364]	; (4016a0 <motor_init+0x174>)
  401534:	f002 f89a 	bl	40366c <iprintf>
        .ul_clka = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_mck = sysclk_get_cpu_hz()
	};

	motor_config_t motor_cfg0 = {
  401538:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  40153c:	2248      	movs	r2, #72	; 0x48
  40153e:	2100      	movs	r1, #0
  401540:	4648      	mov	r0, r9
  401542:	f001 fc1c 	bl	402d7e <memset>
		.pwm_channel.ul_period = MOTOR_PWM_PERIOD_TICKS,
		.pwm_channel.ul_duty = MOTOR_PWM_MIN,
		.pwm_channel.channel = EXT1_PWM_CHANNEL
	};

	motor_config_t motor_cfg1 = {
  401546:	2248      	movs	r2, #72	; 0x48
  401548:	2100      	movs	r1, #0
  40154a:	a80e      	add	r0, sp, #56	; 0x38
  40154c:	f001 fc17 	bl	402d7e <memset>
	};

	


	motor_config_pins(motor_cfg0);
  401550:	4b54      	ldr	r3, [pc, #336]	; (4016a4 <motor_init+0x178>)
  401552:	9320      	str	r3, [sp, #128]	; 0x80
  401554:	2417      	movs	r4, #23
  401556:	9421      	str	r4, [sp, #132]	; 0x84
  401558:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  40155c:	9722      	str	r7, [sp, #136]	; 0x88
  40155e:	231f      	movs	r3, #31
  401560:	9323      	str	r3, [sp, #140]	; 0x8c
  401562:	4e51      	ldr	r6, [pc, #324]	; (4016a8 <motor_init+0x17c>)
  401564:	9625      	str	r6, [sp, #148]	; 0x94
  401566:	9626      	str	r6, [sp, #152]	; 0x98
  401568:	4b50      	ldr	r3, [pc, #320]	; (4016ac <motor_init+0x180>)
  40156a:	9327      	str	r3, [sp, #156]	; 0x9c
  40156c:	f04f 080b 	mov.w	r8, #11
  401570:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  401574:	2501      	movs	r5, #1
  401576:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  40157a:	f240 4a7e 	movw	sl, #1150	; 0x47e
  40157e:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  401582:	f644 6b20 	movw	fp, #20000	; 0x4e20
  401586:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  40158a:	46ee      	mov	lr, sp
  40158c:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
  401590:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401594:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401598:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40159c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015a8:	e89c 0003 	ldmia.w	ip, {r0, r1}
  4015ac:	e88e 0003 	stmia.w	lr, {r0, r1}
  4015b0:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  4015b4:	f7ff ff96 	bl	4014e4 <motor_config_pins>
	motor_config_pins(motor_cfg1);
  4015b8:	4b3a      	ldr	r3, [pc, #232]	; (4016a4 <motor_init+0x178>)
  4015ba:	930e      	str	r3, [sp, #56]	; 0x38
  4015bc:	2353      	movs	r3, #83	; 0x53
  4015be:	930f      	str	r3, [sp, #60]	; 0x3c
  4015c0:	9710      	str	r7, [sp, #64]	; 0x40
  4015c2:	231f      	movs	r3, #31
  4015c4:	9311      	str	r3, [sp, #68]	; 0x44
  4015c6:	9512      	str	r5, [sp, #72]	; 0x48
  4015c8:	9613      	str	r6, [sp, #76]	; 0x4c
  4015ca:	9614      	str	r6, [sp, #80]	; 0x50
  4015cc:	4b37      	ldr	r3, [pc, #220]	; (4016ac <motor_init+0x180>)
  4015ce:	9315      	str	r3, [sp, #84]	; 0x54
  4015d0:	9516      	str	r5, [sp, #88]	; 0x58
  4015d2:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  4015d6:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  4015da:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  4015de:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  4015e2:	46ee      	mov	lr, sp
  4015e4:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  4015e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401600:	e89c 0003 	ldmia.w	ip, {r0, r1}
  401604:	e88e 0003 	stmia.w	lr, {r0, r1}
  401608:	ab0e      	add	r3, sp, #56	; 0x38
  40160a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40160c:	f7ff ff6a 	bl	4014e4 <motor_config_pins>

	motors[0].config = motor_cfg0;
  401610:	4b24      	ldr	r3, [pc, #144]	; (4016a4 <motor_init+0x178>)
  401612:	9320      	str	r3, [sp, #128]	; 0x80
  401614:	9421      	str	r4, [sp, #132]	; 0x84
  401616:	9722      	str	r7, [sp, #136]	; 0x88
  401618:	231f      	movs	r3, #31
  40161a:	9323      	str	r3, [sp, #140]	; 0x8c
  40161c:	9625      	str	r6, [sp, #148]	; 0x94
  40161e:	9626      	str	r6, [sp, #152]	; 0x98
  401620:	4b22      	ldr	r3, [pc, #136]	; (4016ac <motor_init+0x180>)
  401622:	9327      	str	r3, [sp, #156]	; 0x9c
  401624:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  401628:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  40162c:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  401630:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  401634:	4c1e      	ldr	r4, [pc, #120]	; (4016b0 <motor_init+0x184>)
  401636:	2248      	movs	r2, #72	; 0x48
  401638:	4649      	mov	r1, r9
  40163a:	4620      	mov	r0, r4
  40163c:	f001 fb94 	bl	402d68 <memcpy>
	motors[0].angle_min = AP_ANGLE_MIN;
  401640:	f06f 0359 	mvn.w	r3, #89	; 0x59
  401644:	64a3      	str	r3, [r4, #72]	; 0x48
	motors[0].angle_max = AP_ANGLE_MAX;
  401646:	235a      	movs	r3, #90	; 0x5a
  401648:	64e3      	str	r3, [r4, #76]	; 0x4c
	motors[0].timeout = 1000;
  40164a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  40164e:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50

	motors[1].config = motor_cfg1;
  401652:	4b14      	ldr	r3, [pc, #80]	; (4016a4 <motor_init+0x178>)
  401654:	930e      	str	r3, [sp, #56]	; 0x38
  401656:	2353      	movs	r3, #83	; 0x53
  401658:	930f      	str	r3, [sp, #60]	; 0x3c
  40165a:	9710      	str	r7, [sp, #64]	; 0x40
  40165c:	231f      	movs	r3, #31
  40165e:	9311      	str	r3, [sp, #68]	; 0x44
  401660:	9512      	str	r5, [sp, #72]	; 0x48
  401662:	9613      	str	r6, [sp, #76]	; 0x4c
  401664:	9614      	str	r6, [sp, #80]	; 0x50
  401666:	4b11      	ldr	r3, [pc, #68]	; (4016ac <motor_init+0x180>)
  401668:	9315      	str	r3, [sp, #84]	; 0x54
  40166a:	9516      	str	r5, [sp, #88]	; 0x58
  40166c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  401670:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  401674:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  401678:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  40167c:	2248      	movs	r2, #72	; 0x48
  40167e:	a90e      	add	r1, sp, #56	; 0x38
  401680:	f104 0054 	add.w	r0, r4, #84	; 0x54
  401684:	f001 fb70 	bl	402d68 <memcpy>
	motors[1].angle_min = AP_ANGLE_MIN;
  401688:	f06f 0359 	mvn.w	r3, #89	; 0x59
  40168c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	motors[1].angle_max = AP_ANGLE_MAX;
  401690:	235a      	movs	r3, #90	; 0x5a
  401692:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	motors[1].timeout = 1000;
  401696:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
}
  40169a:	b033      	add	sp, #204	; 0xcc
  40169c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4016a0:	00408138 	.word	0x00408138
  4016a4:	40020000 	.word	0x40020000
  4016a8:	000f4240 	.word	0x000f4240
  4016ac:	07270e00 	.word	0x07270e00
  4016b0:	20000534 	.word	0x20000534

004016b4 <motor_tick>:
	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
}

void motor_tick(void)
{
  4016b4:	4770      	bx	lr
  4016b6:	bf00      	nop

004016b8 <motor_set_power>:

}

void motor_set_power(motor_t motor, uint32_t power)
{
  4016b8:	b084      	sub	sp, #16
  4016ba:	b508      	push	{r3, lr}
  4016bc:	f10d 0e08 	add.w	lr, sp, #8
  4016c0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  4016c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
	motor.config.pwm_channel.ul_duty = power;
  4016c6:	910d      	str	r1, [sp, #52]	; 0x34
	// printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
	if (config.log_motor) {
  4016c8:	4b07      	ldr	r3, [pc, #28]	; (4016e8 <motor_set_power+0x30>)
  4016ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4016ce:	b113      	cbz	r3, 4016d6 <motor_set_power+0x1e>
		printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
  4016d0:	4806      	ldr	r0, [pc, #24]	; (4016ec <motor_set_power+0x34>)
  4016d2:	f001 ffcb 	bl	40366c <iprintf>
	}
	pwm_channel_update_duty(motor.config.p_pwm, &motor.config.pwm_channel, motor.config.pwm_channel.ul_duty);
  4016d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4016d8:	a90a      	add	r1, sp, #40	; 0x28
  4016da:	9802      	ldr	r0, [sp, #8]
  4016dc:	f000 fe14 	bl	402308 <pwm_channel_update_duty>
}
  4016e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4016e4:	b004      	add	sp, #16
  4016e6:	4770      	bx	lr
  4016e8:	200006e4 	.word	0x200006e4
  4016ec:	00408148 	.word	0x00408148

004016f0 <motor_min>:

void motor_min(motor_t motor)
{
  4016f0:	b084      	sub	sp, #16
  4016f2:	b500      	push	{lr}
  4016f4:	b093      	sub	sp, #76	; 0x4c
  4016f6:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  4016fa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MIN;
  4016fe:	f240 437e 	movw	r3, #1150	; 0x47e
  401702:	4a08      	ldr	r2, [pc, #32]	; (401724 <motor_min+0x34>)
  401704:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, MOTOR_PWM_MIN);
  401706:	9311      	str	r3, [sp, #68]	; 0x44
  401708:	2244      	movs	r2, #68	; 0x44
  40170a:	a918      	add	r1, sp, #96	; 0x60
  40170c:	4668      	mov	r0, sp
  40170e:	f001 fb2b 	bl	402d68 <memcpy>
  401712:	ab14      	add	r3, sp, #80	; 0x50
  401714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401716:	f7ff ffcf 	bl	4016b8 <motor_set_power>
}
  40171a:	b013      	add	sp, #76	; 0x4c
  40171c:	f85d eb04 	ldr.w	lr, [sp], #4
  401720:	b004      	add	sp, #16
  401722:	4770      	bx	lr
  401724:	20000448 	.word	0x20000448

00401728 <motor_mid>:

void motor_mid(motor_t motor)
{
  401728:	b084      	sub	sp, #16
  40172a:	b500      	push	{lr}
  40172c:	b093      	sub	sp, #76	; 0x4c
  40172e:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  401732:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MID;
  401736:	f240 5346 	movw	r3, #1350	; 0x546
  40173a:	4a08      	ldr	r2, [pc, #32]	; (40175c <motor_mid+0x34>)
  40173c:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  40173e:	9311      	str	r3, [sp, #68]	; 0x44
  401740:	2244      	movs	r2, #68	; 0x44
  401742:	a918      	add	r1, sp, #96	; 0x60
  401744:	4668      	mov	r0, sp
  401746:	f001 fb0f 	bl	402d68 <memcpy>
  40174a:	ab14      	add	r3, sp, #80	; 0x50
  40174c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40174e:	f7ff ffb3 	bl	4016b8 <motor_set_power>
}
  401752:	b013      	add	sp, #76	; 0x4c
  401754:	f85d eb04 	ldr.w	lr, [sp], #4
  401758:	b004      	add	sp, #16
  40175a:	4770      	bx	lr
  40175c:	20000448 	.word	0x20000448

00401760 <motor_max>:

void motor_max(motor_t motor)
{
  401760:	b084      	sub	sp, #16
  401762:	b500      	push	{lr}
  401764:	b093      	sub	sp, #76	; 0x4c
  401766:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  40176a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MAX;
  40176e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  401772:	4a08      	ldr	r2, [pc, #32]	; (401794 <motor_max+0x34>)
  401774:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, motor_current_duty);
  401776:	9311      	str	r3, [sp, #68]	; 0x44
  401778:	2244      	movs	r2, #68	; 0x44
  40177a:	a918      	add	r1, sp, #96	; 0x60
  40177c:	4668      	mov	r0, sp
  40177e:	f001 faf3 	bl	402d68 <memcpy>
  401782:	ab14      	add	r3, sp, #80	; 0x50
  401784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401786:	f7ff ff97 	bl	4016b8 <motor_set_power>
}
  40178a:	b013      	add	sp, #76	; 0x4c
  40178c:	f85d eb04 	ldr.w	lr, [sp], #4
  401790:	b004      	add	sp, #16
  401792:	4770      	bx	lr
  401794:	20000448 	.word	0x20000448

00401798 <pid_init>:
float desired_angle = 0.0f;


void pid_init(void)
{
    time = 0;
  401798:	2300      	movs	r3, #0
  40179a:	4a0a      	ldr	r2, [pc, #40]	; (4017c4 <pid_init+0x2c>)
  40179c:	6013      	str	r3, [r2, #0]
    previous_time = 0;
  40179e:	4a0a      	ldr	r2, [pc, #40]	; (4017c8 <pid_init+0x30>)
  4017a0:	6013      	str	r3, [r2, #0]
    elapsed_time = 0;
  4017a2:	4a0a      	ldr	r2, [pc, #40]	; (4017cc <pid_init+0x34>)
  4017a4:	6013      	str	r3, [r2, #0]
    pid = 0.0f;
  4017a6:	2300      	movs	r3, #0
  4017a8:	4a09      	ldr	r2, [pc, #36]	; (4017d0 <pid_init+0x38>)
  4017aa:	6013      	str	r3, [r2, #0]
    error = 0.0f;
  4017ac:	4a09      	ldr	r2, [pc, #36]	; (4017d4 <pid_init+0x3c>)
  4017ae:	6013      	str	r3, [r2, #0]
    previous_error = 0.0f;
  4017b0:	4a09      	ldr	r2, [pc, #36]	; (4017d8 <pid_init+0x40>)
  4017b2:	6013      	str	r3, [r2, #0]
    pid_p = 0.0f;
  4017b4:	4a09      	ldr	r2, [pc, #36]	; (4017dc <pid_init+0x44>)
  4017b6:	6013      	str	r3, [r2, #0]
    pid_i = 0.0f;
  4017b8:	4a09      	ldr	r2, [pc, #36]	; (4017e0 <pid_init+0x48>)
  4017ba:	6013      	str	r3, [r2, #0]
    pid_d = 0.0f;
  4017bc:	4a09      	ldr	r2, [pc, #36]	; (4017e4 <pid_init+0x4c>)
  4017be:	6013      	str	r3, [r2, #0]
  4017c0:	4770      	bx	lr
  4017c2:	bf00      	nop
  4017c4:	20000468 	.word	0x20000468
  4017c8:	2000046c 	.word	0x2000046c
  4017cc:	20000470 	.word	0x20000470
  4017d0:	2000044c 	.word	0x2000044c
  4017d4:	20000458 	.word	0x20000458
  4017d8:	20000450 	.word	0x20000450
  4017dc:	20000474 	.word	0x20000474
  4017e0:	20000454 	.word	0x20000454
  4017e4:	2000045c 	.word	0x2000045c

004017e8 <pid_tick>:
float kp = 1.0f;
float ki = 0.0f;
float kd = 0.0;

float pid_tick(void)
{
  4017e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    previous_error = time;
  4017ec:	4c27      	ldr	r4, [pc, #156]	; (40188c <pid_tick+0xa4>)
  4017ee:	6820      	ldr	r0, [r4, #0]
  4017f0:	f006 f85c 	bl	4078ac <__aeabi_ui2f>
  4017f4:	4680      	mov	r8, r0
    time = cph_get_millis();
  4017f6:	4b26      	ldr	r3, [pc, #152]	; (401890 <pid_tick+0xa8>)
  4017f8:	681b      	ldr	r3, [r3, #0]
  4017fa:	6023      	str	r3, [r4, #0]
    elapsed_time = (time - previous_time)/1000;
  4017fc:	4a25      	ldr	r2, [pc, #148]	; (401894 <pid_tick+0xac>)
  4017fe:	6814      	ldr	r4, [r2, #0]
  401800:	1b1b      	subs	r3, r3, r4
  401802:	4c25      	ldr	r4, [pc, #148]	; (401898 <pid_tick+0xb0>)
  401804:	fba4 3403 	umull	r3, r4, r4, r3
  401808:	09a4      	lsrs	r4, r4, #6
  40180a:	4b24      	ldr	r3, [pc, #144]	; (40189c <pid_tick+0xb4>)
  40180c:	601c      	str	r4, [r3, #0]

    error = ap.imu.y_axis - AP.desired_angle_x;
  40180e:	4b24      	ldr	r3, [pc, #144]	; (4018a0 <pid_tick+0xb8>)
  401810:	6859      	ldr	r1, [r3, #4]
  401812:	4b24      	ldr	r3, [pc, #144]	; (4018a4 <pid_tick+0xbc>)
  401814:	6858      	ldr	r0, [r3, #4]
  401816:	f005 ff97 	bl	407748 <__aeabi_fsub>
  40181a:	4605      	mov	r5, r0
  40181c:	4b22      	ldr	r3, [pc, #136]	; (4018a8 <pid_tick+0xc0>)
  40181e:	6018      	str	r0, [r3, #0]
    pid_p = kp*error;
  401820:	4b22      	ldr	r3, [pc, #136]	; (4018ac <pid_tick+0xc4>)
  401822:	6819      	ldr	r1, [r3, #0]
  401824:	f006 f89a 	bl	40795c <__aeabi_fmul>
  401828:	4606      	mov	r6, r0
  40182a:	4b21      	ldr	r3, [pc, #132]	; (4018b0 <pid_tick+0xc8>)
  40182c:	6018      	str	r0, [r3, #0]

    // if (-3.0f < error < 3.0f) {
    //     pid_i = pid_i +(ki*error);
    // }

    pid_i = pid_i +(ki*error);
  40182e:	4b21      	ldr	r3, [pc, #132]	; (4018b4 <pid_tick+0xcc>)
  401830:	6819      	ldr	r1, [r3, #0]
  401832:	4628      	mov	r0, r5
  401834:	f006 f892 	bl	40795c <__aeabi_fmul>
  401838:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4018c8 <pid_tick+0xe0>
  40183c:	f8d9 1000 	ldr.w	r1, [r9]
  401840:	f005 ff84 	bl	40774c <__addsf3>
  401844:	4607      	mov	r7, r0
  401846:	f8c9 0000 	str.w	r0, [r9]

    pid_d = kd * ((error-previous_error)/elapsed_time);
  40184a:	4641      	mov	r1, r8
  40184c:	4628      	mov	r0, r5
  40184e:	f005 ff7b 	bl	407748 <__aeabi_fsub>
  401852:	4680      	mov	r8, r0
  401854:	4620      	mov	r0, r4
  401856:	f006 f829 	bl	4078ac <__aeabi_ui2f>
  40185a:	4601      	mov	r1, r0
  40185c:	4640      	mov	r0, r8
  40185e:	f006 f931 	bl	407ac4 <__aeabi_fdiv>
  401862:	4b15      	ldr	r3, [pc, #84]	; (4018b8 <pid_tick+0xd0>)
  401864:	6819      	ldr	r1, [r3, #0]
  401866:	f006 f879 	bl	40795c <__aeabi_fmul>
  40186a:	4604      	mov	r4, r0
  40186c:	4b13      	ldr	r3, [pc, #76]	; (4018bc <pid_tick+0xd4>)
  40186e:	6018      	str	r0, [r3, #0]

    pid = pid_p + pid_i + pid_d;
  401870:	4639      	mov	r1, r7
  401872:	4630      	mov	r0, r6
  401874:	f005 ff6a 	bl	40774c <__addsf3>
  401878:	4621      	mov	r1, r4
  40187a:	f005 ff67 	bl	40774c <__addsf3>
  40187e:	4b10      	ldr	r3, [pc, #64]	; (4018c0 <pid_tick+0xd8>)
  401880:	6018      	str	r0, [r3, #0]

    previous_error = error;
  401882:	4b10      	ldr	r3, [pc, #64]	; (4018c4 <pid_tick+0xdc>)
  401884:	601d      	str	r5, [r3, #0]

    return pid;
  401886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40188a:	bf00      	nop
  40188c:	20000468 	.word	0x20000468
  401890:	20000208 	.word	0x20000208
  401894:	2000046c 	.word	0x2000046c
  401898:	10624dd3 	.word	0x10624dd3
  40189c:	20000470 	.word	0x20000470
  4018a0:	20000850 	.word	0x20000850
  4018a4:	20000814 	.word	0x20000814
  4018a8:	20000458 	.word	0x20000458
  4018ac:	2000000c 	.word	0x2000000c
  4018b0:	20000474 	.word	0x20000474
  4018b4:	20000464 	.word	0x20000464
  4018b8:	20000460 	.word	0x20000460
  4018bc:	2000045c 	.word	0x2000045c
  4018c0:	2000044c 	.word	0x2000044c
  4018c4:	20000450 	.word	0x20000450
  4018c8:	20000454 	.word	0x20000454

004018cc <ap_init>:
ap_manager_t AP;


void ap_init(void)
{
    AP.state = AP_INITIALIZING;
  4018cc:	4b03      	ldr	r3, [pc, #12]	; (4018dc <ap_init+0x10>)
  4018ce:	2200      	movs	r2, #0
  4018d0:	701a      	strb	r2, [r3, #0]
    AP.desired_angle_x = 0.0f;
  4018d2:	2100      	movs	r1, #0
  4018d4:	6059      	str	r1, [r3, #4]
    AP.desired_angle_y = 0.0f;
  4018d6:	6099      	str	r1, [r3, #8]
    AP.motor_power = 0;
  4018d8:	60da      	str	r2, [r3, #12]
  4018da:	4770      	bx	lr
  4018dc:	20000850 	.word	0x20000850

004018e0 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4018e0:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4018e2:	482c      	ldr	r0, [pc, #176]	; (401994 <board_init+0xb4>)
  4018e4:	f000 fc02 	bl	4020ec <wdt_disable>
  4018e8:	200b      	movs	r0, #11
  4018ea:	f000 fbd5 	bl	402098 <pmc_enable_periph_clk>
  4018ee:	200c      	movs	r0, #12
  4018f0:	f000 fbd2 	bl	402098 <pmc_enable_periph_clk>
  4018f4:	200d      	movs	r0, #13
  4018f6:	f000 fbcf 	bl	402098 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018fa:	4b27      	ldr	r3, [pc, #156]	; (401998 <board_init+0xb8>)
  4018fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401900:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401902:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401904:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401908:	4c24      	ldr	r4, [pc, #144]	; (40199c <board_init+0xbc>)
  40190a:	2504      	movs	r5, #4
  40190c:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40190e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401912:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401914:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401918:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40191a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40191c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401920:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401922:	f022 0204 	bic.w	r2, r2, #4
  401926:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401928:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40192a:	f022 0204 	bic.w	r2, r2, #4
  40192e:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401930:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401934:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401936:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401938:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40193c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401940:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401942:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401944:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401948:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40194c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40194e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401950:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401954:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401958:	210c      	movs	r1, #12
  40195a:	4811      	ldr	r0, [pc, #68]	; (4019a0 <board_init+0xc0>)
  40195c:	f000 fa76 	bl	401e4c <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401960:	4e10      	ldr	r6, [pc, #64]	; (4019a4 <board_init+0xc4>)
  401962:	4631      	mov	r1, r6
  401964:	2003      	movs	r0, #3
  401966:	f000 f9e5 	bl	401d34 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40196a:	4631      	mov	r1, r6
  40196c:	4628      	mov	r0, r5
  40196e:	f000 f9e1 	bl	401d34 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401972:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401974:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401978:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40197a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40197c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401980:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401982:	f023 0304 	bic.w	r3, r3, #4
  401986:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401988:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40198a:	f023 0304 	bic.w	r3, r3, #4
  40198e:	6763      	str	r3, [r4, #116]	; 0x74
  401990:	bd70      	pop	{r4, r5, r6, pc}
  401992:	bf00      	nop
  401994:	400e1450 	.word	0x400e1450
  401998:	400e1200 	.word	0x400e1200
  40199c:	400e0e00 	.word	0x400e0e00
  4019a0:	400e1000 	.word	0x400e1000
  4019a4:	08000001 	.word	0x08000001

004019a8 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4019a8:	4b2b      	ldr	r3, [pc, #172]	; (401a58 <twi_set_speed+0xb0>)
  4019aa:	4299      	cmp	r1, r3
  4019ac:	d849      	bhi.n	401a42 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4019ae:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4019b2:	4299      	cmp	r1, r3
  4019b4:	d92b      	bls.n	401a0e <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4019b6:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019b8:	4c28      	ldr	r4, [pc, #160]	; (401a5c <twi_set_speed+0xb4>)
  4019ba:	fba4 3402 	umull	r3, r4, r4, r2
  4019be:	0ba4      	lsrs	r4, r4, #14
  4019c0:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019c2:	4b27      	ldr	r3, [pc, #156]	; (401a60 <twi_set_speed+0xb8>)
  4019c4:	440b      	add	r3, r1
  4019c6:	009b      	lsls	r3, r3, #2
  4019c8:	fbb2 f2f3 	udiv	r2, r2, r3
  4019cc:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019ce:	2cff      	cmp	r4, #255	; 0xff
  4019d0:	d939      	bls.n	401a46 <twi_set_speed+0x9e>
  4019d2:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4019d4:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4019d6:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019d8:	2cff      	cmp	r4, #255	; 0xff
  4019da:	d902      	bls.n	4019e2 <twi_set_speed+0x3a>
  4019dc:	2b07      	cmp	r3, #7
  4019de:	d1f9      	bne.n	4019d4 <twi_set_speed+0x2c>
  4019e0:	e00a      	b.n	4019f8 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019e2:	2aff      	cmp	r2, #255	; 0xff
  4019e4:	d908      	bls.n	4019f8 <twi_set_speed+0x50>
  4019e6:	2b06      	cmp	r3, #6
  4019e8:	d900      	bls.n	4019ec <twi_set_speed+0x44>
  4019ea:	e005      	b.n	4019f8 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  4019ec:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4019ee:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019f0:	2aff      	cmp	r2, #255	; 0xff
  4019f2:	d901      	bls.n	4019f8 <twi_set_speed+0x50>
  4019f4:	2b06      	cmp	r3, #6
  4019f6:	d9f9      	bls.n	4019ec <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4019f8:	0212      	lsls	r2, r2, #8
  4019fa:	b292      	uxth	r2, r2
  4019fc:	041b      	lsls	r3, r3, #16
  4019fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401a02:	431a      	orrs	r2, r3
  401a04:	b2e4      	uxtb	r4, r4
  401a06:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401a08:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401a0a:	2000      	movs	r0, #0
  401a0c:	e021      	b.n	401a52 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401a0e:	0049      	lsls	r1, r1, #1
  401a10:	fbb2 f2f1 	udiv	r2, r2, r1
  401a14:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a16:	2aff      	cmp	r2, #255	; 0xff
  401a18:	d907      	bls.n	401a2a <twi_set_speed+0x82>
  401a1a:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401a1c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401a1e:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a20:	2aff      	cmp	r2, #255	; 0xff
  401a22:	d903      	bls.n	401a2c <twi_set_speed+0x84>
  401a24:	2b07      	cmp	r3, #7
  401a26:	d1f9      	bne.n	401a1c <twi_set_speed+0x74>
  401a28:	e000      	b.n	401a2c <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a2a:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401a2c:	0211      	lsls	r1, r2, #8
  401a2e:	b289      	uxth	r1, r1
  401a30:	041b      	lsls	r3, r3, #16
  401a32:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401a36:	430b      	orrs	r3, r1
  401a38:	b2d2      	uxtb	r2, r2
  401a3a:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401a3c:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401a3e:	2000      	movs	r0, #0
}
  401a40:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401a42:	2001      	movs	r0, #1
  401a44:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a46:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a48:	bf88      	it	hi
  401a4a:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a4c:	d8ce      	bhi.n	4019ec <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a4e:	2300      	movs	r3, #0
  401a50:	e7d2      	b.n	4019f8 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  401a52:	bc10      	pop	{r4}
  401a54:	4770      	bx	lr
  401a56:	bf00      	nop
  401a58:	00061a80 	.word	0x00061a80
  401a5c:	057619f1 	.word	0x057619f1
  401a60:	3ffd1200 	.word	0x3ffd1200

00401a64 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401a64:	b538      	push	{r3, r4, r5, lr}
  401a66:	4604      	mov	r4, r0
  401a68:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  401a6e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  401a70:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401a72:	2380      	movs	r3, #128	; 0x80
  401a74:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  401a76:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  401a78:	2308      	movs	r3, #8
  401a7a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401a7c:	2320      	movs	r3, #32
  401a7e:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401a80:	2304      	movs	r3, #4
  401a82:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401a84:	680a      	ldr	r2, [r1, #0]
  401a86:	6849      	ldr	r1, [r1, #4]
  401a88:	f7ff ff8e 	bl	4019a8 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401a8c:	2801      	cmp	r0, #1
  401a8e:	bf14      	ite	ne
  401a90:	2000      	movne	r0, #0
  401a92:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  401a94:	7a6b      	ldrb	r3, [r5, #9]
  401a96:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401a98:	bf04      	itt	eq
  401a9a:	2340      	moveq	r3, #64	; 0x40
  401a9c:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401a9e:	bd38      	pop	{r3, r4, r5, pc}

00401aa0 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401aa0:	460a      	mov	r2, r1
  401aa2:	b159      	cbz	r1, 401abc <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  401aa4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  401aa6:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  401aa8:	bfc4      	itt	gt
  401aaa:	7841      	ldrbgt	r1, [r0, #1]
  401aac:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401ab0:	2a02      	cmp	r2, #2
  401ab2:	dd05      	ble.n	401ac0 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  401ab4:	7880      	ldrb	r0, [r0, #2]
  401ab6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401aba:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401abc:	2000      	movs	r0, #0
  401abe:	4770      	bx	lr
  401ac0:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  401ac2:	4770      	bx	lr

00401ac4 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401ac8:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401aca:	2c00      	cmp	r4, #0
  401acc:	d045      	beq.n	401b5a <twi_master_read+0x96>
  401ace:	460b      	mov	r3, r1
  401ad0:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401ad2:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401ad4:	2000      	movs	r0, #0
  401ad6:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401ad8:	684a      	ldr	r2, [r1, #4]
  401ada:	0212      	lsls	r2, r2, #8
  401adc:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401ae0:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  401ae4:	7c1a      	ldrb	r2, [r3, #16]
  401ae6:	0412      	lsls	r2, r2, #16
  401ae8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401aec:	430a      	orrs	r2, r1
  401aee:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401af0:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401af2:	6859      	ldr	r1, [r3, #4]
  401af4:	4618      	mov	r0, r3
  401af6:	f7ff ffd3 	bl	401aa0 <twi_mk_addr>
  401afa:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401afc:	2c01      	cmp	r4, #1
  401afe:	d104      	bne.n	401b0a <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401b00:	2303      	movs	r3, #3
  401b02:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401b04:	f04f 0e01 	mov.w	lr, #1
  401b08:	e033      	b.n	401b72 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401b0a:	2301      	movs	r3, #1
  401b0c:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  401b0e:	f04f 0e00 	mov.w	lr, #0
  401b12:	e02e      	b.n	401b72 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b14:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b16:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401b18:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b1c:	d120      	bne.n	401b60 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  401b1e:	1e51      	subs	r1, r2, #1
  401b20:	b30a      	cbz	r2, 401b66 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401b22:	2c01      	cmp	r4, #1
  401b24:	d106      	bne.n	401b34 <twi_master_read+0x70>
  401b26:	f1be 0f00 	cmp.w	lr, #0
  401b2a:	d12f      	bne.n	401b8c <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  401b2c:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401b30:	46e6      	mov	lr, ip
  401b32:	e02b      	b.n	401b8c <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b34:	f013 0f02 	tst.w	r3, #2
  401b38:	d005      	beq.n	401b46 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401b3c:	7033      	strb	r3, [r6, #0]

		cnt--;
  401b3e:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b40:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401b42:	463a      	mov	r2, r7
  401b44:	e000      	b.n	401b48 <twi_master_read+0x84>
  401b46:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401b48:	2c00      	cmp	r4, #0
  401b4a:	d1e4      	bne.n	401b16 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401b4c:	6a2b      	ldr	r3, [r5, #32]
  401b4e:	f013 0f01 	tst.w	r3, #1
  401b52:	d0fb      	beq.n	401b4c <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  401b54:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  401b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401b5a:	2001      	movs	r0, #1
  401b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b60:	2005      	movs	r0, #5
  401b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401b66:	2009      	movs	r0, #9
  401b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b6c:	2005      	movs	r0, #5
  401b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b72:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401b74:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401b78:	d1f8      	bne.n	401b6c <twi_master_read+0xa8>
  401b7a:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401b7e:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401b82:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  401b86:	f04f 0c01 	mov.w	ip, #1
  401b8a:	e7ca      	b.n	401b22 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b8c:	f013 0f02 	tst.w	r3, #2
  401b90:	d0c0      	beq.n	401b14 <twi_master_read+0x50>
  401b92:	e7d2      	b.n	401b3a <twi_master_read+0x76>

00401b94 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401b94:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401b96:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  401b98:	2d00      	cmp	r5, #0
  401b9a:	d034      	beq.n	401c06 <twi_master_write+0x72>
  401b9c:	460b      	mov	r3, r1
  401b9e:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401ba0:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401ba2:	2000      	movs	r0, #0
  401ba4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401ba6:	7c0a      	ldrb	r2, [r1, #16]
  401ba8:	0412      	lsls	r2, r2, #16
  401baa:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401bae:	685a      	ldr	r2, [r3, #4]
  401bb0:	0212      	lsls	r2, r2, #8
  401bb2:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401bb6:	430a      	orrs	r2, r1
  401bb8:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401bba:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401bbc:	6859      	ldr	r1, [r3, #4]
  401bbe:	4618      	mov	r0, r3
  401bc0:	f7ff ff6e 	bl	401aa0 <twi_mk_addr>
  401bc4:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401bc6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bc8:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bcc:	d004      	beq.n	401bd8 <twi_master_write+0x44>
  401bce:	e01c      	b.n	401c0a <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401bd0:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bd2:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bd6:	d11a      	bne.n	401c0e <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401bd8:	f013 0f04 	tst.w	r3, #4
  401bdc:	d003      	beq.n	401be6 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401bde:	7833      	ldrb	r3, [r6, #0]
  401be0:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  401be2:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401be4:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401be6:	2d00      	cmp	r5, #0
  401be8:	d1f2      	bne.n	401bd0 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401bea:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bec:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401bf0:	d10f      	bne.n	401c12 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401bf2:	f013 0f04 	tst.w	r3, #4
  401bf6:	d0f8      	beq.n	401bea <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401bf8:	2302      	movs	r3, #2
  401bfa:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401bfc:	6a23      	ldr	r3, [r4, #32]
  401bfe:	f013 0f01 	tst.w	r3, #1
  401c02:	d0fb      	beq.n	401bfc <twi_master_write+0x68>
  401c04:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401c06:	2001      	movs	r0, #1
  401c08:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401c0a:	2005      	movs	r0, #5
  401c0c:	bd70      	pop	{r4, r5, r6, pc}
  401c0e:	2005      	movs	r0, #5
  401c10:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401c12:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401c14:	bd70      	pop	{r4, r5, r6, pc}
  401c16:	bf00      	nop

00401c18 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  401c18:	b500      	push	{lr}
  401c1a:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  401c1c:	2300      	movs	r3, #0
  401c1e:	aa06      	add	r2, sp, #24
  401c20:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  401c24:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  401c26:	2201      	movs	r2, #1
  401c28:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  401c2a:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  401c2e:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  401c32:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  401c34:	a901      	add	r1, sp, #4
  401c36:	f7ff ffad 	bl	401b94 <twi_master_write>
}
  401c3a:	b007      	add	sp, #28
  401c3c:	f85d fb04 	ldr.w	pc, [sp], #4

00401c40 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401c40:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c42:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c46:	d02f      	beq.n	401ca8 <pio_set_peripheral+0x68>
  401c48:	d807      	bhi.n	401c5a <pio_set_peripheral+0x1a>
  401c4a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401c4e:	d014      	beq.n	401c7a <pio_set_peripheral+0x3a>
  401c50:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c54:	d01e      	beq.n	401c94 <pio_set_peripheral+0x54>
  401c56:	b939      	cbnz	r1, 401c68 <pio_set_peripheral+0x28>
  401c58:	4770      	bx	lr
  401c5a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c5e:	d036      	beq.n	401cce <pio_set_peripheral+0x8e>
  401c60:	d804      	bhi.n	401c6c <pio_set_peripheral+0x2c>
  401c62:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c66:	d029      	beq.n	401cbc <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c68:	6042      	str	r2, [r0, #4]
  401c6a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c6c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c70:	d02d      	beq.n	401cce <pio_set_peripheral+0x8e>
  401c72:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c76:	d02a      	beq.n	401cce <pio_set_peripheral+0x8e>
  401c78:	e7f6      	b.n	401c68 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401c7a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c7c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c7e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401c80:	43d3      	mvns	r3, r2
  401c82:	4021      	ands	r1, r4
  401c84:	4019      	ands	r1, r3
  401c86:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c88:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c8a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c8c:	4021      	ands	r1, r4
  401c8e:	400b      	ands	r3, r1
  401c90:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c92:	e01a      	b.n	401cca <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c94:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c96:	4313      	orrs	r3, r2
  401c98:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c9a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c9c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401c9e:	400b      	ands	r3, r1
  401ca0:	ea23 0302 	bic.w	r3, r3, r2
  401ca4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401ca6:	e7df      	b.n	401c68 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401ca8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401caa:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401cac:	400b      	ands	r3, r1
  401cae:	ea23 0302 	bic.w	r3, r3, r2
  401cb2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cb4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401cb6:	4313      	orrs	r3, r2
  401cb8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cba:	e7d5      	b.n	401c68 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cbc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cbe:	4313      	orrs	r3, r2
  401cc0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cc2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401cc4:	4313      	orrs	r3, r2
  401cc6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cc8:	e7ce      	b.n	401c68 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401cca:	6042      	str	r2, [r0, #4]
}
  401ccc:	bc10      	pop	{r4}
  401cce:	4770      	bx	lr

00401cd0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401cd0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cd2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401cd6:	bf14      	ite	ne
  401cd8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401cda:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401cdc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401ce0:	bf14      	ite	ne
  401ce2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401ce4:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401ce6:	f012 0f02 	tst.w	r2, #2
  401cea:	d002      	beq.n	401cf2 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401cec:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401cf0:	e004      	b.n	401cfc <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401cf2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401cf6:	bf18      	it	ne
  401cf8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401cfc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401cfe:	6001      	str	r1, [r0, #0]
  401d00:	4770      	bx	lr
  401d02:	bf00      	nop

00401d04 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401d04:	b410      	push	{r4}
  401d06:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401d08:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d0a:	b10c      	cbz	r4, 401d10 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401d0c:	6641      	str	r1, [r0, #100]	; 0x64
  401d0e:	e000      	b.n	401d12 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d10:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401d12:	b10b      	cbz	r3, 401d18 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401d14:	6501      	str	r1, [r0, #80]	; 0x50
  401d16:	e000      	b.n	401d1a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401d18:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401d1a:	b10a      	cbz	r2, 401d20 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401d1c:	6301      	str	r1, [r0, #48]	; 0x30
  401d1e:	e000      	b.n	401d22 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401d20:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401d22:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401d24:	6001      	str	r1, [r0, #0]
}
  401d26:	bc10      	pop	{r4}
  401d28:	4770      	bx	lr
  401d2a:	bf00      	nop

00401d2c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d2c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d2e:	4770      	bx	lr

00401d30 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d30:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d32:	4770      	bx	lr

00401d34 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401d34:	b570      	push	{r4, r5, r6, lr}
  401d36:	b082      	sub	sp, #8
  401d38:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d3a:	0943      	lsrs	r3, r0, #5
  401d3c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401d40:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401d44:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401d46:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d4e:	d047      	beq.n	401de0 <pio_configure_pin+0xac>
  401d50:	d809      	bhi.n	401d66 <pio_configure_pin+0x32>
  401d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d56:	d021      	beq.n	401d9c <pio_configure_pin+0x68>
  401d58:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d5c:	d02f      	beq.n	401dbe <pio_configure_pin+0x8a>
  401d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d62:	d16f      	bne.n	401e44 <pio_configure_pin+0x110>
  401d64:	e009      	b.n	401d7a <pio_configure_pin+0x46>
  401d66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d6a:	d055      	beq.n	401e18 <pio_configure_pin+0xe4>
  401d6c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d70:	d052      	beq.n	401e18 <pio_configure_pin+0xe4>
  401d72:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d76:	d044      	beq.n	401e02 <pio_configure_pin+0xce>
  401d78:	e064      	b.n	401e44 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401d7a:	f000 001f 	and.w	r0, r0, #31
  401d7e:	2601      	movs	r6, #1
  401d80:	4086      	lsls	r6, r0
  401d82:	4632      	mov	r2, r6
  401d84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d88:	4620      	mov	r0, r4
  401d8a:	f7ff ff59 	bl	401c40 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d8e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401d92:	bf14      	ite	ne
  401d94:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d96:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401d98:	2001      	movs	r0, #1
  401d9a:	e054      	b.n	401e46 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401d9c:	f000 001f 	and.w	r0, r0, #31
  401da0:	2601      	movs	r6, #1
  401da2:	4086      	lsls	r6, r0
  401da4:	4632      	mov	r2, r6
  401da6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401daa:	4620      	mov	r0, r4
  401dac:	f7ff ff48 	bl	401c40 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401db0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401db4:	bf14      	ite	ne
  401db6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401db8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401dba:	2001      	movs	r0, #1
  401dbc:	e043      	b.n	401e46 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401dbe:	f000 001f 	and.w	r0, r0, #31
  401dc2:	2601      	movs	r6, #1
  401dc4:	4086      	lsls	r6, r0
  401dc6:	4632      	mov	r2, r6
  401dc8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401dcc:	4620      	mov	r0, r4
  401dce:	f7ff ff37 	bl	401c40 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401dd2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401dd6:	bf14      	ite	ne
  401dd8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dda:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ddc:	2001      	movs	r0, #1
  401dde:	e032      	b.n	401e46 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401de0:	f000 001f 	and.w	r0, r0, #31
  401de4:	2601      	movs	r6, #1
  401de6:	4086      	lsls	r6, r0
  401de8:	4632      	mov	r2, r6
  401dea:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401dee:	4620      	mov	r0, r4
  401df0:	f7ff ff26 	bl	401c40 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401df4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401df8:	bf14      	ite	ne
  401dfa:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dfc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401dfe:	2001      	movs	r0, #1
  401e00:	e021      	b.n	401e46 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401e02:	f000 011f 	and.w	r1, r0, #31
  401e06:	2601      	movs	r6, #1
  401e08:	462a      	mov	r2, r5
  401e0a:	fa06 f101 	lsl.w	r1, r6, r1
  401e0e:	4620      	mov	r0, r4
  401e10:	f7ff ff5e 	bl	401cd0 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401e14:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401e16:	e016      	b.n	401e46 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e18:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  401e1c:	f000 011f 	and.w	r1, r0, #31
  401e20:	2601      	movs	r6, #1
  401e22:	ea05 0306 	and.w	r3, r5, r6
  401e26:	9300      	str	r3, [sp, #0]
  401e28:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401e2c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401e30:	bf14      	ite	ne
  401e32:	2200      	movne	r2, #0
  401e34:	2201      	moveq	r2, #1
  401e36:	fa06 f101 	lsl.w	r1, r6, r1
  401e3a:	4620      	mov	r0, r4
  401e3c:	f7ff ff62 	bl	401d04 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401e40:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401e42:	e000      	b.n	401e46 <pio_configure_pin+0x112>

	default:
		return 0;
  401e44:	2000      	movs	r0, #0
	}

	return 1;
}
  401e46:	b002      	add	sp, #8
  401e48:	bd70      	pop	{r4, r5, r6, pc}
  401e4a:	bf00      	nop

00401e4c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401e4c:	b570      	push	{r4, r5, r6, lr}
  401e4e:	b082      	sub	sp, #8
  401e50:	4605      	mov	r5, r0
  401e52:	460e      	mov	r6, r1
  401e54:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401e56:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401e5e:	d038      	beq.n	401ed2 <pio_configure_pin_group+0x86>
  401e60:	d809      	bhi.n	401e76 <pio_configure_pin_group+0x2a>
  401e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401e66:	d01c      	beq.n	401ea2 <pio_configure_pin_group+0x56>
  401e68:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401e6c:	d025      	beq.n	401eba <pio_configure_pin_group+0x6e>
  401e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401e72:	d150      	bne.n	401f16 <pio_configure_pin_group+0xca>
  401e74:	e009      	b.n	401e8a <pio_configure_pin_group+0x3e>
  401e76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401e7a:	d03a      	beq.n	401ef2 <pio_configure_pin_group+0xa6>
  401e7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e80:	d037      	beq.n	401ef2 <pio_configure_pin_group+0xa6>
  401e82:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401e86:	d030      	beq.n	401eea <pio_configure_pin_group+0x9e>
  401e88:	e045      	b.n	401f16 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401e8a:	460a      	mov	r2, r1
  401e8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e90:	f7ff fed6 	bl	401c40 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e94:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401e98:	bf14      	ite	ne
  401e9a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e9c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e9e:	2001      	movs	r0, #1
  401ea0:	e03a      	b.n	401f18 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401ea2:	460a      	mov	r2, r1
  401ea4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401ea8:	f7ff feca 	bl	401c40 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401eac:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401eb0:	bf14      	ite	ne
  401eb2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401eb4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401eb6:	2001      	movs	r0, #1
  401eb8:	e02e      	b.n	401f18 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401eba:	460a      	mov	r2, r1
  401ebc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401ec0:	f7ff febe 	bl	401c40 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ec4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ec8:	bf14      	ite	ne
  401eca:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ecc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ece:	2001      	movs	r0, #1
  401ed0:	e022      	b.n	401f18 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401ed2:	460a      	mov	r2, r1
  401ed4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401ed8:	f7ff feb2 	bl	401c40 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401edc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ee0:	bf14      	ite	ne
  401ee2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ee4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ee6:	2001      	movs	r0, #1
  401ee8:	e016      	b.n	401f18 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401eea:	f7ff fef1 	bl	401cd0 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401eee:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401ef0:	e012      	b.n	401f18 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401ef2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401ef6:	f004 0301 	and.w	r3, r4, #1
  401efa:	9300      	str	r3, [sp, #0]
  401efc:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401f00:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401f04:	bf14      	ite	ne
  401f06:	2200      	movne	r2, #0
  401f08:	2201      	moveq	r2, #1
  401f0a:	4631      	mov	r1, r6
  401f0c:	4628      	mov	r0, r5
  401f0e:	f7ff fef9 	bl	401d04 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401f12:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401f14:	e000      	b.n	401f18 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401f16:	2000      	movs	r0, #0
	}

	return 1;
}
  401f18:	b002      	add	sp, #8
  401f1a:	bd70      	pop	{r4, r5, r6, pc}

00401f1c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f20:	4681      	mov	r9, r0
  401f22:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f24:	f7ff ff02 	bl	401d2c <pio_get_interrupt_status>
  401f28:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f2a:	4648      	mov	r0, r9
  401f2c:	f7ff ff00 	bl	401d30 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401f30:	4005      	ands	r5, r0
  401f32:	d013      	beq.n	401f5c <pio_handler_process+0x40>
  401f34:	4c0e      	ldr	r4, [pc, #56]	; (401f70 <pio_handler_process+0x54>)
  401f36:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401f3a:	6823      	ldr	r3, [r4, #0]
  401f3c:	4543      	cmp	r3, r8
  401f3e:	d108      	bne.n	401f52 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f40:	6861      	ldr	r1, [r4, #4]
  401f42:	4229      	tst	r1, r5
  401f44:	d005      	beq.n	401f52 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f46:	68e3      	ldr	r3, [r4, #12]
  401f48:	4640      	mov	r0, r8
  401f4a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401f4c:	6863      	ldr	r3, [r4, #4]
  401f4e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401f52:	42b4      	cmp	r4, r6
  401f54:	d002      	beq.n	401f5c <pio_handler_process+0x40>
  401f56:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401f58:	2d00      	cmp	r5, #0
  401f5a:	d1ee      	bne.n	401f3a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401f5c:	4b05      	ldr	r3, [pc, #20]	; (401f74 <pio_handler_process+0x58>)
  401f5e:	681b      	ldr	r3, [r3, #0]
  401f60:	b123      	cbz	r3, 401f6c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401f62:	4b05      	ldr	r3, [pc, #20]	; (401f78 <pio_handler_process+0x5c>)
  401f64:	681b      	ldr	r3, [r3, #0]
  401f66:	b10b      	cbz	r3, 401f6c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401f68:	4648      	mov	r0, r9
  401f6a:	4798      	blx	r3
  401f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f70:	2000047c 	.word	0x2000047c
  401f74:	20000860 	.word	0x20000860
  401f78:	20000478 	.word	0x20000478

00401f7c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401f7c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401f7e:	210b      	movs	r1, #11
  401f80:	4801      	ldr	r0, [pc, #4]	; (401f88 <PIOA_Handler+0xc>)
  401f82:	f7ff ffcb 	bl	401f1c <pio_handler_process>
  401f86:	bd08      	pop	{r3, pc}
  401f88:	400e0e00 	.word	0x400e0e00

00401f8c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401f8c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401f8e:	210c      	movs	r1, #12
  401f90:	4801      	ldr	r0, [pc, #4]	; (401f98 <PIOB_Handler+0xc>)
  401f92:	f7ff ffc3 	bl	401f1c <pio_handler_process>
  401f96:	bd08      	pop	{r3, pc}
  401f98:	400e1000 	.word	0x400e1000

00401f9c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401f9c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401f9e:	210d      	movs	r1, #13
  401fa0:	4801      	ldr	r0, [pc, #4]	; (401fa8 <PIOC_Handler+0xc>)
  401fa2:	f7ff ffbb 	bl	401f1c <pio_handler_process>
  401fa6:	bd08      	pop	{r3, pc}
  401fa8:	400e1200 	.word	0x400e1200

00401fac <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401fac:	4a18      	ldr	r2, [pc, #96]	; (402010 <pmc_switch_mck_to_pllack+0x64>)
  401fae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401fb4:	4318      	orrs	r0, r3
  401fb6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fb8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401fba:	f013 0f08 	tst.w	r3, #8
  401fbe:	d003      	beq.n	401fc8 <pmc_switch_mck_to_pllack+0x1c>
  401fc0:	e009      	b.n	401fd6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401fc2:	3b01      	subs	r3, #1
  401fc4:	d103      	bne.n	401fce <pmc_switch_mck_to_pllack+0x22>
  401fc6:	e01e      	b.n	402006 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401fcc:	4910      	ldr	r1, [pc, #64]	; (402010 <pmc_switch_mck_to_pllack+0x64>)
  401fce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401fd0:	f012 0f08 	tst.w	r2, #8
  401fd4:	d0f5      	beq.n	401fc2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401fd6:	4a0e      	ldr	r2, [pc, #56]	; (402010 <pmc_switch_mck_to_pllack+0x64>)
  401fd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fda:	f023 0303 	bic.w	r3, r3, #3
  401fde:	f043 0302 	orr.w	r3, r3, #2
  401fe2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fe4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401fe6:	f010 0008 	ands.w	r0, r0, #8
  401fea:	d004      	beq.n	401ff6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401fec:	2000      	movs	r0, #0
  401fee:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401ff0:	3b01      	subs	r3, #1
  401ff2:	d103      	bne.n	401ffc <pmc_switch_mck_to_pllack+0x50>
  401ff4:	e009      	b.n	40200a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401ffa:	4905      	ldr	r1, [pc, #20]	; (402010 <pmc_switch_mck_to_pllack+0x64>)
  401ffc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401ffe:	f012 0f08 	tst.w	r2, #8
  402002:	d0f5      	beq.n	401ff0 <pmc_switch_mck_to_pllack+0x44>
  402004:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402006:	2001      	movs	r0, #1
  402008:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40200a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40200c:	4770      	bx	lr
  40200e:	bf00      	nop
  402010:	400e0400 	.word	0x400e0400

00402014 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402014:	b138      	cbz	r0, 402026 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402016:	4911      	ldr	r1, [pc, #68]	; (40205c <pmc_switch_mainck_to_xtal+0x48>)
  402018:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40201a:	4a11      	ldr	r2, [pc, #68]	; (402060 <pmc_switch_mainck_to_xtal+0x4c>)
  40201c:	401a      	ands	r2, r3
  40201e:	4b11      	ldr	r3, [pc, #68]	; (402064 <pmc_switch_mainck_to_xtal+0x50>)
  402020:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402022:	620b      	str	r3, [r1, #32]
  402024:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402026:	480d      	ldr	r0, [pc, #52]	; (40205c <pmc_switch_mainck_to_xtal+0x48>)
  402028:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40202a:	0209      	lsls	r1, r1, #8
  40202c:	b289      	uxth	r1, r1
  40202e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  402032:	f023 0303 	bic.w	r3, r3, #3
  402036:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40203a:	f043 0301 	orr.w	r3, r3, #1
  40203e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402040:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402042:	4602      	mov	r2, r0
  402044:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402046:	f013 0f01 	tst.w	r3, #1
  40204a:	d0fb      	beq.n	402044 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40204c:	4a03      	ldr	r2, [pc, #12]	; (40205c <pmc_switch_mainck_to_xtal+0x48>)
  40204e:	6a13      	ldr	r3, [r2, #32]
  402050:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402058:	6213      	str	r3, [r2, #32]
  40205a:	4770      	bx	lr
  40205c:	400e0400 	.word	0x400e0400
  402060:	fec8fffc 	.word	0xfec8fffc
  402064:	01370002 	.word	0x01370002

00402068 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402068:	4b02      	ldr	r3, [pc, #8]	; (402074 <pmc_osc_is_ready_mainck+0xc>)
  40206a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40206c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402070:	4770      	bx	lr
  402072:	bf00      	nop
  402074:	400e0400 	.word	0x400e0400

00402078 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402078:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40207c:	4b01      	ldr	r3, [pc, #4]	; (402084 <pmc_disable_pllack+0xc>)
  40207e:	629a      	str	r2, [r3, #40]	; 0x28
  402080:	4770      	bx	lr
  402082:	bf00      	nop
  402084:	400e0400 	.word	0x400e0400

00402088 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402088:	4b02      	ldr	r3, [pc, #8]	; (402094 <pmc_is_locked_pllack+0xc>)
  40208a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40208c:	f000 0002 	and.w	r0, r0, #2
  402090:	4770      	bx	lr
  402092:	bf00      	nop
  402094:	400e0400 	.word	0x400e0400

00402098 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402098:	2822      	cmp	r0, #34	; 0x22
  40209a:	d81e      	bhi.n	4020da <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40209c:	281f      	cmp	r0, #31
  40209e:	d80c      	bhi.n	4020ba <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4020a0:	4b11      	ldr	r3, [pc, #68]	; (4020e8 <pmc_enable_periph_clk+0x50>)
  4020a2:	699a      	ldr	r2, [r3, #24]
  4020a4:	2301      	movs	r3, #1
  4020a6:	4083      	lsls	r3, r0
  4020a8:	4393      	bics	r3, r2
  4020aa:	d018      	beq.n	4020de <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4020ac:	2301      	movs	r3, #1
  4020ae:	fa03 f000 	lsl.w	r0, r3, r0
  4020b2:	4b0d      	ldr	r3, [pc, #52]	; (4020e8 <pmc_enable_periph_clk+0x50>)
  4020b4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4020b6:	2000      	movs	r0, #0
  4020b8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4020ba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4020bc:	4b0a      	ldr	r3, [pc, #40]	; (4020e8 <pmc_enable_periph_clk+0x50>)
  4020be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4020c2:	2301      	movs	r3, #1
  4020c4:	4083      	lsls	r3, r0
  4020c6:	4393      	bics	r3, r2
  4020c8:	d00b      	beq.n	4020e2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4020ca:	2301      	movs	r3, #1
  4020cc:	fa03 f000 	lsl.w	r0, r3, r0
  4020d0:	4b05      	ldr	r3, [pc, #20]	; (4020e8 <pmc_enable_periph_clk+0x50>)
  4020d2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4020d6:	2000      	movs	r0, #0
  4020d8:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4020da:	2001      	movs	r0, #1
  4020dc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4020de:	2000      	movs	r0, #0
  4020e0:	4770      	bx	lr
  4020e2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4020e4:	4770      	bx	lr
  4020e6:	bf00      	nop
  4020e8:	400e0400 	.word	0x400e0400

004020ec <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4020ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020f0:	6043      	str	r3, [r0, #4]
  4020f2:	4770      	bx	lr

004020f4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4020f4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4020f6:	23ac      	movs	r3, #172	; 0xac
  4020f8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4020fa:	680b      	ldr	r3, [r1, #0]
  4020fc:	684a      	ldr	r2, [r1, #4]
  4020fe:	fbb3 f3f2 	udiv	r3, r3, r2
  402102:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402104:	1e5c      	subs	r4, r3, #1
  402106:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40210a:	4294      	cmp	r4, r2
  40210c:	d80a      	bhi.n	402124 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40210e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402110:	688b      	ldr	r3, [r1, #8]
  402112:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402114:	f240 2302 	movw	r3, #514	; 0x202
  402118:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40211c:	2350      	movs	r3, #80	; 0x50
  40211e:	6003      	str	r3, [r0, #0]

	return 0;
  402120:	2000      	movs	r0, #0
  402122:	e000      	b.n	402126 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402124:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402126:	bc10      	pop	{r4}
  402128:	4770      	bx	lr
  40212a:	bf00      	nop

0040212c <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  40212c:	6940      	ldr	r0, [r0, #20]
}
  40212e:	f000 0001 	and.w	r0, r0, #1
  402132:	4770      	bx	lr

00402134 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402134:	6943      	ldr	r3, [r0, #20]
  402136:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40213a:	bf1a      	itte	ne
  40213c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40213e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402140:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402142:	4770      	bx	lr

00402144 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402144:	6943      	ldr	r3, [r0, #20]
  402146:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40214a:	bf1d      	ittte	ne
  40214c:	6983      	ldrne	r3, [r0, #24]
  40214e:	700b      	strbne	r3, [r1, #0]
	return 0;
  402150:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402152:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402154:	4770      	bx	lr
  402156:	bf00      	nop

00402158 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402158:	6943      	ldr	r3, [r0, #20]
  40215a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40215e:	bf1d      	ittte	ne
  402160:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  402164:	61c1      	strne	r1, [r0, #28]
	return 0;
  402166:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  402168:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40216a:	4770      	bx	lr

0040216c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40216c:	6943      	ldr	r3, [r0, #20]
  40216e:	f013 0f01 	tst.w	r3, #1
  402172:	d005      	beq.n	402180 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402174:	6983      	ldr	r3, [r0, #24]
  402176:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40217a:	600b      	str	r3, [r1, #0]

	return 0;
  40217c:	2000      	movs	r0, #0
  40217e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  402180:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  402182:	4770      	bx	lr

00402184 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  402184:	b4f0      	push	{r4, r5, r6, r7}
  402186:	b08c      	sub	sp, #48	; 0x30
  402188:	4607      	mov	r7, r0
  40218a:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  40218c:	ac01      	add	r4, sp, #4
  40218e:	4d11      	ldr	r5, [pc, #68]	; (4021d4 <pwm_clocks_generate+0x50>)
  402190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402198:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  40219c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4021a0:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4021a2:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4021a4:	f852 3b04 	ldr.w	r3, [r2], #4
  4021a8:	fbb6 f3f3 	udiv	r3, r6, r3
  4021ac:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4021b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4021b4:	d905      	bls.n	4021c2 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  4021b6:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4021b8:	280b      	cmp	r0, #11
  4021ba:	d1f3      	bne.n	4021a4 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4021bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4021c0:	e005      	b.n	4021ce <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4021c2:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  4021c4:	bf94      	ite	ls
  4021c6:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  4021ca:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  4021ce:	b00c      	add	sp, #48	; 0x30
  4021d0:	bcf0      	pop	{r4, r5, r6, r7}
  4021d2:	4770      	bx	lr
  4021d4:	0040815c 	.word	0x0040815c

004021d8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4021d8:	b570      	push	{r4, r5, r6, lr}
  4021da:	4606      	mov	r6, r0
  4021dc:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4021de:	6808      	ldr	r0, [r1, #0]
  4021e0:	b140      	cbz	r0, 4021f4 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4021e2:	6889      	ldr	r1, [r1, #8]
  4021e4:	f7ff ffce 	bl	402184 <pwm_clocks_generate>
  4021e8:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  4021ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4021ee:	4298      	cmp	r0, r3
  4021f0:	d101      	bne.n	4021f6 <pwm_init+0x1e>
  4021f2:	e00e      	b.n	402212 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  4021f4:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  4021f6:	6860      	ldr	r0, [r4, #4]
  4021f8:	b140      	cbz	r0, 40220c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  4021fa:	68a1      	ldr	r1, [r4, #8]
  4021fc:	f7ff ffc2 	bl	402184 <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  402200:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402204:	4298      	cmp	r0, r3
  402206:	d007      	beq.n	402218 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  402208:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40220c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  40220e:	2000      	movs	r0, #0
  402210:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  402212:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402216:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  402218:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  40221c:	bd70      	pop	{r4, r5, r6, pc}
  40221e:	bf00      	nop

00402220 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  402220:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  402222:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  402224:	684a      	ldr	r2, [r1, #4]
  402226:	f002 020f 	and.w	r2, r2, #15
  40222a:	8a8c      	ldrh	r4, [r1, #20]
  40222c:	4322      	orrs	r2, r4
  40222e:	890c      	ldrh	r4, [r1, #8]
  402230:	4322      	orrs	r2, r4
  402232:	7a8c      	ldrb	r4, [r1, #10]
  402234:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  402238:	7d8c      	ldrb	r4, [r1, #22]
  40223a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  40223e:	7dcc      	ldrb	r4, [r1, #23]
  402240:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  402244:	7e0c      	ldrb	r4, [r1, #24]
  402246:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  40224a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40224e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  402252:	68ca      	ldr	r2, [r1, #12]
  402254:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  402258:	690a      	ldr	r2, [r1, #16]
  40225a:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  40225e:	7d8a      	ldrb	r2, [r1, #22]
  402260:	b13a      	cbz	r2, 402272 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  402262:	8b8c      	ldrh	r4, [r1, #28]
  402264:	8b4a      	ldrh	r2, [r1, #26]
  402266:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40226a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  40226e:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  402272:	6c84      	ldr	r4, [r0, #72]	; 0x48
  402274:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  402278:	409a      	lsls	r2, r3
  40227a:	43d2      	mvns	r2, r2
  40227c:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  402280:	7fcc      	ldrb	r4, [r1, #31]
  402282:	fa04 f603 	lsl.w	r6, r4, r3
  402286:	7f8c      	ldrb	r4, [r1, #30]
  402288:	409c      	lsls	r4, r3
  40228a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  40228e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  402290:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  402292:	6c44      	ldr	r4, [r0, #68]	; 0x44
  402294:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  402296:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  40229a:	fa04 f503 	lsl.w	r5, r4, r3
  40229e:	f891 4020 	ldrb.w	r4, [r1, #32]
  4022a2:	409c      	lsls	r4, r3
  4022a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4022a8:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4022aa:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4022ac:	2201      	movs	r2, #1
  4022ae:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  4022b0:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4022b4:	b11c      	cbz	r4, 4022be <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  4022b6:	6a04      	ldr	r4, [r0, #32]
  4022b8:	4314      	orrs	r4, r2
  4022ba:	6204      	str	r4, [r0, #32]
  4022bc:	e003      	b.n	4022c6 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4022be:	6a04      	ldr	r4, [r0, #32]
  4022c0:	ea24 0402 	bic.w	r4, r4, r2
  4022c4:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4022c6:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4022ca:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  4022cc:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4022ce:	bf0c      	ite	eq
  4022d0:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4022d2:	4394      	bicne	r4, r2
  4022d4:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4022d6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4022da:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  4022dc:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4022de:	bf0c      	ite	eq
  4022e0:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  4022e4:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  4022e8:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4022ea:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4022ec:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4022ee:	22ff      	movs	r2, #255	; 0xff
  4022f0:	409a      	lsls	r2, r3
  4022f2:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4022f6:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  4022fa:	fa01 f303 	lsl.w	r3, r1, r3
  4022fe:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  402300:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  402302:	2000      	movs	r0, #0
  402304:	bc70      	pop	{r4, r5, r6}
  402306:	4770      	bx	lr

00402308 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  402308:	690b      	ldr	r3, [r1, #16]
  40230a:	4293      	cmp	r3, r2
  40230c:	d307      	bcc.n	40231e <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  40230e:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  402310:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  402312:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  402316:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  40231a:	2000      	movs	r0, #0
  40231c:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  40231e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  402322:	4770      	bx	lr

00402324 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  402324:	2301      	movs	r3, #1
  402326:	fa03 f101 	lsl.w	r1, r3, r1
  40232a:	6041      	str	r1, [r0, #4]
  40232c:	4770      	bx	lr
  40232e:	bf00      	nop

00402330 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  402330:	2301      	movs	r3, #1
  402332:	fa03 f101 	lsl.w	r1, r3, r1
  402336:	6081      	str	r1, [r0, #8]
  402338:	4770      	bx	lr
  40233a:	bf00      	nop

0040233c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40233c:	e7fe      	b.n	40233c <Dummy_Handler>
  40233e:	bf00      	nop

00402340 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402340:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402342:	4b20      	ldr	r3, [pc, #128]	; (4023c4 <Reset_Handler+0x84>)
  402344:	4a20      	ldr	r2, [pc, #128]	; (4023c8 <Reset_Handler+0x88>)
  402346:	429a      	cmp	r2, r3
  402348:	d912      	bls.n	402370 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40234a:	4b20      	ldr	r3, [pc, #128]	; (4023cc <Reset_Handler+0x8c>)
  40234c:	4a1d      	ldr	r2, [pc, #116]	; (4023c4 <Reset_Handler+0x84>)
  40234e:	429a      	cmp	r2, r3
  402350:	d21e      	bcs.n	402390 <Reset_Handler+0x50>
  402352:	4611      	mov	r1, r2
  402354:	3b01      	subs	r3, #1
  402356:	1a9b      	subs	r3, r3, r2
  402358:	f023 0303 	bic.w	r3, r3, #3
  40235c:	3304      	adds	r3, #4
  40235e:	4a1a      	ldr	r2, [pc, #104]	; (4023c8 <Reset_Handler+0x88>)
  402360:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402362:	f852 0b04 	ldr.w	r0, [r2], #4
  402366:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40236a:	429a      	cmp	r2, r3
  40236c:	d1f9      	bne.n	402362 <Reset_Handler+0x22>
  40236e:	e00f      	b.n	402390 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402370:	4b14      	ldr	r3, [pc, #80]	; (4023c4 <Reset_Handler+0x84>)
  402372:	4a15      	ldr	r2, [pc, #84]	; (4023c8 <Reset_Handler+0x88>)
  402374:	429a      	cmp	r2, r3
  402376:	d20b      	bcs.n	402390 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402378:	4b14      	ldr	r3, [pc, #80]	; (4023cc <Reset_Handler+0x8c>)
  40237a:	4a12      	ldr	r2, [pc, #72]	; (4023c4 <Reset_Handler+0x84>)
  40237c:	1a9a      	subs	r2, r3, r2
  40237e:	4814      	ldr	r0, [pc, #80]	; (4023d0 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402380:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402382:	b12a      	cbz	r2, 402390 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  402384:	f851 2904 	ldr.w	r2, [r1], #-4
  402388:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40238c:	4281      	cmp	r1, r0
  40238e:	d1f9      	bne.n	402384 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402390:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402392:	4b10      	ldr	r3, [pc, #64]	; (4023d4 <Reset_Handler+0x94>)
  402394:	4a10      	ldr	r2, [pc, #64]	; (4023d8 <Reset_Handler+0x98>)
  402396:	429a      	cmp	r2, r3
  402398:	d20b      	bcs.n	4023b2 <Reset_Handler+0x72>
  40239a:	1d13      	adds	r3, r2, #4
  40239c:	4a0f      	ldr	r2, [pc, #60]	; (4023dc <Reset_Handler+0x9c>)
  40239e:	1ad2      	subs	r2, r2, r3
  4023a0:	f022 0203 	bic.w	r2, r2, #3
  4023a4:	441a      	add	r2, r3
  4023a6:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4023a8:	2100      	movs	r1, #0
  4023aa:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4023ae:	429a      	cmp	r2, r3
  4023b0:	d1fb      	bne.n	4023aa <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4023b2:	4b0b      	ldr	r3, [pc, #44]	; (4023e0 <Reset_Handler+0xa0>)
  4023b4:	4a0b      	ldr	r2, [pc, #44]	; (4023e4 <Reset_Handler+0xa4>)
  4023b6:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4023b8:	f000 fcb0 	bl	402d1c <__libc_init_array>

	/* Branch to main function */
	main();
  4023bc:	f7fd ff9a 	bl	4002f4 <main>
  4023c0:	e7fe      	b.n	4023c0 <Reset_Handler+0x80>
  4023c2:	bf00      	nop
  4023c4:	20000000 	.word	0x20000000
  4023c8:	00408514 	.word	0x00408514
  4023cc:	200001e8 	.word	0x200001e8
  4023d0:	00408510 	.word	0x00408510
  4023d4:	20000868 	.word	0x20000868
  4023d8:	200001e8 	.word	0x200001e8
  4023dc:	2000086b 	.word	0x2000086b
  4023e0:	e000ed00 	.word	0xe000ed00
  4023e4:	00400000 	.word	0x00400000

004023e8 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4023e8:	4b3d      	ldr	r3, [pc, #244]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  4023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023ec:	f003 0303 	and.w	r3, r3, #3
  4023f0:	2b03      	cmp	r3, #3
  4023f2:	d85d      	bhi.n	4024b0 <SystemCoreClockUpdate+0xc8>
  4023f4:	e8df f003 	tbb	[pc, r3]
  4023f8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4023fc:	4b39      	ldr	r3, [pc, #228]	; (4024e4 <SystemCoreClockUpdate+0xfc>)
  4023fe:	695b      	ldr	r3, [r3, #20]
  402400:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402404:	bf14      	ite	ne
  402406:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40240a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40240e:	4b36      	ldr	r3, [pc, #216]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  402410:	601a      	str	r2, [r3, #0]
  402412:	e04d      	b.n	4024b0 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402414:	4b32      	ldr	r3, [pc, #200]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  402416:	6a1b      	ldr	r3, [r3, #32]
  402418:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40241c:	d003      	beq.n	402426 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40241e:	4a33      	ldr	r2, [pc, #204]	; (4024ec <SystemCoreClockUpdate+0x104>)
  402420:	4b31      	ldr	r3, [pc, #196]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  402422:	601a      	str	r2, [r3, #0]
  402424:	e044      	b.n	4024b0 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402426:	4a32      	ldr	r2, [pc, #200]	; (4024f0 <SystemCoreClockUpdate+0x108>)
  402428:	4b2f      	ldr	r3, [pc, #188]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  40242a:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40242c:	4b2c      	ldr	r3, [pc, #176]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  40242e:	6a1b      	ldr	r3, [r3, #32]
  402430:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402434:	2b10      	cmp	r3, #16
  402436:	d002      	beq.n	40243e <SystemCoreClockUpdate+0x56>
  402438:	2b20      	cmp	r3, #32
  40243a:	d004      	beq.n	402446 <SystemCoreClockUpdate+0x5e>
  40243c:	e038      	b.n	4024b0 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40243e:	4a2d      	ldr	r2, [pc, #180]	; (4024f4 <SystemCoreClockUpdate+0x10c>)
  402440:	4b29      	ldr	r3, [pc, #164]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  402442:	601a      	str	r2, [r3, #0]
			break;
  402444:	e034      	b.n	4024b0 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402446:	4a29      	ldr	r2, [pc, #164]	; (4024ec <SystemCoreClockUpdate+0x104>)
  402448:	4b27      	ldr	r3, [pc, #156]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  40244a:	601a      	str	r2, [r3, #0]
			break;
  40244c:	e030      	b.n	4024b0 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40244e:	4b24      	ldr	r3, [pc, #144]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  402450:	6a1b      	ldr	r3, [r3, #32]
  402452:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402456:	d003      	beq.n	402460 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402458:	4a24      	ldr	r2, [pc, #144]	; (4024ec <SystemCoreClockUpdate+0x104>)
  40245a:	4b23      	ldr	r3, [pc, #140]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  40245c:	601a      	str	r2, [r3, #0]
  40245e:	e012      	b.n	402486 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402460:	4a23      	ldr	r2, [pc, #140]	; (4024f0 <SystemCoreClockUpdate+0x108>)
  402462:	4b21      	ldr	r3, [pc, #132]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  402464:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402466:	4b1e      	ldr	r3, [pc, #120]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  402468:	6a1b      	ldr	r3, [r3, #32]
  40246a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40246e:	2b10      	cmp	r3, #16
  402470:	d002      	beq.n	402478 <SystemCoreClockUpdate+0x90>
  402472:	2b20      	cmp	r3, #32
  402474:	d004      	beq.n	402480 <SystemCoreClockUpdate+0x98>
  402476:	e006      	b.n	402486 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402478:	4a1e      	ldr	r2, [pc, #120]	; (4024f4 <SystemCoreClockUpdate+0x10c>)
  40247a:	4b1b      	ldr	r3, [pc, #108]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  40247c:	601a      	str	r2, [r3, #0]
					break;
  40247e:	e002      	b.n	402486 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402480:	4a1a      	ldr	r2, [pc, #104]	; (4024ec <SystemCoreClockUpdate+0x104>)
  402482:	4b19      	ldr	r3, [pc, #100]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  402484:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402486:	4b16      	ldr	r3, [pc, #88]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  402488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40248a:	f003 0303 	and.w	r3, r3, #3
  40248e:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402490:	4a13      	ldr	r2, [pc, #76]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  402492:	bf07      	ittee	eq
  402494:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402496:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402498:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40249a:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40249c:	4812      	ldr	r0, [pc, #72]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  40249e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4024a2:	6803      	ldr	r3, [r0, #0]
  4024a4:	fb01 3303 	mla	r3, r1, r3, r3
  4024a8:	b2d2      	uxtb	r2, r2
  4024aa:	fbb3 f3f2 	udiv	r3, r3, r2
  4024ae:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4024b0:	4b0b      	ldr	r3, [pc, #44]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  4024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024b8:	2b70      	cmp	r3, #112	; 0x70
  4024ba:	d107      	bne.n	4024cc <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4024bc:	4a0a      	ldr	r2, [pc, #40]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  4024be:	6813      	ldr	r3, [r2, #0]
  4024c0:	490d      	ldr	r1, [pc, #52]	; (4024f8 <SystemCoreClockUpdate+0x110>)
  4024c2:	fba1 1303 	umull	r1, r3, r1, r3
  4024c6:	085b      	lsrs	r3, r3, #1
  4024c8:	6013      	str	r3, [r2, #0]
  4024ca:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024cc:	4b04      	ldr	r3, [pc, #16]	; (4024e0 <SystemCoreClockUpdate+0xf8>)
  4024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4024d0:	4905      	ldr	r1, [pc, #20]	; (4024e8 <SystemCoreClockUpdate+0x100>)
  4024d2:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4024d6:	680b      	ldr	r3, [r1, #0]
  4024d8:	40d3      	lsrs	r3, r2
  4024da:	600b      	str	r3, [r1, #0]
  4024dc:	4770      	bx	lr
  4024de:	bf00      	nop
  4024e0:	400e0400 	.word	0x400e0400
  4024e4:	400e1410 	.word	0x400e1410
  4024e8:	20000010 	.word	0x20000010
  4024ec:	00b71b00 	.word	0x00b71b00
  4024f0:	003d0900 	.word	0x003d0900
  4024f4:	007a1200 	.word	0x007a1200
  4024f8:	aaaaaaab 	.word	0xaaaaaaab

004024fc <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4024fc:	4b1a      	ldr	r3, [pc, #104]	; (402568 <system_init_flash+0x6c>)
  4024fe:	4298      	cmp	r0, r3
  402500:	d807      	bhi.n	402512 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402502:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  402506:	4a19      	ldr	r2, [pc, #100]	; (40256c <system_init_flash+0x70>)
  402508:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40250a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40250e:	6013      	str	r3, [r2, #0]
  402510:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402512:	4b17      	ldr	r3, [pc, #92]	; (402570 <system_init_flash+0x74>)
  402514:	4298      	cmp	r0, r3
  402516:	d806      	bhi.n	402526 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402518:	4b16      	ldr	r3, [pc, #88]	; (402574 <system_init_flash+0x78>)
  40251a:	4a14      	ldr	r2, [pc, #80]	; (40256c <system_init_flash+0x70>)
  40251c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40251e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402522:	6013      	str	r3, [r2, #0]
  402524:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402526:	4b14      	ldr	r3, [pc, #80]	; (402578 <system_init_flash+0x7c>)
  402528:	4298      	cmp	r0, r3
  40252a:	d806      	bhi.n	40253a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40252c:	4b13      	ldr	r3, [pc, #76]	; (40257c <system_init_flash+0x80>)
  40252e:	4a0f      	ldr	r2, [pc, #60]	; (40256c <system_init_flash+0x70>)
  402530:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402532:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402536:	6013      	str	r3, [r2, #0]
  402538:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40253a:	4b11      	ldr	r3, [pc, #68]	; (402580 <system_init_flash+0x84>)
  40253c:	4298      	cmp	r0, r3
  40253e:	d806      	bhi.n	40254e <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402540:	4b10      	ldr	r3, [pc, #64]	; (402584 <system_init_flash+0x88>)
  402542:	4a0a      	ldr	r2, [pc, #40]	; (40256c <system_init_flash+0x70>)
  402544:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402546:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40254a:	6013      	str	r3, [r2, #0]
  40254c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40254e:	4b0e      	ldr	r3, [pc, #56]	; (402588 <system_init_flash+0x8c>)
  402550:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402552:	bf94      	ite	ls
  402554:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402558:	4b0c      	ldrhi	r3, [pc, #48]	; (40258c <system_init_flash+0x90>)
  40255a:	4a04      	ldr	r2, [pc, #16]	; (40256c <system_init_flash+0x70>)
  40255c:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40255e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402562:	6013      	str	r3, [r2, #0]
  402564:	4770      	bx	lr
  402566:	bf00      	nop
  402568:	01312cff 	.word	0x01312cff
  40256c:	400e0a00 	.word	0x400e0a00
  402570:	026259ff 	.word	0x026259ff
  402574:	04000100 	.word	0x04000100
  402578:	039386ff 	.word	0x039386ff
  40257c:	04000200 	.word	0x04000200
  402580:	04c4b3ff 	.word	0x04c4b3ff
  402584:	04000300 	.word	0x04000300
  402588:	05f5e0ff 	.word	0x05f5e0ff
  40258c:	04000500 	.word	0x04000500

00402590 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402590:	4b09      	ldr	r3, [pc, #36]	; (4025b8 <_sbrk+0x28>)
  402592:	681b      	ldr	r3, [r3, #0]
  402594:	b913      	cbnz	r3, 40259c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  402596:	4a09      	ldr	r2, [pc, #36]	; (4025bc <_sbrk+0x2c>)
  402598:	4b07      	ldr	r3, [pc, #28]	; (4025b8 <_sbrk+0x28>)
  40259a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40259c:	4b06      	ldr	r3, [pc, #24]	; (4025b8 <_sbrk+0x28>)
  40259e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4025a0:	181a      	adds	r2, r3, r0
  4025a2:	4907      	ldr	r1, [pc, #28]	; (4025c0 <_sbrk+0x30>)
  4025a4:	4291      	cmp	r1, r2
  4025a6:	db04      	blt.n	4025b2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4025a8:	4610      	mov	r0, r2
  4025aa:	4a03      	ldr	r2, [pc, #12]	; (4025b8 <_sbrk+0x28>)
  4025ac:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4025ae:	4618      	mov	r0, r3
  4025b0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4025b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4025b6:	4770      	bx	lr
  4025b8:	200004ec 	.word	0x200004ec
  4025bc:	20003868 	.word	0x20003868
  4025c0:	20027ffc 	.word	0x20027ffc

004025c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4025c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4025c8:	4770      	bx	lr
  4025ca:	bf00      	nop

004025cc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4025cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4025d0:	604b      	str	r3, [r1, #4]

	return 0;
}
  4025d2:	2000      	movs	r0, #0
  4025d4:	4770      	bx	lr
  4025d6:	bf00      	nop

004025d8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4025d8:	2001      	movs	r0, #1
  4025da:	4770      	bx	lr

004025dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4025dc:	2000      	movs	r0, #0
  4025de:	4770      	bx	lr

004025e0 <atan2>:
  4025e0:	f000 b85e 	b.w	4026a0 <__ieee754_atan2>

004025e4 <sqrt>:
  4025e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025e8:	b08b      	sub	sp, #44	; 0x2c
  4025ea:	4604      	mov	r4, r0
  4025ec:	460d      	mov	r5, r1
  4025ee:	f000 f921 	bl	402834 <__ieee754_sqrt>
  4025f2:	4b28      	ldr	r3, [pc, #160]	; (402694 <sqrt+0xb0>)
  4025f4:	f993 a000 	ldrsb.w	sl, [r3]
  4025f8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  4025fc:	4606      	mov	r6, r0
  4025fe:	460f      	mov	r7, r1
  402600:	d012      	beq.n	402628 <sqrt+0x44>
  402602:	4622      	mov	r2, r4
  402604:	462b      	mov	r3, r5
  402606:	4620      	mov	r0, r4
  402608:	4629      	mov	r1, r5
  40260a:	f004 ffeb 	bl	4075e4 <__aeabi_dcmpun>
  40260e:	4683      	mov	fp, r0
  402610:	b950      	cbnz	r0, 402628 <sqrt+0x44>
  402612:	f04f 0800 	mov.w	r8, #0
  402616:	f04f 0900 	mov.w	r9, #0
  40261a:	4642      	mov	r2, r8
  40261c:	464b      	mov	r3, r9
  40261e:	4620      	mov	r0, r4
  402620:	4629      	mov	r1, r5
  402622:	f004 ffb7 	bl	407594 <__aeabi_dcmplt>
  402626:	b920      	cbnz	r0, 402632 <sqrt+0x4e>
  402628:	4630      	mov	r0, r6
  40262a:	4639      	mov	r1, r7
  40262c:	b00b      	add	sp, #44	; 0x2c
  40262e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402632:	4b19      	ldr	r3, [pc, #100]	; (402698 <sqrt+0xb4>)
  402634:	f8cd b020 	str.w	fp, [sp, #32]
  402638:	2201      	movs	r2, #1
  40263a:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40263e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  402642:	e88d 000c 	stmia.w	sp, {r2, r3}
  402646:	f1ba 0f00 	cmp.w	sl, #0
  40264a:	d015      	beq.n	402678 <sqrt+0x94>
  40264c:	4642      	mov	r2, r8
  40264e:	464b      	mov	r3, r9
  402650:	4640      	mov	r0, r8
  402652:	4649      	mov	r1, r9
  402654:	f004 fe56 	bl	407304 <__aeabi_ddiv>
  402658:	f1ba 0f02 	cmp.w	sl, #2
  40265c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402660:	d10c      	bne.n	40267c <sqrt+0x98>
  402662:	f000 fb55 	bl	402d10 <__errno>
  402666:	2321      	movs	r3, #33	; 0x21
  402668:	6003      	str	r3, [r0, #0]
  40266a:	9b08      	ldr	r3, [sp, #32]
  40266c:	b963      	cbnz	r3, 402688 <sqrt+0xa4>
  40266e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402672:	b00b      	add	sp, #44	; 0x2c
  402674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402678:	e9cd 8906 	strd	r8, r9, [sp, #24]
  40267c:	4668      	mov	r0, sp
  40267e:	f000 fb3d 	bl	402cfc <matherr>
  402682:	2800      	cmp	r0, #0
  402684:	d1f1      	bne.n	40266a <sqrt+0x86>
  402686:	e7ec      	b.n	402662 <sqrt+0x7e>
  402688:	f000 fb42 	bl	402d10 <__errno>
  40268c:	9b08      	ldr	r3, [sp, #32]
  40268e:	6003      	str	r3, [r0, #0]
  402690:	e7ed      	b.n	40266e <sqrt+0x8a>
  402692:	bf00      	nop
  402694:	20000014 	.word	0x20000014
  402698:	00408188 	.word	0x00408188
  40269c:	00000000 	.word	0x00000000

004026a0 <__ieee754_atan2>:
  4026a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026a4:	4254      	negs	r4, r2
  4026a6:	4314      	orrs	r4, r2
  4026a8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  4026ac:	f8df e180 	ldr.w	lr, [pc, #384]	; 402830 <__ieee754_atan2+0x190>
  4026b0:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  4026b4:	4574      	cmp	r4, lr
  4026b6:	4606      	mov	r6, r0
  4026b8:	460d      	mov	r5, r1
  4026ba:	d83e      	bhi.n	40273a <__ieee754_atan2+0x9a>
  4026bc:	4244      	negs	r4, r0
  4026be:	4304      	orrs	r4, r0
  4026c0:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  4026c4:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  4026c8:	4574      	cmp	r4, lr
  4026ca:	468a      	mov	sl, r1
  4026cc:	d835      	bhi.n	40273a <__ieee754_atan2+0x9a>
  4026ce:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  4026d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  4026d6:	4314      	orrs	r4, r2
  4026d8:	d044      	beq.n	402764 <__ieee754_atan2+0xc4>
  4026da:	179c      	asrs	r4, r3, #30
  4026dc:	f004 0402 	and.w	r4, r4, #2
  4026e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  4026e4:	ea50 010b 	orrs.w	r1, r0, fp
  4026e8:	d02f      	beq.n	40274a <__ieee754_atan2+0xaa>
  4026ea:	ea52 0109 	orrs.w	r1, r2, r9
  4026ee:	d033      	beq.n	402758 <__ieee754_atan2+0xb8>
  4026f0:	45f1      	cmp	r9, lr
  4026f2:	d046      	beq.n	402782 <__ieee754_atan2+0xe2>
  4026f4:	45f3      	cmp	fp, lr
  4026f6:	d02f      	beq.n	402758 <__ieee754_atan2+0xb8>
  4026f8:	ebc9 090b 	rsb	r9, r9, fp
  4026fc:	ea4f 5929 	mov.w	r9, r9, asr #20
  402700:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  402704:	dc34      	bgt.n	402770 <__ieee754_atan2+0xd0>
  402706:	2b00      	cmp	r3, #0
  402708:	db57      	blt.n	4027ba <__ieee754_atan2+0x11a>
  40270a:	4630      	mov	r0, r6
  40270c:	4629      	mov	r1, r5
  40270e:	f004 fdf9 	bl	407304 <__aeabi_ddiv>
  402712:	f000 faef 	bl	402cf4 <fabs>
  402716:	f000 f94f 	bl	4029b8 <atan>
  40271a:	2c01      	cmp	r4, #1
  40271c:	d04a      	beq.n	4027b4 <__ieee754_atan2+0x114>
  40271e:	2c02      	cmp	r4, #2
  402720:	d03b      	beq.n	40279a <__ieee754_atan2+0xfa>
  402722:	b184      	cbz	r4, 402746 <__ieee754_atan2+0xa6>
  402724:	a332      	add	r3, pc, #200	; (adr r3, 4027f0 <__ieee754_atan2+0x150>)
  402726:	e9d3 2300 	ldrd	r2, r3, [r3]
  40272a:	f004 fb0d 	bl	406d48 <__aeabi_dsub>
  40272e:	a332      	add	r3, pc, #200	; (adr r3, 4027f8 <__ieee754_atan2+0x158>)
  402730:	e9d3 2300 	ldrd	r2, r3, [r3]
  402734:	f004 fb08 	bl	406d48 <__aeabi_dsub>
  402738:	e005      	b.n	402746 <__ieee754_atan2+0xa6>
  40273a:	4610      	mov	r0, r2
  40273c:	4619      	mov	r1, r3
  40273e:	4632      	mov	r2, r6
  402740:	462b      	mov	r3, r5
  402742:	f004 fb03 	bl	406d4c <__adddf3>
  402746:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40274a:	2c02      	cmp	r4, #2
  40274c:	d014      	beq.n	402778 <__ieee754_atan2+0xd8>
  40274e:	2c03      	cmp	r4, #3
  402750:	d10c      	bne.n	40276c <__ieee754_atan2+0xcc>
  402752:	482d      	ldr	r0, [pc, #180]	; (402808 <__ieee754_atan2+0x168>)
  402754:	492d      	ldr	r1, [pc, #180]	; (40280c <__ieee754_atan2+0x16c>)
  402756:	e7f6      	b.n	402746 <__ieee754_atan2+0xa6>
  402758:	f1ba 0f00 	cmp.w	sl, #0
  40275c:	482a      	ldr	r0, [pc, #168]	; (402808 <__ieee754_atan2+0x168>)
  40275e:	db0e      	blt.n	40277e <__ieee754_atan2+0xde>
  402760:	492b      	ldr	r1, [pc, #172]	; (402810 <__ieee754_atan2+0x170>)
  402762:	e7f0      	b.n	402746 <__ieee754_atan2+0xa6>
  402764:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402768:	f000 b926 	b.w	4029b8 <atan>
  40276c:	4629      	mov	r1, r5
  40276e:	e7ea      	b.n	402746 <__ieee754_atan2+0xa6>
  402770:	a123      	add	r1, pc, #140	; (adr r1, 402800 <__ieee754_atan2+0x160>)
  402772:	e9d1 0100 	ldrd	r0, r1, [r1]
  402776:	e7d0      	b.n	40271a <__ieee754_atan2+0x7a>
  402778:	4823      	ldr	r0, [pc, #140]	; (402808 <__ieee754_atan2+0x168>)
  40277a:	4926      	ldr	r1, [pc, #152]	; (402814 <__ieee754_atan2+0x174>)
  40277c:	e7e3      	b.n	402746 <__ieee754_atan2+0xa6>
  40277e:	4926      	ldr	r1, [pc, #152]	; (402818 <__ieee754_atan2+0x178>)
  402780:	e7e1      	b.n	402746 <__ieee754_atan2+0xa6>
  402782:	45cb      	cmp	fp, r9
  402784:	d01f      	beq.n	4027c6 <__ieee754_atan2+0x126>
  402786:	2c02      	cmp	r4, #2
  402788:	d0f6      	beq.n	402778 <__ieee754_atan2+0xd8>
  40278a:	2c03      	cmp	r4, #3
  40278c:	d0e1      	beq.n	402752 <__ieee754_atan2+0xb2>
  40278e:	2c01      	cmp	r4, #1
  402790:	f04f 0000 	mov.w	r0, #0
  402794:	d020      	beq.n	4027d8 <__ieee754_atan2+0x138>
  402796:	4601      	mov	r1, r0
  402798:	e7d5      	b.n	402746 <__ieee754_atan2+0xa6>
  40279a:	a315      	add	r3, pc, #84	; (adr r3, 4027f0 <__ieee754_atan2+0x150>)
  40279c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027a0:	f004 fad2 	bl	406d48 <__aeabi_dsub>
  4027a4:	4602      	mov	r2, r0
  4027a6:	460b      	mov	r3, r1
  4027a8:	a113      	add	r1, pc, #76	; (adr r1, 4027f8 <__ieee754_atan2+0x158>)
  4027aa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4027ae:	f004 facb 	bl	406d48 <__aeabi_dsub>
  4027b2:	e7c8      	b.n	402746 <__ieee754_atan2+0xa6>
  4027b4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4027b8:	e7c5      	b.n	402746 <__ieee754_atan2+0xa6>
  4027ba:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  4027be:	daa4      	bge.n	40270a <__ieee754_atan2+0x6a>
  4027c0:	2000      	movs	r0, #0
  4027c2:	2100      	movs	r1, #0
  4027c4:	e7a9      	b.n	40271a <__ieee754_atan2+0x7a>
  4027c6:	2c02      	cmp	r4, #2
  4027c8:	d00e      	beq.n	4027e8 <__ieee754_atan2+0x148>
  4027ca:	2c03      	cmp	r4, #3
  4027cc:	d009      	beq.n	4027e2 <__ieee754_atan2+0x142>
  4027ce:	2c01      	cmp	r4, #1
  4027d0:	480d      	ldr	r0, [pc, #52]	; (402808 <__ieee754_atan2+0x168>)
  4027d2:	d004      	beq.n	4027de <__ieee754_atan2+0x13e>
  4027d4:	4911      	ldr	r1, [pc, #68]	; (40281c <__ieee754_atan2+0x17c>)
  4027d6:	e7b6      	b.n	402746 <__ieee754_atan2+0xa6>
  4027d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4027dc:	e7b3      	b.n	402746 <__ieee754_atan2+0xa6>
  4027de:	4910      	ldr	r1, [pc, #64]	; (402820 <__ieee754_atan2+0x180>)
  4027e0:	e7b1      	b.n	402746 <__ieee754_atan2+0xa6>
  4027e2:	4810      	ldr	r0, [pc, #64]	; (402824 <__ieee754_atan2+0x184>)
  4027e4:	4910      	ldr	r1, [pc, #64]	; (402828 <__ieee754_atan2+0x188>)
  4027e6:	e7ae      	b.n	402746 <__ieee754_atan2+0xa6>
  4027e8:	480e      	ldr	r0, [pc, #56]	; (402824 <__ieee754_atan2+0x184>)
  4027ea:	4910      	ldr	r1, [pc, #64]	; (40282c <__ieee754_atan2+0x18c>)
  4027ec:	e7ab      	b.n	402746 <__ieee754_atan2+0xa6>
  4027ee:	bf00      	nop
  4027f0:	33145c07 	.word	0x33145c07
  4027f4:	3ca1a626 	.word	0x3ca1a626
  4027f8:	54442d18 	.word	0x54442d18
  4027fc:	400921fb 	.word	0x400921fb
  402800:	54442d18 	.word	0x54442d18
  402804:	3ff921fb 	.word	0x3ff921fb
  402808:	54442d18 	.word	0x54442d18
  40280c:	c00921fb 	.word	0xc00921fb
  402810:	3ff921fb 	.word	0x3ff921fb
  402814:	400921fb 	.word	0x400921fb
  402818:	bff921fb 	.word	0xbff921fb
  40281c:	3fe921fb 	.word	0x3fe921fb
  402820:	bfe921fb 	.word	0xbfe921fb
  402824:	7f3321d2 	.word	0x7f3321d2
  402828:	c002d97c 	.word	0xc002d97c
  40282c:	4002d97c 	.word	0x4002d97c
  402830:	7ff00000 	.word	0x7ff00000

00402834 <__ieee754_sqrt>:
  402834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402838:	4e5d      	ldr	r6, [pc, #372]	; (4029b0 <__ieee754_sqrt+0x17c>)
  40283a:	46b6      	mov	lr, r6
  40283c:	400e      	ands	r6, r1
  40283e:	4576      	cmp	r6, lr
  402840:	460c      	mov	r4, r1
  402842:	4605      	mov	r5, r0
  402844:	f000 8095 	beq.w	402972 <__ieee754_sqrt+0x13e>
  402848:	2900      	cmp	r1, #0
  40284a:	460b      	mov	r3, r1
  40284c:	4602      	mov	r2, r0
  40284e:	dd73      	ble.n	402938 <__ieee754_sqrt+0x104>
  402850:	150f      	asrs	r7, r1, #20
  402852:	d07e      	beq.n	402952 <__ieee754_sqrt+0x11e>
  402854:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402858:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40285c:	07f8      	lsls	r0, r7, #31
  40285e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402862:	d464      	bmi.n	40292e <__ieee754_sqrt+0xfa>
  402864:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402868:	2600      	movs	r6, #0
  40286a:	440b      	add	r3, r1
  40286c:	107f      	asrs	r7, r7, #1
  40286e:	0052      	lsls	r2, r2, #1
  402870:	46b6      	mov	lr, r6
  402872:	2016      	movs	r0, #22
  402874:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402878:	eb0e 0401 	add.w	r4, lr, r1
  40287c:	429c      	cmp	r4, r3
  40287e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  402882:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402886:	dc03      	bgt.n	402890 <__ieee754_sqrt+0x5c>
  402888:	1b1b      	subs	r3, r3, r4
  40288a:	eb04 0e01 	add.w	lr, r4, r1
  40288e:	440e      	add	r6, r1
  402890:	3801      	subs	r0, #1
  402892:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  402896:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40289a:	d1ed      	bne.n	402878 <__ieee754_sqrt+0x44>
  40289c:	4684      	mov	ip, r0
  40289e:	2420      	movs	r4, #32
  4028a0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4028a4:	e009      	b.n	4028ba <__ieee754_sqrt+0x86>
  4028a6:	d020      	beq.n	4028ea <__ieee754_sqrt+0xb6>
  4028a8:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  4028ac:	3c01      	subs	r4, #1
  4028ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4028b2:	442b      	add	r3, r5
  4028b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4028b8:	d020      	beq.n	4028fc <__ieee754_sqrt+0xc8>
  4028ba:	459e      	cmp	lr, r3
  4028bc:	eb01 050c 	add.w	r5, r1, ip
  4028c0:	daf1      	bge.n	4028a6 <__ieee754_sqrt+0x72>
  4028c2:	2d00      	cmp	r5, #0
  4028c4:	eb05 0c01 	add.w	ip, r5, r1
  4028c8:	db09      	blt.n	4028de <__ieee754_sqrt+0xaa>
  4028ca:	46f0      	mov	r8, lr
  4028cc:	4295      	cmp	r5, r2
  4028ce:	ebce 0303 	rsb	r3, lr, r3
  4028d2:	d900      	bls.n	4028d6 <__ieee754_sqrt+0xa2>
  4028d4:	3b01      	subs	r3, #1
  4028d6:	1b52      	subs	r2, r2, r5
  4028d8:	4408      	add	r0, r1
  4028da:	46c6      	mov	lr, r8
  4028dc:	e7e4      	b.n	4028a8 <__ieee754_sqrt+0x74>
  4028de:	f1bc 0f00 	cmp.w	ip, #0
  4028e2:	dbf2      	blt.n	4028ca <__ieee754_sqrt+0x96>
  4028e4:	f10e 0801 	add.w	r8, lr, #1
  4028e8:	e7f0      	b.n	4028cc <__ieee754_sqrt+0x98>
  4028ea:	4295      	cmp	r5, r2
  4028ec:	d817      	bhi.n	40291e <__ieee754_sqrt+0xea>
  4028ee:	2d00      	cmp	r5, #0
  4028f0:	eb05 0c01 	add.w	ip, r5, r1
  4028f4:	db47      	blt.n	402986 <__ieee754_sqrt+0x152>
  4028f6:	4698      	mov	r8, r3
  4028f8:	2300      	movs	r3, #0
  4028fa:	e7ec      	b.n	4028d6 <__ieee754_sqrt+0xa2>
  4028fc:	4313      	orrs	r3, r2
  4028fe:	d110      	bne.n	402922 <__ieee754_sqrt+0xee>
  402900:	0840      	lsrs	r0, r0, #1
  402902:	1073      	asrs	r3, r6, #1
  402904:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402908:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40290c:	07f2      	lsls	r2, r6, #31
  40290e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  402912:	bf48      	it	mi
  402914:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402918:	4649      	mov	r1, r9
  40291a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40291e:	4673      	mov	r3, lr
  402920:	e7c2      	b.n	4028a8 <__ieee754_sqrt+0x74>
  402922:	1c41      	adds	r1, r0, #1
  402924:	d033      	beq.n	40298e <__ieee754_sqrt+0x15a>
  402926:	f000 0301 	and.w	r3, r0, #1
  40292a:	4418      	add	r0, r3
  40292c:	e7e8      	b.n	402900 <__ieee754_sqrt+0xcc>
  40292e:	005b      	lsls	r3, r3, #1
  402930:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402934:	0052      	lsls	r2, r2, #1
  402936:	e795      	b.n	402864 <__ieee754_sqrt+0x30>
  402938:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40293c:	4306      	orrs	r6, r0
  40293e:	d0ec      	beq.n	40291a <__ieee754_sqrt+0xe6>
  402940:	bb69      	cbnz	r1, 40299e <__ieee754_sqrt+0x16a>
  402942:	460f      	mov	r7, r1
  402944:	0ad3      	lsrs	r3, r2, #11
  402946:	3f15      	subs	r7, #21
  402948:	0552      	lsls	r2, r2, #21
  40294a:	2b00      	cmp	r3, #0
  40294c:	d0fa      	beq.n	402944 <__ieee754_sqrt+0x110>
  40294e:	02dd      	lsls	r5, r3, #11
  402950:	d420      	bmi.n	402994 <__ieee754_sqrt+0x160>
  402952:	2100      	movs	r1, #0
  402954:	e000      	b.n	402958 <__ieee754_sqrt+0x124>
  402956:	4601      	mov	r1, r0
  402958:	005b      	lsls	r3, r3, #1
  40295a:	02dc      	lsls	r4, r3, #11
  40295c:	f101 0001 	add.w	r0, r1, #1
  402960:	d5f9      	bpl.n	402956 <__ieee754_sqrt+0x122>
  402962:	f1c0 0420 	rsb	r4, r0, #32
  402966:	fa22 f404 	lsr.w	r4, r2, r4
  40296a:	4323      	orrs	r3, r4
  40296c:	1a7f      	subs	r7, r7, r1
  40296e:	4082      	lsls	r2, r0
  402970:	e770      	b.n	402854 <__ieee754_sqrt+0x20>
  402972:	4602      	mov	r2, r0
  402974:	460b      	mov	r3, r1
  402976:	f004 fb9b 	bl	4070b0 <__aeabi_dmul>
  40297a:	462a      	mov	r2, r5
  40297c:	4623      	mov	r3, r4
  40297e:	f004 f9e5 	bl	406d4c <__adddf3>
  402982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402986:	f1bc 0f00 	cmp.w	ip, #0
  40298a:	daab      	bge.n	4028e4 <__ieee754_sqrt+0xb0>
  40298c:	e7b3      	b.n	4028f6 <__ieee754_sqrt+0xc2>
  40298e:	3601      	adds	r6, #1
  402990:	4620      	mov	r0, r4
  402992:	e7b6      	b.n	402902 <__ieee754_sqrt+0xce>
  402994:	2420      	movs	r4, #32
  402996:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  40299a:	2000      	movs	r0, #0
  40299c:	e7e3      	b.n	402966 <__ieee754_sqrt+0x132>
  40299e:	4602      	mov	r2, r0
  4029a0:	460b      	mov	r3, r1
  4029a2:	f004 f9d1 	bl	406d48 <__aeabi_dsub>
  4029a6:	4602      	mov	r2, r0
  4029a8:	460b      	mov	r3, r1
  4029aa:	f004 fcab 	bl	407304 <__aeabi_ddiv>
  4029ae:	e7b4      	b.n	40291a <__ieee754_sqrt+0xe6>
  4029b0:	7ff00000 	.word	0x7ff00000
  4029b4:	00000000 	.word	0x00000000

004029b8 <atan>:
  4029b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029bc:	4bc0      	ldr	r3, [pc, #768]	; (402cc0 <atan+0x308>)
  4029be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4029c2:	429e      	cmp	r6, r3
  4029c4:	460d      	mov	r5, r1
  4029c6:	468a      	mov	sl, r1
  4029c8:	4604      	mov	r4, r0
  4029ca:	dd0f      	ble.n	4029ec <atan+0x34>
  4029cc:	4bbd      	ldr	r3, [pc, #756]	; (402cc4 <atan+0x30c>)
  4029ce:	429e      	cmp	r6, r3
  4029d0:	f300 80b2 	bgt.w	402b38 <atan+0x180>
  4029d4:	f000 80ad 	beq.w	402b32 <atan+0x17a>
  4029d8:	4bbb      	ldr	r3, [pc, #748]	; (402cc8 <atan+0x310>)
  4029da:	49bc      	ldr	r1, [pc, #752]	; (402ccc <atan+0x314>)
  4029dc:	4cbc      	ldr	r4, [pc, #752]	; (402cd0 <atan+0x318>)
  4029de:	f1ba 0f00 	cmp.w	sl, #0
  4029e2:	bfc8      	it	gt
  4029e4:	4619      	movgt	r1, r3
  4029e6:	4620      	mov	r0, r4
  4029e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029ec:	4bb9      	ldr	r3, [pc, #740]	; (402cd4 <atan+0x31c>)
  4029ee:	429e      	cmp	r6, r3
  4029f0:	f300 80bc 	bgt.w	402b6c <atan+0x1b4>
  4029f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  4029f8:	429e      	cmp	r6, r3
  4029fa:	f340 80a7 	ble.w	402b4c <atan+0x194>
  4029fe:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  402a02:	4622      	mov	r2, r4
  402a04:	462b      	mov	r3, r5
  402a06:	4620      	mov	r0, r4
  402a08:	4629      	mov	r1, r5
  402a0a:	f004 fb51 	bl	4070b0 <__aeabi_dmul>
  402a0e:	4602      	mov	r2, r0
  402a10:	460b      	mov	r3, r1
  402a12:	4680      	mov	r8, r0
  402a14:	4689      	mov	r9, r1
  402a16:	f004 fb4b 	bl	4070b0 <__aeabi_dmul>
  402a1a:	a391      	add	r3, pc, #580	; (adr r3, 402c60 <atan+0x2a8>)
  402a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a20:	4606      	mov	r6, r0
  402a22:	460f      	mov	r7, r1
  402a24:	f004 fb44 	bl	4070b0 <__aeabi_dmul>
  402a28:	a38f      	add	r3, pc, #572	; (adr r3, 402c68 <atan+0x2b0>)
  402a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a2e:	f004 f98d 	bl	406d4c <__adddf3>
  402a32:	4632      	mov	r2, r6
  402a34:	463b      	mov	r3, r7
  402a36:	f004 fb3b 	bl	4070b0 <__aeabi_dmul>
  402a3a:	a38d      	add	r3, pc, #564	; (adr r3, 402c70 <atan+0x2b8>)
  402a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a40:	f004 f984 	bl	406d4c <__adddf3>
  402a44:	4632      	mov	r2, r6
  402a46:	463b      	mov	r3, r7
  402a48:	f004 fb32 	bl	4070b0 <__aeabi_dmul>
  402a4c:	a38a      	add	r3, pc, #552	; (adr r3, 402c78 <atan+0x2c0>)
  402a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a52:	f004 f97b 	bl	406d4c <__adddf3>
  402a56:	4632      	mov	r2, r6
  402a58:	463b      	mov	r3, r7
  402a5a:	f004 fb29 	bl	4070b0 <__aeabi_dmul>
  402a5e:	a388      	add	r3, pc, #544	; (adr r3, 402c80 <atan+0x2c8>)
  402a60:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a64:	f004 f972 	bl	406d4c <__adddf3>
  402a68:	4632      	mov	r2, r6
  402a6a:	463b      	mov	r3, r7
  402a6c:	f004 fb20 	bl	4070b0 <__aeabi_dmul>
  402a70:	a385      	add	r3, pc, #532	; (adr r3, 402c88 <atan+0x2d0>)
  402a72:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a76:	f004 f969 	bl	406d4c <__adddf3>
  402a7a:	4642      	mov	r2, r8
  402a7c:	464b      	mov	r3, r9
  402a7e:	f004 fb17 	bl	4070b0 <__aeabi_dmul>
  402a82:	a383      	add	r3, pc, #524	; (adr r3, 402c90 <atan+0x2d8>)
  402a84:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a88:	4680      	mov	r8, r0
  402a8a:	4689      	mov	r9, r1
  402a8c:	4630      	mov	r0, r6
  402a8e:	4639      	mov	r1, r7
  402a90:	f004 fb0e 	bl	4070b0 <__aeabi_dmul>
  402a94:	a380      	add	r3, pc, #512	; (adr r3, 402c98 <atan+0x2e0>)
  402a96:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a9a:	f004 f955 	bl	406d48 <__aeabi_dsub>
  402a9e:	4632      	mov	r2, r6
  402aa0:	463b      	mov	r3, r7
  402aa2:	f004 fb05 	bl	4070b0 <__aeabi_dmul>
  402aa6:	a37e      	add	r3, pc, #504	; (adr r3, 402ca0 <atan+0x2e8>)
  402aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402aac:	f004 f94c 	bl	406d48 <__aeabi_dsub>
  402ab0:	4632      	mov	r2, r6
  402ab2:	463b      	mov	r3, r7
  402ab4:	f004 fafc 	bl	4070b0 <__aeabi_dmul>
  402ab8:	a37b      	add	r3, pc, #492	; (adr r3, 402ca8 <atan+0x2f0>)
  402aba:	e9d3 2300 	ldrd	r2, r3, [r3]
  402abe:	f004 f943 	bl	406d48 <__aeabi_dsub>
  402ac2:	4632      	mov	r2, r6
  402ac4:	463b      	mov	r3, r7
  402ac6:	f004 faf3 	bl	4070b0 <__aeabi_dmul>
  402aca:	a379      	add	r3, pc, #484	; (adr r3, 402cb0 <atan+0x2f8>)
  402acc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ad0:	f004 f93a 	bl	406d48 <__aeabi_dsub>
  402ad4:	4632      	mov	r2, r6
  402ad6:	463b      	mov	r3, r7
  402ad8:	f004 faea 	bl	4070b0 <__aeabi_dmul>
  402adc:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402ae0:	4602      	mov	r2, r0
  402ae2:	460b      	mov	r3, r1
  402ae4:	d069      	beq.n	402bba <atan+0x202>
  402ae6:	4640      	mov	r0, r8
  402ae8:	4649      	mov	r1, r9
  402aea:	f004 f92f 	bl	406d4c <__adddf3>
  402aee:	4622      	mov	r2, r4
  402af0:	462b      	mov	r3, r5
  402af2:	f004 fadd 	bl	4070b0 <__aeabi_dmul>
  402af6:	4e78      	ldr	r6, [pc, #480]	; (402cd8 <atan+0x320>)
  402af8:	4b78      	ldr	r3, [pc, #480]	; (402cdc <atan+0x324>)
  402afa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402afe:	445e      	add	r6, fp
  402b00:	449b      	add	fp, r3
  402b02:	e9db 2300 	ldrd	r2, r3, [fp]
  402b06:	f004 f91f 	bl	406d48 <__aeabi_dsub>
  402b0a:	4622      	mov	r2, r4
  402b0c:	462b      	mov	r3, r5
  402b0e:	f004 f91b 	bl	406d48 <__aeabi_dsub>
  402b12:	4602      	mov	r2, r0
  402b14:	460b      	mov	r3, r1
  402b16:	e9d6 0100 	ldrd	r0, r1, [r6]
  402b1a:	f004 f915 	bl	406d48 <__aeabi_dsub>
  402b1e:	f1ba 0f00 	cmp.w	sl, #0
  402b22:	4604      	mov	r4, r0
  402b24:	f6bf af5f 	bge.w	4029e6 <atan+0x2e>
  402b28:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402b2c:	4620      	mov	r0, r4
  402b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b32:	2800      	cmp	r0, #0
  402b34:	f43f af50 	beq.w	4029d8 <atan+0x20>
  402b38:	4622      	mov	r2, r4
  402b3a:	4620      	mov	r0, r4
  402b3c:	462b      	mov	r3, r5
  402b3e:	4629      	mov	r1, r5
  402b40:	f004 f904 	bl	406d4c <__adddf3>
  402b44:	4604      	mov	r4, r0
  402b46:	4620      	mov	r0, r4
  402b48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b4c:	a35a      	add	r3, pc, #360	; (adr r3, 402cb8 <atan+0x300>)
  402b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b52:	f004 f8fb 	bl	406d4c <__adddf3>
  402b56:	2200      	movs	r2, #0
  402b58:	4b61      	ldr	r3, [pc, #388]	; (402ce0 <atan+0x328>)
  402b5a:	f004 fd39 	bl	4075d0 <__aeabi_dcmpgt>
  402b5e:	2800      	cmp	r0, #0
  402b60:	f43f af4d 	beq.w	4029fe <atan+0x46>
  402b64:	4629      	mov	r1, r5
  402b66:	4620      	mov	r0, r4
  402b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b6c:	f000 f8c2 	bl	402cf4 <fabs>
  402b70:	4b5c      	ldr	r3, [pc, #368]	; (402ce4 <atan+0x32c>)
  402b72:	429e      	cmp	r6, r3
  402b74:	4604      	mov	r4, r0
  402b76:	460d      	mov	r5, r1
  402b78:	dc2f      	bgt.n	402bda <atan+0x222>
  402b7a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  402b7e:	429e      	cmp	r6, r3
  402b80:	dc54      	bgt.n	402c2c <atan+0x274>
  402b82:	4602      	mov	r2, r0
  402b84:	460b      	mov	r3, r1
  402b86:	f004 f8e1 	bl	406d4c <__adddf3>
  402b8a:	2200      	movs	r2, #0
  402b8c:	4b54      	ldr	r3, [pc, #336]	; (402ce0 <atan+0x328>)
  402b8e:	f004 f8db 	bl	406d48 <__aeabi_dsub>
  402b92:	2200      	movs	r2, #0
  402b94:	4606      	mov	r6, r0
  402b96:	460f      	mov	r7, r1
  402b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402b9c:	4620      	mov	r0, r4
  402b9e:	4629      	mov	r1, r5
  402ba0:	f004 f8d4 	bl	406d4c <__adddf3>
  402ba4:	4602      	mov	r2, r0
  402ba6:	460b      	mov	r3, r1
  402ba8:	4630      	mov	r0, r6
  402baa:	4639      	mov	r1, r7
  402bac:	f004 fbaa 	bl	407304 <__aeabi_ddiv>
  402bb0:	f04f 0b00 	mov.w	fp, #0
  402bb4:	4604      	mov	r4, r0
  402bb6:	460d      	mov	r5, r1
  402bb8:	e723      	b.n	402a02 <atan+0x4a>
  402bba:	4640      	mov	r0, r8
  402bbc:	4649      	mov	r1, r9
  402bbe:	f004 f8c5 	bl	406d4c <__adddf3>
  402bc2:	4622      	mov	r2, r4
  402bc4:	462b      	mov	r3, r5
  402bc6:	f004 fa73 	bl	4070b0 <__aeabi_dmul>
  402bca:	4602      	mov	r2, r0
  402bcc:	460b      	mov	r3, r1
  402bce:	4620      	mov	r0, r4
  402bd0:	4629      	mov	r1, r5
  402bd2:	f004 f8b9 	bl	406d48 <__aeabi_dsub>
  402bd6:	4604      	mov	r4, r0
  402bd8:	e705      	b.n	4029e6 <atan+0x2e>
  402bda:	4b43      	ldr	r3, [pc, #268]	; (402ce8 <atan+0x330>)
  402bdc:	429e      	cmp	r6, r3
  402bde:	dc1a      	bgt.n	402c16 <atan+0x25e>
  402be0:	2200      	movs	r2, #0
  402be2:	4b42      	ldr	r3, [pc, #264]	; (402cec <atan+0x334>)
  402be4:	f004 f8b0 	bl	406d48 <__aeabi_dsub>
  402be8:	2200      	movs	r2, #0
  402bea:	4606      	mov	r6, r0
  402bec:	460f      	mov	r7, r1
  402bee:	4b3f      	ldr	r3, [pc, #252]	; (402cec <atan+0x334>)
  402bf0:	4620      	mov	r0, r4
  402bf2:	4629      	mov	r1, r5
  402bf4:	f004 fa5c 	bl	4070b0 <__aeabi_dmul>
  402bf8:	2200      	movs	r2, #0
  402bfa:	4b39      	ldr	r3, [pc, #228]	; (402ce0 <atan+0x328>)
  402bfc:	f004 f8a6 	bl	406d4c <__adddf3>
  402c00:	4602      	mov	r2, r0
  402c02:	460b      	mov	r3, r1
  402c04:	4630      	mov	r0, r6
  402c06:	4639      	mov	r1, r7
  402c08:	f004 fb7c 	bl	407304 <__aeabi_ddiv>
  402c0c:	f04f 0b02 	mov.w	fp, #2
  402c10:	4604      	mov	r4, r0
  402c12:	460d      	mov	r5, r1
  402c14:	e6f5      	b.n	402a02 <atan+0x4a>
  402c16:	4602      	mov	r2, r0
  402c18:	460b      	mov	r3, r1
  402c1a:	2000      	movs	r0, #0
  402c1c:	4934      	ldr	r1, [pc, #208]	; (402cf0 <atan+0x338>)
  402c1e:	f004 fb71 	bl	407304 <__aeabi_ddiv>
  402c22:	f04f 0b03 	mov.w	fp, #3
  402c26:	4604      	mov	r4, r0
  402c28:	460d      	mov	r5, r1
  402c2a:	e6ea      	b.n	402a02 <atan+0x4a>
  402c2c:	2200      	movs	r2, #0
  402c2e:	4b2c      	ldr	r3, [pc, #176]	; (402ce0 <atan+0x328>)
  402c30:	f004 f88a 	bl	406d48 <__aeabi_dsub>
  402c34:	2200      	movs	r2, #0
  402c36:	4606      	mov	r6, r0
  402c38:	460f      	mov	r7, r1
  402c3a:	4b29      	ldr	r3, [pc, #164]	; (402ce0 <atan+0x328>)
  402c3c:	4620      	mov	r0, r4
  402c3e:	4629      	mov	r1, r5
  402c40:	f004 f884 	bl	406d4c <__adddf3>
  402c44:	4602      	mov	r2, r0
  402c46:	460b      	mov	r3, r1
  402c48:	4630      	mov	r0, r6
  402c4a:	4639      	mov	r1, r7
  402c4c:	f004 fb5a 	bl	407304 <__aeabi_ddiv>
  402c50:	f04f 0b01 	mov.w	fp, #1
  402c54:	4604      	mov	r4, r0
  402c56:	460d      	mov	r5, r1
  402c58:	e6d3      	b.n	402a02 <atan+0x4a>
  402c5a:	bf00      	nop
  402c5c:	f3af 8000 	nop.w
  402c60:	e322da11 	.word	0xe322da11
  402c64:	3f90ad3a 	.word	0x3f90ad3a
  402c68:	24760deb 	.word	0x24760deb
  402c6c:	3fa97b4b 	.word	0x3fa97b4b
  402c70:	a0d03d51 	.word	0xa0d03d51
  402c74:	3fb10d66 	.word	0x3fb10d66
  402c78:	c54c206e 	.word	0xc54c206e
  402c7c:	3fb745cd 	.word	0x3fb745cd
  402c80:	920083ff 	.word	0x920083ff
  402c84:	3fc24924 	.word	0x3fc24924
  402c88:	5555550d 	.word	0x5555550d
  402c8c:	3fd55555 	.word	0x3fd55555
  402c90:	2c6a6c2f 	.word	0x2c6a6c2f
  402c94:	bfa2b444 	.word	0xbfa2b444
  402c98:	52defd9a 	.word	0x52defd9a
  402c9c:	3fadde2d 	.word	0x3fadde2d
  402ca0:	af749a6d 	.word	0xaf749a6d
  402ca4:	3fb3b0f2 	.word	0x3fb3b0f2
  402ca8:	fe231671 	.word	0xfe231671
  402cac:	3fbc71c6 	.word	0x3fbc71c6
  402cb0:	9998ebc4 	.word	0x9998ebc4
  402cb4:	3fc99999 	.word	0x3fc99999
  402cb8:	8800759c 	.word	0x8800759c
  402cbc:	7e37e43c 	.word	0x7e37e43c
  402cc0:	440fffff 	.word	0x440fffff
  402cc4:	7ff00000 	.word	0x7ff00000
  402cc8:	3ff921fb 	.word	0x3ff921fb
  402ccc:	bff921fb 	.word	0xbff921fb
  402cd0:	54442d18 	.word	0x54442d18
  402cd4:	3fdbffff 	.word	0x3fdbffff
  402cd8:	004081b0 	.word	0x004081b0
  402cdc:	00408190 	.word	0x00408190
  402ce0:	3ff00000 	.word	0x3ff00000
  402ce4:	3ff2ffff 	.word	0x3ff2ffff
  402ce8:	40037fff 	.word	0x40037fff
  402cec:	3ff80000 	.word	0x3ff80000
  402cf0:	bff00000 	.word	0xbff00000

00402cf4 <fabs>:
  402cf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402cf8:	4770      	bx	lr
  402cfa:	bf00      	nop

00402cfc <matherr>:
  402cfc:	2000      	movs	r0, #0
  402cfe:	4770      	bx	lr

00402d00 <atof>:
  402d00:	2100      	movs	r1, #0
  402d02:	f001 bc11 	b.w	404528 <strtod>

00402d06 <atoi>:
  402d06:	220a      	movs	r2, #10
  402d08:	2100      	movs	r1, #0
  402d0a:	f001 bcd5 	b.w	4046b8 <strtol>
	...

00402d10 <__errno>:
  402d10:	4b01      	ldr	r3, [pc, #4]	; (402d18 <__errno+0x8>)
  402d12:	6818      	ldr	r0, [r3, #0]
  402d14:	4770      	bx	lr
  402d16:	bf00      	nop
  402d18:	20000078 	.word	0x20000078

00402d1c <__libc_init_array>:
  402d1c:	b570      	push	{r4, r5, r6, lr}
  402d1e:	4b0e      	ldr	r3, [pc, #56]	; (402d58 <__libc_init_array+0x3c>)
  402d20:	4c0e      	ldr	r4, [pc, #56]	; (402d5c <__libc_init_array+0x40>)
  402d22:	1ae4      	subs	r4, r4, r3
  402d24:	10a4      	asrs	r4, r4, #2
  402d26:	2500      	movs	r5, #0
  402d28:	461e      	mov	r6, r3
  402d2a:	42a5      	cmp	r5, r4
  402d2c:	d004      	beq.n	402d38 <__libc_init_array+0x1c>
  402d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d32:	4798      	blx	r3
  402d34:	3501      	adds	r5, #1
  402d36:	e7f8      	b.n	402d2a <__libc_init_array+0xe>
  402d38:	f005 fbd6 	bl	4084e8 <_init>
  402d3c:	4c08      	ldr	r4, [pc, #32]	; (402d60 <__libc_init_array+0x44>)
  402d3e:	4b09      	ldr	r3, [pc, #36]	; (402d64 <__libc_init_array+0x48>)
  402d40:	1ae4      	subs	r4, r4, r3
  402d42:	10a4      	asrs	r4, r4, #2
  402d44:	2500      	movs	r5, #0
  402d46:	461e      	mov	r6, r3
  402d48:	42a5      	cmp	r5, r4
  402d4a:	d004      	beq.n	402d56 <__libc_init_array+0x3a>
  402d4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d50:	4798      	blx	r3
  402d52:	3501      	adds	r5, #1
  402d54:	e7f8      	b.n	402d48 <__libc_init_array+0x2c>
  402d56:	bd70      	pop	{r4, r5, r6, pc}
  402d58:	004084f4 	.word	0x004084f4
  402d5c:	004084f4 	.word	0x004084f4
  402d60:	004084f8 	.word	0x004084f8
  402d64:	004084f4 	.word	0x004084f4

00402d68 <memcpy>:
  402d68:	b510      	push	{r4, lr}
  402d6a:	1e43      	subs	r3, r0, #1
  402d6c:	440a      	add	r2, r1
  402d6e:	4291      	cmp	r1, r2
  402d70:	d004      	beq.n	402d7c <memcpy+0x14>
  402d72:	f811 4b01 	ldrb.w	r4, [r1], #1
  402d76:	f803 4f01 	strb.w	r4, [r3, #1]!
  402d7a:	e7f8      	b.n	402d6e <memcpy+0x6>
  402d7c:	bd10      	pop	{r4, pc}

00402d7e <memset>:
  402d7e:	4402      	add	r2, r0
  402d80:	4603      	mov	r3, r0
  402d82:	4293      	cmp	r3, r2
  402d84:	d002      	beq.n	402d8c <memset+0xe>
  402d86:	f803 1b01 	strb.w	r1, [r3], #1
  402d8a:	e7fa      	b.n	402d82 <memset+0x4>
  402d8c:	4770      	bx	lr

00402d8e <__cvt>:
  402d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d92:	b088      	sub	sp, #32
  402d94:	2b00      	cmp	r3, #0
  402d96:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402d98:	9912      	ldr	r1, [sp, #72]	; 0x48
  402d9a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402d9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402da0:	461e      	mov	r6, r3
  402da2:	f027 0720 	bic.w	r7, r7, #32
  402da6:	bfbb      	ittet	lt
  402da8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402dac:	461e      	movlt	r6, r3
  402dae:	2300      	movge	r3, #0
  402db0:	232d      	movlt	r3, #45	; 0x2d
  402db2:	2f46      	cmp	r7, #70	; 0x46
  402db4:	4614      	mov	r4, r2
  402db6:	700b      	strb	r3, [r1, #0]
  402db8:	d003      	beq.n	402dc2 <__cvt+0x34>
  402dba:	2f45      	cmp	r7, #69	; 0x45
  402dbc:	d103      	bne.n	402dc6 <__cvt+0x38>
  402dbe:	3501      	adds	r5, #1
  402dc0:	e001      	b.n	402dc6 <__cvt+0x38>
  402dc2:	2303      	movs	r3, #3
  402dc4:	e000      	b.n	402dc8 <__cvt+0x3a>
  402dc6:	2302      	movs	r3, #2
  402dc8:	aa07      	add	r2, sp, #28
  402dca:	9204      	str	r2, [sp, #16]
  402dcc:	aa06      	add	r2, sp, #24
  402dce:	9203      	str	r2, [sp, #12]
  402dd0:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402dd4:	4622      	mov	r2, r4
  402dd6:	4633      	mov	r3, r6
  402dd8:	f001 fdd6 	bl	404988 <_dtoa_r>
  402ddc:	2f47      	cmp	r7, #71	; 0x47
  402dde:	4680      	mov	r8, r0
  402de0:	d102      	bne.n	402de8 <__cvt+0x5a>
  402de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402de4:	07db      	lsls	r3, r3, #31
  402de6:	d528      	bpl.n	402e3a <__cvt+0xac>
  402de8:	2f46      	cmp	r7, #70	; 0x46
  402dea:	eb08 0905 	add.w	r9, r8, r5
  402dee:	d111      	bne.n	402e14 <__cvt+0x86>
  402df0:	f898 3000 	ldrb.w	r3, [r8]
  402df4:	2b30      	cmp	r3, #48	; 0x30
  402df6:	d10a      	bne.n	402e0e <__cvt+0x80>
  402df8:	2200      	movs	r2, #0
  402dfa:	2300      	movs	r3, #0
  402dfc:	4620      	mov	r0, r4
  402dfe:	4631      	mov	r1, r6
  402e00:	f004 fbbe 	bl	407580 <__aeabi_dcmpeq>
  402e04:	b918      	cbnz	r0, 402e0e <__cvt+0x80>
  402e06:	f1c5 0501 	rsb	r5, r5, #1
  402e0a:	f8ca 5000 	str.w	r5, [sl]
  402e0e:	f8da 3000 	ldr.w	r3, [sl]
  402e12:	4499      	add	r9, r3
  402e14:	2200      	movs	r2, #0
  402e16:	2300      	movs	r3, #0
  402e18:	4620      	mov	r0, r4
  402e1a:	4631      	mov	r1, r6
  402e1c:	f004 fbb0 	bl	407580 <__aeabi_dcmpeq>
  402e20:	b908      	cbnz	r0, 402e26 <__cvt+0x98>
  402e22:	2230      	movs	r2, #48	; 0x30
  402e24:	e002      	b.n	402e2c <__cvt+0x9e>
  402e26:	f8cd 901c 	str.w	r9, [sp, #28]
  402e2a:	e006      	b.n	402e3a <__cvt+0xac>
  402e2c:	9b07      	ldr	r3, [sp, #28]
  402e2e:	4599      	cmp	r9, r3
  402e30:	d903      	bls.n	402e3a <__cvt+0xac>
  402e32:	1c59      	adds	r1, r3, #1
  402e34:	9107      	str	r1, [sp, #28]
  402e36:	701a      	strb	r2, [r3, #0]
  402e38:	e7f8      	b.n	402e2c <__cvt+0x9e>
  402e3a:	9b07      	ldr	r3, [sp, #28]
  402e3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402e3e:	ebc8 0303 	rsb	r3, r8, r3
  402e42:	4640      	mov	r0, r8
  402e44:	6013      	str	r3, [r2, #0]
  402e46:	b008      	add	sp, #32
  402e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402e4c <__exponent>:
  402e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402e4e:	4603      	mov	r3, r0
  402e50:	2900      	cmp	r1, #0
  402e52:	bfb8      	it	lt
  402e54:	4249      	neglt	r1, r1
  402e56:	f803 2b02 	strb.w	r2, [r3], #2
  402e5a:	bfb4      	ite	lt
  402e5c:	222d      	movlt	r2, #45	; 0x2d
  402e5e:	222b      	movge	r2, #43	; 0x2b
  402e60:	2909      	cmp	r1, #9
  402e62:	7042      	strb	r2, [r0, #1]
  402e64:	dd19      	ble.n	402e9a <__exponent+0x4e>
  402e66:	f10d 0207 	add.w	r2, sp, #7
  402e6a:	4616      	mov	r6, r2
  402e6c:	250a      	movs	r5, #10
  402e6e:	fb91 f4f5 	sdiv	r4, r1, r5
  402e72:	fb05 1114 	mls	r1, r5, r4, r1
  402e76:	3130      	adds	r1, #48	; 0x30
  402e78:	2c09      	cmp	r4, #9
  402e7a:	f802 1d01 	strb.w	r1, [r2, #-1]!
  402e7e:	4621      	mov	r1, r4
  402e80:	dcf5      	bgt.n	402e6e <__exponent+0x22>
  402e82:	3130      	adds	r1, #48	; 0x30
  402e84:	1e54      	subs	r4, r2, #1
  402e86:	f802 1c01 	strb.w	r1, [r2, #-1]
  402e8a:	42b4      	cmp	r4, r6
  402e8c:	461a      	mov	r2, r3
  402e8e:	d20a      	bcs.n	402ea6 <__exponent+0x5a>
  402e90:	f814 2b01 	ldrb.w	r2, [r4], #1
  402e94:	f803 2b01 	strb.w	r2, [r3], #1
  402e98:	e7f7      	b.n	402e8a <__exponent+0x3e>
  402e9a:	2430      	movs	r4, #48	; 0x30
  402e9c:	461a      	mov	r2, r3
  402e9e:	4421      	add	r1, r4
  402ea0:	f802 4b02 	strb.w	r4, [r2], #2
  402ea4:	7059      	strb	r1, [r3, #1]
  402ea6:	1a10      	subs	r0, r2, r0
  402ea8:	b002      	add	sp, #8
  402eaa:	bd70      	pop	{r4, r5, r6, pc}

00402eac <_printf_float>:
  402eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402eb0:	b091      	sub	sp, #68	; 0x44
  402eb2:	460c      	mov	r4, r1
  402eb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  402eb8:	4616      	mov	r6, r2
  402eba:	461f      	mov	r7, r3
  402ebc:	4605      	mov	r5, r0
  402ebe:	f002 ff9f 	bl	405e00 <_localeconv_r>
  402ec2:	6803      	ldr	r3, [r0, #0]
  402ec4:	9309      	str	r3, [sp, #36]	; 0x24
  402ec6:	4618      	mov	r0, r3
  402ec8:	f000 fd0e 	bl	4038e8 <strlen>
  402ecc:	2300      	movs	r3, #0
  402ece:	930e      	str	r3, [sp, #56]	; 0x38
  402ed0:	f8d8 3000 	ldr.w	r3, [r8]
  402ed4:	900a      	str	r0, [sp, #40]	; 0x28
  402ed6:	3307      	adds	r3, #7
  402ed8:	f023 0307 	bic.w	r3, r3, #7
  402edc:	f103 0208 	add.w	r2, r3, #8
  402ee0:	f894 9018 	ldrb.w	r9, [r4, #24]
  402ee4:	f8d4 b000 	ldr.w	fp, [r4]
  402ee8:	f8c8 2000 	str.w	r2, [r8]
  402eec:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ef0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402ef4:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  402ef8:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402efc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402f00:	930b      	str	r3, [sp, #44]	; 0x2c
  402f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402f06:	4ba7      	ldr	r3, [pc, #668]	; (4031a4 <_printf_float+0x2f8>)
  402f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f0a:	4640      	mov	r0, r8
  402f0c:	f004 fb6a 	bl	4075e4 <__aeabi_dcmpun>
  402f10:	b9a0      	cbnz	r0, 402f3c <_printf_float+0x90>
  402f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402f16:	4ba3      	ldr	r3, [pc, #652]	; (4031a4 <_printf_float+0x2f8>)
  402f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f1a:	4640      	mov	r0, r8
  402f1c:	f004 fb44 	bl	4075a8 <__aeabi_dcmple>
  402f20:	b960      	cbnz	r0, 402f3c <_printf_float+0x90>
  402f22:	2200      	movs	r2, #0
  402f24:	2300      	movs	r3, #0
  402f26:	4640      	mov	r0, r8
  402f28:	4651      	mov	r1, sl
  402f2a:	f004 fb33 	bl	407594 <__aeabi_dcmplt>
  402f2e:	b110      	cbz	r0, 402f36 <_printf_float+0x8a>
  402f30:	232d      	movs	r3, #45	; 0x2d
  402f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402f36:	4b9c      	ldr	r3, [pc, #624]	; (4031a8 <_printf_float+0x2fc>)
  402f38:	4a9c      	ldr	r2, [pc, #624]	; (4031ac <_printf_float+0x300>)
  402f3a:	e00a      	b.n	402f52 <_printf_float+0xa6>
  402f3c:	4642      	mov	r2, r8
  402f3e:	4653      	mov	r3, sl
  402f40:	4640      	mov	r0, r8
  402f42:	4651      	mov	r1, sl
  402f44:	f004 fb4e 	bl	4075e4 <__aeabi_dcmpun>
  402f48:	2800      	cmp	r0, #0
  402f4a:	f000 8192 	beq.w	403272 <_printf_float+0x3c6>
  402f4e:	4b98      	ldr	r3, [pc, #608]	; (4031b0 <_printf_float+0x304>)
  402f50:	4a98      	ldr	r2, [pc, #608]	; (4031b4 <_printf_float+0x308>)
  402f52:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402f56:	bf8c      	ite	hi
  402f58:	4690      	movhi	r8, r2
  402f5a:	4698      	movls	r8, r3
  402f5c:	2303      	movs	r3, #3
  402f5e:	6123      	str	r3, [r4, #16]
  402f60:	f02b 0304 	bic.w	r3, fp, #4
  402f64:	6023      	str	r3, [r4, #0]
  402f66:	f04f 0a00 	mov.w	sl, #0
  402f6a:	e03d      	b.n	402fe8 <_printf_float+0x13c>
  402f6c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  402f70:	f000 818a 	beq.w	403288 <_printf_float+0x3dc>
  402f74:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402f78:	f000 8186 	beq.w	403288 <_printf_float+0x3dc>
  402f7c:	6023      	str	r3, [r4, #0]
  402f7e:	2100      	movs	r1, #0
  402f80:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402f84:	9301      	str	r3, [sp, #4]
  402f86:	6863      	ldr	r3, [r4, #4]
  402f88:	9005      	str	r0, [sp, #20]
  402f8a:	9202      	str	r2, [sp, #8]
  402f8c:	9300      	str	r3, [sp, #0]
  402f8e:	4642      	mov	r2, r8
  402f90:	4653      	mov	r3, sl
  402f92:	9106      	str	r1, [sp, #24]
  402f94:	f8cd 9010 	str.w	r9, [sp, #16]
  402f98:	f8cd e00c 	str.w	lr, [sp, #12]
  402f9c:	4628      	mov	r0, r5
  402f9e:	f7ff fef6 	bl	402d8e <__cvt>
  402fa2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  402fa6:	2b47      	cmp	r3, #71	; 0x47
  402fa8:	4680      	mov	r8, r0
  402faa:	f000 8184 	beq.w	4032b6 <_printf_float+0x40a>
  402fae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402fb2:	990d      	ldr	r1, [sp, #52]	; 0x34
  402fb4:	f200 818d 	bhi.w	4032d2 <_printf_float+0x426>
  402fb8:	3901      	subs	r1, #1
  402fba:	464a      	mov	r2, r9
  402fbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402fc0:	910d      	str	r1, [sp, #52]	; 0x34
  402fc2:	f7ff ff43 	bl	402e4c <__exponent>
  402fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402fc8:	1883      	adds	r3, r0, r2
  402fca:	2a01      	cmp	r2, #1
  402fcc:	4682      	mov	sl, r0
  402fce:	6123      	str	r3, [r4, #16]
  402fd0:	f300 817c 	bgt.w	4032cc <_printf_float+0x420>
  402fd4:	6822      	ldr	r2, [r4, #0]
  402fd6:	07d1      	lsls	r1, r2, #31
  402fd8:	f100 8178 	bmi.w	4032cc <_printf_float+0x420>
  402fdc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402fe0:	b113      	cbz	r3, 402fe8 <_printf_float+0x13c>
  402fe2:	232d      	movs	r3, #45	; 0x2d
  402fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402fe8:	9700      	str	r7, [sp, #0]
  402fea:	4633      	mov	r3, r6
  402fec:	aa0f      	add	r2, sp, #60	; 0x3c
  402fee:	4621      	mov	r1, r4
  402ff0:	4628      	mov	r0, r5
  402ff2:	f000 f99f 	bl	403334 <_printf_common>
  402ff6:	3001      	adds	r0, #1
  402ff8:	d102      	bne.n	403000 <_printf_float+0x154>
  402ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402ffe:	e196      	b.n	40332e <_printf_float+0x482>
  403000:	6823      	ldr	r3, [r4, #0]
  403002:	055a      	lsls	r2, r3, #21
  403004:	d401      	bmi.n	40300a <_printf_float+0x15e>
  403006:	6923      	ldr	r3, [r4, #16]
  403008:	e065      	b.n	4030d6 <_printf_float+0x22a>
  40300a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  40300e:	f240 80d5 	bls.w	4031bc <_printf_float+0x310>
  403012:	2200      	movs	r2, #0
  403014:	2300      	movs	r3, #0
  403016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40301a:	f004 fab1 	bl	407580 <__aeabi_dcmpeq>
  40301e:	b378      	cbz	r0, 403080 <_printf_float+0x1d4>
  403020:	2301      	movs	r3, #1
  403022:	4a65      	ldr	r2, [pc, #404]	; (4031b8 <_printf_float+0x30c>)
  403024:	4631      	mov	r1, r6
  403026:	4628      	mov	r0, r5
  403028:	47b8      	blx	r7
  40302a:	3001      	adds	r0, #1
  40302c:	d0e5      	beq.n	402ffa <_printf_float+0x14e>
  40302e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403032:	429a      	cmp	r2, r3
  403034:	db0b      	blt.n	40304e <_printf_float+0x1a2>
  403036:	6823      	ldr	r3, [r4, #0]
  403038:	07d8      	lsls	r0, r3, #31
  40303a:	d408      	bmi.n	40304e <_printf_float+0x1a2>
  40303c:	6823      	ldr	r3, [r4, #0]
  40303e:	079b      	lsls	r3, r3, #30
  403040:	f140 8111 	bpl.w	403266 <_printf_float+0x3ba>
  403044:	f04f 0800 	mov.w	r8, #0
  403048:	f104 0919 	add.w	r9, r4, #25
  40304c:	e106      	b.n	40325c <_printf_float+0x3b0>
  40304e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403050:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403052:	4631      	mov	r1, r6
  403054:	4628      	mov	r0, r5
  403056:	47b8      	blx	r7
  403058:	3001      	adds	r0, #1
  40305a:	d0ce      	beq.n	402ffa <_printf_float+0x14e>
  40305c:	f04f 0800 	mov.w	r8, #0
  403060:	f104 091a 	add.w	r9, r4, #26
  403064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403066:	3b01      	subs	r3, #1
  403068:	4598      	cmp	r8, r3
  40306a:	dae7      	bge.n	40303c <_printf_float+0x190>
  40306c:	2301      	movs	r3, #1
  40306e:	464a      	mov	r2, r9
  403070:	4631      	mov	r1, r6
  403072:	4628      	mov	r0, r5
  403074:	47b8      	blx	r7
  403076:	3001      	adds	r0, #1
  403078:	d0bf      	beq.n	402ffa <_printf_float+0x14e>
  40307a:	f108 0801 	add.w	r8, r8, #1
  40307e:	e7f1      	b.n	403064 <_printf_float+0x1b8>
  403080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403082:	2b00      	cmp	r3, #0
  403084:	dc29      	bgt.n	4030da <_printf_float+0x22e>
  403086:	2301      	movs	r3, #1
  403088:	4a4b      	ldr	r2, [pc, #300]	; (4031b8 <_printf_float+0x30c>)
  40308a:	4631      	mov	r1, r6
  40308c:	4628      	mov	r0, r5
  40308e:	47b8      	blx	r7
  403090:	3001      	adds	r0, #1
  403092:	d0b2      	beq.n	402ffa <_printf_float+0x14e>
  403094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403096:	b923      	cbnz	r3, 4030a2 <_printf_float+0x1f6>
  403098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40309a:	b913      	cbnz	r3, 4030a2 <_printf_float+0x1f6>
  40309c:	6823      	ldr	r3, [r4, #0]
  40309e:	07d9      	lsls	r1, r3, #31
  4030a0:	d5cc      	bpl.n	40303c <_printf_float+0x190>
  4030a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4030a6:	4631      	mov	r1, r6
  4030a8:	4628      	mov	r0, r5
  4030aa:	47b8      	blx	r7
  4030ac:	3001      	adds	r0, #1
  4030ae:	d0a4      	beq.n	402ffa <_printf_float+0x14e>
  4030b0:	f04f 0900 	mov.w	r9, #0
  4030b4:	f104 0a1a 	add.w	sl, r4, #26
  4030b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030ba:	425b      	negs	r3, r3
  4030bc:	4599      	cmp	r9, r3
  4030be:	da09      	bge.n	4030d4 <_printf_float+0x228>
  4030c0:	2301      	movs	r3, #1
  4030c2:	4652      	mov	r2, sl
  4030c4:	4631      	mov	r1, r6
  4030c6:	4628      	mov	r0, r5
  4030c8:	47b8      	blx	r7
  4030ca:	3001      	adds	r0, #1
  4030cc:	d095      	beq.n	402ffa <_printf_float+0x14e>
  4030ce:	f109 0901 	add.w	r9, r9, #1
  4030d2:	e7f1      	b.n	4030b8 <_printf_float+0x20c>
  4030d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030d6:	4642      	mov	r2, r8
  4030d8:	e0a7      	b.n	40322a <_printf_float+0x37e>
  4030da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4030dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4030de:	429a      	cmp	r2, r3
  4030e0:	bfa8      	it	ge
  4030e2:	461a      	movge	r2, r3
  4030e4:	2a00      	cmp	r2, #0
  4030e6:	4691      	mov	r9, r2
  4030e8:	dc06      	bgt.n	4030f8 <_printf_float+0x24c>
  4030ea:	f04f 0a00 	mov.w	sl, #0
  4030ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  4030f2:	f104 0b1a 	add.w	fp, r4, #26
  4030f6:	e011      	b.n	40311c <_printf_float+0x270>
  4030f8:	4613      	mov	r3, r2
  4030fa:	4631      	mov	r1, r6
  4030fc:	4642      	mov	r2, r8
  4030fe:	4628      	mov	r0, r5
  403100:	47b8      	blx	r7
  403102:	3001      	adds	r0, #1
  403104:	d1f1      	bne.n	4030ea <_printf_float+0x23e>
  403106:	e778      	b.n	402ffa <_printf_float+0x14e>
  403108:	2301      	movs	r3, #1
  40310a:	465a      	mov	r2, fp
  40310c:	4631      	mov	r1, r6
  40310e:	4628      	mov	r0, r5
  403110:	47b8      	blx	r7
  403112:	3001      	adds	r0, #1
  403114:	f43f af71 	beq.w	402ffa <_printf_float+0x14e>
  403118:	f10a 0a01 	add.w	sl, sl, #1
  40311c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40311e:	ebc9 0203 	rsb	r2, r9, r3
  403122:	4592      	cmp	sl, r2
  403124:	dbf0      	blt.n	403108 <_printf_float+0x25c>
  403126:	eb08 0903 	add.w	r9, r8, r3
  40312a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40312c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40312e:	429a      	cmp	r2, r3
  403130:	db0f      	blt.n	403152 <_printf_float+0x2a6>
  403132:	6823      	ldr	r3, [r4, #0]
  403134:	07da      	lsls	r2, r3, #31
  403136:	d40c      	bmi.n	403152 <_printf_float+0x2a6>
  403138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40313a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40313c:	4498      	add	r8, r3
  40313e:	ebc9 0808 	rsb	r8, r9, r8
  403142:	1a9b      	subs	r3, r3, r2
  403144:	4598      	cmp	r8, r3
  403146:	bfa8      	it	ge
  403148:	4698      	movge	r8, r3
  40314a:	f1b8 0f00 	cmp.w	r8, #0
  40314e:	dc08      	bgt.n	403162 <_printf_float+0x2b6>
  403150:	e00f      	b.n	403172 <_printf_float+0x2c6>
  403152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403154:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403156:	4631      	mov	r1, r6
  403158:	4628      	mov	r0, r5
  40315a:	47b8      	blx	r7
  40315c:	3001      	adds	r0, #1
  40315e:	d1eb      	bne.n	403138 <_printf_float+0x28c>
  403160:	e74b      	b.n	402ffa <_printf_float+0x14e>
  403162:	4643      	mov	r3, r8
  403164:	464a      	mov	r2, r9
  403166:	4631      	mov	r1, r6
  403168:	4628      	mov	r0, r5
  40316a:	47b8      	blx	r7
  40316c:	3001      	adds	r0, #1
  40316e:	f43f af44 	beq.w	402ffa <_printf_float+0x14e>
  403172:	f04f 0900 	mov.w	r9, #0
  403176:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40317a:	f104 0a1a 	add.w	sl, r4, #26
  40317e:	e009      	b.n	403194 <_printf_float+0x2e8>
  403180:	2301      	movs	r3, #1
  403182:	4652      	mov	r2, sl
  403184:	4631      	mov	r1, r6
  403186:	4628      	mov	r0, r5
  403188:	47b8      	blx	r7
  40318a:	3001      	adds	r0, #1
  40318c:	f43f af35 	beq.w	402ffa <_printf_float+0x14e>
  403190:	f109 0901 	add.w	r9, r9, #1
  403194:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403198:	1a9b      	subs	r3, r3, r2
  40319a:	ebc8 0303 	rsb	r3, r8, r3
  40319e:	4599      	cmp	r9, r3
  4031a0:	dbee      	blt.n	403180 <_printf_float+0x2d4>
  4031a2:	e74b      	b.n	40303c <_printf_float+0x190>
  4031a4:	7fefffff 	.word	0x7fefffff
  4031a8:	004081d4 	.word	0x004081d4
  4031ac:	004081d8 	.word	0x004081d8
  4031b0:	004081dc 	.word	0x004081dc
  4031b4:	004081e0 	.word	0x004081e0
  4031b8:	004081e4 	.word	0x004081e4
  4031bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031be:	2a01      	cmp	r2, #1
  4031c0:	dc01      	bgt.n	4031c6 <_printf_float+0x31a>
  4031c2:	07db      	lsls	r3, r3, #31
  4031c4:	d538      	bpl.n	403238 <_printf_float+0x38c>
  4031c6:	2301      	movs	r3, #1
  4031c8:	4642      	mov	r2, r8
  4031ca:	4631      	mov	r1, r6
  4031cc:	4628      	mov	r0, r5
  4031ce:	47b8      	blx	r7
  4031d0:	3001      	adds	r0, #1
  4031d2:	f43f af12 	beq.w	402ffa <_printf_float+0x14e>
  4031d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4031da:	4631      	mov	r1, r6
  4031dc:	4628      	mov	r0, r5
  4031de:	47b8      	blx	r7
  4031e0:	3001      	adds	r0, #1
  4031e2:	f43f af0a 	beq.w	402ffa <_printf_float+0x14e>
  4031e6:	2200      	movs	r2, #0
  4031e8:	2300      	movs	r3, #0
  4031ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4031ee:	f004 f9c7 	bl	407580 <__aeabi_dcmpeq>
  4031f2:	b120      	cbz	r0, 4031fe <_printf_float+0x352>
  4031f4:	f04f 0800 	mov.w	r8, #0
  4031f8:	f104 091a 	add.w	r9, r4, #26
  4031fc:	e00e      	b.n	40321c <_printf_float+0x370>
  4031fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403200:	f108 0201 	add.w	r2, r8, #1
  403204:	3b01      	subs	r3, #1
  403206:	e019      	b.n	40323c <_printf_float+0x390>
  403208:	2301      	movs	r3, #1
  40320a:	464a      	mov	r2, r9
  40320c:	4631      	mov	r1, r6
  40320e:	4628      	mov	r0, r5
  403210:	47b8      	blx	r7
  403212:	3001      	adds	r0, #1
  403214:	f43f aef1 	beq.w	402ffa <_printf_float+0x14e>
  403218:	f108 0801 	add.w	r8, r8, #1
  40321c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40321e:	3b01      	subs	r3, #1
  403220:	4598      	cmp	r8, r3
  403222:	dbf1      	blt.n	403208 <_printf_float+0x35c>
  403224:	4653      	mov	r3, sl
  403226:	f104 0250 	add.w	r2, r4, #80	; 0x50
  40322a:	4631      	mov	r1, r6
  40322c:	4628      	mov	r0, r5
  40322e:	47b8      	blx	r7
  403230:	3001      	adds	r0, #1
  403232:	f47f af03 	bne.w	40303c <_printf_float+0x190>
  403236:	e6e0      	b.n	402ffa <_printf_float+0x14e>
  403238:	2301      	movs	r3, #1
  40323a:	4642      	mov	r2, r8
  40323c:	4631      	mov	r1, r6
  40323e:	4628      	mov	r0, r5
  403240:	47b8      	blx	r7
  403242:	3001      	adds	r0, #1
  403244:	d1ee      	bne.n	403224 <_printf_float+0x378>
  403246:	e6d8      	b.n	402ffa <_printf_float+0x14e>
  403248:	2301      	movs	r3, #1
  40324a:	464a      	mov	r2, r9
  40324c:	4631      	mov	r1, r6
  40324e:	4628      	mov	r0, r5
  403250:	47b8      	blx	r7
  403252:	3001      	adds	r0, #1
  403254:	f43f aed1 	beq.w	402ffa <_printf_float+0x14e>
  403258:	f108 0801 	add.w	r8, r8, #1
  40325c:	68e3      	ldr	r3, [r4, #12]
  40325e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403260:	1a9b      	subs	r3, r3, r2
  403262:	4598      	cmp	r8, r3
  403264:	dbf0      	blt.n	403248 <_printf_float+0x39c>
  403266:	68e0      	ldr	r0, [r4, #12]
  403268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40326a:	4298      	cmp	r0, r3
  40326c:	bfb8      	it	lt
  40326e:	4618      	movlt	r0, r3
  403270:	e05d      	b.n	40332e <_printf_float+0x482>
  403272:	6862      	ldr	r2, [r4, #4]
  403274:	1c53      	adds	r3, r2, #1
  403276:	a80e      	add	r0, sp, #56	; 0x38
  403278:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  40327c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403280:	f47f ae74 	bne.w	402f6c <_printf_float+0xc0>
  403284:	2206      	movs	r2, #6
  403286:	e001      	b.n	40328c <_printf_float+0x3e0>
  403288:	b912      	cbnz	r2, 403290 <_printf_float+0x3e4>
  40328a:	2201      	movs	r2, #1
  40328c:	6062      	str	r2, [r4, #4]
  40328e:	e675      	b.n	402f7c <_printf_float+0xd0>
  403290:	2100      	movs	r1, #0
  403292:	9106      	str	r1, [sp, #24]
  403294:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403298:	e88d 000c 	stmia.w	sp, {r2, r3}
  40329c:	6023      	str	r3, [r4, #0]
  40329e:	9005      	str	r0, [sp, #20]
  4032a0:	4642      	mov	r2, r8
  4032a2:	f8cd 9010 	str.w	r9, [sp, #16]
  4032a6:	f8cd e00c 	str.w	lr, [sp, #12]
  4032aa:	9102      	str	r1, [sp, #8]
  4032ac:	4653      	mov	r3, sl
  4032ae:	4628      	mov	r0, r5
  4032b0:	f7ff fd6d 	bl	402d8e <__cvt>
  4032b4:	4680      	mov	r8, r0
  4032b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4032b8:	1cd8      	adds	r0, r3, #3
  4032ba:	db02      	blt.n	4032c2 <_printf_float+0x416>
  4032bc:	6862      	ldr	r2, [r4, #4]
  4032be:	4293      	cmp	r3, r2
  4032c0:	dd1d      	ble.n	4032fe <_printf_float+0x452>
  4032c2:	f1a9 0902 	sub.w	r9, r9, #2
  4032c6:	fa5f f989 	uxtb.w	r9, r9
  4032ca:	e670      	b.n	402fae <_printf_float+0x102>
  4032cc:	3301      	adds	r3, #1
  4032ce:	6123      	str	r3, [r4, #16]
  4032d0:	e684      	b.n	402fdc <_printf_float+0x130>
  4032d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  4032d6:	d114      	bne.n	403302 <_printf_float+0x456>
  4032d8:	2900      	cmp	r1, #0
  4032da:	6863      	ldr	r3, [r4, #4]
  4032dc:	dd07      	ble.n	4032ee <_printf_float+0x442>
  4032de:	6121      	str	r1, [r4, #16]
  4032e0:	b913      	cbnz	r3, 4032e8 <_printf_float+0x43c>
  4032e2:	6822      	ldr	r2, [r4, #0]
  4032e4:	07d2      	lsls	r2, r2, #31
  4032e6:	d51d      	bpl.n	403324 <_printf_float+0x478>
  4032e8:	3301      	adds	r3, #1
  4032ea:	440b      	add	r3, r1
  4032ec:	e019      	b.n	403322 <_printf_float+0x476>
  4032ee:	b913      	cbnz	r3, 4032f6 <_printf_float+0x44a>
  4032f0:	6822      	ldr	r2, [r4, #0]
  4032f2:	07d0      	lsls	r0, r2, #31
  4032f4:	d501      	bpl.n	4032fa <_printf_float+0x44e>
  4032f6:	3302      	adds	r3, #2
  4032f8:	e013      	b.n	403322 <_printf_float+0x476>
  4032fa:	2301      	movs	r3, #1
  4032fc:	e011      	b.n	403322 <_printf_float+0x476>
  4032fe:	f04f 0967 	mov.w	r9, #103	; 0x67
  403302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403306:	4293      	cmp	r3, r2
  403308:	db05      	blt.n	403316 <_printf_float+0x46a>
  40330a:	6822      	ldr	r2, [r4, #0]
  40330c:	6123      	str	r3, [r4, #16]
  40330e:	07d1      	lsls	r1, r2, #31
  403310:	d508      	bpl.n	403324 <_printf_float+0x478>
  403312:	3301      	adds	r3, #1
  403314:	e005      	b.n	403322 <_printf_float+0x476>
  403316:	2b00      	cmp	r3, #0
  403318:	bfd4      	ite	le
  40331a:	f1c3 0302 	rsble	r3, r3, #2
  40331e:	2301      	movgt	r3, #1
  403320:	4413      	add	r3, r2
  403322:	6123      	str	r3, [r4, #16]
  403324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403326:	65a3      	str	r3, [r4, #88]	; 0x58
  403328:	f04f 0a00 	mov.w	sl, #0
  40332c:	e656      	b.n	402fdc <_printf_float+0x130>
  40332e:	b011      	add	sp, #68	; 0x44
  403330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00403334 <_printf_common>:
  403334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403338:	4691      	mov	r9, r2
  40333a:	461f      	mov	r7, r3
  40333c:	690a      	ldr	r2, [r1, #16]
  40333e:	688b      	ldr	r3, [r1, #8]
  403340:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403344:	4293      	cmp	r3, r2
  403346:	bfb8      	it	lt
  403348:	4613      	movlt	r3, r2
  40334a:	f8c9 3000 	str.w	r3, [r9]
  40334e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403352:	4606      	mov	r6, r0
  403354:	460c      	mov	r4, r1
  403356:	b112      	cbz	r2, 40335e <_printf_common+0x2a>
  403358:	3301      	adds	r3, #1
  40335a:	f8c9 3000 	str.w	r3, [r9]
  40335e:	6823      	ldr	r3, [r4, #0]
  403360:	0699      	lsls	r1, r3, #26
  403362:	bf42      	ittt	mi
  403364:	f8d9 3000 	ldrmi.w	r3, [r9]
  403368:	3302      	addmi	r3, #2
  40336a:	f8c9 3000 	strmi.w	r3, [r9]
  40336e:	6825      	ldr	r5, [r4, #0]
  403370:	f015 0506 	ands.w	r5, r5, #6
  403374:	d110      	bne.n	403398 <_printf_common+0x64>
  403376:	f104 0a19 	add.w	sl, r4, #25
  40337a:	e007      	b.n	40338c <_printf_common+0x58>
  40337c:	2301      	movs	r3, #1
  40337e:	4652      	mov	r2, sl
  403380:	4639      	mov	r1, r7
  403382:	4630      	mov	r0, r6
  403384:	47c0      	blx	r8
  403386:	3001      	adds	r0, #1
  403388:	d01a      	beq.n	4033c0 <_printf_common+0x8c>
  40338a:	3501      	adds	r5, #1
  40338c:	68e3      	ldr	r3, [r4, #12]
  40338e:	f8d9 2000 	ldr.w	r2, [r9]
  403392:	1a9b      	subs	r3, r3, r2
  403394:	429d      	cmp	r5, r3
  403396:	dbf1      	blt.n	40337c <_printf_common+0x48>
  403398:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40339c:	6822      	ldr	r2, [r4, #0]
  40339e:	3300      	adds	r3, #0
  4033a0:	bf18      	it	ne
  4033a2:	2301      	movne	r3, #1
  4033a4:	0692      	lsls	r2, r2, #26
  4033a6:	d50f      	bpl.n	4033c8 <_printf_common+0x94>
  4033a8:	18e1      	adds	r1, r4, r3
  4033aa:	1c5a      	adds	r2, r3, #1
  4033ac:	2030      	movs	r0, #48	; 0x30
  4033ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4033b2:	4422      	add	r2, r4
  4033b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4033b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4033bc:	3302      	adds	r3, #2
  4033be:	e003      	b.n	4033c8 <_printf_common+0x94>
  4033c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4033c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4033c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4033cc:	4639      	mov	r1, r7
  4033ce:	4630      	mov	r0, r6
  4033d0:	47c0      	blx	r8
  4033d2:	3001      	adds	r0, #1
  4033d4:	d0f4      	beq.n	4033c0 <_printf_common+0x8c>
  4033d6:	6822      	ldr	r2, [r4, #0]
  4033d8:	f8d9 5000 	ldr.w	r5, [r9]
  4033dc:	68e3      	ldr	r3, [r4, #12]
  4033de:	f002 0206 	and.w	r2, r2, #6
  4033e2:	2a04      	cmp	r2, #4
  4033e4:	bf08      	it	eq
  4033e6:	1b5d      	subeq	r5, r3, r5
  4033e8:	6922      	ldr	r2, [r4, #16]
  4033ea:	68a3      	ldr	r3, [r4, #8]
  4033ec:	bf0c      	ite	eq
  4033ee:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4033f2:	2500      	movne	r5, #0
  4033f4:	4293      	cmp	r3, r2
  4033f6:	bfc4      	itt	gt
  4033f8:	1a9b      	subgt	r3, r3, r2
  4033fa:	18ed      	addgt	r5, r5, r3
  4033fc:	f04f 0900 	mov.w	r9, #0
  403400:	341a      	adds	r4, #26
  403402:	454d      	cmp	r5, r9
  403404:	d009      	beq.n	40341a <_printf_common+0xe6>
  403406:	2301      	movs	r3, #1
  403408:	4622      	mov	r2, r4
  40340a:	4639      	mov	r1, r7
  40340c:	4630      	mov	r0, r6
  40340e:	47c0      	blx	r8
  403410:	3001      	adds	r0, #1
  403412:	d0d5      	beq.n	4033c0 <_printf_common+0x8c>
  403414:	f109 0901 	add.w	r9, r9, #1
  403418:	e7f3      	b.n	403402 <_printf_common+0xce>
  40341a:	2000      	movs	r0, #0
  40341c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403420 <_printf_i>:
  403420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403424:	4617      	mov	r7, r2
  403426:	7e0a      	ldrb	r2, [r1, #24]
  403428:	b085      	sub	sp, #20
  40342a:	2a6e      	cmp	r2, #110	; 0x6e
  40342c:	4698      	mov	r8, r3
  40342e:	4606      	mov	r6, r0
  403430:	460c      	mov	r4, r1
  403432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403434:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403438:	f000 80ae 	beq.w	403598 <_printf_i+0x178>
  40343c:	d811      	bhi.n	403462 <_printf_i+0x42>
  40343e:	2a63      	cmp	r2, #99	; 0x63
  403440:	d022      	beq.n	403488 <_printf_i+0x68>
  403442:	d809      	bhi.n	403458 <_printf_i+0x38>
  403444:	2a00      	cmp	r2, #0
  403446:	f000 80bb 	beq.w	4035c0 <_printf_i+0x1a0>
  40344a:	2a58      	cmp	r2, #88	; 0x58
  40344c:	f040 80ca 	bne.w	4035e4 <_printf_i+0x1c4>
  403450:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403454:	4983      	ldr	r1, [pc, #524]	; (403664 <_printf_i+0x244>)
  403456:	e055      	b.n	403504 <_printf_i+0xe4>
  403458:	2a64      	cmp	r2, #100	; 0x64
  40345a:	d01e      	beq.n	40349a <_printf_i+0x7a>
  40345c:	2a69      	cmp	r2, #105	; 0x69
  40345e:	d01c      	beq.n	40349a <_printf_i+0x7a>
  403460:	e0c0      	b.n	4035e4 <_printf_i+0x1c4>
  403462:	2a73      	cmp	r2, #115	; 0x73
  403464:	f000 80b0 	beq.w	4035c8 <_printf_i+0x1a8>
  403468:	d809      	bhi.n	40347e <_printf_i+0x5e>
  40346a:	2a6f      	cmp	r2, #111	; 0x6f
  40346c:	d02e      	beq.n	4034cc <_printf_i+0xac>
  40346e:	2a70      	cmp	r2, #112	; 0x70
  403470:	f040 80b8 	bne.w	4035e4 <_printf_i+0x1c4>
  403474:	680a      	ldr	r2, [r1, #0]
  403476:	f042 0220 	orr.w	r2, r2, #32
  40347a:	600a      	str	r2, [r1, #0]
  40347c:	e03e      	b.n	4034fc <_printf_i+0xdc>
  40347e:	2a75      	cmp	r2, #117	; 0x75
  403480:	d024      	beq.n	4034cc <_printf_i+0xac>
  403482:	2a78      	cmp	r2, #120	; 0x78
  403484:	d03a      	beq.n	4034fc <_printf_i+0xdc>
  403486:	e0ad      	b.n	4035e4 <_printf_i+0x1c4>
  403488:	681a      	ldr	r2, [r3, #0]
  40348a:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40348e:	1d11      	adds	r1, r2, #4
  403490:	6019      	str	r1, [r3, #0]
  403492:	6813      	ldr	r3, [r2, #0]
  403494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403498:	e0a8      	b.n	4035ec <_printf_i+0x1cc>
  40349a:	6821      	ldr	r1, [r4, #0]
  40349c:	681a      	ldr	r2, [r3, #0]
  40349e:	f011 0f80 	tst.w	r1, #128	; 0x80
  4034a2:	d002      	beq.n	4034aa <_printf_i+0x8a>
  4034a4:	1d11      	adds	r1, r2, #4
  4034a6:	6019      	str	r1, [r3, #0]
  4034a8:	e008      	b.n	4034bc <_printf_i+0x9c>
  4034aa:	f011 0f40 	tst.w	r1, #64	; 0x40
  4034ae:	f102 0104 	add.w	r1, r2, #4
  4034b2:	6019      	str	r1, [r3, #0]
  4034b4:	d002      	beq.n	4034bc <_printf_i+0x9c>
  4034b6:	f9b2 3000 	ldrsh.w	r3, [r2]
  4034ba:	e000      	b.n	4034be <_printf_i+0x9e>
  4034bc:	6813      	ldr	r3, [r2, #0]
  4034be:	2b00      	cmp	r3, #0
  4034c0:	da3c      	bge.n	40353c <_printf_i+0x11c>
  4034c2:	222d      	movs	r2, #45	; 0x2d
  4034c4:	425b      	negs	r3, r3
  4034c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4034ca:	e037      	b.n	40353c <_printf_i+0x11c>
  4034cc:	6821      	ldr	r1, [r4, #0]
  4034ce:	681a      	ldr	r2, [r3, #0]
  4034d0:	f011 0f80 	tst.w	r1, #128	; 0x80
  4034d4:	d002      	beq.n	4034dc <_printf_i+0xbc>
  4034d6:	1d11      	adds	r1, r2, #4
  4034d8:	6019      	str	r1, [r3, #0]
  4034da:	e007      	b.n	4034ec <_printf_i+0xcc>
  4034dc:	f011 0f40 	tst.w	r1, #64	; 0x40
  4034e0:	f102 0104 	add.w	r1, r2, #4
  4034e4:	6019      	str	r1, [r3, #0]
  4034e6:	d001      	beq.n	4034ec <_printf_i+0xcc>
  4034e8:	8813      	ldrh	r3, [r2, #0]
  4034ea:	e000      	b.n	4034ee <_printf_i+0xce>
  4034ec:	6813      	ldr	r3, [r2, #0]
  4034ee:	7e22      	ldrb	r2, [r4, #24]
  4034f0:	495c      	ldr	r1, [pc, #368]	; (403664 <_printf_i+0x244>)
  4034f2:	2a6f      	cmp	r2, #111	; 0x6f
  4034f4:	bf14      	ite	ne
  4034f6:	220a      	movne	r2, #10
  4034f8:	2208      	moveq	r2, #8
  4034fa:	e01b      	b.n	403534 <_printf_i+0x114>
  4034fc:	2278      	movs	r2, #120	; 0x78
  4034fe:	495a      	ldr	r1, [pc, #360]	; (403668 <_printf_i+0x248>)
  403500:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  403504:	6822      	ldr	r2, [r4, #0]
  403506:	6818      	ldr	r0, [r3, #0]
  403508:	f012 0f80 	tst.w	r2, #128	; 0x80
  40350c:	f100 0504 	add.w	r5, r0, #4
  403510:	601d      	str	r5, [r3, #0]
  403512:	d103      	bne.n	40351c <_printf_i+0xfc>
  403514:	0655      	lsls	r5, r2, #25
  403516:	d501      	bpl.n	40351c <_printf_i+0xfc>
  403518:	8803      	ldrh	r3, [r0, #0]
  40351a:	e000      	b.n	40351e <_printf_i+0xfe>
  40351c:	6803      	ldr	r3, [r0, #0]
  40351e:	07d0      	lsls	r0, r2, #31
  403520:	bf44      	itt	mi
  403522:	f042 0220 	orrmi.w	r2, r2, #32
  403526:	6022      	strmi	r2, [r4, #0]
  403528:	b91b      	cbnz	r3, 403532 <_printf_i+0x112>
  40352a:	6822      	ldr	r2, [r4, #0]
  40352c:	f022 0220 	bic.w	r2, r2, #32
  403530:	6022      	str	r2, [r4, #0]
  403532:	2210      	movs	r2, #16
  403534:	2000      	movs	r0, #0
  403536:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  40353a:	e001      	b.n	403540 <_printf_i+0x120>
  40353c:	4949      	ldr	r1, [pc, #292]	; (403664 <_printf_i+0x244>)
  40353e:	220a      	movs	r2, #10
  403540:	6865      	ldr	r5, [r4, #4]
  403542:	60a5      	str	r5, [r4, #8]
  403544:	2d00      	cmp	r5, #0
  403546:	db08      	blt.n	40355a <_printf_i+0x13a>
  403548:	6820      	ldr	r0, [r4, #0]
  40354a:	f020 0004 	bic.w	r0, r0, #4
  40354e:	6020      	str	r0, [r4, #0]
  403550:	b92b      	cbnz	r3, 40355e <_printf_i+0x13e>
  403552:	2d00      	cmp	r5, #0
  403554:	d17d      	bne.n	403652 <_printf_i+0x232>
  403556:	4675      	mov	r5, lr
  403558:	e00c      	b.n	403574 <_printf_i+0x154>
  40355a:	2b00      	cmp	r3, #0
  40355c:	d079      	beq.n	403652 <_printf_i+0x232>
  40355e:	4675      	mov	r5, lr
  403560:	fbb3 f0f2 	udiv	r0, r3, r2
  403564:	fb02 3310 	mls	r3, r2, r0, r3
  403568:	5ccb      	ldrb	r3, [r1, r3]
  40356a:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40356e:	4603      	mov	r3, r0
  403570:	2800      	cmp	r0, #0
  403572:	d1f5      	bne.n	403560 <_printf_i+0x140>
  403574:	2a08      	cmp	r2, #8
  403576:	d10b      	bne.n	403590 <_printf_i+0x170>
  403578:	6823      	ldr	r3, [r4, #0]
  40357a:	07da      	lsls	r2, r3, #31
  40357c:	d508      	bpl.n	403590 <_printf_i+0x170>
  40357e:	6923      	ldr	r3, [r4, #16]
  403580:	6862      	ldr	r2, [r4, #4]
  403582:	429a      	cmp	r2, r3
  403584:	bfde      	ittt	le
  403586:	2330      	movle	r3, #48	; 0x30
  403588:	f805 3c01 	strble.w	r3, [r5, #-1]
  40358c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  403590:	ebc5 030e 	rsb	r3, r5, lr
  403594:	6123      	str	r3, [r4, #16]
  403596:	e02e      	b.n	4035f6 <_printf_i+0x1d6>
  403598:	6808      	ldr	r0, [r1, #0]
  40359a:	681a      	ldr	r2, [r3, #0]
  40359c:	6949      	ldr	r1, [r1, #20]
  40359e:	f010 0f80 	tst.w	r0, #128	; 0x80
  4035a2:	d003      	beq.n	4035ac <_printf_i+0x18c>
  4035a4:	1d10      	adds	r0, r2, #4
  4035a6:	6018      	str	r0, [r3, #0]
  4035a8:	6813      	ldr	r3, [r2, #0]
  4035aa:	e008      	b.n	4035be <_printf_i+0x19e>
  4035ac:	f010 0f40 	tst.w	r0, #64	; 0x40
  4035b0:	f102 0004 	add.w	r0, r2, #4
  4035b4:	6018      	str	r0, [r3, #0]
  4035b6:	6813      	ldr	r3, [r2, #0]
  4035b8:	d001      	beq.n	4035be <_printf_i+0x19e>
  4035ba:	8019      	strh	r1, [r3, #0]
  4035bc:	e000      	b.n	4035c0 <_printf_i+0x1a0>
  4035be:	6019      	str	r1, [r3, #0]
  4035c0:	2300      	movs	r3, #0
  4035c2:	6123      	str	r3, [r4, #16]
  4035c4:	4675      	mov	r5, lr
  4035c6:	e016      	b.n	4035f6 <_printf_i+0x1d6>
  4035c8:	681a      	ldr	r2, [r3, #0]
  4035ca:	1d11      	adds	r1, r2, #4
  4035cc:	6019      	str	r1, [r3, #0]
  4035ce:	6815      	ldr	r5, [r2, #0]
  4035d0:	6862      	ldr	r2, [r4, #4]
  4035d2:	2100      	movs	r1, #0
  4035d4:	4628      	mov	r0, r5
  4035d6:	f002 fc9b 	bl	405f10 <memchr>
  4035da:	b108      	cbz	r0, 4035e0 <_printf_i+0x1c0>
  4035dc:	1b40      	subs	r0, r0, r5
  4035de:	6060      	str	r0, [r4, #4]
  4035e0:	6863      	ldr	r3, [r4, #4]
  4035e2:	e004      	b.n	4035ee <_printf_i+0x1ce>
  4035e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4035e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4035ec:	2301      	movs	r3, #1
  4035ee:	6123      	str	r3, [r4, #16]
  4035f0:	2300      	movs	r3, #0
  4035f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4035f6:	f8cd 8000 	str.w	r8, [sp]
  4035fa:	463b      	mov	r3, r7
  4035fc:	aa03      	add	r2, sp, #12
  4035fe:	4621      	mov	r1, r4
  403600:	4630      	mov	r0, r6
  403602:	f7ff fe97 	bl	403334 <_printf_common>
  403606:	3001      	adds	r0, #1
  403608:	d102      	bne.n	403610 <_printf_i+0x1f0>
  40360a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40360e:	e026      	b.n	40365e <_printf_i+0x23e>
  403610:	6923      	ldr	r3, [r4, #16]
  403612:	462a      	mov	r2, r5
  403614:	4639      	mov	r1, r7
  403616:	4630      	mov	r0, r6
  403618:	47c0      	blx	r8
  40361a:	3001      	adds	r0, #1
  40361c:	d0f5      	beq.n	40360a <_printf_i+0x1ea>
  40361e:	6823      	ldr	r3, [r4, #0]
  403620:	079b      	lsls	r3, r3, #30
  403622:	d510      	bpl.n	403646 <_printf_i+0x226>
  403624:	2500      	movs	r5, #0
  403626:	f104 0919 	add.w	r9, r4, #25
  40362a:	e007      	b.n	40363c <_printf_i+0x21c>
  40362c:	2301      	movs	r3, #1
  40362e:	464a      	mov	r2, r9
  403630:	4639      	mov	r1, r7
  403632:	4630      	mov	r0, r6
  403634:	47c0      	blx	r8
  403636:	3001      	adds	r0, #1
  403638:	d0e7      	beq.n	40360a <_printf_i+0x1ea>
  40363a:	3501      	adds	r5, #1
  40363c:	68e3      	ldr	r3, [r4, #12]
  40363e:	9a03      	ldr	r2, [sp, #12]
  403640:	1a9b      	subs	r3, r3, r2
  403642:	429d      	cmp	r5, r3
  403644:	dbf2      	blt.n	40362c <_printf_i+0x20c>
  403646:	68e0      	ldr	r0, [r4, #12]
  403648:	9b03      	ldr	r3, [sp, #12]
  40364a:	4298      	cmp	r0, r3
  40364c:	bfb8      	it	lt
  40364e:	4618      	movlt	r0, r3
  403650:	e005      	b.n	40365e <_printf_i+0x23e>
  403652:	780b      	ldrb	r3, [r1, #0]
  403654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403658:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40365c:	e78a      	b.n	403574 <_printf_i+0x154>
  40365e:	b005      	add	sp, #20
  403660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403664:	004081e6 	.word	0x004081e6
  403668:	004081f7 	.word	0x004081f7

0040366c <iprintf>:
  40366c:	b40f      	push	{r0, r1, r2, r3}
  40366e:	4b0a      	ldr	r3, [pc, #40]	; (403698 <iprintf+0x2c>)
  403670:	b513      	push	{r0, r1, r4, lr}
  403672:	681c      	ldr	r4, [r3, #0]
  403674:	b124      	cbz	r4, 403680 <iprintf+0x14>
  403676:	69a3      	ldr	r3, [r4, #24]
  403678:	b913      	cbnz	r3, 403680 <iprintf+0x14>
  40367a:	4620      	mov	r0, r4
  40367c:	f002 f812 	bl	4056a4 <__sinit>
  403680:	ab05      	add	r3, sp, #20
  403682:	9a04      	ldr	r2, [sp, #16]
  403684:	68a1      	ldr	r1, [r4, #8]
  403686:	9301      	str	r3, [sp, #4]
  403688:	4620      	mov	r0, r4
  40368a:	f003 f95d 	bl	406948 <_vfiprintf_r>
  40368e:	b002      	add	sp, #8
  403690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403694:	b004      	add	sp, #16
  403696:	4770      	bx	lr
  403698:	20000078 	.word	0x20000078

0040369c <_puts_r>:
  40369c:	b570      	push	{r4, r5, r6, lr}
  40369e:	460e      	mov	r6, r1
  4036a0:	4605      	mov	r5, r0
  4036a2:	b118      	cbz	r0, 4036ac <_puts_r+0x10>
  4036a4:	6983      	ldr	r3, [r0, #24]
  4036a6:	b90b      	cbnz	r3, 4036ac <_puts_r+0x10>
  4036a8:	f001 fffc 	bl	4056a4 <__sinit>
  4036ac:	69ab      	ldr	r3, [r5, #24]
  4036ae:	68ac      	ldr	r4, [r5, #8]
  4036b0:	b913      	cbnz	r3, 4036b8 <_puts_r+0x1c>
  4036b2:	4628      	mov	r0, r5
  4036b4:	f001 fff6 	bl	4056a4 <__sinit>
  4036b8:	4b22      	ldr	r3, [pc, #136]	; (403744 <_puts_r+0xa8>)
  4036ba:	429c      	cmp	r4, r3
  4036bc:	d101      	bne.n	4036c2 <_puts_r+0x26>
  4036be:	686c      	ldr	r4, [r5, #4]
  4036c0:	e008      	b.n	4036d4 <_puts_r+0x38>
  4036c2:	4b21      	ldr	r3, [pc, #132]	; (403748 <_puts_r+0xac>)
  4036c4:	429c      	cmp	r4, r3
  4036c6:	d101      	bne.n	4036cc <_puts_r+0x30>
  4036c8:	68ac      	ldr	r4, [r5, #8]
  4036ca:	e003      	b.n	4036d4 <_puts_r+0x38>
  4036cc:	4b1f      	ldr	r3, [pc, #124]	; (40374c <_puts_r+0xb0>)
  4036ce:	429c      	cmp	r4, r3
  4036d0:	bf08      	it	eq
  4036d2:	68ec      	ldreq	r4, [r5, #12]
  4036d4:	89a3      	ldrh	r3, [r4, #12]
  4036d6:	071b      	lsls	r3, r3, #28
  4036d8:	d501      	bpl.n	4036de <_puts_r+0x42>
  4036da:	6923      	ldr	r3, [r4, #16]
  4036dc:	b93b      	cbnz	r3, 4036ee <_puts_r+0x52>
  4036de:	4621      	mov	r1, r4
  4036e0:	4628      	mov	r0, r5
  4036e2:	f001 f853 	bl	40478c <__swsetup_r>
  4036e6:	b110      	cbz	r0, 4036ee <_puts_r+0x52>
  4036e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4036ec:	bd70      	pop	{r4, r5, r6, pc}
  4036ee:	3e01      	subs	r6, #1
  4036f0:	68a3      	ldr	r3, [r4, #8]
  4036f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  4036f6:	3b01      	subs	r3, #1
  4036f8:	60a3      	str	r3, [r4, #8]
  4036fa:	b191      	cbz	r1, 403722 <_puts_r+0x86>
  4036fc:	2b00      	cmp	r3, #0
  4036fe:	da04      	bge.n	40370a <_puts_r+0x6e>
  403700:	69a2      	ldr	r2, [r4, #24]
  403702:	4293      	cmp	r3, r2
  403704:	db06      	blt.n	403714 <_puts_r+0x78>
  403706:	290a      	cmp	r1, #10
  403708:	d004      	beq.n	403714 <_puts_r+0x78>
  40370a:	6823      	ldr	r3, [r4, #0]
  40370c:	1c5a      	adds	r2, r3, #1
  40370e:	6022      	str	r2, [r4, #0]
  403710:	7019      	strb	r1, [r3, #0]
  403712:	e7ed      	b.n	4036f0 <_puts_r+0x54>
  403714:	4622      	mov	r2, r4
  403716:	4628      	mov	r0, r5
  403718:	f000 ffe4 	bl	4046e4 <__swbuf_r>
  40371c:	3001      	adds	r0, #1
  40371e:	d1e7      	bne.n	4036f0 <_puts_r+0x54>
  403720:	e7e2      	b.n	4036e8 <_puts_r+0x4c>
  403722:	2b00      	cmp	r3, #0
  403724:	da08      	bge.n	403738 <_puts_r+0x9c>
  403726:	4622      	mov	r2, r4
  403728:	210a      	movs	r1, #10
  40372a:	4628      	mov	r0, r5
  40372c:	f000 ffda 	bl	4046e4 <__swbuf_r>
  403730:	3001      	adds	r0, #1
  403732:	d0d9      	beq.n	4036e8 <_puts_r+0x4c>
  403734:	200a      	movs	r0, #10
  403736:	bd70      	pop	{r4, r5, r6, pc}
  403738:	6823      	ldr	r3, [r4, #0]
  40373a:	200a      	movs	r0, #10
  40373c:	1c5a      	adds	r2, r3, #1
  40373e:	6022      	str	r2, [r4, #0]
  403740:	7018      	strb	r0, [r3, #0]
  403742:	bd70      	pop	{r4, r5, r6, pc}
  403744:	00408268 	.word	0x00408268
  403748:	00408288 	.word	0x00408288
  40374c:	004082a8 	.word	0x004082a8

00403750 <puts>:
  403750:	4b02      	ldr	r3, [pc, #8]	; (40375c <puts+0xc>)
  403752:	4601      	mov	r1, r0
  403754:	6818      	ldr	r0, [r3, #0]
  403756:	f7ff bfa1 	b.w	40369c <_puts_r>
  40375a:	bf00      	nop
  40375c:	20000078 	.word	0x20000078

00403760 <setbuf>:
  403760:	2900      	cmp	r1, #0
  403762:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403766:	bf0c      	ite	eq
  403768:	2202      	moveq	r2, #2
  40376a:	2200      	movne	r2, #0
  40376c:	f000 b800 	b.w	403770 <setvbuf>

00403770 <setvbuf>:
  403770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403774:	461d      	mov	r5, r3
  403776:	4b4f      	ldr	r3, [pc, #316]	; (4038b4 <setvbuf+0x144>)
  403778:	681e      	ldr	r6, [r3, #0]
  40377a:	4604      	mov	r4, r0
  40377c:	460f      	mov	r7, r1
  40377e:	4690      	mov	r8, r2
  403780:	b126      	cbz	r6, 40378c <setvbuf+0x1c>
  403782:	69b3      	ldr	r3, [r6, #24]
  403784:	b913      	cbnz	r3, 40378c <setvbuf+0x1c>
  403786:	4630      	mov	r0, r6
  403788:	f001 ff8c 	bl	4056a4 <__sinit>
  40378c:	4b4a      	ldr	r3, [pc, #296]	; (4038b8 <setvbuf+0x148>)
  40378e:	429c      	cmp	r4, r3
  403790:	d101      	bne.n	403796 <setvbuf+0x26>
  403792:	6874      	ldr	r4, [r6, #4]
  403794:	e008      	b.n	4037a8 <setvbuf+0x38>
  403796:	4b49      	ldr	r3, [pc, #292]	; (4038bc <setvbuf+0x14c>)
  403798:	429c      	cmp	r4, r3
  40379a:	d101      	bne.n	4037a0 <setvbuf+0x30>
  40379c:	68b4      	ldr	r4, [r6, #8]
  40379e:	e003      	b.n	4037a8 <setvbuf+0x38>
  4037a0:	4b47      	ldr	r3, [pc, #284]	; (4038c0 <setvbuf+0x150>)
  4037a2:	429c      	cmp	r4, r3
  4037a4:	bf08      	it	eq
  4037a6:	68f4      	ldreq	r4, [r6, #12]
  4037a8:	f1b8 0f02 	cmp.w	r8, #2
  4037ac:	d004      	beq.n	4037b8 <setvbuf+0x48>
  4037ae:	f1b8 0f01 	cmp.w	r8, #1
  4037b2:	d879      	bhi.n	4038a8 <setvbuf+0x138>
  4037b4:	2d00      	cmp	r5, #0
  4037b6:	db77      	blt.n	4038a8 <setvbuf+0x138>
  4037b8:	4621      	mov	r1, r4
  4037ba:	4630      	mov	r0, r6
  4037bc:	f001 ff08 	bl	4055d0 <_fflush_r>
  4037c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4037c2:	b141      	cbz	r1, 4037d6 <setvbuf+0x66>
  4037c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4037c8:	4299      	cmp	r1, r3
  4037ca:	d002      	beq.n	4037d2 <setvbuf+0x62>
  4037cc:	4630      	mov	r0, r6
  4037ce:	f002 ffe7 	bl	4067a0 <_free_r>
  4037d2:	2300      	movs	r3, #0
  4037d4:	6363      	str	r3, [r4, #52]	; 0x34
  4037d6:	2300      	movs	r3, #0
  4037d8:	61a3      	str	r3, [r4, #24]
  4037da:	6063      	str	r3, [r4, #4]
  4037dc:	89a3      	ldrh	r3, [r4, #12]
  4037de:	061b      	lsls	r3, r3, #24
  4037e0:	d503      	bpl.n	4037ea <setvbuf+0x7a>
  4037e2:	6921      	ldr	r1, [r4, #16]
  4037e4:	4630      	mov	r0, r6
  4037e6:	f002 ffdb 	bl	4067a0 <_free_r>
  4037ea:	89a3      	ldrh	r3, [r4, #12]
  4037ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4037f0:	f023 0303 	bic.w	r3, r3, #3
  4037f4:	f1b8 0f02 	cmp.w	r8, #2
  4037f8:	81a3      	strh	r3, [r4, #12]
  4037fa:	d01e      	beq.n	40383a <setvbuf+0xca>
  4037fc:	ab01      	add	r3, sp, #4
  4037fe:	466a      	mov	r2, sp
  403800:	4621      	mov	r1, r4
  403802:	4630      	mov	r0, r6
  403804:	f002 fb0a 	bl	405e1c <__swhatbuf_r>
  403808:	89a3      	ldrh	r3, [r4, #12]
  40380a:	4318      	orrs	r0, r3
  40380c:	81a0      	strh	r0, [r4, #12]
  40380e:	b90d      	cbnz	r5, 403814 <setvbuf+0xa4>
  403810:	9d00      	ldr	r5, [sp, #0]
  403812:	e000      	b.n	403816 <setvbuf+0xa6>
  403814:	bb2f      	cbnz	r7, 403862 <setvbuf+0xf2>
  403816:	4628      	mov	r0, r5
  403818:	f002 fb60 	bl	405edc <malloc>
  40381c:	4607      	mov	r7, r0
  40381e:	b9d0      	cbnz	r0, 403856 <setvbuf+0xe6>
  403820:	f8dd 9000 	ldr.w	r9, [sp]
  403824:	45a9      	cmp	r9, r5
  403826:	d102      	bne.n	40382e <setvbuf+0xbe>
  403828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40382c:	e006      	b.n	40383c <setvbuf+0xcc>
  40382e:	4648      	mov	r0, r9
  403830:	f002 fb54 	bl	405edc <malloc>
  403834:	4607      	mov	r7, r0
  403836:	b978      	cbnz	r0, 403858 <setvbuf+0xe8>
  403838:	e7f6      	b.n	403828 <setvbuf+0xb8>
  40383a:	2000      	movs	r0, #0
  40383c:	89a3      	ldrh	r3, [r4, #12]
  40383e:	f043 0302 	orr.w	r3, r3, #2
  403842:	81a3      	strh	r3, [r4, #12]
  403844:	2300      	movs	r3, #0
  403846:	60a3      	str	r3, [r4, #8]
  403848:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40384c:	6023      	str	r3, [r4, #0]
  40384e:	6123      	str	r3, [r4, #16]
  403850:	2301      	movs	r3, #1
  403852:	6163      	str	r3, [r4, #20]
  403854:	e02a      	b.n	4038ac <setvbuf+0x13c>
  403856:	46a9      	mov	r9, r5
  403858:	89a3      	ldrh	r3, [r4, #12]
  40385a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40385e:	81a3      	strh	r3, [r4, #12]
  403860:	464d      	mov	r5, r9
  403862:	69b3      	ldr	r3, [r6, #24]
  403864:	b913      	cbnz	r3, 40386c <setvbuf+0xfc>
  403866:	4630      	mov	r0, r6
  403868:	f001 ff1c 	bl	4056a4 <__sinit>
  40386c:	f1b8 0f01 	cmp.w	r8, #1
  403870:	bf08      	it	eq
  403872:	89a3      	ldrheq	r3, [r4, #12]
  403874:	6027      	str	r7, [r4, #0]
  403876:	bf04      	itt	eq
  403878:	f043 0301 	orreq.w	r3, r3, #1
  40387c:	81a3      	strheq	r3, [r4, #12]
  40387e:	89a3      	ldrh	r3, [r4, #12]
  403880:	6127      	str	r7, [r4, #16]
  403882:	f003 0008 	and.w	r0, r3, #8
  403886:	b280      	uxth	r0, r0
  403888:	6165      	str	r5, [r4, #20]
  40388a:	b158      	cbz	r0, 4038a4 <setvbuf+0x134>
  40388c:	f013 0301 	ands.w	r3, r3, #1
  403890:	f04f 0000 	mov.w	r0, #0
  403894:	bf1d      	ittte	ne
  403896:	426d      	negne	r5, r5
  403898:	60a0      	strne	r0, [r4, #8]
  40389a:	61a5      	strne	r5, [r4, #24]
  40389c:	60a5      	streq	r5, [r4, #8]
  40389e:	bf08      	it	eq
  4038a0:	4618      	moveq	r0, r3
  4038a2:	e003      	b.n	4038ac <setvbuf+0x13c>
  4038a4:	60a0      	str	r0, [r4, #8]
  4038a6:	e001      	b.n	4038ac <setvbuf+0x13c>
  4038a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4038ac:	b003      	add	sp, #12
  4038ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4038b2:	bf00      	nop
  4038b4:	20000078 	.word	0x20000078
  4038b8:	00408268 	.word	0x00408268
  4038bc:	00408288 	.word	0x00408288
  4038c0:	004082a8 	.word	0x004082a8

004038c4 <strcmp>:
  4038c4:	f810 2b01 	ldrb.w	r2, [r0], #1
  4038c8:	f811 3b01 	ldrb.w	r3, [r1], #1
  4038cc:	2a01      	cmp	r2, #1
  4038ce:	bf28      	it	cs
  4038d0:	429a      	cmpcs	r2, r3
  4038d2:	d0f7      	beq.n	4038c4 <strcmp>
  4038d4:	1ad0      	subs	r0, r2, r3
  4038d6:	4770      	bx	lr

004038d8 <strcpy>:
  4038d8:	4603      	mov	r3, r0
  4038da:	f811 2b01 	ldrb.w	r2, [r1], #1
  4038de:	f803 2b01 	strb.w	r2, [r3], #1
  4038e2:	2a00      	cmp	r2, #0
  4038e4:	d1f9      	bne.n	4038da <strcpy+0x2>
  4038e6:	4770      	bx	lr

004038e8 <strlen>:
  4038e8:	4603      	mov	r3, r0
  4038ea:	f813 2b01 	ldrb.w	r2, [r3], #1
  4038ee:	2a00      	cmp	r2, #0
  4038f0:	d1fb      	bne.n	4038ea <strlen+0x2>
  4038f2:	1a18      	subs	r0, r3, r0
  4038f4:	3801      	subs	r0, #1
  4038f6:	4770      	bx	lr

004038f8 <sulp>:
  4038f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038fc:	460f      	mov	r7, r1
  4038fe:	4690      	mov	r8, r2
  403900:	f002 fe1c 	bl	40653c <__ulp>
  403904:	4604      	mov	r4, r0
  403906:	460d      	mov	r5, r1
  403908:	f1b8 0f00 	cmp.w	r8, #0
  40390c:	d011      	beq.n	403932 <sulp+0x3a>
  40390e:	f3c7 530a 	ubfx	r3, r7, #20, #11
  403912:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  403916:	2b00      	cmp	r3, #0
  403918:	dd0b      	ble.n	403932 <sulp+0x3a>
  40391a:	051b      	lsls	r3, r3, #20
  40391c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  403920:	2400      	movs	r4, #0
  403922:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  403926:	4622      	mov	r2, r4
  403928:	462b      	mov	r3, r5
  40392a:	f003 fbc1 	bl	4070b0 <__aeabi_dmul>
  40392e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403932:	4620      	mov	r0, r4
  403934:	4629      	mov	r1, r5
  403936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40393a:	0000      	movs	r0, r0
  40393c:	0000      	movs	r0, r0
	...

00403940 <_strtod_l>:
  403940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403944:	461f      	mov	r7, r3
  403946:	b09f      	sub	sp, #124	; 0x7c
  403948:	2300      	movs	r3, #0
  40394a:	4682      	mov	sl, r0
  40394c:	4638      	mov	r0, r7
  40394e:	931a      	str	r3, [sp, #104]	; 0x68
  403950:	9106      	str	r1, [sp, #24]
  403952:	9215      	str	r2, [sp, #84]	; 0x54
  403954:	f002 fa51 	bl	405dfa <__localeconv_l>
  403958:	4606      	mov	r6, r0
  40395a:	6800      	ldr	r0, [r0, #0]
  40395c:	f7ff ffc4 	bl	4038e8 <strlen>
  403960:	9b06      	ldr	r3, [sp, #24]
  403962:	4604      	mov	r4, r0
  403964:	f04f 0800 	mov.w	r8, #0
  403968:	f04f 0900 	mov.w	r9, #0
  40396c:	9319      	str	r3, [sp, #100]	; 0x64
  40396e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403970:	781a      	ldrb	r2, [r3, #0]
  403972:	2a0d      	cmp	r2, #13
  403974:	d805      	bhi.n	403982 <_strtod_l+0x42>
  403976:	2a09      	cmp	r2, #9
  403978:	d213      	bcs.n	4039a2 <_strtod_l+0x62>
  40397a:	2a00      	cmp	r2, #0
  40397c:	f000 8196 	beq.w	403cac <_strtod_l+0x36c>
  403980:	e011      	b.n	4039a6 <_strtod_l+0x66>
  403982:	2a2b      	cmp	r2, #43	; 0x2b
  403984:	d004      	beq.n	403990 <_strtod_l+0x50>
  403986:	2a2d      	cmp	r2, #45	; 0x2d
  403988:	d004      	beq.n	403994 <_strtod_l+0x54>
  40398a:	2a20      	cmp	r2, #32
  40398c:	d10b      	bne.n	4039a6 <_strtod_l+0x66>
  40398e:	e008      	b.n	4039a2 <_strtod_l+0x62>
  403990:	2200      	movs	r2, #0
  403992:	e000      	b.n	403996 <_strtod_l+0x56>
  403994:	2201      	movs	r2, #1
  403996:	920e      	str	r2, [sp, #56]	; 0x38
  403998:	1c5a      	adds	r2, r3, #1
  40399a:	9219      	str	r2, [sp, #100]	; 0x64
  40399c:	785b      	ldrb	r3, [r3, #1]
  40399e:	b923      	cbnz	r3, 4039aa <_strtod_l+0x6a>
  4039a0:	e184      	b.n	403cac <_strtod_l+0x36c>
  4039a2:	3301      	adds	r3, #1
  4039a4:	e7e2      	b.n	40396c <_strtod_l+0x2c>
  4039a6:	2300      	movs	r3, #0
  4039a8:	930e      	str	r3, [sp, #56]	; 0x38
  4039aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
  4039ac:	782b      	ldrb	r3, [r5, #0]
  4039ae:	2b30      	cmp	r3, #48	; 0x30
  4039b0:	d15d      	bne.n	403a6e <_strtod_l+0x12e>
  4039b2:	786b      	ldrb	r3, [r5, #1]
  4039b4:	2b58      	cmp	r3, #88	; 0x58
  4039b6:	d001      	beq.n	4039bc <_strtod_l+0x7c>
  4039b8:	2b78      	cmp	r3, #120	; 0x78
  4039ba:	d14d      	bne.n	403a58 <_strtod_l+0x118>
  4039bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039be:	9301      	str	r3, [sp, #4]
  4039c0:	ab1a      	add	r3, sp, #104	; 0x68
  4039c2:	9300      	str	r3, [sp, #0]
  4039c4:	9702      	str	r7, [sp, #8]
  4039c6:	ab1b      	add	r3, sp, #108	; 0x6c
  4039c8:	4a9d      	ldr	r2, [pc, #628]	; (403c40 <_strtod_l+0x300>)
  4039ca:	a919      	add	r1, sp, #100	; 0x64
  4039cc:	4650      	mov	r0, sl
  4039ce:	f001 ff3e 	bl	40584e <__gethex>
  4039d2:	f010 0607 	ands.w	r6, r0, #7
  4039d6:	4604      	mov	r4, r0
  4039d8:	f000 856f 	beq.w	4044ba <_strtod_l+0xb7a>
  4039dc:	2e06      	cmp	r6, #6
  4039de:	d105      	bne.n	4039ec <_strtod_l+0xac>
  4039e0:	3501      	adds	r5, #1
  4039e2:	2300      	movs	r3, #0
  4039e4:	9519      	str	r5, [sp, #100]	; 0x64
  4039e6:	930e      	str	r3, [sp, #56]	; 0x38
  4039e8:	f000 bd67 	b.w	4044ba <_strtod_l+0xb7a>
  4039ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4039ee:	b13a      	cbz	r2, 403a00 <_strtod_l+0xc0>
  4039f0:	2135      	movs	r1, #53	; 0x35
  4039f2:	a81c      	add	r0, sp, #112	; 0x70
  4039f4:	f002 fe8a 	bl	40670c <__copybits>
  4039f8:	991a      	ldr	r1, [sp, #104]	; 0x68
  4039fa:	4650      	mov	r0, sl
  4039fc:	f002 fb0d 	bl	40601a <_Bfree>
  403a00:	2e06      	cmp	r6, #6
  403a02:	d822      	bhi.n	403a4a <_strtod_l+0x10a>
  403a04:	e8df f006 	tbb	[pc, r6]
  403a08:	18080d04 	.word	0x18080d04
  403a0c:	0d1d      	.short	0x0d1d
  403a0e:	04          	.byte	0x04
  403a0f:	00          	.byte	0x00
  403a10:	f04f 0900 	mov.w	r9, #0
  403a14:	46c8      	mov	r8, r9
  403a16:	e018      	b.n	403a4a <_strtod_l+0x10a>
  403a18:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403a1c:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
  403a20:	e013      	b.n	403a4a <_strtod_l+0x10a>
  403a22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403a24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403a26:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403a2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  403a2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
  403a32:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
  403a36:	e008      	b.n	403a4a <_strtod_l+0x10a>
  403a38:	f8df 9208 	ldr.w	r9, [pc, #520]	; 403c44 <_strtod_l+0x304>
  403a3c:	f04f 0800 	mov.w	r8, #0
  403a40:	e003      	b.n	403a4a <_strtod_l+0x10a>
  403a42:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
  403a46:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  403a4a:	0721      	lsls	r1, r4, #28
  403a4c:	f140 8535 	bpl.w	4044ba <_strtod_l+0xb7a>
  403a50:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
  403a54:	f000 bd31 	b.w	4044ba <_strtod_l+0xb7a>
  403a58:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a5a:	1c5a      	adds	r2, r3, #1
  403a5c:	9219      	str	r2, [sp, #100]	; 0x64
  403a5e:	785b      	ldrb	r3, [r3, #1]
  403a60:	2b30      	cmp	r3, #48	; 0x30
  403a62:	d0f9      	beq.n	403a58 <_strtod_l+0x118>
  403a64:	2b00      	cmp	r3, #0
  403a66:	f000 8528 	beq.w	4044ba <_strtod_l+0xb7a>
  403a6a:	2301      	movs	r3, #1
  403a6c:	e000      	b.n	403a70 <_strtod_l+0x130>
  403a6e:	2300      	movs	r3, #0
  403a70:	9308      	str	r3, [sp, #32]
  403a72:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a74:	9309      	str	r3, [sp, #36]	; 0x24
  403a76:	2300      	movs	r3, #0
  403a78:	9305      	str	r3, [sp, #20]
  403a7a:	469b      	mov	fp, r3
  403a7c:	9304      	str	r3, [sp, #16]
  403a7e:	220a      	movs	r2, #10
  403a80:	9819      	ldr	r0, [sp, #100]	; 0x64
  403a82:	7805      	ldrb	r5, [r0, #0]
  403a84:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  403a88:	b2d9      	uxtb	r1, r3
  403a8a:	2909      	cmp	r1, #9
  403a8c:	d80e      	bhi.n	403aac <_strtod_l+0x16c>
  403a8e:	9904      	ldr	r1, [sp, #16]
  403a90:	2908      	cmp	r1, #8
  403a92:	bfc5      	ittet	gt
  403a94:	9905      	ldrgt	r1, [sp, #20]
  403a96:	fb02 3301 	mlagt	r3, r2, r1, r3
  403a9a:	fb02 3b0b 	mlale	fp, r2, fp, r3
  403a9e:	9305      	strgt	r3, [sp, #20]
  403aa0:	9b04      	ldr	r3, [sp, #16]
  403aa2:	3001      	adds	r0, #1
  403aa4:	3301      	adds	r3, #1
  403aa6:	9304      	str	r3, [sp, #16]
  403aa8:	9019      	str	r0, [sp, #100]	; 0x64
  403aaa:	e7e9      	b.n	403a80 <_strtod_l+0x140>
  403aac:	4622      	mov	r2, r4
  403aae:	6831      	ldr	r1, [r6, #0]
  403ab0:	f003 f8b9 	bl	406c26 <strncmp>
  403ab4:	b128      	cbz	r0, 403ac2 <_strtod_l+0x182>
  403ab6:	2000      	movs	r0, #0
  403ab8:	462b      	mov	r3, r5
  403aba:	4602      	mov	r2, r0
  403abc:	9d04      	ldr	r5, [sp, #16]
  403abe:	4601      	mov	r1, r0
  403ac0:	e04d      	b.n	403b5e <_strtod_l+0x21e>
  403ac2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ac4:	191a      	adds	r2, r3, r4
  403ac6:	9219      	str	r2, [sp, #100]	; 0x64
  403ac8:	9a04      	ldr	r2, [sp, #16]
  403aca:	5d1b      	ldrb	r3, [r3, r4]
  403acc:	2a00      	cmp	r2, #0
  403ace:	d13f      	bne.n	403b50 <_strtod_l+0x210>
  403ad0:	4610      	mov	r0, r2
  403ad2:	2b30      	cmp	r3, #48	; 0x30
  403ad4:	d105      	bne.n	403ae2 <_strtod_l+0x1a2>
  403ad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ad8:	1c5a      	adds	r2, r3, #1
  403ada:	9219      	str	r2, [sp, #100]	; 0x64
  403adc:	3001      	adds	r0, #1
  403ade:	785b      	ldrb	r3, [r3, #1]
  403ae0:	e7f7      	b.n	403ad2 <_strtod_l+0x192>
  403ae2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
  403ae6:	2a08      	cmp	r2, #8
  403ae8:	d83f      	bhi.n	403b6a <_strtod_l+0x22a>
  403aea:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403aec:	9209      	str	r2, [sp, #36]	; 0x24
  403aee:	4602      	mov	r2, r0
  403af0:	2000      	movs	r0, #0
  403af2:	4605      	mov	r5, r0
  403af4:	3b30      	subs	r3, #48	; 0x30
  403af6:	f100 0101 	add.w	r1, r0, #1
  403afa:	d023      	beq.n	403b44 <_strtod_l+0x204>
  403afc:	440a      	add	r2, r1
  403afe:	182e      	adds	r6, r5, r0
  403b00:	4629      	mov	r1, r5
  403b02:	240a      	movs	r4, #10
  403b04:	42b1      	cmp	r1, r6
  403b06:	d00c      	beq.n	403b22 <_strtod_l+0x1e2>
  403b08:	3101      	adds	r1, #1
  403b0a:	1e4f      	subs	r7, r1, #1
  403b0c:	2f08      	cmp	r7, #8
  403b0e:	dc02      	bgt.n	403b16 <_strtod_l+0x1d6>
  403b10:	fb04 fb0b 	mul.w	fp, r4, fp
  403b14:	e7f6      	b.n	403b04 <_strtod_l+0x1c4>
  403b16:	2910      	cmp	r1, #16
  403b18:	bfde      	ittt	le
  403b1a:	9f05      	ldrle	r7, [sp, #20]
  403b1c:	4367      	mulle	r7, r4
  403b1e:	9705      	strle	r7, [sp, #20]
  403b20:	e7f0      	b.n	403b04 <_strtod_l+0x1c4>
  403b22:	4428      	add	r0, r5
  403b24:	2808      	cmp	r0, #8
  403b26:	f100 0501 	add.w	r5, r0, #1
  403b2a:	dc03      	bgt.n	403b34 <_strtod_l+0x1f4>
  403b2c:	210a      	movs	r1, #10
  403b2e:	fb01 3b0b 	mla	fp, r1, fp, r3
  403b32:	e006      	b.n	403b42 <_strtod_l+0x202>
  403b34:	2d10      	cmp	r5, #16
  403b36:	bfdf      	itttt	le
  403b38:	9805      	ldrle	r0, [sp, #20]
  403b3a:	210a      	movle	r1, #10
  403b3c:	fb01 3300 	mlale	r3, r1, r0, r3
  403b40:	9305      	strle	r3, [sp, #20]
  403b42:	2100      	movs	r1, #0
  403b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b46:	1c58      	adds	r0, r3, #1
  403b48:	9019      	str	r0, [sp, #100]	; 0x64
  403b4a:	785b      	ldrb	r3, [r3, #1]
  403b4c:	4608      	mov	r0, r1
  403b4e:	e001      	b.n	403b54 <_strtod_l+0x214>
  403b50:	9d04      	ldr	r5, [sp, #16]
  403b52:	4602      	mov	r2, r0
  403b54:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  403b58:	2909      	cmp	r1, #9
  403b5a:	d9cb      	bls.n	403af4 <_strtod_l+0x1b4>
  403b5c:	2101      	movs	r1, #1
  403b5e:	2b65      	cmp	r3, #101	; 0x65
  403b60:	d001      	beq.n	403b66 <_strtod_l+0x226>
  403b62:	2b45      	cmp	r3, #69	; 0x45
  403b64:	d154      	bne.n	403c10 <_strtod_l+0x2d0>
  403b66:	b96d      	cbnz	r5, 403b84 <_strtod_l+0x244>
  403b68:	e004      	b.n	403b74 <_strtod_l+0x234>
  403b6a:	2b65      	cmp	r3, #101	; 0x65
  403b6c:	f040 84b3 	bne.w	4044d6 <_strtod_l+0xb96>
  403b70:	2200      	movs	r2, #0
  403b72:	2101      	movs	r1, #1
  403b74:	b928      	cbnz	r0, 403b82 <_strtod_l+0x242>
  403b76:	9b08      	ldr	r3, [sp, #32]
  403b78:	2b00      	cmp	r3, #0
  403b7a:	f000 8097 	beq.w	403cac <_strtod_l+0x36c>
  403b7e:	4605      	mov	r5, r0
  403b80:	e000      	b.n	403b84 <_strtod_l+0x244>
  403b82:	2500      	movs	r5, #0
  403b84:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b86:	9306      	str	r3, [sp, #24]
  403b88:	3301      	adds	r3, #1
  403b8a:	9319      	str	r3, [sp, #100]	; 0x64
  403b8c:	9b06      	ldr	r3, [sp, #24]
  403b8e:	785b      	ldrb	r3, [r3, #1]
  403b90:	2b2b      	cmp	r3, #43	; 0x2b
  403b92:	d006      	beq.n	403ba2 <_strtod_l+0x262>
  403b94:	2b2d      	cmp	r3, #45	; 0x2d
  403b96:	d002      	beq.n	403b9e <_strtod_l+0x25e>
  403b98:	2400      	movs	r4, #0
  403b9a:	9407      	str	r4, [sp, #28]
  403b9c:	e008      	b.n	403bb0 <_strtod_l+0x270>
  403b9e:	2301      	movs	r3, #1
  403ba0:	e000      	b.n	403ba4 <_strtod_l+0x264>
  403ba2:	2300      	movs	r3, #0
  403ba4:	9307      	str	r3, [sp, #28]
  403ba6:	9b06      	ldr	r3, [sp, #24]
  403ba8:	3302      	adds	r3, #2
  403baa:	9319      	str	r3, [sp, #100]	; 0x64
  403bac:	9b06      	ldr	r3, [sp, #24]
  403bae:	789b      	ldrb	r3, [r3, #2]
  403bb0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  403bb4:	2c09      	cmp	r4, #9
  403bb6:	d829      	bhi.n	403c0c <_strtod_l+0x2cc>
  403bb8:	2b30      	cmp	r3, #48	; 0x30
  403bba:	d104      	bne.n	403bc6 <_strtod_l+0x286>
  403bbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bbe:	1c5c      	adds	r4, r3, #1
  403bc0:	9419      	str	r4, [sp, #100]	; 0x64
  403bc2:	785b      	ldrb	r3, [r3, #1]
  403bc4:	e7f8      	b.n	403bb8 <_strtod_l+0x278>
  403bc6:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
  403bca:	2c08      	cmp	r4, #8
  403bcc:	d820      	bhi.n	403c10 <_strtod_l+0x2d0>
  403bce:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  403bd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bd4:	f04f 0e0a 	mov.w	lr, #10
  403bd8:	461e      	mov	r6, r3
  403bda:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bdc:	1c5c      	adds	r4, r3, #1
  403bde:	9419      	str	r4, [sp, #100]	; 0x64
  403be0:	785b      	ldrb	r3, [r3, #1]
  403be2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
  403be6:	f1bc 0f09 	cmp.w	ip, #9
  403bea:	d803      	bhi.n	403bf4 <_strtod_l+0x2b4>
  403bec:	fb0e 3707 	mla	r7, lr, r7, r3
  403bf0:	3f30      	subs	r7, #48	; 0x30
  403bf2:	e7f2      	b.n	403bda <_strtod_l+0x29a>
  403bf4:	1ba4      	subs	r4, r4, r6
  403bf6:	2c08      	cmp	r4, #8
  403bf8:	f644 641f 	movw	r4, #19999	; 0x4e1f
  403bfc:	dc02      	bgt.n	403c04 <_strtod_l+0x2c4>
  403bfe:	42bc      	cmp	r4, r7
  403c00:	bfa8      	it	ge
  403c02:	463c      	movge	r4, r7
  403c04:	9e07      	ldr	r6, [sp, #28]
  403c06:	b126      	cbz	r6, 403c12 <_strtod_l+0x2d2>
  403c08:	4264      	negs	r4, r4
  403c0a:	e002      	b.n	403c12 <_strtod_l+0x2d2>
  403c0c:	9c06      	ldr	r4, [sp, #24]
  403c0e:	9419      	str	r4, [sp, #100]	; 0x64
  403c10:	2400      	movs	r4, #0
  403c12:	2d00      	cmp	r5, #0
  403c14:	d153      	bne.n	403cbe <_strtod_l+0x37e>
  403c16:	2800      	cmp	r0, #0
  403c18:	f040 844f 	bne.w	4044ba <_strtod_l+0xb7a>
  403c1c:	9a08      	ldr	r2, [sp, #32]
  403c1e:	2a00      	cmp	r2, #0
  403c20:	f040 844b 	bne.w	4044ba <_strtod_l+0xb7a>
  403c24:	2900      	cmp	r1, #0
  403c26:	d141      	bne.n	403cac <_strtod_l+0x36c>
  403c28:	2b4e      	cmp	r3, #78	; 0x4e
  403c2a:	d020      	beq.n	403c6e <_strtod_l+0x32e>
  403c2c:	dc02      	bgt.n	403c34 <_strtod_l+0x2f4>
  403c2e:	2b49      	cmp	r3, #73	; 0x49
  403c30:	d00a      	beq.n	403c48 <_strtod_l+0x308>
  403c32:	e03b      	b.n	403cac <_strtod_l+0x36c>
  403c34:	2b69      	cmp	r3, #105	; 0x69
  403c36:	d007      	beq.n	403c48 <_strtod_l+0x308>
  403c38:	2b6e      	cmp	r3, #110	; 0x6e
  403c3a:	d018      	beq.n	403c6e <_strtod_l+0x32e>
  403c3c:	e036      	b.n	403cac <_strtod_l+0x36c>
  403c3e:	bf00      	nop
  403c40:	00408230 	.word	0x00408230
  403c44:	7ff00000 	.word	0x7ff00000
  403c48:	49ab      	ldr	r1, [pc, #684]	; (403ef8 <_strtod_l+0x5b8>)
  403c4a:	a819      	add	r0, sp, #100	; 0x64
  403c4c:	f002 f831 	bl	405cb2 <__match>
  403c50:	b360      	cbz	r0, 403cac <_strtod_l+0x36c>
  403c52:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c54:	49a9      	ldr	r1, [pc, #676]	; (403efc <_strtod_l+0x5bc>)
  403c56:	3b01      	subs	r3, #1
  403c58:	a819      	add	r0, sp, #100	; 0x64
  403c5a:	9319      	str	r3, [sp, #100]	; 0x64
  403c5c:	f002 f829 	bl	405cb2 <__match>
  403c60:	b910      	cbnz	r0, 403c68 <_strtod_l+0x328>
  403c62:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c64:	3301      	adds	r3, #1
  403c66:	9319      	str	r3, [sp, #100]	; 0x64
  403c68:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 403f18 <_strtod_l+0x5d8>
  403c6c:	e01a      	b.n	403ca4 <_strtod_l+0x364>
  403c6e:	49a4      	ldr	r1, [pc, #656]	; (403f00 <_strtod_l+0x5c0>)
  403c70:	a819      	add	r0, sp, #100	; 0x64
  403c72:	f002 f81e 	bl	405cb2 <__match>
  403c76:	b1c8      	cbz	r0, 403cac <_strtod_l+0x36c>
  403c78:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c7a:	781b      	ldrb	r3, [r3, #0]
  403c7c:	2b28      	cmp	r3, #40	; 0x28
  403c7e:	d10f      	bne.n	403ca0 <_strtod_l+0x360>
  403c80:	aa1c      	add	r2, sp, #112	; 0x70
  403c82:	49a0      	ldr	r1, [pc, #640]	; (403f04 <_strtod_l+0x5c4>)
  403c84:	a819      	add	r0, sp, #100	; 0x64
  403c86:	f002 f827 	bl	405cd8 <__hexnan>
  403c8a:	2805      	cmp	r0, #5
  403c8c:	d108      	bne.n	403ca0 <_strtod_l+0x360>
  403c8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403c90:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403c94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
  403c98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
  403c9c:	f000 bc0d 	b.w	4044ba <_strtod_l+0xb7a>
  403ca0:	f8df 9278 	ldr.w	r9, [pc, #632]	; 403f1c <_strtod_l+0x5dc>
  403ca4:	f04f 0800 	mov.w	r8, #0
  403ca8:	f000 bc07 	b.w	4044ba <_strtod_l+0xb7a>
  403cac:	9b06      	ldr	r3, [sp, #24]
  403cae:	9319      	str	r3, [sp, #100]	; 0x64
  403cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403cb2:	2b00      	cmp	r3, #0
  403cb4:	f000 840c 	beq.w	4044d0 <_strtod_l+0xb90>
  403cb8:	2300      	movs	r3, #0
  403cba:	930e      	str	r3, [sp, #56]	; 0x38
  403cbc:	e3ff      	b.n	4044be <_strtod_l+0xb7e>
  403cbe:	9b04      	ldr	r3, [sp, #16]
  403cc0:	4658      	mov	r0, fp
  403cc2:	2b00      	cmp	r3, #0
  403cc4:	bf08      	it	eq
  403cc6:	462b      	moveq	r3, r5
  403cc8:	2d10      	cmp	r5, #16
  403cca:	eba4 0702 	sub.w	r7, r4, r2
  403cce:	9304      	str	r3, [sp, #16]
  403cd0:	462c      	mov	r4, r5
  403cd2:	bfa8      	it	ge
  403cd4:	2410      	movge	r4, #16
  403cd6:	f003 f975 	bl	406fc4 <__aeabi_ui2d>
  403cda:	2c09      	cmp	r4, #9
  403cdc:	4680      	mov	r8, r0
  403cde:	4689      	mov	r9, r1
  403ce0:	dd13      	ble.n	403d0a <_strtod_l+0x3ca>
  403ce2:	4b89      	ldr	r3, [pc, #548]	; (403f08 <_strtod_l+0x5c8>)
  403ce4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  403ce8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  403cec:	f003 f9e0 	bl	4070b0 <__aeabi_dmul>
  403cf0:	4680      	mov	r8, r0
  403cf2:	9805      	ldr	r0, [sp, #20]
  403cf4:	4689      	mov	r9, r1
  403cf6:	f003 f965 	bl	406fc4 <__aeabi_ui2d>
  403cfa:	4602      	mov	r2, r0
  403cfc:	460b      	mov	r3, r1
  403cfe:	4640      	mov	r0, r8
  403d00:	4649      	mov	r1, r9
  403d02:	f003 f823 	bl	406d4c <__adddf3>
  403d06:	4680      	mov	r8, r0
  403d08:	4689      	mov	r9, r1
  403d0a:	2d0f      	cmp	r5, #15
  403d0c:	dc33      	bgt.n	403d76 <_strtod_l+0x436>
  403d0e:	2f00      	cmp	r7, #0
  403d10:	f000 83d3 	beq.w	4044ba <_strtod_l+0xb7a>
  403d14:	dd22      	ble.n	403d5c <_strtod_l+0x41c>
  403d16:	2f16      	cmp	r7, #22
  403d18:	dc07      	bgt.n	403d2a <_strtod_l+0x3ea>
  403d1a:	4d7b      	ldr	r5, [pc, #492]	; (403f08 <_strtod_l+0x5c8>)
  403d1c:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
  403d20:	4642      	mov	r2, r8
  403d22:	464b      	mov	r3, r9
  403d24:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d28:	e013      	b.n	403d52 <_strtod_l+0x412>
  403d2a:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
  403d2e:	429f      	cmp	r7, r3
  403d30:	dc21      	bgt.n	403d76 <_strtod_l+0x436>
  403d32:	4c75      	ldr	r4, [pc, #468]	; (403f08 <_strtod_l+0x5c8>)
  403d34:	f1c5 050f 	rsb	r5, r5, #15
  403d38:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  403d3c:	1b7d      	subs	r5, r7, r5
  403d3e:	4642      	mov	r2, r8
  403d40:	464b      	mov	r3, r9
  403d42:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d46:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  403d4a:	f003 f9b1 	bl	4070b0 <__aeabi_dmul>
  403d4e:	e9d4 2300 	ldrd	r2, r3, [r4]
  403d52:	f003 f9ad 	bl	4070b0 <__aeabi_dmul>
  403d56:	4680      	mov	r8, r0
  403d58:	4689      	mov	r9, r1
  403d5a:	e3ae      	b.n	4044ba <_strtod_l+0xb7a>
  403d5c:	f117 0f16 	cmn.w	r7, #22
  403d60:	db09      	blt.n	403d76 <_strtod_l+0x436>
  403d62:	4d69      	ldr	r5, [pc, #420]	; (403f08 <_strtod_l+0x5c8>)
  403d64:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
  403d68:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d6c:	4640      	mov	r0, r8
  403d6e:	4649      	mov	r1, r9
  403d70:	f003 fac8 	bl	407304 <__aeabi_ddiv>
  403d74:	e7ef      	b.n	403d56 <_strtod_l+0x416>
  403d76:	1b2c      	subs	r4, r5, r4
  403d78:	443c      	add	r4, r7
  403d7a:	2c00      	cmp	r4, #0
  403d7c:	dd5d      	ble.n	403e3a <_strtod_l+0x4fa>
  403d7e:	f014 010f 	ands.w	r1, r4, #15
  403d82:	d00a      	beq.n	403d9a <_strtod_l+0x45a>
  403d84:	4b60      	ldr	r3, [pc, #384]	; (403f08 <_strtod_l+0x5c8>)
  403d86:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403d8a:	4642      	mov	r2, r8
  403d8c:	464b      	mov	r3, r9
  403d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d92:	f003 f98d 	bl	4070b0 <__aeabi_dmul>
  403d96:	4680      	mov	r8, r0
  403d98:	4689      	mov	r9, r1
  403d9a:	f034 040f 	bics.w	r4, r4, #15
  403d9e:	f000 80c1 	beq.w	403f24 <_strtod_l+0x5e4>
  403da2:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  403da6:	dd0f      	ble.n	403dc8 <_strtod_l+0x488>
  403da8:	f04f 0b00 	mov.w	fp, #0
  403dac:	f8cd b010 	str.w	fp, [sp, #16]
  403db0:	f8cd b01c 	str.w	fp, [sp, #28]
  403db4:	f8cd b018 	str.w	fp, [sp, #24]
  403db8:	2322      	movs	r3, #34	; 0x22
  403dba:	f8ca 3000 	str.w	r3, [sl]
  403dbe:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403f18 <_strtod_l+0x5d8>
  403dc2:	f04f 0800 	mov.w	r8, #0
  403dc6:	e188      	b.n	4040da <_strtod_l+0x79a>
  403dc8:	2300      	movs	r3, #0
  403dca:	4e50      	ldr	r6, [pc, #320]	; (403f0c <_strtod_l+0x5cc>)
  403dcc:	9305      	str	r3, [sp, #20]
  403dce:	1124      	asrs	r4, r4, #4
  403dd0:	4640      	mov	r0, r8
  403dd2:	4649      	mov	r1, r9
  403dd4:	2c01      	cmp	r4, #1
  403dd6:	dd0c      	ble.n	403df2 <_strtod_l+0x4b2>
  403dd8:	07e2      	lsls	r2, r4, #31
  403dda:	d504      	bpl.n	403de6 <_strtod_l+0x4a6>
  403ddc:	e9d6 2300 	ldrd	r2, r3, [r6]
  403de0:	f003 f966 	bl	4070b0 <__aeabi_dmul>
  403de4:	2301      	movs	r3, #1
  403de6:	9a05      	ldr	r2, [sp, #20]
  403de8:	3201      	adds	r2, #1
  403dea:	9205      	str	r2, [sp, #20]
  403dec:	1064      	asrs	r4, r4, #1
  403dee:	3608      	adds	r6, #8
  403df0:	e7f0      	b.n	403dd4 <_strtod_l+0x494>
  403df2:	b10b      	cbz	r3, 403df8 <_strtod_l+0x4b8>
  403df4:	4680      	mov	r8, r0
  403df6:	4689      	mov	r9, r1
  403df8:	4b44      	ldr	r3, [pc, #272]	; (403f0c <_strtod_l+0x5cc>)
  403dfa:	9a05      	ldr	r2, [sp, #20]
  403dfc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  403e00:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  403e04:	e9d1 0100 	ldrd	r0, r1, [r1]
  403e08:	4642      	mov	r2, r8
  403e0a:	464b      	mov	r3, r9
  403e0c:	f003 f950 	bl	4070b0 <__aeabi_dmul>
  403e10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403e14:	4689      	mov	r9, r1
  403e16:	460a      	mov	r2, r1
  403e18:	0d1b      	lsrs	r3, r3, #20
  403e1a:	493d      	ldr	r1, [pc, #244]	; (403f10 <_strtod_l+0x5d0>)
  403e1c:	051b      	lsls	r3, r3, #20
  403e1e:	428b      	cmp	r3, r1
  403e20:	4680      	mov	r8, r0
  403e22:	d8c1      	bhi.n	403da8 <_strtod_l+0x468>
  403e24:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
  403e28:	428b      	cmp	r3, r1
  403e2a:	bf86      	itte	hi
  403e2c:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 403f20 <_strtod_l+0x5e0>
  403e30:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
  403e34:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
  403e38:	e074      	b.n	403f24 <_strtod_l+0x5e4>
  403e3a:	d073      	beq.n	403f24 <_strtod_l+0x5e4>
  403e3c:	4264      	negs	r4, r4
  403e3e:	f014 020f 	ands.w	r2, r4, #15
  403e42:	d00a      	beq.n	403e5a <_strtod_l+0x51a>
  403e44:	4b30      	ldr	r3, [pc, #192]	; (403f08 <_strtod_l+0x5c8>)
  403e46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403e4a:	4640      	mov	r0, r8
  403e4c:	4649      	mov	r1, r9
  403e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e52:	f003 fa57 	bl	407304 <__aeabi_ddiv>
  403e56:	4680      	mov	r8, r0
  403e58:	4689      	mov	r9, r1
  403e5a:	1124      	asrs	r4, r4, #4
  403e5c:	d062      	beq.n	403f24 <_strtod_l+0x5e4>
  403e5e:	2c1f      	cmp	r4, #31
  403e60:	dd08      	ble.n	403e74 <_strtod_l+0x534>
  403e62:	f04f 0b00 	mov.w	fp, #0
  403e66:	f8cd b010 	str.w	fp, [sp, #16]
  403e6a:	f8cd b01c 	str.w	fp, [sp, #28]
  403e6e:	f8cd b018 	str.w	fp, [sp, #24]
  403e72:	e12b      	b.n	4040cc <_strtod_l+0x78c>
  403e74:	f014 0f10 	tst.w	r4, #16
  403e78:	bf0c      	ite	eq
  403e7a:	2300      	moveq	r3, #0
  403e7c:	236a      	movne	r3, #106	; 0x6a
  403e7e:	4e25      	ldr	r6, [pc, #148]	; (403f14 <_strtod_l+0x5d4>)
  403e80:	9305      	str	r3, [sp, #20]
  403e82:	4640      	mov	r0, r8
  403e84:	4649      	mov	r1, r9
  403e86:	2300      	movs	r3, #0
  403e88:	2c00      	cmp	r4, #0
  403e8a:	dd09      	ble.n	403ea0 <_strtod_l+0x560>
  403e8c:	07e2      	lsls	r2, r4, #31
  403e8e:	d504      	bpl.n	403e9a <_strtod_l+0x55a>
  403e90:	e9d6 2300 	ldrd	r2, r3, [r6]
  403e94:	f003 f90c 	bl	4070b0 <__aeabi_dmul>
  403e98:	2301      	movs	r3, #1
  403e9a:	1064      	asrs	r4, r4, #1
  403e9c:	3608      	adds	r6, #8
  403e9e:	e7f3      	b.n	403e88 <_strtod_l+0x548>
  403ea0:	b10b      	cbz	r3, 403ea6 <_strtod_l+0x566>
  403ea2:	4680      	mov	r8, r0
  403ea4:	4689      	mov	r9, r1
  403ea6:	9b05      	ldr	r3, [sp, #20]
  403ea8:	b1eb      	cbz	r3, 403ee6 <_strtod_l+0x5a6>
  403eaa:	f3c9 530a 	ubfx	r3, r9, #20, #11
  403eae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  403eb2:	2b00      	cmp	r3, #0
  403eb4:	4649      	mov	r1, r9
  403eb6:	dd16      	ble.n	403ee6 <_strtod_l+0x5a6>
  403eb8:	2b1f      	cmp	r3, #31
  403eba:	dd0e      	ble.n	403eda <_strtod_l+0x59a>
  403ebc:	2b34      	cmp	r3, #52	; 0x34
  403ebe:	bfde      	ittt	le
  403ec0:	3b20      	suble	r3, #32
  403ec2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
  403ec6:	fa02 f303 	lslle.w	r3, r2, r3
  403eca:	f04f 0800 	mov.w	r8, #0
  403ece:	bfcc      	ite	gt
  403ed0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
  403ed4:	ea03 0901 	andle.w	r9, r3, r1
  403ed8:	e005      	b.n	403ee6 <_strtod_l+0x5a6>
  403eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  403ede:	fa02 f303 	lsl.w	r3, r2, r3
  403ee2:	ea03 0808 	and.w	r8, r3, r8
  403ee6:	2200      	movs	r2, #0
  403ee8:	2300      	movs	r3, #0
  403eea:	4640      	mov	r0, r8
  403eec:	4649      	mov	r1, r9
  403eee:	f003 fb47 	bl	407580 <__aeabi_dcmpeq>
  403ef2:	2800      	cmp	r0, #0
  403ef4:	d1b5      	bne.n	403e62 <_strtod_l+0x522>
  403ef6:	e017      	b.n	403f28 <_strtod_l+0x5e8>
  403ef8:	004081d9 	.word	0x004081d9
  403efc:	0040825b 	.word	0x0040825b
  403f00:	004081e1 	.word	0x004081e1
  403f04:	00408244 	.word	0x00408244
  403f08:	004082d8 	.word	0x004082d8
  403f0c:	004083a0 	.word	0x004083a0
  403f10:	7ca00000 	.word	0x7ca00000
  403f14:	00408208 	.word	0x00408208
  403f18:	7ff00000 	.word	0x7ff00000
  403f1c:	fff80000 	.word	0xfff80000
  403f20:	7fefffff 	.word	0x7fefffff
  403f24:	2300      	movs	r3, #0
  403f26:	9305      	str	r3, [sp, #20]
  403f28:	f8cd b000 	str.w	fp, [sp]
  403f2c:	462b      	mov	r3, r5
  403f2e:	9a04      	ldr	r2, [sp, #16]
  403f30:	9909      	ldr	r1, [sp, #36]	; 0x24
  403f32:	4650      	mov	r0, sl
  403f34:	f002 f8c3 	bl	4060be <__s2b>
  403f38:	9007      	str	r0, [sp, #28]
  403f3a:	2800      	cmp	r0, #0
  403f3c:	f43f af34 	beq.w	403da8 <_strtod_l+0x468>
  403f40:	2f00      	cmp	r7, #0
  403f42:	f1c7 0300 	rsb	r3, r7, #0
  403f46:	bfa8      	it	ge
  403f48:	2300      	movge	r3, #0
  403f4a:	930f      	str	r3, [sp, #60]	; 0x3c
  403f4c:	f04f 0b00 	mov.w	fp, #0
  403f50:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
  403f54:	9314      	str	r3, [sp, #80]	; 0x50
  403f56:	f8cd b010 	str.w	fp, [sp, #16]
  403f5a:	9b07      	ldr	r3, [sp, #28]
  403f5c:	4650      	mov	r0, sl
  403f5e:	6859      	ldr	r1, [r3, #4]
  403f60:	f002 f826 	bl	405fb0 <_Balloc>
  403f64:	9006      	str	r0, [sp, #24]
  403f66:	2800      	cmp	r0, #0
  403f68:	f43f af26 	beq.w	403db8 <_strtod_l+0x478>
  403f6c:	9b07      	ldr	r3, [sp, #28]
  403f6e:	691a      	ldr	r2, [r3, #16]
  403f70:	3202      	adds	r2, #2
  403f72:	f103 010c 	add.w	r1, r3, #12
  403f76:	0092      	lsls	r2, r2, #2
  403f78:	300c      	adds	r0, #12
  403f7a:	f7fe fef5 	bl	402d68 <memcpy>
  403f7e:	ab1c      	add	r3, sp, #112	; 0x70
  403f80:	9301      	str	r3, [sp, #4]
  403f82:	ab1b      	add	r3, sp, #108	; 0x6c
  403f84:	9300      	str	r3, [sp, #0]
  403f86:	4642      	mov	r2, r8
  403f88:	464b      	mov	r3, r9
  403f8a:	4650      	mov	r0, sl
  403f8c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  403f90:	f002 fb45 	bl	40661e <__d2b>
  403f94:	901a      	str	r0, [sp, #104]	; 0x68
  403f96:	2800      	cmp	r0, #0
  403f98:	f43f af0e 	beq.w	403db8 <_strtod_l+0x478>
  403f9c:	2101      	movs	r1, #1
  403f9e:	4650      	mov	r0, sl
  403fa0:	f002 f918 	bl	4061d4 <__i2b>
  403fa4:	9004      	str	r0, [sp, #16]
  403fa6:	2800      	cmp	r0, #0
  403fa8:	f43f af06 	beq.w	403db8 <_strtod_l+0x478>
  403fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  403fae:	9905      	ldr	r1, [sp, #20]
  403fb0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  403fb2:	2b00      	cmp	r3, #0
  403fb4:	bfad      	iteet	ge
  403fb6:	9a0f      	ldrge	r2, [sp, #60]	; 0x3c
  403fb8:	9a14      	ldrlt	r2, [sp, #80]	; 0x50
  403fba:	9e0f      	ldrlt	r6, [sp, #60]	; 0x3c
  403fbc:	18d6      	addge	r6, r2, r3
  403fbe:	bfb8      	it	lt
  403fc0:	1ad2      	sublt	r2, r2, r3
  403fc2:	eba3 0301 	sub.w	r3, r3, r1
  403fc6:	4423      	add	r3, r4
  403fc8:	49af      	ldr	r1, [pc, #700]	; (404288 <_strtod_l+0x948>)
  403fca:	bfa8      	it	ge
  403fcc:	9a14      	ldrge	r2, [sp, #80]	; 0x50
  403fce:	3b01      	subs	r3, #1
  403fd0:	428b      	cmp	r3, r1
  403fd2:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
  403fd6:	f280 8085 	bge.w	4040e4 <_strtod_l+0x7a4>
  403fda:	1ac9      	subs	r1, r1, r3
  403fdc:	291f      	cmp	r1, #31
  403fde:	bfc8      	it	gt
  403fe0:	4daa      	ldrgt	r5, [pc, #680]	; (40428c <_strtod_l+0x94c>)
  403fe2:	f04f 0701 	mov.w	r7, #1
  403fe6:	bfd4      	ite	le
  403fe8:	fa07 f301 	lslle.w	r3, r7, r1
  403fec:	1aed      	subgt	r5, r5, r3
  403fee:	eba4 0401 	sub.w	r4, r4, r1
  403ff2:	bfd9      	ittee	le
  403ff4:	9309      	strle	r3, [sp, #36]	; 0x24
  403ff6:	2500      	movle	r5, #0
  403ff8:	fa07 f505 	lslgt.w	r5, r7, r5
  403ffc:	9709      	strgt	r7, [sp, #36]	; 0x24
  403ffe:	1937      	adds	r7, r6, r4
  404000:	9b05      	ldr	r3, [sp, #20]
  404002:	42be      	cmp	r6, r7
  404004:	4414      	add	r4, r2
  404006:	441c      	add	r4, r3
  404008:	4633      	mov	r3, r6
  40400a:	bfa8      	it	ge
  40400c:	463b      	movge	r3, r7
  40400e:	42a3      	cmp	r3, r4
  404010:	bfa8      	it	ge
  404012:	4623      	movge	r3, r4
  404014:	2b00      	cmp	r3, #0
  404016:	bfc2      	ittt	gt
  404018:	1aff      	subgt	r7, r7, r3
  40401a:	1ae4      	subgt	r4, r4, r3
  40401c:	1af6      	subgt	r6, r6, r3
  40401e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404020:	2b00      	cmp	r3, #0
  404022:	d163      	bne.n	4040ec <_strtod_l+0x7ac>
  404024:	2f00      	cmp	r7, #0
  404026:	dc7a      	bgt.n	40411e <_strtod_l+0x7de>
  404028:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40402a:	2b00      	cmp	r3, #0
  40402c:	f040 8081 	bne.w	404132 <_strtod_l+0x7f2>
  404030:	2c00      	cmp	r4, #0
  404032:	f300 8088 	bgt.w	404146 <_strtod_l+0x806>
  404036:	2e00      	cmp	r6, #0
  404038:	f300 808f 	bgt.w	40415a <_strtod_l+0x81a>
  40403c:	9a06      	ldr	r2, [sp, #24]
  40403e:	991a      	ldr	r1, [sp, #104]	; 0x68
  404040:	4650      	mov	r0, sl
  404042:	f002 fa1c 	bl	40647e <__mdiff>
  404046:	4683      	mov	fp, r0
  404048:	2800      	cmp	r0, #0
  40404a:	f43f aeb5 	beq.w	403db8 <_strtod_l+0x478>
  40404e:	2400      	movs	r4, #0
  404050:	68c3      	ldr	r3, [r0, #12]
  404052:	9904      	ldr	r1, [sp, #16]
  404054:	60c4      	str	r4, [r0, #12]
  404056:	9308      	str	r3, [sp, #32]
  404058:	f002 f9f5 	bl	406446 <__mcmp>
  40405c:	42a0      	cmp	r0, r4
  40405e:	f280 808b 	bge.w	404178 <_strtod_l+0x838>
  404062:	9b08      	ldr	r3, [sp, #32]
  404064:	2b00      	cmp	r3, #0
  404066:	f040 8201 	bne.w	40446c <_strtod_l+0xb2c>
  40406a:	f1b8 0f00 	cmp.w	r8, #0
  40406e:	f040 81fd 	bne.w	40446c <_strtod_l+0xb2c>
  404072:	f3c9 0313 	ubfx	r3, r9, #0, #20
  404076:	2b00      	cmp	r3, #0
  404078:	f040 81f8 	bne.w	40446c <_strtod_l+0xb2c>
  40407c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  404080:	0d1b      	lsrs	r3, r3, #20
  404082:	051b      	lsls	r3, r3, #20
  404084:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  404088:	f240 81f0 	bls.w	40446c <_strtod_l+0xb2c>
  40408c:	f8db 3014 	ldr.w	r3, [fp, #20]
  404090:	2b00      	cmp	r3, #0
  404092:	d06c      	beq.n	40416e <_strtod_l+0x82e>
  404094:	4659      	mov	r1, fp
  404096:	2201      	movs	r2, #1
  404098:	4650      	mov	r0, sl
  40409a:	f002 f983 	bl	4063a4 <__lshift>
  40409e:	9904      	ldr	r1, [sp, #16]
  4040a0:	4683      	mov	fp, r0
  4040a2:	f002 f9d0 	bl	406446 <__mcmp>
  4040a6:	2800      	cmp	r0, #0
  4040a8:	f340 81e0 	ble.w	40446c <_strtod_l+0xb2c>
  4040ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4040b0:	9a05      	ldr	r2, [sp, #20]
  4040b2:	0d1b      	lsrs	r3, r3, #20
  4040b4:	051b      	lsls	r3, r3, #20
  4040b6:	2a00      	cmp	r2, #0
  4040b8:	f000 808d 	beq.w	4041d6 <_strtod_l+0x896>
  4040bc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4040c0:	f300 8089 	bgt.w	4041d6 <_strtod_l+0x896>
  4040c4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  4040c8:	f300 81d2 	bgt.w	404470 <_strtod_l+0xb30>
  4040cc:	2322      	movs	r3, #34	; 0x22
  4040ce:	f04f 0800 	mov.w	r8, #0
  4040d2:	f04f 0900 	mov.w	r9, #0
  4040d6:	f8ca 3000 	str.w	r3, [sl]
  4040da:	9b07      	ldr	r3, [sp, #28]
  4040dc:	2b00      	cmp	r3, #0
  4040de:	f040 81d8 	bne.w	404492 <_strtod_l+0xb52>
  4040e2:	e1ea      	b.n	4044ba <_strtod_l+0xb7a>
  4040e4:	2301      	movs	r3, #1
  4040e6:	2500      	movs	r5, #0
  4040e8:	9309      	str	r3, [sp, #36]	; 0x24
  4040ea:	e788      	b.n	403ffe <_strtod_l+0x6be>
  4040ec:	461a      	mov	r2, r3
  4040ee:	9904      	ldr	r1, [sp, #16]
  4040f0:	4650      	mov	r0, sl
  4040f2:	f002 f909 	bl	406308 <__pow5mult>
  4040f6:	9004      	str	r0, [sp, #16]
  4040f8:	2800      	cmp	r0, #0
  4040fa:	f43f ae5d 	beq.w	403db8 <_strtod_l+0x478>
  4040fe:	4601      	mov	r1, r0
  404100:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404102:	4650      	mov	r0, sl
  404104:	f002 f86f 	bl	4061e6 <__multiply>
  404108:	9008      	str	r0, [sp, #32]
  40410a:	2800      	cmp	r0, #0
  40410c:	f43f ae54 	beq.w	403db8 <_strtod_l+0x478>
  404110:	991a      	ldr	r1, [sp, #104]	; 0x68
  404112:	4650      	mov	r0, sl
  404114:	f001 ff81 	bl	40601a <_Bfree>
  404118:	9b08      	ldr	r3, [sp, #32]
  40411a:	931a      	str	r3, [sp, #104]	; 0x68
  40411c:	e782      	b.n	404024 <_strtod_l+0x6e4>
  40411e:	463a      	mov	r2, r7
  404120:	991a      	ldr	r1, [sp, #104]	; 0x68
  404122:	4650      	mov	r0, sl
  404124:	f002 f93e 	bl	4063a4 <__lshift>
  404128:	901a      	str	r0, [sp, #104]	; 0x68
  40412a:	2800      	cmp	r0, #0
  40412c:	f47f af7c 	bne.w	404028 <_strtod_l+0x6e8>
  404130:	e642      	b.n	403db8 <_strtod_l+0x478>
  404132:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404134:	9906      	ldr	r1, [sp, #24]
  404136:	4650      	mov	r0, sl
  404138:	f002 f8e6 	bl	406308 <__pow5mult>
  40413c:	9006      	str	r0, [sp, #24]
  40413e:	2800      	cmp	r0, #0
  404140:	f47f af76 	bne.w	404030 <_strtod_l+0x6f0>
  404144:	e638      	b.n	403db8 <_strtod_l+0x478>
  404146:	4622      	mov	r2, r4
  404148:	9906      	ldr	r1, [sp, #24]
  40414a:	4650      	mov	r0, sl
  40414c:	f002 f92a 	bl	4063a4 <__lshift>
  404150:	9006      	str	r0, [sp, #24]
  404152:	2800      	cmp	r0, #0
  404154:	f47f af6f 	bne.w	404036 <_strtod_l+0x6f6>
  404158:	e62e      	b.n	403db8 <_strtod_l+0x478>
  40415a:	4632      	mov	r2, r6
  40415c:	9904      	ldr	r1, [sp, #16]
  40415e:	4650      	mov	r0, sl
  404160:	f002 f920 	bl	4063a4 <__lshift>
  404164:	9004      	str	r0, [sp, #16]
  404166:	2800      	cmp	r0, #0
  404168:	f47f af68 	bne.w	40403c <_strtod_l+0x6fc>
  40416c:	e624      	b.n	403db8 <_strtod_l+0x478>
  40416e:	f8db 3010 	ldr.w	r3, [fp, #16]
  404172:	2b01      	cmp	r3, #1
  404174:	dc8e      	bgt.n	404094 <_strtod_l+0x754>
  404176:	e179      	b.n	40446c <_strtod_l+0xb2c>
  404178:	d161      	bne.n	40423e <_strtod_l+0x8fe>
  40417a:	9a08      	ldr	r2, [sp, #32]
  40417c:	f3c9 0313 	ubfx	r3, r9, #0, #20
  404180:	b322      	cbz	r2, 4041cc <_strtod_l+0x88c>
  404182:	4943      	ldr	r1, [pc, #268]	; (404290 <_strtod_l+0x950>)
  404184:	428b      	cmp	r3, r1
  404186:	464a      	mov	r2, r9
  404188:	d12e      	bne.n	4041e8 <_strtod_l+0x8a8>
  40418a:	9b05      	ldr	r3, [sp, #20]
  40418c:	4641      	mov	r1, r8
  40418e:	b163      	cbz	r3, 4041aa <_strtod_l+0x86a>
  404190:	4b40      	ldr	r3, [pc, #256]	; (404294 <_strtod_l+0x954>)
  404192:	4013      	ands	r3, r2
  404194:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  404198:	d807      	bhi.n	4041aa <_strtod_l+0x86a>
  40419a:	0d1b      	lsrs	r3, r3, #20
  40419c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4041a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4041a4:	fa00 f303 	lsl.w	r3, r0, r3
  4041a8:	e001      	b.n	4041ae <_strtod_l+0x86e>
  4041aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  4041ae:	428b      	cmp	r3, r1
  4041b0:	d11a      	bne.n	4041e8 <_strtod_l+0x8a8>
  4041b2:	4939      	ldr	r1, [pc, #228]	; (404298 <_strtod_l+0x958>)
  4041b4:	428a      	cmp	r2, r1
  4041b6:	d102      	bne.n	4041be <_strtod_l+0x87e>
  4041b8:	3301      	adds	r3, #1
  4041ba:	f43f adfd 	beq.w	403db8 <_strtod_l+0x478>
  4041be:	4b35      	ldr	r3, [pc, #212]	; (404294 <_strtod_l+0x954>)
  4041c0:	4013      	ands	r3, r2
  4041c2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
  4041c6:	f04f 0800 	mov.w	r8, #0
  4041ca:	e14f      	b.n	40446c <_strtod_l+0xb2c>
  4041cc:	b963      	cbnz	r3, 4041e8 <_strtod_l+0x8a8>
  4041ce:	f1b8 0f00 	cmp.w	r8, #0
  4041d2:	d109      	bne.n	4041e8 <_strtod_l+0x8a8>
  4041d4:	e76a      	b.n	4040ac <_strtod_l+0x76c>
  4041d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  4041da:	ea6f 5913 	mvn.w	r9, r3, lsr #20
  4041de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
  4041e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  4041e6:	e141      	b.n	40446c <_strtod_l+0xb2c>
  4041e8:	b115      	cbz	r5, 4041f0 <_strtod_l+0x8b0>
  4041ea:	ea15 0f09 	tst.w	r5, r9
  4041ee:	e002      	b.n	4041f6 <_strtod_l+0x8b6>
  4041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041f2:	ea13 0f08 	tst.w	r3, r8
  4041f6:	f000 8139 	beq.w	40446c <_strtod_l+0xb2c>
  4041fa:	9b08      	ldr	r3, [sp, #32]
  4041fc:	9a05      	ldr	r2, [sp, #20]
  4041fe:	4640      	mov	r0, r8
  404200:	4649      	mov	r1, r9
  404202:	b153      	cbz	r3, 40421a <_strtod_l+0x8da>
  404204:	f7ff fb78 	bl	4038f8 <sulp>
  404208:	4602      	mov	r2, r0
  40420a:	460b      	mov	r3, r1
  40420c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404210:	f002 fd9c 	bl	406d4c <__adddf3>
  404214:	4680      	mov	r8, r0
  404216:	4689      	mov	r9, r1
  404218:	e128      	b.n	40446c <_strtod_l+0xb2c>
  40421a:	f7ff fb6d 	bl	4038f8 <sulp>
  40421e:	4602      	mov	r2, r0
  404220:	460b      	mov	r3, r1
  404222:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404226:	f002 fd8f 	bl	406d48 <__aeabi_dsub>
  40422a:	2200      	movs	r2, #0
  40422c:	2300      	movs	r3, #0
  40422e:	4680      	mov	r8, r0
  404230:	4689      	mov	r9, r1
  404232:	f003 f9a5 	bl	407580 <__aeabi_dcmpeq>
  404236:	2800      	cmp	r0, #0
  404238:	f47f af48 	bne.w	4040cc <_strtod_l+0x78c>
  40423c:	e116      	b.n	40446c <_strtod_l+0xb2c>
  40423e:	9904      	ldr	r1, [sp, #16]
  404240:	4658      	mov	r0, fp
  404242:	f002 fa3a 	bl	4066ba <__ratio>
  404246:	2200      	movs	r2, #0
  404248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40424c:	4606      	mov	r6, r0
  40424e:	460f      	mov	r7, r1
  404250:	f003 f9aa 	bl	4075a8 <__aeabi_dcmple>
  404254:	2800      	cmp	r0, #0
  404256:	d03e      	beq.n	4042d6 <_strtod_l+0x996>
  404258:	9b08      	ldr	r3, [sp, #32]
  40425a:	b113      	cbz	r3, 404262 <_strtod_l+0x922>
  40425c:	2600      	movs	r6, #0
  40425e:	4f0f      	ldr	r7, [pc, #60]	; (40429c <_strtod_l+0x95c>)
  404260:	e010      	b.n	404284 <_strtod_l+0x944>
  404262:	f1b8 0f00 	cmp.w	r8, #0
  404266:	d103      	bne.n	404270 <_strtod_l+0x930>
  404268:	f3c9 0313 	ubfx	r3, r9, #0, #20
  40426c:	b93b      	cbnz	r3, 40427e <_strtod_l+0x93e>
  40426e:	e019      	b.n	4042a4 <_strtod_l+0x964>
  404270:	f1b8 0f01 	cmp.w	r8, #1
  404274:	d103      	bne.n	40427e <_strtod_l+0x93e>
  404276:	f1b9 0f00 	cmp.w	r9, #0
  40427a:	f43f af27 	beq.w	4040cc <_strtod_l+0x78c>
  40427e:	4f08      	ldr	r7, [pc, #32]	; (4042a0 <_strtod_l+0x960>)
  404280:	2600      	movs	r6, #0
  404282:	2400      	movs	r4, #0
  404284:	4d05      	ldr	r5, [pc, #20]	; (40429c <_strtod_l+0x95c>)
  404286:	e03b      	b.n	404300 <_strtod_l+0x9c0>
  404288:	fffffc02 	.word	0xfffffc02
  40428c:	fffffbe2 	.word	0xfffffbe2
  404290:	000fffff 	.word	0x000fffff
  404294:	7ff00000 	.word	0x7ff00000
  404298:	7fefffff 	.word	0x7fefffff
  40429c:	3ff00000 	.word	0x3ff00000
  4042a0:	bff00000 	.word	0xbff00000
  4042a4:	2200      	movs	r2, #0
  4042a6:	4b9a      	ldr	r3, [pc, #616]	; (404510 <_strtod_l+0xbd0>)
  4042a8:	4630      	mov	r0, r6
  4042aa:	4639      	mov	r1, r7
  4042ac:	f003 f972 	bl	407594 <__aeabi_dcmplt>
  4042b0:	b940      	cbnz	r0, 4042c4 <_strtod_l+0x984>
  4042b2:	2200      	movs	r2, #0
  4042b4:	4b97      	ldr	r3, [pc, #604]	; (404514 <_strtod_l+0xbd4>)
  4042b6:	4630      	mov	r0, r6
  4042b8:	4639      	mov	r1, r7
  4042ba:	f002 fef9 	bl	4070b0 <__aeabi_dmul>
  4042be:	4604      	mov	r4, r0
  4042c0:	460d      	mov	r5, r1
  4042c2:	e001      	b.n	4042c8 <_strtod_l+0x988>
  4042c4:	9c08      	ldr	r4, [sp, #32]
  4042c6:	4d93      	ldr	r5, [pc, #588]	; (404514 <_strtod_l+0xbd4>)
  4042c8:	9416      	str	r4, [sp, #88]	; 0x58
  4042ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4042ce:	9317      	str	r3, [sp, #92]	; 0x5c
  4042d0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
  4042d4:	e014      	b.n	404300 <_strtod_l+0x9c0>
  4042d6:	4b8f      	ldr	r3, [pc, #572]	; (404514 <_strtod_l+0xbd4>)
  4042d8:	2200      	movs	r2, #0
  4042da:	4630      	mov	r0, r6
  4042dc:	4639      	mov	r1, r7
  4042de:	f002 fee7 	bl	4070b0 <__aeabi_dmul>
  4042e2:	9b08      	ldr	r3, [sp, #32]
  4042e4:	4604      	mov	r4, r0
  4042e6:	460d      	mov	r5, r1
  4042e8:	b923      	cbnz	r3, 4042f4 <_strtod_l+0x9b4>
  4042ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4042ee:	9010      	str	r0, [sp, #64]	; 0x40
  4042f0:	9311      	str	r3, [sp, #68]	; 0x44
  4042f2:	e003      	b.n	4042fc <_strtod_l+0x9bc>
  4042f4:	4602      	mov	r2, r0
  4042f6:	460b      	mov	r3, r1
  4042f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  4042fc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
  404300:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  404304:	0d1b      	lsrs	r3, r3, #20
  404306:	051b      	lsls	r3, r3, #20
  404308:	9309      	str	r3, [sp, #36]	; 0x24
  40430a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40430c:	4b82      	ldr	r3, [pc, #520]	; (404518 <_strtod_l+0xbd8>)
  40430e:	429a      	cmp	r2, r3
  404310:	d12b      	bne.n	40436a <_strtod_l+0xa2a>
  404312:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404316:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  40431a:	4640      	mov	r0, r8
  40431c:	4649      	mov	r1, r9
  40431e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  404322:	f002 f90b 	bl	40653c <__ulp>
  404326:	4602      	mov	r2, r0
  404328:	460b      	mov	r3, r1
  40432a:	4630      	mov	r0, r6
  40432c:	4639      	mov	r1, r7
  40432e:	f002 febf 	bl	4070b0 <__aeabi_dmul>
  404332:	4642      	mov	r2, r8
  404334:	464b      	mov	r3, r9
  404336:	f002 fd09 	bl	406d4c <__adddf3>
  40433a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40433e:	0d1b      	lsrs	r3, r3, #20
  404340:	4a76      	ldr	r2, [pc, #472]	; (40451c <_strtod_l+0xbdc>)
  404342:	051b      	lsls	r3, r3, #20
  404344:	4293      	cmp	r3, r2
  404346:	4680      	mov	r8, r0
  404348:	d90c      	bls.n	404364 <_strtod_l+0xa24>
  40434a:	4b75      	ldr	r3, [pc, #468]	; (404520 <_strtod_l+0xbe0>)
  40434c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40434e:	429a      	cmp	r2, r3
  404350:	d103      	bne.n	40435a <_strtod_l+0xa1a>
  404352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404354:	3301      	adds	r3, #1
  404356:	f43f ad2f 	beq.w	403db8 <_strtod_l+0x478>
  40435a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404520 <_strtod_l+0xbe0>
  40435e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  404362:	e072      	b.n	40444a <_strtod_l+0xb0a>
  404364:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
  404368:	e039      	b.n	4043de <_strtod_l+0xa9e>
  40436a:	9b05      	ldr	r3, [sp, #20]
  40436c:	b33b      	cbz	r3, 4043be <_strtod_l+0xa7e>
  40436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404370:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  404374:	d823      	bhi.n	4043be <_strtod_l+0xa7e>
  404376:	a35e      	add	r3, pc, #376	; (adr r3, 4044f0 <_strtod_l+0xbb0>)
  404378:	e9d3 2300 	ldrd	r2, r3, [r3]
  40437c:	4620      	mov	r0, r4
  40437e:	4629      	mov	r1, r5
  404380:	f003 f912 	bl	4075a8 <__aeabi_dcmple>
  404384:	b1b8      	cbz	r0, 4043b6 <_strtod_l+0xa76>
  404386:	4629      	mov	r1, r5
  404388:	4620      	mov	r0, r4
  40438a:	f003 f969 	bl	407660 <__aeabi_d2uiz>
  40438e:	2800      	cmp	r0, #0
  404390:	bf08      	it	eq
  404392:	2001      	moveq	r0, #1
  404394:	f002 fe16 	bl	406fc4 <__aeabi_ui2d>
  404398:	9b08      	ldr	r3, [sp, #32]
  40439a:	4604      	mov	r4, r0
  40439c:	460d      	mov	r5, r1
  40439e:	b923      	cbnz	r3, 4043aa <_strtod_l+0xa6a>
  4043a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4043a4:	9012      	str	r0, [sp, #72]	; 0x48
  4043a6:	9313      	str	r3, [sp, #76]	; 0x4c
  4043a8:	e003      	b.n	4043b2 <_strtod_l+0xa72>
  4043aa:	4602      	mov	r2, r0
  4043ac:	460b      	mov	r3, r1
  4043ae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4043b2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
  4043b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043b8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
  4043bc:	1a9f      	subs	r7, r3, r2
  4043be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4043c2:	f002 f8bb 	bl	40653c <__ulp>
  4043c6:	4602      	mov	r2, r0
  4043c8:	460b      	mov	r3, r1
  4043ca:	4630      	mov	r0, r6
  4043cc:	4639      	mov	r1, r7
  4043ce:	f002 fe6f 	bl	4070b0 <__aeabi_dmul>
  4043d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043d6:	f002 fcb9 	bl	406d4c <__adddf3>
  4043da:	4680      	mov	r8, r0
  4043dc:	4689      	mov	r9, r1
  4043de:	9b05      	ldr	r3, [sp, #20]
  4043e0:	bb9b      	cbnz	r3, 40444a <_strtod_l+0xb0a>
  4043e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4043e6:	0d1b      	lsrs	r3, r3, #20
  4043e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043ea:	051b      	lsls	r3, r3, #20
  4043ec:	429a      	cmp	r2, r3
  4043ee:	464e      	mov	r6, r9
  4043f0:	d12b      	bne.n	40444a <_strtod_l+0xb0a>
  4043f2:	4629      	mov	r1, r5
  4043f4:	4620      	mov	r0, r4
  4043f6:	f003 f90b 	bl	407610 <__aeabi_d2iz>
  4043fa:	f002 fdf3 	bl	406fe4 <__aeabi_i2d>
  4043fe:	460b      	mov	r3, r1
  404400:	4602      	mov	r2, r0
  404402:	4629      	mov	r1, r5
  404404:	4620      	mov	r0, r4
  404406:	f002 fc9f 	bl	406d48 <__aeabi_dsub>
  40440a:	9b08      	ldr	r3, [sp, #32]
  40440c:	4604      	mov	r4, r0
  40440e:	460d      	mov	r5, r1
  404410:	b92b      	cbnz	r3, 40441e <_strtod_l+0xade>
  404412:	f1b8 0f00 	cmp.w	r8, #0
  404416:	d102      	bne.n	40441e <_strtod_l+0xade>
  404418:	f3c9 0613 	ubfx	r6, r9, #0, #20
  40441c:	b17e      	cbz	r6, 40443e <_strtod_l+0xafe>
  40441e:	a336      	add	r3, pc, #216	; (adr r3, 4044f8 <_strtod_l+0xbb8>)
  404420:	e9d3 2300 	ldrd	r2, r3, [r3]
  404424:	4620      	mov	r0, r4
  404426:	4629      	mov	r1, r5
  404428:	f003 f8b4 	bl	407594 <__aeabi_dcmplt>
  40442c:	bb88      	cbnz	r0, 404492 <_strtod_l+0xb52>
  40442e:	a334      	add	r3, pc, #208	; (adr r3, 404500 <_strtod_l+0xbc0>)
  404430:	e9d3 2300 	ldrd	r2, r3, [r3]
  404434:	4620      	mov	r0, r4
  404436:	4629      	mov	r1, r5
  404438:	f003 f8ca 	bl	4075d0 <__aeabi_dcmpgt>
  40443c:	e004      	b.n	404448 <_strtod_l+0xb08>
  40443e:	a332      	add	r3, pc, #200	; (adr r3, 404508 <_strtod_l+0xbc8>)
  404440:	e9d3 2300 	ldrd	r2, r3, [r3]
  404444:	f003 f8a6 	bl	407594 <__aeabi_dcmplt>
  404448:	bb18      	cbnz	r0, 404492 <_strtod_l+0xb52>
  40444a:	991a      	ldr	r1, [sp, #104]	; 0x68
  40444c:	4650      	mov	r0, sl
  40444e:	f001 fde4 	bl	40601a <_Bfree>
  404452:	9906      	ldr	r1, [sp, #24]
  404454:	4650      	mov	r0, sl
  404456:	f001 fde0 	bl	40601a <_Bfree>
  40445a:	9904      	ldr	r1, [sp, #16]
  40445c:	4650      	mov	r0, sl
  40445e:	f001 fddc 	bl	40601a <_Bfree>
  404462:	4659      	mov	r1, fp
  404464:	4650      	mov	r0, sl
  404466:	f001 fdd8 	bl	40601a <_Bfree>
  40446a:	e576      	b.n	403f5a <_strtod_l+0x61a>
  40446c:	9b05      	ldr	r3, [sp, #20]
  40446e:	b183      	cbz	r3, 404492 <_strtod_l+0xb52>
  404470:	4b2c      	ldr	r3, [pc, #176]	; (404524 <_strtod_l+0xbe4>)
  404472:	930d      	str	r3, [sp, #52]	; 0x34
  404474:	2300      	movs	r3, #0
  404476:	930c      	str	r3, [sp, #48]	; 0x30
  404478:	4640      	mov	r0, r8
  40447a:	4649      	mov	r1, r9
  40447c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404480:	f002 fe16 	bl	4070b0 <__aeabi_dmul>
  404484:	4680      	mov	r8, r0
  404486:	4689      	mov	r9, r1
  404488:	b919      	cbnz	r1, 404492 <_strtod_l+0xb52>
  40448a:	b910      	cbnz	r0, 404492 <_strtod_l+0xb52>
  40448c:	2322      	movs	r3, #34	; 0x22
  40448e:	f8ca 3000 	str.w	r3, [sl]
  404492:	991a      	ldr	r1, [sp, #104]	; 0x68
  404494:	4650      	mov	r0, sl
  404496:	f001 fdc0 	bl	40601a <_Bfree>
  40449a:	9906      	ldr	r1, [sp, #24]
  40449c:	4650      	mov	r0, sl
  40449e:	f001 fdbc 	bl	40601a <_Bfree>
  4044a2:	9904      	ldr	r1, [sp, #16]
  4044a4:	4650      	mov	r0, sl
  4044a6:	f001 fdb8 	bl	40601a <_Bfree>
  4044aa:	9907      	ldr	r1, [sp, #28]
  4044ac:	4650      	mov	r0, sl
  4044ae:	f001 fdb4 	bl	40601a <_Bfree>
  4044b2:	4659      	mov	r1, fp
  4044b4:	4650      	mov	r0, sl
  4044b6:	f001 fdb0 	bl	40601a <_Bfree>
  4044ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4044bc:	b113      	cbz	r3, 4044c4 <_strtod_l+0xb84>
  4044be:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4044c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4044c2:	6013      	str	r3, [r2, #0]
  4044c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044c6:	b11b      	cbz	r3, 4044d0 <_strtod_l+0xb90>
  4044c8:	4642      	mov	r2, r8
  4044ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  4044ce:	e007      	b.n	4044e0 <_strtod_l+0xba0>
  4044d0:	4642      	mov	r2, r8
  4044d2:	464b      	mov	r3, r9
  4044d4:	e004      	b.n	4044e0 <_strtod_l+0xba0>
  4044d6:	2500      	movs	r5, #0
  4044d8:	462a      	mov	r2, r5
  4044da:	2101      	movs	r1, #1
  4044dc:	f7ff bb41 	b.w	403b62 <_strtod_l+0x222>
  4044e0:	4610      	mov	r0, r2
  4044e2:	4619      	mov	r1, r3
  4044e4:	b01f      	add	sp, #124	; 0x7c
  4044e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044ea:	bf00      	nop
  4044ec:	f3af 8000 	nop.w
  4044f0:	ffc00000 	.word	0xffc00000
  4044f4:	41dfffff 	.word	0x41dfffff
  4044f8:	94a03595 	.word	0x94a03595
  4044fc:	3fdfffff 	.word	0x3fdfffff
  404500:	35afe535 	.word	0x35afe535
  404504:	3fe00000 	.word	0x3fe00000
  404508:	94a03595 	.word	0x94a03595
  40450c:	3fcfffff 	.word	0x3fcfffff
  404510:	3ff00000 	.word	0x3ff00000
  404514:	3fe00000 	.word	0x3fe00000
  404518:	7fe00000 	.word	0x7fe00000
  40451c:	7c9fffff 	.word	0x7c9fffff
  404520:	7fefffff 	.word	0x7fefffff
  404524:	39500000 	.word	0x39500000

00404528 <strtod>:
  404528:	4b06      	ldr	r3, [pc, #24]	; (404544 <strtod+0x1c>)
  40452a:	4a07      	ldr	r2, [pc, #28]	; (404548 <strtod+0x20>)
  40452c:	b410      	push	{r4}
  40452e:	681c      	ldr	r4, [r3, #0]
  404530:	6a23      	ldr	r3, [r4, #32]
  404532:	2b00      	cmp	r3, #0
  404534:	bf08      	it	eq
  404536:	4613      	moveq	r3, r2
  404538:	460a      	mov	r2, r1
  40453a:	4601      	mov	r1, r0
  40453c:	4620      	mov	r0, r4
  40453e:	bc10      	pop	{r4}
  404540:	f7ff b9fe 	b.w	403940 <_strtod_l>
  404544:	20000078 	.word	0x20000078
  404548:	2000007c 	.word	0x2000007c

0040454c <__strtok_r>:
  40454c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40454e:	b948      	cbnz	r0, 404564 <__strtok_r+0x18>
  404550:	6810      	ldr	r0, [r2, #0]
  404552:	b938      	cbnz	r0, 404564 <__strtok_r+0x18>
  404554:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404556:	f817 6b01 	ldrb.w	r6, [r7], #1
  40455a:	b15e      	cbz	r6, 404574 <__strtok_r+0x28>
  40455c:	42b5      	cmp	r5, r6
  40455e:	d1fa      	bne.n	404556 <__strtok_r+0xa>
  404560:	b12b      	cbz	r3, 40456e <__strtok_r+0x22>
  404562:	4620      	mov	r0, r4
  404564:	4604      	mov	r4, r0
  404566:	460f      	mov	r7, r1
  404568:	f814 5b01 	ldrb.w	r5, [r4], #1
  40456c:	e7f3      	b.n	404556 <__strtok_r+0xa>
  40456e:	6014      	str	r4, [r2, #0]
  404570:	7003      	strb	r3, [r0, #0]
  404572:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404574:	b94d      	cbnz	r5, 40458a <__strtok_r+0x3e>
  404576:	6015      	str	r5, [r2, #0]
  404578:	4628      	mov	r0, r5
  40457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40457c:	f817 6b01 	ldrb.w	r6, [r7], #1
  404580:	42b5      	cmp	r5, r6
  404582:	d007      	beq.n	404594 <__strtok_r+0x48>
  404584:	2e00      	cmp	r6, #0
  404586:	d1f9      	bne.n	40457c <__strtok_r+0x30>
  404588:	461c      	mov	r4, r3
  40458a:	4623      	mov	r3, r4
  40458c:	460f      	mov	r7, r1
  40458e:	f813 5b01 	ldrb.w	r5, [r3], #1
  404592:	e7f3      	b.n	40457c <__strtok_r+0x30>
  404594:	b115      	cbz	r5, 40459c <__strtok_r+0x50>
  404596:	2100      	movs	r1, #0
  404598:	7021      	strb	r1, [r4, #0]
  40459a:	e000      	b.n	40459e <__strtok_r+0x52>
  40459c:	462b      	mov	r3, r5
  40459e:	6013      	str	r3, [r2, #0]
  4045a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

004045a2 <strtok_r>:
  4045a2:	2301      	movs	r3, #1
  4045a4:	f7ff bfd2 	b.w	40454c <__strtok_r>

004045a8 <_strtol_l.isra.0>:
  4045a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4045ac:	4680      	mov	r8, r0
  4045ae:	4689      	mov	r9, r1
  4045b0:	4692      	mov	sl, r2
  4045b2:	461e      	mov	r6, r3
  4045b4:	460f      	mov	r7, r1
  4045b6:	463d      	mov	r5, r7
  4045b8:	9808      	ldr	r0, [sp, #32]
  4045ba:	f815 4b01 	ldrb.w	r4, [r5], #1
  4045be:	f001 fc19 	bl	405df4 <__locale_ctype_ptr_l>
  4045c2:	4420      	add	r0, r4
  4045c4:	7842      	ldrb	r2, [r0, #1]
  4045c6:	f002 0208 	and.w	r2, r2, #8
  4045ca:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  4045ce:	b10a      	cbz	r2, 4045d4 <_strtol_l.isra.0+0x2c>
  4045d0:	462f      	mov	r7, r5
  4045d2:	e7f0      	b.n	4045b6 <_strtol_l.isra.0+0xe>
  4045d4:	2c2d      	cmp	r4, #45	; 0x2d
  4045d6:	d103      	bne.n	4045e0 <_strtol_l.isra.0+0x38>
  4045d8:	1cbd      	adds	r5, r7, #2
  4045da:	787c      	ldrb	r4, [r7, #1]
  4045dc:	2301      	movs	r3, #1
  4045de:	e003      	b.n	4045e8 <_strtol_l.isra.0+0x40>
  4045e0:	2c2b      	cmp	r4, #43	; 0x2b
  4045e2:	bf04      	itt	eq
  4045e4:	787c      	ldrbeq	r4, [r7, #1]
  4045e6:	1cbd      	addeq	r5, r7, #2
  4045e8:	b116      	cbz	r6, 4045f0 <_strtol_l.isra.0+0x48>
  4045ea:	2e10      	cmp	r6, #16
  4045ec:	d10a      	bne.n	404604 <_strtol_l.isra.0+0x5c>
  4045ee:	e05e      	b.n	4046ae <_strtol_l.isra.0+0x106>
  4045f0:	2c30      	cmp	r4, #48	; 0x30
  4045f2:	d15a      	bne.n	4046aa <_strtol_l.isra.0+0x102>
  4045f4:	782a      	ldrb	r2, [r5, #0]
  4045f6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
  4045fa:	2a58      	cmp	r2, #88	; 0x58
  4045fc:	d150      	bne.n	4046a0 <_strtol_l.isra.0+0xf8>
  4045fe:	786c      	ldrb	r4, [r5, #1]
  404600:	2610      	movs	r6, #16
  404602:	3502      	adds	r5, #2
  404604:	2b00      	cmp	r3, #0
  404606:	bf14      	ite	ne
  404608:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  40460c:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
  404610:	fbb2 fef6 	udiv	lr, r2, r6
  404614:	fb06 211e 	mls	r1, r6, lr, r2
  404618:	2200      	movs	r2, #0
  40461a:	4610      	mov	r0, r2
  40461c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
  404620:	2f09      	cmp	r7, #9
  404622:	d801      	bhi.n	404628 <_strtol_l.isra.0+0x80>
  404624:	463c      	mov	r4, r7
  404626:	e00a      	b.n	40463e <_strtol_l.isra.0+0x96>
  404628:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
  40462c:	2f19      	cmp	r7, #25
  40462e:	d801      	bhi.n	404634 <_strtol_l.isra.0+0x8c>
  404630:	3c37      	subs	r4, #55	; 0x37
  404632:	e004      	b.n	40463e <_strtol_l.isra.0+0x96>
  404634:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
  404638:	2f19      	cmp	r7, #25
  40463a:	d813      	bhi.n	404664 <_strtol_l.isra.0+0xbc>
  40463c:	3c57      	subs	r4, #87	; 0x57
  40463e:	42a6      	cmp	r6, r4
  404640:	dd10      	ble.n	404664 <_strtol_l.isra.0+0xbc>
  404642:	1c57      	adds	r7, r2, #1
  404644:	d00b      	beq.n	40465e <_strtol_l.isra.0+0xb6>
  404646:	4586      	cmp	lr, r0
  404648:	d307      	bcc.n	40465a <_strtol_l.isra.0+0xb2>
  40464a:	d101      	bne.n	404650 <_strtol_l.isra.0+0xa8>
  40464c:	42a1      	cmp	r1, r4
  40464e:	db03      	blt.n	404658 <_strtol_l.isra.0+0xb0>
  404650:	fb00 4006 	mla	r0, r0, r6, r4
  404654:	2201      	movs	r2, #1
  404656:	e002      	b.n	40465e <_strtol_l.isra.0+0xb6>
  404658:	4670      	mov	r0, lr
  40465a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40465e:	f815 4b01 	ldrb.w	r4, [r5], #1
  404662:	e7db      	b.n	40461c <_strtol_l.isra.0+0x74>
  404664:	1c51      	adds	r1, r2, #1
  404666:	d10e      	bne.n	404686 <_strtol_l.isra.0+0xde>
  404668:	2b00      	cmp	r3, #0
  40466a:	f04f 0322 	mov.w	r3, #34	; 0x22
  40466e:	bf14      	ite	ne
  404670:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  404674:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404678:	f8c8 3000 	str.w	r3, [r8]
  40467c:	f1ba 0f00 	cmp.w	sl, #0
  404680:	d107      	bne.n	404692 <_strtol_l.isra.0+0xea>
  404682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404686:	b103      	cbz	r3, 40468a <_strtol_l.isra.0+0xe2>
  404688:	4240      	negs	r0, r0
  40468a:	f1ba 0f00 	cmp.w	sl, #0
  40468e:	d011      	beq.n	4046b4 <_strtol_l.isra.0+0x10c>
  404690:	b10a      	cbz	r2, 404696 <_strtol_l.isra.0+0xee>
  404692:	3d01      	subs	r5, #1
  404694:	e000      	b.n	404698 <_strtol_l.isra.0+0xf0>
  404696:	464d      	mov	r5, r9
  404698:	f8ca 5000 	str.w	r5, [sl]
  40469c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4046a0:	2430      	movs	r4, #48	; 0x30
  4046a2:	2e00      	cmp	r6, #0
  4046a4:	d1ae      	bne.n	404604 <_strtol_l.isra.0+0x5c>
  4046a6:	2608      	movs	r6, #8
  4046a8:	e7ac      	b.n	404604 <_strtol_l.isra.0+0x5c>
  4046aa:	260a      	movs	r6, #10
  4046ac:	e7aa      	b.n	404604 <_strtol_l.isra.0+0x5c>
  4046ae:	2c30      	cmp	r4, #48	; 0x30
  4046b0:	d0a0      	beq.n	4045f4 <_strtol_l.isra.0+0x4c>
  4046b2:	e7a7      	b.n	404604 <_strtol_l.isra.0+0x5c>
  4046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004046b8 <strtol>:
  4046b8:	4b08      	ldr	r3, [pc, #32]	; (4046dc <strtol+0x24>)
  4046ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  4046bc:	681c      	ldr	r4, [r3, #0]
  4046be:	4d08      	ldr	r5, [pc, #32]	; (4046e0 <strtol+0x28>)
  4046c0:	6a23      	ldr	r3, [r4, #32]
  4046c2:	2b00      	cmp	r3, #0
  4046c4:	bf08      	it	eq
  4046c6:	462b      	moveq	r3, r5
  4046c8:	9300      	str	r3, [sp, #0]
  4046ca:	4613      	mov	r3, r2
  4046cc:	460a      	mov	r2, r1
  4046ce:	4601      	mov	r1, r0
  4046d0:	4620      	mov	r0, r4
  4046d2:	f7ff ff69 	bl	4045a8 <_strtol_l.isra.0>
  4046d6:	b003      	add	sp, #12
  4046d8:	bd30      	pop	{r4, r5, pc}
  4046da:	bf00      	nop
  4046dc:	20000078 	.word	0x20000078
  4046e0:	2000007c 	.word	0x2000007c

004046e4 <__swbuf_r>:
  4046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046e6:	460f      	mov	r7, r1
  4046e8:	4614      	mov	r4, r2
  4046ea:	4605      	mov	r5, r0
  4046ec:	b118      	cbz	r0, 4046f6 <__swbuf_r+0x12>
  4046ee:	6983      	ldr	r3, [r0, #24]
  4046f0:	b90b      	cbnz	r3, 4046f6 <__swbuf_r+0x12>
  4046f2:	f000 ffd7 	bl	4056a4 <__sinit>
  4046f6:	4b22      	ldr	r3, [pc, #136]	; (404780 <__swbuf_r+0x9c>)
  4046f8:	429c      	cmp	r4, r3
  4046fa:	d101      	bne.n	404700 <__swbuf_r+0x1c>
  4046fc:	686c      	ldr	r4, [r5, #4]
  4046fe:	e008      	b.n	404712 <__swbuf_r+0x2e>
  404700:	4b20      	ldr	r3, [pc, #128]	; (404784 <__swbuf_r+0xa0>)
  404702:	429c      	cmp	r4, r3
  404704:	d101      	bne.n	40470a <__swbuf_r+0x26>
  404706:	68ac      	ldr	r4, [r5, #8]
  404708:	e003      	b.n	404712 <__swbuf_r+0x2e>
  40470a:	4b1f      	ldr	r3, [pc, #124]	; (404788 <__swbuf_r+0xa4>)
  40470c:	429c      	cmp	r4, r3
  40470e:	bf08      	it	eq
  404710:	68ec      	ldreq	r4, [r5, #12]
  404712:	69a3      	ldr	r3, [r4, #24]
  404714:	60a3      	str	r3, [r4, #8]
  404716:	89a3      	ldrh	r3, [r4, #12]
  404718:	071a      	lsls	r2, r3, #28
  40471a:	d509      	bpl.n	404730 <__swbuf_r+0x4c>
  40471c:	6923      	ldr	r3, [r4, #16]
  40471e:	b13b      	cbz	r3, 404730 <__swbuf_r+0x4c>
  404720:	6823      	ldr	r3, [r4, #0]
  404722:	6920      	ldr	r0, [r4, #16]
  404724:	1a18      	subs	r0, r3, r0
  404726:	6963      	ldr	r3, [r4, #20]
  404728:	4298      	cmp	r0, r3
  40472a:	b2fe      	uxtb	r6, r7
  40472c:	db0f      	blt.n	40474e <__swbuf_r+0x6a>
  40472e:	e008      	b.n	404742 <__swbuf_r+0x5e>
  404730:	4621      	mov	r1, r4
  404732:	4628      	mov	r0, r5
  404734:	f000 f82a 	bl	40478c <__swsetup_r>
  404738:	2800      	cmp	r0, #0
  40473a:	d0f1      	beq.n	404720 <__swbuf_r+0x3c>
  40473c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  404740:	e01b      	b.n	40477a <__swbuf_r+0x96>
  404742:	4621      	mov	r1, r4
  404744:	4628      	mov	r0, r5
  404746:	f000 ff43 	bl	4055d0 <_fflush_r>
  40474a:	2800      	cmp	r0, #0
  40474c:	d1f6      	bne.n	40473c <__swbuf_r+0x58>
  40474e:	68a3      	ldr	r3, [r4, #8]
  404750:	3b01      	subs	r3, #1
  404752:	60a3      	str	r3, [r4, #8]
  404754:	6823      	ldr	r3, [r4, #0]
  404756:	1c5a      	adds	r2, r3, #1
  404758:	6022      	str	r2, [r4, #0]
  40475a:	701f      	strb	r7, [r3, #0]
  40475c:	6963      	ldr	r3, [r4, #20]
  40475e:	3001      	adds	r0, #1
  404760:	4298      	cmp	r0, r3
  404762:	d004      	beq.n	40476e <__swbuf_r+0x8a>
  404764:	89a3      	ldrh	r3, [r4, #12]
  404766:	07db      	lsls	r3, r3, #31
  404768:	d507      	bpl.n	40477a <__swbuf_r+0x96>
  40476a:	2e0a      	cmp	r6, #10
  40476c:	d105      	bne.n	40477a <__swbuf_r+0x96>
  40476e:	4621      	mov	r1, r4
  404770:	4628      	mov	r0, r5
  404772:	f000 ff2d 	bl	4055d0 <_fflush_r>
  404776:	2800      	cmp	r0, #0
  404778:	d1e0      	bne.n	40473c <__swbuf_r+0x58>
  40477a:	4630      	mov	r0, r6
  40477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40477e:	bf00      	nop
  404780:	00408268 	.word	0x00408268
  404784:	00408288 	.word	0x00408288
  404788:	004082a8 	.word	0x004082a8

0040478c <__swsetup_r>:
  40478c:	4b32      	ldr	r3, [pc, #200]	; (404858 <__swsetup_r+0xcc>)
  40478e:	b570      	push	{r4, r5, r6, lr}
  404790:	681d      	ldr	r5, [r3, #0]
  404792:	4606      	mov	r6, r0
  404794:	460c      	mov	r4, r1
  404796:	b125      	cbz	r5, 4047a2 <__swsetup_r+0x16>
  404798:	69ab      	ldr	r3, [r5, #24]
  40479a:	b913      	cbnz	r3, 4047a2 <__swsetup_r+0x16>
  40479c:	4628      	mov	r0, r5
  40479e:	f000 ff81 	bl	4056a4 <__sinit>
  4047a2:	4b2e      	ldr	r3, [pc, #184]	; (40485c <__swsetup_r+0xd0>)
  4047a4:	429c      	cmp	r4, r3
  4047a6:	d101      	bne.n	4047ac <__swsetup_r+0x20>
  4047a8:	686c      	ldr	r4, [r5, #4]
  4047aa:	e008      	b.n	4047be <__swsetup_r+0x32>
  4047ac:	4b2c      	ldr	r3, [pc, #176]	; (404860 <__swsetup_r+0xd4>)
  4047ae:	429c      	cmp	r4, r3
  4047b0:	d101      	bne.n	4047b6 <__swsetup_r+0x2a>
  4047b2:	68ac      	ldr	r4, [r5, #8]
  4047b4:	e003      	b.n	4047be <__swsetup_r+0x32>
  4047b6:	4b2b      	ldr	r3, [pc, #172]	; (404864 <__swsetup_r+0xd8>)
  4047b8:	429c      	cmp	r4, r3
  4047ba:	bf08      	it	eq
  4047bc:	68ec      	ldreq	r4, [r5, #12]
  4047be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047c2:	b29a      	uxth	r2, r3
  4047c4:	0715      	lsls	r5, r2, #28
  4047c6:	d41d      	bmi.n	404804 <__swsetup_r+0x78>
  4047c8:	06d0      	lsls	r0, r2, #27
  4047ca:	d402      	bmi.n	4047d2 <__swsetup_r+0x46>
  4047cc:	2209      	movs	r2, #9
  4047ce:	6032      	str	r2, [r6, #0]
  4047d0:	e03a      	b.n	404848 <__swsetup_r+0xbc>
  4047d2:	0751      	lsls	r1, r2, #29
  4047d4:	d512      	bpl.n	4047fc <__swsetup_r+0x70>
  4047d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4047d8:	b141      	cbz	r1, 4047ec <__swsetup_r+0x60>
  4047da:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4047de:	4299      	cmp	r1, r3
  4047e0:	d002      	beq.n	4047e8 <__swsetup_r+0x5c>
  4047e2:	4630      	mov	r0, r6
  4047e4:	f001 ffdc 	bl	4067a0 <_free_r>
  4047e8:	2300      	movs	r3, #0
  4047ea:	6363      	str	r3, [r4, #52]	; 0x34
  4047ec:	89a3      	ldrh	r3, [r4, #12]
  4047ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4047f2:	81a3      	strh	r3, [r4, #12]
  4047f4:	2300      	movs	r3, #0
  4047f6:	6063      	str	r3, [r4, #4]
  4047f8:	6923      	ldr	r3, [r4, #16]
  4047fa:	6023      	str	r3, [r4, #0]
  4047fc:	89a3      	ldrh	r3, [r4, #12]
  4047fe:	f043 0308 	orr.w	r3, r3, #8
  404802:	81a3      	strh	r3, [r4, #12]
  404804:	6923      	ldr	r3, [r4, #16]
  404806:	b94b      	cbnz	r3, 40481c <__swsetup_r+0x90>
  404808:	89a3      	ldrh	r3, [r4, #12]
  40480a:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40480e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404812:	d003      	beq.n	40481c <__swsetup_r+0x90>
  404814:	4621      	mov	r1, r4
  404816:	4630      	mov	r0, r6
  404818:	f001 fb24 	bl	405e64 <__smakebuf_r>
  40481c:	89a2      	ldrh	r2, [r4, #12]
  40481e:	f012 0301 	ands.w	r3, r2, #1
  404822:	d005      	beq.n	404830 <__swsetup_r+0xa4>
  404824:	2300      	movs	r3, #0
  404826:	60a3      	str	r3, [r4, #8]
  404828:	6963      	ldr	r3, [r4, #20]
  40482a:	425b      	negs	r3, r3
  40482c:	61a3      	str	r3, [r4, #24]
  40482e:	e003      	b.n	404838 <__swsetup_r+0xac>
  404830:	0792      	lsls	r2, r2, #30
  404832:	bf58      	it	pl
  404834:	6963      	ldrpl	r3, [r4, #20]
  404836:	60a3      	str	r3, [r4, #8]
  404838:	6923      	ldr	r3, [r4, #16]
  40483a:	b95b      	cbnz	r3, 404854 <__swsetup_r+0xc8>
  40483c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404840:	f003 0080 	and.w	r0, r3, #128	; 0x80
  404844:	b280      	uxth	r0, r0
  404846:	b130      	cbz	r0, 404856 <__swsetup_r+0xca>
  404848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40484c:	81a3      	strh	r3, [r4, #12]
  40484e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404852:	bd70      	pop	{r4, r5, r6, pc}
  404854:	2000      	movs	r0, #0
  404856:	bd70      	pop	{r4, r5, r6, pc}
  404858:	20000078 	.word	0x20000078
  40485c:	00408268 	.word	0x00408268
  404860:	00408288 	.word	0x00408288
  404864:	004082a8 	.word	0x004082a8

00404868 <quorem>:
  404868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40486c:	6903      	ldr	r3, [r0, #16]
  40486e:	690c      	ldr	r4, [r1, #16]
  404870:	429c      	cmp	r4, r3
  404872:	4680      	mov	r8, r0
  404874:	f300 8083 	bgt.w	40497e <quorem+0x116>
  404878:	3c01      	subs	r4, #1
  40487a:	f101 0714 	add.w	r7, r1, #20
  40487e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  404882:	f100 0614 	add.w	r6, r0, #20
  404886:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40488a:	eb06 030e 	add.w	r3, r6, lr
  40488e:	9301      	str	r3, [sp, #4]
  404890:	3501      	adds	r5, #1
  404892:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  404896:	fbb3 f5f5 	udiv	r5, r3, r5
  40489a:	eb07 090e 	add.w	r9, r7, lr
  40489e:	2d00      	cmp	r5, #0
  4048a0:	d039      	beq.n	404916 <quorem+0xae>
  4048a2:	f04f 0a00 	mov.w	sl, #0
  4048a6:	4638      	mov	r0, r7
  4048a8:	46b4      	mov	ip, r6
  4048aa:	46d3      	mov	fp, sl
  4048ac:	f850 2b04 	ldr.w	r2, [r0], #4
  4048b0:	b293      	uxth	r3, r2
  4048b2:	fb05 a303 	mla	r3, r5, r3, sl
  4048b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4048ba:	b29b      	uxth	r3, r3
  4048bc:	ebc3 030b 	rsb	r3, r3, fp
  4048c0:	0c12      	lsrs	r2, r2, #16
  4048c2:	f8bc b000 	ldrh.w	fp, [ip]
  4048c6:	fb05 a202 	mla	r2, r5, r2, sl
  4048ca:	fa13 f38b 	uxtah	r3, r3, fp
  4048ce:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4048d2:	fa1f fb82 	uxth.w	fp, r2
  4048d6:	f8dc 2000 	ldr.w	r2, [ip]
  4048da:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4048de:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4048e2:	b29b      	uxth	r3, r3
  4048e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4048e8:	4581      	cmp	r9, r0
  4048ea:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4048ee:	f84c 3b04 	str.w	r3, [ip], #4
  4048f2:	d2db      	bcs.n	4048ac <quorem+0x44>
  4048f4:	f856 300e 	ldr.w	r3, [r6, lr]
  4048f8:	b96b      	cbnz	r3, 404916 <quorem+0xae>
  4048fa:	9b01      	ldr	r3, [sp, #4]
  4048fc:	3b04      	subs	r3, #4
  4048fe:	429e      	cmp	r6, r3
  404900:	461a      	mov	r2, r3
  404902:	d302      	bcc.n	40490a <quorem+0xa2>
  404904:	f8c8 4010 	str.w	r4, [r8, #16]
  404908:	e005      	b.n	404916 <quorem+0xae>
  40490a:	6812      	ldr	r2, [r2, #0]
  40490c:	3b04      	subs	r3, #4
  40490e:	2a00      	cmp	r2, #0
  404910:	d1f8      	bne.n	404904 <quorem+0x9c>
  404912:	3c01      	subs	r4, #1
  404914:	e7f3      	b.n	4048fe <quorem+0x96>
  404916:	4640      	mov	r0, r8
  404918:	f001 fd95 	bl	406446 <__mcmp>
  40491c:	2800      	cmp	r0, #0
  40491e:	db2c      	blt.n	40497a <quorem+0x112>
  404920:	3501      	adds	r5, #1
  404922:	4630      	mov	r0, r6
  404924:	f04f 0e00 	mov.w	lr, #0
  404928:	f857 1b04 	ldr.w	r1, [r7], #4
  40492c:	f8d0 c000 	ldr.w	ip, [r0]
  404930:	b28a      	uxth	r2, r1
  404932:	ebc2 030e 	rsb	r3, r2, lr
  404936:	0c09      	lsrs	r1, r1, #16
  404938:	fa13 f38c 	uxtah	r3, r3, ip
  40493c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  404940:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404944:	b29b      	uxth	r3, r3
  404946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40494a:	45b9      	cmp	r9, r7
  40494c:	ea4f 4e22 	mov.w	lr, r2, asr #16
  404950:	f840 3b04 	str.w	r3, [r0], #4
  404954:	d2e8      	bcs.n	404928 <quorem+0xc0>
  404956:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40495a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40495e:	b962      	cbnz	r2, 40497a <quorem+0x112>
  404960:	3b04      	subs	r3, #4
  404962:	429e      	cmp	r6, r3
  404964:	461a      	mov	r2, r3
  404966:	d302      	bcc.n	40496e <quorem+0x106>
  404968:	f8c8 4010 	str.w	r4, [r8, #16]
  40496c:	e005      	b.n	40497a <quorem+0x112>
  40496e:	6812      	ldr	r2, [r2, #0]
  404970:	3b04      	subs	r3, #4
  404972:	2a00      	cmp	r2, #0
  404974:	d1f8      	bne.n	404968 <quorem+0x100>
  404976:	3c01      	subs	r4, #1
  404978:	e7f3      	b.n	404962 <quorem+0xfa>
  40497a:	4628      	mov	r0, r5
  40497c:	e000      	b.n	404980 <quorem+0x118>
  40497e:	2000      	movs	r0, #0
  404980:	b003      	add	sp, #12
  404982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00404988 <_dtoa_r>:
  404988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40498c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40498e:	b095      	sub	sp, #84	; 0x54
  404990:	4682      	mov	sl, r0
  404992:	9c21      	ldr	r4, [sp, #132]	; 0x84
  404994:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404998:	b945      	cbnz	r5, 4049ac <_dtoa_r+0x24>
  40499a:	2010      	movs	r0, #16
  40499c:	f001 fa9e 	bl	405edc <malloc>
  4049a0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  4049a4:	6045      	str	r5, [r0, #4]
  4049a6:	6085      	str	r5, [r0, #8]
  4049a8:	6005      	str	r5, [r0, #0]
  4049aa:	60c5      	str	r5, [r0, #12]
  4049ac:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4049b0:	6819      	ldr	r1, [r3, #0]
  4049b2:	b159      	cbz	r1, 4049cc <_dtoa_r+0x44>
  4049b4:	685a      	ldr	r2, [r3, #4]
  4049b6:	604a      	str	r2, [r1, #4]
  4049b8:	2301      	movs	r3, #1
  4049ba:	4093      	lsls	r3, r2
  4049bc:	608b      	str	r3, [r1, #8]
  4049be:	4650      	mov	r0, sl
  4049c0:	f001 fb2b 	bl	40601a <_Bfree>
  4049c4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4049c8:	2200      	movs	r2, #0
  4049ca:	601a      	str	r2, [r3, #0]
  4049cc:	9b03      	ldr	r3, [sp, #12]
  4049ce:	4aa0      	ldr	r2, [pc, #640]	; (404c50 <_dtoa_r+0x2c8>)
  4049d0:	2b00      	cmp	r3, #0
  4049d2:	bfbf      	itttt	lt
  4049d4:	2301      	movlt	r3, #1
  4049d6:	6023      	strlt	r3, [r4, #0]
  4049d8:	9b03      	ldrlt	r3, [sp, #12]
  4049da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4049de:	bfb8      	it	lt
  4049e0:	9303      	strlt	r3, [sp, #12]
  4049e2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4049e6:	bfa4      	itt	ge
  4049e8:	2300      	movge	r3, #0
  4049ea:	6023      	strge	r3, [r4, #0]
  4049ec:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  4049f0:	0d1b      	lsrs	r3, r3, #20
  4049f2:	051b      	lsls	r3, r3, #20
  4049f4:	4293      	cmp	r3, r2
  4049f6:	d11d      	bne.n	404a34 <_dtoa_r+0xac>
  4049f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4049fa:	f242 730f 	movw	r3, #9999	; 0x270f
  4049fe:	6013      	str	r3, [r2, #0]
  404a00:	9b02      	ldr	r3, [sp, #8]
  404a02:	b943      	cbnz	r3, 404a16 <_dtoa_r+0x8e>
  404a04:	4a93      	ldr	r2, [pc, #588]	; (404c54 <_dtoa_r+0x2cc>)
  404a06:	4b94      	ldr	r3, [pc, #592]	; (404c58 <_dtoa_r+0x2d0>)
  404a08:	f3c8 0013 	ubfx	r0, r8, #0, #20
  404a0c:	2800      	cmp	r0, #0
  404a0e:	bf14      	ite	ne
  404a10:	4618      	movne	r0, r3
  404a12:	4610      	moveq	r0, r2
  404a14:	e000      	b.n	404a18 <_dtoa_r+0x90>
  404a16:	4890      	ldr	r0, [pc, #576]	; (404c58 <_dtoa_r+0x2d0>)
  404a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a1a:	2b00      	cmp	r3, #0
  404a1c:	f000 854a 	beq.w	4054b4 <_dtoa_r+0xb2c>
  404a20:	78c3      	ldrb	r3, [r0, #3]
  404a22:	b113      	cbz	r3, 404a2a <_dtoa_r+0xa2>
  404a24:	f100 0308 	add.w	r3, r0, #8
  404a28:	e000      	b.n	404a2c <_dtoa_r+0xa4>
  404a2a:	1cc3      	adds	r3, r0, #3
  404a2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404a2e:	6013      	str	r3, [r2, #0]
  404a30:	f000 bd40 	b.w	4054b4 <_dtoa_r+0xb2c>
  404a34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  404a38:	2200      	movs	r2, #0
  404a3a:	2300      	movs	r3, #0
  404a3c:	4620      	mov	r0, r4
  404a3e:	4629      	mov	r1, r5
  404a40:	f002 fd9e 	bl	407580 <__aeabi_dcmpeq>
  404a44:	4607      	mov	r7, r0
  404a46:	b158      	cbz	r0, 404a60 <_dtoa_r+0xd8>
  404a48:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404a4a:	2301      	movs	r3, #1
  404a4c:	6013      	str	r3, [r2, #0]
  404a4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a50:	2b00      	cmp	r3, #0
  404a52:	f000 8522 	beq.w	40549a <_dtoa_r+0xb12>
  404a56:	4881      	ldr	r0, [pc, #516]	; (404c5c <_dtoa_r+0x2d4>)
  404a58:	6018      	str	r0, [r3, #0]
  404a5a:	3801      	subs	r0, #1
  404a5c:	f000 bd2a 	b.w	4054b4 <_dtoa_r+0xb2c>
  404a60:	ab12      	add	r3, sp, #72	; 0x48
  404a62:	9301      	str	r3, [sp, #4]
  404a64:	ab13      	add	r3, sp, #76	; 0x4c
  404a66:	9300      	str	r3, [sp, #0]
  404a68:	4622      	mov	r2, r4
  404a6a:	462b      	mov	r3, r5
  404a6c:	4650      	mov	r0, sl
  404a6e:	f001 fdd6 	bl	40661e <__d2b>
  404a72:	f3c8 560a 	ubfx	r6, r8, #20, #11
  404a76:	9004      	str	r0, [sp, #16]
  404a78:	b156      	cbz	r6, 404a90 <_dtoa_r+0x108>
  404a7a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  404a7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404a82:	4620      	mov	r0, r4
  404a84:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404a88:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  404a8c:	9711      	str	r7, [sp, #68]	; 0x44
  404a8e:	e01d      	b.n	404acc <_dtoa_r+0x144>
  404a90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a92:	9e12      	ldr	r6, [sp, #72]	; 0x48
  404a94:	441e      	add	r6, r3
  404a96:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404a9a:	2b20      	cmp	r3, #32
  404a9c:	dd0a      	ble.n	404ab4 <_dtoa_r+0x12c>
  404a9e:	9a02      	ldr	r2, [sp, #8]
  404aa0:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404aa4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404aa8:	fa22 f000 	lsr.w	r0, r2, r0
  404aac:	fa08 f303 	lsl.w	r3, r8, r3
  404ab0:	4318      	orrs	r0, r3
  404ab2:	e004      	b.n	404abe <_dtoa_r+0x136>
  404ab4:	f1c3 0020 	rsb	r0, r3, #32
  404ab8:	9b02      	ldr	r3, [sp, #8]
  404aba:	fa03 f000 	lsl.w	r0, r3, r0
  404abe:	f002 fa81 	bl	406fc4 <__aeabi_ui2d>
  404ac2:	2301      	movs	r3, #1
  404ac4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404ac8:	3e01      	subs	r6, #1
  404aca:	9311      	str	r3, [sp, #68]	; 0x44
  404acc:	2200      	movs	r2, #0
  404ace:	4b64      	ldr	r3, [pc, #400]	; (404c60 <_dtoa_r+0x2d8>)
  404ad0:	f002 f93a 	bl	406d48 <__aeabi_dsub>
  404ad4:	a358      	add	r3, pc, #352	; (adr r3, 404c38 <_dtoa_r+0x2b0>)
  404ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ada:	f002 fae9 	bl	4070b0 <__aeabi_dmul>
  404ade:	a358      	add	r3, pc, #352	; (adr r3, 404c40 <_dtoa_r+0x2b8>)
  404ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ae4:	f002 f932 	bl	406d4c <__adddf3>
  404ae8:	4604      	mov	r4, r0
  404aea:	4630      	mov	r0, r6
  404aec:	460d      	mov	r5, r1
  404aee:	f002 fa79 	bl	406fe4 <__aeabi_i2d>
  404af2:	a355      	add	r3, pc, #340	; (adr r3, 404c48 <_dtoa_r+0x2c0>)
  404af4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404af8:	f002 fada 	bl	4070b0 <__aeabi_dmul>
  404afc:	4602      	mov	r2, r0
  404afe:	460b      	mov	r3, r1
  404b00:	4620      	mov	r0, r4
  404b02:	4629      	mov	r1, r5
  404b04:	f002 f922 	bl	406d4c <__adddf3>
  404b08:	4604      	mov	r4, r0
  404b0a:	460d      	mov	r5, r1
  404b0c:	f002 fd80 	bl	407610 <__aeabi_d2iz>
  404b10:	2200      	movs	r2, #0
  404b12:	4683      	mov	fp, r0
  404b14:	2300      	movs	r3, #0
  404b16:	4620      	mov	r0, r4
  404b18:	4629      	mov	r1, r5
  404b1a:	f002 fd3b 	bl	407594 <__aeabi_dcmplt>
  404b1e:	b158      	cbz	r0, 404b38 <_dtoa_r+0x1b0>
  404b20:	4658      	mov	r0, fp
  404b22:	f002 fa5f 	bl	406fe4 <__aeabi_i2d>
  404b26:	4602      	mov	r2, r0
  404b28:	460b      	mov	r3, r1
  404b2a:	4620      	mov	r0, r4
  404b2c:	4629      	mov	r1, r5
  404b2e:	f002 fd27 	bl	407580 <__aeabi_dcmpeq>
  404b32:	b908      	cbnz	r0, 404b38 <_dtoa_r+0x1b0>
  404b34:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404b38:	f1bb 0f16 	cmp.w	fp, #22
  404b3c:	d80d      	bhi.n	404b5a <_dtoa_r+0x1d2>
  404b3e:	4949      	ldr	r1, [pc, #292]	; (404c64 <_dtoa_r+0x2dc>)
  404b40:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  404b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404b48:	e9d1 0100 	ldrd	r0, r1, [r1]
  404b4c:	f002 fd40 	bl	4075d0 <__aeabi_dcmpgt>
  404b50:	b130      	cbz	r0, 404b60 <_dtoa_r+0x1d8>
  404b52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404b56:	2300      	movs	r3, #0
  404b58:	e000      	b.n	404b5c <_dtoa_r+0x1d4>
  404b5a:	2301      	movs	r3, #1
  404b5c:	9310      	str	r3, [sp, #64]	; 0x40
  404b5e:	e000      	b.n	404b62 <_dtoa_r+0x1da>
  404b60:	9010      	str	r0, [sp, #64]	; 0x40
  404b62:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b64:	1b9e      	subs	r6, r3, r6
  404b66:	1e73      	subs	r3, r6, #1
  404b68:	9307      	str	r3, [sp, #28]
  404b6a:	bf43      	ittte	mi
  404b6c:	f1c3 0800 	rsbmi	r8, r3, #0
  404b70:	2300      	movmi	r3, #0
  404b72:	9307      	strmi	r3, [sp, #28]
  404b74:	f04f 0800 	movpl.w	r8, #0
  404b78:	f1bb 0f00 	cmp.w	fp, #0
  404b7c:	db06      	blt.n	404b8c <_dtoa_r+0x204>
  404b7e:	9b07      	ldr	r3, [sp, #28]
  404b80:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  404b84:	445b      	add	r3, fp
  404b86:	9307      	str	r3, [sp, #28]
  404b88:	2700      	movs	r7, #0
  404b8a:	e005      	b.n	404b98 <_dtoa_r+0x210>
  404b8c:	2300      	movs	r3, #0
  404b8e:	ebcb 0808 	rsb	r8, fp, r8
  404b92:	f1cb 0700 	rsb	r7, fp, #0
  404b96:	930b      	str	r3, [sp, #44]	; 0x2c
  404b98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b9a:	2b09      	cmp	r3, #9
  404b9c:	d827      	bhi.n	404bee <_dtoa_r+0x266>
  404b9e:	2b05      	cmp	r3, #5
  404ba0:	bfc4      	itt	gt
  404ba2:	3b04      	subgt	r3, #4
  404ba4:	931e      	strgt	r3, [sp, #120]	; 0x78
  404ba6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404ba8:	f1a3 0302 	sub.w	r3, r3, #2
  404bac:	bfcc      	ite	gt
  404bae:	2500      	movgt	r5, #0
  404bb0:	2501      	movle	r5, #1
  404bb2:	2b03      	cmp	r3, #3
  404bb4:	d820      	bhi.n	404bf8 <_dtoa_r+0x270>
  404bb6:	e8df f003 	tbb	[pc, r3]
  404bba:	0e06      	.short	0x0e06
  404bbc:	0402      	.short	0x0402
  404bbe:	2301      	movs	r3, #1
  404bc0:	e002      	b.n	404bc8 <_dtoa_r+0x240>
  404bc2:	2301      	movs	r3, #1
  404bc4:	e008      	b.n	404bd8 <_dtoa_r+0x250>
  404bc6:	2300      	movs	r3, #0
  404bc8:	930a      	str	r3, [sp, #40]	; 0x28
  404bca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bcc:	2b00      	cmp	r3, #0
  404bce:	dd1d      	ble.n	404c0c <_dtoa_r+0x284>
  404bd0:	4699      	mov	r9, r3
  404bd2:	9305      	str	r3, [sp, #20]
  404bd4:	e021      	b.n	404c1a <_dtoa_r+0x292>
  404bd6:	2300      	movs	r3, #0
  404bd8:	930a      	str	r3, [sp, #40]	; 0x28
  404bda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bdc:	eb0b 0903 	add.w	r9, fp, r3
  404be0:	f109 0301 	add.w	r3, r9, #1
  404be4:	2b01      	cmp	r3, #1
  404be6:	9305      	str	r3, [sp, #20]
  404be8:	bfb8      	it	lt
  404bea:	2301      	movlt	r3, #1
  404bec:	e015      	b.n	404c1a <_dtoa_r+0x292>
  404bee:	2501      	movs	r5, #1
  404bf0:	2300      	movs	r3, #0
  404bf2:	931e      	str	r3, [sp, #120]	; 0x78
  404bf4:	950a      	str	r5, [sp, #40]	; 0x28
  404bf6:	e001      	b.n	404bfc <_dtoa_r+0x274>
  404bf8:	2301      	movs	r3, #1
  404bfa:	930a      	str	r3, [sp, #40]	; 0x28
  404bfc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  404c00:	2200      	movs	r2, #0
  404c02:	f8cd 9014 	str.w	r9, [sp, #20]
  404c06:	2312      	movs	r3, #18
  404c08:	921f      	str	r2, [sp, #124]	; 0x7c
  404c0a:	e006      	b.n	404c1a <_dtoa_r+0x292>
  404c0c:	f04f 0901 	mov.w	r9, #1
  404c10:	f8cd 9014 	str.w	r9, [sp, #20]
  404c14:	464b      	mov	r3, r9
  404c16:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  404c1a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  404c1e:	2200      	movs	r2, #0
  404c20:	6062      	str	r2, [r4, #4]
  404c22:	2104      	movs	r1, #4
  404c24:	f101 0214 	add.w	r2, r1, #20
  404c28:	429a      	cmp	r2, r3
  404c2a:	d81d      	bhi.n	404c68 <_dtoa_r+0x2e0>
  404c2c:	6862      	ldr	r2, [r4, #4]
  404c2e:	3201      	adds	r2, #1
  404c30:	6062      	str	r2, [r4, #4]
  404c32:	0049      	lsls	r1, r1, #1
  404c34:	e7f6      	b.n	404c24 <_dtoa_r+0x29c>
  404c36:	bf00      	nop
  404c38:	636f4361 	.word	0x636f4361
  404c3c:	3fd287a7 	.word	0x3fd287a7
  404c40:	8b60c8b3 	.word	0x8b60c8b3
  404c44:	3fc68a28 	.word	0x3fc68a28
  404c48:	509f79fb 	.word	0x509f79fb
  404c4c:	3fd34413 	.word	0x3fd34413
  404c50:	7ff00000 	.word	0x7ff00000
  404c54:	00408258 	.word	0x00408258
  404c58:	00408261 	.word	0x00408261
  404c5c:	004081e5 	.word	0x004081e5
  404c60:	3ff80000 	.word	0x3ff80000
  404c64:	004082d8 	.word	0x004082d8
  404c68:	6861      	ldr	r1, [r4, #4]
  404c6a:	4650      	mov	r0, sl
  404c6c:	f001 f9a0 	bl	405fb0 <_Balloc>
  404c70:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404c74:	6020      	str	r0, [r4, #0]
  404c76:	681b      	ldr	r3, [r3, #0]
  404c78:	9306      	str	r3, [sp, #24]
  404c7a:	9b05      	ldr	r3, [sp, #20]
  404c7c:	2b0e      	cmp	r3, #14
  404c7e:	f200 815d 	bhi.w	404f3c <_dtoa_r+0x5b4>
  404c82:	2d00      	cmp	r5, #0
  404c84:	f000 815a 	beq.w	404f3c <_dtoa_r+0x5b4>
  404c88:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  404c8c:	f1bb 0f00 	cmp.w	fp, #0
  404c90:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  404c94:	dd31      	ble.n	404cfa <_dtoa_r+0x372>
  404c96:	4aa0      	ldr	r2, [pc, #640]	; (404f18 <_dtoa_r+0x590>)
  404c98:	f00b 030f 	and.w	r3, fp, #15
  404c9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404ca0:	e9d3 3400 	ldrd	r3, r4, [r3]
  404ca4:	ea4f 152b 	mov.w	r5, fp, asr #4
  404ca8:	06e8      	lsls	r0, r5, #27
  404caa:	e9cd 3408 	strd	r3, r4, [sp, #32]
  404cae:	d50c      	bpl.n	404cca <_dtoa_r+0x342>
  404cb0:	4b9a      	ldr	r3, [pc, #616]	; (404f1c <_dtoa_r+0x594>)
  404cb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404cb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404cba:	f002 fb23 	bl	407304 <__aeabi_ddiv>
  404cbe:	f005 050f 	and.w	r5, r5, #15
  404cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404cc6:	2403      	movs	r4, #3
  404cc8:	e000      	b.n	404ccc <_dtoa_r+0x344>
  404cca:	2402      	movs	r4, #2
  404ccc:	4e93      	ldr	r6, [pc, #588]	; (404f1c <_dtoa_r+0x594>)
  404cce:	b16d      	cbz	r5, 404cec <_dtoa_r+0x364>
  404cd0:	07e9      	lsls	r1, r5, #31
  404cd2:	d508      	bpl.n	404ce6 <_dtoa_r+0x35e>
  404cd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404cd8:	e9d6 2300 	ldrd	r2, r3, [r6]
  404cdc:	f002 f9e8 	bl	4070b0 <__aeabi_dmul>
  404ce0:	e9cd 0108 	strd	r0, r1, [sp, #32]
  404ce4:	3401      	adds	r4, #1
  404ce6:	106d      	asrs	r5, r5, #1
  404ce8:	3608      	adds	r6, #8
  404cea:	e7f0      	b.n	404cce <_dtoa_r+0x346>
  404cec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  404cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404cf4:	f002 fb06 	bl	407304 <__aeabi_ddiv>
  404cf8:	e020      	b.n	404d3c <_dtoa_r+0x3b4>
  404cfa:	f1cb 0500 	rsb	r5, fp, #0
  404cfe:	b305      	cbz	r5, 404d42 <_dtoa_r+0x3ba>
  404d00:	4b85      	ldr	r3, [pc, #532]	; (404f18 <_dtoa_r+0x590>)
  404d02:	4e86      	ldr	r6, [pc, #536]	; (404f1c <_dtoa_r+0x594>)
  404d04:	f005 020f 	and.w	r2, r5, #15
  404d08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d10:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404d14:	f002 f9cc 	bl	4070b0 <__aeabi_dmul>
  404d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d1c:	112d      	asrs	r5, r5, #4
  404d1e:	2300      	movs	r3, #0
  404d20:	2402      	movs	r4, #2
  404d22:	b155      	cbz	r5, 404d3a <_dtoa_r+0x3b2>
  404d24:	07ea      	lsls	r2, r5, #31
  404d26:	d505      	bpl.n	404d34 <_dtoa_r+0x3ac>
  404d28:	e9d6 2300 	ldrd	r2, r3, [r6]
  404d2c:	f002 f9c0 	bl	4070b0 <__aeabi_dmul>
  404d30:	3401      	adds	r4, #1
  404d32:	2301      	movs	r3, #1
  404d34:	106d      	asrs	r5, r5, #1
  404d36:	3608      	adds	r6, #8
  404d38:	e7f3      	b.n	404d22 <_dtoa_r+0x39a>
  404d3a:	b11b      	cbz	r3, 404d44 <_dtoa_r+0x3bc>
  404d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d40:	e000      	b.n	404d44 <_dtoa_r+0x3bc>
  404d42:	2402      	movs	r4, #2
  404d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d46:	b1e3      	cbz	r3, 404d82 <_dtoa_r+0x3fa>
  404d48:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  404d4c:	2200      	movs	r2, #0
  404d4e:	4b74      	ldr	r3, [pc, #464]	; (404f20 <_dtoa_r+0x598>)
  404d50:	4628      	mov	r0, r5
  404d52:	4631      	mov	r1, r6
  404d54:	f002 fc1e 	bl	407594 <__aeabi_dcmplt>
  404d58:	b198      	cbz	r0, 404d82 <_dtoa_r+0x3fa>
  404d5a:	9b05      	ldr	r3, [sp, #20]
  404d5c:	b18b      	cbz	r3, 404d82 <_dtoa_r+0x3fa>
  404d5e:	f1b9 0f00 	cmp.w	r9, #0
  404d62:	f340 80e7 	ble.w	404f34 <_dtoa_r+0x5ac>
  404d66:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  404d6a:	9308      	str	r3, [sp, #32]
  404d6c:	4631      	mov	r1, r6
  404d6e:	2200      	movs	r2, #0
  404d70:	4b6c      	ldr	r3, [pc, #432]	; (404f24 <_dtoa_r+0x59c>)
  404d72:	4628      	mov	r0, r5
  404d74:	f002 f99c 	bl	4070b0 <__aeabi_dmul>
  404d78:	3401      	adds	r4, #1
  404d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d7e:	464e      	mov	r6, r9
  404d80:	e002      	b.n	404d88 <_dtoa_r+0x400>
  404d82:	9e05      	ldr	r6, [sp, #20]
  404d84:	f8cd b020 	str.w	fp, [sp, #32]
  404d88:	4620      	mov	r0, r4
  404d8a:	f002 f92b 	bl	406fe4 <__aeabi_i2d>
  404d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404d92:	f002 f98d 	bl	4070b0 <__aeabi_dmul>
  404d96:	4b64      	ldr	r3, [pc, #400]	; (404f28 <_dtoa_r+0x5a0>)
  404d98:	2200      	movs	r2, #0
  404d9a:	f001 ffd7 	bl	406d4c <__adddf3>
  404d9e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  404da2:	4604      	mov	r4, r0
  404da4:	930c      	str	r3, [sp, #48]	; 0x30
  404da6:	461d      	mov	r5, r3
  404da8:	b9d6      	cbnz	r6, 404de0 <_dtoa_r+0x458>
  404daa:	2200      	movs	r2, #0
  404dac:	4b5f      	ldr	r3, [pc, #380]	; (404f2c <_dtoa_r+0x5a4>)
  404dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404db2:	f001 ffc9 	bl	406d48 <__aeabi_dsub>
  404db6:	4622      	mov	r2, r4
  404db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404dbe:	f002 fc07 	bl	4075d0 <__aeabi_dcmpgt>
  404dc2:	2800      	cmp	r0, #0
  404dc4:	f040 8240 	bne.w	405248 <_dtoa_r+0x8c0>
  404dc8:	990c      	ldr	r1, [sp, #48]	; 0x30
  404dca:	4622      	mov	r2, r4
  404dcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  404dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404dd4:	f002 fbde 	bl	407594 <__aeabi_dcmplt>
  404dd8:	2800      	cmp	r0, #0
  404dda:	f040 822c 	bne.w	405236 <_dtoa_r+0x8ae>
  404dde:	e0a9      	b.n	404f34 <_dtoa_r+0x5ac>
  404de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404de2:	4b4d      	ldr	r3, [pc, #308]	; (404f18 <_dtoa_r+0x590>)
  404de4:	1e71      	subs	r1, r6, #1
  404de6:	2a00      	cmp	r2, #0
  404de8:	d049      	beq.n	404e7e <_dtoa_r+0x4f6>
  404dea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404dee:	e9d3 2300 	ldrd	r2, r3, [r3]
  404df2:	2000      	movs	r0, #0
  404df4:	494e      	ldr	r1, [pc, #312]	; (404f30 <_dtoa_r+0x5a8>)
  404df6:	f002 fa85 	bl	407304 <__aeabi_ddiv>
  404dfa:	4622      	mov	r2, r4
  404dfc:	462b      	mov	r3, r5
  404dfe:	f001 ffa3 	bl	406d48 <__aeabi_dsub>
  404e02:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e06:	9c06      	ldr	r4, [sp, #24]
  404e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e0c:	f002 fc00 	bl	407610 <__aeabi_d2iz>
  404e10:	4605      	mov	r5, r0
  404e12:	f002 f8e7 	bl	406fe4 <__aeabi_i2d>
  404e16:	4602      	mov	r2, r0
  404e18:	460b      	mov	r3, r1
  404e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e1e:	f001 ff93 	bl	406d48 <__aeabi_dsub>
  404e22:	3530      	adds	r5, #48	; 0x30
  404e24:	f804 5b01 	strb.w	r5, [r4], #1
  404e28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e30:	f002 fbb0 	bl	407594 <__aeabi_dcmplt>
  404e34:	2800      	cmp	r0, #0
  404e36:	f040 8320 	bne.w	40547a <_dtoa_r+0xaf2>
  404e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404e3e:	2000      	movs	r0, #0
  404e40:	4937      	ldr	r1, [pc, #220]	; (404f20 <_dtoa_r+0x598>)
  404e42:	f001 ff81 	bl	406d48 <__aeabi_dsub>
  404e46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e4a:	f002 fba3 	bl	407594 <__aeabi_dcmplt>
  404e4e:	2800      	cmp	r0, #0
  404e50:	f040 80d2 	bne.w	404ff8 <_dtoa_r+0x670>
  404e54:	9b06      	ldr	r3, [sp, #24]
  404e56:	1ae3      	subs	r3, r4, r3
  404e58:	42b3      	cmp	r3, r6
  404e5a:	da6b      	bge.n	404f34 <_dtoa_r+0x5ac>
  404e5c:	2200      	movs	r2, #0
  404e5e:	4b31      	ldr	r3, [pc, #196]	; (404f24 <_dtoa_r+0x59c>)
  404e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404e64:	f002 f924 	bl	4070b0 <__aeabi_dmul>
  404e68:	2200      	movs	r2, #0
  404e6a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e6e:	4b2d      	ldr	r3, [pc, #180]	; (404f24 <_dtoa_r+0x59c>)
  404e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e74:	f002 f91c 	bl	4070b0 <__aeabi_dmul>
  404e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e7c:	e7c4      	b.n	404e08 <_dtoa_r+0x480>
  404e7e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404e82:	4622      	mov	r2, r4
  404e84:	462b      	mov	r3, r5
  404e86:	e9d1 0100 	ldrd	r0, r1, [r1]
  404e8a:	f002 f911 	bl	4070b0 <__aeabi_dmul>
  404e8e:	9b06      	ldr	r3, [sp, #24]
  404e90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e94:	199c      	adds	r4, r3, r6
  404e96:	461d      	mov	r5, r3
  404e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e9c:	f002 fbb8 	bl	407610 <__aeabi_d2iz>
  404ea0:	4606      	mov	r6, r0
  404ea2:	f002 f89f 	bl	406fe4 <__aeabi_i2d>
  404ea6:	3630      	adds	r6, #48	; 0x30
  404ea8:	4602      	mov	r2, r0
  404eaa:	460b      	mov	r3, r1
  404eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404eb0:	f001 ff4a 	bl	406d48 <__aeabi_dsub>
  404eb4:	f805 6b01 	strb.w	r6, [r5], #1
  404eb8:	42ac      	cmp	r4, r5
  404eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ebe:	f04f 0200 	mov.w	r2, #0
  404ec2:	d123      	bne.n	404f0c <_dtoa_r+0x584>
  404ec4:	4b1a      	ldr	r3, [pc, #104]	; (404f30 <_dtoa_r+0x5a8>)
  404ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404eca:	f001 ff3f 	bl	406d4c <__adddf3>
  404ece:	4602      	mov	r2, r0
  404ed0:	460b      	mov	r3, r1
  404ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ed6:	f002 fb7b 	bl	4075d0 <__aeabi_dcmpgt>
  404eda:	2800      	cmp	r0, #0
  404edc:	f040 808c 	bne.w	404ff8 <_dtoa_r+0x670>
  404ee0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404ee4:	2000      	movs	r0, #0
  404ee6:	4912      	ldr	r1, [pc, #72]	; (404f30 <_dtoa_r+0x5a8>)
  404ee8:	f001 ff2e 	bl	406d48 <__aeabi_dsub>
  404eec:	4602      	mov	r2, r0
  404eee:	460b      	mov	r3, r1
  404ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ef4:	f002 fb4e 	bl	407594 <__aeabi_dcmplt>
  404ef8:	b1e0      	cbz	r0, 404f34 <_dtoa_r+0x5ac>
  404efa:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  404efe:	2b30      	cmp	r3, #48	; 0x30
  404f00:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  404f04:	f040 82b9 	bne.w	40547a <_dtoa_r+0xaf2>
  404f08:	4614      	mov	r4, r2
  404f0a:	e7f6      	b.n	404efa <_dtoa_r+0x572>
  404f0c:	4b05      	ldr	r3, [pc, #20]	; (404f24 <_dtoa_r+0x59c>)
  404f0e:	f002 f8cf 	bl	4070b0 <__aeabi_dmul>
  404f12:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404f16:	e7bf      	b.n	404e98 <_dtoa_r+0x510>
  404f18:	004082d8 	.word	0x004082d8
  404f1c:	004083a0 	.word	0x004083a0
  404f20:	3ff00000 	.word	0x3ff00000
  404f24:	40240000 	.word	0x40240000
  404f28:	401c0000 	.word	0x401c0000
  404f2c:	40140000 	.word	0x40140000
  404f30:	3fe00000 	.word	0x3fe00000
  404f34:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  404f38:	e9cd 3402 	strd	r3, r4, [sp, #8]
  404f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f3e:	2b00      	cmp	r3, #0
  404f40:	db7d      	blt.n	40503e <_dtoa_r+0x6b6>
  404f42:	f1bb 0f0e 	cmp.w	fp, #14
  404f46:	dc7a      	bgt.n	40503e <_dtoa_r+0x6b6>
  404f48:	4bab      	ldr	r3, [pc, #684]	; (4051f8 <_dtoa_r+0x870>)
  404f4a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404f4e:	e9d3 6700 	ldrd	r6, r7, [r3]
  404f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f54:	2b00      	cmp	r3, #0
  404f56:	da14      	bge.n	404f82 <_dtoa_r+0x5fa>
  404f58:	9b05      	ldr	r3, [sp, #20]
  404f5a:	2b00      	cmp	r3, #0
  404f5c:	dc11      	bgt.n	404f82 <_dtoa_r+0x5fa>
  404f5e:	f040 816c 	bne.w	40523a <_dtoa_r+0x8b2>
  404f62:	2200      	movs	r2, #0
  404f64:	4ba5      	ldr	r3, [pc, #660]	; (4051fc <_dtoa_r+0x874>)
  404f66:	4630      	mov	r0, r6
  404f68:	4639      	mov	r1, r7
  404f6a:	f002 f8a1 	bl	4070b0 <__aeabi_dmul>
  404f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404f72:	f002 fb23 	bl	4075bc <__aeabi_dcmpge>
  404f76:	9d05      	ldr	r5, [sp, #20]
  404f78:	462e      	mov	r6, r5
  404f7a:	2800      	cmp	r0, #0
  404f7c:	f040 815f 	bne.w	40523e <_dtoa_r+0x8b6>
  404f80:	e165      	b.n	40524e <_dtoa_r+0x8c6>
  404f82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  404f86:	9c06      	ldr	r4, [sp, #24]
  404f88:	4632      	mov	r2, r6
  404f8a:	463b      	mov	r3, r7
  404f8c:	4640      	mov	r0, r8
  404f8e:	4649      	mov	r1, r9
  404f90:	f002 f9b8 	bl	407304 <__aeabi_ddiv>
  404f94:	f002 fb3c 	bl	407610 <__aeabi_d2iz>
  404f98:	4605      	mov	r5, r0
  404f9a:	f002 f823 	bl	406fe4 <__aeabi_i2d>
  404f9e:	4632      	mov	r2, r6
  404fa0:	463b      	mov	r3, r7
  404fa2:	f002 f885 	bl	4070b0 <__aeabi_dmul>
  404fa6:	460b      	mov	r3, r1
  404fa8:	4602      	mov	r2, r0
  404faa:	4649      	mov	r1, r9
  404fac:	4640      	mov	r0, r8
  404fae:	f001 fecb 	bl	406d48 <__aeabi_dsub>
  404fb2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  404fb6:	9b06      	ldr	r3, [sp, #24]
  404fb8:	f804 eb01 	strb.w	lr, [r4], #1
  404fbc:	ebc3 0e04 	rsb	lr, r3, r4
  404fc0:	9b05      	ldr	r3, [sp, #20]
  404fc2:	4573      	cmp	r3, lr
  404fc4:	d12e      	bne.n	405024 <_dtoa_r+0x69c>
  404fc6:	4602      	mov	r2, r0
  404fc8:	460b      	mov	r3, r1
  404fca:	f001 febf 	bl	406d4c <__adddf3>
  404fce:	4680      	mov	r8, r0
  404fd0:	4689      	mov	r9, r1
  404fd2:	4602      	mov	r2, r0
  404fd4:	460b      	mov	r3, r1
  404fd6:	4630      	mov	r0, r6
  404fd8:	4639      	mov	r1, r7
  404fda:	f002 fadb 	bl	407594 <__aeabi_dcmplt>
  404fde:	b978      	cbnz	r0, 405000 <_dtoa_r+0x678>
  404fe0:	4642      	mov	r2, r8
  404fe2:	464b      	mov	r3, r9
  404fe4:	4630      	mov	r0, r6
  404fe6:	4639      	mov	r1, r7
  404fe8:	f002 faca 	bl	407580 <__aeabi_dcmpeq>
  404fec:	2800      	cmp	r0, #0
  404fee:	f000 8246 	beq.w	40547e <_dtoa_r+0xaf6>
  404ff2:	07eb      	lsls	r3, r5, #31
  404ff4:	d404      	bmi.n	405000 <_dtoa_r+0x678>
  404ff6:	e242      	b.n	40547e <_dtoa_r+0xaf6>
  404ff8:	f8dd b020 	ldr.w	fp, [sp, #32]
  404ffc:	e000      	b.n	405000 <_dtoa_r+0x678>
  404ffe:	461c      	mov	r4, r3
  405000:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  405004:	2a39      	cmp	r2, #57	; 0x39
  405006:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  40500a:	d107      	bne.n	40501c <_dtoa_r+0x694>
  40500c:	9a06      	ldr	r2, [sp, #24]
  40500e:	429a      	cmp	r2, r3
  405010:	d1f5      	bne.n	404ffe <_dtoa_r+0x676>
  405012:	9906      	ldr	r1, [sp, #24]
  405014:	2230      	movs	r2, #48	; 0x30
  405016:	f10b 0b01 	add.w	fp, fp, #1
  40501a:	700a      	strb	r2, [r1, #0]
  40501c:	781a      	ldrb	r2, [r3, #0]
  40501e:	3201      	adds	r2, #1
  405020:	701a      	strb	r2, [r3, #0]
  405022:	e22c      	b.n	40547e <_dtoa_r+0xaf6>
  405024:	2200      	movs	r2, #0
  405026:	4b76      	ldr	r3, [pc, #472]	; (405200 <_dtoa_r+0x878>)
  405028:	f002 f842 	bl	4070b0 <__aeabi_dmul>
  40502c:	2200      	movs	r2, #0
  40502e:	2300      	movs	r3, #0
  405030:	4680      	mov	r8, r0
  405032:	4689      	mov	r9, r1
  405034:	f002 faa4 	bl	407580 <__aeabi_dcmpeq>
  405038:	2800      	cmp	r0, #0
  40503a:	d0a5      	beq.n	404f88 <_dtoa_r+0x600>
  40503c:	e21f      	b.n	40547e <_dtoa_r+0xaf6>
  40503e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405040:	2a00      	cmp	r2, #0
  405042:	d02b      	beq.n	40509c <_dtoa_r+0x714>
  405044:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405046:	2a01      	cmp	r2, #1
  405048:	dc0a      	bgt.n	405060 <_dtoa_r+0x6d8>
  40504a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40504c:	b112      	cbz	r2, 405054 <_dtoa_r+0x6cc>
  40504e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405052:	e002      	b.n	40505a <_dtoa_r+0x6d2>
  405054:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405056:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40505a:	463d      	mov	r5, r7
  40505c:	4644      	mov	r4, r8
  40505e:	e013      	b.n	405088 <_dtoa_r+0x700>
  405060:	9b05      	ldr	r3, [sp, #20]
  405062:	1e5d      	subs	r5, r3, #1
  405064:	42af      	cmp	r7, r5
  405066:	bfbf      	itttt	lt
  405068:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  40506a:	1bea      	sublt	r2, r5, r7
  40506c:	189b      	addlt	r3, r3, r2
  40506e:	930b      	strlt	r3, [sp, #44]	; 0x2c
  405070:	9b05      	ldr	r3, [sp, #20]
  405072:	bfb6      	itet	lt
  405074:	462f      	movlt	r7, r5
  405076:	1b7d      	subge	r5, r7, r5
  405078:	2500      	movlt	r5, #0
  40507a:	2b00      	cmp	r3, #0
  40507c:	bfab      	itete	ge
  40507e:	9b05      	ldrge	r3, [sp, #20]
  405080:	ebc3 0408 	rsblt	r4, r3, r8
  405084:	4644      	movge	r4, r8
  405086:	2300      	movlt	r3, #0
  405088:	9a07      	ldr	r2, [sp, #28]
  40508a:	2101      	movs	r1, #1
  40508c:	441a      	add	r2, r3
  40508e:	4650      	mov	r0, sl
  405090:	4498      	add	r8, r3
  405092:	9207      	str	r2, [sp, #28]
  405094:	f001 f89e 	bl	4061d4 <__i2b>
  405098:	4606      	mov	r6, r0
  40509a:	e002      	b.n	4050a2 <_dtoa_r+0x71a>
  40509c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40509e:	463d      	mov	r5, r7
  4050a0:	4644      	mov	r4, r8
  4050a2:	b15c      	cbz	r4, 4050bc <_dtoa_r+0x734>
  4050a4:	9b07      	ldr	r3, [sp, #28]
  4050a6:	2b00      	cmp	r3, #0
  4050a8:	dd08      	ble.n	4050bc <_dtoa_r+0x734>
  4050aa:	42a3      	cmp	r3, r4
  4050ac:	9a07      	ldr	r2, [sp, #28]
  4050ae:	bfa8      	it	ge
  4050b0:	4623      	movge	r3, r4
  4050b2:	ebc3 0808 	rsb	r8, r3, r8
  4050b6:	1ae4      	subs	r4, r4, r3
  4050b8:	1ad3      	subs	r3, r2, r3
  4050ba:	9307      	str	r3, [sp, #28]
  4050bc:	2f00      	cmp	r7, #0
  4050be:	dd1d      	ble.n	4050fc <_dtoa_r+0x774>
  4050c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050c2:	b1ab      	cbz	r3, 4050f0 <_dtoa_r+0x768>
  4050c4:	b18d      	cbz	r5, 4050ea <_dtoa_r+0x762>
  4050c6:	4631      	mov	r1, r6
  4050c8:	462a      	mov	r2, r5
  4050ca:	4650      	mov	r0, sl
  4050cc:	f001 f91c 	bl	406308 <__pow5mult>
  4050d0:	9a04      	ldr	r2, [sp, #16]
  4050d2:	4601      	mov	r1, r0
  4050d4:	4606      	mov	r6, r0
  4050d6:	4650      	mov	r0, sl
  4050d8:	f001 f885 	bl	4061e6 <__multiply>
  4050dc:	9904      	ldr	r1, [sp, #16]
  4050de:	9008      	str	r0, [sp, #32]
  4050e0:	4650      	mov	r0, sl
  4050e2:	f000 ff9a 	bl	40601a <_Bfree>
  4050e6:	9b08      	ldr	r3, [sp, #32]
  4050e8:	9304      	str	r3, [sp, #16]
  4050ea:	1b7a      	subs	r2, r7, r5
  4050ec:	d006      	beq.n	4050fc <_dtoa_r+0x774>
  4050ee:	e000      	b.n	4050f2 <_dtoa_r+0x76a>
  4050f0:	463a      	mov	r2, r7
  4050f2:	9904      	ldr	r1, [sp, #16]
  4050f4:	4650      	mov	r0, sl
  4050f6:	f001 f907 	bl	406308 <__pow5mult>
  4050fa:	9004      	str	r0, [sp, #16]
  4050fc:	2101      	movs	r1, #1
  4050fe:	4650      	mov	r0, sl
  405100:	f001 f868 	bl	4061d4 <__i2b>
  405104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405106:	4605      	mov	r5, r0
  405108:	b35b      	cbz	r3, 405162 <_dtoa_r+0x7da>
  40510a:	461a      	mov	r2, r3
  40510c:	4601      	mov	r1, r0
  40510e:	4650      	mov	r0, sl
  405110:	f001 f8fa 	bl	406308 <__pow5mult>
  405114:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405116:	2b01      	cmp	r3, #1
  405118:	4605      	mov	r5, r0
  40511a:	dc18      	bgt.n	40514e <_dtoa_r+0x7c6>
  40511c:	9b02      	ldr	r3, [sp, #8]
  40511e:	b983      	cbnz	r3, 405142 <_dtoa_r+0x7ba>
  405120:	9b03      	ldr	r3, [sp, #12]
  405122:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405126:	b973      	cbnz	r3, 405146 <_dtoa_r+0x7be>
  405128:	9b03      	ldr	r3, [sp, #12]
  40512a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  40512e:	0d3f      	lsrs	r7, r7, #20
  405130:	053f      	lsls	r7, r7, #20
  405132:	b14f      	cbz	r7, 405148 <_dtoa_r+0x7c0>
  405134:	9b07      	ldr	r3, [sp, #28]
  405136:	3301      	adds	r3, #1
  405138:	f108 0801 	add.w	r8, r8, #1
  40513c:	9307      	str	r3, [sp, #28]
  40513e:	2701      	movs	r7, #1
  405140:	e002      	b.n	405148 <_dtoa_r+0x7c0>
  405142:	2700      	movs	r7, #0
  405144:	e000      	b.n	405148 <_dtoa_r+0x7c0>
  405146:	9f02      	ldr	r7, [sp, #8]
  405148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40514a:	b173      	cbz	r3, 40516a <_dtoa_r+0x7e2>
  40514c:	e000      	b.n	405150 <_dtoa_r+0x7c8>
  40514e:	2700      	movs	r7, #0
  405150:	692b      	ldr	r3, [r5, #16]
  405152:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405156:	6918      	ldr	r0, [r3, #16]
  405158:	f000 ffef 	bl	40613a <__hi0bits>
  40515c:	f1c0 0020 	rsb	r0, r0, #32
  405160:	e004      	b.n	40516c <_dtoa_r+0x7e4>
  405162:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405164:	2b01      	cmp	r3, #1
  405166:	ddd9      	ble.n	40511c <_dtoa_r+0x794>
  405168:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40516a:	2001      	movs	r0, #1
  40516c:	9b07      	ldr	r3, [sp, #28]
  40516e:	4418      	add	r0, r3
  405170:	f010 001f 	ands.w	r0, r0, #31
  405174:	d008      	beq.n	405188 <_dtoa_r+0x800>
  405176:	f1c0 0320 	rsb	r3, r0, #32
  40517a:	2b04      	cmp	r3, #4
  40517c:	dd02      	ble.n	405184 <_dtoa_r+0x7fc>
  40517e:	f1c0 001c 	rsb	r0, r0, #28
  405182:	e002      	b.n	40518a <_dtoa_r+0x802>
  405184:	d006      	beq.n	405194 <_dtoa_r+0x80c>
  405186:	4618      	mov	r0, r3
  405188:	301c      	adds	r0, #28
  40518a:	9b07      	ldr	r3, [sp, #28]
  40518c:	4403      	add	r3, r0
  40518e:	4480      	add	r8, r0
  405190:	4404      	add	r4, r0
  405192:	9307      	str	r3, [sp, #28]
  405194:	f1b8 0f00 	cmp.w	r8, #0
  405198:	dd05      	ble.n	4051a6 <_dtoa_r+0x81e>
  40519a:	4642      	mov	r2, r8
  40519c:	9904      	ldr	r1, [sp, #16]
  40519e:	4650      	mov	r0, sl
  4051a0:	f001 f900 	bl	4063a4 <__lshift>
  4051a4:	9004      	str	r0, [sp, #16]
  4051a6:	9b07      	ldr	r3, [sp, #28]
  4051a8:	2b00      	cmp	r3, #0
  4051aa:	dd05      	ble.n	4051b8 <_dtoa_r+0x830>
  4051ac:	4629      	mov	r1, r5
  4051ae:	461a      	mov	r2, r3
  4051b0:	4650      	mov	r0, sl
  4051b2:	f001 f8f7 	bl	4063a4 <__lshift>
  4051b6:	4605      	mov	r5, r0
  4051b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051ba:	b31b      	cbz	r3, 405204 <_dtoa_r+0x87c>
  4051bc:	4629      	mov	r1, r5
  4051be:	9804      	ldr	r0, [sp, #16]
  4051c0:	f001 f941 	bl	406446 <__mcmp>
  4051c4:	2800      	cmp	r0, #0
  4051c6:	da1d      	bge.n	405204 <_dtoa_r+0x87c>
  4051c8:	2300      	movs	r3, #0
  4051ca:	220a      	movs	r2, #10
  4051cc:	9904      	ldr	r1, [sp, #16]
  4051ce:	4650      	mov	r0, sl
  4051d0:	f000 ff3a 	bl	406048 <__multadd>
  4051d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051d6:	9004      	str	r0, [sp, #16]
  4051d8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4051dc:	2b00      	cmp	r3, #0
  4051de:	f000 8160 	beq.w	4054a2 <_dtoa_r+0xb1a>
  4051e2:	4631      	mov	r1, r6
  4051e4:	2300      	movs	r3, #0
  4051e6:	220a      	movs	r2, #10
  4051e8:	4650      	mov	r0, sl
  4051ea:	f000 ff2d 	bl	406048 <__multadd>
  4051ee:	f1b9 0f00 	cmp.w	r9, #0
  4051f2:	4606      	mov	r6, r0
  4051f4:	dc3e      	bgt.n	405274 <_dtoa_r+0x8ec>
  4051f6:	e03a      	b.n	40526e <_dtoa_r+0x8e6>
  4051f8:	004082d8 	.word	0x004082d8
  4051fc:	40140000 	.word	0x40140000
  405200:	40240000 	.word	0x40240000
  405204:	9b05      	ldr	r3, [sp, #20]
  405206:	2b00      	cmp	r3, #0
  405208:	dc2b      	bgt.n	405262 <_dtoa_r+0x8da>
  40520a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40520c:	2b02      	cmp	r3, #2
  40520e:	dd28      	ble.n	405262 <_dtoa_r+0x8da>
  405210:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405214:	f1b9 0f00 	cmp.w	r9, #0
  405218:	d111      	bne.n	40523e <_dtoa_r+0x8b6>
  40521a:	4629      	mov	r1, r5
  40521c:	464b      	mov	r3, r9
  40521e:	2205      	movs	r2, #5
  405220:	4650      	mov	r0, sl
  405222:	f000 ff11 	bl	406048 <__multadd>
  405226:	4601      	mov	r1, r0
  405228:	4605      	mov	r5, r0
  40522a:	9804      	ldr	r0, [sp, #16]
  40522c:	f001 f90b 	bl	406446 <__mcmp>
  405230:	2800      	cmp	r0, #0
  405232:	dc0c      	bgt.n	40524e <_dtoa_r+0x8c6>
  405234:	e003      	b.n	40523e <_dtoa_r+0x8b6>
  405236:	4635      	mov	r5, r6
  405238:	e000      	b.n	40523c <_dtoa_r+0x8b4>
  40523a:	2500      	movs	r5, #0
  40523c:	462e      	mov	r6, r5
  40523e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405240:	9c06      	ldr	r4, [sp, #24]
  405242:	ea6f 0b03 	mvn.w	fp, r3
  405246:	e009      	b.n	40525c <_dtoa_r+0x8d4>
  405248:	f8dd b020 	ldr.w	fp, [sp, #32]
  40524c:	4635      	mov	r5, r6
  40524e:	9b06      	ldr	r3, [sp, #24]
  405250:	9a06      	ldr	r2, [sp, #24]
  405252:	1c5c      	adds	r4, r3, #1
  405254:	2331      	movs	r3, #49	; 0x31
  405256:	7013      	strb	r3, [r2, #0]
  405258:	f10b 0b01 	add.w	fp, fp, #1
  40525c:	9605      	str	r6, [sp, #20]
  40525e:	2600      	movs	r6, #0
  405260:	e0f9      	b.n	405456 <_dtoa_r+0xace>
  405262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405264:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405268:	b923      	cbnz	r3, 405274 <_dtoa_r+0x8ec>
  40526a:	9c06      	ldr	r4, [sp, #24]
  40526c:	e0b2      	b.n	4053d4 <_dtoa_r+0xa4c>
  40526e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405270:	2b02      	cmp	r3, #2
  405272:	dccf      	bgt.n	405214 <_dtoa_r+0x88c>
  405274:	2c00      	cmp	r4, #0
  405276:	dd05      	ble.n	405284 <_dtoa_r+0x8fc>
  405278:	4631      	mov	r1, r6
  40527a:	4622      	mov	r2, r4
  40527c:	4650      	mov	r0, sl
  40527e:	f001 f891 	bl	4063a4 <__lshift>
  405282:	4606      	mov	r6, r0
  405284:	b19f      	cbz	r7, 4052ae <_dtoa_r+0x926>
  405286:	6871      	ldr	r1, [r6, #4]
  405288:	4650      	mov	r0, sl
  40528a:	f000 fe91 	bl	405fb0 <_Balloc>
  40528e:	6932      	ldr	r2, [r6, #16]
  405290:	3202      	adds	r2, #2
  405292:	4604      	mov	r4, r0
  405294:	0092      	lsls	r2, r2, #2
  405296:	f106 010c 	add.w	r1, r6, #12
  40529a:	300c      	adds	r0, #12
  40529c:	f7fd fd64 	bl	402d68 <memcpy>
  4052a0:	2201      	movs	r2, #1
  4052a2:	4621      	mov	r1, r4
  4052a4:	4650      	mov	r0, sl
  4052a6:	f001 f87d 	bl	4063a4 <__lshift>
  4052aa:	9005      	str	r0, [sp, #20]
  4052ac:	e000      	b.n	4052b0 <_dtoa_r+0x928>
  4052ae:	9605      	str	r6, [sp, #20]
  4052b0:	9b02      	ldr	r3, [sp, #8]
  4052b2:	9f06      	ldr	r7, [sp, #24]
  4052b4:	f003 0301 	and.w	r3, r3, #1
  4052b8:	9307      	str	r3, [sp, #28]
  4052ba:	4629      	mov	r1, r5
  4052bc:	9804      	ldr	r0, [sp, #16]
  4052be:	f7ff fad3 	bl	404868 <quorem>
  4052c2:	4631      	mov	r1, r6
  4052c4:	4604      	mov	r4, r0
  4052c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4052ca:	9804      	ldr	r0, [sp, #16]
  4052cc:	f001 f8bb 	bl	406446 <__mcmp>
  4052d0:	9a05      	ldr	r2, [sp, #20]
  4052d2:	9002      	str	r0, [sp, #8]
  4052d4:	4629      	mov	r1, r5
  4052d6:	4650      	mov	r0, sl
  4052d8:	f001 f8d1 	bl	40647e <__mdiff>
  4052dc:	68c3      	ldr	r3, [r0, #12]
  4052de:	4602      	mov	r2, r0
  4052e0:	b93b      	cbnz	r3, 4052f2 <_dtoa_r+0x96a>
  4052e2:	4601      	mov	r1, r0
  4052e4:	900a      	str	r0, [sp, #40]	; 0x28
  4052e6:	9804      	ldr	r0, [sp, #16]
  4052e8:	f001 f8ad 	bl	406446 <__mcmp>
  4052ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052ee:	4603      	mov	r3, r0
  4052f0:	e000      	b.n	4052f4 <_dtoa_r+0x96c>
  4052f2:	2301      	movs	r3, #1
  4052f4:	4611      	mov	r1, r2
  4052f6:	4650      	mov	r0, sl
  4052f8:	930a      	str	r3, [sp, #40]	; 0x28
  4052fa:	f000 fe8e 	bl	40601a <_Bfree>
  4052fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405300:	b953      	cbnz	r3, 405318 <_dtoa_r+0x990>
  405302:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405304:	b942      	cbnz	r2, 405318 <_dtoa_r+0x990>
  405306:	9a07      	ldr	r2, [sp, #28]
  405308:	b932      	cbnz	r2, 405318 <_dtoa_r+0x990>
  40530a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40530e:	d02a      	beq.n	405366 <_dtoa_r+0x9de>
  405310:	9b02      	ldr	r3, [sp, #8]
  405312:	2b00      	cmp	r3, #0
  405314:	dc1c      	bgt.n	405350 <_dtoa_r+0x9c8>
  405316:	e01d      	b.n	405354 <_dtoa_r+0x9cc>
  405318:	9a02      	ldr	r2, [sp, #8]
  40531a:	2a00      	cmp	r2, #0
  40531c:	db04      	blt.n	405328 <_dtoa_r+0x9a0>
  40531e:	d11b      	bne.n	405358 <_dtoa_r+0x9d0>
  405320:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405322:	b9ca      	cbnz	r2, 405358 <_dtoa_r+0x9d0>
  405324:	9a07      	ldr	r2, [sp, #28]
  405326:	b9ba      	cbnz	r2, 405358 <_dtoa_r+0x9d0>
  405328:	2b00      	cmp	r3, #0
  40532a:	dd13      	ble.n	405354 <_dtoa_r+0x9cc>
  40532c:	2201      	movs	r2, #1
  40532e:	9904      	ldr	r1, [sp, #16]
  405330:	4650      	mov	r0, sl
  405332:	f001 f837 	bl	4063a4 <__lshift>
  405336:	4629      	mov	r1, r5
  405338:	9004      	str	r0, [sp, #16]
  40533a:	f001 f884 	bl	406446 <__mcmp>
  40533e:	2800      	cmp	r0, #0
  405340:	dc03      	bgt.n	40534a <_dtoa_r+0x9c2>
  405342:	d107      	bne.n	405354 <_dtoa_r+0x9cc>
  405344:	f018 0f01 	tst.w	r8, #1
  405348:	d004      	beq.n	405354 <_dtoa_r+0x9cc>
  40534a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40534e:	d00a      	beq.n	405366 <_dtoa_r+0x9de>
  405350:	f104 0831 	add.w	r8, r4, #49	; 0x31
  405354:	1c7c      	adds	r4, r7, #1
  405356:	e00c      	b.n	405372 <_dtoa_r+0x9ea>
  405358:	2b00      	cmp	r3, #0
  40535a:	f107 0401 	add.w	r4, r7, #1
  40535e:	dd0b      	ble.n	405378 <_dtoa_r+0x9f0>
  405360:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405364:	d103      	bne.n	40536e <_dtoa_r+0x9e6>
  405366:	2339      	movs	r3, #57	; 0x39
  405368:	703b      	strb	r3, [r7, #0]
  40536a:	3701      	adds	r7, #1
  40536c:	e056      	b.n	40541c <_dtoa_r+0xa94>
  40536e:	f108 0801 	add.w	r8, r8, #1
  405372:	f887 8000 	strb.w	r8, [r7]
  405376:	e06e      	b.n	405456 <_dtoa_r+0xace>
  405378:	9b06      	ldr	r3, [sp, #24]
  40537a:	f804 8c01 	strb.w	r8, [r4, #-1]
  40537e:	1ae3      	subs	r3, r4, r3
  405380:	454b      	cmp	r3, r9
  405382:	4627      	mov	r7, r4
  405384:	d03b      	beq.n	4053fe <_dtoa_r+0xa76>
  405386:	2300      	movs	r3, #0
  405388:	220a      	movs	r2, #10
  40538a:	9904      	ldr	r1, [sp, #16]
  40538c:	4650      	mov	r0, sl
  40538e:	f000 fe5b 	bl	406048 <__multadd>
  405392:	9b05      	ldr	r3, [sp, #20]
  405394:	9004      	str	r0, [sp, #16]
  405396:	429e      	cmp	r6, r3
  405398:	f04f 020a 	mov.w	r2, #10
  40539c:	f04f 0300 	mov.w	r3, #0
  4053a0:	4631      	mov	r1, r6
  4053a2:	4650      	mov	r0, sl
  4053a4:	d104      	bne.n	4053b0 <_dtoa_r+0xa28>
  4053a6:	f000 fe4f 	bl	406048 <__multadd>
  4053aa:	4606      	mov	r6, r0
  4053ac:	9005      	str	r0, [sp, #20]
  4053ae:	e784      	b.n	4052ba <_dtoa_r+0x932>
  4053b0:	f000 fe4a 	bl	406048 <__multadd>
  4053b4:	2300      	movs	r3, #0
  4053b6:	4606      	mov	r6, r0
  4053b8:	220a      	movs	r2, #10
  4053ba:	9905      	ldr	r1, [sp, #20]
  4053bc:	4650      	mov	r0, sl
  4053be:	f000 fe43 	bl	406048 <__multadd>
  4053c2:	9005      	str	r0, [sp, #20]
  4053c4:	e779      	b.n	4052ba <_dtoa_r+0x932>
  4053c6:	2300      	movs	r3, #0
  4053c8:	220a      	movs	r2, #10
  4053ca:	9904      	ldr	r1, [sp, #16]
  4053cc:	4650      	mov	r0, sl
  4053ce:	f000 fe3b 	bl	406048 <__multadd>
  4053d2:	9004      	str	r0, [sp, #16]
  4053d4:	4629      	mov	r1, r5
  4053d6:	9804      	ldr	r0, [sp, #16]
  4053d8:	f7ff fa46 	bl	404868 <quorem>
  4053dc:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4053e0:	f804 8b01 	strb.w	r8, [r4], #1
  4053e4:	9b06      	ldr	r3, [sp, #24]
  4053e6:	1ae3      	subs	r3, r4, r3
  4053e8:	454b      	cmp	r3, r9
  4053ea:	dbec      	blt.n	4053c6 <_dtoa_r+0xa3e>
  4053ec:	9b06      	ldr	r3, [sp, #24]
  4053ee:	9605      	str	r6, [sp, #20]
  4053f0:	f1b9 0f01 	cmp.w	r9, #1
  4053f4:	bfac      	ite	ge
  4053f6:	444b      	addge	r3, r9
  4053f8:	3301      	addlt	r3, #1
  4053fa:	461f      	mov	r7, r3
  4053fc:	2600      	movs	r6, #0
  4053fe:	2201      	movs	r2, #1
  405400:	9904      	ldr	r1, [sp, #16]
  405402:	4650      	mov	r0, sl
  405404:	f000 ffce 	bl	4063a4 <__lshift>
  405408:	4629      	mov	r1, r5
  40540a:	9004      	str	r0, [sp, #16]
  40540c:	f001 f81b 	bl	406446 <__mcmp>
  405410:	2800      	cmp	r0, #0
  405412:	dc03      	bgt.n	40541c <_dtoa_r+0xa94>
  405414:	d116      	bne.n	405444 <_dtoa_r+0xabc>
  405416:	f018 0f01 	tst.w	r8, #1
  40541a:	d013      	beq.n	405444 <_dtoa_r+0xabc>
  40541c:	463c      	mov	r4, r7
  40541e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  405422:	2b39      	cmp	r3, #57	; 0x39
  405424:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  405428:	d109      	bne.n	40543e <_dtoa_r+0xab6>
  40542a:	9b06      	ldr	r3, [sp, #24]
  40542c:	4293      	cmp	r3, r2
  40542e:	d104      	bne.n	40543a <_dtoa_r+0xab2>
  405430:	f10b 0b01 	add.w	fp, fp, #1
  405434:	2331      	movs	r3, #49	; 0x31
  405436:	9a06      	ldr	r2, [sp, #24]
  405438:	e002      	b.n	405440 <_dtoa_r+0xab8>
  40543a:	4614      	mov	r4, r2
  40543c:	e7ef      	b.n	40541e <_dtoa_r+0xa96>
  40543e:	3301      	adds	r3, #1
  405440:	7013      	strb	r3, [r2, #0]
  405442:	e008      	b.n	405456 <_dtoa_r+0xace>
  405444:	463c      	mov	r4, r7
  405446:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40544a:	2b30      	cmp	r3, #48	; 0x30
  40544c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  405450:	d101      	bne.n	405456 <_dtoa_r+0xace>
  405452:	4614      	mov	r4, r2
  405454:	e7f7      	b.n	405446 <_dtoa_r+0xabe>
  405456:	4629      	mov	r1, r5
  405458:	4650      	mov	r0, sl
  40545a:	f000 fdde 	bl	40601a <_Bfree>
  40545e:	9b05      	ldr	r3, [sp, #20]
  405460:	b16b      	cbz	r3, 40547e <_dtoa_r+0xaf6>
  405462:	b12e      	cbz	r6, 405470 <_dtoa_r+0xae8>
  405464:	429e      	cmp	r6, r3
  405466:	d003      	beq.n	405470 <_dtoa_r+0xae8>
  405468:	4631      	mov	r1, r6
  40546a:	4650      	mov	r0, sl
  40546c:	f000 fdd5 	bl	40601a <_Bfree>
  405470:	9905      	ldr	r1, [sp, #20]
  405472:	4650      	mov	r0, sl
  405474:	f000 fdd1 	bl	40601a <_Bfree>
  405478:	e001      	b.n	40547e <_dtoa_r+0xaf6>
  40547a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40547e:	9904      	ldr	r1, [sp, #16]
  405480:	4650      	mov	r0, sl
  405482:	f000 fdca 	bl	40601a <_Bfree>
  405486:	2300      	movs	r3, #0
  405488:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40548a:	7023      	strb	r3, [r4, #0]
  40548c:	f10b 0301 	add.w	r3, fp, #1
  405490:	6013      	str	r3, [r2, #0]
  405492:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405494:	b11b      	cbz	r3, 40549e <_dtoa_r+0xb16>
  405496:	601c      	str	r4, [r3, #0]
  405498:	e001      	b.n	40549e <_dtoa_r+0xb16>
  40549a:	4808      	ldr	r0, [pc, #32]	; (4054bc <_dtoa_r+0xb34>)
  40549c:	e00a      	b.n	4054b4 <_dtoa_r+0xb2c>
  40549e:	9806      	ldr	r0, [sp, #24]
  4054a0:	e008      	b.n	4054b4 <_dtoa_r+0xb2c>
  4054a2:	f1b9 0f00 	cmp.w	r9, #0
  4054a6:	f73f aee0 	bgt.w	40526a <_dtoa_r+0x8e2>
  4054aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4054ac:	2b02      	cmp	r3, #2
  4054ae:	f77f aedc 	ble.w	40526a <_dtoa_r+0x8e2>
  4054b2:	e6af      	b.n	405214 <_dtoa_r+0x88c>
  4054b4:	b015      	add	sp, #84	; 0x54
  4054b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054ba:	bf00      	nop
  4054bc:	004081e4 	.word	0x004081e4

004054c0 <__sflush_r>:
  4054c0:	898a      	ldrh	r2, [r1, #12]
  4054c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054c6:	4605      	mov	r5, r0
  4054c8:	0710      	lsls	r0, r2, #28
  4054ca:	460c      	mov	r4, r1
  4054cc:	d459      	bmi.n	405582 <__sflush_r+0xc2>
  4054ce:	684b      	ldr	r3, [r1, #4]
  4054d0:	2b00      	cmp	r3, #0
  4054d2:	dc02      	bgt.n	4054da <__sflush_r+0x1a>
  4054d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4054d6:	2b00      	cmp	r3, #0
  4054d8:	dd17      	ble.n	40550a <__sflush_r+0x4a>
  4054da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4054dc:	b1ae      	cbz	r6, 40550a <__sflush_r+0x4a>
  4054de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  4054e2:	2300      	movs	r3, #0
  4054e4:	b292      	uxth	r2, r2
  4054e6:	682f      	ldr	r7, [r5, #0]
  4054e8:	602b      	str	r3, [r5, #0]
  4054ea:	b10a      	cbz	r2, 4054f0 <__sflush_r+0x30>
  4054ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4054ee:	e015      	b.n	40551c <__sflush_r+0x5c>
  4054f0:	6a21      	ldr	r1, [r4, #32]
  4054f2:	2301      	movs	r3, #1
  4054f4:	4628      	mov	r0, r5
  4054f6:	47b0      	blx	r6
  4054f8:	1c41      	adds	r1, r0, #1
  4054fa:	d10f      	bne.n	40551c <__sflush_r+0x5c>
  4054fc:	682b      	ldr	r3, [r5, #0]
  4054fe:	b16b      	cbz	r3, 40551c <__sflush_r+0x5c>
  405500:	2b1d      	cmp	r3, #29
  405502:	d001      	beq.n	405508 <__sflush_r+0x48>
  405504:	2b16      	cmp	r3, #22
  405506:	d103      	bne.n	405510 <__sflush_r+0x50>
  405508:	602f      	str	r7, [r5, #0]
  40550a:	2000      	movs	r0, #0
  40550c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405510:	89a3      	ldrh	r3, [r4, #12]
  405512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405516:	81a3      	strh	r3, [r4, #12]
  405518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40551c:	89a3      	ldrh	r3, [r4, #12]
  40551e:	075a      	lsls	r2, r3, #29
  405520:	d505      	bpl.n	40552e <__sflush_r+0x6e>
  405522:	6863      	ldr	r3, [r4, #4]
  405524:	1ac0      	subs	r0, r0, r3
  405526:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405528:	b10b      	cbz	r3, 40552e <__sflush_r+0x6e>
  40552a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40552c:	1ac0      	subs	r0, r0, r3
  40552e:	2300      	movs	r3, #0
  405530:	4602      	mov	r2, r0
  405532:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  405534:	6a21      	ldr	r1, [r4, #32]
  405536:	4628      	mov	r0, r5
  405538:	47b0      	blx	r6
  40553a:	1c43      	adds	r3, r0, #1
  40553c:	89a3      	ldrh	r3, [r4, #12]
  40553e:	d106      	bne.n	40554e <__sflush_r+0x8e>
  405540:	6829      	ldr	r1, [r5, #0]
  405542:	291d      	cmp	r1, #29
  405544:	d83a      	bhi.n	4055bc <__sflush_r+0xfc>
  405546:	4a21      	ldr	r2, [pc, #132]	; (4055cc <__sflush_r+0x10c>)
  405548:	40ca      	lsrs	r2, r1
  40554a:	07d6      	lsls	r6, r2, #31
  40554c:	d536      	bpl.n	4055bc <__sflush_r+0xfc>
  40554e:	2200      	movs	r2, #0
  405550:	6062      	str	r2, [r4, #4]
  405552:	04d9      	lsls	r1, r3, #19
  405554:	6922      	ldr	r2, [r4, #16]
  405556:	6022      	str	r2, [r4, #0]
  405558:	d504      	bpl.n	405564 <__sflush_r+0xa4>
  40555a:	1c42      	adds	r2, r0, #1
  40555c:	d101      	bne.n	405562 <__sflush_r+0xa2>
  40555e:	682b      	ldr	r3, [r5, #0]
  405560:	b903      	cbnz	r3, 405564 <__sflush_r+0xa4>
  405562:	6560      	str	r0, [r4, #84]	; 0x54
  405564:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405566:	602f      	str	r7, [r5, #0]
  405568:	2900      	cmp	r1, #0
  40556a:	d0ce      	beq.n	40550a <__sflush_r+0x4a>
  40556c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405570:	4299      	cmp	r1, r3
  405572:	d002      	beq.n	40557a <__sflush_r+0xba>
  405574:	4628      	mov	r0, r5
  405576:	f001 f913 	bl	4067a0 <_free_r>
  40557a:	2000      	movs	r0, #0
  40557c:	6360      	str	r0, [r4, #52]	; 0x34
  40557e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405582:	690f      	ldr	r7, [r1, #16]
  405584:	2f00      	cmp	r7, #0
  405586:	d0c0      	beq.n	40550a <__sflush_r+0x4a>
  405588:	0793      	lsls	r3, r2, #30
  40558a:	680e      	ldr	r6, [r1, #0]
  40558c:	bf08      	it	eq
  40558e:	694b      	ldreq	r3, [r1, #20]
  405590:	600f      	str	r7, [r1, #0]
  405592:	bf18      	it	ne
  405594:	2300      	movne	r3, #0
  405596:	ebc7 0806 	rsb	r8, r7, r6
  40559a:	608b      	str	r3, [r1, #8]
  40559c:	e002      	b.n	4055a4 <__sflush_r+0xe4>
  40559e:	4407      	add	r7, r0
  4055a0:	ebc0 0808 	rsb	r8, r0, r8
  4055a4:	f1b8 0f00 	cmp.w	r8, #0
  4055a8:	ddaf      	ble.n	40550a <__sflush_r+0x4a>
  4055aa:	4643      	mov	r3, r8
  4055ac:	463a      	mov	r2, r7
  4055ae:	6a21      	ldr	r1, [r4, #32]
  4055b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4055b2:	4628      	mov	r0, r5
  4055b4:	47b0      	blx	r6
  4055b6:	2800      	cmp	r0, #0
  4055b8:	dcf1      	bgt.n	40559e <__sflush_r+0xde>
  4055ba:	89a3      	ldrh	r3, [r4, #12]
  4055bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055c0:	81a3      	strh	r3, [r4, #12]
  4055c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4055c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055ca:	bf00      	nop
  4055cc:	20400001 	.word	0x20400001

004055d0 <_fflush_r>:
  4055d0:	b538      	push	{r3, r4, r5, lr}
  4055d2:	690b      	ldr	r3, [r1, #16]
  4055d4:	4605      	mov	r5, r0
  4055d6:	460c      	mov	r4, r1
  4055d8:	b1db      	cbz	r3, 405612 <_fflush_r+0x42>
  4055da:	b118      	cbz	r0, 4055e4 <_fflush_r+0x14>
  4055dc:	6983      	ldr	r3, [r0, #24]
  4055de:	b90b      	cbnz	r3, 4055e4 <_fflush_r+0x14>
  4055e0:	f000 f860 	bl	4056a4 <__sinit>
  4055e4:	4b0c      	ldr	r3, [pc, #48]	; (405618 <_fflush_r+0x48>)
  4055e6:	429c      	cmp	r4, r3
  4055e8:	d101      	bne.n	4055ee <_fflush_r+0x1e>
  4055ea:	686c      	ldr	r4, [r5, #4]
  4055ec:	e008      	b.n	405600 <_fflush_r+0x30>
  4055ee:	4b0b      	ldr	r3, [pc, #44]	; (40561c <_fflush_r+0x4c>)
  4055f0:	429c      	cmp	r4, r3
  4055f2:	d101      	bne.n	4055f8 <_fflush_r+0x28>
  4055f4:	68ac      	ldr	r4, [r5, #8]
  4055f6:	e003      	b.n	405600 <_fflush_r+0x30>
  4055f8:	4b09      	ldr	r3, [pc, #36]	; (405620 <_fflush_r+0x50>)
  4055fa:	429c      	cmp	r4, r3
  4055fc:	bf08      	it	eq
  4055fe:	68ec      	ldreq	r4, [r5, #12]
  405600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405604:	b12b      	cbz	r3, 405612 <_fflush_r+0x42>
  405606:	4621      	mov	r1, r4
  405608:	4628      	mov	r0, r5
  40560a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40560e:	f7ff bf57 	b.w	4054c0 <__sflush_r>
  405612:	2000      	movs	r0, #0
  405614:	bd38      	pop	{r3, r4, r5, pc}
  405616:	bf00      	nop
  405618:	00408268 	.word	0x00408268
  40561c:	00408288 	.word	0x00408288
  405620:	004082a8 	.word	0x004082a8

00405624 <_cleanup_r>:
  405624:	4901      	ldr	r1, [pc, #4]	; (40562c <_cleanup_r+0x8>)
  405626:	f000 b8a9 	b.w	40577c <_fwalk_reent>
  40562a:	bf00      	nop
  40562c:	004055d1 	.word	0x004055d1

00405630 <std.isra.0>:
  405630:	2300      	movs	r3, #0
  405632:	b510      	push	{r4, lr}
  405634:	4604      	mov	r4, r0
  405636:	6003      	str	r3, [r0, #0]
  405638:	6043      	str	r3, [r0, #4]
  40563a:	6083      	str	r3, [r0, #8]
  40563c:	8181      	strh	r1, [r0, #12]
  40563e:	6643      	str	r3, [r0, #100]	; 0x64
  405640:	81c2      	strh	r2, [r0, #14]
  405642:	6103      	str	r3, [r0, #16]
  405644:	6143      	str	r3, [r0, #20]
  405646:	6183      	str	r3, [r0, #24]
  405648:	4619      	mov	r1, r3
  40564a:	2208      	movs	r2, #8
  40564c:	305c      	adds	r0, #92	; 0x5c
  40564e:	f7fd fb96 	bl	402d7e <memset>
  405652:	4b05      	ldr	r3, [pc, #20]	; (405668 <std.isra.0+0x38>)
  405654:	6263      	str	r3, [r4, #36]	; 0x24
  405656:	4b05      	ldr	r3, [pc, #20]	; (40566c <std.isra.0+0x3c>)
  405658:	62a3      	str	r3, [r4, #40]	; 0x28
  40565a:	4b05      	ldr	r3, [pc, #20]	; (405670 <std.isra.0+0x40>)
  40565c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40565e:	4b05      	ldr	r3, [pc, #20]	; (405674 <std.isra.0+0x44>)
  405660:	6224      	str	r4, [r4, #32]
  405662:	6323      	str	r3, [r4, #48]	; 0x30
  405664:	bd10      	pop	{r4, pc}
  405666:	bf00      	nop
  405668:	00406ba1 	.word	0x00406ba1
  40566c:	00406bc3 	.word	0x00406bc3
  405670:	00406bfb 	.word	0x00406bfb
  405674:	00406c1f 	.word	0x00406c1f

00405678 <__sfmoreglue>:
  405678:	b570      	push	{r4, r5, r6, lr}
  40567a:	2368      	movs	r3, #104	; 0x68
  40567c:	1e4d      	subs	r5, r1, #1
  40567e:	435d      	muls	r5, r3
  405680:	460e      	mov	r6, r1
  405682:	f105 0174 	add.w	r1, r5, #116	; 0x74
  405686:	f001 f8d9 	bl	40683c <_malloc_r>
  40568a:	4604      	mov	r4, r0
  40568c:	b140      	cbz	r0, 4056a0 <__sfmoreglue+0x28>
  40568e:	2100      	movs	r1, #0
  405690:	e880 0042 	stmia.w	r0, {r1, r6}
  405694:	300c      	adds	r0, #12
  405696:	60a0      	str	r0, [r4, #8]
  405698:	f105 0268 	add.w	r2, r5, #104	; 0x68
  40569c:	f7fd fb6f 	bl	402d7e <memset>
  4056a0:	4620      	mov	r0, r4
  4056a2:	bd70      	pop	{r4, r5, r6, pc}

004056a4 <__sinit>:
  4056a4:	6983      	ldr	r3, [r0, #24]
  4056a6:	b510      	push	{r4, lr}
  4056a8:	4604      	mov	r4, r0
  4056aa:	bb33      	cbnz	r3, 4056fa <__sinit+0x56>
  4056ac:	6483      	str	r3, [r0, #72]	; 0x48
  4056ae:	64c3      	str	r3, [r0, #76]	; 0x4c
  4056b0:	6503      	str	r3, [r0, #80]	; 0x50
  4056b2:	4b12      	ldr	r3, [pc, #72]	; (4056fc <__sinit+0x58>)
  4056b4:	4a12      	ldr	r2, [pc, #72]	; (405700 <__sinit+0x5c>)
  4056b6:	681b      	ldr	r3, [r3, #0]
  4056b8:	6282      	str	r2, [r0, #40]	; 0x28
  4056ba:	4298      	cmp	r0, r3
  4056bc:	bf04      	itt	eq
  4056be:	2301      	moveq	r3, #1
  4056c0:	6183      	streq	r3, [r0, #24]
  4056c2:	f000 f81f 	bl	405704 <__sfp>
  4056c6:	6060      	str	r0, [r4, #4]
  4056c8:	4620      	mov	r0, r4
  4056ca:	f000 f81b 	bl	405704 <__sfp>
  4056ce:	60a0      	str	r0, [r4, #8]
  4056d0:	4620      	mov	r0, r4
  4056d2:	f000 f817 	bl	405704 <__sfp>
  4056d6:	2200      	movs	r2, #0
  4056d8:	60e0      	str	r0, [r4, #12]
  4056da:	2104      	movs	r1, #4
  4056dc:	6860      	ldr	r0, [r4, #4]
  4056de:	f7ff ffa7 	bl	405630 <std.isra.0>
  4056e2:	2201      	movs	r2, #1
  4056e4:	2109      	movs	r1, #9
  4056e6:	68a0      	ldr	r0, [r4, #8]
  4056e8:	f7ff ffa2 	bl	405630 <std.isra.0>
  4056ec:	2202      	movs	r2, #2
  4056ee:	2112      	movs	r1, #18
  4056f0:	68e0      	ldr	r0, [r4, #12]
  4056f2:	f7ff ff9d 	bl	405630 <std.isra.0>
  4056f6:	2301      	movs	r3, #1
  4056f8:	61a3      	str	r3, [r4, #24]
  4056fa:	bd10      	pop	{r4, pc}
  4056fc:	004081d0 	.word	0x004081d0
  405700:	00405625 	.word	0x00405625

00405704 <__sfp>:
  405704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405706:	4b1c      	ldr	r3, [pc, #112]	; (405778 <__sfp+0x74>)
  405708:	681e      	ldr	r6, [r3, #0]
  40570a:	69b3      	ldr	r3, [r6, #24]
  40570c:	4607      	mov	r7, r0
  40570e:	b913      	cbnz	r3, 405716 <__sfp+0x12>
  405710:	4630      	mov	r0, r6
  405712:	f7ff ffc7 	bl	4056a4 <__sinit>
  405716:	3648      	adds	r6, #72	; 0x48
  405718:	68b4      	ldr	r4, [r6, #8]
  40571a:	6873      	ldr	r3, [r6, #4]
  40571c:	3b01      	subs	r3, #1
  40571e:	d404      	bmi.n	40572a <__sfp+0x26>
  405720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  405724:	b17d      	cbz	r5, 405746 <__sfp+0x42>
  405726:	3468      	adds	r4, #104	; 0x68
  405728:	e7f8      	b.n	40571c <__sfp+0x18>
  40572a:	6833      	ldr	r3, [r6, #0]
  40572c:	b10b      	cbz	r3, 405732 <__sfp+0x2e>
  40572e:	6836      	ldr	r6, [r6, #0]
  405730:	e7f2      	b.n	405718 <__sfp+0x14>
  405732:	2104      	movs	r1, #4
  405734:	4638      	mov	r0, r7
  405736:	f7ff ff9f 	bl	405678 <__sfmoreglue>
  40573a:	6030      	str	r0, [r6, #0]
  40573c:	2800      	cmp	r0, #0
  40573e:	d1f6      	bne.n	40572e <__sfp+0x2a>
  405740:	230c      	movs	r3, #12
  405742:	603b      	str	r3, [r7, #0]
  405744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405746:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40574a:	81e3      	strh	r3, [r4, #14]
  40574c:	2301      	movs	r3, #1
  40574e:	81a3      	strh	r3, [r4, #12]
  405750:	6665      	str	r5, [r4, #100]	; 0x64
  405752:	6025      	str	r5, [r4, #0]
  405754:	60a5      	str	r5, [r4, #8]
  405756:	6065      	str	r5, [r4, #4]
  405758:	6125      	str	r5, [r4, #16]
  40575a:	6165      	str	r5, [r4, #20]
  40575c:	61a5      	str	r5, [r4, #24]
  40575e:	2208      	movs	r2, #8
  405760:	4629      	mov	r1, r5
  405762:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  405766:	f7fd fb0a 	bl	402d7e <memset>
  40576a:	6365      	str	r5, [r4, #52]	; 0x34
  40576c:	63a5      	str	r5, [r4, #56]	; 0x38
  40576e:	64a5      	str	r5, [r4, #72]	; 0x48
  405770:	64e5      	str	r5, [r4, #76]	; 0x4c
  405772:	4620      	mov	r0, r4
  405774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405776:	bf00      	nop
  405778:	004081d0 	.word	0x004081d0

0040577c <_fwalk_reent>:
  40577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405780:	4680      	mov	r8, r0
  405782:	4689      	mov	r9, r1
  405784:	f100 0448 	add.w	r4, r0, #72	; 0x48
  405788:	2600      	movs	r6, #0
  40578a:	b194      	cbz	r4, 4057b2 <_fwalk_reent+0x36>
  40578c:	68a5      	ldr	r5, [r4, #8]
  40578e:	6867      	ldr	r7, [r4, #4]
  405790:	3f01      	subs	r7, #1
  405792:	d40c      	bmi.n	4057ae <_fwalk_reent+0x32>
  405794:	89ab      	ldrh	r3, [r5, #12]
  405796:	2b01      	cmp	r3, #1
  405798:	d907      	bls.n	4057aa <_fwalk_reent+0x2e>
  40579a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40579e:	3301      	adds	r3, #1
  4057a0:	d003      	beq.n	4057aa <_fwalk_reent+0x2e>
  4057a2:	4629      	mov	r1, r5
  4057a4:	4640      	mov	r0, r8
  4057a6:	47c8      	blx	r9
  4057a8:	4306      	orrs	r6, r0
  4057aa:	3568      	adds	r5, #104	; 0x68
  4057ac:	e7f0      	b.n	405790 <_fwalk_reent+0x14>
  4057ae:	6824      	ldr	r4, [r4, #0]
  4057b0:	e7eb      	b.n	40578a <_fwalk_reent+0xe>
  4057b2:	4630      	mov	r0, r6
  4057b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004057b8 <rshift>:
  4057b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4057ba:	6906      	ldr	r6, [r0, #16]
  4057bc:	114b      	asrs	r3, r1, #5
  4057be:	42b3      	cmp	r3, r6
  4057c0:	f100 0514 	add.w	r5, r0, #20
  4057c4:	da27      	bge.n	405816 <rshift+0x5e>
  4057c6:	f011 011f 	ands.w	r1, r1, #31
  4057ca:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  4057ce:	eb05 0283 	add.w	r2, r5, r3, lsl #2
  4057d2:	d101      	bne.n	4057d8 <rshift+0x20>
  4057d4:	4629      	mov	r1, r5
  4057d6:	e016      	b.n	405806 <rshift+0x4e>
  4057d8:	1d14      	adds	r4, r2, #4
  4057da:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  4057de:	f1c1 0e20 	rsb	lr, r1, #32
  4057e2:	40ca      	lsrs	r2, r1
  4057e4:	462b      	mov	r3, r5
  4057e6:	42b4      	cmp	r4, r6
  4057e8:	d209      	bcs.n	4057fe <rshift+0x46>
  4057ea:	6827      	ldr	r7, [r4, #0]
  4057ec:	fa07 f70e 	lsl.w	r7, r7, lr
  4057f0:	433a      	orrs	r2, r7
  4057f2:	f843 2b04 	str.w	r2, [r3], #4
  4057f6:	f854 2b04 	ldr.w	r2, [r4], #4
  4057fa:	40ca      	lsrs	r2, r1
  4057fc:	e7f3      	b.n	4057e6 <rshift+0x2e>
  4057fe:	601a      	str	r2, [r3, #0]
  405800:	b152      	cbz	r2, 405818 <rshift+0x60>
  405802:	3304      	adds	r3, #4
  405804:	e008      	b.n	405818 <rshift+0x60>
  405806:	42b2      	cmp	r2, r6
  405808:	460b      	mov	r3, r1
  40580a:	d205      	bcs.n	405818 <rshift+0x60>
  40580c:	f852 3b04 	ldr.w	r3, [r2], #4
  405810:	f841 3b04 	str.w	r3, [r1], #4
  405814:	e7f7      	b.n	405806 <rshift+0x4e>
  405816:	462b      	mov	r3, r5
  405818:	1b5b      	subs	r3, r3, r5
  40581a:	109b      	asrs	r3, r3, #2
  40581c:	6103      	str	r3, [r0, #16]
  40581e:	b903      	cbnz	r3, 405822 <rshift+0x6a>
  405820:	6143      	str	r3, [r0, #20]
  405822:	bdf0      	pop	{r4, r5, r6, r7, pc}

00405824 <__hexdig_fun>:
  405824:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  405828:	2b09      	cmp	r3, #9
  40582a:	d801      	bhi.n	405830 <__hexdig_fun+0xc>
  40582c:	3820      	subs	r0, #32
  40582e:	e00a      	b.n	405846 <__hexdig_fun+0x22>
  405830:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  405834:	2b05      	cmp	r3, #5
  405836:	d801      	bhi.n	40583c <__hexdig_fun+0x18>
  405838:	3847      	subs	r0, #71	; 0x47
  40583a:	e004      	b.n	405846 <__hexdig_fun+0x22>
  40583c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  405840:	2b05      	cmp	r3, #5
  405842:	d802      	bhi.n	40584a <__hexdig_fun+0x26>
  405844:	3827      	subs	r0, #39	; 0x27
  405846:	b2c0      	uxtb	r0, r0
  405848:	4770      	bx	lr
  40584a:	2000      	movs	r0, #0
  40584c:	4770      	bx	lr

0040584e <__gethex>:
  40584e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405852:	b08b      	sub	sp, #44	; 0x2c
  405854:	468a      	mov	sl, r1
  405856:	9002      	str	r0, [sp, #8]
  405858:	9816      	ldr	r0, [sp, #88]	; 0x58
  40585a:	9306      	str	r3, [sp, #24]
  40585c:	4690      	mov	r8, r2
  40585e:	f000 facc 	bl	405dfa <__localeconv_l>
  405862:	6803      	ldr	r3, [r0, #0]
  405864:	9303      	str	r3, [sp, #12]
  405866:	4618      	mov	r0, r3
  405868:	f7fe f83e 	bl	4038e8 <strlen>
  40586c:	9b03      	ldr	r3, [sp, #12]
  40586e:	9001      	str	r0, [sp, #4]
  405870:	4403      	add	r3, r0
  405872:	f04f 0b00 	mov.w	fp, #0
  405876:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40587a:	9307      	str	r3, [sp, #28]
  40587c:	f8da 3000 	ldr.w	r3, [sl]
  405880:	3302      	adds	r3, #2
  405882:	461f      	mov	r7, r3
  405884:	f813 0b01 	ldrb.w	r0, [r3], #1
  405888:	2830      	cmp	r0, #48	; 0x30
  40588a:	d102      	bne.n	405892 <__gethex+0x44>
  40588c:	f10b 0b01 	add.w	fp, fp, #1
  405890:	e7f7      	b.n	405882 <__gethex+0x34>
  405892:	f7ff ffc7 	bl	405824 <__hexdig_fun>
  405896:	4604      	mov	r4, r0
  405898:	b9e0      	cbnz	r0, 4058d4 <__gethex+0x86>
  40589a:	9a01      	ldr	r2, [sp, #4]
  40589c:	9903      	ldr	r1, [sp, #12]
  40589e:	4638      	mov	r0, r7
  4058a0:	f001 f9c1 	bl	406c26 <strncmp>
  4058a4:	2800      	cmp	r0, #0
  4058a6:	d134      	bne.n	405912 <__gethex+0xc4>
  4058a8:	9b01      	ldr	r3, [sp, #4]
  4058aa:	5cf8      	ldrb	r0, [r7, r3]
  4058ac:	18fe      	adds	r6, r7, r3
  4058ae:	f7ff ffb9 	bl	405824 <__hexdig_fun>
  4058b2:	b380      	cbz	r0, 405916 <__gethex+0xc8>
  4058b4:	4633      	mov	r3, r6
  4058b6:	7818      	ldrb	r0, [r3, #0]
  4058b8:	2830      	cmp	r0, #48	; 0x30
  4058ba:	461f      	mov	r7, r3
  4058bc:	f103 0301 	add.w	r3, r3, #1
  4058c0:	d0f9      	beq.n	4058b6 <__gethex+0x68>
  4058c2:	f7ff ffaf 	bl	405824 <__hexdig_fun>
  4058c6:	fab0 f580 	clz	r5, r0
  4058ca:	096d      	lsrs	r5, r5, #5
  4058cc:	4634      	mov	r4, r6
  4058ce:	f04f 0b01 	mov.w	fp, #1
  4058d2:	e001      	b.n	4058d8 <__gethex+0x8a>
  4058d4:	2500      	movs	r5, #0
  4058d6:	462c      	mov	r4, r5
  4058d8:	463a      	mov	r2, r7
  4058da:	4616      	mov	r6, r2
  4058dc:	3201      	adds	r2, #1
  4058de:	7830      	ldrb	r0, [r6, #0]
  4058e0:	f7ff ffa0 	bl	405824 <__hexdig_fun>
  4058e4:	2800      	cmp	r0, #0
  4058e6:	d1f8      	bne.n	4058da <__gethex+0x8c>
  4058e8:	9a01      	ldr	r2, [sp, #4]
  4058ea:	9903      	ldr	r1, [sp, #12]
  4058ec:	4630      	mov	r0, r6
  4058ee:	f001 f99a 	bl	406c26 <strncmp>
  4058f2:	b950      	cbnz	r0, 40590a <__gethex+0xbc>
  4058f4:	b954      	cbnz	r4, 40590c <__gethex+0xbe>
  4058f6:	9b01      	ldr	r3, [sp, #4]
  4058f8:	18f4      	adds	r4, r6, r3
  4058fa:	4622      	mov	r2, r4
  4058fc:	4616      	mov	r6, r2
  4058fe:	3201      	adds	r2, #1
  405900:	7830      	ldrb	r0, [r6, #0]
  405902:	f7ff ff8f 	bl	405824 <__hexdig_fun>
  405906:	2800      	cmp	r0, #0
  405908:	d1f8      	bne.n	4058fc <__gethex+0xae>
  40590a:	b134      	cbz	r4, 40591a <__gethex+0xcc>
  40590c:	1ba4      	subs	r4, r4, r6
  40590e:	00a4      	lsls	r4, r4, #2
  405910:	e003      	b.n	40591a <__gethex+0xcc>
  405912:	463e      	mov	r6, r7
  405914:	e000      	b.n	405918 <__gethex+0xca>
  405916:	4604      	mov	r4, r0
  405918:	2501      	movs	r5, #1
  40591a:	7833      	ldrb	r3, [r6, #0]
  40591c:	2b50      	cmp	r3, #80	; 0x50
  40591e:	d001      	beq.n	405924 <__gethex+0xd6>
  405920:	2b70      	cmp	r3, #112	; 0x70
  405922:	d12a      	bne.n	40597a <__gethex+0x12c>
  405924:	7873      	ldrb	r3, [r6, #1]
  405926:	2b2b      	cmp	r3, #43	; 0x2b
  405928:	d008      	beq.n	40593c <__gethex+0xee>
  40592a:	2b2d      	cmp	r3, #45	; 0x2d
  40592c:	d003      	beq.n	405936 <__gethex+0xe8>
  40592e:	1c71      	adds	r1, r6, #1
  405930:	f04f 0900 	mov.w	r9, #0
  405934:	e005      	b.n	405942 <__gethex+0xf4>
  405936:	f04f 0901 	mov.w	r9, #1
  40593a:	e001      	b.n	405940 <__gethex+0xf2>
  40593c:	f04f 0900 	mov.w	r9, #0
  405940:	1cb1      	adds	r1, r6, #2
  405942:	7808      	ldrb	r0, [r1, #0]
  405944:	f7ff ff6e 	bl	405824 <__hexdig_fun>
  405948:	1e43      	subs	r3, r0, #1
  40594a:	b2db      	uxtb	r3, r3
  40594c:	2b18      	cmp	r3, #24
  40594e:	d814      	bhi.n	40597a <__gethex+0x12c>
  405950:	f1a0 0210 	sub.w	r2, r0, #16
  405954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  405958:	f7ff ff64 	bl	405824 <__hexdig_fun>
  40595c:	1e43      	subs	r3, r0, #1
  40595e:	b2db      	uxtb	r3, r3
  405960:	2b18      	cmp	r3, #24
  405962:	d804      	bhi.n	40596e <__gethex+0x120>
  405964:	230a      	movs	r3, #10
  405966:	fb03 0202 	mla	r2, r3, r2, r0
  40596a:	3a10      	subs	r2, #16
  40596c:	e7f2      	b.n	405954 <__gethex+0x106>
  40596e:	f1b9 0f00 	cmp.w	r9, #0
  405972:	d000      	beq.n	405976 <__gethex+0x128>
  405974:	4252      	negs	r2, r2
  405976:	4414      	add	r4, r2
  405978:	e000      	b.n	40597c <__gethex+0x12e>
  40597a:	4631      	mov	r1, r6
  40597c:	f8ca 1000 	str.w	r1, [sl]
  405980:	b12d      	cbz	r5, 40598e <__gethex+0x140>
  405982:	f1bb 0f00 	cmp.w	fp, #0
  405986:	bf14      	ite	ne
  405988:	2000      	movne	r0, #0
  40598a:	2006      	moveq	r0, #6
  40598c:	e17c      	b.n	405c88 <__gethex+0x43a>
  40598e:	1bf3      	subs	r3, r6, r7
  405990:	3b01      	subs	r3, #1
  405992:	4629      	mov	r1, r5
  405994:	2b07      	cmp	r3, #7
  405996:	dd02      	ble.n	40599e <__gethex+0x150>
  405998:	3101      	adds	r1, #1
  40599a:	105b      	asrs	r3, r3, #1
  40599c:	e7fa      	b.n	405994 <__gethex+0x146>
  40599e:	9802      	ldr	r0, [sp, #8]
  4059a0:	f000 fb06 	bl	405fb0 <_Balloc>
  4059a4:	9b01      	ldr	r3, [sp, #4]
  4059a6:	f100 0a14 	add.w	sl, r0, #20
  4059aa:	f04f 0900 	mov.w	r9, #0
  4059ae:	f1c3 0301 	rsb	r3, r3, #1
  4059b2:	4605      	mov	r5, r0
  4059b4:	f8cd a010 	str.w	sl, [sp, #16]
  4059b8:	46cb      	mov	fp, r9
  4059ba:	9308      	str	r3, [sp, #32]
  4059bc:	42b7      	cmp	r7, r6
  4059be:	d22f      	bcs.n	405a20 <__gethex+0x1d2>
  4059c0:	1e73      	subs	r3, r6, #1
  4059c2:	9305      	str	r3, [sp, #20]
  4059c4:	9a07      	ldr	r2, [sp, #28]
  4059c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4059ca:	4293      	cmp	r3, r2
  4059cc:	d00b      	beq.n	4059e6 <__gethex+0x198>
  4059ce:	f1bb 0f20 	cmp.w	fp, #32
  4059d2:	d116      	bne.n	405a02 <__gethex+0x1b4>
  4059d4:	9b04      	ldr	r3, [sp, #16]
  4059d6:	f8c3 9000 	str.w	r9, [r3]
  4059da:	3304      	adds	r3, #4
  4059dc:	f04f 0900 	mov.w	r9, #0
  4059e0:	9304      	str	r3, [sp, #16]
  4059e2:	46cb      	mov	fp, r9
  4059e4:	e00d      	b.n	405a02 <__gethex+0x1b4>
  4059e6:	9b05      	ldr	r3, [sp, #20]
  4059e8:	9a08      	ldr	r2, [sp, #32]
  4059ea:	4413      	add	r3, r2
  4059ec:	429f      	cmp	r7, r3
  4059ee:	d8ee      	bhi.n	4059ce <__gethex+0x180>
  4059f0:	4618      	mov	r0, r3
  4059f2:	9a01      	ldr	r2, [sp, #4]
  4059f4:	9903      	ldr	r1, [sp, #12]
  4059f6:	9309      	str	r3, [sp, #36]	; 0x24
  4059f8:	f001 f915 	bl	406c26 <strncmp>
  4059fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4059fe:	b168      	cbz	r0, 405a1c <__gethex+0x1ce>
  405a00:	e7e5      	b.n	4059ce <__gethex+0x180>
  405a02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
  405a06:	f7ff ff0d 	bl	405824 <__hexdig_fun>
  405a0a:	f000 000f 	and.w	r0, r0, #15
  405a0e:	fa00 f00b 	lsl.w	r0, r0, fp
  405a12:	9b05      	ldr	r3, [sp, #20]
  405a14:	ea49 0900 	orr.w	r9, r9, r0
  405a18:	f10b 0b04 	add.w	fp, fp, #4
  405a1c:	461e      	mov	r6, r3
  405a1e:	e7cd      	b.n	4059bc <__gethex+0x16e>
  405a20:	9804      	ldr	r0, [sp, #16]
  405a22:	f840 9b04 	str.w	r9, [r0], #4
  405a26:	ebca 0000 	rsb	r0, sl, r0
  405a2a:	1080      	asrs	r0, r0, #2
  405a2c:	6128      	str	r0, [r5, #16]
  405a2e:	0147      	lsls	r7, r0, #5
  405a30:	4648      	mov	r0, r9
  405a32:	f000 fb82 	bl	40613a <__hi0bits>
  405a36:	f8d8 6000 	ldr.w	r6, [r8]
  405a3a:	1a38      	subs	r0, r7, r0
  405a3c:	42b0      	cmp	r0, r6
  405a3e:	dd26      	ble.n	405a8e <__gethex+0x240>
  405a40:	1b87      	subs	r7, r0, r6
  405a42:	4639      	mov	r1, r7
  405a44:	4628      	mov	r0, r5
  405a46:	f000 fe7b 	bl	406740 <__any_on>
  405a4a:	b1c8      	cbz	r0, 405a80 <__gethex+0x232>
  405a4c:	1e7b      	subs	r3, r7, #1
  405a4e:	1159      	asrs	r1, r3, #5
  405a50:	f003 021f 	and.w	r2, r3, #31
  405a54:	f04f 0901 	mov.w	r9, #1
  405a58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
  405a5c:	fa09 f202 	lsl.w	r2, r9, r2
  405a60:	420a      	tst	r2, r1
  405a62:	d00e      	beq.n	405a82 <__gethex+0x234>
  405a64:	454b      	cmp	r3, r9
  405a66:	dc02      	bgt.n	405a6e <__gethex+0x220>
  405a68:	f04f 0902 	mov.w	r9, #2
  405a6c:	e009      	b.n	405a82 <__gethex+0x234>
  405a6e:	1eb9      	subs	r1, r7, #2
  405a70:	4628      	mov	r0, r5
  405a72:	f000 fe65 	bl	406740 <__any_on>
  405a76:	2800      	cmp	r0, #0
  405a78:	d0f6      	beq.n	405a68 <__gethex+0x21a>
  405a7a:	f04f 0903 	mov.w	r9, #3
  405a7e:	e000      	b.n	405a82 <__gethex+0x234>
  405a80:	4681      	mov	r9, r0
  405a82:	4639      	mov	r1, r7
  405a84:	4628      	mov	r0, r5
  405a86:	f7ff fe97 	bl	4057b8 <rshift>
  405a8a:	443c      	add	r4, r7
  405a8c:	e00c      	b.n	405aa8 <__gethex+0x25a>
  405a8e:	da09      	bge.n	405aa4 <__gethex+0x256>
  405a90:	1a37      	subs	r7, r6, r0
  405a92:	4629      	mov	r1, r5
  405a94:	463a      	mov	r2, r7
  405a96:	9802      	ldr	r0, [sp, #8]
  405a98:	f000 fc84 	bl	4063a4 <__lshift>
  405a9c:	1be4      	subs	r4, r4, r7
  405a9e:	4605      	mov	r5, r0
  405aa0:	f100 0a14 	add.w	sl, r0, #20
  405aa4:	f04f 0900 	mov.w	r9, #0
  405aa8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405aac:	429c      	cmp	r4, r3
  405aae:	dd08      	ble.n	405ac2 <__gethex+0x274>
  405ab0:	9802      	ldr	r0, [sp, #8]
  405ab2:	4629      	mov	r1, r5
  405ab4:	f000 fab1 	bl	40601a <_Bfree>
  405ab8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405aba:	2300      	movs	r3, #0
  405abc:	6013      	str	r3, [r2, #0]
  405abe:	20a3      	movs	r0, #163	; 0xa3
  405ac0:	e0e2      	b.n	405c88 <__gethex+0x43a>
  405ac2:	f8d8 0004 	ldr.w	r0, [r8, #4]
  405ac6:	4284      	cmp	r4, r0
  405ac8:	da53      	bge.n	405b72 <__gethex+0x324>
  405aca:	1b04      	subs	r4, r0, r4
  405acc:	42a6      	cmp	r6, r4
  405ace:	dc2e      	bgt.n	405b2e <__gethex+0x2e0>
  405ad0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405ad4:	2b02      	cmp	r3, #2
  405ad6:	d01a      	beq.n	405b0e <__gethex+0x2c0>
  405ad8:	2b03      	cmp	r3, #3
  405ada:	d01c      	beq.n	405b16 <__gethex+0x2c8>
  405adc:	2b01      	cmp	r3, #1
  405ade:	d11d      	bne.n	405b1c <__gethex+0x2ce>
  405ae0:	42a6      	cmp	r6, r4
  405ae2:	d11b      	bne.n	405b1c <__gethex+0x2ce>
  405ae4:	2e01      	cmp	r6, #1
  405ae6:	dc0b      	bgt.n	405b00 <__gethex+0x2b2>
  405ae8:	9a06      	ldr	r2, [sp, #24]
  405aea:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405aee:	6013      	str	r3, [r2, #0]
  405af0:	2301      	movs	r3, #1
  405af2:	612b      	str	r3, [r5, #16]
  405af4:	f8ca 3000 	str.w	r3, [sl]
  405af8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405afa:	2062      	movs	r0, #98	; 0x62
  405afc:	601d      	str	r5, [r3, #0]
  405afe:	e0c3      	b.n	405c88 <__gethex+0x43a>
  405b00:	1e71      	subs	r1, r6, #1
  405b02:	4628      	mov	r0, r5
  405b04:	f000 fe1c 	bl	406740 <__any_on>
  405b08:	2800      	cmp	r0, #0
  405b0a:	d1ed      	bne.n	405ae8 <__gethex+0x29a>
  405b0c:	e006      	b.n	405b1c <__gethex+0x2ce>
  405b0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b10:	2b00      	cmp	r3, #0
  405b12:	d0e9      	beq.n	405ae8 <__gethex+0x29a>
  405b14:	e002      	b.n	405b1c <__gethex+0x2ce>
  405b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b18:	2b00      	cmp	r3, #0
  405b1a:	d1e5      	bne.n	405ae8 <__gethex+0x29a>
  405b1c:	9802      	ldr	r0, [sp, #8]
  405b1e:	4629      	mov	r1, r5
  405b20:	f000 fa7b 	bl	40601a <_Bfree>
  405b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405b26:	2300      	movs	r3, #0
  405b28:	6013      	str	r3, [r2, #0]
  405b2a:	2050      	movs	r0, #80	; 0x50
  405b2c:	e0ac      	b.n	405c88 <__gethex+0x43a>
  405b2e:	1e67      	subs	r7, r4, #1
  405b30:	f1b9 0f00 	cmp.w	r9, #0
  405b34:	d106      	bne.n	405b44 <__gethex+0x2f6>
  405b36:	b13f      	cbz	r7, 405b48 <__gethex+0x2fa>
  405b38:	4639      	mov	r1, r7
  405b3a:	4628      	mov	r0, r5
  405b3c:	f000 fe00 	bl	406740 <__any_on>
  405b40:	4681      	mov	r9, r0
  405b42:	e001      	b.n	405b48 <__gethex+0x2fa>
  405b44:	f04f 0901 	mov.w	r9, #1
  405b48:	117a      	asrs	r2, r7, #5
  405b4a:	2301      	movs	r3, #1
  405b4c:	f007 071f 	and.w	r7, r7, #31
  405b50:	fa03 f707 	lsl.w	r7, r3, r7
  405b54:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405b58:	4621      	mov	r1, r4
  405b5a:	421f      	tst	r7, r3
  405b5c:	4628      	mov	r0, r5
  405b5e:	bf18      	it	ne
  405b60:	f049 0902 	orrne.w	r9, r9, #2
  405b64:	1b36      	subs	r6, r6, r4
  405b66:	f7ff fe27 	bl	4057b8 <rshift>
  405b6a:	2702      	movs	r7, #2
  405b6c:	f8d8 4004 	ldr.w	r4, [r8, #4]
  405b70:	e000      	b.n	405b74 <__gethex+0x326>
  405b72:	2701      	movs	r7, #1
  405b74:	f1b9 0f00 	cmp.w	r9, #0
  405b78:	f000 8081 	beq.w	405c7e <__gethex+0x430>
  405b7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405b80:	2b02      	cmp	r3, #2
  405b82:	d00e      	beq.n	405ba2 <__gethex+0x354>
  405b84:	2b03      	cmp	r3, #3
  405b86:	d010      	beq.n	405baa <__gethex+0x35c>
  405b88:	2b01      	cmp	r3, #1
  405b8a:	d176      	bne.n	405c7a <__gethex+0x42c>
  405b8c:	f019 0f02 	tst.w	r9, #2
  405b90:	d073      	beq.n	405c7a <__gethex+0x42c>
  405b92:	f8da 0000 	ldr.w	r0, [sl]
  405b96:	ea49 0900 	orr.w	r9, r9, r0
  405b9a:	f019 0f01 	tst.w	r9, #1
  405b9e:	d107      	bne.n	405bb0 <__gethex+0x362>
  405ba0:	e06b      	b.n	405c7a <__gethex+0x42c>
  405ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405ba4:	f1c3 0301 	rsb	r3, r3, #1
  405ba8:	9315      	str	r3, [sp, #84]	; 0x54
  405baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405bac:	2b00      	cmp	r3, #0
  405bae:	d064      	beq.n	405c7a <__gethex+0x42c>
  405bb0:	f8d5 a010 	ldr.w	sl, [r5, #16]
  405bb4:	f105 0314 	add.w	r3, r5, #20
  405bb8:	ea4f 098a 	mov.w	r9, sl, lsl #2
  405bbc:	eb03 0109 	add.w	r1, r3, r9
  405bc0:	2000      	movs	r0, #0
  405bc2:	681a      	ldr	r2, [r3, #0]
  405bc4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  405bc8:	d002      	beq.n	405bd0 <__gethex+0x382>
  405bca:	3201      	adds	r2, #1
  405bcc:	601a      	str	r2, [r3, #0]
  405bce:	e020      	b.n	405c12 <__gethex+0x3c4>
  405bd0:	f843 0b04 	str.w	r0, [r3], #4
  405bd4:	4299      	cmp	r1, r3
  405bd6:	d8f4      	bhi.n	405bc2 <__gethex+0x374>
  405bd8:	68ab      	ldr	r3, [r5, #8]
  405bda:	459a      	cmp	sl, r3
  405bdc:	db12      	blt.n	405c04 <__gethex+0x3b6>
  405bde:	6869      	ldr	r1, [r5, #4]
  405be0:	9802      	ldr	r0, [sp, #8]
  405be2:	3101      	adds	r1, #1
  405be4:	f000 f9e4 	bl	405fb0 <_Balloc>
  405be8:	692a      	ldr	r2, [r5, #16]
  405bea:	3202      	adds	r2, #2
  405bec:	f105 010c 	add.w	r1, r5, #12
  405bf0:	4683      	mov	fp, r0
  405bf2:	0092      	lsls	r2, r2, #2
  405bf4:	300c      	adds	r0, #12
  405bf6:	f7fd f8b7 	bl	402d68 <memcpy>
  405bfa:	4629      	mov	r1, r5
  405bfc:	9802      	ldr	r0, [sp, #8]
  405bfe:	f000 fa0c 	bl	40601a <_Bfree>
  405c02:	465d      	mov	r5, fp
  405c04:	692b      	ldr	r3, [r5, #16]
  405c06:	1c5a      	adds	r2, r3, #1
  405c08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405c0c:	612a      	str	r2, [r5, #16]
  405c0e:	2201      	movs	r2, #1
  405c10:	615a      	str	r2, [r3, #20]
  405c12:	2f02      	cmp	r7, #2
  405c14:	f105 0214 	add.w	r2, r5, #20
  405c18:	d111      	bne.n	405c3e <__gethex+0x3f0>
  405c1a:	f8d8 3000 	ldr.w	r3, [r8]
  405c1e:	3b01      	subs	r3, #1
  405c20:	429e      	cmp	r6, r3
  405c22:	d127      	bne.n	405c74 <__gethex+0x426>
  405c24:	1171      	asrs	r1, r6, #5
  405c26:	2301      	movs	r3, #1
  405c28:	f006 061f 	and.w	r6, r6, #31
  405c2c:	fa03 f606 	lsl.w	r6, r3, r6
  405c30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  405c34:	421e      	tst	r6, r3
  405c36:	bf0c      	ite	eq
  405c38:	2702      	moveq	r7, #2
  405c3a:	2701      	movne	r7, #1
  405c3c:	e01a      	b.n	405c74 <__gethex+0x426>
  405c3e:	692b      	ldr	r3, [r5, #16]
  405c40:	459a      	cmp	sl, r3
  405c42:	da0a      	bge.n	405c5a <__gethex+0x40c>
  405c44:	2101      	movs	r1, #1
  405c46:	4628      	mov	r0, r5
  405c48:	f7ff fdb6 	bl	4057b8 <rshift>
  405c4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405c50:	3401      	adds	r4, #1
  405c52:	429c      	cmp	r4, r3
  405c54:	f73f af2c 	bgt.w	405ab0 <__gethex+0x262>
  405c58:	e00b      	b.n	405c72 <__gethex+0x424>
  405c5a:	f016 061f 	ands.w	r6, r6, #31
  405c5e:	d008      	beq.n	405c72 <__gethex+0x424>
  405c60:	4491      	add	r9, r2
  405c62:	f1c6 0620 	rsb	r6, r6, #32
  405c66:	f859 0c04 	ldr.w	r0, [r9, #-4]
  405c6a:	f000 fa66 	bl	40613a <__hi0bits>
  405c6e:	42b0      	cmp	r0, r6
  405c70:	dbe8      	blt.n	405c44 <__gethex+0x3f6>
  405c72:	2701      	movs	r7, #1
  405c74:	f047 0720 	orr.w	r7, r7, #32
  405c78:	e001      	b.n	405c7e <__gethex+0x430>
  405c7a:	f047 0710 	orr.w	r7, r7, #16
  405c7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405c80:	601d      	str	r5, [r3, #0]
  405c82:	9b06      	ldr	r3, [sp, #24]
  405c84:	4638      	mov	r0, r7
  405c86:	601c      	str	r4, [r3, #0]
  405c88:	b00b      	add	sp, #44	; 0x2c
  405c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405c8e <L_shift>:
  405c8e:	f1c2 0208 	rsb	r2, r2, #8
  405c92:	0092      	lsls	r2, r2, #2
  405c94:	b570      	push	{r4, r5, r6, lr}
  405c96:	f1c2 0620 	rsb	r6, r2, #32
  405c9a:	6843      	ldr	r3, [r0, #4]
  405c9c:	6805      	ldr	r5, [r0, #0]
  405c9e:	fa03 f406 	lsl.w	r4, r3, r6
  405ca2:	432c      	orrs	r4, r5
  405ca4:	40d3      	lsrs	r3, r2
  405ca6:	6004      	str	r4, [r0, #0]
  405ca8:	f840 3f04 	str.w	r3, [r0, #4]!
  405cac:	4288      	cmp	r0, r1
  405cae:	d3f4      	bcc.n	405c9a <L_shift+0xc>
  405cb0:	bd70      	pop	{r4, r5, r6, pc}

00405cb2 <__match>:
  405cb2:	b530      	push	{r4, r5, lr}
  405cb4:	6803      	ldr	r3, [r0, #0]
  405cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
  405cba:	3301      	adds	r3, #1
  405cbc:	b14c      	cbz	r4, 405cd2 <__match+0x20>
  405cbe:	781a      	ldrb	r2, [r3, #0]
  405cc0:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
  405cc4:	2d19      	cmp	r5, #25
  405cc6:	bf98      	it	ls
  405cc8:	3220      	addls	r2, #32
  405cca:	42a2      	cmp	r2, r4
  405ccc:	d0f3      	beq.n	405cb6 <__match+0x4>
  405cce:	2000      	movs	r0, #0
  405cd0:	bd30      	pop	{r4, r5, pc}
  405cd2:	6003      	str	r3, [r0, #0]
  405cd4:	2001      	movs	r0, #1
  405cd6:	bd30      	pop	{r4, r5, pc}

00405cd8 <__hexnan>:
  405cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cdc:	680b      	ldr	r3, [r1, #0]
  405cde:	f8d0 b000 	ldr.w	fp, [r0]
  405ce2:	115e      	asrs	r6, r3, #5
  405ce4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  405ce8:	f013 031f 	ands.w	r3, r3, #31
  405cec:	b085      	sub	sp, #20
  405cee:	bf18      	it	ne
  405cf0:	3604      	addne	r6, #4
  405cf2:	1f35      	subs	r5, r6, #4
  405cf4:	4617      	mov	r7, r2
  405cf6:	2200      	movs	r2, #0
  405cf8:	4682      	mov	sl, r0
  405cfa:	9301      	str	r3, [sp, #4]
  405cfc:	f846 2c04 	str.w	r2, [r6, #-4]
  405d00:	46a8      	mov	r8, r5
  405d02:	462c      	mov	r4, r5
  405d04:	9200      	str	r2, [sp, #0]
  405d06:	4691      	mov	r9, r2
  405d08:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
  405d0c:	2900      	cmp	r1, #0
  405d0e:	d03c      	beq.n	405d8a <__hexnan+0xb2>
  405d10:	4608      	mov	r0, r1
  405d12:	9203      	str	r2, [sp, #12]
  405d14:	9102      	str	r1, [sp, #8]
  405d16:	f7ff fd85 	bl	405824 <__hexdig_fun>
  405d1a:	9a03      	ldr	r2, [sp, #12]
  405d1c:	bb00      	cbnz	r0, 405d60 <__hexnan+0x88>
  405d1e:	9902      	ldr	r1, [sp, #8]
  405d20:	2920      	cmp	r1, #32
  405d22:	d816      	bhi.n	405d52 <__hexnan+0x7a>
  405d24:	9b00      	ldr	r3, [sp, #0]
  405d26:	4599      	cmp	r9, r3
  405d28:	ddee      	ble.n	405d08 <__hexnan+0x30>
  405d2a:	4544      	cmp	r4, r8
  405d2c:	d205      	bcs.n	405d3a <__hexnan+0x62>
  405d2e:	2a07      	cmp	r2, #7
  405d30:	dc03      	bgt.n	405d3a <__hexnan+0x62>
  405d32:	4641      	mov	r1, r8
  405d34:	4620      	mov	r0, r4
  405d36:	f7ff ffaa 	bl	405c8e <L_shift>
  405d3a:	42bc      	cmp	r4, r7
  405d3c:	d923      	bls.n	405d86 <__hexnan+0xae>
  405d3e:	2300      	movs	r3, #0
  405d40:	f1a4 0804 	sub.w	r8, r4, #4
  405d44:	f844 3c04 	str.w	r3, [r4, #-4]
  405d48:	f8cd 9000 	str.w	r9, [sp]
  405d4c:	4644      	mov	r4, r8
  405d4e:	461a      	mov	r2, r3
  405d50:	e7da      	b.n	405d08 <__hexnan+0x30>
  405d52:	2929      	cmp	r1, #41	; 0x29
  405d54:	d148      	bne.n	405de8 <__hexnan+0x110>
  405d56:	f10b 0301 	add.w	r3, fp, #1
  405d5a:	f8ca 3000 	str.w	r3, [sl]
  405d5e:	e014      	b.n	405d8a <__hexnan+0xb2>
  405d60:	3201      	adds	r2, #1
  405d62:	2a08      	cmp	r2, #8
  405d64:	f109 0901 	add.w	r9, r9, #1
  405d68:	dd06      	ble.n	405d78 <__hexnan+0xa0>
  405d6a:	42bc      	cmp	r4, r7
  405d6c:	d9cc      	bls.n	405d08 <__hexnan+0x30>
  405d6e:	2300      	movs	r3, #0
  405d70:	f844 3c04 	str.w	r3, [r4, #-4]
  405d74:	2201      	movs	r2, #1
  405d76:	3c04      	subs	r4, #4
  405d78:	6821      	ldr	r1, [r4, #0]
  405d7a:	f000 000f 	and.w	r0, r0, #15
  405d7e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
  405d82:	6020      	str	r0, [r4, #0]
  405d84:	e7c0      	b.n	405d08 <__hexnan+0x30>
  405d86:	2208      	movs	r2, #8
  405d88:	e7be      	b.n	405d08 <__hexnan+0x30>
  405d8a:	f1b9 0f00 	cmp.w	r9, #0
  405d8e:	d02b      	beq.n	405de8 <__hexnan+0x110>
  405d90:	4544      	cmp	r4, r8
  405d92:	d205      	bcs.n	405da0 <__hexnan+0xc8>
  405d94:	2a07      	cmp	r2, #7
  405d96:	dc03      	bgt.n	405da0 <__hexnan+0xc8>
  405d98:	4641      	mov	r1, r8
  405d9a:	4620      	mov	r0, r4
  405d9c:	f7ff ff77 	bl	405c8e <L_shift>
  405da0:	42bc      	cmp	r4, r7
  405da2:	d90c      	bls.n	405dbe <__hexnan+0xe6>
  405da4:	463b      	mov	r3, r7
  405da6:	f854 2b04 	ldr.w	r2, [r4], #4
  405daa:	f843 2b04 	str.w	r2, [r3], #4
  405dae:	42a5      	cmp	r5, r4
  405db0:	d2f9      	bcs.n	405da6 <__hexnan+0xce>
  405db2:	2200      	movs	r2, #0
  405db4:	f843 2b04 	str.w	r2, [r3], #4
  405db8:	429d      	cmp	r5, r3
  405dba:	d2fb      	bcs.n	405db4 <__hexnan+0xdc>
  405dbc:	e00b      	b.n	405dd6 <__hexnan+0xfe>
  405dbe:	9b01      	ldr	r3, [sp, #4]
  405dc0:	b14b      	cbz	r3, 405dd6 <__hexnan+0xfe>
  405dc2:	f1c3 0220 	rsb	r2, r3, #32
  405dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  405dca:	40d3      	lsrs	r3, r2
  405dcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
  405dd0:	4013      	ands	r3, r2
  405dd2:	f846 3c04 	str.w	r3, [r6, #-4]
  405dd6:	682b      	ldr	r3, [r5, #0]
  405dd8:	b943      	cbnz	r3, 405dec <__hexnan+0x114>
  405dda:	42bd      	cmp	r5, r7
  405ddc:	d102      	bne.n	405de4 <__hexnan+0x10c>
  405dde:	2301      	movs	r3, #1
  405de0:	602b      	str	r3, [r5, #0]
  405de2:	e003      	b.n	405dec <__hexnan+0x114>
  405de4:	3d04      	subs	r5, #4
  405de6:	e7f6      	b.n	405dd6 <__hexnan+0xfe>
  405de8:	2004      	movs	r0, #4
  405dea:	e000      	b.n	405dee <__hexnan+0x116>
  405dec:	2005      	movs	r0, #5
  405dee:	b005      	add	sp, #20
  405df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405df4 <__locale_ctype_ptr_l>:
  405df4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  405df8:	4770      	bx	lr

00405dfa <__localeconv_l>:
  405dfa:	30f0      	adds	r0, #240	; 0xf0
  405dfc:	4770      	bx	lr
	...

00405e00 <_localeconv_r>:
  405e00:	4b04      	ldr	r3, [pc, #16]	; (405e14 <_localeconv_r+0x14>)
  405e02:	681b      	ldr	r3, [r3, #0]
  405e04:	6a18      	ldr	r0, [r3, #32]
  405e06:	4b04      	ldr	r3, [pc, #16]	; (405e18 <_localeconv_r+0x18>)
  405e08:	2800      	cmp	r0, #0
  405e0a:	bf08      	it	eq
  405e0c:	4618      	moveq	r0, r3
  405e0e:	30f0      	adds	r0, #240	; 0xf0
  405e10:	4770      	bx	lr
  405e12:	bf00      	nop
  405e14:	20000078 	.word	0x20000078
  405e18:	2000007c 	.word	0x2000007c

00405e1c <__swhatbuf_r>:
  405e1c:	b570      	push	{r4, r5, r6, lr}
  405e1e:	460e      	mov	r6, r1
  405e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405e24:	2900      	cmp	r1, #0
  405e26:	b090      	sub	sp, #64	; 0x40
  405e28:	4614      	mov	r4, r2
  405e2a:	461d      	mov	r5, r3
  405e2c:	da06      	bge.n	405e3c <__swhatbuf_r+0x20>
  405e2e:	2300      	movs	r3, #0
  405e30:	602b      	str	r3, [r5, #0]
  405e32:	89b3      	ldrh	r3, [r6, #12]
  405e34:	061a      	lsls	r2, r3, #24
  405e36:	d50e      	bpl.n	405e56 <__swhatbuf_r+0x3a>
  405e38:	2340      	movs	r3, #64	; 0x40
  405e3a:	e00e      	b.n	405e5a <__swhatbuf_r+0x3e>
  405e3c:	aa01      	add	r2, sp, #4
  405e3e:	f000 ff37 	bl	406cb0 <_fstat_r>
  405e42:	2800      	cmp	r0, #0
  405e44:	dbf3      	blt.n	405e2e <__swhatbuf_r+0x12>
  405e46:	9a02      	ldr	r2, [sp, #8]
  405e48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405e4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  405e50:	425a      	negs	r2, r3
  405e52:	415a      	adcs	r2, r3
  405e54:	602a      	str	r2, [r5, #0]
  405e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405e5a:	2000      	movs	r0, #0
  405e5c:	6023      	str	r3, [r4, #0]
  405e5e:	b010      	add	sp, #64	; 0x40
  405e60:	bd70      	pop	{r4, r5, r6, pc}
	...

00405e64 <__smakebuf_r>:
  405e64:	898b      	ldrh	r3, [r1, #12]
  405e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
  405e68:	079e      	lsls	r6, r3, #30
  405e6a:	4605      	mov	r5, r0
  405e6c:	460c      	mov	r4, r1
  405e6e:	d410      	bmi.n	405e92 <__smakebuf_r+0x2e>
  405e70:	ab01      	add	r3, sp, #4
  405e72:	466a      	mov	r2, sp
  405e74:	f7ff ffd2 	bl	405e1c <__swhatbuf_r>
  405e78:	9900      	ldr	r1, [sp, #0]
  405e7a:	4606      	mov	r6, r0
  405e7c:	4628      	mov	r0, r5
  405e7e:	f000 fcdd 	bl	40683c <_malloc_r>
  405e82:	b968      	cbnz	r0, 405ea0 <__smakebuf_r+0x3c>
  405e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e88:	059a      	lsls	r2, r3, #22
  405e8a:	d422      	bmi.n	405ed2 <__smakebuf_r+0x6e>
  405e8c:	f043 0302 	orr.w	r3, r3, #2
  405e90:	81a3      	strh	r3, [r4, #12]
  405e92:	f104 0347 	add.w	r3, r4, #71	; 0x47
  405e96:	6023      	str	r3, [r4, #0]
  405e98:	6123      	str	r3, [r4, #16]
  405e9a:	2301      	movs	r3, #1
  405e9c:	6163      	str	r3, [r4, #20]
  405e9e:	e018      	b.n	405ed2 <__smakebuf_r+0x6e>
  405ea0:	4b0d      	ldr	r3, [pc, #52]	; (405ed8 <__smakebuf_r+0x74>)
  405ea2:	62ab      	str	r3, [r5, #40]	; 0x28
  405ea4:	89a3      	ldrh	r3, [r4, #12]
  405ea6:	6020      	str	r0, [r4, #0]
  405ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405eac:	81a3      	strh	r3, [r4, #12]
  405eae:	9b00      	ldr	r3, [sp, #0]
  405eb0:	6163      	str	r3, [r4, #20]
  405eb2:	9b01      	ldr	r3, [sp, #4]
  405eb4:	6120      	str	r0, [r4, #16]
  405eb6:	b14b      	cbz	r3, 405ecc <__smakebuf_r+0x68>
  405eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405ebc:	4628      	mov	r0, r5
  405ebe:	f000 ff09 	bl	406cd4 <_isatty_r>
  405ec2:	b118      	cbz	r0, 405ecc <__smakebuf_r+0x68>
  405ec4:	89a3      	ldrh	r3, [r4, #12]
  405ec6:	f043 0301 	orr.w	r3, r3, #1
  405eca:	81a3      	strh	r3, [r4, #12]
  405ecc:	89a0      	ldrh	r0, [r4, #12]
  405ece:	4330      	orrs	r0, r6
  405ed0:	81a0      	strh	r0, [r4, #12]
  405ed2:	b002      	add	sp, #8
  405ed4:	bd70      	pop	{r4, r5, r6, pc}
  405ed6:	bf00      	nop
  405ed8:	00405625 	.word	0x00405625

00405edc <malloc>:
  405edc:	4b02      	ldr	r3, [pc, #8]	; (405ee8 <malloc+0xc>)
  405ede:	4601      	mov	r1, r0
  405ee0:	6818      	ldr	r0, [r3, #0]
  405ee2:	f000 bcab 	b.w	40683c <_malloc_r>
  405ee6:	bf00      	nop
  405ee8:	20000078 	.word	0x20000078

00405eec <__ascii_mbtowc>:
  405eec:	b082      	sub	sp, #8
  405eee:	b901      	cbnz	r1, 405ef2 <__ascii_mbtowc+0x6>
  405ef0:	a901      	add	r1, sp, #4
  405ef2:	b13a      	cbz	r2, 405f04 <__ascii_mbtowc+0x18>
  405ef4:	b143      	cbz	r3, 405f08 <__ascii_mbtowc+0x1c>
  405ef6:	7813      	ldrb	r3, [r2, #0]
  405ef8:	600b      	str	r3, [r1, #0]
  405efa:	7812      	ldrb	r2, [r2, #0]
  405efc:	1c10      	adds	r0, r2, #0
  405efe:	bf18      	it	ne
  405f00:	2001      	movne	r0, #1
  405f02:	e003      	b.n	405f0c <__ascii_mbtowc+0x20>
  405f04:	4610      	mov	r0, r2
  405f06:	e001      	b.n	405f0c <__ascii_mbtowc+0x20>
  405f08:	f06f 0001 	mvn.w	r0, #1
  405f0c:	b002      	add	sp, #8
  405f0e:	4770      	bx	lr

00405f10 <memchr>:
  405f10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f14:	2a10      	cmp	r2, #16
  405f16:	db2b      	blt.n	405f70 <memchr+0x60>
  405f18:	f010 0f07 	tst.w	r0, #7
  405f1c:	d008      	beq.n	405f30 <memchr+0x20>
  405f1e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f22:	3a01      	subs	r2, #1
  405f24:	428b      	cmp	r3, r1
  405f26:	d02d      	beq.n	405f84 <memchr+0x74>
  405f28:	f010 0f07 	tst.w	r0, #7
  405f2c:	b342      	cbz	r2, 405f80 <memchr+0x70>
  405f2e:	d1f6      	bne.n	405f1e <memchr+0xe>
  405f30:	b4f0      	push	{r4, r5, r6, r7}
  405f32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405f36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405f3a:	f022 0407 	bic.w	r4, r2, #7
  405f3e:	f07f 0700 	mvns.w	r7, #0
  405f42:	2300      	movs	r3, #0
  405f44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405f48:	3c08      	subs	r4, #8
  405f4a:	ea85 0501 	eor.w	r5, r5, r1
  405f4e:	ea86 0601 	eor.w	r6, r6, r1
  405f52:	fa85 f547 	uadd8	r5, r5, r7
  405f56:	faa3 f587 	sel	r5, r3, r7
  405f5a:	fa86 f647 	uadd8	r6, r6, r7
  405f5e:	faa5 f687 	sel	r6, r5, r7
  405f62:	b98e      	cbnz	r6, 405f88 <memchr+0x78>
  405f64:	d1ee      	bne.n	405f44 <memchr+0x34>
  405f66:	bcf0      	pop	{r4, r5, r6, r7}
  405f68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f6c:	f002 0207 	and.w	r2, r2, #7
  405f70:	b132      	cbz	r2, 405f80 <memchr+0x70>
  405f72:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f76:	3a01      	subs	r2, #1
  405f78:	ea83 0301 	eor.w	r3, r3, r1
  405f7c:	b113      	cbz	r3, 405f84 <memchr+0x74>
  405f7e:	d1f8      	bne.n	405f72 <memchr+0x62>
  405f80:	2000      	movs	r0, #0
  405f82:	4770      	bx	lr
  405f84:	3801      	subs	r0, #1
  405f86:	4770      	bx	lr
  405f88:	2d00      	cmp	r5, #0
  405f8a:	bf06      	itte	eq
  405f8c:	4635      	moveq	r5, r6
  405f8e:	3803      	subeq	r0, #3
  405f90:	3807      	subne	r0, #7
  405f92:	f015 0f01 	tst.w	r5, #1
  405f96:	d107      	bne.n	405fa8 <memchr+0x98>
  405f98:	3001      	adds	r0, #1
  405f9a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405f9e:	bf02      	ittt	eq
  405fa0:	3001      	addeq	r0, #1
  405fa2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405fa6:	3001      	addeq	r0, #1
  405fa8:	bcf0      	pop	{r4, r5, r6, r7}
  405faa:	3801      	subs	r0, #1
  405fac:	4770      	bx	lr
  405fae:	bf00      	nop

00405fb0 <_Balloc>:
  405fb0:	b570      	push	{r4, r5, r6, lr}
  405fb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405fb4:	4604      	mov	r4, r0
  405fb6:	460e      	mov	r6, r1
  405fb8:	b93d      	cbnz	r5, 405fca <_Balloc+0x1a>
  405fba:	2010      	movs	r0, #16
  405fbc:	f7ff ff8e 	bl	405edc <malloc>
  405fc0:	6260      	str	r0, [r4, #36]	; 0x24
  405fc2:	6045      	str	r5, [r0, #4]
  405fc4:	6085      	str	r5, [r0, #8]
  405fc6:	6005      	str	r5, [r0, #0]
  405fc8:	60c5      	str	r5, [r0, #12]
  405fca:	6a65      	ldr	r5, [r4, #36]	; 0x24
  405fcc:	68eb      	ldr	r3, [r5, #12]
  405fce:	b143      	cbz	r3, 405fe2 <_Balloc+0x32>
  405fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405fd2:	68db      	ldr	r3, [r3, #12]
  405fd4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405fd8:	b178      	cbz	r0, 405ffa <_Balloc+0x4a>
  405fda:	6802      	ldr	r2, [r0, #0]
  405fdc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  405fe0:	e017      	b.n	406012 <_Balloc+0x62>
  405fe2:	2221      	movs	r2, #33	; 0x21
  405fe4:	2104      	movs	r1, #4
  405fe6:	4620      	mov	r0, r4
  405fe8:	f000 fbcc 	bl	406784 <_calloc_r>
  405fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405fee:	60e8      	str	r0, [r5, #12]
  405ff0:	68db      	ldr	r3, [r3, #12]
  405ff2:	2b00      	cmp	r3, #0
  405ff4:	d1ec      	bne.n	405fd0 <_Balloc+0x20>
  405ff6:	2000      	movs	r0, #0
  405ff8:	bd70      	pop	{r4, r5, r6, pc}
  405ffa:	2101      	movs	r1, #1
  405ffc:	fa01 f506 	lsl.w	r5, r1, r6
  406000:	1d6a      	adds	r2, r5, #5
  406002:	0092      	lsls	r2, r2, #2
  406004:	4620      	mov	r0, r4
  406006:	f000 fbbd 	bl	406784 <_calloc_r>
  40600a:	2800      	cmp	r0, #0
  40600c:	d0f3      	beq.n	405ff6 <_Balloc+0x46>
  40600e:	6046      	str	r6, [r0, #4]
  406010:	6085      	str	r5, [r0, #8]
  406012:	2300      	movs	r3, #0
  406014:	6103      	str	r3, [r0, #16]
  406016:	60c3      	str	r3, [r0, #12]
  406018:	bd70      	pop	{r4, r5, r6, pc}

0040601a <_Bfree>:
  40601a:	b570      	push	{r4, r5, r6, lr}
  40601c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40601e:	4606      	mov	r6, r0
  406020:	460d      	mov	r5, r1
  406022:	b93c      	cbnz	r4, 406034 <_Bfree+0x1a>
  406024:	2010      	movs	r0, #16
  406026:	f7ff ff59 	bl	405edc <malloc>
  40602a:	6270      	str	r0, [r6, #36]	; 0x24
  40602c:	6044      	str	r4, [r0, #4]
  40602e:	6084      	str	r4, [r0, #8]
  406030:	6004      	str	r4, [r0, #0]
  406032:	60c4      	str	r4, [r0, #12]
  406034:	b13d      	cbz	r5, 406046 <_Bfree+0x2c>
  406036:	6a73      	ldr	r3, [r6, #36]	; 0x24
  406038:	686a      	ldr	r2, [r5, #4]
  40603a:	68db      	ldr	r3, [r3, #12]
  40603c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406040:	6029      	str	r1, [r5, #0]
  406042:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406046:	bd70      	pop	{r4, r5, r6, pc}

00406048 <__multadd>:
  406048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40604c:	690d      	ldr	r5, [r1, #16]
  40604e:	461f      	mov	r7, r3
  406050:	4606      	mov	r6, r0
  406052:	460c      	mov	r4, r1
  406054:	f101 0e14 	add.w	lr, r1, #20
  406058:	2300      	movs	r3, #0
  40605a:	f8de 0000 	ldr.w	r0, [lr]
  40605e:	b281      	uxth	r1, r0
  406060:	fb02 7101 	mla	r1, r2, r1, r7
  406064:	0c0f      	lsrs	r7, r1, #16
  406066:	0c00      	lsrs	r0, r0, #16
  406068:	fb02 7000 	mla	r0, r2, r0, r7
  40606c:	b289      	uxth	r1, r1
  40606e:	3301      	adds	r3, #1
  406070:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  406074:	429d      	cmp	r5, r3
  406076:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40607a:	f84e 1b04 	str.w	r1, [lr], #4
  40607e:	dcec      	bgt.n	40605a <__multadd+0x12>
  406080:	b1d7      	cbz	r7, 4060b8 <__multadd+0x70>
  406082:	68a3      	ldr	r3, [r4, #8]
  406084:	429d      	cmp	r5, r3
  406086:	db12      	blt.n	4060ae <__multadd+0x66>
  406088:	6861      	ldr	r1, [r4, #4]
  40608a:	4630      	mov	r0, r6
  40608c:	3101      	adds	r1, #1
  40608e:	f7ff ff8f 	bl	405fb0 <_Balloc>
  406092:	6922      	ldr	r2, [r4, #16]
  406094:	3202      	adds	r2, #2
  406096:	f104 010c 	add.w	r1, r4, #12
  40609a:	4680      	mov	r8, r0
  40609c:	0092      	lsls	r2, r2, #2
  40609e:	300c      	adds	r0, #12
  4060a0:	f7fc fe62 	bl	402d68 <memcpy>
  4060a4:	4621      	mov	r1, r4
  4060a6:	4630      	mov	r0, r6
  4060a8:	f7ff ffb7 	bl	40601a <_Bfree>
  4060ac:	4644      	mov	r4, r8
  4060ae:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4060b2:	3501      	adds	r5, #1
  4060b4:	615f      	str	r7, [r3, #20]
  4060b6:	6125      	str	r5, [r4, #16]
  4060b8:	4620      	mov	r0, r4
  4060ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004060be <__s2b>:
  4060be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4060c2:	460c      	mov	r4, r1
  4060c4:	4615      	mov	r5, r2
  4060c6:	461f      	mov	r7, r3
  4060c8:	2209      	movs	r2, #9
  4060ca:	3308      	adds	r3, #8
  4060cc:	4606      	mov	r6, r0
  4060ce:	fb93 f3f2 	sdiv	r3, r3, r2
  4060d2:	2100      	movs	r1, #0
  4060d4:	2201      	movs	r2, #1
  4060d6:	429a      	cmp	r2, r3
  4060d8:	da02      	bge.n	4060e0 <__s2b+0x22>
  4060da:	0052      	lsls	r2, r2, #1
  4060dc:	3101      	adds	r1, #1
  4060de:	e7fa      	b.n	4060d6 <__s2b+0x18>
  4060e0:	4630      	mov	r0, r6
  4060e2:	f7ff ff65 	bl	405fb0 <_Balloc>
  4060e6:	9b08      	ldr	r3, [sp, #32]
  4060e8:	6143      	str	r3, [r0, #20]
  4060ea:	2d09      	cmp	r5, #9
  4060ec:	f04f 0301 	mov.w	r3, #1
  4060f0:	6103      	str	r3, [r0, #16]
  4060f2:	dd11      	ble.n	406118 <__s2b+0x5a>
  4060f4:	f104 0809 	add.w	r8, r4, #9
  4060f8:	46c1      	mov	r9, r8
  4060fa:	442c      	add	r4, r5
  4060fc:	f819 3b01 	ldrb.w	r3, [r9], #1
  406100:	4601      	mov	r1, r0
  406102:	3b30      	subs	r3, #48	; 0x30
  406104:	220a      	movs	r2, #10
  406106:	4630      	mov	r0, r6
  406108:	f7ff ff9e 	bl	406048 <__multadd>
  40610c:	45a1      	cmp	r9, r4
  40610e:	d1f5      	bne.n	4060fc <__s2b+0x3e>
  406110:	eb08 0405 	add.w	r4, r8, r5
  406114:	3c08      	subs	r4, #8
  406116:	e001      	b.n	40611c <__s2b+0x5e>
  406118:	340a      	adds	r4, #10
  40611a:	2509      	movs	r5, #9
  40611c:	1b2d      	subs	r5, r5, r4
  40611e:	1963      	adds	r3, r4, r5
  406120:	429f      	cmp	r7, r3
  406122:	dd08      	ble.n	406136 <__s2b+0x78>
  406124:	f814 3b01 	ldrb.w	r3, [r4], #1
  406128:	4601      	mov	r1, r0
  40612a:	3b30      	subs	r3, #48	; 0x30
  40612c:	220a      	movs	r2, #10
  40612e:	4630      	mov	r0, r6
  406130:	f7ff ff8a 	bl	406048 <__multadd>
  406134:	e7f3      	b.n	40611e <__s2b+0x60>
  406136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040613a <__hi0bits>:
  40613a:	0c03      	lsrs	r3, r0, #16
  40613c:	041b      	lsls	r3, r3, #16
  40613e:	b913      	cbnz	r3, 406146 <__hi0bits+0xc>
  406140:	0400      	lsls	r0, r0, #16
  406142:	2310      	movs	r3, #16
  406144:	e000      	b.n	406148 <__hi0bits+0xe>
  406146:	2300      	movs	r3, #0
  406148:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40614c:	bf04      	itt	eq
  40614e:	0200      	lsleq	r0, r0, #8
  406150:	3308      	addeq	r3, #8
  406152:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  406156:	bf04      	itt	eq
  406158:	0100      	lsleq	r0, r0, #4
  40615a:	3304      	addeq	r3, #4
  40615c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  406160:	bf04      	itt	eq
  406162:	0080      	lsleq	r0, r0, #2
  406164:	3302      	addeq	r3, #2
  406166:	2800      	cmp	r0, #0
  406168:	db03      	blt.n	406172 <__hi0bits+0x38>
  40616a:	0042      	lsls	r2, r0, #1
  40616c:	d503      	bpl.n	406176 <__hi0bits+0x3c>
  40616e:	1c58      	adds	r0, r3, #1
  406170:	4770      	bx	lr
  406172:	4618      	mov	r0, r3
  406174:	4770      	bx	lr
  406176:	2020      	movs	r0, #32
  406178:	4770      	bx	lr

0040617a <__lo0bits>:
  40617a:	6803      	ldr	r3, [r0, #0]
  40617c:	f013 0207 	ands.w	r2, r3, #7
  406180:	d00b      	beq.n	40619a <__lo0bits+0x20>
  406182:	07d9      	lsls	r1, r3, #31
  406184:	d422      	bmi.n	4061cc <__lo0bits+0x52>
  406186:	079a      	lsls	r2, r3, #30
  406188:	bf4b      	itete	mi
  40618a:	085b      	lsrmi	r3, r3, #1
  40618c:	089b      	lsrpl	r3, r3, #2
  40618e:	6003      	strmi	r3, [r0, #0]
  406190:	6003      	strpl	r3, [r0, #0]
  406192:	bf4c      	ite	mi
  406194:	2001      	movmi	r0, #1
  406196:	2002      	movpl	r0, #2
  406198:	4770      	bx	lr
  40619a:	b299      	uxth	r1, r3
  40619c:	b909      	cbnz	r1, 4061a2 <__lo0bits+0x28>
  40619e:	0c1b      	lsrs	r3, r3, #16
  4061a0:	2210      	movs	r2, #16
  4061a2:	f013 0fff 	tst.w	r3, #255	; 0xff
  4061a6:	bf04      	itt	eq
  4061a8:	0a1b      	lsreq	r3, r3, #8
  4061aa:	3208      	addeq	r2, #8
  4061ac:	0719      	lsls	r1, r3, #28
  4061ae:	bf04      	itt	eq
  4061b0:	091b      	lsreq	r3, r3, #4
  4061b2:	3204      	addeq	r2, #4
  4061b4:	0799      	lsls	r1, r3, #30
  4061b6:	bf04      	itt	eq
  4061b8:	089b      	lsreq	r3, r3, #2
  4061ba:	3202      	addeq	r2, #2
  4061bc:	07d9      	lsls	r1, r3, #31
  4061be:	d402      	bmi.n	4061c6 <__lo0bits+0x4c>
  4061c0:	085b      	lsrs	r3, r3, #1
  4061c2:	d005      	beq.n	4061d0 <__lo0bits+0x56>
  4061c4:	3201      	adds	r2, #1
  4061c6:	6003      	str	r3, [r0, #0]
  4061c8:	4610      	mov	r0, r2
  4061ca:	4770      	bx	lr
  4061cc:	2000      	movs	r0, #0
  4061ce:	4770      	bx	lr
  4061d0:	2020      	movs	r0, #32
  4061d2:	4770      	bx	lr

004061d4 <__i2b>:
  4061d4:	b510      	push	{r4, lr}
  4061d6:	460c      	mov	r4, r1
  4061d8:	2101      	movs	r1, #1
  4061da:	f7ff fee9 	bl	405fb0 <_Balloc>
  4061de:	2201      	movs	r2, #1
  4061e0:	6144      	str	r4, [r0, #20]
  4061e2:	6102      	str	r2, [r0, #16]
  4061e4:	bd10      	pop	{r4, pc}

004061e6 <__multiply>:
  4061e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061ea:	4614      	mov	r4, r2
  4061ec:	690a      	ldr	r2, [r1, #16]
  4061ee:	6923      	ldr	r3, [r4, #16]
  4061f0:	429a      	cmp	r2, r3
  4061f2:	bfb8      	it	lt
  4061f4:	460b      	movlt	r3, r1
  4061f6:	4688      	mov	r8, r1
  4061f8:	bfbc      	itt	lt
  4061fa:	46a0      	movlt	r8, r4
  4061fc:	461c      	movlt	r4, r3
  4061fe:	f8d8 7010 	ldr.w	r7, [r8, #16]
  406202:	f8d4 9010 	ldr.w	r9, [r4, #16]
  406206:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40620a:	f8d8 1004 	ldr.w	r1, [r8, #4]
  40620e:	eb07 0609 	add.w	r6, r7, r9
  406212:	429e      	cmp	r6, r3
  406214:	bfc8      	it	gt
  406216:	3101      	addgt	r1, #1
  406218:	f7ff feca 	bl	405fb0 <_Balloc>
  40621c:	f100 0514 	add.w	r5, r0, #20
  406220:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  406224:	462b      	mov	r3, r5
  406226:	2200      	movs	r2, #0
  406228:	4563      	cmp	r3, ip
  40622a:	d202      	bcs.n	406232 <__multiply+0x4c>
  40622c:	f843 2b04 	str.w	r2, [r3], #4
  406230:	e7fa      	b.n	406228 <__multiply+0x42>
  406232:	f104 0214 	add.w	r2, r4, #20
  406236:	f108 0114 	add.w	r1, r8, #20
  40623a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  40623e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  406242:	9300      	str	r3, [sp, #0]
  406244:	9b00      	ldr	r3, [sp, #0]
  406246:	9201      	str	r2, [sp, #4]
  406248:	4293      	cmp	r3, r2
  40624a:	d957      	bls.n	4062fc <__multiply+0x116>
  40624c:	f8b2 b000 	ldrh.w	fp, [r2]
  406250:	f1bb 0f00 	cmp.w	fp, #0
  406254:	d023      	beq.n	40629e <__multiply+0xb8>
  406256:	4689      	mov	r9, r1
  406258:	46ae      	mov	lr, r5
  40625a:	f04f 0800 	mov.w	r8, #0
  40625e:	f859 4b04 	ldr.w	r4, [r9], #4
  406262:	f8be a000 	ldrh.w	sl, [lr]
  406266:	b2a3      	uxth	r3, r4
  406268:	fb0b a303 	mla	r3, fp, r3, sl
  40626c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  406270:	f8de 4000 	ldr.w	r4, [lr]
  406274:	4443      	add	r3, r8
  406276:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40627a:	fb0b 840a 	mla	r4, fp, sl, r8
  40627e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  406282:	46f2      	mov	sl, lr
  406284:	b29b      	uxth	r3, r3
  406286:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40628a:	454f      	cmp	r7, r9
  40628c:	ea4f 4814 	mov.w	r8, r4, lsr #16
  406290:	f84a 3b04 	str.w	r3, [sl], #4
  406294:	d901      	bls.n	40629a <__multiply+0xb4>
  406296:	46d6      	mov	lr, sl
  406298:	e7e1      	b.n	40625e <__multiply+0x78>
  40629a:	f8ce 8004 	str.w	r8, [lr, #4]
  40629e:	9b01      	ldr	r3, [sp, #4]
  4062a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  4062a4:	3204      	adds	r2, #4
  4062a6:	f1ba 0f00 	cmp.w	sl, #0
  4062aa:	d021      	beq.n	4062f0 <__multiply+0x10a>
  4062ac:	682b      	ldr	r3, [r5, #0]
  4062ae:	462c      	mov	r4, r5
  4062b0:	4689      	mov	r9, r1
  4062b2:	f04f 0800 	mov.w	r8, #0
  4062b6:	f8b9 e000 	ldrh.w	lr, [r9]
  4062ba:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  4062be:	fb0a be0e 	mla	lr, sl, lr, fp
  4062c2:	44f0      	add	r8, lr
  4062c4:	46a3      	mov	fp, r4
  4062c6:	b29b      	uxth	r3, r3
  4062c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4062cc:	f84b 3b04 	str.w	r3, [fp], #4
  4062d0:	f859 3b04 	ldr.w	r3, [r9], #4
  4062d4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  4062d8:	0c1b      	lsrs	r3, r3, #16
  4062da:	fb0a e303 	mla	r3, sl, r3, lr
  4062de:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  4062e2:	454f      	cmp	r7, r9
  4062e4:	ea4f 4813 	mov.w	r8, r3, lsr #16
  4062e8:	d901      	bls.n	4062ee <__multiply+0x108>
  4062ea:	465c      	mov	r4, fp
  4062ec:	e7e3      	b.n	4062b6 <__multiply+0xd0>
  4062ee:	6063      	str	r3, [r4, #4]
  4062f0:	3504      	adds	r5, #4
  4062f2:	e7a7      	b.n	406244 <__multiply+0x5e>
  4062f4:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  4062f8:	b913      	cbnz	r3, 406300 <__multiply+0x11a>
  4062fa:	3e01      	subs	r6, #1
  4062fc:	2e00      	cmp	r6, #0
  4062fe:	dcf9      	bgt.n	4062f4 <__multiply+0x10e>
  406300:	6106      	str	r6, [r0, #16]
  406302:	b003      	add	sp, #12
  406304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406308 <__pow5mult>:
  406308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40630c:	4615      	mov	r5, r2
  40630e:	f012 0203 	ands.w	r2, r2, #3
  406312:	4606      	mov	r6, r0
  406314:	460f      	mov	r7, r1
  406316:	d007      	beq.n	406328 <__pow5mult+0x20>
  406318:	3a01      	subs	r2, #1
  40631a:	4c21      	ldr	r4, [pc, #132]	; (4063a0 <__pow5mult+0x98>)
  40631c:	2300      	movs	r3, #0
  40631e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  406322:	f7ff fe91 	bl	406048 <__multadd>
  406326:	4607      	mov	r7, r0
  406328:	10ad      	asrs	r5, r5, #2
  40632a:	d036      	beq.n	40639a <__pow5mult+0x92>
  40632c:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40632e:	b93c      	cbnz	r4, 406340 <__pow5mult+0x38>
  406330:	2010      	movs	r0, #16
  406332:	f7ff fdd3 	bl	405edc <malloc>
  406336:	6270      	str	r0, [r6, #36]	; 0x24
  406338:	6044      	str	r4, [r0, #4]
  40633a:	6084      	str	r4, [r0, #8]
  40633c:	6004      	str	r4, [r0, #0]
  40633e:	60c4      	str	r4, [r0, #12]
  406340:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  406344:	f8d8 4008 	ldr.w	r4, [r8, #8]
  406348:	b94c      	cbnz	r4, 40635e <__pow5mult+0x56>
  40634a:	f240 2171 	movw	r1, #625	; 0x271
  40634e:	4630      	mov	r0, r6
  406350:	f7ff ff40 	bl	4061d4 <__i2b>
  406354:	2300      	movs	r3, #0
  406356:	f8c8 0008 	str.w	r0, [r8, #8]
  40635a:	4604      	mov	r4, r0
  40635c:	6003      	str	r3, [r0, #0]
  40635e:	f04f 0800 	mov.w	r8, #0
  406362:	07eb      	lsls	r3, r5, #31
  406364:	d50a      	bpl.n	40637c <__pow5mult+0x74>
  406366:	4639      	mov	r1, r7
  406368:	4622      	mov	r2, r4
  40636a:	4630      	mov	r0, r6
  40636c:	f7ff ff3b 	bl	4061e6 <__multiply>
  406370:	4639      	mov	r1, r7
  406372:	4681      	mov	r9, r0
  406374:	4630      	mov	r0, r6
  406376:	f7ff fe50 	bl	40601a <_Bfree>
  40637a:	464f      	mov	r7, r9
  40637c:	106d      	asrs	r5, r5, #1
  40637e:	d00c      	beq.n	40639a <__pow5mult+0x92>
  406380:	6820      	ldr	r0, [r4, #0]
  406382:	b108      	cbz	r0, 406388 <__pow5mult+0x80>
  406384:	4604      	mov	r4, r0
  406386:	e7ec      	b.n	406362 <__pow5mult+0x5a>
  406388:	4622      	mov	r2, r4
  40638a:	4621      	mov	r1, r4
  40638c:	4630      	mov	r0, r6
  40638e:	f7ff ff2a 	bl	4061e6 <__multiply>
  406392:	6020      	str	r0, [r4, #0]
  406394:	f8c0 8000 	str.w	r8, [r0]
  406398:	e7f4      	b.n	406384 <__pow5mult+0x7c>
  40639a:	4638      	mov	r0, r7
  40639c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4063a0:	004083c8 	.word	0x004083c8

004063a4 <__lshift>:
  4063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4063a8:	460c      	mov	r4, r1
  4063aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4063ae:	6926      	ldr	r6, [r4, #16]
  4063b0:	6849      	ldr	r1, [r1, #4]
  4063b2:	68a3      	ldr	r3, [r4, #8]
  4063b4:	4456      	add	r6, sl
  4063b6:	4607      	mov	r7, r0
  4063b8:	4691      	mov	r9, r2
  4063ba:	1c75      	adds	r5, r6, #1
  4063bc:	42ab      	cmp	r3, r5
  4063be:	da02      	bge.n	4063c6 <__lshift+0x22>
  4063c0:	3101      	adds	r1, #1
  4063c2:	005b      	lsls	r3, r3, #1
  4063c4:	e7fa      	b.n	4063bc <__lshift+0x18>
  4063c6:	4638      	mov	r0, r7
  4063c8:	f7ff fdf2 	bl	405fb0 <_Balloc>
  4063cc:	2300      	movs	r3, #0
  4063ce:	4680      	mov	r8, r0
  4063d0:	f100 0114 	add.w	r1, r0, #20
  4063d4:	461a      	mov	r2, r3
  4063d6:	4553      	cmp	r3, sl
  4063d8:	da03      	bge.n	4063e2 <__lshift+0x3e>
  4063da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4063de:	3301      	adds	r3, #1
  4063e0:	e7f9      	b.n	4063d6 <__lshift+0x32>
  4063e2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  4063e6:	6920      	ldr	r0, [r4, #16]
  4063e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4063ec:	f019 091f 	ands.w	r9, r9, #31
  4063f0:	f104 0114 	add.w	r1, r4, #20
  4063f4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4063f8:	d014      	beq.n	406424 <__lshift+0x80>
  4063fa:	f1c9 0c20 	rsb	ip, r9, #32
  4063fe:	2200      	movs	r2, #0
  406400:	6808      	ldr	r0, [r1, #0]
  406402:	fa00 f009 	lsl.w	r0, r0, r9
  406406:	4302      	orrs	r2, r0
  406408:	469a      	mov	sl, r3
  40640a:	f843 2b04 	str.w	r2, [r3], #4
  40640e:	f851 2b04 	ldr.w	r2, [r1], #4
  406412:	458e      	cmp	lr, r1
  406414:	fa22 f20c 	lsr.w	r2, r2, ip
  406418:	d8f2      	bhi.n	406400 <__lshift+0x5c>
  40641a:	f8ca 2004 	str.w	r2, [sl, #4]
  40641e:	b142      	cbz	r2, 406432 <__lshift+0x8e>
  406420:	1cb5      	adds	r5, r6, #2
  406422:	e006      	b.n	406432 <__lshift+0x8e>
  406424:	3b04      	subs	r3, #4
  406426:	f851 2b04 	ldr.w	r2, [r1], #4
  40642a:	f843 2f04 	str.w	r2, [r3, #4]!
  40642e:	458e      	cmp	lr, r1
  406430:	d8f9      	bhi.n	406426 <__lshift+0x82>
  406432:	3d01      	subs	r5, #1
  406434:	4638      	mov	r0, r7
  406436:	f8c8 5010 	str.w	r5, [r8, #16]
  40643a:	4621      	mov	r1, r4
  40643c:	f7ff fded 	bl	40601a <_Bfree>
  406440:	4640      	mov	r0, r8
  406442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00406446 <__mcmp>:
  406446:	6903      	ldr	r3, [r0, #16]
  406448:	690a      	ldr	r2, [r1, #16]
  40644a:	1a9b      	subs	r3, r3, r2
  40644c:	b510      	push	{r4, lr}
  40644e:	d111      	bne.n	406474 <__mcmp+0x2e>
  406450:	0092      	lsls	r2, r2, #2
  406452:	3014      	adds	r0, #20
  406454:	3114      	adds	r1, #20
  406456:	1883      	adds	r3, r0, r2
  406458:	440a      	add	r2, r1
  40645a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40645e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  406462:	428c      	cmp	r4, r1
  406464:	d002      	beq.n	40646c <__mcmp+0x26>
  406466:	d307      	bcc.n	406478 <__mcmp+0x32>
  406468:	2001      	movs	r0, #1
  40646a:	bd10      	pop	{r4, pc}
  40646c:	4298      	cmp	r0, r3
  40646e:	d3f4      	bcc.n	40645a <__mcmp+0x14>
  406470:	2000      	movs	r0, #0
  406472:	bd10      	pop	{r4, pc}
  406474:	4618      	mov	r0, r3
  406476:	bd10      	pop	{r4, pc}
  406478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40647c:	bd10      	pop	{r4, pc}

0040647e <__mdiff>:
  40647e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406482:	460c      	mov	r4, r1
  406484:	4607      	mov	r7, r0
  406486:	4611      	mov	r1, r2
  406488:	4620      	mov	r0, r4
  40648a:	4615      	mov	r5, r2
  40648c:	f7ff ffdb 	bl	406446 <__mcmp>
  406490:	1e06      	subs	r6, r0, #0
  406492:	d108      	bne.n	4064a6 <__mdiff+0x28>
  406494:	4631      	mov	r1, r6
  406496:	4638      	mov	r0, r7
  406498:	f7ff fd8a 	bl	405fb0 <_Balloc>
  40649c:	2301      	movs	r3, #1
  40649e:	6103      	str	r3, [r0, #16]
  4064a0:	6146      	str	r6, [r0, #20]
  4064a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4064a6:	bfbc      	itt	lt
  4064a8:	4623      	movlt	r3, r4
  4064aa:	462c      	movlt	r4, r5
  4064ac:	4638      	mov	r0, r7
  4064ae:	6861      	ldr	r1, [r4, #4]
  4064b0:	bfba      	itte	lt
  4064b2:	461d      	movlt	r5, r3
  4064b4:	2601      	movlt	r6, #1
  4064b6:	2600      	movge	r6, #0
  4064b8:	f7ff fd7a 	bl	405fb0 <_Balloc>
  4064bc:	692b      	ldr	r3, [r5, #16]
  4064be:	60c6      	str	r6, [r0, #12]
  4064c0:	6926      	ldr	r6, [r4, #16]
  4064c2:	f105 0914 	add.w	r9, r5, #20
  4064c6:	3414      	adds	r4, #20
  4064c8:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  4064cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4064d0:	f100 0514 	add.w	r5, r0, #20
  4064d4:	f04f 0c00 	mov.w	ip, #0
  4064d8:	f854 3b04 	ldr.w	r3, [r4], #4
  4064dc:	f859 2b04 	ldr.w	r2, [r9], #4
  4064e0:	fa1c f183 	uxtah	r1, ip, r3
  4064e4:	fa1f fe82 	uxth.w	lr, r2
  4064e8:	0c12      	lsrs	r2, r2, #16
  4064ea:	ebce 0101 	rsb	r1, lr, r1
  4064ee:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  4064f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4064f6:	b289      	uxth	r1, r1
  4064f8:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4064fc:	45c8      	cmp	r8, r9
  4064fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  406502:	46a6      	mov	lr, r4
  406504:	f845 3b04 	str.w	r3, [r5], #4
  406508:	d8e6      	bhi.n	4064d8 <__mdiff+0x5a>
  40650a:	45be      	cmp	lr, r7
  40650c:	d20e      	bcs.n	40652c <__mdiff+0xae>
  40650e:	f85e 1b04 	ldr.w	r1, [lr], #4
  406512:	fa1c f281 	uxtah	r2, ip, r1
  406516:	1413      	asrs	r3, r2, #16
  406518:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  40651c:	b292      	uxth	r2, r2
  40651e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406522:	ea4f 4c23 	mov.w	ip, r3, asr #16
  406526:	f845 2b04 	str.w	r2, [r5], #4
  40652a:	e7ee      	b.n	40650a <__mdiff+0x8c>
  40652c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406530:	b90b      	cbnz	r3, 406536 <__mdiff+0xb8>
  406532:	3e01      	subs	r6, #1
  406534:	e7fa      	b.n	40652c <__mdiff+0xae>
  406536:	6106      	str	r6, [r0, #16]
  406538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040653c <__ulp>:
  40653c:	4b10      	ldr	r3, [pc, #64]	; (406580 <__ulp+0x44>)
  40653e:	400b      	ands	r3, r1
  406540:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  406544:	2b00      	cmp	r3, #0
  406546:	dd02      	ble.n	40654e <__ulp+0x12>
  406548:	2000      	movs	r0, #0
  40654a:	4619      	mov	r1, r3
  40654c:	4770      	bx	lr
  40654e:	425b      	negs	r3, r3
  406550:	151b      	asrs	r3, r3, #20
  406552:	2b13      	cmp	r3, #19
  406554:	f04f 0000 	mov.w	r0, #0
  406558:	f04f 0100 	mov.w	r1, #0
  40655c:	dc04      	bgt.n	406568 <__ulp+0x2c>
  40655e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  406562:	fa42 f103 	asr.w	r1, r2, r3
  406566:	4770      	bx	lr
  406568:	3b14      	subs	r3, #20
  40656a:	2b1e      	cmp	r3, #30
  40656c:	f04f 0201 	mov.w	r2, #1
  406570:	bfda      	itte	le
  406572:	f1c3 031f 	rsble	r3, r3, #31
  406576:	fa02 f303 	lslle.w	r3, r2, r3
  40657a:	4613      	movgt	r3, r2
  40657c:	4618      	mov	r0, r3
  40657e:	4770      	bx	lr
  406580:	7ff00000 	.word	0x7ff00000

00406584 <__b2d>:
  406584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406586:	6905      	ldr	r5, [r0, #16]
  406588:	f100 0614 	add.w	r6, r0, #20
  40658c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  406590:	1f2f      	subs	r7, r5, #4
  406592:	f855 4c04 	ldr.w	r4, [r5, #-4]
  406596:	4620      	mov	r0, r4
  406598:	f7ff fdcf 	bl	40613a <__hi0bits>
  40659c:	f1c0 0320 	rsb	r3, r0, #32
  4065a0:	280a      	cmp	r0, #10
  4065a2:	600b      	str	r3, [r1, #0]
  4065a4:	dc14      	bgt.n	4065d0 <__b2d+0x4c>
  4065a6:	f1c0 0e0b 	rsb	lr, r0, #11
  4065aa:	fa24 f10e 	lsr.w	r1, r4, lr
  4065ae:	42be      	cmp	r6, r7
  4065b0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
  4065b4:	bf34      	ite	cc
  4065b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  4065ba:	2100      	movcs	r1, #0
  4065bc:	3015      	adds	r0, #21
  4065be:	fa04 f000 	lsl.w	r0, r4, r0
  4065c2:	fa21 f10e 	lsr.w	r1, r1, lr
  4065c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4065ca:	ea40 0201 	orr.w	r2, r0, r1
  4065ce:	e023      	b.n	406618 <__b2d+0x94>
  4065d0:	42be      	cmp	r6, r7
  4065d2:	bf3a      	itte	cc
  4065d4:	f1a5 0708 	subcc.w	r7, r5, #8
  4065d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  4065dc:	2100      	movcs	r1, #0
  4065de:	380b      	subs	r0, #11
  4065e0:	d015      	beq.n	40660e <__b2d+0x8a>
  4065e2:	4084      	lsls	r4, r0
  4065e4:	f1c0 0520 	rsb	r5, r0, #32
  4065e8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  4065ec:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  4065f0:	42b7      	cmp	r7, r6
  4065f2:	fa21 fe05 	lsr.w	lr, r1, r5
  4065f6:	ea44 030e 	orr.w	r3, r4, lr
  4065fa:	bf8c      	ite	hi
  4065fc:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
  406600:	2400      	movls	r4, #0
  406602:	fa01 f000 	lsl.w	r0, r1, r0
  406606:	40ec      	lsrs	r4, r5
  406608:	ea40 0204 	orr.w	r2, r0, r4
  40660c:	e004      	b.n	406618 <__b2d+0x94>
  40660e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  406612:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  406616:	460a      	mov	r2, r1
  406618:	4610      	mov	r0, r2
  40661a:	4619      	mov	r1, r3
  40661c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040661e <__d2b>:
  40661e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  406622:	2101      	movs	r1, #1
  406624:	461c      	mov	r4, r3
  406626:	4690      	mov	r8, r2
  406628:	9e08      	ldr	r6, [sp, #32]
  40662a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40662c:	f7ff fcc0 	bl	405fb0 <_Balloc>
  406630:	f3c4 0213 	ubfx	r2, r4, #0, #20
  406634:	f3c4 540a 	ubfx	r4, r4, #20, #11
  406638:	4607      	mov	r7, r0
  40663a:	b10c      	cbz	r4, 406640 <__d2b+0x22>
  40663c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  406640:	9201      	str	r2, [sp, #4]
  406642:	f1b8 0f00 	cmp.w	r8, #0
  406646:	d019      	beq.n	40667c <__d2b+0x5e>
  406648:	a802      	add	r0, sp, #8
  40664a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40664e:	f7ff fd94 	bl	40617a <__lo0bits>
  406652:	9b00      	ldr	r3, [sp, #0]
  406654:	b148      	cbz	r0, 40666a <__d2b+0x4c>
  406656:	9a01      	ldr	r2, [sp, #4]
  406658:	f1c0 0120 	rsb	r1, r0, #32
  40665c:	fa02 f101 	lsl.w	r1, r2, r1
  406660:	430b      	orrs	r3, r1
  406662:	40c2      	lsrs	r2, r0
  406664:	617b      	str	r3, [r7, #20]
  406666:	9201      	str	r2, [sp, #4]
  406668:	e000      	b.n	40666c <__d2b+0x4e>
  40666a:	617b      	str	r3, [r7, #20]
  40666c:	9b01      	ldr	r3, [sp, #4]
  40666e:	61bb      	str	r3, [r7, #24]
  406670:	2b00      	cmp	r3, #0
  406672:	bf14      	ite	ne
  406674:	2102      	movne	r1, #2
  406676:	2101      	moveq	r1, #1
  406678:	6139      	str	r1, [r7, #16]
  40667a:	e007      	b.n	40668c <__d2b+0x6e>
  40667c:	a801      	add	r0, sp, #4
  40667e:	f7ff fd7c 	bl	40617a <__lo0bits>
  406682:	9b01      	ldr	r3, [sp, #4]
  406684:	617b      	str	r3, [r7, #20]
  406686:	2101      	movs	r1, #1
  406688:	6139      	str	r1, [r7, #16]
  40668a:	3020      	adds	r0, #32
  40668c:	b134      	cbz	r4, 40669c <__d2b+0x7e>
  40668e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  406692:	4404      	add	r4, r0
  406694:	6034      	str	r4, [r6, #0]
  406696:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40669a:	e009      	b.n	4066b0 <__d2b+0x92>
  40669c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  4066a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4066a4:	6030      	str	r0, [r6, #0]
  4066a6:	6918      	ldr	r0, [r3, #16]
  4066a8:	f7ff fd47 	bl	40613a <__hi0bits>
  4066ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4066b0:	6028      	str	r0, [r5, #0]
  4066b2:	4638      	mov	r0, r7
  4066b4:	b002      	add	sp, #8
  4066b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004066ba <__ratio>:
  4066ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4066be:	4688      	mov	r8, r1
  4066c0:	4669      	mov	r1, sp
  4066c2:	4681      	mov	r9, r0
  4066c4:	f7ff ff5e 	bl	406584 <__b2d>
  4066c8:	460d      	mov	r5, r1
  4066ca:	4604      	mov	r4, r0
  4066cc:	a901      	add	r1, sp, #4
  4066ce:	4640      	mov	r0, r8
  4066d0:	f7ff ff58 	bl	406584 <__b2d>
  4066d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4066d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
  4066dc:	460f      	mov	r7, r1
  4066de:	1a9a      	subs	r2, r3, r2
  4066e0:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4066e4:	1ac9      	subs	r1, r1, r3
  4066e6:	eb01 1342 	add.w	r3, r1, r2, lsl #5
  4066ea:	2b00      	cmp	r3, #0
  4066ec:	bfc8      	it	gt
  4066ee:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
  4066f2:	4606      	mov	r6, r0
  4066f4:	bfd8      	it	le
  4066f6:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
  4066fa:	4632      	mov	r2, r6
  4066fc:	463b      	mov	r3, r7
  4066fe:	4620      	mov	r0, r4
  406700:	4629      	mov	r1, r5
  406702:	f000 fdff 	bl	407304 <__aeabi_ddiv>
  406706:	b003      	add	sp, #12
  406708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040670c <__copybits>:
  40670c:	3901      	subs	r1, #1
  40670e:	b510      	push	{r4, lr}
  406710:	1149      	asrs	r1, r1, #5
  406712:	6914      	ldr	r4, [r2, #16]
  406714:	3101      	adds	r1, #1
  406716:	f102 0314 	add.w	r3, r2, #20
  40671a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40671e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  406722:	42a3      	cmp	r3, r4
  406724:	4602      	mov	r2, r0
  406726:	d204      	bcs.n	406732 <__copybits+0x26>
  406728:	f853 2b04 	ldr.w	r2, [r3], #4
  40672c:	f840 2b04 	str.w	r2, [r0], #4
  406730:	e7f7      	b.n	406722 <__copybits+0x16>
  406732:	2300      	movs	r3, #0
  406734:	428a      	cmp	r2, r1
  406736:	d202      	bcs.n	40673e <__copybits+0x32>
  406738:	f842 3b04 	str.w	r3, [r2], #4
  40673c:	e7fa      	b.n	406734 <__copybits+0x28>
  40673e:	bd10      	pop	{r4, pc}

00406740 <__any_on>:
  406740:	f100 0214 	add.w	r2, r0, #20
  406744:	6900      	ldr	r0, [r0, #16]
  406746:	114b      	asrs	r3, r1, #5
  406748:	4298      	cmp	r0, r3
  40674a:	b510      	push	{r4, lr}
  40674c:	db0c      	blt.n	406768 <__any_on+0x28>
  40674e:	dd0c      	ble.n	40676a <__any_on+0x2a>
  406750:	f011 011f 	ands.w	r1, r1, #31
  406754:	d009      	beq.n	40676a <__any_on+0x2a>
  406756:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
  40675a:	fa24 f001 	lsr.w	r0, r4, r1
  40675e:	fa00 f101 	lsl.w	r1, r0, r1
  406762:	428c      	cmp	r4, r1
  406764:	d10c      	bne.n	406780 <__any_on+0x40>
  406766:	e000      	b.n	40676a <__any_on+0x2a>
  406768:	4603      	mov	r3, r0
  40676a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40676e:	4293      	cmp	r3, r2
  406770:	d904      	bls.n	40677c <__any_on+0x3c>
  406772:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  406776:	2900      	cmp	r1, #0
  406778:	d0f9      	beq.n	40676e <__any_on+0x2e>
  40677a:	e001      	b.n	406780 <__any_on+0x40>
  40677c:	2000      	movs	r0, #0
  40677e:	bd10      	pop	{r4, pc}
  406780:	2001      	movs	r0, #1
  406782:	bd10      	pop	{r4, pc}

00406784 <_calloc_r>:
  406784:	b538      	push	{r3, r4, r5, lr}
  406786:	fb02 f401 	mul.w	r4, r2, r1
  40678a:	4621      	mov	r1, r4
  40678c:	f000 f856 	bl	40683c <_malloc_r>
  406790:	4605      	mov	r5, r0
  406792:	b118      	cbz	r0, 40679c <_calloc_r+0x18>
  406794:	4622      	mov	r2, r4
  406796:	2100      	movs	r1, #0
  406798:	f7fc faf1 	bl	402d7e <memset>
  40679c:	4628      	mov	r0, r5
  40679e:	bd38      	pop	{r3, r4, r5, pc}

004067a0 <_free_r>:
  4067a0:	b538      	push	{r3, r4, r5, lr}
  4067a2:	4605      	mov	r5, r0
  4067a4:	2900      	cmp	r1, #0
  4067a6:	d046      	beq.n	406836 <_free_r+0x96>
  4067a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4067ac:	1f0c      	subs	r4, r1, #4
  4067ae:	2b00      	cmp	r3, #0
  4067b0:	bfb8      	it	lt
  4067b2:	18e4      	addlt	r4, r4, r3
  4067b4:	f000 fab0 	bl	406d18 <__malloc_lock>
  4067b8:	4a1f      	ldr	r2, [pc, #124]	; (406838 <_free_r+0x98>)
  4067ba:	6813      	ldr	r3, [r2, #0]
  4067bc:	4611      	mov	r1, r2
  4067be:	b913      	cbnz	r3, 4067c6 <_free_r+0x26>
  4067c0:	6063      	str	r3, [r4, #4]
  4067c2:	6014      	str	r4, [r2, #0]
  4067c4:	e032      	b.n	40682c <_free_r+0x8c>
  4067c6:	42a3      	cmp	r3, r4
  4067c8:	d90e      	bls.n	4067e8 <_free_r+0x48>
  4067ca:	6822      	ldr	r2, [r4, #0]
  4067cc:	18a0      	adds	r0, r4, r2
  4067ce:	4283      	cmp	r3, r0
  4067d0:	bf04      	itt	eq
  4067d2:	6818      	ldreq	r0, [r3, #0]
  4067d4:	685b      	ldreq	r3, [r3, #4]
  4067d6:	6063      	str	r3, [r4, #4]
  4067d8:	bf04      	itt	eq
  4067da:	1812      	addeq	r2, r2, r0
  4067dc:	6022      	streq	r2, [r4, #0]
  4067de:	600c      	str	r4, [r1, #0]
  4067e0:	e024      	b.n	40682c <_free_r+0x8c>
  4067e2:	42a2      	cmp	r2, r4
  4067e4:	d803      	bhi.n	4067ee <_free_r+0x4e>
  4067e6:	4613      	mov	r3, r2
  4067e8:	685a      	ldr	r2, [r3, #4]
  4067ea:	2a00      	cmp	r2, #0
  4067ec:	d1f9      	bne.n	4067e2 <_free_r+0x42>
  4067ee:	6818      	ldr	r0, [r3, #0]
  4067f0:	1819      	adds	r1, r3, r0
  4067f2:	42a1      	cmp	r1, r4
  4067f4:	d10b      	bne.n	40680e <_free_r+0x6e>
  4067f6:	6821      	ldr	r1, [r4, #0]
  4067f8:	4401      	add	r1, r0
  4067fa:	1858      	adds	r0, r3, r1
  4067fc:	4282      	cmp	r2, r0
  4067fe:	6019      	str	r1, [r3, #0]
  406800:	d114      	bne.n	40682c <_free_r+0x8c>
  406802:	6810      	ldr	r0, [r2, #0]
  406804:	6852      	ldr	r2, [r2, #4]
  406806:	605a      	str	r2, [r3, #4]
  406808:	4401      	add	r1, r0
  40680a:	6019      	str	r1, [r3, #0]
  40680c:	e00e      	b.n	40682c <_free_r+0x8c>
  40680e:	d902      	bls.n	406816 <_free_r+0x76>
  406810:	230c      	movs	r3, #12
  406812:	602b      	str	r3, [r5, #0]
  406814:	e00a      	b.n	40682c <_free_r+0x8c>
  406816:	6821      	ldr	r1, [r4, #0]
  406818:	1860      	adds	r0, r4, r1
  40681a:	4282      	cmp	r2, r0
  40681c:	bf04      	itt	eq
  40681e:	6810      	ldreq	r0, [r2, #0]
  406820:	6852      	ldreq	r2, [r2, #4]
  406822:	6062      	str	r2, [r4, #4]
  406824:	bf04      	itt	eq
  406826:	1809      	addeq	r1, r1, r0
  406828:	6021      	streq	r1, [r4, #0]
  40682a:	605c      	str	r4, [r3, #4]
  40682c:	4628      	mov	r0, r5
  40682e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406832:	f000 ba72 	b.w	406d1a <__malloc_unlock>
  406836:	bd38      	pop	{r3, r4, r5, pc}
  406838:	200004f4 	.word	0x200004f4

0040683c <_malloc_r>:
  40683c:	b570      	push	{r4, r5, r6, lr}
  40683e:	1ccd      	adds	r5, r1, #3
  406840:	f025 0503 	bic.w	r5, r5, #3
  406844:	3508      	adds	r5, #8
  406846:	2d0c      	cmp	r5, #12
  406848:	bf38      	it	cc
  40684a:	250c      	movcc	r5, #12
  40684c:	2d00      	cmp	r5, #0
  40684e:	4606      	mov	r6, r0
  406850:	db01      	blt.n	406856 <_malloc_r+0x1a>
  406852:	42a9      	cmp	r1, r5
  406854:	d902      	bls.n	40685c <_malloc_r+0x20>
  406856:	230c      	movs	r3, #12
  406858:	6033      	str	r3, [r6, #0]
  40685a:	e046      	b.n	4068ea <_malloc_r+0xae>
  40685c:	f000 fa5c 	bl	406d18 <__malloc_lock>
  406860:	4b23      	ldr	r3, [pc, #140]	; (4068f0 <_malloc_r+0xb4>)
  406862:	681c      	ldr	r4, [r3, #0]
  406864:	461a      	mov	r2, r3
  406866:	4621      	mov	r1, r4
  406868:	b1a1      	cbz	r1, 406894 <_malloc_r+0x58>
  40686a:	680b      	ldr	r3, [r1, #0]
  40686c:	1b5b      	subs	r3, r3, r5
  40686e:	d40e      	bmi.n	40688e <_malloc_r+0x52>
  406870:	2b0b      	cmp	r3, #11
  406872:	d903      	bls.n	40687c <_malloc_r+0x40>
  406874:	600b      	str	r3, [r1, #0]
  406876:	18cc      	adds	r4, r1, r3
  406878:	50cd      	str	r5, [r1, r3]
  40687a:	e01e      	b.n	4068ba <_malloc_r+0x7e>
  40687c:	428c      	cmp	r4, r1
  40687e:	bf0d      	iteet	eq
  406880:	6863      	ldreq	r3, [r4, #4]
  406882:	684b      	ldrne	r3, [r1, #4]
  406884:	6063      	strne	r3, [r4, #4]
  406886:	6013      	streq	r3, [r2, #0]
  406888:	bf18      	it	ne
  40688a:	460c      	movne	r4, r1
  40688c:	e015      	b.n	4068ba <_malloc_r+0x7e>
  40688e:	460c      	mov	r4, r1
  406890:	6849      	ldr	r1, [r1, #4]
  406892:	e7e9      	b.n	406868 <_malloc_r+0x2c>
  406894:	4c17      	ldr	r4, [pc, #92]	; (4068f4 <_malloc_r+0xb8>)
  406896:	6823      	ldr	r3, [r4, #0]
  406898:	b91b      	cbnz	r3, 4068a2 <_malloc_r+0x66>
  40689a:	4630      	mov	r0, r6
  40689c:	f000 f970 	bl	406b80 <_sbrk_r>
  4068a0:	6020      	str	r0, [r4, #0]
  4068a2:	4629      	mov	r1, r5
  4068a4:	4630      	mov	r0, r6
  4068a6:	f000 f96b 	bl	406b80 <_sbrk_r>
  4068aa:	1c43      	adds	r3, r0, #1
  4068ac:	d018      	beq.n	4068e0 <_malloc_r+0xa4>
  4068ae:	1cc4      	adds	r4, r0, #3
  4068b0:	f024 0403 	bic.w	r4, r4, #3
  4068b4:	42a0      	cmp	r0, r4
  4068b6:	d10d      	bne.n	4068d4 <_malloc_r+0x98>
  4068b8:	6025      	str	r5, [r4, #0]
  4068ba:	4630      	mov	r0, r6
  4068bc:	f000 fa2d 	bl	406d1a <__malloc_unlock>
  4068c0:	f104 000b 	add.w	r0, r4, #11
  4068c4:	1d23      	adds	r3, r4, #4
  4068c6:	f020 0007 	bic.w	r0, r0, #7
  4068ca:	1ac3      	subs	r3, r0, r3
  4068cc:	d00e      	beq.n	4068ec <_malloc_r+0xb0>
  4068ce:	425a      	negs	r2, r3
  4068d0:	50e2      	str	r2, [r4, r3]
  4068d2:	bd70      	pop	{r4, r5, r6, pc}
  4068d4:	1a21      	subs	r1, r4, r0
  4068d6:	4630      	mov	r0, r6
  4068d8:	f000 f952 	bl	406b80 <_sbrk_r>
  4068dc:	3001      	adds	r0, #1
  4068de:	d1eb      	bne.n	4068b8 <_malloc_r+0x7c>
  4068e0:	230c      	movs	r3, #12
  4068e2:	6033      	str	r3, [r6, #0]
  4068e4:	4630      	mov	r0, r6
  4068e6:	f000 fa18 	bl	406d1a <__malloc_unlock>
  4068ea:	2000      	movs	r0, #0
  4068ec:	bd70      	pop	{r4, r5, r6, pc}
  4068ee:	bf00      	nop
  4068f0:	200004f4 	.word	0x200004f4
  4068f4:	200004f0 	.word	0x200004f0

004068f8 <__sfputc_r>:
  4068f8:	6893      	ldr	r3, [r2, #8]
  4068fa:	3b01      	subs	r3, #1
  4068fc:	2b00      	cmp	r3, #0
  4068fe:	b410      	push	{r4}
  406900:	6093      	str	r3, [r2, #8]
  406902:	da08      	bge.n	406916 <__sfputc_r+0x1e>
  406904:	6994      	ldr	r4, [r2, #24]
  406906:	42a3      	cmp	r3, r4
  406908:	db02      	blt.n	406910 <__sfputc_r+0x18>
  40690a:	b2cb      	uxtb	r3, r1
  40690c:	2b0a      	cmp	r3, #10
  40690e:	d102      	bne.n	406916 <__sfputc_r+0x1e>
  406910:	bc10      	pop	{r4}
  406912:	f7fd bee7 	b.w	4046e4 <__swbuf_r>
  406916:	6813      	ldr	r3, [r2, #0]
  406918:	1c58      	adds	r0, r3, #1
  40691a:	6010      	str	r0, [r2, #0]
  40691c:	7019      	strb	r1, [r3, #0]
  40691e:	b2c8      	uxtb	r0, r1
  406920:	bc10      	pop	{r4}
  406922:	4770      	bx	lr

00406924 <__sfputs_r>:
  406924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406926:	4606      	mov	r6, r0
  406928:	460f      	mov	r7, r1
  40692a:	4614      	mov	r4, r2
  40692c:	18d5      	adds	r5, r2, r3
  40692e:	42ac      	cmp	r4, r5
  406930:	d008      	beq.n	406944 <__sfputs_r+0x20>
  406932:	463a      	mov	r2, r7
  406934:	f814 1b01 	ldrb.w	r1, [r4], #1
  406938:	4630      	mov	r0, r6
  40693a:	f7ff ffdd 	bl	4068f8 <__sfputc_r>
  40693e:	1c43      	adds	r3, r0, #1
  406940:	d1f5      	bne.n	40692e <__sfputs_r+0xa>
  406942:	e000      	b.n	406946 <__sfputs_r+0x22>
  406944:	2000      	movs	r0, #0
  406946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00406948 <_vfiprintf_r>:
  406948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40694c:	b09d      	sub	sp, #116	; 0x74
  40694e:	460c      	mov	r4, r1
  406950:	4617      	mov	r7, r2
  406952:	9303      	str	r3, [sp, #12]
  406954:	4606      	mov	r6, r0
  406956:	b118      	cbz	r0, 406960 <_vfiprintf_r+0x18>
  406958:	6983      	ldr	r3, [r0, #24]
  40695a:	b90b      	cbnz	r3, 406960 <_vfiprintf_r+0x18>
  40695c:	f7fe fea2 	bl	4056a4 <__sinit>
  406960:	4b7f      	ldr	r3, [pc, #508]	; (406b60 <_vfiprintf_r+0x218>)
  406962:	429c      	cmp	r4, r3
  406964:	d101      	bne.n	40696a <_vfiprintf_r+0x22>
  406966:	6874      	ldr	r4, [r6, #4]
  406968:	e008      	b.n	40697c <_vfiprintf_r+0x34>
  40696a:	4b7e      	ldr	r3, [pc, #504]	; (406b64 <_vfiprintf_r+0x21c>)
  40696c:	429c      	cmp	r4, r3
  40696e:	d101      	bne.n	406974 <_vfiprintf_r+0x2c>
  406970:	68b4      	ldr	r4, [r6, #8]
  406972:	e003      	b.n	40697c <_vfiprintf_r+0x34>
  406974:	4b7c      	ldr	r3, [pc, #496]	; (406b68 <_vfiprintf_r+0x220>)
  406976:	429c      	cmp	r4, r3
  406978:	bf08      	it	eq
  40697a:	68f4      	ldreq	r4, [r6, #12]
  40697c:	89a3      	ldrh	r3, [r4, #12]
  40697e:	0718      	lsls	r0, r3, #28
  406980:	d50c      	bpl.n	40699c <_vfiprintf_r+0x54>
  406982:	6923      	ldr	r3, [r4, #16]
  406984:	b153      	cbz	r3, 40699c <_vfiprintf_r+0x54>
  406986:	2300      	movs	r3, #0
  406988:	9309      	str	r3, [sp, #36]	; 0x24
  40698a:	2320      	movs	r3, #32
  40698c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  406990:	2330      	movs	r3, #48	; 0x30
  406992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  406996:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 406b6c <_vfiprintf_r+0x224>
  40699a:	e044      	b.n	406a26 <_vfiprintf_r+0xde>
  40699c:	4621      	mov	r1, r4
  40699e:	4630      	mov	r0, r6
  4069a0:	f7fd fef4 	bl	40478c <__swsetup_r>
  4069a4:	2800      	cmp	r0, #0
  4069a6:	d0ee      	beq.n	406986 <_vfiprintf_r+0x3e>
  4069a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4069ac:	e0d5      	b.n	406b5a <_vfiprintf_r+0x212>
  4069ae:	9a03      	ldr	r2, [sp, #12]
  4069b0:	1d11      	adds	r1, r2, #4
  4069b2:	6812      	ldr	r2, [r2, #0]
  4069b4:	9103      	str	r1, [sp, #12]
  4069b6:	2a00      	cmp	r2, #0
  4069b8:	f280 808c 	bge.w	406ad4 <_vfiprintf_r+0x18c>
  4069bc:	4252      	negs	r2, r2
  4069be:	f043 0002 	orr.w	r0, r3, #2
  4069c2:	9207      	str	r2, [sp, #28]
  4069c4:	9004      	str	r0, [sp, #16]
  4069c6:	f898 3000 	ldrb.w	r3, [r8]
  4069ca:	2b2e      	cmp	r3, #46	; 0x2e
  4069cc:	f000 8084 	beq.w	406ad8 <_vfiprintf_r+0x190>
  4069d0:	2203      	movs	r2, #3
  4069d2:	f898 1000 	ldrb.w	r1, [r8]
  4069d6:	4865      	ldr	r0, [pc, #404]	; (406b6c <_vfiprintf_r+0x224>)
  4069d8:	f7ff fa9a 	bl	405f10 <memchr>
  4069dc:	b148      	cbz	r0, 4069f2 <_vfiprintf_r+0xaa>
  4069de:	2340      	movs	r3, #64	; 0x40
  4069e0:	ebcb 0000 	rsb	r0, fp, r0
  4069e4:	fa03 f000 	lsl.w	r0, r3, r0
  4069e8:	9b04      	ldr	r3, [sp, #16]
  4069ea:	4318      	orrs	r0, r3
  4069ec:	9004      	str	r0, [sp, #16]
  4069ee:	f108 0801 	add.w	r8, r8, #1
  4069f2:	f898 1000 	ldrb.w	r1, [r8]
  4069f6:	485e      	ldr	r0, [pc, #376]	; (406b70 <_vfiprintf_r+0x228>)
  4069f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4069fc:	2206      	movs	r2, #6
  4069fe:	f108 0701 	add.w	r7, r8, #1
  406a02:	f7ff fa85 	bl	405f10 <memchr>
  406a06:	2800      	cmp	r0, #0
  406a08:	f000 8095 	beq.w	406b36 <_vfiprintf_r+0x1ee>
  406a0c:	4b59      	ldr	r3, [pc, #356]	; (406b74 <_vfiprintf_r+0x22c>)
  406a0e:	2b00      	cmp	r3, #0
  406a10:	f040 8088 	bne.w	406b24 <_vfiprintf_r+0x1dc>
  406a14:	9b03      	ldr	r3, [sp, #12]
  406a16:	3307      	adds	r3, #7
  406a18:	f023 0307 	bic.w	r3, r3, #7
  406a1c:	3308      	adds	r3, #8
  406a1e:	9303      	str	r3, [sp, #12]
  406a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a22:	4453      	add	r3, sl
  406a24:	9309      	str	r3, [sp, #36]	; 0x24
  406a26:	46b8      	mov	r8, r7
  406a28:	4645      	mov	r5, r8
  406a2a:	f815 3b01 	ldrb.w	r3, [r5], #1
  406a2e:	b91b      	cbnz	r3, 406a38 <_vfiprintf_r+0xf0>
  406a30:	ebb8 0907 	subs.w	r9, r8, r7
  406a34:	d00f      	beq.n	406a56 <_vfiprintf_r+0x10e>
  406a36:	e003      	b.n	406a40 <_vfiprintf_r+0xf8>
  406a38:	2b25      	cmp	r3, #37	; 0x25
  406a3a:	d0f9      	beq.n	406a30 <_vfiprintf_r+0xe8>
  406a3c:	46a8      	mov	r8, r5
  406a3e:	e7f3      	b.n	406a28 <_vfiprintf_r+0xe0>
  406a40:	464b      	mov	r3, r9
  406a42:	463a      	mov	r2, r7
  406a44:	4621      	mov	r1, r4
  406a46:	4630      	mov	r0, r6
  406a48:	f7ff ff6c 	bl	406924 <__sfputs_r>
  406a4c:	3001      	adds	r0, #1
  406a4e:	d07f      	beq.n	406b50 <_vfiprintf_r+0x208>
  406a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a52:	444b      	add	r3, r9
  406a54:	9309      	str	r3, [sp, #36]	; 0x24
  406a56:	f898 3000 	ldrb.w	r3, [r8]
  406a5a:	2b00      	cmp	r3, #0
  406a5c:	d078      	beq.n	406b50 <_vfiprintf_r+0x208>
  406a5e:	2300      	movs	r3, #0
  406a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  406a64:	9304      	str	r3, [sp, #16]
  406a66:	9307      	str	r3, [sp, #28]
  406a68:	9205      	str	r2, [sp, #20]
  406a6a:	9306      	str	r3, [sp, #24]
  406a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  406a70:	931a      	str	r3, [sp, #104]	; 0x68
  406a72:	2701      	movs	r7, #1
  406a74:	2205      	movs	r2, #5
  406a76:	7829      	ldrb	r1, [r5, #0]
  406a78:	483f      	ldr	r0, [pc, #252]	; (406b78 <_vfiprintf_r+0x230>)
  406a7a:	f7ff fa49 	bl	405f10 <memchr>
  406a7e:	f105 0801 	add.w	r8, r5, #1
  406a82:	9b04      	ldr	r3, [sp, #16]
  406a84:	b138      	cbz	r0, 406a96 <_vfiprintf_r+0x14e>
  406a86:	4a3c      	ldr	r2, [pc, #240]	; (406b78 <_vfiprintf_r+0x230>)
  406a88:	1a80      	subs	r0, r0, r2
  406a8a:	fa07 f000 	lsl.w	r0, r7, r0
  406a8e:	4318      	orrs	r0, r3
  406a90:	9004      	str	r0, [sp, #16]
  406a92:	4645      	mov	r5, r8
  406a94:	e7ee      	b.n	406a74 <_vfiprintf_r+0x12c>
  406a96:	06d9      	lsls	r1, r3, #27
  406a98:	bf44      	itt	mi
  406a9a:	2220      	movmi	r2, #32
  406a9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406aa0:	071a      	lsls	r2, r3, #28
  406aa2:	bf44      	itt	mi
  406aa4:	222b      	movmi	r2, #43	; 0x2b
  406aa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406aaa:	782a      	ldrb	r2, [r5, #0]
  406aac:	2a2a      	cmp	r2, #42	; 0x2a
  406aae:	f43f af7e 	beq.w	4069ae <_vfiprintf_r+0x66>
  406ab2:	9a07      	ldr	r2, [sp, #28]
  406ab4:	2100      	movs	r1, #0
  406ab6:	200a      	movs	r0, #10
  406ab8:	46a8      	mov	r8, r5
  406aba:	3501      	adds	r5, #1
  406abc:	f898 3000 	ldrb.w	r3, [r8]
  406ac0:	3b30      	subs	r3, #48	; 0x30
  406ac2:	2b09      	cmp	r3, #9
  406ac4:	d803      	bhi.n	406ace <_vfiprintf_r+0x186>
  406ac6:	fb00 3202 	mla	r2, r0, r2, r3
  406aca:	2101      	movs	r1, #1
  406acc:	e7f4      	b.n	406ab8 <_vfiprintf_r+0x170>
  406ace:	2900      	cmp	r1, #0
  406ad0:	f43f af79 	beq.w	4069c6 <_vfiprintf_r+0x7e>
  406ad4:	9207      	str	r2, [sp, #28]
  406ad6:	e776      	b.n	4069c6 <_vfiprintf_r+0x7e>
  406ad8:	f898 3001 	ldrb.w	r3, [r8, #1]
  406adc:	2b2a      	cmp	r3, #42	; 0x2a
  406ade:	d10b      	bne.n	406af8 <_vfiprintf_r+0x1b0>
  406ae0:	9b03      	ldr	r3, [sp, #12]
  406ae2:	1d1a      	adds	r2, r3, #4
  406ae4:	681b      	ldr	r3, [r3, #0]
  406ae6:	9203      	str	r2, [sp, #12]
  406ae8:	2b00      	cmp	r3, #0
  406aea:	bfb8      	it	lt
  406aec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  406af0:	f108 0802 	add.w	r8, r8, #2
  406af4:	9305      	str	r3, [sp, #20]
  406af6:	e76b      	b.n	4069d0 <_vfiprintf_r+0x88>
  406af8:	2300      	movs	r3, #0
  406afa:	9305      	str	r3, [sp, #20]
  406afc:	f108 0001 	add.w	r0, r8, #1
  406b00:	4619      	mov	r1, r3
  406b02:	250a      	movs	r5, #10
  406b04:	4680      	mov	r8, r0
  406b06:	3001      	adds	r0, #1
  406b08:	f898 2000 	ldrb.w	r2, [r8]
  406b0c:	3a30      	subs	r2, #48	; 0x30
  406b0e:	2a09      	cmp	r2, #9
  406b10:	d803      	bhi.n	406b1a <_vfiprintf_r+0x1d2>
  406b12:	fb05 2101 	mla	r1, r5, r1, r2
  406b16:	2301      	movs	r3, #1
  406b18:	e7f4      	b.n	406b04 <_vfiprintf_r+0x1bc>
  406b1a:	2b00      	cmp	r3, #0
  406b1c:	f43f af58 	beq.w	4069d0 <_vfiprintf_r+0x88>
  406b20:	9105      	str	r1, [sp, #20]
  406b22:	e755      	b.n	4069d0 <_vfiprintf_r+0x88>
  406b24:	ab03      	add	r3, sp, #12
  406b26:	9300      	str	r3, [sp, #0]
  406b28:	4622      	mov	r2, r4
  406b2a:	4b14      	ldr	r3, [pc, #80]	; (406b7c <_vfiprintf_r+0x234>)
  406b2c:	a904      	add	r1, sp, #16
  406b2e:	4630      	mov	r0, r6
  406b30:	f7fc f9bc 	bl	402eac <_printf_float>
  406b34:	e007      	b.n	406b46 <_vfiprintf_r+0x1fe>
  406b36:	ab03      	add	r3, sp, #12
  406b38:	9300      	str	r3, [sp, #0]
  406b3a:	4622      	mov	r2, r4
  406b3c:	4b0f      	ldr	r3, [pc, #60]	; (406b7c <_vfiprintf_r+0x234>)
  406b3e:	a904      	add	r1, sp, #16
  406b40:	4630      	mov	r0, r6
  406b42:	f7fc fc6d 	bl	403420 <_printf_i>
  406b46:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  406b4a:	4682      	mov	sl, r0
  406b4c:	f47f af68 	bne.w	406a20 <_vfiprintf_r+0xd8>
  406b50:	89a3      	ldrh	r3, [r4, #12]
  406b52:	065b      	lsls	r3, r3, #25
  406b54:	f53f af28 	bmi.w	4069a8 <_vfiprintf_r+0x60>
  406b58:	9809      	ldr	r0, [sp, #36]	; 0x24
  406b5a:	b01d      	add	sp, #116	; 0x74
  406b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b60:	00408268 	.word	0x00408268
  406b64:	00408288 	.word	0x00408288
  406b68:	004082a8 	.word	0x004082a8
  406b6c:	004083da 	.word	0x004083da
  406b70:	004083de 	.word	0x004083de
  406b74:	00402ead 	.word	0x00402ead
  406b78:	004083d4 	.word	0x004083d4
  406b7c:	00406925 	.word	0x00406925

00406b80 <_sbrk_r>:
  406b80:	b538      	push	{r3, r4, r5, lr}
  406b82:	4c06      	ldr	r4, [pc, #24]	; (406b9c <_sbrk_r+0x1c>)
  406b84:	2300      	movs	r3, #0
  406b86:	4605      	mov	r5, r0
  406b88:	4608      	mov	r0, r1
  406b8a:	6023      	str	r3, [r4, #0]
  406b8c:	f7fb fd00 	bl	402590 <_sbrk>
  406b90:	1c43      	adds	r3, r0, #1
  406b92:	d102      	bne.n	406b9a <_sbrk_r+0x1a>
  406b94:	6823      	ldr	r3, [r4, #0]
  406b96:	b103      	cbz	r3, 406b9a <_sbrk_r+0x1a>
  406b98:	602b      	str	r3, [r5, #0]
  406b9a:	bd38      	pop	{r3, r4, r5, pc}
  406b9c:	20000864 	.word	0x20000864

00406ba0 <__sread>:
  406ba0:	b510      	push	{r4, lr}
  406ba2:	460c      	mov	r4, r1
  406ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406ba8:	f000 f8b8 	bl	406d1c <_read_r>
  406bac:	2800      	cmp	r0, #0
  406bae:	bfab      	itete	ge
  406bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  406bb2:	89a3      	ldrhlt	r3, [r4, #12]
  406bb4:	181b      	addge	r3, r3, r0
  406bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  406bba:	bfac      	ite	ge
  406bbc:	6563      	strge	r3, [r4, #84]	; 0x54
  406bbe:	81a3      	strhlt	r3, [r4, #12]
  406bc0:	bd10      	pop	{r4, pc}

00406bc2 <__swrite>:
  406bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406bc6:	461f      	mov	r7, r3
  406bc8:	898b      	ldrh	r3, [r1, #12]
  406bca:	05db      	lsls	r3, r3, #23
  406bcc:	4605      	mov	r5, r0
  406bce:	460c      	mov	r4, r1
  406bd0:	4616      	mov	r6, r2
  406bd2:	d505      	bpl.n	406be0 <__swrite+0x1e>
  406bd4:	2302      	movs	r3, #2
  406bd6:	2200      	movs	r2, #0
  406bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406bdc:	f000 f88a 	bl	406cf4 <_lseek_r>
  406be0:	89a3      	ldrh	r3, [r4, #12]
  406be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406bea:	81a3      	strh	r3, [r4, #12]
  406bec:	4632      	mov	r2, r6
  406bee:	463b      	mov	r3, r7
  406bf0:	4628      	mov	r0, r5
  406bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406bf6:	f000 b839 	b.w	406c6c <_write_r>

00406bfa <__sseek>:
  406bfa:	b510      	push	{r4, lr}
  406bfc:	460c      	mov	r4, r1
  406bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c02:	f000 f877 	bl	406cf4 <_lseek_r>
  406c06:	1c43      	adds	r3, r0, #1
  406c08:	89a3      	ldrh	r3, [r4, #12]
  406c0a:	bf15      	itete	ne
  406c0c:	6560      	strne	r0, [r4, #84]	; 0x54
  406c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406c16:	81a3      	strheq	r3, [r4, #12]
  406c18:	bf18      	it	ne
  406c1a:	81a3      	strhne	r3, [r4, #12]
  406c1c:	bd10      	pop	{r4, pc}

00406c1e <__sclose>:
  406c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c22:	f000 b835 	b.w	406c90 <_close_r>

00406c26 <strncmp>:
  406c26:	b530      	push	{r4, r5, lr}
  406c28:	b182      	cbz	r2, 406c4c <strncmp+0x26>
  406c2a:	1e45      	subs	r5, r0, #1
  406c2c:	3901      	subs	r1, #1
  406c2e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  406c32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  406c36:	42a3      	cmp	r3, r4
  406c38:	d106      	bne.n	406c48 <strncmp+0x22>
  406c3a:	43ec      	mvns	r4, r5
  406c3c:	4414      	add	r4, r2
  406c3e:	42e0      	cmn	r0, r4
  406c40:	d001      	beq.n	406c46 <strncmp+0x20>
  406c42:	2b00      	cmp	r3, #0
  406c44:	d1f3      	bne.n	406c2e <strncmp+0x8>
  406c46:	461c      	mov	r4, r3
  406c48:	1b18      	subs	r0, r3, r4
  406c4a:	bd30      	pop	{r4, r5, pc}
  406c4c:	4610      	mov	r0, r2
  406c4e:	bd30      	pop	{r4, r5, pc}

00406c50 <__ascii_wctomb>:
  406c50:	b149      	cbz	r1, 406c66 <__ascii_wctomb+0x16>
  406c52:	2aff      	cmp	r2, #255	; 0xff
  406c54:	bf85      	ittet	hi
  406c56:	238a      	movhi	r3, #138	; 0x8a
  406c58:	6003      	strhi	r3, [r0, #0]
  406c5a:	700a      	strbls	r2, [r1, #0]
  406c5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  406c60:	bf98      	it	ls
  406c62:	2001      	movls	r0, #1
  406c64:	4770      	bx	lr
  406c66:	4608      	mov	r0, r1
  406c68:	4770      	bx	lr
	...

00406c6c <_write_r>:
  406c6c:	b538      	push	{r3, r4, r5, lr}
  406c6e:	4c07      	ldr	r4, [pc, #28]	; (406c8c <_write_r+0x20>)
  406c70:	4605      	mov	r5, r0
  406c72:	4608      	mov	r0, r1
  406c74:	4611      	mov	r1, r2
  406c76:	2200      	movs	r2, #0
  406c78:	6022      	str	r2, [r4, #0]
  406c7a:	461a      	mov	r2, r3
  406c7c:	f7f9 fa96 	bl	4001ac <_write>
  406c80:	1c43      	adds	r3, r0, #1
  406c82:	d102      	bne.n	406c8a <_write_r+0x1e>
  406c84:	6823      	ldr	r3, [r4, #0]
  406c86:	b103      	cbz	r3, 406c8a <_write_r+0x1e>
  406c88:	602b      	str	r3, [r5, #0]
  406c8a:	bd38      	pop	{r3, r4, r5, pc}
  406c8c:	20000864 	.word	0x20000864

00406c90 <_close_r>:
  406c90:	b538      	push	{r3, r4, r5, lr}
  406c92:	4c06      	ldr	r4, [pc, #24]	; (406cac <_close_r+0x1c>)
  406c94:	2300      	movs	r3, #0
  406c96:	4605      	mov	r5, r0
  406c98:	4608      	mov	r0, r1
  406c9a:	6023      	str	r3, [r4, #0]
  406c9c:	f7fb fc92 	bl	4025c4 <_close>
  406ca0:	1c43      	adds	r3, r0, #1
  406ca2:	d102      	bne.n	406caa <_close_r+0x1a>
  406ca4:	6823      	ldr	r3, [r4, #0]
  406ca6:	b103      	cbz	r3, 406caa <_close_r+0x1a>
  406ca8:	602b      	str	r3, [r5, #0]
  406caa:	bd38      	pop	{r3, r4, r5, pc}
  406cac:	20000864 	.word	0x20000864

00406cb0 <_fstat_r>:
  406cb0:	b538      	push	{r3, r4, r5, lr}
  406cb2:	4c07      	ldr	r4, [pc, #28]	; (406cd0 <_fstat_r+0x20>)
  406cb4:	2300      	movs	r3, #0
  406cb6:	4605      	mov	r5, r0
  406cb8:	4608      	mov	r0, r1
  406cba:	4611      	mov	r1, r2
  406cbc:	6023      	str	r3, [r4, #0]
  406cbe:	f7fb fc85 	bl	4025cc <_fstat>
  406cc2:	1c43      	adds	r3, r0, #1
  406cc4:	d102      	bne.n	406ccc <_fstat_r+0x1c>
  406cc6:	6823      	ldr	r3, [r4, #0]
  406cc8:	b103      	cbz	r3, 406ccc <_fstat_r+0x1c>
  406cca:	602b      	str	r3, [r5, #0]
  406ccc:	bd38      	pop	{r3, r4, r5, pc}
  406cce:	bf00      	nop
  406cd0:	20000864 	.word	0x20000864

00406cd4 <_isatty_r>:
  406cd4:	b538      	push	{r3, r4, r5, lr}
  406cd6:	4c06      	ldr	r4, [pc, #24]	; (406cf0 <_isatty_r+0x1c>)
  406cd8:	2300      	movs	r3, #0
  406cda:	4605      	mov	r5, r0
  406cdc:	4608      	mov	r0, r1
  406cde:	6023      	str	r3, [r4, #0]
  406ce0:	f7fb fc7a 	bl	4025d8 <_isatty>
  406ce4:	1c43      	adds	r3, r0, #1
  406ce6:	d102      	bne.n	406cee <_isatty_r+0x1a>
  406ce8:	6823      	ldr	r3, [r4, #0]
  406cea:	b103      	cbz	r3, 406cee <_isatty_r+0x1a>
  406cec:	602b      	str	r3, [r5, #0]
  406cee:	bd38      	pop	{r3, r4, r5, pc}
  406cf0:	20000864 	.word	0x20000864

00406cf4 <_lseek_r>:
  406cf4:	b538      	push	{r3, r4, r5, lr}
  406cf6:	4c07      	ldr	r4, [pc, #28]	; (406d14 <_lseek_r+0x20>)
  406cf8:	4605      	mov	r5, r0
  406cfa:	4608      	mov	r0, r1
  406cfc:	4611      	mov	r1, r2
  406cfe:	2200      	movs	r2, #0
  406d00:	6022      	str	r2, [r4, #0]
  406d02:	461a      	mov	r2, r3
  406d04:	f7fb fc6a 	bl	4025dc <_lseek>
  406d08:	1c43      	adds	r3, r0, #1
  406d0a:	d102      	bne.n	406d12 <_lseek_r+0x1e>
  406d0c:	6823      	ldr	r3, [r4, #0]
  406d0e:	b103      	cbz	r3, 406d12 <_lseek_r+0x1e>
  406d10:	602b      	str	r3, [r5, #0]
  406d12:	bd38      	pop	{r3, r4, r5, pc}
  406d14:	20000864 	.word	0x20000864

00406d18 <__malloc_lock>:
  406d18:	4770      	bx	lr

00406d1a <__malloc_unlock>:
  406d1a:	4770      	bx	lr

00406d1c <_read_r>:
  406d1c:	b538      	push	{r3, r4, r5, lr}
  406d1e:	4c07      	ldr	r4, [pc, #28]	; (406d3c <_read_r+0x20>)
  406d20:	4605      	mov	r5, r0
  406d22:	4608      	mov	r0, r1
  406d24:	4611      	mov	r1, r2
  406d26:	2200      	movs	r2, #0
  406d28:	6022      	str	r2, [r4, #0]
  406d2a:	461a      	mov	r2, r3
  406d2c:	f7f9 fa20 	bl	400170 <_read>
  406d30:	1c43      	adds	r3, r0, #1
  406d32:	d102      	bne.n	406d3a <_read_r+0x1e>
  406d34:	6823      	ldr	r3, [r4, #0]
  406d36:	b103      	cbz	r3, 406d3a <_read_r+0x1e>
  406d38:	602b      	str	r3, [r5, #0]
  406d3a:	bd38      	pop	{r3, r4, r5, pc}
  406d3c:	20000864 	.word	0x20000864

00406d40 <__aeabi_drsub>:
  406d40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406d44:	e002      	b.n	406d4c <__adddf3>
  406d46:	bf00      	nop

00406d48 <__aeabi_dsub>:
  406d48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406d4c <__adddf3>:
  406d4c:	b530      	push	{r4, r5, lr}
  406d4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406d52:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406d56:	ea94 0f05 	teq	r4, r5
  406d5a:	bf08      	it	eq
  406d5c:	ea90 0f02 	teqeq	r0, r2
  406d60:	bf1f      	itttt	ne
  406d62:	ea54 0c00 	orrsne.w	ip, r4, r0
  406d66:	ea55 0c02 	orrsne.w	ip, r5, r2
  406d6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406d6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406d72:	f000 80e2 	beq.w	406f3a <__adddf3+0x1ee>
  406d76:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406d7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406d7e:	bfb8      	it	lt
  406d80:	426d      	neglt	r5, r5
  406d82:	dd0c      	ble.n	406d9e <__adddf3+0x52>
  406d84:	442c      	add	r4, r5
  406d86:	ea80 0202 	eor.w	r2, r0, r2
  406d8a:	ea81 0303 	eor.w	r3, r1, r3
  406d8e:	ea82 0000 	eor.w	r0, r2, r0
  406d92:	ea83 0101 	eor.w	r1, r3, r1
  406d96:	ea80 0202 	eor.w	r2, r0, r2
  406d9a:	ea81 0303 	eor.w	r3, r1, r3
  406d9e:	2d36      	cmp	r5, #54	; 0x36
  406da0:	bf88      	it	hi
  406da2:	bd30      	pophi	{r4, r5, pc}
  406da4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406da8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406dac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406db0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406db4:	d002      	beq.n	406dbc <__adddf3+0x70>
  406db6:	4240      	negs	r0, r0
  406db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406dbc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406dc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406dc4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406dc8:	d002      	beq.n	406dd0 <__adddf3+0x84>
  406dca:	4252      	negs	r2, r2
  406dcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406dd0:	ea94 0f05 	teq	r4, r5
  406dd4:	f000 80a7 	beq.w	406f26 <__adddf3+0x1da>
  406dd8:	f1a4 0401 	sub.w	r4, r4, #1
  406ddc:	f1d5 0e20 	rsbs	lr, r5, #32
  406de0:	db0d      	blt.n	406dfe <__adddf3+0xb2>
  406de2:	fa02 fc0e 	lsl.w	ip, r2, lr
  406de6:	fa22 f205 	lsr.w	r2, r2, r5
  406dea:	1880      	adds	r0, r0, r2
  406dec:	f141 0100 	adc.w	r1, r1, #0
  406df0:	fa03 f20e 	lsl.w	r2, r3, lr
  406df4:	1880      	adds	r0, r0, r2
  406df6:	fa43 f305 	asr.w	r3, r3, r5
  406dfa:	4159      	adcs	r1, r3
  406dfc:	e00e      	b.n	406e1c <__adddf3+0xd0>
  406dfe:	f1a5 0520 	sub.w	r5, r5, #32
  406e02:	f10e 0e20 	add.w	lr, lr, #32
  406e06:	2a01      	cmp	r2, #1
  406e08:	fa03 fc0e 	lsl.w	ip, r3, lr
  406e0c:	bf28      	it	cs
  406e0e:	f04c 0c02 	orrcs.w	ip, ip, #2
  406e12:	fa43 f305 	asr.w	r3, r3, r5
  406e16:	18c0      	adds	r0, r0, r3
  406e18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406e1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406e20:	d507      	bpl.n	406e32 <__adddf3+0xe6>
  406e22:	f04f 0e00 	mov.w	lr, #0
  406e26:	f1dc 0c00 	rsbs	ip, ip, #0
  406e2a:	eb7e 0000 	sbcs.w	r0, lr, r0
  406e2e:	eb6e 0101 	sbc.w	r1, lr, r1
  406e32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406e36:	d31b      	bcc.n	406e70 <__adddf3+0x124>
  406e38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406e3c:	d30c      	bcc.n	406e58 <__adddf3+0x10c>
  406e3e:	0849      	lsrs	r1, r1, #1
  406e40:	ea5f 0030 	movs.w	r0, r0, rrx
  406e44:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406e48:	f104 0401 	add.w	r4, r4, #1
  406e4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406e50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406e54:	f080 809a 	bcs.w	406f8c <__adddf3+0x240>
  406e58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406e5c:	bf08      	it	eq
  406e5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406e62:	f150 0000 	adcs.w	r0, r0, #0
  406e66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406e6a:	ea41 0105 	orr.w	r1, r1, r5
  406e6e:	bd30      	pop	{r4, r5, pc}
  406e70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406e74:	4140      	adcs	r0, r0
  406e76:	eb41 0101 	adc.w	r1, r1, r1
  406e7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406e7e:	f1a4 0401 	sub.w	r4, r4, #1
  406e82:	d1e9      	bne.n	406e58 <__adddf3+0x10c>
  406e84:	f091 0f00 	teq	r1, #0
  406e88:	bf04      	itt	eq
  406e8a:	4601      	moveq	r1, r0
  406e8c:	2000      	moveq	r0, #0
  406e8e:	fab1 f381 	clz	r3, r1
  406e92:	bf08      	it	eq
  406e94:	3320      	addeq	r3, #32
  406e96:	f1a3 030b 	sub.w	r3, r3, #11
  406e9a:	f1b3 0220 	subs.w	r2, r3, #32
  406e9e:	da0c      	bge.n	406eba <__adddf3+0x16e>
  406ea0:	320c      	adds	r2, #12
  406ea2:	dd08      	ble.n	406eb6 <__adddf3+0x16a>
  406ea4:	f102 0c14 	add.w	ip, r2, #20
  406ea8:	f1c2 020c 	rsb	r2, r2, #12
  406eac:	fa01 f00c 	lsl.w	r0, r1, ip
  406eb0:	fa21 f102 	lsr.w	r1, r1, r2
  406eb4:	e00c      	b.n	406ed0 <__adddf3+0x184>
  406eb6:	f102 0214 	add.w	r2, r2, #20
  406eba:	bfd8      	it	le
  406ebc:	f1c2 0c20 	rsble	ip, r2, #32
  406ec0:	fa01 f102 	lsl.w	r1, r1, r2
  406ec4:	fa20 fc0c 	lsr.w	ip, r0, ip
  406ec8:	bfdc      	itt	le
  406eca:	ea41 010c 	orrle.w	r1, r1, ip
  406ece:	4090      	lslle	r0, r2
  406ed0:	1ae4      	subs	r4, r4, r3
  406ed2:	bfa2      	ittt	ge
  406ed4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406ed8:	4329      	orrge	r1, r5
  406eda:	bd30      	popge	{r4, r5, pc}
  406edc:	ea6f 0404 	mvn.w	r4, r4
  406ee0:	3c1f      	subs	r4, #31
  406ee2:	da1c      	bge.n	406f1e <__adddf3+0x1d2>
  406ee4:	340c      	adds	r4, #12
  406ee6:	dc0e      	bgt.n	406f06 <__adddf3+0x1ba>
  406ee8:	f104 0414 	add.w	r4, r4, #20
  406eec:	f1c4 0220 	rsb	r2, r4, #32
  406ef0:	fa20 f004 	lsr.w	r0, r0, r4
  406ef4:	fa01 f302 	lsl.w	r3, r1, r2
  406ef8:	ea40 0003 	orr.w	r0, r0, r3
  406efc:	fa21 f304 	lsr.w	r3, r1, r4
  406f00:	ea45 0103 	orr.w	r1, r5, r3
  406f04:	bd30      	pop	{r4, r5, pc}
  406f06:	f1c4 040c 	rsb	r4, r4, #12
  406f0a:	f1c4 0220 	rsb	r2, r4, #32
  406f0e:	fa20 f002 	lsr.w	r0, r0, r2
  406f12:	fa01 f304 	lsl.w	r3, r1, r4
  406f16:	ea40 0003 	orr.w	r0, r0, r3
  406f1a:	4629      	mov	r1, r5
  406f1c:	bd30      	pop	{r4, r5, pc}
  406f1e:	fa21 f004 	lsr.w	r0, r1, r4
  406f22:	4629      	mov	r1, r5
  406f24:	bd30      	pop	{r4, r5, pc}
  406f26:	f094 0f00 	teq	r4, #0
  406f2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406f2e:	bf06      	itte	eq
  406f30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406f34:	3401      	addeq	r4, #1
  406f36:	3d01      	subne	r5, #1
  406f38:	e74e      	b.n	406dd8 <__adddf3+0x8c>
  406f3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406f3e:	bf18      	it	ne
  406f40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406f44:	d029      	beq.n	406f9a <__adddf3+0x24e>
  406f46:	ea94 0f05 	teq	r4, r5
  406f4a:	bf08      	it	eq
  406f4c:	ea90 0f02 	teqeq	r0, r2
  406f50:	d005      	beq.n	406f5e <__adddf3+0x212>
  406f52:	ea54 0c00 	orrs.w	ip, r4, r0
  406f56:	bf04      	itt	eq
  406f58:	4619      	moveq	r1, r3
  406f5a:	4610      	moveq	r0, r2
  406f5c:	bd30      	pop	{r4, r5, pc}
  406f5e:	ea91 0f03 	teq	r1, r3
  406f62:	bf1e      	ittt	ne
  406f64:	2100      	movne	r1, #0
  406f66:	2000      	movne	r0, #0
  406f68:	bd30      	popne	{r4, r5, pc}
  406f6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406f6e:	d105      	bne.n	406f7c <__adddf3+0x230>
  406f70:	0040      	lsls	r0, r0, #1
  406f72:	4149      	adcs	r1, r1
  406f74:	bf28      	it	cs
  406f76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406f7a:	bd30      	pop	{r4, r5, pc}
  406f7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406f80:	bf3c      	itt	cc
  406f82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406f86:	bd30      	popcc	{r4, r5, pc}
  406f88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406f90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406f94:	f04f 0000 	mov.w	r0, #0
  406f98:	bd30      	pop	{r4, r5, pc}
  406f9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406f9e:	bf1a      	itte	ne
  406fa0:	4619      	movne	r1, r3
  406fa2:	4610      	movne	r0, r2
  406fa4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406fa8:	bf1c      	itt	ne
  406faa:	460b      	movne	r3, r1
  406fac:	4602      	movne	r2, r0
  406fae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406fb2:	bf06      	itte	eq
  406fb4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406fb8:	ea91 0f03 	teqeq	r1, r3
  406fbc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406fc0:	bd30      	pop	{r4, r5, pc}
  406fc2:	bf00      	nop

00406fc4 <__aeabi_ui2d>:
  406fc4:	f090 0f00 	teq	r0, #0
  406fc8:	bf04      	itt	eq
  406fca:	2100      	moveq	r1, #0
  406fcc:	4770      	bxeq	lr
  406fce:	b530      	push	{r4, r5, lr}
  406fd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406fd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406fd8:	f04f 0500 	mov.w	r5, #0
  406fdc:	f04f 0100 	mov.w	r1, #0
  406fe0:	e750      	b.n	406e84 <__adddf3+0x138>
  406fe2:	bf00      	nop

00406fe4 <__aeabi_i2d>:
  406fe4:	f090 0f00 	teq	r0, #0
  406fe8:	bf04      	itt	eq
  406fea:	2100      	moveq	r1, #0
  406fec:	4770      	bxeq	lr
  406fee:	b530      	push	{r4, r5, lr}
  406ff0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406ff4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406ff8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406ffc:	bf48      	it	mi
  406ffe:	4240      	negmi	r0, r0
  407000:	f04f 0100 	mov.w	r1, #0
  407004:	e73e      	b.n	406e84 <__adddf3+0x138>
  407006:	bf00      	nop

00407008 <__aeabi_f2d>:
  407008:	0042      	lsls	r2, r0, #1
  40700a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40700e:	ea4f 0131 	mov.w	r1, r1, rrx
  407012:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407016:	bf1f      	itttt	ne
  407018:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40701c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407020:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407024:	4770      	bxne	lr
  407026:	f092 0f00 	teq	r2, #0
  40702a:	bf14      	ite	ne
  40702c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407030:	4770      	bxeq	lr
  407032:	b530      	push	{r4, r5, lr}
  407034:	f44f 7460 	mov.w	r4, #896	; 0x380
  407038:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40703c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407040:	e720      	b.n	406e84 <__adddf3+0x138>
  407042:	bf00      	nop

00407044 <__aeabi_ul2d>:
  407044:	ea50 0201 	orrs.w	r2, r0, r1
  407048:	bf08      	it	eq
  40704a:	4770      	bxeq	lr
  40704c:	b530      	push	{r4, r5, lr}
  40704e:	f04f 0500 	mov.w	r5, #0
  407052:	e00a      	b.n	40706a <__aeabi_l2d+0x16>

00407054 <__aeabi_l2d>:
  407054:	ea50 0201 	orrs.w	r2, r0, r1
  407058:	bf08      	it	eq
  40705a:	4770      	bxeq	lr
  40705c:	b530      	push	{r4, r5, lr}
  40705e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407062:	d502      	bpl.n	40706a <__aeabi_l2d+0x16>
  407064:	4240      	negs	r0, r0
  407066:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40706a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40706e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407072:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407076:	f43f aedc 	beq.w	406e32 <__adddf3+0xe6>
  40707a:	f04f 0203 	mov.w	r2, #3
  40707e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407082:	bf18      	it	ne
  407084:	3203      	addne	r2, #3
  407086:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40708a:	bf18      	it	ne
  40708c:	3203      	addne	r2, #3
  40708e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407092:	f1c2 0320 	rsb	r3, r2, #32
  407096:	fa00 fc03 	lsl.w	ip, r0, r3
  40709a:	fa20 f002 	lsr.w	r0, r0, r2
  40709e:	fa01 fe03 	lsl.w	lr, r1, r3
  4070a2:	ea40 000e 	orr.w	r0, r0, lr
  4070a6:	fa21 f102 	lsr.w	r1, r1, r2
  4070aa:	4414      	add	r4, r2
  4070ac:	e6c1      	b.n	406e32 <__adddf3+0xe6>
  4070ae:	bf00      	nop

004070b0 <__aeabi_dmul>:
  4070b0:	b570      	push	{r4, r5, r6, lr}
  4070b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4070b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4070ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4070be:	bf1d      	ittte	ne
  4070c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4070c4:	ea94 0f0c 	teqne	r4, ip
  4070c8:	ea95 0f0c 	teqne	r5, ip
  4070cc:	f000 f8de 	bleq	40728c <__aeabi_dmul+0x1dc>
  4070d0:	442c      	add	r4, r5
  4070d2:	ea81 0603 	eor.w	r6, r1, r3
  4070d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4070da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4070de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4070e2:	bf18      	it	ne
  4070e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4070e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4070ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4070f0:	d038      	beq.n	407164 <__aeabi_dmul+0xb4>
  4070f2:	fba0 ce02 	umull	ip, lr, r0, r2
  4070f6:	f04f 0500 	mov.w	r5, #0
  4070fa:	fbe1 e502 	umlal	lr, r5, r1, r2
  4070fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407102:	fbe0 e503 	umlal	lr, r5, r0, r3
  407106:	f04f 0600 	mov.w	r6, #0
  40710a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40710e:	f09c 0f00 	teq	ip, #0
  407112:	bf18      	it	ne
  407114:	f04e 0e01 	orrne.w	lr, lr, #1
  407118:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40711c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407120:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407124:	d204      	bcs.n	407130 <__aeabi_dmul+0x80>
  407126:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40712a:	416d      	adcs	r5, r5
  40712c:	eb46 0606 	adc.w	r6, r6, r6
  407130:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407134:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407138:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40713c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407140:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407144:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407148:	bf88      	it	hi
  40714a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40714e:	d81e      	bhi.n	40718e <__aeabi_dmul+0xde>
  407150:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407154:	bf08      	it	eq
  407156:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40715a:	f150 0000 	adcs.w	r0, r0, #0
  40715e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407162:	bd70      	pop	{r4, r5, r6, pc}
  407164:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407168:	ea46 0101 	orr.w	r1, r6, r1
  40716c:	ea40 0002 	orr.w	r0, r0, r2
  407170:	ea81 0103 	eor.w	r1, r1, r3
  407174:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407178:	bfc2      	ittt	gt
  40717a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40717e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407182:	bd70      	popgt	{r4, r5, r6, pc}
  407184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407188:	f04f 0e00 	mov.w	lr, #0
  40718c:	3c01      	subs	r4, #1
  40718e:	f300 80ab 	bgt.w	4072e8 <__aeabi_dmul+0x238>
  407192:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407196:	bfde      	ittt	le
  407198:	2000      	movle	r0, #0
  40719a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40719e:	bd70      	pople	{r4, r5, r6, pc}
  4071a0:	f1c4 0400 	rsb	r4, r4, #0
  4071a4:	3c20      	subs	r4, #32
  4071a6:	da35      	bge.n	407214 <__aeabi_dmul+0x164>
  4071a8:	340c      	adds	r4, #12
  4071aa:	dc1b      	bgt.n	4071e4 <__aeabi_dmul+0x134>
  4071ac:	f104 0414 	add.w	r4, r4, #20
  4071b0:	f1c4 0520 	rsb	r5, r4, #32
  4071b4:	fa00 f305 	lsl.w	r3, r0, r5
  4071b8:	fa20 f004 	lsr.w	r0, r0, r4
  4071bc:	fa01 f205 	lsl.w	r2, r1, r5
  4071c0:	ea40 0002 	orr.w	r0, r0, r2
  4071c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4071c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4071cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4071d0:	fa21 f604 	lsr.w	r6, r1, r4
  4071d4:	eb42 0106 	adc.w	r1, r2, r6
  4071d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4071dc:	bf08      	it	eq
  4071de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4071e2:	bd70      	pop	{r4, r5, r6, pc}
  4071e4:	f1c4 040c 	rsb	r4, r4, #12
  4071e8:	f1c4 0520 	rsb	r5, r4, #32
  4071ec:	fa00 f304 	lsl.w	r3, r0, r4
  4071f0:	fa20 f005 	lsr.w	r0, r0, r5
  4071f4:	fa01 f204 	lsl.w	r2, r1, r4
  4071f8:	ea40 0002 	orr.w	r0, r0, r2
  4071fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407200:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407204:	f141 0100 	adc.w	r1, r1, #0
  407208:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40720c:	bf08      	it	eq
  40720e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407212:	bd70      	pop	{r4, r5, r6, pc}
  407214:	f1c4 0520 	rsb	r5, r4, #32
  407218:	fa00 f205 	lsl.w	r2, r0, r5
  40721c:	ea4e 0e02 	orr.w	lr, lr, r2
  407220:	fa20 f304 	lsr.w	r3, r0, r4
  407224:	fa01 f205 	lsl.w	r2, r1, r5
  407228:	ea43 0302 	orr.w	r3, r3, r2
  40722c:	fa21 f004 	lsr.w	r0, r1, r4
  407230:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407234:	fa21 f204 	lsr.w	r2, r1, r4
  407238:	ea20 0002 	bic.w	r0, r0, r2
  40723c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407240:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407244:	bf08      	it	eq
  407246:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40724a:	bd70      	pop	{r4, r5, r6, pc}
  40724c:	f094 0f00 	teq	r4, #0
  407250:	d10f      	bne.n	407272 <__aeabi_dmul+0x1c2>
  407252:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407256:	0040      	lsls	r0, r0, #1
  407258:	eb41 0101 	adc.w	r1, r1, r1
  40725c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407260:	bf08      	it	eq
  407262:	3c01      	subeq	r4, #1
  407264:	d0f7      	beq.n	407256 <__aeabi_dmul+0x1a6>
  407266:	ea41 0106 	orr.w	r1, r1, r6
  40726a:	f095 0f00 	teq	r5, #0
  40726e:	bf18      	it	ne
  407270:	4770      	bxne	lr
  407272:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407276:	0052      	lsls	r2, r2, #1
  407278:	eb43 0303 	adc.w	r3, r3, r3
  40727c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407280:	bf08      	it	eq
  407282:	3d01      	subeq	r5, #1
  407284:	d0f7      	beq.n	407276 <__aeabi_dmul+0x1c6>
  407286:	ea43 0306 	orr.w	r3, r3, r6
  40728a:	4770      	bx	lr
  40728c:	ea94 0f0c 	teq	r4, ip
  407290:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407294:	bf18      	it	ne
  407296:	ea95 0f0c 	teqne	r5, ip
  40729a:	d00c      	beq.n	4072b6 <__aeabi_dmul+0x206>
  40729c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4072a0:	bf18      	it	ne
  4072a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4072a6:	d1d1      	bne.n	40724c <__aeabi_dmul+0x19c>
  4072a8:	ea81 0103 	eor.w	r1, r1, r3
  4072ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4072b0:	f04f 0000 	mov.w	r0, #0
  4072b4:	bd70      	pop	{r4, r5, r6, pc}
  4072b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4072ba:	bf06      	itte	eq
  4072bc:	4610      	moveq	r0, r2
  4072be:	4619      	moveq	r1, r3
  4072c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4072c4:	d019      	beq.n	4072fa <__aeabi_dmul+0x24a>
  4072c6:	ea94 0f0c 	teq	r4, ip
  4072ca:	d102      	bne.n	4072d2 <__aeabi_dmul+0x222>
  4072cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4072d0:	d113      	bne.n	4072fa <__aeabi_dmul+0x24a>
  4072d2:	ea95 0f0c 	teq	r5, ip
  4072d6:	d105      	bne.n	4072e4 <__aeabi_dmul+0x234>
  4072d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4072dc:	bf1c      	itt	ne
  4072de:	4610      	movne	r0, r2
  4072e0:	4619      	movne	r1, r3
  4072e2:	d10a      	bne.n	4072fa <__aeabi_dmul+0x24a>
  4072e4:	ea81 0103 	eor.w	r1, r1, r3
  4072e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4072ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4072f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4072f4:	f04f 0000 	mov.w	r0, #0
  4072f8:	bd70      	pop	{r4, r5, r6, pc}
  4072fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4072fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407302:	bd70      	pop	{r4, r5, r6, pc}

00407304 <__aeabi_ddiv>:
  407304:	b570      	push	{r4, r5, r6, lr}
  407306:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40730a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40730e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407312:	bf1d      	ittte	ne
  407314:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407318:	ea94 0f0c 	teqne	r4, ip
  40731c:	ea95 0f0c 	teqne	r5, ip
  407320:	f000 f8a7 	bleq	407472 <__aeabi_ddiv+0x16e>
  407324:	eba4 0405 	sub.w	r4, r4, r5
  407328:	ea81 0e03 	eor.w	lr, r1, r3
  40732c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407330:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407334:	f000 8088 	beq.w	407448 <__aeabi_ddiv+0x144>
  407338:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40733c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407340:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407344:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407348:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40734c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407350:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407354:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407358:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40735c:	429d      	cmp	r5, r3
  40735e:	bf08      	it	eq
  407360:	4296      	cmpeq	r6, r2
  407362:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407366:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40736a:	d202      	bcs.n	407372 <__aeabi_ddiv+0x6e>
  40736c:	085b      	lsrs	r3, r3, #1
  40736e:	ea4f 0232 	mov.w	r2, r2, rrx
  407372:	1ab6      	subs	r6, r6, r2
  407374:	eb65 0503 	sbc.w	r5, r5, r3
  407378:	085b      	lsrs	r3, r3, #1
  40737a:	ea4f 0232 	mov.w	r2, r2, rrx
  40737e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407382:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407386:	ebb6 0e02 	subs.w	lr, r6, r2
  40738a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40738e:	bf22      	ittt	cs
  407390:	1ab6      	subcs	r6, r6, r2
  407392:	4675      	movcs	r5, lr
  407394:	ea40 000c 	orrcs.w	r0, r0, ip
  407398:	085b      	lsrs	r3, r3, #1
  40739a:	ea4f 0232 	mov.w	r2, r2, rrx
  40739e:	ebb6 0e02 	subs.w	lr, r6, r2
  4073a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073a6:	bf22      	ittt	cs
  4073a8:	1ab6      	subcs	r6, r6, r2
  4073aa:	4675      	movcs	r5, lr
  4073ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4073b0:	085b      	lsrs	r3, r3, #1
  4073b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4073b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4073ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073be:	bf22      	ittt	cs
  4073c0:	1ab6      	subcs	r6, r6, r2
  4073c2:	4675      	movcs	r5, lr
  4073c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4073c8:	085b      	lsrs	r3, r3, #1
  4073ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4073ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4073d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073d6:	bf22      	ittt	cs
  4073d8:	1ab6      	subcs	r6, r6, r2
  4073da:	4675      	movcs	r5, lr
  4073dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4073e0:	ea55 0e06 	orrs.w	lr, r5, r6
  4073e4:	d018      	beq.n	407418 <__aeabi_ddiv+0x114>
  4073e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4073ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4073ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4073f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4073f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4073fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4073fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407402:	d1c0      	bne.n	407386 <__aeabi_ddiv+0x82>
  407404:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407408:	d10b      	bne.n	407422 <__aeabi_ddiv+0x11e>
  40740a:	ea41 0100 	orr.w	r1, r1, r0
  40740e:	f04f 0000 	mov.w	r0, #0
  407412:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407416:	e7b6      	b.n	407386 <__aeabi_ddiv+0x82>
  407418:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40741c:	bf04      	itt	eq
  40741e:	4301      	orreq	r1, r0
  407420:	2000      	moveq	r0, #0
  407422:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407426:	bf88      	it	hi
  407428:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40742c:	f63f aeaf 	bhi.w	40718e <__aeabi_dmul+0xde>
  407430:	ebb5 0c03 	subs.w	ip, r5, r3
  407434:	bf04      	itt	eq
  407436:	ebb6 0c02 	subseq.w	ip, r6, r2
  40743a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40743e:	f150 0000 	adcs.w	r0, r0, #0
  407442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407446:	bd70      	pop	{r4, r5, r6, pc}
  407448:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40744c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407450:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407454:	bfc2      	ittt	gt
  407456:	ebd4 050c 	rsbsgt	r5, r4, ip
  40745a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40745e:	bd70      	popgt	{r4, r5, r6, pc}
  407460:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407464:	f04f 0e00 	mov.w	lr, #0
  407468:	3c01      	subs	r4, #1
  40746a:	e690      	b.n	40718e <__aeabi_dmul+0xde>
  40746c:	ea45 0e06 	orr.w	lr, r5, r6
  407470:	e68d      	b.n	40718e <__aeabi_dmul+0xde>
  407472:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407476:	ea94 0f0c 	teq	r4, ip
  40747a:	bf08      	it	eq
  40747c:	ea95 0f0c 	teqeq	r5, ip
  407480:	f43f af3b 	beq.w	4072fa <__aeabi_dmul+0x24a>
  407484:	ea94 0f0c 	teq	r4, ip
  407488:	d10a      	bne.n	4074a0 <__aeabi_ddiv+0x19c>
  40748a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40748e:	f47f af34 	bne.w	4072fa <__aeabi_dmul+0x24a>
  407492:	ea95 0f0c 	teq	r5, ip
  407496:	f47f af25 	bne.w	4072e4 <__aeabi_dmul+0x234>
  40749a:	4610      	mov	r0, r2
  40749c:	4619      	mov	r1, r3
  40749e:	e72c      	b.n	4072fa <__aeabi_dmul+0x24a>
  4074a0:	ea95 0f0c 	teq	r5, ip
  4074a4:	d106      	bne.n	4074b4 <__aeabi_ddiv+0x1b0>
  4074a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4074aa:	f43f aefd 	beq.w	4072a8 <__aeabi_dmul+0x1f8>
  4074ae:	4610      	mov	r0, r2
  4074b0:	4619      	mov	r1, r3
  4074b2:	e722      	b.n	4072fa <__aeabi_dmul+0x24a>
  4074b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4074b8:	bf18      	it	ne
  4074ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4074be:	f47f aec5 	bne.w	40724c <__aeabi_dmul+0x19c>
  4074c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4074c6:	f47f af0d 	bne.w	4072e4 <__aeabi_dmul+0x234>
  4074ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4074ce:	f47f aeeb 	bne.w	4072a8 <__aeabi_dmul+0x1f8>
  4074d2:	e712      	b.n	4072fa <__aeabi_dmul+0x24a>

004074d4 <__gedf2>:
  4074d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4074d8:	e006      	b.n	4074e8 <__cmpdf2+0x4>
  4074da:	bf00      	nop

004074dc <__ledf2>:
  4074dc:	f04f 0c01 	mov.w	ip, #1
  4074e0:	e002      	b.n	4074e8 <__cmpdf2+0x4>
  4074e2:	bf00      	nop

004074e4 <__cmpdf2>:
  4074e4:	f04f 0c01 	mov.w	ip, #1
  4074e8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4074ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4074f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4074f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4074f8:	bf18      	it	ne
  4074fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4074fe:	d01b      	beq.n	407538 <__cmpdf2+0x54>
  407500:	b001      	add	sp, #4
  407502:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407506:	bf0c      	ite	eq
  407508:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40750c:	ea91 0f03 	teqne	r1, r3
  407510:	bf02      	ittt	eq
  407512:	ea90 0f02 	teqeq	r0, r2
  407516:	2000      	moveq	r0, #0
  407518:	4770      	bxeq	lr
  40751a:	f110 0f00 	cmn.w	r0, #0
  40751e:	ea91 0f03 	teq	r1, r3
  407522:	bf58      	it	pl
  407524:	4299      	cmppl	r1, r3
  407526:	bf08      	it	eq
  407528:	4290      	cmpeq	r0, r2
  40752a:	bf2c      	ite	cs
  40752c:	17d8      	asrcs	r0, r3, #31
  40752e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407532:	f040 0001 	orr.w	r0, r0, #1
  407536:	4770      	bx	lr
  407538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40753c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407540:	d102      	bne.n	407548 <__cmpdf2+0x64>
  407542:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407546:	d107      	bne.n	407558 <__cmpdf2+0x74>
  407548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40754c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407550:	d1d6      	bne.n	407500 <__cmpdf2+0x1c>
  407552:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407556:	d0d3      	beq.n	407500 <__cmpdf2+0x1c>
  407558:	f85d 0b04 	ldr.w	r0, [sp], #4
  40755c:	4770      	bx	lr
  40755e:	bf00      	nop

00407560 <__aeabi_cdrcmple>:
  407560:	4684      	mov	ip, r0
  407562:	4610      	mov	r0, r2
  407564:	4662      	mov	r2, ip
  407566:	468c      	mov	ip, r1
  407568:	4619      	mov	r1, r3
  40756a:	4663      	mov	r3, ip
  40756c:	e000      	b.n	407570 <__aeabi_cdcmpeq>
  40756e:	bf00      	nop

00407570 <__aeabi_cdcmpeq>:
  407570:	b501      	push	{r0, lr}
  407572:	f7ff ffb7 	bl	4074e4 <__cmpdf2>
  407576:	2800      	cmp	r0, #0
  407578:	bf48      	it	mi
  40757a:	f110 0f00 	cmnmi.w	r0, #0
  40757e:	bd01      	pop	{r0, pc}

00407580 <__aeabi_dcmpeq>:
  407580:	f84d ed08 	str.w	lr, [sp, #-8]!
  407584:	f7ff fff4 	bl	407570 <__aeabi_cdcmpeq>
  407588:	bf0c      	ite	eq
  40758a:	2001      	moveq	r0, #1
  40758c:	2000      	movne	r0, #0
  40758e:	f85d fb08 	ldr.w	pc, [sp], #8
  407592:	bf00      	nop

00407594 <__aeabi_dcmplt>:
  407594:	f84d ed08 	str.w	lr, [sp, #-8]!
  407598:	f7ff ffea 	bl	407570 <__aeabi_cdcmpeq>
  40759c:	bf34      	ite	cc
  40759e:	2001      	movcc	r0, #1
  4075a0:	2000      	movcs	r0, #0
  4075a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4075a6:	bf00      	nop

004075a8 <__aeabi_dcmple>:
  4075a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075ac:	f7ff ffe0 	bl	407570 <__aeabi_cdcmpeq>
  4075b0:	bf94      	ite	ls
  4075b2:	2001      	movls	r0, #1
  4075b4:	2000      	movhi	r0, #0
  4075b6:	f85d fb08 	ldr.w	pc, [sp], #8
  4075ba:	bf00      	nop

004075bc <__aeabi_dcmpge>:
  4075bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075c0:	f7ff ffce 	bl	407560 <__aeabi_cdrcmple>
  4075c4:	bf94      	ite	ls
  4075c6:	2001      	movls	r0, #1
  4075c8:	2000      	movhi	r0, #0
  4075ca:	f85d fb08 	ldr.w	pc, [sp], #8
  4075ce:	bf00      	nop

004075d0 <__aeabi_dcmpgt>:
  4075d0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075d4:	f7ff ffc4 	bl	407560 <__aeabi_cdrcmple>
  4075d8:	bf34      	ite	cc
  4075da:	2001      	movcc	r0, #1
  4075dc:	2000      	movcs	r0, #0
  4075de:	f85d fb08 	ldr.w	pc, [sp], #8
  4075e2:	bf00      	nop

004075e4 <__aeabi_dcmpun>:
  4075e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4075e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4075ec:	d102      	bne.n	4075f4 <__aeabi_dcmpun+0x10>
  4075ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4075f2:	d10a      	bne.n	40760a <__aeabi_dcmpun+0x26>
  4075f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4075f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4075fc:	d102      	bne.n	407604 <__aeabi_dcmpun+0x20>
  4075fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407602:	d102      	bne.n	40760a <__aeabi_dcmpun+0x26>
  407604:	f04f 0000 	mov.w	r0, #0
  407608:	4770      	bx	lr
  40760a:	f04f 0001 	mov.w	r0, #1
  40760e:	4770      	bx	lr

00407610 <__aeabi_d2iz>:
  407610:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407618:	d215      	bcs.n	407646 <__aeabi_d2iz+0x36>
  40761a:	d511      	bpl.n	407640 <__aeabi_d2iz+0x30>
  40761c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407624:	d912      	bls.n	40764c <__aeabi_d2iz+0x3c>
  407626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40762a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40762e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407636:	fa23 f002 	lsr.w	r0, r3, r2
  40763a:	bf18      	it	ne
  40763c:	4240      	negne	r0, r0
  40763e:	4770      	bx	lr
  407640:	f04f 0000 	mov.w	r0, #0
  407644:	4770      	bx	lr
  407646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40764a:	d105      	bne.n	407658 <__aeabi_d2iz+0x48>
  40764c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407650:	bf08      	it	eq
  407652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407656:	4770      	bx	lr
  407658:	f04f 0000 	mov.w	r0, #0
  40765c:	4770      	bx	lr
  40765e:	bf00      	nop

00407660 <__aeabi_d2uiz>:
  407660:	004a      	lsls	r2, r1, #1
  407662:	d211      	bcs.n	407688 <__aeabi_d2uiz+0x28>
  407664:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407668:	d211      	bcs.n	40768e <__aeabi_d2uiz+0x2e>
  40766a:	d50d      	bpl.n	407688 <__aeabi_d2uiz+0x28>
  40766c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407670:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407674:	d40e      	bmi.n	407694 <__aeabi_d2uiz+0x34>
  407676:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40767a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40767e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407682:	fa23 f002 	lsr.w	r0, r3, r2
  407686:	4770      	bx	lr
  407688:	f04f 0000 	mov.w	r0, #0
  40768c:	4770      	bx	lr
  40768e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407692:	d102      	bne.n	40769a <__aeabi_d2uiz+0x3a>
  407694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  407698:	4770      	bx	lr
  40769a:	f04f 0000 	mov.w	r0, #0
  40769e:	4770      	bx	lr

004076a0 <__aeabi_d2f>:
  4076a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4076a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4076a8:	bf24      	itt	cs
  4076aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4076ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4076b2:	d90d      	bls.n	4076d0 <__aeabi_d2f+0x30>
  4076b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4076b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4076bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4076c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4076c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4076c8:	bf08      	it	eq
  4076ca:	f020 0001 	biceq.w	r0, r0, #1
  4076ce:	4770      	bx	lr
  4076d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4076d4:	d121      	bne.n	40771a <__aeabi_d2f+0x7a>
  4076d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4076da:	bfbc      	itt	lt
  4076dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4076e0:	4770      	bxlt	lr
  4076e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4076e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4076ea:	f1c2 0218 	rsb	r2, r2, #24
  4076ee:	f1c2 0c20 	rsb	ip, r2, #32
  4076f2:	fa10 f30c 	lsls.w	r3, r0, ip
  4076f6:	fa20 f002 	lsr.w	r0, r0, r2
  4076fa:	bf18      	it	ne
  4076fc:	f040 0001 	orrne.w	r0, r0, #1
  407700:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407704:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  407708:	fa03 fc0c 	lsl.w	ip, r3, ip
  40770c:	ea40 000c 	orr.w	r0, r0, ip
  407710:	fa23 f302 	lsr.w	r3, r3, r2
  407714:	ea4f 0343 	mov.w	r3, r3, lsl #1
  407718:	e7cc      	b.n	4076b4 <__aeabi_d2f+0x14>
  40771a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40771e:	d107      	bne.n	407730 <__aeabi_d2f+0x90>
  407720:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  407724:	bf1e      	ittt	ne
  407726:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40772a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40772e:	4770      	bxne	lr
  407730:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  407734:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407738:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40773c:	4770      	bx	lr
  40773e:	bf00      	nop

00407740 <__aeabi_frsub>:
  407740:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  407744:	e002      	b.n	40774c <__addsf3>
  407746:	bf00      	nop

00407748 <__aeabi_fsub>:
  407748:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040774c <__addsf3>:
  40774c:	0042      	lsls	r2, r0, #1
  40774e:	bf1f      	itttt	ne
  407750:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  407754:	ea92 0f03 	teqne	r2, r3
  407758:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40775c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407760:	d06a      	beq.n	407838 <__addsf3+0xec>
  407762:	ea4f 6212 	mov.w	r2, r2, lsr #24
  407766:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40776a:	bfc1      	itttt	gt
  40776c:	18d2      	addgt	r2, r2, r3
  40776e:	4041      	eorgt	r1, r0
  407770:	4048      	eorgt	r0, r1
  407772:	4041      	eorgt	r1, r0
  407774:	bfb8      	it	lt
  407776:	425b      	neglt	r3, r3
  407778:	2b19      	cmp	r3, #25
  40777a:	bf88      	it	hi
  40777c:	4770      	bxhi	lr
  40777e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407782:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407786:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40778a:	bf18      	it	ne
  40778c:	4240      	negne	r0, r0
  40778e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407792:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  407796:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40779a:	bf18      	it	ne
  40779c:	4249      	negne	r1, r1
  40779e:	ea92 0f03 	teq	r2, r3
  4077a2:	d03f      	beq.n	407824 <__addsf3+0xd8>
  4077a4:	f1a2 0201 	sub.w	r2, r2, #1
  4077a8:	fa41 fc03 	asr.w	ip, r1, r3
  4077ac:	eb10 000c 	adds.w	r0, r0, ip
  4077b0:	f1c3 0320 	rsb	r3, r3, #32
  4077b4:	fa01 f103 	lsl.w	r1, r1, r3
  4077b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4077bc:	d502      	bpl.n	4077c4 <__addsf3+0x78>
  4077be:	4249      	negs	r1, r1
  4077c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4077c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4077c8:	d313      	bcc.n	4077f2 <__addsf3+0xa6>
  4077ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4077ce:	d306      	bcc.n	4077de <__addsf3+0x92>
  4077d0:	0840      	lsrs	r0, r0, #1
  4077d2:	ea4f 0131 	mov.w	r1, r1, rrx
  4077d6:	f102 0201 	add.w	r2, r2, #1
  4077da:	2afe      	cmp	r2, #254	; 0xfe
  4077dc:	d251      	bcs.n	407882 <__addsf3+0x136>
  4077de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  4077e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4077e6:	bf08      	it	eq
  4077e8:	f020 0001 	biceq.w	r0, r0, #1
  4077ec:	ea40 0003 	orr.w	r0, r0, r3
  4077f0:	4770      	bx	lr
  4077f2:	0049      	lsls	r1, r1, #1
  4077f4:	eb40 0000 	adc.w	r0, r0, r0
  4077f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4077fc:	f1a2 0201 	sub.w	r2, r2, #1
  407800:	d1ed      	bne.n	4077de <__addsf3+0x92>
  407802:	fab0 fc80 	clz	ip, r0
  407806:	f1ac 0c08 	sub.w	ip, ip, #8
  40780a:	ebb2 020c 	subs.w	r2, r2, ip
  40780e:	fa00 f00c 	lsl.w	r0, r0, ip
  407812:	bfaa      	itet	ge
  407814:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  407818:	4252      	neglt	r2, r2
  40781a:	4318      	orrge	r0, r3
  40781c:	bfbc      	itt	lt
  40781e:	40d0      	lsrlt	r0, r2
  407820:	4318      	orrlt	r0, r3
  407822:	4770      	bx	lr
  407824:	f092 0f00 	teq	r2, #0
  407828:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40782c:	bf06      	itte	eq
  40782e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  407832:	3201      	addeq	r2, #1
  407834:	3b01      	subne	r3, #1
  407836:	e7b5      	b.n	4077a4 <__addsf3+0x58>
  407838:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40783c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407840:	bf18      	it	ne
  407842:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407846:	d021      	beq.n	40788c <__addsf3+0x140>
  407848:	ea92 0f03 	teq	r2, r3
  40784c:	d004      	beq.n	407858 <__addsf3+0x10c>
  40784e:	f092 0f00 	teq	r2, #0
  407852:	bf08      	it	eq
  407854:	4608      	moveq	r0, r1
  407856:	4770      	bx	lr
  407858:	ea90 0f01 	teq	r0, r1
  40785c:	bf1c      	itt	ne
  40785e:	2000      	movne	r0, #0
  407860:	4770      	bxne	lr
  407862:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  407866:	d104      	bne.n	407872 <__addsf3+0x126>
  407868:	0040      	lsls	r0, r0, #1
  40786a:	bf28      	it	cs
  40786c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  407870:	4770      	bx	lr
  407872:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  407876:	bf3c      	itt	cc
  407878:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40787c:	4770      	bxcc	lr
  40787e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  407882:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  407886:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40788a:	4770      	bx	lr
  40788c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  407890:	bf16      	itet	ne
  407892:	4608      	movne	r0, r1
  407894:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  407898:	4601      	movne	r1, r0
  40789a:	0242      	lsls	r2, r0, #9
  40789c:	bf06      	itte	eq
  40789e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4078a2:	ea90 0f01 	teqeq	r0, r1
  4078a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4078aa:	4770      	bx	lr

004078ac <__aeabi_ui2f>:
  4078ac:	f04f 0300 	mov.w	r3, #0
  4078b0:	e004      	b.n	4078bc <__aeabi_i2f+0x8>
  4078b2:	bf00      	nop

004078b4 <__aeabi_i2f>:
  4078b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4078b8:	bf48      	it	mi
  4078ba:	4240      	negmi	r0, r0
  4078bc:	ea5f 0c00 	movs.w	ip, r0
  4078c0:	bf08      	it	eq
  4078c2:	4770      	bxeq	lr
  4078c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4078c8:	4601      	mov	r1, r0
  4078ca:	f04f 0000 	mov.w	r0, #0
  4078ce:	e01c      	b.n	40790a <__aeabi_l2f+0x2a>

004078d0 <__aeabi_ul2f>:
  4078d0:	ea50 0201 	orrs.w	r2, r0, r1
  4078d4:	bf08      	it	eq
  4078d6:	4770      	bxeq	lr
  4078d8:	f04f 0300 	mov.w	r3, #0
  4078dc:	e00a      	b.n	4078f4 <__aeabi_l2f+0x14>
  4078de:	bf00      	nop

004078e0 <__aeabi_l2f>:
  4078e0:	ea50 0201 	orrs.w	r2, r0, r1
  4078e4:	bf08      	it	eq
  4078e6:	4770      	bxeq	lr
  4078e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4078ec:	d502      	bpl.n	4078f4 <__aeabi_l2f+0x14>
  4078ee:	4240      	negs	r0, r0
  4078f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4078f4:	ea5f 0c01 	movs.w	ip, r1
  4078f8:	bf02      	ittt	eq
  4078fa:	4684      	moveq	ip, r0
  4078fc:	4601      	moveq	r1, r0
  4078fe:	2000      	moveq	r0, #0
  407900:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  407904:	bf08      	it	eq
  407906:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40790a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40790e:	fabc f28c 	clz	r2, ip
  407912:	3a08      	subs	r2, #8
  407914:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  407918:	db10      	blt.n	40793c <__aeabi_l2f+0x5c>
  40791a:	fa01 fc02 	lsl.w	ip, r1, r2
  40791e:	4463      	add	r3, ip
  407920:	fa00 fc02 	lsl.w	ip, r0, r2
  407924:	f1c2 0220 	rsb	r2, r2, #32
  407928:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40792c:	fa20 f202 	lsr.w	r2, r0, r2
  407930:	eb43 0002 	adc.w	r0, r3, r2
  407934:	bf08      	it	eq
  407936:	f020 0001 	biceq.w	r0, r0, #1
  40793a:	4770      	bx	lr
  40793c:	f102 0220 	add.w	r2, r2, #32
  407940:	fa01 fc02 	lsl.w	ip, r1, r2
  407944:	f1c2 0220 	rsb	r2, r2, #32
  407948:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40794c:	fa21 f202 	lsr.w	r2, r1, r2
  407950:	eb43 0002 	adc.w	r0, r3, r2
  407954:	bf08      	it	eq
  407956:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40795a:	4770      	bx	lr

0040795c <__aeabi_fmul>:
  40795c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407964:	bf1e      	ittt	ne
  407966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40796a:	ea92 0f0c 	teqne	r2, ip
  40796e:	ea93 0f0c 	teqne	r3, ip
  407972:	d06f      	beq.n	407a54 <__aeabi_fmul+0xf8>
  407974:	441a      	add	r2, r3
  407976:	ea80 0c01 	eor.w	ip, r0, r1
  40797a:	0240      	lsls	r0, r0, #9
  40797c:	bf18      	it	ne
  40797e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  407982:	d01e      	beq.n	4079c2 <__aeabi_fmul+0x66>
  407984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  407988:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40798c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  407990:	fba0 3101 	umull	r3, r1, r0, r1
  407994:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407998:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40799c:	bf3e      	ittt	cc
  40799e:	0049      	lslcc	r1, r1, #1
  4079a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4079a4:	005b      	lslcc	r3, r3, #1
  4079a6:	ea40 0001 	orr.w	r0, r0, r1
  4079aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4079ae:	2afd      	cmp	r2, #253	; 0xfd
  4079b0:	d81d      	bhi.n	4079ee <__aeabi_fmul+0x92>
  4079b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4079b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4079ba:	bf08      	it	eq
  4079bc:	f020 0001 	biceq.w	r0, r0, #1
  4079c0:	4770      	bx	lr
  4079c2:	f090 0f00 	teq	r0, #0
  4079c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4079ca:	bf08      	it	eq
  4079cc:	0249      	lsleq	r1, r1, #9
  4079ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4079d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4079d6:	3a7f      	subs	r2, #127	; 0x7f
  4079d8:	bfc2      	ittt	gt
  4079da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4079de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4079e2:	4770      	bxgt	lr
  4079e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4079e8:	f04f 0300 	mov.w	r3, #0
  4079ec:	3a01      	subs	r2, #1
  4079ee:	dc5d      	bgt.n	407aac <__aeabi_fmul+0x150>
  4079f0:	f112 0f19 	cmn.w	r2, #25
  4079f4:	bfdc      	itt	le
  4079f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4079fa:	4770      	bxle	lr
  4079fc:	f1c2 0200 	rsb	r2, r2, #0
  407a00:	0041      	lsls	r1, r0, #1
  407a02:	fa21 f102 	lsr.w	r1, r1, r2
  407a06:	f1c2 0220 	rsb	r2, r2, #32
  407a0a:	fa00 fc02 	lsl.w	ip, r0, r2
  407a0e:	ea5f 0031 	movs.w	r0, r1, rrx
  407a12:	f140 0000 	adc.w	r0, r0, #0
  407a16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  407a1a:	bf08      	it	eq
  407a1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  407a20:	4770      	bx	lr
  407a22:	f092 0f00 	teq	r2, #0
  407a26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407a2a:	bf02      	ittt	eq
  407a2c:	0040      	lsleq	r0, r0, #1
  407a2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407a32:	3a01      	subeq	r2, #1
  407a34:	d0f9      	beq.n	407a2a <__aeabi_fmul+0xce>
  407a36:	ea40 000c 	orr.w	r0, r0, ip
  407a3a:	f093 0f00 	teq	r3, #0
  407a3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407a42:	bf02      	ittt	eq
  407a44:	0049      	lsleq	r1, r1, #1
  407a46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407a4a:	3b01      	subeq	r3, #1
  407a4c:	d0f9      	beq.n	407a42 <__aeabi_fmul+0xe6>
  407a4e:	ea41 010c 	orr.w	r1, r1, ip
  407a52:	e78f      	b.n	407974 <__aeabi_fmul+0x18>
  407a54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407a58:	ea92 0f0c 	teq	r2, ip
  407a5c:	bf18      	it	ne
  407a5e:	ea93 0f0c 	teqne	r3, ip
  407a62:	d00a      	beq.n	407a7a <__aeabi_fmul+0x11e>
  407a64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407a68:	bf18      	it	ne
  407a6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407a6e:	d1d8      	bne.n	407a22 <__aeabi_fmul+0xc6>
  407a70:	ea80 0001 	eor.w	r0, r0, r1
  407a74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407a78:	4770      	bx	lr
  407a7a:	f090 0f00 	teq	r0, #0
  407a7e:	bf17      	itett	ne
  407a80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  407a84:	4608      	moveq	r0, r1
  407a86:	f091 0f00 	teqne	r1, #0
  407a8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  407a8e:	d014      	beq.n	407aba <__aeabi_fmul+0x15e>
  407a90:	ea92 0f0c 	teq	r2, ip
  407a94:	d101      	bne.n	407a9a <__aeabi_fmul+0x13e>
  407a96:	0242      	lsls	r2, r0, #9
  407a98:	d10f      	bne.n	407aba <__aeabi_fmul+0x15e>
  407a9a:	ea93 0f0c 	teq	r3, ip
  407a9e:	d103      	bne.n	407aa8 <__aeabi_fmul+0x14c>
  407aa0:	024b      	lsls	r3, r1, #9
  407aa2:	bf18      	it	ne
  407aa4:	4608      	movne	r0, r1
  407aa6:	d108      	bne.n	407aba <__aeabi_fmul+0x15e>
  407aa8:	ea80 0001 	eor.w	r0, r0, r1
  407aac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407ab8:	4770      	bx	lr
  407aba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407abe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  407ac2:	4770      	bx	lr

00407ac4 <__aeabi_fdiv>:
  407ac4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407ac8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407acc:	bf1e      	ittt	ne
  407ace:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  407ad2:	ea92 0f0c 	teqne	r2, ip
  407ad6:	ea93 0f0c 	teqne	r3, ip
  407ada:	d069      	beq.n	407bb0 <__aeabi_fdiv+0xec>
  407adc:	eba2 0203 	sub.w	r2, r2, r3
  407ae0:	ea80 0c01 	eor.w	ip, r0, r1
  407ae4:	0249      	lsls	r1, r1, #9
  407ae6:	ea4f 2040 	mov.w	r0, r0, lsl #9
  407aea:	d037      	beq.n	407b5c <__aeabi_fdiv+0x98>
  407aec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  407af0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  407af4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  407af8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407afc:	428b      	cmp	r3, r1
  407afe:	bf38      	it	cc
  407b00:	005b      	lslcc	r3, r3, #1
  407b02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  407b06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  407b0a:	428b      	cmp	r3, r1
  407b0c:	bf24      	itt	cs
  407b0e:	1a5b      	subcs	r3, r3, r1
  407b10:	ea40 000c 	orrcs.w	r0, r0, ip
  407b14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  407b18:	bf24      	itt	cs
  407b1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  407b1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407b22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  407b26:	bf24      	itt	cs
  407b28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  407b2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407b30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  407b34:	bf24      	itt	cs
  407b36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  407b3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407b3e:	011b      	lsls	r3, r3, #4
  407b40:	bf18      	it	ne
  407b42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  407b46:	d1e0      	bne.n	407b0a <__aeabi_fdiv+0x46>
  407b48:	2afd      	cmp	r2, #253	; 0xfd
  407b4a:	f63f af50 	bhi.w	4079ee <__aeabi_fmul+0x92>
  407b4e:	428b      	cmp	r3, r1
  407b50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407b54:	bf08      	it	eq
  407b56:	f020 0001 	biceq.w	r0, r0, #1
  407b5a:	4770      	bx	lr
  407b5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  407b60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407b64:	327f      	adds	r2, #127	; 0x7f
  407b66:	bfc2      	ittt	gt
  407b68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  407b6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407b70:	4770      	bxgt	lr
  407b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407b76:	f04f 0300 	mov.w	r3, #0
  407b7a:	3a01      	subs	r2, #1
  407b7c:	e737      	b.n	4079ee <__aeabi_fmul+0x92>
  407b7e:	f092 0f00 	teq	r2, #0
  407b82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407b86:	bf02      	ittt	eq
  407b88:	0040      	lsleq	r0, r0, #1
  407b8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407b8e:	3a01      	subeq	r2, #1
  407b90:	d0f9      	beq.n	407b86 <__aeabi_fdiv+0xc2>
  407b92:	ea40 000c 	orr.w	r0, r0, ip
  407b96:	f093 0f00 	teq	r3, #0
  407b9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407b9e:	bf02      	ittt	eq
  407ba0:	0049      	lsleq	r1, r1, #1
  407ba2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407ba6:	3b01      	subeq	r3, #1
  407ba8:	d0f9      	beq.n	407b9e <__aeabi_fdiv+0xda>
  407baa:	ea41 010c 	orr.w	r1, r1, ip
  407bae:	e795      	b.n	407adc <__aeabi_fdiv+0x18>
  407bb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407bb4:	ea92 0f0c 	teq	r2, ip
  407bb8:	d108      	bne.n	407bcc <__aeabi_fdiv+0x108>
  407bba:	0242      	lsls	r2, r0, #9
  407bbc:	f47f af7d 	bne.w	407aba <__aeabi_fmul+0x15e>
  407bc0:	ea93 0f0c 	teq	r3, ip
  407bc4:	f47f af70 	bne.w	407aa8 <__aeabi_fmul+0x14c>
  407bc8:	4608      	mov	r0, r1
  407bca:	e776      	b.n	407aba <__aeabi_fmul+0x15e>
  407bcc:	ea93 0f0c 	teq	r3, ip
  407bd0:	d104      	bne.n	407bdc <__aeabi_fdiv+0x118>
  407bd2:	024b      	lsls	r3, r1, #9
  407bd4:	f43f af4c 	beq.w	407a70 <__aeabi_fmul+0x114>
  407bd8:	4608      	mov	r0, r1
  407bda:	e76e      	b.n	407aba <__aeabi_fmul+0x15e>
  407bdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407be0:	bf18      	it	ne
  407be2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407be6:	d1ca      	bne.n	407b7e <__aeabi_fdiv+0xba>
  407be8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  407bec:	f47f af5c 	bne.w	407aa8 <__aeabi_fmul+0x14c>
  407bf0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  407bf4:	f47f af3c 	bne.w	407a70 <__aeabi_fmul+0x114>
  407bf8:	e75f      	b.n	407aba <__aeabi_fmul+0x15e>
  407bfa:	bf00      	nop

00407bfc <__gesf2>:
  407bfc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  407c00:	e006      	b.n	407c10 <__cmpsf2+0x4>
  407c02:	bf00      	nop

00407c04 <__lesf2>:
  407c04:	f04f 0c01 	mov.w	ip, #1
  407c08:	e002      	b.n	407c10 <__cmpsf2+0x4>
  407c0a:	bf00      	nop

00407c0c <__cmpsf2>:
  407c0c:	f04f 0c01 	mov.w	ip, #1
  407c10:	f84d cd04 	str.w	ip, [sp, #-4]!
  407c14:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407c20:	bf18      	it	ne
  407c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407c26:	d011      	beq.n	407c4c <__cmpsf2+0x40>
  407c28:	b001      	add	sp, #4
  407c2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  407c2e:	bf18      	it	ne
  407c30:	ea90 0f01 	teqne	r0, r1
  407c34:	bf58      	it	pl
  407c36:	ebb2 0003 	subspl.w	r0, r2, r3
  407c3a:	bf88      	it	hi
  407c3c:	17c8      	asrhi	r0, r1, #31
  407c3e:	bf38      	it	cc
  407c40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  407c44:	bf18      	it	ne
  407c46:	f040 0001 	orrne.w	r0, r0, #1
  407c4a:	4770      	bx	lr
  407c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407c50:	d102      	bne.n	407c58 <__cmpsf2+0x4c>
  407c52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  407c56:	d105      	bne.n	407c64 <__cmpsf2+0x58>
  407c58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  407c5c:	d1e4      	bne.n	407c28 <__cmpsf2+0x1c>
  407c5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  407c62:	d0e1      	beq.n	407c28 <__cmpsf2+0x1c>
  407c64:	f85d 0b04 	ldr.w	r0, [sp], #4
  407c68:	4770      	bx	lr
  407c6a:	bf00      	nop

00407c6c <__aeabi_cfrcmple>:
  407c6c:	4684      	mov	ip, r0
  407c6e:	4608      	mov	r0, r1
  407c70:	4661      	mov	r1, ip
  407c72:	e7ff      	b.n	407c74 <__aeabi_cfcmpeq>

00407c74 <__aeabi_cfcmpeq>:
  407c74:	b50f      	push	{r0, r1, r2, r3, lr}
  407c76:	f7ff ffc9 	bl	407c0c <__cmpsf2>
  407c7a:	2800      	cmp	r0, #0
  407c7c:	bf48      	it	mi
  407c7e:	f110 0f00 	cmnmi.w	r0, #0
  407c82:	bd0f      	pop	{r0, r1, r2, r3, pc}

00407c84 <__aeabi_fcmpeq>:
  407c84:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c88:	f7ff fff4 	bl	407c74 <__aeabi_cfcmpeq>
  407c8c:	bf0c      	ite	eq
  407c8e:	2001      	moveq	r0, #1
  407c90:	2000      	movne	r0, #0
  407c92:	f85d fb08 	ldr.w	pc, [sp], #8
  407c96:	bf00      	nop

00407c98 <__aeabi_fcmplt>:
  407c98:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c9c:	f7ff ffea 	bl	407c74 <__aeabi_cfcmpeq>
  407ca0:	bf34      	ite	cc
  407ca2:	2001      	movcc	r0, #1
  407ca4:	2000      	movcs	r0, #0
  407ca6:	f85d fb08 	ldr.w	pc, [sp], #8
  407caa:	bf00      	nop

00407cac <__aeabi_fcmple>:
  407cac:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cb0:	f7ff ffe0 	bl	407c74 <__aeabi_cfcmpeq>
  407cb4:	bf94      	ite	ls
  407cb6:	2001      	movls	r0, #1
  407cb8:	2000      	movhi	r0, #0
  407cba:	f85d fb08 	ldr.w	pc, [sp], #8
  407cbe:	bf00      	nop

00407cc0 <__aeabi_fcmpge>:
  407cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cc4:	f7ff ffd2 	bl	407c6c <__aeabi_cfrcmple>
  407cc8:	bf94      	ite	ls
  407cca:	2001      	movls	r0, #1
  407ccc:	2000      	movhi	r0, #0
  407cce:	f85d fb08 	ldr.w	pc, [sp], #8
  407cd2:	bf00      	nop

00407cd4 <__aeabi_fcmpgt>:
  407cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cd8:	f7ff ffc8 	bl	407c6c <__aeabi_cfrcmple>
  407cdc:	bf34      	ite	cc
  407cde:	2001      	movcc	r0, #1
  407ce0:	2000      	movcs	r0, #0
  407ce2:	f85d fb08 	ldr.w	pc, [sp], #8
  407ce6:	bf00      	nop

00407ce8 <__aeabi_f2iz>:
  407ce8:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407cec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407cf0:	d30f      	bcc.n	407d12 <__aeabi_f2iz+0x2a>
  407cf2:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407cf6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407cfa:	d90d      	bls.n	407d18 <__aeabi_f2iz+0x30>
  407cfc:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407d00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d04:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407d08:	fa23 f002 	lsr.w	r0, r3, r2
  407d0c:	bf18      	it	ne
  407d0e:	4240      	negne	r0, r0
  407d10:	4770      	bx	lr
  407d12:	f04f 0000 	mov.w	r0, #0
  407d16:	4770      	bx	lr
  407d18:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407d1c:	d101      	bne.n	407d22 <__aeabi_f2iz+0x3a>
  407d1e:	0242      	lsls	r2, r0, #9
  407d20:	d105      	bne.n	407d2e <__aeabi_f2iz+0x46>
  407d22:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  407d26:	bf08      	it	eq
  407d28:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407d2c:	4770      	bx	lr
  407d2e:	f04f 0000 	mov.w	r0, #0
  407d32:	4770      	bx	lr

00407d34 <__aeabi_f2uiz>:
  407d34:	0042      	lsls	r2, r0, #1
  407d36:	d20e      	bcs.n	407d56 <__aeabi_f2uiz+0x22>
  407d38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407d3c:	d30b      	bcc.n	407d56 <__aeabi_f2uiz+0x22>
  407d3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407d42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407d46:	d409      	bmi.n	407d5c <__aeabi_f2uiz+0x28>
  407d48:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d50:	fa23 f002 	lsr.w	r0, r3, r2
  407d54:	4770      	bx	lr
  407d56:	f04f 0000 	mov.w	r0, #0
  407d5a:	4770      	bx	lr
  407d5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407d60:	d101      	bne.n	407d66 <__aeabi_f2uiz+0x32>
  407d62:	0242      	lsls	r2, r0, #9
  407d64:	d102      	bne.n	407d6c <__aeabi_f2uiz+0x38>
  407d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  407d6a:	4770      	bx	lr
  407d6c:	f04f 0000 	mov.w	r0, #0
  407d70:	4770      	bx	lr
  407d72:	bf00      	nop
  407d74:	0a0d0a0d 	.word	0x0a0d0a0d
  407d78:	346d6173 	.word	0x346d6173
  407d7c:	63323364 	.word	0x63323364
  407d80:	756d6920 	.word	0x756d6920
  407d84:	6d656420 	.word	0x6d656420
  407d88:	2e2e2e6f 	.word	0x2e2e2e6f
  407d8c:	00000a0d 	.word	0x00000a0d
  407d90:	0000002e 	.word	0x0000002e
  407d94:	61656c70 	.word	0x61656c70
  407d98:	70206573 	.word	0x70206573
  407d9c:	73736572 	.word	0x73736572
  407da0:	74756220 	.word	0x74756220
  407da4:	206e6f74 	.word	0x206e6f74
  407da8:	61206f74 	.word	0x61206f74
  407dac:	6d206d72 	.word	0x6d206d72
  407db0:	726f746f 	.word	0x726f746f
  407db4:	000a0d73 	.word	0x000a0d73
  407db8:	6f746f6d 	.word	0x6f746f6d
  407dbc:	72615f72 	.word	0x72615f72
  407dc0:	3a64656d 	.word	0x3a64656d
  407dc4:	0d642520 	.word	0x0d642520
  407dc8:	0000000a 	.word	0x0000000a
  407dcc:	6c6c6f72 	.word	0x6c6c6f72
  407dd0:	7469702f 	.word	0x7469702f
  407dd4:	792f6863 	.word	0x792f6863
  407dd8:	65207761 	.word	0x65207761
  407ddc:	726f7272 	.word	0x726f7272
  407de0:	6469702f 	.word	0x6469702f
  407de4:	6625203a 	.word	0x6625203a
  407de8:	20662520 	.word	0x20662520
  407dec:	25206625 	.word	0x25206625
  407df0:	66252066 	.word	0x66252066
  407df4:	00000a0d 	.word	0x00000a0d
  407df8:	00787061 	.word	0x00787061
  407dfc:	642e5041 	.word	0x642e5041
  407e00:	72697365 	.word	0x72697365
  407e04:	615f6465 	.word	0x615f6465
  407e08:	656c676e 	.word	0x656c676e
  407e0c:	203a785f 	.word	0x203a785f
  407e10:	0a0d6625 	.word	0x0a0d6625
  407e14:	00000000 	.word	0x00000000
  407e18:	00797061 	.word	0x00797061
  407e1c:	642e5041 	.word	0x642e5041
  407e20:	72697365 	.word	0x72697365
  407e24:	615f6465 	.word	0x615f6465
  407e28:	656c676e 	.word	0x656c676e
  407e2c:	203a795f 	.word	0x203a795f
  407e30:	0a0d6625 	.word	0x0a0d6625
  407e34:	00000000 	.word	0x00000000
  407e38:	0000706b 	.word	0x0000706b
  407e3c:	666e6f63 	.word	0x666e6f63
  407e40:	702e6769 	.word	0x702e6769
  407e44:	6b5f6469 	.word	0x6b5f6469
  407e48:	25203a70 	.word	0x25203a70
  407e4c:	000a0d66 	.word	0x000a0d66
  407e50:	0000696b 	.word	0x0000696b
  407e54:	666e6f63 	.word	0x666e6f63
  407e58:	702e6769 	.word	0x702e6769
  407e5c:	6b5f6469 	.word	0x6b5f6469
  407e60:	25203a69 	.word	0x25203a69
  407e64:	000a0d66 	.word	0x000a0d66
  407e68:	0000646b 	.word	0x0000646b
  407e6c:	666e6f63 	.word	0x666e6f63
  407e70:	702e6769 	.word	0x702e6769
  407e74:	6b5f6469 	.word	0x6b5f6469
  407e78:	25203a64 	.word	0x25203a64
  407e7c:	000a0d66 	.word	0x000a0d66
  407e80:	5f756d69 	.word	0x5f756d69
  407e84:	696c6163 	.word	0x696c6163
  407e88:	74617262 	.word	0x74617262
  407e8c:	00000065 	.word	0x00000065
  407e90:	5f756d69 	.word	0x5f756d69
  407e94:	696c6163 	.word	0x696c6163
  407e98:	74617262 	.word	0x74617262
  407e9c:	25203a65 	.word	0x25203a65
  407ea0:	000a0d64 	.word	0x000a0d64
  407ea4:	6f746f6d 	.word	0x6f746f6d
  407ea8:	72615f72 	.word	0x72615f72
  407eac:	0064656d 	.word	0x0064656d
  407eb0:	6f746f6d 	.word	0x6f746f6d
  407eb4:	666f5f72 	.word	0x666f5f72
  407eb8:	74657366 	.word	0x74657366
  407ebc:	00000000 	.word	0x00000000
  407ec0:	6f746f6d 	.word	0x6f746f6d
  407ec4:	666f5f72 	.word	0x666f5f72
  407ec8:	74657366 	.word	0x74657366
  407ecc:	6425203a 	.word	0x6425203a
  407ed0:	00000a0d 	.word	0x00000a0d
  407ed4:	6f746f6d 	.word	0x6f746f6d
  407ed8:	696d5f72 	.word	0x696d5f72
  407edc:	0000006e 	.word	0x0000006e
  407ee0:	6f746f6d 	.word	0x6f746f6d
  407ee4:	696d2072 	.word	0x696d2072
  407ee8:	6f63206e 	.word	0x6f63206e
  407eec:	6e616d6d 	.word	0x6e616d6d
  407ef0:	73692064 	.word	0x73692064
  407ef4:	64657573 	.word	0x64657573
  407ef8:	00000a0d 	.word	0x00000a0d
  407efc:	6f746f6d 	.word	0x6f746f6d
  407f00:	696d5f72 	.word	0x696d5f72
  407f04:	00000064 	.word	0x00000064
  407f08:	6f746f6d 	.word	0x6f746f6d
  407f0c:	696d2072 	.word	0x696d2072
  407f10:	6f632064 	.word	0x6f632064
  407f14:	6e616d6d 	.word	0x6e616d6d
  407f18:	73692064 	.word	0x73692064
  407f1c:	64657573 	.word	0x64657573
  407f20:	00000a0d 	.word	0x00000a0d
  407f24:	6f746f6d 	.word	0x6f746f6d
  407f28:	616d5f72 	.word	0x616d5f72
  407f2c:	00000078 	.word	0x00000078
  407f30:	6f746f6d 	.word	0x6f746f6d
  407f34:	616d2072 	.word	0x616d2072
  407f38:	6f632078 	.word	0x6f632078
  407f3c:	6e616d6d 	.word	0x6e616d6d
  407f40:	73692064 	.word	0x73692064
  407f44:	64657573 	.word	0x64657573
  407f48:	00000a0d 	.word	0x00000a0d
  407f4c:	5f676f6c 	.word	0x5f676f6c
  407f50:	00756d69 	.word	0x00756d69
  407f54:	5f676f6c 	.word	0x5f676f6c
  407f58:	3a756d69 	.word	0x3a756d69
  407f5c:	0d642520 	.word	0x0d642520
  407f60:	0000000a 	.word	0x0000000a
  407f64:	5f676f6c 	.word	0x5f676f6c
  407f68:	6f746f6d 	.word	0x6f746f6d
  407f6c:	00000072 	.word	0x00000072
  407f70:	5f676f6c 	.word	0x5f676f6c
  407f74:	6f746f6d 	.word	0x6f746f6d
  407f78:	25203a72 	.word	0x25203a72
  407f7c:	000a0d64 	.word	0x000a0d64
  407f80:	00000020 	.word	0x00000020
  407f84:	5f697774 	.word	0x5f697774
  407f88:	7473616d 	.word	0x7473616d
  407f8c:	695f7265 	.word	0x695f7265
  407f90:	3a74696e 	.word	0x3a74696e
  407f94:	69616620 	.word	0x69616620
  407f98:	0d64656c 	.word	0x0d64656c
  407f9c:	0000000a 	.word	0x0000000a
  407fa0:	5f697774 	.word	0x5f697774
  407fa4:	7473616d 	.word	0x7473616d
  407fa8:	695f7265 	.word	0x695f7265
  407fac:	3a74696e 	.word	0x3a74696e
  407fb0:	63757320 	.word	0x63757320
  407fb4:	73736563 	.word	0x73736563
  407fb8:	00000a0d 	.word	0x00000a0d
  407fbc:	5f697774 	.word	0x5f697774
  407fc0:	626f7270 	.word	0x626f7270
  407fc4:	66203a65 	.word	0x66203a65
  407fc8:	656c6961 	.word	0x656c6961
  407fcc:	000a0d64 	.word	0x000a0d64
  407fd0:	5f697774 	.word	0x5f697774
  407fd4:	626f7270 	.word	0x626f7270
  407fd8:	73203a65 	.word	0x73203a65
  407fdc:	65636375 	.word	0x65636375
  407fe0:	0a0d7373 	.word	0x0a0d7373
  407fe4:	00000000 	.word	0x00000000
  407fe8:	62616e45 	.word	0x62616e45
  407fec:	0064656c 	.word	0x0064656c
  407ff0:	61736944 	.word	0x61736944
  407ff4:	64656c62 	.word	0x64656c62
  407ff8:	00000000 	.word	0x00000000
  407ffc:	69766544 	.word	0x69766544
  408000:	203a6563 	.word	0x203a6563
  408004:	31257830 	.word	0x31257830
  408008:	000a0d78 	.word	0x000a0d78
  40800c:	65656c53 	.word	0x65656c53
  408010:	6f4d2070 	.word	0x6f4d2070
  408014:	203a6564 	.word	0x203a6564
  408018:	0a0d7325 	.word	0x0a0d7325
  40801c:	00000000 	.word	0x00000000
  408020:	636f6c43 	.word	0x636f6c43
  408024:	6f53206b 	.word	0x6f53206b
  408028:	65637275 	.word	0x65637275
  40802c:	0000203a 	.word	0x0000203a
  408030:	65746e49 	.word	0x65746e49
  408034:	6c616e72 	.word	0x6c616e72
  408038:	484d3820 	.word	0x484d3820
  40803c:	736f207a 	.word	0x736f207a
  408040:	6c6c6963 	.word	0x6c6c6963
  408044:	726f7461 	.word	0x726f7461
  408048:	00000a0d 	.word	0x00000a0d
  40804c:	204c4c50 	.word	0x204c4c50
  408050:	68746977 	.word	0x68746977
  408054:	61205820 	.word	0x61205820
  408058:	20736978 	.word	0x20736978
  40805c:	6f727967 	.word	0x6f727967
  408060:	706f6373 	.word	0x706f6373
  408064:	65722065 	.word	0x65722065
  408068:	65726566 	.word	0x65726566
  40806c:	0d65636e 	.word	0x0d65636e
  408070:	0000000a 	.word	0x0000000a
  408074:	6f727947 	.word	0x6f727947
  408078:	706f6373 	.word	0x706f6373
  40807c:	00203a65 	.word	0x00203a65
  408080:	20303532 	.word	0x20303532
  408084:	0d737064 	.word	0x0d737064
  408088:	0000000a 	.word	0x0000000a
  40808c:	20303035 	.word	0x20303035
  408090:	0d737064 	.word	0x0d737064
  408094:	0000000a 	.word	0x0000000a
  408098:	30303031 	.word	0x30303031
  40809c:	73706420 	.word	0x73706420
  4080a0:	00000a0d 	.word	0x00000a0d
  4080a4:	30303032 	.word	0x30303032
  4080a8:	73706420 	.word	0x73706420
  4080ac:	00000a0d 	.word	0x00000a0d
  4080b0:	5f657375 	.word	0x5f657375
  4080b4:	696c6163 	.word	0x696c6163
  4080b8:	74617262 	.word	0x74617262
  4080bc:	25203a65 	.word	0x25203a65
  4080c0:	000a0d64 	.word	0x000a0d64
  4080c4:	75746361 	.word	0x75746361
  4080c8:	745f6c61 	.word	0x745f6c61
  4080cc:	73657268 	.word	0x73657268
  4080d0:	646c6f68 	.word	0x646c6f68
  4080d4:	6625203a 	.word	0x6625203a
  4080d8:	00000a0d 	.word	0x00000a0d
  4080dc:	5f737064 	.word	0x5f737064
  4080e0:	5f726570 	.word	0x5f726570
  4080e4:	69676964 	.word	0x69676964
  4080e8:	25203a74 	.word	0x25203a74
  4080ec:	000a0d66 	.word	0x000a0d66
  4080f0:	676e6172 	.word	0x676e6172
  4080f4:	65705f65 	.word	0x65705f65
  4080f8:	69645f72 	.word	0x69645f72
  4080fc:	3a746967 	.word	0x3a746967
  408100:	0d662520 	.word	0x0d662520
  408104:	0000000a 	.word	0x0000000a
  408108:	696c6163 	.word	0x696c6163
  40810c:	74617262 	.word	0x74617262
  408110:	20676e69 	.word	0x20676e69
  408114:	2e756d69 	.word	0x2e756d69
  408118:	0a0d2e2e 	.word	0x0a0d2e2e
  40811c:	00000000 	.word	0x00000000
  408120:	696c6163 	.word	0x696c6163
  408124:	74617262 	.word	0x74617262
  408128:	206e6f69 	.word	0x206e6f69
  40812c:	706d6f63 	.word	0x706d6f63
  408130:	6574656c 	.word	0x6574656c
  408134:	000a0d2e 	.word	0x000a0d2e
  408138:	6f746f6d 	.word	0x6f746f6d
  40813c:	6e695f72 	.word	0x6e695f72
  408140:	0a0d7469 	.word	0x0a0d7469
  408144:	00000000 	.word	0x00000000
  408148:	6f746f6d 	.word	0x6f746f6d
  40814c:	756f5f72 	.word	0x756f5f72
  408150:	74757074 	.word	0x74757074
  408154:	6425203a 	.word	0x6425203a
  408158:	00000a0d 	.word	0x00000a0d
  40815c:	00000001 	.word	0x00000001
  408160:	00000002 	.word	0x00000002
  408164:	00000004 	.word	0x00000004
  408168:	00000008 	.word	0x00000008
  40816c:	00000010 	.word	0x00000010
  408170:	00000020 	.word	0x00000020
  408174:	00000040 	.word	0x00000040
  408178:	00000080 	.word	0x00000080
  40817c:	00000100 	.word	0x00000100
  408180:	00000200 	.word	0x00000200
  408184:	00000400 	.word	0x00000400
  408188:	74727173 	.word	0x74727173
  40818c:	00000000 	.word	0x00000000

00408190 <atanlo>:
  408190:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  4081a0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

004081b0 <atanhi>:
  4081b0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  4081c0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

004081d0 <_global_impure_ptr>:
  4081d0:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  4081e0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4081f0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  408200:	63626139 00666564                       9abcdef.

00408208 <tinytens>:
  408208:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  408218:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  408228:	64ac6f43 11680628                       Co.d(.h.

00408230 <fpi.6179>:
  408230:	00000035 fffffbce 000003cb 00000001     5...............
  408240:	00000000                                ....

00408244 <fpinan.6215>:
  408244:	00000034 fffffbce 000003cb 00000001     4...............
  408254:	00000000 69666e49 7974696e 4e614e00     ....Infinity.NaN
  408264:	00000000                                ....

00408268 <__sf_fake_stdin>:
	...

00408288 <__sf_fake_stdout>:
	...

004082a8 <__sf_fake_stderr>:
	...
  4082c8:	4f500043 00584953 0000002e 00000000     C.POSIX.........

004082d8 <__mprec_tens>:
  4082d8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4082e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4082f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408308:	00000000 412e8480 00000000 416312d0     .......A......cA
  408318:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408328:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408338:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408348:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408358:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408368:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408378:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408388:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408398:	79d99db4 44ea7843                       ...yCx.D

004083a0 <__mprec_bigtens>:
  4083a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4083b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4083c0:	7f73bf3c 75154fdd                       <.s..O.u

004083c8 <p05.6097>:
  4083c8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4083d8:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

004083e5 <_ctype_>:
  4083e5:	20202000 20202020 28282020 20282828     .         ((((( 
  4083f5:	20202020 20202020 20202020 20202020                     
  408405:	10108820 10101010 10101010 10101010      ...............
  408415:	04040410 04040404 10040404 10101010     ................
  408425:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408435:	01010101 01010101 01010101 10101010     ................
  408445:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408455:	02020202 02020202 02020202 10101010     ................
  408465:	00000020 00000000 00000000 00000000      ...............
	...

004084e8 <_init>:
  4084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4084ea:	bf00      	nop
  4084ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4084ee:	bc08      	pop	{r3}
  4084f0:	469e      	mov	lr, r3
  4084f2:	4770      	bx	lr

004084f4 <__init_array_start>:
  4084f4:	004000f1 	.word	0x004000f1

004084f8 <_fini>:
  4084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4084fa:	bf00      	nop
  4084fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4084fe:	bc08      	pop	{r3}
  408500:	469e      	mov	lr, r3
  408502:	4770      	bx	lr
  408504:	0000      	movs	r0, r0
	...

00408508 <__portable_delay_cycles_veneer>:
  408508:	f85f f000 	ldr.w	pc, [pc]	; 40850c <__portable_delay_cycles_veneer+0x4>
  40850c:	20000001 	.word	0x20000001

00408510 <__fini_array_start>:
  408510:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <kp>:
2000000c:	0000 3f80                                   ...?

20000010 <SystemCoreClock>:
20000010:	0900 003d                                   ..=.

20000014 <__fdlib_version>:
20000014:	0001 0000                                   ....

20000018 <impure_data>:
20000018:	0000 0000 8268 0040 8288 0040 82a8 0040     ....h.@...@...@.
	...

20000078 <_impure_ptr>:
20000078:	0018 2000                                   ... 

2000007c <__global_locale>:
2000007c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000009c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000011c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000013c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000015c:	6c51 0040 5eed 0040 0000 0000 83e5 0040     Ql@..^@.......@.
2000016c:	82d0 0040 83d9 0040 83d9 0040 83d9 0040     ..@...@...@...@.
2000017c:	83d9 0040 83d9 0040 83d9 0040 83d9 0040     ..@...@...@...@.
2000018c:	83d9 0040 83d9 0040 ffff ffff ffff ffff     ..@...@.........
2000019c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
