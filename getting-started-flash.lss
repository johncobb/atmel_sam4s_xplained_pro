
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000631c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  0040631c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000190  200001e4  00406500  000201e4  2**2
                  ALLOC
  3 .stack        00003004  20000374  00406690  000201e4  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010530  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d38  00000000  00000000  000307ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005a01  00000000  00000000  000334e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d90  00000000  00000000  00038ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c40  00000000  00000000  00039c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000166b5  00000000  00000000  0003a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010036  00000000  00000000  00050f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00055261  00000000  00000000  00060fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cbc  00000000  00000000  000b6204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003378 	.word	0x20003378
  400004:	00401a89 	.word	0x00401a89
  400008:	00401a85 	.word	0x00401a85
  40000c:	00401a85 	.word	0x00401a85
  400010:	00401a85 	.word	0x00401a85
  400014:	00401a85 	.word	0x00401a85
  400018:	00401a85 	.word	0x00401a85
	...
  40002c:	00401a85 	.word	0x00401a85
  400030:	00401a85 	.word	0x00401a85
  400034:	00000000 	.word	0x00000000
  400038:	00401a85 	.word	0x00401a85
  40003c:	00400435 	.word	0x00400435
  400040:	00401a85 	.word	0x00401a85
  400044:	00401a85 	.word	0x00401a85
  400048:	00401a85 	.word	0x00401a85
  40004c:	00401a85 	.word	0x00401a85
  400050:	00401a85 	.word	0x00401a85
  400054:	00401a85 	.word	0x00401a85
  400058:	00401a85 	.word	0x00401a85
  40005c:	00401a85 	.word	0x00401a85
  400060:	00401a85 	.word	0x00401a85
  400064:	00401a85 	.word	0x00401a85
  400068:	00000000 	.word	0x00000000
  40006c:	004016cd 	.word	0x004016cd
  400070:	004016dd 	.word	0x004016dd
  400074:	004016ed 	.word	0x004016ed
  400078:	00401a85 	.word	0x00401a85
  40007c:	00401a85 	.word	0x00401a85
	...
  400088:	00401a85 	.word	0x00401a85
  40008c:	00401a85 	.word	0x00401a85
  400090:	00401a85 	.word	0x00401a85
  400094:	00401a85 	.word	0x00401a85
  400098:	00401a85 	.word	0x00401a85
  40009c:	00401a85 	.word	0x00401a85
  4000a0:	00401a85 	.word	0x00401a85
  4000a4:	00401a85 	.word	0x00401a85
  4000a8:	00401a85 	.word	0x00401a85
  4000ac:	00401a85 	.word	0x00401a85
  4000b0:	00401a85 	.word	0x00401a85
  4000b4:	00401a85 	.word	0x00401a85
  4000b8:	00401a85 	.word	0x00401a85
  4000bc:	00401a85 	.word	0x00401a85
  4000c0:	00401a85 	.word	0x00401a85
  4000c4:	00401a85 	.word	0x00401a85
  4000c8:	00401a85 	.word	0x00401a85

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e4 	.word	0x200001e4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040631c 	.word	0x0040631c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001e8 	.word	0x200001e8
  40011c:	0040631c 	.word	0x0040631c
  400120:	0040631c 	.word	0x0040631c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 fd8a 	bl	401c44 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 fb16 	bl	401764 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 fb3e 	bl	4017b8 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 fb42 	bl	4017c8 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 fb45 	bl	4017d8 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 fad2 	bl	4016fc <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f001 fcea 	bl	401b30 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f001 fd71 	bl	401c44 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	200002c4 	.word	0x200002c4
  4001a8:	200002bc 	.word	0x200002bc

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200002c0 	.word	0x200002c0
  4001f8:	200002c4 	.word	0x200002c4

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 fb3a 	bl	40188c <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 fb2f 	bl	40188c <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 fb38 	bl	4018b4 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 fb2b 	bl	4018b4 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 faf6 	bl	40187c <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 faea 	bl	40187c <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 faf0 	bl	4018a0 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 fae4 	bl	4018a0 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
}



int main(void)
{
  4002f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4002f8:	b089      	sub	sp, #36	; 0x24
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f000 fe97 	bl	401030 <board_init>

   

    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 fa70 	bl	4017e8 <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 fa6d 	bl	4017e8 <pmc_enable_periph_clk>
    cph_millis_init();
  40030e:	f000 f899 	bl	400444 <cph_millis_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400312:	2009      	movs	r0, #9
  400314:	f001 fa68 	bl	4017e8 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400318:	4c35      	ldr	r4, [pc, #212]	; (4003f0 <main+0xfc>)
  40031a:	4b36      	ldr	r3, [pc, #216]	; (4003f4 <main+0x100>)
  40031c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40031e:	4a36      	ldr	r2, [pc, #216]	; (4003f8 <main+0x104>)
  400320:	4b36      	ldr	r3, [pc, #216]	; (4003fc <main+0x108>)
  400322:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400324:	4a36      	ldr	r2, [pc, #216]	; (400400 <main+0x10c>)
  400326:	4b37      	ldr	r3, [pc, #220]	; (400404 <main+0x110>)
  400328:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40032a:	4b37      	ldr	r3, [pc, #220]	; (400408 <main+0x114>)
  40032c:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
  40032e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400332:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
  400334:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400338:	9307      	str	r3, [sp, #28]
  40033a:	2009      	movs	r0, #9
  40033c:	f001 fa54 	bl	4017e8 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400340:	a905      	add	r1, sp, #20
  400342:	4620      	mov	r0, r4
  400344:	f001 fa7e 	bl	401844 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400348:	4c30      	ldr	r4, [pc, #192]	; (40040c <main+0x118>)
  40034a:	6823      	ldr	r3, [r4, #0]
  40034c:	2100      	movs	r1, #0
  40034e:	6898      	ldr	r0, [r3, #8]
  400350:	f002 fd98 	bl	402e84 <setbuf>
	setbuf(stdin, NULL);
  400354:	6823      	ldr	r3, [r4, #0]
  400356:	2100      	movs	r1, #0
  400358:	6858      	ldr	r0, [r3, #4]
  40035a:	f002 fd93 	bl	402e84 <setbuf>
    configure_console();

    servo_init();
  40035e:	f000 fe0f 	bl	400f80 <servo_init>
    
    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  400362:	482b      	ldr	r0, [pc, #172]	; (400410 <main+0x11c>)
  400364:	f002 fd86 	bl	402e74 <puts>
  400368:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        printf(".");
  40036a:	4e2a      	ldr	r6, [pc, #168]	; (400414 <main+0x120>)
        delay_ms(250);
  40036c:	4d2a      	ldr	r5, [pc, #168]	; (400418 <main+0x124>)
    servo_init();
    
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        printf(".");
  40036e:	4630      	mov	r0, r6
  400370:	f002 fd0e 	bl	402d90 <iprintf>
        delay_ms(250);
  400374:	4628      	mov	r0, r5
  400376:	f005 ffcb 	bl	406310 <__portable_delay_cycles_veneer>

    servo_init();
    
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  40037a:	3c01      	subs	r4, #1
  40037c:	d1f7      	bne.n	40036e <main+0x7a>
        printf(".");
        delay_ms(250);
    }
    printf("\r\n");
  40037e:	4827      	ldr	r0, [pc, #156]	; (40041c <main+0x128>)
  400380:	f002 fd06 	bl	402d90 <iprintf>

    
    if (imu_init()) {
  400384:	f000 fcc6 	bl	400d14 <imu_init>
  400388:	2800      	cmp	r0, #0
  40038a:	d02d      	beq.n	4003e8 <main+0xf4>

        // Calibrate the imu
        imu_calibrate();
  40038c:	f000 fcd0 	bl	400d30 <imu_calibrate>

        while(true) {
            imu_update();

            if (cph_get_millis() >= f_servo_timeout) {
  400390:	4c23      	ldr	r4, [pc, #140]	; (400420 <main+0x12c>)
  400392:	4d24      	ldr	r5, [pc, #144]	; (400424 <main+0x130>)
                f_servo_timeout = cph_get_millis() + 100;
                servo_set_angle(imu_complementary.y_axis);
  400394:	4f24      	ldr	r7, [pc, #144]	; (400428 <main+0x134>)
            }

            if (cph_get_millis() >= f_log_timeout) {
  400396:	4e25      	ldr	r6, [pc, #148]	; (40042c <main+0x138>)

        // Calibrate the imu
        imu_calibrate();

        while(true) {
            imu_update();
  400398:	f000 fcd6 	bl	400d48 <imu_update>

            if (cph_get_millis() >= f_servo_timeout) {
  40039c:	6822      	ldr	r2, [r4, #0]
  40039e:	682b      	ldr	r3, [r5, #0]
  4003a0:	429a      	cmp	r2, r3
  4003a2:	d305      	bcc.n	4003b0 <main+0xbc>
                f_servo_timeout = cph_get_millis() + 100;
  4003a4:	6823      	ldr	r3, [r4, #0]
  4003a6:	3364      	adds	r3, #100	; 0x64
  4003a8:	602b      	str	r3, [r5, #0]
                servo_set_angle(imu_complementary.y_axis);
  4003aa:	6878      	ldr	r0, [r7, #4]
  4003ac:	f000 fe24 	bl	400ff8 <servo_set_angle>
            }

            if (cph_get_millis() >= f_log_timeout) {
  4003b0:	6822      	ldr	r2, [r4, #0]
  4003b2:	6833      	ldr	r3, [r6, #0]
  4003b4:	429a      	cmp	r2, r3
  4003b6:	d3ef      	bcc.n	400398 <main+0xa4>
                f_log_timeout = cph_get_millis() + 50;
  4003b8:	6823      	ldr	r3, [r4, #0]
  4003ba:	3332      	adds	r3, #50	; 0x32
  4003bc:	6033      	str	r3, [r6, #0]
                printf("roll/pitch/yaw: %f %f %f\r\n", imu_complementary.x_axis, imu_complementary.y_axis, imu_complementary.z_axis);
  4003be:	6838      	ldr	r0, [r7, #0]
  4003c0:	f004 fe70 	bl	4050a4 <__aeabi_f2d>
  4003c4:	4680      	mov	r8, r0
  4003c6:	4689      	mov	r9, r1
  4003c8:	68b8      	ldr	r0, [r7, #8]
  4003ca:	f004 fe6b 	bl	4050a4 <__aeabi_f2d>
  4003ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4003d2:	6878      	ldr	r0, [r7, #4]
  4003d4:	f004 fe66 	bl	4050a4 <__aeabi_f2d>
  4003d8:	e9cd 0100 	strd	r0, r1, [sp]
  4003dc:	4642      	mov	r2, r8
  4003de:	464b      	mov	r3, r9
  4003e0:	4813      	ldr	r0, [pc, #76]	; (400430 <main+0x13c>)
  4003e2:	f002 fcd5 	bl	402d90 <iprintf>
  4003e6:	e7d7      	b.n	400398 <main+0xa4>
    //         ioport_toggle_pin_level(LED0_GPIO);
    //         delay_ms(500); 
    //     }

    // }
}
  4003e8:	2000      	movs	r0, #0
  4003ea:	b009      	add	sp, #36	; 0x24
  4003ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4003f0:	400e0800 	.word	0x400e0800
  4003f4:	200002c4 	.word	0x200002c4
  4003f8:	0040027d 	.word	0x0040027d
  4003fc:	200002c0 	.word	0x200002c0
  400400:	004001fd 	.word	0x004001fd
  400404:	200002bc 	.word	0x200002bc
  400408:	07270e00 	.word	0x07270e00
  40040c:	20000074 	.word	0x20000074
  400410:	00405dd0 	.word	0x00405dd0
  400414:	00405dec 	.word	0x00405dec
  400418:	0020b28a 	.word	0x0020b28a
  40041c:	00405de8 	.word	0x00405de8
  400420:	20000208 	.word	0x20000208
  400424:	20000200 	.word	0x20000200
  400428:	20000338 	.word	0x20000338
  40042c:	20000204 	.word	0x20000204
  400430:	00405df0 	.word	0x00405df0

00400434 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  400434:	4a02      	ldr	r2, [pc, #8]	; (400440 <SysTick_Handler+0xc>)
  400436:	6813      	ldr	r3, [r2, #0]
  400438:	3301      	adds	r3, #1
  40043a:	6013      	str	r3, [r2, #0]
  40043c:	4770      	bx	lr
  40043e:	bf00      	nop
  400440:	20000208 	.word	0x20000208

00400444 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400444:	4b05      	ldr	r3, [pc, #20]	; (40045c <cph_millis_init+0x18>)
  400446:	4a06      	ldr	r2, [pc, #24]	; (400460 <cph_millis_init+0x1c>)
  400448:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40044a:	21f0      	movs	r1, #240	; 0xf0
  40044c:	4a05      	ldr	r2, [pc, #20]	; (400464 <cph_millis_init+0x20>)
  40044e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400452:	2200      	movs	r2, #0
  400454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400456:	2207      	movs	r2, #7
  400458:	601a      	str	r2, [r3, #0]
  40045a:	4770      	bx	lr
  40045c:	e000e010 	.word	0xe000e010
  400460:	0001d4bf 	.word	0x0001d4bf
  400464:	e000ed00 	.word	0xe000ed00

00400468 <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  400468:	b500      	push	{lr}
  40046a:	b089      	sub	sp, #36	; 0x24
  40046c:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  400470:	2368      	movs	r3, #104	; 0x68
  400472:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  400476:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  40047a:	2301      	movs	r3, #1
  40047c:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  40047e:	f10d 0207 	add.w	r2, sp, #7
  400482:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  400484:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  400486:	a903      	add	r1, sp, #12
  400488:	4806      	ldr	r0, [pc, #24]	; (4004a4 <write_register8+0x3c>)
  40048a:	f000 ff2b 	bl	4012e4 <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  40048e:	b910      	cbnz	r0, 400496 <write_register8+0x2e>
        puts("write_register: success\r\n");
  400490:	4805      	ldr	r0, [pc, #20]	; (4004a8 <write_register8+0x40>)
  400492:	f002 fcef 	bl	402e74 <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  400496:	4805      	ldr	r0, [pc, #20]	; (4004ac <write_register8+0x44>)
  400498:	f005 ff3a 	bl	406310 <__portable_delay_cycles_veneer>
}
  40049c:	b009      	add	sp, #36	; 0x24
  40049e:	f85d fb04 	ldr.w	pc, [sp], #4
  4004a2:	bf00      	nop
  4004a4:	40018000 	.word	0x40018000
  4004a8:	00405e0c 	.word	0x00405e0c
  4004ac:	00014ed3 	.word	0x00014ed3

004004b0 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  4004b0:	b510      	push	{r4, lr}
  4004b2:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4004b4:	4b0e      	ldr	r3, [pc, #56]	; (4004f0 <read_register8+0x40>)
  4004b6:	2200      	movs	r2, #0
  4004b8:	601a      	str	r2, [r3, #0]
  4004ba:	605a      	str	r2, [r3, #4]
  4004bc:	609a      	str	r2, [r3, #8]
  4004be:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4004c0:	2268      	movs	r2, #104	; 0x68
  4004c2:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  4004c6:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4004ca:	2201      	movs	r2, #1
  4004cc:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  4004ce:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4004d0:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4004d2:	a901      	add	r1, sp, #4
  4004d4:	4807      	ldr	r0, [pc, #28]	; (4004f4 <read_register8+0x44>)
  4004d6:	f000 fe9d 	bl	401214 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4004da:	b910      	cbnz	r0, 4004e2 <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  4004dc:	4b04      	ldr	r3, [pc, #16]	; (4004f0 <read_register8+0x40>)
  4004de:	781c      	ldrb	r4, [r3, #0]
  4004e0:	e000      	b.n	4004e4 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  4004e2:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  4004e4:	4804      	ldr	r0, [pc, #16]	; (4004f8 <read_register8+0x48>)
  4004e6:	f005 ff13 	bl	406310 <__portable_delay_cycles_veneer>

    return value;
}
  4004ea:	4620      	mov	r0, r4
  4004ec:	b006      	add	sp, #24
  4004ee:	bd10      	pop	{r4, pc}
  4004f0:	2000020c 	.word	0x2000020c
  4004f4:	40018000 	.word	0x40018000
  4004f8:	00014ed3 	.word	0x00014ed3

004004fc <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  4004fc:	b510      	push	{r4, lr}
  4004fe:	b086      	sub	sp, #24
  400500:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400502:	4b0c      	ldr	r3, [pc, #48]	; (400534 <read_bytes+0x38>)
  400504:	2100      	movs	r1, #0
  400506:	6019      	str	r1, [r3, #0]
  400508:	6059      	str	r1, [r3, #4]
  40050a:	6099      	str	r1, [r3, #8]
  40050c:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  40050e:	2368      	movs	r3, #104	; 0x68
  400510:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  400514:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400518:	2301      	movs	r3, #1
  40051a:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  40051c:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  40051e:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400520:	a901      	add	r1, sp, #4
  400522:	4805      	ldr	r0, [pc, #20]	; (400538 <read_bytes+0x3c>)
  400524:	f000 fe76 	bl	401214 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400528:	4804      	ldr	r0, [pc, #16]	; (40053c <read_bytes+0x40>)
  40052a:	f005 fef1 	bl	406310 <__portable_delay_cycles_veneer>

    return length;
}
  40052e:	b2e0      	uxtb	r0, r4
  400530:	b006      	add	sp, #24
  400532:	bd10      	pop	{r4, pc}
  400534:	2000020c 	.word	0x2000020c
  400538:	40018000 	.word	0x40018000
  40053c:	00014ed3 	.word	0x00014ed3

00400540 <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  400540:	b570      	push	{r4, r5, r6, lr}
  400542:	4604      	mov	r4, r0
  400544:	460d      	mov	r5, r1
  400546:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400548:	f7ff ffb2 	bl	4004b0 <read_register8>

    if (state) {
  40054c:	b126      	cbz	r6, 400558 <write_register_bit+0x18>
        value |= (1 << pos);
  40054e:	2101      	movs	r1, #1
  400550:	40a9      	lsls	r1, r5
  400552:	4301      	orrs	r1, r0
  400554:	b2c9      	uxtb	r1, r1
  400556:	e004      	b.n	400562 <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400558:	2101      	movs	r1, #1
  40055a:	40a9      	lsls	r1, r5
  40055c:	ea20 0101 	bic.w	r1, r0, r1
  400560:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  400562:	4620      	mov	r0, r4
  400564:	f7ff ff80 	bl	400468 <write_register8>
  400568:	bd70      	pop	{r4, r5, r6, pc}
  40056a:	bf00      	nop

0040056c <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  40056c:	b510      	push	{r4, lr}
  40056e:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  400570:	f7ff ff9e 	bl	4004b0 <read_register8>
    return ((value >> pos) & 1);
  400574:	4120      	asrs	r0, r4
}
  400576:	f000 0001 	and.w	r0, r0, #1
  40057a:	bd10      	pop	{r4, pc}

0040057c <mpu_init>:

bool mpu_init(void)
{
  40057c:	b500      	push	{lr}
  40057e:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400580:	4b0d      	ldr	r3, [pc, #52]	; (4005b8 <mpu_init+0x3c>)
  400582:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400584:	4b0d      	ldr	r3, [pc, #52]	; (4005bc <mpu_init+0x40>)
  400586:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400588:	a901      	add	r1, sp, #4
  40058a:	480d      	ldr	r0, [pc, #52]	; (4005c0 <mpu_init+0x44>)
  40058c:	f000 fe12 	bl	4011b4 <twi_master_init>
  400590:	b138      	cbz	r0, 4005a2 <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  400592:	480c      	ldr	r0, [pc, #48]	; (4005c4 <mpu_init+0x48>)
  400594:	f002 fc6e 	bl	402e74 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400598:	480b      	ldr	r0, [pc, #44]	; (4005c8 <mpu_init+0x4c>)
  40059a:	f005 feb9 	bl	406310 <__portable_delay_cycles_veneer>
        return false;
  40059e:	2000      	movs	r0, #0
  4005a0:	e006      	b.n	4005b0 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  4005a2:	480a      	ldr	r0, [pc, #40]	; (4005cc <mpu_init+0x50>)
  4005a4:	f002 fc66 	bl	402e74 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005a8:	4807      	ldr	r0, [pc, #28]	; (4005c8 <mpu_init+0x4c>)
  4005aa:	f005 feb1 	bl	406310 <__portable_delay_cycles_veneer>
        return true;
  4005ae:	2001      	movs	r0, #1
    }
    
}
  4005b0:	b005      	add	sp, #20
  4005b2:	f85d fb04 	ldr.w	pc, [sp], #4
  4005b6:	bf00      	nop
  4005b8:	07270e00 	.word	0x07270e00
  4005bc:	00061a80 	.word	0x00061a80
  4005c0:	40018000 	.word	0x40018000
  4005c4:	00405e28 	.word	0x00405e28
  4005c8:	00014ed3 	.word	0x00014ed3
  4005cc:	00405e44 	.word	0x00405e44

004005d0 <mpu_probe>:

bool mpu_probe(void)
{
  4005d0:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  4005d2:	2168      	movs	r1, #104	; 0x68
  4005d4:	4809      	ldr	r0, [pc, #36]	; (4005fc <mpu_probe+0x2c>)
  4005d6:	f000 fec7 	bl	401368 <twi_probe>
  4005da:	b138      	cbz	r0, 4005ec <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  4005dc:	4808      	ldr	r0, [pc, #32]	; (400600 <mpu_probe+0x30>)
  4005de:	f002 fc49 	bl	402e74 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005e2:	4808      	ldr	r0, [pc, #32]	; (400604 <mpu_probe+0x34>)
  4005e4:	f005 fe94 	bl	406310 <__portable_delay_cycles_veneer>
        return false;
  4005e8:	2000      	movs	r0, #0
  4005ea:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  4005ec:	4806      	ldr	r0, [pc, #24]	; (400608 <mpu_probe+0x38>)
  4005ee:	f002 fc41 	bl	402e74 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005f2:	4804      	ldr	r0, [pc, #16]	; (400604 <mpu_probe+0x34>)
  4005f4:	f005 fe8c 	bl	406310 <__portable_delay_cycles_veneer>
        return true;
  4005f8:	2001      	movs	r0, #1
    }
}
  4005fa:	bd08      	pop	{r3, pc}
  4005fc:	40018000 	.word	0x40018000
  400600:	00405e60 	.word	0x00405e60
  400604:	00014ed3 	.word	0x00014ed3
  400608:	00405e74 	.word	0x00405e74

0040060c <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  40060c:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  40060e:	2075      	movs	r0, #117	; 0x75
  400610:	f7ff ff4e 	bl	4004b0 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400614:	bd08      	pop	{r3, pc}
  400616:	bf00      	nop

00400618 <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400618:	b510      	push	{r4, lr}
  40061a:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  40061c:	206b      	movs	r0, #107	; 0x6b
  40061e:	f7ff ff47 	bl	4004b0 <read_register8>
    value &= 0b11111000; // mask
  400622:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  400626:	4321      	orrs	r1, r4
  400628:	206b      	movs	r0, #107	; 0x6b
  40062a:	f7ff ff1d 	bl	400468 <write_register8>
  40062e:	bd10      	pop	{r4, pc}

00400630 <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  400630:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400632:	206b      	movs	r0, #107	; 0x6b
  400634:	f7ff ff3c 	bl	4004b0 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400638:	f000 0007 	and.w	r0, r0, #7
  40063c:	bd08      	pop	{r3, pc}
  40063e:	bf00      	nop

00400640 <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  400640:	b510      	push	{r4, lr}
  400642:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400644:	2803      	cmp	r0, #3
  400646:	d812      	bhi.n	40066e <mpu_set_gyro_scale+0x2e>
  400648:	e8df f000 	tbb	[pc, r0]
  40064c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400650:	4a0d      	ldr	r2, [pc, #52]	; (400688 <mpu_set_gyro_scale+0x48>)
  400652:	4b0e      	ldr	r3, [pc, #56]	; (40068c <mpu_set_gyro_scale+0x4c>)
  400654:	601a      	str	r2, [r3, #0]
            break;
  400656:	e00a      	b.n	40066e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400658:	4a0d      	ldr	r2, [pc, #52]	; (400690 <mpu_set_gyro_scale+0x50>)
  40065a:	4b0c      	ldr	r3, [pc, #48]	; (40068c <mpu_set_gyro_scale+0x4c>)
  40065c:	601a      	str	r2, [r3, #0]
            break;
  40065e:	e006      	b.n	40066e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400660:	4a0c      	ldr	r2, [pc, #48]	; (400694 <mpu_set_gyro_scale+0x54>)
  400662:	4b0a      	ldr	r3, [pc, #40]	; (40068c <mpu_set_gyro_scale+0x4c>)
  400664:	601a      	str	r2, [r3, #0]
            break;
  400666:	e002      	b.n	40066e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400668:	4a0b      	ldr	r2, [pc, #44]	; (400698 <mpu_set_gyro_scale+0x58>)
  40066a:	4b08      	ldr	r3, [pc, #32]	; (40068c <mpu_set_gyro_scale+0x4c>)
  40066c:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  40066e:	201b      	movs	r0, #27
  400670:	f7ff ff1e 	bl	4004b0 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400674:	f020 0018 	bic.w	r0, r0, #24
  400678:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  40067c:	b2c9      	uxtb	r1, r1
  40067e:	201b      	movs	r0, #27
  400680:	f7ff fef2 	bl	400468 <write_register8>
  400684:	bd10      	pop	{r4, pc}
  400686:	bf00      	nop
  400688:	3bfa1e3f 	.word	0x3bfa1e3f
  40068c:	20000230 	.word	0x20000230
  400690:	3c7a2270 	.word	0x3c7a2270
  400694:	3cf9bfdf 	.word	0x3cf9bfdf
  400698:	3d79c0ec 	.word	0x3d79c0ec

0040069c <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  40069c:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  40069e:	201b      	movs	r0, #27
  4006a0:	f7ff ff06 	bl	4004b0 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  4006a4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  4006a8:	bd08      	pop	{r3, pc}
  4006aa:	bf00      	nop

004006ac <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  4006ac:	b510      	push	{r4, lr}
  4006ae:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  4006b0:	2803      	cmp	r0, #3
  4006b2:	d812      	bhi.n	4006da <mpu_set_accel_range+0x2e>
  4006b4:	e8df f000 	tbb	[pc, r0]
  4006b8:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  4006bc:	4a0d      	ldr	r2, [pc, #52]	; (4006f4 <mpu_set_accel_range+0x48>)
  4006be:	4b0e      	ldr	r3, [pc, #56]	; (4006f8 <mpu_set_accel_range+0x4c>)
  4006c0:	601a      	str	r2, [r3, #0]
            break;
  4006c2:	e00a      	b.n	4006da <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  4006c4:	4a0d      	ldr	r2, [pc, #52]	; (4006fc <mpu_set_accel_range+0x50>)
  4006c6:	4b0c      	ldr	r3, [pc, #48]	; (4006f8 <mpu_set_accel_range+0x4c>)
  4006c8:	601a      	str	r2, [r3, #0]
            break;   
  4006ca:	e006      	b.n	4006da <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  4006cc:	4a0c      	ldr	r2, [pc, #48]	; (400700 <mpu_set_accel_range+0x54>)
  4006ce:	4b0a      	ldr	r3, [pc, #40]	; (4006f8 <mpu_set_accel_range+0x4c>)
  4006d0:	601a      	str	r2, [r3, #0]
            break;   
  4006d2:	e002      	b.n	4006da <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  4006d4:	4a0b      	ldr	r2, [pc, #44]	; (400704 <mpu_set_accel_range+0x58>)
  4006d6:	4b08      	ldr	r3, [pc, #32]	; (4006f8 <mpu_set_accel_range+0x4c>)
  4006d8:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  4006da:	201c      	movs	r0, #28
  4006dc:	f7ff fee8 	bl	4004b0 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  4006e0:	f020 0018 	bic.w	r0, r0, #24
  4006e4:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  4006e8:	b2c9      	uxtb	r1, r1
  4006ea:	201c      	movs	r0, #28
  4006ec:	f7ff febc 	bl	400468 <write_register8>
  4006f0:	bd10      	pop	{r4, pc}
  4006f2:	bf00      	nop
  4006f4:	387fda40 	.word	0x387fda40
  4006f8:	2000021c 	.word	0x2000021c
  4006fc:	38ffda40 	.word	0x38ffda40
  400700:	397fda40 	.word	0x397fda40
  400704:	39fff518 	.word	0x39fff518

00400708 <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400708:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  40070a:	4602      	mov	r2, r0
  40070c:	2106      	movs	r1, #6
  40070e:	206b      	movs	r0, #107	; 0x6b
  400710:	f7ff ff16 	bl	400540 <write_register_bit>
  400714:	bd08      	pop	{r3, pc}
  400716:	bf00      	nop

00400718 <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400718:	b538      	push	{r3, r4, r5, lr}
  40071a:	4605      	mov	r5, r0
  40071c:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  40071e:	4a11      	ldr	r2, [pc, #68]	; (400764 <mpu_begin+0x4c>)
  400720:	2300      	movs	r3, #0
  400722:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400724:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400726:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400728:	2100      	movs	r1, #0
  40072a:	4a0f      	ldr	r2, [pc, #60]	; (400768 <mpu_begin+0x50>)
  40072c:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  40072e:	4a0f      	ldr	r2, [pc, #60]	; (40076c <mpu_begin+0x54>)
  400730:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400732:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400734:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400736:	4a0e      	ldr	r2, [pc, #56]	; (400770 <mpu_begin+0x58>)
  400738:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  40073a:	f7ff ff67 	bl	40060c <mpu_who_am_i>
  40073e:	2868      	cmp	r0, #104	; 0x68
  400740:	d10d      	bne.n	40075e <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400742:	2001      	movs	r0, #1
  400744:	f7ff ff68 	bl	400618 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400748:	4628      	mov	r0, r5
  40074a:	f7ff ff79 	bl	400640 <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  40074e:	4620      	mov	r0, r4
  400750:	f7ff ffac 	bl	4006ac <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400754:	2000      	movs	r0, #0
  400756:	f7ff ffd7 	bl	400708 <mpu_set_sleep_enabled>

    return true;
  40075a:	2001      	movs	r0, #1
  40075c:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  40075e:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400760:	bd38      	pop	{r3, r4, r5, pc}
  400762:	bf00      	nop
  400764:	2000031c 	.word	0x2000031c
  400768:	20000234 	.word	0x20000234
  40076c:	200002e8 	.word	0x200002e8
  400770:	20000238 	.word	0x20000238

00400774 <mpu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400774:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  400776:	2106      	movs	r1, #6
  400778:	206b      	movs	r0, #107	; 0x6b
  40077a:	f7ff fef7 	bl	40056c <read_register_bit>
}
  40077e:	bd08      	pop	{r3, pc}

00400780 <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  400780:	b570      	push	{r4, r5, r6, lr}
  400782:	b082      	sub	sp, #8
  400784:	4606      	mov	r6, r0
  400786:	460d      	mov	r5, r1
  400788:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  40078a:	2300      	movs	r3, #0
  40078c:	9300      	str	r3, [sp, #0]
  40078e:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  400792:	466a      	mov	r2, sp
  400794:	2106      	movs	r1, #6
  400796:	2043      	movs	r0, #67	; 0x43
  400798:	f7ff feb0 	bl	4004fc <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  40079c:	f89d 2000 	ldrb.w	r2, [sp]
  4007a0:	f89d 3001 	ldrb.w	r3, [sp, #1]
  4007a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007a8:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  4007aa:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4007ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4007b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007b6:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  4007b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4007bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4007c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007c4:	8023      	strh	r3, [r4, #0]

}
  4007c6:	b002      	add	sp, #8
  4007c8:	bd70      	pop	{r4, r5, r6, pc}
  4007ca:	bf00      	nop

004007cc <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  4007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  4007ce:	4d0c      	ldr	r5, [pc, #48]	; (400800 <mpu_read_raw_gyro+0x34>)
  4007d0:	4e0c      	ldr	r6, [pc, #48]	; (400804 <mpu_read_raw_gyro+0x38>)
  4007d2:	4f0d      	ldr	r7, [pc, #52]	; (400808 <mpu_read_raw_gyro+0x3c>)
  4007d4:	462a      	mov	r2, r5
  4007d6:	4631      	mov	r1, r6
  4007d8:	4638      	mov	r0, r7
  4007da:	f7ff ffd1 	bl	400780 <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  4007de:	4c0b      	ldr	r4, [pc, #44]	; (40080c <mpu_read_raw_gyro+0x40>)
  4007e0:	f9b7 0000 	ldrsh.w	r0, [r7]
  4007e4:	f005 f894 	bl	405910 <__aeabi_i2f>
  4007e8:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  4007ea:	f9b6 0000 	ldrsh.w	r0, [r6]
  4007ee:	f005 f88f 	bl	405910 <__aeabi_i2f>
  4007f2:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  4007f4:	f9b5 0000 	ldrsh.w	r0, [r5]
  4007f8:	f005 f88a 	bl	405910 <__aeabi_i2f>
  4007fc:	60a0      	str	r0, [r4, #8]
  4007fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400800:	2000030c 	.word	0x2000030c
  400804:	200002e0 	.word	0x200002e0
  400808:	20000328 	.word	0x20000328
  40080c:	200002d4 	.word	0x200002d4

00400810 <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400814:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400816:	f7ff ffd9 	bl	4007cc <mpu_read_raw_gyro>

    if (use_calibrate) {
  40081a:	4b3d      	ldr	r3, [pc, #244]	; (400910 <mpu_read_normalized_gyro+0x100>)
  40081c:	781b      	ldrb	r3, [r3, #0]
  40081e:	b30b      	cbz	r3, 400864 <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400820:	4b3c      	ldr	r3, [pc, #240]	; (400914 <mpu_read_normalized_gyro+0x104>)
  400822:	681e      	ldr	r6, [r3, #0]
  400824:	4d3c      	ldr	r5, [pc, #240]	; (400918 <mpu_read_normalized_gyro+0x108>)
  400826:	4f3d      	ldr	r7, [pc, #244]	; (40091c <mpu_read_normalized_gyro+0x10c>)
  400828:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400928 <mpu_read_normalized_gyro+0x118>
  40082c:	f8d8 1000 	ldr.w	r1, [r8]
  400830:	6838      	ldr	r0, [r7, #0]
  400832:	f004 ffb7 	bl	4057a4 <__aeabi_fsub>
  400836:	4631      	mov	r1, r6
  400838:	f005 f8be 	bl	4059b8 <__aeabi_fmul>
  40083c:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  40083e:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400842:	6878      	ldr	r0, [r7, #4]
  400844:	f004 ffae 	bl	4057a4 <__aeabi_fsub>
  400848:	4631      	mov	r1, r6
  40084a:	f005 f8b5 	bl	4059b8 <__aeabi_fmul>
  40084e:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400850:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400854:	68b8      	ldr	r0, [r7, #8]
  400856:	f004 ffa5 	bl	4057a4 <__aeabi_fsub>
  40085a:	4631      	mov	r1, r6
  40085c:	f005 f8ac 	bl	4059b8 <__aeabi_fmul>
  400860:	60a8      	str	r0, [r5, #8]
  400862:	e012      	b.n	40088a <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400864:	4b2b      	ldr	r3, [pc, #172]	; (400914 <mpu_read_normalized_gyro+0x104>)
  400866:	681f      	ldr	r7, [r3, #0]
  400868:	4d2b      	ldr	r5, [pc, #172]	; (400918 <mpu_read_normalized_gyro+0x108>)
  40086a:	4e2c      	ldr	r6, [pc, #176]	; (40091c <mpu_read_normalized_gyro+0x10c>)
  40086c:	4639      	mov	r1, r7
  40086e:	6830      	ldr	r0, [r6, #0]
  400870:	f005 f8a2 	bl	4059b8 <__aeabi_fmul>
  400874:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400876:	4639      	mov	r1, r7
  400878:	6870      	ldr	r0, [r6, #4]
  40087a:	f005 f89d 	bl	4059b8 <__aeabi_fmul>
  40087e:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400880:	4639      	mov	r1, r7
  400882:	68b0      	ldr	r0, [r6, #8]
  400884:	f005 f898 	bl	4059b8 <__aeabi_fmul>
  400888:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  40088a:	2100      	movs	r1, #0
  40088c:	4b24      	ldr	r3, [pc, #144]	; (400920 <mpu_read_normalized_gyro+0x110>)
  40088e:	6818      	ldr	r0, [r3, #0]
  400890:	f005 fa26 	bl	405ce0 <__aeabi_fcmpeq>
  400894:	2800      	cmp	r0, #0
  400896:	d132      	bne.n	4008fe <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  400898:	4b1f      	ldr	r3, [pc, #124]	; (400918 <mpu_read_normalized_gyro+0x108>)
  40089a:	6818      	ldr	r0, [r3, #0]
  40089c:	f005 fa52 	bl	405d44 <__aeabi_f2iz>
  4008a0:	2800      	cmp	r0, #0
  4008a2:	bfb8      	it	lt
  4008a4:	4240      	neglt	r0, r0
  4008a6:	f005 f833 	bl	405910 <__aeabi_i2f>
  4008aa:	4b1e      	ldr	r3, [pc, #120]	; (400924 <mpu_read_normalized_gyro+0x114>)
  4008ac:	6819      	ldr	r1, [r3, #0]
  4008ae:	f005 fa21 	bl	405cf4 <__aeabi_fcmplt>
  4008b2:	b110      	cbz	r0, 4008ba <mpu_read_normalized_gyro+0xaa>
  4008b4:	2200      	movs	r2, #0
  4008b6:	4b18      	ldr	r3, [pc, #96]	; (400918 <mpu_read_normalized_gyro+0x108>)
  4008b8:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  4008ba:	4b17      	ldr	r3, [pc, #92]	; (400918 <mpu_read_normalized_gyro+0x108>)
  4008bc:	6858      	ldr	r0, [r3, #4]
  4008be:	f005 fa41 	bl	405d44 <__aeabi_f2iz>
  4008c2:	2800      	cmp	r0, #0
  4008c4:	bfb8      	it	lt
  4008c6:	4240      	neglt	r0, r0
  4008c8:	f005 f822 	bl	405910 <__aeabi_i2f>
  4008cc:	4b15      	ldr	r3, [pc, #84]	; (400924 <mpu_read_normalized_gyro+0x114>)
  4008ce:	6859      	ldr	r1, [r3, #4]
  4008d0:	f005 fa10 	bl	405cf4 <__aeabi_fcmplt>
  4008d4:	b110      	cbz	r0, 4008dc <mpu_read_normalized_gyro+0xcc>
  4008d6:	2200      	movs	r2, #0
  4008d8:	4b0f      	ldr	r3, [pc, #60]	; (400918 <mpu_read_normalized_gyro+0x108>)
  4008da:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  4008dc:	4b0e      	ldr	r3, [pc, #56]	; (400918 <mpu_read_normalized_gyro+0x108>)
  4008de:	6898      	ldr	r0, [r3, #8]
  4008e0:	f005 fa30 	bl	405d44 <__aeabi_f2iz>
  4008e4:	2800      	cmp	r0, #0
  4008e6:	bfb8      	it	lt
  4008e8:	4240      	neglt	r0, r0
  4008ea:	f005 f811 	bl	405910 <__aeabi_i2f>
  4008ee:	4b0d      	ldr	r3, [pc, #52]	; (400924 <mpu_read_normalized_gyro+0x114>)
  4008f0:	6899      	ldr	r1, [r3, #8]
  4008f2:	f005 f9ff 	bl	405cf4 <__aeabi_fcmplt>
  4008f6:	b110      	cbz	r0, 4008fe <mpu_read_normalized_gyro+0xee>
  4008f8:	2200      	movs	r2, #0
  4008fa:	4b07      	ldr	r3, [pc, #28]	; (400918 <mpu_read_normalized_gyro+0x108>)
  4008fc:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  4008fe:	4b06      	ldr	r3, [pc, #24]	; (400918 <mpu_read_normalized_gyro+0x108>)
  400900:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400908:	4620      	mov	r0, r4
  40090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40090e:	bf00      	nop
  400910:	20000234 	.word	0x20000234
  400914:	20000230 	.word	0x20000230
  400918:	2000032c 	.word	0x2000032c
  40091c:	200002d4 	.word	0x200002d4
  400920:	20000238 	.word	0x20000238
  400924:	200002e8 	.word	0x200002e8
  400928:	2000031c 	.word	0x2000031c

0040092c <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  40092c:	b570      	push	{r4, r5, r6, lr}
  40092e:	b082      	sub	sp, #8
  400930:	4606      	mov	r6, r0
  400932:	460d      	mov	r5, r1
  400934:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400936:	2300      	movs	r3, #0
  400938:	9300      	str	r3, [sp, #0]
  40093a:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  40093e:	466a      	mov	r2, sp
  400940:	2106      	movs	r1, #6
  400942:	203b      	movs	r0, #59	; 0x3b
  400944:	f7ff fdda 	bl	4004fc <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400948:	f89d 2000 	ldrb.w	r2, [sp]
  40094c:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400950:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400954:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400956:	f89d 2002 	ldrb.w	r2, [sp, #2]
  40095a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40095e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400962:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400964:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400968:	f89d 3005 	ldrb.w	r3, [sp, #5]
  40096c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400970:	8023      	strh	r3, [r4, #0]
}
  400972:	b002      	add	sp, #8
  400974:	bd70      	pop	{r4, r5, r6, pc}
  400976:	bf00      	nop

00400978 <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  400978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  40097a:	4d0c      	ldr	r5, [pc, #48]	; (4009ac <mpu_read_raw_acceleration+0x34>)
  40097c:	4e0c      	ldr	r6, [pc, #48]	; (4009b0 <mpu_read_raw_acceleration+0x38>)
  40097e:	4f0d      	ldr	r7, [pc, #52]	; (4009b4 <mpu_read_raw_acceleration+0x3c>)
  400980:	462a      	mov	r2, r5
  400982:	4631      	mov	r1, r6
  400984:	4638      	mov	r0, r7
  400986:	f7ff ffd1 	bl	40092c <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  40098a:	4c0b      	ldr	r4, [pc, #44]	; (4009b8 <mpu_read_raw_acceleration+0x40>)
  40098c:	f9b7 0000 	ldrsh.w	r0, [r7]
  400990:	f004 ffbe 	bl	405910 <__aeabi_i2f>
  400994:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  400996:	f9b6 0000 	ldrsh.w	r0, [r6]
  40099a:	f004 ffb9 	bl	405910 <__aeabi_i2f>
  40099e:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  4009a0:	f9b5 0000 	ldrsh.w	r0, [r5]
  4009a4:	f004 ffb4 	bl	405910 <__aeabi_i2f>
  4009a8:	60a0      	str	r0, [r4, #8]
  4009aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009ac:	200002e2 	.word	0x200002e2
  4009b0:	2000032a 	.word	0x2000032a
  4009b4:	200002e4 	.word	0x200002e4
  4009b8:	20000310 	.word	0x20000310

004009bc <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  4009bc:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  4009be:	f7ff ffdb 	bl	400978 <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  4009c2:	4b0e      	ldr	r3, [pc, #56]	; (4009fc <mpu_read_normalized_acceleration+0x40>)
  4009c4:	681d      	ldr	r5, [r3, #0]
  4009c6:	4c0e      	ldr	r4, [pc, #56]	; (400a00 <mpu_read_normalized_acceleration+0x44>)
  4009c8:	4e0e      	ldr	r6, [pc, #56]	; (400a04 <mpu_read_normalized_acceleration+0x48>)
  4009ca:	6831      	ldr	r1, [r6, #0]
  4009cc:	4628      	mov	r0, r5
  4009ce:	f004 fff3 	bl	4059b8 <__aeabi_fmul>
  4009d2:	490d      	ldr	r1, [pc, #52]	; (400a08 <mpu_read_normalized_acceleration+0x4c>)
  4009d4:	f004 fff0 	bl	4059b8 <__aeabi_fmul>
  4009d8:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  4009da:	6871      	ldr	r1, [r6, #4]
  4009dc:	4628      	mov	r0, r5
  4009de:	f004 ffeb 	bl	4059b8 <__aeabi_fmul>
  4009e2:	4909      	ldr	r1, [pc, #36]	; (400a08 <mpu_read_normalized_acceleration+0x4c>)
  4009e4:	f004 ffe8 	bl	4059b8 <__aeabi_fmul>
  4009e8:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  4009ea:	68b1      	ldr	r1, [r6, #8]
  4009ec:	4628      	mov	r0, r5
  4009ee:	f004 ffe3 	bl	4059b8 <__aeabi_fmul>
  4009f2:	4905      	ldr	r1, [pc, #20]	; (400a08 <mpu_read_normalized_acceleration+0x4c>)
  4009f4:	f004 ffe0 	bl	4059b8 <__aeabi_fmul>
  4009f8:	60a0      	str	r0, [r4, #8]
  4009fa:	bd70      	pop	{r4, r5, r6, pc}
  4009fc:	2000021c 	.word	0x2000021c
  400a00:	20000300 	.word	0x20000300
  400a04:	20000310 	.word	0x20000310
  400a08:	411ce80a 	.word	0x411ce80a

00400a0c <mpu_log_settings>:

    return norm_accel;
}

void mpu_log_settings(void)
{
  400a0c:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400a0e:	f7ff fdfd 	bl	40060c <mpu_who_am_i>
  400a12:	4601      	mov	r1, r0
  400a14:	482b      	ldr	r0, [pc, #172]	; (400ac4 <mpu_log_settings+0xb8>)
  400a16:	f002 f9bb 	bl	402d90 <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400a1a:	f7ff feab 	bl	400774 <mpu_get_sleep_enabled>
  400a1e:	492a      	ldr	r1, [pc, #168]	; (400ac8 <mpu_log_settings+0xbc>)
  400a20:	4a2a      	ldr	r2, [pc, #168]	; (400acc <mpu_log_settings+0xc0>)
  400a22:	2800      	cmp	r0, #0
  400a24:	bf18      	it	ne
  400a26:	4611      	movne	r1, r2
  400a28:	4829      	ldr	r0, [pc, #164]	; (400ad0 <mpu_log_settings+0xc4>)
  400a2a:	f002 f9b1 	bl	402d90 <iprintf>
    printf("Clock Source: ");
  400a2e:	4829      	ldr	r0, [pc, #164]	; (400ad4 <mpu_log_settings+0xc8>)
  400a30:	f002 f9ae 	bl	402d90 <iprintf>
    switch (mpu_get_clock_source()) {
  400a34:	f7ff fdfc 	bl	400630 <mpu_get_clock_source>
  400a38:	b110      	cbz	r0, 400a40 <mpu_log_settings+0x34>
  400a3a:	2801      	cmp	r0, #1
  400a3c:	d004      	beq.n	400a48 <mpu_log_settings+0x3c>
  400a3e:	e006      	b.n	400a4e <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400a40:	4825      	ldr	r0, [pc, #148]	; (400ad8 <mpu_log_settings+0xcc>)
  400a42:	f002 f9a5 	bl	402d90 <iprintf>
        break;
  400a46:	e002      	b.n	400a4e <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400a48:	4824      	ldr	r0, [pc, #144]	; (400adc <mpu_log_settings+0xd0>)
  400a4a:	f002 f9a1 	bl	402d90 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400a4e:	4824      	ldr	r0, [pc, #144]	; (400ae0 <mpu_log_settings+0xd4>)
  400a50:	f002 f99e 	bl	402d90 <iprintf>
        switch (mpu_get_gyro_scale()) {
  400a54:	f7ff fe22 	bl	40069c <mpu_get_gyro_scale>
  400a58:	2803      	cmp	r0, #3
  400a5a:	d812      	bhi.n	400a82 <mpu_log_settings+0x76>
  400a5c:	e8df f000 	tbb	[pc, r0]
  400a60:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400a64:	481f      	ldr	r0, [pc, #124]	; (400ae4 <mpu_log_settings+0xd8>)
  400a66:	f002 f993 	bl	402d90 <iprintf>
        break;
  400a6a:	e00a      	b.n	400a82 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400a6c:	481e      	ldr	r0, [pc, #120]	; (400ae8 <mpu_log_settings+0xdc>)
  400a6e:	f002 f98f 	bl	402d90 <iprintf>
        break;
  400a72:	e006      	b.n	400a82 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400a74:	481d      	ldr	r0, [pc, #116]	; (400aec <mpu_log_settings+0xe0>)
  400a76:	f002 f98b 	bl	402d90 <iprintf>
        break;
  400a7a:	e002      	b.n	400a82 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400a7c:	481c      	ldr	r0, [pc, #112]	; (400af0 <mpu_log_settings+0xe4>)
  400a7e:	f002 f987 	bl	402d90 <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400a82:	4b1c      	ldr	r3, [pc, #112]	; (400af4 <mpu_log_settings+0xe8>)
  400a84:	7819      	ldrb	r1, [r3, #0]
  400a86:	481c      	ldr	r0, [pc, #112]	; (400af8 <mpu_log_settings+0xec>)
  400a88:	f002 f982 	bl	402d90 <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400a8c:	4b1b      	ldr	r3, [pc, #108]	; (400afc <mpu_log_settings+0xf0>)
  400a8e:	6818      	ldr	r0, [r3, #0]
  400a90:	f004 fb08 	bl	4050a4 <__aeabi_f2d>
  400a94:	4602      	mov	r2, r0
  400a96:	460b      	mov	r3, r1
  400a98:	4819      	ldr	r0, [pc, #100]	; (400b00 <mpu_log_settings+0xf4>)
  400a9a:	f002 f979 	bl	402d90 <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400a9e:	4b19      	ldr	r3, [pc, #100]	; (400b04 <mpu_log_settings+0xf8>)
  400aa0:	6818      	ldr	r0, [r3, #0]
  400aa2:	f004 faff 	bl	4050a4 <__aeabi_f2d>
  400aa6:	4602      	mov	r2, r0
  400aa8:	460b      	mov	r3, r1
  400aaa:	4817      	ldr	r0, [pc, #92]	; (400b08 <mpu_log_settings+0xfc>)
  400aac:	f002 f970 	bl	402d90 <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400ab0:	4b16      	ldr	r3, [pc, #88]	; (400b0c <mpu_log_settings+0x100>)
  400ab2:	6818      	ldr	r0, [r3, #0]
  400ab4:	f004 faf6 	bl	4050a4 <__aeabi_f2d>
  400ab8:	4602      	mov	r2, r0
  400aba:	460b      	mov	r3, r1
  400abc:	4814      	ldr	r0, [pc, #80]	; (400b10 <mpu_log_settings+0x104>)
  400abe:	f002 f967 	bl	402d90 <iprintf>
  400ac2:	bd08      	pop	{r3, pc}
  400ac4:	00405ea0 	.word	0x00405ea0
  400ac8:	00405e94 	.word	0x00405e94
  400acc:	00405e8c 	.word	0x00405e8c
  400ad0:	00405eb0 	.word	0x00405eb0
  400ad4:	00405ec4 	.word	0x00405ec4
  400ad8:	00405ed4 	.word	0x00405ed4
  400adc:	00405ef0 	.word	0x00405ef0
  400ae0:	00405f18 	.word	0x00405f18
  400ae4:	00405f24 	.word	0x00405f24
  400ae8:	00405f30 	.word	0x00405f30
  400aec:	00405f3c 	.word	0x00405f3c
  400af0:	00405f48 	.word	0x00405f48
  400af4:	20000234 	.word	0x20000234
  400af8:	00405f54 	.word	0x00405f54
  400afc:	20000238 	.word	0x20000238
  400b00:	00405f68 	.word	0x00405f68
  400b04:	20000230 	.word	0x20000230
  400b08:	00405f80 	.word	0x00405f80
  400b0c:	2000021c 	.word	0x2000021c
  400b10:	00405f94 	.word	0x00405f94

00400b14 <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  400b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  400b16:	4604      	mov	r4, r0
  400b18:	b1d8      	cbz	r0, 400b52 <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  400b1a:	4b13      	ldr	r3, [pc, #76]	; (400b68 <mpu_set_threshold+0x54>)
  400b1c:	781b      	ldrb	r3, [r3, #0]
  400b1e:	b913      	cbnz	r3, 400b26 <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  400b20:	2032      	movs	r0, #50	; 0x32
  400b22:	f000 f829 	bl	400b78 <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  400b26:	4620      	mov	r0, r4
  400b28:	f004 fef2 	bl	405910 <__aeabi_i2f>
  400b2c:	4607      	mov	r7, r0
  400b2e:	4d0f      	ldr	r5, [pc, #60]	; (400b6c <mpu_set_threshold+0x58>)
  400b30:	4e0f      	ldr	r6, [pc, #60]	; (400b70 <mpu_set_threshold+0x5c>)
  400b32:	4601      	mov	r1, r0
  400b34:	6830      	ldr	r0, [r6, #0]
  400b36:	f004 ff3f 	bl	4059b8 <__aeabi_fmul>
  400b3a:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  400b3c:	4639      	mov	r1, r7
  400b3e:	6870      	ldr	r0, [r6, #4]
  400b40:	f004 ff3a 	bl	4059b8 <__aeabi_fmul>
  400b44:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  400b46:	4639      	mov	r1, r7
  400b48:	68b0      	ldr	r0, [r6, #8]
  400b4a:	f004 ff35 	bl	4059b8 <__aeabi_fmul>
  400b4e:	60a8      	str	r0, [r5, #8]
  400b50:	e004      	b.n	400b5c <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  400b52:	4b06      	ldr	r3, [pc, #24]	; (400b6c <mpu_set_threshold+0x58>)
  400b54:	2200      	movs	r2, #0
  400b56:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  400b58:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  400b5a:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  400b5c:	4620      	mov	r0, r4
  400b5e:	f004 fed3 	bl	405908 <__aeabi_ui2f>
  400b62:	4b04      	ldr	r3, [pc, #16]	; (400b74 <mpu_set_threshold+0x60>)
  400b64:	6018      	str	r0, [r3, #0]
  400b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b68:	20000234 	.word	0x20000234
  400b6c:	200002e8 	.word	0x200002e8
  400b70:	200002c8 	.word	0x200002c8
  400b74:	20000238 	.word	0x20000238

00400b78 <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  400b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b7c:	b085      	sub	sp, #20
	use_calibrate = true;
  400b7e:	2201      	movs	r2, #1
  400b80:	4b5e      	ldr	r3, [pc, #376]	; (400cfc <mpu_calibrate_gyro+0x184>)
  400b82:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400b84:	4681      	mov	r9, r0
  400b86:	2800      	cmp	r0, #0
  400b88:	d048      	beq.n	400c1c <mpu_calibrate_gyro+0xa4>
  400b8a:	2400      	movs	r4, #0
  400b8c:	f04f 0a00 	mov.w	sl, #0
  400b90:	46d3      	mov	fp, sl
  400b92:	f8cd a00c 	str.w	sl, [sp, #12]
  400b96:	f8cd a008 	str.w	sl, [sp, #8]
  400b9a:	f8cd a004 	str.w	sl, [sp, #4]
  400b9e:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  400ba2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 400d10 <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  400ba6:	f7ff fe11 	bl	4007cc <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  400baa:	f8d8 7000 	ldr.w	r7, [r8]
  400bae:	4639      	mov	r1, r7
  400bb0:	9800      	ldr	r0, [sp, #0]
  400bb2:	f004 fdf9 	bl	4057a8 <__addsf3>
  400bb6:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  400bb8:	f8d8 6004 	ldr.w	r6, [r8, #4]
  400bbc:	4631      	mov	r1, r6
  400bbe:	9801      	ldr	r0, [sp, #4]
  400bc0:	f004 fdf2 	bl	4057a8 <__addsf3>
  400bc4:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  400bc6:	f8d8 5008 	ldr.w	r5, [r8, #8]
  400bca:	4629      	mov	r1, r5
  400bcc:	9802      	ldr	r0, [sp, #8]
  400bce:	f004 fdeb 	bl	4057a8 <__addsf3>
  400bd2:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  400bd4:	4639      	mov	r1, r7
  400bd6:	4638      	mov	r0, r7
  400bd8:	f004 feee 	bl	4059b8 <__aeabi_fmul>
  400bdc:	4601      	mov	r1, r0
  400bde:	9803      	ldr	r0, [sp, #12]
  400be0:	f004 fde2 	bl	4057a8 <__addsf3>
  400be4:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  400be6:	4631      	mov	r1, r6
  400be8:	4630      	mov	r0, r6
  400bea:	f004 fee5 	bl	4059b8 <__aeabi_fmul>
  400bee:	4601      	mov	r1, r0
  400bf0:	4658      	mov	r0, fp
  400bf2:	f004 fdd9 	bl	4057a8 <__addsf3>
  400bf6:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  400bf8:	4629      	mov	r1, r5
  400bfa:	4628      	mov	r0, r5
  400bfc:	f004 fedc 	bl	4059b8 <__aeabi_fmul>
  400c00:	4601      	mov	r1, r0
  400c02:	4650      	mov	r0, sl
  400c04:	f004 fdd0 	bl	4057a8 <__addsf3>
  400c08:	4682      	mov	sl, r0

		delay_ms(5);
  400c0a:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400c0e:	f005 fb7f 	bl	406310 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400c12:	3401      	adds	r4, #1
  400c14:	b2e4      	uxtb	r4, r4
  400c16:	45a1      	cmp	r9, r4
  400c18:	d1c5      	bne.n	400ba6 <mpu_calibrate_gyro+0x2e>
  400c1a:	e00a      	b.n	400c32 <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  400c1c:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  400c20:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  400c22:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  400c26:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  400c2a:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  400c2e:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  400c32:	4648      	mov	r0, r9
  400c34:	f004 fe6c 	bl	405910 <__aeabi_i2f>
  400c38:	4605      	mov	r5, r0
  400c3a:	4601      	mov	r1, r0
  400c3c:	9800      	ldr	r0, [sp, #0]
  400c3e:	f004 ff6f 	bl	405b20 <__aeabi_fdiv>
  400c42:	4606      	mov	r6, r0
  400c44:	4c2e      	ldr	r4, [pc, #184]	; (400d00 <mpu_calibrate_gyro+0x188>)
  400c46:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  400c48:	4629      	mov	r1, r5
  400c4a:	9801      	ldr	r0, [sp, #4]
  400c4c:	f004 ff68 	bl	405b20 <__aeabi_fdiv>
  400c50:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  400c52:	4629      	mov	r1, r5
  400c54:	9802      	ldr	r0, [sp, #8]
  400c56:	f004 ff63 	bl	405b20 <__aeabi_fdiv>
  400c5a:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  400c5c:	9f03      	ldr	r7, [sp, #12]
  400c5e:	4929      	ldr	r1, [pc, #164]	; (400d04 <mpu_calibrate_gyro+0x18c>)
  400c60:	4638      	mov	r0, r7
  400c62:	f004 ff5d 	bl	405b20 <__aeabi_fdiv>
  400c66:	4605      	mov	r5, r0
  400c68:	4631      	mov	r1, r6
  400c6a:	4630      	mov	r0, r6
  400c6c:	f004 fea4 	bl	4059b8 <__aeabi_fmul>
  400c70:	4601      	mov	r1, r0
  400c72:	4628      	mov	r0, r5
  400c74:	f004 fd96 	bl	4057a4 <__aeabi_fsub>
  400c78:	f004 fa14 	bl	4050a4 <__aeabi_f2d>
  400c7c:	f001 f856 	bl	401d2c <sqrt>
  400c80:	4e21      	ldr	r6, [pc, #132]	; (400d08 <mpu_calibrate_gyro+0x190>)
  400c82:	f004 fd3b 	bl	4056fc <__aeabi_d2f>
  400c86:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  400c88:	6865      	ldr	r5, [r4, #4]
  400c8a:	491e      	ldr	r1, [pc, #120]	; (400d04 <mpu_calibrate_gyro+0x18c>)
  400c8c:	4658      	mov	r0, fp
  400c8e:	f004 ff47 	bl	405b20 <__aeabi_fdiv>
  400c92:	4607      	mov	r7, r0
  400c94:	4629      	mov	r1, r5
  400c96:	4628      	mov	r0, r5
  400c98:	f004 fe8e 	bl	4059b8 <__aeabi_fmul>
  400c9c:	4601      	mov	r1, r0
  400c9e:	4638      	mov	r0, r7
  400ca0:	f004 fd80 	bl	4057a4 <__aeabi_fsub>
  400ca4:	f004 f9fe 	bl	4050a4 <__aeabi_f2d>
  400ca8:	f001 f840 	bl	401d2c <sqrt>
  400cac:	f004 fd26 	bl	4056fc <__aeabi_d2f>
  400cb0:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  400cb2:	68a4      	ldr	r4, [r4, #8]
  400cb4:	4913      	ldr	r1, [pc, #76]	; (400d04 <mpu_calibrate_gyro+0x18c>)
  400cb6:	4650      	mov	r0, sl
  400cb8:	f004 ff32 	bl	405b20 <__aeabi_fdiv>
  400cbc:	4605      	mov	r5, r0
  400cbe:	4621      	mov	r1, r4
  400cc0:	4620      	mov	r0, r4
  400cc2:	f004 fe79 	bl	4059b8 <__aeabi_fmul>
  400cc6:	4601      	mov	r1, r0
  400cc8:	4628      	mov	r0, r5
  400cca:	f004 fd6b 	bl	4057a4 <__aeabi_fsub>
  400cce:	f004 f9e9 	bl	4050a4 <__aeabi_f2d>
  400cd2:	f001 f82b 	bl	401d2c <sqrt>
  400cd6:	f004 fd11 	bl	4056fc <__aeabi_d2f>
  400cda:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  400cdc:	4b0b      	ldr	r3, [pc, #44]	; (400d0c <mpu_calibrate_gyro+0x194>)
  400cde:	681c      	ldr	r4, [r3, #0]
  400ce0:	2100      	movs	r1, #0
  400ce2:	4620      	mov	r0, r4
  400ce4:	f005 f824 	bl	405d30 <__aeabi_fcmpgt>
  400ce8:	b128      	cbz	r0, 400cf6 <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  400cea:	4620      	mov	r0, r4
  400cec:	f005 f850 	bl	405d90 <__aeabi_f2uiz>
  400cf0:	b2c0      	uxtb	r0, r0
  400cf2:	f7ff ff0f 	bl	400b14 <mpu_set_threshold>
	}

}
  400cf6:	b005      	add	sp, #20
  400cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400cfc:	20000234 	.word	0x20000234
  400d00:	2000031c 	.word	0x2000031c
  400d04:	42480000 	.word	0x42480000
  400d08:	200002c8 	.word	0x200002c8
  400d0c:	20000238 	.word	0x20000238
  400d10:	200002d4 	.word	0x200002d4

00400d14 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  400d14:	b510      	push	{r4, lr}
    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  400d16:	f7ff fc31 	bl	40057c <mpu_init>
  400d1a:	4604      	mov	r4, r0
  400d1c:	f7ff fc58 	bl	4005d0 <mpu_probe>
  400d20:	4020      	ands	r0, r4
  400d22:	b2c4      	uxtb	r4, r0
  400d24:	2100      	movs	r1, #0
  400d26:	4608      	mov	r0, r1
  400d28:	f7ff fcf6 	bl	400718 <mpu_begin>
}
  400d2c:	4020      	ands	r0, r4
  400d2e:	bd10      	pop	{r4, pc}

00400d30 <imu_calibrate>:

void imu_calibrate(void)
{
  400d30:	b508      	push	{r3, lr}
    mpu_calibrate_gyro(GYRO_SAMPLES);
  400d32:	2032      	movs	r0, #50	; 0x32
  400d34:	f7ff ff20 	bl	400b78 <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  400d38:	2000      	movs	r0, #0
  400d3a:	f7ff feeb 	bl	400b14 <mpu_set_threshold>
    mpu_log_settings();
  400d3e:	f7ff fe65 	bl	400a0c <mpu_log_settings>
  400d42:	bd08      	pop	{r3, pc}
  400d44:	0000      	movs	r0, r0
	...

00400d48 <imu_update>:
}

void imu_update(void)
{
  400d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d4c:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  400d4e:	4b80      	ldr	r3, [pc, #512]	; (400f50 <imu_update+0x208>)
  400d50:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  400d52:	a808      	add	r0, sp, #32
  400d54:	f7ff fd5c 	bl	400810 <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  400d58:	f7ff fe30 	bl	4009bc <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  400d5c:	4c7d      	ldr	r4, [pc, #500]	; (400f54 <imu_update+0x20c>)
  400d5e:	6820      	ldr	r0, [r4, #0]
  400d60:	f004 f9a0 	bl	4050a4 <__aeabi_f2d>
  400d64:	a378      	add	r3, pc, #480	; (adr r3, 400f48 <imu_update+0x200>)
  400d66:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d6a:	f004 f9ef 	bl	40514c <__aeabi_dmul>
  400d6e:	2200      	movs	r2, #0
  400d70:	4b79      	ldr	r3, [pc, #484]	; (400f58 <imu_update+0x210>)
  400d72:	f004 fb15 	bl	4053a0 <__aeabi_ddiv>
  400d76:	f004 fcc1 	bl	4056fc <__aeabi_d2f>
  400d7a:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  400d7c:	6860      	ldr	r0, [r4, #4]
  400d7e:	f004 f991 	bl	4050a4 <__aeabi_f2d>
  400d82:	a371      	add	r3, pc, #452	; (adr r3, 400f48 <imu_update+0x200>)
  400d84:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d88:	f004 f9e0 	bl	40514c <__aeabi_dmul>
  400d8c:	2200      	movs	r2, #0
  400d8e:	4b72      	ldr	r3, [pc, #456]	; (400f58 <imu_update+0x210>)
  400d90:	f004 fb06 	bl	4053a0 <__aeabi_ddiv>
  400d94:	f004 fcb2 	bl	4056fc <__aeabi_d2f>
  400d98:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  400d9a:	68a0      	ldr	r0, [r4, #8]
  400d9c:	f004 f982 	bl	4050a4 <__aeabi_f2d>
  400da0:	a369      	add	r3, pc, #420	; (adr r3, 400f48 <imu_update+0x200>)
  400da2:	e9d3 2300 	ldrd	r2, r3, [r3]
  400da6:	f004 f9d1 	bl	40514c <__aeabi_dmul>
  400daa:	2200      	movs	r2, #0
  400dac:	4b6a      	ldr	r3, [pc, #424]	; (400f58 <imu_update+0x210>)
  400dae:	f004 faf7 	bl	4053a0 <__aeabi_ddiv>
  400db2:	f004 fca3 	bl	4056fc <__aeabi_d2f>
  400db6:	9007      	str	r0, [sp, #28]



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  400db8:	4c68      	ldr	r4, [pc, #416]	; (400f5c <imu_update+0x214>)
  400dba:	6820      	ldr	r0, [r4, #0]
  400dbc:	f004 f972 	bl	4050a4 <__aeabi_f2d>
  400dc0:	e9cd 0100 	strd	r0, r1, [sp]
  400dc4:	6860      	ldr	r0, [r4, #4]
  400dc6:	f004 f96d 	bl	4050a4 <__aeabi_f2d>
  400dca:	4682      	mov	sl, r0
  400dcc:	468b      	mov	fp, r1
  400dce:	68a0      	ldr	r0, [r4, #8]
  400dd0:	f004 f968 	bl	4050a4 <__aeabi_f2d>
  400dd4:	4606      	mov	r6, r0
  400dd6:	460f      	mov	r7, r1
  400dd8:	4632      	mov	r2, r6
  400dda:	463b      	mov	r3, r7
  400ddc:	4630      	mov	r0, r6
  400dde:	4639      	mov	r1, r7
  400de0:	f004 f9b4 	bl	40514c <__aeabi_dmul>
  400de4:	4680      	mov	r8, r0
  400de6:	4689      	mov	r9, r1
  400de8:	4652      	mov	r2, sl
  400dea:	465b      	mov	r3, fp
  400dec:	4650      	mov	r0, sl
  400dee:	4659      	mov	r1, fp
  400df0:	f004 f9ac 	bl	40514c <__aeabi_dmul>
  400df4:	4602      	mov	r2, r0
  400df6:	460b      	mov	r3, r1
  400df8:	4640      	mov	r0, r8
  400dfa:	4649      	mov	r1, r9
  400dfc:	f003 fff4 	bl	404de8 <__adddf3>
  400e00:	f000 ff94 	bl	401d2c <sqrt>
  400e04:	4602      	mov	r2, r0
  400e06:	460b      	mov	r3, r1
  400e08:	e9dd 0100 	ldrd	r0, r1, [sp]
  400e0c:	f000 ff8c 	bl	401d28 <atan2>
  400e10:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  400e14:	6860      	ldr	r0, [r4, #4]
  400e16:	f004 f945 	bl	4050a4 <__aeabi_f2d>
  400e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e1e:	6820      	ldr	r0, [r4, #0]
  400e20:	f004 f940 	bl	4050a4 <__aeabi_f2d>
  400e24:	4682      	mov	sl, r0
  400e26:	468b      	mov	fp, r1
  400e28:	68a0      	ldr	r0, [r4, #8]
  400e2a:	f004 f93b 	bl	4050a4 <__aeabi_f2d>
  400e2e:	4606      	mov	r6, r0
  400e30:	460f      	mov	r7, r1
  400e32:	4652      	mov	r2, sl
  400e34:	465b      	mov	r3, fp
  400e36:	4650      	mov	r0, sl
  400e38:	4659      	mov	r1, fp
  400e3a:	f004 f987 	bl	40514c <__aeabi_dmul>
  400e3e:	4680      	mov	r8, r0
  400e40:	4689      	mov	r9, r1
  400e42:	4632      	mov	r2, r6
  400e44:	463b      	mov	r3, r7
  400e46:	4630      	mov	r0, r6
  400e48:	4639      	mov	r1, r7
  400e4a:	f004 f97f 	bl	40514c <__aeabi_dmul>
  400e4e:	4602      	mov	r2, r0
  400e50:	460b      	mov	r3, r1
  400e52:	4640      	mov	r0, r8
  400e54:	4649      	mov	r1, r9
  400e56:	f003 ffc7 	bl	404de8 <__adddf3>
  400e5a:	f000 ff67 	bl	401d2c <sqrt>
  400e5e:	4602      	mov	r2, r0
  400e60:	460b      	mov	r3, r1
  400e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400e66:	f000 ff5f 	bl	401d28 <atan2>
  400e6a:	4680      	mov	r8, r0
  400e6c:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  400e6e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 400f7c <imu_update+0x234>
    float dt = ((float)delta_t/1000.0f);
  400e72:	f8da 0000 	ldr.w	r0, [sl]
  400e76:	1a28      	subs	r0, r5, r0
  400e78:	f004 fd46 	bl	405908 <__aeabi_ui2f>
  400e7c:	4938      	ldr	r1, [pc, #224]	; (400f60 <imu_update+0x218>)
  400e7e:	f004 fe4f 	bl	405b20 <__aeabi_fdiv>
  400e82:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400e84:	4601      	mov	r1, r0
  400e86:	9805      	ldr	r0, [sp, #20]
  400e88:	f004 fd96 	bl	4059b8 <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  400e8c:	4f35      	ldr	r7, [pc, #212]	; (400f64 <imu_update+0x21c>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400e8e:	6839      	ldr	r1, [r7, #0]
  400e90:	f004 fc8a 	bl	4057a8 <__addsf3>
  400e94:	4934      	ldr	r1, [pc, #208]	; (400f68 <imu_update+0x220>)
  400e96:	f004 fd8f 	bl	4059b8 <__aeabi_fmul>
  400e9a:	4683      	mov	fp, r0
  400e9c:	2200      	movs	r2, #0
  400e9e:	4b2e      	ldr	r3, [pc, #184]	; (400f58 <imu_update+0x210>)
  400ea0:	4640      	mov	r0, r8
  400ea2:	4649      	mov	r1, r9
  400ea4:	f004 f952 	bl	40514c <__aeabi_dmul>
  400ea8:	a327      	add	r3, pc, #156	; (adr r3, 400f48 <imu_update+0x200>)
  400eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
  400eae:	f004 fa77 	bl	4053a0 <__aeabi_ddiv>
  400eb2:	f004 fc23 	bl	4056fc <__aeabi_d2f>
  400eb6:	492d      	ldr	r1, [pc, #180]	; (400f6c <imu_update+0x224>)
  400eb8:	f004 fd7e 	bl	4059b8 <__aeabi_fmul>
  400ebc:	4601      	mov	r1, r0
  400ebe:	4658      	mov	r0, fp
  400ec0:	f004 fc72 	bl	4057a8 <__addsf3>
  400ec4:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400ec6:	4621      	mov	r1, r4
  400ec8:	9806      	ldr	r0, [sp, #24]
  400eca:	f004 fd75 	bl	4059b8 <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  400ece:	4e28      	ldr	r6, [pc, #160]	; (400f70 <imu_update+0x228>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400ed0:	6831      	ldr	r1, [r6, #0]
  400ed2:	f004 fc69 	bl	4057a8 <__addsf3>
  400ed6:	4924      	ldr	r1, [pc, #144]	; (400f68 <imu_update+0x220>)
  400ed8:	f004 fd6e 	bl	4059b8 <__aeabi_fmul>
  400edc:	4681      	mov	r9, r0
  400ede:	2200      	movs	r2, #0
  400ee0:	4b1d      	ldr	r3, [pc, #116]	; (400f58 <imu_update+0x210>)
  400ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
  400ee6:	f004 f931 	bl	40514c <__aeabi_dmul>
  400eea:	a317      	add	r3, pc, #92	; (adr r3, 400f48 <imu_update+0x200>)
  400eec:	e9d3 2300 	ldrd	r2, r3, [r3]
  400ef0:	f004 fa56 	bl	4053a0 <__aeabi_ddiv>
  400ef4:	f004 fc02 	bl	4056fc <__aeabi_d2f>
  400ef8:	491c      	ldr	r1, [pc, #112]	; (400f6c <imu_update+0x224>)
  400efa:	f004 fd5d 	bl	4059b8 <__aeabi_fmul>
  400efe:	4601      	mov	r1, r0
  400f00:	4648      	mov	r0, r9
  400f02:	f004 fc51 	bl	4057a8 <__addsf3>
  400f06:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  400f08:	4621      	mov	r1, r4
  400f0a:	9807      	ldr	r0, [sp, #28]
  400f0c:	f004 fd54 	bl	4059b8 <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  400f10:	4c18      	ldr	r4, [pc, #96]	; (400f74 <imu_update+0x22c>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  400f12:	6821      	ldr	r1, [r4, #0]
  400f14:	f004 fc48 	bl	4057a8 <__addsf3>
  400f18:	4913      	ldr	r1, [pc, #76]	; (400f68 <imu_update+0x220>)
  400f1a:	f004 fd4d 	bl	4059b8 <__aeabi_fmul>
  400f1e:	2100      	movs	r1, #0
  400f20:	f004 fc42 	bl	4057a8 <__addsf3>


    last_time_read = t_now;
  400f24:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  400f28:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  400f2c:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  400f30:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  400f32:	4b11      	ldr	r3, [pc, #68]	; (400f78 <imu_update+0x230>)
  400f34:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  400f38:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  400f3c:	6098      	str	r0, [r3, #8]


  400f3e:	b00d      	add	sp, #52	; 0x34
  400f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400f44:	f3af 8000 	nop.w
  400f48:	54442d18 	.word	0x54442d18
  400f4c:	400921fb 	.word	0x400921fb
  400f50:	20000208 	.word	0x20000208
  400f54:	2000032c 	.word	0x2000032c
  400f58:	40668000 	.word	0x40668000
  400f5c:	20000300 	.word	0x20000300
  400f60:	447a0000 	.word	0x447a0000
  400f64:	20000224 	.word	0x20000224
  400f68:	3f75c28f 	.word	0x3f75c28f
  400f6c:	3d23d710 	.word	0x3d23d710
  400f70:	20000228 	.word	0x20000228
  400f74:	2000022c 	.word	0x2000022c
  400f78:	20000338 	.word	0x20000338
  400f7c:	20000220 	.word	0x20000220

00400f80 <servo_init>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void servo_init(void)
{
  400f80:	b530      	push	{r4, r5, lr}
  400f82:	b085      	sub	sp, #20
    
    printf("servo_init\r\n");
  400f84:	4817      	ldr	r0, [pc, #92]	; (400fe4 <servo_init+0x64>)
  400f86:	f001 ff03 	bl	402d90 <iprintf>
    pio_configure_pin(EXT1_PIN_PWM_0, PIO_TYPE_PIO_PERIPH_B);
  400f8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f8e:	2017      	movs	r0, #23
  400f90:	f000 fa78 	bl	401484 <pio_configure_pin>

	/* Enable PWM peripheral clock */

	pmc_enable_periph_clk(ID_PWM);
  400f94:	201f      	movs	r0, #31
  400f96:	f000 fc27 	bl	4017e8 <pmc_enable_periph_clk>


	/* Disable PWM channels for LEDs */

	pwm_channel_disable(PWM, EXT1_PWM_CHANNEL);
  400f9a:	4c13      	ldr	r4, [pc, #76]	; (400fe8 <servo_init+0x68>)
  400f9c:	2100      	movs	r1, #0
  400f9e:	4620      	mov	r0, r4
  400fa0:	f000 fd6a 	bl	401a78 <pwm_channel_disable>

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  400fa4:	4b11      	ldr	r3, [pc, #68]	; (400fec <servo_init+0x6c>)
  400fa6:	9301      	str	r3, [sp, #4]
  400fa8:	2500      	movs	r5, #0
  400faa:	9502      	str	r5, [sp, #8]
  400fac:	4b10      	ldr	r3, [pc, #64]	; (400ff0 <servo_init+0x70>)
  400fae:	9303      	str	r3, [sp, #12]
        .ul_clka = PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	pwm_init(PWM, &clock_setting);
  400fb0:	a901      	add	r1, sp, #4
  400fb2:	4620      	mov	r0, r4
  400fb4:	f000 fcb4 	bl	401920 <pwm_init>


	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_servo.alignment = PWM_ALIGN_LEFT;
  400fb8:	490e      	ldr	r1, [pc, #56]	; (400ff4 <servo_init+0x74>)
  400fba:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	// g_pwm_channel_servo.polarity = PWM_LOW;
	g_pwm_channel_servo.polarity = PWM_HIGH;
  400fbc:	2301      	movs	r3, #1
  400fbe:	728b      	strb	r3, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_servo.ul_prescaler = PWM_CMR_CPRE_CLKA;
  400fc0:	230b      	movs	r3, #11
  400fc2:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_servo.ul_period = PWM_PERIOD_TICKS;
  400fc4:	f644 6320 	movw	r3, #20000	; 0x4e20
  400fc8:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_servo.ul_duty = PULSE_WIDTH_CENTER_TICKS;
  400fca:	f240 53dc 	movw	r3, #1500	; 0x5dc
  400fce:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_servo.channel = EXT1_PWM_CHANNEL;
  400fd0:	600d      	str	r5, [r1, #0]

	pwm_channel_init(PWM, &g_pwm_channel_servo);
  400fd2:	4620      	mov	r0, r4
  400fd4:	f000 fcc8 	bl	401968 <pwm_channel_init>

    pwm_channel_enable(PWM, EXT1_PWM_CHANNEL);
  400fd8:	4629      	mov	r1, r5
  400fda:	4620      	mov	r0, r4
  400fdc:	f000 fd46 	bl	401a6c <pwm_channel_enable>
	
}
  400fe0:	b005      	add	sp, #20
  400fe2:	bd30      	pop	{r4, r5, pc}
  400fe4:	00405fac 	.word	0x00405fac
  400fe8:	40020000 	.word	0x40020000
  400fec:	000f4240 	.word	0x000f4240
  400ff0:	07270e00 	.word	0x07270e00
  400ff4:	20000344 	.word	0x20000344

00400ff8 <servo_set_angle>:

void servo_set_angle(float angle)
{
  400ff8:	b508      	push	{r3, lr}

	long duty = map(x, ANGLE_MIN, ANGLE_MAX, PWM_MIN, PWM_MAX);

	// printf("servo_duty: %d\r\n", duty);

	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, duty);
  400ffa:	f004 fea3 	bl	405d44 <__aeabi_f2iz>
  400ffe:	305a      	adds	r0, #90	; 0x5a
  401000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401004:	fb03 f000 	mul.w	r0, r3, r0
  401008:	4a06      	ldr	r2, [pc, #24]	; (401024 <servo_set_angle+0x2c>)
  40100a:	fb82 3200 	smull	r3, r2, r2, r0
  40100e:	4402      	add	r2, r0
  401010:	17c0      	asrs	r0, r0, #31
  401012:	ebc0 12e2 	rsb	r2, r0, r2, asr #7
  401016:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
  40101a:	4903      	ldr	r1, [pc, #12]	; (401028 <servo_set_angle+0x30>)
  40101c:	4803      	ldr	r0, [pc, #12]	; (40102c <servo_set_angle+0x34>)
  40101e:	f000 fd17 	bl	401a50 <pwm_channel_update_duty>
  401022:	bd08      	pop	{r3, pc}
  401024:	b60b60b7 	.word	0xb60b60b7
  401028:	20000344 	.word	0x20000344
  40102c:	40020000 	.word	0x40020000

00401030 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401030:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  401032:	482c      	ldr	r0, [pc, #176]	; (4010e4 <board_init+0xb4>)
  401034:	f000 fc02 	bl	40183c <wdt_disable>
  401038:	200b      	movs	r0, #11
  40103a:	f000 fbd5 	bl	4017e8 <pmc_enable_periph_clk>
  40103e:	200c      	movs	r0, #12
  401040:	f000 fbd2 	bl	4017e8 <pmc_enable_periph_clk>
  401044:	200d      	movs	r0, #13
  401046:	f000 fbcf 	bl	4017e8 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40104a:	4b27      	ldr	r3, [pc, #156]	; (4010e8 <board_init+0xb8>)
  40104c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401050:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401052:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401054:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401058:	4c24      	ldr	r4, [pc, #144]	; (4010ec <board_init+0xbc>)
  40105a:	2504      	movs	r5, #4
  40105c:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40105e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401062:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401064:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401068:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40106a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40106c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401070:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401072:	f022 0204 	bic.w	r2, r2, #4
  401076:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401078:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40107a:	f022 0204 	bic.w	r2, r2, #4
  40107e:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401080:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401084:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401086:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401088:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40108c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401090:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401092:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401094:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401098:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40109c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40109e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4010a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4010a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010a8:	210c      	movs	r1, #12
  4010aa:	4811      	ldr	r0, [pc, #68]	; (4010f0 <board_init+0xc0>)
  4010ac:	f000 fa76 	bl	40159c <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4010b0:	4e10      	ldr	r6, [pc, #64]	; (4010f4 <board_init+0xc4>)
  4010b2:	4631      	mov	r1, r6
  4010b4:	2003      	movs	r0, #3
  4010b6:	f000 f9e5 	bl	401484 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4010ba:	4631      	mov	r1, r6
  4010bc:	4628      	mov	r0, r5
  4010be:	f000 f9e1 	bl	401484 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4010c2:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4010c4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4010c8:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4010ca:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4010cc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4010d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4010d2:	f023 0304 	bic.w	r3, r3, #4
  4010d6:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4010d8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4010da:	f023 0304 	bic.w	r3, r3, #4
  4010de:	6763      	str	r3, [r4, #116]	; 0x74
  4010e0:	bd70      	pop	{r4, r5, r6, pc}
  4010e2:	bf00      	nop
  4010e4:	400e1450 	.word	0x400e1450
  4010e8:	400e1200 	.word	0x400e1200
  4010ec:	400e0e00 	.word	0x400e0e00
  4010f0:	400e1000 	.word	0x400e1000
  4010f4:	08000001 	.word	0x08000001

004010f8 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4010f8:	4b2b      	ldr	r3, [pc, #172]	; (4011a8 <twi_set_speed+0xb0>)
  4010fa:	4299      	cmp	r1, r3
  4010fc:	d849      	bhi.n	401192 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4010fe:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401102:	4299      	cmp	r1, r3
  401104:	d92b      	bls.n	40115e <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  401106:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401108:	4c28      	ldr	r4, [pc, #160]	; (4011ac <twi_set_speed+0xb4>)
  40110a:	fba4 3402 	umull	r3, r4, r4, r2
  40110e:	0ba4      	lsrs	r4, r4, #14
  401110:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401112:	4b27      	ldr	r3, [pc, #156]	; (4011b0 <twi_set_speed+0xb8>)
  401114:	440b      	add	r3, r1
  401116:	009b      	lsls	r3, r3, #2
  401118:	fbb2 f2f3 	udiv	r2, r2, r3
  40111c:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40111e:	2cff      	cmp	r4, #255	; 0xff
  401120:	d939      	bls.n	401196 <twi_set_speed+0x9e>
  401122:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401124:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  401126:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401128:	2cff      	cmp	r4, #255	; 0xff
  40112a:	d902      	bls.n	401132 <twi_set_speed+0x3a>
  40112c:	2b07      	cmp	r3, #7
  40112e:	d1f9      	bne.n	401124 <twi_set_speed+0x2c>
  401130:	e00a      	b.n	401148 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401132:	2aff      	cmp	r2, #255	; 0xff
  401134:	d908      	bls.n	401148 <twi_set_speed+0x50>
  401136:	2b06      	cmp	r3, #6
  401138:	d900      	bls.n	40113c <twi_set_speed+0x44>
  40113a:	e005      	b.n	401148 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  40113c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40113e:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401140:	2aff      	cmp	r2, #255	; 0xff
  401142:	d901      	bls.n	401148 <twi_set_speed+0x50>
  401144:	2b06      	cmp	r3, #6
  401146:	d9f9      	bls.n	40113c <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401148:	0212      	lsls	r2, r2, #8
  40114a:	b292      	uxth	r2, r2
  40114c:	041b      	lsls	r3, r3, #16
  40114e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401152:	431a      	orrs	r2, r3
  401154:	b2e4      	uxtb	r4, r4
  401156:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401158:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40115a:	2000      	movs	r0, #0
  40115c:	e021      	b.n	4011a2 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40115e:	0049      	lsls	r1, r1, #1
  401160:	fbb2 f2f1 	udiv	r2, r2, r1
  401164:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401166:	2aff      	cmp	r2, #255	; 0xff
  401168:	d907      	bls.n	40117a <twi_set_speed+0x82>
  40116a:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  40116c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40116e:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401170:	2aff      	cmp	r2, #255	; 0xff
  401172:	d903      	bls.n	40117c <twi_set_speed+0x84>
  401174:	2b07      	cmp	r3, #7
  401176:	d1f9      	bne.n	40116c <twi_set_speed+0x74>
  401178:	e000      	b.n	40117c <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40117a:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40117c:	0211      	lsls	r1, r2, #8
  40117e:	b289      	uxth	r1, r1
  401180:	041b      	lsls	r3, r3, #16
  401182:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401186:	430b      	orrs	r3, r1
  401188:	b2d2      	uxtb	r2, r2
  40118a:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  40118c:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40118e:	2000      	movs	r0, #0
}
  401190:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401192:	2001      	movs	r0, #1
  401194:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401196:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401198:	bf88      	it	hi
  40119a:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40119c:	d8ce      	bhi.n	40113c <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40119e:	2300      	movs	r3, #0
  4011a0:	e7d2      	b.n	401148 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  4011a2:	bc10      	pop	{r4}
  4011a4:	4770      	bx	lr
  4011a6:	bf00      	nop
  4011a8:	00061a80 	.word	0x00061a80
  4011ac:	057619f1 	.word	0x057619f1
  4011b0:	3ffd1200 	.word	0x3ffd1200

004011b4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4011b4:	b538      	push	{r3, r4, r5, lr}
  4011b6:	4604      	mov	r4, r0
  4011b8:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  4011be:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4011c0:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4011c2:	2380      	movs	r3, #128	; 0x80
  4011c4:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4011c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4011c8:	2308      	movs	r3, #8
  4011ca:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4011cc:	2320      	movs	r3, #32
  4011ce:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4011d0:	2304      	movs	r3, #4
  4011d2:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4011d4:	680a      	ldr	r2, [r1, #0]
  4011d6:	6849      	ldr	r1, [r1, #4]
  4011d8:	f7ff ff8e 	bl	4010f8 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  4011dc:	2801      	cmp	r0, #1
  4011de:	bf14      	ite	ne
  4011e0:	2000      	movne	r0, #0
  4011e2:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  4011e4:	7a6b      	ldrb	r3, [r5, #9]
  4011e6:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4011e8:	bf04      	itt	eq
  4011ea:	2340      	moveq	r3, #64	; 0x40
  4011ec:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  4011ee:	bd38      	pop	{r3, r4, r5, pc}

004011f0 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4011f0:	460a      	mov	r2, r1
  4011f2:	b159      	cbz	r1, 40120c <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  4011f4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  4011f6:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  4011f8:	bfc4      	itt	gt
  4011fa:	7841      	ldrbgt	r1, [r0, #1]
  4011fc:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401200:	2a02      	cmp	r2, #2
  401202:	dd05      	ble.n	401210 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  401204:	7880      	ldrb	r0, [r0, #2]
  401206:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40120a:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40120c:	2000      	movs	r0, #0
  40120e:	4770      	bx	lr
  401210:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  401212:	4770      	bx	lr

00401214 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401218:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  40121a:	2c00      	cmp	r4, #0
  40121c:	d045      	beq.n	4012aa <twi_master_read+0x96>
  40121e:	460b      	mov	r3, r1
  401220:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401222:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401224:	2000      	movs	r0, #0
  401226:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401228:	684a      	ldr	r2, [r1, #4]
  40122a:	0212      	lsls	r2, r2, #8
  40122c:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401230:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  401234:	7c1a      	ldrb	r2, [r3, #16]
  401236:	0412      	lsls	r2, r2, #16
  401238:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  40123c:	430a      	orrs	r2, r1
  40123e:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401240:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401242:	6859      	ldr	r1, [r3, #4]
  401244:	4618      	mov	r0, r3
  401246:	f7ff ffd3 	bl	4011f0 <twi_mk_addr>
  40124a:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40124c:	2c01      	cmp	r4, #1
  40124e:	d104      	bne.n	40125a <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401250:	2303      	movs	r3, #3
  401252:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401254:	f04f 0e01 	mov.w	lr, #1
  401258:	e033      	b.n	4012c2 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40125a:	2301      	movs	r3, #1
  40125c:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  40125e:	f04f 0e00 	mov.w	lr, #0
  401262:	e02e      	b.n	4012c2 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401264:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401266:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401268:	f413 7f80 	tst.w	r3, #256	; 0x100
  40126c:	d120      	bne.n	4012b0 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  40126e:	1e51      	subs	r1, r2, #1
  401270:	b30a      	cbz	r2, 4012b6 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401272:	2c01      	cmp	r4, #1
  401274:	d106      	bne.n	401284 <twi_master_read+0x70>
  401276:	f1be 0f00 	cmp.w	lr, #0
  40127a:	d12f      	bne.n	4012dc <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  40127c:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401280:	46e6      	mov	lr, ip
  401282:	e02b      	b.n	4012dc <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401284:	f013 0f02 	tst.w	r3, #2
  401288:	d005      	beq.n	401296 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  40128a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40128c:	7033      	strb	r3, [r6, #0]

		cnt--;
  40128e:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401290:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401292:	463a      	mov	r2, r7
  401294:	e000      	b.n	401298 <twi_master_read+0x84>
  401296:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401298:	2c00      	cmp	r4, #0
  40129a:	d1e4      	bne.n	401266 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40129c:	6a2b      	ldr	r3, [r5, #32]
  40129e:	f013 0f01 	tst.w	r3, #1
  4012a2:	d0fb      	beq.n	40129c <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  4012a4:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  4012a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4012aa:	2001      	movs	r0, #1
  4012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4012b0:	2005      	movs	r0, #5
  4012b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  4012b6:	2009      	movs	r0, #9
  4012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4012bc:	2005      	movs	r0, #5
  4012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4012c2:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4012c4:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4012c8:	d1f8      	bne.n	4012bc <twi_master_read+0xa8>
  4012ca:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4012ce:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4012d2:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4012d6:	f04f 0c01 	mov.w	ip, #1
  4012da:	e7ca      	b.n	401272 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4012dc:	f013 0f02 	tst.w	r3, #2
  4012e0:	d0c0      	beq.n	401264 <twi_master_read+0x50>
  4012e2:	e7d2      	b.n	40128a <twi_master_read+0x76>

004012e4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4012e4:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4012e6:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4012e8:	2d00      	cmp	r5, #0
  4012ea:	d034      	beq.n	401356 <twi_master_write+0x72>
  4012ec:	460b      	mov	r3, r1
  4012ee:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4012f0:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4012f2:	2000      	movs	r0, #0
  4012f4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4012f6:	7c0a      	ldrb	r2, [r1, #16]
  4012f8:	0412      	lsls	r2, r2, #16
  4012fa:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  4012fe:	685a      	ldr	r2, [r3, #4]
  401300:	0212      	lsls	r2, r2, #8
  401302:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401306:	430a      	orrs	r2, r1
  401308:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40130a:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40130c:	6859      	ldr	r1, [r3, #4]
  40130e:	4618      	mov	r0, r3
  401310:	f7ff ff6e 	bl	4011f0 <twi_mk_addr>
  401314:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401316:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401318:	f413 7f80 	tst.w	r3, #256	; 0x100
  40131c:	d004      	beq.n	401328 <twi_master_write+0x44>
  40131e:	e01c      	b.n	40135a <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401320:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401322:	f413 7f80 	tst.w	r3, #256	; 0x100
  401326:	d11a      	bne.n	40135e <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401328:	f013 0f04 	tst.w	r3, #4
  40132c:	d003      	beq.n	401336 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40132e:	7833      	ldrb	r3, [r6, #0]
  401330:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  401332:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401334:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401336:	2d00      	cmp	r5, #0
  401338:	d1f2      	bne.n	401320 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  40133a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40133c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401340:	d10f      	bne.n	401362 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401342:	f013 0f04 	tst.w	r3, #4
  401346:	d0f8      	beq.n	40133a <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401348:	2302      	movs	r3, #2
  40134a:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40134c:	6a23      	ldr	r3, [r4, #32]
  40134e:	f013 0f01 	tst.w	r3, #1
  401352:	d0fb      	beq.n	40134c <twi_master_write+0x68>
  401354:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401356:	2001      	movs	r0, #1
  401358:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40135a:	2005      	movs	r0, #5
  40135c:	bd70      	pop	{r4, r5, r6, pc}
  40135e:	2005      	movs	r0, #5
  401360:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401362:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401364:	bd70      	pop	{r4, r5, r6, pc}
  401366:	bf00      	nop

00401368 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  401368:	b500      	push	{lr}
  40136a:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  40136c:	2300      	movs	r3, #0
  40136e:	aa06      	add	r2, sp, #24
  401370:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  401374:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  401376:	2201      	movs	r2, #1
  401378:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  40137a:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  40137e:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  401382:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  401384:	a901      	add	r1, sp, #4
  401386:	f7ff ffad 	bl	4012e4 <twi_master_write>
}
  40138a:	b007      	add	sp, #28
  40138c:	f85d fb04 	ldr.w	pc, [sp], #4

00401390 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401390:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401392:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401396:	d02f      	beq.n	4013f8 <pio_set_peripheral+0x68>
  401398:	d807      	bhi.n	4013aa <pio_set_peripheral+0x1a>
  40139a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40139e:	d014      	beq.n	4013ca <pio_set_peripheral+0x3a>
  4013a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4013a4:	d01e      	beq.n	4013e4 <pio_set_peripheral+0x54>
  4013a6:	b939      	cbnz	r1, 4013b8 <pio_set_peripheral+0x28>
  4013a8:	4770      	bx	lr
  4013aa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4013ae:	d036      	beq.n	40141e <pio_set_peripheral+0x8e>
  4013b0:	d804      	bhi.n	4013bc <pio_set_peripheral+0x2c>
  4013b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4013b6:	d029      	beq.n	40140c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4013b8:	6042      	str	r2, [r0, #4]
  4013ba:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4013bc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4013c0:	d02d      	beq.n	40141e <pio_set_peripheral+0x8e>
  4013c2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4013c6:	d02a      	beq.n	40141e <pio_set_peripheral+0x8e>
  4013c8:	e7f6      	b.n	4013b8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4013ca:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013ce:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4013d0:	43d3      	mvns	r3, r2
  4013d2:	4021      	ands	r1, r4
  4013d4:	4019      	ands	r1, r3
  4013d6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013d8:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4013dc:	4021      	ands	r1, r4
  4013de:	400b      	ands	r3, r1
  4013e0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4013e2:	e01a      	b.n	40141a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4013e6:	4313      	orrs	r3, r2
  4013e8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013ea:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4013ee:	400b      	ands	r3, r1
  4013f0:	ea23 0302 	bic.w	r3, r3, r2
  4013f4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4013f6:	e7df      	b.n	4013b8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4013fc:	400b      	ands	r3, r1
  4013fe:	ea23 0302 	bic.w	r3, r3, r2
  401402:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401404:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401406:	4313      	orrs	r3, r2
  401408:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40140a:	e7d5      	b.n	4013b8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40140c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40140e:	4313      	orrs	r3, r2
  401410:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401412:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401414:	4313      	orrs	r3, r2
  401416:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401418:	e7ce      	b.n	4013b8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40141a:	6042      	str	r2, [r0, #4]
}
  40141c:	bc10      	pop	{r4}
  40141e:	4770      	bx	lr

00401420 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401420:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401422:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401426:	bf14      	ite	ne
  401428:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40142a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40142c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401430:	bf14      	ite	ne
  401432:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401434:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401436:	f012 0f02 	tst.w	r2, #2
  40143a:	d002      	beq.n	401442 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  40143c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401440:	e004      	b.n	40144c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401442:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401446:	bf18      	it	ne
  401448:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40144c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40144e:	6001      	str	r1, [r0, #0]
  401450:	4770      	bx	lr
  401452:	bf00      	nop

00401454 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401454:	b410      	push	{r4}
  401456:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401458:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40145a:	b10c      	cbz	r4, 401460 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  40145c:	6641      	str	r1, [r0, #100]	; 0x64
  40145e:	e000      	b.n	401462 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401460:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401462:	b10b      	cbz	r3, 401468 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401464:	6501      	str	r1, [r0, #80]	; 0x50
  401466:	e000      	b.n	40146a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401468:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40146a:	b10a      	cbz	r2, 401470 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  40146c:	6301      	str	r1, [r0, #48]	; 0x30
  40146e:	e000      	b.n	401472 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401470:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401472:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401474:	6001      	str	r1, [r0, #0]
}
  401476:	bc10      	pop	{r4}
  401478:	4770      	bx	lr
  40147a:	bf00      	nop

0040147c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40147c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40147e:	4770      	bx	lr

00401480 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401480:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401482:	4770      	bx	lr

00401484 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401484:	b570      	push	{r4, r5, r6, lr}
  401486:	b082      	sub	sp, #8
  401488:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40148a:	0943      	lsrs	r3, r0, #5
  40148c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401490:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401494:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401496:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40149a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40149e:	d047      	beq.n	401530 <pio_configure_pin+0xac>
  4014a0:	d809      	bhi.n	4014b6 <pio_configure_pin+0x32>
  4014a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4014a6:	d021      	beq.n	4014ec <pio_configure_pin+0x68>
  4014a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4014ac:	d02f      	beq.n	40150e <pio_configure_pin+0x8a>
  4014ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4014b2:	d16f      	bne.n	401594 <pio_configure_pin+0x110>
  4014b4:	e009      	b.n	4014ca <pio_configure_pin+0x46>
  4014b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4014ba:	d055      	beq.n	401568 <pio_configure_pin+0xe4>
  4014bc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4014c0:	d052      	beq.n	401568 <pio_configure_pin+0xe4>
  4014c2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4014c6:	d044      	beq.n	401552 <pio_configure_pin+0xce>
  4014c8:	e064      	b.n	401594 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4014ca:	f000 001f 	and.w	r0, r0, #31
  4014ce:	2601      	movs	r6, #1
  4014d0:	4086      	lsls	r6, r0
  4014d2:	4632      	mov	r2, r6
  4014d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4014d8:	4620      	mov	r0, r4
  4014da:	f7ff ff59 	bl	401390 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4014de:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4014e2:	bf14      	ite	ne
  4014e4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4014e6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4014e8:	2001      	movs	r0, #1
  4014ea:	e054      	b.n	401596 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4014ec:	f000 001f 	and.w	r0, r0, #31
  4014f0:	2601      	movs	r6, #1
  4014f2:	4086      	lsls	r6, r0
  4014f4:	4632      	mov	r2, r6
  4014f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4014fa:	4620      	mov	r0, r4
  4014fc:	f7ff ff48 	bl	401390 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401500:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401504:	bf14      	ite	ne
  401506:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401508:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40150a:	2001      	movs	r0, #1
  40150c:	e043      	b.n	401596 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40150e:	f000 001f 	and.w	r0, r0, #31
  401512:	2601      	movs	r6, #1
  401514:	4086      	lsls	r6, r0
  401516:	4632      	mov	r2, r6
  401518:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40151c:	4620      	mov	r0, r4
  40151e:	f7ff ff37 	bl	401390 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401522:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401526:	bf14      	ite	ne
  401528:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40152a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40152c:	2001      	movs	r0, #1
  40152e:	e032      	b.n	401596 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401530:	f000 001f 	and.w	r0, r0, #31
  401534:	2601      	movs	r6, #1
  401536:	4086      	lsls	r6, r0
  401538:	4632      	mov	r2, r6
  40153a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40153e:	4620      	mov	r0, r4
  401540:	f7ff ff26 	bl	401390 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401544:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401548:	bf14      	ite	ne
  40154a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40154c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40154e:	2001      	movs	r0, #1
  401550:	e021      	b.n	401596 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401552:	f000 011f 	and.w	r1, r0, #31
  401556:	2601      	movs	r6, #1
  401558:	462a      	mov	r2, r5
  40155a:	fa06 f101 	lsl.w	r1, r6, r1
  40155e:	4620      	mov	r0, r4
  401560:	f7ff ff5e 	bl	401420 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401564:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401566:	e016      	b.n	401596 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401568:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  40156c:	f000 011f 	and.w	r1, r0, #31
  401570:	2601      	movs	r6, #1
  401572:	ea05 0306 	and.w	r3, r5, r6
  401576:	9300      	str	r3, [sp, #0]
  401578:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40157c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401580:	bf14      	ite	ne
  401582:	2200      	movne	r2, #0
  401584:	2201      	moveq	r2, #1
  401586:	fa06 f101 	lsl.w	r1, r6, r1
  40158a:	4620      	mov	r0, r4
  40158c:	f7ff ff62 	bl	401454 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401590:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401592:	e000      	b.n	401596 <pio_configure_pin+0x112>

	default:
		return 0;
  401594:	2000      	movs	r0, #0
	}

	return 1;
}
  401596:	b002      	add	sp, #8
  401598:	bd70      	pop	{r4, r5, r6, pc}
  40159a:	bf00      	nop

0040159c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40159c:	b570      	push	{r4, r5, r6, lr}
  40159e:	b082      	sub	sp, #8
  4015a0:	4605      	mov	r5, r0
  4015a2:	460e      	mov	r6, r1
  4015a4:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4015a6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4015aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4015ae:	d038      	beq.n	401622 <pio_configure_pin_group+0x86>
  4015b0:	d809      	bhi.n	4015c6 <pio_configure_pin_group+0x2a>
  4015b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4015b6:	d01c      	beq.n	4015f2 <pio_configure_pin_group+0x56>
  4015b8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4015bc:	d025      	beq.n	40160a <pio_configure_pin_group+0x6e>
  4015be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4015c2:	d150      	bne.n	401666 <pio_configure_pin_group+0xca>
  4015c4:	e009      	b.n	4015da <pio_configure_pin_group+0x3e>
  4015c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4015ca:	d03a      	beq.n	401642 <pio_configure_pin_group+0xa6>
  4015cc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4015d0:	d037      	beq.n	401642 <pio_configure_pin_group+0xa6>
  4015d2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4015d6:	d030      	beq.n	40163a <pio_configure_pin_group+0x9e>
  4015d8:	e045      	b.n	401666 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4015da:	460a      	mov	r2, r1
  4015dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4015e0:	f7ff fed6 	bl	401390 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4015e4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4015e8:	bf14      	ite	ne
  4015ea:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4015ec:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4015ee:	2001      	movs	r0, #1
  4015f0:	e03a      	b.n	401668 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4015f2:	460a      	mov	r2, r1
  4015f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4015f8:	f7ff feca 	bl	401390 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4015fc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401600:	bf14      	ite	ne
  401602:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401604:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401606:	2001      	movs	r0, #1
  401608:	e02e      	b.n	401668 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40160a:	460a      	mov	r2, r1
  40160c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401610:	f7ff febe 	bl	401390 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401614:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401618:	bf14      	ite	ne
  40161a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40161c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40161e:	2001      	movs	r0, #1
  401620:	e022      	b.n	401668 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401622:	460a      	mov	r2, r1
  401624:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401628:	f7ff feb2 	bl	401390 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40162c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401630:	bf14      	ite	ne
  401632:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401634:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401636:	2001      	movs	r0, #1
  401638:	e016      	b.n	401668 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40163a:	f7ff fef1 	bl	401420 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  40163e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401640:	e012      	b.n	401668 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401642:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401646:	f004 0301 	and.w	r3, r4, #1
  40164a:	9300      	str	r3, [sp, #0]
  40164c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401650:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401654:	bf14      	ite	ne
  401656:	2200      	movne	r2, #0
  401658:	2201      	moveq	r2, #1
  40165a:	4631      	mov	r1, r6
  40165c:	4628      	mov	r0, r5
  40165e:	f7ff fef9 	bl	401454 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401662:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401664:	e000      	b.n	401668 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401666:	2000      	movs	r0, #0
	}

	return 1;
}
  401668:	b002      	add	sp, #8
  40166a:	bd70      	pop	{r4, r5, r6, pc}

0040166c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401670:	4681      	mov	r9, r0
  401672:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401674:	f7ff ff02 	bl	40147c <pio_get_interrupt_status>
  401678:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40167a:	4648      	mov	r0, r9
  40167c:	f7ff ff00 	bl	401480 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401680:	4005      	ands	r5, r0
  401682:	d013      	beq.n	4016ac <pio_handler_process+0x40>
  401684:	4c0e      	ldr	r4, [pc, #56]	; (4016c0 <pio_handler_process+0x54>)
  401686:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40168a:	6823      	ldr	r3, [r4, #0]
  40168c:	4543      	cmp	r3, r8
  40168e:	d108      	bne.n	4016a2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401690:	6861      	ldr	r1, [r4, #4]
  401692:	4229      	tst	r1, r5
  401694:	d005      	beq.n	4016a2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401696:	68e3      	ldr	r3, [r4, #12]
  401698:	4640      	mov	r0, r8
  40169a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40169c:	6863      	ldr	r3, [r4, #4]
  40169e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4016a2:	42b4      	cmp	r4, r6
  4016a4:	d002      	beq.n	4016ac <pio_handler_process+0x40>
  4016a6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4016a8:	2d00      	cmp	r5, #0
  4016aa:	d1ee      	bne.n	40168a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4016ac:	4b05      	ldr	r3, [pc, #20]	; (4016c4 <pio_handler_process+0x58>)
  4016ae:	681b      	ldr	r3, [r3, #0]
  4016b0:	b123      	cbz	r3, 4016bc <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4016b2:	4b05      	ldr	r3, [pc, #20]	; (4016c8 <pio_handler_process+0x5c>)
  4016b4:	681b      	ldr	r3, [r3, #0]
  4016b6:	b10b      	cbz	r3, 4016bc <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4016b8:	4648      	mov	r0, r9
  4016ba:	4798      	blx	r3
  4016bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4016c0:	20000240 	.word	0x20000240
  4016c4:	2000036c 	.word	0x2000036c
  4016c8:	2000023c 	.word	0x2000023c

004016cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4016cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4016ce:	210b      	movs	r1, #11
  4016d0:	4801      	ldr	r0, [pc, #4]	; (4016d8 <PIOA_Handler+0xc>)
  4016d2:	f7ff ffcb 	bl	40166c <pio_handler_process>
  4016d6:	bd08      	pop	{r3, pc}
  4016d8:	400e0e00 	.word	0x400e0e00

004016dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4016dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4016de:	210c      	movs	r1, #12
  4016e0:	4801      	ldr	r0, [pc, #4]	; (4016e8 <PIOB_Handler+0xc>)
  4016e2:	f7ff ffc3 	bl	40166c <pio_handler_process>
  4016e6:	bd08      	pop	{r3, pc}
  4016e8:	400e1000 	.word	0x400e1000

004016ec <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4016ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4016ee:	210d      	movs	r1, #13
  4016f0:	4801      	ldr	r0, [pc, #4]	; (4016f8 <PIOC_Handler+0xc>)
  4016f2:	f7ff ffbb 	bl	40166c <pio_handler_process>
  4016f6:	bd08      	pop	{r3, pc}
  4016f8:	400e1200 	.word	0x400e1200

004016fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4016fc:	4a18      	ldr	r2, [pc, #96]	; (401760 <pmc_switch_mck_to_pllack+0x64>)
  4016fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401704:	4318      	orrs	r0, r3
  401706:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401708:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40170a:	f013 0f08 	tst.w	r3, #8
  40170e:	d003      	beq.n	401718 <pmc_switch_mck_to_pllack+0x1c>
  401710:	e009      	b.n	401726 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401712:	3b01      	subs	r3, #1
  401714:	d103      	bne.n	40171e <pmc_switch_mck_to_pllack+0x22>
  401716:	e01e      	b.n	401756 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401718:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40171c:	4910      	ldr	r1, [pc, #64]	; (401760 <pmc_switch_mck_to_pllack+0x64>)
  40171e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401720:	f012 0f08 	tst.w	r2, #8
  401724:	d0f5      	beq.n	401712 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401726:	4a0e      	ldr	r2, [pc, #56]	; (401760 <pmc_switch_mck_to_pllack+0x64>)
  401728:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40172a:	f023 0303 	bic.w	r3, r3, #3
  40172e:	f043 0302 	orr.w	r3, r3, #2
  401732:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401734:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401736:	f010 0008 	ands.w	r0, r0, #8
  40173a:	d004      	beq.n	401746 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40173c:	2000      	movs	r0, #0
  40173e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401740:	3b01      	subs	r3, #1
  401742:	d103      	bne.n	40174c <pmc_switch_mck_to_pllack+0x50>
  401744:	e009      	b.n	40175a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401746:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40174a:	4905      	ldr	r1, [pc, #20]	; (401760 <pmc_switch_mck_to_pllack+0x64>)
  40174c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40174e:	f012 0f08 	tst.w	r2, #8
  401752:	d0f5      	beq.n	401740 <pmc_switch_mck_to_pllack+0x44>
  401754:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401756:	2001      	movs	r0, #1
  401758:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40175a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40175c:	4770      	bx	lr
  40175e:	bf00      	nop
  401760:	400e0400 	.word	0x400e0400

00401764 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401764:	b138      	cbz	r0, 401776 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401766:	4911      	ldr	r1, [pc, #68]	; (4017ac <pmc_switch_mainck_to_xtal+0x48>)
  401768:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40176a:	4a11      	ldr	r2, [pc, #68]	; (4017b0 <pmc_switch_mainck_to_xtal+0x4c>)
  40176c:	401a      	ands	r2, r3
  40176e:	4b11      	ldr	r3, [pc, #68]	; (4017b4 <pmc_switch_mainck_to_xtal+0x50>)
  401770:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401772:	620b      	str	r3, [r1, #32]
  401774:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401776:	480d      	ldr	r0, [pc, #52]	; (4017ac <pmc_switch_mainck_to_xtal+0x48>)
  401778:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40177a:	0209      	lsls	r1, r1, #8
  40177c:	b289      	uxth	r1, r1
  40177e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  401782:	f023 0303 	bic.w	r3, r3, #3
  401786:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40178a:	f043 0301 	orr.w	r3, r3, #1
  40178e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401790:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401792:	4602      	mov	r2, r0
  401794:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401796:	f013 0f01 	tst.w	r3, #1
  40179a:	d0fb      	beq.n	401794 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40179c:	4a03      	ldr	r2, [pc, #12]	; (4017ac <pmc_switch_mainck_to_xtal+0x48>)
  40179e:	6a13      	ldr	r3, [r2, #32]
  4017a0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4017a8:	6213      	str	r3, [r2, #32]
  4017aa:	4770      	bx	lr
  4017ac:	400e0400 	.word	0x400e0400
  4017b0:	fec8fffc 	.word	0xfec8fffc
  4017b4:	01370002 	.word	0x01370002

004017b8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4017b8:	4b02      	ldr	r3, [pc, #8]	; (4017c4 <pmc_osc_is_ready_mainck+0xc>)
  4017ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017bc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4017c0:	4770      	bx	lr
  4017c2:	bf00      	nop
  4017c4:	400e0400 	.word	0x400e0400

004017c8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4017c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4017cc:	4b01      	ldr	r3, [pc, #4]	; (4017d4 <pmc_disable_pllack+0xc>)
  4017ce:	629a      	str	r2, [r3, #40]	; 0x28
  4017d0:	4770      	bx	lr
  4017d2:	bf00      	nop
  4017d4:	400e0400 	.word	0x400e0400

004017d8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4017d8:	4b02      	ldr	r3, [pc, #8]	; (4017e4 <pmc_is_locked_pllack+0xc>)
  4017da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017dc:	f000 0002 	and.w	r0, r0, #2
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop
  4017e4:	400e0400 	.word	0x400e0400

004017e8 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4017e8:	2822      	cmp	r0, #34	; 0x22
  4017ea:	d81e      	bhi.n	40182a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4017ec:	281f      	cmp	r0, #31
  4017ee:	d80c      	bhi.n	40180a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4017f0:	4b11      	ldr	r3, [pc, #68]	; (401838 <pmc_enable_periph_clk+0x50>)
  4017f2:	699a      	ldr	r2, [r3, #24]
  4017f4:	2301      	movs	r3, #1
  4017f6:	4083      	lsls	r3, r0
  4017f8:	4393      	bics	r3, r2
  4017fa:	d018      	beq.n	40182e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4017fc:	2301      	movs	r3, #1
  4017fe:	fa03 f000 	lsl.w	r0, r3, r0
  401802:	4b0d      	ldr	r3, [pc, #52]	; (401838 <pmc_enable_periph_clk+0x50>)
  401804:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401806:	2000      	movs	r0, #0
  401808:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40180a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40180c:	4b0a      	ldr	r3, [pc, #40]	; (401838 <pmc_enable_periph_clk+0x50>)
  40180e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401812:	2301      	movs	r3, #1
  401814:	4083      	lsls	r3, r0
  401816:	4393      	bics	r3, r2
  401818:	d00b      	beq.n	401832 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40181a:	2301      	movs	r3, #1
  40181c:	fa03 f000 	lsl.w	r0, r3, r0
  401820:	4b05      	ldr	r3, [pc, #20]	; (401838 <pmc_enable_periph_clk+0x50>)
  401822:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401826:	2000      	movs	r0, #0
  401828:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40182a:	2001      	movs	r0, #1
  40182c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40182e:	2000      	movs	r0, #0
  401830:	4770      	bx	lr
  401832:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401834:	4770      	bx	lr
  401836:	bf00      	nop
  401838:	400e0400 	.word	0x400e0400

0040183c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40183c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401840:	6043      	str	r3, [r0, #4]
  401842:	4770      	bx	lr

00401844 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401844:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401846:	23ac      	movs	r3, #172	; 0xac
  401848:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40184a:	680b      	ldr	r3, [r1, #0]
  40184c:	684a      	ldr	r2, [r1, #4]
  40184e:	fbb3 f3f2 	udiv	r3, r3, r2
  401852:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401854:	1e5c      	subs	r4, r3, #1
  401856:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40185a:	4294      	cmp	r4, r2
  40185c:	d80a      	bhi.n	401874 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40185e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401860:	688b      	ldr	r3, [r1, #8]
  401862:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401864:	f240 2302 	movw	r3, #514	; 0x202
  401868:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40186c:	2350      	movs	r3, #80	; 0x50
  40186e:	6003      	str	r3, [r0, #0]

	return 0;
  401870:	2000      	movs	r0, #0
  401872:	e000      	b.n	401876 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  401874:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  401876:	bc10      	pop	{r4}
  401878:	4770      	bx	lr
  40187a:	bf00      	nop

0040187c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40187c:	6943      	ldr	r3, [r0, #20]
  40187e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401882:	bf1a      	itte	ne
  401884:	61c1      	strne	r1, [r0, #28]
	return 0;
  401886:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401888:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40188a:	4770      	bx	lr

0040188c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40188c:	6943      	ldr	r3, [r0, #20]
  40188e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401892:	bf1d      	ittte	ne
  401894:	6983      	ldrne	r3, [r0, #24]
  401896:	700b      	strbne	r3, [r1, #0]
	return 0;
  401898:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  40189a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  40189c:	4770      	bx	lr
  40189e:	bf00      	nop

004018a0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4018a0:	6943      	ldr	r3, [r0, #20]
  4018a2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4018a6:	bf1d      	ittte	ne
  4018a8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4018ac:	61c1      	strne	r1, [r0, #28]
	return 0;
  4018ae:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4018b0:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4018b2:	4770      	bx	lr

004018b4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4018b4:	6943      	ldr	r3, [r0, #20]
  4018b6:	f013 0f01 	tst.w	r3, #1
  4018ba:	d005      	beq.n	4018c8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4018bc:	6983      	ldr	r3, [r0, #24]
  4018be:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4018c2:	600b      	str	r3, [r1, #0]

	return 0;
  4018c4:	2000      	movs	r0, #0
  4018c6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4018c8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4018ca:	4770      	bx	lr

004018cc <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4018cc:	b4f0      	push	{r4, r5, r6, r7}
  4018ce:	b08c      	sub	sp, #48	; 0x30
  4018d0:	4607      	mov	r7, r0
  4018d2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4018d4:	ac01      	add	r4, sp, #4
  4018d6:	4d11      	ldr	r5, [pc, #68]	; (40191c <pwm_clocks_generate+0x50>)
  4018d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4018da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4018dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4018de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4018e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4018e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4018e8:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4018ea:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4018ec:	f852 3b04 	ldr.w	r3, [r2], #4
  4018f0:	fbb6 f3f3 	udiv	r3, r6, r3
  4018f4:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4018f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4018fc:	d905      	bls.n	40190a <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  4018fe:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401900:	280b      	cmp	r0, #11
  401902:	d1f3      	bne.n	4018ec <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401904:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401908:	e005      	b.n	401916 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40190a:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  40190c:	bf94      	ite	ls
  40190e:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  401912:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  401916:	b00c      	add	sp, #48	; 0x30
  401918:	bcf0      	pop	{r4, r5, r6, r7}
  40191a:	4770      	bx	lr
  40191c:	00405fbc 	.word	0x00405fbc

00401920 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401920:	b570      	push	{r4, r5, r6, lr}
  401922:	4606      	mov	r6, r0
  401924:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  401926:	6808      	ldr	r0, [r1, #0]
  401928:	b140      	cbz	r0, 40193c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40192a:	6889      	ldr	r1, [r1, #8]
  40192c:	f7ff ffce 	bl	4018cc <pwm_clocks_generate>
  401930:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  401932:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401936:	4298      	cmp	r0, r3
  401938:	d101      	bne.n	40193e <pwm_init+0x1e>
  40193a:	e00e      	b.n	40195a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  40193c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40193e:	6860      	ldr	r0, [r4, #4]
  401940:	b140      	cbz	r0, 401954 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401942:	68a1      	ldr	r1, [r4, #8]
  401944:	f7ff ffc2 	bl	4018cc <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  401948:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40194c:	4298      	cmp	r0, r3
  40194e:	d007      	beq.n	401960 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  401950:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  401954:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  401956:	2000      	movs	r0, #0
  401958:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40195a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40195e:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401960:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  401964:	bd70      	pop	{r4, r5, r6, pc}
  401966:	bf00      	nop

00401968 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401968:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40196a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40196c:	684a      	ldr	r2, [r1, #4]
  40196e:	f002 020f 	and.w	r2, r2, #15
  401972:	8a8c      	ldrh	r4, [r1, #20]
  401974:	4322      	orrs	r2, r4
  401976:	890c      	ldrh	r4, [r1, #8]
  401978:	4322      	orrs	r2, r4
  40197a:	7a8c      	ldrb	r4, [r1, #10]
  40197c:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  401980:	7d8c      	ldrb	r4, [r1, #22]
  401982:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  401986:	7dcc      	ldrb	r4, [r1, #23]
  401988:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  40198c:	7e0c      	ldrb	r4, [r1, #24]
  40198e:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  401992:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401996:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  40199a:	68ca      	ldr	r2, [r1, #12]
  40199c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4019a0:	690a      	ldr	r2, [r1, #16]
  4019a2:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4019a6:	7d8a      	ldrb	r2, [r1, #22]
  4019a8:	b13a      	cbz	r2, 4019ba <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4019aa:	8b8c      	ldrh	r4, [r1, #28]
  4019ac:	8b4a      	ldrh	r2, [r1, #26]
  4019ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4019b2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4019b6:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4019ba:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4019bc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  4019c0:	409a      	lsls	r2, r3
  4019c2:	43d2      	mvns	r2, r2
  4019c4:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4019c8:	7fcc      	ldrb	r4, [r1, #31]
  4019ca:	fa04 f603 	lsl.w	r6, r4, r3
  4019ce:	7f8c      	ldrb	r4, [r1, #30]
  4019d0:	409c      	lsls	r4, r3
  4019d2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  4019d6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  4019d8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4019da:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4019dc:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4019de:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4019e2:	fa04 f503 	lsl.w	r5, r4, r3
  4019e6:	f891 4020 	ldrb.w	r4, [r1, #32]
  4019ea:	409c      	lsls	r4, r3
  4019ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4019f0:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4019f2:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4019f4:	2201      	movs	r2, #1
  4019f6:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  4019f8:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4019fc:	b11c      	cbz	r4, 401a06 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  4019fe:	6a04      	ldr	r4, [r0, #32]
  401a00:	4314      	orrs	r4, r2
  401a02:	6204      	str	r4, [r0, #32]
  401a04:	e003      	b.n	401a0e <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  401a06:	6a04      	ldr	r4, [r0, #32]
  401a08:	ea24 0402 	bic.w	r4, r4, r2
  401a0c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  401a0e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  401a12:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  401a14:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401a16:	bf0c      	ite	eq
  401a18:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  401a1a:	4394      	bicne	r4, r2
  401a1c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401a1e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  401a22:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  401a24:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401a26:	bf0c      	ite	eq
  401a28:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  401a2c:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  401a30:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401a32:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401a34:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  401a36:	22ff      	movs	r2, #255	; 0xff
  401a38:	409a      	lsls	r2, r3
  401a3a:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401a3e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  401a42:	fa01 f303 	lsl.w	r3, r1, r3
  401a46:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  401a48:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  401a4a:	2000      	movs	r0, #0
  401a4c:	bc70      	pop	{r4, r5, r6}
  401a4e:	4770      	bx	lr

00401a50 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401a50:	690b      	ldr	r3, [r1, #16]
  401a52:	4293      	cmp	r3, r2
  401a54:	d307      	bcc.n	401a66 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  401a56:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401a58:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401a5a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401a5e:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  401a62:	2000      	movs	r0, #0
  401a64:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  401a66:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  401a6a:	4770      	bx	lr

00401a6c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  401a6c:	2301      	movs	r3, #1
  401a6e:	fa03 f101 	lsl.w	r1, r3, r1
  401a72:	6041      	str	r1, [r0, #4]
  401a74:	4770      	bx	lr
  401a76:	bf00      	nop

00401a78 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  401a78:	2301      	movs	r3, #1
  401a7a:	fa03 f101 	lsl.w	r1, r3, r1
  401a7e:	6081      	str	r1, [r0, #8]
  401a80:	4770      	bx	lr
  401a82:	bf00      	nop

00401a84 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401a84:	e7fe      	b.n	401a84 <Dummy_Handler>
  401a86:	bf00      	nop

00401a88 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401a88:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  401a8a:	4b20      	ldr	r3, [pc, #128]	; (401b0c <Reset_Handler+0x84>)
  401a8c:	4a20      	ldr	r2, [pc, #128]	; (401b10 <Reset_Handler+0x88>)
  401a8e:	429a      	cmp	r2, r3
  401a90:	d912      	bls.n	401ab8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  401a92:	4b20      	ldr	r3, [pc, #128]	; (401b14 <Reset_Handler+0x8c>)
  401a94:	4a1d      	ldr	r2, [pc, #116]	; (401b0c <Reset_Handler+0x84>)
  401a96:	429a      	cmp	r2, r3
  401a98:	d21e      	bcs.n	401ad8 <Reset_Handler+0x50>
  401a9a:	4611      	mov	r1, r2
  401a9c:	3b01      	subs	r3, #1
  401a9e:	1a9b      	subs	r3, r3, r2
  401aa0:	f023 0303 	bic.w	r3, r3, #3
  401aa4:	3304      	adds	r3, #4
  401aa6:	4a1a      	ldr	r2, [pc, #104]	; (401b10 <Reset_Handler+0x88>)
  401aa8:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  401aaa:	f852 0b04 	ldr.w	r0, [r2], #4
  401aae:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401ab2:	429a      	cmp	r2, r3
  401ab4:	d1f9      	bne.n	401aaa <Reset_Handler+0x22>
  401ab6:	e00f      	b.n	401ad8 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401ab8:	4b14      	ldr	r3, [pc, #80]	; (401b0c <Reset_Handler+0x84>)
  401aba:	4a15      	ldr	r2, [pc, #84]	; (401b10 <Reset_Handler+0x88>)
  401abc:	429a      	cmp	r2, r3
  401abe:	d20b      	bcs.n	401ad8 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401ac0:	4b14      	ldr	r3, [pc, #80]	; (401b14 <Reset_Handler+0x8c>)
  401ac2:	4a12      	ldr	r2, [pc, #72]	; (401b0c <Reset_Handler+0x84>)
  401ac4:	1a9a      	subs	r2, r3, r2
  401ac6:	4814      	ldr	r0, [pc, #80]	; (401b18 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401ac8:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401aca:	b12a      	cbz	r2, 401ad8 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  401acc:	f851 2904 	ldr.w	r2, [r1], #-4
  401ad0:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401ad4:	4281      	cmp	r1, r0
  401ad6:	d1f9      	bne.n	401acc <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401ad8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401ada:	4b10      	ldr	r3, [pc, #64]	; (401b1c <Reset_Handler+0x94>)
  401adc:	4a10      	ldr	r2, [pc, #64]	; (401b20 <Reset_Handler+0x98>)
  401ade:	429a      	cmp	r2, r3
  401ae0:	d20b      	bcs.n	401afa <Reset_Handler+0x72>
  401ae2:	1d13      	adds	r3, r2, #4
  401ae4:	4a0f      	ldr	r2, [pc, #60]	; (401b24 <Reset_Handler+0x9c>)
  401ae6:	1ad2      	subs	r2, r2, r3
  401ae8:	f022 0203 	bic.w	r2, r2, #3
  401aec:	441a      	add	r2, r3
  401aee:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401af0:	2100      	movs	r1, #0
  401af2:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401af6:	429a      	cmp	r2, r3
  401af8:	d1fb      	bne.n	401af2 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401afa:	4b0b      	ldr	r3, [pc, #44]	; (401b28 <Reset_Handler+0xa0>)
  401afc:	4a0b      	ldr	r2, [pc, #44]	; (401b2c <Reset_Handler+0xa4>)
  401afe:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401b00:	f000 fca8 	bl	402454 <__libc_init_array>

	/* Branch to main function */
	main();
  401b04:	f7fe fbf6 	bl	4002f4 <main>
  401b08:	e7fe      	b.n	401b08 <Reset_Handler+0x80>
  401b0a:	bf00      	nop
  401b0c:	20000000 	.word	0x20000000
  401b10:	0040631c 	.word	0x0040631c
  401b14:	200001e4 	.word	0x200001e4
  401b18:	00406318 	.word	0x00406318
  401b1c:	20000374 	.word	0x20000374
  401b20:	200001e4 	.word	0x200001e4
  401b24:	20000377 	.word	0x20000377
  401b28:	e000ed00 	.word	0xe000ed00
  401b2c:	00400000 	.word	0x00400000

00401b30 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401b30:	4b3d      	ldr	r3, [pc, #244]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b34:	f003 0303 	and.w	r3, r3, #3
  401b38:	2b03      	cmp	r3, #3
  401b3a:	d85d      	bhi.n	401bf8 <SystemCoreClockUpdate+0xc8>
  401b3c:	e8df f003 	tbb	[pc, r3]
  401b40:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401b44:	4b39      	ldr	r3, [pc, #228]	; (401c2c <SystemCoreClockUpdate+0xfc>)
  401b46:	695b      	ldr	r3, [r3, #20]
  401b48:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401b4c:	bf14      	ite	ne
  401b4e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401b52:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401b56:	4b36      	ldr	r3, [pc, #216]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401b58:	601a      	str	r2, [r3, #0]
  401b5a:	e04d      	b.n	401bf8 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401b5c:	4b32      	ldr	r3, [pc, #200]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401b5e:	6a1b      	ldr	r3, [r3, #32]
  401b60:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b64:	d003      	beq.n	401b6e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401b66:	4a33      	ldr	r2, [pc, #204]	; (401c34 <SystemCoreClockUpdate+0x104>)
  401b68:	4b31      	ldr	r3, [pc, #196]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401b6a:	601a      	str	r2, [r3, #0]
  401b6c:	e044      	b.n	401bf8 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b6e:	4a32      	ldr	r2, [pc, #200]	; (401c38 <SystemCoreClockUpdate+0x108>)
  401b70:	4b2f      	ldr	r3, [pc, #188]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401b72:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401b74:	4b2c      	ldr	r3, [pc, #176]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401b76:	6a1b      	ldr	r3, [r3, #32]
  401b78:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b7c:	2b10      	cmp	r3, #16
  401b7e:	d002      	beq.n	401b86 <SystemCoreClockUpdate+0x56>
  401b80:	2b20      	cmp	r3, #32
  401b82:	d004      	beq.n	401b8e <SystemCoreClockUpdate+0x5e>
  401b84:	e038      	b.n	401bf8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401b86:	4a2d      	ldr	r2, [pc, #180]	; (401c3c <SystemCoreClockUpdate+0x10c>)
  401b88:	4b29      	ldr	r3, [pc, #164]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401b8a:	601a      	str	r2, [r3, #0]
			break;
  401b8c:	e034      	b.n	401bf8 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401b8e:	4a29      	ldr	r2, [pc, #164]	; (401c34 <SystemCoreClockUpdate+0x104>)
  401b90:	4b27      	ldr	r3, [pc, #156]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401b92:	601a      	str	r2, [r3, #0]
			break;
  401b94:	e030      	b.n	401bf8 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401b96:	4b24      	ldr	r3, [pc, #144]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401b98:	6a1b      	ldr	r3, [r3, #32]
  401b9a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b9e:	d003      	beq.n	401ba8 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401ba0:	4a24      	ldr	r2, [pc, #144]	; (401c34 <SystemCoreClockUpdate+0x104>)
  401ba2:	4b23      	ldr	r3, [pc, #140]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401ba4:	601a      	str	r2, [r3, #0]
  401ba6:	e012      	b.n	401bce <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ba8:	4a23      	ldr	r2, [pc, #140]	; (401c38 <SystemCoreClockUpdate+0x108>)
  401baa:	4b21      	ldr	r3, [pc, #132]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401bac:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401bae:	4b1e      	ldr	r3, [pc, #120]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401bb0:	6a1b      	ldr	r3, [r3, #32]
  401bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bb6:	2b10      	cmp	r3, #16
  401bb8:	d002      	beq.n	401bc0 <SystemCoreClockUpdate+0x90>
  401bba:	2b20      	cmp	r3, #32
  401bbc:	d004      	beq.n	401bc8 <SystemCoreClockUpdate+0x98>
  401bbe:	e006      	b.n	401bce <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401bc0:	4a1e      	ldr	r2, [pc, #120]	; (401c3c <SystemCoreClockUpdate+0x10c>)
  401bc2:	4b1b      	ldr	r3, [pc, #108]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401bc4:	601a      	str	r2, [r3, #0]
					break;
  401bc6:	e002      	b.n	401bce <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401bc8:	4a1a      	ldr	r2, [pc, #104]	; (401c34 <SystemCoreClockUpdate+0x104>)
  401bca:	4b19      	ldr	r3, [pc, #100]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401bcc:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401bce:	4b16      	ldr	r3, [pc, #88]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bd2:	f003 0303 	and.w	r3, r3, #3
  401bd6:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401bd8:	4a13      	ldr	r2, [pc, #76]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401bda:	bf07      	ittee	eq
  401bdc:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401bde:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401be0:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401be2:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401be4:	4812      	ldr	r0, [pc, #72]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401be6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  401bea:	6803      	ldr	r3, [r0, #0]
  401bec:	fb01 3303 	mla	r3, r1, r3, r3
  401bf0:	b2d2      	uxtb	r2, r2
  401bf2:	fbb3 f3f2 	udiv	r3, r3, r2
  401bf6:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401bf8:	4b0b      	ldr	r3, [pc, #44]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c00:	2b70      	cmp	r3, #112	; 0x70
  401c02:	d107      	bne.n	401c14 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401c04:	4a0a      	ldr	r2, [pc, #40]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401c06:	6813      	ldr	r3, [r2, #0]
  401c08:	490d      	ldr	r1, [pc, #52]	; (401c40 <SystemCoreClockUpdate+0x110>)
  401c0a:	fba1 1303 	umull	r1, r3, r1, r3
  401c0e:	085b      	lsrs	r3, r3, #1
  401c10:	6013      	str	r3, [r2, #0]
  401c12:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401c14:	4b04      	ldr	r3, [pc, #16]	; (401c28 <SystemCoreClockUpdate+0xf8>)
  401c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401c18:	4905      	ldr	r1, [pc, #20]	; (401c30 <SystemCoreClockUpdate+0x100>)
  401c1a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401c1e:	680b      	ldr	r3, [r1, #0]
  401c20:	40d3      	lsrs	r3, r2
  401c22:	600b      	str	r3, [r1, #0]
  401c24:	4770      	bx	lr
  401c26:	bf00      	nop
  401c28:	400e0400 	.word	0x400e0400
  401c2c:	400e1410 	.word	0x400e1410
  401c30:	2000000c 	.word	0x2000000c
  401c34:	00b71b00 	.word	0x00b71b00
  401c38:	003d0900 	.word	0x003d0900
  401c3c:	007a1200 	.word	0x007a1200
  401c40:	aaaaaaab 	.word	0xaaaaaaab

00401c44 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401c44:	4b1a      	ldr	r3, [pc, #104]	; (401cb0 <system_init_flash+0x6c>)
  401c46:	4298      	cmp	r0, r3
  401c48:	d807      	bhi.n	401c5a <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401c4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401c4e:	4a19      	ldr	r2, [pc, #100]	; (401cb4 <system_init_flash+0x70>)
  401c50:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401c52:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401c56:	6013      	str	r3, [r2, #0]
  401c58:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401c5a:	4b17      	ldr	r3, [pc, #92]	; (401cb8 <system_init_flash+0x74>)
  401c5c:	4298      	cmp	r0, r3
  401c5e:	d806      	bhi.n	401c6e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401c60:	4b16      	ldr	r3, [pc, #88]	; (401cbc <system_init_flash+0x78>)
  401c62:	4a14      	ldr	r2, [pc, #80]	; (401cb4 <system_init_flash+0x70>)
  401c64:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401c66:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401c6a:	6013      	str	r3, [r2, #0]
  401c6c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401c6e:	4b14      	ldr	r3, [pc, #80]	; (401cc0 <system_init_flash+0x7c>)
  401c70:	4298      	cmp	r0, r3
  401c72:	d806      	bhi.n	401c82 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401c74:	4b13      	ldr	r3, [pc, #76]	; (401cc4 <system_init_flash+0x80>)
  401c76:	4a0f      	ldr	r2, [pc, #60]	; (401cb4 <system_init_flash+0x70>)
  401c78:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401c7a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401c7e:	6013      	str	r3, [r2, #0]
  401c80:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401c82:	4b11      	ldr	r3, [pc, #68]	; (401cc8 <system_init_flash+0x84>)
  401c84:	4298      	cmp	r0, r3
  401c86:	d806      	bhi.n	401c96 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401c88:	4b10      	ldr	r3, [pc, #64]	; (401ccc <system_init_flash+0x88>)
  401c8a:	4a0a      	ldr	r2, [pc, #40]	; (401cb4 <system_init_flash+0x70>)
  401c8c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401c8e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401c92:	6013      	str	r3, [r2, #0]
  401c94:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401c96:	4b0e      	ldr	r3, [pc, #56]	; (401cd0 <system_init_flash+0x8c>)
  401c98:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401c9a:	bf94      	ite	ls
  401c9c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401ca0:	4b0c      	ldrhi	r3, [pc, #48]	; (401cd4 <system_init_flash+0x90>)
  401ca2:	4a04      	ldr	r2, [pc, #16]	; (401cb4 <system_init_flash+0x70>)
  401ca4:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401ca6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401caa:	6013      	str	r3, [r2, #0]
  401cac:	4770      	bx	lr
  401cae:	bf00      	nop
  401cb0:	01312cff 	.word	0x01312cff
  401cb4:	400e0a00 	.word	0x400e0a00
  401cb8:	026259ff 	.word	0x026259ff
  401cbc:	04000100 	.word	0x04000100
  401cc0:	039386ff 	.word	0x039386ff
  401cc4:	04000200 	.word	0x04000200
  401cc8:	04c4b3ff 	.word	0x04c4b3ff
  401ccc:	04000300 	.word	0x04000300
  401cd0:	05f5e0ff 	.word	0x05f5e0ff
  401cd4:	04000500 	.word	0x04000500

00401cd8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401cd8:	4b09      	ldr	r3, [pc, #36]	; (401d00 <_sbrk+0x28>)
  401cda:	681b      	ldr	r3, [r3, #0]
  401cdc:	b913      	cbnz	r3, 401ce4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401cde:	4a09      	ldr	r2, [pc, #36]	; (401d04 <_sbrk+0x2c>)
  401ce0:	4b07      	ldr	r3, [pc, #28]	; (401d00 <_sbrk+0x28>)
  401ce2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401ce4:	4b06      	ldr	r3, [pc, #24]	; (401d00 <_sbrk+0x28>)
  401ce6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401ce8:	181a      	adds	r2, r3, r0
  401cea:	4907      	ldr	r1, [pc, #28]	; (401d08 <_sbrk+0x30>)
  401cec:	4291      	cmp	r1, r2
  401cee:	db04      	blt.n	401cfa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401cf0:	4610      	mov	r0, r2
  401cf2:	4a03      	ldr	r2, [pc, #12]	; (401d00 <_sbrk+0x28>)
  401cf4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401cf6:	4618      	mov	r0, r3
  401cf8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401cfe:	4770      	bx	lr
  401d00:	200002b0 	.word	0x200002b0
  401d04:	20003378 	.word	0x20003378
  401d08:	20027ffc 	.word	0x20027ffc

00401d0c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401d10:	4770      	bx	lr
  401d12:	bf00      	nop

00401d14 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401d18:	604b      	str	r3, [r1, #4]

	return 0;
}
  401d1a:	2000      	movs	r0, #0
  401d1c:	4770      	bx	lr
  401d1e:	bf00      	nop

00401d20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401d20:	2001      	movs	r0, #1
  401d22:	4770      	bx	lr

00401d24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401d24:	2000      	movs	r0, #0
  401d26:	4770      	bx	lr

00401d28 <atan2>:
  401d28:	f000 b85e 	b.w	401de8 <__ieee754_atan2>

00401d2c <sqrt>:
  401d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d30:	b08b      	sub	sp, #44	; 0x2c
  401d32:	4604      	mov	r4, r0
  401d34:	460d      	mov	r5, r1
  401d36:	f000 f921 	bl	401f7c <__ieee754_sqrt>
  401d3a:	4b28      	ldr	r3, [pc, #160]	; (401ddc <sqrt+0xb0>)
  401d3c:	f993 a000 	ldrsb.w	sl, [r3]
  401d40:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  401d44:	4606      	mov	r6, r0
  401d46:	460f      	mov	r7, r1
  401d48:	d012      	beq.n	401d70 <sqrt+0x44>
  401d4a:	4622      	mov	r2, r4
  401d4c:	462b      	mov	r3, r5
  401d4e:	4620      	mov	r0, r4
  401d50:	4629      	mov	r1, r5
  401d52:	f003 fc95 	bl	405680 <__aeabi_dcmpun>
  401d56:	4683      	mov	fp, r0
  401d58:	b950      	cbnz	r0, 401d70 <sqrt+0x44>
  401d5a:	f04f 0800 	mov.w	r8, #0
  401d5e:	f04f 0900 	mov.w	r9, #0
  401d62:	4642      	mov	r2, r8
  401d64:	464b      	mov	r3, r9
  401d66:	4620      	mov	r0, r4
  401d68:	4629      	mov	r1, r5
  401d6a:	f003 fc61 	bl	405630 <__aeabi_dcmplt>
  401d6e:	b920      	cbnz	r0, 401d7a <sqrt+0x4e>
  401d70:	4630      	mov	r0, r6
  401d72:	4639      	mov	r1, r7
  401d74:	b00b      	add	sp, #44	; 0x2c
  401d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d7a:	4b19      	ldr	r3, [pc, #100]	; (401de0 <sqrt+0xb4>)
  401d7c:	f8cd b020 	str.w	fp, [sp, #32]
  401d80:	2201      	movs	r2, #1
  401d82:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401d86:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401d8a:	e88d 000c 	stmia.w	sp, {r2, r3}
  401d8e:	f1ba 0f00 	cmp.w	sl, #0
  401d92:	d015      	beq.n	401dc0 <sqrt+0x94>
  401d94:	4642      	mov	r2, r8
  401d96:	464b      	mov	r3, r9
  401d98:	4640      	mov	r0, r8
  401d9a:	4649      	mov	r1, r9
  401d9c:	f003 fb00 	bl	4053a0 <__aeabi_ddiv>
  401da0:	f1ba 0f02 	cmp.w	sl, #2
  401da4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401da8:	d10c      	bne.n	401dc4 <sqrt+0x98>
  401daa:	f000 fb4d 	bl	402448 <__errno>
  401dae:	2321      	movs	r3, #33	; 0x21
  401db0:	6003      	str	r3, [r0, #0]
  401db2:	9b08      	ldr	r3, [sp, #32]
  401db4:	b963      	cbnz	r3, 401dd0 <sqrt+0xa4>
  401db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  401dba:	b00b      	add	sp, #44	; 0x2c
  401dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dc0:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401dc4:	4668      	mov	r0, sp
  401dc6:	f000 fb3d 	bl	402444 <matherr>
  401dca:	2800      	cmp	r0, #0
  401dcc:	d1f1      	bne.n	401db2 <sqrt+0x86>
  401dce:	e7ec      	b.n	401daa <sqrt+0x7e>
  401dd0:	f000 fb3a 	bl	402448 <__errno>
  401dd4:	9b08      	ldr	r3, [sp, #32]
  401dd6:	6003      	str	r3, [r0, #0]
  401dd8:	e7ed      	b.n	401db6 <sqrt+0x8a>
  401dda:	bf00      	nop
  401ddc:	20000010 	.word	0x20000010
  401de0:	00405fe8 	.word	0x00405fe8
  401de4:	00000000 	.word	0x00000000

00401de8 <__ieee754_atan2>:
  401de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401dec:	4254      	negs	r4, r2
  401dee:	4314      	orrs	r4, r2
  401df0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  401df4:	f8df e180 	ldr.w	lr, [pc, #384]	; 401f78 <__ieee754_atan2+0x190>
  401df8:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  401dfc:	4574      	cmp	r4, lr
  401dfe:	4606      	mov	r6, r0
  401e00:	460d      	mov	r5, r1
  401e02:	d83e      	bhi.n	401e82 <__ieee754_atan2+0x9a>
  401e04:	4244      	negs	r4, r0
  401e06:	4304      	orrs	r4, r0
  401e08:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  401e0c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  401e10:	4574      	cmp	r4, lr
  401e12:	468a      	mov	sl, r1
  401e14:	d835      	bhi.n	401e82 <__ieee754_atan2+0x9a>
  401e16:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  401e1a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  401e1e:	4314      	orrs	r4, r2
  401e20:	d044      	beq.n	401eac <__ieee754_atan2+0xc4>
  401e22:	179c      	asrs	r4, r3, #30
  401e24:	f004 0402 	and.w	r4, r4, #2
  401e28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  401e2c:	ea50 010b 	orrs.w	r1, r0, fp
  401e30:	d02f      	beq.n	401e92 <__ieee754_atan2+0xaa>
  401e32:	ea52 0109 	orrs.w	r1, r2, r9
  401e36:	d033      	beq.n	401ea0 <__ieee754_atan2+0xb8>
  401e38:	45f1      	cmp	r9, lr
  401e3a:	d046      	beq.n	401eca <__ieee754_atan2+0xe2>
  401e3c:	45f3      	cmp	fp, lr
  401e3e:	d02f      	beq.n	401ea0 <__ieee754_atan2+0xb8>
  401e40:	ebc9 090b 	rsb	r9, r9, fp
  401e44:	ea4f 5929 	mov.w	r9, r9, asr #20
  401e48:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  401e4c:	dc34      	bgt.n	401eb8 <__ieee754_atan2+0xd0>
  401e4e:	2b00      	cmp	r3, #0
  401e50:	db57      	blt.n	401f02 <__ieee754_atan2+0x11a>
  401e52:	4630      	mov	r0, r6
  401e54:	4629      	mov	r1, r5
  401e56:	f003 faa3 	bl	4053a0 <__aeabi_ddiv>
  401e5a:	f000 faef 	bl	40243c <fabs>
  401e5e:	f000 f94f 	bl	402100 <atan>
  401e62:	2c01      	cmp	r4, #1
  401e64:	d04a      	beq.n	401efc <__ieee754_atan2+0x114>
  401e66:	2c02      	cmp	r4, #2
  401e68:	d03b      	beq.n	401ee2 <__ieee754_atan2+0xfa>
  401e6a:	b184      	cbz	r4, 401e8e <__ieee754_atan2+0xa6>
  401e6c:	a332      	add	r3, pc, #200	; (adr r3, 401f38 <__ieee754_atan2+0x150>)
  401e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e72:	f002 ffb7 	bl	404de4 <__aeabi_dsub>
  401e76:	a332      	add	r3, pc, #200	; (adr r3, 401f40 <__ieee754_atan2+0x158>)
  401e78:	e9d3 2300 	ldrd	r2, r3, [r3]
  401e7c:	f002 ffb2 	bl	404de4 <__aeabi_dsub>
  401e80:	e005      	b.n	401e8e <__ieee754_atan2+0xa6>
  401e82:	4610      	mov	r0, r2
  401e84:	4619      	mov	r1, r3
  401e86:	4632      	mov	r2, r6
  401e88:	462b      	mov	r3, r5
  401e8a:	f002 ffad 	bl	404de8 <__adddf3>
  401e8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e92:	2c02      	cmp	r4, #2
  401e94:	d014      	beq.n	401ec0 <__ieee754_atan2+0xd8>
  401e96:	2c03      	cmp	r4, #3
  401e98:	d10c      	bne.n	401eb4 <__ieee754_atan2+0xcc>
  401e9a:	482d      	ldr	r0, [pc, #180]	; (401f50 <__ieee754_atan2+0x168>)
  401e9c:	492d      	ldr	r1, [pc, #180]	; (401f54 <__ieee754_atan2+0x16c>)
  401e9e:	e7f6      	b.n	401e8e <__ieee754_atan2+0xa6>
  401ea0:	f1ba 0f00 	cmp.w	sl, #0
  401ea4:	482a      	ldr	r0, [pc, #168]	; (401f50 <__ieee754_atan2+0x168>)
  401ea6:	db0e      	blt.n	401ec6 <__ieee754_atan2+0xde>
  401ea8:	492b      	ldr	r1, [pc, #172]	; (401f58 <__ieee754_atan2+0x170>)
  401eaa:	e7f0      	b.n	401e8e <__ieee754_atan2+0xa6>
  401eac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401eb0:	f000 b926 	b.w	402100 <atan>
  401eb4:	4629      	mov	r1, r5
  401eb6:	e7ea      	b.n	401e8e <__ieee754_atan2+0xa6>
  401eb8:	a123      	add	r1, pc, #140	; (adr r1, 401f48 <__ieee754_atan2+0x160>)
  401eba:	e9d1 0100 	ldrd	r0, r1, [r1]
  401ebe:	e7d0      	b.n	401e62 <__ieee754_atan2+0x7a>
  401ec0:	4823      	ldr	r0, [pc, #140]	; (401f50 <__ieee754_atan2+0x168>)
  401ec2:	4926      	ldr	r1, [pc, #152]	; (401f5c <__ieee754_atan2+0x174>)
  401ec4:	e7e3      	b.n	401e8e <__ieee754_atan2+0xa6>
  401ec6:	4926      	ldr	r1, [pc, #152]	; (401f60 <__ieee754_atan2+0x178>)
  401ec8:	e7e1      	b.n	401e8e <__ieee754_atan2+0xa6>
  401eca:	45cb      	cmp	fp, r9
  401ecc:	d01f      	beq.n	401f0e <__ieee754_atan2+0x126>
  401ece:	2c02      	cmp	r4, #2
  401ed0:	d0f6      	beq.n	401ec0 <__ieee754_atan2+0xd8>
  401ed2:	2c03      	cmp	r4, #3
  401ed4:	d0e1      	beq.n	401e9a <__ieee754_atan2+0xb2>
  401ed6:	2c01      	cmp	r4, #1
  401ed8:	f04f 0000 	mov.w	r0, #0
  401edc:	d020      	beq.n	401f20 <__ieee754_atan2+0x138>
  401ede:	4601      	mov	r1, r0
  401ee0:	e7d5      	b.n	401e8e <__ieee754_atan2+0xa6>
  401ee2:	a315      	add	r3, pc, #84	; (adr r3, 401f38 <__ieee754_atan2+0x150>)
  401ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ee8:	f002 ff7c 	bl	404de4 <__aeabi_dsub>
  401eec:	4602      	mov	r2, r0
  401eee:	460b      	mov	r3, r1
  401ef0:	a113      	add	r1, pc, #76	; (adr r1, 401f40 <__ieee754_atan2+0x158>)
  401ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
  401ef6:	f002 ff75 	bl	404de4 <__aeabi_dsub>
  401efa:	e7c8      	b.n	401e8e <__ieee754_atan2+0xa6>
  401efc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401f00:	e7c5      	b.n	401e8e <__ieee754_atan2+0xa6>
  401f02:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  401f06:	daa4      	bge.n	401e52 <__ieee754_atan2+0x6a>
  401f08:	2000      	movs	r0, #0
  401f0a:	2100      	movs	r1, #0
  401f0c:	e7a9      	b.n	401e62 <__ieee754_atan2+0x7a>
  401f0e:	2c02      	cmp	r4, #2
  401f10:	d00e      	beq.n	401f30 <__ieee754_atan2+0x148>
  401f12:	2c03      	cmp	r4, #3
  401f14:	d009      	beq.n	401f2a <__ieee754_atan2+0x142>
  401f16:	2c01      	cmp	r4, #1
  401f18:	480d      	ldr	r0, [pc, #52]	; (401f50 <__ieee754_atan2+0x168>)
  401f1a:	d004      	beq.n	401f26 <__ieee754_atan2+0x13e>
  401f1c:	4911      	ldr	r1, [pc, #68]	; (401f64 <__ieee754_atan2+0x17c>)
  401f1e:	e7b6      	b.n	401e8e <__ieee754_atan2+0xa6>
  401f20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401f24:	e7b3      	b.n	401e8e <__ieee754_atan2+0xa6>
  401f26:	4910      	ldr	r1, [pc, #64]	; (401f68 <__ieee754_atan2+0x180>)
  401f28:	e7b1      	b.n	401e8e <__ieee754_atan2+0xa6>
  401f2a:	4810      	ldr	r0, [pc, #64]	; (401f6c <__ieee754_atan2+0x184>)
  401f2c:	4910      	ldr	r1, [pc, #64]	; (401f70 <__ieee754_atan2+0x188>)
  401f2e:	e7ae      	b.n	401e8e <__ieee754_atan2+0xa6>
  401f30:	480e      	ldr	r0, [pc, #56]	; (401f6c <__ieee754_atan2+0x184>)
  401f32:	4910      	ldr	r1, [pc, #64]	; (401f74 <__ieee754_atan2+0x18c>)
  401f34:	e7ab      	b.n	401e8e <__ieee754_atan2+0xa6>
  401f36:	bf00      	nop
  401f38:	33145c07 	.word	0x33145c07
  401f3c:	3ca1a626 	.word	0x3ca1a626
  401f40:	54442d18 	.word	0x54442d18
  401f44:	400921fb 	.word	0x400921fb
  401f48:	54442d18 	.word	0x54442d18
  401f4c:	3ff921fb 	.word	0x3ff921fb
  401f50:	54442d18 	.word	0x54442d18
  401f54:	c00921fb 	.word	0xc00921fb
  401f58:	3ff921fb 	.word	0x3ff921fb
  401f5c:	400921fb 	.word	0x400921fb
  401f60:	bff921fb 	.word	0xbff921fb
  401f64:	3fe921fb 	.word	0x3fe921fb
  401f68:	bfe921fb 	.word	0xbfe921fb
  401f6c:	7f3321d2 	.word	0x7f3321d2
  401f70:	c002d97c 	.word	0xc002d97c
  401f74:	4002d97c 	.word	0x4002d97c
  401f78:	7ff00000 	.word	0x7ff00000

00401f7c <__ieee754_sqrt>:
  401f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f80:	4e5d      	ldr	r6, [pc, #372]	; (4020f8 <__ieee754_sqrt+0x17c>)
  401f82:	46b6      	mov	lr, r6
  401f84:	400e      	ands	r6, r1
  401f86:	4576      	cmp	r6, lr
  401f88:	460c      	mov	r4, r1
  401f8a:	4605      	mov	r5, r0
  401f8c:	f000 8095 	beq.w	4020ba <__ieee754_sqrt+0x13e>
  401f90:	2900      	cmp	r1, #0
  401f92:	460b      	mov	r3, r1
  401f94:	4602      	mov	r2, r0
  401f96:	dd73      	ble.n	402080 <__ieee754_sqrt+0x104>
  401f98:	150f      	asrs	r7, r1, #20
  401f9a:	d07e      	beq.n	40209a <__ieee754_sqrt+0x11e>
  401f9c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  401fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
  401fa4:	07f8      	lsls	r0, r7, #31
  401fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401faa:	d464      	bmi.n	402076 <__ieee754_sqrt+0xfa>
  401fac:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  401fb0:	2600      	movs	r6, #0
  401fb2:	440b      	add	r3, r1
  401fb4:	107f      	asrs	r7, r7, #1
  401fb6:	0052      	lsls	r2, r2, #1
  401fb8:	46b6      	mov	lr, r6
  401fba:	2016      	movs	r0, #22
  401fbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401fc0:	eb0e 0401 	add.w	r4, lr, r1
  401fc4:	429c      	cmp	r4, r3
  401fc6:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  401fca:	ea4f 0242 	mov.w	r2, r2, lsl #1
  401fce:	dc03      	bgt.n	401fd8 <__ieee754_sqrt+0x5c>
  401fd0:	1b1b      	subs	r3, r3, r4
  401fd2:	eb04 0e01 	add.w	lr, r4, r1
  401fd6:	440e      	add	r6, r1
  401fd8:	3801      	subs	r0, #1
  401fda:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  401fde:	ea4f 0151 	mov.w	r1, r1, lsr #1
  401fe2:	d1ed      	bne.n	401fc0 <__ieee754_sqrt+0x44>
  401fe4:	4684      	mov	ip, r0
  401fe6:	2420      	movs	r4, #32
  401fe8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401fec:	e009      	b.n	402002 <__ieee754_sqrt+0x86>
  401fee:	d020      	beq.n	402032 <__ieee754_sqrt+0xb6>
  401ff0:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  401ff4:	3c01      	subs	r4, #1
  401ff6:	ea4f 0151 	mov.w	r1, r1, lsr #1
  401ffa:	442b      	add	r3, r5
  401ffc:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402000:	d020      	beq.n	402044 <__ieee754_sqrt+0xc8>
  402002:	459e      	cmp	lr, r3
  402004:	eb01 050c 	add.w	r5, r1, ip
  402008:	daf1      	bge.n	401fee <__ieee754_sqrt+0x72>
  40200a:	2d00      	cmp	r5, #0
  40200c:	eb05 0c01 	add.w	ip, r5, r1
  402010:	db09      	blt.n	402026 <__ieee754_sqrt+0xaa>
  402012:	46f0      	mov	r8, lr
  402014:	4295      	cmp	r5, r2
  402016:	ebce 0303 	rsb	r3, lr, r3
  40201a:	d900      	bls.n	40201e <__ieee754_sqrt+0xa2>
  40201c:	3b01      	subs	r3, #1
  40201e:	1b52      	subs	r2, r2, r5
  402020:	4408      	add	r0, r1
  402022:	46c6      	mov	lr, r8
  402024:	e7e4      	b.n	401ff0 <__ieee754_sqrt+0x74>
  402026:	f1bc 0f00 	cmp.w	ip, #0
  40202a:	dbf2      	blt.n	402012 <__ieee754_sqrt+0x96>
  40202c:	f10e 0801 	add.w	r8, lr, #1
  402030:	e7f0      	b.n	402014 <__ieee754_sqrt+0x98>
  402032:	4295      	cmp	r5, r2
  402034:	d817      	bhi.n	402066 <__ieee754_sqrt+0xea>
  402036:	2d00      	cmp	r5, #0
  402038:	eb05 0c01 	add.w	ip, r5, r1
  40203c:	db47      	blt.n	4020ce <__ieee754_sqrt+0x152>
  40203e:	4698      	mov	r8, r3
  402040:	2300      	movs	r3, #0
  402042:	e7ec      	b.n	40201e <__ieee754_sqrt+0xa2>
  402044:	4313      	orrs	r3, r2
  402046:	d110      	bne.n	40206a <__ieee754_sqrt+0xee>
  402048:	0840      	lsrs	r0, r0, #1
  40204a:	1073      	asrs	r3, r6, #1
  40204c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402050:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402054:	07f2      	lsls	r2, r6, #31
  402056:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40205a:	bf48      	it	mi
  40205c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402060:	4649      	mov	r1, r9
  402062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402066:	4673      	mov	r3, lr
  402068:	e7c2      	b.n	401ff0 <__ieee754_sqrt+0x74>
  40206a:	1c41      	adds	r1, r0, #1
  40206c:	d033      	beq.n	4020d6 <__ieee754_sqrt+0x15a>
  40206e:	f000 0301 	and.w	r3, r0, #1
  402072:	4418      	add	r0, r3
  402074:	e7e8      	b.n	402048 <__ieee754_sqrt+0xcc>
  402076:	005b      	lsls	r3, r3, #1
  402078:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  40207c:	0052      	lsls	r2, r2, #1
  40207e:	e795      	b.n	401fac <__ieee754_sqrt+0x30>
  402080:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  402084:	4306      	orrs	r6, r0
  402086:	d0ec      	beq.n	402062 <__ieee754_sqrt+0xe6>
  402088:	bb69      	cbnz	r1, 4020e6 <__ieee754_sqrt+0x16a>
  40208a:	460f      	mov	r7, r1
  40208c:	0ad3      	lsrs	r3, r2, #11
  40208e:	3f15      	subs	r7, #21
  402090:	0552      	lsls	r2, r2, #21
  402092:	2b00      	cmp	r3, #0
  402094:	d0fa      	beq.n	40208c <__ieee754_sqrt+0x110>
  402096:	02dd      	lsls	r5, r3, #11
  402098:	d420      	bmi.n	4020dc <__ieee754_sqrt+0x160>
  40209a:	2100      	movs	r1, #0
  40209c:	e000      	b.n	4020a0 <__ieee754_sqrt+0x124>
  40209e:	4601      	mov	r1, r0
  4020a0:	005b      	lsls	r3, r3, #1
  4020a2:	02dc      	lsls	r4, r3, #11
  4020a4:	f101 0001 	add.w	r0, r1, #1
  4020a8:	d5f9      	bpl.n	40209e <__ieee754_sqrt+0x122>
  4020aa:	f1c0 0420 	rsb	r4, r0, #32
  4020ae:	fa22 f404 	lsr.w	r4, r2, r4
  4020b2:	4323      	orrs	r3, r4
  4020b4:	1a7f      	subs	r7, r7, r1
  4020b6:	4082      	lsls	r2, r0
  4020b8:	e770      	b.n	401f9c <__ieee754_sqrt+0x20>
  4020ba:	4602      	mov	r2, r0
  4020bc:	460b      	mov	r3, r1
  4020be:	f003 f845 	bl	40514c <__aeabi_dmul>
  4020c2:	462a      	mov	r2, r5
  4020c4:	4623      	mov	r3, r4
  4020c6:	f002 fe8f 	bl	404de8 <__adddf3>
  4020ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4020ce:	f1bc 0f00 	cmp.w	ip, #0
  4020d2:	daab      	bge.n	40202c <__ieee754_sqrt+0xb0>
  4020d4:	e7b3      	b.n	40203e <__ieee754_sqrt+0xc2>
  4020d6:	3601      	adds	r6, #1
  4020d8:	4620      	mov	r0, r4
  4020da:	e7b6      	b.n	40204a <__ieee754_sqrt+0xce>
  4020dc:	2420      	movs	r4, #32
  4020de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  4020e2:	2000      	movs	r0, #0
  4020e4:	e7e3      	b.n	4020ae <__ieee754_sqrt+0x132>
  4020e6:	4602      	mov	r2, r0
  4020e8:	460b      	mov	r3, r1
  4020ea:	f002 fe7b 	bl	404de4 <__aeabi_dsub>
  4020ee:	4602      	mov	r2, r0
  4020f0:	460b      	mov	r3, r1
  4020f2:	f003 f955 	bl	4053a0 <__aeabi_ddiv>
  4020f6:	e7b4      	b.n	402062 <__ieee754_sqrt+0xe6>
  4020f8:	7ff00000 	.word	0x7ff00000
  4020fc:	00000000 	.word	0x00000000

00402100 <atan>:
  402100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402104:	4bc0      	ldr	r3, [pc, #768]	; (402408 <atan+0x308>)
  402106:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40210a:	429e      	cmp	r6, r3
  40210c:	460d      	mov	r5, r1
  40210e:	468a      	mov	sl, r1
  402110:	4604      	mov	r4, r0
  402112:	dd0f      	ble.n	402134 <atan+0x34>
  402114:	4bbd      	ldr	r3, [pc, #756]	; (40240c <atan+0x30c>)
  402116:	429e      	cmp	r6, r3
  402118:	f300 80b2 	bgt.w	402280 <atan+0x180>
  40211c:	f000 80ad 	beq.w	40227a <atan+0x17a>
  402120:	4bbb      	ldr	r3, [pc, #748]	; (402410 <atan+0x310>)
  402122:	49bc      	ldr	r1, [pc, #752]	; (402414 <atan+0x314>)
  402124:	4cbc      	ldr	r4, [pc, #752]	; (402418 <atan+0x318>)
  402126:	f1ba 0f00 	cmp.w	sl, #0
  40212a:	bfc8      	it	gt
  40212c:	4619      	movgt	r1, r3
  40212e:	4620      	mov	r0, r4
  402130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402134:	4bb9      	ldr	r3, [pc, #740]	; (40241c <atan+0x31c>)
  402136:	429e      	cmp	r6, r3
  402138:	f300 80bc 	bgt.w	4022b4 <atan+0x1b4>
  40213c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  402140:	429e      	cmp	r6, r3
  402142:	f340 80a7 	ble.w	402294 <atan+0x194>
  402146:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  40214a:	4622      	mov	r2, r4
  40214c:	462b      	mov	r3, r5
  40214e:	4620      	mov	r0, r4
  402150:	4629      	mov	r1, r5
  402152:	f002 fffb 	bl	40514c <__aeabi_dmul>
  402156:	4602      	mov	r2, r0
  402158:	460b      	mov	r3, r1
  40215a:	4680      	mov	r8, r0
  40215c:	4689      	mov	r9, r1
  40215e:	f002 fff5 	bl	40514c <__aeabi_dmul>
  402162:	a391      	add	r3, pc, #580	; (adr r3, 4023a8 <atan+0x2a8>)
  402164:	e9d3 2300 	ldrd	r2, r3, [r3]
  402168:	4606      	mov	r6, r0
  40216a:	460f      	mov	r7, r1
  40216c:	f002 ffee 	bl	40514c <__aeabi_dmul>
  402170:	a38f      	add	r3, pc, #572	; (adr r3, 4023b0 <atan+0x2b0>)
  402172:	e9d3 2300 	ldrd	r2, r3, [r3]
  402176:	f002 fe37 	bl	404de8 <__adddf3>
  40217a:	4632      	mov	r2, r6
  40217c:	463b      	mov	r3, r7
  40217e:	f002 ffe5 	bl	40514c <__aeabi_dmul>
  402182:	a38d      	add	r3, pc, #564	; (adr r3, 4023b8 <atan+0x2b8>)
  402184:	e9d3 2300 	ldrd	r2, r3, [r3]
  402188:	f002 fe2e 	bl	404de8 <__adddf3>
  40218c:	4632      	mov	r2, r6
  40218e:	463b      	mov	r3, r7
  402190:	f002 ffdc 	bl	40514c <__aeabi_dmul>
  402194:	a38a      	add	r3, pc, #552	; (adr r3, 4023c0 <atan+0x2c0>)
  402196:	e9d3 2300 	ldrd	r2, r3, [r3]
  40219a:	f002 fe25 	bl	404de8 <__adddf3>
  40219e:	4632      	mov	r2, r6
  4021a0:	463b      	mov	r3, r7
  4021a2:	f002 ffd3 	bl	40514c <__aeabi_dmul>
  4021a6:	a388      	add	r3, pc, #544	; (adr r3, 4023c8 <atan+0x2c8>)
  4021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021ac:	f002 fe1c 	bl	404de8 <__adddf3>
  4021b0:	4632      	mov	r2, r6
  4021b2:	463b      	mov	r3, r7
  4021b4:	f002 ffca 	bl	40514c <__aeabi_dmul>
  4021b8:	a385      	add	r3, pc, #532	; (adr r3, 4023d0 <atan+0x2d0>)
  4021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021be:	f002 fe13 	bl	404de8 <__adddf3>
  4021c2:	4642      	mov	r2, r8
  4021c4:	464b      	mov	r3, r9
  4021c6:	f002 ffc1 	bl	40514c <__aeabi_dmul>
  4021ca:	a383      	add	r3, pc, #524	; (adr r3, 4023d8 <atan+0x2d8>)
  4021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021d0:	4680      	mov	r8, r0
  4021d2:	4689      	mov	r9, r1
  4021d4:	4630      	mov	r0, r6
  4021d6:	4639      	mov	r1, r7
  4021d8:	f002 ffb8 	bl	40514c <__aeabi_dmul>
  4021dc:	a380      	add	r3, pc, #512	; (adr r3, 4023e0 <atan+0x2e0>)
  4021de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021e2:	f002 fdff 	bl	404de4 <__aeabi_dsub>
  4021e6:	4632      	mov	r2, r6
  4021e8:	463b      	mov	r3, r7
  4021ea:	f002 ffaf 	bl	40514c <__aeabi_dmul>
  4021ee:	a37e      	add	r3, pc, #504	; (adr r3, 4023e8 <atan+0x2e8>)
  4021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021f4:	f002 fdf6 	bl	404de4 <__aeabi_dsub>
  4021f8:	4632      	mov	r2, r6
  4021fa:	463b      	mov	r3, r7
  4021fc:	f002 ffa6 	bl	40514c <__aeabi_dmul>
  402200:	a37b      	add	r3, pc, #492	; (adr r3, 4023f0 <atan+0x2f0>)
  402202:	e9d3 2300 	ldrd	r2, r3, [r3]
  402206:	f002 fded 	bl	404de4 <__aeabi_dsub>
  40220a:	4632      	mov	r2, r6
  40220c:	463b      	mov	r3, r7
  40220e:	f002 ff9d 	bl	40514c <__aeabi_dmul>
  402212:	a379      	add	r3, pc, #484	; (adr r3, 4023f8 <atan+0x2f8>)
  402214:	e9d3 2300 	ldrd	r2, r3, [r3]
  402218:	f002 fde4 	bl	404de4 <__aeabi_dsub>
  40221c:	4632      	mov	r2, r6
  40221e:	463b      	mov	r3, r7
  402220:	f002 ff94 	bl	40514c <__aeabi_dmul>
  402224:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402228:	4602      	mov	r2, r0
  40222a:	460b      	mov	r3, r1
  40222c:	d069      	beq.n	402302 <atan+0x202>
  40222e:	4640      	mov	r0, r8
  402230:	4649      	mov	r1, r9
  402232:	f002 fdd9 	bl	404de8 <__adddf3>
  402236:	4622      	mov	r2, r4
  402238:	462b      	mov	r3, r5
  40223a:	f002 ff87 	bl	40514c <__aeabi_dmul>
  40223e:	4e78      	ldr	r6, [pc, #480]	; (402420 <atan+0x320>)
  402240:	4b78      	ldr	r3, [pc, #480]	; (402424 <atan+0x324>)
  402242:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402246:	445e      	add	r6, fp
  402248:	449b      	add	fp, r3
  40224a:	e9db 2300 	ldrd	r2, r3, [fp]
  40224e:	f002 fdc9 	bl	404de4 <__aeabi_dsub>
  402252:	4622      	mov	r2, r4
  402254:	462b      	mov	r3, r5
  402256:	f002 fdc5 	bl	404de4 <__aeabi_dsub>
  40225a:	4602      	mov	r2, r0
  40225c:	460b      	mov	r3, r1
  40225e:	e9d6 0100 	ldrd	r0, r1, [r6]
  402262:	f002 fdbf 	bl	404de4 <__aeabi_dsub>
  402266:	f1ba 0f00 	cmp.w	sl, #0
  40226a:	4604      	mov	r4, r0
  40226c:	f6bf af5f 	bge.w	40212e <atan+0x2e>
  402270:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402274:	4620      	mov	r0, r4
  402276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40227a:	2800      	cmp	r0, #0
  40227c:	f43f af50 	beq.w	402120 <atan+0x20>
  402280:	4622      	mov	r2, r4
  402282:	4620      	mov	r0, r4
  402284:	462b      	mov	r3, r5
  402286:	4629      	mov	r1, r5
  402288:	f002 fdae 	bl	404de8 <__adddf3>
  40228c:	4604      	mov	r4, r0
  40228e:	4620      	mov	r0, r4
  402290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402294:	a35a      	add	r3, pc, #360	; (adr r3, 402400 <atan+0x300>)
  402296:	e9d3 2300 	ldrd	r2, r3, [r3]
  40229a:	f002 fda5 	bl	404de8 <__adddf3>
  40229e:	2200      	movs	r2, #0
  4022a0:	4b61      	ldr	r3, [pc, #388]	; (402428 <atan+0x328>)
  4022a2:	f003 f9e3 	bl	40566c <__aeabi_dcmpgt>
  4022a6:	2800      	cmp	r0, #0
  4022a8:	f43f af4d 	beq.w	402146 <atan+0x46>
  4022ac:	4629      	mov	r1, r5
  4022ae:	4620      	mov	r0, r4
  4022b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022b4:	f000 f8c2 	bl	40243c <fabs>
  4022b8:	4b5c      	ldr	r3, [pc, #368]	; (40242c <atan+0x32c>)
  4022ba:	429e      	cmp	r6, r3
  4022bc:	4604      	mov	r4, r0
  4022be:	460d      	mov	r5, r1
  4022c0:	dc2f      	bgt.n	402322 <atan+0x222>
  4022c2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  4022c6:	429e      	cmp	r6, r3
  4022c8:	dc54      	bgt.n	402374 <atan+0x274>
  4022ca:	4602      	mov	r2, r0
  4022cc:	460b      	mov	r3, r1
  4022ce:	f002 fd8b 	bl	404de8 <__adddf3>
  4022d2:	2200      	movs	r2, #0
  4022d4:	4b54      	ldr	r3, [pc, #336]	; (402428 <atan+0x328>)
  4022d6:	f002 fd85 	bl	404de4 <__aeabi_dsub>
  4022da:	2200      	movs	r2, #0
  4022dc:	4606      	mov	r6, r0
  4022de:	460f      	mov	r7, r1
  4022e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4022e4:	4620      	mov	r0, r4
  4022e6:	4629      	mov	r1, r5
  4022e8:	f002 fd7e 	bl	404de8 <__adddf3>
  4022ec:	4602      	mov	r2, r0
  4022ee:	460b      	mov	r3, r1
  4022f0:	4630      	mov	r0, r6
  4022f2:	4639      	mov	r1, r7
  4022f4:	f003 f854 	bl	4053a0 <__aeabi_ddiv>
  4022f8:	f04f 0b00 	mov.w	fp, #0
  4022fc:	4604      	mov	r4, r0
  4022fe:	460d      	mov	r5, r1
  402300:	e723      	b.n	40214a <atan+0x4a>
  402302:	4640      	mov	r0, r8
  402304:	4649      	mov	r1, r9
  402306:	f002 fd6f 	bl	404de8 <__adddf3>
  40230a:	4622      	mov	r2, r4
  40230c:	462b      	mov	r3, r5
  40230e:	f002 ff1d 	bl	40514c <__aeabi_dmul>
  402312:	4602      	mov	r2, r0
  402314:	460b      	mov	r3, r1
  402316:	4620      	mov	r0, r4
  402318:	4629      	mov	r1, r5
  40231a:	f002 fd63 	bl	404de4 <__aeabi_dsub>
  40231e:	4604      	mov	r4, r0
  402320:	e705      	b.n	40212e <atan+0x2e>
  402322:	4b43      	ldr	r3, [pc, #268]	; (402430 <atan+0x330>)
  402324:	429e      	cmp	r6, r3
  402326:	dc1a      	bgt.n	40235e <atan+0x25e>
  402328:	2200      	movs	r2, #0
  40232a:	4b42      	ldr	r3, [pc, #264]	; (402434 <atan+0x334>)
  40232c:	f002 fd5a 	bl	404de4 <__aeabi_dsub>
  402330:	2200      	movs	r2, #0
  402332:	4606      	mov	r6, r0
  402334:	460f      	mov	r7, r1
  402336:	4b3f      	ldr	r3, [pc, #252]	; (402434 <atan+0x334>)
  402338:	4620      	mov	r0, r4
  40233a:	4629      	mov	r1, r5
  40233c:	f002 ff06 	bl	40514c <__aeabi_dmul>
  402340:	2200      	movs	r2, #0
  402342:	4b39      	ldr	r3, [pc, #228]	; (402428 <atan+0x328>)
  402344:	f002 fd50 	bl	404de8 <__adddf3>
  402348:	4602      	mov	r2, r0
  40234a:	460b      	mov	r3, r1
  40234c:	4630      	mov	r0, r6
  40234e:	4639      	mov	r1, r7
  402350:	f003 f826 	bl	4053a0 <__aeabi_ddiv>
  402354:	f04f 0b02 	mov.w	fp, #2
  402358:	4604      	mov	r4, r0
  40235a:	460d      	mov	r5, r1
  40235c:	e6f5      	b.n	40214a <atan+0x4a>
  40235e:	4602      	mov	r2, r0
  402360:	460b      	mov	r3, r1
  402362:	2000      	movs	r0, #0
  402364:	4934      	ldr	r1, [pc, #208]	; (402438 <atan+0x338>)
  402366:	f003 f81b 	bl	4053a0 <__aeabi_ddiv>
  40236a:	f04f 0b03 	mov.w	fp, #3
  40236e:	4604      	mov	r4, r0
  402370:	460d      	mov	r5, r1
  402372:	e6ea      	b.n	40214a <atan+0x4a>
  402374:	2200      	movs	r2, #0
  402376:	4b2c      	ldr	r3, [pc, #176]	; (402428 <atan+0x328>)
  402378:	f002 fd34 	bl	404de4 <__aeabi_dsub>
  40237c:	2200      	movs	r2, #0
  40237e:	4606      	mov	r6, r0
  402380:	460f      	mov	r7, r1
  402382:	4b29      	ldr	r3, [pc, #164]	; (402428 <atan+0x328>)
  402384:	4620      	mov	r0, r4
  402386:	4629      	mov	r1, r5
  402388:	f002 fd2e 	bl	404de8 <__adddf3>
  40238c:	4602      	mov	r2, r0
  40238e:	460b      	mov	r3, r1
  402390:	4630      	mov	r0, r6
  402392:	4639      	mov	r1, r7
  402394:	f003 f804 	bl	4053a0 <__aeabi_ddiv>
  402398:	f04f 0b01 	mov.w	fp, #1
  40239c:	4604      	mov	r4, r0
  40239e:	460d      	mov	r5, r1
  4023a0:	e6d3      	b.n	40214a <atan+0x4a>
  4023a2:	bf00      	nop
  4023a4:	f3af 8000 	nop.w
  4023a8:	e322da11 	.word	0xe322da11
  4023ac:	3f90ad3a 	.word	0x3f90ad3a
  4023b0:	24760deb 	.word	0x24760deb
  4023b4:	3fa97b4b 	.word	0x3fa97b4b
  4023b8:	a0d03d51 	.word	0xa0d03d51
  4023bc:	3fb10d66 	.word	0x3fb10d66
  4023c0:	c54c206e 	.word	0xc54c206e
  4023c4:	3fb745cd 	.word	0x3fb745cd
  4023c8:	920083ff 	.word	0x920083ff
  4023cc:	3fc24924 	.word	0x3fc24924
  4023d0:	5555550d 	.word	0x5555550d
  4023d4:	3fd55555 	.word	0x3fd55555
  4023d8:	2c6a6c2f 	.word	0x2c6a6c2f
  4023dc:	bfa2b444 	.word	0xbfa2b444
  4023e0:	52defd9a 	.word	0x52defd9a
  4023e4:	3fadde2d 	.word	0x3fadde2d
  4023e8:	af749a6d 	.word	0xaf749a6d
  4023ec:	3fb3b0f2 	.word	0x3fb3b0f2
  4023f0:	fe231671 	.word	0xfe231671
  4023f4:	3fbc71c6 	.word	0x3fbc71c6
  4023f8:	9998ebc4 	.word	0x9998ebc4
  4023fc:	3fc99999 	.word	0x3fc99999
  402400:	8800759c 	.word	0x8800759c
  402404:	7e37e43c 	.word	0x7e37e43c
  402408:	440fffff 	.word	0x440fffff
  40240c:	7ff00000 	.word	0x7ff00000
  402410:	3ff921fb 	.word	0x3ff921fb
  402414:	bff921fb 	.word	0xbff921fb
  402418:	54442d18 	.word	0x54442d18
  40241c:	3fdbffff 	.word	0x3fdbffff
  402420:	00406010 	.word	0x00406010
  402424:	00405ff0 	.word	0x00405ff0
  402428:	3ff00000 	.word	0x3ff00000
  40242c:	3ff2ffff 	.word	0x3ff2ffff
  402430:	40037fff 	.word	0x40037fff
  402434:	3ff80000 	.word	0x3ff80000
  402438:	bff00000 	.word	0xbff00000

0040243c <fabs>:
  40243c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402440:	4770      	bx	lr
  402442:	bf00      	nop

00402444 <matherr>:
  402444:	2000      	movs	r0, #0
  402446:	4770      	bx	lr

00402448 <__errno>:
  402448:	4b01      	ldr	r3, [pc, #4]	; (402450 <__errno+0x8>)
  40244a:	6818      	ldr	r0, [r3, #0]
  40244c:	4770      	bx	lr
  40244e:	bf00      	nop
  402450:	20000074 	.word	0x20000074

00402454 <__libc_init_array>:
  402454:	b570      	push	{r4, r5, r6, lr}
  402456:	4b0e      	ldr	r3, [pc, #56]	; (402490 <__libc_init_array+0x3c>)
  402458:	4c0e      	ldr	r4, [pc, #56]	; (402494 <__libc_init_array+0x40>)
  40245a:	1ae4      	subs	r4, r4, r3
  40245c:	10a4      	asrs	r4, r4, #2
  40245e:	2500      	movs	r5, #0
  402460:	461e      	mov	r6, r3
  402462:	42a5      	cmp	r5, r4
  402464:	d004      	beq.n	402470 <__libc_init_array+0x1c>
  402466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40246a:	4798      	blx	r3
  40246c:	3501      	adds	r5, #1
  40246e:	e7f8      	b.n	402462 <__libc_init_array+0xe>
  402470:	f003 ff3e 	bl	4062f0 <_init>
  402474:	4c08      	ldr	r4, [pc, #32]	; (402498 <__libc_init_array+0x44>)
  402476:	4b09      	ldr	r3, [pc, #36]	; (40249c <__libc_init_array+0x48>)
  402478:	1ae4      	subs	r4, r4, r3
  40247a:	10a4      	asrs	r4, r4, #2
  40247c:	2500      	movs	r5, #0
  40247e:	461e      	mov	r6, r3
  402480:	42a5      	cmp	r5, r4
  402482:	d004      	beq.n	40248e <__libc_init_array+0x3a>
  402484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402488:	4798      	blx	r3
  40248a:	3501      	adds	r5, #1
  40248c:	e7f8      	b.n	402480 <__libc_init_array+0x2c>
  40248e:	bd70      	pop	{r4, r5, r6, pc}
  402490:	004062fc 	.word	0x004062fc
  402494:	004062fc 	.word	0x004062fc
  402498:	00406300 	.word	0x00406300
  40249c:	004062fc 	.word	0x004062fc

004024a0 <memset>:
  4024a0:	4402      	add	r2, r0
  4024a2:	4603      	mov	r3, r0
  4024a4:	4293      	cmp	r3, r2
  4024a6:	d002      	beq.n	4024ae <memset+0xe>
  4024a8:	f803 1b01 	strb.w	r1, [r3], #1
  4024ac:	e7fa      	b.n	4024a4 <memset+0x4>
  4024ae:	4770      	bx	lr

004024b0 <__cvt>:
  4024b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024b4:	b088      	sub	sp, #32
  4024b6:	2b00      	cmp	r3, #0
  4024b8:	9f14      	ldr	r7, [sp, #80]	; 0x50
  4024ba:	9912      	ldr	r1, [sp, #72]	; 0x48
  4024bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4024be:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4024c2:	461e      	mov	r6, r3
  4024c4:	f027 0720 	bic.w	r7, r7, #32
  4024c8:	bfbb      	ittet	lt
  4024ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4024ce:	461e      	movlt	r6, r3
  4024d0:	2300      	movge	r3, #0
  4024d2:	232d      	movlt	r3, #45	; 0x2d
  4024d4:	2f46      	cmp	r7, #70	; 0x46
  4024d6:	4614      	mov	r4, r2
  4024d8:	700b      	strb	r3, [r1, #0]
  4024da:	d003      	beq.n	4024e4 <__cvt+0x34>
  4024dc:	2f45      	cmp	r7, #69	; 0x45
  4024de:	d103      	bne.n	4024e8 <__cvt+0x38>
  4024e0:	3501      	adds	r5, #1
  4024e2:	e001      	b.n	4024e8 <__cvt+0x38>
  4024e4:	2303      	movs	r3, #3
  4024e6:	e000      	b.n	4024ea <__cvt+0x3a>
  4024e8:	2302      	movs	r3, #2
  4024ea:	aa07      	add	r2, sp, #28
  4024ec:	9204      	str	r2, [sp, #16]
  4024ee:	aa06      	add	r2, sp, #24
  4024f0:	9203      	str	r2, [sp, #12]
  4024f2:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4024f6:	4622      	mov	r2, r4
  4024f8:	4633      	mov	r3, r6
  4024fa:	f000 fed1 	bl	4032a0 <_dtoa_r>
  4024fe:	2f47      	cmp	r7, #71	; 0x47
  402500:	4680      	mov	r8, r0
  402502:	d102      	bne.n	40250a <__cvt+0x5a>
  402504:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402506:	07db      	lsls	r3, r3, #31
  402508:	d528      	bpl.n	40255c <__cvt+0xac>
  40250a:	2f46      	cmp	r7, #70	; 0x46
  40250c:	eb08 0905 	add.w	r9, r8, r5
  402510:	d111      	bne.n	402536 <__cvt+0x86>
  402512:	f898 3000 	ldrb.w	r3, [r8]
  402516:	2b30      	cmp	r3, #48	; 0x30
  402518:	d10a      	bne.n	402530 <__cvt+0x80>
  40251a:	2200      	movs	r2, #0
  40251c:	2300      	movs	r3, #0
  40251e:	4620      	mov	r0, r4
  402520:	4631      	mov	r1, r6
  402522:	f003 f87b 	bl	40561c <__aeabi_dcmpeq>
  402526:	b918      	cbnz	r0, 402530 <__cvt+0x80>
  402528:	f1c5 0501 	rsb	r5, r5, #1
  40252c:	f8ca 5000 	str.w	r5, [sl]
  402530:	f8da 3000 	ldr.w	r3, [sl]
  402534:	4499      	add	r9, r3
  402536:	2200      	movs	r2, #0
  402538:	2300      	movs	r3, #0
  40253a:	4620      	mov	r0, r4
  40253c:	4631      	mov	r1, r6
  40253e:	f003 f86d 	bl	40561c <__aeabi_dcmpeq>
  402542:	b908      	cbnz	r0, 402548 <__cvt+0x98>
  402544:	2230      	movs	r2, #48	; 0x30
  402546:	e002      	b.n	40254e <__cvt+0x9e>
  402548:	f8cd 901c 	str.w	r9, [sp, #28]
  40254c:	e006      	b.n	40255c <__cvt+0xac>
  40254e:	9b07      	ldr	r3, [sp, #28]
  402550:	4599      	cmp	r9, r3
  402552:	d903      	bls.n	40255c <__cvt+0xac>
  402554:	1c59      	adds	r1, r3, #1
  402556:	9107      	str	r1, [sp, #28]
  402558:	701a      	strb	r2, [r3, #0]
  40255a:	e7f8      	b.n	40254e <__cvt+0x9e>
  40255c:	9b07      	ldr	r3, [sp, #28]
  40255e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402560:	ebc8 0303 	rsb	r3, r8, r3
  402564:	4640      	mov	r0, r8
  402566:	6013      	str	r3, [r2, #0]
  402568:	b008      	add	sp, #32
  40256a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040256e <__exponent>:
  40256e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402570:	4603      	mov	r3, r0
  402572:	2900      	cmp	r1, #0
  402574:	bfb8      	it	lt
  402576:	4249      	neglt	r1, r1
  402578:	f803 2b02 	strb.w	r2, [r3], #2
  40257c:	bfb4      	ite	lt
  40257e:	222d      	movlt	r2, #45	; 0x2d
  402580:	222b      	movge	r2, #43	; 0x2b
  402582:	2909      	cmp	r1, #9
  402584:	7042      	strb	r2, [r0, #1]
  402586:	dd19      	ble.n	4025bc <__exponent+0x4e>
  402588:	f10d 0207 	add.w	r2, sp, #7
  40258c:	4616      	mov	r6, r2
  40258e:	250a      	movs	r5, #10
  402590:	fb91 f4f5 	sdiv	r4, r1, r5
  402594:	fb05 1114 	mls	r1, r5, r4, r1
  402598:	3130      	adds	r1, #48	; 0x30
  40259a:	2c09      	cmp	r4, #9
  40259c:	f802 1d01 	strb.w	r1, [r2, #-1]!
  4025a0:	4621      	mov	r1, r4
  4025a2:	dcf5      	bgt.n	402590 <__exponent+0x22>
  4025a4:	3130      	adds	r1, #48	; 0x30
  4025a6:	1e54      	subs	r4, r2, #1
  4025a8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4025ac:	42b4      	cmp	r4, r6
  4025ae:	461a      	mov	r2, r3
  4025b0:	d20a      	bcs.n	4025c8 <__exponent+0x5a>
  4025b2:	f814 2b01 	ldrb.w	r2, [r4], #1
  4025b6:	f803 2b01 	strb.w	r2, [r3], #1
  4025ba:	e7f7      	b.n	4025ac <__exponent+0x3e>
  4025bc:	2430      	movs	r4, #48	; 0x30
  4025be:	461a      	mov	r2, r3
  4025c0:	4421      	add	r1, r4
  4025c2:	f802 4b02 	strb.w	r4, [r2], #2
  4025c6:	7059      	strb	r1, [r3, #1]
  4025c8:	1a10      	subs	r0, r2, r0
  4025ca:	b002      	add	sp, #8
  4025cc:	bd70      	pop	{r4, r5, r6, pc}
	...

004025d0 <_printf_float>:
  4025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025d4:	b091      	sub	sp, #68	; 0x44
  4025d6:	460c      	mov	r4, r1
  4025d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  4025dc:	4616      	mov	r6, r2
  4025de:	461f      	mov	r7, r3
  4025e0:	4605      	mov	r5, r0
  4025e2:	f001 fd75 	bl	4040d0 <_localeconv_r>
  4025e6:	6803      	ldr	r3, [r0, #0]
  4025e8:	9309      	str	r3, [sp, #36]	; 0x24
  4025ea:	4618      	mov	r0, r3
  4025ec:	f000 fcfc 	bl	402fe8 <strlen>
  4025f0:	2300      	movs	r3, #0
  4025f2:	930e      	str	r3, [sp, #56]	; 0x38
  4025f4:	f8d8 3000 	ldr.w	r3, [r8]
  4025f8:	900a      	str	r0, [sp, #40]	; 0x28
  4025fa:	3307      	adds	r3, #7
  4025fc:	f023 0307 	bic.w	r3, r3, #7
  402600:	f103 0208 	add.w	r2, r3, #8
  402604:	f894 9018 	ldrb.w	r9, [r4, #24]
  402608:	f8d4 b000 	ldr.w	fp, [r4]
  40260c:	f8c8 2000 	str.w	r2, [r8]
  402610:	e9d3 2300 	ldrd	r2, r3, [r3]
  402614:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402618:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  40261c:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402620:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402624:	930b      	str	r3, [sp, #44]	; 0x2c
  402626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40262a:	4ba7      	ldr	r3, [pc, #668]	; (4028c8 <_printf_float+0x2f8>)
  40262c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40262e:	4640      	mov	r0, r8
  402630:	f003 f826 	bl	405680 <__aeabi_dcmpun>
  402634:	b9a0      	cbnz	r0, 402660 <_printf_float+0x90>
  402636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40263a:	4ba3      	ldr	r3, [pc, #652]	; (4028c8 <_printf_float+0x2f8>)
  40263c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40263e:	4640      	mov	r0, r8
  402640:	f003 f800 	bl	405644 <__aeabi_dcmple>
  402644:	b960      	cbnz	r0, 402660 <_printf_float+0x90>
  402646:	2200      	movs	r2, #0
  402648:	2300      	movs	r3, #0
  40264a:	4640      	mov	r0, r8
  40264c:	4651      	mov	r1, sl
  40264e:	f002 ffef 	bl	405630 <__aeabi_dcmplt>
  402652:	b110      	cbz	r0, 40265a <_printf_float+0x8a>
  402654:	232d      	movs	r3, #45	; 0x2d
  402656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40265a:	4b9c      	ldr	r3, [pc, #624]	; (4028cc <_printf_float+0x2fc>)
  40265c:	4a9c      	ldr	r2, [pc, #624]	; (4028d0 <_printf_float+0x300>)
  40265e:	e00a      	b.n	402676 <_printf_float+0xa6>
  402660:	4642      	mov	r2, r8
  402662:	4653      	mov	r3, sl
  402664:	4640      	mov	r0, r8
  402666:	4651      	mov	r1, sl
  402668:	f003 f80a 	bl	405680 <__aeabi_dcmpun>
  40266c:	2800      	cmp	r0, #0
  40266e:	f000 8192 	beq.w	402996 <_printf_float+0x3c6>
  402672:	4b98      	ldr	r3, [pc, #608]	; (4028d4 <_printf_float+0x304>)
  402674:	4a98      	ldr	r2, [pc, #608]	; (4028d8 <_printf_float+0x308>)
  402676:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  40267a:	bf8c      	ite	hi
  40267c:	4690      	movhi	r8, r2
  40267e:	4698      	movls	r8, r3
  402680:	2303      	movs	r3, #3
  402682:	6123      	str	r3, [r4, #16]
  402684:	f02b 0304 	bic.w	r3, fp, #4
  402688:	6023      	str	r3, [r4, #0]
  40268a:	f04f 0a00 	mov.w	sl, #0
  40268e:	e03d      	b.n	40270c <_printf_float+0x13c>
  402690:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  402694:	f000 818a 	beq.w	4029ac <_printf_float+0x3dc>
  402698:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  40269c:	f000 8186 	beq.w	4029ac <_printf_float+0x3dc>
  4026a0:	6023      	str	r3, [r4, #0]
  4026a2:	2100      	movs	r1, #0
  4026a4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  4026a8:	9301      	str	r3, [sp, #4]
  4026aa:	6863      	ldr	r3, [r4, #4]
  4026ac:	9005      	str	r0, [sp, #20]
  4026ae:	9202      	str	r2, [sp, #8]
  4026b0:	9300      	str	r3, [sp, #0]
  4026b2:	4642      	mov	r2, r8
  4026b4:	4653      	mov	r3, sl
  4026b6:	9106      	str	r1, [sp, #24]
  4026b8:	f8cd 9010 	str.w	r9, [sp, #16]
  4026bc:	f8cd e00c 	str.w	lr, [sp, #12]
  4026c0:	4628      	mov	r0, r5
  4026c2:	f7ff fef5 	bl	4024b0 <__cvt>
  4026c6:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  4026ca:	2b47      	cmp	r3, #71	; 0x47
  4026cc:	4680      	mov	r8, r0
  4026ce:	f000 8184 	beq.w	4029da <_printf_float+0x40a>
  4026d2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  4026d6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4026d8:	f200 818d 	bhi.w	4029f6 <_printf_float+0x426>
  4026dc:	3901      	subs	r1, #1
  4026de:	464a      	mov	r2, r9
  4026e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4026e4:	910d      	str	r1, [sp, #52]	; 0x34
  4026e6:	f7ff ff42 	bl	40256e <__exponent>
  4026ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4026ec:	1883      	adds	r3, r0, r2
  4026ee:	2a01      	cmp	r2, #1
  4026f0:	4682      	mov	sl, r0
  4026f2:	6123      	str	r3, [r4, #16]
  4026f4:	f300 817c 	bgt.w	4029f0 <_printf_float+0x420>
  4026f8:	6822      	ldr	r2, [r4, #0]
  4026fa:	07d1      	lsls	r1, r2, #31
  4026fc:	f100 8178 	bmi.w	4029f0 <_printf_float+0x420>
  402700:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402704:	b113      	cbz	r3, 40270c <_printf_float+0x13c>
  402706:	232d      	movs	r3, #45	; 0x2d
  402708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40270c:	9700      	str	r7, [sp, #0]
  40270e:	4633      	mov	r3, r6
  402710:	aa0f      	add	r2, sp, #60	; 0x3c
  402712:	4621      	mov	r1, r4
  402714:	4628      	mov	r0, r5
  402716:	f000 f99f 	bl	402a58 <_printf_common>
  40271a:	3001      	adds	r0, #1
  40271c:	d102      	bne.n	402724 <_printf_float+0x154>
  40271e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402722:	e196      	b.n	402a52 <_printf_float+0x482>
  402724:	6823      	ldr	r3, [r4, #0]
  402726:	055a      	lsls	r2, r3, #21
  402728:	d401      	bmi.n	40272e <_printf_float+0x15e>
  40272a:	6923      	ldr	r3, [r4, #16]
  40272c:	e065      	b.n	4027fa <_printf_float+0x22a>
  40272e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402732:	f240 80d5 	bls.w	4028e0 <_printf_float+0x310>
  402736:	2200      	movs	r2, #0
  402738:	2300      	movs	r3, #0
  40273a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40273e:	f002 ff6d 	bl	40561c <__aeabi_dcmpeq>
  402742:	b378      	cbz	r0, 4027a4 <_printf_float+0x1d4>
  402744:	2301      	movs	r3, #1
  402746:	4a65      	ldr	r2, [pc, #404]	; (4028dc <_printf_float+0x30c>)
  402748:	4631      	mov	r1, r6
  40274a:	4628      	mov	r0, r5
  40274c:	47b8      	blx	r7
  40274e:	3001      	adds	r0, #1
  402750:	d0e5      	beq.n	40271e <_printf_float+0x14e>
  402752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402756:	429a      	cmp	r2, r3
  402758:	db0b      	blt.n	402772 <_printf_float+0x1a2>
  40275a:	6823      	ldr	r3, [r4, #0]
  40275c:	07d8      	lsls	r0, r3, #31
  40275e:	d408      	bmi.n	402772 <_printf_float+0x1a2>
  402760:	6823      	ldr	r3, [r4, #0]
  402762:	079b      	lsls	r3, r3, #30
  402764:	f140 8111 	bpl.w	40298a <_printf_float+0x3ba>
  402768:	f04f 0800 	mov.w	r8, #0
  40276c:	f104 0919 	add.w	r9, r4, #25
  402770:	e106      	b.n	402980 <_printf_float+0x3b0>
  402772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402774:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402776:	4631      	mov	r1, r6
  402778:	4628      	mov	r0, r5
  40277a:	47b8      	blx	r7
  40277c:	3001      	adds	r0, #1
  40277e:	d0ce      	beq.n	40271e <_printf_float+0x14e>
  402780:	f04f 0800 	mov.w	r8, #0
  402784:	f104 091a 	add.w	r9, r4, #26
  402788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40278a:	3b01      	subs	r3, #1
  40278c:	4598      	cmp	r8, r3
  40278e:	dae7      	bge.n	402760 <_printf_float+0x190>
  402790:	2301      	movs	r3, #1
  402792:	464a      	mov	r2, r9
  402794:	4631      	mov	r1, r6
  402796:	4628      	mov	r0, r5
  402798:	47b8      	blx	r7
  40279a:	3001      	adds	r0, #1
  40279c:	d0bf      	beq.n	40271e <_printf_float+0x14e>
  40279e:	f108 0801 	add.w	r8, r8, #1
  4027a2:	e7f1      	b.n	402788 <_printf_float+0x1b8>
  4027a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4027a6:	2b00      	cmp	r3, #0
  4027a8:	dc29      	bgt.n	4027fe <_printf_float+0x22e>
  4027aa:	2301      	movs	r3, #1
  4027ac:	4a4b      	ldr	r2, [pc, #300]	; (4028dc <_printf_float+0x30c>)
  4027ae:	4631      	mov	r1, r6
  4027b0:	4628      	mov	r0, r5
  4027b2:	47b8      	blx	r7
  4027b4:	3001      	adds	r0, #1
  4027b6:	d0b2      	beq.n	40271e <_printf_float+0x14e>
  4027b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4027ba:	b923      	cbnz	r3, 4027c6 <_printf_float+0x1f6>
  4027bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4027be:	b913      	cbnz	r3, 4027c6 <_printf_float+0x1f6>
  4027c0:	6823      	ldr	r3, [r4, #0]
  4027c2:	07d9      	lsls	r1, r3, #31
  4027c4:	d5cc      	bpl.n	402760 <_printf_float+0x190>
  4027c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4027c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4027ca:	4631      	mov	r1, r6
  4027cc:	4628      	mov	r0, r5
  4027ce:	47b8      	blx	r7
  4027d0:	3001      	adds	r0, #1
  4027d2:	d0a4      	beq.n	40271e <_printf_float+0x14e>
  4027d4:	f04f 0900 	mov.w	r9, #0
  4027d8:	f104 0a1a 	add.w	sl, r4, #26
  4027dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4027de:	425b      	negs	r3, r3
  4027e0:	4599      	cmp	r9, r3
  4027e2:	da09      	bge.n	4027f8 <_printf_float+0x228>
  4027e4:	2301      	movs	r3, #1
  4027e6:	4652      	mov	r2, sl
  4027e8:	4631      	mov	r1, r6
  4027ea:	4628      	mov	r0, r5
  4027ec:	47b8      	blx	r7
  4027ee:	3001      	adds	r0, #1
  4027f0:	d095      	beq.n	40271e <_printf_float+0x14e>
  4027f2:	f109 0901 	add.w	r9, r9, #1
  4027f6:	e7f1      	b.n	4027dc <_printf_float+0x20c>
  4027f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4027fa:	4642      	mov	r2, r8
  4027fc:	e0a7      	b.n	40294e <_printf_float+0x37e>
  4027fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402800:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402802:	429a      	cmp	r2, r3
  402804:	bfa8      	it	ge
  402806:	461a      	movge	r2, r3
  402808:	2a00      	cmp	r2, #0
  40280a:	4691      	mov	r9, r2
  40280c:	dc06      	bgt.n	40281c <_printf_float+0x24c>
  40280e:	f04f 0a00 	mov.w	sl, #0
  402812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  402816:	f104 0b1a 	add.w	fp, r4, #26
  40281a:	e011      	b.n	402840 <_printf_float+0x270>
  40281c:	4613      	mov	r3, r2
  40281e:	4631      	mov	r1, r6
  402820:	4642      	mov	r2, r8
  402822:	4628      	mov	r0, r5
  402824:	47b8      	blx	r7
  402826:	3001      	adds	r0, #1
  402828:	d1f1      	bne.n	40280e <_printf_float+0x23e>
  40282a:	e778      	b.n	40271e <_printf_float+0x14e>
  40282c:	2301      	movs	r3, #1
  40282e:	465a      	mov	r2, fp
  402830:	4631      	mov	r1, r6
  402832:	4628      	mov	r0, r5
  402834:	47b8      	blx	r7
  402836:	3001      	adds	r0, #1
  402838:	f43f af71 	beq.w	40271e <_printf_float+0x14e>
  40283c:	f10a 0a01 	add.w	sl, sl, #1
  402840:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402842:	ebc9 0203 	rsb	r2, r9, r3
  402846:	4592      	cmp	sl, r2
  402848:	dbf0      	blt.n	40282c <_printf_float+0x25c>
  40284a:	eb08 0903 	add.w	r9, r8, r3
  40284e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402852:	429a      	cmp	r2, r3
  402854:	db0f      	blt.n	402876 <_printf_float+0x2a6>
  402856:	6823      	ldr	r3, [r4, #0]
  402858:	07da      	lsls	r2, r3, #31
  40285a:	d40c      	bmi.n	402876 <_printf_float+0x2a6>
  40285c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40285e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402860:	4498      	add	r8, r3
  402862:	ebc9 0808 	rsb	r8, r9, r8
  402866:	1a9b      	subs	r3, r3, r2
  402868:	4598      	cmp	r8, r3
  40286a:	bfa8      	it	ge
  40286c:	4698      	movge	r8, r3
  40286e:	f1b8 0f00 	cmp.w	r8, #0
  402872:	dc08      	bgt.n	402886 <_printf_float+0x2b6>
  402874:	e00f      	b.n	402896 <_printf_float+0x2c6>
  402876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402878:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40287a:	4631      	mov	r1, r6
  40287c:	4628      	mov	r0, r5
  40287e:	47b8      	blx	r7
  402880:	3001      	adds	r0, #1
  402882:	d1eb      	bne.n	40285c <_printf_float+0x28c>
  402884:	e74b      	b.n	40271e <_printf_float+0x14e>
  402886:	4643      	mov	r3, r8
  402888:	464a      	mov	r2, r9
  40288a:	4631      	mov	r1, r6
  40288c:	4628      	mov	r0, r5
  40288e:	47b8      	blx	r7
  402890:	3001      	adds	r0, #1
  402892:	f43f af44 	beq.w	40271e <_printf_float+0x14e>
  402896:	f04f 0900 	mov.w	r9, #0
  40289a:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40289e:	f104 0a1a 	add.w	sl, r4, #26
  4028a2:	e009      	b.n	4028b8 <_printf_float+0x2e8>
  4028a4:	2301      	movs	r3, #1
  4028a6:	4652      	mov	r2, sl
  4028a8:	4631      	mov	r1, r6
  4028aa:	4628      	mov	r0, r5
  4028ac:	47b8      	blx	r7
  4028ae:	3001      	adds	r0, #1
  4028b0:	f43f af35 	beq.w	40271e <_printf_float+0x14e>
  4028b4:	f109 0901 	add.w	r9, r9, #1
  4028b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4028ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4028bc:	1a9b      	subs	r3, r3, r2
  4028be:	ebc8 0303 	rsb	r3, r8, r3
  4028c2:	4599      	cmp	r9, r3
  4028c4:	dbee      	blt.n	4028a4 <_printf_float+0x2d4>
  4028c6:	e74b      	b.n	402760 <_printf_float+0x190>
  4028c8:	7fefffff 	.word	0x7fefffff
  4028cc:	00406034 	.word	0x00406034
  4028d0:	00406038 	.word	0x00406038
  4028d4:	0040603c 	.word	0x0040603c
  4028d8:	00406040 	.word	0x00406040
  4028dc:	00406044 	.word	0x00406044
  4028e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4028e2:	2a01      	cmp	r2, #1
  4028e4:	dc01      	bgt.n	4028ea <_printf_float+0x31a>
  4028e6:	07db      	lsls	r3, r3, #31
  4028e8:	d538      	bpl.n	40295c <_printf_float+0x38c>
  4028ea:	2301      	movs	r3, #1
  4028ec:	4642      	mov	r2, r8
  4028ee:	4631      	mov	r1, r6
  4028f0:	4628      	mov	r0, r5
  4028f2:	47b8      	blx	r7
  4028f4:	3001      	adds	r0, #1
  4028f6:	f43f af12 	beq.w	40271e <_printf_float+0x14e>
  4028fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4028fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4028fe:	4631      	mov	r1, r6
  402900:	4628      	mov	r0, r5
  402902:	47b8      	blx	r7
  402904:	3001      	adds	r0, #1
  402906:	f43f af0a 	beq.w	40271e <_printf_float+0x14e>
  40290a:	2200      	movs	r2, #0
  40290c:	2300      	movs	r3, #0
  40290e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402912:	f002 fe83 	bl	40561c <__aeabi_dcmpeq>
  402916:	b120      	cbz	r0, 402922 <_printf_float+0x352>
  402918:	f04f 0800 	mov.w	r8, #0
  40291c:	f104 091a 	add.w	r9, r4, #26
  402920:	e00e      	b.n	402940 <_printf_float+0x370>
  402922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402924:	f108 0201 	add.w	r2, r8, #1
  402928:	3b01      	subs	r3, #1
  40292a:	e019      	b.n	402960 <_printf_float+0x390>
  40292c:	2301      	movs	r3, #1
  40292e:	464a      	mov	r2, r9
  402930:	4631      	mov	r1, r6
  402932:	4628      	mov	r0, r5
  402934:	47b8      	blx	r7
  402936:	3001      	adds	r0, #1
  402938:	f43f aef1 	beq.w	40271e <_printf_float+0x14e>
  40293c:	f108 0801 	add.w	r8, r8, #1
  402940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402942:	3b01      	subs	r3, #1
  402944:	4598      	cmp	r8, r3
  402946:	dbf1      	blt.n	40292c <_printf_float+0x35c>
  402948:	4653      	mov	r3, sl
  40294a:	f104 0250 	add.w	r2, r4, #80	; 0x50
  40294e:	4631      	mov	r1, r6
  402950:	4628      	mov	r0, r5
  402952:	47b8      	blx	r7
  402954:	3001      	adds	r0, #1
  402956:	f47f af03 	bne.w	402760 <_printf_float+0x190>
  40295a:	e6e0      	b.n	40271e <_printf_float+0x14e>
  40295c:	2301      	movs	r3, #1
  40295e:	4642      	mov	r2, r8
  402960:	4631      	mov	r1, r6
  402962:	4628      	mov	r0, r5
  402964:	47b8      	blx	r7
  402966:	3001      	adds	r0, #1
  402968:	d1ee      	bne.n	402948 <_printf_float+0x378>
  40296a:	e6d8      	b.n	40271e <_printf_float+0x14e>
  40296c:	2301      	movs	r3, #1
  40296e:	464a      	mov	r2, r9
  402970:	4631      	mov	r1, r6
  402972:	4628      	mov	r0, r5
  402974:	47b8      	blx	r7
  402976:	3001      	adds	r0, #1
  402978:	f43f aed1 	beq.w	40271e <_printf_float+0x14e>
  40297c:	f108 0801 	add.w	r8, r8, #1
  402980:	68e3      	ldr	r3, [r4, #12]
  402982:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402984:	1a9b      	subs	r3, r3, r2
  402986:	4598      	cmp	r8, r3
  402988:	dbf0      	blt.n	40296c <_printf_float+0x39c>
  40298a:	68e0      	ldr	r0, [r4, #12]
  40298c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40298e:	4298      	cmp	r0, r3
  402990:	bfb8      	it	lt
  402992:	4618      	movlt	r0, r3
  402994:	e05d      	b.n	402a52 <_printf_float+0x482>
  402996:	6862      	ldr	r2, [r4, #4]
  402998:	1c53      	adds	r3, r2, #1
  40299a:	a80e      	add	r0, sp, #56	; 0x38
  40299c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  4029a0:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4029a4:	f47f ae74 	bne.w	402690 <_printf_float+0xc0>
  4029a8:	2206      	movs	r2, #6
  4029aa:	e001      	b.n	4029b0 <_printf_float+0x3e0>
  4029ac:	b912      	cbnz	r2, 4029b4 <_printf_float+0x3e4>
  4029ae:	2201      	movs	r2, #1
  4029b0:	6062      	str	r2, [r4, #4]
  4029b2:	e675      	b.n	4026a0 <_printf_float+0xd0>
  4029b4:	2100      	movs	r1, #0
  4029b6:	9106      	str	r1, [sp, #24]
  4029b8:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4029bc:	e88d 000c 	stmia.w	sp, {r2, r3}
  4029c0:	6023      	str	r3, [r4, #0]
  4029c2:	9005      	str	r0, [sp, #20]
  4029c4:	4642      	mov	r2, r8
  4029c6:	f8cd 9010 	str.w	r9, [sp, #16]
  4029ca:	f8cd e00c 	str.w	lr, [sp, #12]
  4029ce:	9102      	str	r1, [sp, #8]
  4029d0:	4653      	mov	r3, sl
  4029d2:	4628      	mov	r0, r5
  4029d4:	f7ff fd6c 	bl	4024b0 <__cvt>
  4029d8:	4680      	mov	r8, r0
  4029da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4029dc:	1cd8      	adds	r0, r3, #3
  4029de:	db02      	blt.n	4029e6 <_printf_float+0x416>
  4029e0:	6862      	ldr	r2, [r4, #4]
  4029e2:	4293      	cmp	r3, r2
  4029e4:	dd1d      	ble.n	402a22 <_printf_float+0x452>
  4029e6:	f1a9 0902 	sub.w	r9, r9, #2
  4029ea:	fa5f f989 	uxtb.w	r9, r9
  4029ee:	e670      	b.n	4026d2 <_printf_float+0x102>
  4029f0:	3301      	adds	r3, #1
  4029f2:	6123      	str	r3, [r4, #16]
  4029f4:	e684      	b.n	402700 <_printf_float+0x130>
  4029f6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  4029fa:	d114      	bne.n	402a26 <_printf_float+0x456>
  4029fc:	2900      	cmp	r1, #0
  4029fe:	6863      	ldr	r3, [r4, #4]
  402a00:	dd07      	ble.n	402a12 <_printf_float+0x442>
  402a02:	6121      	str	r1, [r4, #16]
  402a04:	b913      	cbnz	r3, 402a0c <_printf_float+0x43c>
  402a06:	6822      	ldr	r2, [r4, #0]
  402a08:	07d2      	lsls	r2, r2, #31
  402a0a:	d51d      	bpl.n	402a48 <_printf_float+0x478>
  402a0c:	3301      	adds	r3, #1
  402a0e:	440b      	add	r3, r1
  402a10:	e019      	b.n	402a46 <_printf_float+0x476>
  402a12:	b913      	cbnz	r3, 402a1a <_printf_float+0x44a>
  402a14:	6822      	ldr	r2, [r4, #0]
  402a16:	07d0      	lsls	r0, r2, #31
  402a18:	d501      	bpl.n	402a1e <_printf_float+0x44e>
  402a1a:	3302      	adds	r3, #2
  402a1c:	e013      	b.n	402a46 <_printf_float+0x476>
  402a1e:	2301      	movs	r3, #1
  402a20:	e011      	b.n	402a46 <_printf_float+0x476>
  402a22:	f04f 0967 	mov.w	r9, #103	; 0x67
  402a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402a2a:	4293      	cmp	r3, r2
  402a2c:	db05      	blt.n	402a3a <_printf_float+0x46a>
  402a2e:	6822      	ldr	r2, [r4, #0]
  402a30:	6123      	str	r3, [r4, #16]
  402a32:	07d1      	lsls	r1, r2, #31
  402a34:	d508      	bpl.n	402a48 <_printf_float+0x478>
  402a36:	3301      	adds	r3, #1
  402a38:	e005      	b.n	402a46 <_printf_float+0x476>
  402a3a:	2b00      	cmp	r3, #0
  402a3c:	bfd4      	ite	le
  402a3e:	f1c3 0302 	rsble	r3, r3, #2
  402a42:	2301      	movgt	r3, #1
  402a44:	4413      	add	r3, r2
  402a46:	6123      	str	r3, [r4, #16]
  402a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402a4a:	65a3      	str	r3, [r4, #88]	; 0x58
  402a4c:	f04f 0a00 	mov.w	sl, #0
  402a50:	e656      	b.n	402700 <_printf_float+0x130>
  402a52:	b011      	add	sp, #68	; 0x44
  402a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402a58 <_printf_common>:
  402a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a5c:	4691      	mov	r9, r2
  402a5e:	461f      	mov	r7, r3
  402a60:	690a      	ldr	r2, [r1, #16]
  402a62:	688b      	ldr	r3, [r1, #8]
  402a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402a68:	4293      	cmp	r3, r2
  402a6a:	bfb8      	it	lt
  402a6c:	4613      	movlt	r3, r2
  402a6e:	f8c9 3000 	str.w	r3, [r9]
  402a72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  402a76:	4606      	mov	r6, r0
  402a78:	460c      	mov	r4, r1
  402a7a:	b112      	cbz	r2, 402a82 <_printf_common+0x2a>
  402a7c:	3301      	adds	r3, #1
  402a7e:	f8c9 3000 	str.w	r3, [r9]
  402a82:	6823      	ldr	r3, [r4, #0]
  402a84:	0699      	lsls	r1, r3, #26
  402a86:	bf42      	ittt	mi
  402a88:	f8d9 3000 	ldrmi.w	r3, [r9]
  402a8c:	3302      	addmi	r3, #2
  402a8e:	f8c9 3000 	strmi.w	r3, [r9]
  402a92:	6825      	ldr	r5, [r4, #0]
  402a94:	f015 0506 	ands.w	r5, r5, #6
  402a98:	d110      	bne.n	402abc <_printf_common+0x64>
  402a9a:	f104 0a19 	add.w	sl, r4, #25
  402a9e:	e007      	b.n	402ab0 <_printf_common+0x58>
  402aa0:	2301      	movs	r3, #1
  402aa2:	4652      	mov	r2, sl
  402aa4:	4639      	mov	r1, r7
  402aa6:	4630      	mov	r0, r6
  402aa8:	47c0      	blx	r8
  402aaa:	3001      	adds	r0, #1
  402aac:	d01a      	beq.n	402ae4 <_printf_common+0x8c>
  402aae:	3501      	adds	r5, #1
  402ab0:	68e3      	ldr	r3, [r4, #12]
  402ab2:	f8d9 2000 	ldr.w	r2, [r9]
  402ab6:	1a9b      	subs	r3, r3, r2
  402ab8:	429d      	cmp	r5, r3
  402aba:	dbf1      	blt.n	402aa0 <_printf_common+0x48>
  402abc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402ac0:	6822      	ldr	r2, [r4, #0]
  402ac2:	3300      	adds	r3, #0
  402ac4:	bf18      	it	ne
  402ac6:	2301      	movne	r3, #1
  402ac8:	0692      	lsls	r2, r2, #26
  402aca:	d50f      	bpl.n	402aec <_printf_common+0x94>
  402acc:	18e1      	adds	r1, r4, r3
  402ace:	1c5a      	adds	r2, r3, #1
  402ad0:	2030      	movs	r0, #48	; 0x30
  402ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402ad6:	4422      	add	r2, r4
  402ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402ae0:	3302      	adds	r3, #2
  402ae2:	e003      	b.n	402aec <_printf_common+0x94>
  402ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402af0:	4639      	mov	r1, r7
  402af2:	4630      	mov	r0, r6
  402af4:	47c0      	blx	r8
  402af6:	3001      	adds	r0, #1
  402af8:	d0f4      	beq.n	402ae4 <_printf_common+0x8c>
  402afa:	6822      	ldr	r2, [r4, #0]
  402afc:	f8d9 5000 	ldr.w	r5, [r9]
  402b00:	68e3      	ldr	r3, [r4, #12]
  402b02:	f002 0206 	and.w	r2, r2, #6
  402b06:	2a04      	cmp	r2, #4
  402b08:	bf08      	it	eq
  402b0a:	1b5d      	subeq	r5, r3, r5
  402b0c:	6922      	ldr	r2, [r4, #16]
  402b0e:	68a3      	ldr	r3, [r4, #8]
  402b10:	bf0c      	ite	eq
  402b12:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402b16:	2500      	movne	r5, #0
  402b18:	4293      	cmp	r3, r2
  402b1a:	bfc4      	itt	gt
  402b1c:	1a9b      	subgt	r3, r3, r2
  402b1e:	18ed      	addgt	r5, r5, r3
  402b20:	f04f 0900 	mov.w	r9, #0
  402b24:	341a      	adds	r4, #26
  402b26:	454d      	cmp	r5, r9
  402b28:	d009      	beq.n	402b3e <_printf_common+0xe6>
  402b2a:	2301      	movs	r3, #1
  402b2c:	4622      	mov	r2, r4
  402b2e:	4639      	mov	r1, r7
  402b30:	4630      	mov	r0, r6
  402b32:	47c0      	blx	r8
  402b34:	3001      	adds	r0, #1
  402b36:	d0d5      	beq.n	402ae4 <_printf_common+0x8c>
  402b38:	f109 0901 	add.w	r9, r9, #1
  402b3c:	e7f3      	b.n	402b26 <_printf_common+0xce>
  402b3e:	2000      	movs	r0, #0
  402b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402b44 <_printf_i>:
  402b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402b48:	4617      	mov	r7, r2
  402b4a:	7e0a      	ldrb	r2, [r1, #24]
  402b4c:	b085      	sub	sp, #20
  402b4e:	2a6e      	cmp	r2, #110	; 0x6e
  402b50:	4698      	mov	r8, r3
  402b52:	4606      	mov	r6, r0
  402b54:	460c      	mov	r4, r1
  402b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402b58:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402b5c:	f000 80ae 	beq.w	402cbc <_printf_i+0x178>
  402b60:	d811      	bhi.n	402b86 <_printf_i+0x42>
  402b62:	2a63      	cmp	r2, #99	; 0x63
  402b64:	d022      	beq.n	402bac <_printf_i+0x68>
  402b66:	d809      	bhi.n	402b7c <_printf_i+0x38>
  402b68:	2a00      	cmp	r2, #0
  402b6a:	f000 80bb 	beq.w	402ce4 <_printf_i+0x1a0>
  402b6e:	2a58      	cmp	r2, #88	; 0x58
  402b70:	f040 80ca 	bne.w	402d08 <_printf_i+0x1c4>
  402b74:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402b78:	4983      	ldr	r1, [pc, #524]	; (402d88 <_printf_i+0x244>)
  402b7a:	e055      	b.n	402c28 <_printf_i+0xe4>
  402b7c:	2a64      	cmp	r2, #100	; 0x64
  402b7e:	d01e      	beq.n	402bbe <_printf_i+0x7a>
  402b80:	2a69      	cmp	r2, #105	; 0x69
  402b82:	d01c      	beq.n	402bbe <_printf_i+0x7a>
  402b84:	e0c0      	b.n	402d08 <_printf_i+0x1c4>
  402b86:	2a73      	cmp	r2, #115	; 0x73
  402b88:	f000 80b0 	beq.w	402cec <_printf_i+0x1a8>
  402b8c:	d809      	bhi.n	402ba2 <_printf_i+0x5e>
  402b8e:	2a6f      	cmp	r2, #111	; 0x6f
  402b90:	d02e      	beq.n	402bf0 <_printf_i+0xac>
  402b92:	2a70      	cmp	r2, #112	; 0x70
  402b94:	f040 80b8 	bne.w	402d08 <_printf_i+0x1c4>
  402b98:	680a      	ldr	r2, [r1, #0]
  402b9a:	f042 0220 	orr.w	r2, r2, #32
  402b9e:	600a      	str	r2, [r1, #0]
  402ba0:	e03e      	b.n	402c20 <_printf_i+0xdc>
  402ba2:	2a75      	cmp	r2, #117	; 0x75
  402ba4:	d024      	beq.n	402bf0 <_printf_i+0xac>
  402ba6:	2a78      	cmp	r2, #120	; 0x78
  402ba8:	d03a      	beq.n	402c20 <_printf_i+0xdc>
  402baa:	e0ad      	b.n	402d08 <_printf_i+0x1c4>
  402bac:	681a      	ldr	r2, [r3, #0]
  402bae:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402bb2:	1d11      	adds	r1, r2, #4
  402bb4:	6019      	str	r1, [r3, #0]
  402bb6:	6813      	ldr	r3, [r2, #0]
  402bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402bbc:	e0a8      	b.n	402d10 <_printf_i+0x1cc>
  402bbe:	6821      	ldr	r1, [r4, #0]
  402bc0:	681a      	ldr	r2, [r3, #0]
  402bc2:	f011 0f80 	tst.w	r1, #128	; 0x80
  402bc6:	d002      	beq.n	402bce <_printf_i+0x8a>
  402bc8:	1d11      	adds	r1, r2, #4
  402bca:	6019      	str	r1, [r3, #0]
  402bcc:	e008      	b.n	402be0 <_printf_i+0x9c>
  402bce:	f011 0f40 	tst.w	r1, #64	; 0x40
  402bd2:	f102 0104 	add.w	r1, r2, #4
  402bd6:	6019      	str	r1, [r3, #0]
  402bd8:	d002      	beq.n	402be0 <_printf_i+0x9c>
  402bda:	f9b2 3000 	ldrsh.w	r3, [r2]
  402bde:	e000      	b.n	402be2 <_printf_i+0x9e>
  402be0:	6813      	ldr	r3, [r2, #0]
  402be2:	2b00      	cmp	r3, #0
  402be4:	da3c      	bge.n	402c60 <_printf_i+0x11c>
  402be6:	222d      	movs	r2, #45	; 0x2d
  402be8:	425b      	negs	r3, r3
  402bea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402bee:	e037      	b.n	402c60 <_printf_i+0x11c>
  402bf0:	6821      	ldr	r1, [r4, #0]
  402bf2:	681a      	ldr	r2, [r3, #0]
  402bf4:	f011 0f80 	tst.w	r1, #128	; 0x80
  402bf8:	d002      	beq.n	402c00 <_printf_i+0xbc>
  402bfa:	1d11      	adds	r1, r2, #4
  402bfc:	6019      	str	r1, [r3, #0]
  402bfe:	e007      	b.n	402c10 <_printf_i+0xcc>
  402c00:	f011 0f40 	tst.w	r1, #64	; 0x40
  402c04:	f102 0104 	add.w	r1, r2, #4
  402c08:	6019      	str	r1, [r3, #0]
  402c0a:	d001      	beq.n	402c10 <_printf_i+0xcc>
  402c0c:	8813      	ldrh	r3, [r2, #0]
  402c0e:	e000      	b.n	402c12 <_printf_i+0xce>
  402c10:	6813      	ldr	r3, [r2, #0]
  402c12:	7e22      	ldrb	r2, [r4, #24]
  402c14:	495c      	ldr	r1, [pc, #368]	; (402d88 <_printf_i+0x244>)
  402c16:	2a6f      	cmp	r2, #111	; 0x6f
  402c18:	bf14      	ite	ne
  402c1a:	220a      	movne	r2, #10
  402c1c:	2208      	moveq	r2, #8
  402c1e:	e01b      	b.n	402c58 <_printf_i+0x114>
  402c20:	2278      	movs	r2, #120	; 0x78
  402c22:	495a      	ldr	r1, [pc, #360]	; (402d8c <_printf_i+0x248>)
  402c24:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402c28:	6822      	ldr	r2, [r4, #0]
  402c2a:	6818      	ldr	r0, [r3, #0]
  402c2c:	f012 0f80 	tst.w	r2, #128	; 0x80
  402c30:	f100 0504 	add.w	r5, r0, #4
  402c34:	601d      	str	r5, [r3, #0]
  402c36:	d103      	bne.n	402c40 <_printf_i+0xfc>
  402c38:	0655      	lsls	r5, r2, #25
  402c3a:	d501      	bpl.n	402c40 <_printf_i+0xfc>
  402c3c:	8803      	ldrh	r3, [r0, #0]
  402c3e:	e000      	b.n	402c42 <_printf_i+0xfe>
  402c40:	6803      	ldr	r3, [r0, #0]
  402c42:	07d0      	lsls	r0, r2, #31
  402c44:	bf44      	itt	mi
  402c46:	f042 0220 	orrmi.w	r2, r2, #32
  402c4a:	6022      	strmi	r2, [r4, #0]
  402c4c:	b91b      	cbnz	r3, 402c56 <_printf_i+0x112>
  402c4e:	6822      	ldr	r2, [r4, #0]
  402c50:	f022 0220 	bic.w	r2, r2, #32
  402c54:	6022      	str	r2, [r4, #0]
  402c56:	2210      	movs	r2, #16
  402c58:	2000      	movs	r0, #0
  402c5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402c5e:	e001      	b.n	402c64 <_printf_i+0x120>
  402c60:	4949      	ldr	r1, [pc, #292]	; (402d88 <_printf_i+0x244>)
  402c62:	220a      	movs	r2, #10
  402c64:	6865      	ldr	r5, [r4, #4]
  402c66:	60a5      	str	r5, [r4, #8]
  402c68:	2d00      	cmp	r5, #0
  402c6a:	db08      	blt.n	402c7e <_printf_i+0x13a>
  402c6c:	6820      	ldr	r0, [r4, #0]
  402c6e:	f020 0004 	bic.w	r0, r0, #4
  402c72:	6020      	str	r0, [r4, #0]
  402c74:	b92b      	cbnz	r3, 402c82 <_printf_i+0x13e>
  402c76:	2d00      	cmp	r5, #0
  402c78:	d17d      	bne.n	402d76 <_printf_i+0x232>
  402c7a:	4675      	mov	r5, lr
  402c7c:	e00c      	b.n	402c98 <_printf_i+0x154>
  402c7e:	2b00      	cmp	r3, #0
  402c80:	d079      	beq.n	402d76 <_printf_i+0x232>
  402c82:	4675      	mov	r5, lr
  402c84:	fbb3 f0f2 	udiv	r0, r3, r2
  402c88:	fb02 3310 	mls	r3, r2, r0, r3
  402c8c:	5ccb      	ldrb	r3, [r1, r3]
  402c8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402c92:	4603      	mov	r3, r0
  402c94:	2800      	cmp	r0, #0
  402c96:	d1f5      	bne.n	402c84 <_printf_i+0x140>
  402c98:	2a08      	cmp	r2, #8
  402c9a:	d10b      	bne.n	402cb4 <_printf_i+0x170>
  402c9c:	6823      	ldr	r3, [r4, #0]
  402c9e:	07da      	lsls	r2, r3, #31
  402ca0:	d508      	bpl.n	402cb4 <_printf_i+0x170>
  402ca2:	6923      	ldr	r3, [r4, #16]
  402ca4:	6862      	ldr	r2, [r4, #4]
  402ca6:	429a      	cmp	r2, r3
  402ca8:	bfde      	ittt	le
  402caa:	2330      	movle	r3, #48	; 0x30
  402cac:	f805 3c01 	strble.w	r3, [r5, #-1]
  402cb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  402cb4:	ebc5 030e 	rsb	r3, r5, lr
  402cb8:	6123      	str	r3, [r4, #16]
  402cba:	e02e      	b.n	402d1a <_printf_i+0x1d6>
  402cbc:	6808      	ldr	r0, [r1, #0]
  402cbe:	681a      	ldr	r2, [r3, #0]
  402cc0:	6949      	ldr	r1, [r1, #20]
  402cc2:	f010 0f80 	tst.w	r0, #128	; 0x80
  402cc6:	d003      	beq.n	402cd0 <_printf_i+0x18c>
  402cc8:	1d10      	adds	r0, r2, #4
  402cca:	6018      	str	r0, [r3, #0]
  402ccc:	6813      	ldr	r3, [r2, #0]
  402cce:	e008      	b.n	402ce2 <_printf_i+0x19e>
  402cd0:	f010 0f40 	tst.w	r0, #64	; 0x40
  402cd4:	f102 0004 	add.w	r0, r2, #4
  402cd8:	6018      	str	r0, [r3, #0]
  402cda:	6813      	ldr	r3, [r2, #0]
  402cdc:	d001      	beq.n	402ce2 <_printf_i+0x19e>
  402cde:	8019      	strh	r1, [r3, #0]
  402ce0:	e000      	b.n	402ce4 <_printf_i+0x1a0>
  402ce2:	6019      	str	r1, [r3, #0]
  402ce4:	2300      	movs	r3, #0
  402ce6:	6123      	str	r3, [r4, #16]
  402ce8:	4675      	mov	r5, lr
  402cea:	e016      	b.n	402d1a <_printf_i+0x1d6>
  402cec:	681a      	ldr	r2, [r3, #0]
  402cee:	1d11      	adds	r1, r2, #4
  402cf0:	6019      	str	r1, [r3, #0]
  402cf2:	6815      	ldr	r5, [r2, #0]
  402cf4:	6862      	ldr	r2, [r4, #4]
  402cf6:	2100      	movs	r1, #0
  402cf8:	4628      	mov	r0, r5
  402cfa:	f001 fa61 	bl	4041c0 <memchr>
  402cfe:	b108      	cbz	r0, 402d04 <_printf_i+0x1c0>
  402d00:	1b40      	subs	r0, r0, r5
  402d02:	6060      	str	r0, [r4, #4]
  402d04:	6863      	ldr	r3, [r4, #4]
  402d06:	e004      	b.n	402d12 <_printf_i+0x1ce>
  402d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402d0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402d10:	2301      	movs	r3, #1
  402d12:	6123      	str	r3, [r4, #16]
  402d14:	2300      	movs	r3, #0
  402d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402d1a:	f8cd 8000 	str.w	r8, [sp]
  402d1e:	463b      	mov	r3, r7
  402d20:	aa03      	add	r2, sp, #12
  402d22:	4621      	mov	r1, r4
  402d24:	4630      	mov	r0, r6
  402d26:	f7ff fe97 	bl	402a58 <_printf_common>
  402d2a:	3001      	adds	r0, #1
  402d2c:	d102      	bne.n	402d34 <_printf_i+0x1f0>
  402d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402d32:	e026      	b.n	402d82 <_printf_i+0x23e>
  402d34:	6923      	ldr	r3, [r4, #16]
  402d36:	462a      	mov	r2, r5
  402d38:	4639      	mov	r1, r7
  402d3a:	4630      	mov	r0, r6
  402d3c:	47c0      	blx	r8
  402d3e:	3001      	adds	r0, #1
  402d40:	d0f5      	beq.n	402d2e <_printf_i+0x1ea>
  402d42:	6823      	ldr	r3, [r4, #0]
  402d44:	079b      	lsls	r3, r3, #30
  402d46:	d510      	bpl.n	402d6a <_printf_i+0x226>
  402d48:	2500      	movs	r5, #0
  402d4a:	f104 0919 	add.w	r9, r4, #25
  402d4e:	e007      	b.n	402d60 <_printf_i+0x21c>
  402d50:	2301      	movs	r3, #1
  402d52:	464a      	mov	r2, r9
  402d54:	4639      	mov	r1, r7
  402d56:	4630      	mov	r0, r6
  402d58:	47c0      	blx	r8
  402d5a:	3001      	adds	r0, #1
  402d5c:	d0e7      	beq.n	402d2e <_printf_i+0x1ea>
  402d5e:	3501      	adds	r5, #1
  402d60:	68e3      	ldr	r3, [r4, #12]
  402d62:	9a03      	ldr	r2, [sp, #12]
  402d64:	1a9b      	subs	r3, r3, r2
  402d66:	429d      	cmp	r5, r3
  402d68:	dbf2      	blt.n	402d50 <_printf_i+0x20c>
  402d6a:	68e0      	ldr	r0, [r4, #12]
  402d6c:	9b03      	ldr	r3, [sp, #12]
  402d6e:	4298      	cmp	r0, r3
  402d70:	bfb8      	it	lt
  402d72:	4618      	movlt	r0, r3
  402d74:	e005      	b.n	402d82 <_printf_i+0x23e>
  402d76:	780b      	ldrb	r3, [r1, #0]
  402d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402d80:	e78a      	b.n	402c98 <_printf_i+0x154>
  402d82:	b005      	add	sp, #20
  402d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402d88:	00406046 	.word	0x00406046
  402d8c:	00406057 	.word	0x00406057

00402d90 <iprintf>:
  402d90:	b40f      	push	{r0, r1, r2, r3}
  402d92:	4b0a      	ldr	r3, [pc, #40]	; (402dbc <iprintf+0x2c>)
  402d94:	b513      	push	{r0, r1, r4, lr}
  402d96:	681c      	ldr	r4, [r3, #0]
  402d98:	b124      	cbz	r4, 402da4 <iprintf+0x14>
  402d9a:	69a3      	ldr	r3, [r4, #24]
  402d9c:	b913      	cbnz	r3, 402da4 <iprintf+0x14>
  402d9e:	4620      	mov	r0, r4
  402da0:	f001 f90c 	bl	403fbc <__sinit>
  402da4:	ab05      	add	r3, sp, #20
  402da6:	9a04      	ldr	r2, [sp, #16]
  402da8:	68a1      	ldr	r1, [r4, #8]
  402daa:	9301      	str	r3, [sp, #4]
  402dac:	4620      	mov	r0, r4
  402dae:	f001 fe1b 	bl	4049e8 <_vfiprintf_r>
  402db2:	b002      	add	sp, #8
  402db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402db8:	b004      	add	sp, #16
  402dba:	4770      	bx	lr
  402dbc:	20000074 	.word	0x20000074

00402dc0 <_puts_r>:
  402dc0:	b570      	push	{r4, r5, r6, lr}
  402dc2:	460e      	mov	r6, r1
  402dc4:	4605      	mov	r5, r0
  402dc6:	b118      	cbz	r0, 402dd0 <_puts_r+0x10>
  402dc8:	6983      	ldr	r3, [r0, #24]
  402dca:	b90b      	cbnz	r3, 402dd0 <_puts_r+0x10>
  402dcc:	f001 f8f6 	bl	403fbc <__sinit>
  402dd0:	69ab      	ldr	r3, [r5, #24]
  402dd2:	68ac      	ldr	r4, [r5, #8]
  402dd4:	b913      	cbnz	r3, 402ddc <_puts_r+0x1c>
  402dd6:	4628      	mov	r0, r5
  402dd8:	f001 f8f0 	bl	403fbc <__sinit>
  402ddc:	4b22      	ldr	r3, [pc, #136]	; (402e68 <_puts_r+0xa8>)
  402dde:	429c      	cmp	r4, r3
  402de0:	d101      	bne.n	402de6 <_puts_r+0x26>
  402de2:	686c      	ldr	r4, [r5, #4]
  402de4:	e008      	b.n	402df8 <_puts_r+0x38>
  402de6:	4b21      	ldr	r3, [pc, #132]	; (402e6c <_puts_r+0xac>)
  402de8:	429c      	cmp	r4, r3
  402dea:	d101      	bne.n	402df0 <_puts_r+0x30>
  402dec:	68ac      	ldr	r4, [r5, #8]
  402dee:	e003      	b.n	402df8 <_puts_r+0x38>
  402df0:	4b1f      	ldr	r3, [pc, #124]	; (402e70 <_puts_r+0xb0>)
  402df2:	429c      	cmp	r4, r3
  402df4:	bf08      	it	eq
  402df6:	68ec      	ldreq	r4, [r5, #12]
  402df8:	89a3      	ldrh	r3, [r4, #12]
  402dfa:	071b      	lsls	r3, r3, #28
  402dfc:	d501      	bpl.n	402e02 <_puts_r+0x42>
  402dfe:	6923      	ldr	r3, [r4, #16]
  402e00:	b93b      	cbnz	r3, 402e12 <_puts_r+0x52>
  402e02:	4621      	mov	r1, r4
  402e04:	4628      	mov	r0, r5
  402e06:	f000 f94b 	bl	4030a0 <__swsetup_r>
  402e0a:	b110      	cbz	r0, 402e12 <_puts_r+0x52>
  402e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402e10:	bd70      	pop	{r4, r5, r6, pc}
  402e12:	3e01      	subs	r6, #1
  402e14:	68a3      	ldr	r3, [r4, #8]
  402e16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  402e1a:	3b01      	subs	r3, #1
  402e1c:	60a3      	str	r3, [r4, #8]
  402e1e:	b191      	cbz	r1, 402e46 <_puts_r+0x86>
  402e20:	2b00      	cmp	r3, #0
  402e22:	da04      	bge.n	402e2e <_puts_r+0x6e>
  402e24:	69a2      	ldr	r2, [r4, #24]
  402e26:	4293      	cmp	r3, r2
  402e28:	db06      	blt.n	402e38 <_puts_r+0x78>
  402e2a:	290a      	cmp	r1, #10
  402e2c:	d004      	beq.n	402e38 <_puts_r+0x78>
  402e2e:	6823      	ldr	r3, [r4, #0]
  402e30:	1c5a      	adds	r2, r3, #1
  402e32:	6022      	str	r2, [r4, #0]
  402e34:	7019      	strb	r1, [r3, #0]
  402e36:	e7ed      	b.n	402e14 <_puts_r+0x54>
  402e38:	4622      	mov	r2, r4
  402e3a:	4628      	mov	r0, r5
  402e3c:	f000 f8dc 	bl	402ff8 <__swbuf_r>
  402e40:	3001      	adds	r0, #1
  402e42:	d1e7      	bne.n	402e14 <_puts_r+0x54>
  402e44:	e7e2      	b.n	402e0c <_puts_r+0x4c>
  402e46:	2b00      	cmp	r3, #0
  402e48:	da08      	bge.n	402e5c <_puts_r+0x9c>
  402e4a:	4622      	mov	r2, r4
  402e4c:	210a      	movs	r1, #10
  402e4e:	4628      	mov	r0, r5
  402e50:	f000 f8d2 	bl	402ff8 <__swbuf_r>
  402e54:	3001      	adds	r0, #1
  402e56:	d0d9      	beq.n	402e0c <_puts_r+0x4c>
  402e58:	200a      	movs	r0, #10
  402e5a:	bd70      	pop	{r4, r5, r6, pc}
  402e5c:	6823      	ldr	r3, [r4, #0]
  402e5e:	200a      	movs	r0, #10
  402e60:	1c5a      	adds	r2, r3, #1
  402e62:	6022      	str	r2, [r4, #0]
  402e64:	7018      	strb	r0, [r3, #0]
  402e66:	bd70      	pop	{r4, r5, r6, pc}
  402e68:	00406078 	.word	0x00406078
  402e6c:	00406098 	.word	0x00406098
  402e70:	004060b8 	.word	0x004060b8

00402e74 <puts>:
  402e74:	4b02      	ldr	r3, [pc, #8]	; (402e80 <puts+0xc>)
  402e76:	4601      	mov	r1, r0
  402e78:	6818      	ldr	r0, [r3, #0]
  402e7a:	f7ff bfa1 	b.w	402dc0 <_puts_r>
  402e7e:	bf00      	nop
  402e80:	20000074 	.word	0x20000074

00402e84 <setbuf>:
  402e84:	2900      	cmp	r1, #0
  402e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402e8a:	bf0c      	ite	eq
  402e8c:	2202      	moveq	r2, #2
  402e8e:	2200      	movne	r2, #0
  402e90:	f000 b800 	b.w	402e94 <setvbuf>

00402e94 <setvbuf>:
  402e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  402e98:	461d      	mov	r5, r3
  402e9a:	4b4f      	ldr	r3, [pc, #316]	; (402fd8 <setvbuf+0x144>)
  402e9c:	681e      	ldr	r6, [r3, #0]
  402e9e:	4604      	mov	r4, r0
  402ea0:	460f      	mov	r7, r1
  402ea2:	4690      	mov	r8, r2
  402ea4:	b126      	cbz	r6, 402eb0 <setvbuf+0x1c>
  402ea6:	69b3      	ldr	r3, [r6, #24]
  402ea8:	b913      	cbnz	r3, 402eb0 <setvbuf+0x1c>
  402eaa:	4630      	mov	r0, r6
  402eac:	f001 f886 	bl	403fbc <__sinit>
  402eb0:	4b4a      	ldr	r3, [pc, #296]	; (402fdc <setvbuf+0x148>)
  402eb2:	429c      	cmp	r4, r3
  402eb4:	d101      	bne.n	402eba <setvbuf+0x26>
  402eb6:	6874      	ldr	r4, [r6, #4]
  402eb8:	e008      	b.n	402ecc <setvbuf+0x38>
  402eba:	4b49      	ldr	r3, [pc, #292]	; (402fe0 <setvbuf+0x14c>)
  402ebc:	429c      	cmp	r4, r3
  402ebe:	d101      	bne.n	402ec4 <setvbuf+0x30>
  402ec0:	68b4      	ldr	r4, [r6, #8]
  402ec2:	e003      	b.n	402ecc <setvbuf+0x38>
  402ec4:	4b47      	ldr	r3, [pc, #284]	; (402fe4 <setvbuf+0x150>)
  402ec6:	429c      	cmp	r4, r3
  402ec8:	bf08      	it	eq
  402eca:	68f4      	ldreq	r4, [r6, #12]
  402ecc:	f1b8 0f02 	cmp.w	r8, #2
  402ed0:	d004      	beq.n	402edc <setvbuf+0x48>
  402ed2:	f1b8 0f01 	cmp.w	r8, #1
  402ed6:	d879      	bhi.n	402fcc <setvbuf+0x138>
  402ed8:	2d00      	cmp	r5, #0
  402eda:	db77      	blt.n	402fcc <setvbuf+0x138>
  402edc:	4621      	mov	r1, r4
  402ede:	4630      	mov	r0, r6
  402ee0:	f001 f802 	bl	403ee8 <_fflush_r>
  402ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402ee6:	b141      	cbz	r1, 402efa <setvbuf+0x66>
  402ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402eec:	4299      	cmp	r1, r3
  402eee:	d002      	beq.n	402ef6 <setvbuf+0x62>
  402ef0:	4630      	mov	r0, r6
  402ef2:	f001 fca5 	bl	404840 <_free_r>
  402ef6:	2300      	movs	r3, #0
  402ef8:	6363      	str	r3, [r4, #52]	; 0x34
  402efa:	2300      	movs	r3, #0
  402efc:	61a3      	str	r3, [r4, #24]
  402efe:	6063      	str	r3, [r4, #4]
  402f00:	89a3      	ldrh	r3, [r4, #12]
  402f02:	061b      	lsls	r3, r3, #24
  402f04:	d503      	bpl.n	402f0e <setvbuf+0x7a>
  402f06:	6921      	ldr	r1, [r4, #16]
  402f08:	4630      	mov	r0, r6
  402f0a:	f001 fc99 	bl	404840 <_free_r>
  402f0e:	89a3      	ldrh	r3, [r4, #12]
  402f10:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402f14:	f023 0303 	bic.w	r3, r3, #3
  402f18:	f1b8 0f02 	cmp.w	r8, #2
  402f1c:	81a3      	strh	r3, [r4, #12]
  402f1e:	d01e      	beq.n	402f5e <setvbuf+0xca>
  402f20:	ab01      	add	r3, sp, #4
  402f22:	466a      	mov	r2, sp
  402f24:	4621      	mov	r1, r4
  402f26:	4630      	mov	r0, r6
  402f28:	f001 f8e0 	bl	4040ec <__swhatbuf_r>
  402f2c:	89a3      	ldrh	r3, [r4, #12]
  402f2e:	4318      	orrs	r0, r3
  402f30:	81a0      	strh	r0, [r4, #12]
  402f32:	b90d      	cbnz	r5, 402f38 <setvbuf+0xa4>
  402f34:	9d00      	ldr	r5, [sp, #0]
  402f36:	e000      	b.n	402f3a <setvbuf+0xa6>
  402f38:	bb2f      	cbnz	r7, 402f86 <setvbuf+0xf2>
  402f3a:	4628      	mov	r0, r5
  402f3c:	f001 f936 	bl	4041ac <malloc>
  402f40:	4607      	mov	r7, r0
  402f42:	b9d0      	cbnz	r0, 402f7a <setvbuf+0xe6>
  402f44:	f8dd 9000 	ldr.w	r9, [sp]
  402f48:	45a9      	cmp	r9, r5
  402f4a:	d102      	bne.n	402f52 <setvbuf+0xbe>
  402f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402f50:	e006      	b.n	402f60 <setvbuf+0xcc>
  402f52:	4648      	mov	r0, r9
  402f54:	f001 f92a 	bl	4041ac <malloc>
  402f58:	4607      	mov	r7, r0
  402f5a:	b978      	cbnz	r0, 402f7c <setvbuf+0xe8>
  402f5c:	e7f6      	b.n	402f4c <setvbuf+0xb8>
  402f5e:	2000      	movs	r0, #0
  402f60:	89a3      	ldrh	r3, [r4, #12]
  402f62:	f043 0302 	orr.w	r3, r3, #2
  402f66:	81a3      	strh	r3, [r4, #12]
  402f68:	2300      	movs	r3, #0
  402f6a:	60a3      	str	r3, [r4, #8]
  402f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402f70:	6023      	str	r3, [r4, #0]
  402f72:	6123      	str	r3, [r4, #16]
  402f74:	2301      	movs	r3, #1
  402f76:	6163      	str	r3, [r4, #20]
  402f78:	e02a      	b.n	402fd0 <setvbuf+0x13c>
  402f7a:	46a9      	mov	r9, r5
  402f7c:	89a3      	ldrh	r3, [r4, #12]
  402f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402f82:	81a3      	strh	r3, [r4, #12]
  402f84:	464d      	mov	r5, r9
  402f86:	69b3      	ldr	r3, [r6, #24]
  402f88:	b913      	cbnz	r3, 402f90 <setvbuf+0xfc>
  402f8a:	4630      	mov	r0, r6
  402f8c:	f001 f816 	bl	403fbc <__sinit>
  402f90:	f1b8 0f01 	cmp.w	r8, #1
  402f94:	bf08      	it	eq
  402f96:	89a3      	ldrheq	r3, [r4, #12]
  402f98:	6027      	str	r7, [r4, #0]
  402f9a:	bf04      	itt	eq
  402f9c:	f043 0301 	orreq.w	r3, r3, #1
  402fa0:	81a3      	strheq	r3, [r4, #12]
  402fa2:	89a3      	ldrh	r3, [r4, #12]
  402fa4:	6127      	str	r7, [r4, #16]
  402fa6:	f003 0008 	and.w	r0, r3, #8
  402faa:	b280      	uxth	r0, r0
  402fac:	6165      	str	r5, [r4, #20]
  402fae:	b158      	cbz	r0, 402fc8 <setvbuf+0x134>
  402fb0:	f013 0301 	ands.w	r3, r3, #1
  402fb4:	f04f 0000 	mov.w	r0, #0
  402fb8:	bf1d      	ittte	ne
  402fba:	426d      	negne	r5, r5
  402fbc:	60a0      	strne	r0, [r4, #8]
  402fbe:	61a5      	strne	r5, [r4, #24]
  402fc0:	60a5      	streq	r5, [r4, #8]
  402fc2:	bf08      	it	eq
  402fc4:	4618      	moveq	r0, r3
  402fc6:	e003      	b.n	402fd0 <setvbuf+0x13c>
  402fc8:	60a0      	str	r0, [r4, #8]
  402fca:	e001      	b.n	402fd0 <setvbuf+0x13c>
  402fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402fd0:	b003      	add	sp, #12
  402fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402fd6:	bf00      	nop
  402fd8:	20000074 	.word	0x20000074
  402fdc:	00406078 	.word	0x00406078
  402fe0:	00406098 	.word	0x00406098
  402fe4:	004060b8 	.word	0x004060b8

00402fe8 <strlen>:
  402fe8:	4603      	mov	r3, r0
  402fea:	f813 2b01 	ldrb.w	r2, [r3], #1
  402fee:	2a00      	cmp	r2, #0
  402ff0:	d1fb      	bne.n	402fea <strlen+0x2>
  402ff2:	1a18      	subs	r0, r3, r0
  402ff4:	3801      	subs	r0, #1
  402ff6:	4770      	bx	lr

00402ff8 <__swbuf_r>:
  402ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ffa:	460f      	mov	r7, r1
  402ffc:	4614      	mov	r4, r2
  402ffe:	4605      	mov	r5, r0
  403000:	b118      	cbz	r0, 40300a <__swbuf_r+0x12>
  403002:	6983      	ldr	r3, [r0, #24]
  403004:	b90b      	cbnz	r3, 40300a <__swbuf_r+0x12>
  403006:	f000 ffd9 	bl	403fbc <__sinit>
  40300a:	4b22      	ldr	r3, [pc, #136]	; (403094 <__swbuf_r+0x9c>)
  40300c:	429c      	cmp	r4, r3
  40300e:	d101      	bne.n	403014 <__swbuf_r+0x1c>
  403010:	686c      	ldr	r4, [r5, #4]
  403012:	e008      	b.n	403026 <__swbuf_r+0x2e>
  403014:	4b20      	ldr	r3, [pc, #128]	; (403098 <__swbuf_r+0xa0>)
  403016:	429c      	cmp	r4, r3
  403018:	d101      	bne.n	40301e <__swbuf_r+0x26>
  40301a:	68ac      	ldr	r4, [r5, #8]
  40301c:	e003      	b.n	403026 <__swbuf_r+0x2e>
  40301e:	4b1f      	ldr	r3, [pc, #124]	; (40309c <__swbuf_r+0xa4>)
  403020:	429c      	cmp	r4, r3
  403022:	bf08      	it	eq
  403024:	68ec      	ldreq	r4, [r5, #12]
  403026:	69a3      	ldr	r3, [r4, #24]
  403028:	60a3      	str	r3, [r4, #8]
  40302a:	89a3      	ldrh	r3, [r4, #12]
  40302c:	071a      	lsls	r2, r3, #28
  40302e:	d509      	bpl.n	403044 <__swbuf_r+0x4c>
  403030:	6923      	ldr	r3, [r4, #16]
  403032:	b13b      	cbz	r3, 403044 <__swbuf_r+0x4c>
  403034:	6823      	ldr	r3, [r4, #0]
  403036:	6920      	ldr	r0, [r4, #16]
  403038:	1a18      	subs	r0, r3, r0
  40303a:	6963      	ldr	r3, [r4, #20]
  40303c:	4298      	cmp	r0, r3
  40303e:	b2fe      	uxtb	r6, r7
  403040:	db0f      	blt.n	403062 <__swbuf_r+0x6a>
  403042:	e008      	b.n	403056 <__swbuf_r+0x5e>
  403044:	4621      	mov	r1, r4
  403046:	4628      	mov	r0, r5
  403048:	f000 f82a 	bl	4030a0 <__swsetup_r>
  40304c:	2800      	cmp	r0, #0
  40304e:	d0f1      	beq.n	403034 <__swbuf_r+0x3c>
  403050:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  403054:	e01b      	b.n	40308e <__swbuf_r+0x96>
  403056:	4621      	mov	r1, r4
  403058:	4628      	mov	r0, r5
  40305a:	f000 ff45 	bl	403ee8 <_fflush_r>
  40305e:	2800      	cmp	r0, #0
  403060:	d1f6      	bne.n	403050 <__swbuf_r+0x58>
  403062:	68a3      	ldr	r3, [r4, #8]
  403064:	3b01      	subs	r3, #1
  403066:	60a3      	str	r3, [r4, #8]
  403068:	6823      	ldr	r3, [r4, #0]
  40306a:	1c5a      	adds	r2, r3, #1
  40306c:	6022      	str	r2, [r4, #0]
  40306e:	701f      	strb	r7, [r3, #0]
  403070:	6963      	ldr	r3, [r4, #20]
  403072:	3001      	adds	r0, #1
  403074:	4298      	cmp	r0, r3
  403076:	d004      	beq.n	403082 <__swbuf_r+0x8a>
  403078:	89a3      	ldrh	r3, [r4, #12]
  40307a:	07db      	lsls	r3, r3, #31
  40307c:	d507      	bpl.n	40308e <__swbuf_r+0x96>
  40307e:	2e0a      	cmp	r6, #10
  403080:	d105      	bne.n	40308e <__swbuf_r+0x96>
  403082:	4621      	mov	r1, r4
  403084:	4628      	mov	r0, r5
  403086:	f000 ff2f 	bl	403ee8 <_fflush_r>
  40308a:	2800      	cmp	r0, #0
  40308c:	d1e0      	bne.n	403050 <__swbuf_r+0x58>
  40308e:	4630      	mov	r0, r6
  403090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403092:	bf00      	nop
  403094:	00406078 	.word	0x00406078
  403098:	00406098 	.word	0x00406098
  40309c:	004060b8 	.word	0x004060b8

004030a0 <__swsetup_r>:
  4030a0:	4b32      	ldr	r3, [pc, #200]	; (40316c <__swsetup_r+0xcc>)
  4030a2:	b570      	push	{r4, r5, r6, lr}
  4030a4:	681d      	ldr	r5, [r3, #0]
  4030a6:	4606      	mov	r6, r0
  4030a8:	460c      	mov	r4, r1
  4030aa:	b125      	cbz	r5, 4030b6 <__swsetup_r+0x16>
  4030ac:	69ab      	ldr	r3, [r5, #24]
  4030ae:	b913      	cbnz	r3, 4030b6 <__swsetup_r+0x16>
  4030b0:	4628      	mov	r0, r5
  4030b2:	f000 ff83 	bl	403fbc <__sinit>
  4030b6:	4b2e      	ldr	r3, [pc, #184]	; (403170 <__swsetup_r+0xd0>)
  4030b8:	429c      	cmp	r4, r3
  4030ba:	d101      	bne.n	4030c0 <__swsetup_r+0x20>
  4030bc:	686c      	ldr	r4, [r5, #4]
  4030be:	e008      	b.n	4030d2 <__swsetup_r+0x32>
  4030c0:	4b2c      	ldr	r3, [pc, #176]	; (403174 <__swsetup_r+0xd4>)
  4030c2:	429c      	cmp	r4, r3
  4030c4:	d101      	bne.n	4030ca <__swsetup_r+0x2a>
  4030c6:	68ac      	ldr	r4, [r5, #8]
  4030c8:	e003      	b.n	4030d2 <__swsetup_r+0x32>
  4030ca:	4b2b      	ldr	r3, [pc, #172]	; (403178 <__swsetup_r+0xd8>)
  4030cc:	429c      	cmp	r4, r3
  4030ce:	bf08      	it	eq
  4030d0:	68ec      	ldreq	r4, [r5, #12]
  4030d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030d6:	b29a      	uxth	r2, r3
  4030d8:	0715      	lsls	r5, r2, #28
  4030da:	d41d      	bmi.n	403118 <__swsetup_r+0x78>
  4030dc:	06d0      	lsls	r0, r2, #27
  4030de:	d402      	bmi.n	4030e6 <__swsetup_r+0x46>
  4030e0:	2209      	movs	r2, #9
  4030e2:	6032      	str	r2, [r6, #0]
  4030e4:	e03a      	b.n	40315c <__swsetup_r+0xbc>
  4030e6:	0751      	lsls	r1, r2, #29
  4030e8:	d512      	bpl.n	403110 <__swsetup_r+0x70>
  4030ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4030ec:	b141      	cbz	r1, 403100 <__swsetup_r+0x60>
  4030ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4030f2:	4299      	cmp	r1, r3
  4030f4:	d002      	beq.n	4030fc <__swsetup_r+0x5c>
  4030f6:	4630      	mov	r0, r6
  4030f8:	f001 fba2 	bl	404840 <_free_r>
  4030fc:	2300      	movs	r3, #0
  4030fe:	6363      	str	r3, [r4, #52]	; 0x34
  403100:	89a3      	ldrh	r3, [r4, #12]
  403102:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  403106:	81a3      	strh	r3, [r4, #12]
  403108:	2300      	movs	r3, #0
  40310a:	6063      	str	r3, [r4, #4]
  40310c:	6923      	ldr	r3, [r4, #16]
  40310e:	6023      	str	r3, [r4, #0]
  403110:	89a3      	ldrh	r3, [r4, #12]
  403112:	f043 0308 	orr.w	r3, r3, #8
  403116:	81a3      	strh	r3, [r4, #12]
  403118:	6923      	ldr	r3, [r4, #16]
  40311a:	b94b      	cbnz	r3, 403130 <__swsetup_r+0x90>
  40311c:	89a3      	ldrh	r3, [r4, #12]
  40311e:	f403 7320 	and.w	r3, r3, #640	; 0x280
  403122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403126:	d003      	beq.n	403130 <__swsetup_r+0x90>
  403128:	4621      	mov	r1, r4
  40312a:	4630      	mov	r0, r6
  40312c:	f001 f802 	bl	404134 <__smakebuf_r>
  403130:	89a2      	ldrh	r2, [r4, #12]
  403132:	f012 0301 	ands.w	r3, r2, #1
  403136:	d005      	beq.n	403144 <__swsetup_r+0xa4>
  403138:	2300      	movs	r3, #0
  40313a:	60a3      	str	r3, [r4, #8]
  40313c:	6963      	ldr	r3, [r4, #20]
  40313e:	425b      	negs	r3, r3
  403140:	61a3      	str	r3, [r4, #24]
  403142:	e003      	b.n	40314c <__swsetup_r+0xac>
  403144:	0792      	lsls	r2, r2, #30
  403146:	bf58      	it	pl
  403148:	6963      	ldrpl	r3, [r4, #20]
  40314a:	60a3      	str	r3, [r4, #8]
  40314c:	6923      	ldr	r3, [r4, #16]
  40314e:	b95b      	cbnz	r3, 403168 <__swsetup_r+0xc8>
  403150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403154:	f003 0080 	and.w	r0, r3, #128	; 0x80
  403158:	b280      	uxth	r0, r0
  40315a:	b130      	cbz	r0, 40316a <__swsetup_r+0xca>
  40315c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403160:	81a3      	strh	r3, [r4, #12]
  403162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403166:	bd70      	pop	{r4, r5, r6, pc}
  403168:	2000      	movs	r0, #0
  40316a:	bd70      	pop	{r4, r5, r6, pc}
  40316c:	20000074 	.word	0x20000074
  403170:	00406078 	.word	0x00406078
  403174:	00406098 	.word	0x00406098
  403178:	004060b8 	.word	0x004060b8

0040317c <quorem>:
  40317c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403180:	6903      	ldr	r3, [r0, #16]
  403182:	690c      	ldr	r4, [r1, #16]
  403184:	429c      	cmp	r4, r3
  403186:	4680      	mov	r8, r0
  403188:	f300 8083 	bgt.w	403292 <quorem+0x116>
  40318c:	3c01      	subs	r4, #1
  40318e:	f101 0714 	add.w	r7, r1, #20
  403192:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403196:	f100 0614 	add.w	r6, r0, #20
  40319a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40319e:	eb06 030e 	add.w	r3, r6, lr
  4031a2:	9301      	str	r3, [sp, #4]
  4031a4:	3501      	adds	r5, #1
  4031a6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  4031aa:	fbb3 f5f5 	udiv	r5, r3, r5
  4031ae:	eb07 090e 	add.w	r9, r7, lr
  4031b2:	2d00      	cmp	r5, #0
  4031b4:	d039      	beq.n	40322a <quorem+0xae>
  4031b6:	f04f 0a00 	mov.w	sl, #0
  4031ba:	4638      	mov	r0, r7
  4031bc:	46b4      	mov	ip, r6
  4031be:	46d3      	mov	fp, sl
  4031c0:	f850 2b04 	ldr.w	r2, [r0], #4
  4031c4:	b293      	uxth	r3, r2
  4031c6:	fb05 a303 	mla	r3, r5, r3, sl
  4031ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4031ce:	b29b      	uxth	r3, r3
  4031d0:	ebc3 030b 	rsb	r3, r3, fp
  4031d4:	0c12      	lsrs	r2, r2, #16
  4031d6:	f8bc b000 	ldrh.w	fp, [ip]
  4031da:	fb05 a202 	mla	r2, r5, r2, sl
  4031de:	fa13 f38b 	uxtah	r3, r3, fp
  4031e2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4031e6:	fa1f fb82 	uxth.w	fp, r2
  4031ea:	f8dc 2000 	ldr.w	r2, [ip]
  4031ee:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4031f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4031f6:	b29b      	uxth	r3, r3
  4031f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4031fc:	4581      	cmp	r9, r0
  4031fe:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403202:	f84c 3b04 	str.w	r3, [ip], #4
  403206:	d2db      	bcs.n	4031c0 <quorem+0x44>
  403208:	f856 300e 	ldr.w	r3, [r6, lr]
  40320c:	b96b      	cbnz	r3, 40322a <quorem+0xae>
  40320e:	9b01      	ldr	r3, [sp, #4]
  403210:	3b04      	subs	r3, #4
  403212:	429e      	cmp	r6, r3
  403214:	461a      	mov	r2, r3
  403216:	d302      	bcc.n	40321e <quorem+0xa2>
  403218:	f8c8 4010 	str.w	r4, [r8, #16]
  40321c:	e005      	b.n	40322a <quorem+0xae>
  40321e:	6812      	ldr	r2, [r2, #0]
  403220:	3b04      	subs	r3, #4
  403222:	2a00      	cmp	r2, #0
  403224:	d1f8      	bne.n	403218 <quorem+0x9c>
  403226:	3c01      	subs	r4, #1
  403228:	e7f3      	b.n	403212 <quorem+0x96>
  40322a:	4640      	mov	r0, r8
  40322c:	f001 fa31 	bl	404692 <__mcmp>
  403230:	2800      	cmp	r0, #0
  403232:	db2c      	blt.n	40328e <quorem+0x112>
  403234:	3501      	adds	r5, #1
  403236:	4630      	mov	r0, r6
  403238:	f04f 0e00 	mov.w	lr, #0
  40323c:	f857 1b04 	ldr.w	r1, [r7], #4
  403240:	f8d0 c000 	ldr.w	ip, [r0]
  403244:	b28a      	uxth	r2, r1
  403246:	ebc2 030e 	rsb	r3, r2, lr
  40324a:	0c09      	lsrs	r1, r1, #16
  40324c:	fa13 f38c 	uxtah	r3, r3, ip
  403250:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  403254:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403258:	b29b      	uxth	r3, r3
  40325a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40325e:	45b9      	cmp	r9, r7
  403260:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403264:	f840 3b04 	str.w	r3, [r0], #4
  403268:	d2e8      	bcs.n	40323c <quorem+0xc0>
  40326a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40326e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403272:	b962      	cbnz	r2, 40328e <quorem+0x112>
  403274:	3b04      	subs	r3, #4
  403276:	429e      	cmp	r6, r3
  403278:	461a      	mov	r2, r3
  40327a:	d302      	bcc.n	403282 <quorem+0x106>
  40327c:	f8c8 4010 	str.w	r4, [r8, #16]
  403280:	e005      	b.n	40328e <quorem+0x112>
  403282:	6812      	ldr	r2, [r2, #0]
  403284:	3b04      	subs	r3, #4
  403286:	2a00      	cmp	r2, #0
  403288:	d1f8      	bne.n	40327c <quorem+0x100>
  40328a:	3c01      	subs	r4, #1
  40328c:	e7f3      	b.n	403276 <quorem+0xfa>
  40328e:	4628      	mov	r0, r5
  403290:	e000      	b.n	403294 <quorem+0x118>
  403292:	2000      	movs	r0, #0
  403294:	b003      	add	sp, #12
  403296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40329a:	0000      	movs	r0, r0
  40329c:	0000      	movs	r0, r0
	...

004032a0 <_dtoa_r>:
  4032a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4032a6:	b095      	sub	sp, #84	; 0x54
  4032a8:	4682      	mov	sl, r0
  4032aa:	9c21      	ldr	r4, [sp, #132]	; 0x84
  4032ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4032b0:	b945      	cbnz	r5, 4032c4 <_dtoa_r+0x24>
  4032b2:	2010      	movs	r0, #16
  4032b4:	f000 ff7a 	bl	4041ac <malloc>
  4032b8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  4032bc:	6045      	str	r5, [r0, #4]
  4032be:	6085      	str	r5, [r0, #8]
  4032c0:	6005      	str	r5, [r0, #0]
  4032c2:	60c5      	str	r5, [r0, #12]
  4032c4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4032c8:	6819      	ldr	r1, [r3, #0]
  4032ca:	b159      	cbz	r1, 4032e4 <_dtoa_r+0x44>
  4032cc:	685a      	ldr	r2, [r3, #4]
  4032ce:	604a      	str	r2, [r1, #4]
  4032d0:	2301      	movs	r3, #1
  4032d2:	4093      	lsls	r3, r2
  4032d4:	608b      	str	r3, [r1, #8]
  4032d6:	4650      	mov	r0, sl
  4032d8:	f001 f802 	bl	4042e0 <_Bfree>
  4032dc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4032e0:	2200      	movs	r2, #0
  4032e2:	601a      	str	r2, [r3, #0]
  4032e4:	9b03      	ldr	r3, [sp, #12]
  4032e6:	4aa0      	ldr	r2, [pc, #640]	; (403568 <_dtoa_r+0x2c8>)
  4032e8:	2b00      	cmp	r3, #0
  4032ea:	bfbf      	itttt	lt
  4032ec:	2301      	movlt	r3, #1
  4032ee:	6023      	strlt	r3, [r4, #0]
  4032f0:	9b03      	ldrlt	r3, [sp, #12]
  4032f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4032f6:	bfb8      	it	lt
  4032f8:	9303      	strlt	r3, [sp, #12]
  4032fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4032fe:	bfa4      	itt	ge
  403300:	2300      	movge	r3, #0
  403302:	6023      	strge	r3, [r4, #0]
  403304:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  403308:	0d1b      	lsrs	r3, r3, #20
  40330a:	051b      	lsls	r3, r3, #20
  40330c:	4293      	cmp	r3, r2
  40330e:	d11d      	bne.n	40334c <_dtoa_r+0xac>
  403310:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403312:	f242 730f 	movw	r3, #9999	; 0x270f
  403316:	6013      	str	r3, [r2, #0]
  403318:	9b02      	ldr	r3, [sp, #8]
  40331a:	b943      	cbnz	r3, 40332e <_dtoa_r+0x8e>
  40331c:	4a93      	ldr	r2, [pc, #588]	; (40356c <_dtoa_r+0x2cc>)
  40331e:	4b94      	ldr	r3, [pc, #592]	; (403570 <_dtoa_r+0x2d0>)
  403320:	f3c8 0013 	ubfx	r0, r8, #0, #20
  403324:	2800      	cmp	r0, #0
  403326:	bf14      	ite	ne
  403328:	4618      	movne	r0, r3
  40332a:	4610      	moveq	r0, r2
  40332c:	e000      	b.n	403330 <_dtoa_r+0x90>
  40332e:	4890      	ldr	r0, [pc, #576]	; (403570 <_dtoa_r+0x2d0>)
  403330:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403332:	2b00      	cmp	r3, #0
  403334:	f000 854a 	beq.w	403dcc <_dtoa_r+0xb2c>
  403338:	78c3      	ldrb	r3, [r0, #3]
  40333a:	b113      	cbz	r3, 403342 <_dtoa_r+0xa2>
  40333c:	f100 0308 	add.w	r3, r0, #8
  403340:	e000      	b.n	403344 <_dtoa_r+0xa4>
  403342:	1cc3      	adds	r3, r0, #3
  403344:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403346:	6013      	str	r3, [r2, #0]
  403348:	f000 bd40 	b.w	403dcc <_dtoa_r+0xb2c>
  40334c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  403350:	2200      	movs	r2, #0
  403352:	2300      	movs	r3, #0
  403354:	4620      	mov	r0, r4
  403356:	4629      	mov	r1, r5
  403358:	f002 f960 	bl	40561c <__aeabi_dcmpeq>
  40335c:	4607      	mov	r7, r0
  40335e:	b158      	cbz	r0, 403378 <_dtoa_r+0xd8>
  403360:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403362:	2301      	movs	r3, #1
  403364:	6013      	str	r3, [r2, #0]
  403366:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403368:	2b00      	cmp	r3, #0
  40336a:	f000 8522 	beq.w	403db2 <_dtoa_r+0xb12>
  40336e:	4881      	ldr	r0, [pc, #516]	; (403574 <_dtoa_r+0x2d4>)
  403370:	6018      	str	r0, [r3, #0]
  403372:	3801      	subs	r0, #1
  403374:	f000 bd2a 	b.w	403dcc <_dtoa_r+0xb2c>
  403378:	ab12      	add	r3, sp, #72	; 0x48
  40337a:	9301      	str	r3, [sp, #4]
  40337c:	ab13      	add	r3, sp, #76	; 0x4c
  40337e:	9300      	str	r3, [sp, #0]
  403380:	4622      	mov	r2, r4
  403382:	462b      	mov	r3, r5
  403384:	4650      	mov	r0, sl
  403386:	f001 f9ff 	bl	404788 <__d2b>
  40338a:	f3c8 560a 	ubfx	r6, r8, #20, #11
  40338e:	9004      	str	r0, [sp, #16]
  403390:	b156      	cbz	r6, 4033a8 <_dtoa_r+0x108>
  403392:	f3c5 0313 	ubfx	r3, r5, #0, #20
  403396:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40339a:	4620      	mov	r0, r4
  40339c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4033a0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  4033a4:	9711      	str	r7, [sp, #68]	; 0x44
  4033a6:	e01d      	b.n	4033e4 <_dtoa_r+0x144>
  4033a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4033aa:	9e12      	ldr	r6, [sp, #72]	; 0x48
  4033ac:	441e      	add	r6, r3
  4033ae:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4033b2:	2b20      	cmp	r3, #32
  4033b4:	dd0a      	ble.n	4033cc <_dtoa_r+0x12c>
  4033b6:	9a02      	ldr	r2, [sp, #8]
  4033b8:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4033bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4033c0:	fa22 f000 	lsr.w	r0, r2, r0
  4033c4:	fa08 f303 	lsl.w	r3, r8, r3
  4033c8:	4318      	orrs	r0, r3
  4033ca:	e004      	b.n	4033d6 <_dtoa_r+0x136>
  4033cc:	f1c3 0020 	rsb	r0, r3, #32
  4033d0:	9b02      	ldr	r3, [sp, #8]
  4033d2:	fa03 f000 	lsl.w	r0, r3, r0
  4033d6:	f001 fe43 	bl	405060 <__aeabi_ui2d>
  4033da:	2301      	movs	r3, #1
  4033dc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4033e0:	3e01      	subs	r6, #1
  4033e2:	9311      	str	r3, [sp, #68]	; 0x44
  4033e4:	2200      	movs	r2, #0
  4033e6:	4b64      	ldr	r3, [pc, #400]	; (403578 <_dtoa_r+0x2d8>)
  4033e8:	f001 fcfc 	bl	404de4 <__aeabi_dsub>
  4033ec:	a358      	add	r3, pc, #352	; (adr r3, 403550 <_dtoa_r+0x2b0>)
  4033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4033f2:	f001 feab 	bl	40514c <__aeabi_dmul>
  4033f6:	a358      	add	r3, pc, #352	; (adr r3, 403558 <_dtoa_r+0x2b8>)
  4033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4033fc:	f001 fcf4 	bl	404de8 <__adddf3>
  403400:	4604      	mov	r4, r0
  403402:	4630      	mov	r0, r6
  403404:	460d      	mov	r5, r1
  403406:	f001 fe3b 	bl	405080 <__aeabi_i2d>
  40340a:	a355      	add	r3, pc, #340	; (adr r3, 403560 <_dtoa_r+0x2c0>)
  40340c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403410:	f001 fe9c 	bl	40514c <__aeabi_dmul>
  403414:	4602      	mov	r2, r0
  403416:	460b      	mov	r3, r1
  403418:	4620      	mov	r0, r4
  40341a:	4629      	mov	r1, r5
  40341c:	f001 fce4 	bl	404de8 <__adddf3>
  403420:	4604      	mov	r4, r0
  403422:	460d      	mov	r5, r1
  403424:	f002 f942 	bl	4056ac <__aeabi_d2iz>
  403428:	2200      	movs	r2, #0
  40342a:	4683      	mov	fp, r0
  40342c:	2300      	movs	r3, #0
  40342e:	4620      	mov	r0, r4
  403430:	4629      	mov	r1, r5
  403432:	f002 f8fd 	bl	405630 <__aeabi_dcmplt>
  403436:	b158      	cbz	r0, 403450 <_dtoa_r+0x1b0>
  403438:	4658      	mov	r0, fp
  40343a:	f001 fe21 	bl	405080 <__aeabi_i2d>
  40343e:	4602      	mov	r2, r0
  403440:	460b      	mov	r3, r1
  403442:	4620      	mov	r0, r4
  403444:	4629      	mov	r1, r5
  403446:	f002 f8e9 	bl	40561c <__aeabi_dcmpeq>
  40344a:	b908      	cbnz	r0, 403450 <_dtoa_r+0x1b0>
  40344c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403450:	f1bb 0f16 	cmp.w	fp, #22
  403454:	d80d      	bhi.n	403472 <_dtoa_r+0x1d2>
  403456:	4949      	ldr	r1, [pc, #292]	; (40357c <_dtoa_r+0x2dc>)
  403458:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40345c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403460:	e9d1 0100 	ldrd	r0, r1, [r1]
  403464:	f002 f902 	bl	40566c <__aeabi_dcmpgt>
  403468:	b130      	cbz	r0, 403478 <_dtoa_r+0x1d8>
  40346a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  40346e:	2300      	movs	r3, #0
  403470:	e000      	b.n	403474 <_dtoa_r+0x1d4>
  403472:	2301      	movs	r3, #1
  403474:	9310      	str	r3, [sp, #64]	; 0x40
  403476:	e000      	b.n	40347a <_dtoa_r+0x1da>
  403478:	9010      	str	r0, [sp, #64]	; 0x40
  40347a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40347c:	1b9e      	subs	r6, r3, r6
  40347e:	1e73      	subs	r3, r6, #1
  403480:	9307      	str	r3, [sp, #28]
  403482:	bf43      	ittte	mi
  403484:	f1c3 0800 	rsbmi	r8, r3, #0
  403488:	2300      	movmi	r3, #0
  40348a:	9307      	strmi	r3, [sp, #28]
  40348c:	f04f 0800 	movpl.w	r8, #0
  403490:	f1bb 0f00 	cmp.w	fp, #0
  403494:	db06      	blt.n	4034a4 <_dtoa_r+0x204>
  403496:	9b07      	ldr	r3, [sp, #28]
  403498:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  40349c:	445b      	add	r3, fp
  40349e:	9307      	str	r3, [sp, #28]
  4034a0:	2700      	movs	r7, #0
  4034a2:	e005      	b.n	4034b0 <_dtoa_r+0x210>
  4034a4:	2300      	movs	r3, #0
  4034a6:	ebcb 0808 	rsb	r8, fp, r8
  4034aa:	f1cb 0700 	rsb	r7, fp, #0
  4034ae:	930b      	str	r3, [sp, #44]	; 0x2c
  4034b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4034b2:	2b09      	cmp	r3, #9
  4034b4:	d827      	bhi.n	403506 <_dtoa_r+0x266>
  4034b6:	2b05      	cmp	r3, #5
  4034b8:	bfc4      	itt	gt
  4034ba:	3b04      	subgt	r3, #4
  4034bc:	931e      	strgt	r3, [sp, #120]	; 0x78
  4034be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4034c0:	f1a3 0302 	sub.w	r3, r3, #2
  4034c4:	bfcc      	ite	gt
  4034c6:	2500      	movgt	r5, #0
  4034c8:	2501      	movle	r5, #1
  4034ca:	2b03      	cmp	r3, #3
  4034cc:	d820      	bhi.n	403510 <_dtoa_r+0x270>
  4034ce:	e8df f003 	tbb	[pc, r3]
  4034d2:	0e06      	.short	0x0e06
  4034d4:	0402      	.short	0x0402
  4034d6:	2301      	movs	r3, #1
  4034d8:	e002      	b.n	4034e0 <_dtoa_r+0x240>
  4034da:	2301      	movs	r3, #1
  4034dc:	e008      	b.n	4034f0 <_dtoa_r+0x250>
  4034de:	2300      	movs	r3, #0
  4034e0:	930a      	str	r3, [sp, #40]	; 0x28
  4034e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4034e4:	2b00      	cmp	r3, #0
  4034e6:	dd1d      	ble.n	403524 <_dtoa_r+0x284>
  4034e8:	4699      	mov	r9, r3
  4034ea:	9305      	str	r3, [sp, #20]
  4034ec:	e021      	b.n	403532 <_dtoa_r+0x292>
  4034ee:	2300      	movs	r3, #0
  4034f0:	930a      	str	r3, [sp, #40]	; 0x28
  4034f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4034f4:	eb0b 0903 	add.w	r9, fp, r3
  4034f8:	f109 0301 	add.w	r3, r9, #1
  4034fc:	2b01      	cmp	r3, #1
  4034fe:	9305      	str	r3, [sp, #20]
  403500:	bfb8      	it	lt
  403502:	2301      	movlt	r3, #1
  403504:	e015      	b.n	403532 <_dtoa_r+0x292>
  403506:	2501      	movs	r5, #1
  403508:	2300      	movs	r3, #0
  40350a:	931e      	str	r3, [sp, #120]	; 0x78
  40350c:	950a      	str	r5, [sp, #40]	; 0x28
  40350e:	e001      	b.n	403514 <_dtoa_r+0x274>
  403510:	2301      	movs	r3, #1
  403512:	930a      	str	r3, [sp, #40]	; 0x28
  403514:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  403518:	2200      	movs	r2, #0
  40351a:	f8cd 9014 	str.w	r9, [sp, #20]
  40351e:	2312      	movs	r3, #18
  403520:	921f      	str	r2, [sp, #124]	; 0x7c
  403522:	e006      	b.n	403532 <_dtoa_r+0x292>
  403524:	f04f 0901 	mov.w	r9, #1
  403528:	f8cd 9014 	str.w	r9, [sp, #20]
  40352c:	464b      	mov	r3, r9
  40352e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  403532:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  403536:	2200      	movs	r2, #0
  403538:	6062      	str	r2, [r4, #4]
  40353a:	2104      	movs	r1, #4
  40353c:	f101 0214 	add.w	r2, r1, #20
  403540:	429a      	cmp	r2, r3
  403542:	d81d      	bhi.n	403580 <_dtoa_r+0x2e0>
  403544:	6862      	ldr	r2, [r4, #4]
  403546:	3201      	adds	r2, #1
  403548:	6062      	str	r2, [r4, #4]
  40354a:	0049      	lsls	r1, r1, #1
  40354c:	e7f6      	b.n	40353c <_dtoa_r+0x29c>
  40354e:	bf00      	nop
  403550:	636f4361 	.word	0x636f4361
  403554:	3fd287a7 	.word	0x3fd287a7
  403558:	8b60c8b3 	.word	0x8b60c8b3
  40355c:	3fc68a28 	.word	0x3fc68a28
  403560:	509f79fb 	.word	0x509f79fb
  403564:	3fd34413 	.word	0x3fd34413
  403568:	7ff00000 	.word	0x7ff00000
  40356c:	00406068 	.word	0x00406068
  403570:	00406071 	.word	0x00406071
  403574:	00406045 	.word	0x00406045
  403578:	3ff80000 	.word	0x3ff80000
  40357c:	004060d8 	.word	0x004060d8
  403580:	6861      	ldr	r1, [r4, #4]
  403582:	4650      	mov	r0, sl
  403584:	f000 fe77 	bl	404276 <_Balloc>
  403588:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40358c:	6020      	str	r0, [r4, #0]
  40358e:	681b      	ldr	r3, [r3, #0]
  403590:	9306      	str	r3, [sp, #24]
  403592:	9b05      	ldr	r3, [sp, #20]
  403594:	2b0e      	cmp	r3, #14
  403596:	f200 815d 	bhi.w	403854 <_dtoa_r+0x5b4>
  40359a:	2d00      	cmp	r5, #0
  40359c:	f000 815a 	beq.w	403854 <_dtoa_r+0x5b4>
  4035a0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4035a4:	f1bb 0f00 	cmp.w	fp, #0
  4035a8:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  4035ac:	dd31      	ble.n	403612 <_dtoa_r+0x372>
  4035ae:	4aa0      	ldr	r2, [pc, #640]	; (403830 <_dtoa_r+0x590>)
  4035b0:	f00b 030f 	and.w	r3, fp, #15
  4035b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4035b8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4035bc:	ea4f 152b 	mov.w	r5, fp, asr #4
  4035c0:	06e8      	lsls	r0, r5, #27
  4035c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
  4035c6:	d50c      	bpl.n	4035e2 <_dtoa_r+0x342>
  4035c8:	4b9a      	ldr	r3, [pc, #616]	; (403834 <_dtoa_r+0x594>)
  4035ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4035ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4035d2:	f001 fee5 	bl	4053a0 <__aeabi_ddiv>
  4035d6:	f005 050f 	and.w	r5, r5, #15
  4035da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4035de:	2403      	movs	r4, #3
  4035e0:	e000      	b.n	4035e4 <_dtoa_r+0x344>
  4035e2:	2402      	movs	r4, #2
  4035e4:	4e93      	ldr	r6, [pc, #588]	; (403834 <_dtoa_r+0x594>)
  4035e6:	b16d      	cbz	r5, 403604 <_dtoa_r+0x364>
  4035e8:	07e9      	lsls	r1, r5, #31
  4035ea:	d508      	bpl.n	4035fe <_dtoa_r+0x35e>
  4035ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4035f0:	e9d6 2300 	ldrd	r2, r3, [r6]
  4035f4:	f001 fdaa 	bl	40514c <__aeabi_dmul>
  4035f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4035fc:	3401      	adds	r4, #1
  4035fe:	106d      	asrs	r5, r5, #1
  403600:	3608      	adds	r6, #8
  403602:	e7f0      	b.n	4035e6 <_dtoa_r+0x346>
  403604:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  403608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40360c:	f001 fec8 	bl	4053a0 <__aeabi_ddiv>
  403610:	e020      	b.n	403654 <_dtoa_r+0x3b4>
  403612:	f1cb 0500 	rsb	r5, fp, #0
  403616:	b305      	cbz	r5, 40365a <_dtoa_r+0x3ba>
  403618:	4b85      	ldr	r3, [pc, #532]	; (403830 <_dtoa_r+0x590>)
  40361a:	4e86      	ldr	r6, [pc, #536]	; (403834 <_dtoa_r+0x594>)
  40361c:	f005 020f 	and.w	r2, r5, #15
  403620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403624:	e9d3 2300 	ldrd	r2, r3, [r3]
  403628:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40362c:	f001 fd8e 	bl	40514c <__aeabi_dmul>
  403630:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403634:	112d      	asrs	r5, r5, #4
  403636:	2300      	movs	r3, #0
  403638:	2402      	movs	r4, #2
  40363a:	b155      	cbz	r5, 403652 <_dtoa_r+0x3b2>
  40363c:	07ea      	lsls	r2, r5, #31
  40363e:	d505      	bpl.n	40364c <_dtoa_r+0x3ac>
  403640:	e9d6 2300 	ldrd	r2, r3, [r6]
  403644:	f001 fd82 	bl	40514c <__aeabi_dmul>
  403648:	3401      	adds	r4, #1
  40364a:	2301      	movs	r3, #1
  40364c:	106d      	asrs	r5, r5, #1
  40364e:	3608      	adds	r6, #8
  403650:	e7f3      	b.n	40363a <_dtoa_r+0x39a>
  403652:	b11b      	cbz	r3, 40365c <_dtoa_r+0x3bc>
  403654:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403658:	e000      	b.n	40365c <_dtoa_r+0x3bc>
  40365a:	2402      	movs	r4, #2
  40365c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40365e:	b1e3      	cbz	r3, 40369a <_dtoa_r+0x3fa>
  403660:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  403664:	2200      	movs	r2, #0
  403666:	4b74      	ldr	r3, [pc, #464]	; (403838 <_dtoa_r+0x598>)
  403668:	4628      	mov	r0, r5
  40366a:	4631      	mov	r1, r6
  40366c:	f001 ffe0 	bl	405630 <__aeabi_dcmplt>
  403670:	b198      	cbz	r0, 40369a <_dtoa_r+0x3fa>
  403672:	9b05      	ldr	r3, [sp, #20]
  403674:	b18b      	cbz	r3, 40369a <_dtoa_r+0x3fa>
  403676:	f1b9 0f00 	cmp.w	r9, #0
  40367a:	f340 80e7 	ble.w	40384c <_dtoa_r+0x5ac>
  40367e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  403682:	9308      	str	r3, [sp, #32]
  403684:	4631      	mov	r1, r6
  403686:	2200      	movs	r2, #0
  403688:	4b6c      	ldr	r3, [pc, #432]	; (40383c <_dtoa_r+0x59c>)
  40368a:	4628      	mov	r0, r5
  40368c:	f001 fd5e 	bl	40514c <__aeabi_dmul>
  403690:	3401      	adds	r4, #1
  403692:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403696:	464e      	mov	r6, r9
  403698:	e002      	b.n	4036a0 <_dtoa_r+0x400>
  40369a:	9e05      	ldr	r6, [sp, #20]
  40369c:	f8cd b020 	str.w	fp, [sp, #32]
  4036a0:	4620      	mov	r0, r4
  4036a2:	f001 fced 	bl	405080 <__aeabi_i2d>
  4036a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4036aa:	f001 fd4f 	bl	40514c <__aeabi_dmul>
  4036ae:	4b64      	ldr	r3, [pc, #400]	; (403840 <_dtoa_r+0x5a0>)
  4036b0:	2200      	movs	r2, #0
  4036b2:	f001 fb99 	bl	404de8 <__adddf3>
  4036b6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  4036ba:	4604      	mov	r4, r0
  4036bc:	930c      	str	r3, [sp, #48]	; 0x30
  4036be:	461d      	mov	r5, r3
  4036c0:	b9d6      	cbnz	r6, 4036f8 <_dtoa_r+0x458>
  4036c2:	2200      	movs	r2, #0
  4036c4:	4b5f      	ldr	r3, [pc, #380]	; (403844 <_dtoa_r+0x5a4>)
  4036c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4036ca:	f001 fb8b 	bl	404de4 <__aeabi_dsub>
  4036ce:	4622      	mov	r2, r4
  4036d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4036d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4036d6:	f001 ffc9 	bl	40566c <__aeabi_dcmpgt>
  4036da:	2800      	cmp	r0, #0
  4036dc:	f040 8240 	bne.w	403b60 <_dtoa_r+0x8c0>
  4036e0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4036e2:	4622      	mov	r2, r4
  4036e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4036e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4036ec:	f001 ffa0 	bl	405630 <__aeabi_dcmplt>
  4036f0:	2800      	cmp	r0, #0
  4036f2:	f040 822c 	bne.w	403b4e <_dtoa_r+0x8ae>
  4036f6:	e0a9      	b.n	40384c <_dtoa_r+0x5ac>
  4036f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4036fa:	4b4d      	ldr	r3, [pc, #308]	; (403830 <_dtoa_r+0x590>)
  4036fc:	1e71      	subs	r1, r6, #1
  4036fe:	2a00      	cmp	r2, #0
  403700:	d049      	beq.n	403796 <_dtoa_r+0x4f6>
  403702:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403706:	e9d3 2300 	ldrd	r2, r3, [r3]
  40370a:	2000      	movs	r0, #0
  40370c:	494e      	ldr	r1, [pc, #312]	; (403848 <_dtoa_r+0x5a8>)
  40370e:	f001 fe47 	bl	4053a0 <__aeabi_ddiv>
  403712:	4622      	mov	r2, r4
  403714:	462b      	mov	r3, r5
  403716:	f001 fb65 	bl	404de4 <__aeabi_dsub>
  40371a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40371e:	9c06      	ldr	r4, [sp, #24]
  403720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403724:	f001 ffc2 	bl	4056ac <__aeabi_d2iz>
  403728:	4605      	mov	r5, r0
  40372a:	f001 fca9 	bl	405080 <__aeabi_i2d>
  40372e:	4602      	mov	r2, r0
  403730:	460b      	mov	r3, r1
  403732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403736:	f001 fb55 	bl	404de4 <__aeabi_dsub>
  40373a:	3530      	adds	r5, #48	; 0x30
  40373c:	f804 5b01 	strb.w	r5, [r4], #1
  403740:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403744:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403748:	f001 ff72 	bl	405630 <__aeabi_dcmplt>
  40374c:	2800      	cmp	r0, #0
  40374e:	f040 8320 	bne.w	403d92 <_dtoa_r+0xaf2>
  403752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403756:	2000      	movs	r0, #0
  403758:	4937      	ldr	r1, [pc, #220]	; (403838 <_dtoa_r+0x598>)
  40375a:	f001 fb43 	bl	404de4 <__aeabi_dsub>
  40375e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403762:	f001 ff65 	bl	405630 <__aeabi_dcmplt>
  403766:	2800      	cmp	r0, #0
  403768:	f040 80d2 	bne.w	403910 <_dtoa_r+0x670>
  40376c:	9b06      	ldr	r3, [sp, #24]
  40376e:	1ae3      	subs	r3, r4, r3
  403770:	42b3      	cmp	r3, r6
  403772:	da6b      	bge.n	40384c <_dtoa_r+0x5ac>
  403774:	2200      	movs	r2, #0
  403776:	4b31      	ldr	r3, [pc, #196]	; (40383c <_dtoa_r+0x59c>)
  403778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40377c:	f001 fce6 	bl	40514c <__aeabi_dmul>
  403780:	2200      	movs	r2, #0
  403782:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403786:	4b2d      	ldr	r3, [pc, #180]	; (40383c <_dtoa_r+0x59c>)
  403788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40378c:	f001 fcde 	bl	40514c <__aeabi_dmul>
  403790:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403794:	e7c4      	b.n	403720 <_dtoa_r+0x480>
  403796:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  40379a:	4622      	mov	r2, r4
  40379c:	462b      	mov	r3, r5
  40379e:	e9d1 0100 	ldrd	r0, r1, [r1]
  4037a2:	f001 fcd3 	bl	40514c <__aeabi_dmul>
  4037a6:	9b06      	ldr	r3, [sp, #24]
  4037a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4037ac:	199c      	adds	r4, r3, r6
  4037ae:	461d      	mov	r5, r3
  4037b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4037b4:	f001 ff7a 	bl	4056ac <__aeabi_d2iz>
  4037b8:	4606      	mov	r6, r0
  4037ba:	f001 fc61 	bl	405080 <__aeabi_i2d>
  4037be:	3630      	adds	r6, #48	; 0x30
  4037c0:	4602      	mov	r2, r0
  4037c2:	460b      	mov	r3, r1
  4037c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4037c8:	f001 fb0c 	bl	404de4 <__aeabi_dsub>
  4037cc:	f805 6b01 	strb.w	r6, [r5], #1
  4037d0:	42ac      	cmp	r4, r5
  4037d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4037d6:	f04f 0200 	mov.w	r2, #0
  4037da:	d123      	bne.n	403824 <_dtoa_r+0x584>
  4037dc:	4b1a      	ldr	r3, [pc, #104]	; (403848 <_dtoa_r+0x5a8>)
  4037de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4037e2:	f001 fb01 	bl	404de8 <__adddf3>
  4037e6:	4602      	mov	r2, r0
  4037e8:	460b      	mov	r3, r1
  4037ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4037ee:	f001 ff3d 	bl	40566c <__aeabi_dcmpgt>
  4037f2:	2800      	cmp	r0, #0
  4037f4:	f040 808c 	bne.w	403910 <_dtoa_r+0x670>
  4037f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4037fc:	2000      	movs	r0, #0
  4037fe:	4912      	ldr	r1, [pc, #72]	; (403848 <_dtoa_r+0x5a8>)
  403800:	f001 faf0 	bl	404de4 <__aeabi_dsub>
  403804:	4602      	mov	r2, r0
  403806:	460b      	mov	r3, r1
  403808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40380c:	f001 ff10 	bl	405630 <__aeabi_dcmplt>
  403810:	b1e0      	cbz	r0, 40384c <_dtoa_r+0x5ac>
  403812:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403816:	2b30      	cmp	r3, #48	; 0x30
  403818:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  40381c:	f040 82b9 	bne.w	403d92 <_dtoa_r+0xaf2>
  403820:	4614      	mov	r4, r2
  403822:	e7f6      	b.n	403812 <_dtoa_r+0x572>
  403824:	4b05      	ldr	r3, [pc, #20]	; (40383c <_dtoa_r+0x59c>)
  403826:	f001 fc91 	bl	40514c <__aeabi_dmul>
  40382a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40382e:	e7bf      	b.n	4037b0 <_dtoa_r+0x510>
  403830:	004060d8 	.word	0x004060d8
  403834:	004061a0 	.word	0x004061a0
  403838:	3ff00000 	.word	0x3ff00000
  40383c:	40240000 	.word	0x40240000
  403840:	401c0000 	.word	0x401c0000
  403844:	40140000 	.word	0x40140000
  403848:	3fe00000 	.word	0x3fe00000
  40384c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  403850:	e9cd 3402 	strd	r3, r4, [sp, #8]
  403854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403856:	2b00      	cmp	r3, #0
  403858:	db7d      	blt.n	403956 <_dtoa_r+0x6b6>
  40385a:	f1bb 0f0e 	cmp.w	fp, #14
  40385e:	dc7a      	bgt.n	403956 <_dtoa_r+0x6b6>
  403860:	4bab      	ldr	r3, [pc, #684]	; (403b10 <_dtoa_r+0x870>)
  403862:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403866:	e9d3 6700 	ldrd	r6, r7, [r3]
  40386a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40386c:	2b00      	cmp	r3, #0
  40386e:	da14      	bge.n	40389a <_dtoa_r+0x5fa>
  403870:	9b05      	ldr	r3, [sp, #20]
  403872:	2b00      	cmp	r3, #0
  403874:	dc11      	bgt.n	40389a <_dtoa_r+0x5fa>
  403876:	f040 816c 	bne.w	403b52 <_dtoa_r+0x8b2>
  40387a:	2200      	movs	r2, #0
  40387c:	4ba5      	ldr	r3, [pc, #660]	; (403b14 <_dtoa_r+0x874>)
  40387e:	4630      	mov	r0, r6
  403880:	4639      	mov	r1, r7
  403882:	f001 fc63 	bl	40514c <__aeabi_dmul>
  403886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40388a:	f001 fee5 	bl	405658 <__aeabi_dcmpge>
  40388e:	9d05      	ldr	r5, [sp, #20]
  403890:	462e      	mov	r6, r5
  403892:	2800      	cmp	r0, #0
  403894:	f040 815f 	bne.w	403b56 <_dtoa_r+0x8b6>
  403898:	e165      	b.n	403b66 <_dtoa_r+0x8c6>
  40389a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  40389e:	9c06      	ldr	r4, [sp, #24]
  4038a0:	4632      	mov	r2, r6
  4038a2:	463b      	mov	r3, r7
  4038a4:	4640      	mov	r0, r8
  4038a6:	4649      	mov	r1, r9
  4038a8:	f001 fd7a 	bl	4053a0 <__aeabi_ddiv>
  4038ac:	f001 fefe 	bl	4056ac <__aeabi_d2iz>
  4038b0:	4605      	mov	r5, r0
  4038b2:	f001 fbe5 	bl	405080 <__aeabi_i2d>
  4038b6:	4632      	mov	r2, r6
  4038b8:	463b      	mov	r3, r7
  4038ba:	f001 fc47 	bl	40514c <__aeabi_dmul>
  4038be:	460b      	mov	r3, r1
  4038c0:	4602      	mov	r2, r0
  4038c2:	4649      	mov	r1, r9
  4038c4:	4640      	mov	r0, r8
  4038c6:	f001 fa8d 	bl	404de4 <__aeabi_dsub>
  4038ca:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  4038ce:	9b06      	ldr	r3, [sp, #24]
  4038d0:	f804 eb01 	strb.w	lr, [r4], #1
  4038d4:	ebc3 0e04 	rsb	lr, r3, r4
  4038d8:	9b05      	ldr	r3, [sp, #20]
  4038da:	4573      	cmp	r3, lr
  4038dc:	d12e      	bne.n	40393c <_dtoa_r+0x69c>
  4038de:	4602      	mov	r2, r0
  4038e0:	460b      	mov	r3, r1
  4038e2:	f001 fa81 	bl	404de8 <__adddf3>
  4038e6:	4680      	mov	r8, r0
  4038e8:	4689      	mov	r9, r1
  4038ea:	4602      	mov	r2, r0
  4038ec:	460b      	mov	r3, r1
  4038ee:	4630      	mov	r0, r6
  4038f0:	4639      	mov	r1, r7
  4038f2:	f001 fe9d 	bl	405630 <__aeabi_dcmplt>
  4038f6:	b978      	cbnz	r0, 403918 <_dtoa_r+0x678>
  4038f8:	4642      	mov	r2, r8
  4038fa:	464b      	mov	r3, r9
  4038fc:	4630      	mov	r0, r6
  4038fe:	4639      	mov	r1, r7
  403900:	f001 fe8c 	bl	40561c <__aeabi_dcmpeq>
  403904:	2800      	cmp	r0, #0
  403906:	f000 8246 	beq.w	403d96 <_dtoa_r+0xaf6>
  40390a:	07eb      	lsls	r3, r5, #31
  40390c:	d404      	bmi.n	403918 <_dtoa_r+0x678>
  40390e:	e242      	b.n	403d96 <_dtoa_r+0xaf6>
  403910:	f8dd b020 	ldr.w	fp, [sp, #32]
  403914:	e000      	b.n	403918 <_dtoa_r+0x678>
  403916:	461c      	mov	r4, r3
  403918:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  40391c:	2a39      	cmp	r2, #57	; 0x39
  40391e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  403922:	d107      	bne.n	403934 <_dtoa_r+0x694>
  403924:	9a06      	ldr	r2, [sp, #24]
  403926:	429a      	cmp	r2, r3
  403928:	d1f5      	bne.n	403916 <_dtoa_r+0x676>
  40392a:	9906      	ldr	r1, [sp, #24]
  40392c:	2230      	movs	r2, #48	; 0x30
  40392e:	f10b 0b01 	add.w	fp, fp, #1
  403932:	700a      	strb	r2, [r1, #0]
  403934:	781a      	ldrb	r2, [r3, #0]
  403936:	3201      	adds	r2, #1
  403938:	701a      	strb	r2, [r3, #0]
  40393a:	e22c      	b.n	403d96 <_dtoa_r+0xaf6>
  40393c:	2200      	movs	r2, #0
  40393e:	4b76      	ldr	r3, [pc, #472]	; (403b18 <_dtoa_r+0x878>)
  403940:	f001 fc04 	bl	40514c <__aeabi_dmul>
  403944:	2200      	movs	r2, #0
  403946:	2300      	movs	r3, #0
  403948:	4680      	mov	r8, r0
  40394a:	4689      	mov	r9, r1
  40394c:	f001 fe66 	bl	40561c <__aeabi_dcmpeq>
  403950:	2800      	cmp	r0, #0
  403952:	d0a5      	beq.n	4038a0 <_dtoa_r+0x600>
  403954:	e21f      	b.n	403d96 <_dtoa_r+0xaf6>
  403956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403958:	2a00      	cmp	r2, #0
  40395a:	d02b      	beq.n	4039b4 <_dtoa_r+0x714>
  40395c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40395e:	2a01      	cmp	r2, #1
  403960:	dc0a      	bgt.n	403978 <_dtoa_r+0x6d8>
  403962:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403964:	b112      	cbz	r2, 40396c <_dtoa_r+0x6cc>
  403966:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40396a:	e002      	b.n	403972 <_dtoa_r+0x6d2>
  40396c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40396e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403972:	463d      	mov	r5, r7
  403974:	4644      	mov	r4, r8
  403976:	e013      	b.n	4039a0 <_dtoa_r+0x700>
  403978:	9b05      	ldr	r3, [sp, #20]
  40397a:	1e5d      	subs	r5, r3, #1
  40397c:	42af      	cmp	r7, r5
  40397e:	bfbf      	itttt	lt
  403980:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  403982:	1bea      	sublt	r2, r5, r7
  403984:	189b      	addlt	r3, r3, r2
  403986:	930b      	strlt	r3, [sp, #44]	; 0x2c
  403988:	9b05      	ldr	r3, [sp, #20]
  40398a:	bfb6      	itet	lt
  40398c:	462f      	movlt	r7, r5
  40398e:	1b7d      	subge	r5, r7, r5
  403990:	2500      	movlt	r5, #0
  403992:	2b00      	cmp	r3, #0
  403994:	bfab      	itete	ge
  403996:	9b05      	ldrge	r3, [sp, #20]
  403998:	ebc3 0408 	rsblt	r4, r3, r8
  40399c:	4644      	movge	r4, r8
  40399e:	2300      	movlt	r3, #0
  4039a0:	9a07      	ldr	r2, [sp, #28]
  4039a2:	2101      	movs	r1, #1
  4039a4:	441a      	add	r2, r3
  4039a6:	4650      	mov	r0, sl
  4039a8:	4498      	add	r8, r3
  4039aa:	9207      	str	r2, [sp, #28]
  4039ac:	f000 fd37 	bl	40441e <__i2b>
  4039b0:	4606      	mov	r6, r0
  4039b2:	e002      	b.n	4039ba <_dtoa_r+0x71a>
  4039b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4039b6:	463d      	mov	r5, r7
  4039b8:	4644      	mov	r4, r8
  4039ba:	b15c      	cbz	r4, 4039d4 <_dtoa_r+0x734>
  4039bc:	9b07      	ldr	r3, [sp, #28]
  4039be:	2b00      	cmp	r3, #0
  4039c0:	dd08      	ble.n	4039d4 <_dtoa_r+0x734>
  4039c2:	42a3      	cmp	r3, r4
  4039c4:	9a07      	ldr	r2, [sp, #28]
  4039c6:	bfa8      	it	ge
  4039c8:	4623      	movge	r3, r4
  4039ca:	ebc3 0808 	rsb	r8, r3, r8
  4039ce:	1ae4      	subs	r4, r4, r3
  4039d0:	1ad3      	subs	r3, r2, r3
  4039d2:	9307      	str	r3, [sp, #28]
  4039d4:	2f00      	cmp	r7, #0
  4039d6:	dd1d      	ble.n	403a14 <_dtoa_r+0x774>
  4039d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039da:	b1ab      	cbz	r3, 403a08 <_dtoa_r+0x768>
  4039dc:	b18d      	cbz	r5, 403a02 <_dtoa_r+0x762>
  4039de:	4631      	mov	r1, r6
  4039e0:	462a      	mov	r2, r5
  4039e2:	4650      	mov	r0, sl
  4039e4:	f000 fdb6 	bl	404554 <__pow5mult>
  4039e8:	9a04      	ldr	r2, [sp, #16]
  4039ea:	4601      	mov	r1, r0
  4039ec:	4606      	mov	r6, r0
  4039ee:	4650      	mov	r0, sl
  4039f0:	f000 fd1e 	bl	404430 <__multiply>
  4039f4:	9904      	ldr	r1, [sp, #16]
  4039f6:	9008      	str	r0, [sp, #32]
  4039f8:	4650      	mov	r0, sl
  4039fa:	f000 fc71 	bl	4042e0 <_Bfree>
  4039fe:	9b08      	ldr	r3, [sp, #32]
  403a00:	9304      	str	r3, [sp, #16]
  403a02:	1b7a      	subs	r2, r7, r5
  403a04:	d006      	beq.n	403a14 <_dtoa_r+0x774>
  403a06:	e000      	b.n	403a0a <_dtoa_r+0x76a>
  403a08:	463a      	mov	r2, r7
  403a0a:	9904      	ldr	r1, [sp, #16]
  403a0c:	4650      	mov	r0, sl
  403a0e:	f000 fda1 	bl	404554 <__pow5mult>
  403a12:	9004      	str	r0, [sp, #16]
  403a14:	2101      	movs	r1, #1
  403a16:	4650      	mov	r0, sl
  403a18:	f000 fd01 	bl	40441e <__i2b>
  403a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403a1e:	4605      	mov	r5, r0
  403a20:	b35b      	cbz	r3, 403a7a <_dtoa_r+0x7da>
  403a22:	461a      	mov	r2, r3
  403a24:	4601      	mov	r1, r0
  403a26:	4650      	mov	r0, sl
  403a28:	f000 fd94 	bl	404554 <__pow5mult>
  403a2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403a2e:	2b01      	cmp	r3, #1
  403a30:	4605      	mov	r5, r0
  403a32:	dc18      	bgt.n	403a66 <_dtoa_r+0x7c6>
  403a34:	9b02      	ldr	r3, [sp, #8]
  403a36:	b983      	cbnz	r3, 403a5a <_dtoa_r+0x7ba>
  403a38:	9b03      	ldr	r3, [sp, #12]
  403a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403a3e:	b973      	cbnz	r3, 403a5e <_dtoa_r+0x7be>
  403a40:	9b03      	ldr	r3, [sp, #12]
  403a42:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  403a46:	0d3f      	lsrs	r7, r7, #20
  403a48:	053f      	lsls	r7, r7, #20
  403a4a:	b14f      	cbz	r7, 403a60 <_dtoa_r+0x7c0>
  403a4c:	9b07      	ldr	r3, [sp, #28]
  403a4e:	3301      	adds	r3, #1
  403a50:	f108 0801 	add.w	r8, r8, #1
  403a54:	9307      	str	r3, [sp, #28]
  403a56:	2701      	movs	r7, #1
  403a58:	e002      	b.n	403a60 <_dtoa_r+0x7c0>
  403a5a:	2700      	movs	r7, #0
  403a5c:	e000      	b.n	403a60 <_dtoa_r+0x7c0>
  403a5e:	9f02      	ldr	r7, [sp, #8]
  403a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403a62:	b173      	cbz	r3, 403a82 <_dtoa_r+0x7e2>
  403a64:	e000      	b.n	403a68 <_dtoa_r+0x7c8>
  403a66:	2700      	movs	r7, #0
  403a68:	692b      	ldr	r3, [r5, #16]
  403a6a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  403a6e:	6918      	ldr	r0, [r3, #16]
  403a70:	f000 fc88 	bl	404384 <__hi0bits>
  403a74:	f1c0 0020 	rsb	r0, r0, #32
  403a78:	e004      	b.n	403a84 <_dtoa_r+0x7e4>
  403a7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403a7c:	2b01      	cmp	r3, #1
  403a7e:	ddd9      	ble.n	403a34 <_dtoa_r+0x794>
  403a80:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  403a82:	2001      	movs	r0, #1
  403a84:	9b07      	ldr	r3, [sp, #28]
  403a86:	4418      	add	r0, r3
  403a88:	f010 001f 	ands.w	r0, r0, #31
  403a8c:	d008      	beq.n	403aa0 <_dtoa_r+0x800>
  403a8e:	f1c0 0320 	rsb	r3, r0, #32
  403a92:	2b04      	cmp	r3, #4
  403a94:	dd02      	ble.n	403a9c <_dtoa_r+0x7fc>
  403a96:	f1c0 001c 	rsb	r0, r0, #28
  403a9a:	e002      	b.n	403aa2 <_dtoa_r+0x802>
  403a9c:	d006      	beq.n	403aac <_dtoa_r+0x80c>
  403a9e:	4618      	mov	r0, r3
  403aa0:	301c      	adds	r0, #28
  403aa2:	9b07      	ldr	r3, [sp, #28]
  403aa4:	4403      	add	r3, r0
  403aa6:	4480      	add	r8, r0
  403aa8:	4404      	add	r4, r0
  403aaa:	9307      	str	r3, [sp, #28]
  403aac:	f1b8 0f00 	cmp.w	r8, #0
  403ab0:	dd05      	ble.n	403abe <_dtoa_r+0x81e>
  403ab2:	4642      	mov	r2, r8
  403ab4:	9904      	ldr	r1, [sp, #16]
  403ab6:	4650      	mov	r0, sl
  403ab8:	f000 fd9a 	bl	4045f0 <__lshift>
  403abc:	9004      	str	r0, [sp, #16]
  403abe:	9b07      	ldr	r3, [sp, #28]
  403ac0:	2b00      	cmp	r3, #0
  403ac2:	dd05      	ble.n	403ad0 <_dtoa_r+0x830>
  403ac4:	4629      	mov	r1, r5
  403ac6:	461a      	mov	r2, r3
  403ac8:	4650      	mov	r0, sl
  403aca:	f000 fd91 	bl	4045f0 <__lshift>
  403ace:	4605      	mov	r5, r0
  403ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403ad2:	b31b      	cbz	r3, 403b1c <_dtoa_r+0x87c>
  403ad4:	4629      	mov	r1, r5
  403ad6:	9804      	ldr	r0, [sp, #16]
  403ad8:	f000 fddb 	bl	404692 <__mcmp>
  403adc:	2800      	cmp	r0, #0
  403ade:	da1d      	bge.n	403b1c <_dtoa_r+0x87c>
  403ae0:	2300      	movs	r3, #0
  403ae2:	220a      	movs	r2, #10
  403ae4:	9904      	ldr	r1, [sp, #16]
  403ae6:	4650      	mov	r0, sl
  403ae8:	f000 fc11 	bl	40430e <__multadd>
  403aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403aee:	9004      	str	r0, [sp, #16]
  403af0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403af4:	2b00      	cmp	r3, #0
  403af6:	f000 8160 	beq.w	403dba <_dtoa_r+0xb1a>
  403afa:	4631      	mov	r1, r6
  403afc:	2300      	movs	r3, #0
  403afe:	220a      	movs	r2, #10
  403b00:	4650      	mov	r0, sl
  403b02:	f000 fc04 	bl	40430e <__multadd>
  403b06:	f1b9 0f00 	cmp.w	r9, #0
  403b0a:	4606      	mov	r6, r0
  403b0c:	dc3e      	bgt.n	403b8c <_dtoa_r+0x8ec>
  403b0e:	e03a      	b.n	403b86 <_dtoa_r+0x8e6>
  403b10:	004060d8 	.word	0x004060d8
  403b14:	40140000 	.word	0x40140000
  403b18:	40240000 	.word	0x40240000
  403b1c:	9b05      	ldr	r3, [sp, #20]
  403b1e:	2b00      	cmp	r3, #0
  403b20:	dc2b      	bgt.n	403b7a <_dtoa_r+0x8da>
  403b22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403b24:	2b02      	cmp	r3, #2
  403b26:	dd28      	ble.n	403b7a <_dtoa_r+0x8da>
  403b28:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403b2c:	f1b9 0f00 	cmp.w	r9, #0
  403b30:	d111      	bne.n	403b56 <_dtoa_r+0x8b6>
  403b32:	4629      	mov	r1, r5
  403b34:	464b      	mov	r3, r9
  403b36:	2205      	movs	r2, #5
  403b38:	4650      	mov	r0, sl
  403b3a:	f000 fbe8 	bl	40430e <__multadd>
  403b3e:	4601      	mov	r1, r0
  403b40:	4605      	mov	r5, r0
  403b42:	9804      	ldr	r0, [sp, #16]
  403b44:	f000 fda5 	bl	404692 <__mcmp>
  403b48:	2800      	cmp	r0, #0
  403b4a:	dc0c      	bgt.n	403b66 <_dtoa_r+0x8c6>
  403b4c:	e003      	b.n	403b56 <_dtoa_r+0x8b6>
  403b4e:	4635      	mov	r5, r6
  403b50:	e000      	b.n	403b54 <_dtoa_r+0x8b4>
  403b52:	2500      	movs	r5, #0
  403b54:	462e      	mov	r6, r5
  403b56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403b58:	9c06      	ldr	r4, [sp, #24]
  403b5a:	ea6f 0b03 	mvn.w	fp, r3
  403b5e:	e009      	b.n	403b74 <_dtoa_r+0x8d4>
  403b60:	f8dd b020 	ldr.w	fp, [sp, #32]
  403b64:	4635      	mov	r5, r6
  403b66:	9b06      	ldr	r3, [sp, #24]
  403b68:	9a06      	ldr	r2, [sp, #24]
  403b6a:	1c5c      	adds	r4, r3, #1
  403b6c:	2331      	movs	r3, #49	; 0x31
  403b6e:	7013      	strb	r3, [r2, #0]
  403b70:	f10b 0b01 	add.w	fp, fp, #1
  403b74:	9605      	str	r6, [sp, #20]
  403b76:	2600      	movs	r6, #0
  403b78:	e0f9      	b.n	403d6e <_dtoa_r+0xace>
  403b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b7c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403b80:	b923      	cbnz	r3, 403b8c <_dtoa_r+0x8ec>
  403b82:	9c06      	ldr	r4, [sp, #24]
  403b84:	e0b2      	b.n	403cec <_dtoa_r+0xa4c>
  403b86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403b88:	2b02      	cmp	r3, #2
  403b8a:	dccf      	bgt.n	403b2c <_dtoa_r+0x88c>
  403b8c:	2c00      	cmp	r4, #0
  403b8e:	dd05      	ble.n	403b9c <_dtoa_r+0x8fc>
  403b90:	4631      	mov	r1, r6
  403b92:	4622      	mov	r2, r4
  403b94:	4650      	mov	r0, sl
  403b96:	f000 fd2b 	bl	4045f0 <__lshift>
  403b9a:	4606      	mov	r6, r0
  403b9c:	b19f      	cbz	r7, 403bc6 <_dtoa_r+0x926>
  403b9e:	6871      	ldr	r1, [r6, #4]
  403ba0:	4650      	mov	r0, sl
  403ba2:	f000 fb68 	bl	404276 <_Balloc>
  403ba6:	6932      	ldr	r2, [r6, #16]
  403ba8:	3202      	adds	r2, #2
  403baa:	4604      	mov	r4, r0
  403bac:	0092      	lsls	r2, r2, #2
  403bae:	f106 010c 	add.w	r1, r6, #12
  403bb2:	300c      	adds	r0, #12
  403bb4:	f000 fb54 	bl	404260 <memcpy>
  403bb8:	2201      	movs	r2, #1
  403bba:	4621      	mov	r1, r4
  403bbc:	4650      	mov	r0, sl
  403bbe:	f000 fd17 	bl	4045f0 <__lshift>
  403bc2:	9005      	str	r0, [sp, #20]
  403bc4:	e000      	b.n	403bc8 <_dtoa_r+0x928>
  403bc6:	9605      	str	r6, [sp, #20]
  403bc8:	9b02      	ldr	r3, [sp, #8]
  403bca:	9f06      	ldr	r7, [sp, #24]
  403bcc:	f003 0301 	and.w	r3, r3, #1
  403bd0:	9307      	str	r3, [sp, #28]
  403bd2:	4629      	mov	r1, r5
  403bd4:	9804      	ldr	r0, [sp, #16]
  403bd6:	f7ff fad1 	bl	40317c <quorem>
  403bda:	4631      	mov	r1, r6
  403bdc:	4604      	mov	r4, r0
  403bde:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403be2:	9804      	ldr	r0, [sp, #16]
  403be4:	f000 fd55 	bl	404692 <__mcmp>
  403be8:	9a05      	ldr	r2, [sp, #20]
  403bea:	9002      	str	r0, [sp, #8]
  403bec:	4629      	mov	r1, r5
  403bee:	4650      	mov	r0, sl
  403bf0:	f000 fd6b 	bl	4046ca <__mdiff>
  403bf4:	68c3      	ldr	r3, [r0, #12]
  403bf6:	4602      	mov	r2, r0
  403bf8:	b93b      	cbnz	r3, 403c0a <_dtoa_r+0x96a>
  403bfa:	4601      	mov	r1, r0
  403bfc:	900a      	str	r0, [sp, #40]	; 0x28
  403bfe:	9804      	ldr	r0, [sp, #16]
  403c00:	f000 fd47 	bl	404692 <__mcmp>
  403c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403c06:	4603      	mov	r3, r0
  403c08:	e000      	b.n	403c0c <_dtoa_r+0x96c>
  403c0a:	2301      	movs	r3, #1
  403c0c:	4611      	mov	r1, r2
  403c0e:	4650      	mov	r0, sl
  403c10:	930a      	str	r3, [sp, #40]	; 0x28
  403c12:	f000 fb65 	bl	4042e0 <_Bfree>
  403c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c18:	b953      	cbnz	r3, 403c30 <_dtoa_r+0x990>
  403c1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403c1c:	b942      	cbnz	r2, 403c30 <_dtoa_r+0x990>
  403c1e:	9a07      	ldr	r2, [sp, #28]
  403c20:	b932      	cbnz	r2, 403c30 <_dtoa_r+0x990>
  403c22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403c26:	d02a      	beq.n	403c7e <_dtoa_r+0x9de>
  403c28:	9b02      	ldr	r3, [sp, #8]
  403c2a:	2b00      	cmp	r3, #0
  403c2c:	dc1c      	bgt.n	403c68 <_dtoa_r+0x9c8>
  403c2e:	e01d      	b.n	403c6c <_dtoa_r+0x9cc>
  403c30:	9a02      	ldr	r2, [sp, #8]
  403c32:	2a00      	cmp	r2, #0
  403c34:	db04      	blt.n	403c40 <_dtoa_r+0x9a0>
  403c36:	d11b      	bne.n	403c70 <_dtoa_r+0x9d0>
  403c38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403c3a:	b9ca      	cbnz	r2, 403c70 <_dtoa_r+0x9d0>
  403c3c:	9a07      	ldr	r2, [sp, #28]
  403c3e:	b9ba      	cbnz	r2, 403c70 <_dtoa_r+0x9d0>
  403c40:	2b00      	cmp	r3, #0
  403c42:	dd13      	ble.n	403c6c <_dtoa_r+0x9cc>
  403c44:	2201      	movs	r2, #1
  403c46:	9904      	ldr	r1, [sp, #16]
  403c48:	4650      	mov	r0, sl
  403c4a:	f000 fcd1 	bl	4045f0 <__lshift>
  403c4e:	4629      	mov	r1, r5
  403c50:	9004      	str	r0, [sp, #16]
  403c52:	f000 fd1e 	bl	404692 <__mcmp>
  403c56:	2800      	cmp	r0, #0
  403c58:	dc03      	bgt.n	403c62 <_dtoa_r+0x9c2>
  403c5a:	d107      	bne.n	403c6c <_dtoa_r+0x9cc>
  403c5c:	f018 0f01 	tst.w	r8, #1
  403c60:	d004      	beq.n	403c6c <_dtoa_r+0x9cc>
  403c62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403c66:	d00a      	beq.n	403c7e <_dtoa_r+0x9de>
  403c68:	f104 0831 	add.w	r8, r4, #49	; 0x31
  403c6c:	1c7c      	adds	r4, r7, #1
  403c6e:	e00c      	b.n	403c8a <_dtoa_r+0x9ea>
  403c70:	2b00      	cmp	r3, #0
  403c72:	f107 0401 	add.w	r4, r7, #1
  403c76:	dd0b      	ble.n	403c90 <_dtoa_r+0x9f0>
  403c78:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403c7c:	d103      	bne.n	403c86 <_dtoa_r+0x9e6>
  403c7e:	2339      	movs	r3, #57	; 0x39
  403c80:	703b      	strb	r3, [r7, #0]
  403c82:	3701      	adds	r7, #1
  403c84:	e056      	b.n	403d34 <_dtoa_r+0xa94>
  403c86:	f108 0801 	add.w	r8, r8, #1
  403c8a:	f887 8000 	strb.w	r8, [r7]
  403c8e:	e06e      	b.n	403d6e <_dtoa_r+0xace>
  403c90:	9b06      	ldr	r3, [sp, #24]
  403c92:	f804 8c01 	strb.w	r8, [r4, #-1]
  403c96:	1ae3      	subs	r3, r4, r3
  403c98:	454b      	cmp	r3, r9
  403c9a:	4627      	mov	r7, r4
  403c9c:	d03b      	beq.n	403d16 <_dtoa_r+0xa76>
  403c9e:	2300      	movs	r3, #0
  403ca0:	220a      	movs	r2, #10
  403ca2:	9904      	ldr	r1, [sp, #16]
  403ca4:	4650      	mov	r0, sl
  403ca6:	f000 fb32 	bl	40430e <__multadd>
  403caa:	9b05      	ldr	r3, [sp, #20]
  403cac:	9004      	str	r0, [sp, #16]
  403cae:	429e      	cmp	r6, r3
  403cb0:	f04f 020a 	mov.w	r2, #10
  403cb4:	f04f 0300 	mov.w	r3, #0
  403cb8:	4631      	mov	r1, r6
  403cba:	4650      	mov	r0, sl
  403cbc:	d104      	bne.n	403cc8 <_dtoa_r+0xa28>
  403cbe:	f000 fb26 	bl	40430e <__multadd>
  403cc2:	4606      	mov	r6, r0
  403cc4:	9005      	str	r0, [sp, #20]
  403cc6:	e784      	b.n	403bd2 <_dtoa_r+0x932>
  403cc8:	f000 fb21 	bl	40430e <__multadd>
  403ccc:	2300      	movs	r3, #0
  403cce:	4606      	mov	r6, r0
  403cd0:	220a      	movs	r2, #10
  403cd2:	9905      	ldr	r1, [sp, #20]
  403cd4:	4650      	mov	r0, sl
  403cd6:	f000 fb1a 	bl	40430e <__multadd>
  403cda:	9005      	str	r0, [sp, #20]
  403cdc:	e779      	b.n	403bd2 <_dtoa_r+0x932>
  403cde:	2300      	movs	r3, #0
  403ce0:	220a      	movs	r2, #10
  403ce2:	9904      	ldr	r1, [sp, #16]
  403ce4:	4650      	mov	r0, sl
  403ce6:	f000 fb12 	bl	40430e <__multadd>
  403cea:	9004      	str	r0, [sp, #16]
  403cec:	4629      	mov	r1, r5
  403cee:	9804      	ldr	r0, [sp, #16]
  403cf0:	f7ff fa44 	bl	40317c <quorem>
  403cf4:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403cf8:	f804 8b01 	strb.w	r8, [r4], #1
  403cfc:	9b06      	ldr	r3, [sp, #24]
  403cfe:	1ae3      	subs	r3, r4, r3
  403d00:	454b      	cmp	r3, r9
  403d02:	dbec      	blt.n	403cde <_dtoa_r+0xa3e>
  403d04:	9b06      	ldr	r3, [sp, #24]
  403d06:	9605      	str	r6, [sp, #20]
  403d08:	f1b9 0f01 	cmp.w	r9, #1
  403d0c:	bfac      	ite	ge
  403d0e:	444b      	addge	r3, r9
  403d10:	3301      	addlt	r3, #1
  403d12:	461f      	mov	r7, r3
  403d14:	2600      	movs	r6, #0
  403d16:	2201      	movs	r2, #1
  403d18:	9904      	ldr	r1, [sp, #16]
  403d1a:	4650      	mov	r0, sl
  403d1c:	f000 fc68 	bl	4045f0 <__lshift>
  403d20:	4629      	mov	r1, r5
  403d22:	9004      	str	r0, [sp, #16]
  403d24:	f000 fcb5 	bl	404692 <__mcmp>
  403d28:	2800      	cmp	r0, #0
  403d2a:	dc03      	bgt.n	403d34 <_dtoa_r+0xa94>
  403d2c:	d116      	bne.n	403d5c <_dtoa_r+0xabc>
  403d2e:	f018 0f01 	tst.w	r8, #1
  403d32:	d013      	beq.n	403d5c <_dtoa_r+0xabc>
  403d34:	463c      	mov	r4, r7
  403d36:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403d3a:	2b39      	cmp	r3, #57	; 0x39
  403d3c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403d40:	d109      	bne.n	403d56 <_dtoa_r+0xab6>
  403d42:	9b06      	ldr	r3, [sp, #24]
  403d44:	4293      	cmp	r3, r2
  403d46:	d104      	bne.n	403d52 <_dtoa_r+0xab2>
  403d48:	f10b 0b01 	add.w	fp, fp, #1
  403d4c:	2331      	movs	r3, #49	; 0x31
  403d4e:	9a06      	ldr	r2, [sp, #24]
  403d50:	e002      	b.n	403d58 <_dtoa_r+0xab8>
  403d52:	4614      	mov	r4, r2
  403d54:	e7ef      	b.n	403d36 <_dtoa_r+0xa96>
  403d56:	3301      	adds	r3, #1
  403d58:	7013      	strb	r3, [r2, #0]
  403d5a:	e008      	b.n	403d6e <_dtoa_r+0xace>
  403d5c:	463c      	mov	r4, r7
  403d5e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403d62:	2b30      	cmp	r3, #48	; 0x30
  403d64:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403d68:	d101      	bne.n	403d6e <_dtoa_r+0xace>
  403d6a:	4614      	mov	r4, r2
  403d6c:	e7f7      	b.n	403d5e <_dtoa_r+0xabe>
  403d6e:	4629      	mov	r1, r5
  403d70:	4650      	mov	r0, sl
  403d72:	f000 fab5 	bl	4042e0 <_Bfree>
  403d76:	9b05      	ldr	r3, [sp, #20]
  403d78:	b16b      	cbz	r3, 403d96 <_dtoa_r+0xaf6>
  403d7a:	b12e      	cbz	r6, 403d88 <_dtoa_r+0xae8>
  403d7c:	429e      	cmp	r6, r3
  403d7e:	d003      	beq.n	403d88 <_dtoa_r+0xae8>
  403d80:	4631      	mov	r1, r6
  403d82:	4650      	mov	r0, sl
  403d84:	f000 faac 	bl	4042e0 <_Bfree>
  403d88:	9905      	ldr	r1, [sp, #20]
  403d8a:	4650      	mov	r0, sl
  403d8c:	f000 faa8 	bl	4042e0 <_Bfree>
  403d90:	e001      	b.n	403d96 <_dtoa_r+0xaf6>
  403d92:	f8dd b020 	ldr.w	fp, [sp, #32]
  403d96:	9904      	ldr	r1, [sp, #16]
  403d98:	4650      	mov	r0, sl
  403d9a:	f000 faa1 	bl	4042e0 <_Bfree>
  403d9e:	2300      	movs	r3, #0
  403da0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403da2:	7023      	strb	r3, [r4, #0]
  403da4:	f10b 0301 	add.w	r3, fp, #1
  403da8:	6013      	str	r3, [r2, #0]
  403daa:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403dac:	b11b      	cbz	r3, 403db6 <_dtoa_r+0xb16>
  403dae:	601c      	str	r4, [r3, #0]
  403db0:	e001      	b.n	403db6 <_dtoa_r+0xb16>
  403db2:	4808      	ldr	r0, [pc, #32]	; (403dd4 <_dtoa_r+0xb34>)
  403db4:	e00a      	b.n	403dcc <_dtoa_r+0xb2c>
  403db6:	9806      	ldr	r0, [sp, #24]
  403db8:	e008      	b.n	403dcc <_dtoa_r+0xb2c>
  403dba:	f1b9 0f00 	cmp.w	r9, #0
  403dbe:	f73f aee0 	bgt.w	403b82 <_dtoa_r+0x8e2>
  403dc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403dc4:	2b02      	cmp	r3, #2
  403dc6:	f77f aedc 	ble.w	403b82 <_dtoa_r+0x8e2>
  403dca:	e6af      	b.n	403b2c <_dtoa_r+0x88c>
  403dcc:	b015      	add	sp, #84	; 0x54
  403dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dd2:	bf00      	nop
  403dd4:	00406044 	.word	0x00406044

00403dd8 <__sflush_r>:
  403dd8:	898a      	ldrh	r2, [r1, #12]
  403dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403dde:	4605      	mov	r5, r0
  403de0:	0710      	lsls	r0, r2, #28
  403de2:	460c      	mov	r4, r1
  403de4:	d459      	bmi.n	403e9a <__sflush_r+0xc2>
  403de6:	684b      	ldr	r3, [r1, #4]
  403de8:	2b00      	cmp	r3, #0
  403dea:	dc02      	bgt.n	403df2 <__sflush_r+0x1a>
  403dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  403dee:	2b00      	cmp	r3, #0
  403df0:	dd17      	ble.n	403e22 <__sflush_r+0x4a>
  403df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403df4:	b1ae      	cbz	r6, 403e22 <__sflush_r+0x4a>
  403df6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  403dfa:	2300      	movs	r3, #0
  403dfc:	b292      	uxth	r2, r2
  403dfe:	682f      	ldr	r7, [r5, #0]
  403e00:	602b      	str	r3, [r5, #0]
  403e02:	b10a      	cbz	r2, 403e08 <__sflush_r+0x30>
  403e04:	6d60      	ldr	r0, [r4, #84]	; 0x54
  403e06:	e015      	b.n	403e34 <__sflush_r+0x5c>
  403e08:	6a21      	ldr	r1, [r4, #32]
  403e0a:	2301      	movs	r3, #1
  403e0c:	4628      	mov	r0, r5
  403e0e:	47b0      	blx	r6
  403e10:	1c41      	adds	r1, r0, #1
  403e12:	d10f      	bne.n	403e34 <__sflush_r+0x5c>
  403e14:	682b      	ldr	r3, [r5, #0]
  403e16:	b16b      	cbz	r3, 403e34 <__sflush_r+0x5c>
  403e18:	2b1d      	cmp	r3, #29
  403e1a:	d001      	beq.n	403e20 <__sflush_r+0x48>
  403e1c:	2b16      	cmp	r3, #22
  403e1e:	d103      	bne.n	403e28 <__sflush_r+0x50>
  403e20:	602f      	str	r7, [r5, #0]
  403e22:	2000      	movs	r0, #0
  403e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e28:	89a3      	ldrh	r3, [r4, #12]
  403e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e2e:	81a3      	strh	r3, [r4, #12]
  403e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e34:	89a3      	ldrh	r3, [r4, #12]
  403e36:	075a      	lsls	r2, r3, #29
  403e38:	d505      	bpl.n	403e46 <__sflush_r+0x6e>
  403e3a:	6863      	ldr	r3, [r4, #4]
  403e3c:	1ac0      	subs	r0, r0, r3
  403e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403e40:	b10b      	cbz	r3, 403e46 <__sflush_r+0x6e>
  403e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403e44:	1ac0      	subs	r0, r0, r3
  403e46:	2300      	movs	r3, #0
  403e48:	4602      	mov	r2, r0
  403e4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403e4c:	6a21      	ldr	r1, [r4, #32]
  403e4e:	4628      	mov	r0, r5
  403e50:	47b0      	blx	r6
  403e52:	1c43      	adds	r3, r0, #1
  403e54:	89a3      	ldrh	r3, [r4, #12]
  403e56:	d106      	bne.n	403e66 <__sflush_r+0x8e>
  403e58:	6829      	ldr	r1, [r5, #0]
  403e5a:	291d      	cmp	r1, #29
  403e5c:	d83a      	bhi.n	403ed4 <__sflush_r+0xfc>
  403e5e:	4a21      	ldr	r2, [pc, #132]	; (403ee4 <__sflush_r+0x10c>)
  403e60:	40ca      	lsrs	r2, r1
  403e62:	07d6      	lsls	r6, r2, #31
  403e64:	d536      	bpl.n	403ed4 <__sflush_r+0xfc>
  403e66:	2200      	movs	r2, #0
  403e68:	6062      	str	r2, [r4, #4]
  403e6a:	04d9      	lsls	r1, r3, #19
  403e6c:	6922      	ldr	r2, [r4, #16]
  403e6e:	6022      	str	r2, [r4, #0]
  403e70:	d504      	bpl.n	403e7c <__sflush_r+0xa4>
  403e72:	1c42      	adds	r2, r0, #1
  403e74:	d101      	bne.n	403e7a <__sflush_r+0xa2>
  403e76:	682b      	ldr	r3, [r5, #0]
  403e78:	b903      	cbnz	r3, 403e7c <__sflush_r+0xa4>
  403e7a:	6560      	str	r0, [r4, #84]	; 0x54
  403e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403e7e:	602f      	str	r7, [r5, #0]
  403e80:	2900      	cmp	r1, #0
  403e82:	d0ce      	beq.n	403e22 <__sflush_r+0x4a>
  403e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403e88:	4299      	cmp	r1, r3
  403e8a:	d002      	beq.n	403e92 <__sflush_r+0xba>
  403e8c:	4628      	mov	r0, r5
  403e8e:	f000 fcd7 	bl	404840 <_free_r>
  403e92:	2000      	movs	r0, #0
  403e94:	6360      	str	r0, [r4, #52]	; 0x34
  403e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e9a:	690f      	ldr	r7, [r1, #16]
  403e9c:	2f00      	cmp	r7, #0
  403e9e:	d0c0      	beq.n	403e22 <__sflush_r+0x4a>
  403ea0:	0793      	lsls	r3, r2, #30
  403ea2:	680e      	ldr	r6, [r1, #0]
  403ea4:	bf08      	it	eq
  403ea6:	694b      	ldreq	r3, [r1, #20]
  403ea8:	600f      	str	r7, [r1, #0]
  403eaa:	bf18      	it	ne
  403eac:	2300      	movne	r3, #0
  403eae:	ebc7 0806 	rsb	r8, r7, r6
  403eb2:	608b      	str	r3, [r1, #8]
  403eb4:	e002      	b.n	403ebc <__sflush_r+0xe4>
  403eb6:	4407      	add	r7, r0
  403eb8:	ebc0 0808 	rsb	r8, r0, r8
  403ebc:	f1b8 0f00 	cmp.w	r8, #0
  403ec0:	ddaf      	ble.n	403e22 <__sflush_r+0x4a>
  403ec2:	4643      	mov	r3, r8
  403ec4:	463a      	mov	r2, r7
  403ec6:	6a21      	ldr	r1, [r4, #32]
  403ec8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  403eca:	4628      	mov	r0, r5
  403ecc:	47b0      	blx	r6
  403ece:	2800      	cmp	r0, #0
  403ed0:	dcf1      	bgt.n	403eb6 <__sflush_r+0xde>
  403ed2:	89a3      	ldrh	r3, [r4, #12]
  403ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403ed8:	81a3      	strh	r3, [r4, #12]
  403eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403ee2:	bf00      	nop
  403ee4:	20400001 	.word	0x20400001

00403ee8 <_fflush_r>:
  403ee8:	b538      	push	{r3, r4, r5, lr}
  403eea:	690b      	ldr	r3, [r1, #16]
  403eec:	4605      	mov	r5, r0
  403eee:	460c      	mov	r4, r1
  403ef0:	b1db      	cbz	r3, 403f2a <_fflush_r+0x42>
  403ef2:	b118      	cbz	r0, 403efc <_fflush_r+0x14>
  403ef4:	6983      	ldr	r3, [r0, #24]
  403ef6:	b90b      	cbnz	r3, 403efc <_fflush_r+0x14>
  403ef8:	f000 f860 	bl	403fbc <__sinit>
  403efc:	4b0c      	ldr	r3, [pc, #48]	; (403f30 <_fflush_r+0x48>)
  403efe:	429c      	cmp	r4, r3
  403f00:	d101      	bne.n	403f06 <_fflush_r+0x1e>
  403f02:	686c      	ldr	r4, [r5, #4]
  403f04:	e008      	b.n	403f18 <_fflush_r+0x30>
  403f06:	4b0b      	ldr	r3, [pc, #44]	; (403f34 <_fflush_r+0x4c>)
  403f08:	429c      	cmp	r4, r3
  403f0a:	d101      	bne.n	403f10 <_fflush_r+0x28>
  403f0c:	68ac      	ldr	r4, [r5, #8]
  403f0e:	e003      	b.n	403f18 <_fflush_r+0x30>
  403f10:	4b09      	ldr	r3, [pc, #36]	; (403f38 <_fflush_r+0x50>)
  403f12:	429c      	cmp	r4, r3
  403f14:	bf08      	it	eq
  403f16:	68ec      	ldreq	r4, [r5, #12]
  403f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403f1c:	b12b      	cbz	r3, 403f2a <_fflush_r+0x42>
  403f1e:	4621      	mov	r1, r4
  403f20:	4628      	mov	r0, r5
  403f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403f26:	f7ff bf57 	b.w	403dd8 <__sflush_r>
  403f2a:	2000      	movs	r0, #0
  403f2c:	bd38      	pop	{r3, r4, r5, pc}
  403f2e:	bf00      	nop
  403f30:	00406078 	.word	0x00406078
  403f34:	00406098 	.word	0x00406098
  403f38:	004060b8 	.word	0x004060b8

00403f3c <_cleanup_r>:
  403f3c:	4901      	ldr	r1, [pc, #4]	; (403f44 <_cleanup_r+0x8>)
  403f3e:	f000 b8a9 	b.w	404094 <_fwalk_reent>
  403f42:	bf00      	nop
  403f44:	00403ee9 	.word	0x00403ee9

00403f48 <std.isra.0>:
  403f48:	2300      	movs	r3, #0
  403f4a:	b510      	push	{r4, lr}
  403f4c:	4604      	mov	r4, r0
  403f4e:	6003      	str	r3, [r0, #0]
  403f50:	6043      	str	r3, [r0, #4]
  403f52:	6083      	str	r3, [r0, #8]
  403f54:	8181      	strh	r1, [r0, #12]
  403f56:	6643      	str	r3, [r0, #100]	; 0x64
  403f58:	81c2      	strh	r2, [r0, #14]
  403f5a:	6103      	str	r3, [r0, #16]
  403f5c:	6143      	str	r3, [r0, #20]
  403f5e:	6183      	str	r3, [r0, #24]
  403f60:	4619      	mov	r1, r3
  403f62:	2208      	movs	r2, #8
  403f64:	305c      	adds	r0, #92	; 0x5c
  403f66:	f7fe fa9b 	bl	4024a0 <memset>
  403f6a:	4b05      	ldr	r3, [pc, #20]	; (403f80 <std.isra.0+0x38>)
  403f6c:	6263      	str	r3, [r4, #36]	; 0x24
  403f6e:	4b05      	ldr	r3, [pc, #20]	; (403f84 <std.isra.0+0x3c>)
  403f70:	62a3      	str	r3, [r4, #40]	; 0x28
  403f72:	4b05      	ldr	r3, [pc, #20]	; (403f88 <std.isra.0+0x40>)
  403f74:	62e3      	str	r3, [r4, #44]	; 0x2c
  403f76:	4b05      	ldr	r3, [pc, #20]	; (403f8c <std.isra.0+0x44>)
  403f78:	6224      	str	r4, [r4, #32]
  403f7a:	6323      	str	r3, [r4, #48]	; 0x30
  403f7c:	bd10      	pop	{r4, pc}
  403f7e:	bf00      	nop
  403f80:	00404c41 	.word	0x00404c41
  403f84:	00404c63 	.word	0x00404c63
  403f88:	00404c9b 	.word	0x00404c9b
  403f8c:	00404cbf 	.word	0x00404cbf

00403f90 <__sfmoreglue>:
  403f90:	b570      	push	{r4, r5, r6, lr}
  403f92:	2368      	movs	r3, #104	; 0x68
  403f94:	1e4d      	subs	r5, r1, #1
  403f96:	435d      	muls	r5, r3
  403f98:	460e      	mov	r6, r1
  403f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
  403f9e:	f000 fc9d 	bl	4048dc <_malloc_r>
  403fa2:	4604      	mov	r4, r0
  403fa4:	b140      	cbz	r0, 403fb8 <__sfmoreglue+0x28>
  403fa6:	2100      	movs	r1, #0
  403fa8:	e880 0042 	stmia.w	r0, {r1, r6}
  403fac:	300c      	adds	r0, #12
  403fae:	60a0      	str	r0, [r4, #8]
  403fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
  403fb4:	f7fe fa74 	bl	4024a0 <memset>
  403fb8:	4620      	mov	r0, r4
  403fba:	bd70      	pop	{r4, r5, r6, pc}

00403fbc <__sinit>:
  403fbc:	6983      	ldr	r3, [r0, #24]
  403fbe:	b510      	push	{r4, lr}
  403fc0:	4604      	mov	r4, r0
  403fc2:	bb33      	cbnz	r3, 404012 <__sinit+0x56>
  403fc4:	6483      	str	r3, [r0, #72]	; 0x48
  403fc6:	64c3      	str	r3, [r0, #76]	; 0x4c
  403fc8:	6503      	str	r3, [r0, #80]	; 0x50
  403fca:	4b12      	ldr	r3, [pc, #72]	; (404014 <__sinit+0x58>)
  403fcc:	4a12      	ldr	r2, [pc, #72]	; (404018 <__sinit+0x5c>)
  403fce:	681b      	ldr	r3, [r3, #0]
  403fd0:	6282      	str	r2, [r0, #40]	; 0x28
  403fd2:	4298      	cmp	r0, r3
  403fd4:	bf04      	itt	eq
  403fd6:	2301      	moveq	r3, #1
  403fd8:	6183      	streq	r3, [r0, #24]
  403fda:	f000 f81f 	bl	40401c <__sfp>
  403fde:	6060      	str	r0, [r4, #4]
  403fe0:	4620      	mov	r0, r4
  403fe2:	f000 f81b 	bl	40401c <__sfp>
  403fe6:	60a0      	str	r0, [r4, #8]
  403fe8:	4620      	mov	r0, r4
  403fea:	f000 f817 	bl	40401c <__sfp>
  403fee:	2200      	movs	r2, #0
  403ff0:	60e0      	str	r0, [r4, #12]
  403ff2:	2104      	movs	r1, #4
  403ff4:	6860      	ldr	r0, [r4, #4]
  403ff6:	f7ff ffa7 	bl	403f48 <std.isra.0>
  403ffa:	2201      	movs	r2, #1
  403ffc:	2109      	movs	r1, #9
  403ffe:	68a0      	ldr	r0, [r4, #8]
  404000:	f7ff ffa2 	bl	403f48 <std.isra.0>
  404004:	2202      	movs	r2, #2
  404006:	2112      	movs	r1, #18
  404008:	68e0      	ldr	r0, [r4, #12]
  40400a:	f7ff ff9d 	bl	403f48 <std.isra.0>
  40400e:	2301      	movs	r3, #1
  404010:	61a3      	str	r3, [r4, #24]
  404012:	bd10      	pop	{r4, pc}
  404014:	00406030 	.word	0x00406030
  404018:	00403f3d 	.word	0x00403f3d

0040401c <__sfp>:
  40401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40401e:	4b1c      	ldr	r3, [pc, #112]	; (404090 <__sfp+0x74>)
  404020:	681e      	ldr	r6, [r3, #0]
  404022:	69b3      	ldr	r3, [r6, #24]
  404024:	4607      	mov	r7, r0
  404026:	b913      	cbnz	r3, 40402e <__sfp+0x12>
  404028:	4630      	mov	r0, r6
  40402a:	f7ff ffc7 	bl	403fbc <__sinit>
  40402e:	3648      	adds	r6, #72	; 0x48
  404030:	68b4      	ldr	r4, [r6, #8]
  404032:	6873      	ldr	r3, [r6, #4]
  404034:	3b01      	subs	r3, #1
  404036:	d404      	bmi.n	404042 <__sfp+0x26>
  404038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40403c:	b17d      	cbz	r5, 40405e <__sfp+0x42>
  40403e:	3468      	adds	r4, #104	; 0x68
  404040:	e7f8      	b.n	404034 <__sfp+0x18>
  404042:	6833      	ldr	r3, [r6, #0]
  404044:	b10b      	cbz	r3, 40404a <__sfp+0x2e>
  404046:	6836      	ldr	r6, [r6, #0]
  404048:	e7f2      	b.n	404030 <__sfp+0x14>
  40404a:	2104      	movs	r1, #4
  40404c:	4638      	mov	r0, r7
  40404e:	f7ff ff9f 	bl	403f90 <__sfmoreglue>
  404052:	6030      	str	r0, [r6, #0]
  404054:	2800      	cmp	r0, #0
  404056:	d1f6      	bne.n	404046 <__sfp+0x2a>
  404058:	230c      	movs	r3, #12
  40405a:	603b      	str	r3, [r7, #0]
  40405c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40405e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404062:	81e3      	strh	r3, [r4, #14]
  404064:	2301      	movs	r3, #1
  404066:	81a3      	strh	r3, [r4, #12]
  404068:	6665      	str	r5, [r4, #100]	; 0x64
  40406a:	6025      	str	r5, [r4, #0]
  40406c:	60a5      	str	r5, [r4, #8]
  40406e:	6065      	str	r5, [r4, #4]
  404070:	6125      	str	r5, [r4, #16]
  404072:	6165      	str	r5, [r4, #20]
  404074:	61a5      	str	r5, [r4, #24]
  404076:	2208      	movs	r2, #8
  404078:	4629      	mov	r1, r5
  40407a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40407e:	f7fe fa0f 	bl	4024a0 <memset>
  404082:	6365      	str	r5, [r4, #52]	; 0x34
  404084:	63a5      	str	r5, [r4, #56]	; 0x38
  404086:	64a5      	str	r5, [r4, #72]	; 0x48
  404088:	64e5      	str	r5, [r4, #76]	; 0x4c
  40408a:	4620      	mov	r0, r4
  40408c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40408e:	bf00      	nop
  404090:	00406030 	.word	0x00406030

00404094 <_fwalk_reent>:
  404094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404098:	4680      	mov	r8, r0
  40409a:	4689      	mov	r9, r1
  40409c:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4040a0:	2600      	movs	r6, #0
  4040a2:	b194      	cbz	r4, 4040ca <_fwalk_reent+0x36>
  4040a4:	68a5      	ldr	r5, [r4, #8]
  4040a6:	6867      	ldr	r7, [r4, #4]
  4040a8:	3f01      	subs	r7, #1
  4040aa:	d40c      	bmi.n	4040c6 <_fwalk_reent+0x32>
  4040ac:	89ab      	ldrh	r3, [r5, #12]
  4040ae:	2b01      	cmp	r3, #1
  4040b0:	d907      	bls.n	4040c2 <_fwalk_reent+0x2e>
  4040b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4040b6:	3301      	adds	r3, #1
  4040b8:	d003      	beq.n	4040c2 <_fwalk_reent+0x2e>
  4040ba:	4629      	mov	r1, r5
  4040bc:	4640      	mov	r0, r8
  4040be:	47c8      	blx	r9
  4040c0:	4306      	orrs	r6, r0
  4040c2:	3568      	adds	r5, #104	; 0x68
  4040c4:	e7f0      	b.n	4040a8 <_fwalk_reent+0x14>
  4040c6:	6824      	ldr	r4, [r4, #0]
  4040c8:	e7eb      	b.n	4040a2 <_fwalk_reent+0xe>
  4040ca:	4630      	mov	r0, r6
  4040cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004040d0 <_localeconv_r>:
  4040d0:	4b04      	ldr	r3, [pc, #16]	; (4040e4 <_localeconv_r+0x14>)
  4040d2:	681b      	ldr	r3, [r3, #0]
  4040d4:	6a18      	ldr	r0, [r3, #32]
  4040d6:	4b04      	ldr	r3, [pc, #16]	; (4040e8 <_localeconv_r+0x18>)
  4040d8:	2800      	cmp	r0, #0
  4040da:	bf08      	it	eq
  4040dc:	4618      	moveq	r0, r3
  4040de:	30f0      	adds	r0, #240	; 0xf0
  4040e0:	4770      	bx	lr
  4040e2:	bf00      	nop
  4040e4:	20000074 	.word	0x20000074
  4040e8:	20000078 	.word	0x20000078

004040ec <__swhatbuf_r>:
  4040ec:	b570      	push	{r4, r5, r6, lr}
  4040ee:	460e      	mov	r6, r1
  4040f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4040f4:	2900      	cmp	r1, #0
  4040f6:	b090      	sub	sp, #64	; 0x40
  4040f8:	4614      	mov	r4, r2
  4040fa:	461d      	mov	r5, r3
  4040fc:	da06      	bge.n	40410c <__swhatbuf_r+0x20>
  4040fe:	2300      	movs	r3, #0
  404100:	602b      	str	r3, [r5, #0]
  404102:	89b3      	ldrh	r3, [r6, #12]
  404104:	061a      	lsls	r2, r3, #24
  404106:	d50e      	bpl.n	404126 <__swhatbuf_r+0x3a>
  404108:	2340      	movs	r3, #64	; 0x40
  40410a:	e00e      	b.n	40412a <__swhatbuf_r+0x3e>
  40410c:	aa01      	add	r2, sp, #4
  40410e:	f000 fdfd 	bl	404d0c <_fstat_r>
  404112:	2800      	cmp	r0, #0
  404114:	dbf3      	blt.n	4040fe <__swhatbuf_r+0x12>
  404116:	9a02      	ldr	r2, [sp, #8]
  404118:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40411c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404120:	425a      	negs	r2, r3
  404122:	415a      	adcs	r2, r3
  404124:	602a      	str	r2, [r5, #0]
  404126:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40412a:	2000      	movs	r0, #0
  40412c:	6023      	str	r3, [r4, #0]
  40412e:	b010      	add	sp, #64	; 0x40
  404130:	bd70      	pop	{r4, r5, r6, pc}
	...

00404134 <__smakebuf_r>:
  404134:	898b      	ldrh	r3, [r1, #12]
  404136:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404138:	079e      	lsls	r6, r3, #30
  40413a:	4605      	mov	r5, r0
  40413c:	460c      	mov	r4, r1
  40413e:	d410      	bmi.n	404162 <__smakebuf_r+0x2e>
  404140:	ab01      	add	r3, sp, #4
  404142:	466a      	mov	r2, sp
  404144:	f7ff ffd2 	bl	4040ec <__swhatbuf_r>
  404148:	9900      	ldr	r1, [sp, #0]
  40414a:	4606      	mov	r6, r0
  40414c:	4628      	mov	r0, r5
  40414e:	f000 fbc5 	bl	4048dc <_malloc_r>
  404152:	b968      	cbnz	r0, 404170 <__smakebuf_r+0x3c>
  404154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404158:	059a      	lsls	r2, r3, #22
  40415a:	d422      	bmi.n	4041a2 <__smakebuf_r+0x6e>
  40415c:	f043 0302 	orr.w	r3, r3, #2
  404160:	81a3      	strh	r3, [r4, #12]
  404162:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404166:	6023      	str	r3, [r4, #0]
  404168:	6123      	str	r3, [r4, #16]
  40416a:	2301      	movs	r3, #1
  40416c:	6163      	str	r3, [r4, #20]
  40416e:	e018      	b.n	4041a2 <__smakebuf_r+0x6e>
  404170:	4b0d      	ldr	r3, [pc, #52]	; (4041a8 <__smakebuf_r+0x74>)
  404172:	62ab      	str	r3, [r5, #40]	; 0x28
  404174:	89a3      	ldrh	r3, [r4, #12]
  404176:	6020      	str	r0, [r4, #0]
  404178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40417c:	81a3      	strh	r3, [r4, #12]
  40417e:	9b00      	ldr	r3, [sp, #0]
  404180:	6163      	str	r3, [r4, #20]
  404182:	9b01      	ldr	r3, [sp, #4]
  404184:	6120      	str	r0, [r4, #16]
  404186:	b14b      	cbz	r3, 40419c <__smakebuf_r+0x68>
  404188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40418c:	4628      	mov	r0, r5
  40418e:	f000 fdcf 	bl	404d30 <_isatty_r>
  404192:	b118      	cbz	r0, 40419c <__smakebuf_r+0x68>
  404194:	89a3      	ldrh	r3, [r4, #12]
  404196:	f043 0301 	orr.w	r3, r3, #1
  40419a:	81a3      	strh	r3, [r4, #12]
  40419c:	89a0      	ldrh	r0, [r4, #12]
  40419e:	4330      	orrs	r0, r6
  4041a0:	81a0      	strh	r0, [r4, #12]
  4041a2:	b002      	add	sp, #8
  4041a4:	bd70      	pop	{r4, r5, r6, pc}
  4041a6:	bf00      	nop
  4041a8:	00403f3d 	.word	0x00403f3d

004041ac <malloc>:
  4041ac:	4b02      	ldr	r3, [pc, #8]	; (4041b8 <malloc+0xc>)
  4041ae:	4601      	mov	r1, r0
  4041b0:	6818      	ldr	r0, [r3, #0]
  4041b2:	f000 bb93 	b.w	4048dc <_malloc_r>
  4041b6:	bf00      	nop
  4041b8:	20000074 	.word	0x20000074
  4041bc:	00000000 	.word	0x00000000

004041c0 <memchr>:
  4041c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4041c4:	2a10      	cmp	r2, #16
  4041c6:	db2b      	blt.n	404220 <memchr+0x60>
  4041c8:	f010 0f07 	tst.w	r0, #7
  4041cc:	d008      	beq.n	4041e0 <memchr+0x20>
  4041ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4041d2:	3a01      	subs	r2, #1
  4041d4:	428b      	cmp	r3, r1
  4041d6:	d02d      	beq.n	404234 <memchr+0x74>
  4041d8:	f010 0f07 	tst.w	r0, #7
  4041dc:	b342      	cbz	r2, 404230 <memchr+0x70>
  4041de:	d1f6      	bne.n	4041ce <memchr+0xe>
  4041e0:	b4f0      	push	{r4, r5, r6, r7}
  4041e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4041e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4041ea:	f022 0407 	bic.w	r4, r2, #7
  4041ee:	f07f 0700 	mvns.w	r7, #0
  4041f2:	2300      	movs	r3, #0
  4041f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4041f8:	3c08      	subs	r4, #8
  4041fa:	ea85 0501 	eor.w	r5, r5, r1
  4041fe:	ea86 0601 	eor.w	r6, r6, r1
  404202:	fa85 f547 	uadd8	r5, r5, r7
  404206:	faa3 f587 	sel	r5, r3, r7
  40420a:	fa86 f647 	uadd8	r6, r6, r7
  40420e:	faa5 f687 	sel	r6, r5, r7
  404212:	b98e      	cbnz	r6, 404238 <memchr+0x78>
  404214:	d1ee      	bne.n	4041f4 <memchr+0x34>
  404216:	bcf0      	pop	{r4, r5, r6, r7}
  404218:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40421c:	f002 0207 	and.w	r2, r2, #7
  404220:	b132      	cbz	r2, 404230 <memchr+0x70>
  404222:	f810 3b01 	ldrb.w	r3, [r0], #1
  404226:	3a01      	subs	r2, #1
  404228:	ea83 0301 	eor.w	r3, r3, r1
  40422c:	b113      	cbz	r3, 404234 <memchr+0x74>
  40422e:	d1f8      	bne.n	404222 <memchr+0x62>
  404230:	2000      	movs	r0, #0
  404232:	4770      	bx	lr
  404234:	3801      	subs	r0, #1
  404236:	4770      	bx	lr
  404238:	2d00      	cmp	r5, #0
  40423a:	bf06      	itte	eq
  40423c:	4635      	moveq	r5, r6
  40423e:	3803      	subeq	r0, #3
  404240:	3807      	subne	r0, #7
  404242:	f015 0f01 	tst.w	r5, #1
  404246:	d107      	bne.n	404258 <memchr+0x98>
  404248:	3001      	adds	r0, #1
  40424a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40424e:	bf02      	ittt	eq
  404250:	3001      	addeq	r0, #1
  404252:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404256:	3001      	addeq	r0, #1
  404258:	bcf0      	pop	{r4, r5, r6, r7}
  40425a:	3801      	subs	r0, #1
  40425c:	4770      	bx	lr
  40425e:	bf00      	nop

00404260 <memcpy>:
  404260:	b510      	push	{r4, lr}
  404262:	1e43      	subs	r3, r0, #1
  404264:	440a      	add	r2, r1
  404266:	4291      	cmp	r1, r2
  404268:	d004      	beq.n	404274 <memcpy+0x14>
  40426a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40426e:	f803 4f01 	strb.w	r4, [r3, #1]!
  404272:	e7f8      	b.n	404266 <memcpy+0x6>
  404274:	bd10      	pop	{r4, pc}

00404276 <_Balloc>:
  404276:	b570      	push	{r4, r5, r6, lr}
  404278:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40427a:	4604      	mov	r4, r0
  40427c:	460e      	mov	r6, r1
  40427e:	b93d      	cbnz	r5, 404290 <_Balloc+0x1a>
  404280:	2010      	movs	r0, #16
  404282:	f7ff ff93 	bl	4041ac <malloc>
  404286:	6260      	str	r0, [r4, #36]	; 0x24
  404288:	6045      	str	r5, [r0, #4]
  40428a:	6085      	str	r5, [r0, #8]
  40428c:	6005      	str	r5, [r0, #0]
  40428e:	60c5      	str	r5, [r0, #12]
  404290:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404292:	68eb      	ldr	r3, [r5, #12]
  404294:	b143      	cbz	r3, 4042a8 <_Balloc+0x32>
  404296:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404298:	68db      	ldr	r3, [r3, #12]
  40429a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  40429e:	b178      	cbz	r0, 4042c0 <_Balloc+0x4a>
  4042a0:	6802      	ldr	r2, [r0, #0]
  4042a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4042a6:	e017      	b.n	4042d8 <_Balloc+0x62>
  4042a8:	2221      	movs	r2, #33	; 0x21
  4042aa:	2104      	movs	r1, #4
  4042ac:	4620      	mov	r0, r4
  4042ae:	f000 fab9 	bl	404824 <_calloc_r>
  4042b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4042b4:	60e8      	str	r0, [r5, #12]
  4042b6:	68db      	ldr	r3, [r3, #12]
  4042b8:	2b00      	cmp	r3, #0
  4042ba:	d1ec      	bne.n	404296 <_Balloc+0x20>
  4042bc:	2000      	movs	r0, #0
  4042be:	bd70      	pop	{r4, r5, r6, pc}
  4042c0:	2101      	movs	r1, #1
  4042c2:	fa01 f506 	lsl.w	r5, r1, r6
  4042c6:	1d6a      	adds	r2, r5, #5
  4042c8:	0092      	lsls	r2, r2, #2
  4042ca:	4620      	mov	r0, r4
  4042cc:	f000 faaa 	bl	404824 <_calloc_r>
  4042d0:	2800      	cmp	r0, #0
  4042d2:	d0f3      	beq.n	4042bc <_Balloc+0x46>
  4042d4:	6046      	str	r6, [r0, #4]
  4042d6:	6085      	str	r5, [r0, #8]
  4042d8:	2300      	movs	r3, #0
  4042da:	6103      	str	r3, [r0, #16]
  4042dc:	60c3      	str	r3, [r0, #12]
  4042de:	bd70      	pop	{r4, r5, r6, pc}

004042e0 <_Bfree>:
  4042e0:	b570      	push	{r4, r5, r6, lr}
  4042e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4042e4:	4606      	mov	r6, r0
  4042e6:	460d      	mov	r5, r1
  4042e8:	b93c      	cbnz	r4, 4042fa <_Bfree+0x1a>
  4042ea:	2010      	movs	r0, #16
  4042ec:	f7ff ff5e 	bl	4041ac <malloc>
  4042f0:	6270      	str	r0, [r6, #36]	; 0x24
  4042f2:	6044      	str	r4, [r0, #4]
  4042f4:	6084      	str	r4, [r0, #8]
  4042f6:	6004      	str	r4, [r0, #0]
  4042f8:	60c4      	str	r4, [r0, #12]
  4042fa:	b13d      	cbz	r5, 40430c <_Bfree+0x2c>
  4042fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4042fe:	686a      	ldr	r2, [r5, #4]
  404300:	68db      	ldr	r3, [r3, #12]
  404302:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404306:	6029      	str	r1, [r5, #0]
  404308:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40430c:	bd70      	pop	{r4, r5, r6, pc}

0040430e <__multadd>:
  40430e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404312:	690d      	ldr	r5, [r1, #16]
  404314:	461f      	mov	r7, r3
  404316:	4606      	mov	r6, r0
  404318:	460c      	mov	r4, r1
  40431a:	f101 0e14 	add.w	lr, r1, #20
  40431e:	2300      	movs	r3, #0
  404320:	f8de 0000 	ldr.w	r0, [lr]
  404324:	b281      	uxth	r1, r0
  404326:	fb02 7101 	mla	r1, r2, r1, r7
  40432a:	0c0f      	lsrs	r7, r1, #16
  40432c:	0c00      	lsrs	r0, r0, #16
  40432e:	fb02 7000 	mla	r0, r2, r0, r7
  404332:	b289      	uxth	r1, r1
  404334:	3301      	adds	r3, #1
  404336:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40433a:	429d      	cmp	r5, r3
  40433c:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404340:	f84e 1b04 	str.w	r1, [lr], #4
  404344:	dcec      	bgt.n	404320 <__multadd+0x12>
  404346:	b1d7      	cbz	r7, 40437e <__multadd+0x70>
  404348:	68a3      	ldr	r3, [r4, #8]
  40434a:	429d      	cmp	r5, r3
  40434c:	db12      	blt.n	404374 <__multadd+0x66>
  40434e:	6861      	ldr	r1, [r4, #4]
  404350:	4630      	mov	r0, r6
  404352:	3101      	adds	r1, #1
  404354:	f7ff ff8f 	bl	404276 <_Balloc>
  404358:	6922      	ldr	r2, [r4, #16]
  40435a:	3202      	adds	r2, #2
  40435c:	f104 010c 	add.w	r1, r4, #12
  404360:	4680      	mov	r8, r0
  404362:	0092      	lsls	r2, r2, #2
  404364:	300c      	adds	r0, #12
  404366:	f7ff ff7b 	bl	404260 <memcpy>
  40436a:	4621      	mov	r1, r4
  40436c:	4630      	mov	r0, r6
  40436e:	f7ff ffb7 	bl	4042e0 <_Bfree>
  404372:	4644      	mov	r4, r8
  404374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404378:	3501      	adds	r5, #1
  40437a:	615f      	str	r7, [r3, #20]
  40437c:	6125      	str	r5, [r4, #16]
  40437e:	4620      	mov	r0, r4
  404380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404384 <__hi0bits>:
  404384:	0c03      	lsrs	r3, r0, #16
  404386:	041b      	lsls	r3, r3, #16
  404388:	b913      	cbnz	r3, 404390 <__hi0bits+0xc>
  40438a:	0400      	lsls	r0, r0, #16
  40438c:	2310      	movs	r3, #16
  40438e:	e000      	b.n	404392 <__hi0bits+0xe>
  404390:	2300      	movs	r3, #0
  404392:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  404396:	bf04      	itt	eq
  404398:	0200      	lsleq	r0, r0, #8
  40439a:	3308      	addeq	r3, #8
  40439c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4043a0:	bf04      	itt	eq
  4043a2:	0100      	lsleq	r0, r0, #4
  4043a4:	3304      	addeq	r3, #4
  4043a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4043aa:	bf04      	itt	eq
  4043ac:	0080      	lsleq	r0, r0, #2
  4043ae:	3302      	addeq	r3, #2
  4043b0:	2800      	cmp	r0, #0
  4043b2:	db03      	blt.n	4043bc <__hi0bits+0x38>
  4043b4:	0042      	lsls	r2, r0, #1
  4043b6:	d503      	bpl.n	4043c0 <__hi0bits+0x3c>
  4043b8:	1c58      	adds	r0, r3, #1
  4043ba:	4770      	bx	lr
  4043bc:	4618      	mov	r0, r3
  4043be:	4770      	bx	lr
  4043c0:	2020      	movs	r0, #32
  4043c2:	4770      	bx	lr

004043c4 <__lo0bits>:
  4043c4:	6803      	ldr	r3, [r0, #0]
  4043c6:	f013 0207 	ands.w	r2, r3, #7
  4043ca:	d00b      	beq.n	4043e4 <__lo0bits+0x20>
  4043cc:	07d9      	lsls	r1, r3, #31
  4043ce:	d422      	bmi.n	404416 <__lo0bits+0x52>
  4043d0:	079a      	lsls	r2, r3, #30
  4043d2:	bf4b      	itete	mi
  4043d4:	085b      	lsrmi	r3, r3, #1
  4043d6:	089b      	lsrpl	r3, r3, #2
  4043d8:	6003      	strmi	r3, [r0, #0]
  4043da:	6003      	strpl	r3, [r0, #0]
  4043dc:	bf4c      	ite	mi
  4043de:	2001      	movmi	r0, #1
  4043e0:	2002      	movpl	r0, #2
  4043e2:	4770      	bx	lr
  4043e4:	b299      	uxth	r1, r3
  4043e6:	b909      	cbnz	r1, 4043ec <__lo0bits+0x28>
  4043e8:	0c1b      	lsrs	r3, r3, #16
  4043ea:	2210      	movs	r2, #16
  4043ec:	f013 0fff 	tst.w	r3, #255	; 0xff
  4043f0:	bf04      	itt	eq
  4043f2:	0a1b      	lsreq	r3, r3, #8
  4043f4:	3208      	addeq	r2, #8
  4043f6:	0719      	lsls	r1, r3, #28
  4043f8:	bf04      	itt	eq
  4043fa:	091b      	lsreq	r3, r3, #4
  4043fc:	3204      	addeq	r2, #4
  4043fe:	0799      	lsls	r1, r3, #30
  404400:	bf04      	itt	eq
  404402:	089b      	lsreq	r3, r3, #2
  404404:	3202      	addeq	r2, #2
  404406:	07d9      	lsls	r1, r3, #31
  404408:	d402      	bmi.n	404410 <__lo0bits+0x4c>
  40440a:	085b      	lsrs	r3, r3, #1
  40440c:	d005      	beq.n	40441a <__lo0bits+0x56>
  40440e:	3201      	adds	r2, #1
  404410:	6003      	str	r3, [r0, #0]
  404412:	4610      	mov	r0, r2
  404414:	4770      	bx	lr
  404416:	2000      	movs	r0, #0
  404418:	4770      	bx	lr
  40441a:	2020      	movs	r0, #32
  40441c:	4770      	bx	lr

0040441e <__i2b>:
  40441e:	b510      	push	{r4, lr}
  404420:	460c      	mov	r4, r1
  404422:	2101      	movs	r1, #1
  404424:	f7ff ff27 	bl	404276 <_Balloc>
  404428:	2201      	movs	r2, #1
  40442a:	6144      	str	r4, [r0, #20]
  40442c:	6102      	str	r2, [r0, #16]
  40442e:	bd10      	pop	{r4, pc}

00404430 <__multiply>:
  404430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404434:	4614      	mov	r4, r2
  404436:	690a      	ldr	r2, [r1, #16]
  404438:	6923      	ldr	r3, [r4, #16]
  40443a:	429a      	cmp	r2, r3
  40443c:	bfb8      	it	lt
  40443e:	460b      	movlt	r3, r1
  404440:	4688      	mov	r8, r1
  404442:	bfbc      	itt	lt
  404444:	46a0      	movlt	r8, r4
  404446:	461c      	movlt	r4, r3
  404448:	f8d8 7010 	ldr.w	r7, [r8, #16]
  40444c:	f8d4 9010 	ldr.w	r9, [r4, #16]
  404450:	f8d8 3008 	ldr.w	r3, [r8, #8]
  404454:	f8d8 1004 	ldr.w	r1, [r8, #4]
  404458:	eb07 0609 	add.w	r6, r7, r9
  40445c:	429e      	cmp	r6, r3
  40445e:	bfc8      	it	gt
  404460:	3101      	addgt	r1, #1
  404462:	f7ff ff08 	bl	404276 <_Balloc>
  404466:	f100 0514 	add.w	r5, r0, #20
  40446a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  40446e:	462b      	mov	r3, r5
  404470:	2200      	movs	r2, #0
  404472:	4563      	cmp	r3, ip
  404474:	d202      	bcs.n	40447c <__multiply+0x4c>
  404476:	f843 2b04 	str.w	r2, [r3], #4
  40447a:	e7fa      	b.n	404472 <__multiply+0x42>
  40447c:	f104 0214 	add.w	r2, r4, #20
  404480:	f108 0114 	add.w	r1, r8, #20
  404484:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  404488:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  40448c:	9300      	str	r3, [sp, #0]
  40448e:	9b00      	ldr	r3, [sp, #0]
  404490:	9201      	str	r2, [sp, #4]
  404492:	4293      	cmp	r3, r2
  404494:	d957      	bls.n	404546 <__multiply+0x116>
  404496:	f8b2 b000 	ldrh.w	fp, [r2]
  40449a:	f1bb 0f00 	cmp.w	fp, #0
  40449e:	d023      	beq.n	4044e8 <__multiply+0xb8>
  4044a0:	4689      	mov	r9, r1
  4044a2:	46ae      	mov	lr, r5
  4044a4:	f04f 0800 	mov.w	r8, #0
  4044a8:	f859 4b04 	ldr.w	r4, [r9], #4
  4044ac:	f8be a000 	ldrh.w	sl, [lr]
  4044b0:	b2a3      	uxth	r3, r4
  4044b2:	fb0b a303 	mla	r3, fp, r3, sl
  4044b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  4044ba:	f8de 4000 	ldr.w	r4, [lr]
  4044be:	4443      	add	r3, r8
  4044c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4044c4:	fb0b 840a 	mla	r4, fp, sl, r8
  4044c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4044cc:	46f2      	mov	sl, lr
  4044ce:	b29b      	uxth	r3, r3
  4044d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4044d4:	454f      	cmp	r7, r9
  4044d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4044da:	f84a 3b04 	str.w	r3, [sl], #4
  4044de:	d901      	bls.n	4044e4 <__multiply+0xb4>
  4044e0:	46d6      	mov	lr, sl
  4044e2:	e7e1      	b.n	4044a8 <__multiply+0x78>
  4044e4:	f8ce 8004 	str.w	r8, [lr, #4]
  4044e8:	9b01      	ldr	r3, [sp, #4]
  4044ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  4044ee:	3204      	adds	r2, #4
  4044f0:	f1ba 0f00 	cmp.w	sl, #0
  4044f4:	d021      	beq.n	40453a <__multiply+0x10a>
  4044f6:	682b      	ldr	r3, [r5, #0]
  4044f8:	462c      	mov	r4, r5
  4044fa:	4689      	mov	r9, r1
  4044fc:	f04f 0800 	mov.w	r8, #0
  404500:	f8b9 e000 	ldrh.w	lr, [r9]
  404504:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  404508:	fb0a be0e 	mla	lr, sl, lr, fp
  40450c:	44f0      	add	r8, lr
  40450e:	46a3      	mov	fp, r4
  404510:	b29b      	uxth	r3, r3
  404512:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404516:	f84b 3b04 	str.w	r3, [fp], #4
  40451a:	f859 3b04 	ldr.w	r3, [r9], #4
  40451e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  404522:	0c1b      	lsrs	r3, r3, #16
  404524:	fb0a e303 	mla	r3, sl, r3, lr
  404528:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  40452c:	454f      	cmp	r7, r9
  40452e:	ea4f 4813 	mov.w	r8, r3, lsr #16
  404532:	d901      	bls.n	404538 <__multiply+0x108>
  404534:	465c      	mov	r4, fp
  404536:	e7e3      	b.n	404500 <__multiply+0xd0>
  404538:	6063      	str	r3, [r4, #4]
  40453a:	3504      	adds	r5, #4
  40453c:	e7a7      	b.n	40448e <__multiply+0x5e>
  40453e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  404542:	b913      	cbnz	r3, 40454a <__multiply+0x11a>
  404544:	3e01      	subs	r6, #1
  404546:	2e00      	cmp	r6, #0
  404548:	dcf9      	bgt.n	40453e <__multiply+0x10e>
  40454a:	6106      	str	r6, [r0, #16]
  40454c:	b003      	add	sp, #12
  40454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00404554 <__pow5mult>:
  404554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404558:	4615      	mov	r5, r2
  40455a:	f012 0203 	ands.w	r2, r2, #3
  40455e:	4606      	mov	r6, r0
  404560:	460f      	mov	r7, r1
  404562:	d007      	beq.n	404574 <__pow5mult+0x20>
  404564:	3a01      	subs	r2, #1
  404566:	4c21      	ldr	r4, [pc, #132]	; (4045ec <__pow5mult+0x98>)
  404568:	2300      	movs	r3, #0
  40456a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40456e:	f7ff fece 	bl	40430e <__multadd>
  404572:	4607      	mov	r7, r0
  404574:	10ad      	asrs	r5, r5, #2
  404576:	d036      	beq.n	4045e6 <__pow5mult+0x92>
  404578:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40457a:	b93c      	cbnz	r4, 40458c <__pow5mult+0x38>
  40457c:	2010      	movs	r0, #16
  40457e:	f7ff fe15 	bl	4041ac <malloc>
  404582:	6270      	str	r0, [r6, #36]	; 0x24
  404584:	6044      	str	r4, [r0, #4]
  404586:	6084      	str	r4, [r0, #8]
  404588:	6004      	str	r4, [r0, #0]
  40458a:	60c4      	str	r4, [r0, #12]
  40458c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  404590:	f8d8 4008 	ldr.w	r4, [r8, #8]
  404594:	b94c      	cbnz	r4, 4045aa <__pow5mult+0x56>
  404596:	f240 2171 	movw	r1, #625	; 0x271
  40459a:	4630      	mov	r0, r6
  40459c:	f7ff ff3f 	bl	40441e <__i2b>
  4045a0:	2300      	movs	r3, #0
  4045a2:	f8c8 0008 	str.w	r0, [r8, #8]
  4045a6:	4604      	mov	r4, r0
  4045a8:	6003      	str	r3, [r0, #0]
  4045aa:	f04f 0800 	mov.w	r8, #0
  4045ae:	07eb      	lsls	r3, r5, #31
  4045b0:	d50a      	bpl.n	4045c8 <__pow5mult+0x74>
  4045b2:	4639      	mov	r1, r7
  4045b4:	4622      	mov	r2, r4
  4045b6:	4630      	mov	r0, r6
  4045b8:	f7ff ff3a 	bl	404430 <__multiply>
  4045bc:	4639      	mov	r1, r7
  4045be:	4681      	mov	r9, r0
  4045c0:	4630      	mov	r0, r6
  4045c2:	f7ff fe8d 	bl	4042e0 <_Bfree>
  4045c6:	464f      	mov	r7, r9
  4045c8:	106d      	asrs	r5, r5, #1
  4045ca:	d00c      	beq.n	4045e6 <__pow5mult+0x92>
  4045cc:	6820      	ldr	r0, [r4, #0]
  4045ce:	b108      	cbz	r0, 4045d4 <__pow5mult+0x80>
  4045d0:	4604      	mov	r4, r0
  4045d2:	e7ec      	b.n	4045ae <__pow5mult+0x5a>
  4045d4:	4622      	mov	r2, r4
  4045d6:	4621      	mov	r1, r4
  4045d8:	4630      	mov	r0, r6
  4045da:	f7ff ff29 	bl	404430 <__multiply>
  4045de:	6020      	str	r0, [r4, #0]
  4045e0:	f8c0 8000 	str.w	r8, [r0]
  4045e4:	e7f4      	b.n	4045d0 <__pow5mult+0x7c>
  4045e6:	4638      	mov	r0, r7
  4045e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4045ec:	004061c8 	.word	0x004061c8

004045f0 <__lshift>:
  4045f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4045f4:	460c      	mov	r4, r1
  4045f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4045fa:	6926      	ldr	r6, [r4, #16]
  4045fc:	6849      	ldr	r1, [r1, #4]
  4045fe:	68a3      	ldr	r3, [r4, #8]
  404600:	4456      	add	r6, sl
  404602:	4607      	mov	r7, r0
  404604:	4691      	mov	r9, r2
  404606:	1c75      	adds	r5, r6, #1
  404608:	42ab      	cmp	r3, r5
  40460a:	da02      	bge.n	404612 <__lshift+0x22>
  40460c:	3101      	adds	r1, #1
  40460e:	005b      	lsls	r3, r3, #1
  404610:	e7fa      	b.n	404608 <__lshift+0x18>
  404612:	4638      	mov	r0, r7
  404614:	f7ff fe2f 	bl	404276 <_Balloc>
  404618:	2300      	movs	r3, #0
  40461a:	4680      	mov	r8, r0
  40461c:	f100 0114 	add.w	r1, r0, #20
  404620:	461a      	mov	r2, r3
  404622:	4553      	cmp	r3, sl
  404624:	da03      	bge.n	40462e <__lshift+0x3e>
  404626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40462a:	3301      	adds	r3, #1
  40462c:	e7f9      	b.n	404622 <__lshift+0x32>
  40462e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  404632:	6920      	ldr	r0, [r4, #16]
  404634:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404638:	f019 091f 	ands.w	r9, r9, #31
  40463c:	f104 0114 	add.w	r1, r4, #20
  404640:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404644:	d014      	beq.n	404670 <__lshift+0x80>
  404646:	f1c9 0c20 	rsb	ip, r9, #32
  40464a:	2200      	movs	r2, #0
  40464c:	6808      	ldr	r0, [r1, #0]
  40464e:	fa00 f009 	lsl.w	r0, r0, r9
  404652:	4302      	orrs	r2, r0
  404654:	469a      	mov	sl, r3
  404656:	f843 2b04 	str.w	r2, [r3], #4
  40465a:	f851 2b04 	ldr.w	r2, [r1], #4
  40465e:	458e      	cmp	lr, r1
  404660:	fa22 f20c 	lsr.w	r2, r2, ip
  404664:	d8f2      	bhi.n	40464c <__lshift+0x5c>
  404666:	f8ca 2004 	str.w	r2, [sl, #4]
  40466a:	b142      	cbz	r2, 40467e <__lshift+0x8e>
  40466c:	1cb5      	adds	r5, r6, #2
  40466e:	e006      	b.n	40467e <__lshift+0x8e>
  404670:	3b04      	subs	r3, #4
  404672:	f851 2b04 	ldr.w	r2, [r1], #4
  404676:	f843 2f04 	str.w	r2, [r3, #4]!
  40467a:	458e      	cmp	lr, r1
  40467c:	d8f9      	bhi.n	404672 <__lshift+0x82>
  40467e:	3d01      	subs	r5, #1
  404680:	4638      	mov	r0, r7
  404682:	f8c8 5010 	str.w	r5, [r8, #16]
  404686:	4621      	mov	r1, r4
  404688:	f7ff fe2a 	bl	4042e0 <_Bfree>
  40468c:	4640      	mov	r0, r8
  40468e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404692 <__mcmp>:
  404692:	6903      	ldr	r3, [r0, #16]
  404694:	690a      	ldr	r2, [r1, #16]
  404696:	1a9b      	subs	r3, r3, r2
  404698:	b510      	push	{r4, lr}
  40469a:	d111      	bne.n	4046c0 <__mcmp+0x2e>
  40469c:	0092      	lsls	r2, r2, #2
  40469e:	3014      	adds	r0, #20
  4046a0:	3114      	adds	r1, #20
  4046a2:	1883      	adds	r3, r0, r2
  4046a4:	440a      	add	r2, r1
  4046a6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4046aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  4046ae:	428c      	cmp	r4, r1
  4046b0:	d002      	beq.n	4046b8 <__mcmp+0x26>
  4046b2:	d307      	bcc.n	4046c4 <__mcmp+0x32>
  4046b4:	2001      	movs	r0, #1
  4046b6:	bd10      	pop	{r4, pc}
  4046b8:	4298      	cmp	r0, r3
  4046ba:	d3f4      	bcc.n	4046a6 <__mcmp+0x14>
  4046bc:	2000      	movs	r0, #0
  4046be:	bd10      	pop	{r4, pc}
  4046c0:	4618      	mov	r0, r3
  4046c2:	bd10      	pop	{r4, pc}
  4046c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4046c8:	bd10      	pop	{r4, pc}

004046ca <__mdiff>:
  4046ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4046ce:	460c      	mov	r4, r1
  4046d0:	4607      	mov	r7, r0
  4046d2:	4611      	mov	r1, r2
  4046d4:	4620      	mov	r0, r4
  4046d6:	4615      	mov	r5, r2
  4046d8:	f7ff ffdb 	bl	404692 <__mcmp>
  4046dc:	1e06      	subs	r6, r0, #0
  4046de:	d108      	bne.n	4046f2 <__mdiff+0x28>
  4046e0:	4631      	mov	r1, r6
  4046e2:	4638      	mov	r0, r7
  4046e4:	f7ff fdc7 	bl	404276 <_Balloc>
  4046e8:	2301      	movs	r3, #1
  4046ea:	6103      	str	r3, [r0, #16]
  4046ec:	6146      	str	r6, [r0, #20]
  4046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4046f2:	bfbc      	itt	lt
  4046f4:	4623      	movlt	r3, r4
  4046f6:	462c      	movlt	r4, r5
  4046f8:	4638      	mov	r0, r7
  4046fa:	6861      	ldr	r1, [r4, #4]
  4046fc:	bfba      	itte	lt
  4046fe:	461d      	movlt	r5, r3
  404700:	2601      	movlt	r6, #1
  404702:	2600      	movge	r6, #0
  404704:	f7ff fdb7 	bl	404276 <_Balloc>
  404708:	692b      	ldr	r3, [r5, #16]
  40470a:	60c6      	str	r6, [r0, #12]
  40470c:	6926      	ldr	r6, [r4, #16]
  40470e:	f105 0914 	add.w	r9, r5, #20
  404712:	3414      	adds	r4, #20
  404714:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  404718:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40471c:	f100 0514 	add.w	r5, r0, #20
  404720:	f04f 0c00 	mov.w	ip, #0
  404724:	f854 3b04 	ldr.w	r3, [r4], #4
  404728:	f859 2b04 	ldr.w	r2, [r9], #4
  40472c:	fa1c f183 	uxtah	r1, ip, r3
  404730:	fa1f fe82 	uxth.w	lr, r2
  404734:	0c12      	lsrs	r2, r2, #16
  404736:	ebce 0101 	rsb	r1, lr, r1
  40473a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  40473e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404742:	b289      	uxth	r1, r1
  404744:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404748:	45c8      	cmp	r8, r9
  40474a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40474e:	46a6      	mov	lr, r4
  404750:	f845 3b04 	str.w	r3, [r5], #4
  404754:	d8e6      	bhi.n	404724 <__mdiff+0x5a>
  404756:	45be      	cmp	lr, r7
  404758:	d20e      	bcs.n	404778 <__mdiff+0xae>
  40475a:	f85e 1b04 	ldr.w	r1, [lr], #4
  40475e:	fa1c f281 	uxtah	r2, ip, r1
  404762:	1413      	asrs	r3, r2, #16
  404764:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  404768:	b292      	uxth	r2, r2
  40476a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40476e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404772:	f845 2b04 	str.w	r2, [r5], #4
  404776:	e7ee      	b.n	404756 <__mdiff+0x8c>
  404778:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40477c:	b90b      	cbnz	r3, 404782 <__mdiff+0xb8>
  40477e:	3e01      	subs	r6, #1
  404780:	e7fa      	b.n	404778 <__mdiff+0xae>
  404782:	6106      	str	r6, [r0, #16]
  404784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00404788 <__d2b>:
  404788:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  40478c:	2101      	movs	r1, #1
  40478e:	461c      	mov	r4, r3
  404790:	4690      	mov	r8, r2
  404792:	9e08      	ldr	r6, [sp, #32]
  404794:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404796:	f7ff fd6e 	bl	404276 <_Balloc>
  40479a:	f3c4 0213 	ubfx	r2, r4, #0, #20
  40479e:	f3c4 540a 	ubfx	r4, r4, #20, #11
  4047a2:	4607      	mov	r7, r0
  4047a4:	b10c      	cbz	r4, 4047aa <__d2b+0x22>
  4047a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4047aa:	9201      	str	r2, [sp, #4]
  4047ac:	f1b8 0f00 	cmp.w	r8, #0
  4047b0:	d019      	beq.n	4047e6 <__d2b+0x5e>
  4047b2:	a802      	add	r0, sp, #8
  4047b4:	f840 8d08 	str.w	r8, [r0, #-8]!
  4047b8:	f7ff fe04 	bl	4043c4 <__lo0bits>
  4047bc:	9b00      	ldr	r3, [sp, #0]
  4047be:	b148      	cbz	r0, 4047d4 <__d2b+0x4c>
  4047c0:	9a01      	ldr	r2, [sp, #4]
  4047c2:	f1c0 0120 	rsb	r1, r0, #32
  4047c6:	fa02 f101 	lsl.w	r1, r2, r1
  4047ca:	430b      	orrs	r3, r1
  4047cc:	40c2      	lsrs	r2, r0
  4047ce:	617b      	str	r3, [r7, #20]
  4047d0:	9201      	str	r2, [sp, #4]
  4047d2:	e000      	b.n	4047d6 <__d2b+0x4e>
  4047d4:	617b      	str	r3, [r7, #20]
  4047d6:	9b01      	ldr	r3, [sp, #4]
  4047d8:	61bb      	str	r3, [r7, #24]
  4047da:	2b00      	cmp	r3, #0
  4047dc:	bf14      	ite	ne
  4047de:	2102      	movne	r1, #2
  4047e0:	2101      	moveq	r1, #1
  4047e2:	6139      	str	r1, [r7, #16]
  4047e4:	e007      	b.n	4047f6 <__d2b+0x6e>
  4047e6:	a801      	add	r0, sp, #4
  4047e8:	f7ff fdec 	bl	4043c4 <__lo0bits>
  4047ec:	9b01      	ldr	r3, [sp, #4]
  4047ee:	617b      	str	r3, [r7, #20]
  4047f0:	2101      	movs	r1, #1
  4047f2:	6139      	str	r1, [r7, #16]
  4047f4:	3020      	adds	r0, #32
  4047f6:	b134      	cbz	r4, 404806 <__d2b+0x7e>
  4047f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  4047fc:	4404      	add	r4, r0
  4047fe:	6034      	str	r4, [r6, #0]
  404800:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404804:	e009      	b.n	40481a <__d2b+0x92>
  404806:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40480a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40480e:	6030      	str	r0, [r6, #0]
  404810:	6918      	ldr	r0, [r3, #16]
  404812:	f7ff fdb7 	bl	404384 <__hi0bits>
  404816:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40481a:	6028      	str	r0, [r5, #0]
  40481c:	4638      	mov	r0, r7
  40481e:	b002      	add	sp, #8
  404820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404824 <_calloc_r>:
  404824:	b538      	push	{r3, r4, r5, lr}
  404826:	fb02 f401 	mul.w	r4, r2, r1
  40482a:	4621      	mov	r1, r4
  40482c:	f000 f856 	bl	4048dc <_malloc_r>
  404830:	4605      	mov	r5, r0
  404832:	b118      	cbz	r0, 40483c <_calloc_r+0x18>
  404834:	4622      	mov	r2, r4
  404836:	2100      	movs	r1, #0
  404838:	f7fd fe32 	bl	4024a0 <memset>
  40483c:	4628      	mov	r0, r5
  40483e:	bd38      	pop	{r3, r4, r5, pc}

00404840 <_free_r>:
  404840:	b538      	push	{r3, r4, r5, lr}
  404842:	4605      	mov	r5, r0
  404844:	2900      	cmp	r1, #0
  404846:	d046      	beq.n	4048d6 <_free_r+0x96>
  404848:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40484c:	1f0c      	subs	r4, r1, #4
  40484e:	2b00      	cmp	r3, #0
  404850:	bfb8      	it	lt
  404852:	18e4      	addlt	r4, r4, r3
  404854:	f000 faa0 	bl	404d98 <__malloc_lock>
  404858:	4a1f      	ldr	r2, [pc, #124]	; (4048d8 <_free_r+0x98>)
  40485a:	6813      	ldr	r3, [r2, #0]
  40485c:	4611      	mov	r1, r2
  40485e:	b913      	cbnz	r3, 404866 <_free_r+0x26>
  404860:	6063      	str	r3, [r4, #4]
  404862:	6014      	str	r4, [r2, #0]
  404864:	e032      	b.n	4048cc <_free_r+0x8c>
  404866:	42a3      	cmp	r3, r4
  404868:	d90e      	bls.n	404888 <_free_r+0x48>
  40486a:	6822      	ldr	r2, [r4, #0]
  40486c:	18a0      	adds	r0, r4, r2
  40486e:	4283      	cmp	r3, r0
  404870:	bf04      	itt	eq
  404872:	6818      	ldreq	r0, [r3, #0]
  404874:	685b      	ldreq	r3, [r3, #4]
  404876:	6063      	str	r3, [r4, #4]
  404878:	bf04      	itt	eq
  40487a:	1812      	addeq	r2, r2, r0
  40487c:	6022      	streq	r2, [r4, #0]
  40487e:	600c      	str	r4, [r1, #0]
  404880:	e024      	b.n	4048cc <_free_r+0x8c>
  404882:	42a2      	cmp	r2, r4
  404884:	d803      	bhi.n	40488e <_free_r+0x4e>
  404886:	4613      	mov	r3, r2
  404888:	685a      	ldr	r2, [r3, #4]
  40488a:	2a00      	cmp	r2, #0
  40488c:	d1f9      	bne.n	404882 <_free_r+0x42>
  40488e:	6818      	ldr	r0, [r3, #0]
  404890:	1819      	adds	r1, r3, r0
  404892:	42a1      	cmp	r1, r4
  404894:	d10b      	bne.n	4048ae <_free_r+0x6e>
  404896:	6821      	ldr	r1, [r4, #0]
  404898:	4401      	add	r1, r0
  40489a:	1858      	adds	r0, r3, r1
  40489c:	4282      	cmp	r2, r0
  40489e:	6019      	str	r1, [r3, #0]
  4048a0:	d114      	bne.n	4048cc <_free_r+0x8c>
  4048a2:	6810      	ldr	r0, [r2, #0]
  4048a4:	6852      	ldr	r2, [r2, #4]
  4048a6:	605a      	str	r2, [r3, #4]
  4048a8:	4401      	add	r1, r0
  4048aa:	6019      	str	r1, [r3, #0]
  4048ac:	e00e      	b.n	4048cc <_free_r+0x8c>
  4048ae:	d902      	bls.n	4048b6 <_free_r+0x76>
  4048b0:	230c      	movs	r3, #12
  4048b2:	602b      	str	r3, [r5, #0]
  4048b4:	e00a      	b.n	4048cc <_free_r+0x8c>
  4048b6:	6821      	ldr	r1, [r4, #0]
  4048b8:	1860      	adds	r0, r4, r1
  4048ba:	4282      	cmp	r2, r0
  4048bc:	bf04      	itt	eq
  4048be:	6810      	ldreq	r0, [r2, #0]
  4048c0:	6852      	ldreq	r2, [r2, #4]
  4048c2:	6062      	str	r2, [r4, #4]
  4048c4:	bf04      	itt	eq
  4048c6:	1809      	addeq	r1, r1, r0
  4048c8:	6021      	streq	r1, [r4, #0]
  4048ca:	605c      	str	r4, [r3, #4]
  4048cc:	4628      	mov	r0, r5
  4048ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4048d2:	f000 ba62 	b.w	404d9a <__malloc_unlock>
  4048d6:	bd38      	pop	{r3, r4, r5, pc}
  4048d8:	200002b8 	.word	0x200002b8

004048dc <_malloc_r>:
  4048dc:	b570      	push	{r4, r5, r6, lr}
  4048de:	1ccd      	adds	r5, r1, #3
  4048e0:	f025 0503 	bic.w	r5, r5, #3
  4048e4:	3508      	adds	r5, #8
  4048e6:	2d0c      	cmp	r5, #12
  4048e8:	bf38      	it	cc
  4048ea:	250c      	movcc	r5, #12
  4048ec:	2d00      	cmp	r5, #0
  4048ee:	4606      	mov	r6, r0
  4048f0:	db01      	blt.n	4048f6 <_malloc_r+0x1a>
  4048f2:	42a9      	cmp	r1, r5
  4048f4:	d902      	bls.n	4048fc <_malloc_r+0x20>
  4048f6:	230c      	movs	r3, #12
  4048f8:	6033      	str	r3, [r6, #0]
  4048fa:	e046      	b.n	40498a <_malloc_r+0xae>
  4048fc:	f000 fa4c 	bl	404d98 <__malloc_lock>
  404900:	4b23      	ldr	r3, [pc, #140]	; (404990 <_malloc_r+0xb4>)
  404902:	681c      	ldr	r4, [r3, #0]
  404904:	461a      	mov	r2, r3
  404906:	4621      	mov	r1, r4
  404908:	b1a1      	cbz	r1, 404934 <_malloc_r+0x58>
  40490a:	680b      	ldr	r3, [r1, #0]
  40490c:	1b5b      	subs	r3, r3, r5
  40490e:	d40e      	bmi.n	40492e <_malloc_r+0x52>
  404910:	2b0b      	cmp	r3, #11
  404912:	d903      	bls.n	40491c <_malloc_r+0x40>
  404914:	600b      	str	r3, [r1, #0]
  404916:	18cc      	adds	r4, r1, r3
  404918:	50cd      	str	r5, [r1, r3]
  40491a:	e01e      	b.n	40495a <_malloc_r+0x7e>
  40491c:	428c      	cmp	r4, r1
  40491e:	bf0d      	iteet	eq
  404920:	6863      	ldreq	r3, [r4, #4]
  404922:	684b      	ldrne	r3, [r1, #4]
  404924:	6063      	strne	r3, [r4, #4]
  404926:	6013      	streq	r3, [r2, #0]
  404928:	bf18      	it	ne
  40492a:	460c      	movne	r4, r1
  40492c:	e015      	b.n	40495a <_malloc_r+0x7e>
  40492e:	460c      	mov	r4, r1
  404930:	6849      	ldr	r1, [r1, #4]
  404932:	e7e9      	b.n	404908 <_malloc_r+0x2c>
  404934:	4c17      	ldr	r4, [pc, #92]	; (404994 <_malloc_r+0xb8>)
  404936:	6823      	ldr	r3, [r4, #0]
  404938:	b91b      	cbnz	r3, 404942 <_malloc_r+0x66>
  40493a:	4630      	mov	r0, r6
  40493c:	f000 f970 	bl	404c20 <_sbrk_r>
  404940:	6020      	str	r0, [r4, #0]
  404942:	4629      	mov	r1, r5
  404944:	4630      	mov	r0, r6
  404946:	f000 f96b 	bl	404c20 <_sbrk_r>
  40494a:	1c43      	adds	r3, r0, #1
  40494c:	d018      	beq.n	404980 <_malloc_r+0xa4>
  40494e:	1cc4      	adds	r4, r0, #3
  404950:	f024 0403 	bic.w	r4, r4, #3
  404954:	42a0      	cmp	r0, r4
  404956:	d10d      	bne.n	404974 <_malloc_r+0x98>
  404958:	6025      	str	r5, [r4, #0]
  40495a:	4630      	mov	r0, r6
  40495c:	f000 fa1d 	bl	404d9a <__malloc_unlock>
  404960:	f104 000b 	add.w	r0, r4, #11
  404964:	1d23      	adds	r3, r4, #4
  404966:	f020 0007 	bic.w	r0, r0, #7
  40496a:	1ac3      	subs	r3, r0, r3
  40496c:	d00e      	beq.n	40498c <_malloc_r+0xb0>
  40496e:	425a      	negs	r2, r3
  404970:	50e2      	str	r2, [r4, r3]
  404972:	bd70      	pop	{r4, r5, r6, pc}
  404974:	1a21      	subs	r1, r4, r0
  404976:	4630      	mov	r0, r6
  404978:	f000 f952 	bl	404c20 <_sbrk_r>
  40497c:	3001      	adds	r0, #1
  40497e:	d1eb      	bne.n	404958 <_malloc_r+0x7c>
  404980:	230c      	movs	r3, #12
  404982:	6033      	str	r3, [r6, #0]
  404984:	4630      	mov	r0, r6
  404986:	f000 fa08 	bl	404d9a <__malloc_unlock>
  40498a:	2000      	movs	r0, #0
  40498c:	bd70      	pop	{r4, r5, r6, pc}
  40498e:	bf00      	nop
  404990:	200002b8 	.word	0x200002b8
  404994:	200002b4 	.word	0x200002b4

00404998 <__sfputc_r>:
  404998:	6893      	ldr	r3, [r2, #8]
  40499a:	3b01      	subs	r3, #1
  40499c:	2b00      	cmp	r3, #0
  40499e:	b410      	push	{r4}
  4049a0:	6093      	str	r3, [r2, #8]
  4049a2:	da08      	bge.n	4049b6 <__sfputc_r+0x1e>
  4049a4:	6994      	ldr	r4, [r2, #24]
  4049a6:	42a3      	cmp	r3, r4
  4049a8:	db02      	blt.n	4049b0 <__sfputc_r+0x18>
  4049aa:	b2cb      	uxtb	r3, r1
  4049ac:	2b0a      	cmp	r3, #10
  4049ae:	d102      	bne.n	4049b6 <__sfputc_r+0x1e>
  4049b0:	bc10      	pop	{r4}
  4049b2:	f7fe bb21 	b.w	402ff8 <__swbuf_r>
  4049b6:	6813      	ldr	r3, [r2, #0]
  4049b8:	1c58      	adds	r0, r3, #1
  4049ba:	6010      	str	r0, [r2, #0]
  4049bc:	7019      	strb	r1, [r3, #0]
  4049be:	b2c8      	uxtb	r0, r1
  4049c0:	bc10      	pop	{r4}
  4049c2:	4770      	bx	lr

004049c4 <__sfputs_r>:
  4049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4049c6:	4606      	mov	r6, r0
  4049c8:	460f      	mov	r7, r1
  4049ca:	4614      	mov	r4, r2
  4049cc:	18d5      	adds	r5, r2, r3
  4049ce:	42ac      	cmp	r4, r5
  4049d0:	d008      	beq.n	4049e4 <__sfputs_r+0x20>
  4049d2:	463a      	mov	r2, r7
  4049d4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4049d8:	4630      	mov	r0, r6
  4049da:	f7ff ffdd 	bl	404998 <__sfputc_r>
  4049de:	1c43      	adds	r3, r0, #1
  4049e0:	d1f5      	bne.n	4049ce <__sfputs_r+0xa>
  4049e2:	e000      	b.n	4049e6 <__sfputs_r+0x22>
  4049e4:	2000      	movs	r0, #0
  4049e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004049e8 <_vfiprintf_r>:
  4049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049ec:	b09d      	sub	sp, #116	; 0x74
  4049ee:	460c      	mov	r4, r1
  4049f0:	4617      	mov	r7, r2
  4049f2:	9303      	str	r3, [sp, #12]
  4049f4:	4606      	mov	r6, r0
  4049f6:	b118      	cbz	r0, 404a00 <_vfiprintf_r+0x18>
  4049f8:	6983      	ldr	r3, [r0, #24]
  4049fa:	b90b      	cbnz	r3, 404a00 <_vfiprintf_r+0x18>
  4049fc:	f7ff fade 	bl	403fbc <__sinit>
  404a00:	4b7f      	ldr	r3, [pc, #508]	; (404c00 <_vfiprintf_r+0x218>)
  404a02:	429c      	cmp	r4, r3
  404a04:	d101      	bne.n	404a0a <_vfiprintf_r+0x22>
  404a06:	6874      	ldr	r4, [r6, #4]
  404a08:	e008      	b.n	404a1c <_vfiprintf_r+0x34>
  404a0a:	4b7e      	ldr	r3, [pc, #504]	; (404c04 <_vfiprintf_r+0x21c>)
  404a0c:	429c      	cmp	r4, r3
  404a0e:	d101      	bne.n	404a14 <_vfiprintf_r+0x2c>
  404a10:	68b4      	ldr	r4, [r6, #8]
  404a12:	e003      	b.n	404a1c <_vfiprintf_r+0x34>
  404a14:	4b7c      	ldr	r3, [pc, #496]	; (404c08 <_vfiprintf_r+0x220>)
  404a16:	429c      	cmp	r4, r3
  404a18:	bf08      	it	eq
  404a1a:	68f4      	ldreq	r4, [r6, #12]
  404a1c:	89a3      	ldrh	r3, [r4, #12]
  404a1e:	0718      	lsls	r0, r3, #28
  404a20:	d50c      	bpl.n	404a3c <_vfiprintf_r+0x54>
  404a22:	6923      	ldr	r3, [r4, #16]
  404a24:	b153      	cbz	r3, 404a3c <_vfiprintf_r+0x54>
  404a26:	2300      	movs	r3, #0
  404a28:	9309      	str	r3, [sp, #36]	; 0x24
  404a2a:	2320      	movs	r3, #32
  404a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404a30:	2330      	movs	r3, #48	; 0x30
  404a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404a36:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 404c0c <_vfiprintf_r+0x224>
  404a3a:	e044      	b.n	404ac6 <_vfiprintf_r+0xde>
  404a3c:	4621      	mov	r1, r4
  404a3e:	4630      	mov	r0, r6
  404a40:	f7fe fb2e 	bl	4030a0 <__swsetup_r>
  404a44:	2800      	cmp	r0, #0
  404a46:	d0ee      	beq.n	404a26 <_vfiprintf_r+0x3e>
  404a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404a4c:	e0d5      	b.n	404bfa <_vfiprintf_r+0x212>
  404a4e:	9a03      	ldr	r2, [sp, #12]
  404a50:	1d11      	adds	r1, r2, #4
  404a52:	6812      	ldr	r2, [r2, #0]
  404a54:	9103      	str	r1, [sp, #12]
  404a56:	2a00      	cmp	r2, #0
  404a58:	f280 808c 	bge.w	404b74 <_vfiprintf_r+0x18c>
  404a5c:	4252      	negs	r2, r2
  404a5e:	f043 0002 	orr.w	r0, r3, #2
  404a62:	9207      	str	r2, [sp, #28]
  404a64:	9004      	str	r0, [sp, #16]
  404a66:	f898 3000 	ldrb.w	r3, [r8]
  404a6a:	2b2e      	cmp	r3, #46	; 0x2e
  404a6c:	f000 8084 	beq.w	404b78 <_vfiprintf_r+0x190>
  404a70:	2203      	movs	r2, #3
  404a72:	f898 1000 	ldrb.w	r1, [r8]
  404a76:	4865      	ldr	r0, [pc, #404]	; (404c0c <_vfiprintf_r+0x224>)
  404a78:	f7ff fba2 	bl	4041c0 <memchr>
  404a7c:	b148      	cbz	r0, 404a92 <_vfiprintf_r+0xaa>
  404a7e:	2340      	movs	r3, #64	; 0x40
  404a80:	ebcb 0000 	rsb	r0, fp, r0
  404a84:	fa03 f000 	lsl.w	r0, r3, r0
  404a88:	9b04      	ldr	r3, [sp, #16]
  404a8a:	4318      	orrs	r0, r3
  404a8c:	9004      	str	r0, [sp, #16]
  404a8e:	f108 0801 	add.w	r8, r8, #1
  404a92:	f898 1000 	ldrb.w	r1, [r8]
  404a96:	485e      	ldr	r0, [pc, #376]	; (404c10 <_vfiprintf_r+0x228>)
  404a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  404a9c:	2206      	movs	r2, #6
  404a9e:	f108 0701 	add.w	r7, r8, #1
  404aa2:	f7ff fb8d 	bl	4041c0 <memchr>
  404aa6:	2800      	cmp	r0, #0
  404aa8:	f000 8095 	beq.w	404bd6 <_vfiprintf_r+0x1ee>
  404aac:	4b59      	ldr	r3, [pc, #356]	; (404c14 <_vfiprintf_r+0x22c>)
  404aae:	2b00      	cmp	r3, #0
  404ab0:	f040 8088 	bne.w	404bc4 <_vfiprintf_r+0x1dc>
  404ab4:	9b03      	ldr	r3, [sp, #12]
  404ab6:	3307      	adds	r3, #7
  404ab8:	f023 0307 	bic.w	r3, r3, #7
  404abc:	3308      	adds	r3, #8
  404abe:	9303      	str	r3, [sp, #12]
  404ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ac2:	4453      	add	r3, sl
  404ac4:	9309      	str	r3, [sp, #36]	; 0x24
  404ac6:	46b8      	mov	r8, r7
  404ac8:	4645      	mov	r5, r8
  404aca:	f815 3b01 	ldrb.w	r3, [r5], #1
  404ace:	b91b      	cbnz	r3, 404ad8 <_vfiprintf_r+0xf0>
  404ad0:	ebb8 0907 	subs.w	r9, r8, r7
  404ad4:	d00f      	beq.n	404af6 <_vfiprintf_r+0x10e>
  404ad6:	e003      	b.n	404ae0 <_vfiprintf_r+0xf8>
  404ad8:	2b25      	cmp	r3, #37	; 0x25
  404ada:	d0f9      	beq.n	404ad0 <_vfiprintf_r+0xe8>
  404adc:	46a8      	mov	r8, r5
  404ade:	e7f3      	b.n	404ac8 <_vfiprintf_r+0xe0>
  404ae0:	464b      	mov	r3, r9
  404ae2:	463a      	mov	r2, r7
  404ae4:	4621      	mov	r1, r4
  404ae6:	4630      	mov	r0, r6
  404ae8:	f7ff ff6c 	bl	4049c4 <__sfputs_r>
  404aec:	3001      	adds	r0, #1
  404aee:	d07f      	beq.n	404bf0 <_vfiprintf_r+0x208>
  404af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404af2:	444b      	add	r3, r9
  404af4:	9309      	str	r3, [sp, #36]	; 0x24
  404af6:	f898 3000 	ldrb.w	r3, [r8]
  404afa:	2b00      	cmp	r3, #0
  404afc:	d078      	beq.n	404bf0 <_vfiprintf_r+0x208>
  404afe:	2300      	movs	r3, #0
  404b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  404b04:	9304      	str	r3, [sp, #16]
  404b06:	9307      	str	r3, [sp, #28]
  404b08:	9205      	str	r2, [sp, #20]
  404b0a:	9306      	str	r3, [sp, #24]
  404b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404b10:	931a      	str	r3, [sp, #104]	; 0x68
  404b12:	2701      	movs	r7, #1
  404b14:	2205      	movs	r2, #5
  404b16:	7829      	ldrb	r1, [r5, #0]
  404b18:	483f      	ldr	r0, [pc, #252]	; (404c18 <_vfiprintf_r+0x230>)
  404b1a:	f7ff fb51 	bl	4041c0 <memchr>
  404b1e:	f105 0801 	add.w	r8, r5, #1
  404b22:	9b04      	ldr	r3, [sp, #16]
  404b24:	b138      	cbz	r0, 404b36 <_vfiprintf_r+0x14e>
  404b26:	4a3c      	ldr	r2, [pc, #240]	; (404c18 <_vfiprintf_r+0x230>)
  404b28:	1a80      	subs	r0, r0, r2
  404b2a:	fa07 f000 	lsl.w	r0, r7, r0
  404b2e:	4318      	orrs	r0, r3
  404b30:	9004      	str	r0, [sp, #16]
  404b32:	4645      	mov	r5, r8
  404b34:	e7ee      	b.n	404b14 <_vfiprintf_r+0x12c>
  404b36:	06d9      	lsls	r1, r3, #27
  404b38:	bf44      	itt	mi
  404b3a:	2220      	movmi	r2, #32
  404b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404b40:	071a      	lsls	r2, r3, #28
  404b42:	bf44      	itt	mi
  404b44:	222b      	movmi	r2, #43	; 0x2b
  404b46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404b4a:	782a      	ldrb	r2, [r5, #0]
  404b4c:	2a2a      	cmp	r2, #42	; 0x2a
  404b4e:	f43f af7e 	beq.w	404a4e <_vfiprintf_r+0x66>
  404b52:	9a07      	ldr	r2, [sp, #28]
  404b54:	2100      	movs	r1, #0
  404b56:	200a      	movs	r0, #10
  404b58:	46a8      	mov	r8, r5
  404b5a:	3501      	adds	r5, #1
  404b5c:	f898 3000 	ldrb.w	r3, [r8]
  404b60:	3b30      	subs	r3, #48	; 0x30
  404b62:	2b09      	cmp	r3, #9
  404b64:	d803      	bhi.n	404b6e <_vfiprintf_r+0x186>
  404b66:	fb00 3202 	mla	r2, r0, r2, r3
  404b6a:	2101      	movs	r1, #1
  404b6c:	e7f4      	b.n	404b58 <_vfiprintf_r+0x170>
  404b6e:	2900      	cmp	r1, #0
  404b70:	f43f af79 	beq.w	404a66 <_vfiprintf_r+0x7e>
  404b74:	9207      	str	r2, [sp, #28]
  404b76:	e776      	b.n	404a66 <_vfiprintf_r+0x7e>
  404b78:	f898 3001 	ldrb.w	r3, [r8, #1]
  404b7c:	2b2a      	cmp	r3, #42	; 0x2a
  404b7e:	d10b      	bne.n	404b98 <_vfiprintf_r+0x1b0>
  404b80:	9b03      	ldr	r3, [sp, #12]
  404b82:	1d1a      	adds	r2, r3, #4
  404b84:	681b      	ldr	r3, [r3, #0]
  404b86:	9203      	str	r2, [sp, #12]
  404b88:	2b00      	cmp	r3, #0
  404b8a:	bfb8      	it	lt
  404b8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  404b90:	f108 0802 	add.w	r8, r8, #2
  404b94:	9305      	str	r3, [sp, #20]
  404b96:	e76b      	b.n	404a70 <_vfiprintf_r+0x88>
  404b98:	2300      	movs	r3, #0
  404b9a:	9305      	str	r3, [sp, #20]
  404b9c:	f108 0001 	add.w	r0, r8, #1
  404ba0:	4619      	mov	r1, r3
  404ba2:	250a      	movs	r5, #10
  404ba4:	4680      	mov	r8, r0
  404ba6:	3001      	adds	r0, #1
  404ba8:	f898 2000 	ldrb.w	r2, [r8]
  404bac:	3a30      	subs	r2, #48	; 0x30
  404bae:	2a09      	cmp	r2, #9
  404bb0:	d803      	bhi.n	404bba <_vfiprintf_r+0x1d2>
  404bb2:	fb05 2101 	mla	r1, r5, r1, r2
  404bb6:	2301      	movs	r3, #1
  404bb8:	e7f4      	b.n	404ba4 <_vfiprintf_r+0x1bc>
  404bba:	2b00      	cmp	r3, #0
  404bbc:	f43f af58 	beq.w	404a70 <_vfiprintf_r+0x88>
  404bc0:	9105      	str	r1, [sp, #20]
  404bc2:	e755      	b.n	404a70 <_vfiprintf_r+0x88>
  404bc4:	ab03      	add	r3, sp, #12
  404bc6:	9300      	str	r3, [sp, #0]
  404bc8:	4622      	mov	r2, r4
  404bca:	4b14      	ldr	r3, [pc, #80]	; (404c1c <_vfiprintf_r+0x234>)
  404bcc:	a904      	add	r1, sp, #16
  404bce:	4630      	mov	r0, r6
  404bd0:	f7fd fcfe 	bl	4025d0 <_printf_float>
  404bd4:	e007      	b.n	404be6 <_vfiprintf_r+0x1fe>
  404bd6:	ab03      	add	r3, sp, #12
  404bd8:	9300      	str	r3, [sp, #0]
  404bda:	4622      	mov	r2, r4
  404bdc:	4b0f      	ldr	r3, [pc, #60]	; (404c1c <_vfiprintf_r+0x234>)
  404bde:	a904      	add	r1, sp, #16
  404be0:	4630      	mov	r0, r6
  404be2:	f7fd ffaf 	bl	402b44 <_printf_i>
  404be6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  404bea:	4682      	mov	sl, r0
  404bec:	f47f af68 	bne.w	404ac0 <_vfiprintf_r+0xd8>
  404bf0:	89a3      	ldrh	r3, [r4, #12]
  404bf2:	065b      	lsls	r3, r3, #25
  404bf4:	f53f af28 	bmi.w	404a48 <_vfiprintf_r+0x60>
  404bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
  404bfa:	b01d      	add	sp, #116	; 0x74
  404bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c00:	00406078 	.word	0x00406078
  404c04:	00406098 	.word	0x00406098
  404c08:	004060b8 	.word	0x004060b8
  404c0c:	004061da 	.word	0x004061da
  404c10:	004061de 	.word	0x004061de
  404c14:	004025d1 	.word	0x004025d1
  404c18:	004061d4 	.word	0x004061d4
  404c1c:	004049c5 	.word	0x004049c5

00404c20 <_sbrk_r>:
  404c20:	b538      	push	{r3, r4, r5, lr}
  404c22:	4c06      	ldr	r4, [pc, #24]	; (404c3c <_sbrk_r+0x1c>)
  404c24:	2300      	movs	r3, #0
  404c26:	4605      	mov	r5, r0
  404c28:	4608      	mov	r0, r1
  404c2a:	6023      	str	r3, [r4, #0]
  404c2c:	f7fd f854 	bl	401cd8 <_sbrk>
  404c30:	1c43      	adds	r3, r0, #1
  404c32:	d102      	bne.n	404c3a <_sbrk_r+0x1a>
  404c34:	6823      	ldr	r3, [r4, #0]
  404c36:	b103      	cbz	r3, 404c3a <_sbrk_r+0x1a>
  404c38:	602b      	str	r3, [r5, #0]
  404c3a:	bd38      	pop	{r3, r4, r5, pc}
  404c3c:	20000370 	.word	0x20000370

00404c40 <__sread>:
  404c40:	b510      	push	{r4, lr}
  404c42:	460c      	mov	r4, r1
  404c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404c48:	f000 f8a8 	bl	404d9c <_read_r>
  404c4c:	2800      	cmp	r0, #0
  404c4e:	bfab      	itete	ge
  404c50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  404c52:	89a3      	ldrhlt	r3, [r4, #12]
  404c54:	181b      	addge	r3, r3, r0
  404c56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  404c5a:	bfac      	ite	ge
  404c5c:	6563      	strge	r3, [r4, #84]	; 0x54
  404c5e:	81a3      	strhlt	r3, [r4, #12]
  404c60:	bd10      	pop	{r4, pc}

00404c62 <__swrite>:
  404c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404c66:	461f      	mov	r7, r3
  404c68:	898b      	ldrh	r3, [r1, #12]
  404c6a:	05db      	lsls	r3, r3, #23
  404c6c:	4605      	mov	r5, r0
  404c6e:	460c      	mov	r4, r1
  404c70:	4616      	mov	r6, r2
  404c72:	d505      	bpl.n	404c80 <__swrite+0x1e>
  404c74:	2302      	movs	r3, #2
  404c76:	2200      	movs	r2, #0
  404c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404c7c:	f000 f868 	bl	404d50 <_lseek_r>
  404c80:	89a3      	ldrh	r3, [r4, #12]
  404c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404c8a:	81a3      	strh	r3, [r4, #12]
  404c8c:	4632      	mov	r2, r6
  404c8e:	463b      	mov	r3, r7
  404c90:	4628      	mov	r0, r5
  404c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404c96:	f000 b817 	b.w	404cc8 <_write_r>

00404c9a <__sseek>:
  404c9a:	b510      	push	{r4, lr}
  404c9c:	460c      	mov	r4, r1
  404c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ca2:	f000 f855 	bl	404d50 <_lseek_r>
  404ca6:	1c43      	adds	r3, r0, #1
  404ca8:	89a3      	ldrh	r3, [r4, #12]
  404caa:	bf15      	itete	ne
  404cac:	6560      	strne	r0, [r4, #84]	; 0x54
  404cae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404cb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404cb6:	81a3      	strheq	r3, [r4, #12]
  404cb8:	bf18      	it	ne
  404cba:	81a3      	strhne	r3, [r4, #12]
  404cbc:	bd10      	pop	{r4, pc}

00404cbe <__sclose>:
  404cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404cc2:	f000 b813 	b.w	404cec <_close_r>
	...

00404cc8 <_write_r>:
  404cc8:	b538      	push	{r3, r4, r5, lr}
  404cca:	4c07      	ldr	r4, [pc, #28]	; (404ce8 <_write_r+0x20>)
  404ccc:	4605      	mov	r5, r0
  404cce:	4608      	mov	r0, r1
  404cd0:	4611      	mov	r1, r2
  404cd2:	2200      	movs	r2, #0
  404cd4:	6022      	str	r2, [r4, #0]
  404cd6:	461a      	mov	r2, r3
  404cd8:	f7fb fa68 	bl	4001ac <_write>
  404cdc:	1c43      	adds	r3, r0, #1
  404cde:	d102      	bne.n	404ce6 <_write_r+0x1e>
  404ce0:	6823      	ldr	r3, [r4, #0]
  404ce2:	b103      	cbz	r3, 404ce6 <_write_r+0x1e>
  404ce4:	602b      	str	r3, [r5, #0]
  404ce6:	bd38      	pop	{r3, r4, r5, pc}
  404ce8:	20000370 	.word	0x20000370

00404cec <_close_r>:
  404cec:	b538      	push	{r3, r4, r5, lr}
  404cee:	4c06      	ldr	r4, [pc, #24]	; (404d08 <_close_r+0x1c>)
  404cf0:	2300      	movs	r3, #0
  404cf2:	4605      	mov	r5, r0
  404cf4:	4608      	mov	r0, r1
  404cf6:	6023      	str	r3, [r4, #0]
  404cf8:	f7fd f808 	bl	401d0c <_close>
  404cfc:	1c43      	adds	r3, r0, #1
  404cfe:	d102      	bne.n	404d06 <_close_r+0x1a>
  404d00:	6823      	ldr	r3, [r4, #0]
  404d02:	b103      	cbz	r3, 404d06 <_close_r+0x1a>
  404d04:	602b      	str	r3, [r5, #0]
  404d06:	bd38      	pop	{r3, r4, r5, pc}
  404d08:	20000370 	.word	0x20000370

00404d0c <_fstat_r>:
  404d0c:	b538      	push	{r3, r4, r5, lr}
  404d0e:	4c07      	ldr	r4, [pc, #28]	; (404d2c <_fstat_r+0x20>)
  404d10:	2300      	movs	r3, #0
  404d12:	4605      	mov	r5, r0
  404d14:	4608      	mov	r0, r1
  404d16:	4611      	mov	r1, r2
  404d18:	6023      	str	r3, [r4, #0]
  404d1a:	f7fc fffb 	bl	401d14 <_fstat>
  404d1e:	1c43      	adds	r3, r0, #1
  404d20:	d102      	bne.n	404d28 <_fstat_r+0x1c>
  404d22:	6823      	ldr	r3, [r4, #0]
  404d24:	b103      	cbz	r3, 404d28 <_fstat_r+0x1c>
  404d26:	602b      	str	r3, [r5, #0]
  404d28:	bd38      	pop	{r3, r4, r5, pc}
  404d2a:	bf00      	nop
  404d2c:	20000370 	.word	0x20000370

00404d30 <_isatty_r>:
  404d30:	b538      	push	{r3, r4, r5, lr}
  404d32:	4c06      	ldr	r4, [pc, #24]	; (404d4c <_isatty_r+0x1c>)
  404d34:	2300      	movs	r3, #0
  404d36:	4605      	mov	r5, r0
  404d38:	4608      	mov	r0, r1
  404d3a:	6023      	str	r3, [r4, #0]
  404d3c:	f7fc fff0 	bl	401d20 <_isatty>
  404d40:	1c43      	adds	r3, r0, #1
  404d42:	d102      	bne.n	404d4a <_isatty_r+0x1a>
  404d44:	6823      	ldr	r3, [r4, #0]
  404d46:	b103      	cbz	r3, 404d4a <_isatty_r+0x1a>
  404d48:	602b      	str	r3, [r5, #0]
  404d4a:	bd38      	pop	{r3, r4, r5, pc}
  404d4c:	20000370 	.word	0x20000370

00404d50 <_lseek_r>:
  404d50:	b538      	push	{r3, r4, r5, lr}
  404d52:	4c07      	ldr	r4, [pc, #28]	; (404d70 <_lseek_r+0x20>)
  404d54:	4605      	mov	r5, r0
  404d56:	4608      	mov	r0, r1
  404d58:	4611      	mov	r1, r2
  404d5a:	2200      	movs	r2, #0
  404d5c:	6022      	str	r2, [r4, #0]
  404d5e:	461a      	mov	r2, r3
  404d60:	f7fc ffe0 	bl	401d24 <_lseek>
  404d64:	1c43      	adds	r3, r0, #1
  404d66:	d102      	bne.n	404d6e <_lseek_r+0x1e>
  404d68:	6823      	ldr	r3, [r4, #0]
  404d6a:	b103      	cbz	r3, 404d6e <_lseek_r+0x1e>
  404d6c:	602b      	str	r3, [r5, #0]
  404d6e:	bd38      	pop	{r3, r4, r5, pc}
  404d70:	20000370 	.word	0x20000370

00404d74 <__ascii_mbtowc>:
  404d74:	b082      	sub	sp, #8
  404d76:	b901      	cbnz	r1, 404d7a <__ascii_mbtowc+0x6>
  404d78:	a901      	add	r1, sp, #4
  404d7a:	b13a      	cbz	r2, 404d8c <__ascii_mbtowc+0x18>
  404d7c:	b143      	cbz	r3, 404d90 <__ascii_mbtowc+0x1c>
  404d7e:	7813      	ldrb	r3, [r2, #0]
  404d80:	600b      	str	r3, [r1, #0]
  404d82:	7812      	ldrb	r2, [r2, #0]
  404d84:	1c10      	adds	r0, r2, #0
  404d86:	bf18      	it	ne
  404d88:	2001      	movne	r0, #1
  404d8a:	e003      	b.n	404d94 <__ascii_mbtowc+0x20>
  404d8c:	4610      	mov	r0, r2
  404d8e:	e001      	b.n	404d94 <__ascii_mbtowc+0x20>
  404d90:	f06f 0001 	mvn.w	r0, #1
  404d94:	b002      	add	sp, #8
  404d96:	4770      	bx	lr

00404d98 <__malloc_lock>:
  404d98:	4770      	bx	lr

00404d9a <__malloc_unlock>:
  404d9a:	4770      	bx	lr

00404d9c <_read_r>:
  404d9c:	b538      	push	{r3, r4, r5, lr}
  404d9e:	4c07      	ldr	r4, [pc, #28]	; (404dbc <_read_r+0x20>)
  404da0:	4605      	mov	r5, r0
  404da2:	4608      	mov	r0, r1
  404da4:	4611      	mov	r1, r2
  404da6:	2200      	movs	r2, #0
  404da8:	6022      	str	r2, [r4, #0]
  404daa:	461a      	mov	r2, r3
  404dac:	f7fb f9e0 	bl	400170 <_read>
  404db0:	1c43      	adds	r3, r0, #1
  404db2:	d102      	bne.n	404dba <_read_r+0x1e>
  404db4:	6823      	ldr	r3, [r4, #0]
  404db6:	b103      	cbz	r3, 404dba <_read_r+0x1e>
  404db8:	602b      	str	r3, [r5, #0]
  404dba:	bd38      	pop	{r3, r4, r5, pc}
  404dbc:	20000370 	.word	0x20000370

00404dc0 <__ascii_wctomb>:
  404dc0:	b149      	cbz	r1, 404dd6 <__ascii_wctomb+0x16>
  404dc2:	2aff      	cmp	r2, #255	; 0xff
  404dc4:	bf85      	ittet	hi
  404dc6:	238a      	movhi	r3, #138	; 0x8a
  404dc8:	6003      	strhi	r3, [r0, #0]
  404dca:	700a      	strbls	r2, [r1, #0]
  404dcc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  404dd0:	bf98      	it	ls
  404dd2:	2001      	movls	r0, #1
  404dd4:	4770      	bx	lr
  404dd6:	4608      	mov	r0, r1
  404dd8:	4770      	bx	lr
	...

00404ddc <__aeabi_drsub>:
  404ddc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404de0:	e002      	b.n	404de8 <__adddf3>
  404de2:	bf00      	nop

00404de4 <__aeabi_dsub>:
  404de4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00404de8 <__adddf3>:
  404de8:	b530      	push	{r4, r5, lr}
  404dea:	ea4f 0441 	mov.w	r4, r1, lsl #1
  404dee:	ea4f 0543 	mov.w	r5, r3, lsl #1
  404df2:	ea94 0f05 	teq	r4, r5
  404df6:	bf08      	it	eq
  404df8:	ea90 0f02 	teqeq	r0, r2
  404dfc:	bf1f      	itttt	ne
  404dfe:	ea54 0c00 	orrsne.w	ip, r4, r0
  404e02:	ea55 0c02 	orrsne.w	ip, r5, r2
  404e06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404e0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404e0e:	f000 80e2 	beq.w	404fd6 <__adddf3+0x1ee>
  404e12:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404e16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404e1a:	bfb8      	it	lt
  404e1c:	426d      	neglt	r5, r5
  404e1e:	dd0c      	ble.n	404e3a <__adddf3+0x52>
  404e20:	442c      	add	r4, r5
  404e22:	ea80 0202 	eor.w	r2, r0, r2
  404e26:	ea81 0303 	eor.w	r3, r1, r3
  404e2a:	ea82 0000 	eor.w	r0, r2, r0
  404e2e:	ea83 0101 	eor.w	r1, r3, r1
  404e32:	ea80 0202 	eor.w	r2, r0, r2
  404e36:	ea81 0303 	eor.w	r3, r1, r3
  404e3a:	2d36      	cmp	r5, #54	; 0x36
  404e3c:	bf88      	it	hi
  404e3e:	bd30      	pophi	{r4, r5, pc}
  404e40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404e44:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404e48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404e4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404e50:	d002      	beq.n	404e58 <__adddf3+0x70>
  404e52:	4240      	negs	r0, r0
  404e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404e58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404e5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404e60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404e64:	d002      	beq.n	404e6c <__adddf3+0x84>
  404e66:	4252      	negs	r2, r2
  404e68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404e6c:	ea94 0f05 	teq	r4, r5
  404e70:	f000 80a7 	beq.w	404fc2 <__adddf3+0x1da>
  404e74:	f1a4 0401 	sub.w	r4, r4, #1
  404e78:	f1d5 0e20 	rsbs	lr, r5, #32
  404e7c:	db0d      	blt.n	404e9a <__adddf3+0xb2>
  404e7e:	fa02 fc0e 	lsl.w	ip, r2, lr
  404e82:	fa22 f205 	lsr.w	r2, r2, r5
  404e86:	1880      	adds	r0, r0, r2
  404e88:	f141 0100 	adc.w	r1, r1, #0
  404e8c:	fa03 f20e 	lsl.w	r2, r3, lr
  404e90:	1880      	adds	r0, r0, r2
  404e92:	fa43 f305 	asr.w	r3, r3, r5
  404e96:	4159      	adcs	r1, r3
  404e98:	e00e      	b.n	404eb8 <__adddf3+0xd0>
  404e9a:	f1a5 0520 	sub.w	r5, r5, #32
  404e9e:	f10e 0e20 	add.w	lr, lr, #32
  404ea2:	2a01      	cmp	r2, #1
  404ea4:	fa03 fc0e 	lsl.w	ip, r3, lr
  404ea8:	bf28      	it	cs
  404eaa:	f04c 0c02 	orrcs.w	ip, ip, #2
  404eae:	fa43 f305 	asr.w	r3, r3, r5
  404eb2:	18c0      	adds	r0, r0, r3
  404eb4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404eb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404ebc:	d507      	bpl.n	404ece <__adddf3+0xe6>
  404ebe:	f04f 0e00 	mov.w	lr, #0
  404ec2:	f1dc 0c00 	rsbs	ip, ip, #0
  404ec6:	eb7e 0000 	sbcs.w	r0, lr, r0
  404eca:	eb6e 0101 	sbc.w	r1, lr, r1
  404ece:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  404ed2:	d31b      	bcc.n	404f0c <__adddf3+0x124>
  404ed4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404ed8:	d30c      	bcc.n	404ef4 <__adddf3+0x10c>
  404eda:	0849      	lsrs	r1, r1, #1
  404edc:	ea5f 0030 	movs.w	r0, r0, rrx
  404ee0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  404ee4:	f104 0401 	add.w	r4, r4, #1
  404ee8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  404eec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  404ef0:	f080 809a 	bcs.w	405028 <__adddf3+0x240>
  404ef4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404ef8:	bf08      	it	eq
  404efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404efe:	f150 0000 	adcs.w	r0, r0, #0
  404f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404f06:	ea41 0105 	orr.w	r1, r1, r5
  404f0a:	bd30      	pop	{r4, r5, pc}
  404f0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404f10:	4140      	adcs	r0, r0
  404f12:	eb41 0101 	adc.w	r1, r1, r1
  404f16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404f1a:	f1a4 0401 	sub.w	r4, r4, #1
  404f1e:	d1e9      	bne.n	404ef4 <__adddf3+0x10c>
  404f20:	f091 0f00 	teq	r1, #0
  404f24:	bf04      	itt	eq
  404f26:	4601      	moveq	r1, r0
  404f28:	2000      	moveq	r0, #0
  404f2a:	fab1 f381 	clz	r3, r1
  404f2e:	bf08      	it	eq
  404f30:	3320      	addeq	r3, #32
  404f32:	f1a3 030b 	sub.w	r3, r3, #11
  404f36:	f1b3 0220 	subs.w	r2, r3, #32
  404f3a:	da0c      	bge.n	404f56 <__adddf3+0x16e>
  404f3c:	320c      	adds	r2, #12
  404f3e:	dd08      	ble.n	404f52 <__adddf3+0x16a>
  404f40:	f102 0c14 	add.w	ip, r2, #20
  404f44:	f1c2 020c 	rsb	r2, r2, #12
  404f48:	fa01 f00c 	lsl.w	r0, r1, ip
  404f4c:	fa21 f102 	lsr.w	r1, r1, r2
  404f50:	e00c      	b.n	404f6c <__adddf3+0x184>
  404f52:	f102 0214 	add.w	r2, r2, #20
  404f56:	bfd8      	it	le
  404f58:	f1c2 0c20 	rsble	ip, r2, #32
  404f5c:	fa01 f102 	lsl.w	r1, r1, r2
  404f60:	fa20 fc0c 	lsr.w	ip, r0, ip
  404f64:	bfdc      	itt	le
  404f66:	ea41 010c 	orrle.w	r1, r1, ip
  404f6a:	4090      	lslle	r0, r2
  404f6c:	1ae4      	subs	r4, r4, r3
  404f6e:	bfa2      	ittt	ge
  404f70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404f74:	4329      	orrge	r1, r5
  404f76:	bd30      	popge	{r4, r5, pc}
  404f78:	ea6f 0404 	mvn.w	r4, r4
  404f7c:	3c1f      	subs	r4, #31
  404f7e:	da1c      	bge.n	404fba <__adddf3+0x1d2>
  404f80:	340c      	adds	r4, #12
  404f82:	dc0e      	bgt.n	404fa2 <__adddf3+0x1ba>
  404f84:	f104 0414 	add.w	r4, r4, #20
  404f88:	f1c4 0220 	rsb	r2, r4, #32
  404f8c:	fa20 f004 	lsr.w	r0, r0, r4
  404f90:	fa01 f302 	lsl.w	r3, r1, r2
  404f94:	ea40 0003 	orr.w	r0, r0, r3
  404f98:	fa21 f304 	lsr.w	r3, r1, r4
  404f9c:	ea45 0103 	orr.w	r1, r5, r3
  404fa0:	bd30      	pop	{r4, r5, pc}
  404fa2:	f1c4 040c 	rsb	r4, r4, #12
  404fa6:	f1c4 0220 	rsb	r2, r4, #32
  404faa:	fa20 f002 	lsr.w	r0, r0, r2
  404fae:	fa01 f304 	lsl.w	r3, r1, r4
  404fb2:	ea40 0003 	orr.w	r0, r0, r3
  404fb6:	4629      	mov	r1, r5
  404fb8:	bd30      	pop	{r4, r5, pc}
  404fba:	fa21 f004 	lsr.w	r0, r1, r4
  404fbe:	4629      	mov	r1, r5
  404fc0:	bd30      	pop	{r4, r5, pc}
  404fc2:	f094 0f00 	teq	r4, #0
  404fc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404fca:	bf06      	itte	eq
  404fcc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404fd0:	3401      	addeq	r4, #1
  404fd2:	3d01      	subne	r5, #1
  404fd4:	e74e      	b.n	404e74 <__adddf3+0x8c>
  404fd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404fda:	bf18      	it	ne
  404fdc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404fe0:	d029      	beq.n	405036 <__adddf3+0x24e>
  404fe2:	ea94 0f05 	teq	r4, r5
  404fe6:	bf08      	it	eq
  404fe8:	ea90 0f02 	teqeq	r0, r2
  404fec:	d005      	beq.n	404ffa <__adddf3+0x212>
  404fee:	ea54 0c00 	orrs.w	ip, r4, r0
  404ff2:	bf04      	itt	eq
  404ff4:	4619      	moveq	r1, r3
  404ff6:	4610      	moveq	r0, r2
  404ff8:	bd30      	pop	{r4, r5, pc}
  404ffa:	ea91 0f03 	teq	r1, r3
  404ffe:	bf1e      	ittt	ne
  405000:	2100      	movne	r1, #0
  405002:	2000      	movne	r0, #0
  405004:	bd30      	popne	{r4, r5, pc}
  405006:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40500a:	d105      	bne.n	405018 <__adddf3+0x230>
  40500c:	0040      	lsls	r0, r0, #1
  40500e:	4149      	adcs	r1, r1
  405010:	bf28      	it	cs
  405012:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405016:	bd30      	pop	{r4, r5, pc}
  405018:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40501c:	bf3c      	itt	cc
  40501e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405022:	bd30      	popcc	{r4, r5, pc}
  405024:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405028:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40502c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405030:	f04f 0000 	mov.w	r0, #0
  405034:	bd30      	pop	{r4, r5, pc}
  405036:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40503a:	bf1a      	itte	ne
  40503c:	4619      	movne	r1, r3
  40503e:	4610      	movne	r0, r2
  405040:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405044:	bf1c      	itt	ne
  405046:	460b      	movne	r3, r1
  405048:	4602      	movne	r2, r0
  40504a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40504e:	bf06      	itte	eq
  405050:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405054:	ea91 0f03 	teqeq	r1, r3
  405058:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40505c:	bd30      	pop	{r4, r5, pc}
  40505e:	bf00      	nop

00405060 <__aeabi_ui2d>:
  405060:	f090 0f00 	teq	r0, #0
  405064:	bf04      	itt	eq
  405066:	2100      	moveq	r1, #0
  405068:	4770      	bxeq	lr
  40506a:	b530      	push	{r4, r5, lr}
  40506c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405070:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405074:	f04f 0500 	mov.w	r5, #0
  405078:	f04f 0100 	mov.w	r1, #0
  40507c:	e750      	b.n	404f20 <__adddf3+0x138>
  40507e:	bf00      	nop

00405080 <__aeabi_i2d>:
  405080:	f090 0f00 	teq	r0, #0
  405084:	bf04      	itt	eq
  405086:	2100      	moveq	r1, #0
  405088:	4770      	bxeq	lr
  40508a:	b530      	push	{r4, r5, lr}
  40508c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405090:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405094:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405098:	bf48      	it	mi
  40509a:	4240      	negmi	r0, r0
  40509c:	f04f 0100 	mov.w	r1, #0
  4050a0:	e73e      	b.n	404f20 <__adddf3+0x138>
  4050a2:	bf00      	nop

004050a4 <__aeabi_f2d>:
  4050a4:	0042      	lsls	r2, r0, #1
  4050a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4050aa:	ea4f 0131 	mov.w	r1, r1, rrx
  4050ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4050b2:	bf1f      	itttt	ne
  4050b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4050b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4050bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4050c0:	4770      	bxne	lr
  4050c2:	f092 0f00 	teq	r2, #0
  4050c6:	bf14      	ite	ne
  4050c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4050cc:	4770      	bxeq	lr
  4050ce:	b530      	push	{r4, r5, lr}
  4050d0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4050d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4050d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4050dc:	e720      	b.n	404f20 <__adddf3+0x138>
  4050de:	bf00      	nop

004050e0 <__aeabi_ul2d>:
  4050e0:	ea50 0201 	orrs.w	r2, r0, r1
  4050e4:	bf08      	it	eq
  4050e6:	4770      	bxeq	lr
  4050e8:	b530      	push	{r4, r5, lr}
  4050ea:	f04f 0500 	mov.w	r5, #0
  4050ee:	e00a      	b.n	405106 <__aeabi_l2d+0x16>

004050f0 <__aeabi_l2d>:
  4050f0:	ea50 0201 	orrs.w	r2, r0, r1
  4050f4:	bf08      	it	eq
  4050f6:	4770      	bxeq	lr
  4050f8:	b530      	push	{r4, r5, lr}
  4050fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4050fe:	d502      	bpl.n	405106 <__aeabi_l2d+0x16>
  405100:	4240      	negs	r0, r0
  405102:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405106:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40510a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40510e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405112:	f43f aedc 	beq.w	404ece <__adddf3+0xe6>
  405116:	f04f 0203 	mov.w	r2, #3
  40511a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40511e:	bf18      	it	ne
  405120:	3203      	addne	r2, #3
  405122:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405126:	bf18      	it	ne
  405128:	3203      	addne	r2, #3
  40512a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40512e:	f1c2 0320 	rsb	r3, r2, #32
  405132:	fa00 fc03 	lsl.w	ip, r0, r3
  405136:	fa20 f002 	lsr.w	r0, r0, r2
  40513a:	fa01 fe03 	lsl.w	lr, r1, r3
  40513e:	ea40 000e 	orr.w	r0, r0, lr
  405142:	fa21 f102 	lsr.w	r1, r1, r2
  405146:	4414      	add	r4, r2
  405148:	e6c1      	b.n	404ece <__adddf3+0xe6>
  40514a:	bf00      	nop

0040514c <__aeabi_dmul>:
  40514c:	b570      	push	{r4, r5, r6, lr}
  40514e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40515a:	bf1d      	ittte	ne
  40515c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405160:	ea94 0f0c 	teqne	r4, ip
  405164:	ea95 0f0c 	teqne	r5, ip
  405168:	f000 f8de 	bleq	405328 <__aeabi_dmul+0x1dc>
  40516c:	442c      	add	r4, r5
  40516e:	ea81 0603 	eor.w	r6, r1, r3
  405172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40517a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40517e:	bf18      	it	ne
  405180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40518c:	d038      	beq.n	405200 <__aeabi_dmul+0xb4>
  40518e:	fba0 ce02 	umull	ip, lr, r0, r2
  405192:	f04f 0500 	mov.w	r5, #0
  405196:	fbe1 e502 	umlal	lr, r5, r1, r2
  40519a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40519e:	fbe0 e503 	umlal	lr, r5, r0, r3
  4051a2:	f04f 0600 	mov.w	r6, #0
  4051a6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4051aa:	f09c 0f00 	teq	ip, #0
  4051ae:	bf18      	it	ne
  4051b0:	f04e 0e01 	orrne.w	lr, lr, #1
  4051b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4051b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4051bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4051c0:	d204      	bcs.n	4051cc <__aeabi_dmul+0x80>
  4051c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4051c6:	416d      	adcs	r5, r5
  4051c8:	eb46 0606 	adc.w	r6, r6, r6
  4051cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4051d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4051d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4051d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4051dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4051e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4051e4:	bf88      	it	hi
  4051e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4051ea:	d81e      	bhi.n	40522a <__aeabi_dmul+0xde>
  4051ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4051f0:	bf08      	it	eq
  4051f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4051f6:	f150 0000 	adcs.w	r0, r0, #0
  4051fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4051fe:	bd70      	pop	{r4, r5, r6, pc}
  405200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405204:	ea46 0101 	orr.w	r1, r6, r1
  405208:	ea40 0002 	orr.w	r0, r0, r2
  40520c:	ea81 0103 	eor.w	r1, r1, r3
  405210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405214:	bfc2      	ittt	gt
  405216:	ebd4 050c 	rsbsgt	r5, r4, ip
  40521a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40521e:	bd70      	popgt	{r4, r5, r6, pc}
  405220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405224:	f04f 0e00 	mov.w	lr, #0
  405228:	3c01      	subs	r4, #1
  40522a:	f300 80ab 	bgt.w	405384 <__aeabi_dmul+0x238>
  40522e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405232:	bfde      	ittt	le
  405234:	2000      	movle	r0, #0
  405236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40523a:	bd70      	pople	{r4, r5, r6, pc}
  40523c:	f1c4 0400 	rsb	r4, r4, #0
  405240:	3c20      	subs	r4, #32
  405242:	da35      	bge.n	4052b0 <__aeabi_dmul+0x164>
  405244:	340c      	adds	r4, #12
  405246:	dc1b      	bgt.n	405280 <__aeabi_dmul+0x134>
  405248:	f104 0414 	add.w	r4, r4, #20
  40524c:	f1c4 0520 	rsb	r5, r4, #32
  405250:	fa00 f305 	lsl.w	r3, r0, r5
  405254:	fa20 f004 	lsr.w	r0, r0, r4
  405258:	fa01 f205 	lsl.w	r2, r1, r5
  40525c:	ea40 0002 	orr.w	r0, r0, r2
  405260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40526c:	fa21 f604 	lsr.w	r6, r1, r4
  405270:	eb42 0106 	adc.w	r1, r2, r6
  405274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405278:	bf08      	it	eq
  40527a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40527e:	bd70      	pop	{r4, r5, r6, pc}
  405280:	f1c4 040c 	rsb	r4, r4, #12
  405284:	f1c4 0520 	rsb	r5, r4, #32
  405288:	fa00 f304 	lsl.w	r3, r0, r4
  40528c:	fa20 f005 	lsr.w	r0, r0, r5
  405290:	fa01 f204 	lsl.w	r2, r1, r4
  405294:	ea40 0002 	orr.w	r0, r0, r2
  405298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40529c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4052a0:	f141 0100 	adc.w	r1, r1, #0
  4052a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4052a8:	bf08      	it	eq
  4052aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4052ae:	bd70      	pop	{r4, r5, r6, pc}
  4052b0:	f1c4 0520 	rsb	r5, r4, #32
  4052b4:	fa00 f205 	lsl.w	r2, r0, r5
  4052b8:	ea4e 0e02 	orr.w	lr, lr, r2
  4052bc:	fa20 f304 	lsr.w	r3, r0, r4
  4052c0:	fa01 f205 	lsl.w	r2, r1, r5
  4052c4:	ea43 0302 	orr.w	r3, r3, r2
  4052c8:	fa21 f004 	lsr.w	r0, r1, r4
  4052cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4052d0:	fa21 f204 	lsr.w	r2, r1, r4
  4052d4:	ea20 0002 	bic.w	r0, r0, r2
  4052d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4052dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4052e0:	bf08      	it	eq
  4052e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4052e6:	bd70      	pop	{r4, r5, r6, pc}
  4052e8:	f094 0f00 	teq	r4, #0
  4052ec:	d10f      	bne.n	40530e <__aeabi_dmul+0x1c2>
  4052ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4052f2:	0040      	lsls	r0, r0, #1
  4052f4:	eb41 0101 	adc.w	r1, r1, r1
  4052f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4052fc:	bf08      	it	eq
  4052fe:	3c01      	subeq	r4, #1
  405300:	d0f7      	beq.n	4052f2 <__aeabi_dmul+0x1a6>
  405302:	ea41 0106 	orr.w	r1, r1, r6
  405306:	f095 0f00 	teq	r5, #0
  40530a:	bf18      	it	ne
  40530c:	4770      	bxne	lr
  40530e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405312:	0052      	lsls	r2, r2, #1
  405314:	eb43 0303 	adc.w	r3, r3, r3
  405318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40531c:	bf08      	it	eq
  40531e:	3d01      	subeq	r5, #1
  405320:	d0f7      	beq.n	405312 <__aeabi_dmul+0x1c6>
  405322:	ea43 0306 	orr.w	r3, r3, r6
  405326:	4770      	bx	lr
  405328:	ea94 0f0c 	teq	r4, ip
  40532c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405330:	bf18      	it	ne
  405332:	ea95 0f0c 	teqne	r5, ip
  405336:	d00c      	beq.n	405352 <__aeabi_dmul+0x206>
  405338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40533c:	bf18      	it	ne
  40533e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405342:	d1d1      	bne.n	4052e8 <__aeabi_dmul+0x19c>
  405344:	ea81 0103 	eor.w	r1, r1, r3
  405348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40534c:	f04f 0000 	mov.w	r0, #0
  405350:	bd70      	pop	{r4, r5, r6, pc}
  405352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405356:	bf06      	itte	eq
  405358:	4610      	moveq	r0, r2
  40535a:	4619      	moveq	r1, r3
  40535c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405360:	d019      	beq.n	405396 <__aeabi_dmul+0x24a>
  405362:	ea94 0f0c 	teq	r4, ip
  405366:	d102      	bne.n	40536e <__aeabi_dmul+0x222>
  405368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40536c:	d113      	bne.n	405396 <__aeabi_dmul+0x24a>
  40536e:	ea95 0f0c 	teq	r5, ip
  405372:	d105      	bne.n	405380 <__aeabi_dmul+0x234>
  405374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405378:	bf1c      	itt	ne
  40537a:	4610      	movne	r0, r2
  40537c:	4619      	movne	r1, r3
  40537e:	d10a      	bne.n	405396 <__aeabi_dmul+0x24a>
  405380:	ea81 0103 	eor.w	r1, r1, r3
  405384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40538c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405390:	f04f 0000 	mov.w	r0, #0
  405394:	bd70      	pop	{r4, r5, r6, pc}
  405396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40539a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40539e:	bd70      	pop	{r4, r5, r6, pc}

004053a0 <__aeabi_ddiv>:
  4053a0:	b570      	push	{r4, r5, r6, lr}
  4053a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4053a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4053aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4053ae:	bf1d      	ittte	ne
  4053b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4053b4:	ea94 0f0c 	teqne	r4, ip
  4053b8:	ea95 0f0c 	teqne	r5, ip
  4053bc:	f000 f8a7 	bleq	40550e <__aeabi_ddiv+0x16e>
  4053c0:	eba4 0405 	sub.w	r4, r4, r5
  4053c4:	ea81 0e03 	eor.w	lr, r1, r3
  4053c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4053cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4053d0:	f000 8088 	beq.w	4054e4 <__aeabi_ddiv+0x144>
  4053d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4053d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4053dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4053e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4053e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4053e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4053ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4053f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4053f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4053f8:	429d      	cmp	r5, r3
  4053fa:	bf08      	it	eq
  4053fc:	4296      	cmpeq	r6, r2
  4053fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405402:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405406:	d202      	bcs.n	40540e <__aeabi_ddiv+0x6e>
  405408:	085b      	lsrs	r3, r3, #1
  40540a:	ea4f 0232 	mov.w	r2, r2, rrx
  40540e:	1ab6      	subs	r6, r6, r2
  405410:	eb65 0503 	sbc.w	r5, r5, r3
  405414:	085b      	lsrs	r3, r3, #1
  405416:	ea4f 0232 	mov.w	r2, r2, rrx
  40541a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40541e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405422:	ebb6 0e02 	subs.w	lr, r6, r2
  405426:	eb75 0e03 	sbcs.w	lr, r5, r3
  40542a:	bf22      	ittt	cs
  40542c:	1ab6      	subcs	r6, r6, r2
  40542e:	4675      	movcs	r5, lr
  405430:	ea40 000c 	orrcs.w	r0, r0, ip
  405434:	085b      	lsrs	r3, r3, #1
  405436:	ea4f 0232 	mov.w	r2, r2, rrx
  40543a:	ebb6 0e02 	subs.w	lr, r6, r2
  40543e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405442:	bf22      	ittt	cs
  405444:	1ab6      	subcs	r6, r6, r2
  405446:	4675      	movcs	r5, lr
  405448:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40544c:	085b      	lsrs	r3, r3, #1
  40544e:	ea4f 0232 	mov.w	r2, r2, rrx
  405452:	ebb6 0e02 	subs.w	lr, r6, r2
  405456:	eb75 0e03 	sbcs.w	lr, r5, r3
  40545a:	bf22      	ittt	cs
  40545c:	1ab6      	subcs	r6, r6, r2
  40545e:	4675      	movcs	r5, lr
  405460:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405464:	085b      	lsrs	r3, r3, #1
  405466:	ea4f 0232 	mov.w	r2, r2, rrx
  40546a:	ebb6 0e02 	subs.w	lr, r6, r2
  40546e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405472:	bf22      	ittt	cs
  405474:	1ab6      	subcs	r6, r6, r2
  405476:	4675      	movcs	r5, lr
  405478:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40547c:	ea55 0e06 	orrs.w	lr, r5, r6
  405480:	d018      	beq.n	4054b4 <__aeabi_ddiv+0x114>
  405482:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405486:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40548a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40548e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405492:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405496:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40549a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40549e:	d1c0      	bne.n	405422 <__aeabi_ddiv+0x82>
  4054a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4054a4:	d10b      	bne.n	4054be <__aeabi_ddiv+0x11e>
  4054a6:	ea41 0100 	orr.w	r1, r1, r0
  4054aa:	f04f 0000 	mov.w	r0, #0
  4054ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4054b2:	e7b6      	b.n	405422 <__aeabi_ddiv+0x82>
  4054b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4054b8:	bf04      	itt	eq
  4054ba:	4301      	orreq	r1, r0
  4054bc:	2000      	moveq	r0, #0
  4054be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4054c2:	bf88      	it	hi
  4054c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4054c8:	f63f aeaf 	bhi.w	40522a <__aeabi_dmul+0xde>
  4054cc:	ebb5 0c03 	subs.w	ip, r5, r3
  4054d0:	bf04      	itt	eq
  4054d2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4054d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4054da:	f150 0000 	adcs.w	r0, r0, #0
  4054de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4054e2:	bd70      	pop	{r4, r5, r6, pc}
  4054e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4054e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4054ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4054f0:	bfc2      	ittt	gt
  4054f2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4054f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4054fa:	bd70      	popgt	{r4, r5, r6, pc}
  4054fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405500:	f04f 0e00 	mov.w	lr, #0
  405504:	3c01      	subs	r4, #1
  405506:	e690      	b.n	40522a <__aeabi_dmul+0xde>
  405508:	ea45 0e06 	orr.w	lr, r5, r6
  40550c:	e68d      	b.n	40522a <__aeabi_dmul+0xde>
  40550e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405512:	ea94 0f0c 	teq	r4, ip
  405516:	bf08      	it	eq
  405518:	ea95 0f0c 	teqeq	r5, ip
  40551c:	f43f af3b 	beq.w	405396 <__aeabi_dmul+0x24a>
  405520:	ea94 0f0c 	teq	r4, ip
  405524:	d10a      	bne.n	40553c <__aeabi_ddiv+0x19c>
  405526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40552a:	f47f af34 	bne.w	405396 <__aeabi_dmul+0x24a>
  40552e:	ea95 0f0c 	teq	r5, ip
  405532:	f47f af25 	bne.w	405380 <__aeabi_dmul+0x234>
  405536:	4610      	mov	r0, r2
  405538:	4619      	mov	r1, r3
  40553a:	e72c      	b.n	405396 <__aeabi_dmul+0x24a>
  40553c:	ea95 0f0c 	teq	r5, ip
  405540:	d106      	bne.n	405550 <__aeabi_ddiv+0x1b0>
  405542:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405546:	f43f aefd 	beq.w	405344 <__aeabi_dmul+0x1f8>
  40554a:	4610      	mov	r0, r2
  40554c:	4619      	mov	r1, r3
  40554e:	e722      	b.n	405396 <__aeabi_dmul+0x24a>
  405550:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405554:	bf18      	it	ne
  405556:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40555a:	f47f aec5 	bne.w	4052e8 <__aeabi_dmul+0x19c>
  40555e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405562:	f47f af0d 	bne.w	405380 <__aeabi_dmul+0x234>
  405566:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40556a:	f47f aeeb 	bne.w	405344 <__aeabi_dmul+0x1f8>
  40556e:	e712      	b.n	405396 <__aeabi_dmul+0x24a>

00405570 <__gedf2>:
  405570:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  405574:	e006      	b.n	405584 <__cmpdf2+0x4>
  405576:	bf00      	nop

00405578 <__ledf2>:
  405578:	f04f 0c01 	mov.w	ip, #1
  40557c:	e002      	b.n	405584 <__cmpdf2+0x4>
  40557e:	bf00      	nop

00405580 <__cmpdf2>:
  405580:	f04f 0c01 	mov.w	ip, #1
  405584:	f84d cd04 	str.w	ip, [sp, #-4]!
  405588:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40558c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405590:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405594:	bf18      	it	ne
  405596:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40559a:	d01b      	beq.n	4055d4 <__cmpdf2+0x54>
  40559c:	b001      	add	sp, #4
  40559e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4055a2:	bf0c      	ite	eq
  4055a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4055a8:	ea91 0f03 	teqne	r1, r3
  4055ac:	bf02      	ittt	eq
  4055ae:	ea90 0f02 	teqeq	r0, r2
  4055b2:	2000      	moveq	r0, #0
  4055b4:	4770      	bxeq	lr
  4055b6:	f110 0f00 	cmn.w	r0, #0
  4055ba:	ea91 0f03 	teq	r1, r3
  4055be:	bf58      	it	pl
  4055c0:	4299      	cmppl	r1, r3
  4055c2:	bf08      	it	eq
  4055c4:	4290      	cmpeq	r0, r2
  4055c6:	bf2c      	ite	cs
  4055c8:	17d8      	asrcs	r0, r3, #31
  4055ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4055ce:	f040 0001 	orr.w	r0, r0, #1
  4055d2:	4770      	bx	lr
  4055d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4055d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4055dc:	d102      	bne.n	4055e4 <__cmpdf2+0x64>
  4055de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4055e2:	d107      	bne.n	4055f4 <__cmpdf2+0x74>
  4055e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4055e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4055ec:	d1d6      	bne.n	40559c <__cmpdf2+0x1c>
  4055ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4055f2:	d0d3      	beq.n	40559c <__cmpdf2+0x1c>
  4055f4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4055f8:	4770      	bx	lr
  4055fa:	bf00      	nop

004055fc <__aeabi_cdrcmple>:
  4055fc:	4684      	mov	ip, r0
  4055fe:	4610      	mov	r0, r2
  405600:	4662      	mov	r2, ip
  405602:	468c      	mov	ip, r1
  405604:	4619      	mov	r1, r3
  405606:	4663      	mov	r3, ip
  405608:	e000      	b.n	40560c <__aeabi_cdcmpeq>
  40560a:	bf00      	nop

0040560c <__aeabi_cdcmpeq>:
  40560c:	b501      	push	{r0, lr}
  40560e:	f7ff ffb7 	bl	405580 <__cmpdf2>
  405612:	2800      	cmp	r0, #0
  405614:	bf48      	it	mi
  405616:	f110 0f00 	cmnmi.w	r0, #0
  40561a:	bd01      	pop	{r0, pc}

0040561c <__aeabi_dcmpeq>:
  40561c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405620:	f7ff fff4 	bl	40560c <__aeabi_cdcmpeq>
  405624:	bf0c      	ite	eq
  405626:	2001      	moveq	r0, #1
  405628:	2000      	movne	r0, #0
  40562a:	f85d fb08 	ldr.w	pc, [sp], #8
  40562e:	bf00      	nop

00405630 <__aeabi_dcmplt>:
  405630:	f84d ed08 	str.w	lr, [sp, #-8]!
  405634:	f7ff ffea 	bl	40560c <__aeabi_cdcmpeq>
  405638:	bf34      	ite	cc
  40563a:	2001      	movcc	r0, #1
  40563c:	2000      	movcs	r0, #0
  40563e:	f85d fb08 	ldr.w	pc, [sp], #8
  405642:	bf00      	nop

00405644 <__aeabi_dcmple>:
  405644:	f84d ed08 	str.w	lr, [sp, #-8]!
  405648:	f7ff ffe0 	bl	40560c <__aeabi_cdcmpeq>
  40564c:	bf94      	ite	ls
  40564e:	2001      	movls	r0, #1
  405650:	2000      	movhi	r0, #0
  405652:	f85d fb08 	ldr.w	pc, [sp], #8
  405656:	bf00      	nop

00405658 <__aeabi_dcmpge>:
  405658:	f84d ed08 	str.w	lr, [sp, #-8]!
  40565c:	f7ff ffce 	bl	4055fc <__aeabi_cdrcmple>
  405660:	bf94      	ite	ls
  405662:	2001      	movls	r0, #1
  405664:	2000      	movhi	r0, #0
  405666:	f85d fb08 	ldr.w	pc, [sp], #8
  40566a:	bf00      	nop

0040566c <__aeabi_dcmpgt>:
  40566c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405670:	f7ff ffc4 	bl	4055fc <__aeabi_cdrcmple>
  405674:	bf34      	ite	cc
  405676:	2001      	movcc	r0, #1
  405678:	2000      	movcs	r0, #0
  40567a:	f85d fb08 	ldr.w	pc, [sp], #8
  40567e:	bf00      	nop

00405680 <__aeabi_dcmpun>:
  405680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405688:	d102      	bne.n	405690 <__aeabi_dcmpun+0x10>
  40568a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40568e:	d10a      	bne.n	4056a6 <__aeabi_dcmpun+0x26>
  405690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405698:	d102      	bne.n	4056a0 <__aeabi_dcmpun+0x20>
  40569a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40569e:	d102      	bne.n	4056a6 <__aeabi_dcmpun+0x26>
  4056a0:	f04f 0000 	mov.w	r0, #0
  4056a4:	4770      	bx	lr
  4056a6:	f04f 0001 	mov.w	r0, #1
  4056aa:	4770      	bx	lr

004056ac <__aeabi_d2iz>:
  4056ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4056b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4056b4:	d215      	bcs.n	4056e2 <__aeabi_d2iz+0x36>
  4056b6:	d511      	bpl.n	4056dc <__aeabi_d2iz+0x30>
  4056b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4056bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4056c0:	d912      	bls.n	4056e8 <__aeabi_d2iz+0x3c>
  4056c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4056c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4056ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4056ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4056d2:	fa23 f002 	lsr.w	r0, r3, r2
  4056d6:	bf18      	it	ne
  4056d8:	4240      	negne	r0, r0
  4056da:	4770      	bx	lr
  4056dc:	f04f 0000 	mov.w	r0, #0
  4056e0:	4770      	bx	lr
  4056e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4056e6:	d105      	bne.n	4056f4 <__aeabi_d2iz+0x48>
  4056e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4056ec:	bf08      	it	eq
  4056ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4056f2:	4770      	bx	lr
  4056f4:	f04f 0000 	mov.w	r0, #0
  4056f8:	4770      	bx	lr
  4056fa:	bf00      	nop

004056fc <__aeabi_d2f>:
  4056fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405700:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405704:	bf24      	itt	cs
  405706:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40570a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40570e:	d90d      	bls.n	40572c <__aeabi_d2f+0x30>
  405710:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405714:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405718:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40571c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405720:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405724:	bf08      	it	eq
  405726:	f020 0001 	biceq.w	r0, r0, #1
  40572a:	4770      	bx	lr
  40572c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405730:	d121      	bne.n	405776 <__aeabi_d2f+0x7a>
  405732:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405736:	bfbc      	itt	lt
  405738:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40573c:	4770      	bxlt	lr
  40573e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405742:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405746:	f1c2 0218 	rsb	r2, r2, #24
  40574a:	f1c2 0c20 	rsb	ip, r2, #32
  40574e:	fa10 f30c 	lsls.w	r3, r0, ip
  405752:	fa20 f002 	lsr.w	r0, r0, r2
  405756:	bf18      	it	ne
  405758:	f040 0001 	orrne.w	r0, r0, #1
  40575c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405760:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405764:	fa03 fc0c 	lsl.w	ip, r3, ip
  405768:	ea40 000c 	orr.w	r0, r0, ip
  40576c:	fa23 f302 	lsr.w	r3, r3, r2
  405770:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405774:	e7cc      	b.n	405710 <__aeabi_d2f+0x14>
  405776:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40577a:	d107      	bne.n	40578c <__aeabi_d2f+0x90>
  40577c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405780:	bf1e      	ittt	ne
  405782:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405786:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40578a:	4770      	bxne	lr
  40578c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405790:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405794:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405798:	4770      	bx	lr
  40579a:	bf00      	nop

0040579c <__aeabi_frsub>:
  40579c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4057a0:	e002      	b.n	4057a8 <__addsf3>
  4057a2:	bf00      	nop

004057a4 <__aeabi_fsub>:
  4057a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004057a8 <__addsf3>:
  4057a8:	0042      	lsls	r2, r0, #1
  4057aa:	bf1f      	itttt	ne
  4057ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4057b0:	ea92 0f03 	teqne	r2, r3
  4057b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4057b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4057bc:	d06a      	beq.n	405894 <__addsf3+0xec>
  4057be:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4057c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4057c6:	bfc1      	itttt	gt
  4057c8:	18d2      	addgt	r2, r2, r3
  4057ca:	4041      	eorgt	r1, r0
  4057cc:	4048      	eorgt	r0, r1
  4057ce:	4041      	eorgt	r1, r0
  4057d0:	bfb8      	it	lt
  4057d2:	425b      	neglt	r3, r3
  4057d4:	2b19      	cmp	r3, #25
  4057d6:	bf88      	it	hi
  4057d8:	4770      	bxhi	lr
  4057da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4057de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4057e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4057e6:	bf18      	it	ne
  4057e8:	4240      	negne	r0, r0
  4057ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4057ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4057f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4057f6:	bf18      	it	ne
  4057f8:	4249      	negne	r1, r1
  4057fa:	ea92 0f03 	teq	r2, r3
  4057fe:	d03f      	beq.n	405880 <__addsf3+0xd8>
  405800:	f1a2 0201 	sub.w	r2, r2, #1
  405804:	fa41 fc03 	asr.w	ip, r1, r3
  405808:	eb10 000c 	adds.w	r0, r0, ip
  40580c:	f1c3 0320 	rsb	r3, r3, #32
  405810:	fa01 f103 	lsl.w	r1, r1, r3
  405814:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405818:	d502      	bpl.n	405820 <__addsf3+0x78>
  40581a:	4249      	negs	r1, r1
  40581c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405820:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405824:	d313      	bcc.n	40584e <__addsf3+0xa6>
  405826:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40582a:	d306      	bcc.n	40583a <__addsf3+0x92>
  40582c:	0840      	lsrs	r0, r0, #1
  40582e:	ea4f 0131 	mov.w	r1, r1, rrx
  405832:	f102 0201 	add.w	r2, r2, #1
  405836:	2afe      	cmp	r2, #254	; 0xfe
  405838:	d251      	bcs.n	4058de <__addsf3+0x136>
  40583a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40583e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405842:	bf08      	it	eq
  405844:	f020 0001 	biceq.w	r0, r0, #1
  405848:	ea40 0003 	orr.w	r0, r0, r3
  40584c:	4770      	bx	lr
  40584e:	0049      	lsls	r1, r1, #1
  405850:	eb40 0000 	adc.w	r0, r0, r0
  405854:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405858:	f1a2 0201 	sub.w	r2, r2, #1
  40585c:	d1ed      	bne.n	40583a <__addsf3+0x92>
  40585e:	fab0 fc80 	clz	ip, r0
  405862:	f1ac 0c08 	sub.w	ip, ip, #8
  405866:	ebb2 020c 	subs.w	r2, r2, ip
  40586a:	fa00 f00c 	lsl.w	r0, r0, ip
  40586e:	bfaa      	itet	ge
  405870:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405874:	4252      	neglt	r2, r2
  405876:	4318      	orrge	r0, r3
  405878:	bfbc      	itt	lt
  40587a:	40d0      	lsrlt	r0, r2
  40587c:	4318      	orrlt	r0, r3
  40587e:	4770      	bx	lr
  405880:	f092 0f00 	teq	r2, #0
  405884:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405888:	bf06      	itte	eq
  40588a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40588e:	3201      	addeq	r2, #1
  405890:	3b01      	subne	r3, #1
  405892:	e7b5      	b.n	405800 <__addsf3+0x58>
  405894:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405898:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40589c:	bf18      	it	ne
  40589e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4058a2:	d021      	beq.n	4058e8 <__addsf3+0x140>
  4058a4:	ea92 0f03 	teq	r2, r3
  4058a8:	d004      	beq.n	4058b4 <__addsf3+0x10c>
  4058aa:	f092 0f00 	teq	r2, #0
  4058ae:	bf08      	it	eq
  4058b0:	4608      	moveq	r0, r1
  4058b2:	4770      	bx	lr
  4058b4:	ea90 0f01 	teq	r0, r1
  4058b8:	bf1c      	itt	ne
  4058ba:	2000      	movne	r0, #0
  4058bc:	4770      	bxne	lr
  4058be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4058c2:	d104      	bne.n	4058ce <__addsf3+0x126>
  4058c4:	0040      	lsls	r0, r0, #1
  4058c6:	bf28      	it	cs
  4058c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4058cc:	4770      	bx	lr
  4058ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4058d2:	bf3c      	itt	cc
  4058d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4058d8:	4770      	bxcc	lr
  4058da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4058de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  4058e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4058e6:	4770      	bx	lr
  4058e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4058ec:	bf16      	itet	ne
  4058ee:	4608      	movne	r0, r1
  4058f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4058f4:	4601      	movne	r1, r0
  4058f6:	0242      	lsls	r2, r0, #9
  4058f8:	bf06      	itte	eq
  4058fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4058fe:	ea90 0f01 	teqeq	r0, r1
  405902:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405906:	4770      	bx	lr

00405908 <__aeabi_ui2f>:
  405908:	f04f 0300 	mov.w	r3, #0
  40590c:	e004      	b.n	405918 <__aeabi_i2f+0x8>
  40590e:	bf00      	nop

00405910 <__aeabi_i2f>:
  405910:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405914:	bf48      	it	mi
  405916:	4240      	negmi	r0, r0
  405918:	ea5f 0c00 	movs.w	ip, r0
  40591c:	bf08      	it	eq
  40591e:	4770      	bxeq	lr
  405920:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405924:	4601      	mov	r1, r0
  405926:	f04f 0000 	mov.w	r0, #0
  40592a:	e01c      	b.n	405966 <__aeabi_l2f+0x2a>

0040592c <__aeabi_ul2f>:
  40592c:	ea50 0201 	orrs.w	r2, r0, r1
  405930:	bf08      	it	eq
  405932:	4770      	bxeq	lr
  405934:	f04f 0300 	mov.w	r3, #0
  405938:	e00a      	b.n	405950 <__aeabi_l2f+0x14>
  40593a:	bf00      	nop

0040593c <__aeabi_l2f>:
  40593c:	ea50 0201 	orrs.w	r2, r0, r1
  405940:	bf08      	it	eq
  405942:	4770      	bxeq	lr
  405944:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405948:	d502      	bpl.n	405950 <__aeabi_l2f+0x14>
  40594a:	4240      	negs	r0, r0
  40594c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405950:	ea5f 0c01 	movs.w	ip, r1
  405954:	bf02      	ittt	eq
  405956:	4684      	moveq	ip, r0
  405958:	4601      	moveq	r1, r0
  40595a:	2000      	moveq	r0, #0
  40595c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405960:	bf08      	it	eq
  405962:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405966:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40596a:	fabc f28c 	clz	r2, ip
  40596e:	3a08      	subs	r2, #8
  405970:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405974:	db10      	blt.n	405998 <__aeabi_l2f+0x5c>
  405976:	fa01 fc02 	lsl.w	ip, r1, r2
  40597a:	4463      	add	r3, ip
  40597c:	fa00 fc02 	lsl.w	ip, r0, r2
  405980:	f1c2 0220 	rsb	r2, r2, #32
  405984:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405988:	fa20 f202 	lsr.w	r2, r0, r2
  40598c:	eb43 0002 	adc.w	r0, r3, r2
  405990:	bf08      	it	eq
  405992:	f020 0001 	biceq.w	r0, r0, #1
  405996:	4770      	bx	lr
  405998:	f102 0220 	add.w	r2, r2, #32
  40599c:	fa01 fc02 	lsl.w	ip, r1, r2
  4059a0:	f1c2 0220 	rsb	r2, r2, #32
  4059a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4059a8:	fa21 f202 	lsr.w	r2, r1, r2
  4059ac:	eb43 0002 	adc.w	r0, r3, r2
  4059b0:	bf08      	it	eq
  4059b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4059b6:	4770      	bx	lr

004059b8 <__aeabi_fmul>:
  4059b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4059bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4059c0:	bf1e      	ittt	ne
  4059c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4059c6:	ea92 0f0c 	teqne	r2, ip
  4059ca:	ea93 0f0c 	teqne	r3, ip
  4059ce:	d06f      	beq.n	405ab0 <__aeabi_fmul+0xf8>
  4059d0:	441a      	add	r2, r3
  4059d2:	ea80 0c01 	eor.w	ip, r0, r1
  4059d6:	0240      	lsls	r0, r0, #9
  4059d8:	bf18      	it	ne
  4059da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4059de:	d01e      	beq.n	405a1e <__aeabi_fmul+0x66>
  4059e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4059e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4059e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4059ec:	fba0 3101 	umull	r3, r1, r0, r1
  4059f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4059f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4059f8:	bf3e      	ittt	cc
  4059fa:	0049      	lslcc	r1, r1, #1
  4059fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405a00:	005b      	lslcc	r3, r3, #1
  405a02:	ea40 0001 	orr.w	r0, r0, r1
  405a06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  405a0a:	2afd      	cmp	r2, #253	; 0xfd
  405a0c:	d81d      	bhi.n	405a4a <__aeabi_fmul+0x92>
  405a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405a12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405a16:	bf08      	it	eq
  405a18:	f020 0001 	biceq.w	r0, r0, #1
  405a1c:	4770      	bx	lr
  405a1e:	f090 0f00 	teq	r0, #0
  405a22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405a26:	bf08      	it	eq
  405a28:	0249      	lsleq	r1, r1, #9
  405a2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405a2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405a32:	3a7f      	subs	r2, #127	; 0x7f
  405a34:	bfc2      	ittt	gt
  405a36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405a3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405a3e:	4770      	bxgt	lr
  405a40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405a44:	f04f 0300 	mov.w	r3, #0
  405a48:	3a01      	subs	r2, #1
  405a4a:	dc5d      	bgt.n	405b08 <__aeabi_fmul+0x150>
  405a4c:	f112 0f19 	cmn.w	r2, #25
  405a50:	bfdc      	itt	le
  405a52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405a56:	4770      	bxle	lr
  405a58:	f1c2 0200 	rsb	r2, r2, #0
  405a5c:	0041      	lsls	r1, r0, #1
  405a5e:	fa21 f102 	lsr.w	r1, r1, r2
  405a62:	f1c2 0220 	rsb	r2, r2, #32
  405a66:	fa00 fc02 	lsl.w	ip, r0, r2
  405a6a:	ea5f 0031 	movs.w	r0, r1, rrx
  405a6e:	f140 0000 	adc.w	r0, r0, #0
  405a72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405a76:	bf08      	it	eq
  405a78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405a7c:	4770      	bx	lr
  405a7e:	f092 0f00 	teq	r2, #0
  405a82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405a86:	bf02      	ittt	eq
  405a88:	0040      	lsleq	r0, r0, #1
  405a8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405a8e:	3a01      	subeq	r2, #1
  405a90:	d0f9      	beq.n	405a86 <__aeabi_fmul+0xce>
  405a92:	ea40 000c 	orr.w	r0, r0, ip
  405a96:	f093 0f00 	teq	r3, #0
  405a9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405a9e:	bf02      	ittt	eq
  405aa0:	0049      	lsleq	r1, r1, #1
  405aa2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405aa6:	3b01      	subeq	r3, #1
  405aa8:	d0f9      	beq.n	405a9e <__aeabi_fmul+0xe6>
  405aaa:	ea41 010c 	orr.w	r1, r1, ip
  405aae:	e78f      	b.n	4059d0 <__aeabi_fmul+0x18>
  405ab0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405ab4:	ea92 0f0c 	teq	r2, ip
  405ab8:	bf18      	it	ne
  405aba:	ea93 0f0c 	teqne	r3, ip
  405abe:	d00a      	beq.n	405ad6 <__aeabi_fmul+0x11e>
  405ac0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405ac4:	bf18      	it	ne
  405ac6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405aca:	d1d8      	bne.n	405a7e <__aeabi_fmul+0xc6>
  405acc:	ea80 0001 	eor.w	r0, r0, r1
  405ad0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405ad4:	4770      	bx	lr
  405ad6:	f090 0f00 	teq	r0, #0
  405ada:	bf17      	itett	ne
  405adc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405ae0:	4608      	moveq	r0, r1
  405ae2:	f091 0f00 	teqne	r1, #0
  405ae6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405aea:	d014      	beq.n	405b16 <__aeabi_fmul+0x15e>
  405aec:	ea92 0f0c 	teq	r2, ip
  405af0:	d101      	bne.n	405af6 <__aeabi_fmul+0x13e>
  405af2:	0242      	lsls	r2, r0, #9
  405af4:	d10f      	bne.n	405b16 <__aeabi_fmul+0x15e>
  405af6:	ea93 0f0c 	teq	r3, ip
  405afa:	d103      	bne.n	405b04 <__aeabi_fmul+0x14c>
  405afc:	024b      	lsls	r3, r1, #9
  405afe:	bf18      	it	ne
  405b00:	4608      	movne	r0, r1
  405b02:	d108      	bne.n	405b16 <__aeabi_fmul+0x15e>
  405b04:	ea80 0001 	eor.w	r0, r0, r1
  405b08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405b14:	4770      	bx	lr
  405b16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405b1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405b1e:	4770      	bx	lr

00405b20 <__aeabi_fdiv>:
  405b20:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405b24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405b28:	bf1e      	ittt	ne
  405b2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405b2e:	ea92 0f0c 	teqne	r2, ip
  405b32:	ea93 0f0c 	teqne	r3, ip
  405b36:	d069      	beq.n	405c0c <__aeabi_fdiv+0xec>
  405b38:	eba2 0203 	sub.w	r2, r2, r3
  405b3c:	ea80 0c01 	eor.w	ip, r0, r1
  405b40:	0249      	lsls	r1, r1, #9
  405b42:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405b46:	d037      	beq.n	405bb8 <__aeabi_fdiv+0x98>
  405b48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405b4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405b50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405b54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405b58:	428b      	cmp	r3, r1
  405b5a:	bf38      	it	cc
  405b5c:	005b      	lslcc	r3, r3, #1
  405b5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405b62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405b66:	428b      	cmp	r3, r1
  405b68:	bf24      	itt	cs
  405b6a:	1a5b      	subcs	r3, r3, r1
  405b6c:	ea40 000c 	orrcs.w	r0, r0, ip
  405b70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405b74:	bf24      	itt	cs
  405b76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405b7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405b7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405b82:	bf24      	itt	cs
  405b84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405b88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405b8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405b90:	bf24      	itt	cs
  405b92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405b96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405b9a:	011b      	lsls	r3, r3, #4
  405b9c:	bf18      	it	ne
  405b9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405ba2:	d1e0      	bne.n	405b66 <__aeabi_fdiv+0x46>
  405ba4:	2afd      	cmp	r2, #253	; 0xfd
  405ba6:	f63f af50 	bhi.w	405a4a <__aeabi_fmul+0x92>
  405baa:	428b      	cmp	r3, r1
  405bac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405bb0:	bf08      	it	eq
  405bb2:	f020 0001 	biceq.w	r0, r0, #1
  405bb6:	4770      	bx	lr
  405bb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405bbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405bc0:	327f      	adds	r2, #127	; 0x7f
  405bc2:	bfc2      	ittt	gt
  405bc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405bc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405bcc:	4770      	bxgt	lr
  405bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405bd2:	f04f 0300 	mov.w	r3, #0
  405bd6:	3a01      	subs	r2, #1
  405bd8:	e737      	b.n	405a4a <__aeabi_fmul+0x92>
  405bda:	f092 0f00 	teq	r2, #0
  405bde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405be2:	bf02      	ittt	eq
  405be4:	0040      	lsleq	r0, r0, #1
  405be6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405bea:	3a01      	subeq	r2, #1
  405bec:	d0f9      	beq.n	405be2 <__aeabi_fdiv+0xc2>
  405bee:	ea40 000c 	orr.w	r0, r0, ip
  405bf2:	f093 0f00 	teq	r3, #0
  405bf6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405bfa:	bf02      	ittt	eq
  405bfc:	0049      	lsleq	r1, r1, #1
  405bfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405c02:	3b01      	subeq	r3, #1
  405c04:	d0f9      	beq.n	405bfa <__aeabi_fdiv+0xda>
  405c06:	ea41 010c 	orr.w	r1, r1, ip
  405c0a:	e795      	b.n	405b38 <__aeabi_fdiv+0x18>
  405c0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405c10:	ea92 0f0c 	teq	r2, ip
  405c14:	d108      	bne.n	405c28 <__aeabi_fdiv+0x108>
  405c16:	0242      	lsls	r2, r0, #9
  405c18:	f47f af7d 	bne.w	405b16 <__aeabi_fmul+0x15e>
  405c1c:	ea93 0f0c 	teq	r3, ip
  405c20:	f47f af70 	bne.w	405b04 <__aeabi_fmul+0x14c>
  405c24:	4608      	mov	r0, r1
  405c26:	e776      	b.n	405b16 <__aeabi_fmul+0x15e>
  405c28:	ea93 0f0c 	teq	r3, ip
  405c2c:	d104      	bne.n	405c38 <__aeabi_fdiv+0x118>
  405c2e:	024b      	lsls	r3, r1, #9
  405c30:	f43f af4c 	beq.w	405acc <__aeabi_fmul+0x114>
  405c34:	4608      	mov	r0, r1
  405c36:	e76e      	b.n	405b16 <__aeabi_fmul+0x15e>
  405c38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405c3c:	bf18      	it	ne
  405c3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405c42:	d1ca      	bne.n	405bda <__aeabi_fdiv+0xba>
  405c44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405c48:	f47f af5c 	bne.w	405b04 <__aeabi_fmul+0x14c>
  405c4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405c50:	f47f af3c 	bne.w	405acc <__aeabi_fmul+0x114>
  405c54:	e75f      	b.n	405b16 <__aeabi_fmul+0x15e>
  405c56:	bf00      	nop

00405c58 <__gesf2>:
  405c58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  405c5c:	e006      	b.n	405c6c <__cmpsf2+0x4>
  405c5e:	bf00      	nop

00405c60 <__lesf2>:
  405c60:	f04f 0c01 	mov.w	ip, #1
  405c64:	e002      	b.n	405c6c <__cmpsf2+0x4>
  405c66:	bf00      	nop

00405c68 <__cmpsf2>:
  405c68:	f04f 0c01 	mov.w	ip, #1
  405c6c:	f84d cd04 	str.w	ip, [sp, #-4]!
  405c70:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405c7c:	bf18      	it	ne
  405c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405c82:	d011      	beq.n	405ca8 <__cmpsf2+0x40>
  405c84:	b001      	add	sp, #4
  405c86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  405c8a:	bf18      	it	ne
  405c8c:	ea90 0f01 	teqne	r0, r1
  405c90:	bf58      	it	pl
  405c92:	ebb2 0003 	subspl.w	r0, r2, r3
  405c96:	bf88      	it	hi
  405c98:	17c8      	asrhi	r0, r1, #31
  405c9a:	bf38      	it	cc
  405c9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  405ca0:	bf18      	it	ne
  405ca2:	f040 0001 	orrne.w	r0, r0, #1
  405ca6:	4770      	bx	lr
  405ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405cac:	d102      	bne.n	405cb4 <__cmpsf2+0x4c>
  405cae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405cb2:	d105      	bne.n	405cc0 <__cmpsf2+0x58>
  405cb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405cb8:	d1e4      	bne.n	405c84 <__cmpsf2+0x1c>
  405cba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405cbe:	d0e1      	beq.n	405c84 <__cmpsf2+0x1c>
  405cc0:	f85d 0b04 	ldr.w	r0, [sp], #4
  405cc4:	4770      	bx	lr
  405cc6:	bf00      	nop

00405cc8 <__aeabi_cfrcmple>:
  405cc8:	4684      	mov	ip, r0
  405cca:	4608      	mov	r0, r1
  405ccc:	4661      	mov	r1, ip
  405cce:	e7ff      	b.n	405cd0 <__aeabi_cfcmpeq>

00405cd0 <__aeabi_cfcmpeq>:
  405cd0:	b50f      	push	{r0, r1, r2, r3, lr}
  405cd2:	f7ff ffc9 	bl	405c68 <__cmpsf2>
  405cd6:	2800      	cmp	r0, #0
  405cd8:	bf48      	it	mi
  405cda:	f110 0f00 	cmnmi.w	r0, #0
  405cde:	bd0f      	pop	{r0, r1, r2, r3, pc}

00405ce0 <__aeabi_fcmpeq>:
  405ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
  405ce4:	f7ff fff4 	bl	405cd0 <__aeabi_cfcmpeq>
  405ce8:	bf0c      	ite	eq
  405cea:	2001      	moveq	r0, #1
  405cec:	2000      	movne	r0, #0
  405cee:	f85d fb08 	ldr.w	pc, [sp], #8
  405cf2:	bf00      	nop

00405cf4 <__aeabi_fcmplt>:
  405cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
  405cf8:	f7ff ffea 	bl	405cd0 <__aeabi_cfcmpeq>
  405cfc:	bf34      	ite	cc
  405cfe:	2001      	movcc	r0, #1
  405d00:	2000      	movcs	r0, #0
  405d02:	f85d fb08 	ldr.w	pc, [sp], #8
  405d06:	bf00      	nop

00405d08 <__aeabi_fcmple>:
  405d08:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d0c:	f7ff ffe0 	bl	405cd0 <__aeabi_cfcmpeq>
  405d10:	bf94      	ite	ls
  405d12:	2001      	movls	r0, #1
  405d14:	2000      	movhi	r0, #0
  405d16:	f85d fb08 	ldr.w	pc, [sp], #8
  405d1a:	bf00      	nop

00405d1c <__aeabi_fcmpge>:
  405d1c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d20:	f7ff ffd2 	bl	405cc8 <__aeabi_cfrcmple>
  405d24:	bf94      	ite	ls
  405d26:	2001      	movls	r0, #1
  405d28:	2000      	movhi	r0, #0
  405d2a:	f85d fb08 	ldr.w	pc, [sp], #8
  405d2e:	bf00      	nop

00405d30 <__aeabi_fcmpgt>:
  405d30:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d34:	f7ff ffc8 	bl	405cc8 <__aeabi_cfrcmple>
  405d38:	bf34      	ite	cc
  405d3a:	2001      	movcc	r0, #1
  405d3c:	2000      	movcs	r0, #0
  405d3e:	f85d fb08 	ldr.w	pc, [sp], #8
  405d42:	bf00      	nop

00405d44 <__aeabi_f2iz>:
  405d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405d4c:	d30f      	bcc.n	405d6e <__aeabi_f2iz+0x2a>
  405d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405d56:	d90d      	bls.n	405d74 <__aeabi_f2iz+0x30>
  405d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405d60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405d64:	fa23 f002 	lsr.w	r0, r3, r2
  405d68:	bf18      	it	ne
  405d6a:	4240      	negne	r0, r0
  405d6c:	4770      	bx	lr
  405d6e:	f04f 0000 	mov.w	r0, #0
  405d72:	4770      	bx	lr
  405d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405d78:	d101      	bne.n	405d7e <__aeabi_f2iz+0x3a>
  405d7a:	0242      	lsls	r2, r0, #9
  405d7c:	d105      	bne.n	405d8a <__aeabi_f2iz+0x46>
  405d7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  405d82:	bf08      	it	eq
  405d84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405d88:	4770      	bx	lr
  405d8a:	f04f 0000 	mov.w	r0, #0
  405d8e:	4770      	bx	lr

00405d90 <__aeabi_f2uiz>:
  405d90:	0042      	lsls	r2, r0, #1
  405d92:	d20e      	bcs.n	405db2 <__aeabi_f2uiz+0x22>
  405d94:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405d98:	d30b      	bcc.n	405db2 <__aeabi_f2uiz+0x22>
  405d9a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405d9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405da2:	d409      	bmi.n	405db8 <__aeabi_f2uiz+0x28>
  405da4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405dac:	fa23 f002 	lsr.w	r0, r3, r2
  405db0:	4770      	bx	lr
  405db2:	f04f 0000 	mov.w	r0, #0
  405db6:	4770      	bx	lr
  405db8:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405dbc:	d101      	bne.n	405dc2 <__aeabi_f2uiz+0x32>
  405dbe:	0242      	lsls	r2, r0, #9
  405dc0:	d102      	bne.n	405dc8 <__aeabi_f2uiz+0x38>
  405dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  405dc6:	4770      	bx	lr
  405dc8:	f04f 0000 	mov.w	r0, #0
  405dcc:	4770      	bx	lr
  405dce:	bf00      	nop
  405dd0:	0a0d0a0d 	.word	0x0a0d0a0d
  405dd4:	346d6173 	.word	0x346d6173
  405dd8:	63323364 	.word	0x63323364
  405ddc:	756d6920 	.word	0x756d6920
  405de0:	6d656420 	.word	0x6d656420
  405de4:	2e2e2e6f 	.word	0x2e2e2e6f
  405de8:	00000a0d 	.word	0x00000a0d
  405dec:	0000002e 	.word	0x0000002e
  405df0:	6c6c6f72 	.word	0x6c6c6f72
  405df4:	7469702f 	.word	0x7469702f
  405df8:	792f6863 	.word	0x792f6863
  405dfc:	203a7761 	.word	0x203a7761
  405e00:	25206625 	.word	0x25206625
  405e04:	66252066 	.word	0x66252066
  405e08:	00000a0d 	.word	0x00000a0d
  405e0c:	74697277 	.word	0x74697277
  405e10:	65725f65 	.word	0x65725f65
  405e14:	74736967 	.word	0x74736967
  405e18:	203a7265 	.word	0x203a7265
  405e1c:	63637573 	.word	0x63637573
  405e20:	0d737365 	.word	0x0d737365
  405e24:	0000000a 	.word	0x0000000a
  405e28:	5f697774 	.word	0x5f697774
  405e2c:	7473616d 	.word	0x7473616d
  405e30:	695f7265 	.word	0x695f7265
  405e34:	3a74696e 	.word	0x3a74696e
  405e38:	69616620 	.word	0x69616620
  405e3c:	0d64656c 	.word	0x0d64656c
  405e40:	0000000a 	.word	0x0000000a
  405e44:	5f697774 	.word	0x5f697774
  405e48:	7473616d 	.word	0x7473616d
  405e4c:	695f7265 	.word	0x695f7265
  405e50:	3a74696e 	.word	0x3a74696e
  405e54:	63757320 	.word	0x63757320
  405e58:	73736563 	.word	0x73736563
  405e5c:	00000a0d 	.word	0x00000a0d
  405e60:	5f697774 	.word	0x5f697774
  405e64:	626f7270 	.word	0x626f7270
  405e68:	66203a65 	.word	0x66203a65
  405e6c:	656c6961 	.word	0x656c6961
  405e70:	000a0d64 	.word	0x000a0d64
  405e74:	5f697774 	.word	0x5f697774
  405e78:	626f7270 	.word	0x626f7270
  405e7c:	73203a65 	.word	0x73203a65
  405e80:	65636375 	.word	0x65636375
  405e84:	0a0d7373 	.word	0x0a0d7373
  405e88:	00000000 	.word	0x00000000
  405e8c:	62616e45 	.word	0x62616e45
  405e90:	0064656c 	.word	0x0064656c
  405e94:	61736944 	.word	0x61736944
  405e98:	64656c62 	.word	0x64656c62
  405e9c:	00000000 	.word	0x00000000
  405ea0:	69766544 	.word	0x69766544
  405ea4:	203a6563 	.word	0x203a6563
  405ea8:	31257830 	.word	0x31257830
  405eac:	000a0d78 	.word	0x000a0d78
  405eb0:	65656c53 	.word	0x65656c53
  405eb4:	6f4d2070 	.word	0x6f4d2070
  405eb8:	203a6564 	.word	0x203a6564
  405ebc:	0a0d7325 	.word	0x0a0d7325
  405ec0:	00000000 	.word	0x00000000
  405ec4:	636f6c43 	.word	0x636f6c43
  405ec8:	6f53206b 	.word	0x6f53206b
  405ecc:	65637275 	.word	0x65637275
  405ed0:	0000203a 	.word	0x0000203a
  405ed4:	65746e49 	.word	0x65746e49
  405ed8:	6c616e72 	.word	0x6c616e72
  405edc:	484d3820 	.word	0x484d3820
  405ee0:	736f207a 	.word	0x736f207a
  405ee4:	6c6c6963 	.word	0x6c6c6963
  405ee8:	726f7461 	.word	0x726f7461
  405eec:	00000a0d 	.word	0x00000a0d
  405ef0:	204c4c50 	.word	0x204c4c50
  405ef4:	68746977 	.word	0x68746977
  405ef8:	61205820 	.word	0x61205820
  405efc:	20736978 	.word	0x20736978
  405f00:	6f727967 	.word	0x6f727967
  405f04:	706f6373 	.word	0x706f6373
  405f08:	65722065 	.word	0x65722065
  405f0c:	65726566 	.word	0x65726566
  405f10:	0d65636e 	.word	0x0d65636e
  405f14:	0000000a 	.word	0x0000000a
  405f18:	6f727947 	.word	0x6f727947
  405f1c:	706f6373 	.word	0x706f6373
  405f20:	00203a65 	.word	0x00203a65
  405f24:	20303532 	.word	0x20303532
  405f28:	0d737064 	.word	0x0d737064
  405f2c:	0000000a 	.word	0x0000000a
  405f30:	20303035 	.word	0x20303035
  405f34:	0d737064 	.word	0x0d737064
  405f38:	0000000a 	.word	0x0000000a
  405f3c:	30303031 	.word	0x30303031
  405f40:	73706420 	.word	0x73706420
  405f44:	00000a0d 	.word	0x00000a0d
  405f48:	30303032 	.word	0x30303032
  405f4c:	73706420 	.word	0x73706420
  405f50:	00000a0d 	.word	0x00000a0d
  405f54:	5f657375 	.word	0x5f657375
  405f58:	696c6163 	.word	0x696c6163
  405f5c:	74617262 	.word	0x74617262
  405f60:	25203a65 	.word	0x25203a65
  405f64:	000a0d64 	.word	0x000a0d64
  405f68:	75746361 	.word	0x75746361
  405f6c:	745f6c61 	.word	0x745f6c61
  405f70:	73657268 	.word	0x73657268
  405f74:	646c6f68 	.word	0x646c6f68
  405f78:	6625203a 	.word	0x6625203a
  405f7c:	00000a0d 	.word	0x00000a0d
  405f80:	5f737064 	.word	0x5f737064
  405f84:	5f726570 	.word	0x5f726570
  405f88:	69676964 	.word	0x69676964
  405f8c:	25203a74 	.word	0x25203a74
  405f90:	000a0d66 	.word	0x000a0d66
  405f94:	676e6172 	.word	0x676e6172
  405f98:	65705f65 	.word	0x65705f65
  405f9c:	69645f72 	.word	0x69645f72
  405fa0:	3a746967 	.word	0x3a746967
  405fa4:	0d662520 	.word	0x0d662520
  405fa8:	0000000a 	.word	0x0000000a
  405fac:	76726573 	.word	0x76726573
  405fb0:	6e695f6f 	.word	0x6e695f6f
  405fb4:	0a0d7469 	.word	0x0a0d7469
  405fb8:	00000000 	.word	0x00000000
  405fbc:	00000001 	.word	0x00000001
  405fc0:	00000002 	.word	0x00000002
  405fc4:	00000004 	.word	0x00000004
  405fc8:	00000008 	.word	0x00000008
  405fcc:	00000010 	.word	0x00000010
  405fd0:	00000020 	.word	0x00000020
  405fd4:	00000040 	.word	0x00000040
  405fd8:	00000080 	.word	0x00000080
  405fdc:	00000100 	.word	0x00000100
  405fe0:	00000200 	.word	0x00000200
  405fe4:	00000400 	.word	0x00000400
  405fe8:	74727173 	.word	0x74727173
  405fec:	00000000 	.word	0x00000000

00405ff0 <atanlo>:
  405ff0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  406000:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00406010 <atanhi>:
  406010:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  406020:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00406030 <_global_impure_ptr>:
  406030:	20000014 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  406040:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  406050:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  406060:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  406070:	4e614e00 00000000                       .NaN....

00406078 <__sf_fake_stdin>:
	...

00406098 <__sf_fake_stdout>:
	...

004060b8 <__sf_fake_stderr>:
	...

004060d8 <__mprec_tens>:
  4060d8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4060e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4060f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406108:	00000000 412e8480 00000000 416312d0     .......A......cA
  406118:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406128:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406138:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406148:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406158:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406168:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406178:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406188:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406198:	79d99db4 44ea7843                       ...yCx.D

004061a0 <__mprec_bigtens>:
  4061a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4061b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4061c0:	7f73bf3c 75154fdd                       <.s..O.u

004061c8 <p05.6097>:
  4061c8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4061d8:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  4061e8:	5849534f 00002e00                                OSIX...

004061ef <_ctype_>:
  4061ef:	20202000 20202020 28282020 20282828     .         ((((( 
  4061ff:	20202020 20202020 20202020 20202020                     
  40620f:	10108820 10101010 10101010 10101010      ...............
  40621f:	04040410 04040404 10040404 10101010     ................
  40622f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40623f:	01010101 01010101 01010101 10101010     ................
  40624f:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40625f:	02020202 02020202 02020202 10101010     ................
  40626f:	00000020 00000000 00000000 00000000      ...............
	...

004062f0 <_init>:
  4062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4062f2:	bf00      	nop
  4062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4062f6:	bc08      	pop	{r3}
  4062f8:	469e      	mov	lr, r3
  4062fa:	4770      	bx	lr

004062fc <__init_array_start>:
  4062fc:	004000f1 	.word	0x004000f1

00406300 <_fini>:
  406300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406302:	bf00      	nop
  406304:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406306:	bc08      	pop	{r3}
  406308:	469e      	mov	lr, r3
  40630a:	4770      	bx	lr
  40630c:	0000      	movs	r0, r0
	...

00406310 <__portable_delay_cycles_veneer>:
  406310:	f85f f000 	ldr.w	pc, [pc]	; 406314 <__portable_delay_cycles_veneer+0x4>
  406314:	20000001 	.word	0x20000001

00406318 <__fini_array_start>:
  406318:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <__fdlib_version>:
20000010:	0001 0000                                   ....

20000014 <impure_data>:
20000014:	0000 0000 6078 0040 6098 0040 60b8 0040     ....x`@..`@..`@.
	...

20000074 <_impure_ptr>:
20000074:	0014 2000                                   ... 

20000078 <__global_locale>:
20000078:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	4dc1 0040 4d75 0040 0000 0000 61ef 0040     .M@.uM@......a@.
20000168:	61ed 0040 61d9 0040 61d9 0040 61d9 0040     .a@..a@..a@..a@.
20000178:	61d9 0040 61d9 0040 61d9 0040 61d9 0040     .a@..a@..a@..a@.
20000188:	61d9 0040 61d9 0040 ffff ffff ffff ffff     .a@..a@.........
20000198:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
