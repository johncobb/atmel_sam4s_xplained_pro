
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008504  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  00408504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000660  200001e8  004086ec  000201e8  2**2
                  ALLOC
  3 .stack        00003000  20000848  00408d4c  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   000163cc  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003952  00000000  00000000  0003664c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005c60  00000000  00000000  00039f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ec0  00000000  00000000  0003fbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d20  00000000  00000000  00040abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000189a9  00000000  00000000  000417de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014a35  00000000  00000000  0005a187  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00055821  00000000  00000000  0006ebbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003304  00000000  00000000  000c43e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003848 	.word	0x20003848
  400004:	00402331 	.word	0x00402331
  400008:	0040232d 	.word	0x0040232d
  40000c:	0040232d 	.word	0x0040232d
  400010:	0040232d 	.word	0x0040232d
  400014:	0040232d 	.word	0x0040232d
  400018:	0040232d 	.word	0x0040232d
	...
  40002c:	0040232d 	.word	0x0040232d
  400030:	0040232d 	.word	0x0040232d
  400034:	00000000 	.word	0x00000000
  400038:	0040232d 	.word	0x0040232d
  40003c:	0040056d 	.word	0x0040056d
  400040:	0040232d 	.word	0x0040232d
  400044:	0040232d 	.word	0x0040232d
  400048:	0040232d 	.word	0x0040232d
  40004c:	0040232d 	.word	0x0040232d
  400050:	0040232d 	.word	0x0040232d
  400054:	0040232d 	.word	0x0040232d
  400058:	0040232d 	.word	0x0040232d
  40005c:	0040232d 	.word	0x0040232d
  400060:	0040232d 	.word	0x0040232d
  400064:	0040232d 	.word	0x0040232d
  400068:	00000000 	.word	0x00000000
  40006c:	00401f6d 	.word	0x00401f6d
  400070:	00401f7d 	.word	0x00401f7d
  400074:	00401f8d 	.word	0x00401f8d
  400078:	0040232d 	.word	0x0040232d
  40007c:	0040232d 	.word	0x0040232d
	...
  400088:	0040232d 	.word	0x0040232d
  40008c:	0040232d 	.word	0x0040232d
  400090:	0040232d 	.word	0x0040232d
  400094:	0040232d 	.word	0x0040232d
  400098:	0040232d 	.word	0x0040232d
  40009c:	0040232d 	.word	0x0040232d
  4000a0:	0040232d 	.word	0x0040232d
  4000a4:	0040232d 	.word	0x0040232d
  4000a8:	0040232d 	.word	0x0040232d
  4000ac:	0040232d 	.word	0x0040232d
  4000b0:	0040232d 	.word	0x0040232d
  4000b4:	0040232d 	.word	0x0040232d
  4000b8:	0040232d 	.word	0x0040232d
  4000bc:	0040232d 	.word	0x0040232d
  4000c0:	0040232d 	.word	0x0040232d
  4000c4:	0040232d 	.word	0x0040232d
  4000c8:	0040232d 	.word	0x0040232d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e8 	.word	0x200001e8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00408504 	.word	0x00408504

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001ec 	.word	0x200001ec
  40011c:	00408504 	.word	0x00408504
  400120:	00408504 	.word	0x00408504
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f002 f9de 	bl	4024ec <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 ff66 	bl	402004 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 ff8e 	bl	402058 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 ff92 	bl	402068 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 ff95 	bl	402078 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 ff22 	bl	401f9c <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f002 f93e 	bl	4023d8 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f002 f9c5 	bl	4024ec <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000500 	.word	0x20000500
  4001a8:	200004f8 	.word	0x200004f8

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200004fc 	.word	0x200004fc
  4001f8:	20000500 	.word	0x20000500

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 ff8e 	bl	402134 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 ff83 	bl	402134 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 ff8c 	bl	40215c <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 ff7f 	bl	40215c <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 ff4a 	bl	402124 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 ff3e 	bl	402124 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 ff44 	bl	402148 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 ff38 	bl	402148 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002f8:	b099      	sub	sp, #100	; 0x64
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f001 fae7 	bl	4018d0 <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 fec0 	bl	402088 <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 febd 	bl	402088 <pmc_enable_periph_clk>
    config_init();
  40030e:	f000 f913 	bl	400538 <config_init>
    cph_millis_init();
  400312:	f000 f933 	bl	40057c <cph_millis_init>
    cli_init();
  400316:	f000 f95b 	bl	4005d0 <cli_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40031a:	2009      	movs	r0, #9
  40031c:	f001 feb4 	bl	402088 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400320:	4c6d      	ldr	r4, [pc, #436]	; (4004d8 <main+0x1e4>)
  400322:	4b6e      	ldr	r3, [pc, #440]	; (4004dc <main+0x1e8>)
  400324:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400326:	4a6e      	ldr	r2, [pc, #440]	; (4004e0 <main+0x1ec>)
  400328:	4b6e      	ldr	r3, [pc, #440]	; (4004e4 <main+0x1f0>)
  40032a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40032c:	4a6e      	ldr	r2, [pc, #440]	; (4004e8 <main+0x1f4>)
  40032e:	4b6f      	ldr	r3, [pc, #444]	; (4004ec <main+0x1f8>)
  400330:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400332:	4b6f      	ldr	r3, [pc, #444]	; (4004f0 <main+0x1fc>)
  400334:	9315      	str	r3, [sp, #84]	; 0x54
	uart_settings.ul_baudrate = opt->baudrate;
  400336:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40033a:	9316      	str	r3, [sp, #88]	; 0x58
	uart_settings.ul_mode = opt->paritytype;
  40033c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400340:	9317      	str	r3, [sp, #92]	; 0x5c
  400342:	2009      	movs	r0, #9
  400344:	f001 fea0 	bl	402088 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400348:	a915      	add	r1, sp, #84	; 0x54
  40034a:	4620      	mov	r0, r4
  40034c:	f001 feca 	bl	4020e4 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400350:	4c68      	ldr	r4, [pc, #416]	; (4004f4 <main+0x200>)
  400352:	6823      	ldr	r3, [r4, #0]
  400354:	2100      	movs	r1, #0
  400356:	6898      	ldr	r0, [r3, #8]
  400358:	f003 f9fa 	bl	403750 <setbuf>
	setbuf(stdin, NULL);
  40035c:	6823      	ldr	r3, [r4, #0]
  40035e:	2100      	movs	r1, #0
  400360:	6858      	ldr	r0, [r3, #4]
  400362:	f003 f9f5 	bl	403750 <setbuf>
    configure_console();
    ap_init();
  400366:	f001 faa9 	bl	4018bc <ap_init>

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  40036a:	4863      	ldr	r0, [pc, #396]	; (4004f8 <main+0x204>)
  40036c:	f003 f9e8 	bl	403740 <puts>
  400370:	240a      	movs	r4, #10

    for (int i=0; i<10; i++) {
        printf(".");
  400372:	4e62      	ldr	r6, [pc, #392]	; (4004fc <main+0x208>)
        delay_ms(100);
  400374:	4d62      	ldr	r5, [pc, #392]	; (400500 <main+0x20c>)
    ap_init();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
        printf(".");
  400376:	4630      	mov	r0, r6
  400378:	f003 f970 	bl	40365c <iprintf>
        delay_ms(100);
  40037c:	4628      	mov	r0, r5
  40037e:	f008 f8bb 	bl	4084f8 <__portable_delay_cycles_veneer>
    configure_console();
    ap_init();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<10; i++) {
  400382:	3c01      	subs	r4, #1
  400384:	d1f7      	bne.n	400376 <main+0x82>
        printf(".");
        delay_ms(100);
    }
    printf("\r\n");
  400386:	485f      	ldr	r0, [pc, #380]	; (400504 <main+0x210>)
  400388:	f003 f968 	bl	40365c <iprintf>

    
    if (imu_init()) {
  40038c:	f000 ff50 	bl	401230 <imu_init>
  400390:	2800      	cmp	r0, #0
  400392:	f000 809d 	beq.w	4004d0 <main+0x1dc>

        motor_init();
  400396:	f001 f8c1 	bl	40151c <motor_init>
        //     cli_tick();
        //     delay_ms(100);
        // }

        // Calibrate the imu
        imu_calibrate();
  40039a:	f000 ff65 	bl	401268 <imu_calibrate>
        config.imu_calibrate = false;
  40039e:	2200      	movs	r2, #0
  4003a0:	4b59      	ldr	r3, [pc, #356]	; (400508 <main+0x214>)
  4003a2:	75da      	strb	r2, [r3, #23]
 
        

        printf("please press button to arm motors\r\n");
  4003a4:	4859      	ldr	r0, [pc, #356]	; (40050c <main+0x218>)
  4003a6:	f003 f959 	bl	40365c <iprintf>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4003aa:	4b59      	ldr	r3, [pc, #356]	; (400510 <main+0x21c>)
  4003ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        while(true) {
            if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  4003ae:	f012 0f04 	tst.w	r2, #4
  4003b2:	d1fb      	bne.n	4003ac <main+0xb8>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4003b4:	4b57      	ldr	r3, [pc, #348]	; (400514 <main+0x220>)
  4003b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4003b8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  4003bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4003c0:	4b54      	ldr	r3, [pc, #336]	; (400514 <main+0x220>)
  4003c2:	bf14      	ite	ne
  4003c4:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4003c6:	631a      	streq	r2, [r3, #48]	; 0x30
                ioport_toggle_pin_level(LED0_GPIO);
                config.motor_armed = true;
  4003c8:	2101      	movs	r1, #1
  4003ca:	4b4f      	ldr	r3, [pc, #316]	; (400508 <main+0x214>)
  4003cc:	7519      	strb	r1, [r3, #20]
                printf("motor_armed: %d\r\n", config.motor_armed);
  4003ce:	4852      	ldr	r0, [pc, #328]	; (400518 <main+0x224>)
  4003d0:	f003 f944 	bl	40365c <iprintf>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003d4:	4c4c      	ldr	r4, [pc, #304]	; (400508 <main+0x214>)
                imu_calibrate();
                pid_init();
                config.imu_calibrate = false;
  4003d6:	2600      	movs	r6, #0

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  4003d8:	f240 477e 	movw	r7, #1150	; 0x47e
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);

            if (config.motor_armed) {
                motor_set_power(motors[1], power_left + config.motor_offset);
  4003dc:	f8df a150 	ldr.w	sl, [pc, #336]	; 400530 <main+0x23c>
  4003e0:	f10a 0364 	add.w	r3, sl, #100	; 0x64
  4003e4:	9313      	str	r3, [sp, #76]	; 0x4c
                motor_set_power(motors[0], power_right + config.motor_offset);
            }


            if (config.log_imu) {
                if (cph_get_millis() >= f_log_timeout) {
  4003e6:	f8df b14c 	ldr.w	fp, [pc, #332]	; 400534 <main+0x240>
        }

        while(true) {


            if (config.imu_calibrate) {
  4003ea:	7de3      	ldrb	r3, [r4, #23]
  4003ec:	b123      	cbz	r3, 4003f8 <main+0x104>
                imu_calibrate();
  4003ee:	f000 ff3b 	bl	401268 <imu_calibrate>
                pid_init();
  4003f2:	f001 f9c9 	bl	401788 <pid_init>
                config.imu_calibrate = false;
  4003f6:	75e6      	strb	r6, [r4, #23]
            }
            cli_tick();
  4003f8:	f000 faa6 	bl	400948 <cli_tick>
            imu_tick();
  4003fc:	f000 ff48 	bl	401290 <imu_tick>
            motor_tick();
  400400:	f001 f950 	bl	4016a4 <motor_tick>

            // long y = (long) ap.imu.x_axis;

            long x = (long) pid_tick();
  400404:	f001 f9e8 	bl	4017d8 <pid_tick>
  400408:	f007 fc66 	bl	407cd8 <__aeabi_f2iz>
  40040c:	4680      	mov	r8, r0

            long power_left = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  40040e:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  400412:	9500      	str	r5, [sp, #0]
  400414:	463b      	mov	r3, r7
  400416:	225a      	movs	r2, #90	; 0x5a
  400418:	4631      	mov	r1, r6
  40041a:	f000 f89b 	bl	400554 <map>
  40041e:	4681      	mov	r9, r0
            long power_right = map(x, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);
  400420:	9500      	str	r5, [sp, #0]
  400422:	463b      	mov	r3, r7
  400424:	f06f 0259 	mvn.w	r2, #89	; 0x59
  400428:	4631      	mov	r1, r6
  40042a:	4640      	mov	r0, r8
  40042c:	f000 f892 	bl	400554 <map>
  400430:	4605      	mov	r5, r0

            if (config.motor_armed) {
  400432:	7d23      	ldrb	r3, [r4, #20]
  400434:	b1db      	cbz	r3, 40046e <main+0x17a>
                motor_set_power(motors[1], power_left + config.motor_offset);
  400436:	6923      	ldr	r3, [r4, #16]
  400438:	444b      	add	r3, r9
  40043a:	9311      	str	r3, [sp, #68]	; 0x44
  40043c:	f04f 0844 	mov.w	r8, #68	; 0x44
  400440:	4642      	mov	r2, r8
  400442:	9913      	ldr	r1, [sp, #76]	; 0x4c
  400444:	4668      	mov	r0, sp
  400446:	f002 fc87 	bl	402d58 <memcpy>
  40044a:	f10a 0354 	add.w	r3, sl, #84	; 0x54
  40044e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400450:	f001 f92a 	bl	4016a8 <motor_set_power>
                motor_set_power(motors[0], power_right + config.motor_offset);
  400454:	6923      	ldr	r3, [r4, #16]
  400456:	441d      	add	r5, r3
  400458:	9511      	str	r5, [sp, #68]	; 0x44
  40045a:	4642      	mov	r2, r8
  40045c:	f10a 0110 	add.w	r1, sl, #16
  400460:	4668      	mov	r0, sp
  400462:	f002 fc79 	bl	402d58 <memcpy>
  400466:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
  40046a:	f001 f91d 	bl	4016a8 <motor_set_power>
            }


            if (config.log_imu) {
  40046e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  400472:	2b00      	cmp	r3, #0
  400474:	d0b9      	beq.n	4003ea <main+0xf6>
                if (cph_get_millis() >= f_log_timeout) {
  400476:	f8db 2000 	ldr.w	r2, [fp]
  40047a:	4b28      	ldr	r3, [pc, #160]	; (40051c <main+0x228>)
  40047c:	681b      	ldr	r3, [r3, #0]
  40047e:	429a      	cmp	r2, r3
  400480:	d3b3      	bcc.n	4003ea <main+0xf6>
                    f_log_timeout = cph_get_millis() + 50;
  400482:	f8db 3000 	ldr.w	r3, [fp]
  400486:	3332      	adds	r3, #50	; 0x32
  400488:	4a24      	ldr	r2, [pc, #144]	; (40051c <main+0x228>)
  40048a:	6013      	str	r3, [r2, #0]
                    printf("roll/pitch/yaw error/pid: %f %f %f %f %f\r\n", ap.imu.x_axis, ap.imu.y_axis, ap.imu.z_axis, error, pid);
  40048c:	4d24      	ldr	r5, [pc, #144]	; (400520 <main+0x22c>)
  40048e:	6828      	ldr	r0, [r5, #0]
  400490:	f006 fdb2 	bl	406ff8 <__aeabi_f2d>
  400494:	4680      	mov	r8, r0
  400496:	4689      	mov	r9, r1
  400498:	4b22      	ldr	r3, [pc, #136]	; (400524 <main+0x230>)
  40049a:	6818      	ldr	r0, [r3, #0]
  40049c:	f006 fdac 	bl	406ff8 <__aeabi_f2d>
  4004a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4004a4:	4b20      	ldr	r3, [pc, #128]	; (400528 <main+0x234>)
  4004a6:	6818      	ldr	r0, [r3, #0]
  4004a8:	f006 fda6 	bl	406ff8 <__aeabi_f2d>
  4004ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4004b0:	68a8      	ldr	r0, [r5, #8]
  4004b2:	f006 fda1 	bl	406ff8 <__aeabi_f2d>
  4004b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4004ba:	6868      	ldr	r0, [r5, #4]
  4004bc:	f006 fd9c 	bl	406ff8 <__aeabi_f2d>
  4004c0:	e9cd 0100 	strd	r0, r1, [sp]
  4004c4:	4642      	mov	r2, r8
  4004c6:	464b      	mov	r3, r9
  4004c8:	4818      	ldr	r0, [pc, #96]	; (40052c <main+0x238>)
  4004ca:	f003 f8c7 	bl	40365c <iprintf>
  4004ce:	e78c      	b.n	4003ea <main+0xf6>
    //         delay_ms(500); 
    //     }


    // }
}
  4004d0:	2000      	movs	r0, #0
  4004d2:	b019      	add	sp, #100	; 0x64
  4004d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4004d8:	400e0800 	.word	0x400e0800
  4004dc:	20000500 	.word	0x20000500
  4004e0:	0040027d 	.word	0x0040027d
  4004e4:	200004fc 	.word	0x200004fc
  4004e8:	004001fd 	.word	0x004001fd
  4004ec:	200004f8 	.word	0x200004f8
  4004f0:	07270e00 	.word	0x07270e00
  4004f4:	20000078 	.word	0x20000078
  4004f8:	00407d64 	.word	0x00407d64
  4004fc:	00407d80 	.word	0x00407d80
  400500:	000d1437 	.word	0x000d1437
  400504:	00407d7c 	.word	0x00407d7c
  400508:	200006d0 	.word	0x200006d0
  40050c:	00407d84 	.word	0x00407d84
  400510:	400e0e00 	.word	0x400e0e00
  400514:	400e1200 	.word	0x400e1200
  400518:	00407da8 	.word	0x00407da8
  40051c:	20000204 	.word	0x20000204
  400520:	20000800 	.word	0x20000800
  400524:	2000044c 	.word	0x2000044c
  400528:	20000458 	.word	0x20000458
  40052c:	00407dbc 	.word	0x00407dbc
  400530:	20000530 	.word	0x20000530
  400534:	20000208 	.word	0x20000208

00400538 <config_init>:
	// config.axis_swap_xy = false;
	// config.fpv_freeze_pitch = false;
	// config.fpv_freeze_roll = false;
	// config.max_pwm_fpv_pitch = 80;
	// config.max_pwm_fpv_roll = 80;
    config.gyro_calibrate = true;
  400538:	4b05      	ldr	r3, [pc, #20]	; (400550 <config_init+0x18>)
  40053a:	2101      	movs	r1, #1
  40053c:	7559      	strb	r1, [r3, #21]
	config.accel_calibrate = false;
  40053e:	2200      	movs	r2, #0
  400540:	759a      	strb	r2, [r3, #22]
	config.imu_calibrate = true;
  400542:	75d9      	strb	r1, [r3, #23]
	config.log_motor = false;
  400544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	config.log_imu = false;
  400548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	200006d0 	.word	0x200006d0

00400554 <map>:
#include "cph_util.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  400554:	b410      	push	{r4}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  400556:	1a40      	subs	r0, r0, r1
  400558:	9c01      	ldr	r4, [sp, #4]
  40055a:	1ae4      	subs	r4, r4, r3
  40055c:	fb04 f000 	mul.w	r0, r4, r0
  400560:	1a52      	subs	r2, r2, r1
  400562:	fb90 f0f2 	sdiv	r0, r0, r2
  400566:	4418      	add	r0, r3
  400568:	bc10      	pop	{r4}
  40056a:	4770      	bx	lr

0040056c <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  40056c:	4a02      	ldr	r2, [pc, #8]	; (400578 <SysTick_Handler+0xc>)
  40056e:	6813      	ldr	r3, [r2, #0]
  400570:	3301      	adds	r3, #1
  400572:	6013      	str	r3, [r2, #0]
  400574:	4770      	bx	lr
  400576:	bf00      	nop
  400578:	20000208 	.word	0x20000208

0040057c <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40057c:	4b05      	ldr	r3, [pc, #20]	; (400594 <cph_millis_init+0x18>)
  40057e:	4a06      	ldr	r2, [pc, #24]	; (400598 <cph_millis_init+0x1c>)
  400580:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400582:	21f0      	movs	r1, #240	; 0xf0
  400584:	4a05      	ldr	r2, [pc, #20]	; (40059c <cph_millis_init+0x20>)
  400586:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40058a:	2200      	movs	r2, #0
  40058c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40058e:	2207      	movs	r2, #7
  400590:	601a      	str	r2, [r3, #0]
  400592:	4770      	bx	lr
  400594:	e000e010 	.word	0xe000e010
  400598:	0001d4bf 	.word	0x0001d4bf
  40059c:	e000ed00 	.word	0xe000ed00

004005a0 <init_buffer>:
	init_buffer();
	init_lines();
}

void init_buffer()
{
  4005a0:	b508      	push	{r3, lr}
	cli_line_index = 0;
  4005a2:	2100      	movs	r1, #0
  4005a4:	4b03      	ldr	r3, [pc, #12]	; (4005b4 <init_buffer+0x14>)
  4005a6:	6019      	str	r1, [r3, #0]
	memset(cli_line_buffer, '\0', sizeof(cli_line_buffer));
  4005a8:	2281      	movs	r2, #129	; 0x81
  4005aa:	4803      	ldr	r0, [pc, #12]	; (4005b8 <init_buffer+0x18>)
  4005ac:	f002 fbdf 	bl	402d6e <memset>
  4005b0:	bd08      	pop	{r3, pc}
  4005b2:	bf00      	nop
  4005b4:	20000414 	.word	0x20000414
  4005b8:	200006f8 	.word	0x200006f8

004005bc <init_lines>:
}

void init_lines()
{
  4005bc:	b508      	push	{r3, lr}
	memset(cli_lines, '\0', sizeof(cli_lines));
  4005be:	2281      	movs	r2, #129	; 0x81
  4005c0:	2100      	movs	r1, #0
  4005c2:	4802      	ldr	r0, [pc, #8]	; (4005cc <init_lines+0x10>)
  4005c4:	f002 fbd3 	bl	402d6e <memset>
  4005c8:	bd08      	pop	{r3, pc}
  4005ca:	bf00      	nop
  4005cc:	2000077c 	.word	0x2000077c

004005d0 <cli_init>:
char cli_line_buffer[CLI_MAX_CHARS+1];
int cli_line_index = 0;


void cli_init()
{
  4005d0:	b508      	push	{r3, lr}
	init_buffer();
  4005d2:	f7ff ffe5 	bl	4005a0 <init_buffer>
	init_lines();
  4005d6:	f7ff fff1 	bl	4005bc <init_lines>
  4005da:	bd08      	pop	{r3, pc}

004005dc <cli_handle_command>:

}

//printf("motor0: %d\r\n", atoi(parm));
void cli_handle_command(char *cmd, char *parm)
{
  4005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005de:	b093      	sub	sp, #76	; 0x4c
  4005e0:	4604      	mov	r4, r0
  4005e2:	460d      	mov	r5, r1

	/*
	 * 	Autopilot settings
	 */
	if (strcmp(cmd, "apx") == 0) {
  4005e4:	4986      	ldr	r1, [pc, #536]	; (400800 <cli_handle_command+0x224>)
  4005e6:	f003 f965 	bl	4038b4 <strcmp>
  4005ea:	b968      	cbnz	r0, 400608 <cli_handle_command+0x2c>
		AP.desired_angle_x = atof(parm);
  4005ec:	4628      	mov	r0, r5
  4005ee:	f002 fb7f 	bl	402cf0 <atof>
  4005f2:	f007 f84d 	bl	407690 <__aeabi_d2f>
  4005f6:	4b83      	ldr	r3, [pc, #524]	; (400804 <cli_handle_command+0x228>)
  4005f8:	6058      	str	r0, [r3, #4]
		printf("AP.desired_angle_x: %f\r\n", AP.desired_angle_x);
  4005fa:	f006 fcfd 	bl	406ff8 <__aeabi_f2d>
  4005fe:	4602      	mov	r2, r0
  400600:	460b      	mov	r3, r1
  400602:	4881      	ldr	r0, [pc, #516]	; (400808 <cli_handle_command+0x22c>)
  400604:	f003 f82a 	bl	40365c <iprintf>
	}
	if (strcmp(cmd, "apy") == 0) {
  400608:	4980      	ldr	r1, [pc, #512]	; (40080c <cli_handle_command+0x230>)
  40060a:	4620      	mov	r0, r4
  40060c:	f003 f952 	bl	4038b4 <strcmp>
  400610:	b968      	cbnz	r0, 40062e <cli_handle_command+0x52>
		AP.desired_angle_y = atof(parm);
  400612:	4628      	mov	r0, r5
  400614:	f002 fb6c 	bl	402cf0 <atof>
  400618:	f007 f83a 	bl	407690 <__aeabi_d2f>
  40061c:	4b79      	ldr	r3, [pc, #484]	; (400804 <cli_handle_command+0x228>)
  40061e:	6098      	str	r0, [r3, #8]
		printf("AP.desired_angle_y: %f\r\n", AP.desired_angle_y);
  400620:	f006 fcea 	bl	406ff8 <__aeabi_f2d>
  400624:	4602      	mov	r2, r0
  400626:	460b      	mov	r3, r1
  400628:	4879      	ldr	r0, [pc, #484]	; (400810 <cli_handle_command+0x234>)
  40062a:	f003 f817 	bl	40365c <iprintf>
	}	

	/*
	 * 	Pid loop configuration
	 */
	if (strcmp(cmd, "kp") == 0) {
  40062e:	4979      	ldr	r1, [pc, #484]	; (400814 <cli_handle_command+0x238>)
  400630:	4620      	mov	r0, r4
  400632:	f003 f93f 	bl	4038b4 <strcmp>
  400636:	b968      	cbnz	r0, 400654 <cli_handle_command+0x78>
		config.pid_kp = atof(parm);
  400638:	4628      	mov	r0, r5
  40063a:	f002 fb59 	bl	402cf0 <atof>
  40063e:	f007 f827 	bl	407690 <__aeabi_d2f>
  400642:	4b75      	ldr	r3, [pc, #468]	; (400818 <cli_handle_command+0x23c>)
  400644:	6018      	str	r0, [r3, #0]
		printf("config.pid_kp: %f\r\n", config.pid_kp);
  400646:	f006 fcd7 	bl	406ff8 <__aeabi_f2d>
  40064a:	4602      	mov	r2, r0
  40064c:	460b      	mov	r3, r1
  40064e:	4873      	ldr	r0, [pc, #460]	; (40081c <cli_handle_command+0x240>)
  400650:	f003 f804 	bl	40365c <iprintf>
	}

	if (strcmp(cmd, "ki") == 0) {
  400654:	4972      	ldr	r1, [pc, #456]	; (400820 <cli_handle_command+0x244>)
  400656:	4620      	mov	r0, r4
  400658:	f003 f92c 	bl	4038b4 <strcmp>
  40065c:	b968      	cbnz	r0, 40067a <cli_handle_command+0x9e>
		config.pid_ki = atof(parm);
  40065e:	4628      	mov	r0, r5
  400660:	f002 fb46 	bl	402cf0 <atof>
  400664:	f007 f814 	bl	407690 <__aeabi_d2f>
  400668:	4b6b      	ldr	r3, [pc, #428]	; (400818 <cli_handle_command+0x23c>)
  40066a:	6058      	str	r0, [r3, #4]
		printf("config.pid_ki: %f\r\n", config.pid_ki);
  40066c:	f006 fcc4 	bl	406ff8 <__aeabi_f2d>
  400670:	4602      	mov	r2, r0
  400672:	460b      	mov	r3, r1
  400674:	486b      	ldr	r0, [pc, #428]	; (400824 <cli_handle_command+0x248>)
  400676:	f002 fff1 	bl	40365c <iprintf>
	}

	if (strcmp(cmd, "kd") == 0) {
  40067a:	496b      	ldr	r1, [pc, #428]	; (400828 <cli_handle_command+0x24c>)
  40067c:	4620      	mov	r0, r4
  40067e:	f003 f919 	bl	4038b4 <strcmp>
  400682:	b968      	cbnz	r0, 4006a0 <cli_handle_command+0xc4>
		config.pid_kd = atof(parm);
  400684:	4628      	mov	r0, r5
  400686:	f002 fb33 	bl	402cf0 <atof>
  40068a:	f007 f801 	bl	407690 <__aeabi_d2f>
  40068e:	4b62      	ldr	r3, [pc, #392]	; (400818 <cli_handle_command+0x23c>)
  400690:	6098      	str	r0, [r3, #8]
		printf("config.pid_kd: %f\r\n", config.pid_kd);
  400692:	f006 fcb1 	bl	406ff8 <__aeabi_f2d>
  400696:	4602      	mov	r2, r0
  400698:	460b      	mov	r3, r1
  40069a:	4864      	ldr	r0, [pc, #400]	; (40082c <cli_handle_command+0x250>)
  40069c:	f002 ffde 	bl	40365c <iprintf>

	/*
	 * 	IMU settings
	 */	

	if (strcmp(cmd, "imu_calibrate") == 0) {
  4006a0:	4963      	ldr	r1, [pc, #396]	; (400830 <cli_handle_command+0x254>)
  4006a2:	4620      	mov	r0, r4
  4006a4:	f003 f906 	bl	4038b4 <strcmp>
  4006a8:	b950      	cbnz	r0, 4006c0 <cli_handle_command+0xe4>
		config.imu_calibrate = atoi(parm);
  4006aa:	4628      	mov	r0, r5
  4006ac:	f002 fb23 	bl	402cf6 <atoi>
  4006b0:	1c01      	adds	r1, r0, #0
  4006b2:	bf18      	it	ne
  4006b4:	2101      	movne	r1, #1
  4006b6:	4b58      	ldr	r3, [pc, #352]	; (400818 <cli_handle_command+0x23c>)
  4006b8:	75d9      	strb	r1, [r3, #23]
		printf("imu_calibrate: %d\r\n", config.imu_calibrate);
  4006ba:	485e      	ldr	r0, [pc, #376]	; (400834 <cli_handle_command+0x258>)
  4006bc:	f002 ffce 	bl	40365c <iprintf>
	}

	/*
	 * 	Motor settings
	 */	
	if (strcmp(cmd, "motor_armed") == 0) {
  4006c0:	495d      	ldr	r1, [pc, #372]	; (400838 <cli_handle_command+0x25c>)
  4006c2:	4620      	mov	r0, r4
  4006c4:	f003 f8f6 	bl	4038b4 <strcmp>
  4006c8:	b950      	cbnz	r0, 4006e0 <cli_handle_command+0x104>
		config.motor_armed = atoi(parm);
  4006ca:	4628      	mov	r0, r5
  4006cc:	f002 fb13 	bl	402cf6 <atoi>
  4006d0:	1c01      	adds	r1, r0, #0
  4006d2:	bf18      	it	ne
  4006d4:	2101      	movne	r1, #1
  4006d6:	4b50      	ldr	r3, [pc, #320]	; (400818 <cli_handle_command+0x23c>)
  4006d8:	7519      	strb	r1, [r3, #20]
		printf("motor_armed: %d\r\n", config.motor_armed);
  4006da:	4858      	ldr	r0, [pc, #352]	; (40083c <cli_handle_command+0x260>)
  4006dc:	f002 ffbe 	bl	40365c <iprintf>
	}

	if (strcmp(cmd, "motor_offset") == 0) {
  4006e0:	4957      	ldr	r1, [pc, #348]	; (400840 <cli_handle_command+0x264>)
  4006e2:	4620      	mov	r0, r4
  4006e4:	f003 f8e6 	bl	4038b4 <strcmp>
  4006e8:	b940      	cbnz	r0, 4006fc <cli_handle_command+0x120>
		config.motor_offset = atoi(parm);
  4006ea:	4628      	mov	r0, r5
  4006ec:	f002 fb03 	bl	402cf6 <atoi>
  4006f0:	4601      	mov	r1, r0
  4006f2:	4b49      	ldr	r3, [pc, #292]	; (400818 <cli_handle_command+0x23c>)
  4006f4:	6118      	str	r0, [r3, #16]
		printf("motor_offset: %d\r\n", config.motor_offset);
  4006f6:	4853      	ldr	r0, [pc, #332]	; (400844 <cli_handle_command+0x268>)
  4006f8:	f002 ffb0 	bl	40365c <iprintf>
	}

	if (strcmp(cmd, "motor_min") == 0) {
  4006fc:	4952      	ldr	r1, [pc, #328]	; (400848 <cli_handle_command+0x26c>)
  4006fe:	4620      	mov	r0, r4
  400700:	f003 f8d8 	bl	4038b4 <strcmp>
  400704:	b9c8      	cbnz	r0, 40073a <cli_handle_command+0x15e>
		printf("motor min command issued\r\n");
  400706:	4851      	ldr	r0, [pc, #324]	; (40084c <cli_handle_command+0x270>)
  400708:	f002 ffa8 	bl	40365c <iprintf>
		motor_min(motors[0]);
  40070c:	4e50      	ldr	r6, [pc, #320]	; (400850 <cli_handle_command+0x274>)
  40070e:	2744      	movs	r7, #68	; 0x44
  400710:	463a      	mov	r2, r7
  400712:	f106 0110 	add.w	r1, r6, #16
  400716:	4668      	mov	r0, sp
  400718:	f002 fb1e 	bl	402d58 <memcpy>
  40071c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400720:	f000 ffde 	bl	4016e0 <motor_min>
		motor_min(motors[1]);
  400724:	463a      	mov	r2, r7
  400726:	f106 0164 	add.w	r1, r6, #100	; 0x64
  40072a:	4668      	mov	r0, sp
  40072c:	f002 fb14 	bl	402d58 <memcpy>
  400730:	3654      	adds	r6, #84	; 0x54
  400732:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400736:	f000 ffd3 	bl	4016e0 <motor_min>
	}

	if (strcmp(cmd, "motor_mid") == 0) {
  40073a:	4946      	ldr	r1, [pc, #280]	; (400854 <cli_handle_command+0x278>)
  40073c:	4620      	mov	r0, r4
  40073e:	f003 f8b9 	bl	4038b4 <strcmp>
  400742:	b9c8      	cbnz	r0, 400778 <cli_handle_command+0x19c>
		printf("motor mid command issued\r\n");
  400744:	4844      	ldr	r0, [pc, #272]	; (400858 <cli_handle_command+0x27c>)
  400746:	f002 ff89 	bl	40365c <iprintf>
		motor_mid(motors[0]);
  40074a:	4e41      	ldr	r6, [pc, #260]	; (400850 <cli_handle_command+0x274>)
  40074c:	2744      	movs	r7, #68	; 0x44
  40074e:	463a      	mov	r2, r7
  400750:	f106 0110 	add.w	r1, r6, #16
  400754:	4668      	mov	r0, sp
  400756:	f002 faff 	bl	402d58 <memcpy>
  40075a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40075e:	f000 ffdb 	bl	401718 <motor_mid>
		motor_mid(motors[1]);
  400762:	463a      	mov	r2, r7
  400764:	f106 0164 	add.w	r1, r6, #100	; 0x64
  400768:	4668      	mov	r0, sp
  40076a:	f002 faf5 	bl	402d58 <memcpy>
  40076e:	3654      	adds	r6, #84	; 0x54
  400770:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  400774:	f000 ffd0 	bl	401718 <motor_mid>
	}

	if (strcmp(cmd, "motor_max") == 0) {
  400778:	4938      	ldr	r1, [pc, #224]	; (40085c <cli_handle_command+0x280>)
  40077a:	4620      	mov	r0, r4
  40077c:	f003 f89a 	bl	4038b4 <strcmp>
  400780:	b9c8      	cbnz	r0, 4007b6 <cli_handle_command+0x1da>
		printf("motor max command issued\r\n");
  400782:	4837      	ldr	r0, [pc, #220]	; (400860 <cli_handle_command+0x284>)
  400784:	f002 ff6a 	bl	40365c <iprintf>
		motor_max(motors[0]);
  400788:	4e31      	ldr	r6, [pc, #196]	; (400850 <cli_handle_command+0x274>)
  40078a:	2744      	movs	r7, #68	; 0x44
  40078c:	463a      	mov	r2, r7
  40078e:	f106 0110 	add.w	r1, r6, #16
  400792:	4668      	mov	r0, sp
  400794:	f002 fae0 	bl	402d58 <memcpy>
  400798:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40079c:	f000 ffd8 	bl	401750 <motor_max>
		motor_max(motors[1]);
  4007a0:	463a      	mov	r2, r7
  4007a2:	f106 0164 	add.w	r1, r6, #100	; 0x64
  4007a6:	4668      	mov	r0, sp
  4007a8:	f002 fad6 	bl	402d58 <memcpy>
  4007ac:	3654      	adds	r6, #84	; 0x54
  4007ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  4007b2:	f000 ffcd 	bl	401750 <motor_max>
	} 

	/*
	 * 	Log settings
	 */	
	if (strcmp(cmd, "log_imu") == 0) {
  4007b6:	492b      	ldr	r1, [pc, #172]	; (400864 <cli_handle_command+0x288>)
  4007b8:	4620      	mov	r0, r4
  4007ba:	f003 f87b 	bl	4038b4 <strcmp>
  4007be:	b958      	cbnz	r0, 4007d8 <cli_handle_command+0x1fc>
		config.log_imu = atoi(parm);
  4007c0:	4628      	mov	r0, r5
  4007c2:	f002 fa98 	bl	402cf6 <atoi>
  4007c6:	1c01      	adds	r1, r0, #0
  4007c8:	bf18      	it	ne
  4007ca:	2101      	movne	r1, #1
  4007cc:	4b12      	ldr	r3, [pc, #72]	; (400818 <cli_handle_command+0x23c>)
  4007ce:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
		printf("log_imu: %d\r\n", config.log_imu);
  4007d2:	4825      	ldr	r0, [pc, #148]	; (400868 <cli_handle_command+0x28c>)
  4007d4:	f002 ff42 	bl	40365c <iprintf>
	}

	if (strcmp(cmd, "log_motor") == 0) {
  4007d8:	4924      	ldr	r1, [pc, #144]	; (40086c <cli_handle_command+0x290>)
  4007da:	4620      	mov	r0, r4
  4007dc:	f003 f86a 	bl	4038b4 <strcmp>
  4007e0:	b958      	cbnz	r0, 4007fa <cli_handle_command+0x21e>
		config.log_motor = atoi(parm);
  4007e2:	4628      	mov	r0, r5
  4007e4:	f002 fa87 	bl	402cf6 <atoi>
  4007e8:	1c01      	adds	r1, r0, #0
  4007ea:	bf18      	it	ne
  4007ec:	2101      	movne	r1, #1
  4007ee:	4b0a      	ldr	r3, [pc, #40]	; (400818 <cli_handle_command+0x23c>)
  4007f0:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
		printf("log_motor: %d\r\n", config.log_motor);
  4007f4:	481e      	ldr	r0, [pc, #120]	; (400870 <cli_handle_command+0x294>)
  4007f6:	f002 ff31 	bl	40365c <iprintf>
	}	
}
  4007fa:	b013      	add	sp, #76	; 0x4c
  4007fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4007fe:	bf00      	nop
  400800:	00407de8 	.word	0x00407de8
  400804:	20000830 	.word	0x20000830
  400808:	00407dec 	.word	0x00407dec
  40080c:	00407e08 	.word	0x00407e08
  400810:	00407e0c 	.word	0x00407e0c
  400814:	00407e28 	.word	0x00407e28
  400818:	200006d0 	.word	0x200006d0
  40081c:	00407e2c 	.word	0x00407e2c
  400820:	00407e40 	.word	0x00407e40
  400824:	00407e44 	.word	0x00407e44
  400828:	00407e58 	.word	0x00407e58
  40082c:	00407e5c 	.word	0x00407e5c
  400830:	00407e70 	.word	0x00407e70
  400834:	00407e80 	.word	0x00407e80
  400838:	00407e94 	.word	0x00407e94
  40083c:	00407da8 	.word	0x00407da8
  400840:	00407ea0 	.word	0x00407ea0
  400844:	00407eb0 	.word	0x00407eb0
  400848:	00407ec4 	.word	0x00407ec4
  40084c:	00407ed0 	.word	0x00407ed0
  400850:	20000530 	.word	0x20000530
  400854:	00407eec 	.word	0x00407eec
  400858:	00407ef8 	.word	0x00407ef8
  40085c:	00407f14 	.word	0x00407f14
  400860:	00407f20 	.word	0x00407f20
  400864:	00407f3c 	.word	0x00407f3c
  400868:	00407f44 	.word	0x00407f44
  40086c:	00407f54 	.word	0x00407f54
  400870:	00407f60 	.word	0x00407f60

00400874 <cli_put_char>:
	return false;
}

void cli_put_char(unsigned char c)
{
	int i = (unsigned int)(cli_buffer.head + 1) % CLI_RX_BUFFER_SIZE;
  400874:	4a07      	ldr	r2, [pc, #28]	; (400894 <cli_put_char+0x20>)
  400876:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  40087a:	1c4b      	adds	r3, r1, #1
  40087c:	f3c3 0308 	ubfx	r3, r3, #0, #9

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != cli_buffer.tail) {
  400880:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  400884:	4293      	cmp	r3, r2
  400886:	d003      	beq.n	400890 <cli_put_char+0x1c>
		cli_buffer.buffer[cli_buffer.head] = c;
  400888:	4a02      	ldr	r2, [pc, #8]	; (400894 <cli_put_char+0x20>)
  40088a:	5450      	strb	r0, [r2, r1]
		cli_buffer.head = i;
  40088c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  400890:	4770      	bx	lr
  400892:	bf00      	nop
  400894:	2000020c 	.word	0x2000020c

00400898 <cli_read_device>:
{
	memset(cli_lines, '\0', sizeof(cli_lines));
}

void cli_read_device(void)
{
  400898:	b500      	push	{lr}
  40089a:	b083      	sub	sp, #12
    uint8_t uc_char;
	uint8_t uc_flag;

	if (uart_is_rx_ready(CONSOLE_UART)) {
  40089c:	4808      	ldr	r0, [pc, #32]	; (4008c0 <cli_read_device+0x28>)
  40089e:	f001 fc3d 	bl	40211c <uart_is_rx_ready>
  4008a2:	b150      	cbz	r0, 4008ba <cli_read_device+0x22>
		uc_flag = uart_read(CONSOLE_UART, &uc_char);
  4008a4:	f10d 0107 	add.w	r1, sp, #7
  4008a8:	4805      	ldr	r0, [pc, #20]	; (4008c0 <cli_read_device+0x28>)
  4008aa:	f001 fc43 	bl	402134 <uart_read>
		if (!uc_flag) {
  4008ae:	b2c0      	uxtb	r0, r0
  4008b0:	b918      	cbnz	r0, 4008ba <cli_read_device+0x22>
			cli_put_char(uc_char);
  4008b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4008b6:	f7ff ffdd 	bl	400874 <cli_put_char>
		}
	}
}
  4008ba:	b003      	add	sp, #12
  4008bc:	f85d fb04 	ldr.w	pc, [sp], #4
  4008c0:	400e0800 	.word	0x400e0800

004008c4 <cli_data_available>:
}

uint8_t cli_data_available()
{

	return (uint8_t)(CLI_RX_BUFFER_SIZE + cli_buffer.head - cli_buffer.tail) % CLI_RX_BUFFER_SIZE;
  4008c4:	4a03      	ldr	r2, [pc, #12]	; (4008d4 <cli_data_available+0x10>)
  4008c6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
  4008ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
  4008ce:	1a18      	subs	r0, r3, r0
}
  4008d0:	b2c0      	uxtb	r0, r0
  4008d2:	4770      	bx	lr
  4008d4:	2000020c 	.word	0x2000020c

004008d8 <cli_data_read>:

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
  4008d8:	4a08      	ldr	r2, [pc, #32]	; (4008fc <cli_data_read+0x24>)
  4008da:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
  4008de:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
  4008e2:	429a      	cmp	r2, r3
  4008e4:	d007      	beq.n	4008f6 <cli_data_read+0x1e>
		return -1;
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
  4008e6:	4a05      	ldr	r2, [pc, #20]	; (4008fc <cli_data_read+0x24>)
  4008e8:	5cd0      	ldrb	r0, [r2, r3]
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
  4008ea:	3301      	adds	r3, #1
  4008ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4008f0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		return c;
  4008f4:	4770      	bx	lr

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
		return -1;
  4008f6:	20ff      	movs	r0, #255	; 0xff
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
		return c;
	}
  4008f8:	4770      	bx	lr
  4008fa:	bf00      	nop
  4008fc:	2000020c 	.word	0x2000020c

00400900 <handle_data>:
	}	
}

// check to see if we have a new line
bool handle_data()
{
  400900:	b508      	push	{r3, lr}

	char c = cli_data_read();
  400902:	f7ff ffe9 	bl	4008d8 <cli_data_read>

	// ignore null terminated strings
	if(c == '\0') return false;
  400906:	b190      	cbz	r0, 40092e <handle_data+0x2e>
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  400908:	4b0c      	ldr	r3, [pc, #48]	; (40093c <handle_data+0x3c>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	2b7f      	cmp	r3, #127	; 0x7f
  40090e:	dc10      	bgt.n	400932 <handle_data+0x32>

	// store character in cli_line_buffer
	cli_line_buffer[cli_line_index] = c;
  400910:	490b      	ldr	r1, [pc, #44]	; (400940 <handle_data+0x40>)
  400912:	54c8      	strb	r0, [r1, r3]
	cli_line_index++;
  400914:	3301      	adds	r3, #1
  400916:	4909      	ldr	r1, [pc, #36]	; (40093c <handle_data+0x3c>)
  400918:	600b      	str	r3, [r1, #0]

	// check for end of line
	if(c == CLI_TKEND) {
  40091a:	280d      	cmp	r0, #13
  40091c:	d10b      	bne.n	400936 <handle_data+0x36>
		// copy new message into buffer
		strcpy(cli_lines, cli_line_buffer);
  40091e:	4908      	ldr	r1, [pc, #32]	; (400940 <handle_data+0x40>)
  400920:	4808      	ldr	r0, [pc, #32]	; (400944 <handle_data+0x44>)
  400922:	f002 ffd1 	bl	4038c8 <strcpy>
		init_buffer();
  400926:	f7ff fe3b 	bl	4005a0 <init_buffer>
		return true;
  40092a:	2001      	movs	r0, #1
  40092c:	bd08      	pop	{r3, pc}
{

	char c = cli_data_read();

	// ignore null terminated strings
	if(c == '\0') return false;
  40092e:	2000      	movs	r0, #0
  400930:	bd08      	pop	{r3, pc}
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  400932:	2000      	movs	r0, #0
  400934:	bd08      	pop	{r3, pc}
		strcpy(cli_lines, cli_line_buffer);
		init_buffer();
		return true;
	}

	return false;
  400936:	2000      	movs	r0, #0
}
  400938:	bd08      	pop	{r3, pc}
  40093a:	bf00      	nop
  40093c:	20000414 	.word	0x20000414
  400940:	200006f8 	.word	0x200006f8
  400944:	2000077c 	.word	0x2000077c

00400948 <cli_tick>:
		}
	}
}

void cli_tick()
{
  400948:	b530      	push	{r4, r5, lr}
  40094a:	b083      	sub	sp, #12
	// read the serial port
	cli_read_device();
  40094c:	f7ff ffa4 	bl	400898 <cli_read_device>

	if (cli_data_available()) {
  400950:	f7ff ffb8 	bl	4008c4 <cli_data_available>
  400954:	b1a8      	cbz	r0, 400982 <cli_tick+0x3a>
		if (handle_data()) {
  400956:	f7ff ffd3 	bl	400900 <handle_data>
  40095a:	b190      	cbz	r0, 400982 <cli_tick+0x3a>
			//config_test();

			char *saveptr;
			char *cmd, *parm;

			cmd = strtok_r(cli_lines, CLI_DELIM, &saveptr);
  40095c:	4c0a      	ldr	r4, [pc, #40]	; (400988 <cli_tick+0x40>)
  40095e:	aa01      	add	r2, sp, #4
  400960:	4621      	mov	r1, r4
  400962:	480a      	ldr	r0, [pc, #40]	; (40098c <cli_tick+0x44>)
  400964:	f003 fe15 	bl	404592 <strtok_r>
  400968:	4605      	mov	r5, r0
			parm = strtok_r(NULL, CLI_DELIM, &saveptr);
  40096a:	aa01      	add	r2, sp, #4
  40096c:	4621      	mov	r1, r4
  40096e:	2000      	movs	r0, #0
  400970:	f003 fe0f 	bl	404592 <strtok_r>

			// printf("cmd=%s\r\n", cmd);
			// printf("parm=%s\r\n", parm);

			if (parm != NULL)
  400974:	4601      	mov	r1, r0
  400976:	b110      	cbz	r0, 40097e <cli_tick+0x36>
				cli_handle_command(cmd, parm);
  400978:	4628      	mov	r0, r5
  40097a:	f7ff fe2f 	bl	4005dc <cli_handle_command>


			// reset cli_lines
			init_lines();
  40097e:	f7ff fe1d 	bl	4005bc <init_lines>

		}
	}

}
  400982:	b003      	add	sp, #12
  400984:	bd30      	pop	{r4, r5, pc}
  400986:	bf00      	nop
  400988:	00407f70 	.word	0x00407f70
  40098c:	2000077c 	.word	0x2000077c

00400990 <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  400990:	b500      	push	{lr}
  400992:	b089      	sub	sp, #36	; 0x24
  400994:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  400998:	2368      	movs	r3, #104	; 0x68
  40099a:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  40099e:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  4009a2:	2301      	movs	r3, #1
  4009a4:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  4009a6:	f10d 0207 	add.w	r2, sp, #7
  4009aa:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  4009ac:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4009ae:	a903      	add	r1, sp, #12
  4009b0:	4804      	ldr	r0, [pc, #16]	; (4009c4 <write_register8+0x34>)
  4009b2:	f001 f8e7 	bl	401b84 <twi_master_write>
    
    // if (status == TWI_SUCCESS) {
    //     puts("write_register: success\r\n");
    // }

    delay_ms(TWI_WAIT_TIME);
  4009b6:	4804      	ldr	r0, [pc, #16]	; (4009c8 <write_register8+0x38>)
  4009b8:	f007 fd9e 	bl	4084f8 <__portable_delay_cycles_veneer>
}
  4009bc:	b009      	add	sp, #36	; 0x24
  4009be:	f85d fb04 	ldr.w	pc, [sp], #4
  4009c2:	bf00      	nop
  4009c4:	40018000 	.word	0x40018000
  4009c8:	00014ed3 	.word	0x00014ed3

004009cc <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  4009cc:	b510      	push	{r4, lr}
  4009ce:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4009d0:	4b0e      	ldr	r3, [pc, #56]	; (400a0c <read_register8+0x40>)
  4009d2:	2200      	movs	r2, #0
  4009d4:	601a      	str	r2, [r3, #0]
  4009d6:	605a      	str	r2, [r3, #4]
  4009d8:	609a      	str	r2, [r3, #8]
  4009da:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4009dc:	2268      	movs	r2, #104	; 0x68
  4009de:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  4009e2:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4009e6:	2201      	movs	r2, #1
  4009e8:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  4009ea:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4009ec:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4009ee:	a901      	add	r1, sp, #4
  4009f0:	4807      	ldr	r0, [pc, #28]	; (400a10 <read_register8+0x44>)
  4009f2:	f001 f85f 	bl	401ab4 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4009f6:	b910      	cbnz	r0, 4009fe <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  4009f8:	4b04      	ldr	r3, [pc, #16]	; (400a0c <read_register8+0x40>)
  4009fa:	781c      	ldrb	r4, [r3, #0]
  4009fc:	e000      	b.n	400a00 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  4009fe:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400a00:	4804      	ldr	r0, [pc, #16]	; (400a14 <read_register8+0x48>)
  400a02:	f007 fd79 	bl	4084f8 <__portable_delay_cycles_veneer>

    return value;
}
  400a06:	4620      	mov	r0, r4
  400a08:	b006      	add	sp, #24
  400a0a:	bd10      	pop	{r4, pc}
  400a0c:	20000418 	.word	0x20000418
  400a10:	40018000 	.word	0x40018000
  400a14:	00014ed3 	.word	0x00014ed3

00400a18 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  400a18:	b510      	push	{r4, lr}
  400a1a:	b086      	sub	sp, #24
  400a1c:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400a1e:	4b0c      	ldr	r3, [pc, #48]	; (400a50 <read_bytes+0x38>)
  400a20:	2100      	movs	r1, #0
  400a22:	6019      	str	r1, [r3, #0]
  400a24:	6059      	str	r1, [r3, #4]
  400a26:	6099      	str	r1, [r3, #8]
  400a28:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  400a2a:	2368      	movs	r3, #104	; 0x68
  400a2c:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  400a30:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400a34:	2301      	movs	r3, #1
  400a36:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  400a38:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  400a3a:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400a3c:	a901      	add	r1, sp, #4
  400a3e:	4805      	ldr	r0, [pc, #20]	; (400a54 <read_bytes+0x3c>)
  400a40:	f001 f838 	bl	401ab4 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400a44:	4804      	ldr	r0, [pc, #16]	; (400a58 <read_bytes+0x40>)
  400a46:	f007 fd57 	bl	4084f8 <__portable_delay_cycles_veneer>

    return length;
}
  400a4a:	b2e0      	uxtb	r0, r4
  400a4c:	b006      	add	sp, #24
  400a4e:	bd10      	pop	{r4, pc}
  400a50:	20000418 	.word	0x20000418
  400a54:	40018000 	.word	0x40018000
  400a58:	00014ed3 	.word	0x00014ed3

00400a5c <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  400a5c:	b570      	push	{r4, r5, r6, lr}
  400a5e:	4604      	mov	r4, r0
  400a60:	460d      	mov	r5, r1
  400a62:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400a64:	f7ff ffb2 	bl	4009cc <read_register8>

    if (state) {
  400a68:	b126      	cbz	r6, 400a74 <write_register_bit+0x18>
        value |= (1 << pos);
  400a6a:	2101      	movs	r1, #1
  400a6c:	40a9      	lsls	r1, r5
  400a6e:	4301      	orrs	r1, r0
  400a70:	b2c9      	uxtb	r1, r1
  400a72:	e004      	b.n	400a7e <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400a74:	2101      	movs	r1, #1
  400a76:	40a9      	lsls	r1, r5
  400a78:	ea20 0101 	bic.w	r1, r0, r1
  400a7c:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  400a7e:	4620      	mov	r0, r4
  400a80:	f7ff ff86 	bl	400990 <write_register8>
  400a84:	bd70      	pop	{r4, r5, r6, pc}
  400a86:	bf00      	nop

00400a88 <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  400a88:	b510      	push	{r4, lr}
  400a8a:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  400a8c:	f7ff ff9e 	bl	4009cc <read_register8>
    return ((value >> pos) & 1);
  400a90:	4120      	asrs	r0, r4
}
  400a92:	f000 0001 	and.w	r0, r0, #1
  400a96:	bd10      	pop	{r4, pc}

00400a98 <mpu_init>:

bool mpu_init(void)
{
  400a98:	b500      	push	{lr}
  400a9a:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400a9c:	4b0d      	ldr	r3, [pc, #52]	; (400ad4 <mpu_init+0x3c>)
  400a9e:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400aa0:	4b0d      	ldr	r3, [pc, #52]	; (400ad8 <mpu_init+0x40>)
  400aa2:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400aa4:	a901      	add	r1, sp, #4
  400aa6:	480d      	ldr	r0, [pc, #52]	; (400adc <mpu_init+0x44>)
  400aa8:	f000 ffd4 	bl	401a54 <twi_master_init>
  400aac:	b138      	cbz	r0, 400abe <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  400aae:	480c      	ldr	r0, [pc, #48]	; (400ae0 <mpu_init+0x48>)
  400ab0:	f002 fe46 	bl	403740 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400ab4:	480b      	ldr	r0, [pc, #44]	; (400ae4 <mpu_init+0x4c>)
  400ab6:	f007 fd1f 	bl	4084f8 <__portable_delay_cycles_veneer>
        return false;
  400aba:	2000      	movs	r0, #0
  400abc:	e006      	b.n	400acc <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  400abe:	480a      	ldr	r0, [pc, #40]	; (400ae8 <mpu_init+0x50>)
  400ac0:	f002 fe3e 	bl	403740 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400ac4:	4807      	ldr	r0, [pc, #28]	; (400ae4 <mpu_init+0x4c>)
  400ac6:	f007 fd17 	bl	4084f8 <__portable_delay_cycles_veneer>
        return true;
  400aca:	2001      	movs	r0, #1
    }
    
}
  400acc:	b005      	add	sp, #20
  400ace:	f85d fb04 	ldr.w	pc, [sp], #4
  400ad2:	bf00      	nop
  400ad4:	07270e00 	.word	0x07270e00
  400ad8:	00061a80 	.word	0x00061a80
  400adc:	40018000 	.word	0x40018000
  400ae0:	00407f74 	.word	0x00407f74
  400ae4:	00014ed3 	.word	0x00014ed3
  400ae8:	00407f90 	.word	0x00407f90

00400aec <mpu_probe>:

bool mpu_probe(void)
{
  400aec:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  400aee:	2168      	movs	r1, #104	; 0x68
  400af0:	4809      	ldr	r0, [pc, #36]	; (400b18 <mpu_probe+0x2c>)
  400af2:	f001 f889 	bl	401c08 <twi_probe>
  400af6:	b138      	cbz	r0, 400b08 <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  400af8:	4808      	ldr	r0, [pc, #32]	; (400b1c <mpu_probe+0x30>)
  400afa:	f002 fe21 	bl	403740 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400afe:	4808      	ldr	r0, [pc, #32]	; (400b20 <mpu_probe+0x34>)
  400b00:	f007 fcfa 	bl	4084f8 <__portable_delay_cycles_veneer>
        return false;
  400b04:	2000      	movs	r0, #0
  400b06:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400b08:	4806      	ldr	r0, [pc, #24]	; (400b24 <mpu_probe+0x38>)
  400b0a:	f002 fe19 	bl	403740 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400b0e:	4804      	ldr	r0, [pc, #16]	; (400b20 <mpu_probe+0x34>)
  400b10:	f007 fcf2 	bl	4084f8 <__portable_delay_cycles_veneer>
        return true;
  400b14:	2001      	movs	r0, #1
    }
}
  400b16:	bd08      	pop	{r3, pc}
  400b18:	40018000 	.word	0x40018000
  400b1c:	00407fac 	.word	0x00407fac
  400b20:	00014ed3 	.word	0x00014ed3
  400b24:	00407fc0 	.word	0x00407fc0

00400b28 <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  400b28:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  400b2a:	2075      	movs	r0, #117	; 0x75
  400b2c:	f7ff ff4e 	bl	4009cc <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400b30:	bd08      	pop	{r3, pc}
  400b32:	bf00      	nop

00400b34 <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400b34:	b510      	push	{r4, lr}
  400b36:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400b38:	206b      	movs	r0, #107	; 0x6b
  400b3a:	f7ff ff47 	bl	4009cc <read_register8>
    value &= 0b11111000; // mask
  400b3e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  400b42:	4321      	orrs	r1, r4
  400b44:	206b      	movs	r0, #107	; 0x6b
  400b46:	f7ff ff23 	bl	400990 <write_register8>
  400b4a:	bd10      	pop	{r4, pc}

00400b4c <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  400b4c:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400b4e:	206b      	movs	r0, #107	; 0x6b
  400b50:	f7ff ff3c 	bl	4009cc <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400b54:	f000 0007 	and.w	r0, r0, #7
  400b58:	bd08      	pop	{r3, pc}
  400b5a:	bf00      	nop

00400b5c <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  400b5c:	b510      	push	{r4, lr}
  400b5e:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400b60:	2803      	cmp	r0, #3
  400b62:	d812      	bhi.n	400b8a <mpu_set_gyro_scale+0x2e>
  400b64:	e8df f000 	tbb	[pc, r0]
  400b68:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400b6c:	4a0d      	ldr	r2, [pc, #52]	; (400ba4 <mpu_set_gyro_scale+0x48>)
  400b6e:	4b0e      	ldr	r3, [pc, #56]	; (400ba8 <mpu_set_gyro_scale+0x4c>)
  400b70:	601a      	str	r2, [r3, #0]
            break;
  400b72:	e00a      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400b74:	4a0d      	ldr	r2, [pc, #52]	; (400bac <mpu_set_gyro_scale+0x50>)
  400b76:	4b0c      	ldr	r3, [pc, #48]	; (400ba8 <mpu_set_gyro_scale+0x4c>)
  400b78:	601a      	str	r2, [r3, #0]
            break;
  400b7a:	e006      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400b7c:	4a0c      	ldr	r2, [pc, #48]	; (400bb0 <mpu_set_gyro_scale+0x54>)
  400b7e:	4b0a      	ldr	r3, [pc, #40]	; (400ba8 <mpu_set_gyro_scale+0x4c>)
  400b80:	601a      	str	r2, [r3, #0]
            break;
  400b82:	e002      	b.n	400b8a <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400b84:	4a0b      	ldr	r2, [pc, #44]	; (400bb4 <mpu_set_gyro_scale+0x58>)
  400b86:	4b08      	ldr	r3, [pc, #32]	; (400ba8 <mpu_set_gyro_scale+0x4c>)
  400b88:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  400b8a:	201b      	movs	r0, #27
  400b8c:	f7ff ff1e 	bl	4009cc <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400b90:	f020 0018 	bic.w	r0, r0, #24
  400b94:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  400b98:	b2c9      	uxtb	r1, r1
  400b9a:	201b      	movs	r0, #27
  400b9c:	f7ff fef8 	bl	400990 <write_register8>
  400ba0:	bd10      	pop	{r4, pc}
  400ba2:	bf00      	nop
  400ba4:	3bfa1e3f 	.word	0x3bfa1e3f
  400ba8:	20000438 	.word	0x20000438
  400bac:	3c7a2270 	.word	0x3c7a2270
  400bb0:	3cf9bfdf 	.word	0x3cf9bfdf
  400bb4:	3d79c0ec 	.word	0x3d79c0ec

00400bb8 <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  400bb8:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  400bba:	201b      	movs	r0, #27
  400bbc:	f7ff ff06 	bl	4009cc <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  400bc0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  400bc4:	bd08      	pop	{r3, pc}
  400bc6:	bf00      	nop

00400bc8 <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  400bc8:	b510      	push	{r4, lr}
  400bca:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  400bcc:	2803      	cmp	r0, #3
  400bce:	d812      	bhi.n	400bf6 <mpu_set_accel_range+0x2e>
  400bd0:	e8df f000 	tbb	[pc, r0]
  400bd4:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  400bd8:	4a0d      	ldr	r2, [pc, #52]	; (400c10 <mpu_set_accel_range+0x48>)
  400bda:	4b0e      	ldr	r3, [pc, #56]	; (400c14 <mpu_set_accel_range+0x4c>)
  400bdc:	601a      	str	r2, [r3, #0]
            break;
  400bde:	e00a      	b.n	400bf6 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  400be0:	4a0d      	ldr	r2, [pc, #52]	; (400c18 <mpu_set_accel_range+0x50>)
  400be2:	4b0c      	ldr	r3, [pc, #48]	; (400c14 <mpu_set_accel_range+0x4c>)
  400be4:	601a      	str	r2, [r3, #0]
            break;   
  400be6:	e006      	b.n	400bf6 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  400be8:	4a0c      	ldr	r2, [pc, #48]	; (400c1c <mpu_set_accel_range+0x54>)
  400bea:	4b0a      	ldr	r3, [pc, #40]	; (400c14 <mpu_set_accel_range+0x4c>)
  400bec:	601a      	str	r2, [r3, #0]
            break;   
  400bee:	e002      	b.n	400bf6 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400bf0:	4a0b      	ldr	r2, [pc, #44]	; (400c20 <mpu_set_accel_range+0x58>)
  400bf2:	4b08      	ldr	r3, [pc, #32]	; (400c14 <mpu_set_accel_range+0x4c>)
  400bf4:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  400bf6:	201c      	movs	r0, #28
  400bf8:	f7ff fee8 	bl	4009cc <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400bfc:	f020 0018 	bic.w	r0, r0, #24
  400c00:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  400c04:	b2c9      	uxtb	r1, r1
  400c06:	201c      	movs	r0, #28
  400c08:	f7ff fec2 	bl	400990 <write_register8>
  400c0c:	bd10      	pop	{r4, pc}
  400c0e:	bf00      	nop
  400c10:	387fda40 	.word	0x387fda40
  400c14:	20000428 	.word	0x20000428
  400c18:	38ffda40 	.word	0x38ffda40
  400c1c:	397fda40 	.word	0x397fda40
  400c20:	39fff518 	.word	0x39fff518

00400c24 <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400c24:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  400c26:	4602      	mov	r2, r0
  400c28:	2106      	movs	r1, #6
  400c2a:	206b      	movs	r0, #107	; 0x6b
  400c2c:	f7ff ff16 	bl	400a5c <write_register_bit>
  400c30:	bd08      	pop	{r3, pc}
  400c32:	bf00      	nop

00400c34 <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400c34:	b538      	push	{r3, r4, r5, lr}
  400c36:	4605      	mov	r5, r0
  400c38:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  400c3a:	4a11      	ldr	r2, [pc, #68]	; (400c80 <mpu_begin+0x4c>)
  400c3c:	2300      	movs	r3, #0
  400c3e:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400c40:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400c42:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400c44:	2100      	movs	r1, #0
  400c46:	4a0f      	ldr	r2, [pc, #60]	; (400c84 <mpu_begin+0x50>)
  400c48:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  400c4a:	4a0f      	ldr	r2, [pc, #60]	; (400c88 <mpu_begin+0x54>)
  400c4c:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400c4e:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400c50:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400c52:	4a0e      	ldr	r2, [pc, #56]	; (400c8c <mpu_begin+0x58>)
  400c54:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  400c56:	f7ff ff67 	bl	400b28 <mpu_who_am_i>
  400c5a:	2868      	cmp	r0, #104	; 0x68
  400c5c:	d10d      	bne.n	400c7a <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400c5e:	2001      	movs	r0, #1
  400c60:	f7ff ff68 	bl	400b34 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400c64:	4628      	mov	r0, r5
  400c66:	f7ff ff79 	bl	400b5c <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  400c6a:	4620      	mov	r0, r4
  400c6c:	f7ff ffac 	bl	400bc8 <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400c70:	2000      	movs	r0, #0
  400c72:	f7ff ffd7 	bl	400c24 <mpu_set_sleep_enabled>

    return true;
  400c76:	2001      	movs	r0, #1
  400c78:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  400c7a:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400c7c:	bd38      	pop	{r3, r4, r5, pc}
  400c7e:	bf00      	nop
  400c80:	200006b4 	.word	0x200006b4
  400c84:	2000043c 	.word	0x2000043c
  400c88:	20000680 	.word	0x20000680
  400c8c:	20000444 	.word	0x20000444

00400c90 <mpu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400c90:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  400c92:	2106      	movs	r1, #6
  400c94:	206b      	movs	r0, #107	; 0x6b
  400c96:	f7ff fef7 	bl	400a88 <read_register_bit>
}
  400c9a:	bd08      	pop	{r3, pc}

00400c9c <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  400c9c:	b570      	push	{r4, r5, r6, lr}
  400c9e:	b082      	sub	sp, #8
  400ca0:	4606      	mov	r6, r0
  400ca2:	460d      	mov	r5, r1
  400ca4:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400ca6:	2300      	movs	r3, #0
  400ca8:	9300      	str	r3, [sp, #0]
  400caa:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  400cae:	466a      	mov	r2, sp
  400cb0:	2106      	movs	r1, #6
  400cb2:	2043      	movs	r0, #67	; 0x43
  400cb4:	f7ff feb0 	bl	400a18 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400cb8:	f89d 2000 	ldrb.w	r2, [sp]
  400cbc:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cc4:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400cc6:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400cca:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cd2:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400cd4:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400cd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400ce0:	8023      	strh	r3, [r4, #0]

}
  400ce2:	b002      	add	sp, #8
  400ce4:	bd70      	pop	{r4, r5, r6, pc}
  400ce6:	bf00      	nop

00400ce8 <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  400ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  400cea:	4d0c      	ldr	r5, [pc, #48]	; (400d1c <mpu_read_raw_gyro+0x34>)
  400cec:	4e0c      	ldr	r6, [pc, #48]	; (400d20 <mpu_read_raw_gyro+0x38>)
  400cee:	4f0d      	ldr	r7, [pc, #52]	; (400d24 <mpu_read_raw_gyro+0x3c>)
  400cf0:	462a      	mov	r2, r5
  400cf2:	4631      	mov	r1, r6
  400cf4:	4638      	mov	r0, r7
  400cf6:	f7ff ffd1 	bl	400c9c <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  400cfa:	4c0b      	ldr	r4, [pc, #44]	; (400d28 <mpu_read_raw_gyro+0x40>)
  400cfc:	f9b7 0000 	ldrsh.w	r0, [r7]
  400d00:	f006 fdd0 	bl	4078a4 <__aeabi_i2f>
  400d04:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  400d06:	f9b6 0000 	ldrsh.w	r0, [r6]
  400d0a:	f006 fdcb 	bl	4078a4 <__aeabi_i2f>
  400d0e:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400d10:	f9b5 0000 	ldrsh.w	r0, [r5]
  400d14:	f006 fdc6 	bl	4078a4 <__aeabi_i2f>
  400d18:	60a0      	str	r0, [r4, #8]
  400d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d1c:	200006a4 	.word	0x200006a4
  400d20:	2000051c 	.word	0x2000051c
  400d24:	200006c0 	.word	0x200006c0
  400d28:	20000510 	.word	0x20000510

00400d2c <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d30:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400d32:	f7ff ffd9 	bl	400ce8 <mpu_read_raw_gyro>

    if (use_calibrate) {
  400d36:	4b3d      	ldr	r3, [pc, #244]	; (400e2c <mpu_read_normalized_gyro+0x100>)
  400d38:	781b      	ldrb	r3, [r3, #0]
  400d3a:	b30b      	cbz	r3, 400d80 <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400d3c:	4b3c      	ldr	r3, [pc, #240]	; (400e30 <mpu_read_normalized_gyro+0x104>)
  400d3e:	681e      	ldr	r6, [r3, #0]
  400d40:	4d3c      	ldr	r5, [pc, #240]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400d42:	4f3d      	ldr	r7, [pc, #244]	; (400e38 <mpu_read_normalized_gyro+0x10c>)
  400d44:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400e44 <mpu_read_normalized_gyro+0x118>
  400d48:	f8d8 1000 	ldr.w	r1, [r8]
  400d4c:	6838      	ldr	r0, [r7, #0]
  400d4e:	f006 fcf3 	bl	407738 <__aeabi_fsub>
  400d52:	4631      	mov	r1, r6
  400d54:	f006 fdfa 	bl	40794c <__aeabi_fmul>
  400d58:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  400d5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400d5e:	6878      	ldr	r0, [r7, #4]
  400d60:	f006 fcea 	bl	407738 <__aeabi_fsub>
  400d64:	4631      	mov	r1, r6
  400d66:	f006 fdf1 	bl	40794c <__aeabi_fmul>
  400d6a:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400d6c:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400d70:	68b8      	ldr	r0, [r7, #8]
  400d72:	f006 fce1 	bl	407738 <__aeabi_fsub>
  400d76:	4631      	mov	r1, r6
  400d78:	f006 fde8 	bl	40794c <__aeabi_fmul>
  400d7c:	60a8      	str	r0, [r5, #8]
  400d7e:	e012      	b.n	400da6 <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400d80:	4b2b      	ldr	r3, [pc, #172]	; (400e30 <mpu_read_normalized_gyro+0x104>)
  400d82:	681f      	ldr	r7, [r3, #0]
  400d84:	4d2b      	ldr	r5, [pc, #172]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400d86:	4e2c      	ldr	r6, [pc, #176]	; (400e38 <mpu_read_normalized_gyro+0x10c>)
  400d88:	4639      	mov	r1, r7
  400d8a:	6830      	ldr	r0, [r6, #0]
  400d8c:	f006 fdde 	bl	40794c <__aeabi_fmul>
  400d90:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400d92:	4639      	mov	r1, r7
  400d94:	6870      	ldr	r0, [r6, #4]
  400d96:	f006 fdd9 	bl	40794c <__aeabi_fmul>
  400d9a:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400d9c:	4639      	mov	r1, r7
  400d9e:	68b0      	ldr	r0, [r6, #8]
  400da0:	f006 fdd4 	bl	40794c <__aeabi_fmul>
  400da4:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  400da6:	2100      	movs	r1, #0
  400da8:	4b24      	ldr	r3, [pc, #144]	; (400e3c <mpu_read_normalized_gyro+0x110>)
  400daa:	6818      	ldr	r0, [r3, #0]
  400dac:	f006 ff62 	bl	407c74 <__aeabi_fcmpeq>
  400db0:	2800      	cmp	r0, #0
  400db2:	d132      	bne.n	400e1a <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  400db4:	4b1f      	ldr	r3, [pc, #124]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400db6:	6818      	ldr	r0, [r3, #0]
  400db8:	f006 ff8e 	bl	407cd8 <__aeabi_f2iz>
  400dbc:	2800      	cmp	r0, #0
  400dbe:	bfb8      	it	lt
  400dc0:	4240      	neglt	r0, r0
  400dc2:	f006 fd6f 	bl	4078a4 <__aeabi_i2f>
  400dc6:	4b1e      	ldr	r3, [pc, #120]	; (400e40 <mpu_read_normalized_gyro+0x114>)
  400dc8:	6819      	ldr	r1, [r3, #0]
  400dca:	f006 ff5d 	bl	407c88 <__aeabi_fcmplt>
  400dce:	b110      	cbz	r0, 400dd6 <mpu_read_normalized_gyro+0xaa>
  400dd0:	2200      	movs	r2, #0
  400dd2:	4b18      	ldr	r3, [pc, #96]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400dd4:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  400dd6:	4b17      	ldr	r3, [pc, #92]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400dd8:	6858      	ldr	r0, [r3, #4]
  400dda:	f006 ff7d 	bl	407cd8 <__aeabi_f2iz>
  400dde:	2800      	cmp	r0, #0
  400de0:	bfb8      	it	lt
  400de2:	4240      	neglt	r0, r0
  400de4:	f006 fd5e 	bl	4078a4 <__aeabi_i2f>
  400de8:	4b15      	ldr	r3, [pc, #84]	; (400e40 <mpu_read_normalized_gyro+0x114>)
  400dea:	6859      	ldr	r1, [r3, #4]
  400dec:	f006 ff4c 	bl	407c88 <__aeabi_fcmplt>
  400df0:	b110      	cbz	r0, 400df8 <mpu_read_normalized_gyro+0xcc>
  400df2:	2200      	movs	r2, #0
  400df4:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400df6:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400df8:	4b0e      	ldr	r3, [pc, #56]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400dfa:	6898      	ldr	r0, [r3, #8]
  400dfc:	f006 ff6c 	bl	407cd8 <__aeabi_f2iz>
  400e00:	2800      	cmp	r0, #0
  400e02:	bfb8      	it	lt
  400e04:	4240      	neglt	r0, r0
  400e06:	f006 fd4d 	bl	4078a4 <__aeabi_i2f>
  400e0a:	4b0d      	ldr	r3, [pc, #52]	; (400e40 <mpu_read_normalized_gyro+0x114>)
  400e0c:	6899      	ldr	r1, [r3, #8]
  400e0e:	f006 ff3b 	bl	407c88 <__aeabi_fcmplt>
  400e12:	b110      	cbz	r0, 400e1a <mpu_read_normalized_gyro+0xee>
  400e14:	2200      	movs	r2, #0
  400e16:	4b07      	ldr	r3, [pc, #28]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400e18:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  400e1a:	4b06      	ldr	r3, [pc, #24]	; (400e34 <mpu_read_normalized_gyro+0x108>)
  400e1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400e20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400e24:	4620      	mov	r0, r4
  400e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e2a:	bf00      	nop
  400e2c:	2000043c 	.word	0x2000043c
  400e30:	20000438 	.word	0x20000438
  400e34:	200006c4 	.word	0x200006c4
  400e38:	20000510 	.word	0x20000510
  400e3c:	20000444 	.word	0x20000444
  400e40:	20000680 	.word	0x20000680
  400e44:	200006b4 	.word	0x200006b4

00400e48 <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400e48:	b570      	push	{r4, r5, r6, lr}
  400e4a:	b082      	sub	sp, #8
  400e4c:	4606      	mov	r6, r0
  400e4e:	460d      	mov	r5, r1
  400e50:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400e52:	2300      	movs	r3, #0
  400e54:	9300      	str	r3, [sp, #0]
  400e56:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  400e5a:	466a      	mov	r2, sp
  400e5c:	2106      	movs	r1, #6
  400e5e:	203b      	movs	r0, #59	; 0x3b
  400e60:	f7ff fdda 	bl	400a18 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400e64:	f89d 2000 	ldrb.w	r2, [sp]
  400e68:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400e6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e70:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400e72:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400e76:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e7e:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400e80:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400e84:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400e8c:	8023      	strh	r3, [r4, #0]
}
  400e8e:	b002      	add	sp, #8
  400e90:	bd70      	pop	{r4, r5, r6, pc}
  400e92:	bf00      	nop

00400e94 <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  400e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  400e96:	4d0c      	ldr	r5, [pc, #48]	; (400ec8 <mpu_read_raw_acceleration+0x34>)
  400e98:	4e0c      	ldr	r6, [pc, #48]	; (400ecc <mpu_read_raw_acceleration+0x38>)
  400e9a:	4f0d      	ldr	r7, [pc, #52]	; (400ed0 <mpu_read_raw_acceleration+0x3c>)
  400e9c:	462a      	mov	r2, r5
  400e9e:	4631      	mov	r1, r6
  400ea0:	4638      	mov	r0, r7
  400ea2:	f7ff ffd1 	bl	400e48 <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  400ea6:	4c0b      	ldr	r4, [pc, #44]	; (400ed4 <mpu_read_raw_acceleration+0x40>)
  400ea8:	f9b7 0000 	ldrsh.w	r0, [r7]
  400eac:	f006 fcfa 	bl	4078a4 <__aeabi_i2f>
  400eb0:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  400eb2:	f9b6 0000 	ldrsh.w	r0, [r6]
  400eb6:	f006 fcf5 	bl	4078a4 <__aeabi_i2f>
  400eba:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  400ebc:	f9b5 0000 	ldrsh.w	r0, [r5]
  400ec0:	f006 fcf0 	bl	4078a4 <__aeabi_i2f>
  400ec4:	60a0      	str	r0, [r4, #8]
  400ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ec8:	2000051e 	.word	0x2000051e
  400ecc:	200006c2 	.word	0x200006c2
  400ed0:	2000052c 	.word	0x2000052c
  400ed4:	200006a8 	.word	0x200006a8

00400ed8 <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  400ed8:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  400eda:	f7ff ffdb 	bl	400e94 <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  400ede:	4b0e      	ldr	r3, [pc, #56]	; (400f18 <mpu_read_normalized_acceleration+0x40>)
  400ee0:	681d      	ldr	r5, [r3, #0]
  400ee2:	4c0e      	ldr	r4, [pc, #56]	; (400f1c <mpu_read_normalized_acceleration+0x44>)
  400ee4:	4e0e      	ldr	r6, [pc, #56]	; (400f20 <mpu_read_normalized_acceleration+0x48>)
  400ee6:	6831      	ldr	r1, [r6, #0]
  400ee8:	4628      	mov	r0, r5
  400eea:	f006 fd2f 	bl	40794c <__aeabi_fmul>
  400eee:	490d      	ldr	r1, [pc, #52]	; (400f24 <mpu_read_normalized_acceleration+0x4c>)
  400ef0:	f006 fd2c 	bl	40794c <__aeabi_fmul>
  400ef4:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  400ef6:	6871      	ldr	r1, [r6, #4]
  400ef8:	4628      	mov	r0, r5
  400efa:	f006 fd27 	bl	40794c <__aeabi_fmul>
  400efe:	4909      	ldr	r1, [pc, #36]	; (400f24 <mpu_read_normalized_acceleration+0x4c>)
  400f00:	f006 fd24 	bl	40794c <__aeabi_fmul>
  400f04:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400f06:	68b1      	ldr	r1, [r6, #8]
  400f08:	4628      	mov	r0, r5
  400f0a:	f006 fd1f 	bl	40794c <__aeabi_fmul>
  400f0e:	4905      	ldr	r1, [pc, #20]	; (400f24 <mpu_read_normalized_acceleration+0x4c>)
  400f10:	f006 fd1c 	bl	40794c <__aeabi_fmul>
  400f14:	60a0      	str	r0, [r4, #8]
  400f16:	bd70      	pop	{r4, r5, r6, pc}
  400f18:	20000428 	.word	0x20000428
  400f1c:	20000698 	.word	0x20000698
  400f20:	200006a8 	.word	0x200006a8
  400f24:	411ce80a 	.word	0x411ce80a

00400f28 <mpu_log_settings>:

    return norm_accel;
}

void mpu_log_settings(void)
{
  400f28:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400f2a:	f7ff fdfd 	bl	400b28 <mpu_who_am_i>
  400f2e:	4601      	mov	r1, r0
  400f30:	482b      	ldr	r0, [pc, #172]	; (400fe0 <mpu_log_settings+0xb8>)
  400f32:	f002 fb93 	bl	40365c <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400f36:	f7ff feab 	bl	400c90 <mpu_get_sleep_enabled>
  400f3a:	492a      	ldr	r1, [pc, #168]	; (400fe4 <mpu_log_settings+0xbc>)
  400f3c:	4a2a      	ldr	r2, [pc, #168]	; (400fe8 <mpu_log_settings+0xc0>)
  400f3e:	2800      	cmp	r0, #0
  400f40:	bf18      	it	ne
  400f42:	4611      	movne	r1, r2
  400f44:	4829      	ldr	r0, [pc, #164]	; (400fec <mpu_log_settings+0xc4>)
  400f46:	f002 fb89 	bl	40365c <iprintf>
    printf("Clock Source: ");
  400f4a:	4829      	ldr	r0, [pc, #164]	; (400ff0 <mpu_log_settings+0xc8>)
  400f4c:	f002 fb86 	bl	40365c <iprintf>
    switch (mpu_get_clock_source()) {
  400f50:	f7ff fdfc 	bl	400b4c <mpu_get_clock_source>
  400f54:	b110      	cbz	r0, 400f5c <mpu_log_settings+0x34>
  400f56:	2801      	cmp	r0, #1
  400f58:	d004      	beq.n	400f64 <mpu_log_settings+0x3c>
  400f5a:	e006      	b.n	400f6a <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400f5c:	4825      	ldr	r0, [pc, #148]	; (400ff4 <mpu_log_settings+0xcc>)
  400f5e:	f002 fb7d 	bl	40365c <iprintf>
        break;
  400f62:	e002      	b.n	400f6a <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400f64:	4824      	ldr	r0, [pc, #144]	; (400ff8 <mpu_log_settings+0xd0>)
  400f66:	f002 fb79 	bl	40365c <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400f6a:	4824      	ldr	r0, [pc, #144]	; (400ffc <mpu_log_settings+0xd4>)
  400f6c:	f002 fb76 	bl	40365c <iprintf>
        switch (mpu_get_gyro_scale()) {
  400f70:	f7ff fe22 	bl	400bb8 <mpu_get_gyro_scale>
  400f74:	2803      	cmp	r0, #3
  400f76:	d812      	bhi.n	400f9e <mpu_log_settings+0x76>
  400f78:	e8df f000 	tbb	[pc, r0]
  400f7c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400f80:	481f      	ldr	r0, [pc, #124]	; (401000 <mpu_log_settings+0xd8>)
  400f82:	f002 fb6b 	bl	40365c <iprintf>
        break;
  400f86:	e00a      	b.n	400f9e <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400f88:	481e      	ldr	r0, [pc, #120]	; (401004 <mpu_log_settings+0xdc>)
  400f8a:	f002 fb67 	bl	40365c <iprintf>
        break;
  400f8e:	e006      	b.n	400f9e <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400f90:	481d      	ldr	r0, [pc, #116]	; (401008 <mpu_log_settings+0xe0>)
  400f92:	f002 fb63 	bl	40365c <iprintf>
        break;
  400f96:	e002      	b.n	400f9e <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400f98:	481c      	ldr	r0, [pc, #112]	; (40100c <mpu_log_settings+0xe4>)
  400f9a:	f002 fb5f 	bl	40365c <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400f9e:	4b1c      	ldr	r3, [pc, #112]	; (401010 <mpu_log_settings+0xe8>)
  400fa0:	7819      	ldrb	r1, [r3, #0]
  400fa2:	481c      	ldr	r0, [pc, #112]	; (401014 <mpu_log_settings+0xec>)
  400fa4:	f002 fb5a 	bl	40365c <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400fa8:	4b1b      	ldr	r3, [pc, #108]	; (401018 <mpu_log_settings+0xf0>)
  400faa:	6818      	ldr	r0, [r3, #0]
  400fac:	f006 f824 	bl	406ff8 <__aeabi_f2d>
  400fb0:	4602      	mov	r2, r0
  400fb2:	460b      	mov	r3, r1
  400fb4:	4819      	ldr	r0, [pc, #100]	; (40101c <mpu_log_settings+0xf4>)
  400fb6:	f002 fb51 	bl	40365c <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400fba:	4b19      	ldr	r3, [pc, #100]	; (401020 <mpu_log_settings+0xf8>)
  400fbc:	6818      	ldr	r0, [r3, #0]
  400fbe:	f006 f81b 	bl	406ff8 <__aeabi_f2d>
  400fc2:	4602      	mov	r2, r0
  400fc4:	460b      	mov	r3, r1
  400fc6:	4817      	ldr	r0, [pc, #92]	; (401024 <mpu_log_settings+0xfc>)
  400fc8:	f002 fb48 	bl	40365c <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400fcc:	4b16      	ldr	r3, [pc, #88]	; (401028 <mpu_log_settings+0x100>)
  400fce:	6818      	ldr	r0, [r3, #0]
  400fd0:	f006 f812 	bl	406ff8 <__aeabi_f2d>
  400fd4:	4602      	mov	r2, r0
  400fd6:	460b      	mov	r3, r1
  400fd8:	4814      	ldr	r0, [pc, #80]	; (40102c <mpu_log_settings+0x104>)
  400fda:	f002 fb3f 	bl	40365c <iprintf>
  400fde:	bd08      	pop	{r3, pc}
  400fe0:	00407fec 	.word	0x00407fec
  400fe4:	00407fe0 	.word	0x00407fe0
  400fe8:	00407fd8 	.word	0x00407fd8
  400fec:	00407ffc 	.word	0x00407ffc
  400ff0:	00408010 	.word	0x00408010
  400ff4:	00408020 	.word	0x00408020
  400ff8:	0040803c 	.word	0x0040803c
  400ffc:	00408064 	.word	0x00408064
  401000:	00408070 	.word	0x00408070
  401004:	0040807c 	.word	0x0040807c
  401008:	00408088 	.word	0x00408088
  40100c:	00408094 	.word	0x00408094
  401010:	2000043c 	.word	0x2000043c
  401014:	004080a0 	.word	0x004080a0
  401018:	20000444 	.word	0x20000444
  40101c:	004080b4 	.word	0x004080b4
  401020:	20000438 	.word	0x20000438
  401024:	004080cc 	.word	0x004080cc
  401028:	20000428 	.word	0x20000428
  40102c:	004080e0 	.word	0x004080e0

00401030 <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  401030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  401032:	4604      	mov	r4, r0
  401034:	b1d8      	cbz	r0, 40106e <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  401036:	4b13      	ldr	r3, [pc, #76]	; (401084 <mpu_set_threshold+0x54>)
  401038:	781b      	ldrb	r3, [r3, #0]
  40103a:	b913      	cbnz	r3, 401042 <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  40103c:	2032      	movs	r0, #50	; 0x32
  40103e:	f000 f829 	bl	401094 <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  401042:	4620      	mov	r0, r4
  401044:	f006 fc2e 	bl	4078a4 <__aeabi_i2f>
  401048:	4607      	mov	r7, r0
  40104a:	4d0f      	ldr	r5, [pc, #60]	; (401088 <mpu_set_threshold+0x58>)
  40104c:	4e0f      	ldr	r6, [pc, #60]	; (40108c <mpu_set_threshold+0x5c>)
  40104e:	4601      	mov	r1, r0
  401050:	6830      	ldr	r0, [r6, #0]
  401052:	f006 fc7b 	bl	40794c <__aeabi_fmul>
  401056:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  401058:	4639      	mov	r1, r7
  40105a:	6870      	ldr	r0, [r6, #4]
  40105c:	f006 fc76 	bl	40794c <__aeabi_fmul>
  401060:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  401062:	4639      	mov	r1, r7
  401064:	68b0      	ldr	r0, [r6, #8]
  401066:	f006 fc71 	bl	40794c <__aeabi_fmul>
  40106a:	60a8      	str	r0, [r5, #8]
  40106c:	e004      	b.n	401078 <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  40106e:	4b06      	ldr	r3, [pc, #24]	; (401088 <mpu_set_threshold+0x58>)
  401070:	2200      	movs	r2, #0
  401072:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  401074:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  401076:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  401078:	4620      	mov	r0, r4
  40107a:	f006 fc0f 	bl	40789c <__aeabi_ui2f>
  40107e:	4b04      	ldr	r3, [pc, #16]	; (401090 <mpu_set_threshold+0x60>)
  401080:	6018      	str	r0, [r3, #0]
  401082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401084:	2000043c 	.word	0x2000043c
  401088:	20000680 	.word	0x20000680
  40108c:	20000504 	.word	0x20000504
  401090:	20000444 	.word	0x20000444

00401094 <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  401094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401098:	b085      	sub	sp, #20
	use_calibrate = true;
  40109a:	2201      	movs	r2, #1
  40109c:	4b5e      	ldr	r3, [pc, #376]	; (401218 <mpu_calibrate_gyro+0x184>)
  40109e:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  4010a0:	4681      	mov	r9, r0
  4010a2:	2800      	cmp	r0, #0
  4010a4:	d048      	beq.n	401138 <mpu_calibrate_gyro+0xa4>
  4010a6:	2400      	movs	r4, #0
  4010a8:	f04f 0a00 	mov.w	sl, #0
  4010ac:	46d3      	mov	fp, sl
  4010ae:	f8cd a00c 	str.w	sl, [sp, #12]
  4010b2:	f8cd a008 	str.w	sl, [sp, #8]
  4010b6:	f8cd a004 	str.w	sl, [sp, #4]
  4010ba:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  4010be:	f8df 816c 	ldr.w	r8, [pc, #364]	; 40122c <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  4010c2:	f7ff fe11 	bl	400ce8 <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  4010c6:	f8d8 7000 	ldr.w	r7, [r8]
  4010ca:	4639      	mov	r1, r7
  4010cc:	9800      	ldr	r0, [sp, #0]
  4010ce:	f006 fb35 	bl	40773c <__addsf3>
  4010d2:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  4010d4:	f8d8 6004 	ldr.w	r6, [r8, #4]
  4010d8:	4631      	mov	r1, r6
  4010da:	9801      	ldr	r0, [sp, #4]
  4010dc:	f006 fb2e 	bl	40773c <__addsf3>
  4010e0:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  4010e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
  4010e6:	4629      	mov	r1, r5
  4010e8:	9802      	ldr	r0, [sp, #8]
  4010ea:	f006 fb27 	bl	40773c <__addsf3>
  4010ee:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  4010f0:	4639      	mov	r1, r7
  4010f2:	4638      	mov	r0, r7
  4010f4:	f006 fc2a 	bl	40794c <__aeabi_fmul>
  4010f8:	4601      	mov	r1, r0
  4010fa:	9803      	ldr	r0, [sp, #12]
  4010fc:	f006 fb1e 	bl	40773c <__addsf3>
  401100:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  401102:	4631      	mov	r1, r6
  401104:	4630      	mov	r0, r6
  401106:	f006 fc21 	bl	40794c <__aeabi_fmul>
  40110a:	4601      	mov	r1, r0
  40110c:	4658      	mov	r0, fp
  40110e:	f006 fb15 	bl	40773c <__addsf3>
  401112:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  401114:	4629      	mov	r1, r5
  401116:	4628      	mov	r0, r5
  401118:	f006 fc18 	bl	40794c <__aeabi_fmul>
  40111c:	4601      	mov	r1, r0
  40111e:	4650      	mov	r0, sl
  401120:	f006 fb0c 	bl	40773c <__addsf3>
  401124:	4682      	mov	sl, r0

		delay_ms(5);
  401126:	f24a 706a 	movw	r0, #42858	; 0xa76a
  40112a:	f007 f9e5 	bl	4084f8 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  40112e:	3401      	adds	r4, #1
  401130:	b2e4      	uxtb	r4, r4
  401132:	45a1      	cmp	r9, r4
  401134:	d1c5      	bne.n	4010c2 <mpu_calibrate_gyro+0x2e>
  401136:	e00a      	b.n	40114e <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  401138:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  40113c:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  40113e:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  401142:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  401146:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  40114a:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  40114e:	4648      	mov	r0, r9
  401150:	f006 fba8 	bl	4078a4 <__aeabi_i2f>
  401154:	4605      	mov	r5, r0
  401156:	4601      	mov	r1, r0
  401158:	9800      	ldr	r0, [sp, #0]
  40115a:	f006 fcab 	bl	407ab4 <__aeabi_fdiv>
  40115e:	4606      	mov	r6, r0
  401160:	4c2e      	ldr	r4, [pc, #184]	; (40121c <mpu_calibrate_gyro+0x188>)
  401162:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  401164:	4629      	mov	r1, r5
  401166:	9801      	ldr	r0, [sp, #4]
  401168:	f006 fca4 	bl	407ab4 <__aeabi_fdiv>
  40116c:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  40116e:	4629      	mov	r1, r5
  401170:	9802      	ldr	r0, [sp, #8]
  401172:	f006 fc9f 	bl	407ab4 <__aeabi_fdiv>
  401176:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  401178:	9f03      	ldr	r7, [sp, #12]
  40117a:	4929      	ldr	r1, [pc, #164]	; (401220 <mpu_calibrate_gyro+0x18c>)
  40117c:	4638      	mov	r0, r7
  40117e:	f006 fc99 	bl	407ab4 <__aeabi_fdiv>
  401182:	4605      	mov	r5, r0
  401184:	4631      	mov	r1, r6
  401186:	4630      	mov	r0, r6
  401188:	f006 fbe0 	bl	40794c <__aeabi_fmul>
  40118c:	4601      	mov	r1, r0
  40118e:	4628      	mov	r0, r5
  401190:	f006 fad2 	bl	407738 <__aeabi_fsub>
  401194:	f005 ff30 	bl	406ff8 <__aeabi_f2d>
  401198:	f001 fa1c 	bl	4025d4 <sqrt>
  40119c:	4e21      	ldr	r6, [pc, #132]	; (401224 <mpu_calibrate_gyro+0x190>)
  40119e:	f006 fa77 	bl	407690 <__aeabi_d2f>
  4011a2:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  4011a4:	6865      	ldr	r5, [r4, #4]
  4011a6:	491e      	ldr	r1, [pc, #120]	; (401220 <mpu_calibrate_gyro+0x18c>)
  4011a8:	4658      	mov	r0, fp
  4011aa:	f006 fc83 	bl	407ab4 <__aeabi_fdiv>
  4011ae:	4607      	mov	r7, r0
  4011b0:	4629      	mov	r1, r5
  4011b2:	4628      	mov	r0, r5
  4011b4:	f006 fbca 	bl	40794c <__aeabi_fmul>
  4011b8:	4601      	mov	r1, r0
  4011ba:	4638      	mov	r0, r7
  4011bc:	f006 fabc 	bl	407738 <__aeabi_fsub>
  4011c0:	f005 ff1a 	bl	406ff8 <__aeabi_f2d>
  4011c4:	f001 fa06 	bl	4025d4 <sqrt>
  4011c8:	f006 fa62 	bl	407690 <__aeabi_d2f>
  4011cc:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  4011ce:	68a4      	ldr	r4, [r4, #8]
  4011d0:	4913      	ldr	r1, [pc, #76]	; (401220 <mpu_calibrate_gyro+0x18c>)
  4011d2:	4650      	mov	r0, sl
  4011d4:	f006 fc6e 	bl	407ab4 <__aeabi_fdiv>
  4011d8:	4605      	mov	r5, r0
  4011da:	4621      	mov	r1, r4
  4011dc:	4620      	mov	r0, r4
  4011de:	f006 fbb5 	bl	40794c <__aeabi_fmul>
  4011e2:	4601      	mov	r1, r0
  4011e4:	4628      	mov	r0, r5
  4011e6:	f006 faa7 	bl	407738 <__aeabi_fsub>
  4011ea:	f005 ff05 	bl	406ff8 <__aeabi_f2d>
  4011ee:	f001 f9f1 	bl	4025d4 <sqrt>
  4011f2:	f006 fa4d 	bl	407690 <__aeabi_d2f>
  4011f6:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  4011f8:	4b0b      	ldr	r3, [pc, #44]	; (401228 <mpu_calibrate_gyro+0x194>)
  4011fa:	681c      	ldr	r4, [r3, #0]
  4011fc:	2100      	movs	r1, #0
  4011fe:	4620      	mov	r0, r4
  401200:	f006 fd60 	bl	407cc4 <__aeabi_fcmpgt>
  401204:	b128      	cbz	r0, 401212 <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  401206:	4620      	mov	r0, r4
  401208:	f006 fd8c 	bl	407d24 <__aeabi_f2uiz>
  40120c:	b2c0      	uxtb	r0, r0
  40120e:	f7ff ff0f 	bl	401030 <mpu_set_threshold>
	}

}
  401212:	b005      	add	sp, #20
  401214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401218:	2000043c 	.word	0x2000043c
  40121c:	200006b4 	.word	0x200006b4
  401220:	42480000 	.word	0x42480000
  401224:	20000504 	.word	0x20000504
  401228:	20000444 	.word	0x20000444
  40122c:	20000510 	.word	0x20000510

00401230 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  401230:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  401232:	4b0c      	ldr	r3, [pc, #48]	; (401264 <imu_init+0x34>)
  401234:	2200      	movs	r2, #0
  401236:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  401238:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  40123a:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  40123c:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  40123e:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  401240:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  401242:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  401244:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  401246:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  401248:	f7ff fc26 	bl	400a98 <mpu_init>
  40124c:	4604      	mov	r4, r0
  40124e:	f7ff fc4d 	bl	400aec <mpu_probe>
  401252:	4020      	ands	r0, r4
  401254:	b2c4      	uxtb	r4, r0
  401256:	2100      	movs	r1, #0
  401258:	4608      	mov	r0, r1
  40125a:	f7ff fceb 	bl	400c34 <mpu_begin>
}
  40125e:	4020      	ands	r0, r4
  401260:	bd10      	pop	{r4, pc}
  401262:	bf00      	nop
  401264:	20000800 	.word	0x20000800

00401268 <imu_calibrate>:

void imu_calibrate(void)
{
  401268:	b508      	push	{r3, lr}
    printf("calibrating imu...\r\n");
  40126a:	4807      	ldr	r0, [pc, #28]	; (401288 <imu_calibrate+0x20>)
  40126c:	f002 f9f6 	bl	40365c <iprintf>
    mpu_calibrate_gyro(GYRO_SAMPLES);
  401270:	2032      	movs	r0, #50	; 0x32
  401272:	f7ff ff0f 	bl	401094 <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  401276:	2000      	movs	r0, #0
  401278:	f7ff feda 	bl	401030 <mpu_set_threshold>
    mpu_log_settings();
  40127c:	f7ff fe54 	bl	400f28 <mpu_log_settings>
    printf("calibration complete.\r\n");
  401280:	4802      	ldr	r0, [pc, #8]	; (40128c <imu_calibrate+0x24>)
  401282:	f002 f9eb 	bl	40365c <iprintf>
  401286:	bd08      	pop	{r3, pc}
  401288:	004080f8 	.word	0x004080f8
  40128c:	00408110 	.word	0x00408110

00401290 <imu_tick>:
}

void imu_tick(void)
{
  401290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401294:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  401296:	4b82      	ldr	r3, [pc, #520]	; (4014a0 <imu_tick+0x210>)
  401298:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  40129a:	a808      	add	r0, sp, #32
  40129c:	f7ff fd46 	bl	400d2c <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  4012a0:	f7ff fe1a 	bl	400ed8 <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  4012a4:	4c7f      	ldr	r4, [pc, #508]	; (4014a4 <imu_tick+0x214>)
  4012a6:	6820      	ldr	r0, [r4, #0]
  4012a8:	f005 fea6 	bl	406ff8 <__aeabi_f2d>
  4012ac:	a37a      	add	r3, pc, #488	; (adr r3, 401498 <imu_tick+0x208>)
  4012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012b2:	f005 fef5 	bl	4070a0 <__aeabi_dmul>
  4012b6:	2200      	movs	r2, #0
  4012b8:	4b7b      	ldr	r3, [pc, #492]	; (4014a8 <imu_tick+0x218>)
  4012ba:	f006 f81b 	bl	4072f4 <__aeabi_ddiv>
  4012be:	f006 f9e7 	bl	407690 <__aeabi_d2f>
  4012c2:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  4012c4:	6860      	ldr	r0, [r4, #4]
  4012c6:	f005 fe97 	bl	406ff8 <__aeabi_f2d>
  4012ca:	a373      	add	r3, pc, #460	; (adr r3, 401498 <imu_tick+0x208>)
  4012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012d0:	f005 fee6 	bl	4070a0 <__aeabi_dmul>
  4012d4:	2200      	movs	r2, #0
  4012d6:	4b74      	ldr	r3, [pc, #464]	; (4014a8 <imu_tick+0x218>)
  4012d8:	f006 f80c 	bl	4072f4 <__aeabi_ddiv>
  4012dc:	f006 f9d8 	bl	407690 <__aeabi_d2f>
  4012e0:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  4012e2:	68a0      	ldr	r0, [r4, #8]
  4012e4:	f005 fe88 	bl	406ff8 <__aeabi_f2d>
  4012e8:	a36b      	add	r3, pc, #428	; (adr r3, 401498 <imu_tick+0x208>)
  4012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012ee:	f005 fed7 	bl	4070a0 <__aeabi_dmul>
  4012f2:	2200      	movs	r2, #0
  4012f4:	4b6c      	ldr	r3, [pc, #432]	; (4014a8 <imu_tick+0x218>)
  4012f6:	f005 fffd 	bl	4072f4 <__aeabi_ddiv>
  4012fa:	f006 f9c9 	bl	407690 <__aeabi_d2f>
  4012fe:	9007      	str	r0, [sp, #28]



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  401300:	4c6a      	ldr	r4, [pc, #424]	; (4014ac <imu_tick+0x21c>)
  401302:	6820      	ldr	r0, [r4, #0]
  401304:	f005 fe78 	bl	406ff8 <__aeabi_f2d>
  401308:	e9cd 0100 	strd	r0, r1, [sp]
  40130c:	6860      	ldr	r0, [r4, #4]
  40130e:	f005 fe73 	bl	406ff8 <__aeabi_f2d>
  401312:	4682      	mov	sl, r0
  401314:	468b      	mov	fp, r1
  401316:	68a0      	ldr	r0, [r4, #8]
  401318:	f005 fe6e 	bl	406ff8 <__aeabi_f2d>
  40131c:	4606      	mov	r6, r0
  40131e:	460f      	mov	r7, r1
  401320:	4632      	mov	r2, r6
  401322:	463b      	mov	r3, r7
  401324:	4630      	mov	r0, r6
  401326:	4639      	mov	r1, r7
  401328:	f005 feba 	bl	4070a0 <__aeabi_dmul>
  40132c:	4680      	mov	r8, r0
  40132e:	4689      	mov	r9, r1
  401330:	4652      	mov	r2, sl
  401332:	465b      	mov	r3, fp
  401334:	4650      	mov	r0, sl
  401336:	4659      	mov	r1, fp
  401338:	f005 feb2 	bl	4070a0 <__aeabi_dmul>
  40133c:	4602      	mov	r2, r0
  40133e:	460b      	mov	r3, r1
  401340:	4640      	mov	r0, r8
  401342:	4649      	mov	r1, r9
  401344:	f005 fcfa 	bl	406d3c <__adddf3>
  401348:	f001 f944 	bl	4025d4 <sqrt>
  40134c:	4602      	mov	r2, r0
  40134e:	460b      	mov	r3, r1
  401350:	e9dd 0100 	ldrd	r0, r1, [sp]
  401354:	f001 f93c 	bl	4025d0 <atan2>
  401358:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  40135c:	6860      	ldr	r0, [r4, #4]
  40135e:	f005 fe4b 	bl	406ff8 <__aeabi_f2d>
  401362:	e9cd 0102 	strd	r0, r1, [sp, #8]
  401366:	6820      	ldr	r0, [r4, #0]
  401368:	f005 fe46 	bl	406ff8 <__aeabi_f2d>
  40136c:	4682      	mov	sl, r0
  40136e:	468b      	mov	fp, r1
  401370:	68a0      	ldr	r0, [r4, #8]
  401372:	f005 fe41 	bl	406ff8 <__aeabi_f2d>
  401376:	4606      	mov	r6, r0
  401378:	460f      	mov	r7, r1
  40137a:	4652      	mov	r2, sl
  40137c:	465b      	mov	r3, fp
  40137e:	4650      	mov	r0, sl
  401380:	4659      	mov	r1, fp
  401382:	f005 fe8d 	bl	4070a0 <__aeabi_dmul>
  401386:	4680      	mov	r8, r0
  401388:	4689      	mov	r9, r1
  40138a:	4632      	mov	r2, r6
  40138c:	463b      	mov	r3, r7
  40138e:	4630      	mov	r0, r6
  401390:	4639      	mov	r1, r7
  401392:	f005 fe85 	bl	4070a0 <__aeabi_dmul>
  401396:	4602      	mov	r2, r0
  401398:	460b      	mov	r3, r1
  40139a:	4640      	mov	r0, r8
  40139c:	4649      	mov	r1, r9
  40139e:	f005 fccd 	bl	406d3c <__adddf3>
  4013a2:	f001 f917 	bl	4025d4 <sqrt>
  4013a6:	4602      	mov	r2, r0
  4013a8:	460b      	mov	r3, r1
  4013aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4013ae:	f001 f90f 	bl	4025d0 <atan2>
  4013b2:	4680      	mov	r8, r0
  4013b4:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  4013b6:	f8df a118 	ldr.w	sl, [pc, #280]	; 4014d0 <imu_tick+0x240>
    float dt = ((float)delta_t/1000.0f);
  4013ba:	f8da 0000 	ldr.w	r0, [sl]
  4013be:	1a28      	subs	r0, r5, r0
  4013c0:	f006 fa6c 	bl	40789c <__aeabi_ui2f>
  4013c4:	493a      	ldr	r1, [pc, #232]	; (4014b0 <imu_tick+0x220>)
  4013c6:	f006 fb75 	bl	407ab4 <__aeabi_fdiv>
  4013ca:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  4013cc:	4601      	mov	r1, r0
  4013ce:	9805      	ldr	r0, [sp, #20]
  4013d0:	f006 fabc 	bl	40794c <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  4013d4:	4f37      	ldr	r7, [pc, #220]	; (4014b4 <imu_tick+0x224>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  4013d6:	6839      	ldr	r1, [r7, #0]
  4013d8:	f006 f9b0 	bl	40773c <__addsf3>
  4013dc:	4936      	ldr	r1, [pc, #216]	; (4014b8 <imu_tick+0x228>)
  4013de:	f006 fab5 	bl	40794c <__aeabi_fmul>
  4013e2:	4683      	mov	fp, r0
  4013e4:	2200      	movs	r2, #0
  4013e6:	4b30      	ldr	r3, [pc, #192]	; (4014a8 <imu_tick+0x218>)
  4013e8:	4640      	mov	r0, r8
  4013ea:	4649      	mov	r1, r9
  4013ec:	f005 fe58 	bl	4070a0 <__aeabi_dmul>
  4013f0:	a329      	add	r3, pc, #164	; (adr r3, 401498 <imu_tick+0x208>)
  4013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013f6:	f005 ff7d 	bl	4072f4 <__aeabi_ddiv>
  4013fa:	f006 f949 	bl	407690 <__aeabi_d2f>
  4013fe:	492f      	ldr	r1, [pc, #188]	; (4014bc <imu_tick+0x22c>)
  401400:	f006 faa4 	bl	40794c <__aeabi_fmul>
  401404:	4601      	mov	r1, r0
  401406:	4658      	mov	r0, fp
  401408:	f006 f998 	bl	40773c <__addsf3>
  40140c:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  40140e:	4621      	mov	r1, r4
  401410:	9806      	ldr	r0, [sp, #24]
  401412:	f006 fa9b 	bl	40794c <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  401416:	4e2a      	ldr	r6, [pc, #168]	; (4014c0 <imu_tick+0x230>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  401418:	6831      	ldr	r1, [r6, #0]
  40141a:	f006 f98f 	bl	40773c <__addsf3>
  40141e:	4926      	ldr	r1, [pc, #152]	; (4014b8 <imu_tick+0x228>)
  401420:	f006 fa94 	bl	40794c <__aeabi_fmul>
  401424:	4681      	mov	r9, r0
  401426:	2200      	movs	r2, #0
  401428:	4b1f      	ldr	r3, [pc, #124]	; (4014a8 <imu_tick+0x218>)
  40142a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40142e:	f005 fe37 	bl	4070a0 <__aeabi_dmul>
  401432:	a319      	add	r3, pc, #100	; (adr r3, 401498 <imu_tick+0x208>)
  401434:	e9d3 2300 	ldrd	r2, r3, [r3]
  401438:	f005 ff5c 	bl	4072f4 <__aeabi_ddiv>
  40143c:	f006 f928 	bl	407690 <__aeabi_d2f>
  401440:	491e      	ldr	r1, [pc, #120]	; (4014bc <imu_tick+0x22c>)
  401442:	f006 fa83 	bl	40794c <__aeabi_fmul>
  401446:	4601      	mov	r1, r0
  401448:	4648      	mov	r0, r9
  40144a:	f006 f977 	bl	40773c <__addsf3>
  40144e:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  401450:	4621      	mov	r1, r4
  401452:	9807      	ldr	r0, [sp, #28]
  401454:	f006 fa7a 	bl	40794c <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  401458:	4c1a      	ldr	r4, [pc, #104]	; (4014c4 <imu_tick+0x234>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  40145a:	6821      	ldr	r1, [r4, #0]
  40145c:	f006 f96e 	bl	40773c <__addsf3>
  401460:	4915      	ldr	r1, [pc, #84]	; (4014b8 <imu_tick+0x228>)
  401462:	f006 fa73 	bl	40794c <__aeabi_fmul>
  401466:	2100      	movs	r1, #0
  401468:	f006 f968 	bl	40773c <__addsf3>


    last_time_read = t_now;
  40146c:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  401470:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  401474:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  401478:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  40147a:	4b13      	ldr	r3, [pc, #76]	; (4014c8 <imu_tick+0x238>)
  40147c:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  401480:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  401484:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  401486:	4b11      	ldr	r3, [pc, #68]	; (4014cc <imu_tick+0x23c>)
  401488:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  40148c:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  401490:	6098      	str	r0, [r3, #8]


  401492:	b00d      	add	sp, #52	; 0x34
  401494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401498:	54442d18 	.word	0x54442d18
  40149c:	400921fb 	.word	0x400921fb
  4014a0:	20000208 	.word	0x20000208
  4014a4:	200006c4 	.word	0x200006c4
  4014a8:	40668000 	.word	0x40668000
  4014ac:	20000698 	.word	0x20000698
  4014b0:	447a0000 	.word	0x447a0000
  4014b4:	20000430 	.word	0x20000430
  4014b8:	3f75c28f 	.word	0x3f75c28f
  4014bc:	3d23d710 	.word	0x3d23d710
  4014c0:	20000434 	.word	0x20000434
  4014c4:	20000440 	.word	0x20000440
  4014c8:	20000824 	.word	0x20000824
  4014cc:	20000800 	.word	0x20000800
  4014d0:	2000042c 	.word	0x2000042c

004014d4 <motor_config_pins>:
	motors[1].angle_max = AP_ANGLE_MAX;
	motors[1].timeout = 1000;
}

void motor_config_pins(motor_config_t motor_cfg)
{
  4014d4:	b084      	sub	sp, #16
  4014d6:	b538      	push	{r3, r4, r5, lr}
  4014d8:	ac04      	add	r4, sp, #16
  4014da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_configure_pin(motor_cfg.ul_pin, motor_cfg.ul_flag);
  4014de:	9906      	ldr	r1, [sp, #24]
  4014e0:	9805      	ldr	r0, [sp, #20]
  4014e2:	f000 fc1f 	bl	401d24 <pio_configure_pin>

	pmc_enable_periph_clk(motor_cfg.ul_periph_clkid);
  4014e6:	9807      	ldr	r0, [sp, #28]
  4014e8:	f000 fdce 	bl	402088 <pmc_enable_periph_clk>

	pwm_channel_disable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  4014ec:	ad04      	add	r5, sp, #16
  4014ee:	9908      	ldr	r1, [sp, #32]
  4014f0:	f855 0b14 	ldr.w	r0, [r5], #20
  4014f4:	f000 ff14 	bl	402320 <pwm_channel_disable>
	pwm_init(motor_cfg.p_pwm, &motor_cfg.clock_setting);
  4014f8:	ac04      	add	r4, sp, #16
  4014fa:	4629      	mov	r1, r5
  4014fc:	f854 0b20 	ldr.w	r0, [r4], #32
  401500:	f000 fe62 	bl	4021c8 <pwm_init>

	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
  401504:	4621      	mov	r1, r4
  401506:	9804      	ldr	r0, [sp, #16]
  401508:	f000 fe82 	bl	402210 <pwm_channel_init>
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  40150c:	9908      	ldr	r1, [sp, #32]
  40150e:	9804      	ldr	r0, [sp, #16]
  401510:	f000 ff00 	bl	402314 <pwm_channel_enable>
}
  401514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401518:	b004      	add	sp, #16
  40151a:	4770      	bx	lr

0040151c <motor_init>:
uint32_t motor_current_duty = 0;
void motor_config_pins(motor_config_t motor_cfg);


void motor_init(void)
{
  40151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401520:	b0b3      	sub	sp, #204	; 0xcc
	printf("motor_init\r\n");
  401522:	485b      	ldr	r0, [pc, #364]	; (401690 <motor_init+0x174>)
  401524:	f002 f89a 	bl	40365c <iprintf>
        .ul_clka = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_mck = sysclk_get_cpu_hz()
	};

	motor_config_t motor_cfg0 = {
  401528:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  40152c:	2248      	movs	r2, #72	; 0x48
  40152e:	2100      	movs	r1, #0
  401530:	4648      	mov	r0, r9
  401532:	f001 fc1c 	bl	402d6e <memset>
		.pwm_channel.ul_period = MOTOR_PWM_PERIOD_TICKS,
		.pwm_channel.ul_duty = MOTOR_PWM_MIN,
		.pwm_channel.channel = EXT1_PWM_CHANNEL
	};

	motor_config_t motor_cfg1 = {
  401536:	2248      	movs	r2, #72	; 0x48
  401538:	2100      	movs	r1, #0
  40153a:	a80e      	add	r0, sp, #56	; 0x38
  40153c:	f001 fc17 	bl	402d6e <memset>
	};

	


	motor_config_pins(motor_cfg0);
  401540:	4b54      	ldr	r3, [pc, #336]	; (401694 <motor_init+0x178>)
  401542:	9320      	str	r3, [sp, #128]	; 0x80
  401544:	2417      	movs	r4, #23
  401546:	9421      	str	r4, [sp, #132]	; 0x84
  401548:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  40154c:	9722      	str	r7, [sp, #136]	; 0x88
  40154e:	231f      	movs	r3, #31
  401550:	9323      	str	r3, [sp, #140]	; 0x8c
  401552:	4e51      	ldr	r6, [pc, #324]	; (401698 <motor_init+0x17c>)
  401554:	9625      	str	r6, [sp, #148]	; 0x94
  401556:	9626      	str	r6, [sp, #152]	; 0x98
  401558:	4b50      	ldr	r3, [pc, #320]	; (40169c <motor_init+0x180>)
  40155a:	9327      	str	r3, [sp, #156]	; 0x9c
  40155c:	f04f 080b 	mov.w	r8, #11
  401560:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  401564:	2501      	movs	r5, #1
  401566:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  40156a:	f240 4a7e 	movw	sl, #1150	; 0x47e
  40156e:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  401572:	f644 6b20 	movw	fp, #20000	; 0x4e20
  401576:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  40157a:	46ee      	mov	lr, sp
  40157c:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
  401580:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401584:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401588:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40158c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401590:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401594:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401598:	e89c 0003 	ldmia.w	ip, {r0, r1}
  40159c:	e88e 0003 	stmia.w	lr, {r0, r1}
  4015a0:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  4015a4:	f7ff ff96 	bl	4014d4 <motor_config_pins>
	motor_config_pins(motor_cfg1);
  4015a8:	4b3a      	ldr	r3, [pc, #232]	; (401694 <motor_init+0x178>)
  4015aa:	930e      	str	r3, [sp, #56]	; 0x38
  4015ac:	2353      	movs	r3, #83	; 0x53
  4015ae:	930f      	str	r3, [sp, #60]	; 0x3c
  4015b0:	9710      	str	r7, [sp, #64]	; 0x40
  4015b2:	231f      	movs	r3, #31
  4015b4:	9311      	str	r3, [sp, #68]	; 0x44
  4015b6:	9512      	str	r5, [sp, #72]	; 0x48
  4015b8:	9613      	str	r6, [sp, #76]	; 0x4c
  4015ba:	9614      	str	r6, [sp, #80]	; 0x50
  4015bc:	4b37      	ldr	r3, [pc, #220]	; (40169c <motor_init+0x180>)
  4015be:	9315      	str	r3, [sp, #84]	; 0x54
  4015c0:	9516      	str	r5, [sp, #88]	; 0x58
  4015c2:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  4015c6:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  4015ca:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  4015ce:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  4015d2:	46ee      	mov	lr, sp
  4015d4:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  4015d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4015ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4015f0:	e89c 0003 	ldmia.w	ip, {r0, r1}
  4015f4:	e88e 0003 	stmia.w	lr, {r0, r1}
  4015f8:	ab0e      	add	r3, sp, #56	; 0x38
  4015fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4015fc:	f7ff ff6a 	bl	4014d4 <motor_config_pins>

	motors[0].config = motor_cfg0;
  401600:	4b24      	ldr	r3, [pc, #144]	; (401694 <motor_init+0x178>)
  401602:	9320      	str	r3, [sp, #128]	; 0x80
  401604:	9421      	str	r4, [sp, #132]	; 0x84
  401606:	9722      	str	r7, [sp, #136]	; 0x88
  401608:	231f      	movs	r3, #31
  40160a:	9323      	str	r3, [sp, #140]	; 0x8c
  40160c:	9625      	str	r6, [sp, #148]	; 0x94
  40160e:	9626      	str	r6, [sp, #152]	; 0x98
  401610:	4b22      	ldr	r3, [pc, #136]	; (40169c <motor_init+0x180>)
  401612:	9327      	str	r3, [sp, #156]	; 0x9c
  401614:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  401618:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  40161c:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  401620:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  401624:	4c1e      	ldr	r4, [pc, #120]	; (4016a0 <motor_init+0x184>)
  401626:	2248      	movs	r2, #72	; 0x48
  401628:	4649      	mov	r1, r9
  40162a:	4620      	mov	r0, r4
  40162c:	f001 fb94 	bl	402d58 <memcpy>
	motors[0].angle_min = AP_ANGLE_MIN;
  401630:	f06f 0359 	mvn.w	r3, #89	; 0x59
  401634:	64a3      	str	r3, [r4, #72]	; 0x48
	motors[0].angle_max = AP_ANGLE_MAX;
  401636:	235a      	movs	r3, #90	; 0x5a
  401638:	64e3      	str	r3, [r4, #76]	; 0x4c
	motors[0].timeout = 1000;
  40163a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  40163e:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50

	motors[1].config = motor_cfg1;
  401642:	4b14      	ldr	r3, [pc, #80]	; (401694 <motor_init+0x178>)
  401644:	930e      	str	r3, [sp, #56]	; 0x38
  401646:	2353      	movs	r3, #83	; 0x53
  401648:	930f      	str	r3, [sp, #60]	; 0x3c
  40164a:	9710      	str	r7, [sp, #64]	; 0x40
  40164c:	231f      	movs	r3, #31
  40164e:	9311      	str	r3, [sp, #68]	; 0x44
  401650:	9512      	str	r5, [sp, #72]	; 0x48
  401652:	9613      	str	r6, [sp, #76]	; 0x4c
  401654:	9614      	str	r6, [sp, #80]	; 0x50
  401656:	4b11      	ldr	r3, [pc, #68]	; (40169c <motor_init+0x180>)
  401658:	9315      	str	r3, [sp, #84]	; 0x54
  40165a:	9516      	str	r5, [sp, #88]	; 0x58
  40165c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  401660:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  401664:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  401668:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  40166c:	2248      	movs	r2, #72	; 0x48
  40166e:	a90e      	add	r1, sp, #56	; 0x38
  401670:	f104 0054 	add.w	r0, r4, #84	; 0x54
  401674:	f001 fb70 	bl	402d58 <memcpy>
	motors[1].angle_min = AP_ANGLE_MIN;
  401678:	f06f 0359 	mvn.w	r3, #89	; 0x59
  40167c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	motors[1].angle_max = AP_ANGLE_MAX;
  401680:	235a      	movs	r3, #90	; 0x5a
  401682:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	motors[1].timeout = 1000;
  401686:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
}
  40168a:	b033      	add	sp, #204	; 0xcc
  40168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401690:	00408128 	.word	0x00408128
  401694:	40020000 	.word	0x40020000
  401698:	000f4240 	.word	0x000f4240
  40169c:	07270e00 	.word	0x07270e00
  4016a0:	20000530 	.word	0x20000530

004016a4 <motor_tick>:
	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
}

void motor_tick(void)
{
  4016a4:	4770      	bx	lr
  4016a6:	bf00      	nop

004016a8 <motor_set_power>:

}

void motor_set_power(motor_t motor, uint32_t power)
{
  4016a8:	b084      	sub	sp, #16
  4016aa:	b508      	push	{r3, lr}
  4016ac:	f10d 0e08 	add.w	lr, sp, #8
  4016b0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  4016b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
	motor.config.pwm_channel.ul_duty = power;
  4016b6:	910d      	str	r1, [sp, #52]	; 0x34
	// printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
	if (config.log_motor) {
  4016b8:	4b07      	ldr	r3, [pc, #28]	; (4016d8 <motor_set_power+0x30>)
  4016ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4016be:	b113      	cbz	r3, 4016c6 <motor_set_power+0x1e>
		printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
  4016c0:	4806      	ldr	r0, [pc, #24]	; (4016dc <motor_set_power+0x34>)
  4016c2:	f001 ffcb 	bl	40365c <iprintf>
	}
	pwm_channel_update_duty(motor.config.p_pwm, &motor.config.pwm_channel, motor.config.pwm_channel.ul_duty);
  4016c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4016c8:	a90a      	add	r1, sp, #40	; 0x28
  4016ca:	9802      	ldr	r0, [sp, #8]
  4016cc:	f000 fe14 	bl	4022f8 <pwm_channel_update_duty>
}
  4016d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4016d4:	b004      	add	sp, #16
  4016d6:	4770      	bx	lr
  4016d8:	200006d0 	.word	0x200006d0
  4016dc:	00408138 	.word	0x00408138

004016e0 <motor_min>:

void motor_min(motor_t motor)
{
  4016e0:	b084      	sub	sp, #16
  4016e2:	b500      	push	{lr}
  4016e4:	b093      	sub	sp, #76	; 0x4c
  4016e6:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  4016ea:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MIN;
  4016ee:	f240 437e 	movw	r3, #1150	; 0x47e
  4016f2:	4a08      	ldr	r2, [pc, #32]	; (401714 <motor_min+0x34>)
  4016f4:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, MOTOR_PWM_MIN);
  4016f6:	9311      	str	r3, [sp, #68]	; 0x44
  4016f8:	2244      	movs	r2, #68	; 0x44
  4016fa:	a918      	add	r1, sp, #96	; 0x60
  4016fc:	4668      	mov	r0, sp
  4016fe:	f001 fb2b 	bl	402d58 <memcpy>
  401702:	ab14      	add	r3, sp, #80	; 0x50
  401704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401706:	f7ff ffcf 	bl	4016a8 <motor_set_power>
}
  40170a:	b013      	add	sp, #76	; 0x4c
  40170c:	f85d eb04 	ldr.w	lr, [sp], #4
  401710:	b004      	add	sp, #16
  401712:	4770      	bx	lr
  401714:	20000448 	.word	0x20000448

00401718 <motor_mid>:

void motor_mid(motor_t motor)
{
  401718:	b084      	sub	sp, #16
  40171a:	b500      	push	{lr}
  40171c:	b093      	sub	sp, #76	; 0x4c
  40171e:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  401722:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MID;
  401726:	f240 5346 	movw	r3, #1350	; 0x546
  40172a:	4a08      	ldr	r2, [pc, #32]	; (40174c <motor_mid+0x34>)
  40172c:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  40172e:	9311      	str	r3, [sp, #68]	; 0x44
  401730:	2244      	movs	r2, #68	; 0x44
  401732:	a918      	add	r1, sp, #96	; 0x60
  401734:	4668      	mov	r0, sp
  401736:	f001 fb0f 	bl	402d58 <memcpy>
  40173a:	ab14      	add	r3, sp, #80	; 0x50
  40173c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40173e:	f7ff ffb3 	bl	4016a8 <motor_set_power>
}
  401742:	b013      	add	sp, #76	; 0x4c
  401744:	f85d eb04 	ldr.w	lr, [sp], #4
  401748:	b004      	add	sp, #16
  40174a:	4770      	bx	lr
  40174c:	20000448 	.word	0x20000448

00401750 <motor_max>:

void motor_max(motor_t motor)
{
  401750:	b084      	sub	sp, #16
  401752:	b500      	push	{lr}
  401754:	b093      	sub	sp, #76	; 0x4c
  401756:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  40175a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MAX;
  40175e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  401762:	4a08      	ldr	r2, [pc, #32]	; (401784 <motor_max+0x34>)
  401764:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, motor_current_duty);
  401766:	9311      	str	r3, [sp, #68]	; 0x44
  401768:	2244      	movs	r2, #68	; 0x44
  40176a:	a918      	add	r1, sp, #96	; 0x60
  40176c:	4668      	mov	r0, sp
  40176e:	f001 faf3 	bl	402d58 <memcpy>
  401772:	ab14      	add	r3, sp, #80	; 0x50
  401774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401776:	f7ff ff97 	bl	4016a8 <motor_set_power>
}
  40177a:	b013      	add	sp, #76	; 0x4c
  40177c:	f85d eb04 	ldr.w	lr, [sp], #4
  401780:	b004      	add	sp, #16
  401782:	4770      	bx	lr
  401784:	20000448 	.word	0x20000448

00401788 <pid_init>:
float desired_angle = 0.0f;


void pid_init(void)
{
    time = 0;
  401788:	2300      	movs	r3, #0
  40178a:	4a0a      	ldr	r2, [pc, #40]	; (4017b4 <pid_init+0x2c>)
  40178c:	6013      	str	r3, [r2, #0]
    previous_time = 0;
  40178e:	4a0a      	ldr	r2, [pc, #40]	; (4017b8 <pid_init+0x30>)
  401790:	6013      	str	r3, [r2, #0]
    elapsed_time = 0;
  401792:	4a0a      	ldr	r2, [pc, #40]	; (4017bc <pid_init+0x34>)
  401794:	6013      	str	r3, [r2, #0]
    pid = 0.0f;
  401796:	2300      	movs	r3, #0
  401798:	4a09      	ldr	r2, [pc, #36]	; (4017c0 <pid_init+0x38>)
  40179a:	6013      	str	r3, [r2, #0]
    error = 0.0f;
  40179c:	4a09      	ldr	r2, [pc, #36]	; (4017c4 <pid_init+0x3c>)
  40179e:	6013      	str	r3, [r2, #0]
    previous_error = 0.0f;
  4017a0:	4a09      	ldr	r2, [pc, #36]	; (4017c8 <pid_init+0x40>)
  4017a2:	6013      	str	r3, [r2, #0]
    pid_p = 0.0f;
  4017a4:	4a09      	ldr	r2, [pc, #36]	; (4017cc <pid_init+0x44>)
  4017a6:	6013      	str	r3, [r2, #0]
    pid_i = 0.0f;
  4017a8:	4a09      	ldr	r2, [pc, #36]	; (4017d0 <pid_init+0x48>)
  4017aa:	6013      	str	r3, [r2, #0]
    pid_d = 0.0f;
  4017ac:	4a09      	ldr	r2, [pc, #36]	; (4017d4 <pid_init+0x4c>)
  4017ae:	6013      	str	r3, [r2, #0]
  4017b0:	4770      	bx	lr
  4017b2:	bf00      	nop
  4017b4:	20000468 	.word	0x20000468
  4017b8:	2000046c 	.word	0x2000046c
  4017bc:	20000470 	.word	0x20000470
  4017c0:	2000044c 	.word	0x2000044c
  4017c4:	20000458 	.word	0x20000458
  4017c8:	20000450 	.word	0x20000450
  4017cc:	20000474 	.word	0x20000474
  4017d0:	20000454 	.word	0x20000454
  4017d4:	2000045c 	.word	0x2000045c

004017d8 <pid_tick>:
float kp = 1.0f;
float ki = 0.0f;
float kd = 0.0;

float pid_tick(void)
{
  4017d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    previous_error = time;
  4017dc:	4c27      	ldr	r4, [pc, #156]	; (40187c <pid_tick+0xa4>)
  4017de:	6820      	ldr	r0, [r4, #0]
  4017e0:	f006 f85c 	bl	40789c <__aeabi_ui2f>
  4017e4:	4680      	mov	r8, r0
    time = cph_get_millis();
  4017e6:	4b26      	ldr	r3, [pc, #152]	; (401880 <pid_tick+0xa8>)
  4017e8:	681b      	ldr	r3, [r3, #0]
  4017ea:	6023      	str	r3, [r4, #0]
    elapsed_time = (time - previous_time)/1000;
  4017ec:	4a25      	ldr	r2, [pc, #148]	; (401884 <pid_tick+0xac>)
  4017ee:	6814      	ldr	r4, [r2, #0]
  4017f0:	1b1b      	subs	r3, r3, r4
  4017f2:	4c25      	ldr	r4, [pc, #148]	; (401888 <pid_tick+0xb0>)
  4017f4:	fba4 3403 	umull	r3, r4, r4, r3
  4017f8:	09a4      	lsrs	r4, r4, #6
  4017fa:	4b24      	ldr	r3, [pc, #144]	; (40188c <pid_tick+0xb4>)
  4017fc:	601c      	str	r4, [r3, #0]

    error = ap.imu.y_axis - AP.desired_angle_x;
  4017fe:	4b24      	ldr	r3, [pc, #144]	; (401890 <pid_tick+0xb8>)
  401800:	6859      	ldr	r1, [r3, #4]
  401802:	4b24      	ldr	r3, [pc, #144]	; (401894 <pid_tick+0xbc>)
  401804:	6858      	ldr	r0, [r3, #4]
  401806:	f005 ff97 	bl	407738 <__aeabi_fsub>
  40180a:	4605      	mov	r5, r0
  40180c:	4b22      	ldr	r3, [pc, #136]	; (401898 <pid_tick+0xc0>)
  40180e:	6018      	str	r0, [r3, #0]
    pid_p = kp*error;
  401810:	4b22      	ldr	r3, [pc, #136]	; (40189c <pid_tick+0xc4>)
  401812:	6819      	ldr	r1, [r3, #0]
  401814:	f006 f89a 	bl	40794c <__aeabi_fmul>
  401818:	4606      	mov	r6, r0
  40181a:	4b21      	ldr	r3, [pc, #132]	; (4018a0 <pid_tick+0xc8>)
  40181c:	6018      	str	r0, [r3, #0]

    // if (-3.0f < error < 3.0f) {
    //     pid_i = pid_i +(ki*error);
    // }

    pid_i = pid_i +(ki*error);
  40181e:	4b21      	ldr	r3, [pc, #132]	; (4018a4 <pid_tick+0xcc>)
  401820:	6819      	ldr	r1, [r3, #0]
  401822:	4628      	mov	r0, r5
  401824:	f006 f892 	bl	40794c <__aeabi_fmul>
  401828:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4018b8 <pid_tick+0xe0>
  40182c:	f8d9 1000 	ldr.w	r1, [r9]
  401830:	f005 ff84 	bl	40773c <__addsf3>
  401834:	4607      	mov	r7, r0
  401836:	f8c9 0000 	str.w	r0, [r9]

    pid_d = kd * ((error-previous_error)/elapsed_time);
  40183a:	4641      	mov	r1, r8
  40183c:	4628      	mov	r0, r5
  40183e:	f005 ff7b 	bl	407738 <__aeabi_fsub>
  401842:	4680      	mov	r8, r0
  401844:	4620      	mov	r0, r4
  401846:	f006 f829 	bl	40789c <__aeabi_ui2f>
  40184a:	4601      	mov	r1, r0
  40184c:	4640      	mov	r0, r8
  40184e:	f006 f931 	bl	407ab4 <__aeabi_fdiv>
  401852:	4b15      	ldr	r3, [pc, #84]	; (4018a8 <pid_tick+0xd0>)
  401854:	6819      	ldr	r1, [r3, #0]
  401856:	f006 f879 	bl	40794c <__aeabi_fmul>
  40185a:	4604      	mov	r4, r0
  40185c:	4b13      	ldr	r3, [pc, #76]	; (4018ac <pid_tick+0xd4>)
  40185e:	6018      	str	r0, [r3, #0]

    pid = pid_p + pid_i + pid_d;
  401860:	4639      	mov	r1, r7
  401862:	4630      	mov	r0, r6
  401864:	f005 ff6a 	bl	40773c <__addsf3>
  401868:	4621      	mov	r1, r4
  40186a:	f005 ff67 	bl	40773c <__addsf3>
  40186e:	4b10      	ldr	r3, [pc, #64]	; (4018b0 <pid_tick+0xd8>)
  401870:	6018      	str	r0, [r3, #0]

    previous_error = error;
  401872:	4b10      	ldr	r3, [pc, #64]	; (4018b4 <pid_tick+0xdc>)
  401874:	601d      	str	r5, [r3, #0]

    return pid;
  401876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40187a:	bf00      	nop
  40187c:	20000468 	.word	0x20000468
  401880:	20000208 	.word	0x20000208
  401884:	2000046c 	.word	0x2000046c
  401888:	10624dd3 	.word	0x10624dd3
  40188c:	20000470 	.word	0x20000470
  401890:	20000830 	.word	0x20000830
  401894:	20000800 	.word	0x20000800
  401898:	20000458 	.word	0x20000458
  40189c:	2000000c 	.word	0x2000000c
  4018a0:	20000474 	.word	0x20000474
  4018a4:	20000464 	.word	0x20000464
  4018a8:	20000460 	.word	0x20000460
  4018ac:	2000045c 	.word	0x2000045c
  4018b0:	2000044c 	.word	0x2000044c
  4018b4:	20000450 	.word	0x20000450
  4018b8:	20000454 	.word	0x20000454

004018bc <ap_init>:
ap_manager_t AP;


void ap_init(void)
{
    AP.state = AP_INITIALIZING;
  4018bc:	4b03      	ldr	r3, [pc, #12]	; (4018cc <ap_init+0x10>)
  4018be:	2200      	movs	r2, #0
  4018c0:	701a      	strb	r2, [r3, #0]
    AP.desired_angle_x = 0.0f;
  4018c2:	2100      	movs	r1, #0
  4018c4:	6059      	str	r1, [r3, #4]
    AP.desired_angle_y = 0.0f;
  4018c6:	6099      	str	r1, [r3, #8]
    AP.motor_power = 0;
  4018c8:	60da      	str	r2, [r3, #12]
  4018ca:	4770      	bx	lr
  4018cc:	20000830 	.word	0x20000830

004018d0 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4018d0:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4018d2:	482c      	ldr	r0, [pc, #176]	; (401984 <board_init+0xb4>)
  4018d4:	f000 fc02 	bl	4020dc <wdt_disable>
  4018d8:	200b      	movs	r0, #11
  4018da:	f000 fbd5 	bl	402088 <pmc_enable_periph_clk>
  4018de:	200c      	movs	r0, #12
  4018e0:	f000 fbd2 	bl	402088 <pmc_enable_periph_clk>
  4018e4:	200d      	movs	r0, #13
  4018e6:	f000 fbcf 	bl	402088 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4018ea:	4b27      	ldr	r3, [pc, #156]	; (401988 <board_init+0xb8>)
  4018ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4018f0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4018f2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4018f8:	4c24      	ldr	r4, [pc, #144]	; (40198c <board_init+0xbc>)
  4018fa:	2504      	movs	r5, #4
  4018fc:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4018fe:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401902:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401904:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401908:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40190a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40190c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401910:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401912:	f022 0204 	bic.w	r2, r2, #4
  401916:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401918:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40191a:	f022 0204 	bic.w	r2, r2, #4
  40191e:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401924:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401926:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401928:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40192c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401930:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401932:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401934:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401938:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40193c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40193e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401940:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401944:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401948:	210c      	movs	r1, #12
  40194a:	4811      	ldr	r0, [pc, #68]	; (401990 <board_init+0xc0>)
  40194c:	f000 fa76 	bl	401e3c <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401950:	4e10      	ldr	r6, [pc, #64]	; (401994 <board_init+0xc4>)
  401952:	4631      	mov	r1, r6
  401954:	2003      	movs	r0, #3
  401956:	f000 f9e5 	bl	401d24 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40195a:	4631      	mov	r1, r6
  40195c:	4628      	mov	r0, r5
  40195e:	f000 f9e1 	bl	401d24 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401962:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401964:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401968:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40196a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40196c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401970:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401972:	f023 0304 	bic.w	r3, r3, #4
  401976:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401978:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40197a:	f023 0304 	bic.w	r3, r3, #4
  40197e:	6763      	str	r3, [r4, #116]	; 0x74
  401980:	bd70      	pop	{r4, r5, r6, pc}
  401982:	bf00      	nop
  401984:	400e1450 	.word	0x400e1450
  401988:	400e1200 	.word	0x400e1200
  40198c:	400e0e00 	.word	0x400e0e00
  401990:	400e1000 	.word	0x400e1000
  401994:	08000001 	.word	0x08000001

00401998 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401998:	4b2b      	ldr	r3, [pc, #172]	; (401a48 <twi_set_speed+0xb0>)
  40199a:	4299      	cmp	r1, r3
  40199c:	d849      	bhi.n	401a32 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  40199e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4019a2:	4299      	cmp	r1, r3
  4019a4:	d92b      	bls.n	4019fe <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4019a6:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019a8:	4c28      	ldr	r4, [pc, #160]	; (401a4c <twi_set_speed+0xb4>)
  4019aa:	fba4 3402 	umull	r3, r4, r4, r2
  4019ae:	0ba4      	lsrs	r4, r4, #14
  4019b0:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019b2:	4b27      	ldr	r3, [pc, #156]	; (401a50 <twi_set_speed+0xb8>)
  4019b4:	440b      	add	r3, r1
  4019b6:	009b      	lsls	r3, r3, #2
  4019b8:	fbb2 f2f3 	udiv	r2, r2, r3
  4019bc:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019be:	2cff      	cmp	r4, #255	; 0xff
  4019c0:	d939      	bls.n	401a36 <twi_set_speed+0x9e>
  4019c2:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4019c4:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4019c6:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019c8:	2cff      	cmp	r4, #255	; 0xff
  4019ca:	d902      	bls.n	4019d2 <twi_set_speed+0x3a>
  4019cc:	2b07      	cmp	r3, #7
  4019ce:	d1f9      	bne.n	4019c4 <twi_set_speed+0x2c>
  4019d0:	e00a      	b.n	4019e8 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019d2:	2aff      	cmp	r2, #255	; 0xff
  4019d4:	d908      	bls.n	4019e8 <twi_set_speed+0x50>
  4019d6:	2b06      	cmp	r3, #6
  4019d8:	d900      	bls.n	4019dc <twi_set_speed+0x44>
  4019da:	e005      	b.n	4019e8 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  4019dc:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4019de:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4019e0:	2aff      	cmp	r2, #255	; 0xff
  4019e2:	d901      	bls.n	4019e8 <twi_set_speed+0x50>
  4019e4:	2b06      	cmp	r3, #6
  4019e6:	d9f9      	bls.n	4019dc <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4019e8:	0212      	lsls	r2, r2, #8
  4019ea:	b292      	uxth	r2, r2
  4019ec:	041b      	lsls	r3, r3, #16
  4019ee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4019f2:	431a      	orrs	r2, r3
  4019f4:	b2e4      	uxtb	r4, r4
  4019f6:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4019f8:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4019fa:	2000      	movs	r0, #0
  4019fc:	e021      	b.n	401a42 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4019fe:	0049      	lsls	r1, r1, #1
  401a00:	fbb2 f2f1 	udiv	r2, r2, r1
  401a04:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a06:	2aff      	cmp	r2, #255	; 0xff
  401a08:	d907      	bls.n	401a1a <twi_set_speed+0x82>
  401a0a:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401a0c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401a0e:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a10:	2aff      	cmp	r2, #255	; 0xff
  401a12:	d903      	bls.n	401a1c <twi_set_speed+0x84>
  401a14:	2b07      	cmp	r3, #7
  401a16:	d1f9      	bne.n	401a0c <twi_set_speed+0x74>
  401a18:	e000      	b.n	401a1c <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a1a:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401a1c:	0211      	lsls	r1, r2, #8
  401a1e:	b289      	uxth	r1, r1
  401a20:	041b      	lsls	r3, r3, #16
  401a22:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401a26:	430b      	orrs	r3, r1
  401a28:	b2d2      	uxtb	r2, r2
  401a2a:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401a2c:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401a2e:	2000      	movs	r0, #0
}
  401a30:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401a32:	2001      	movs	r0, #1
  401a34:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a36:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a38:	bf88      	it	hi
  401a3a:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401a3c:	d8ce      	bhi.n	4019dc <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401a3e:	2300      	movs	r3, #0
  401a40:	e7d2      	b.n	4019e8 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  401a42:	bc10      	pop	{r4}
  401a44:	4770      	bx	lr
  401a46:	bf00      	nop
  401a48:	00061a80 	.word	0x00061a80
  401a4c:	057619f1 	.word	0x057619f1
  401a50:	3ffd1200 	.word	0x3ffd1200

00401a54 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401a54:	b538      	push	{r3, r4, r5, lr}
  401a56:	4604      	mov	r4, r0
  401a58:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  401a5e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  401a60:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401a62:	2380      	movs	r3, #128	; 0x80
  401a64:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  401a66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  401a68:	2308      	movs	r3, #8
  401a6a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401a6c:	2320      	movs	r3, #32
  401a6e:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401a70:	2304      	movs	r3, #4
  401a72:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401a74:	680a      	ldr	r2, [r1, #0]
  401a76:	6849      	ldr	r1, [r1, #4]
  401a78:	f7ff ff8e 	bl	401998 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401a7c:	2801      	cmp	r0, #1
  401a7e:	bf14      	ite	ne
  401a80:	2000      	movne	r0, #0
  401a82:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  401a84:	7a6b      	ldrb	r3, [r5, #9]
  401a86:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401a88:	bf04      	itt	eq
  401a8a:	2340      	moveq	r3, #64	; 0x40
  401a8c:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401a8e:	bd38      	pop	{r3, r4, r5, pc}

00401a90 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401a90:	460a      	mov	r2, r1
  401a92:	b159      	cbz	r1, 401aac <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  401a94:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  401a96:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  401a98:	bfc4      	itt	gt
  401a9a:	7841      	ldrbgt	r1, [r0, #1]
  401a9c:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401aa0:	2a02      	cmp	r2, #2
  401aa2:	dd05      	ble.n	401ab0 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  401aa4:	7880      	ldrb	r0, [r0, #2]
  401aa6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401aaa:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401aac:	2000      	movs	r0, #0
  401aae:	4770      	bx	lr
  401ab0:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  401ab2:	4770      	bx	lr

00401ab4 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401ab8:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401aba:	2c00      	cmp	r4, #0
  401abc:	d045      	beq.n	401b4a <twi_master_read+0x96>
  401abe:	460b      	mov	r3, r1
  401ac0:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401ac2:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401ac4:	2000      	movs	r0, #0
  401ac6:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401ac8:	684a      	ldr	r2, [r1, #4]
  401aca:	0212      	lsls	r2, r2, #8
  401acc:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401ad0:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  401ad4:	7c1a      	ldrb	r2, [r3, #16]
  401ad6:	0412      	lsls	r2, r2, #16
  401ad8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401adc:	430a      	orrs	r2, r1
  401ade:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401ae0:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401ae2:	6859      	ldr	r1, [r3, #4]
  401ae4:	4618      	mov	r0, r3
  401ae6:	f7ff ffd3 	bl	401a90 <twi_mk_addr>
  401aea:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401aec:	2c01      	cmp	r4, #1
  401aee:	d104      	bne.n	401afa <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401af0:	2303      	movs	r3, #3
  401af2:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401af4:	f04f 0e01 	mov.w	lr, #1
  401af8:	e033      	b.n	401b62 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401afa:	2301      	movs	r3, #1
  401afc:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  401afe:	f04f 0e00 	mov.w	lr, #0
  401b02:	e02e      	b.n	401b62 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b04:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b06:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401b08:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b0c:	d120      	bne.n	401b50 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  401b0e:	1e51      	subs	r1, r2, #1
  401b10:	b30a      	cbz	r2, 401b56 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401b12:	2c01      	cmp	r4, #1
  401b14:	d106      	bne.n	401b24 <twi_master_read+0x70>
  401b16:	f1be 0f00 	cmp.w	lr, #0
  401b1a:	d12f      	bne.n	401b7c <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  401b1c:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401b20:	46e6      	mov	lr, ip
  401b22:	e02b      	b.n	401b7c <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b24:	f013 0f02 	tst.w	r3, #2
  401b28:	d005      	beq.n	401b36 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401b2c:	7033      	strb	r3, [r6, #0]

		cnt--;
  401b2e:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401b30:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401b32:	463a      	mov	r2, r7
  401b34:	e000      	b.n	401b38 <twi_master_read+0x84>
  401b36:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401b38:	2c00      	cmp	r4, #0
  401b3a:	d1e4      	bne.n	401b06 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401b3c:	6a2b      	ldr	r3, [r5, #32]
  401b3e:	f013 0f01 	tst.w	r3, #1
  401b42:	d0fb      	beq.n	401b3c <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  401b44:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  401b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401b4a:	2001      	movs	r0, #1
  401b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b50:	2005      	movs	r0, #5
  401b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401b56:	2009      	movs	r0, #9
  401b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401b5c:	2005      	movs	r0, #5
  401b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401b62:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401b64:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401b68:	d1f8      	bne.n	401b5c <twi_master_read+0xa8>
  401b6a:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401b6e:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401b72:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  401b76:	f04f 0c01 	mov.w	ip, #1
  401b7a:	e7ca      	b.n	401b12 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401b7c:	f013 0f02 	tst.w	r3, #2
  401b80:	d0c0      	beq.n	401b04 <twi_master_read+0x50>
  401b82:	e7d2      	b.n	401b2a <twi_master_read+0x76>

00401b84 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401b84:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401b86:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  401b88:	2d00      	cmp	r5, #0
  401b8a:	d034      	beq.n	401bf6 <twi_master_write+0x72>
  401b8c:	460b      	mov	r3, r1
  401b8e:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401b90:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401b92:	2000      	movs	r0, #0
  401b94:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401b96:	7c0a      	ldrb	r2, [r1, #16]
  401b98:	0412      	lsls	r2, r2, #16
  401b9a:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401b9e:	685a      	ldr	r2, [r3, #4]
  401ba0:	0212      	lsls	r2, r2, #8
  401ba2:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401ba6:	430a      	orrs	r2, r1
  401ba8:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401baa:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401bac:	6859      	ldr	r1, [r3, #4]
  401bae:	4618      	mov	r0, r3
  401bb0:	f7ff ff6e 	bl	401a90 <twi_mk_addr>
  401bb4:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401bb6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bb8:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bbc:	d004      	beq.n	401bc8 <twi_master_write+0x44>
  401bbe:	e01c      	b.n	401bfa <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401bc0:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bc2:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bc6:	d11a      	bne.n	401bfe <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401bc8:	f013 0f04 	tst.w	r3, #4
  401bcc:	d003      	beq.n	401bd6 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401bce:	7833      	ldrb	r3, [r6, #0]
  401bd0:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  401bd2:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401bd4:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401bd6:	2d00      	cmp	r5, #0
  401bd8:	d1f2      	bne.n	401bc0 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401bda:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bdc:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401be0:	d10f      	bne.n	401c02 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401be2:	f013 0f04 	tst.w	r3, #4
  401be6:	d0f8      	beq.n	401bda <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401be8:	2302      	movs	r3, #2
  401bea:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401bec:	6a23      	ldr	r3, [r4, #32]
  401bee:	f013 0f01 	tst.w	r3, #1
  401bf2:	d0fb      	beq.n	401bec <twi_master_write+0x68>
  401bf4:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401bf6:	2001      	movs	r0, #1
  401bf8:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401bfa:	2005      	movs	r0, #5
  401bfc:	bd70      	pop	{r4, r5, r6, pc}
  401bfe:	2005      	movs	r0, #5
  401c00:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401c02:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401c04:	bd70      	pop	{r4, r5, r6, pc}
  401c06:	bf00      	nop

00401c08 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  401c08:	b500      	push	{lr}
  401c0a:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  401c0c:	2300      	movs	r3, #0
  401c0e:	aa06      	add	r2, sp, #24
  401c10:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  401c14:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  401c16:	2201      	movs	r2, #1
  401c18:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  401c1a:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  401c1e:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  401c22:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  401c24:	a901      	add	r1, sp, #4
  401c26:	f7ff ffad 	bl	401b84 <twi_master_write>
}
  401c2a:	b007      	add	sp, #28
  401c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00401c30 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401c30:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c32:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401c36:	d02f      	beq.n	401c98 <pio_set_peripheral+0x68>
  401c38:	d807      	bhi.n	401c4a <pio_set_peripheral+0x1a>
  401c3a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401c3e:	d014      	beq.n	401c6a <pio_set_peripheral+0x3a>
  401c40:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401c44:	d01e      	beq.n	401c84 <pio_set_peripheral+0x54>
  401c46:	b939      	cbnz	r1, 401c58 <pio_set_peripheral+0x28>
  401c48:	4770      	bx	lr
  401c4a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401c4e:	d036      	beq.n	401cbe <pio_set_peripheral+0x8e>
  401c50:	d804      	bhi.n	401c5c <pio_set_peripheral+0x2c>
  401c52:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401c56:	d029      	beq.n	401cac <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401c58:	6042      	str	r2, [r0, #4]
  401c5a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401c5c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401c60:	d02d      	beq.n	401cbe <pio_set_peripheral+0x8e>
  401c62:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401c66:	d02a      	beq.n	401cbe <pio_set_peripheral+0x8e>
  401c68:	e7f6      	b.n	401c58 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401c6a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c6c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c6e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401c70:	43d3      	mvns	r3, r2
  401c72:	4021      	ands	r1, r4
  401c74:	4019      	ands	r1, r3
  401c76:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c78:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c7a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401c7c:	4021      	ands	r1, r4
  401c7e:	400b      	ands	r3, r1
  401c80:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c82:	e01a      	b.n	401cba <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c84:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c86:	4313      	orrs	r3, r2
  401c88:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c8a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c8c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401c8e:	400b      	ands	r3, r1
  401c90:	ea23 0302 	bic.w	r3, r3, r2
  401c94:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401c96:	e7df      	b.n	401c58 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c98:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c9a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401c9c:	400b      	ands	r3, r1
  401c9e:	ea23 0302 	bic.w	r3, r3, r2
  401ca2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401ca4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ca6:	4313      	orrs	r3, r2
  401ca8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401caa:	e7d5      	b.n	401c58 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401cac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401cae:	4313      	orrs	r3, r2
  401cb0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401cb2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401cb4:	4313      	orrs	r3, r2
  401cb6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401cb8:	e7ce      	b.n	401c58 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401cba:	6042      	str	r2, [r0, #4]
}
  401cbc:	bc10      	pop	{r4}
  401cbe:	4770      	bx	lr

00401cc0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401cc0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cc2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401cc6:	bf14      	ite	ne
  401cc8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401cca:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ccc:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401cd0:	bf14      	ite	ne
  401cd2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401cd4:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401cd6:	f012 0f02 	tst.w	r2, #2
  401cda:	d002      	beq.n	401ce2 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401cdc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401ce0:	e004      	b.n	401cec <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401ce2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401ce6:	bf18      	it	ne
  401ce8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401cec:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401cee:	6001      	str	r1, [r0, #0]
  401cf0:	4770      	bx	lr
  401cf2:	bf00      	nop

00401cf4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401cf4:	b410      	push	{r4}
  401cf6:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401cf8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cfa:	b10c      	cbz	r4, 401d00 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401cfc:	6641      	str	r1, [r0, #100]	; 0x64
  401cfe:	e000      	b.n	401d02 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d00:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401d02:	b10b      	cbz	r3, 401d08 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401d04:	6501      	str	r1, [r0, #80]	; 0x50
  401d06:	e000      	b.n	401d0a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401d08:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401d0a:	b10a      	cbz	r2, 401d10 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401d0c:	6301      	str	r1, [r0, #48]	; 0x30
  401d0e:	e000      	b.n	401d12 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401d10:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401d12:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401d14:	6001      	str	r1, [r0, #0]
}
  401d16:	bc10      	pop	{r4}
  401d18:	4770      	bx	lr
  401d1a:	bf00      	nop

00401d1c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401d1c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401d1e:	4770      	bx	lr

00401d20 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401d20:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401d22:	4770      	bx	lr

00401d24 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401d24:	b570      	push	{r4, r5, r6, lr}
  401d26:	b082      	sub	sp, #8
  401d28:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401d2a:	0943      	lsrs	r3, r0, #5
  401d2c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401d30:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401d34:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401d36:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d3e:	d047      	beq.n	401dd0 <pio_configure_pin+0xac>
  401d40:	d809      	bhi.n	401d56 <pio_configure_pin+0x32>
  401d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d46:	d021      	beq.n	401d8c <pio_configure_pin+0x68>
  401d48:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d4c:	d02f      	beq.n	401dae <pio_configure_pin+0x8a>
  401d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d52:	d16f      	bne.n	401e34 <pio_configure_pin+0x110>
  401d54:	e009      	b.n	401d6a <pio_configure_pin+0x46>
  401d56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d5a:	d055      	beq.n	401e08 <pio_configure_pin+0xe4>
  401d5c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401d60:	d052      	beq.n	401e08 <pio_configure_pin+0xe4>
  401d62:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d66:	d044      	beq.n	401df2 <pio_configure_pin+0xce>
  401d68:	e064      	b.n	401e34 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401d6a:	f000 001f 	and.w	r0, r0, #31
  401d6e:	2601      	movs	r6, #1
  401d70:	4086      	lsls	r6, r0
  401d72:	4632      	mov	r2, r6
  401d74:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d78:	4620      	mov	r0, r4
  401d7a:	f7ff ff59 	bl	401c30 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401d7e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401d82:	bf14      	ite	ne
  401d84:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401d86:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401d88:	2001      	movs	r0, #1
  401d8a:	e054      	b.n	401e36 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401d8c:	f000 001f 	and.w	r0, r0, #31
  401d90:	2601      	movs	r6, #1
  401d92:	4086      	lsls	r6, r0
  401d94:	4632      	mov	r2, r6
  401d96:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401d9a:	4620      	mov	r0, r4
  401d9c:	f7ff ff48 	bl	401c30 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401da0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401da4:	bf14      	ite	ne
  401da6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401da8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401daa:	2001      	movs	r0, #1
  401dac:	e043      	b.n	401e36 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401dae:	f000 001f 	and.w	r0, r0, #31
  401db2:	2601      	movs	r6, #1
  401db4:	4086      	lsls	r6, r0
  401db6:	4632      	mov	r2, r6
  401db8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401dbc:	4620      	mov	r0, r4
  401dbe:	f7ff ff37 	bl	401c30 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401dc2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401dc6:	bf14      	ite	ne
  401dc8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dca:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401dcc:	2001      	movs	r0, #1
  401dce:	e032      	b.n	401e36 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401dd0:	f000 001f 	and.w	r0, r0, #31
  401dd4:	2601      	movs	r6, #1
  401dd6:	4086      	lsls	r6, r0
  401dd8:	4632      	mov	r2, r6
  401dda:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401dde:	4620      	mov	r0, r4
  401de0:	f7ff ff26 	bl	401c30 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401de4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401de8:	bf14      	ite	ne
  401dea:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401dec:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401dee:	2001      	movs	r0, #1
  401df0:	e021      	b.n	401e36 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401df2:	f000 011f 	and.w	r1, r0, #31
  401df6:	2601      	movs	r6, #1
  401df8:	462a      	mov	r2, r5
  401dfa:	fa06 f101 	lsl.w	r1, r6, r1
  401dfe:	4620      	mov	r0, r4
  401e00:	f7ff ff5e 	bl	401cc0 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401e04:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401e06:	e016      	b.n	401e36 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401e08:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  401e0c:	f000 011f 	and.w	r1, r0, #31
  401e10:	2601      	movs	r6, #1
  401e12:	ea05 0306 	and.w	r3, r5, r6
  401e16:	9300      	str	r3, [sp, #0]
  401e18:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401e1c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401e20:	bf14      	ite	ne
  401e22:	2200      	movne	r2, #0
  401e24:	2201      	moveq	r2, #1
  401e26:	fa06 f101 	lsl.w	r1, r6, r1
  401e2a:	4620      	mov	r0, r4
  401e2c:	f7ff ff62 	bl	401cf4 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401e30:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401e32:	e000      	b.n	401e36 <pio_configure_pin+0x112>

	default:
		return 0;
  401e34:	2000      	movs	r0, #0
	}

	return 1;
}
  401e36:	b002      	add	sp, #8
  401e38:	bd70      	pop	{r4, r5, r6, pc}
  401e3a:	bf00      	nop

00401e3c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401e3c:	b570      	push	{r4, r5, r6, lr}
  401e3e:	b082      	sub	sp, #8
  401e40:	4605      	mov	r5, r0
  401e42:	460e      	mov	r6, r1
  401e44:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401e46:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401e4e:	d038      	beq.n	401ec2 <pio_configure_pin_group+0x86>
  401e50:	d809      	bhi.n	401e66 <pio_configure_pin_group+0x2a>
  401e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401e56:	d01c      	beq.n	401e92 <pio_configure_pin_group+0x56>
  401e58:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401e5c:	d025      	beq.n	401eaa <pio_configure_pin_group+0x6e>
  401e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401e62:	d150      	bne.n	401f06 <pio_configure_pin_group+0xca>
  401e64:	e009      	b.n	401e7a <pio_configure_pin_group+0x3e>
  401e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401e6a:	d03a      	beq.n	401ee2 <pio_configure_pin_group+0xa6>
  401e6c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e70:	d037      	beq.n	401ee2 <pio_configure_pin_group+0xa6>
  401e72:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401e76:	d030      	beq.n	401eda <pio_configure_pin_group+0x9e>
  401e78:	e045      	b.n	401f06 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401e7a:	460a      	mov	r2, r1
  401e7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401e80:	f7ff fed6 	bl	401c30 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e84:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401e88:	bf14      	ite	ne
  401e8a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401e8c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401e8e:	2001      	movs	r0, #1
  401e90:	e03a      	b.n	401f08 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401e92:	460a      	mov	r2, r1
  401e94:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401e98:	f7ff feca 	bl	401c30 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401e9c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ea0:	bf14      	ite	ne
  401ea2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ea4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ea6:	2001      	movs	r0, #1
  401ea8:	e02e      	b.n	401f08 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401eaa:	460a      	mov	r2, r1
  401eac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401eb0:	f7ff febe 	bl	401c30 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401eb4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401eb8:	bf14      	ite	ne
  401eba:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ebc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ebe:	2001      	movs	r0, #1
  401ec0:	e022      	b.n	401f08 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401ec2:	460a      	mov	r2, r1
  401ec4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401ec8:	f7ff feb2 	bl	401c30 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ecc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401ed0:	bf14      	ite	ne
  401ed2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ed4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ed6:	2001      	movs	r0, #1
  401ed8:	e016      	b.n	401f08 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401eda:	f7ff fef1 	bl	401cc0 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401ede:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401ee0:	e012      	b.n	401f08 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401ee2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401ee6:	f004 0301 	and.w	r3, r4, #1
  401eea:	9300      	str	r3, [sp, #0]
  401eec:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401ef0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401ef4:	bf14      	ite	ne
  401ef6:	2200      	movne	r2, #0
  401ef8:	2201      	moveq	r2, #1
  401efa:	4631      	mov	r1, r6
  401efc:	4628      	mov	r0, r5
  401efe:	f7ff fef9 	bl	401cf4 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401f02:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401f04:	e000      	b.n	401f08 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401f06:	2000      	movs	r0, #0
	}

	return 1;
}
  401f08:	b002      	add	sp, #8
  401f0a:	bd70      	pop	{r4, r5, r6, pc}

00401f0c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f10:	4681      	mov	r9, r0
  401f12:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f14:	f7ff ff02 	bl	401d1c <pio_get_interrupt_status>
  401f18:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401f1a:	4648      	mov	r0, r9
  401f1c:	f7ff ff00 	bl	401d20 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401f20:	4005      	ands	r5, r0
  401f22:	d013      	beq.n	401f4c <pio_handler_process+0x40>
  401f24:	4c0e      	ldr	r4, [pc, #56]	; (401f60 <pio_handler_process+0x54>)
  401f26:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401f2a:	6823      	ldr	r3, [r4, #0]
  401f2c:	4543      	cmp	r3, r8
  401f2e:	d108      	bne.n	401f42 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f30:	6861      	ldr	r1, [r4, #4]
  401f32:	4229      	tst	r1, r5
  401f34:	d005      	beq.n	401f42 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f36:	68e3      	ldr	r3, [r4, #12]
  401f38:	4640      	mov	r0, r8
  401f3a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401f3c:	6863      	ldr	r3, [r4, #4]
  401f3e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401f42:	42b4      	cmp	r4, r6
  401f44:	d002      	beq.n	401f4c <pio_handler_process+0x40>
  401f46:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401f48:	2d00      	cmp	r5, #0
  401f4a:	d1ee      	bne.n	401f2a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401f4c:	4b05      	ldr	r3, [pc, #20]	; (401f64 <pio_handler_process+0x58>)
  401f4e:	681b      	ldr	r3, [r3, #0]
  401f50:	b123      	cbz	r3, 401f5c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401f52:	4b05      	ldr	r3, [pc, #20]	; (401f68 <pio_handler_process+0x5c>)
  401f54:	681b      	ldr	r3, [r3, #0]
  401f56:	b10b      	cbz	r3, 401f5c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401f58:	4648      	mov	r0, r9
  401f5a:	4798      	blx	r3
  401f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f60:	2000047c 	.word	0x2000047c
  401f64:	20000840 	.word	0x20000840
  401f68:	20000478 	.word	0x20000478

00401f6c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401f6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401f6e:	210b      	movs	r1, #11
  401f70:	4801      	ldr	r0, [pc, #4]	; (401f78 <PIOA_Handler+0xc>)
  401f72:	f7ff ffcb 	bl	401f0c <pio_handler_process>
  401f76:	bd08      	pop	{r3, pc}
  401f78:	400e0e00 	.word	0x400e0e00

00401f7c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401f7c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401f7e:	210c      	movs	r1, #12
  401f80:	4801      	ldr	r0, [pc, #4]	; (401f88 <PIOB_Handler+0xc>)
  401f82:	f7ff ffc3 	bl	401f0c <pio_handler_process>
  401f86:	bd08      	pop	{r3, pc}
  401f88:	400e1000 	.word	0x400e1000

00401f8c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401f8c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401f8e:	210d      	movs	r1, #13
  401f90:	4801      	ldr	r0, [pc, #4]	; (401f98 <PIOC_Handler+0xc>)
  401f92:	f7ff ffbb 	bl	401f0c <pio_handler_process>
  401f96:	bd08      	pop	{r3, pc}
  401f98:	400e1200 	.word	0x400e1200

00401f9c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401f9c:	4a18      	ldr	r2, [pc, #96]	; (402000 <pmc_switch_mck_to_pllack+0x64>)
  401f9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401fa4:	4318      	orrs	r0, r3
  401fa6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fa8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401faa:	f013 0f08 	tst.w	r3, #8
  401fae:	d003      	beq.n	401fb8 <pmc_switch_mck_to_pllack+0x1c>
  401fb0:	e009      	b.n	401fc6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401fb2:	3b01      	subs	r3, #1
  401fb4:	d103      	bne.n	401fbe <pmc_switch_mck_to_pllack+0x22>
  401fb6:	e01e      	b.n	401ff6 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401fbc:	4910      	ldr	r1, [pc, #64]	; (402000 <pmc_switch_mck_to_pllack+0x64>)
  401fbe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401fc0:	f012 0f08 	tst.w	r2, #8
  401fc4:	d0f5      	beq.n	401fb2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401fc6:	4a0e      	ldr	r2, [pc, #56]	; (402000 <pmc_switch_mck_to_pllack+0x64>)
  401fc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fca:	f023 0303 	bic.w	r3, r3, #3
  401fce:	f043 0302 	orr.w	r3, r3, #2
  401fd2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fd4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401fd6:	f010 0008 	ands.w	r0, r0, #8
  401fda:	d004      	beq.n	401fe6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401fdc:	2000      	movs	r0, #0
  401fde:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401fe0:	3b01      	subs	r3, #1
  401fe2:	d103      	bne.n	401fec <pmc_switch_mck_to_pllack+0x50>
  401fe4:	e009      	b.n	401ffa <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401fea:	4905      	ldr	r1, [pc, #20]	; (402000 <pmc_switch_mck_to_pllack+0x64>)
  401fec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401fee:	f012 0f08 	tst.w	r2, #8
  401ff2:	d0f5      	beq.n	401fe0 <pmc_switch_mck_to_pllack+0x44>
  401ff4:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401ff6:	2001      	movs	r0, #1
  401ff8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401ffa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401ffc:	4770      	bx	lr
  401ffe:	bf00      	nop
  402000:	400e0400 	.word	0x400e0400

00402004 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402004:	b138      	cbz	r0, 402016 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402006:	4911      	ldr	r1, [pc, #68]	; (40204c <pmc_switch_mainck_to_xtal+0x48>)
  402008:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40200a:	4a11      	ldr	r2, [pc, #68]	; (402050 <pmc_switch_mainck_to_xtal+0x4c>)
  40200c:	401a      	ands	r2, r3
  40200e:	4b11      	ldr	r3, [pc, #68]	; (402054 <pmc_switch_mainck_to_xtal+0x50>)
  402010:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402012:	620b      	str	r3, [r1, #32]
  402014:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402016:	480d      	ldr	r0, [pc, #52]	; (40204c <pmc_switch_mainck_to_xtal+0x48>)
  402018:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40201a:	0209      	lsls	r1, r1, #8
  40201c:	b289      	uxth	r1, r1
  40201e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  402022:	f023 0303 	bic.w	r3, r3, #3
  402026:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40202a:	f043 0301 	orr.w	r3, r3, #1
  40202e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402030:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402032:	4602      	mov	r2, r0
  402034:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402036:	f013 0f01 	tst.w	r3, #1
  40203a:	d0fb      	beq.n	402034 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40203c:	4a03      	ldr	r2, [pc, #12]	; (40204c <pmc_switch_mainck_to_xtal+0x48>)
  40203e:	6a13      	ldr	r3, [r2, #32]
  402040:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402048:	6213      	str	r3, [r2, #32]
  40204a:	4770      	bx	lr
  40204c:	400e0400 	.word	0x400e0400
  402050:	fec8fffc 	.word	0xfec8fffc
  402054:	01370002 	.word	0x01370002

00402058 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402058:	4b02      	ldr	r3, [pc, #8]	; (402064 <pmc_osc_is_ready_mainck+0xc>)
  40205a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40205c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402060:	4770      	bx	lr
  402062:	bf00      	nop
  402064:	400e0400 	.word	0x400e0400

00402068 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402068:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40206c:	4b01      	ldr	r3, [pc, #4]	; (402074 <pmc_disable_pllack+0xc>)
  40206e:	629a      	str	r2, [r3, #40]	; 0x28
  402070:	4770      	bx	lr
  402072:	bf00      	nop
  402074:	400e0400 	.word	0x400e0400

00402078 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402078:	4b02      	ldr	r3, [pc, #8]	; (402084 <pmc_is_locked_pllack+0xc>)
  40207a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40207c:	f000 0002 	and.w	r0, r0, #2
  402080:	4770      	bx	lr
  402082:	bf00      	nop
  402084:	400e0400 	.word	0x400e0400

00402088 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402088:	2822      	cmp	r0, #34	; 0x22
  40208a:	d81e      	bhi.n	4020ca <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40208c:	281f      	cmp	r0, #31
  40208e:	d80c      	bhi.n	4020aa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402090:	4b11      	ldr	r3, [pc, #68]	; (4020d8 <pmc_enable_periph_clk+0x50>)
  402092:	699a      	ldr	r2, [r3, #24]
  402094:	2301      	movs	r3, #1
  402096:	4083      	lsls	r3, r0
  402098:	4393      	bics	r3, r2
  40209a:	d018      	beq.n	4020ce <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40209c:	2301      	movs	r3, #1
  40209e:	fa03 f000 	lsl.w	r0, r3, r0
  4020a2:	4b0d      	ldr	r3, [pc, #52]	; (4020d8 <pmc_enable_periph_clk+0x50>)
  4020a4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4020a6:	2000      	movs	r0, #0
  4020a8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4020aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4020ac:	4b0a      	ldr	r3, [pc, #40]	; (4020d8 <pmc_enable_periph_clk+0x50>)
  4020ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4020b2:	2301      	movs	r3, #1
  4020b4:	4083      	lsls	r3, r0
  4020b6:	4393      	bics	r3, r2
  4020b8:	d00b      	beq.n	4020d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4020ba:	2301      	movs	r3, #1
  4020bc:	fa03 f000 	lsl.w	r0, r3, r0
  4020c0:	4b05      	ldr	r3, [pc, #20]	; (4020d8 <pmc_enable_periph_clk+0x50>)
  4020c2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4020c6:	2000      	movs	r0, #0
  4020c8:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4020ca:	2001      	movs	r0, #1
  4020cc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4020ce:	2000      	movs	r0, #0
  4020d0:	4770      	bx	lr
  4020d2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4020d4:	4770      	bx	lr
  4020d6:	bf00      	nop
  4020d8:	400e0400 	.word	0x400e0400

004020dc <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4020dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020e0:	6043      	str	r3, [r0, #4]
  4020e2:	4770      	bx	lr

004020e4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4020e4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4020e6:	23ac      	movs	r3, #172	; 0xac
  4020e8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4020ea:	680b      	ldr	r3, [r1, #0]
  4020ec:	684a      	ldr	r2, [r1, #4]
  4020ee:	fbb3 f3f2 	udiv	r3, r3, r2
  4020f2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4020f4:	1e5c      	subs	r4, r3, #1
  4020f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4020fa:	4294      	cmp	r4, r2
  4020fc:	d80a      	bhi.n	402114 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  4020fe:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402100:	688b      	ldr	r3, [r1, #8]
  402102:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402104:	f240 2302 	movw	r3, #514	; 0x202
  402108:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40210c:	2350      	movs	r3, #80	; 0x50
  40210e:	6003      	str	r3, [r0, #0]

	return 0;
  402110:	2000      	movs	r0, #0
  402112:	e000      	b.n	402116 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402114:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402116:	bc10      	pop	{r4}
  402118:	4770      	bx	lr
  40211a:	bf00      	nop

0040211c <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  40211c:	6940      	ldr	r0, [r0, #20]
}
  40211e:	f000 0001 	and.w	r0, r0, #1
  402122:	4770      	bx	lr

00402124 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402124:	6943      	ldr	r3, [r0, #20]
  402126:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40212a:	bf1a      	itte	ne
  40212c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40212e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402130:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402132:	4770      	bx	lr

00402134 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402134:	6943      	ldr	r3, [r0, #20]
  402136:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40213a:	bf1d      	ittte	ne
  40213c:	6983      	ldrne	r3, [r0, #24]
  40213e:	700b      	strbne	r3, [r1, #0]
	return 0;
  402140:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402142:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402144:	4770      	bx	lr
  402146:	bf00      	nop

00402148 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402148:	6943      	ldr	r3, [r0, #20]
  40214a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40214e:	bf1d      	ittte	ne
  402150:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  402154:	61c1      	strne	r1, [r0, #28]
	return 0;
  402156:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  402158:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40215a:	4770      	bx	lr

0040215c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40215c:	6943      	ldr	r3, [r0, #20]
  40215e:	f013 0f01 	tst.w	r3, #1
  402162:	d005      	beq.n	402170 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  402164:	6983      	ldr	r3, [r0, #24]
  402166:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40216a:	600b      	str	r3, [r1, #0]

	return 0;
  40216c:	2000      	movs	r0, #0
  40216e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  402170:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  402172:	4770      	bx	lr

00402174 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  402174:	b4f0      	push	{r4, r5, r6, r7}
  402176:	b08c      	sub	sp, #48	; 0x30
  402178:	4607      	mov	r7, r0
  40217a:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  40217c:	ac01      	add	r4, sp, #4
  40217e:	4d11      	ldr	r5, [pc, #68]	; (4021c4 <pwm_clocks_generate+0x50>)
  402180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402188:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  40218c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  402190:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  402192:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  402194:	f852 3b04 	ldr.w	r3, [r2], #4
  402198:	fbb6 f3f3 	udiv	r3, r6, r3
  40219c:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4021a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4021a4:	d905      	bls.n	4021b2 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  4021a6:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4021a8:	280b      	cmp	r0, #11
  4021aa:	d1f3      	bne.n	402194 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4021ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4021b0:	e005      	b.n	4021be <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4021b2:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  4021b4:	bf94      	ite	ls
  4021b6:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  4021ba:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  4021be:	b00c      	add	sp, #48	; 0x30
  4021c0:	bcf0      	pop	{r4, r5, r6, r7}
  4021c2:	4770      	bx	lr
  4021c4:	0040814c 	.word	0x0040814c

004021c8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4021c8:	b570      	push	{r4, r5, r6, lr}
  4021ca:	4606      	mov	r6, r0
  4021cc:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4021ce:	6808      	ldr	r0, [r1, #0]
  4021d0:	b140      	cbz	r0, 4021e4 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4021d2:	6889      	ldr	r1, [r1, #8]
  4021d4:	f7ff ffce 	bl	402174 <pwm_clocks_generate>
  4021d8:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  4021da:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4021de:	4298      	cmp	r0, r3
  4021e0:	d101      	bne.n	4021e6 <pwm_init+0x1e>
  4021e2:	e00e      	b.n	402202 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  4021e4:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  4021e6:	6860      	ldr	r0, [r4, #4]
  4021e8:	b140      	cbz	r0, 4021fc <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  4021ea:	68a1      	ldr	r1, [r4, #8]
  4021ec:	f7ff ffc2 	bl	402174 <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  4021f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4021f4:	4298      	cmp	r0, r3
  4021f6:	d007      	beq.n	402208 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  4021f8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  4021fc:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  4021fe:	2000      	movs	r0, #0
  402200:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  402202:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402206:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  402208:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  40220c:	bd70      	pop	{r4, r5, r6, pc}
  40220e:	bf00      	nop

00402210 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  402210:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  402212:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  402214:	684a      	ldr	r2, [r1, #4]
  402216:	f002 020f 	and.w	r2, r2, #15
  40221a:	8a8c      	ldrh	r4, [r1, #20]
  40221c:	4322      	orrs	r2, r4
  40221e:	890c      	ldrh	r4, [r1, #8]
  402220:	4322      	orrs	r2, r4
  402222:	7a8c      	ldrb	r4, [r1, #10]
  402224:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  402228:	7d8c      	ldrb	r4, [r1, #22]
  40222a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  40222e:	7dcc      	ldrb	r4, [r1, #23]
  402230:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  402234:	7e0c      	ldrb	r4, [r1, #24]
  402236:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  40223a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40223e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  402242:	68ca      	ldr	r2, [r1, #12]
  402244:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  402248:	690a      	ldr	r2, [r1, #16]
  40224a:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  40224e:	7d8a      	ldrb	r2, [r1, #22]
  402250:	b13a      	cbz	r2, 402262 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  402252:	8b8c      	ldrh	r4, [r1, #28]
  402254:	8b4a      	ldrh	r2, [r1, #26]
  402256:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40225a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  40225e:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  402262:	6c84      	ldr	r4, [r0, #72]	; 0x48
  402264:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  402268:	409a      	lsls	r2, r3
  40226a:	43d2      	mvns	r2, r2
  40226c:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  402270:	7fcc      	ldrb	r4, [r1, #31]
  402272:	fa04 f603 	lsl.w	r6, r4, r3
  402276:	7f8c      	ldrb	r4, [r1, #30]
  402278:	409c      	lsls	r4, r3
  40227a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  40227e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  402280:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  402282:	6c44      	ldr	r4, [r0, #68]	; 0x44
  402284:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  402286:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  40228a:	fa04 f503 	lsl.w	r5, r4, r3
  40228e:	f891 4020 	ldrb.w	r4, [r1, #32]
  402292:	409c      	lsls	r4, r3
  402294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402298:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  40229a:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40229c:	2201      	movs	r2, #1
  40229e:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  4022a0:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4022a4:	b11c      	cbz	r4, 4022ae <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  4022a6:	6a04      	ldr	r4, [r0, #32]
  4022a8:	4314      	orrs	r4, r2
  4022aa:	6204      	str	r4, [r0, #32]
  4022ac:	e003      	b.n	4022b6 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4022ae:	6a04      	ldr	r4, [r0, #32]
  4022b0:	ea24 0402 	bic.w	r4, r4, r2
  4022b4:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4022b6:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4022ba:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  4022bc:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4022be:	bf0c      	ite	eq
  4022c0:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4022c2:	4394      	bicne	r4, r2
  4022c4:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4022c6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4022ca:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  4022cc:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4022ce:	bf0c      	ite	eq
  4022d0:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  4022d4:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  4022d8:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4022da:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4022dc:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4022de:	22ff      	movs	r2, #255	; 0xff
  4022e0:	409a      	lsls	r2, r3
  4022e2:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4022e6:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  4022ea:	fa01 f303 	lsl.w	r3, r1, r3
  4022ee:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  4022f0:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  4022f2:	2000      	movs	r0, #0
  4022f4:	bc70      	pop	{r4, r5, r6}
  4022f6:	4770      	bx	lr

004022f8 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4022f8:	690b      	ldr	r3, [r1, #16]
  4022fa:	4293      	cmp	r3, r2
  4022fc:	d307      	bcc.n	40230e <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  4022fe:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  402300:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  402302:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  402306:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  40230a:	2000      	movs	r0, #0
  40230c:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  40230e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  402312:	4770      	bx	lr

00402314 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  402314:	2301      	movs	r3, #1
  402316:	fa03 f101 	lsl.w	r1, r3, r1
  40231a:	6041      	str	r1, [r0, #4]
  40231c:	4770      	bx	lr
  40231e:	bf00      	nop

00402320 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  402320:	2301      	movs	r3, #1
  402322:	fa03 f101 	lsl.w	r1, r3, r1
  402326:	6081      	str	r1, [r0, #8]
  402328:	4770      	bx	lr
  40232a:	bf00      	nop

0040232c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40232c:	e7fe      	b.n	40232c <Dummy_Handler>
  40232e:	bf00      	nop

00402330 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402330:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402332:	4b20      	ldr	r3, [pc, #128]	; (4023b4 <Reset_Handler+0x84>)
  402334:	4a20      	ldr	r2, [pc, #128]	; (4023b8 <Reset_Handler+0x88>)
  402336:	429a      	cmp	r2, r3
  402338:	d912      	bls.n	402360 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40233a:	4b20      	ldr	r3, [pc, #128]	; (4023bc <Reset_Handler+0x8c>)
  40233c:	4a1d      	ldr	r2, [pc, #116]	; (4023b4 <Reset_Handler+0x84>)
  40233e:	429a      	cmp	r2, r3
  402340:	d21e      	bcs.n	402380 <Reset_Handler+0x50>
  402342:	4611      	mov	r1, r2
  402344:	3b01      	subs	r3, #1
  402346:	1a9b      	subs	r3, r3, r2
  402348:	f023 0303 	bic.w	r3, r3, #3
  40234c:	3304      	adds	r3, #4
  40234e:	4a1a      	ldr	r2, [pc, #104]	; (4023b8 <Reset_Handler+0x88>)
  402350:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402352:	f852 0b04 	ldr.w	r0, [r2], #4
  402356:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40235a:	429a      	cmp	r2, r3
  40235c:	d1f9      	bne.n	402352 <Reset_Handler+0x22>
  40235e:	e00f      	b.n	402380 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402360:	4b14      	ldr	r3, [pc, #80]	; (4023b4 <Reset_Handler+0x84>)
  402362:	4a15      	ldr	r2, [pc, #84]	; (4023b8 <Reset_Handler+0x88>)
  402364:	429a      	cmp	r2, r3
  402366:	d20b      	bcs.n	402380 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402368:	4b14      	ldr	r3, [pc, #80]	; (4023bc <Reset_Handler+0x8c>)
  40236a:	4a12      	ldr	r2, [pc, #72]	; (4023b4 <Reset_Handler+0x84>)
  40236c:	1a9a      	subs	r2, r3, r2
  40236e:	4814      	ldr	r0, [pc, #80]	; (4023c0 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402370:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402372:	b12a      	cbz	r2, 402380 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  402374:	f851 2904 	ldr.w	r2, [r1], #-4
  402378:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40237c:	4281      	cmp	r1, r0
  40237e:	d1f9      	bne.n	402374 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402380:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402382:	4b10      	ldr	r3, [pc, #64]	; (4023c4 <Reset_Handler+0x94>)
  402384:	4a10      	ldr	r2, [pc, #64]	; (4023c8 <Reset_Handler+0x98>)
  402386:	429a      	cmp	r2, r3
  402388:	d20b      	bcs.n	4023a2 <Reset_Handler+0x72>
  40238a:	1d13      	adds	r3, r2, #4
  40238c:	4a0f      	ldr	r2, [pc, #60]	; (4023cc <Reset_Handler+0x9c>)
  40238e:	1ad2      	subs	r2, r2, r3
  402390:	f022 0203 	bic.w	r2, r2, #3
  402394:	441a      	add	r2, r3
  402396:	3b04      	subs	r3, #4
		*pDest++ = 0;
  402398:	2100      	movs	r1, #0
  40239a:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40239e:	429a      	cmp	r2, r3
  4023a0:	d1fb      	bne.n	40239a <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4023a2:	4b0b      	ldr	r3, [pc, #44]	; (4023d0 <Reset_Handler+0xa0>)
  4023a4:	4a0b      	ldr	r2, [pc, #44]	; (4023d4 <Reset_Handler+0xa4>)
  4023a6:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4023a8:	f000 fcb0 	bl	402d0c <__libc_init_array>

	/* Branch to main function */
	main();
  4023ac:	f7fd ffa2 	bl	4002f4 <main>
  4023b0:	e7fe      	b.n	4023b0 <Reset_Handler+0x80>
  4023b2:	bf00      	nop
  4023b4:	20000000 	.word	0x20000000
  4023b8:	00408504 	.word	0x00408504
  4023bc:	200001e8 	.word	0x200001e8
  4023c0:	00408500 	.word	0x00408500
  4023c4:	20000848 	.word	0x20000848
  4023c8:	200001e8 	.word	0x200001e8
  4023cc:	2000084b 	.word	0x2000084b
  4023d0:	e000ed00 	.word	0xe000ed00
  4023d4:	00400000 	.word	0x00400000

004023d8 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4023d8:	4b3d      	ldr	r3, [pc, #244]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  4023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023dc:	f003 0303 	and.w	r3, r3, #3
  4023e0:	2b03      	cmp	r3, #3
  4023e2:	d85d      	bhi.n	4024a0 <SystemCoreClockUpdate+0xc8>
  4023e4:	e8df f003 	tbb	[pc, r3]
  4023e8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4023ec:	4b39      	ldr	r3, [pc, #228]	; (4024d4 <SystemCoreClockUpdate+0xfc>)
  4023ee:	695b      	ldr	r3, [r3, #20]
  4023f0:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4023f4:	bf14      	ite	ne
  4023f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4023fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4023fe:	4b36      	ldr	r3, [pc, #216]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  402400:	601a      	str	r2, [r3, #0]
  402402:	e04d      	b.n	4024a0 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402404:	4b32      	ldr	r3, [pc, #200]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  402406:	6a1b      	ldr	r3, [r3, #32]
  402408:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40240c:	d003      	beq.n	402416 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40240e:	4a33      	ldr	r2, [pc, #204]	; (4024dc <SystemCoreClockUpdate+0x104>)
  402410:	4b31      	ldr	r3, [pc, #196]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  402412:	601a      	str	r2, [r3, #0]
  402414:	e044      	b.n	4024a0 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402416:	4a32      	ldr	r2, [pc, #200]	; (4024e0 <SystemCoreClockUpdate+0x108>)
  402418:	4b2f      	ldr	r3, [pc, #188]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  40241a:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40241c:	4b2c      	ldr	r3, [pc, #176]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  40241e:	6a1b      	ldr	r3, [r3, #32]
  402420:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402424:	2b10      	cmp	r3, #16
  402426:	d002      	beq.n	40242e <SystemCoreClockUpdate+0x56>
  402428:	2b20      	cmp	r3, #32
  40242a:	d004      	beq.n	402436 <SystemCoreClockUpdate+0x5e>
  40242c:	e038      	b.n	4024a0 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40242e:	4a2d      	ldr	r2, [pc, #180]	; (4024e4 <SystemCoreClockUpdate+0x10c>)
  402430:	4b29      	ldr	r3, [pc, #164]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  402432:	601a      	str	r2, [r3, #0]
			break;
  402434:	e034      	b.n	4024a0 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402436:	4a29      	ldr	r2, [pc, #164]	; (4024dc <SystemCoreClockUpdate+0x104>)
  402438:	4b27      	ldr	r3, [pc, #156]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  40243a:	601a      	str	r2, [r3, #0]
			break;
  40243c:	e030      	b.n	4024a0 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40243e:	4b24      	ldr	r3, [pc, #144]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  402440:	6a1b      	ldr	r3, [r3, #32]
  402442:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402446:	d003      	beq.n	402450 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402448:	4a24      	ldr	r2, [pc, #144]	; (4024dc <SystemCoreClockUpdate+0x104>)
  40244a:	4b23      	ldr	r3, [pc, #140]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  40244c:	601a      	str	r2, [r3, #0]
  40244e:	e012      	b.n	402476 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402450:	4a23      	ldr	r2, [pc, #140]	; (4024e0 <SystemCoreClockUpdate+0x108>)
  402452:	4b21      	ldr	r3, [pc, #132]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  402454:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402456:	4b1e      	ldr	r3, [pc, #120]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  402458:	6a1b      	ldr	r3, [r3, #32]
  40245a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40245e:	2b10      	cmp	r3, #16
  402460:	d002      	beq.n	402468 <SystemCoreClockUpdate+0x90>
  402462:	2b20      	cmp	r3, #32
  402464:	d004      	beq.n	402470 <SystemCoreClockUpdate+0x98>
  402466:	e006      	b.n	402476 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402468:	4a1e      	ldr	r2, [pc, #120]	; (4024e4 <SystemCoreClockUpdate+0x10c>)
  40246a:	4b1b      	ldr	r3, [pc, #108]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  40246c:	601a      	str	r2, [r3, #0]
					break;
  40246e:	e002      	b.n	402476 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402470:	4a1a      	ldr	r2, [pc, #104]	; (4024dc <SystemCoreClockUpdate+0x104>)
  402472:	4b19      	ldr	r3, [pc, #100]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  402474:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402476:	4b16      	ldr	r3, [pc, #88]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  402478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40247a:	f003 0303 	and.w	r3, r3, #3
  40247e:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402480:	4a13      	ldr	r2, [pc, #76]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  402482:	bf07      	ittee	eq
  402484:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402486:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402488:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40248a:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40248c:	4812      	ldr	r0, [pc, #72]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  40248e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402492:	6803      	ldr	r3, [r0, #0]
  402494:	fb01 3303 	mla	r3, r1, r3, r3
  402498:	b2d2      	uxtb	r2, r2
  40249a:	fbb3 f3f2 	udiv	r3, r3, r2
  40249e:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4024a0:	4b0b      	ldr	r3, [pc, #44]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  4024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4024a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4024a8:	2b70      	cmp	r3, #112	; 0x70
  4024aa:	d107      	bne.n	4024bc <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4024ac:	4a0a      	ldr	r2, [pc, #40]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  4024ae:	6813      	ldr	r3, [r2, #0]
  4024b0:	490d      	ldr	r1, [pc, #52]	; (4024e8 <SystemCoreClockUpdate+0x110>)
  4024b2:	fba1 1303 	umull	r1, r3, r1, r3
  4024b6:	085b      	lsrs	r3, r3, #1
  4024b8:	6013      	str	r3, [r2, #0]
  4024ba:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4024bc:	4b04      	ldr	r3, [pc, #16]	; (4024d0 <SystemCoreClockUpdate+0xf8>)
  4024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4024c0:	4905      	ldr	r1, [pc, #20]	; (4024d8 <SystemCoreClockUpdate+0x100>)
  4024c2:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4024c6:	680b      	ldr	r3, [r1, #0]
  4024c8:	40d3      	lsrs	r3, r2
  4024ca:	600b      	str	r3, [r1, #0]
  4024cc:	4770      	bx	lr
  4024ce:	bf00      	nop
  4024d0:	400e0400 	.word	0x400e0400
  4024d4:	400e1410 	.word	0x400e1410
  4024d8:	20000010 	.word	0x20000010
  4024dc:	00b71b00 	.word	0x00b71b00
  4024e0:	003d0900 	.word	0x003d0900
  4024e4:	007a1200 	.word	0x007a1200
  4024e8:	aaaaaaab 	.word	0xaaaaaaab

004024ec <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4024ec:	4b1a      	ldr	r3, [pc, #104]	; (402558 <system_init_flash+0x6c>)
  4024ee:	4298      	cmp	r0, r3
  4024f0:	d807      	bhi.n	402502 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4024f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4024f6:	4a19      	ldr	r2, [pc, #100]	; (40255c <system_init_flash+0x70>)
  4024f8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4024fa:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4024fe:	6013      	str	r3, [r2, #0]
  402500:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  402502:	4b17      	ldr	r3, [pc, #92]	; (402560 <system_init_flash+0x74>)
  402504:	4298      	cmp	r0, r3
  402506:	d806      	bhi.n	402516 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402508:	4b16      	ldr	r3, [pc, #88]	; (402564 <system_init_flash+0x78>)
  40250a:	4a14      	ldr	r2, [pc, #80]	; (40255c <system_init_flash+0x70>)
  40250c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40250e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402512:	6013      	str	r3, [r2, #0]
  402514:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402516:	4b14      	ldr	r3, [pc, #80]	; (402568 <system_init_flash+0x7c>)
  402518:	4298      	cmp	r0, r3
  40251a:	d806      	bhi.n	40252a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40251c:	4b13      	ldr	r3, [pc, #76]	; (40256c <system_init_flash+0x80>)
  40251e:	4a0f      	ldr	r2, [pc, #60]	; (40255c <system_init_flash+0x70>)
  402520:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402522:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402526:	6013      	str	r3, [r2, #0]
  402528:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40252a:	4b11      	ldr	r3, [pc, #68]	; (402570 <system_init_flash+0x84>)
  40252c:	4298      	cmp	r0, r3
  40252e:	d806      	bhi.n	40253e <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402530:	4b10      	ldr	r3, [pc, #64]	; (402574 <system_init_flash+0x88>)
  402532:	4a0a      	ldr	r2, [pc, #40]	; (40255c <system_init_flash+0x70>)
  402534:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402536:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40253a:	6013      	str	r3, [r2, #0]
  40253c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40253e:	4b0e      	ldr	r3, [pc, #56]	; (402578 <system_init_flash+0x8c>)
  402540:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402542:	bf94      	ite	ls
  402544:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402548:	4b0c      	ldrhi	r3, [pc, #48]	; (40257c <system_init_flash+0x90>)
  40254a:	4a04      	ldr	r2, [pc, #16]	; (40255c <system_init_flash+0x70>)
  40254c:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40254e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402552:	6013      	str	r3, [r2, #0]
  402554:	4770      	bx	lr
  402556:	bf00      	nop
  402558:	01312cff 	.word	0x01312cff
  40255c:	400e0a00 	.word	0x400e0a00
  402560:	026259ff 	.word	0x026259ff
  402564:	04000100 	.word	0x04000100
  402568:	039386ff 	.word	0x039386ff
  40256c:	04000200 	.word	0x04000200
  402570:	04c4b3ff 	.word	0x04c4b3ff
  402574:	04000300 	.word	0x04000300
  402578:	05f5e0ff 	.word	0x05f5e0ff
  40257c:	04000500 	.word	0x04000500

00402580 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402580:	4b09      	ldr	r3, [pc, #36]	; (4025a8 <_sbrk+0x28>)
  402582:	681b      	ldr	r3, [r3, #0]
  402584:	b913      	cbnz	r3, 40258c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  402586:	4a09      	ldr	r2, [pc, #36]	; (4025ac <_sbrk+0x2c>)
  402588:	4b07      	ldr	r3, [pc, #28]	; (4025a8 <_sbrk+0x28>)
  40258a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40258c:	4b06      	ldr	r3, [pc, #24]	; (4025a8 <_sbrk+0x28>)
  40258e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402590:	181a      	adds	r2, r3, r0
  402592:	4907      	ldr	r1, [pc, #28]	; (4025b0 <_sbrk+0x30>)
  402594:	4291      	cmp	r1, r2
  402596:	db04      	blt.n	4025a2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402598:	4610      	mov	r0, r2
  40259a:	4a03      	ldr	r2, [pc, #12]	; (4025a8 <_sbrk+0x28>)
  40259c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40259e:	4618      	mov	r0, r3
  4025a0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4025a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4025a6:	4770      	bx	lr
  4025a8:	200004ec 	.word	0x200004ec
  4025ac:	20003848 	.word	0x20003848
  4025b0:	20027ffc 	.word	0x20027ffc

004025b4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4025b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4025b8:	4770      	bx	lr
  4025ba:	bf00      	nop

004025bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4025bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4025c0:	604b      	str	r3, [r1, #4]

	return 0;
}
  4025c2:	2000      	movs	r0, #0
  4025c4:	4770      	bx	lr
  4025c6:	bf00      	nop

004025c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4025c8:	2001      	movs	r0, #1
  4025ca:	4770      	bx	lr

004025cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4025cc:	2000      	movs	r0, #0
  4025ce:	4770      	bx	lr

004025d0 <atan2>:
  4025d0:	f000 b85e 	b.w	402690 <__ieee754_atan2>

004025d4 <sqrt>:
  4025d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025d8:	b08b      	sub	sp, #44	; 0x2c
  4025da:	4604      	mov	r4, r0
  4025dc:	460d      	mov	r5, r1
  4025de:	f000 f921 	bl	402824 <__ieee754_sqrt>
  4025e2:	4b28      	ldr	r3, [pc, #160]	; (402684 <sqrt+0xb0>)
  4025e4:	f993 a000 	ldrsb.w	sl, [r3]
  4025e8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  4025ec:	4606      	mov	r6, r0
  4025ee:	460f      	mov	r7, r1
  4025f0:	d012      	beq.n	402618 <sqrt+0x44>
  4025f2:	4622      	mov	r2, r4
  4025f4:	462b      	mov	r3, r5
  4025f6:	4620      	mov	r0, r4
  4025f8:	4629      	mov	r1, r5
  4025fa:	f004 ffeb 	bl	4075d4 <__aeabi_dcmpun>
  4025fe:	4683      	mov	fp, r0
  402600:	b950      	cbnz	r0, 402618 <sqrt+0x44>
  402602:	f04f 0800 	mov.w	r8, #0
  402606:	f04f 0900 	mov.w	r9, #0
  40260a:	4642      	mov	r2, r8
  40260c:	464b      	mov	r3, r9
  40260e:	4620      	mov	r0, r4
  402610:	4629      	mov	r1, r5
  402612:	f004 ffb7 	bl	407584 <__aeabi_dcmplt>
  402616:	b920      	cbnz	r0, 402622 <sqrt+0x4e>
  402618:	4630      	mov	r0, r6
  40261a:	4639      	mov	r1, r7
  40261c:	b00b      	add	sp, #44	; 0x2c
  40261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402622:	4b19      	ldr	r3, [pc, #100]	; (402688 <sqrt+0xb4>)
  402624:	f8cd b020 	str.w	fp, [sp, #32]
  402628:	2201      	movs	r2, #1
  40262a:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40262e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  402632:	e88d 000c 	stmia.w	sp, {r2, r3}
  402636:	f1ba 0f00 	cmp.w	sl, #0
  40263a:	d015      	beq.n	402668 <sqrt+0x94>
  40263c:	4642      	mov	r2, r8
  40263e:	464b      	mov	r3, r9
  402640:	4640      	mov	r0, r8
  402642:	4649      	mov	r1, r9
  402644:	f004 fe56 	bl	4072f4 <__aeabi_ddiv>
  402648:	f1ba 0f02 	cmp.w	sl, #2
  40264c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402650:	d10c      	bne.n	40266c <sqrt+0x98>
  402652:	f000 fb55 	bl	402d00 <__errno>
  402656:	2321      	movs	r3, #33	; 0x21
  402658:	6003      	str	r3, [r0, #0]
  40265a:	9b08      	ldr	r3, [sp, #32]
  40265c:	b963      	cbnz	r3, 402678 <sqrt+0xa4>
  40265e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402662:	b00b      	add	sp, #44	; 0x2c
  402664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402668:	e9cd 8906 	strd	r8, r9, [sp, #24]
  40266c:	4668      	mov	r0, sp
  40266e:	f000 fb3d 	bl	402cec <matherr>
  402672:	2800      	cmp	r0, #0
  402674:	d1f1      	bne.n	40265a <sqrt+0x86>
  402676:	e7ec      	b.n	402652 <sqrt+0x7e>
  402678:	f000 fb42 	bl	402d00 <__errno>
  40267c:	9b08      	ldr	r3, [sp, #32]
  40267e:	6003      	str	r3, [r0, #0]
  402680:	e7ed      	b.n	40265e <sqrt+0x8a>
  402682:	bf00      	nop
  402684:	20000014 	.word	0x20000014
  402688:	00408178 	.word	0x00408178
  40268c:	00000000 	.word	0x00000000

00402690 <__ieee754_atan2>:
  402690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402694:	4254      	negs	r4, r2
  402696:	4314      	orrs	r4, r2
  402698:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  40269c:	f8df e180 	ldr.w	lr, [pc, #384]	; 402820 <__ieee754_atan2+0x190>
  4026a0:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  4026a4:	4574      	cmp	r4, lr
  4026a6:	4606      	mov	r6, r0
  4026a8:	460d      	mov	r5, r1
  4026aa:	d83e      	bhi.n	40272a <__ieee754_atan2+0x9a>
  4026ac:	4244      	negs	r4, r0
  4026ae:	4304      	orrs	r4, r0
  4026b0:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  4026b4:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  4026b8:	4574      	cmp	r4, lr
  4026ba:	468a      	mov	sl, r1
  4026bc:	d835      	bhi.n	40272a <__ieee754_atan2+0x9a>
  4026be:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  4026c2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  4026c6:	4314      	orrs	r4, r2
  4026c8:	d044      	beq.n	402754 <__ieee754_atan2+0xc4>
  4026ca:	179c      	asrs	r4, r3, #30
  4026cc:	f004 0402 	and.w	r4, r4, #2
  4026d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  4026d4:	ea50 010b 	orrs.w	r1, r0, fp
  4026d8:	d02f      	beq.n	40273a <__ieee754_atan2+0xaa>
  4026da:	ea52 0109 	orrs.w	r1, r2, r9
  4026de:	d033      	beq.n	402748 <__ieee754_atan2+0xb8>
  4026e0:	45f1      	cmp	r9, lr
  4026e2:	d046      	beq.n	402772 <__ieee754_atan2+0xe2>
  4026e4:	45f3      	cmp	fp, lr
  4026e6:	d02f      	beq.n	402748 <__ieee754_atan2+0xb8>
  4026e8:	ebc9 090b 	rsb	r9, r9, fp
  4026ec:	ea4f 5929 	mov.w	r9, r9, asr #20
  4026f0:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  4026f4:	dc34      	bgt.n	402760 <__ieee754_atan2+0xd0>
  4026f6:	2b00      	cmp	r3, #0
  4026f8:	db57      	blt.n	4027aa <__ieee754_atan2+0x11a>
  4026fa:	4630      	mov	r0, r6
  4026fc:	4629      	mov	r1, r5
  4026fe:	f004 fdf9 	bl	4072f4 <__aeabi_ddiv>
  402702:	f000 faef 	bl	402ce4 <fabs>
  402706:	f000 f94f 	bl	4029a8 <atan>
  40270a:	2c01      	cmp	r4, #1
  40270c:	d04a      	beq.n	4027a4 <__ieee754_atan2+0x114>
  40270e:	2c02      	cmp	r4, #2
  402710:	d03b      	beq.n	40278a <__ieee754_atan2+0xfa>
  402712:	b184      	cbz	r4, 402736 <__ieee754_atan2+0xa6>
  402714:	a332      	add	r3, pc, #200	; (adr r3, 4027e0 <__ieee754_atan2+0x150>)
  402716:	e9d3 2300 	ldrd	r2, r3, [r3]
  40271a:	f004 fb0d 	bl	406d38 <__aeabi_dsub>
  40271e:	a332      	add	r3, pc, #200	; (adr r3, 4027e8 <__ieee754_atan2+0x158>)
  402720:	e9d3 2300 	ldrd	r2, r3, [r3]
  402724:	f004 fb08 	bl	406d38 <__aeabi_dsub>
  402728:	e005      	b.n	402736 <__ieee754_atan2+0xa6>
  40272a:	4610      	mov	r0, r2
  40272c:	4619      	mov	r1, r3
  40272e:	4632      	mov	r2, r6
  402730:	462b      	mov	r3, r5
  402732:	f004 fb03 	bl	406d3c <__adddf3>
  402736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40273a:	2c02      	cmp	r4, #2
  40273c:	d014      	beq.n	402768 <__ieee754_atan2+0xd8>
  40273e:	2c03      	cmp	r4, #3
  402740:	d10c      	bne.n	40275c <__ieee754_atan2+0xcc>
  402742:	482d      	ldr	r0, [pc, #180]	; (4027f8 <__ieee754_atan2+0x168>)
  402744:	492d      	ldr	r1, [pc, #180]	; (4027fc <__ieee754_atan2+0x16c>)
  402746:	e7f6      	b.n	402736 <__ieee754_atan2+0xa6>
  402748:	f1ba 0f00 	cmp.w	sl, #0
  40274c:	482a      	ldr	r0, [pc, #168]	; (4027f8 <__ieee754_atan2+0x168>)
  40274e:	db0e      	blt.n	40276e <__ieee754_atan2+0xde>
  402750:	492b      	ldr	r1, [pc, #172]	; (402800 <__ieee754_atan2+0x170>)
  402752:	e7f0      	b.n	402736 <__ieee754_atan2+0xa6>
  402754:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402758:	f000 b926 	b.w	4029a8 <atan>
  40275c:	4629      	mov	r1, r5
  40275e:	e7ea      	b.n	402736 <__ieee754_atan2+0xa6>
  402760:	a123      	add	r1, pc, #140	; (adr r1, 4027f0 <__ieee754_atan2+0x160>)
  402762:	e9d1 0100 	ldrd	r0, r1, [r1]
  402766:	e7d0      	b.n	40270a <__ieee754_atan2+0x7a>
  402768:	4823      	ldr	r0, [pc, #140]	; (4027f8 <__ieee754_atan2+0x168>)
  40276a:	4926      	ldr	r1, [pc, #152]	; (402804 <__ieee754_atan2+0x174>)
  40276c:	e7e3      	b.n	402736 <__ieee754_atan2+0xa6>
  40276e:	4926      	ldr	r1, [pc, #152]	; (402808 <__ieee754_atan2+0x178>)
  402770:	e7e1      	b.n	402736 <__ieee754_atan2+0xa6>
  402772:	45cb      	cmp	fp, r9
  402774:	d01f      	beq.n	4027b6 <__ieee754_atan2+0x126>
  402776:	2c02      	cmp	r4, #2
  402778:	d0f6      	beq.n	402768 <__ieee754_atan2+0xd8>
  40277a:	2c03      	cmp	r4, #3
  40277c:	d0e1      	beq.n	402742 <__ieee754_atan2+0xb2>
  40277e:	2c01      	cmp	r4, #1
  402780:	f04f 0000 	mov.w	r0, #0
  402784:	d020      	beq.n	4027c8 <__ieee754_atan2+0x138>
  402786:	4601      	mov	r1, r0
  402788:	e7d5      	b.n	402736 <__ieee754_atan2+0xa6>
  40278a:	a315      	add	r3, pc, #84	; (adr r3, 4027e0 <__ieee754_atan2+0x150>)
  40278c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402790:	f004 fad2 	bl	406d38 <__aeabi_dsub>
  402794:	4602      	mov	r2, r0
  402796:	460b      	mov	r3, r1
  402798:	a113      	add	r1, pc, #76	; (adr r1, 4027e8 <__ieee754_atan2+0x158>)
  40279a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40279e:	f004 facb 	bl	406d38 <__aeabi_dsub>
  4027a2:	e7c8      	b.n	402736 <__ieee754_atan2+0xa6>
  4027a4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4027a8:	e7c5      	b.n	402736 <__ieee754_atan2+0xa6>
  4027aa:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  4027ae:	daa4      	bge.n	4026fa <__ieee754_atan2+0x6a>
  4027b0:	2000      	movs	r0, #0
  4027b2:	2100      	movs	r1, #0
  4027b4:	e7a9      	b.n	40270a <__ieee754_atan2+0x7a>
  4027b6:	2c02      	cmp	r4, #2
  4027b8:	d00e      	beq.n	4027d8 <__ieee754_atan2+0x148>
  4027ba:	2c03      	cmp	r4, #3
  4027bc:	d009      	beq.n	4027d2 <__ieee754_atan2+0x142>
  4027be:	2c01      	cmp	r4, #1
  4027c0:	480d      	ldr	r0, [pc, #52]	; (4027f8 <__ieee754_atan2+0x168>)
  4027c2:	d004      	beq.n	4027ce <__ieee754_atan2+0x13e>
  4027c4:	4911      	ldr	r1, [pc, #68]	; (40280c <__ieee754_atan2+0x17c>)
  4027c6:	e7b6      	b.n	402736 <__ieee754_atan2+0xa6>
  4027c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4027cc:	e7b3      	b.n	402736 <__ieee754_atan2+0xa6>
  4027ce:	4910      	ldr	r1, [pc, #64]	; (402810 <__ieee754_atan2+0x180>)
  4027d0:	e7b1      	b.n	402736 <__ieee754_atan2+0xa6>
  4027d2:	4810      	ldr	r0, [pc, #64]	; (402814 <__ieee754_atan2+0x184>)
  4027d4:	4910      	ldr	r1, [pc, #64]	; (402818 <__ieee754_atan2+0x188>)
  4027d6:	e7ae      	b.n	402736 <__ieee754_atan2+0xa6>
  4027d8:	480e      	ldr	r0, [pc, #56]	; (402814 <__ieee754_atan2+0x184>)
  4027da:	4910      	ldr	r1, [pc, #64]	; (40281c <__ieee754_atan2+0x18c>)
  4027dc:	e7ab      	b.n	402736 <__ieee754_atan2+0xa6>
  4027de:	bf00      	nop
  4027e0:	33145c07 	.word	0x33145c07
  4027e4:	3ca1a626 	.word	0x3ca1a626
  4027e8:	54442d18 	.word	0x54442d18
  4027ec:	400921fb 	.word	0x400921fb
  4027f0:	54442d18 	.word	0x54442d18
  4027f4:	3ff921fb 	.word	0x3ff921fb
  4027f8:	54442d18 	.word	0x54442d18
  4027fc:	c00921fb 	.word	0xc00921fb
  402800:	3ff921fb 	.word	0x3ff921fb
  402804:	400921fb 	.word	0x400921fb
  402808:	bff921fb 	.word	0xbff921fb
  40280c:	3fe921fb 	.word	0x3fe921fb
  402810:	bfe921fb 	.word	0xbfe921fb
  402814:	7f3321d2 	.word	0x7f3321d2
  402818:	c002d97c 	.word	0xc002d97c
  40281c:	4002d97c 	.word	0x4002d97c
  402820:	7ff00000 	.word	0x7ff00000

00402824 <__ieee754_sqrt>:
  402824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402828:	4e5d      	ldr	r6, [pc, #372]	; (4029a0 <__ieee754_sqrt+0x17c>)
  40282a:	46b6      	mov	lr, r6
  40282c:	400e      	ands	r6, r1
  40282e:	4576      	cmp	r6, lr
  402830:	460c      	mov	r4, r1
  402832:	4605      	mov	r5, r0
  402834:	f000 8095 	beq.w	402962 <__ieee754_sqrt+0x13e>
  402838:	2900      	cmp	r1, #0
  40283a:	460b      	mov	r3, r1
  40283c:	4602      	mov	r2, r0
  40283e:	dd73      	ble.n	402928 <__ieee754_sqrt+0x104>
  402840:	150f      	asrs	r7, r1, #20
  402842:	d07e      	beq.n	402942 <__ieee754_sqrt+0x11e>
  402844:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402848:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40284c:	07f8      	lsls	r0, r7, #31
  40284e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402852:	d464      	bmi.n	40291e <__ieee754_sqrt+0xfa>
  402854:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402858:	2600      	movs	r6, #0
  40285a:	440b      	add	r3, r1
  40285c:	107f      	asrs	r7, r7, #1
  40285e:	0052      	lsls	r2, r2, #1
  402860:	46b6      	mov	lr, r6
  402862:	2016      	movs	r0, #22
  402864:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402868:	eb0e 0401 	add.w	r4, lr, r1
  40286c:	429c      	cmp	r4, r3
  40286e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  402872:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402876:	dc03      	bgt.n	402880 <__ieee754_sqrt+0x5c>
  402878:	1b1b      	subs	r3, r3, r4
  40287a:	eb04 0e01 	add.w	lr, r4, r1
  40287e:	440e      	add	r6, r1
  402880:	3801      	subs	r0, #1
  402882:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  402886:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40288a:	d1ed      	bne.n	402868 <__ieee754_sqrt+0x44>
  40288c:	4684      	mov	ip, r0
  40288e:	2420      	movs	r4, #32
  402890:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402894:	e009      	b.n	4028aa <__ieee754_sqrt+0x86>
  402896:	d020      	beq.n	4028da <__ieee754_sqrt+0xb6>
  402898:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40289c:	3c01      	subs	r4, #1
  40289e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4028a2:	442b      	add	r3, r5
  4028a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4028a8:	d020      	beq.n	4028ec <__ieee754_sqrt+0xc8>
  4028aa:	459e      	cmp	lr, r3
  4028ac:	eb01 050c 	add.w	r5, r1, ip
  4028b0:	daf1      	bge.n	402896 <__ieee754_sqrt+0x72>
  4028b2:	2d00      	cmp	r5, #0
  4028b4:	eb05 0c01 	add.w	ip, r5, r1
  4028b8:	db09      	blt.n	4028ce <__ieee754_sqrt+0xaa>
  4028ba:	46f0      	mov	r8, lr
  4028bc:	4295      	cmp	r5, r2
  4028be:	ebce 0303 	rsb	r3, lr, r3
  4028c2:	d900      	bls.n	4028c6 <__ieee754_sqrt+0xa2>
  4028c4:	3b01      	subs	r3, #1
  4028c6:	1b52      	subs	r2, r2, r5
  4028c8:	4408      	add	r0, r1
  4028ca:	46c6      	mov	lr, r8
  4028cc:	e7e4      	b.n	402898 <__ieee754_sqrt+0x74>
  4028ce:	f1bc 0f00 	cmp.w	ip, #0
  4028d2:	dbf2      	blt.n	4028ba <__ieee754_sqrt+0x96>
  4028d4:	f10e 0801 	add.w	r8, lr, #1
  4028d8:	e7f0      	b.n	4028bc <__ieee754_sqrt+0x98>
  4028da:	4295      	cmp	r5, r2
  4028dc:	d817      	bhi.n	40290e <__ieee754_sqrt+0xea>
  4028de:	2d00      	cmp	r5, #0
  4028e0:	eb05 0c01 	add.w	ip, r5, r1
  4028e4:	db47      	blt.n	402976 <__ieee754_sqrt+0x152>
  4028e6:	4698      	mov	r8, r3
  4028e8:	2300      	movs	r3, #0
  4028ea:	e7ec      	b.n	4028c6 <__ieee754_sqrt+0xa2>
  4028ec:	4313      	orrs	r3, r2
  4028ee:	d110      	bne.n	402912 <__ieee754_sqrt+0xee>
  4028f0:	0840      	lsrs	r0, r0, #1
  4028f2:	1073      	asrs	r3, r6, #1
  4028f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  4028f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4028fc:	07f2      	lsls	r2, r6, #31
  4028fe:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  402902:	bf48      	it	mi
  402904:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402908:	4649      	mov	r1, r9
  40290a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40290e:	4673      	mov	r3, lr
  402910:	e7c2      	b.n	402898 <__ieee754_sqrt+0x74>
  402912:	1c41      	adds	r1, r0, #1
  402914:	d033      	beq.n	40297e <__ieee754_sqrt+0x15a>
  402916:	f000 0301 	and.w	r3, r0, #1
  40291a:	4418      	add	r0, r3
  40291c:	e7e8      	b.n	4028f0 <__ieee754_sqrt+0xcc>
  40291e:	005b      	lsls	r3, r3, #1
  402920:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402924:	0052      	lsls	r2, r2, #1
  402926:	e795      	b.n	402854 <__ieee754_sqrt+0x30>
  402928:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40292c:	4306      	orrs	r6, r0
  40292e:	d0ec      	beq.n	40290a <__ieee754_sqrt+0xe6>
  402930:	bb69      	cbnz	r1, 40298e <__ieee754_sqrt+0x16a>
  402932:	460f      	mov	r7, r1
  402934:	0ad3      	lsrs	r3, r2, #11
  402936:	3f15      	subs	r7, #21
  402938:	0552      	lsls	r2, r2, #21
  40293a:	2b00      	cmp	r3, #0
  40293c:	d0fa      	beq.n	402934 <__ieee754_sqrt+0x110>
  40293e:	02dd      	lsls	r5, r3, #11
  402940:	d420      	bmi.n	402984 <__ieee754_sqrt+0x160>
  402942:	2100      	movs	r1, #0
  402944:	e000      	b.n	402948 <__ieee754_sqrt+0x124>
  402946:	4601      	mov	r1, r0
  402948:	005b      	lsls	r3, r3, #1
  40294a:	02dc      	lsls	r4, r3, #11
  40294c:	f101 0001 	add.w	r0, r1, #1
  402950:	d5f9      	bpl.n	402946 <__ieee754_sqrt+0x122>
  402952:	f1c0 0420 	rsb	r4, r0, #32
  402956:	fa22 f404 	lsr.w	r4, r2, r4
  40295a:	4323      	orrs	r3, r4
  40295c:	1a7f      	subs	r7, r7, r1
  40295e:	4082      	lsls	r2, r0
  402960:	e770      	b.n	402844 <__ieee754_sqrt+0x20>
  402962:	4602      	mov	r2, r0
  402964:	460b      	mov	r3, r1
  402966:	f004 fb9b 	bl	4070a0 <__aeabi_dmul>
  40296a:	462a      	mov	r2, r5
  40296c:	4623      	mov	r3, r4
  40296e:	f004 f9e5 	bl	406d3c <__adddf3>
  402972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402976:	f1bc 0f00 	cmp.w	ip, #0
  40297a:	daab      	bge.n	4028d4 <__ieee754_sqrt+0xb0>
  40297c:	e7b3      	b.n	4028e6 <__ieee754_sqrt+0xc2>
  40297e:	3601      	adds	r6, #1
  402980:	4620      	mov	r0, r4
  402982:	e7b6      	b.n	4028f2 <__ieee754_sqrt+0xce>
  402984:	2420      	movs	r4, #32
  402986:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  40298a:	2000      	movs	r0, #0
  40298c:	e7e3      	b.n	402956 <__ieee754_sqrt+0x132>
  40298e:	4602      	mov	r2, r0
  402990:	460b      	mov	r3, r1
  402992:	f004 f9d1 	bl	406d38 <__aeabi_dsub>
  402996:	4602      	mov	r2, r0
  402998:	460b      	mov	r3, r1
  40299a:	f004 fcab 	bl	4072f4 <__aeabi_ddiv>
  40299e:	e7b4      	b.n	40290a <__ieee754_sqrt+0xe6>
  4029a0:	7ff00000 	.word	0x7ff00000
  4029a4:	00000000 	.word	0x00000000

004029a8 <atan>:
  4029a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029ac:	4bc0      	ldr	r3, [pc, #768]	; (402cb0 <atan+0x308>)
  4029ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4029b2:	429e      	cmp	r6, r3
  4029b4:	460d      	mov	r5, r1
  4029b6:	468a      	mov	sl, r1
  4029b8:	4604      	mov	r4, r0
  4029ba:	dd0f      	ble.n	4029dc <atan+0x34>
  4029bc:	4bbd      	ldr	r3, [pc, #756]	; (402cb4 <atan+0x30c>)
  4029be:	429e      	cmp	r6, r3
  4029c0:	f300 80b2 	bgt.w	402b28 <atan+0x180>
  4029c4:	f000 80ad 	beq.w	402b22 <atan+0x17a>
  4029c8:	4bbb      	ldr	r3, [pc, #748]	; (402cb8 <atan+0x310>)
  4029ca:	49bc      	ldr	r1, [pc, #752]	; (402cbc <atan+0x314>)
  4029cc:	4cbc      	ldr	r4, [pc, #752]	; (402cc0 <atan+0x318>)
  4029ce:	f1ba 0f00 	cmp.w	sl, #0
  4029d2:	bfc8      	it	gt
  4029d4:	4619      	movgt	r1, r3
  4029d6:	4620      	mov	r0, r4
  4029d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029dc:	4bb9      	ldr	r3, [pc, #740]	; (402cc4 <atan+0x31c>)
  4029de:	429e      	cmp	r6, r3
  4029e0:	f300 80bc 	bgt.w	402b5c <atan+0x1b4>
  4029e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  4029e8:	429e      	cmp	r6, r3
  4029ea:	f340 80a7 	ble.w	402b3c <atan+0x194>
  4029ee:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  4029f2:	4622      	mov	r2, r4
  4029f4:	462b      	mov	r3, r5
  4029f6:	4620      	mov	r0, r4
  4029f8:	4629      	mov	r1, r5
  4029fa:	f004 fb51 	bl	4070a0 <__aeabi_dmul>
  4029fe:	4602      	mov	r2, r0
  402a00:	460b      	mov	r3, r1
  402a02:	4680      	mov	r8, r0
  402a04:	4689      	mov	r9, r1
  402a06:	f004 fb4b 	bl	4070a0 <__aeabi_dmul>
  402a0a:	a391      	add	r3, pc, #580	; (adr r3, 402c50 <atan+0x2a8>)
  402a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a10:	4606      	mov	r6, r0
  402a12:	460f      	mov	r7, r1
  402a14:	f004 fb44 	bl	4070a0 <__aeabi_dmul>
  402a18:	a38f      	add	r3, pc, #572	; (adr r3, 402c58 <atan+0x2b0>)
  402a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a1e:	f004 f98d 	bl	406d3c <__adddf3>
  402a22:	4632      	mov	r2, r6
  402a24:	463b      	mov	r3, r7
  402a26:	f004 fb3b 	bl	4070a0 <__aeabi_dmul>
  402a2a:	a38d      	add	r3, pc, #564	; (adr r3, 402c60 <atan+0x2b8>)
  402a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a30:	f004 f984 	bl	406d3c <__adddf3>
  402a34:	4632      	mov	r2, r6
  402a36:	463b      	mov	r3, r7
  402a38:	f004 fb32 	bl	4070a0 <__aeabi_dmul>
  402a3c:	a38a      	add	r3, pc, #552	; (adr r3, 402c68 <atan+0x2c0>)
  402a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a42:	f004 f97b 	bl	406d3c <__adddf3>
  402a46:	4632      	mov	r2, r6
  402a48:	463b      	mov	r3, r7
  402a4a:	f004 fb29 	bl	4070a0 <__aeabi_dmul>
  402a4e:	a388      	add	r3, pc, #544	; (adr r3, 402c70 <atan+0x2c8>)
  402a50:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a54:	f004 f972 	bl	406d3c <__adddf3>
  402a58:	4632      	mov	r2, r6
  402a5a:	463b      	mov	r3, r7
  402a5c:	f004 fb20 	bl	4070a0 <__aeabi_dmul>
  402a60:	a385      	add	r3, pc, #532	; (adr r3, 402c78 <atan+0x2d0>)
  402a62:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a66:	f004 f969 	bl	406d3c <__adddf3>
  402a6a:	4642      	mov	r2, r8
  402a6c:	464b      	mov	r3, r9
  402a6e:	f004 fb17 	bl	4070a0 <__aeabi_dmul>
  402a72:	a383      	add	r3, pc, #524	; (adr r3, 402c80 <atan+0x2d8>)
  402a74:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a78:	4680      	mov	r8, r0
  402a7a:	4689      	mov	r9, r1
  402a7c:	4630      	mov	r0, r6
  402a7e:	4639      	mov	r1, r7
  402a80:	f004 fb0e 	bl	4070a0 <__aeabi_dmul>
  402a84:	a380      	add	r3, pc, #512	; (adr r3, 402c88 <atan+0x2e0>)
  402a86:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a8a:	f004 f955 	bl	406d38 <__aeabi_dsub>
  402a8e:	4632      	mov	r2, r6
  402a90:	463b      	mov	r3, r7
  402a92:	f004 fb05 	bl	4070a0 <__aeabi_dmul>
  402a96:	a37e      	add	r3, pc, #504	; (adr r3, 402c90 <atan+0x2e8>)
  402a98:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a9c:	f004 f94c 	bl	406d38 <__aeabi_dsub>
  402aa0:	4632      	mov	r2, r6
  402aa2:	463b      	mov	r3, r7
  402aa4:	f004 fafc 	bl	4070a0 <__aeabi_dmul>
  402aa8:	a37b      	add	r3, pc, #492	; (adr r3, 402c98 <atan+0x2f0>)
  402aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
  402aae:	f004 f943 	bl	406d38 <__aeabi_dsub>
  402ab2:	4632      	mov	r2, r6
  402ab4:	463b      	mov	r3, r7
  402ab6:	f004 faf3 	bl	4070a0 <__aeabi_dmul>
  402aba:	a379      	add	r3, pc, #484	; (adr r3, 402ca0 <atan+0x2f8>)
  402abc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ac0:	f004 f93a 	bl	406d38 <__aeabi_dsub>
  402ac4:	4632      	mov	r2, r6
  402ac6:	463b      	mov	r3, r7
  402ac8:	f004 faea 	bl	4070a0 <__aeabi_dmul>
  402acc:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402ad0:	4602      	mov	r2, r0
  402ad2:	460b      	mov	r3, r1
  402ad4:	d069      	beq.n	402baa <atan+0x202>
  402ad6:	4640      	mov	r0, r8
  402ad8:	4649      	mov	r1, r9
  402ada:	f004 f92f 	bl	406d3c <__adddf3>
  402ade:	4622      	mov	r2, r4
  402ae0:	462b      	mov	r3, r5
  402ae2:	f004 fadd 	bl	4070a0 <__aeabi_dmul>
  402ae6:	4e78      	ldr	r6, [pc, #480]	; (402cc8 <atan+0x320>)
  402ae8:	4b78      	ldr	r3, [pc, #480]	; (402ccc <atan+0x324>)
  402aea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402aee:	445e      	add	r6, fp
  402af0:	449b      	add	fp, r3
  402af2:	e9db 2300 	ldrd	r2, r3, [fp]
  402af6:	f004 f91f 	bl	406d38 <__aeabi_dsub>
  402afa:	4622      	mov	r2, r4
  402afc:	462b      	mov	r3, r5
  402afe:	f004 f91b 	bl	406d38 <__aeabi_dsub>
  402b02:	4602      	mov	r2, r0
  402b04:	460b      	mov	r3, r1
  402b06:	e9d6 0100 	ldrd	r0, r1, [r6]
  402b0a:	f004 f915 	bl	406d38 <__aeabi_dsub>
  402b0e:	f1ba 0f00 	cmp.w	sl, #0
  402b12:	4604      	mov	r4, r0
  402b14:	f6bf af5f 	bge.w	4029d6 <atan+0x2e>
  402b18:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402b1c:	4620      	mov	r0, r4
  402b1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b22:	2800      	cmp	r0, #0
  402b24:	f43f af50 	beq.w	4029c8 <atan+0x20>
  402b28:	4622      	mov	r2, r4
  402b2a:	4620      	mov	r0, r4
  402b2c:	462b      	mov	r3, r5
  402b2e:	4629      	mov	r1, r5
  402b30:	f004 f904 	bl	406d3c <__adddf3>
  402b34:	4604      	mov	r4, r0
  402b36:	4620      	mov	r0, r4
  402b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b3c:	a35a      	add	r3, pc, #360	; (adr r3, 402ca8 <atan+0x300>)
  402b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b42:	f004 f8fb 	bl	406d3c <__adddf3>
  402b46:	2200      	movs	r2, #0
  402b48:	4b61      	ldr	r3, [pc, #388]	; (402cd0 <atan+0x328>)
  402b4a:	f004 fd39 	bl	4075c0 <__aeabi_dcmpgt>
  402b4e:	2800      	cmp	r0, #0
  402b50:	f43f af4d 	beq.w	4029ee <atan+0x46>
  402b54:	4629      	mov	r1, r5
  402b56:	4620      	mov	r0, r4
  402b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402b5c:	f000 f8c2 	bl	402ce4 <fabs>
  402b60:	4b5c      	ldr	r3, [pc, #368]	; (402cd4 <atan+0x32c>)
  402b62:	429e      	cmp	r6, r3
  402b64:	4604      	mov	r4, r0
  402b66:	460d      	mov	r5, r1
  402b68:	dc2f      	bgt.n	402bca <atan+0x222>
  402b6a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  402b6e:	429e      	cmp	r6, r3
  402b70:	dc54      	bgt.n	402c1c <atan+0x274>
  402b72:	4602      	mov	r2, r0
  402b74:	460b      	mov	r3, r1
  402b76:	f004 f8e1 	bl	406d3c <__adddf3>
  402b7a:	2200      	movs	r2, #0
  402b7c:	4b54      	ldr	r3, [pc, #336]	; (402cd0 <atan+0x328>)
  402b7e:	f004 f8db 	bl	406d38 <__aeabi_dsub>
  402b82:	2200      	movs	r2, #0
  402b84:	4606      	mov	r6, r0
  402b86:	460f      	mov	r7, r1
  402b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402b8c:	4620      	mov	r0, r4
  402b8e:	4629      	mov	r1, r5
  402b90:	f004 f8d4 	bl	406d3c <__adddf3>
  402b94:	4602      	mov	r2, r0
  402b96:	460b      	mov	r3, r1
  402b98:	4630      	mov	r0, r6
  402b9a:	4639      	mov	r1, r7
  402b9c:	f004 fbaa 	bl	4072f4 <__aeabi_ddiv>
  402ba0:	f04f 0b00 	mov.w	fp, #0
  402ba4:	4604      	mov	r4, r0
  402ba6:	460d      	mov	r5, r1
  402ba8:	e723      	b.n	4029f2 <atan+0x4a>
  402baa:	4640      	mov	r0, r8
  402bac:	4649      	mov	r1, r9
  402bae:	f004 f8c5 	bl	406d3c <__adddf3>
  402bb2:	4622      	mov	r2, r4
  402bb4:	462b      	mov	r3, r5
  402bb6:	f004 fa73 	bl	4070a0 <__aeabi_dmul>
  402bba:	4602      	mov	r2, r0
  402bbc:	460b      	mov	r3, r1
  402bbe:	4620      	mov	r0, r4
  402bc0:	4629      	mov	r1, r5
  402bc2:	f004 f8b9 	bl	406d38 <__aeabi_dsub>
  402bc6:	4604      	mov	r4, r0
  402bc8:	e705      	b.n	4029d6 <atan+0x2e>
  402bca:	4b43      	ldr	r3, [pc, #268]	; (402cd8 <atan+0x330>)
  402bcc:	429e      	cmp	r6, r3
  402bce:	dc1a      	bgt.n	402c06 <atan+0x25e>
  402bd0:	2200      	movs	r2, #0
  402bd2:	4b42      	ldr	r3, [pc, #264]	; (402cdc <atan+0x334>)
  402bd4:	f004 f8b0 	bl	406d38 <__aeabi_dsub>
  402bd8:	2200      	movs	r2, #0
  402bda:	4606      	mov	r6, r0
  402bdc:	460f      	mov	r7, r1
  402bde:	4b3f      	ldr	r3, [pc, #252]	; (402cdc <atan+0x334>)
  402be0:	4620      	mov	r0, r4
  402be2:	4629      	mov	r1, r5
  402be4:	f004 fa5c 	bl	4070a0 <__aeabi_dmul>
  402be8:	2200      	movs	r2, #0
  402bea:	4b39      	ldr	r3, [pc, #228]	; (402cd0 <atan+0x328>)
  402bec:	f004 f8a6 	bl	406d3c <__adddf3>
  402bf0:	4602      	mov	r2, r0
  402bf2:	460b      	mov	r3, r1
  402bf4:	4630      	mov	r0, r6
  402bf6:	4639      	mov	r1, r7
  402bf8:	f004 fb7c 	bl	4072f4 <__aeabi_ddiv>
  402bfc:	f04f 0b02 	mov.w	fp, #2
  402c00:	4604      	mov	r4, r0
  402c02:	460d      	mov	r5, r1
  402c04:	e6f5      	b.n	4029f2 <atan+0x4a>
  402c06:	4602      	mov	r2, r0
  402c08:	460b      	mov	r3, r1
  402c0a:	2000      	movs	r0, #0
  402c0c:	4934      	ldr	r1, [pc, #208]	; (402ce0 <atan+0x338>)
  402c0e:	f004 fb71 	bl	4072f4 <__aeabi_ddiv>
  402c12:	f04f 0b03 	mov.w	fp, #3
  402c16:	4604      	mov	r4, r0
  402c18:	460d      	mov	r5, r1
  402c1a:	e6ea      	b.n	4029f2 <atan+0x4a>
  402c1c:	2200      	movs	r2, #0
  402c1e:	4b2c      	ldr	r3, [pc, #176]	; (402cd0 <atan+0x328>)
  402c20:	f004 f88a 	bl	406d38 <__aeabi_dsub>
  402c24:	2200      	movs	r2, #0
  402c26:	4606      	mov	r6, r0
  402c28:	460f      	mov	r7, r1
  402c2a:	4b29      	ldr	r3, [pc, #164]	; (402cd0 <atan+0x328>)
  402c2c:	4620      	mov	r0, r4
  402c2e:	4629      	mov	r1, r5
  402c30:	f004 f884 	bl	406d3c <__adddf3>
  402c34:	4602      	mov	r2, r0
  402c36:	460b      	mov	r3, r1
  402c38:	4630      	mov	r0, r6
  402c3a:	4639      	mov	r1, r7
  402c3c:	f004 fb5a 	bl	4072f4 <__aeabi_ddiv>
  402c40:	f04f 0b01 	mov.w	fp, #1
  402c44:	4604      	mov	r4, r0
  402c46:	460d      	mov	r5, r1
  402c48:	e6d3      	b.n	4029f2 <atan+0x4a>
  402c4a:	bf00      	nop
  402c4c:	f3af 8000 	nop.w
  402c50:	e322da11 	.word	0xe322da11
  402c54:	3f90ad3a 	.word	0x3f90ad3a
  402c58:	24760deb 	.word	0x24760deb
  402c5c:	3fa97b4b 	.word	0x3fa97b4b
  402c60:	a0d03d51 	.word	0xa0d03d51
  402c64:	3fb10d66 	.word	0x3fb10d66
  402c68:	c54c206e 	.word	0xc54c206e
  402c6c:	3fb745cd 	.word	0x3fb745cd
  402c70:	920083ff 	.word	0x920083ff
  402c74:	3fc24924 	.word	0x3fc24924
  402c78:	5555550d 	.word	0x5555550d
  402c7c:	3fd55555 	.word	0x3fd55555
  402c80:	2c6a6c2f 	.word	0x2c6a6c2f
  402c84:	bfa2b444 	.word	0xbfa2b444
  402c88:	52defd9a 	.word	0x52defd9a
  402c8c:	3fadde2d 	.word	0x3fadde2d
  402c90:	af749a6d 	.word	0xaf749a6d
  402c94:	3fb3b0f2 	.word	0x3fb3b0f2
  402c98:	fe231671 	.word	0xfe231671
  402c9c:	3fbc71c6 	.word	0x3fbc71c6
  402ca0:	9998ebc4 	.word	0x9998ebc4
  402ca4:	3fc99999 	.word	0x3fc99999
  402ca8:	8800759c 	.word	0x8800759c
  402cac:	7e37e43c 	.word	0x7e37e43c
  402cb0:	440fffff 	.word	0x440fffff
  402cb4:	7ff00000 	.word	0x7ff00000
  402cb8:	3ff921fb 	.word	0x3ff921fb
  402cbc:	bff921fb 	.word	0xbff921fb
  402cc0:	54442d18 	.word	0x54442d18
  402cc4:	3fdbffff 	.word	0x3fdbffff
  402cc8:	004081a0 	.word	0x004081a0
  402ccc:	00408180 	.word	0x00408180
  402cd0:	3ff00000 	.word	0x3ff00000
  402cd4:	3ff2ffff 	.word	0x3ff2ffff
  402cd8:	40037fff 	.word	0x40037fff
  402cdc:	3ff80000 	.word	0x3ff80000
  402ce0:	bff00000 	.word	0xbff00000

00402ce4 <fabs>:
  402ce4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402ce8:	4770      	bx	lr
  402cea:	bf00      	nop

00402cec <matherr>:
  402cec:	2000      	movs	r0, #0
  402cee:	4770      	bx	lr

00402cf0 <atof>:
  402cf0:	2100      	movs	r1, #0
  402cf2:	f001 bc11 	b.w	404518 <strtod>

00402cf6 <atoi>:
  402cf6:	220a      	movs	r2, #10
  402cf8:	2100      	movs	r1, #0
  402cfa:	f001 bcd5 	b.w	4046a8 <strtol>
	...

00402d00 <__errno>:
  402d00:	4b01      	ldr	r3, [pc, #4]	; (402d08 <__errno+0x8>)
  402d02:	6818      	ldr	r0, [r3, #0]
  402d04:	4770      	bx	lr
  402d06:	bf00      	nop
  402d08:	20000078 	.word	0x20000078

00402d0c <__libc_init_array>:
  402d0c:	b570      	push	{r4, r5, r6, lr}
  402d0e:	4b0e      	ldr	r3, [pc, #56]	; (402d48 <__libc_init_array+0x3c>)
  402d10:	4c0e      	ldr	r4, [pc, #56]	; (402d4c <__libc_init_array+0x40>)
  402d12:	1ae4      	subs	r4, r4, r3
  402d14:	10a4      	asrs	r4, r4, #2
  402d16:	2500      	movs	r5, #0
  402d18:	461e      	mov	r6, r3
  402d1a:	42a5      	cmp	r5, r4
  402d1c:	d004      	beq.n	402d28 <__libc_init_array+0x1c>
  402d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d22:	4798      	blx	r3
  402d24:	3501      	adds	r5, #1
  402d26:	e7f8      	b.n	402d1a <__libc_init_array+0xe>
  402d28:	f005 fbd6 	bl	4084d8 <_init>
  402d2c:	4c08      	ldr	r4, [pc, #32]	; (402d50 <__libc_init_array+0x44>)
  402d2e:	4b09      	ldr	r3, [pc, #36]	; (402d54 <__libc_init_array+0x48>)
  402d30:	1ae4      	subs	r4, r4, r3
  402d32:	10a4      	asrs	r4, r4, #2
  402d34:	2500      	movs	r5, #0
  402d36:	461e      	mov	r6, r3
  402d38:	42a5      	cmp	r5, r4
  402d3a:	d004      	beq.n	402d46 <__libc_init_array+0x3a>
  402d3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402d40:	4798      	blx	r3
  402d42:	3501      	adds	r5, #1
  402d44:	e7f8      	b.n	402d38 <__libc_init_array+0x2c>
  402d46:	bd70      	pop	{r4, r5, r6, pc}
  402d48:	004084e4 	.word	0x004084e4
  402d4c:	004084e4 	.word	0x004084e4
  402d50:	004084e8 	.word	0x004084e8
  402d54:	004084e4 	.word	0x004084e4

00402d58 <memcpy>:
  402d58:	b510      	push	{r4, lr}
  402d5a:	1e43      	subs	r3, r0, #1
  402d5c:	440a      	add	r2, r1
  402d5e:	4291      	cmp	r1, r2
  402d60:	d004      	beq.n	402d6c <memcpy+0x14>
  402d62:	f811 4b01 	ldrb.w	r4, [r1], #1
  402d66:	f803 4f01 	strb.w	r4, [r3, #1]!
  402d6a:	e7f8      	b.n	402d5e <memcpy+0x6>
  402d6c:	bd10      	pop	{r4, pc}

00402d6e <memset>:
  402d6e:	4402      	add	r2, r0
  402d70:	4603      	mov	r3, r0
  402d72:	4293      	cmp	r3, r2
  402d74:	d002      	beq.n	402d7c <memset+0xe>
  402d76:	f803 1b01 	strb.w	r1, [r3], #1
  402d7a:	e7fa      	b.n	402d72 <memset+0x4>
  402d7c:	4770      	bx	lr

00402d7e <__cvt>:
  402d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d82:	b088      	sub	sp, #32
  402d84:	2b00      	cmp	r3, #0
  402d86:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402d88:	9912      	ldr	r1, [sp, #72]	; 0x48
  402d8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402d8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402d90:	461e      	mov	r6, r3
  402d92:	f027 0720 	bic.w	r7, r7, #32
  402d96:	bfbb      	ittet	lt
  402d98:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402d9c:	461e      	movlt	r6, r3
  402d9e:	2300      	movge	r3, #0
  402da0:	232d      	movlt	r3, #45	; 0x2d
  402da2:	2f46      	cmp	r7, #70	; 0x46
  402da4:	4614      	mov	r4, r2
  402da6:	700b      	strb	r3, [r1, #0]
  402da8:	d003      	beq.n	402db2 <__cvt+0x34>
  402daa:	2f45      	cmp	r7, #69	; 0x45
  402dac:	d103      	bne.n	402db6 <__cvt+0x38>
  402dae:	3501      	adds	r5, #1
  402db0:	e001      	b.n	402db6 <__cvt+0x38>
  402db2:	2303      	movs	r3, #3
  402db4:	e000      	b.n	402db8 <__cvt+0x3a>
  402db6:	2302      	movs	r3, #2
  402db8:	aa07      	add	r2, sp, #28
  402dba:	9204      	str	r2, [sp, #16]
  402dbc:	aa06      	add	r2, sp, #24
  402dbe:	9203      	str	r2, [sp, #12]
  402dc0:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402dc4:	4622      	mov	r2, r4
  402dc6:	4633      	mov	r3, r6
  402dc8:	f001 fdd6 	bl	404978 <_dtoa_r>
  402dcc:	2f47      	cmp	r7, #71	; 0x47
  402dce:	4680      	mov	r8, r0
  402dd0:	d102      	bne.n	402dd8 <__cvt+0x5a>
  402dd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402dd4:	07db      	lsls	r3, r3, #31
  402dd6:	d528      	bpl.n	402e2a <__cvt+0xac>
  402dd8:	2f46      	cmp	r7, #70	; 0x46
  402dda:	eb08 0905 	add.w	r9, r8, r5
  402dde:	d111      	bne.n	402e04 <__cvt+0x86>
  402de0:	f898 3000 	ldrb.w	r3, [r8]
  402de4:	2b30      	cmp	r3, #48	; 0x30
  402de6:	d10a      	bne.n	402dfe <__cvt+0x80>
  402de8:	2200      	movs	r2, #0
  402dea:	2300      	movs	r3, #0
  402dec:	4620      	mov	r0, r4
  402dee:	4631      	mov	r1, r6
  402df0:	f004 fbbe 	bl	407570 <__aeabi_dcmpeq>
  402df4:	b918      	cbnz	r0, 402dfe <__cvt+0x80>
  402df6:	f1c5 0501 	rsb	r5, r5, #1
  402dfa:	f8ca 5000 	str.w	r5, [sl]
  402dfe:	f8da 3000 	ldr.w	r3, [sl]
  402e02:	4499      	add	r9, r3
  402e04:	2200      	movs	r2, #0
  402e06:	2300      	movs	r3, #0
  402e08:	4620      	mov	r0, r4
  402e0a:	4631      	mov	r1, r6
  402e0c:	f004 fbb0 	bl	407570 <__aeabi_dcmpeq>
  402e10:	b908      	cbnz	r0, 402e16 <__cvt+0x98>
  402e12:	2230      	movs	r2, #48	; 0x30
  402e14:	e002      	b.n	402e1c <__cvt+0x9e>
  402e16:	f8cd 901c 	str.w	r9, [sp, #28]
  402e1a:	e006      	b.n	402e2a <__cvt+0xac>
  402e1c:	9b07      	ldr	r3, [sp, #28]
  402e1e:	4599      	cmp	r9, r3
  402e20:	d903      	bls.n	402e2a <__cvt+0xac>
  402e22:	1c59      	adds	r1, r3, #1
  402e24:	9107      	str	r1, [sp, #28]
  402e26:	701a      	strb	r2, [r3, #0]
  402e28:	e7f8      	b.n	402e1c <__cvt+0x9e>
  402e2a:	9b07      	ldr	r3, [sp, #28]
  402e2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402e2e:	ebc8 0303 	rsb	r3, r8, r3
  402e32:	4640      	mov	r0, r8
  402e34:	6013      	str	r3, [r2, #0]
  402e36:	b008      	add	sp, #32
  402e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402e3c <__exponent>:
  402e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402e3e:	4603      	mov	r3, r0
  402e40:	2900      	cmp	r1, #0
  402e42:	bfb8      	it	lt
  402e44:	4249      	neglt	r1, r1
  402e46:	f803 2b02 	strb.w	r2, [r3], #2
  402e4a:	bfb4      	ite	lt
  402e4c:	222d      	movlt	r2, #45	; 0x2d
  402e4e:	222b      	movge	r2, #43	; 0x2b
  402e50:	2909      	cmp	r1, #9
  402e52:	7042      	strb	r2, [r0, #1]
  402e54:	dd19      	ble.n	402e8a <__exponent+0x4e>
  402e56:	f10d 0207 	add.w	r2, sp, #7
  402e5a:	4616      	mov	r6, r2
  402e5c:	250a      	movs	r5, #10
  402e5e:	fb91 f4f5 	sdiv	r4, r1, r5
  402e62:	fb05 1114 	mls	r1, r5, r4, r1
  402e66:	3130      	adds	r1, #48	; 0x30
  402e68:	2c09      	cmp	r4, #9
  402e6a:	f802 1d01 	strb.w	r1, [r2, #-1]!
  402e6e:	4621      	mov	r1, r4
  402e70:	dcf5      	bgt.n	402e5e <__exponent+0x22>
  402e72:	3130      	adds	r1, #48	; 0x30
  402e74:	1e54      	subs	r4, r2, #1
  402e76:	f802 1c01 	strb.w	r1, [r2, #-1]
  402e7a:	42b4      	cmp	r4, r6
  402e7c:	461a      	mov	r2, r3
  402e7e:	d20a      	bcs.n	402e96 <__exponent+0x5a>
  402e80:	f814 2b01 	ldrb.w	r2, [r4], #1
  402e84:	f803 2b01 	strb.w	r2, [r3], #1
  402e88:	e7f7      	b.n	402e7a <__exponent+0x3e>
  402e8a:	2430      	movs	r4, #48	; 0x30
  402e8c:	461a      	mov	r2, r3
  402e8e:	4421      	add	r1, r4
  402e90:	f802 4b02 	strb.w	r4, [r2], #2
  402e94:	7059      	strb	r1, [r3, #1]
  402e96:	1a10      	subs	r0, r2, r0
  402e98:	b002      	add	sp, #8
  402e9a:	bd70      	pop	{r4, r5, r6, pc}

00402e9c <_printf_float>:
  402e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ea0:	b091      	sub	sp, #68	; 0x44
  402ea2:	460c      	mov	r4, r1
  402ea4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  402ea8:	4616      	mov	r6, r2
  402eaa:	461f      	mov	r7, r3
  402eac:	4605      	mov	r5, r0
  402eae:	f002 ff9f 	bl	405df0 <_localeconv_r>
  402eb2:	6803      	ldr	r3, [r0, #0]
  402eb4:	9309      	str	r3, [sp, #36]	; 0x24
  402eb6:	4618      	mov	r0, r3
  402eb8:	f000 fd0e 	bl	4038d8 <strlen>
  402ebc:	2300      	movs	r3, #0
  402ebe:	930e      	str	r3, [sp, #56]	; 0x38
  402ec0:	f8d8 3000 	ldr.w	r3, [r8]
  402ec4:	900a      	str	r0, [sp, #40]	; 0x28
  402ec6:	3307      	adds	r3, #7
  402ec8:	f023 0307 	bic.w	r3, r3, #7
  402ecc:	f103 0208 	add.w	r2, r3, #8
  402ed0:	f894 9018 	ldrb.w	r9, [r4, #24]
  402ed4:	f8d4 b000 	ldr.w	fp, [r4]
  402ed8:	f8c8 2000 	str.w	r2, [r8]
  402edc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ee0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402ee4:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  402ee8:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402eec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402ef0:	930b      	str	r3, [sp, #44]	; 0x2c
  402ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402ef6:	4ba7      	ldr	r3, [pc, #668]	; (403194 <_printf_float+0x2f8>)
  402ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402efa:	4640      	mov	r0, r8
  402efc:	f004 fb6a 	bl	4075d4 <__aeabi_dcmpun>
  402f00:	b9a0      	cbnz	r0, 402f2c <_printf_float+0x90>
  402f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402f06:	4ba3      	ldr	r3, [pc, #652]	; (403194 <_printf_float+0x2f8>)
  402f08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f0a:	4640      	mov	r0, r8
  402f0c:	f004 fb44 	bl	407598 <__aeabi_dcmple>
  402f10:	b960      	cbnz	r0, 402f2c <_printf_float+0x90>
  402f12:	2200      	movs	r2, #0
  402f14:	2300      	movs	r3, #0
  402f16:	4640      	mov	r0, r8
  402f18:	4651      	mov	r1, sl
  402f1a:	f004 fb33 	bl	407584 <__aeabi_dcmplt>
  402f1e:	b110      	cbz	r0, 402f26 <_printf_float+0x8a>
  402f20:	232d      	movs	r3, #45	; 0x2d
  402f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402f26:	4b9c      	ldr	r3, [pc, #624]	; (403198 <_printf_float+0x2fc>)
  402f28:	4a9c      	ldr	r2, [pc, #624]	; (40319c <_printf_float+0x300>)
  402f2a:	e00a      	b.n	402f42 <_printf_float+0xa6>
  402f2c:	4642      	mov	r2, r8
  402f2e:	4653      	mov	r3, sl
  402f30:	4640      	mov	r0, r8
  402f32:	4651      	mov	r1, sl
  402f34:	f004 fb4e 	bl	4075d4 <__aeabi_dcmpun>
  402f38:	2800      	cmp	r0, #0
  402f3a:	f000 8192 	beq.w	403262 <_printf_float+0x3c6>
  402f3e:	4b98      	ldr	r3, [pc, #608]	; (4031a0 <_printf_float+0x304>)
  402f40:	4a98      	ldr	r2, [pc, #608]	; (4031a4 <_printf_float+0x308>)
  402f42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402f46:	bf8c      	ite	hi
  402f48:	4690      	movhi	r8, r2
  402f4a:	4698      	movls	r8, r3
  402f4c:	2303      	movs	r3, #3
  402f4e:	6123      	str	r3, [r4, #16]
  402f50:	f02b 0304 	bic.w	r3, fp, #4
  402f54:	6023      	str	r3, [r4, #0]
  402f56:	f04f 0a00 	mov.w	sl, #0
  402f5a:	e03d      	b.n	402fd8 <_printf_float+0x13c>
  402f5c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  402f60:	f000 818a 	beq.w	403278 <_printf_float+0x3dc>
  402f64:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402f68:	f000 8186 	beq.w	403278 <_printf_float+0x3dc>
  402f6c:	6023      	str	r3, [r4, #0]
  402f6e:	2100      	movs	r1, #0
  402f70:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402f74:	9301      	str	r3, [sp, #4]
  402f76:	6863      	ldr	r3, [r4, #4]
  402f78:	9005      	str	r0, [sp, #20]
  402f7a:	9202      	str	r2, [sp, #8]
  402f7c:	9300      	str	r3, [sp, #0]
  402f7e:	4642      	mov	r2, r8
  402f80:	4653      	mov	r3, sl
  402f82:	9106      	str	r1, [sp, #24]
  402f84:	f8cd 9010 	str.w	r9, [sp, #16]
  402f88:	f8cd e00c 	str.w	lr, [sp, #12]
  402f8c:	4628      	mov	r0, r5
  402f8e:	f7ff fef6 	bl	402d7e <__cvt>
  402f92:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  402f96:	2b47      	cmp	r3, #71	; 0x47
  402f98:	4680      	mov	r8, r0
  402f9a:	f000 8184 	beq.w	4032a6 <_printf_float+0x40a>
  402f9e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402fa2:	990d      	ldr	r1, [sp, #52]	; 0x34
  402fa4:	f200 818d 	bhi.w	4032c2 <_printf_float+0x426>
  402fa8:	3901      	subs	r1, #1
  402faa:	464a      	mov	r2, r9
  402fac:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402fb0:	910d      	str	r1, [sp, #52]	; 0x34
  402fb2:	f7ff ff43 	bl	402e3c <__exponent>
  402fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402fb8:	1883      	adds	r3, r0, r2
  402fba:	2a01      	cmp	r2, #1
  402fbc:	4682      	mov	sl, r0
  402fbe:	6123      	str	r3, [r4, #16]
  402fc0:	f300 817c 	bgt.w	4032bc <_printf_float+0x420>
  402fc4:	6822      	ldr	r2, [r4, #0]
  402fc6:	07d1      	lsls	r1, r2, #31
  402fc8:	f100 8178 	bmi.w	4032bc <_printf_float+0x420>
  402fcc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402fd0:	b113      	cbz	r3, 402fd8 <_printf_float+0x13c>
  402fd2:	232d      	movs	r3, #45	; 0x2d
  402fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402fd8:	9700      	str	r7, [sp, #0]
  402fda:	4633      	mov	r3, r6
  402fdc:	aa0f      	add	r2, sp, #60	; 0x3c
  402fde:	4621      	mov	r1, r4
  402fe0:	4628      	mov	r0, r5
  402fe2:	f000 f99f 	bl	403324 <_printf_common>
  402fe6:	3001      	adds	r0, #1
  402fe8:	d102      	bne.n	402ff0 <_printf_float+0x154>
  402fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402fee:	e196      	b.n	40331e <_printf_float+0x482>
  402ff0:	6823      	ldr	r3, [r4, #0]
  402ff2:	055a      	lsls	r2, r3, #21
  402ff4:	d401      	bmi.n	402ffa <_printf_float+0x15e>
  402ff6:	6923      	ldr	r3, [r4, #16]
  402ff8:	e065      	b.n	4030c6 <_printf_float+0x22a>
  402ffa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402ffe:	f240 80d5 	bls.w	4031ac <_printf_float+0x310>
  403002:	2200      	movs	r2, #0
  403004:	2300      	movs	r3, #0
  403006:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40300a:	f004 fab1 	bl	407570 <__aeabi_dcmpeq>
  40300e:	b378      	cbz	r0, 403070 <_printf_float+0x1d4>
  403010:	2301      	movs	r3, #1
  403012:	4a65      	ldr	r2, [pc, #404]	; (4031a8 <_printf_float+0x30c>)
  403014:	4631      	mov	r1, r6
  403016:	4628      	mov	r0, r5
  403018:	47b8      	blx	r7
  40301a:	3001      	adds	r0, #1
  40301c:	d0e5      	beq.n	402fea <_printf_float+0x14e>
  40301e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403022:	429a      	cmp	r2, r3
  403024:	db0b      	blt.n	40303e <_printf_float+0x1a2>
  403026:	6823      	ldr	r3, [r4, #0]
  403028:	07d8      	lsls	r0, r3, #31
  40302a:	d408      	bmi.n	40303e <_printf_float+0x1a2>
  40302c:	6823      	ldr	r3, [r4, #0]
  40302e:	079b      	lsls	r3, r3, #30
  403030:	f140 8111 	bpl.w	403256 <_printf_float+0x3ba>
  403034:	f04f 0800 	mov.w	r8, #0
  403038:	f104 0919 	add.w	r9, r4, #25
  40303c:	e106      	b.n	40324c <_printf_float+0x3b0>
  40303e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403040:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403042:	4631      	mov	r1, r6
  403044:	4628      	mov	r0, r5
  403046:	47b8      	blx	r7
  403048:	3001      	adds	r0, #1
  40304a:	d0ce      	beq.n	402fea <_printf_float+0x14e>
  40304c:	f04f 0800 	mov.w	r8, #0
  403050:	f104 091a 	add.w	r9, r4, #26
  403054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403056:	3b01      	subs	r3, #1
  403058:	4598      	cmp	r8, r3
  40305a:	dae7      	bge.n	40302c <_printf_float+0x190>
  40305c:	2301      	movs	r3, #1
  40305e:	464a      	mov	r2, r9
  403060:	4631      	mov	r1, r6
  403062:	4628      	mov	r0, r5
  403064:	47b8      	blx	r7
  403066:	3001      	adds	r0, #1
  403068:	d0bf      	beq.n	402fea <_printf_float+0x14e>
  40306a:	f108 0801 	add.w	r8, r8, #1
  40306e:	e7f1      	b.n	403054 <_printf_float+0x1b8>
  403070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403072:	2b00      	cmp	r3, #0
  403074:	dc29      	bgt.n	4030ca <_printf_float+0x22e>
  403076:	2301      	movs	r3, #1
  403078:	4a4b      	ldr	r2, [pc, #300]	; (4031a8 <_printf_float+0x30c>)
  40307a:	4631      	mov	r1, r6
  40307c:	4628      	mov	r0, r5
  40307e:	47b8      	blx	r7
  403080:	3001      	adds	r0, #1
  403082:	d0b2      	beq.n	402fea <_printf_float+0x14e>
  403084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403086:	b923      	cbnz	r3, 403092 <_printf_float+0x1f6>
  403088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40308a:	b913      	cbnz	r3, 403092 <_printf_float+0x1f6>
  40308c:	6823      	ldr	r3, [r4, #0]
  40308e:	07d9      	lsls	r1, r3, #31
  403090:	d5cc      	bpl.n	40302c <_printf_float+0x190>
  403092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403094:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403096:	4631      	mov	r1, r6
  403098:	4628      	mov	r0, r5
  40309a:	47b8      	blx	r7
  40309c:	3001      	adds	r0, #1
  40309e:	d0a4      	beq.n	402fea <_printf_float+0x14e>
  4030a0:	f04f 0900 	mov.w	r9, #0
  4030a4:	f104 0a1a 	add.w	sl, r4, #26
  4030a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030aa:	425b      	negs	r3, r3
  4030ac:	4599      	cmp	r9, r3
  4030ae:	da09      	bge.n	4030c4 <_printf_float+0x228>
  4030b0:	2301      	movs	r3, #1
  4030b2:	4652      	mov	r2, sl
  4030b4:	4631      	mov	r1, r6
  4030b6:	4628      	mov	r0, r5
  4030b8:	47b8      	blx	r7
  4030ba:	3001      	adds	r0, #1
  4030bc:	d095      	beq.n	402fea <_printf_float+0x14e>
  4030be:	f109 0901 	add.w	r9, r9, #1
  4030c2:	e7f1      	b.n	4030a8 <_printf_float+0x20c>
  4030c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030c6:	4642      	mov	r2, r8
  4030c8:	e0a7      	b.n	40321a <_printf_float+0x37e>
  4030ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4030cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4030ce:	429a      	cmp	r2, r3
  4030d0:	bfa8      	it	ge
  4030d2:	461a      	movge	r2, r3
  4030d4:	2a00      	cmp	r2, #0
  4030d6:	4691      	mov	r9, r2
  4030d8:	dc06      	bgt.n	4030e8 <_printf_float+0x24c>
  4030da:	f04f 0a00 	mov.w	sl, #0
  4030de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  4030e2:	f104 0b1a 	add.w	fp, r4, #26
  4030e6:	e011      	b.n	40310c <_printf_float+0x270>
  4030e8:	4613      	mov	r3, r2
  4030ea:	4631      	mov	r1, r6
  4030ec:	4642      	mov	r2, r8
  4030ee:	4628      	mov	r0, r5
  4030f0:	47b8      	blx	r7
  4030f2:	3001      	adds	r0, #1
  4030f4:	d1f1      	bne.n	4030da <_printf_float+0x23e>
  4030f6:	e778      	b.n	402fea <_printf_float+0x14e>
  4030f8:	2301      	movs	r3, #1
  4030fa:	465a      	mov	r2, fp
  4030fc:	4631      	mov	r1, r6
  4030fe:	4628      	mov	r0, r5
  403100:	47b8      	blx	r7
  403102:	3001      	adds	r0, #1
  403104:	f43f af71 	beq.w	402fea <_printf_float+0x14e>
  403108:	f10a 0a01 	add.w	sl, sl, #1
  40310c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40310e:	ebc9 0203 	rsb	r2, r9, r3
  403112:	4592      	cmp	sl, r2
  403114:	dbf0      	blt.n	4030f8 <_printf_float+0x25c>
  403116:	eb08 0903 	add.w	r9, r8, r3
  40311a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40311c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40311e:	429a      	cmp	r2, r3
  403120:	db0f      	blt.n	403142 <_printf_float+0x2a6>
  403122:	6823      	ldr	r3, [r4, #0]
  403124:	07da      	lsls	r2, r3, #31
  403126:	d40c      	bmi.n	403142 <_printf_float+0x2a6>
  403128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40312a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40312c:	4498      	add	r8, r3
  40312e:	ebc9 0808 	rsb	r8, r9, r8
  403132:	1a9b      	subs	r3, r3, r2
  403134:	4598      	cmp	r8, r3
  403136:	bfa8      	it	ge
  403138:	4698      	movge	r8, r3
  40313a:	f1b8 0f00 	cmp.w	r8, #0
  40313e:	dc08      	bgt.n	403152 <_printf_float+0x2b6>
  403140:	e00f      	b.n	403162 <_printf_float+0x2c6>
  403142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403144:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403146:	4631      	mov	r1, r6
  403148:	4628      	mov	r0, r5
  40314a:	47b8      	blx	r7
  40314c:	3001      	adds	r0, #1
  40314e:	d1eb      	bne.n	403128 <_printf_float+0x28c>
  403150:	e74b      	b.n	402fea <_printf_float+0x14e>
  403152:	4643      	mov	r3, r8
  403154:	464a      	mov	r2, r9
  403156:	4631      	mov	r1, r6
  403158:	4628      	mov	r0, r5
  40315a:	47b8      	blx	r7
  40315c:	3001      	adds	r0, #1
  40315e:	f43f af44 	beq.w	402fea <_printf_float+0x14e>
  403162:	f04f 0900 	mov.w	r9, #0
  403166:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  40316a:	f104 0a1a 	add.w	sl, r4, #26
  40316e:	e009      	b.n	403184 <_printf_float+0x2e8>
  403170:	2301      	movs	r3, #1
  403172:	4652      	mov	r2, sl
  403174:	4631      	mov	r1, r6
  403176:	4628      	mov	r0, r5
  403178:	47b8      	blx	r7
  40317a:	3001      	adds	r0, #1
  40317c:	f43f af35 	beq.w	402fea <_printf_float+0x14e>
  403180:	f109 0901 	add.w	r9, r9, #1
  403184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403188:	1a9b      	subs	r3, r3, r2
  40318a:	ebc8 0303 	rsb	r3, r8, r3
  40318e:	4599      	cmp	r9, r3
  403190:	dbee      	blt.n	403170 <_printf_float+0x2d4>
  403192:	e74b      	b.n	40302c <_printf_float+0x190>
  403194:	7fefffff 	.word	0x7fefffff
  403198:	004081c4 	.word	0x004081c4
  40319c:	004081c8 	.word	0x004081c8
  4031a0:	004081cc 	.word	0x004081cc
  4031a4:	004081d0 	.word	0x004081d0
  4031a8:	004081d4 	.word	0x004081d4
  4031ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4031ae:	2a01      	cmp	r2, #1
  4031b0:	dc01      	bgt.n	4031b6 <_printf_float+0x31a>
  4031b2:	07db      	lsls	r3, r3, #31
  4031b4:	d538      	bpl.n	403228 <_printf_float+0x38c>
  4031b6:	2301      	movs	r3, #1
  4031b8:	4642      	mov	r2, r8
  4031ba:	4631      	mov	r1, r6
  4031bc:	4628      	mov	r0, r5
  4031be:	47b8      	blx	r7
  4031c0:	3001      	adds	r0, #1
  4031c2:	f43f af12 	beq.w	402fea <_printf_float+0x14e>
  4031c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4031ca:	4631      	mov	r1, r6
  4031cc:	4628      	mov	r0, r5
  4031ce:	47b8      	blx	r7
  4031d0:	3001      	adds	r0, #1
  4031d2:	f43f af0a 	beq.w	402fea <_printf_float+0x14e>
  4031d6:	2200      	movs	r2, #0
  4031d8:	2300      	movs	r3, #0
  4031da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  4031de:	f004 f9c7 	bl	407570 <__aeabi_dcmpeq>
  4031e2:	b120      	cbz	r0, 4031ee <_printf_float+0x352>
  4031e4:	f04f 0800 	mov.w	r8, #0
  4031e8:	f104 091a 	add.w	r9, r4, #26
  4031ec:	e00e      	b.n	40320c <_printf_float+0x370>
  4031ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4031f0:	f108 0201 	add.w	r2, r8, #1
  4031f4:	3b01      	subs	r3, #1
  4031f6:	e019      	b.n	40322c <_printf_float+0x390>
  4031f8:	2301      	movs	r3, #1
  4031fa:	464a      	mov	r2, r9
  4031fc:	4631      	mov	r1, r6
  4031fe:	4628      	mov	r0, r5
  403200:	47b8      	blx	r7
  403202:	3001      	adds	r0, #1
  403204:	f43f aef1 	beq.w	402fea <_printf_float+0x14e>
  403208:	f108 0801 	add.w	r8, r8, #1
  40320c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40320e:	3b01      	subs	r3, #1
  403210:	4598      	cmp	r8, r3
  403212:	dbf1      	blt.n	4031f8 <_printf_float+0x35c>
  403214:	4653      	mov	r3, sl
  403216:	f104 0250 	add.w	r2, r4, #80	; 0x50
  40321a:	4631      	mov	r1, r6
  40321c:	4628      	mov	r0, r5
  40321e:	47b8      	blx	r7
  403220:	3001      	adds	r0, #1
  403222:	f47f af03 	bne.w	40302c <_printf_float+0x190>
  403226:	e6e0      	b.n	402fea <_printf_float+0x14e>
  403228:	2301      	movs	r3, #1
  40322a:	4642      	mov	r2, r8
  40322c:	4631      	mov	r1, r6
  40322e:	4628      	mov	r0, r5
  403230:	47b8      	blx	r7
  403232:	3001      	adds	r0, #1
  403234:	d1ee      	bne.n	403214 <_printf_float+0x378>
  403236:	e6d8      	b.n	402fea <_printf_float+0x14e>
  403238:	2301      	movs	r3, #1
  40323a:	464a      	mov	r2, r9
  40323c:	4631      	mov	r1, r6
  40323e:	4628      	mov	r0, r5
  403240:	47b8      	blx	r7
  403242:	3001      	adds	r0, #1
  403244:	f43f aed1 	beq.w	402fea <_printf_float+0x14e>
  403248:	f108 0801 	add.w	r8, r8, #1
  40324c:	68e3      	ldr	r3, [r4, #12]
  40324e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403250:	1a9b      	subs	r3, r3, r2
  403252:	4598      	cmp	r8, r3
  403254:	dbf0      	blt.n	403238 <_printf_float+0x39c>
  403256:	68e0      	ldr	r0, [r4, #12]
  403258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40325a:	4298      	cmp	r0, r3
  40325c:	bfb8      	it	lt
  40325e:	4618      	movlt	r0, r3
  403260:	e05d      	b.n	40331e <_printf_float+0x482>
  403262:	6862      	ldr	r2, [r4, #4]
  403264:	1c53      	adds	r3, r2, #1
  403266:	a80e      	add	r0, sp, #56	; 0x38
  403268:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  40326c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403270:	f47f ae74 	bne.w	402f5c <_printf_float+0xc0>
  403274:	2206      	movs	r2, #6
  403276:	e001      	b.n	40327c <_printf_float+0x3e0>
  403278:	b912      	cbnz	r2, 403280 <_printf_float+0x3e4>
  40327a:	2201      	movs	r2, #1
  40327c:	6062      	str	r2, [r4, #4]
  40327e:	e675      	b.n	402f6c <_printf_float+0xd0>
  403280:	2100      	movs	r1, #0
  403282:	9106      	str	r1, [sp, #24]
  403284:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403288:	e88d 000c 	stmia.w	sp, {r2, r3}
  40328c:	6023      	str	r3, [r4, #0]
  40328e:	9005      	str	r0, [sp, #20]
  403290:	4642      	mov	r2, r8
  403292:	f8cd 9010 	str.w	r9, [sp, #16]
  403296:	f8cd e00c 	str.w	lr, [sp, #12]
  40329a:	9102      	str	r1, [sp, #8]
  40329c:	4653      	mov	r3, sl
  40329e:	4628      	mov	r0, r5
  4032a0:	f7ff fd6d 	bl	402d7e <__cvt>
  4032a4:	4680      	mov	r8, r0
  4032a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4032a8:	1cd8      	adds	r0, r3, #3
  4032aa:	db02      	blt.n	4032b2 <_printf_float+0x416>
  4032ac:	6862      	ldr	r2, [r4, #4]
  4032ae:	4293      	cmp	r3, r2
  4032b0:	dd1d      	ble.n	4032ee <_printf_float+0x452>
  4032b2:	f1a9 0902 	sub.w	r9, r9, #2
  4032b6:	fa5f f989 	uxtb.w	r9, r9
  4032ba:	e670      	b.n	402f9e <_printf_float+0x102>
  4032bc:	3301      	adds	r3, #1
  4032be:	6123      	str	r3, [r4, #16]
  4032c0:	e684      	b.n	402fcc <_printf_float+0x130>
  4032c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  4032c6:	d114      	bne.n	4032f2 <_printf_float+0x456>
  4032c8:	2900      	cmp	r1, #0
  4032ca:	6863      	ldr	r3, [r4, #4]
  4032cc:	dd07      	ble.n	4032de <_printf_float+0x442>
  4032ce:	6121      	str	r1, [r4, #16]
  4032d0:	b913      	cbnz	r3, 4032d8 <_printf_float+0x43c>
  4032d2:	6822      	ldr	r2, [r4, #0]
  4032d4:	07d2      	lsls	r2, r2, #31
  4032d6:	d51d      	bpl.n	403314 <_printf_float+0x478>
  4032d8:	3301      	adds	r3, #1
  4032da:	440b      	add	r3, r1
  4032dc:	e019      	b.n	403312 <_printf_float+0x476>
  4032de:	b913      	cbnz	r3, 4032e6 <_printf_float+0x44a>
  4032e0:	6822      	ldr	r2, [r4, #0]
  4032e2:	07d0      	lsls	r0, r2, #31
  4032e4:	d501      	bpl.n	4032ea <_printf_float+0x44e>
  4032e6:	3302      	adds	r3, #2
  4032e8:	e013      	b.n	403312 <_printf_float+0x476>
  4032ea:	2301      	movs	r3, #1
  4032ec:	e011      	b.n	403312 <_printf_float+0x476>
  4032ee:	f04f 0967 	mov.w	r9, #103	; 0x67
  4032f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4032f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4032f6:	4293      	cmp	r3, r2
  4032f8:	db05      	blt.n	403306 <_printf_float+0x46a>
  4032fa:	6822      	ldr	r2, [r4, #0]
  4032fc:	6123      	str	r3, [r4, #16]
  4032fe:	07d1      	lsls	r1, r2, #31
  403300:	d508      	bpl.n	403314 <_printf_float+0x478>
  403302:	3301      	adds	r3, #1
  403304:	e005      	b.n	403312 <_printf_float+0x476>
  403306:	2b00      	cmp	r3, #0
  403308:	bfd4      	ite	le
  40330a:	f1c3 0302 	rsble	r3, r3, #2
  40330e:	2301      	movgt	r3, #1
  403310:	4413      	add	r3, r2
  403312:	6123      	str	r3, [r4, #16]
  403314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403316:	65a3      	str	r3, [r4, #88]	; 0x58
  403318:	f04f 0a00 	mov.w	sl, #0
  40331c:	e656      	b.n	402fcc <_printf_float+0x130>
  40331e:	b011      	add	sp, #68	; 0x44
  403320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00403324 <_printf_common>:
  403324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403328:	4691      	mov	r9, r2
  40332a:	461f      	mov	r7, r3
  40332c:	690a      	ldr	r2, [r1, #16]
  40332e:	688b      	ldr	r3, [r1, #8]
  403330:	f8dd 8020 	ldr.w	r8, [sp, #32]
  403334:	4293      	cmp	r3, r2
  403336:	bfb8      	it	lt
  403338:	4613      	movlt	r3, r2
  40333a:	f8c9 3000 	str.w	r3, [r9]
  40333e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  403342:	4606      	mov	r6, r0
  403344:	460c      	mov	r4, r1
  403346:	b112      	cbz	r2, 40334e <_printf_common+0x2a>
  403348:	3301      	adds	r3, #1
  40334a:	f8c9 3000 	str.w	r3, [r9]
  40334e:	6823      	ldr	r3, [r4, #0]
  403350:	0699      	lsls	r1, r3, #26
  403352:	bf42      	ittt	mi
  403354:	f8d9 3000 	ldrmi.w	r3, [r9]
  403358:	3302      	addmi	r3, #2
  40335a:	f8c9 3000 	strmi.w	r3, [r9]
  40335e:	6825      	ldr	r5, [r4, #0]
  403360:	f015 0506 	ands.w	r5, r5, #6
  403364:	d110      	bne.n	403388 <_printf_common+0x64>
  403366:	f104 0a19 	add.w	sl, r4, #25
  40336a:	e007      	b.n	40337c <_printf_common+0x58>
  40336c:	2301      	movs	r3, #1
  40336e:	4652      	mov	r2, sl
  403370:	4639      	mov	r1, r7
  403372:	4630      	mov	r0, r6
  403374:	47c0      	blx	r8
  403376:	3001      	adds	r0, #1
  403378:	d01a      	beq.n	4033b0 <_printf_common+0x8c>
  40337a:	3501      	adds	r5, #1
  40337c:	68e3      	ldr	r3, [r4, #12]
  40337e:	f8d9 2000 	ldr.w	r2, [r9]
  403382:	1a9b      	subs	r3, r3, r2
  403384:	429d      	cmp	r5, r3
  403386:	dbf1      	blt.n	40336c <_printf_common+0x48>
  403388:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  40338c:	6822      	ldr	r2, [r4, #0]
  40338e:	3300      	adds	r3, #0
  403390:	bf18      	it	ne
  403392:	2301      	movne	r3, #1
  403394:	0692      	lsls	r2, r2, #26
  403396:	d50f      	bpl.n	4033b8 <_printf_common+0x94>
  403398:	18e1      	adds	r1, r4, r3
  40339a:	1c5a      	adds	r2, r3, #1
  40339c:	2030      	movs	r0, #48	; 0x30
  40339e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4033a2:	4422      	add	r2, r4
  4033a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4033a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4033ac:	3302      	adds	r3, #2
  4033ae:	e003      	b.n	4033b8 <_printf_common+0x94>
  4033b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4033b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4033b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4033bc:	4639      	mov	r1, r7
  4033be:	4630      	mov	r0, r6
  4033c0:	47c0      	blx	r8
  4033c2:	3001      	adds	r0, #1
  4033c4:	d0f4      	beq.n	4033b0 <_printf_common+0x8c>
  4033c6:	6822      	ldr	r2, [r4, #0]
  4033c8:	f8d9 5000 	ldr.w	r5, [r9]
  4033cc:	68e3      	ldr	r3, [r4, #12]
  4033ce:	f002 0206 	and.w	r2, r2, #6
  4033d2:	2a04      	cmp	r2, #4
  4033d4:	bf08      	it	eq
  4033d6:	1b5d      	subeq	r5, r3, r5
  4033d8:	6922      	ldr	r2, [r4, #16]
  4033da:	68a3      	ldr	r3, [r4, #8]
  4033dc:	bf0c      	ite	eq
  4033de:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4033e2:	2500      	movne	r5, #0
  4033e4:	4293      	cmp	r3, r2
  4033e6:	bfc4      	itt	gt
  4033e8:	1a9b      	subgt	r3, r3, r2
  4033ea:	18ed      	addgt	r5, r5, r3
  4033ec:	f04f 0900 	mov.w	r9, #0
  4033f0:	341a      	adds	r4, #26
  4033f2:	454d      	cmp	r5, r9
  4033f4:	d009      	beq.n	40340a <_printf_common+0xe6>
  4033f6:	2301      	movs	r3, #1
  4033f8:	4622      	mov	r2, r4
  4033fa:	4639      	mov	r1, r7
  4033fc:	4630      	mov	r0, r6
  4033fe:	47c0      	blx	r8
  403400:	3001      	adds	r0, #1
  403402:	d0d5      	beq.n	4033b0 <_printf_common+0x8c>
  403404:	f109 0901 	add.w	r9, r9, #1
  403408:	e7f3      	b.n	4033f2 <_printf_common+0xce>
  40340a:	2000      	movs	r0, #0
  40340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403410 <_printf_i>:
  403410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403414:	4617      	mov	r7, r2
  403416:	7e0a      	ldrb	r2, [r1, #24]
  403418:	b085      	sub	sp, #20
  40341a:	2a6e      	cmp	r2, #110	; 0x6e
  40341c:	4698      	mov	r8, r3
  40341e:	4606      	mov	r6, r0
  403420:	460c      	mov	r4, r1
  403422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403424:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403428:	f000 80ae 	beq.w	403588 <_printf_i+0x178>
  40342c:	d811      	bhi.n	403452 <_printf_i+0x42>
  40342e:	2a63      	cmp	r2, #99	; 0x63
  403430:	d022      	beq.n	403478 <_printf_i+0x68>
  403432:	d809      	bhi.n	403448 <_printf_i+0x38>
  403434:	2a00      	cmp	r2, #0
  403436:	f000 80bb 	beq.w	4035b0 <_printf_i+0x1a0>
  40343a:	2a58      	cmp	r2, #88	; 0x58
  40343c:	f040 80ca 	bne.w	4035d4 <_printf_i+0x1c4>
  403440:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  403444:	4983      	ldr	r1, [pc, #524]	; (403654 <_printf_i+0x244>)
  403446:	e055      	b.n	4034f4 <_printf_i+0xe4>
  403448:	2a64      	cmp	r2, #100	; 0x64
  40344a:	d01e      	beq.n	40348a <_printf_i+0x7a>
  40344c:	2a69      	cmp	r2, #105	; 0x69
  40344e:	d01c      	beq.n	40348a <_printf_i+0x7a>
  403450:	e0c0      	b.n	4035d4 <_printf_i+0x1c4>
  403452:	2a73      	cmp	r2, #115	; 0x73
  403454:	f000 80b0 	beq.w	4035b8 <_printf_i+0x1a8>
  403458:	d809      	bhi.n	40346e <_printf_i+0x5e>
  40345a:	2a6f      	cmp	r2, #111	; 0x6f
  40345c:	d02e      	beq.n	4034bc <_printf_i+0xac>
  40345e:	2a70      	cmp	r2, #112	; 0x70
  403460:	f040 80b8 	bne.w	4035d4 <_printf_i+0x1c4>
  403464:	680a      	ldr	r2, [r1, #0]
  403466:	f042 0220 	orr.w	r2, r2, #32
  40346a:	600a      	str	r2, [r1, #0]
  40346c:	e03e      	b.n	4034ec <_printf_i+0xdc>
  40346e:	2a75      	cmp	r2, #117	; 0x75
  403470:	d024      	beq.n	4034bc <_printf_i+0xac>
  403472:	2a78      	cmp	r2, #120	; 0x78
  403474:	d03a      	beq.n	4034ec <_printf_i+0xdc>
  403476:	e0ad      	b.n	4035d4 <_printf_i+0x1c4>
  403478:	681a      	ldr	r2, [r3, #0]
  40347a:	f101 0542 	add.w	r5, r1, #66	; 0x42
  40347e:	1d11      	adds	r1, r2, #4
  403480:	6019      	str	r1, [r3, #0]
  403482:	6813      	ldr	r3, [r2, #0]
  403484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403488:	e0a8      	b.n	4035dc <_printf_i+0x1cc>
  40348a:	6821      	ldr	r1, [r4, #0]
  40348c:	681a      	ldr	r2, [r3, #0]
  40348e:	f011 0f80 	tst.w	r1, #128	; 0x80
  403492:	d002      	beq.n	40349a <_printf_i+0x8a>
  403494:	1d11      	adds	r1, r2, #4
  403496:	6019      	str	r1, [r3, #0]
  403498:	e008      	b.n	4034ac <_printf_i+0x9c>
  40349a:	f011 0f40 	tst.w	r1, #64	; 0x40
  40349e:	f102 0104 	add.w	r1, r2, #4
  4034a2:	6019      	str	r1, [r3, #0]
  4034a4:	d002      	beq.n	4034ac <_printf_i+0x9c>
  4034a6:	f9b2 3000 	ldrsh.w	r3, [r2]
  4034aa:	e000      	b.n	4034ae <_printf_i+0x9e>
  4034ac:	6813      	ldr	r3, [r2, #0]
  4034ae:	2b00      	cmp	r3, #0
  4034b0:	da3c      	bge.n	40352c <_printf_i+0x11c>
  4034b2:	222d      	movs	r2, #45	; 0x2d
  4034b4:	425b      	negs	r3, r3
  4034b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4034ba:	e037      	b.n	40352c <_printf_i+0x11c>
  4034bc:	6821      	ldr	r1, [r4, #0]
  4034be:	681a      	ldr	r2, [r3, #0]
  4034c0:	f011 0f80 	tst.w	r1, #128	; 0x80
  4034c4:	d002      	beq.n	4034cc <_printf_i+0xbc>
  4034c6:	1d11      	adds	r1, r2, #4
  4034c8:	6019      	str	r1, [r3, #0]
  4034ca:	e007      	b.n	4034dc <_printf_i+0xcc>
  4034cc:	f011 0f40 	tst.w	r1, #64	; 0x40
  4034d0:	f102 0104 	add.w	r1, r2, #4
  4034d4:	6019      	str	r1, [r3, #0]
  4034d6:	d001      	beq.n	4034dc <_printf_i+0xcc>
  4034d8:	8813      	ldrh	r3, [r2, #0]
  4034da:	e000      	b.n	4034de <_printf_i+0xce>
  4034dc:	6813      	ldr	r3, [r2, #0]
  4034de:	7e22      	ldrb	r2, [r4, #24]
  4034e0:	495c      	ldr	r1, [pc, #368]	; (403654 <_printf_i+0x244>)
  4034e2:	2a6f      	cmp	r2, #111	; 0x6f
  4034e4:	bf14      	ite	ne
  4034e6:	220a      	movne	r2, #10
  4034e8:	2208      	moveq	r2, #8
  4034ea:	e01b      	b.n	403524 <_printf_i+0x114>
  4034ec:	2278      	movs	r2, #120	; 0x78
  4034ee:	495a      	ldr	r1, [pc, #360]	; (403658 <_printf_i+0x248>)
  4034f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4034f4:	6822      	ldr	r2, [r4, #0]
  4034f6:	6818      	ldr	r0, [r3, #0]
  4034f8:	f012 0f80 	tst.w	r2, #128	; 0x80
  4034fc:	f100 0504 	add.w	r5, r0, #4
  403500:	601d      	str	r5, [r3, #0]
  403502:	d103      	bne.n	40350c <_printf_i+0xfc>
  403504:	0655      	lsls	r5, r2, #25
  403506:	d501      	bpl.n	40350c <_printf_i+0xfc>
  403508:	8803      	ldrh	r3, [r0, #0]
  40350a:	e000      	b.n	40350e <_printf_i+0xfe>
  40350c:	6803      	ldr	r3, [r0, #0]
  40350e:	07d0      	lsls	r0, r2, #31
  403510:	bf44      	itt	mi
  403512:	f042 0220 	orrmi.w	r2, r2, #32
  403516:	6022      	strmi	r2, [r4, #0]
  403518:	b91b      	cbnz	r3, 403522 <_printf_i+0x112>
  40351a:	6822      	ldr	r2, [r4, #0]
  40351c:	f022 0220 	bic.w	r2, r2, #32
  403520:	6022      	str	r2, [r4, #0]
  403522:	2210      	movs	r2, #16
  403524:	2000      	movs	r0, #0
  403526:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  40352a:	e001      	b.n	403530 <_printf_i+0x120>
  40352c:	4949      	ldr	r1, [pc, #292]	; (403654 <_printf_i+0x244>)
  40352e:	220a      	movs	r2, #10
  403530:	6865      	ldr	r5, [r4, #4]
  403532:	60a5      	str	r5, [r4, #8]
  403534:	2d00      	cmp	r5, #0
  403536:	db08      	blt.n	40354a <_printf_i+0x13a>
  403538:	6820      	ldr	r0, [r4, #0]
  40353a:	f020 0004 	bic.w	r0, r0, #4
  40353e:	6020      	str	r0, [r4, #0]
  403540:	b92b      	cbnz	r3, 40354e <_printf_i+0x13e>
  403542:	2d00      	cmp	r5, #0
  403544:	d17d      	bne.n	403642 <_printf_i+0x232>
  403546:	4675      	mov	r5, lr
  403548:	e00c      	b.n	403564 <_printf_i+0x154>
  40354a:	2b00      	cmp	r3, #0
  40354c:	d079      	beq.n	403642 <_printf_i+0x232>
  40354e:	4675      	mov	r5, lr
  403550:	fbb3 f0f2 	udiv	r0, r3, r2
  403554:	fb02 3310 	mls	r3, r2, r0, r3
  403558:	5ccb      	ldrb	r3, [r1, r3]
  40355a:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40355e:	4603      	mov	r3, r0
  403560:	2800      	cmp	r0, #0
  403562:	d1f5      	bne.n	403550 <_printf_i+0x140>
  403564:	2a08      	cmp	r2, #8
  403566:	d10b      	bne.n	403580 <_printf_i+0x170>
  403568:	6823      	ldr	r3, [r4, #0]
  40356a:	07da      	lsls	r2, r3, #31
  40356c:	d508      	bpl.n	403580 <_printf_i+0x170>
  40356e:	6923      	ldr	r3, [r4, #16]
  403570:	6862      	ldr	r2, [r4, #4]
  403572:	429a      	cmp	r2, r3
  403574:	bfde      	ittt	le
  403576:	2330      	movle	r3, #48	; 0x30
  403578:	f805 3c01 	strble.w	r3, [r5, #-1]
  40357c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  403580:	ebc5 030e 	rsb	r3, r5, lr
  403584:	6123      	str	r3, [r4, #16]
  403586:	e02e      	b.n	4035e6 <_printf_i+0x1d6>
  403588:	6808      	ldr	r0, [r1, #0]
  40358a:	681a      	ldr	r2, [r3, #0]
  40358c:	6949      	ldr	r1, [r1, #20]
  40358e:	f010 0f80 	tst.w	r0, #128	; 0x80
  403592:	d003      	beq.n	40359c <_printf_i+0x18c>
  403594:	1d10      	adds	r0, r2, #4
  403596:	6018      	str	r0, [r3, #0]
  403598:	6813      	ldr	r3, [r2, #0]
  40359a:	e008      	b.n	4035ae <_printf_i+0x19e>
  40359c:	f010 0f40 	tst.w	r0, #64	; 0x40
  4035a0:	f102 0004 	add.w	r0, r2, #4
  4035a4:	6018      	str	r0, [r3, #0]
  4035a6:	6813      	ldr	r3, [r2, #0]
  4035a8:	d001      	beq.n	4035ae <_printf_i+0x19e>
  4035aa:	8019      	strh	r1, [r3, #0]
  4035ac:	e000      	b.n	4035b0 <_printf_i+0x1a0>
  4035ae:	6019      	str	r1, [r3, #0]
  4035b0:	2300      	movs	r3, #0
  4035b2:	6123      	str	r3, [r4, #16]
  4035b4:	4675      	mov	r5, lr
  4035b6:	e016      	b.n	4035e6 <_printf_i+0x1d6>
  4035b8:	681a      	ldr	r2, [r3, #0]
  4035ba:	1d11      	adds	r1, r2, #4
  4035bc:	6019      	str	r1, [r3, #0]
  4035be:	6815      	ldr	r5, [r2, #0]
  4035c0:	6862      	ldr	r2, [r4, #4]
  4035c2:	2100      	movs	r1, #0
  4035c4:	4628      	mov	r0, r5
  4035c6:	f002 fc9b 	bl	405f00 <memchr>
  4035ca:	b108      	cbz	r0, 4035d0 <_printf_i+0x1c0>
  4035cc:	1b40      	subs	r0, r0, r5
  4035ce:	6060      	str	r0, [r4, #4]
  4035d0:	6863      	ldr	r3, [r4, #4]
  4035d2:	e004      	b.n	4035de <_printf_i+0x1ce>
  4035d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4035d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4035dc:	2301      	movs	r3, #1
  4035de:	6123      	str	r3, [r4, #16]
  4035e0:	2300      	movs	r3, #0
  4035e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4035e6:	f8cd 8000 	str.w	r8, [sp]
  4035ea:	463b      	mov	r3, r7
  4035ec:	aa03      	add	r2, sp, #12
  4035ee:	4621      	mov	r1, r4
  4035f0:	4630      	mov	r0, r6
  4035f2:	f7ff fe97 	bl	403324 <_printf_common>
  4035f6:	3001      	adds	r0, #1
  4035f8:	d102      	bne.n	403600 <_printf_i+0x1f0>
  4035fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4035fe:	e026      	b.n	40364e <_printf_i+0x23e>
  403600:	6923      	ldr	r3, [r4, #16]
  403602:	462a      	mov	r2, r5
  403604:	4639      	mov	r1, r7
  403606:	4630      	mov	r0, r6
  403608:	47c0      	blx	r8
  40360a:	3001      	adds	r0, #1
  40360c:	d0f5      	beq.n	4035fa <_printf_i+0x1ea>
  40360e:	6823      	ldr	r3, [r4, #0]
  403610:	079b      	lsls	r3, r3, #30
  403612:	d510      	bpl.n	403636 <_printf_i+0x226>
  403614:	2500      	movs	r5, #0
  403616:	f104 0919 	add.w	r9, r4, #25
  40361a:	e007      	b.n	40362c <_printf_i+0x21c>
  40361c:	2301      	movs	r3, #1
  40361e:	464a      	mov	r2, r9
  403620:	4639      	mov	r1, r7
  403622:	4630      	mov	r0, r6
  403624:	47c0      	blx	r8
  403626:	3001      	adds	r0, #1
  403628:	d0e7      	beq.n	4035fa <_printf_i+0x1ea>
  40362a:	3501      	adds	r5, #1
  40362c:	68e3      	ldr	r3, [r4, #12]
  40362e:	9a03      	ldr	r2, [sp, #12]
  403630:	1a9b      	subs	r3, r3, r2
  403632:	429d      	cmp	r5, r3
  403634:	dbf2      	blt.n	40361c <_printf_i+0x20c>
  403636:	68e0      	ldr	r0, [r4, #12]
  403638:	9b03      	ldr	r3, [sp, #12]
  40363a:	4298      	cmp	r0, r3
  40363c:	bfb8      	it	lt
  40363e:	4618      	movlt	r0, r3
  403640:	e005      	b.n	40364e <_printf_i+0x23e>
  403642:	780b      	ldrb	r3, [r1, #0]
  403644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403648:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40364c:	e78a      	b.n	403564 <_printf_i+0x154>
  40364e:	b005      	add	sp, #20
  403650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403654:	004081d6 	.word	0x004081d6
  403658:	004081e7 	.word	0x004081e7

0040365c <iprintf>:
  40365c:	b40f      	push	{r0, r1, r2, r3}
  40365e:	4b0a      	ldr	r3, [pc, #40]	; (403688 <iprintf+0x2c>)
  403660:	b513      	push	{r0, r1, r4, lr}
  403662:	681c      	ldr	r4, [r3, #0]
  403664:	b124      	cbz	r4, 403670 <iprintf+0x14>
  403666:	69a3      	ldr	r3, [r4, #24]
  403668:	b913      	cbnz	r3, 403670 <iprintf+0x14>
  40366a:	4620      	mov	r0, r4
  40366c:	f002 f812 	bl	405694 <__sinit>
  403670:	ab05      	add	r3, sp, #20
  403672:	9a04      	ldr	r2, [sp, #16]
  403674:	68a1      	ldr	r1, [r4, #8]
  403676:	9301      	str	r3, [sp, #4]
  403678:	4620      	mov	r0, r4
  40367a:	f003 f95d 	bl	406938 <_vfiprintf_r>
  40367e:	b002      	add	sp, #8
  403680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403684:	b004      	add	sp, #16
  403686:	4770      	bx	lr
  403688:	20000078 	.word	0x20000078

0040368c <_puts_r>:
  40368c:	b570      	push	{r4, r5, r6, lr}
  40368e:	460e      	mov	r6, r1
  403690:	4605      	mov	r5, r0
  403692:	b118      	cbz	r0, 40369c <_puts_r+0x10>
  403694:	6983      	ldr	r3, [r0, #24]
  403696:	b90b      	cbnz	r3, 40369c <_puts_r+0x10>
  403698:	f001 fffc 	bl	405694 <__sinit>
  40369c:	69ab      	ldr	r3, [r5, #24]
  40369e:	68ac      	ldr	r4, [r5, #8]
  4036a0:	b913      	cbnz	r3, 4036a8 <_puts_r+0x1c>
  4036a2:	4628      	mov	r0, r5
  4036a4:	f001 fff6 	bl	405694 <__sinit>
  4036a8:	4b22      	ldr	r3, [pc, #136]	; (403734 <_puts_r+0xa8>)
  4036aa:	429c      	cmp	r4, r3
  4036ac:	d101      	bne.n	4036b2 <_puts_r+0x26>
  4036ae:	686c      	ldr	r4, [r5, #4]
  4036b0:	e008      	b.n	4036c4 <_puts_r+0x38>
  4036b2:	4b21      	ldr	r3, [pc, #132]	; (403738 <_puts_r+0xac>)
  4036b4:	429c      	cmp	r4, r3
  4036b6:	d101      	bne.n	4036bc <_puts_r+0x30>
  4036b8:	68ac      	ldr	r4, [r5, #8]
  4036ba:	e003      	b.n	4036c4 <_puts_r+0x38>
  4036bc:	4b1f      	ldr	r3, [pc, #124]	; (40373c <_puts_r+0xb0>)
  4036be:	429c      	cmp	r4, r3
  4036c0:	bf08      	it	eq
  4036c2:	68ec      	ldreq	r4, [r5, #12]
  4036c4:	89a3      	ldrh	r3, [r4, #12]
  4036c6:	071b      	lsls	r3, r3, #28
  4036c8:	d501      	bpl.n	4036ce <_puts_r+0x42>
  4036ca:	6923      	ldr	r3, [r4, #16]
  4036cc:	b93b      	cbnz	r3, 4036de <_puts_r+0x52>
  4036ce:	4621      	mov	r1, r4
  4036d0:	4628      	mov	r0, r5
  4036d2:	f001 f853 	bl	40477c <__swsetup_r>
  4036d6:	b110      	cbz	r0, 4036de <_puts_r+0x52>
  4036d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4036dc:	bd70      	pop	{r4, r5, r6, pc}
  4036de:	3e01      	subs	r6, #1
  4036e0:	68a3      	ldr	r3, [r4, #8]
  4036e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  4036e6:	3b01      	subs	r3, #1
  4036e8:	60a3      	str	r3, [r4, #8]
  4036ea:	b191      	cbz	r1, 403712 <_puts_r+0x86>
  4036ec:	2b00      	cmp	r3, #0
  4036ee:	da04      	bge.n	4036fa <_puts_r+0x6e>
  4036f0:	69a2      	ldr	r2, [r4, #24]
  4036f2:	4293      	cmp	r3, r2
  4036f4:	db06      	blt.n	403704 <_puts_r+0x78>
  4036f6:	290a      	cmp	r1, #10
  4036f8:	d004      	beq.n	403704 <_puts_r+0x78>
  4036fa:	6823      	ldr	r3, [r4, #0]
  4036fc:	1c5a      	adds	r2, r3, #1
  4036fe:	6022      	str	r2, [r4, #0]
  403700:	7019      	strb	r1, [r3, #0]
  403702:	e7ed      	b.n	4036e0 <_puts_r+0x54>
  403704:	4622      	mov	r2, r4
  403706:	4628      	mov	r0, r5
  403708:	f000 ffe4 	bl	4046d4 <__swbuf_r>
  40370c:	3001      	adds	r0, #1
  40370e:	d1e7      	bne.n	4036e0 <_puts_r+0x54>
  403710:	e7e2      	b.n	4036d8 <_puts_r+0x4c>
  403712:	2b00      	cmp	r3, #0
  403714:	da08      	bge.n	403728 <_puts_r+0x9c>
  403716:	4622      	mov	r2, r4
  403718:	210a      	movs	r1, #10
  40371a:	4628      	mov	r0, r5
  40371c:	f000 ffda 	bl	4046d4 <__swbuf_r>
  403720:	3001      	adds	r0, #1
  403722:	d0d9      	beq.n	4036d8 <_puts_r+0x4c>
  403724:	200a      	movs	r0, #10
  403726:	bd70      	pop	{r4, r5, r6, pc}
  403728:	6823      	ldr	r3, [r4, #0]
  40372a:	200a      	movs	r0, #10
  40372c:	1c5a      	adds	r2, r3, #1
  40372e:	6022      	str	r2, [r4, #0]
  403730:	7018      	strb	r0, [r3, #0]
  403732:	bd70      	pop	{r4, r5, r6, pc}
  403734:	00408258 	.word	0x00408258
  403738:	00408278 	.word	0x00408278
  40373c:	00408298 	.word	0x00408298

00403740 <puts>:
  403740:	4b02      	ldr	r3, [pc, #8]	; (40374c <puts+0xc>)
  403742:	4601      	mov	r1, r0
  403744:	6818      	ldr	r0, [r3, #0]
  403746:	f7ff bfa1 	b.w	40368c <_puts_r>
  40374a:	bf00      	nop
  40374c:	20000078 	.word	0x20000078

00403750 <setbuf>:
  403750:	2900      	cmp	r1, #0
  403752:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403756:	bf0c      	ite	eq
  403758:	2202      	moveq	r2, #2
  40375a:	2200      	movne	r2, #0
  40375c:	f000 b800 	b.w	403760 <setvbuf>

00403760 <setvbuf>:
  403760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403764:	461d      	mov	r5, r3
  403766:	4b4f      	ldr	r3, [pc, #316]	; (4038a4 <setvbuf+0x144>)
  403768:	681e      	ldr	r6, [r3, #0]
  40376a:	4604      	mov	r4, r0
  40376c:	460f      	mov	r7, r1
  40376e:	4690      	mov	r8, r2
  403770:	b126      	cbz	r6, 40377c <setvbuf+0x1c>
  403772:	69b3      	ldr	r3, [r6, #24]
  403774:	b913      	cbnz	r3, 40377c <setvbuf+0x1c>
  403776:	4630      	mov	r0, r6
  403778:	f001 ff8c 	bl	405694 <__sinit>
  40377c:	4b4a      	ldr	r3, [pc, #296]	; (4038a8 <setvbuf+0x148>)
  40377e:	429c      	cmp	r4, r3
  403780:	d101      	bne.n	403786 <setvbuf+0x26>
  403782:	6874      	ldr	r4, [r6, #4]
  403784:	e008      	b.n	403798 <setvbuf+0x38>
  403786:	4b49      	ldr	r3, [pc, #292]	; (4038ac <setvbuf+0x14c>)
  403788:	429c      	cmp	r4, r3
  40378a:	d101      	bne.n	403790 <setvbuf+0x30>
  40378c:	68b4      	ldr	r4, [r6, #8]
  40378e:	e003      	b.n	403798 <setvbuf+0x38>
  403790:	4b47      	ldr	r3, [pc, #284]	; (4038b0 <setvbuf+0x150>)
  403792:	429c      	cmp	r4, r3
  403794:	bf08      	it	eq
  403796:	68f4      	ldreq	r4, [r6, #12]
  403798:	f1b8 0f02 	cmp.w	r8, #2
  40379c:	d004      	beq.n	4037a8 <setvbuf+0x48>
  40379e:	f1b8 0f01 	cmp.w	r8, #1
  4037a2:	d879      	bhi.n	403898 <setvbuf+0x138>
  4037a4:	2d00      	cmp	r5, #0
  4037a6:	db77      	blt.n	403898 <setvbuf+0x138>
  4037a8:	4621      	mov	r1, r4
  4037aa:	4630      	mov	r0, r6
  4037ac:	f001 ff08 	bl	4055c0 <_fflush_r>
  4037b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4037b2:	b141      	cbz	r1, 4037c6 <setvbuf+0x66>
  4037b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4037b8:	4299      	cmp	r1, r3
  4037ba:	d002      	beq.n	4037c2 <setvbuf+0x62>
  4037bc:	4630      	mov	r0, r6
  4037be:	f002 ffe7 	bl	406790 <_free_r>
  4037c2:	2300      	movs	r3, #0
  4037c4:	6363      	str	r3, [r4, #52]	; 0x34
  4037c6:	2300      	movs	r3, #0
  4037c8:	61a3      	str	r3, [r4, #24]
  4037ca:	6063      	str	r3, [r4, #4]
  4037cc:	89a3      	ldrh	r3, [r4, #12]
  4037ce:	061b      	lsls	r3, r3, #24
  4037d0:	d503      	bpl.n	4037da <setvbuf+0x7a>
  4037d2:	6921      	ldr	r1, [r4, #16]
  4037d4:	4630      	mov	r0, r6
  4037d6:	f002 ffdb 	bl	406790 <_free_r>
  4037da:	89a3      	ldrh	r3, [r4, #12]
  4037dc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4037e0:	f023 0303 	bic.w	r3, r3, #3
  4037e4:	f1b8 0f02 	cmp.w	r8, #2
  4037e8:	81a3      	strh	r3, [r4, #12]
  4037ea:	d01e      	beq.n	40382a <setvbuf+0xca>
  4037ec:	ab01      	add	r3, sp, #4
  4037ee:	466a      	mov	r2, sp
  4037f0:	4621      	mov	r1, r4
  4037f2:	4630      	mov	r0, r6
  4037f4:	f002 fb0a 	bl	405e0c <__swhatbuf_r>
  4037f8:	89a3      	ldrh	r3, [r4, #12]
  4037fa:	4318      	orrs	r0, r3
  4037fc:	81a0      	strh	r0, [r4, #12]
  4037fe:	b90d      	cbnz	r5, 403804 <setvbuf+0xa4>
  403800:	9d00      	ldr	r5, [sp, #0]
  403802:	e000      	b.n	403806 <setvbuf+0xa6>
  403804:	bb2f      	cbnz	r7, 403852 <setvbuf+0xf2>
  403806:	4628      	mov	r0, r5
  403808:	f002 fb60 	bl	405ecc <malloc>
  40380c:	4607      	mov	r7, r0
  40380e:	b9d0      	cbnz	r0, 403846 <setvbuf+0xe6>
  403810:	f8dd 9000 	ldr.w	r9, [sp]
  403814:	45a9      	cmp	r9, r5
  403816:	d102      	bne.n	40381e <setvbuf+0xbe>
  403818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40381c:	e006      	b.n	40382c <setvbuf+0xcc>
  40381e:	4648      	mov	r0, r9
  403820:	f002 fb54 	bl	405ecc <malloc>
  403824:	4607      	mov	r7, r0
  403826:	b978      	cbnz	r0, 403848 <setvbuf+0xe8>
  403828:	e7f6      	b.n	403818 <setvbuf+0xb8>
  40382a:	2000      	movs	r0, #0
  40382c:	89a3      	ldrh	r3, [r4, #12]
  40382e:	f043 0302 	orr.w	r3, r3, #2
  403832:	81a3      	strh	r3, [r4, #12]
  403834:	2300      	movs	r3, #0
  403836:	60a3      	str	r3, [r4, #8]
  403838:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40383c:	6023      	str	r3, [r4, #0]
  40383e:	6123      	str	r3, [r4, #16]
  403840:	2301      	movs	r3, #1
  403842:	6163      	str	r3, [r4, #20]
  403844:	e02a      	b.n	40389c <setvbuf+0x13c>
  403846:	46a9      	mov	r9, r5
  403848:	89a3      	ldrh	r3, [r4, #12]
  40384a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40384e:	81a3      	strh	r3, [r4, #12]
  403850:	464d      	mov	r5, r9
  403852:	69b3      	ldr	r3, [r6, #24]
  403854:	b913      	cbnz	r3, 40385c <setvbuf+0xfc>
  403856:	4630      	mov	r0, r6
  403858:	f001 ff1c 	bl	405694 <__sinit>
  40385c:	f1b8 0f01 	cmp.w	r8, #1
  403860:	bf08      	it	eq
  403862:	89a3      	ldrheq	r3, [r4, #12]
  403864:	6027      	str	r7, [r4, #0]
  403866:	bf04      	itt	eq
  403868:	f043 0301 	orreq.w	r3, r3, #1
  40386c:	81a3      	strheq	r3, [r4, #12]
  40386e:	89a3      	ldrh	r3, [r4, #12]
  403870:	6127      	str	r7, [r4, #16]
  403872:	f003 0008 	and.w	r0, r3, #8
  403876:	b280      	uxth	r0, r0
  403878:	6165      	str	r5, [r4, #20]
  40387a:	b158      	cbz	r0, 403894 <setvbuf+0x134>
  40387c:	f013 0301 	ands.w	r3, r3, #1
  403880:	f04f 0000 	mov.w	r0, #0
  403884:	bf1d      	ittte	ne
  403886:	426d      	negne	r5, r5
  403888:	60a0      	strne	r0, [r4, #8]
  40388a:	61a5      	strne	r5, [r4, #24]
  40388c:	60a5      	streq	r5, [r4, #8]
  40388e:	bf08      	it	eq
  403890:	4618      	moveq	r0, r3
  403892:	e003      	b.n	40389c <setvbuf+0x13c>
  403894:	60a0      	str	r0, [r4, #8]
  403896:	e001      	b.n	40389c <setvbuf+0x13c>
  403898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40389c:	b003      	add	sp, #12
  40389e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4038a2:	bf00      	nop
  4038a4:	20000078 	.word	0x20000078
  4038a8:	00408258 	.word	0x00408258
  4038ac:	00408278 	.word	0x00408278
  4038b0:	00408298 	.word	0x00408298

004038b4 <strcmp>:
  4038b4:	f810 2b01 	ldrb.w	r2, [r0], #1
  4038b8:	f811 3b01 	ldrb.w	r3, [r1], #1
  4038bc:	2a01      	cmp	r2, #1
  4038be:	bf28      	it	cs
  4038c0:	429a      	cmpcs	r2, r3
  4038c2:	d0f7      	beq.n	4038b4 <strcmp>
  4038c4:	1ad0      	subs	r0, r2, r3
  4038c6:	4770      	bx	lr

004038c8 <strcpy>:
  4038c8:	4603      	mov	r3, r0
  4038ca:	f811 2b01 	ldrb.w	r2, [r1], #1
  4038ce:	f803 2b01 	strb.w	r2, [r3], #1
  4038d2:	2a00      	cmp	r2, #0
  4038d4:	d1f9      	bne.n	4038ca <strcpy+0x2>
  4038d6:	4770      	bx	lr

004038d8 <strlen>:
  4038d8:	4603      	mov	r3, r0
  4038da:	f813 2b01 	ldrb.w	r2, [r3], #1
  4038de:	2a00      	cmp	r2, #0
  4038e0:	d1fb      	bne.n	4038da <strlen+0x2>
  4038e2:	1a18      	subs	r0, r3, r0
  4038e4:	3801      	subs	r0, #1
  4038e6:	4770      	bx	lr

004038e8 <sulp>:
  4038e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038ec:	460f      	mov	r7, r1
  4038ee:	4690      	mov	r8, r2
  4038f0:	f002 fe1c 	bl	40652c <__ulp>
  4038f4:	4604      	mov	r4, r0
  4038f6:	460d      	mov	r5, r1
  4038f8:	f1b8 0f00 	cmp.w	r8, #0
  4038fc:	d011      	beq.n	403922 <sulp+0x3a>
  4038fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
  403902:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  403906:	2b00      	cmp	r3, #0
  403908:	dd0b      	ble.n	403922 <sulp+0x3a>
  40390a:	051b      	lsls	r3, r3, #20
  40390c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
  403910:	2400      	movs	r4, #0
  403912:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
  403916:	4622      	mov	r2, r4
  403918:	462b      	mov	r3, r5
  40391a:	f003 fbc1 	bl	4070a0 <__aeabi_dmul>
  40391e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403922:	4620      	mov	r0, r4
  403924:	4629      	mov	r1, r5
  403926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40392a:	0000      	movs	r0, r0
  40392c:	0000      	movs	r0, r0
	...

00403930 <_strtod_l>:
  403930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403934:	461f      	mov	r7, r3
  403936:	b09f      	sub	sp, #124	; 0x7c
  403938:	2300      	movs	r3, #0
  40393a:	4682      	mov	sl, r0
  40393c:	4638      	mov	r0, r7
  40393e:	931a      	str	r3, [sp, #104]	; 0x68
  403940:	9106      	str	r1, [sp, #24]
  403942:	9215      	str	r2, [sp, #84]	; 0x54
  403944:	f002 fa51 	bl	405dea <__localeconv_l>
  403948:	4606      	mov	r6, r0
  40394a:	6800      	ldr	r0, [r0, #0]
  40394c:	f7ff ffc4 	bl	4038d8 <strlen>
  403950:	9b06      	ldr	r3, [sp, #24]
  403952:	4604      	mov	r4, r0
  403954:	f04f 0800 	mov.w	r8, #0
  403958:	f04f 0900 	mov.w	r9, #0
  40395c:	9319      	str	r3, [sp, #100]	; 0x64
  40395e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403960:	781a      	ldrb	r2, [r3, #0]
  403962:	2a0d      	cmp	r2, #13
  403964:	d805      	bhi.n	403972 <_strtod_l+0x42>
  403966:	2a09      	cmp	r2, #9
  403968:	d213      	bcs.n	403992 <_strtod_l+0x62>
  40396a:	2a00      	cmp	r2, #0
  40396c:	f000 8196 	beq.w	403c9c <_strtod_l+0x36c>
  403970:	e011      	b.n	403996 <_strtod_l+0x66>
  403972:	2a2b      	cmp	r2, #43	; 0x2b
  403974:	d004      	beq.n	403980 <_strtod_l+0x50>
  403976:	2a2d      	cmp	r2, #45	; 0x2d
  403978:	d004      	beq.n	403984 <_strtod_l+0x54>
  40397a:	2a20      	cmp	r2, #32
  40397c:	d10b      	bne.n	403996 <_strtod_l+0x66>
  40397e:	e008      	b.n	403992 <_strtod_l+0x62>
  403980:	2200      	movs	r2, #0
  403982:	e000      	b.n	403986 <_strtod_l+0x56>
  403984:	2201      	movs	r2, #1
  403986:	920e      	str	r2, [sp, #56]	; 0x38
  403988:	1c5a      	adds	r2, r3, #1
  40398a:	9219      	str	r2, [sp, #100]	; 0x64
  40398c:	785b      	ldrb	r3, [r3, #1]
  40398e:	b923      	cbnz	r3, 40399a <_strtod_l+0x6a>
  403990:	e184      	b.n	403c9c <_strtod_l+0x36c>
  403992:	3301      	adds	r3, #1
  403994:	e7e2      	b.n	40395c <_strtod_l+0x2c>
  403996:	2300      	movs	r3, #0
  403998:	930e      	str	r3, [sp, #56]	; 0x38
  40399a:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40399c:	782b      	ldrb	r3, [r5, #0]
  40399e:	2b30      	cmp	r3, #48	; 0x30
  4039a0:	d15d      	bne.n	403a5e <_strtod_l+0x12e>
  4039a2:	786b      	ldrb	r3, [r5, #1]
  4039a4:	2b58      	cmp	r3, #88	; 0x58
  4039a6:	d001      	beq.n	4039ac <_strtod_l+0x7c>
  4039a8:	2b78      	cmp	r3, #120	; 0x78
  4039aa:	d14d      	bne.n	403a48 <_strtod_l+0x118>
  4039ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4039ae:	9301      	str	r3, [sp, #4]
  4039b0:	ab1a      	add	r3, sp, #104	; 0x68
  4039b2:	9300      	str	r3, [sp, #0]
  4039b4:	9702      	str	r7, [sp, #8]
  4039b6:	ab1b      	add	r3, sp, #108	; 0x6c
  4039b8:	4a9d      	ldr	r2, [pc, #628]	; (403c30 <_strtod_l+0x300>)
  4039ba:	a919      	add	r1, sp, #100	; 0x64
  4039bc:	4650      	mov	r0, sl
  4039be:	f001 ff3e 	bl	40583e <__gethex>
  4039c2:	f010 0607 	ands.w	r6, r0, #7
  4039c6:	4604      	mov	r4, r0
  4039c8:	f000 856f 	beq.w	4044aa <_strtod_l+0xb7a>
  4039cc:	2e06      	cmp	r6, #6
  4039ce:	d105      	bne.n	4039dc <_strtod_l+0xac>
  4039d0:	3501      	adds	r5, #1
  4039d2:	2300      	movs	r3, #0
  4039d4:	9519      	str	r5, [sp, #100]	; 0x64
  4039d6:	930e      	str	r3, [sp, #56]	; 0x38
  4039d8:	f000 bd67 	b.w	4044aa <_strtod_l+0xb7a>
  4039dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4039de:	b13a      	cbz	r2, 4039f0 <_strtod_l+0xc0>
  4039e0:	2135      	movs	r1, #53	; 0x35
  4039e2:	a81c      	add	r0, sp, #112	; 0x70
  4039e4:	f002 fe8a 	bl	4066fc <__copybits>
  4039e8:	991a      	ldr	r1, [sp, #104]	; 0x68
  4039ea:	4650      	mov	r0, sl
  4039ec:	f002 fb0d 	bl	40600a <_Bfree>
  4039f0:	2e06      	cmp	r6, #6
  4039f2:	d822      	bhi.n	403a3a <_strtod_l+0x10a>
  4039f4:	e8df f006 	tbb	[pc, r6]
  4039f8:	18080d04 	.word	0x18080d04
  4039fc:	0d1d      	.short	0x0d1d
  4039fe:	04          	.byte	0x04
  4039ff:	00          	.byte	0x00
  403a00:	f04f 0900 	mov.w	r9, #0
  403a04:	46c8      	mov	r8, r9
  403a06:	e018      	b.n	403a3a <_strtod_l+0x10a>
  403a08:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403a0c:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
  403a10:	e013      	b.n	403a3a <_strtod_l+0x10a>
  403a12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403a14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403a16:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403a1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  403a1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
  403a22:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
  403a26:	e008      	b.n	403a3a <_strtod_l+0x10a>
  403a28:	f8df 9208 	ldr.w	r9, [pc, #520]	; 403c34 <_strtod_l+0x304>
  403a2c:	f04f 0800 	mov.w	r8, #0
  403a30:	e003      	b.n	403a3a <_strtod_l+0x10a>
  403a32:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
  403a36:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  403a3a:	0721      	lsls	r1, r4, #28
  403a3c:	f140 8535 	bpl.w	4044aa <_strtod_l+0xb7a>
  403a40:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
  403a44:	f000 bd31 	b.w	4044aa <_strtod_l+0xb7a>
  403a48:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a4a:	1c5a      	adds	r2, r3, #1
  403a4c:	9219      	str	r2, [sp, #100]	; 0x64
  403a4e:	785b      	ldrb	r3, [r3, #1]
  403a50:	2b30      	cmp	r3, #48	; 0x30
  403a52:	d0f9      	beq.n	403a48 <_strtod_l+0x118>
  403a54:	2b00      	cmp	r3, #0
  403a56:	f000 8528 	beq.w	4044aa <_strtod_l+0xb7a>
  403a5a:	2301      	movs	r3, #1
  403a5c:	e000      	b.n	403a60 <_strtod_l+0x130>
  403a5e:	2300      	movs	r3, #0
  403a60:	9308      	str	r3, [sp, #32]
  403a62:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403a64:	9309      	str	r3, [sp, #36]	; 0x24
  403a66:	2300      	movs	r3, #0
  403a68:	9305      	str	r3, [sp, #20]
  403a6a:	469b      	mov	fp, r3
  403a6c:	9304      	str	r3, [sp, #16]
  403a6e:	220a      	movs	r2, #10
  403a70:	9819      	ldr	r0, [sp, #100]	; 0x64
  403a72:	7805      	ldrb	r5, [r0, #0]
  403a74:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  403a78:	b2d9      	uxtb	r1, r3
  403a7a:	2909      	cmp	r1, #9
  403a7c:	d80e      	bhi.n	403a9c <_strtod_l+0x16c>
  403a7e:	9904      	ldr	r1, [sp, #16]
  403a80:	2908      	cmp	r1, #8
  403a82:	bfc5      	ittet	gt
  403a84:	9905      	ldrgt	r1, [sp, #20]
  403a86:	fb02 3301 	mlagt	r3, r2, r1, r3
  403a8a:	fb02 3b0b 	mlale	fp, r2, fp, r3
  403a8e:	9305      	strgt	r3, [sp, #20]
  403a90:	9b04      	ldr	r3, [sp, #16]
  403a92:	3001      	adds	r0, #1
  403a94:	3301      	adds	r3, #1
  403a96:	9304      	str	r3, [sp, #16]
  403a98:	9019      	str	r0, [sp, #100]	; 0x64
  403a9a:	e7e9      	b.n	403a70 <_strtod_l+0x140>
  403a9c:	4622      	mov	r2, r4
  403a9e:	6831      	ldr	r1, [r6, #0]
  403aa0:	f003 f8b9 	bl	406c16 <strncmp>
  403aa4:	b128      	cbz	r0, 403ab2 <_strtod_l+0x182>
  403aa6:	2000      	movs	r0, #0
  403aa8:	462b      	mov	r3, r5
  403aaa:	4602      	mov	r2, r0
  403aac:	9d04      	ldr	r5, [sp, #16]
  403aae:	4601      	mov	r1, r0
  403ab0:	e04d      	b.n	403b4e <_strtod_l+0x21e>
  403ab2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ab4:	191a      	adds	r2, r3, r4
  403ab6:	9219      	str	r2, [sp, #100]	; 0x64
  403ab8:	9a04      	ldr	r2, [sp, #16]
  403aba:	5d1b      	ldrb	r3, [r3, r4]
  403abc:	2a00      	cmp	r2, #0
  403abe:	d13f      	bne.n	403b40 <_strtod_l+0x210>
  403ac0:	4610      	mov	r0, r2
  403ac2:	2b30      	cmp	r3, #48	; 0x30
  403ac4:	d105      	bne.n	403ad2 <_strtod_l+0x1a2>
  403ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403ac8:	1c5a      	adds	r2, r3, #1
  403aca:	9219      	str	r2, [sp, #100]	; 0x64
  403acc:	3001      	adds	r0, #1
  403ace:	785b      	ldrb	r3, [r3, #1]
  403ad0:	e7f7      	b.n	403ac2 <_strtod_l+0x192>
  403ad2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
  403ad6:	2a08      	cmp	r2, #8
  403ad8:	d83f      	bhi.n	403b5a <_strtod_l+0x22a>
  403ada:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403adc:	9209      	str	r2, [sp, #36]	; 0x24
  403ade:	4602      	mov	r2, r0
  403ae0:	2000      	movs	r0, #0
  403ae2:	4605      	mov	r5, r0
  403ae4:	3b30      	subs	r3, #48	; 0x30
  403ae6:	f100 0101 	add.w	r1, r0, #1
  403aea:	d023      	beq.n	403b34 <_strtod_l+0x204>
  403aec:	440a      	add	r2, r1
  403aee:	182e      	adds	r6, r5, r0
  403af0:	4629      	mov	r1, r5
  403af2:	240a      	movs	r4, #10
  403af4:	42b1      	cmp	r1, r6
  403af6:	d00c      	beq.n	403b12 <_strtod_l+0x1e2>
  403af8:	3101      	adds	r1, #1
  403afa:	1e4f      	subs	r7, r1, #1
  403afc:	2f08      	cmp	r7, #8
  403afe:	dc02      	bgt.n	403b06 <_strtod_l+0x1d6>
  403b00:	fb04 fb0b 	mul.w	fp, r4, fp
  403b04:	e7f6      	b.n	403af4 <_strtod_l+0x1c4>
  403b06:	2910      	cmp	r1, #16
  403b08:	bfde      	ittt	le
  403b0a:	9f05      	ldrle	r7, [sp, #20]
  403b0c:	4367      	mulle	r7, r4
  403b0e:	9705      	strle	r7, [sp, #20]
  403b10:	e7f0      	b.n	403af4 <_strtod_l+0x1c4>
  403b12:	4428      	add	r0, r5
  403b14:	2808      	cmp	r0, #8
  403b16:	f100 0501 	add.w	r5, r0, #1
  403b1a:	dc03      	bgt.n	403b24 <_strtod_l+0x1f4>
  403b1c:	210a      	movs	r1, #10
  403b1e:	fb01 3b0b 	mla	fp, r1, fp, r3
  403b22:	e006      	b.n	403b32 <_strtod_l+0x202>
  403b24:	2d10      	cmp	r5, #16
  403b26:	bfdf      	itttt	le
  403b28:	9805      	ldrle	r0, [sp, #20]
  403b2a:	210a      	movle	r1, #10
  403b2c:	fb01 3300 	mlale	r3, r1, r0, r3
  403b30:	9305      	strle	r3, [sp, #20]
  403b32:	2100      	movs	r1, #0
  403b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b36:	1c58      	adds	r0, r3, #1
  403b38:	9019      	str	r0, [sp, #100]	; 0x64
  403b3a:	785b      	ldrb	r3, [r3, #1]
  403b3c:	4608      	mov	r0, r1
  403b3e:	e001      	b.n	403b44 <_strtod_l+0x214>
  403b40:	9d04      	ldr	r5, [sp, #16]
  403b42:	4602      	mov	r2, r0
  403b44:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  403b48:	2909      	cmp	r1, #9
  403b4a:	d9cb      	bls.n	403ae4 <_strtod_l+0x1b4>
  403b4c:	2101      	movs	r1, #1
  403b4e:	2b65      	cmp	r3, #101	; 0x65
  403b50:	d001      	beq.n	403b56 <_strtod_l+0x226>
  403b52:	2b45      	cmp	r3, #69	; 0x45
  403b54:	d154      	bne.n	403c00 <_strtod_l+0x2d0>
  403b56:	b96d      	cbnz	r5, 403b74 <_strtod_l+0x244>
  403b58:	e004      	b.n	403b64 <_strtod_l+0x234>
  403b5a:	2b65      	cmp	r3, #101	; 0x65
  403b5c:	f040 84b3 	bne.w	4044c6 <_strtod_l+0xb96>
  403b60:	2200      	movs	r2, #0
  403b62:	2101      	movs	r1, #1
  403b64:	b928      	cbnz	r0, 403b72 <_strtod_l+0x242>
  403b66:	9b08      	ldr	r3, [sp, #32]
  403b68:	2b00      	cmp	r3, #0
  403b6a:	f000 8097 	beq.w	403c9c <_strtod_l+0x36c>
  403b6e:	4605      	mov	r5, r0
  403b70:	e000      	b.n	403b74 <_strtod_l+0x244>
  403b72:	2500      	movs	r5, #0
  403b74:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403b76:	9306      	str	r3, [sp, #24]
  403b78:	3301      	adds	r3, #1
  403b7a:	9319      	str	r3, [sp, #100]	; 0x64
  403b7c:	9b06      	ldr	r3, [sp, #24]
  403b7e:	785b      	ldrb	r3, [r3, #1]
  403b80:	2b2b      	cmp	r3, #43	; 0x2b
  403b82:	d006      	beq.n	403b92 <_strtod_l+0x262>
  403b84:	2b2d      	cmp	r3, #45	; 0x2d
  403b86:	d002      	beq.n	403b8e <_strtod_l+0x25e>
  403b88:	2400      	movs	r4, #0
  403b8a:	9407      	str	r4, [sp, #28]
  403b8c:	e008      	b.n	403ba0 <_strtod_l+0x270>
  403b8e:	2301      	movs	r3, #1
  403b90:	e000      	b.n	403b94 <_strtod_l+0x264>
  403b92:	2300      	movs	r3, #0
  403b94:	9307      	str	r3, [sp, #28]
  403b96:	9b06      	ldr	r3, [sp, #24]
  403b98:	3302      	adds	r3, #2
  403b9a:	9319      	str	r3, [sp, #100]	; 0x64
  403b9c:	9b06      	ldr	r3, [sp, #24]
  403b9e:	789b      	ldrb	r3, [r3, #2]
  403ba0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  403ba4:	2c09      	cmp	r4, #9
  403ba6:	d829      	bhi.n	403bfc <_strtod_l+0x2cc>
  403ba8:	2b30      	cmp	r3, #48	; 0x30
  403baa:	d104      	bne.n	403bb6 <_strtod_l+0x286>
  403bac:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bae:	1c5c      	adds	r4, r3, #1
  403bb0:	9419      	str	r4, [sp, #100]	; 0x64
  403bb2:	785b      	ldrb	r3, [r3, #1]
  403bb4:	e7f8      	b.n	403ba8 <_strtod_l+0x278>
  403bb6:	f1a3 0431 	sub.w	r4, r3, #49	; 0x31
  403bba:	2c08      	cmp	r4, #8
  403bbc:	d820      	bhi.n	403c00 <_strtod_l+0x2d0>
  403bbe:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  403bc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bc4:	f04f 0e0a 	mov.w	lr, #10
  403bc8:	461e      	mov	r6, r3
  403bca:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403bcc:	1c5c      	adds	r4, r3, #1
  403bce:	9419      	str	r4, [sp, #100]	; 0x64
  403bd0:	785b      	ldrb	r3, [r3, #1]
  403bd2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
  403bd6:	f1bc 0f09 	cmp.w	ip, #9
  403bda:	d803      	bhi.n	403be4 <_strtod_l+0x2b4>
  403bdc:	fb0e 3707 	mla	r7, lr, r7, r3
  403be0:	3f30      	subs	r7, #48	; 0x30
  403be2:	e7f2      	b.n	403bca <_strtod_l+0x29a>
  403be4:	1ba4      	subs	r4, r4, r6
  403be6:	2c08      	cmp	r4, #8
  403be8:	f644 641f 	movw	r4, #19999	; 0x4e1f
  403bec:	dc02      	bgt.n	403bf4 <_strtod_l+0x2c4>
  403bee:	42bc      	cmp	r4, r7
  403bf0:	bfa8      	it	ge
  403bf2:	463c      	movge	r4, r7
  403bf4:	9e07      	ldr	r6, [sp, #28]
  403bf6:	b126      	cbz	r6, 403c02 <_strtod_l+0x2d2>
  403bf8:	4264      	negs	r4, r4
  403bfa:	e002      	b.n	403c02 <_strtod_l+0x2d2>
  403bfc:	9c06      	ldr	r4, [sp, #24]
  403bfe:	9419      	str	r4, [sp, #100]	; 0x64
  403c00:	2400      	movs	r4, #0
  403c02:	2d00      	cmp	r5, #0
  403c04:	d153      	bne.n	403cae <_strtod_l+0x37e>
  403c06:	2800      	cmp	r0, #0
  403c08:	f040 844f 	bne.w	4044aa <_strtod_l+0xb7a>
  403c0c:	9a08      	ldr	r2, [sp, #32]
  403c0e:	2a00      	cmp	r2, #0
  403c10:	f040 844b 	bne.w	4044aa <_strtod_l+0xb7a>
  403c14:	2900      	cmp	r1, #0
  403c16:	d141      	bne.n	403c9c <_strtod_l+0x36c>
  403c18:	2b4e      	cmp	r3, #78	; 0x4e
  403c1a:	d020      	beq.n	403c5e <_strtod_l+0x32e>
  403c1c:	dc02      	bgt.n	403c24 <_strtod_l+0x2f4>
  403c1e:	2b49      	cmp	r3, #73	; 0x49
  403c20:	d00a      	beq.n	403c38 <_strtod_l+0x308>
  403c22:	e03b      	b.n	403c9c <_strtod_l+0x36c>
  403c24:	2b69      	cmp	r3, #105	; 0x69
  403c26:	d007      	beq.n	403c38 <_strtod_l+0x308>
  403c28:	2b6e      	cmp	r3, #110	; 0x6e
  403c2a:	d018      	beq.n	403c5e <_strtod_l+0x32e>
  403c2c:	e036      	b.n	403c9c <_strtod_l+0x36c>
  403c2e:	bf00      	nop
  403c30:	00408220 	.word	0x00408220
  403c34:	7ff00000 	.word	0x7ff00000
  403c38:	49ab      	ldr	r1, [pc, #684]	; (403ee8 <_strtod_l+0x5b8>)
  403c3a:	a819      	add	r0, sp, #100	; 0x64
  403c3c:	f002 f831 	bl	405ca2 <__match>
  403c40:	b360      	cbz	r0, 403c9c <_strtod_l+0x36c>
  403c42:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c44:	49a9      	ldr	r1, [pc, #676]	; (403eec <_strtod_l+0x5bc>)
  403c46:	3b01      	subs	r3, #1
  403c48:	a819      	add	r0, sp, #100	; 0x64
  403c4a:	9319      	str	r3, [sp, #100]	; 0x64
  403c4c:	f002 f829 	bl	405ca2 <__match>
  403c50:	b910      	cbnz	r0, 403c58 <_strtod_l+0x328>
  403c52:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c54:	3301      	adds	r3, #1
  403c56:	9319      	str	r3, [sp, #100]	; 0x64
  403c58:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 403f08 <_strtod_l+0x5d8>
  403c5c:	e01a      	b.n	403c94 <_strtod_l+0x364>
  403c5e:	49a4      	ldr	r1, [pc, #656]	; (403ef0 <_strtod_l+0x5c0>)
  403c60:	a819      	add	r0, sp, #100	; 0x64
  403c62:	f002 f81e 	bl	405ca2 <__match>
  403c66:	b1c8      	cbz	r0, 403c9c <_strtod_l+0x36c>
  403c68:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c6a:	781b      	ldrb	r3, [r3, #0]
  403c6c:	2b28      	cmp	r3, #40	; 0x28
  403c6e:	d10f      	bne.n	403c90 <_strtod_l+0x360>
  403c70:	aa1c      	add	r2, sp, #112	; 0x70
  403c72:	49a0      	ldr	r1, [pc, #640]	; (403ef4 <_strtod_l+0x5c4>)
  403c74:	a819      	add	r0, sp, #100	; 0x64
  403c76:	f002 f827 	bl	405cc8 <__hexnan>
  403c7a:	2805      	cmp	r0, #5
  403c7c:	d108      	bne.n	403c90 <_strtod_l+0x360>
  403c7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  403c80:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
  403c84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
  403c88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
  403c8c:	f000 bc0d 	b.w	4044aa <_strtod_l+0xb7a>
  403c90:	f8df 9278 	ldr.w	r9, [pc, #632]	; 403f0c <_strtod_l+0x5dc>
  403c94:	f04f 0800 	mov.w	r8, #0
  403c98:	f000 bc07 	b.w	4044aa <_strtod_l+0xb7a>
  403c9c:	9b06      	ldr	r3, [sp, #24]
  403c9e:	9319      	str	r3, [sp, #100]	; 0x64
  403ca0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403ca2:	2b00      	cmp	r3, #0
  403ca4:	f000 840c 	beq.w	4044c0 <_strtod_l+0xb90>
  403ca8:	2300      	movs	r3, #0
  403caa:	930e      	str	r3, [sp, #56]	; 0x38
  403cac:	e3ff      	b.n	4044ae <_strtod_l+0xb7e>
  403cae:	9b04      	ldr	r3, [sp, #16]
  403cb0:	4658      	mov	r0, fp
  403cb2:	2b00      	cmp	r3, #0
  403cb4:	bf08      	it	eq
  403cb6:	462b      	moveq	r3, r5
  403cb8:	2d10      	cmp	r5, #16
  403cba:	eba4 0702 	sub.w	r7, r4, r2
  403cbe:	9304      	str	r3, [sp, #16]
  403cc0:	462c      	mov	r4, r5
  403cc2:	bfa8      	it	ge
  403cc4:	2410      	movge	r4, #16
  403cc6:	f003 f975 	bl	406fb4 <__aeabi_ui2d>
  403cca:	2c09      	cmp	r4, #9
  403ccc:	4680      	mov	r8, r0
  403cce:	4689      	mov	r9, r1
  403cd0:	dd13      	ble.n	403cfa <_strtod_l+0x3ca>
  403cd2:	4b89      	ldr	r3, [pc, #548]	; (403ef8 <_strtod_l+0x5c8>)
  403cd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  403cd8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  403cdc:	f003 f9e0 	bl	4070a0 <__aeabi_dmul>
  403ce0:	4680      	mov	r8, r0
  403ce2:	9805      	ldr	r0, [sp, #20]
  403ce4:	4689      	mov	r9, r1
  403ce6:	f003 f965 	bl	406fb4 <__aeabi_ui2d>
  403cea:	4602      	mov	r2, r0
  403cec:	460b      	mov	r3, r1
  403cee:	4640      	mov	r0, r8
  403cf0:	4649      	mov	r1, r9
  403cf2:	f003 f823 	bl	406d3c <__adddf3>
  403cf6:	4680      	mov	r8, r0
  403cf8:	4689      	mov	r9, r1
  403cfa:	2d0f      	cmp	r5, #15
  403cfc:	dc33      	bgt.n	403d66 <_strtod_l+0x436>
  403cfe:	2f00      	cmp	r7, #0
  403d00:	f000 83d3 	beq.w	4044aa <_strtod_l+0xb7a>
  403d04:	dd22      	ble.n	403d4c <_strtod_l+0x41c>
  403d06:	2f16      	cmp	r7, #22
  403d08:	dc07      	bgt.n	403d1a <_strtod_l+0x3ea>
  403d0a:	4d7b      	ldr	r5, [pc, #492]	; (403ef8 <_strtod_l+0x5c8>)
  403d0c:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
  403d10:	4642      	mov	r2, r8
  403d12:	464b      	mov	r3, r9
  403d14:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d18:	e013      	b.n	403d42 <_strtod_l+0x412>
  403d1a:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
  403d1e:	429f      	cmp	r7, r3
  403d20:	dc21      	bgt.n	403d66 <_strtod_l+0x436>
  403d22:	4c75      	ldr	r4, [pc, #468]	; (403ef8 <_strtod_l+0x5c8>)
  403d24:	f1c5 050f 	rsb	r5, r5, #15
  403d28:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  403d2c:	1b7d      	subs	r5, r7, r5
  403d2e:	4642      	mov	r2, r8
  403d30:	464b      	mov	r3, r9
  403d32:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d36:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  403d3a:	f003 f9b1 	bl	4070a0 <__aeabi_dmul>
  403d3e:	e9d4 2300 	ldrd	r2, r3, [r4]
  403d42:	f003 f9ad 	bl	4070a0 <__aeabi_dmul>
  403d46:	4680      	mov	r8, r0
  403d48:	4689      	mov	r9, r1
  403d4a:	e3ae      	b.n	4044aa <_strtod_l+0xb7a>
  403d4c:	f117 0f16 	cmn.w	r7, #22
  403d50:	db09      	blt.n	403d66 <_strtod_l+0x436>
  403d52:	4d69      	ldr	r5, [pc, #420]	; (403ef8 <_strtod_l+0x5c8>)
  403d54:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
  403d58:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d5c:	4640      	mov	r0, r8
  403d5e:	4649      	mov	r1, r9
  403d60:	f003 fac8 	bl	4072f4 <__aeabi_ddiv>
  403d64:	e7ef      	b.n	403d46 <_strtod_l+0x416>
  403d66:	1b2c      	subs	r4, r5, r4
  403d68:	443c      	add	r4, r7
  403d6a:	2c00      	cmp	r4, #0
  403d6c:	dd5d      	ble.n	403e2a <_strtod_l+0x4fa>
  403d6e:	f014 010f 	ands.w	r1, r4, #15
  403d72:	d00a      	beq.n	403d8a <_strtod_l+0x45a>
  403d74:	4b60      	ldr	r3, [pc, #384]	; (403ef8 <_strtod_l+0x5c8>)
  403d76:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403d7a:	4642      	mov	r2, r8
  403d7c:	464b      	mov	r3, r9
  403d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403d82:	f003 f98d 	bl	4070a0 <__aeabi_dmul>
  403d86:	4680      	mov	r8, r0
  403d88:	4689      	mov	r9, r1
  403d8a:	f034 040f 	bics.w	r4, r4, #15
  403d8e:	f000 80c1 	beq.w	403f14 <_strtod_l+0x5e4>
  403d92:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  403d96:	dd0f      	ble.n	403db8 <_strtod_l+0x488>
  403d98:	f04f 0b00 	mov.w	fp, #0
  403d9c:	f8cd b010 	str.w	fp, [sp, #16]
  403da0:	f8cd b01c 	str.w	fp, [sp, #28]
  403da4:	f8cd b018 	str.w	fp, [sp, #24]
  403da8:	2322      	movs	r3, #34	; 0x22
  403daa:	f8ca 3000 	str.w	r3, [sl]
  403dae:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403f08 <_strtod_l+0x5d8>
  403db2:	f04f 0800 	mov.w	r8, #0
  403db6:	e188      	b.n	4040ca <_strtod_l+0x79a>
  403db8:	2300      	movs	r3, #0
  403dba:	4e50      	ldr	r6, [pc, #320]	; (403efc <_strtod_l+0x5cc>)
  403dbc:	9305      	str	r3, [sp, #20]
  403dbe:	1124      	asrs	r4, r4, #4
  403dc0:	4640      	mov	r0, r8
  403dc2:	4649      	mov	r1, r9
  403dc4:	2c01      	cmp	r4, #1
  403dc6:	dd0c      	ble.n	403de2 <_strtod_l+0x4b2>
  403dc8:	07e2      	lsls	r2, r4, #31
  403dca:	d504      	bpl.n	403dd6 <_strtod_l+0x4a6>
  403dcc:	e9d6 2300 	ldrd	r2, r3, [r6]
  403dd0:	f003 f966 	bl	4070a0 <__aeabi_dmul>
  403dd4:	2301      	movs	r3, #1
  403dd6:	9a05      	ldr	r2, [sp, #20]
  403dd8:	3201      	adds	r2, #1
  403dda:	9205      	str	r2, [sp, #20]
  403ddc:	1064      	asrs	r4, r4, #1
  403dde:	3608      	adds	r6, #8
  403de0:	e7f0      	b.n	403dc4 <_strtod_l+0x494>
  403de2:	b10b      	cbz	r3, 403de8 <_strtod_l+0x4b8>
  403de4:	4680      	mov	r8, r0
  403de6:	4689      	mov	r9, r1
  403de8:	4b44      	ldr	r3, [pc, #272]	; (403efc <_strtod_l+0x5cc>)
  403dea:	9a05      	ldr	r2, [sp, #20]
  403dec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  403df0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
  403df4:	e9d1 0100 	ldrd	r0, r1, [r1]
  403df8:	4642      	mov	r2, r8
  403dfa:	464b      	mov	r3, r9
  403dfc:	f003 f950 	bl	4070a0 <__aeabi_dmul>
  403e00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403e04:	4689      	mov	r9, r1
  403e06:	460a      	mov	r2, r1
  403e08:	0d1b      	lsrs	r3, r3, #20
  403e0a:	493d      	ldr	r1, [pc, #244]	; (403f00 <_strtod_l+0x5d0>)
  403e0c:	051b      	lsls	r3, r3, #20
  403e0e:	428b      	cmp	r3, r1
  403e10:	4680      	mov	r8, r0
  403e12:	d8c1      	bhi.n	403d98 <_strtod_l+0x468>
  403e14:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
  403e18:	428b      	cmp	r3, r1
  403e1a:	bf86      	itte	hi
  403e1c:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 403f10 <_strtod_l+0x5e0>
  403e20:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
  403e24:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
  403e28:	e074      	b.n	403f14 <_strtod_l+0x5e4>
  403e2a:	d073      	beq.n	403f14 <_strtod_l+0x5e4>
  403e2c:	4264      	negs	r4, r4
  403e2e:	f014 020f 	ands.w	r2, r4, #15
  403e32:	d00a      	beq.n	403e4a <_strtod_l+0x51a>
  403e34:	4b30      	ldr	r3, [pc, #192]	; (403ef8 <_strtod_l+0x5c8>)
  403e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403e3a:	4640      	mov	r0, r8
  403e3c:	4649      	mov	r1, r9
  403e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e42:	f003 fa57 	bl	4072f4 <__aeabi_ddiv>
  403e46:	4680      	mov	r8, r0
  403e48:	4689      	mov	r9, r1
  403e4a:	1124      	asrs	r4, r4, #4
  403e4c:	d062      	beq.n	403f14 <_strtod_l+0x5e4>
  403e4e:	2c1f      	cmp	r4, #31
  403e50:	dd08      	ble.n	403e64 <_strtod_l+0x534>
  403e52:	f04f 0b00 	mov.w	fp, #0
  403e56:	f8cd b010 	str.w	fp, [sp, #16]
  403e5a:	f8cd b01c 	str.w	fp, [sp, #28]
  403e5e:	f8cd b018 	str.w	fp, [sp, #24]
  403e62:	e12b      	b.n	4040bc <_strtod_l+0x78c>
  403e64:	f014 0f10 	tst.w	r4, #16
  403e68:	bf0c      	ite	eq
  403e6a:	2300      	moveq	r3, #0
  403e6c:	236a      	movne	r3, #106	; 0x6a
  403e6e:	4e25      	ldr	r6, [pc, #148]	; (403f04 <_strtod_l+0x5d4>)
  403e70:	9305      	str	r3, [sp, #20]
  403e72:	4640      	mov	r0, r8
  403e74:	4649      	mov	r1, r9
  403e76:	2300      	movs	r3, #0
  403e78:	2c00      	cmp	r4, #0
  403e7a:	dd09      	ble.n	403e90 <_strtod_l+0x560>
  403e7c:	07e2      	lsls	r2, r4, #31
  403e7e:	d504      	bpl.n	403e8a <_strtod_l+0x55a>
  403e80:	e9d6 2300 	ldrd	r2, r3, [r6]
  403e84:	f003 f90c 	bl	4070a0 <__aeabi_dmul>
  403e88:	2301      	movs	r3, #1
  403e8a:	1064      	asrs	r4, r4, #1
  403e8c:	3608      	adds	r6, #8
  403e8e:	e7f3      	b.n	403e78 <_strtod_l+0x548>
  403e90:	b10b      	cbz	r3, 403e96 <_strtod_l+0x566>
  403e92:	4680      	mov	r8, r0
  403e94:	4689      	mov	r9, r1
  403e96:	9b05      	ldr	r3, [sp, #20]
  403e98:	b1eb      	cbz	r3, 403ed6 <_strtod_l+0x5a6>
  403e9a:	f3c9 530a 	ubfx	r3, r9, #20, #11
  403e9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  403ea2:	2b00      	cmp	r3, #0
  403ea4:	4649      	mov	r1, r9
  403ea6:	dd16      	ble.n	403ed6 <_strtod_l+0x5a6>
  403ea8:	2b1f      	cmp	r3, #31
  403eaa:	dd0e      	ble.n	403eca <_strtod_l+0x59a>
  403eac:	2b34      	cmp	r3, #52	; 0x34
  403eae:	bfde      	ittt	le
  403eb0:	3b20      	suble	r3, #32
  403eb2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
  403eb6:	fa02 f303 	lslle.w	r3, r2, r3
  403eba:	f04f 0800 	mov.w	r8, #0
  403ebe:	bfcc      	ite	gt
  403ec0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
  403ec4:	ea03 0901 	andle.w	r9, r3, r1
  403ec8:	e005      	b.n	403ed6 <_strtod_l+0x5a6>
  403eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  403ece:	fa02 f303 	lsl.w	r3, r2, r3
  403ed2:	ea03 0808 	and.w	r8, r3, r8
  403ed6:	2200      	movs	r2, #0
  403ed8:	2300      	movs	r3, #0
  403eda:	4640      	mov	r0, r8
  403edc:	4649      	mov	r1, r9
  403ede:	f003 fb47 	bl	407570 <__aeabi_dcmpeq>
  403ee2:	2800      	cmp	r0, #0
  403ee4:	d1b5      	bne.n	403e52 <_strtod_l+0x522>
  403ee6:	e017      	b.n	403f18 <_strtod_l+0x5e8>
  403ee8:	004081c9 	.word	0x004081c9
  403eec:	0040824b 	.word	0x0040824b
  403ef0:	004081d1 	.word	0x004081d1
  403ef4:	00408234 	.word	0x00408234
  403ef8:	004082c8 	.word	0x004082c8
  403efc:	00408390 	.word	0x00408390
  403f00:	7ca00000 	.word	0x7ca00000
  403f04:	004081f8 	.word	0x004081f8
  403f08:	7ff00000 	.word	0x7ff00000
  403f0c:	fff80000 	.word	0xfff80000
  403f10:	7fefffff 	.word	0x7fefffff
  403f14:	2300      	movs	r3, #0
  403f16:	9305      	str	r3, [sp, #20]
  403f18:	f8cd b000 	str.w	fp, [sp]
  403f1c:	462b      	mov	r3, r5
  403f1e:	9a04      	ldr	r2, [sp, #16]
  403f20:	9909      	ldr	r1, [sp, #36]	; 0x24
  403f22:	4650      	mov	r0, sl
  403f24:	f002 f8c3 	bl	4060ae <__s2b>
  403f28:	9007      	str	r0, [sp, #28]
  403f2a:	2800      	cmp	r0, #0
  403f2c:	f43f af34 	beq.w	403d98 <_strtod_l+0x468>
  403f30:	2f00      	cmp	r7, #0
  403f32:	f1c7 0300 	rsb	r3, r7, #0
  403f36:	bfa8      	it	ge
  403f38:	2300      	movge	r3, #0
  403f3a:	930f      	str	r3, [sp, #60]	; 0x3c
  403f3c:	f04f 0b00 	mov.w	fp, #0
  403f40:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
  403f44:	9314      	str	r3, [sp, #80]	; 0x50
  403f46:	f8cd b010 	str.w	fp, [sp, #16]
  403f4a:	9b07      	ldr	r3, [sp, #28]
  403f4c:	4650      	mov	r0, sl
  403f4e:	6859      	ldr	r1, [r3, #4]
  403f50:	f002 f826 	bl	405fa0 <_Balloc>
  403f54:	9006      	str	r0, [sp, #24]
  403f56:	2800      	cmp	r0, #0
  403f58:	f43f af26 	beq.w	403da8 <_strtod_l+0x478>
  403f5c:	9b07      	ldr	r3, [sp, #28]
  403f5e:	691a      	ldr	r2, [r3, #16]
  403f60:	3202      	adds	r2, #2
  403f62:	f103 010c 	add.w	r1, r3, #12
  403f66:	0092      	lsls	r2, r2, #2
  403f68:	300c      	adds	r0, #12
  403f6a:	f7fe fef5 	bl	402d58 <memcpy>
  403f6e:	ab1c      	add	r3, sp, #112	; 0x70
  403f70:	9301      	str	r3, [sp, #4]
  403f72:	ab1b      	add	r3, sp, #108	; 0x6c
  403f74:	9300      	str	r3, [sp, #0]
  403f76:	4642      	mov	r2, r8
  403f78:	464b      	mov	r3, r9
  403f7a:	4650      	mov	r0, sl
  403f7c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  403f80:	f002 fb45 	bl	40660e <__d2b>
  403f84:	901a      	str	r0, [sp, #104]	; 0x68
  403f86:	2800      	cmp	r0, #0
  403f88:	f43f af0e 	beq.w	403da8 <_strtod_l+0x478>
  403f8c:	2101      	movs	r1, #1
  403f8e:	4650      	mov	r0, sl
  403f90:	f002 f918 	bl	4061c4 <__i2b>
  403f94:	9004      	str	r0, [sp, #16]
  403f96:	2800      	cmp	r0, #0
  403f98:	f43f af06 	beq.w	403da8 <_strtod_l+0x478>
  403f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  403f9e:	9905      	ldr	r1, [sp, #20]
  403fa0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  403fa2:	2b00      	cmp	r3, #0
  403fa4:	bfad      	iteet	ge
  403fa6:	9a0f      	ldrge	r2, [sp, #60]	; 0x3c
  403fa8:	9a14      	ldrlt	r2, [sp, #80]	; 0x50
  403faa:	9e0f      	ldrlt	r6, [sp, #60]	; 0x3c
  403fac:	18d6      	addge	r6, r2, r3
  403fae:	bfb8      	it	lt
  403fb0:	1ad2      	sublt	r2, r2, r3
  403fb2:	eba3 0301 	sub.w	r3, r3, r1
  403fb6:	4423      	add	r3, r4
  403fb8:	49af      	ldr	r1, [pc, #700]	; (404278 <_strtod_l+0x948>)
  403fba:	bfa8      	it	ge
  403fbc:	9a14      	ldrge	r2, [sp, #80]	; 0x50
  403fbe:	3b01      	subs	r3, #1
  403fc0:	428b      	cmp	r3, r1
  403fc2:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
  403fc6:	f280 8085 	bge.w	4040d4 <_strtod_l+0x7a4>
  403fca:	1ac9      	subs	r1, r1, r3
  403fcc:	291f      	cmp	r1, #31
  403fce:	bfc8      	it	gt
  403fd0:	4daa      	ldrgt	r5, [pc, #680]	; (40427c <_strtod_l+0x94c>)
  403fd2:	f04f 0701 	mov.w	r7, #1
  403fd6:	bfd4      	ite	le
  403fd8:	fa07 f301 	lslle.w	r3, r7, r1
  403fdc:	1aed      	subgt	r5, r5, r3
  403fde:	eba4 0401 	sub.w	r4, r4, r1
  403fe2:	bfd9      	ittee	le
  403fe4:	9309      	strle	r3, [sp, #36]	; 0x24
  403fe6:	2500      	movle	r5, #0
  403fe8:	fa07 f505 	lslgt.w	r5, r7, r5
  403fec:	9709      	strgt	r7, [sp, #36]	; 0x24
  403fee:	1937      	adds	r7, r6, r4
  403ff0:	9b05      	ldr	r3, [sp, #20]
  403ff2:	42be      	cmp	r6, r7
  403ff4:	4414      	add	r4, r2
  403ff6:	441c      	add	r4, r3
  403ff8:	4633      	mov	r3, r6
  403ffa:	bfa8      	it	ge
  403ffc:	463b      	movge	r3, r7
  403ffe:	42a3      	cmp	r3, r4
  404000:	bfa8      	it	ge
  404002:	4623      	movge	r3, r4
  404004:	2b00      	cmp	r3, #0
  404006:	bfc2      	ittt	gt
  404008:	1aff      	subgt	r7, r7, r3
  40400a:	1ae4      	subgt	r4, r4, r3
  40400c:	1af6      	subgt	r6, r6, r3
  40400e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404010:	2b00      	cmp	r3, #0
  404012:	d163      	bne.n	4040dc <_strtod_l+0x7ac>
  404014:	2f00      	cmp	r7, #0
  404016:	dc7a      	bgt.n	40410e <_strtod_l+0x7de>
  404018:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40401a:	2b00      	cmp	r3, #0
  40401c:	f040 8081 	bne.w	404122 <_strtod_l+0x7f2>
  404020:	2c00      	cmp	r4, #0
  404022:	f300 8088 	bgt.w	404136 <_strtod_l+0x806>
  404026:	2e00      	cmp	r6, #0
  404028:	f300 808f 	bgt.w	40414a <_strtod_l+0x81a>
  40402c:	9a06      	ldr	r2, [sp, #24]
  40402e:	991a      	ldr	r1, [sp, #104]	; 0x68
  404030:	4650      	mov	r0, sl
  404032:	f002 fa1c 	bl	40646e <__mdiff>
  404036:	4683      	mov	fp, r0
  404038:	2800      	cmp	r0, #0
  40403a:	f43f aeb5 	beq.w	403da8 <_strtod_l+0x478>
  40403e:	2400      	movs	r4, #0
  404040:	68c3      	ldr	r3, [r0, #12]
  404042:	9904      	ldr	r1, [sp, #16]
  404044:	60c4      	str	r4, [r0, #12]
  404046:	9308      	str	r3, [sp, #32]
  404048:	f002 f9f5 	bl	406436 <__mcmp>
  40404c:	42a0      	cmp	r0, r4
  40404e:	f280 808b 	bge.w	404168 <_strtod_l+0x838>
  404052:	9b08      	ldr	r3, [sp, #32]
  404054:	2b00      	cmp	r3, #0
  404056:	f040 8201 	bne.w	40445c <_strtod_l+0xb2c>
  40405a:	f1b8 0f00 	cmp.w	r8, #0
  40405e:	f040 81fd 	bne.w	40445c <_strtod_l+0xb2c>
  404062:	f3c9 0313 	ubfx	r3, r9, #0, #20
  404066:	2b00      	cmp	r3, #0
  404068:	f040 81f8 	bne.w	40445c <_strtod_l+0xb2c>
  40406c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  404070:	0d1b      	lsrs	r3, r3, #20
  404072:	051b      	lsls	r3, r3, #20
  404074:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  404078:	f240 81f0 	bls.w	40445c <_strtod_l+0xb2c>
  40407c:	f8db 3014 	ldr.w	r3, [fp, #20]
  404080:	2b00      	cmp	r3, #0
  404082:	d06c      	beq.n	40415e <_strtod_l+0x82e>
  404084:	4659      	mov	r1, fp
  404086:	2201      	movs	r2, #1
  404088:	4650      	mov	r0, sl
  40408a:	f002 f983 	bl	406394 <__lshift>
  40408e:	9904      	ldr	r1, [sp, #16]
  404090:	4683      	mov	fp, r0
  404092:	f002 f9d0 	bl	406436 <__mcmp>
  404096:	2800      	cmp	r0, #0
  404098:	f340 81e0 	ble.w	40445c <_strtod_l+0xb2c>
  40409c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4040a0:	9a05      	ldr	r2, [sp, #20]
  4040a2:	0d1b      	lsrs	r3, r3, #20
  4040a4:	051b      	lsls	r3, r3, #20
  4040a6:	2a00      	cmp	r2, #0
  4040a8:	f000 808d 	beq.w	4041c6 <_strtod_l+0x896>
  4040ac:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  4040b0:	f300 8089 	bgt.w	4041c6 <_strtod_l+0x896>
  4040b4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  4040b8:	f300 81d2 	bgt.w	404460 <_strtod_l+0xb30>
  4040bc:	2322      	movs	r3, #34	; 0x22
  4040be:	f04f 0800 	mov.w	r8, #0
  4040c2:	f04f 0900 	mov.w	r9, #0
  4040c6:	f8ca 3000 	str.w	r3, [sl]
  4040ca:	9b07      	ldr	r3, [sp, #28]
  4040cc:	2b00      	cmp	r3, #0
  4040ce:	f040 81d8 	bne.w	404482 <_strtod_l+0xb52>
  4040d2:	e1ea      	b.n	4044aa <_strtod_l+0xb7a>
  4040d4:	2301      	movs	r3, #1
  4040d6:	2500      	movs	r5, #0
  4040d8:	9309      	str	r3, [sp, #36]	; 0x24
  4040da:	e788      	b.n	403fee <_strtod_l+0x6be>
  4040dc:	461a      	mov	r2, r3
  4040de:	9904      	ldr	r1, [sp, #16]
  4040e0:	4650      	mov	r0, sl
  4040e2:	f002 f909 	bl	4062f8 <__pow5mult>
  4040e6:	9004      	str	r0, [sp, #16]
  4040e8:	2800      	cmp	r0, #0
  4040ea:	f43f ae5d 	beq.w	403da8 <_strtod_l+0x478>
  4040ee:	4601      	mov	r1, r0
  4040f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4040f2:	4650      	mov	r0, sl
  4040f4:	f002 f86f 	bl	4061d6 <__multiply>
  4040f8:	9008      	str	r0, [sp, #32]
  4040fa:	2800      	cmp	r0, #0
  4040fc:	f43f ae54 	beq.w	403da8 <_strtod_l+0x478>
  404100:	991a      	ldr	r1, [sp, #104]	; 0x68
  404102:	4650      	mov	r0, sl
  404104:	f001 ff81 	bl	40600a <_Bfree>
  404108:	9b08      	ldr	r3, [sp, #32]
  40410a:	931a      	str	r3, [sp, #104]	; 0x68
  40410c:	e782      	b.n	404014 <_strtod_l+0x6e4>
  40410e:	463a      	mov	r2, r7
  404110:	991a      	ldr	r1, [sp, #104]	; 0x68
  404112:	4650      	mov	r0, sl
  404114:	f002 f93e 	bl	406394 <__lshift>
  404118:	901a      	str	r0, [sp, #104]	; 0x68
  40411a:	2800      	cmp	r0, #0
  40411c:	f47f af7c 	bne.w	404018 <_strtod_l+0x6e8>
  404120:	e642      	b.n	403da8 <_strtod_l+0x478>
  404122:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404124:	9906      	ldr	r1, [sp, #24]
  404126:	4650      	mov	r0, sl
  404128:	f002 f8e6 	bl	4062f8 <__pow5mult>
  40412c:	9006      	str	r0, [sp, #24]
  40412e:	2800      	cmp	r0, #0
  404130:	f47f af76 	bne.w	404020 <_strtod_l+0x6f0>
  404134:	e638      	b.n	403da8 <_strtod_l+0x478>
  404136:	4622      	mov	r2, r4
  404138:	9906      	ldr	r1, [sp, #24]
  40413a:	4650      	mov	r0, sl
  40413c:	f002 f92a 	bl	406394 <__lshift>
  404140:	9006      	str	r0, [sp, #24]
  404142:	2800      	cmp	r0, #0
  404144:	f47f af6f 	bne.w	404026 <_strtod_l+0x6f6>
  404148:	e62e      	b.n	403da8 <_strtod_l+0x478>
  40414a:	4632      	mov	r2, r6
  40414c:	9904      	ldr	r1, [sp, #16]
  40414e:	4650      	mov	r0, sl
  404150:	f002 f920 	bl	406394 <__lshift>
  404154:	9004      	str	r0, [sp, #16]
  404156:	2800      	cmp	r0, #0
  404158:	f47f af68 	bne.w	40402c <_strtod_l+0x6fc>
  40415c:	e624      	b.n	403da8 <_strtod_l+0x478>
  40415e:	f8db 3010 	ldr.w	r3, [fp, #16]
  404162:	2b01      	cmp	r3, #1
  404164:	dc8e      	bgt.n	404084 <_strtod_l+0x754>
  404166:	e179      	b.n	40445c <_strtod_l+0xb2c>
  404168:	d161      	bne.n	40422e <_strtod_l+0x8fe>
  40416a:	9a08      	ldr	r2, [sp, #32]
  40416c:	f3c9 0313 	ubfx	r3, r9, #0, #20
  404170:	b322      	cbz	r2, 4041bc <_strtod_l+0x88c>
  404172:	4943      	ldr	r1, [pc, #268]	; (404280 <_strtod_l+0x950>)
  404174:	428b      	cmp	r3, r1
  404176:	464a      	mov	r2, r9
  404178:	d12e      	bne.n	4041d8 <_strtod_l+0x8a8>
  40417a:	9b05      	ldr	r3, [sp, #20]
  40417c:	4641      	mov	r1, r8
  40417e:	b163      	cbz	r3, 40419a <_strtod_l+0x86a>
  404180:	4b40      	ldr	r3, [pc, #256]	; (404284 <_strtod_l+0x954>)
  404182:	4013      	ands	r3, r2
  404184:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  404188:	d807      	bhi.n	40419a <_strtod_l+0x86a>
  40418a:	0d1b      	lsrs	r3, r3, #20
  40418c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  404190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404194:	fa00 f303 	lsl.w	r3, r0, r3
  404198:	e001      	b.n	40419e <_strtod_l+0x86e>
  40419a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  40419e:	428b      	cmp	r3, r1
  4041a0:	d11a      	bne.n	4041d8 <_strtod_l+0x8a8>
  4041a2:	4939      	ldr	r1, [pc, #228]	; (404288 <_strtod_l+0x958>)
  4041a4:	428a      	cmp	r2, r1
  4041a6:	d102      	bne.n	4041ae <_strtod_l+0x87e>
  4041a8:	3301      	adds	r3, #1
  4041aa:	f43f adfd 	beq.w	403da8 <_strtod_l+0x478>
  4041ae:	4b35      	ldr	r3, [pc, #212]	; (404284 <_strtod_l+0x954>)
  4041b0:	4013      	ands	r3, r2
  4041b2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
  4041b6:	f04f 0800 	mov.w	r8, #0
  4041ba:	e14f      	b.n	40445c <_strtod_l+0xb2c>
  4041bc:	b963      	cbnz	r3, 4041d8 <_strtod_l+0x8a8>
  4041be:	f1b8 0f00 	cmp.w	r8, #0
  4041c2:	d109      	bne.n	4041d8 <_strtod_l+0x8a8>
  4041c4:	e76a      	b.n	40409c <_strtod_l+0x76c>
  4041c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  4041ca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
  4041ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
  4041d2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  4041d6:	e141      	b.n	40445c <_strtod_l+0xb2c>
  4041d8:	b115      	cbz	r5, 4041e0 <_strtod_l+0x8b0>
  4041da:	ea15 0f09 	tst.w	r5, r9
  4041de:	e002      	b.n	4041e6 <_strtod_l+0x8b6>
  4041e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041e2:	ea13 0f08 	tst.w	r3, r8
  4041e6:	f000 8139 	beq.w	40445c <_strtod_l+0xb2c>
  4041ea:	9b08      	ldr	r3, [sp, #32]
  4041ec:	9a05      	ldr	r2, [sp, #20]
  4041ee:	4640      	mov	r0, r8
  4041f0:	4649      	mov	r1, r9
  4041f2:	b153      	cbz	r3, 40420a <_strtod_l+0x8da>
  4041f4:	f7ff fb78 	bl	4038e8 <sulp>
  4041f8:	4602      	mov	r2, r0
  4041fa:	460b      	mov	r3, r1
  4041fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404200:	f002 fd9c 	bl	406d3c <__adddf3>
  404204:	4680      	mov	r8, r0
  404206:	4689      	mov	r9, r1
  404208:	e128      	b.n	40445c <_strtod_l+0xb2c>
  40420a:	f7ff fb6d 	bl	4038e8 <sulp>
  40420e:	4602      	mov	r2, r0
  404210:	460b      	mov	r3, r1
  404212:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  404216:	f002 fd8f 	bl	406d38 <__aeabi_dsub>
  40421a:	2200      	movs	r2, #0
  40421c:	2300      	movs	r3, #0
  40421e:	4680      	mov	r8, r0
  404220:	4689      	mov	r9, r1
  404222:	f003 f9a5 	bl	407570 <__aeabi_dcmpeq>
  404226:	2800      	cmp	r0, #0
  404228:	f47f af48 	bne.w	4040bc <_strtod_l+0x78c>
  40422c:	e116      	b.n	40445c <_strtod_l+0xb2c>
  40422e:	9904      	ldr	r1, [sp, #16]
  404230:	4658      	mov	r0, fp
  404232:	f002 fa3a 	bl	4066aa <__ratio>
  404236:	2200      	movs	r2, #0
  404238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40423c:	4606      	mov	r6, r0
  40423e:	460f      	mov	r7, r1
  404240:	f003 f9aa 	bl	407598 <__aeabi_dcmple>
  404244:	2800      	cmp	r0, #0
  404246:	d03e      	beq.n	4042c6 <_strtod_l+0x996>
  404248:	9b08      	ldr	r3, [sp, #32]
  40424a:	b113      	cbz	r3, 404252 <_strtod_l+0x922>
  40424c:	2600      	movs	r6, #0
  40424e:	4f0f      	ldr	r7, [pc, #60]	; (40428c <_strtod_l+0x95c>)
  404250:	e010      	b.n	404274 <_strtod_l+0x944>
  404252:	f1b8 0f00 	cmp.w	r8, #0
  404256:	d103      	bne.n	404260 <_strtod_l+0x930>
  404258:	f3c9 0313 	ubfx	r3, r9, #0, #20
  40425c:	b93b      	cbnz	r3, 40426e <_strtod_l+0x93e>
  40425e:	e019      	b.n	404294 <_strtod_l+0x964>
  404260:	f1b8 0f01 	cmp.w	r8, #1
  404264:	d103      	bne.n	40426e <_strtod_l+0x93e>
  404266:	f1b9 0f00 	cmp.w	r9, #0
  40426a:	f43f af27 	beq.w	4040bc <_strtod_l+0x78c>
  40426e:	4f08      	ldr	r7, [pc, #32]	; (404290 <_strtod_l+0x960>)
  404270:	2600      	movs	r6, #0
  404272:	2400      	movs	r4, #0
  404274:	4d05      	ldr	r5, [pc, #20]	; (40428c <_strtod_l+0x95c>)
  404276:	e03b      	b.n	4042f0 <_strtod_l+0x9c0>
  404278:	fffffc02 	.word	0xfffffc02
  40427c:	fffffbe2 	.word	0xfffffbe2
  404280:	000fffff 	.word	0x000fffff
  404284:	7ff00000 	.word	0x7ff00000
  404288:	7fefffff 	.word	0x7fefffff
  40428c:	3ff00000 	.word	0x3ff00000
  404290:	bff00000 	.word	0xbff00000
  404294:	2200      	movs	r2, #0
  404296:	4b9a      	ldr	r3, [pc, #616]	; (404500 <_strtod_l+0xbd0>)
  404298:	4630      	mov	r0, r6
  40429a:	4639      	mov	r1, r7
  40429c:	f003 f972 	bl	407584 <__aeabi_dcmplt>
  4042a0:	b940      	cbnz	r0, 4042b4 <_strtod_l+0x984>
  4042a2:	2200      	movs	r2, #0
  4042a4:	4b97      	ldr	r3, [pc, #604]	; (404504 <_strtod_l+0xbd4>)
  4042a6:	4630      	mov	r0, r6
  4042a8:	4639      	mov	r1, r7
  4042aa:	f002 fef9 	bl	4070a0 <__aeabi_dmul>
  4042ae:	4604      	mov	r4, r0
  4042b0:	460d      	mov	r5, r1
  4042b2:	e001      	b.n	4042b8 <_strtod_l+0x988>
  4042b4:	9c08      	ldr	r4, [sp, #32]
  4042b6:	4d93      	ldr	r5, [pc, #588]	; (404504 <_strtod_l+0xbd4>)
  4042b8:	9416      	str	r4, [sp, #88]	; 0x58
  4042ba:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4042be:	9317      	str	r3, [sp, #92]	; 0x5c
  4042c0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
  4042c4:	e014      	b.n	4042f0 <_strtod_l+0x9c0>
  4042c6:	4b8f      	ldr	r3, [pc, #572]	; (404504 <_strtod_l+0xbd4>)
  4042c8:	2200      	movs	r2, #0
  4042ca:	4630      	mov	r0, r6
  4042cc:	4639      	mov	r1, r7
  4042ce:	f002 fee7 	bl	4070a0 <__aeabi_dmul>
  4042d2:	9b08      	ldr	r3, [sp, #32]
  4042d4:	4604      	mov	r4, r0
  4042d6:	460d      	mov	r5, r1
  4042d8:	b923      	cbnz	r3, 4042e4 <_strtod_l+0x9b4>
  4042da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4042de:	9010      	str	r0, [sp, #64]	; 0x40
  4042e0:	9311      	str	r3, [sp, #68]	; 0x44
  4042e2:	e003      	b.n	4042ec <_strtod_l+0x9bc>
  4042e4:	4602      	mov	r2, r0
  4042e6:	460b      	mov	r3, r1
  4042e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  4042ec:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
  4042f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4042f4:	0d1b      	lsrs	r3, r3, #20
  4042f6:	051b      	lsls	r3, r3, #20
  4042f8:	9309      	str	r3, [sp, #36]	; 0x24
  4042fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4042fc:	4b82      	ldr	r3, [pc, #520]	; (404508 <_strtod_l+0xbd8>)
  4042fe:	429a      	cmp	r2, r3
  404300:	d12b      	bne.n	40435a <_strtod_l+0xa2a>
  404302:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  404306:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  40430a:	4640      	mov	r0, r8
  40430c:	4649      	mov	r1, r9
  40430e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  404312:	f002 f90b 	bl	40652c <__ulp>
  404316:	4602      	mov	r2, r0
  404318:	460b      	mov	r3, r1
  40431a:	4630      	mov	r0, r6
  40431c:	4639      	mov	r1, r7
  40431e:	f002 febf 	bl	4070a0 <__aeabi_dmul>
  404322:	4642      	mov	r2, r8
  404324:	464b      	mov	r3, r9
  404326:	f002 fd09 	bl	406d3c <__adddf3>
  40432a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  40432e:	0d1b      	lsrs	r3, r3, #20
  404330:	4a76      	ldr	r2, [pc, #472]	; (40450c <_strtod_l+0xbdc>)
  404332:	051b      	lsls	r3, r3, #20
  404334:	4293      	cmp	r3, r2
  404336:	4680      	mov	r8, r0
  404338:	d90c      	bls.n	404354 <_strtod_l+0xa24>
  40433a:	4b75      	ldr	r3, [pc, #468]	; (404510 <_strtod_l+0xbe0>)
  40433c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40433e:	429a      	cmp	r2, r3
  404340:	d103      	bne.n	40434a <_strtod_l+0xa1a>
  404342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404344:	3301      	adds	r3, #1
  404346:	f43f ad2f 	beq.w	403da8 <_strtod_l+0x478>
  40434a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 404510 <_strtod_l+0xbe0>
  40434e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  404352:	e072      	b.n	40443a <_strtod_l+0xb0a>
  404354:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
  404358:	e039      	b.n	4043ce <_strtod_l+0xa9e>
  40435a:	9b05      	ldr	r3, [sp, #20]
  40435c:	b33b      	cbz	r3, 4043ae <_strtod_l+0xa7e>
  40435e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404360:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  404364:	d823      	bhi.n	4043ae <_strtod_l+0xa7e>
  404366:	a35e      	add	r3, pc, #376	; (adr r3, 4044e0 <_strtod_l+0xbb0>)
  404368:	e9d3 2300 	ldrd	r2, r3, [r3]
  40436c:	4620      	mov	r0, r4
  40436e:	4629      	mov	r1, r5
  404370:	f003 f912 	bl	407598 <__aeabi_dcmple>
  404374:	b1b8      	cbz	r0, 4043a6 <_strtod_l+0xa76>
  404376:	4629      	mov	r1, r5
  404378:	4620      	mov	r0, r4
  40437a:	f003 f969 	bl	407650 <__aeabi_d2uiz>
  40437e:	2800      	cmp	r0, #0
  404380:	bf08      	it	eq
  404382:	2001      	moveq	r0, #1
  404384:	f002 fe16 	bl	406fb4 <__aeabi_ui2d>
  404388:	9b08      	ldr	r3, [sp, #32]
  40438a:	4604      	mov	r4, r0
  40438c:	460d      	mov	r5, r1
  40438e:	b923      	cbnz	r3, 40439a <_strtod_l+0xa6a>
  404390:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  404394:	9012      	str	r0, [sp, #72]	; 0x48
  404396:	9313      	str	r3, [sp, #76]	; 0x4c
  404398:	e003      	b.n	4043a2 <_strtod_l+0xa72>
  40439a:	4602      	mov	r2, r0
  40439c:	460b      	mov	r3, r1
  40439e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4043a2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
  4043a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043a8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
  4043ac:	1a9f      	subs	r7, r3, r2
  4043ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  4043b2:	f002 f8bb 	bl	40652c <__ulp>
  4043b6:	4602      	mov	r2, r0
  4043b8:	460b      	mov	r3, r1
  4043ba:	4630      	mov	r0, r6
  4043bc:	4639      	mov	r1, r7
  4043be:	f002 fe6f 	bl	4070a0 <__aeabi_dmul>
  4043c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  4043c6:	f002 fcb9 	bl	406d3c <__adddf3>
  4043ca:	4680      	mov	r8, r0
  4043cc:	4689      	mov	r9, r1
  4043ce:	9b05      	ldr	r3, [sp, #20]
  4043d0:	bb9b      	cbnz	r3, 40443a <_strtod_l+0xb0a>
  4043d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
  4043d6:	0d1b      	lsrs	r3, r3, #20
  4043d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043da:	051b      	lsls	r3, r3, #20
  4043dc:	429a      	cmp	r2, r3
  4043de:	464e      	mov	r6, r9
  4043e0:	d12b      	bne.n	40443a <_strtod_l+0xb0a>
  4043e2:	4629      	mov	r1, r5
  4043e4:	4620      	mov	r0, r4
  4043e6:	f003 f90b 	bl	407600 <__aeabi_d2iz>
  4043ea:	f002 fdf3 	bl	406fd4 <__aeabi_i2d>
  4043ee:	460b      	mov	r3, r1
  4043f0:	4602      	mov	r2, r0
  4043f2:	4629      	mov	r1, r5
  4043f4:	4620      	mov	r0, r4
  4043f6:	f002 fc9f 	bl	406d38 <__aeabi_dsub>
  4043fa:	9b08      	ldr	r3, [sp, #32]
  4043fc:	4604      	mov	r4, r0
  4043fe:	460d      	mov	r5, r1
  404400:	b92b      	cbnz	r3, 40440e <_strtod_l+0xade>
  404402:	f1b8 0f00 	cmp.w	r8, #0
  404406:	d102      	bne.n	40440e <_strtod_l+0xade>
  404408:	f3c9 0613 	ubfx	r6, r9, #0, #20
  40440c:	b17e      	cbz	r6, 40442e <_strtod_l+0xafe>
  40440e:	a336      	add	r3, pc, #216	; (adr r3, 4044e8 <_strtod_l+0xbb8>)
  404410:	e9d3 2300 	ldrd	r2, r3, [r3]
  404414:	4620      	mov	r0, r4
  404416:	4629      	mov	r1, r5
  404418:	f003 f8b4 	bl	407584 <__aeabi_dcmplt>
  40441c:	bb88      	cbnz	r0, 404482 <_strtod_l+0xb52>
  40441e:	a334      	add	r3, pc, #208	; (adr r3, 4044f0 <_strtod_l+0xbc0>)
  404420:	e9d3 2300 	ldrd	r2, r3, [r3]
  404424:	4620      	mov	r0, r4
  404426:	4629      	mov	r1, r5
  404428:	f003 f8ca 	bl	4075c0 <__aeabi_dcmpgt>
  40442c:	e004      	b.n	404438 <_strtod_l+0xb08>
  40442e:	a332      	add	r3, pc, #200	; (adr r3, 4044f8 <_strtod_l+0xbc8>)
  404430:	e9d3 2300 	ldrd	r2, r3, [r3]
  404434:	f003 f8a6 	bl	407584 <__aeabi_dcmplt>
  404438:	bb18      	cbnz	r0, 404482 <_strtod_l+0xb52>
  40443a:	991a      	ldr	r1, [sp, #104]	; 0x68
  40443c:	4650      	mov	r0, sl
  40443e:	f001 fde4 	bl	40600a <_Bfree>
  404442:	9906      	ldr	r1, [sp, #24]
  404444:	4650      	mov	r0, sl
  404446:	f001 fde0 	bl	40600a <_Bfree>
  40444a:	9904      	ldr	r1, [sp, #16]
  40444c:	4650      	mov	r0, sl
  40444e:	f001 fddc 	bl	40600a <_Bfree>
  404452:	4659      	mov	r1, fp
  404454:	4650      	mov	r0, sl
  404456:	f001 fdd8 	bl	40600a <_Bfree>
  40445a:	e576      	b.n	403f4a <_strtod_l+0x61a>
  40445c:	9b05      	ldr	r3, [sp, #20]
  40445e:	b183      	cbz	r3, 404482 <_strtod_l+0xb52>
  404460:	4b2c      	ldr	r3, [pc, #176]	; (404514 <_strtod_l+0xbe4>)
  404462:	930d      	str	r3, [sp, #52]	; 0x34
  404464:	2300      	movs	r3, #0
  404466:	930c      	str	r3, [sp, #48]	; 0x30
  404468:	4640      	mov	r0, r8
  40446a:	4649      	mov	r1, r9
  40446c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404470:	f002 fe16 	bl	4070a0 <__aeabi_dmul>
  404474:	4680      	mov	r8, r0
  404476:	4689      	mov	r9, r1
  404478:	b919      	cbnz	r1, 404482 <_strtod_l+0xb52>
  40447a:	b910      	cbnz	r0, 404482 <_strtod_l+0xb52>
  40447c:	2322      	movs	r3, #34	; 0x22
  40447e:	f8ca 3000 	str.w	r3, [sl]
  404482:	991a      	ldr	r1, [sp, #104]	; 0x68
  404484:	4650      	mov	r0, sl
  404486:	f001 fdc0 	bl	40600a <_Bfree>
  40448a:	9906      	ldr	r1, [sp, #24]
  40448c:	4650      	mov	r0, sl
  40448e:	f001 fdbc 	bl	40600a <_Bfree>
  404492:	9904      	ldr	r1, [sp, #16]
  404494:	4650      	mov	r0, sl
  404496:	f001 fdb8 	bl	40600a <_Bfree>
  40449a:	9907      	ldr	r1, [sp, #28]
  40449c:	4650      	mov	r0, sl
  40449e:	f001 fdb4 	bl	40600a <_Bfree>
  4044a2:	4659      	mov	r1, fp
  4044a4:	4650      	mov	r0, sl
  4044a6:	f001 fdb0 	bl	40600a <_Bfree>
  4044aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4044ac:	b113      	cbz	r3, 4044b4 <_strtod_l+0xb84>
  4044ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4044b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4044b2:	6013      	str	r3, [r2, #0]
  4044b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044b6:	b11b      	cbz	r3, 4044c0 <_strtod_l+0xb90>
  4044b8:	4642      	mov	r2, r8
  4044ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
  4044be:	e007      	b.n	4044d0 <_strtod_l+0xba0>
  4044c0:	4642      	mov	r2, r8
  4044c2:	464b      	mov	r3, r9
  4044c4:	e004      	b.n	4044d0 <_strtod_l+0xba0>
  4044c6:	2500      	movs	r5, #0
  4044c8:	462a      	mov	r2, r5
  4044ca:	2101      	movs	r1, #1
  4044cc:	f7ff bb41 	b.w	403b52 <_strtod_l+0x222>
  4044d0:	4610      	mov	r0, r2
  4044d2:	4619      	mov	r1, r3
  4044d4:	b01f      	add	sp, #124	; 0x7c
  4044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044da:	bf00      	nop
  4044dc:	f3af 8000 	nop.w
  4044e0:	ffc00000 	.word	0xffc00000
  4044e4:	41dfffff 	.word	0x41dfffff
  4044e8:	94a03595 	.word	0x94a03595
  4044ec:	3fdfffff 	.word	0x3fdfffff
  4044f0:	35afe535 	.word	0x35afe535
  4044f4:	3fe00000 	.word	0x3fe00000
  4044f8:	94a03595 	.word	0x94a03595
  4044fc:	3fcfffff 	.word	0x3fcfffff
  404500:	3ff00000 	.word	0x3ff00000
  404504:	3fe00000 	.word	0x3fe00000
  404508:	7fe00000 	.word	0x7fe00000
  40450c:	7c9fffff 	.word	0x7c9fffff
  404510:	7fefffff 	.word	0x7fefffff
  404514:	39500000 	.word	0x39500000

00404518 <strtod>:
  404518:	4b06      	ldr	r3, [pc, #24]	; (404534 <strtod+0x1c>)
  40451a:	4a07      	ldr	r2, [pc, #28]	; (404538 <strtod+0x20>)
  40451c:	b410      	push	{r4}
  40451e:	681c      	ldr	r4, [r3, #0]
  404520:	6a23      	ldr	r3, [r4, #32]
  404522:	2b00      	cmp	r3, #0
  404524:	bf08      	it	eq
  404526:	4613      	moveq	r3, r2
  404528:	460a      	mov	r2, r1
  40452a:	4601      	mov	r1, r0
  40452c:	4620      	mov	r0, r4
  40452e:	bc10      	pop	{r4}
  404530:	f7ff b9fe 	b.w	403930 <_strtod_l>
  404534:	20000078 	.word	0x20000078
  404538:	2000007c 	.word	0x2000007c

0040453c <__strtok_r>:
  40453c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40453e:	b948      	cbnz	r0, 404554 <__strtok_r+0x18>
  404540:	6810      	ldr	r0, [r2, #0]
  404542:	b938      	cbnz	r0, 404554 <__strtok_r+0x18>
  404544:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404546:	f817 6b01 	ldrb.w	r6, [r7], #1
  40454a:	b15e      	cbz	r6, 404564 <__strtok_r+0x28>
  40454c:	42b5      	cmp	r5, r6
  40454e:	d1fa      	bne.n	404546 <__strtok_r+0xa>
  404550:	b12b      	cbz	r3, 40455e <__strtok_r+0x22>
  404552:	4620      	mov	r0, r4
  404554:	4604      	mov	r4, r0
  404556:	460f      	mov	r7, r1
  404558:	f814 5b01 	ldrb.w	r5, [r4], #1
  40455c:	e7f3      	b.n	404546 <__strtok_r+0xa>
  40455e:	6014      	str	r4, [r2, #0]
  404560:	7003      	strb	r3, [r0, #0]
  404562:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404564:	b94d      	cbnz	r5, 40457a <__strtok_r+0x3e>
  404566:	6015      	str	r5, [r2, #0]
  404568:	4628      	mov	r0, r5
  40456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40456c:	f817 6b01 	ldrb.w	r6, [r7], #1
  404570:	42b5      	cmp	r5, r6
  404572:	d007      	beq.n	404584 <__strtok_r+0x48>
  404574:	2e00      	cmp	r6, #0
  404576:	d1f9      	bne.n	40456c <__strtok_r+0x30>
  404578:	461c      	mov	r4, r3
  40457a:	4623      	mov	r3, r4
  40457c:	460f      	mov	r7, r1
  40457e:	f813 5b01 	ldrb.w	r5, [r3], #1
  404582:	e7f3      	b.n	40456c <__strtok_r+0x30>
  404584:	b115      	cbz	r5, 40458c <__strtok_r+0x50>
  404586:	2100      	movs	r1, #0
  404588:	7021      	strb	r1, [r4, #0]
  40458a:	e000      	b.n	40458e <__strtok_r+0x52>
  40458c:	462b      	mov	r3, r5
  40458e:	6013      	str	r3, [r2, #0]
  404590:	bdf0      	pop	{r4, r5, r6, r7, pc}

00404592 <strtok_r>:
  404592:	2301      	movs	r3, #1
  404594:	f7ff bfd2 	b.w	40453c <__strtok_r>

00404598 <_strtol_l.isra.0>:
  404598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40459c:	4680      	mov	r8, r0
  40459e:	4689      	mov	r9, r1
  4045a0:	4692      	mov	sl, r2
  4045a2:	461e      	mov	r6, r3
  4045a4:	460f      	mov	r7, r1
  4045a6:	463d      	mov	r5, r7
  4045a8:	9808      	ldr	r0, [sp, #32]
  4045aa:	f815 4b01 	ldrb.w	r4, [r5], #1
  4045ae:	f001 fc19 	bl	405de4 <__locale_ctype_ptr_l>
  4045b2:	4420      	add	r0, r4
  4045b4:	7842      	ldrb	r2, [r0, #1]
  4045b6:	f002 0208 	and.w	r2, r2, #8
  4045ba:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  4045be:	b10a      	cbz	r2, 4045c4 <_strtol_l.isra.0+0x2c>
  4045c0:	462f      	mov	r7, r5
  4045c2:	e7f0      	b.n	4045a6 <_strtol_l.isra.0+0xe>
  4045c4:	2c2d      	cmp	r4, #45	; 0x2d
  4045c6:	d103      	bne.n	4045d0 <_strtol_l.isra.0+0x38>
  4045c8:	1cbd      	adds	r5, r7, #2
  4045ca:	787c      	ldrb	r4, [r7, #1]
  4045cc:	2301      	movs	r3, #1
  4045ce:	e003      	b.n	4045d8 <_strtol_l.isra.0+0x40>
  4045d0:	2c2b      	cmp	r4, #43	; 0x2b
  4045d2:	bf04      	itt	eq
  4045d4:	787c      	ldrbeq	r4, [r7, #1]
  4045d6:	1cbd      	addeq	r5, r7, #2
  4045d8:	b116      	cbz	r6, 4045e0 <_strtol_l.isra.0+0x48>
  4045da:	2e10      	cmp	r6, #16
  4045dc:	d10a      	bne.n	4045f4 <_strtol_l.isra.0+0x5c>
  4045de:	e05e      	b.n	40469e <_strtol_l.isra.0+0x106>
  4045e0:	2c30      	cmp	r4, #48	; 0x30
  4045e2:	d15a      	bne.n	40469a <_strtol_l.isra.0+0x102>
  4045e4:	782a      	ldrb	r2, [r5, #0]
  4045e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
  4045ea:	2a58      	cmp	r2, #88	; 0x58
  4045ec:	d150      	bne.n	404690 <_strtol_l.isra.0+0xf8>
  4045ee:	786c      	ldrb	r4, [r5, #1]
  4045f0:	2610      	movs	r6, #16
  4045f2:	3502      	adds	r5, #2
  4045f4:	2b00      	cmp	r3, #0
  4045f6:	bf14      	ite	ne
  4045f8:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  4045fc:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
  404600:	fbb2 fef6 	udiv	lr, r2, r6
  404604:	fb06 211e 	mls	r1, r6, lr, r2
  404608:	2200      	movs	r2, #0
  40460a:	4610      	mov	r0, r2
  40460c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
  404610:	2f09      	cmp	r7, #9
  404612:	d801      	bhi.n	404618 <_strtol_l.isra.0+0x80>
  404614:	463c      	mov	r4, r7
  404616:	e00a      	b.n	40462e <_strtol_l.isra.0+0x96>
  404618:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
  40461c:	2f19      	cmp	r7, #25
  40461e:	d801      	bhi.n	404624 <_strtol_l.isra.0+0x8c>
  404620:	3c37      	subs	r4, #55	; 0x37
  404622:	e004      	b.n	40462e <_strtol_l.isra.0+0x96>
  404624:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
  404628:	2f19      	cmp	r7, #25
  40462a:	d813      	bhi.n	404654 <_strtol_l.isra.0+0xbc>
  40462c:	3c57      	subs	r4, #87	; 0x57
  40462e:	42a6      	cmp	r6, r4
  404630:	dd10      	ble.n	404654 <_strtol_l.isra.0+0xbc>
  404632:	1c57      	adds	r7, r2, #1
  404634:	d00b      	beq.n	40464e <_strtol_l.isra.0+0xb6>
  404636:	4586      	cmp	lr, r0
  404638:	d307      	bcc.n	40464a <_strtol_l.isra.0+0xb2>
  40463a:	d101      	bne.n	404640 <_strtol_l.isra.0+0xa8>
  40463c:	42a1      	cmp	r1, r4
  40463e:	db03      	blt.n	404648 <_strtol_l.isra.0+0xb0>
  404640:	fb00 4006 	mla	r0, r0, r6, r4
  404644:	2201      	movs	r2, #1
  404646:	e002      	b.n	40464e <_strtol_l.isra.0+0xb6>
  404648:	4670      	mov	r0, lr
  40464a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40464e:	f815 4b01 	ldrb.w	r4, [r5], #1
  404652:	e7db      	b.n	40460c <_strtol_l.isra.0+0x74>
  404654:	1c51      	adds	r1, r2, #1
  404656:	d10e      	bne.n	404676 <_strtol_l.isra.0+0xde>
  404658:	2b00      	cmp	r3, #0
  40465a:	f04f 0322 	mov.w	r3, #34	; 0x22
  40465e:	bf14      	ite	ne
  404660:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  404664:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404668:	f8c8 3000 	str.w	r3, [r8]
  40466c:	f1ba 0f00 	cmp.w	sl, #0
  404670:	d107      	bne.n	404682 <_strtol_l.isra.0+0xea>
  404672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404676:	b103      	cbz	r3, 40467a <_strtol_l.isra.0+0xe2>
  404678:	4240      	negs	r0, r0
  40467a:	f1ba 0f00 	cmp.w	sl, #0
  40467e:	d011      	beq.n	4046a4 <_strtol_l.isra.0+0x10c>
  404680:	b10a      	cbz	r2, 404686 <_strtol_l.isra.0+0xee>
  404682:	3d01      	subs	r5, #1
  404684:	e000      	b.n	404688 <_strtol_l.isra.0+0xf0>
  404686:	464d      	mov	r5, r9
  404688:	f8ca 5000 	str.w	r5, [sl]
  40468c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404690:	2430      	movs	r4, #48	; 0x30
  404692:	2e00      	cmp	r6, #0
  404694:	d1ae      	bne.n	4045f4 <_strtol_l.isra.0+0x5c>
  404696:	2608      	movs	r6, #8
  404698:	e7ac      	b.n	4045f4 <_strtol_l.isra.0+0x5c>
  40469a:	260a      	movs	r6, #10
  40469c:	e7aa      	b.n	4045f4 <_strtol_l.isra.0+0x5c>
  40469e:	2c30      	cmp	r4, #48	; 0x30
  4046a0:	d0a0      	beq.n	4045e4 <_strtol_l.isra.0+0x4c>
  4046a2:	e7a7      	b.n	4045f4 <_strtol_l.isra.0+0x5c>
  4046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004046a8 <strtol>:
  4046a8:	4b08      	ldr	r3, [pc, #32]	; (4046cc <strtol+0x24>)
  4046aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  4046ac:	681c      	ldr	r4, [r3, #0]
  4046ae:	4d08      	ldr	r5, [pc, #32]	; (4046d0 <strtol+0x28>)
  4046b0:	6a23      	ldr	r3, [r4, #32]
  4046b2:	2b00      	cmp	r3, #0
  4046b4:	bf08      	it	eq
  4046b6:	462b      	moveq	r3, r5
  4046b8:	9300      	str	r3, [sp, #0]
  4046ba:	4613      	mov	r3, r2
  4046bc:	460a      	mov	r2, r1
  4046be:	4601      	mov	r1, r0
  4046c0:	4620      	mov	r0, r4
  4046c2:	f7ff ff69 	bl	404598 <_strtol_l.isra.0>
  4046c6:	b003      	add	sp, #12
  4046c8:	bd30      	pop	{r4, r5, pc}
  4046ca:	bf00      	nop
  4046cc:	20000078 	.word	0x20000078
  4046d0:	2000007c 	.word	0x2000007c

004046d4 <__swbuf_r>:
  4046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4046d6:	460f      	mov	r7, r1
  4046d8:	4614      	mov	r4, r2
  4046da:	4605      	mov	r5, r0
  4046dc:	b118      	cbz	r0, 4046e6 <__swbuf_r+0x12>
  4046de:	6983      	ldr	r3, [r0, #24]
  4046e0:	b90b      	cbnz	r3, 4046e6 <__swbuf_r+0x12>
  4046e2:	f000 ffd7 	bl	405694 <__sinit>
  4046e6:	4b22      	ldr	r3, [pc, #136]	; (404770 <__swbuf_r+0x9c>)
  4046e8:	429c      	cmp	r4, r3
  4046ea:	d101      	bne.n	4046f0 <__swbuf_r+0x1c>
  4046ec:	686c      	ldr	r4, [r5, #4]
  4046ee:	e008      	b.n	404702 <__swbuf_r+0x2e>
  4046f0:	4b20      	ldr	r3, [pc, #128]	; (404774 <__swbuf_r+0xa0>)
  4046f2:	429c      	cmp	r4, r3
  4046f4:	d101      	bne.n	4046fa <__swbuf_r+0x26>
  4046f6:	68ac      	ldr	r4, [r5, #8]
  4046f8:	e003      	b.n	404702 <__swbuf_r+0x2e>
  4046fa:	4b1f      	ldr	r3, [pc, #124]	; (404778 <__swbuf_r+0xa4>)
  4046fc:	429c      	cmp	r4, r3
  4046fe:	bf08      	it	eq
  404700:	68ec      	ldreq	r4, [r5, #12]
  404702:	69a3      	ldr	r3, [r4, #24]
  404704:	60a3      	str	r3, [r4, #8]
  404706:	89a3      	ldrh	r3, [r4, #12]
  404708:	071a      	lsls	r2, r3, #28
  40470a:	d509      	bpl.n	404720 <__swbuf_r+0x4c>
  40470c:	6923      	ldr	r3, [r4, #16]
  40470e:	b13b      	cbz	r3, 404720 <__swbuf_r+0x4c>
  404710:	6823      	ldr	r3, [r4, #0]
  404712:	6920      	ldr	r0, [r4, #16]
  404714:	1a18      	subs	r0, r3, r0
  404716:	6963      	ldr	r3, [r4, #20]
  404718:	4298      	cmp	r0, r3
  40471a:	b2fe      	uxtb	r6, r7
  40471c:	db0f      	blt.n	40473e <__swbuf_r+0x6a>
  40471e:	e008      	b.n	404732 <__swbuf_r+0x5e>
  404720:	4621      	mov	r1, r4
  404722:	4628      	mov	r0, r5
  404724:	f000 f82a 	bl	40477c <__swsetup_r>
  404728:	2800      	cmp	r0, #0
  40472a:	d0f1      	beq.n	404710 <__swbuf_r+0x3c>
  40472c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  404730:	e01b      	b.n	40476a <__swbuf_r+0x96>
  404732:	4621      	mov	r1, r4
  404734:	4628      	mov	r0, r5
  404736:	f000 ff43 	bl	4055c0 <_fflush_r>
  40473a:	2800      	cmp	r0, #0
  40473c:	d1f6      	bne.n	40472c <__swbuf_r+0x58>
  40473e:	68a3      	ldr	r3, [r4, #8]
  404740:	3b01      	subs	r3, #1
  404742:	60a3      	str	r3, [r4, #8]
  404744:	6823      	ldr	r3, [r4, #0]
  404746:	1c5a      	adds	r2, r3, #1
  404748:	6022      	str	r2, [r4, #0]
  40474a:	701f      	strb	r7, [r3, #0]
  40474c:	6963      	ldr	r3, [r4, #20]
  40474e:	3001      	adds	r0, #1
  404750:	4298      	cmp	r0, r3
  404752:	d004      	beq.n	40475e <__swbuf_r+0x8a>
  404754:	89a3      	ldrh	r3, [r4, #12]
  404756:	07db      	lsls	r3, r3, #31
  404758:	d507      	bpl.n	40476a <__swbuf_r+0x96>
  40475a:	2e0a      	cmp	r6, #10
  40475c:	d105      	bne.n	40476a <__swbuf_r+0x96>
  40475e:	4621      	mov	r1, r4
  404760:	4628      	mov	r0, r5
  404762:	f000 ff2d 	bl	4055c0 <_fflush_r>
  404766:	2800      	cmp	r0, #0
  404768:	d1e0      	bne.n	40472c <__swbuf_r+0x58>
  40476a:	4630      	mov	r0, r6
  40476c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40476e:	bf00      	nop
  404770:	00408258 	.word	0x00408258
  404774:	00408278 	.word	0x00408278
  404778:	00408298 	.word	0x00408298

0040477c <__swsetup_r>:
  40477c:	4b32      	ldr	r3, [pc, #200]	; (404848 <__swsetup_r+0xcc>)
  40477e:	b570      	push	{r4, r5, r6, lr}
  404780:	681d      	ldr	r5, [r3, #0]
  404782:	4606      	mov	r6, r0
  404784:	460c      	mov	r4, r1
  404786:	b125      	cbz	r5, 404792 <__swsetup_r+0x16>
  404788:	69ab      	ldr	r3, [r5, #24]
  40478a:	b913      	cbnz	r3, 404792 <__swsetup_r+0x16>
  40478c:	4628      	mov	r0, r5
  40478e:	f000 ff81 	bl	405694 <__sinit>
  404792:	4b2e      	ldr	r3, [pc, #184]	; (40484c <__swsetup_r+0xd0>)
  404794:	429c      	cmp	r4, r3
  404796:	d101      	bne.n	40479c <__swsetup_r+0x20>
  404798:	686c      	ldr	r4, [r5, #4]
  40479a:	e008      	b.n	4047ae <__swsetup_r+0x32>
  40479c:	4b2c      	ldr	r3, [pc, #176]	; (404850 <__swsetup_r+0xd4>)
  40479e:	429c      	cmp	r4, r3
  4047a0:	d101      	bne.n	4047a6 <__swsetup_r+0x2a>
  4047a2:	68ac      	ldr	r4, [r5, #8]
  4047a4:	e003      	b.n	4047ae <__swsetup_r+0x32>
  4047a6:	4b2b      	ldr	r3, [pc, #172]	; (404854 <__swsetup_r+0xd8>)
  4047a8:	429c      	cmp	r4, r3
  4047aa:	bf08      	it	eq
  4047ac:	68ec      	ldreq	r4, [r5, #12]
  4047ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047b2:	b29a      	uxth	r2, r3
  4047b4:	0715      	lsls	r5, r2, #28
  4047b6:	d41d      	bmi.n	4047f4 <__swsetup_r+0x78>
  4047b8:	06d0      	lsls	r0, r2, #27
  4047ba:	d402      	bmi.n	4047c2 <__swsetup_r+0x46>
  4047bc:	2209      	movs	r2, #9
  4047be:	6032      	str	r2, [r6, #0]
  4047c0:	e03a      	b.n	404838 <__swsetup_r+0xbc>
  4047c2:	0751      	lsls	r1, r2, #29
  4047c4:	d512      	bpl.n	4047ec <__swsetup_r+0x70>
  4047c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4047c8:	b141      	cbz	r1, 4047dc <__swsetup_r+0x60>
  4047ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4047ce:	4299      	cmp	r1, r3
  4047d0:	d002      	beq.n	4047d8 <__swsetup_r+0x5c>
  4047d2:	4630      	mov	r0, r6
  4047d4:	f001 ffdc 	bl	406790 <_free_r>
  4047d8:	2300      	movs	r3, #0
  4047da:	6363      	str	r3, [r4, #52]	; 0x34
  4047dc:	89a3      	ldrh	r3, [r4, #12]
  4047de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4047e2:	81a3      	strh	r3, [r4, #12]
  4047e4:	2300      	movs	r3, #0
  4047e6:	6063      	str	r3, [r4, #4]
  4047e8:	6923      	ldr	r3, [r4, #16]
  4047ea:	6023      	str	r3, [r4, #0]
  4047ec:	89a3      	ldrh	r3, [r4, #12]
  4047ee:	f043 0308 	orr.w	r3, r3, #8
  4047f2:	81a3      	strh	r3, [r4, #12]
  4047f4:	6923      	ldr	r3, [r4, #16]
  4047f6:	b94b      	cbnz	r3, 40480c <__swsetup_r+0x90>
  4047f8:	89a3      	ldrh	r3, [r4, #12]
  4047fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
  4047fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404802:	d003      	beq.n	40480c <__swsetup_r+0x90>
  404804:	4621      	mov	r1, r4
  404806:	4630      	mov	r0, r6
  404808:	f001 fb24 	bl	405e54 <__smakebuf_r>
  40480c:	89a2      	ldrh	r2, [r4, #12]
  40480e:	f012 0301 	ands.w	r3, r2, #1
  404812:	d005      	beq.n	404820 <__swsetup_r+0xa4>
  404814:	2300      	movs	r3, #0
  404816:	60a3      	str	r3, [r4, #8]
  404818:	6963      	ldr	r3, [r4, #20]
  40481a:	425b      	negs	r3, r3
  40481c:	61a3      	str	r3, [r4, #24]
  40481e:	e003      	b.n	404828 <__swsetup_r+0xac>
  404820:	0792      	lsls	r2, r2, #30
  404822:	bf58      	it	pl
  404824:	6963      	ldrpl	r3, [r4, #20]
  404826:	60a3      	str	r3, [r4, #8]
  404828:	6923      	ldr	r3, [r4, #16]
  40482a:	b95b      	cbnz	r3, 404844 <__swsetup_r+0xc8>
  40482c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404830:	f003 0080 	and.w	r0, r3, #128	; 0x80
  404834:	b280      	uxth	r0, r0
  404836:	b130      	cbz	r0, 404846 <__swsetup_r+0xca>
  404838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40483c:	81a3      	strh	r3, [r4, #12]
  40483e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404842:	bd70      	pop	{r4, r5, r6, pc}
  404844:	2000      	movs	r0, #0
  404846:	bd70      	pop	{r4, r5, r6, pc}
  404848:	20000078 	.word	0x20000078
  40484c:	00408258 	.word	0x00408258
  404850:	00408278 	.word	0x00408278
  404854:	00408298 	.word	0x00408298

00404858 <quorem>:
  404858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40485c:	6903      	ldr	r3, [r0, #16]
  40485e:	690c      	ldr	r4, [r1, #16]
  404860:	429c      	cmp	r4, r3
  404862:	4680      	mov	r8, r0
  404864:	f300 8083 	bgt.w	40496e <quorem+0x116>
  404868:	3c01      	subs	r4, #1
  40486a:	f101 0714 	add.w	r7, r1, #20
  40486e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  404872:	f100 0614 	add.w	r6, r0, #20
  404876:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40487a:	eb06 030e 	add.w	r3, r6, lr
  40487e:	9301      	str	r3, [sp, #4]
  404880:	3501      	adds	r5, #1
  404882:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  404886:	fbb3 f5f5 	udiv	r5, r3, r5
  40488a:	eb07 090e 	add.w	r9, r7, lr
  40488e:	2d00      	cmp	r5, #0
  404890:	d039      	beq.n	404906 <quorem+0xae>
  404892:	f04f 0a00 	mov.w	sl, #0
  404896:	4638      	mov	r0, r7
  404898:	46b4      	mov	ip, r6
  40489a:	46d3      	mov	fp, sl
  40489c:	f850 2b04 	ldr.w	r2, [r0], #4
  4048a0:	b293      	uxth	r3, r2
  4048a2:	fb05 a303 	mla	r3, r5, r3, sl
  4048a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4048aa:	b29b      	uxth	r3, r3
  4048ac:	ebc3 030b 	rsb	r3, r3, fp
  4048b0:	0c12      	lsrs	r2, r2, #16
  4048b2:	f8bc b000 	ldrh.w	fp, [ip]
  4048b6:	fb05 a202 	mla	r2, r5, r2, sl
  4048ba:	fa13 f38b 	uxtah	r3, r3, fp
  4048be:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4048c2:	fa1f fb82 	uxth.w	fp, r2
  4048c6:	f8dc 2000 	ldr.w	r2, [ip]
  4048ca:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4048ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4048d2:	b29b      	uxth	r3, r3
  4048d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4048d8:	4581      	cmp	r9, r0
  4048da:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4048de:	f84c 3b04 	str.w	r3, [ip], #4
  4048e2:	d2db      	bcs.n	40489c <quorem+0x44>
  4048e4:	f856 300e 	ldr.w	r3, [r6, lr]
  4048e8:	b96b      	cbnz	r3, 404906 <quorem+0xae>
  4048ea:	9b01      	ldr	r3, [sp, #4]
  4048ec:	3b04      	subs	r3, #4
  4048ee:	429e      	cmp	r6, r3
  4048f0:	461a      	mov	r2, r3
  4048f2:	d302      	bcc.n	4048fa <quorem+0xa2>
  4048f4:	f8c8 4010 	str.w	r4, [r8, #16]
  4048f8:	e005      	b.n	404906 <quorem+0xae>
  4048fa:	6812      	ldr	r2, [r2, #0]
  4048fc:	3b04      	subs	r3, #4
  4048fe:	2a00      	cmp	r2, #0
  404900:	d1f8      	bne.n	4048f4 <quorem+0x9c>
  404902:	3c01      	subs	r4, #1
  404904:	e7f3      	b.n	4048ee <quorem+0x96>
  404906:	4640      	mov	r0, r8
  404908:	f001 fd95 	bl	406436 <__mcmp>
  40490c:	2800      	cmp	r0, #0
  40490e:	db2c      	blt.n	40496a <quorem+0x112>
  404910:	3501      	adds	r5, #1
  404912:	4630      	mov	r0, r6
  404914:	f04f 0e00 	mov.w	lr, #0
  404918:	f857 1b04 	ldr.w	r1, [r7], #4
  40491c:	f8d0 c000 	ldr.w	ip, [r0]
  404920:	b28a      	uxth	r2, r1
  404922:	ebc2 030e 	rsb	r3, r2, lr
  404926:	0c09      	lsrs	r1, r1, #16
  404928:	fa13 f38c 	uxtah	r3, r3, ip
  40492c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  404930:	eb02 4223 	add.w	r2, r2, r3, asr #16
  404934:	b29b      	uxth	r3, r3
  404936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40493a:	45b9      	cmp	r9, r7
  40493c:	ea4f 4e22 	mov.w	lr, r2, asr #16
  404940:	f840 3b04 	str.w	r3, [r0], #4
  404944:	d2e8      	bcs.n	404918 <quorem+0xc0>
  404946:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40494a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40494e:	b962      	cbnz	r2, 40496a <quorem+0x112>
  404950:	3b04      	subs	r3, #4
  404952:	429e      	cmp	r6, r3
  404954:	461a      	mov	r2, r3
  404956:	d302      	bcc.n	40495e <quorem+0x106>
  404958:	f8c8 4010 	str.w	r4, [r8, #16]
  40495c:	e005      	b.n	40496a <quorem+0x112>
  40495e:	6812      	ldr	r2, [r2, #0]
  404960:	3b04      	subs	r3, #4
  404962:	2a00      	cmp	r2, #0
  404964:	d1f8      	bne.n	404958 <quorem+0x100>
  404966:	3c01      	subs	r4, #1
  404968:	e7f3      	b.n	404952 <quorem+0xfa>
  40496a:	4628      	mov	r0, r5
  40496c:	e000      	b.n	404970 <quorem+0x118>
  40496e:	2000      	movs	r0, #0
  404970:	b003      	add	sp, #12
  404972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00404978 <_dtoa_r>:
  404978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40497c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40497e:	b095      	sub	sp, #84	; 0x54
  404980:	4682      	mov	sl, r0
  404982:	9c21      	ldr	r4, [sp, #132]	; 0x84
  404984:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404988:	b945      	cbnz	r5, 40499c <_dtoa_r+0x24>
  40498a:	2010      	movs	r0, #16
  40498c:	f001 fa9e 	bl	405ecc <malloc>
  404990:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  404994:	6045      	str	r5, [r0, #4]
  404996:	6085      	str	r5, [r0, #8]
  404998:	6005      	str	r5, [r0, #0]
  40499a:	60c5      	str	r5, [r0, #12]
  40499c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4049a0:	6819      	ldr	r1, [r3, #0]
  4049a2:	b159      	cbz	r1, 4049bc <_dtoa_r+0x44>
  4049a4:	685a      	ldr	r2, [r3, #4]
  4049a6:	604a      	str	r2, [r1, #4]
  4049a8:	2301      	movs	r3, #1
  4049aa:	4093      	lsls	r3, r2
  4049ac:	608b      	str	r3, [r1, #8]
  4049ae:	4650      	mov	r0, sl
  4049b0:	f001 fb2b 	bl	40600a <_Bfree>
  4049b4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4049b8:	2200      	movs	r2, #0
  4049ba:	601a      	str	r2, [r3, #0]
  4049bc:	9b03      	ldr	r3, [sp, #12]
  4049be:	4aa0      	ldr	r2, [pc, #640]	; (404c40 <_dtoa_r+0x2c8>)
  4049c0:	2b00      	cmp	r3, #0
  4049c2:	bfbf      	itttt	lt
  4049c4:	2301      	movlt	r3, #1
  4049c6:	6023      	strlt	r3, [r4, #0]
  4049c8:	9b03      	ldrlt	r3, [sp, #12]
  4049ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4049ce:	bfb8      	it	lt
  4049d0:	9303      	strlt	r3, [sp, #12]
  4049d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4049d6:	bfa4      	itt	ge
  4049d8:	2300      	movge	r3, #0
  4049da:	6023      	strge	r3, [r4, #0]
  4049dc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  4049e0:	0d1b      	lsrs	r3, r3, #20
  4049e2:	051b      	lsls	r3, r3, #20
  4049e4:	4293      	cmp	r3, r2
  4049e6:	d11d      	bne.n	404a24 <_dtoa_r+0xac>
  4049e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4049ea:	f242 730f 	movw	r3, #9999	; 0x270f
  4049ee:	6013      	str	r3, [r2, #0]
  4049f0:	9b02      	ldr	r3, [sp, #8]
  4049f2:	b943      	cbnz	r3, 404a06 <_dtoa_r+0x8e>
  4049f4:	4a93      	ldr	r2, [pc, #588]	; (404c44 <_dtoa_r+0x2cc>)
  4049f6:	4b94      	ldr	r3, [pc, #592]	; (404c48 <_dtoa_r+0x2d0>)
  4049f8:	f3c8 0013 	ubfx	r0, r8, #0, #20
  4049fc:	2800      	cmp	r0, #0
  4049fe:	bf14      	ite	ne
  404a00:	4618      	movne	r0, r3
  404a02:	4610      	moveq	r0, r2
  404a04:	e000      	b.n	404a08 <_dtoa_r+0x90>
  404a06:	4890      	ldr	r0, [pc, #576]	; (404c48 <_dtoa_r+0x2d0>)
  404a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a0a:	2b00      	cmp	r3, #0
  404a0c:	f000 854a 	beq.w	4054a4 <_dtoa_r+0xb2c>
  404a10:	78c3      	ldrb	r3, [r0, #3]
  404a12:	b113      	cbz	r3, 404a1a <_dtoa_r+0xa2>
  404a14:	f100 0308 	add.w	r3, r0, #8
  404a18:	e000      	b.n	404a1c <_dtoa_r+0xa4>
  404a1a:	1cc3      	adds	r3, r0, #3
  404a1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  404a1e:	6013      	str	r3, [r2, #0]
  404a20:	f000 bd40 	b.w	4054a4 <_dtoa_r+0xb2c>
  404a24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  404a28:	2200      	movs	r2, #0
  404a2a:	2300      	movs	r3, #0
  404a2c:	4620      	mov	r0, r4
  404a2e:	4629      	mov	r1, r5
  404a30:	f002 fd9e 	bl	407570 <__aeabi_dcmpeq>
  404a34:	4607      	mov	r7, r0
  404a36:	b158      	cbz	r0, 404a50 <_dtoa_r+0xd8>
  404a38:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404a3a:	2301      	movs	r3, #1
  404a3c:	6013      	str	r3, [r2, #0]
  404a3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  404a40:	2b00      	cmp	r3, #0
  404a42:	f000 8522 	beq.w	40548a <_dtoa_r+0xb12>
  404a46:	4881      	ldr	r0, [pc, #516]	; (404c4c <_dtoa_r+0x2d4>)
  404a48:	6018      	str	r0, [r3, #0]
  404a4a:	3801      	subs	r0, #1
  404a4c:	f000 bd2a 	b.w	4054a4 <_dtoa_r+0xb2c>
  404a50:	ab12      	add	r3, sp, #72	; 0x48
  404a52:	9301      	str	r3, [sp, #4]
  404a54:	ab13      	add	r3, sp, #76	; 0x4c
  404a56:	9300      	str	r3, [sp, #0]
  404a58:	4622      	mov	r2, r4
  404a5a:	462b      	mov	r3, r5
  404a5c:	4650      	mov	r0, sl
  404a5e:	f001 fdd6 	bl	40660e <__d2b>
  404a62:	f3c8 560a 	ubfx	r6, r8, #20, #11
  404a66:	9004      	str	r0, [sp, #16]
  404a68:	b156      	cbz	r6, 404a80 <_dtoa_r+0x108>
  404a6a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  404a6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404a72:	4620      	mov	r0, r4
  404a74:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404a78:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  404a7c:	9711      	str	r7, [sp, #68]	; 0x44
  404a7e:	e01d      	b.n	404abc <_dtoa_r+0x144>
  404a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404a82:	9e12      	ldr	r6, [sp, #72]	; 0x48
  404a84:	441e      	add	r6, r3
  404a86:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404a8a:	2b20      	cmp	r3, #32
  404a8c:	dd0a      	ble.n	404aa4 <_dtoa_r+0x12c>
  404a8e:	9a02      	ldr	r2, [sp, #8]
  404a90:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404a94:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404a98:	fa22 f000 	lsr.w	r0, r2, r0
  404a9c:	fa08 f303 	lsl.w	r3, r8, r3
  404aa0:	4318      	orrs	r0, r3
  404aa2:	e004      	b.n	404aae <_dtoa_r+0x136>
  404aa4:	f1c3 0020 	rsb	r0, r3, #32
  404aa8:	9b02      	ldr	r3, [sp, #8]
  404aaa:	fa03 f000 	lsl.w	r0, r3, r0
  404aae:	f002 fa81 	bl	406fb4 <__aeabi_ui2d>
  404ab2:	2301      	movs	r3, #1
  404ab4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404ab8:	3e01      	subs	r6, #1
  404aba:	9311      	str	r3, [sp, #68]	; 0x44
  404abc:	2200      	movs	r2, #0
  404abe:	4b64      	ldr	r3, [pc, #400]	; (404c50 <_dtoa_r+0x2d8>)
  404ac0:	f002 f93a 	bl	406d38 <__aeabi_dsub>
  404ac4:	a358      	add	r3, pc, #352	; (adr r3, 404c28 <_dtoa_r+0x2b0>)
  404ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404aca:	f002 fae9 	bl	4070a0 <__aeabi_dmul>
  404ace:	a358      	add	r3, pc, #352	; (adr r3, 404c30 <_dtoa_r+0x2b8>)
  404ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ad4:	f002 f932 	bl	406d3c <__adddf3>
  404ad8:	4604      	mov	r4, r0
  404ada:	4630      	mov	r0, r6
  404adc:	460d      	mov	r5, r1
  404ade:	f002 fa79 	bl	406fd4 <__aeabi_i2d>
  404ae2:	a355      	add	r3, pc, #340	; (adr r3, 404c38 <_dtoa_r+0x2c0>)
  404ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ae8:	f002 fada 	bl	4070a0 <__aeabi_dmul>
  404aec:	4602      	mov	r2, r0
  404aee:	460b      	mov	r3, r1
  404af0:	4620      	mov	r0, r4
  404af2:	4629      	mov	r1, r5
  404af4:	f002 f922 	bl	406d3c <__adddf3>
  404af8:	4604      	mov	r4, r0
  404afa:	460d      	mov	r5, r1
  404afc:	f002 fd80 	bl	407600 <__aeabi_d2iz>
  404b00:	2200      	movs	r2, #0
  404b02:	4683      	mov	fp, r0
  404b04:	2300      	movs	r3, #0
  404b06:	4620      	mov	r0, r4
  404b08:	4629      	mov	r1, r5
  404b0a:	f002 fd3b 	bl	407584 <__aeabi_dcmplt>
  404b0e:	b158      	cbz	r0, 404b28 <_dtoa_r+0x1b0>
  404b10:	4658      	mov	r0, fp
  404b12:	f002 fa5f 	bl	406fd4 <__aeabi_i2d>
  404b16:	4602      	mov	r2, r0
  404b18:	460b      	mov	r3, r1
  404b1a:	4620      	mov	r0, r4
  404b1c:	4629      	mov	r1, r5
  404b1e:	f002 fd27 	bl	407570 <__aeabi_dcmpeq>
  404b22:	b908      	cbnz	r0, 404b28 <_dtoa_r+0x1b0>
  404b24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404b28:	f1bb 0f16 	cmp.w	fp, #22
  404b2c:	d80d      	bhi.n	404b4a <_dtoa_r+0x1d2>
  404b2e:	4949      	ldr	r1, [pc, #292]	; (404c54 <_dtoa_r+0x2dc>)
  404b30:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  404b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404b38:	e9d1 0100 	ldrd	r0, r1, [r1]
  404b3c:	f002 fd40 	bl	4075c0 <__aeabi_dcmpgt>
  404b40:	b130      	cbz	r0, 404b50 <_dtoa_r+0x1d8>
  404b42:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404b46:	2300      	movs	r3, #0
  404b48:	e000      	b.n	404b4c <_dtoa_r+0x1d4>
  404b4a:	2301      	movs	r3, #1
  404b4c:	9310      	str	r3, [sp, #64]	; 0x40
  404b4e:	e000      	b.n	404b52 <_dtoa_r+0x1da>
  404b50:	9010      	str	r0, [sp, #64]	; 0x40
  404b52:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404b54:	1b9e      	subs	r6, r3, r6
  404b56:	1e73      	subs	r3, r6, #1
  404b58:	9307      	str	r3, [sp, #28]
  404b5a:	bf43      	ittte	mi
  404b5c:	f1c3 0800 	rsbmi	r8, r3, #0
  404b60:	2300      	movmi	r3, #0
  404b62:	9307      	strmi	r3, [sp, #28]
  404b64:	f04f 0800 	movpl.w	r8, #0
  404b68:	f1bb 0f00 	cmp.w	fp, #0
  404b6c:	db06      	blt.n	404b7c <_dtoa_r+0x204>
  404b6e:	9b07      	ldr	r3, [sp, #28]
  404b70:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  404b74:	445b      	add	r3, fp
  404b76:	9307      	str	r3, [sp, #28]
  404b78:	2700      	movs	r7, #0
  404b7a:	e005      	b.n	404b88 <_dtoa_r+0x210>
  404b7c:	2300      	movs	r3, #0
  404b7e:	ebcb 0808 	rsb	r8, fp, r8
  404b82:	f1cb 0700 	rsb	r7, fp, #0
  404b86:	930b      	str	r3, [sp, #44]	; 0x2c
  404b88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b8a:	2b09      	cmp	r3, #9
  404b8c:	d827      	bhi.n	404bde <_dtoa_r+0x266>
  404b8e:	2b05      	cmp	r3, #5
  404b90:	bfc4      	itt	gt
  404b92:	3b04      	subgt	r3, #4
  404b94:	931e      	strgt	r3, [sp, #120]	; 0x78
  404b96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404b98:	f1a3 0302 	sub.w	r3, r3, #2
  404b9c:	bfcc      	ite	gt
  404b9e:	2500      	movgt	r5, #0
  404ba0:	2501      	movle	r5, #1
  404ba2:	2b03      	cmp	r3, #3
  404ba4:	d820      	bhi.n	404be8 <_dtoa_r+0x270>
  404ba6:	e8df f003 	tbb	[pc, r3]
  404baa:	0e06      	.short	0x0e06
  404bac:	0402      	.short	0x0402
  404bae:	2301      	movs	r3, #1
  404bb0:	e002      	b.n	404bb8 <_dtoa_r+0x240>
  404bb2:	2301      	movs	r3, #1
  404bb4:	e008      	b.n	404bc8 <_dtoa_r+0x250>
  404bb6:	2300      	movs	r3, #0
  404bb8:	930a      	str	r3, [sp, #40]	; 0x28
  404bba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bbc:	2b00      	cmp	r3, #0
  404bbe:	dd1d      	ble.n	404bfc <_dtoa_r+0x284>
  404bc0:	4699      	mov	r9, r3
  404bc2:	9305      	str	r3, [sp, #20]
  404bc4:	e021      	b.n	404c0a <_dtoa_r+0x292>
  404bc6:	2300      	movs	r3, #0
  404bc8:	930a      	str	r3, [sp, #40]	; 0x28
  404bca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bcc:	eb0b 0903 	add.w	r9, fp, r3
  404bd0:	f109 0301 	add.w	r3, r9, #1
  404bd4:	2b01      	cmp	r3, #1
  404bd6:	9305      	str	r3, [sp, #20]
  404bd8:	bfb8      	it	lt
  404bda:	2301      	movlt	r3, #1
  404bdc:	e015      	b.n	404c0a <_dtoa_r+0x292>
  404bde:	2501      	movs	r5, #1
  404be0:	2300      	movs	r3, #0
  404be2:	931e      	str	r3, [sp, #120]	; 0x78
  404be4:	950a      	str	r5, [sp, #40]	; 0x28
  404be6:	e001      	b.n	404bec <_dtoa_r+0x274>
  404be8:	2301      	movs	r3, #1
  404bea:	930a      	str	r3, [sp, #40]	; 0x28
  404bec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  404bf0:	2200      	movs	r2, #0
  404bf2:	f8cd 9014 	str.w	r9, [sp, #20]
  404bf6:	2312      	movs	r3, #18
  404bf8:	921f      	str	r2, [sp, #124]	; 0x7c
  404bfa:	e006      	b.n	404c0a <_dtoa_r+0x292>
  404bfc:	f04f 0901 	mov.w	r9, #1
  404c00:	f8cd 9014 	str.w	r9, [sp, #20]
  404c04:	464b      	mov	r3, r9
  404c06:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  404c0a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  404c0e:	2200      	movs	r2, #0
  404c10:	6062      	str	r2, [r4, #4]
  404c12:	2104      	movs	r1, #4
  404c14:	f101 0214 	add.w	r2, r1, #20
  404c18:	429a      	cmp	r2, r3
  404c1a:	d81d      	bhi.n	404c58 <_dtoa_r+0x2e0>
  404c1c:	6862      	ldr	r2, [r4, #4]
  404c1e:	3201      	adds	r2, #1
  404c20:	6062      	str	r2, [r4, #4]
  404c22:	0049      	lsls	r1, r1, #1
  404c24:	e7f6      	b.n	404c14 <_dtoa_r+0x29c>
  404c26:	bf00      	nop
  404c28:	636f4361 	.word	0x636f4361
  404c2c:	3fd287a7 	.word	0x3fd287a7
  404c30:	8b60c8b3 	.word	0x8b60c8b3
  404c34:	3fc68a28 	.word	0x3fc68a28
  404c38:	509f79fb 	.word	0x509f79fb
  404c3c:	3fd34413 	.word	0x3fd34413
  404c40:	7ff00000 	.word	0x7ff00000
  404c44:	00408248 	.word	0x00408248
  404c48:	00408251 	.word	0x00408251
  404c4c:	004081d5 	.word	0x004081d5
  404c50:	3ff80000 	.word	0x3ff80000
  404c54:	004082c8 	.word	0x004082c8
  404c58:	6861      	ldr	r1, [r4, #4]
  404c5a:	4650      	mov	r0, sl
  404c5c:	f001 f9a0 	bl	405fa0 <_Balloc>
  404c60:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  404c64:	6020      	str	r0, [r4, #0]
  404c66:	681b      	ldr	r3, [r3, #0]
  404c68:	9306      	str	r3, [sp, #24]
  404c6a:	9b05      	ldr	r3, [sp, #20]
  404c6c:	2b0e      	cmp	r3, #14
  404c6e:	f200 815d 	bhi.w	404f2c <_dtoa_r+0x5b4>
  404c72:	2d00      	cmp	r5, #0
  404c74:	f000 815a 	beq.w	404f2c <_dtoa_r+0x5b4>
  404c78:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  404c7c:	f1bb 0f00 	cmp.w	fp, #0
  404c80:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  404c84:	dd31      	ble.n	404cea <_dtoa_r+0x372>
  404c86:	4aa0      	ldr	r2, [pc, #640]	; (404f08 <_dtoa_r+0x590>)
  404c88:	f00b 030f 	and.w	r3, fp, #15
  404c8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404c90:	e9d3 3400 	ldrd	r3, r4, [r3]
  404c94:	ea4f 152b 	mov.w	r5, fp, asr #4
  404c98:	06e8      	lsls	r0, r5, #27
  404c9a:	e9cd 3408 	strd	r3, r4, [sp, #32]
  404c9e:	d50c      	bpl.n	404cba <_dtoa_r+0x342>
  404ca0:	4b9a      	ldr	r3, [pc, #616]	; (404f0c <_dtoa_r+0x594>)
  404ca2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404ca6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404caa:	f002 fb23 	bl	4072f4 <__aeabi_ddiv>
  404cae:	f005 050f 	and.w	r5, r5, #15
  404cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404cb6:	2403      	movs	r4, #3
  404cb8:	e000      	b.n	404cbc <_dtoa_r+0x344>
  404cba:	2402      	movs	r4, #2
  404cbc:	4e93      	ldr	r6, [pc, #588]	; (404f0c <_dtoa_r+0x594>)
  404cbe:	b16d      	cbz	r5, 404cdc <_dtoa_r+0x364>
  404cc0:	07e9      	lsls	r1, r5, #31
  404cc2:	d508      	bpl.n	404cd6 <_dtoa_r+0x35e>
  404cc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404cc8:	e9d6 2300 	ldrd	r2, r3, [r6]
  404ccc:	f002 f9e8 	bl	4070a0 <__aeabi_dmul>
  404cd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
  404cd4:	3401      	adds	r4, #1
  404cd6:	106d      	asrs	r5, r5, #1
  404cd8:	3608      	adds	r6, #8
  404cda:	e7f0      	b.n	404cbe <_dtoa_r+0x346>
  404cdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  404ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ce4:	f002 fb06 	bl	4072f4 <__aeabi_ddiv>
  404ce8:	e020      	b.n	404d2c <_dtoa_r+0x3b4>
  404cea:	f1cb 0500 	rsb	r5, fp, #0
  404cee:	b305      	cbz	r5, 404d32 <_dtoa_r+0x3ba>
  404cf0:	4b85      	ldr	r3, [pc, #532]	; (404f08 <_dtoa_r+0x590>)
  404cf2:	4e86      	ldr	r6, [pc, #536]	; (404f0c <_dtoa_r+0x594>)
  404cf4:	f005 020f 	and.w	r2, r5, #15
  404cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  404d04:	f002 f9cc 	bl	4070a0 <__aeabi_dmul>
  404d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d0c:	112d      	asrs	r5, r5, #4
  404d0e:	2300      	movs	r3, #0
  404d10:	2402      	movs	r4, #2
  404d12:	b155      	cbz	r5, 404d2a <_dtoa_r+0x3b2>
  404d14:	07ea      	lsls	r2, r5, #31
  404d16:	d505      	bpl.n	404d24 <_dtoa_r+0x3ac>
  404d18:	e9d6 2300 	ldrd	r2, r3, [r6]
  404d1c:	f002 f9c0 	bl	4070a0 <__aeabi_dmul>
  404d20:	3401      	adds	r4, #1
  404d22:	2301      	movs	r3, #1
  404d24:	106d      	asrs	r5, r5, #1
  404d26:	3608      	adds	r6, #8
  404d28:	e7f3      	b.n	404d12 <_dtoa_r+0x39a>
  404d2a:	b11b      	cbz	r3, 404d34 <_dtoa_r+0x3bc>
  404d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d30:	e000      	b.n	404d34 <_dtoa_r+0x3bc>
  404d32:	2402      	movs	r4, #2
  404d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404d36:	b1e3      	cbz	r3, 404d72 <_dtoa_r+0x3fa>
  404d38:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  404d3c:	2200      	movs	r2, #0
  404d3e:	4b74      	ldr	r3, [pc, #464]	; (404f10 <_dtoa_r+0x598>)
  404d40:	4628      	mov	r0, r5
  404d42:	4631      	mov	r1, r6
  404d44:	f002 fc1e 	bl	407584 <__aeabi_dcmplt>
  404d48:	b198      	cbz	r0, 404d72 <_dtoa_r+0x3fa>
  404d4a:	9b05      	ldr	r3, [sp, #20]
  404d4c:	b18b      	cbz	r3, 404d72 <_dtoa_r+0x3fa>
  404d4e:	f1b9 0f00 	cmp.w	r9, #0
  404d52:	f340 80e7 	ble.w	404f24 <_dtoa_r+0x5ac>
  404d56:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  404d5a:	9308      	str	r3, [sp, #32]
  404d5c:	4631      	mov	r1, r6
  404d5e:	2200      	movs	r2, #0
  404d60:	4b6c      	ldr	r3, [pc, #432]	; (404f14 <_dtoa_r+0x59c>)
  404d62:	4628      	mov	r0, r5
  404d64:	f002 f99c 	bl	4070a0 <__aeabi_dmul>
  404d68:	3401      	adds	r4, #1
  404d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404d6e:	464e      	mov	r6, r9
  404d70:	e002      	b.n	404d78 <_dtoa_r+0x400>
  404d72:	9e05      	ldr	r6, [sp, #20]
  404d74:	f8cd b020 	str.w	fp, [sp, #32]
  404d78:	4620      	mov	r0, r4
  404d7a:	f002 f92b 	bl	406fd4 <__aeabi_i2d>
  404d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404d82:	f002 f98d 	bl	4070a0 <__aeabi_dmul>
  404d86:	4b64      	ldr	r3, [pc, #400]	; (404f18 <_dtoa_r+0x5a0>)
  404d88:	2200      	movs	r2, #0
  404d8a:	f001 ffd7 	bl	406d3c <__adddf3>
  404d8e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  404d92:	4604      	mov	r4, r0
  404d94:	930c      	str	r3, [sp, #48]	; 0x30
  404d96:	461d      	mov	r5, r3
  404d98:	b9d6      	cbnz	r6, 404dd0 <_dtoa_r+0x458>
  404d9a:	2200      	movs	r2, #0
  404d9c:	4b5f      	ldr	r3, [pc, #380]	; (404f1c <_dtoa_r+0x5a4>)
  404d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404da2:	f001 ffc9 	bl	406d38 <__aeabi_dsub>
  404da6:	4622      	mov	r2, r4
  404da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404dae:	f002 fc07 	bl	4075c0 <__aeabi_dcmpgt>
  404db2:	2800      	cmp	r0, #0
  404db4:	f040 8240 	bne.w	405238 <_dtoa_r+0x8c0>
  404db8:	990c      	ldr	r1, [sp, #48]	; 0x30
  404dba:	4622      	mov	r2, r4
  404dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  404dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404dc4:	f002 fbde 	bl	407584 <__aeabi_dcmplt>
  404dc8:	2800      	cmp	r0, #0
  404dca:	f040 822c 	bne.w	405226 <_dtoa_r+0x8ae>
  404dce:	e0a9      	b.n	404f24 <_dtoa_r+0x5ac>
  404dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404dd2:	4b4d      	ldr	r3, [pc, #308]	; (404f08 <_dtoa_r+0x590>)
  404dd4:	1e71      	subs	r1, r6, #1
  404dd6:	2a00      	cmp	r2, #0
  404dd8:	d049      	beq.n	404e6e <_dtoa_r+0x4f6>
  404dda:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  404dde:	e9d3 2300 	ldrd	r2, r3, [r3]
  404de2:	2000      	movs	r0, #0
  404de4:	494e      	ldr	r1, [pc, #312]	; (404f20 <_dtoa_r+0x5a8>)
  404de6:	f002 fa85 	bl	4072f4 <__aeabi_ddiv>
  404dea:	4622      	mov	r2, r4
  404dec:	462b      	mov	r3, r5
  404dee:	f001 ffa3 	bl	406d38 <__aeabi_dsub>
  404df2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404df6:	9c06      	ldr	r4, [sp, #24]
  404df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404dfc:	f002 fc00 	bl	407600 <__aeabi_d2iz>
  404e00:	4605      	mov	r5, r0
  404e02:	f002 f8e7 	bl	406fd4 <__aeabi_i2d>
  404e06:	4602      	mov	r2, r0
  404e08:	460b      	mov	r3, r1
  404e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e0e:	f001 ff93 	bl	406d38 <__aeabi_dsub>
  404e12:	3530      	adds	r5, #48	; 0x30
  404e14:	f804 5b01 	strb.w	r5, [r4], #1
  404e18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e20:	f002 fbb0 	bl	407584 <__aeabi_dcmplt>
  404e24:	2800      	cmp	r0, #0
  404e26:	f040 8320 	bne.w	40546a <_dtoa_r+0xaf2>
  404e2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404e2e:	2000      	movs	r0, #0
  404e30:	4937      	ldr	r1, [pc, #220]	; (404f10 <_dtoa_r+0x598>)
  404e32:	f001 ff81 	bl	406d38 <__aeabi_dsub>
  404e36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404e3a:	f002 fba3 	bl	407584 <__aeabi_dcmplt>
  404e3e:	2800      	cmp	r0, #0
  404e40:	f040 80d2 	bne.w	404fe8 <_dtoa_r+0x670>
  404e44:	9b06      	ldr	r3, [sp, #24]
  404e46:	1ae3      	subs	r3, r4, r3
  404e48:	42b3      	cmp	r3, r6
  404e4a:	da6b      	bge.n	404f24 <_dtoa_r+0x5ac>
  404e4c:	2200      	movs	r2, #0
  404e4e:	4b31      	ldr	r3, [pc, #196]	; (404f14 <_dtoa_r+0x59c>)
  404e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404e54:	f002 f924 	bl	4070a0 <__aeabi_dmul>
  404e58:	2200      	movs	r2, #0
  404e5a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e5e:	4b2d      	ldr	r3, [pc, #180]	; (404f14 <_dtoa_r+0x59c>)
  404e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e64:	f002 f91c 	bl	4070a0 <__aeabi_dmul>
  404e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404e6c:	e7c4      	b.n	404df8 <_dtoa_r+0x480>
  404e6e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  404e72:	4622      	mov	r2, r4
  404e74:	462b      	mov	r3, r5
  404e76:	e9d1 0100 	ldrd	r0, r1, [r1]
  404e7a:	f002 f911 	bl	4070a0 <__aeabi_dmul>
  404e7e:	9b06      	ldr	r3, [sp, #24]
  404e80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404e84:	199c      	adds	r4, r3, r6
  404e86:	461d      	mov	r5, r3
  404e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404e8c:	f002 fbb8 	bl	407600 <__aeabi_d2iz>
  404e90:	4606      	mov	r6, r0
  404e92:	f002 f89f 	bl	406fd4 <__aeabi_i2d>
  404e96:	3630      	adds	r6, #48	; 0x30
  404e98:	4602      	mov	r2, r0
  404e9a:	460b      	mov	r3, r1
  404e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ea0:	f001 ff4a 	bl	406d38 <__aeabi_dsub>
  404ea4:	f805 6b01 	strb.w	r6, [r5], #1
  404ea8:	42ac      	cmp	r4, r5
  404eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404eae:	f04f 0200 	mov.w	r2, #0
  404eb2:	d123      	bne.n	404efc <_dtoa_r+0x584>
  404eb4:	4b1a      	ldr	r3, [pc, #104]	; (404f20 <_dtoa_r+0x5a8>)
  404eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404eba:	f001 ff3f 	bl	406d3c <__adddf3>
  404ebe:	4602      	mov	r2, r0
  404ec0:	460b      	mov	r3, r1
  404ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ec6:	f002 fb7b 	bl	4075c0 <__aeabi_dcmpgt>
  404eca:	2800      	cmp	r0, #0
  404ecc:	f040 808c 	bne.w	404fe8 <_dtoa_r+0x670>
  404ed0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404ed4:	2000      	movs	r0, #0
  404ed6:	4912      	ldr	r1, [pc, #72]	; (404f20 <_dtoa_r+0x5a8>)
  404ed8:	f001 ff2e 	bl	406d38 <__aeabi_dsub>
  404edc:	4602      	mov	r2, r0
  404ede:	460b      	mov	r3, r1
  404ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404ee4:	f002 fb4e 	bl	407584 <__aeabi_dcmplt>
  404ee8:	b1e0      	cbz	r0, 404f24 <_dtoa_r+0x5ac>
  404eea:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  404eee:	2b30      	cmp	r3, #48	; 0x30
  404ef0:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  404ef4:	f040 82b9 	bne.w	40546a <_dtoa_r+0xaf2>
  404ef8:	4614      	mov	r4, r2
  404efa:	e7f6      	b.n	404eea <_dtoa_r+0x572>
  404efc:	4b05      	ldr	r3, [pc, #20]	; (404f14 <_dtoa_r+0x59c>)
  404efe:	f002 f8cf 	bl	4070a0 <__aeabi_dmul>
  404f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404f06:	e7bf      	b.n	404e88 <_dtoa_r+0x510>
  404f08:	004082c8 	.word	0x004082c8
  404f0c:	00408390 	.word	0x00408390
  404f10:	3ff00000 	.word	0x3ff00000
  404f14:	40240000 	.word	0x40240000
  404f18:	401c0000 	.word	0x401c0000
  404f1c:	40140000 	.word	0x40140000
  404f20:	3fe00000 	.word	0x3fe00000
  404f24:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  404f28:	e9cd 3402 	strd	r3, r4, [sp, #8]
  404f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f2e:	2b00      	cmp	r3, #0
  404f30:	db7d      	blt.n	40502e <_dtoa_r+0x6b6>
  404f32:	f1bb 0f0e 	cmp.w	fp, #14
  404f36:	dc7a      	bgt.n	40502e <_dtoa_r+0x6b6>
  404f38:	4bab      	ldr	r3, [pc, #684]	; (4051e8 <_dtoa_r+0x870>)
  404f3a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  404f3e:	e9d3 6700 	ldrd	r6, r7, [r3]
  404f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f44:	2b00      	cmp	r3, #0
  404f46:	da14      	bge.n	404f72 <_dtoa_r+0x5fa>
  404f48:	9b05      	ldr	r3, [sp, #20]
  404f4a:	2b00      	cmp	r3, #0
  404f4c:	dc11      	bgt.n	404f72 <_dtoa_r+0x5fa>
  404f4e:	f040 816c 	bne.w	40522a <_dtoa_r+0x8b2>
  404f52:	2200      	movs	r2, #0
  404f54:	4ba5      	ldr	r3, [pc, #660]	; (4051ec <_dtoa_r+0x874>)
  404f56:	4630      	mov	r0, r6
  404f58:	4639      	mov	r1, r7
  404f5a:	f002 f8a1 	bl	4070a0 <__aeabi_dmul>
  404f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404f62:	f002 fb23 	bl	4075ac <__aeabi_dcmpge>
  404f66:	9d05      	ldr	r5, [sp, #20]
  404f68:	462e      	mov	r6, r5
  404f6a:	2800      	cmp	r0, #0
  404f6c:	f040 815f 	bne.w	40522e <_dtoa_r+0x8b6>
  404f70:	e165      	b.n	40523e <_dtoa_r+0x8c6>
  404f72:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  404f76:	9c06      	ldr	r4, [sp, #24]
  404f78:	4632      	mov	r2, r6
  404f7a:	463b      	mov	r3, r7
  404f7c:	4640      	mov	r0, r8
  404f7e:	4649      	mov	r1, r9
  404f80:	f002 f9b8 	bl	4072f4 <__aeabi_ddiv>
  404f84:	f002 fb3c 	bl	407600 <__aeabi_d2iz>
  404f88:	4605      	mov	r5, r0
  404f8a:	f002 f823 	bl	406fd4 <__aeabi_i2d>
  404f8e:	4632      	mov	r2, r6
  404f90:	463b      	mov	r3, r7
  404f92:	f002 f885 	bl	4070a0 <__aeabi_dmul>
  404f96:	460b      	mov	r3, r1
  404f98:	4602      	mov	r2, r0
  404f9a:	4649      	mov	r1, r9
  404f9c:	4640      	mov	r0, r8
  404f9e:	f001 fecb 	bl	406d38 <__aeabi_dsub>
  404fa2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  404fa6:	9b06      	ldr	r3, [sp, #24]
  404fa8:	f804 eb01 	strb.w	lr, [r4], #1
  404fac:	ebc3 0e04 	rsb	lr, r3, r4
  404fb0:	9b05      	ldr	r3, [sp, #20]
  404fb2:	4573      	cmp	r3, lr
  404fb4:	d12e      	bne.n	405014 <_dtoa_r+0x69c>
  404fb6:	4602      	mov	r2, r0
  404fb8:	460b      	mov	r3, r1
  404fba:	f001 febf 	bl	406d3c <__adddf3>
  404fbe:	4680      	mov	r8, r0
  404fc0:	4689      	mov	r9, r1
  404fc2:	4602      	mov	r2, r0
  404fc4:	460b      	mov	r3, r1
  404fc6:	4630      	mov	r0, r6
  404fc8:	4639      	mov	r1, r7
  404fca:	f002 fadb 	bl	407584 <__aeabi_dcmplt>
  404fce:	b978      	cbnz	r0, 404ff0 <_dtoa_r+0x678>
  404fd0:	4642      	mov	r2, r8
  404fd2:	464b      	mov	r3, r9
  404fd4:	4630      	mov	r0, r6
  404fd6:	4639      	mov	r1, r7
  404fd8:	f002 faca 	bl	407570 <__aeabi_dcmpeq>
  404fdc:	2800      	cmp	r0, #0
  404fde:	f000 8246 	beq.w	40546e <_dtoa_r+0xaf6>
  404fe2:	07eb      	lsls	r3, r5, #31
  404fe4:	d404      	bmi.n	404ff0 <_dtoa_r+0x678>
  404fe6:	e242      	b.n	40546e <_dtoa_r+0xaf6>
  404fe8:	f8dd b020 	ldr.w	fp, [sp, #32]
  404fec:	e000      	b.n	404ff0 <_dtoa_r+0x678>
  404fee:	461c      	mov	r4, r3
  404ff0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  404ff4:	2a39      	cmp	r2, #57	; 0x39
  404ff6:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  404ffa:	d107      	bne.n	40500c <_dtoa_r+0x694>
  404ffc:	9a06      	ldr	r2, [sp, #24]
  404ffe:	429a      	cmp	r2, r3
  405000:	d1f5      	bne.n	404fee <_dtoa_r+0x676>
  405002:	9906      	ldr	r1, [sp, #24]
  405004:	2230      	movs	r2, #48	; 0x30
  405006:	f10b 0b01 	add.w	fp, fp, #1
  40500a:	700a      	strb	r2, [r1, #0]
  40500c:	781a      	ldrb	r2, [r3, #0]
  40500e:	3201      	adds	r2, #1
  405010:	701a      	strb	r2, [r3, #0]
  405012:	e22c      	b.n	40546e <_dtoa_r+0xaf6>
  405014:	2200      	movs	r2, #0
  405016:	4b76      	ldr	r3, [pc, #472]	; (4051f0 <_dtoa_r+0x878>)
  405018:	f002 f842 	bl	4070a0 <__aeabi_dmul>
  40501c:	2200      	movs	r2, #0
  40501e:	2300      	movs	r3, #0
  405020:	4680      	mov	r8, r0
  405022:	4689      	mov	r9, r1
  405024:	f002 faa4 	bl	407570 <__aeabi_dcmpeq>
  405028:	2800      	cmp	r0, #0
  40502a:	d0a5      	beq.n	404f78 <_dtoa_r+0x600>
  40502c:	e21f      	b.n	40546e <_dtoa_r+0xaf6>
  40502e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405030:	2a00      	cmp	r2, #0
  405032:	d02b      	beq.n	40508c <_dtoa_r+0x714>
  405034:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405036:	2a01      	cmp	r2, #1
  405038:	dc0a      	bgt.n	405050 <_dtoa_r+0x6d8>
  40503a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40503c:	b112      	cbz	r2, 405044 <_dtoa_r+0x6cc>
  40503e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405042:	e002      	b.n	40504a <_dtoa_r+0x6d2>
  405044:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40504a:	463d      	mov	r5, r7
  40504c:	4644      	mov	r4, r8
  40504e:	e013      	b.n	405078 <_dtoa_r+0x700>
  405050:	9b05      	ldr	r3, [sp, #20]
  405052:	1e5d      	subs	r5, r3, #1
  405054:	42af      	cmp	r7, r5
  405056:	bfbf      	itttt	lt
  405058:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  40505a:	1bea      	sublt	r2, r5, r7
  40505c:	189b      	addlt	r3, r3, r2
  40505e:	930b      	strlt	r3, [sp, #44]	; 0x2c
  405060:	9b05      	ldr	r3, [sp, #20]
  405062:	bfb6      	itet	lt
  405064:	462f      	movlt	r7, r5
  405066:	1b7d      	subge	r5, r7, r5
  405068:	2500      	movlt	r5, #0
  40506a:	2b00      	cmp	r3, #0
  40506c:	bfab      	itete	ge
  40506e:	9b05      	ldrge	r3, [sp, #20]
  405070:	ebc3 0408 	rsblt	r4, r3, r8
  405074:	4644      	movge	r4, r8
  405076:	2300      	movlt	r3, #0
  405078:	9a07      	ldr	r2, [sp, #28]
  40507a:	2101      	movs	r1, #1
  40507c:	441a      	add	r2, r3
  40507e:	4650      	mov	r0, sl
  405080:	4498      	add	r8, r3
  405082:	9207      	str	r2, [sp, #28]
  405084:	f001 f89e 	bl	4061c4 <__i2b>
  405088:	4606      	mov	r6, r0
  40508a:	e002      	b.n	405092 <_dtoa_r+0x71a>
  40508c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40508e:	463d      	mov	r5, r7
  405090:	4644      	mov	r4, r8
  405092:	b15c      	cbz	r4, 4050ac <_dtoa_r+0x734>
  405094:	9b07      	ldr	r3, [sp, #28]
  405096:	2b00      	cmp	r3, #0
  405098:	dd08      	ble.n	4050ac <_dtoa_r+0x734>
  40509a:	42a3      	cmp	r3, r4
  40509c:	9a07      	ldr	r2, [sp, #28]
  40509e:	bfa8      	it	ge
  4050a0:	4623      	movge	r3, r4
  4050a2:	ebc3 0808 	rsb	r8, r3, r8
  4050a6:	1ae4      	subs	r4, r4, r3
  4050a8:	1ad3      	subs	r3, r2, r3
  4050aa:	9307      	str	r3, [sp, #28]
  4050ac:	2f00      	cmp	r7, #0
  4050ae:	dd1d      	ble.n	4050ec <_dtoa_r+0x774>
  4050b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050b2:	b1ab      	cbz	r3, 4050e0 <_dtoa_r+0x768>
  4050b4:	b18d      	cbz	r5, 4050da <_dtoa_r+0x762>
  4050b6:	4631      	mov	r1, r6
  4050b8:	462a      	mov	r2, r5
  4050ba:	4650      	mov	r0, sl
  4050bc:	f001 f91c 	bl	4062f8 <__pow5mult>
  4050c0:	9a04      	ldr	r2, [sp, #16]
  4050c2:	4601      	mov	r1, r0
  4050c4:	4606      	mov	r6, r0
  4050c6:	4650      	mov	r0, sl
  4050c8:	f001 f885 	bl	4061d6 <__multiply>
  4050cc:	9904      	ldr	r1, [sp, #16]
  4050ce:	9008      	str	r0, [sp, #32]
  4050d0:	4650      	mov	r0, sl
  4050d2:	f000 ff9a 	bl	40600a <_Bfree>
  4050d6:	9b08      	ldr	r3, [sp, #32]
  4050d8:	9304      	str	r3, [sp, #16]
  4050da:	1b7a      	subs	r2, r7, r5
  4050dc:	d006      	beq.n	4050ec <_dtoa_r+0x774>
  4050de:	e000      	b.n	4050e2 <_dtoa_r+0x76a>
  4050e0:	463a      	mov	r2, r7
  4050e2:	9904      	ldr	r1, [sp, #16]
  4050e4:	4650      	mov	r0, sl
  4050e6:	f001 f907 	bl	4062f8 <__pow5mult>
  4050ea:	9004      	str	r0, [sp, #16]
  4050ec:	2101      	movs	r1, #1
  4050ee:	4650      	mov	r0, sl
  4050f0:	f001 f868 	bl	4061c4 <__i2b>
  4050f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4050f6:	4605      	mov	r5, r0
  4050f8:	b35b      	cbz	r3, 405152 <_dtoa_r+0x7da>
  4050fa:	461a      	mov	r2, r3
  4050fc:	4601      	mov	r1, r0
  4050fe:	4650      	mov	r0, sl
  405100:	f001 f8fa 	bl	4062f8 <__pow5mult>
  405104:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405106:	2b01      	cmp	r3, #1
  405108:	4605      	mov	r5, r0
  40510a:	dc18      	bgt.n	40513e <_dtoa_r+0x7c6>
  40510c:	9b02      	ldr	r3, [sp, #8]
  40510e:	b983      	cbnz	r3, 405132 <_dtoa_r+0x7ba>
  405110:	9b03      	ldr	r3, [sp, #12]
  405112:	f3c3 0313 	ubfx	r3, r3, #0, #20
  405116:	b973      	cbnz	r3, 405136 <_dtoa_r+0x7be>
  405118:	9b03      	ldr	r3, [sp, #12]
  40511a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  40511e:	0d3f      	lsrs	r7, r7, #20
  405120:	053f      	lsls	r7, r7, #20
  405122:	b14f      	cbz	r7, 405138 <_dtoa_r+0x7c0>
  405124:	9b07      	ldr	r3, [sp, #28]
  405126:	3301      	adds	r3, #1
  405128:	f108 0801 	add.w	r8, r8, #1
  40512c:	9307      	str	r3, [sp, #28]
  40512e:	2701      	movs	r7, #1
  405130:	e002      	b.n	405138 <_dtoa_r+0x7c0>
  405132:	2700      	movs	r7, #0
  405134:	e000      	b.n	405138 <_dtoa_r+0x7c0>
  405136:	9f02      	ldr	r7, [sp, #8]
  405138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40513a:	b173      	cbz	r3, 40515a <_dtoa_r+0x7e2>
  40513c:	e000      	b.n	405140 <_dtoa_r+0x7c8>
  40513e:	2700      	movs	r7, #0
  405140:	692b      	ldr	r3, [r5, #16]
  405142:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405146:	6918      	ldr	r0, [r3, #16]
  405148:	f000 ffef 	bl	40612a <__hi0bits>
  40514c:	f1c0 0020 	rsb	r0, r0, #32
  405150:	e004      	b.n	40515c <_dtoa_r+0x7e4>
  405152:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405154:	2b01      	cmp	r3, #1
  405156:	ddd9      	ble.n	40510c <_dtoa_r+0x794>
  405158:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40515a:	2001      	movs	r0, #1
  40515c:	9b07      	ldr	r3, [sp, #28]
  40515e:	4418      	add	r0, r3
  405160:	f010 001f 	ands.w	r0, r0, #31
  405164:	d008      	beq.n	405178 <_dtoa_r+0x800>
  405166:	f1c0 0320 	rsb	r3, r0, #32
  40516a:	2b04      	cmp	r3, #4
  40516c:	dd02      	ble.n	405174 <_dtoa_r+0x7fc>
  40516e:	f1c0 001c 	rsb	r0, r0, #28
  405172:	e002      	b.n	40517a <_dtoa_r+0x802>
  405174:	d006      	beq.n	405184 <_dtoa_r+0x80c>
  405176:	4618      	mov	r0, r3
  405178:	301c      	adds	r0, #28
  40517a:	9b07      	ldr	r3, [sp, #28]
  40517c:	4403      	add	r3, r0
  40517e:	4480      	add	r8, r0
  405180:	4404      	add	r4, r0
  405182:	9307      	str	r3, [sp, #28]
  405184:	f1b8 0f00 	cmp.w	r8, #0
  405188:	dd05      	ble.n	405196 <_dtoa_r+0x81e>
  40518a:	4642      	mov	r2, r8
  40518c:	9904      	ldr	r1, [sp, #16]
  40518e:	4650      	mov	r0, sl
  405190:	f001 f900 	bl	406394 <__lshift>
  405194:	9004      	str	r0, [sp, #16]
  405196:	9b07      	ldr	r3, [sp, #28]
  405198:	2b00      	cmp	r3, #0
  40519a:	dd05      	ble.n	4051a8 <_dtoa_r+0x830>
  40519c:	4629      	mov	r1, r5
  40519e:	461a      	mov	r2, r3
  4051a0:	4650      	mov	r0, sl
  4051a2:	f001 f8f7 	bl	406394 <__lshift>
  4051a6:	4605      	mov	r5, r0
  4051a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4051aa:	b31b      	cbz	r3, 4051f4 <_dtoa_r+0x87c>
  4051ac:	4629      	mov	r1, r5
  4051ae:	9804      	ldr	r0, [sp, #16]
  4051b0:	f001 f941 	bl	406436 <__mcmp>
  4051b4:	2800      	cmp	r0, #0
  4051b6:	da1d      	bge.n	4051f4 <_dtoa_r+0x87c>
  4051b8:	2300      	movs	r3, #0
  4051ba:	220a      	movs	r2, #10
  4051bc:	9904      	ldr	r1, [sp, #16]
  4051be:	4650      	mov	r0, sl
  4051c0:	f000 ff3a 	bl	406038 <__multadd>
  4051c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051c6:	9004      	str	r0, [sp, #16]
  4051c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4051cc:	2b00      	cmp	r3, #0
  4051ce:	f000 8160 	beq.w	405492 <_dtoa_r+0xb1a>
  4051d2:	4631      	mov	r1, r6
  4051d4:	2300      	movs	r3, #0
  4051d6:	220a      	movs	r2, #10
  4051d8:	4650      	mov	r0, sl
  4051da:	f000 ff2d 	bl	406038 <__multadd>
  4051de:	f1b9 0f00 	cmp.w	r9, #0
  4051e2:	4606      	mov	r6, r0
  4051e4:	dc3e      	bgt.n	405264 <_dtoa_r+0x8ec>
  4051e6:	e03a      	b.n	40525e <_dtoa_r+0x8e6>
  4051e8:	004082c8 	.word	0x004082c8
  4051ec:	40140000 	.word	0x40140000
  4051f0:	40240000 	.word	0x40240000
  4051f4:	9b05      	ldr	r3, [sp, #20]
  4051f6:	2b00      	cmp	r3, #0
  4051f8:	dc2b      	bgt.n	405252 <_dtoa_r+0x8da>
  4051fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4051fc:	2b02      	cmp	r3, #2
  4051fe:	dd28      	ble.n	405252 <_dtoa_r+0x8da>
  405200:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405204:	f1b9 0f00 	cmp.w	r9, #0
  405208:	d111      	bne.n	40522e <_dtoa_r+0x8b6>
  40520a:	4629      	mov	r1, r5
  40520c:	464b      	mov	r3, r9
  40520e:	2205      	movs	r2, #5
  405210:	4650      	mov	r0, sl
  405212:	f000 ff11 	bl	406038 <__multadd>
  405216:	4601      	mov	r1, r0
  405218:	4605      	mov	r5, r0
  40521a:	9804      	ldr	r0, [sp, #16]
  40521c:	f001 f90b 	bl	406436 <__mcmp>
  405220:	2800      	cmp	r0, #0
  405222:	dc0c      	bgt.n	40523e <_dtoa_r+0x8c6>
  405224:	e003      	b.n	40522e <_dtoa_r+0x8b6>
  405226:	4635      	mov	r5, r6
  405228:	e000      	b.n	40522c <_dtoa_r+0x8b4>
  40522a:	2500      	movs	r5, #0
  40522c:	462e      	mov	r6, r5
  40522e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405230:	9c06      	ldr	r4, [sp, #24]
  405232:	ea6f 0b03 	mvn.w	fp, r3
  405236:	e009      	b.n	40524c <_dtoa_r+0x8d4>
  405238:	f8dd b020 	ldr.w	fp, [sp, #32]
  40523c:	4635      	mov	r5, r6
  40523e:	9b06      	ldr	r3, [sp, #24]
  405240:	9a06      	ldr	r2, [sp, #24]
  405242:	1c5c      	adds	r4, r3, #1
  405244:	2331      	movs	r3, #49	; 0x31
  405246:	7013      	strb	r3, [r2, #0]
  405248:	f10b 0b01 	add.w	fp, fp, #1
  40524c:	9605      	str	r6, [sp, #20]
  40524e:	2600      	movs	r6, #0
  405250:	e0f9      	b.n	405446 <_dtoa_r+0xace>
  405252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405254:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405258:	b923      	cbnz	r3, 405264 <_dtoa_r+0x8ec>
  40525a:	9c06      	ldr	r4, [sp, #24]
  40525c:	e0b2      	b.n	4053c4 <_dtoa_r+0xa4c>
  40525e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  405260:	2b02      	cmp	r3, #2
  405262:	dccf      	bgt.n	405204 <_dtoa_r+0x88c>
  405264:	2c00      	cmp	r4, #0
  405266:	dd05      	ble.n	405274 <_dtoa_r+0x8fc>
  405268:	4631      	mov	r1, r6
  40526a:	4622      	mov	r2, r4
  40526c:	4650      	mov	r0, sl
  40526e:	f001 f891 	bl	406394 <__lshift>
  405272:	4606      	mov	r6, r0
  405274:	b19f      	cbz	r7, 40529e <_dtoa_r+0x926>
  405276:	6871      	ldr	r1, [r6, #4]
  405278:	4650      	mov	r0, sl
  40527a:	f000 fe91 	bl	405fa0 <_Balloc>
  40527e:	6932      	ldr	r2, [r6, #16]
  405280:	3202      	adds	r2, #2
  405282:	4604      	mov	r4, r0
  405284:	0092      	lsls	r2, r2, #2
  405286:	f106 010c 	add.w	r1, r6, #12
  40528a:	300c      	adds	r0, #12
  40528c:	f7fd fd64 	bl	402d58 <memcpy>
  405290:	2201      	movs	r2, #1
  405292:	4621      	mov	r1, r4
  405294:	4650      	mov	r0, sl
  405296:	f001 f87d 	bl	406394 <__lshift>
  40529a:	9005      	str	r0, [sp, #20]
  40529c:	e000      	b.n	4052a0 <_dtoa_r+0x928>
  40529e:	9605      	str	r6, [sp, #20]
  4052a0:	9b02      	ldr	r3, [sp, #8]
  4052a2:	9f06      	ldr	r7, [sp, #24]
  4052a4:	f003 0301 	and.w	r3, r3, #1
  4052a8:	9307      	str	r3, [sp, #28]
  4052aa:	4629      	mov	r1, r5
  4052ac:	9804      	ldr	r0, [sp, #16]
  4052ae:	f7ff fad3 	bl	404858 <quorem>
  4052b2:	4631      	mov	r1, r6
  4052b4:	4604      	mov	r4, r0
  4052b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4052ba:	9804      	ldr	r0, [sp, #16]
  4052bc:	f001 f8bb 	bl	406436 <__mcmp>
  4052c0:	9a05      	ldr	r2, [sp, #20]
  4052c2:	9002      	str	r0, [sp, #8]
  4052c4:	4629      	mov	r1, r5
  4052c6:	4650      	mov	r0, sl
  4052c8:	f001 f8d1 	bl	40646e <__mdiff>
  4052cc:	68c3      	ldr	r3, [r0, #12]
  4052ce:	4602      	mov	r2, r0
  4052d0:	b93b      	cbnz	r3, 4052e2 <_dtoa_r+0x96a>
  4052d2:	4601      	mov	r1, r0
  4052d4:	900a      	str	r0, [sp, #40]	; 0x28
  4052d6:	9804      	ldr	r0, [sp, #16]
  4052d8:	f001 f8ad 	bl	406436 <__mcmp>
  4052dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052de:	4603      	mov	r3, r0
  4052e0:	e000      	b.n	4052e4 <_dtoa_r+0x96c>
  4052e2:	2301      	movs	r3, #1
  4052e4:	4611      	mov	r1, r2
  4052e6:	4650      	mov	r0, sl
  4052e8:	930a      	str	r3, [sp, #40]	; 0x28
  4052ea:	f000 fe8e 	bl	40600a <_Bfree>
  4052ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052f0:	b953      	cbnz	r3, 405308 <_dtoa_r+0x990>
  4052f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4052f4:	b942      	cbnz	r2, 405308 <_dtoa_r+0x990>
  4052f6:	9a07      	ldr	r2, [sp, #28]
  4052f8:	b932      	cbnz	r2, 405308 <_dtoa_r+0x990>
  4052fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4052fe:	d02a      	beq.n	405356 <_dtoa_r+0x9de>
  405300:	9b02      	ldr	r3, [sp, #8]
  405302:	2b00      	cmp	r3, #0
  405304:	dc1c      	bgt.n	405340 <_dtoa_r+0x9c8>
  405306:	e01d      	b.n	405344 <_dtoa_r+0x9cc>
  405308:	9a02      	ldr	r2, [sp, #8]
  40530a:	2a00      	cmp	r2, #0
  40530c:	db04      	blt.n	405318 <_dtoa_r+0x9a0>
  40530e:	d11b      	bne.n	405348 <_dtoa_r+0x9d0>
  405310:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  405312:	b9ca      	cbnz	r2, 405348 <_dtoa_r+0x9d0>
  405314:	9a07      	ldr	r2, [sp, #28]
  405316:	b9ba      	cbnz	r2, 405348 <_dtoa_r+0x9d0>
  405318:	2b00      	cmp	r3, #0
  40531a:	dd13      	ble.n	405344 <_dtoa_r+0x9cc>
  40531c:	2201      	movs	r2, #1
  40531e:	9904      	ldr	r1, [sp, #16]
  405320:	4650      	mov	r0, sl
  405322:	f001 f837 	bl	406394 <__lshift>
  405326:	4629      	mov	r1, r5
  405328:	9004      	str	r0, [sp, #16]
  40532a:	f001 f884 	bl	406436 <__mcmp>
  40532e:	2800      	cmp	r0, #0
  405330:	dc03      	bgt.n	40533a <_dtoa_r+0x9c2>
  405332:	d107      	bne.n	405344 <_dtoa_r+0x9cc>
  405334:	f018 0f01 	tst.w	r8, #1
  405338:	d004      	beq.n	405344 <_dtoa_r+0x9cc>
  40533a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40533e:	d00a      	beq.n	405356 <_dtoa_r+0x9de>
  405340:	f104 0831 	add.w	r8, r4, #49	; 0x31
  405344:	1c7c      	adds	r4, r7, #1
  405346:	e00c      	b.n	405362 <_dtoa_r+0x9ea>
  405348:	2b00      	cmp	r3, #0
  40534a:	f107 0401 	add.w	r4, r7, #1
  40534e:	dd0b      	ble.n	405368 <_dtoa_r+0x9f0>
  405350:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405354:	d103      	bne.n	40535e <_dtoa_r+0x9e6>
  405356:	2339      	movs	r3, #57	; 0x39
  405358:	703b      	strb	r3, [r7, #0]
  40535a:	3701      	adds	r7, #1
  40535c:	e056      	b.n	40540c <_dtoa_r+0xa94>
  40535e:	f108 0801 	add.w	r8, r8, #1
  405362:	f887 8000 	strb.w	r8, [r7]
  405366:	e06e      	b.n	405446 <_dtoa_r+0xace>
  405368:	9b06      	ldr	r3, [sp, #24]
  40536a:	f804 8c01 	strb.w	r8, [r4, #-1]
  40536e:	1ae3      	subs	r3, r4, r3
  405370:	454b      	cmp	r3, r9
  405372:	4627      	mov	r7, r4
  405374:	d03b      	beq.n	4053ee <_dtoa_r+0xa76>
  405376:	2300      	movs	r3, #0
  405378:	220a      	movs	r2, #10
  40537a:	9904      	ldr	r1, [sp, #16]
  40537c:	4650      	mov	r0, sl
  40537e:	f000 fe5b 	bl	406038 <__multadd>
  405382:	9b05      	ldr	r3, [sp, #20]
  405384:	9004      	str	r0, [sp, #16]
  405386:	429e      	cmp	r6, r3
  405388:	f04f 020a 	mov.w	r2, #10
  40538c:	f04f 0300 	mov.w	r3, #0
  405390:	4631      	mov	r1, r6
  405392:	4650      	mov	r0, sl
  405394:	d104      	bne.n	4053a0 <_dtoa_r+0xa28>
  405396:	f000 fe4f 	bl	406038 <__multadd>
  40539a:	4606      	mov	r6, r0
  40539c:	9005      	str	r0, [sp, #20]
  40539e:	e784      	b.n	4052aa <_dtoa_r+0x932>
  4053a0:	f000 fe4a 	bl	406038 <__multadd>
  4053a4:	2300      	movs	r3, #0
  4053a6:	4606      	mov	r6, r0
  4053a8:	220a      	movs	r2, #10
  4053aa:	9905      	ldr	r1, [sp, #20]
  4053ac:	4650      	mov	r0, sl
  4053ae:	f000 fe43 	bl	406038 <__multadd>
  4053b2:	9005      	str	r0, [sp, #20]
  4053b4:	e779      	b.n	4052aa <_dtoa_r+0x932>
  4053b6:	2300      	movs	r3, #0
  4053b8:	220a      	movs	r2, #10
  4053ba:	9904      	ldr	r1, [sp, #16]
  4053bc:	4650      	mov	r0, sl
  4053be:	f000 fe3b 	bl	406038 <__multadd>
  4053c2:	9004      	str	r0, [sp, #16]
  4053c4:	4629      	mov	r1, r5
  4053c6:	9804      	ldr	r0, [sp, #16]
  4053c8:	f7ff fa46 	bl	404858 <quorem>
  4053cc:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4053d0:	f804 8b01 	strb.w	r8, [r4], #1
  4053d4:	9b06      	ldr	r3, [sp, #24]
  4053d6:	1ae3      	subs	r3, r4, r3
  4053d8:	454b      	cmp	r3, r9
  4053da:	dbec      	blt.n	4053b6 <_dtoa_r+0xa3e>
  4053dc:	9b06      	ldr	r3, [sp, #24]
  4053de:	9605      	str	r6, [sp, #20]
  4053e0:	f1b9 0f01 	cmp.w	r9, #1
  4053e4:	bfac      	ite	ge
  4053e6:	444b      	addge	r3, r9
  4053e8:	3301      	addlt	r3, #1
  4053ea:	461f      	mov	r7, r3
  4053ec:	2600      	movs	r6, #0
  4053ee:	2201      	movs	r2, #1
  4053f0:	9904      	ldr	r1, [sp, #16]
  4053f2:	4650      	mov	r0, sl
  4053f4:	f000 ffce 	bl	406394 <__lshift>
  4053f8:	4629      	mov	r1, r5
  4053fa:	9004      	str	r0, [sp, #16]
  4053fc:	f001 f81b 	bl	406436 <__mcmp>
  405400:	2800      	cmp	r0, #0
  405402:	dc03      	bgt.n	40540c <_dtoa_r+0xa94>
  405404:	d116      	bne.n	405434 <_dtoa_r+0xabc>
  405406:	f018 0f01 	tst.w	r8, #1
  40540a:	d013      	beq.n	405434 <_dtoa_r+0xabc>
  40540c:	463c      	mov	r4, r7
  40540e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  405412:	2b39      	cmp	r3, #57	; 0x39
  405414:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  405418:	d109      	bne.n	40542e <_dtoa_r+0xab6>
  40541a:	9b06      	ldr	r3, [sp, #24]
  40541c:	4293      	cmp	r3, r2
  40541e:	d104      	bne.n	40542a <_dtoa_r+0xab2>
  405420:	f10b 0b01 	add.w	fp, fp, #1
  405424:	2331      	movs	r3, #49	; 0x31
  405426:	9a06      	ldr	r2, [sp, #24]
  405428:	e002      	b.n	405430 <_dtoa_r+0xab8>
  40542a:	4614      	mov	r4, r2
  40542c:	e7ef      	b.n	40540e <_dtoa_r+0xa96>
  40542e:	3301      	adds	r3, #1
  405430:	7013      	strb	r3, [r2, #0]
  405432:	e008      	b.n	405446 <_dtoa_r+0xace>
  405434:	463c      	mov	r4, r7
  405436:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40543a:	2b30      	cmp	r3, #48	; 0x30
  40543c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  405440:	d101      	bne.n	405446 <_dtoa_r+0xace>
  405442:	4614      	mov	r4, r2
  405444:	e7f7      	b.n	405436 <_dtoa_r+0xabe>
  405446:	4629      	mov	r1, r5
  405448:	4650      	mov	r0, sl
  40544a:	f000 fdde 	bl	40600a <_Bfree>
  40544e:	9b05      	ldr	r3, [sp, #20]
  405450:	b16b      	cbz	r3, 40546e <_dtoa_r+0xaf6>
  405452:	b12e      	cbz	r6, 405460 <_dtoa_r+0xae8>
  405454:	429e      	cmp	r6, r3
  405456:	d003      	beq.n	405460 <_dtoa_r+0xae8>
  405458:	4631      	mov	r1, r6
  40545a:	4650      	mov	r0, sl
  40545c:	f000 fdd5 	bl	40600a <_Bfree>
  405460:	9905      	ldr	r1, [sp, #20]
  405462:	4650      	mov	r0, sl
  405464:	f000 fdd1 	bl	40600a <_Bfree>
  405468:	e001      	b.n	40546e <_dtoa_r+0xaf6>
  40546a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40546e:	9904      	ldr	r1, [sp, #16]
  405470:	4650      	mov	r0, sl
  405472:	f000 fdca 	bl	40600a <_Bfree>
  405476:	2300      	movs	r3, #0
  405478:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40547a:	7023      	strb	r3, [r4, #0]
  40547c:	f10b 0301 	add.w	r3, fp, #1
  405480:	6013      	str	r3, [r2, #0]
  405482:	9b22      	ldr	r3, [sp, #136]	; 0x88
  405484:	b11b      	cbz	r3, 40548e <_dtoa_r+0xb16>
  405486:	601c      	str	r4, [r3, #0]
  405488:	e001      	b.n	40548e <_dtoa_r+0xb16>
  40548a:	4808      	ldr	r0, [pc, #32]	; (4054ac <_dtoa_r+0xb34>)
  40548c:	e00a      	b.n	4054a4 <_dtoa_r+0xb2c>
  40548e:	9806      	ldr	r0, [sp, #24]
  405490:	e008      	b.n	4054a4 <_dtoa_r+0xb2c>
  405492:	f1b9 0f00 	cmp.w	r9, #0
  405496:	f73f aee0 	bgt.w	40525a <_dtoa_r+0x8e2>
  40549a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40549c:	2b02      	cmp	r3, #2
  40549e:	f77f aedc 	ble.w	40525a <_dtoa_r+0x8e2>
  4054a2:	e6af      	b.n	405204 <_dtoa_r+0x88c>
  4054a4:	b015      	add	sp, #84	; 0x54
  4054a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054aa:	bf00      	nop
  4054ac:	004081d4 	.word	0x004081d4

004054b0 <__sflush_r>:
  4054b0:	898a      	ldrh	r2, [r1, #12]
  4054b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054b6:	4605      	mov	r5, r0
  4054b8:	0710      	lsls	r0, r2, #28
  4054ba:	460c      	mov	r4, r1
  4054bc:	d459      	bmi.n	405572 <__sflush_r+0xc2>
  4054be:	684b      	ldr	r3, [r1, #4]
  4054c0:	2b00      	cmp	r3, #0
  4054c2:	dc02      	bgt.n	4054ca <__sflush_r+0x1a>
  4054c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4054c6:	2b00      	cmp	r3, #0
  4054c8:	dd17      	ble.n	4054fa <__sflush_r+0x4a>
  4054ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4054cc:	b1ae      	cbz	r6, 4054fa <__sflush_r+0x4a>
  4054ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  4054d2:	2300      	movs	r3, #0
  4054d4:	b292      	uxth	r2, r2
  4054d6:	682f      	ldr	r7, [r5, #0]
  4054d8:	602b      	str	r3, [r5, #0]
  4054da:	b10a      	cbz	r2, 4054e0 <__sflush_r+0x30>
  4054dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4054de:	e015      	b.n	40550c <__sflush_r+0x5c>
  4054e0:	6a21      	ldr	r1, [r4, #32]
  4054e2:	2301      	movs	r3, #1
  4054e4:	4628      	mov	r0, r5
  4054e6:	47b0      	blx	r6
  4054e8:	1c41      	adds	r1, r0, #1
  4054ea:	d10f      	bne.n	40550c <__sflush_r+0x5c>
  4054ec:	682b      	ldr	r3, [r5, #0]
  4054ee:	b16b      	cbz	r3, 40550c <__sflush_r+0x5c>
  4054f0:	2b1d      	cmp	r3, #29
  4054f2:	d001      	beq.n	4054f8 <__sflush_r+0x48>
  4054f4:	2b16      	cmp	r3, #22
  4054f6:	d103      	bne.n	405500 <__sflush_r+0x50>
  4054f8:	602f      	str	r7, [r5, #0]
  4054fa:	2000      	movs	r0, #0
  4054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405500:	89a3      	ldrh	r3, [r4, #12]
  405502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405506:	81a3      	strh	r3, [r4, #12]
  405508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40550c:	89a3      	ldrh	r3, [r4, #12]
  40550e:	075a      	lsls	r2, r3, #29
  405510:	d505      	bpl.n	40551e <__sflush_r+0x6e>
  405512:	6863      	ldr	r3, [r4, #4]
  405514:	1ac0      	subs	r0, r0, r3
  405516:	6b63      	ldr	r3, [r4, #52]	; 0x34
  405518:	b10b      	cbz	r3, 40551e <__sflush_r+0x6e>
  40551a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40551c:	1ac0      	subs	r0, r0, r3
  40551e:	2300      	movs	r3, #0
  405520:	4602      	mov	r2, r0
  405522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  405524:	6a21      	ldr	r1, [r4, #32]
  405526:	4628      	mov	r0, r5
  405528:	47b0      	blx	r6
  40552a:	1c43      	adds	r3, r0, #1
  40552c:	89a3      	ldrh	r3, [r4, #12]
  40552e:	d106      	bne.n	40553e <__sflush_r+0x8e>
  405530:	6829      	ldr	r1, [r5, #0]
  405532:	291d      	cmp	r1, #29
  405534:	d83a      	bhi.n	4055ac <__sflush_r+0xfc>
  405536:	4a21      	ldr	r2, [pc, #132]	; (4055bc <__sflush_r+0x10c>)
  405538:	40ca      	lsrs	r2, r1
  40553a:	07d6      	lsls	r6, r2, #31
  40553c:	d536      	bpl.n	4055ac <__sflush_r+0xfc>
  40553e:	2200      	movs	r2, #0
  405540:	6062      	str	r2, [r4, #4]
  405542:	04d9      	lsls	r1, r3, #19
  405544:	6922      	ldr	r2, [r4, #16]
  405546:	6022      	str	r2, [r4, #0]
  405548:	d504      	bpl.n	405554 <__sflush_r+0xa4>
  40554a:	1c42      	adds	r2, r0, #1
  40554c:	d101      	bne.n	405552 <__sflush_r+0xa2>
  40554e:	682b      	ldr	r3, [r5, #0]
  405550:	b903      	cbnz	r3, 405554 <__sflush_r+0xa4>
  405552:	6560      	str	r0, [r4, #84]	; 0x54
  405554:	6b61      	ldr	r1, [r4, #52]	; 0x34
  405556:	602f      	str	r7, [r5, #0]
  405558:	2900      	cmp	r1, #0
  40555a:	d0ce      	beq.n	4054fa <__sflush_r+0x4a>
  40555c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  405560:	4299      	cmp	r1, r3
  405562:	d002      	beq.n	40556a <__sflush_r+0xba>
  405564:	4628      	mov	r0, r5
  405566:	f001 f913 	bl	406790 <_free_r>
  40556a:	2000      	movs	r0, #0
  40556c:	6360      	str	r0, [r4, #52]	; 0x34
  40556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405572:	690f      	ldr	r7, [r1, #16]
  405574:	2f00      	cmp	r7, #0
  405576:	d0c0      	beq.n	4054fa <__sflush_r+0x4a>
  405578:	0793      	lsls	r3, r2, #30
  40557a:	680e      	ldr	r6, [r1, #0]
  40557c:	bf08      	it	eq
  40557e:	694b      	ldreq	r3, [r1, #20]
  405580:	600f      	str	r7, [r1, #0]
  405582:	bf18      	it	ne
  405584:	2300      	movne	r3, #0
  405586:	ebc7 0806 	rsb	r8, r7, r6
  40558a:	608b      	str	r3, [r1, #8]
  40558c:	e002      	b.n	405594 <__sflush_r+0xe4>
  40558e:	4407      	add	r7, r0
  405590:	ebc0 0808 	rsb	r8, r0, r8
  405594:	f1b8 0f00 	cmp.w	r8, #0
  405598:	ddaf      	ble.n	4054fa <__sflush_r+0x4a>
  40559a:	4643      	mov	r3, r8
  40559c:	463a      	mov	r2, r7
  40559e:	6a21      	ldr	r1, [r4, #32]
  4055a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4055a2:	4628      	mov	r0, r5
  4055a4:	47b0      	blx	r6
  4055a6:	2800      	cmp	r0, #0
  4055a8:	dcf1      	bgt.n	40558e <__sflush_r+0xde>
  4055aa:	89a3      	ldrh	r3, [r4, #12]
  4055ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055b0:	81a3      	strh	r3, [r4, #12]
  4055b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4055b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055ba:	bf00      	nop
  4055bc:	20400001 	.word	0x20400001

004055c0 <_fflush_r>:
  4055c0:	b538      	push	{r3, r4, r5, lr}
  4055c2:	690b      	ldr	r3, [r1, #16]
  4055c4:	4605      	mov	r5, r0
  4055c6:	460c      	mov	r4, r1
  4055c8:	b1db      	cbz	r3, 405602 <_fflush_r+0x42>
  4055ca:	b118      	cbz	r0, 4055d4 <_fflush_r+0x14>
  4055cc:	6983      	ldr	r3, [r0, #24]
  4055ce:	b90b      	cbnz	r3, 4055d4 <_fflush_r+0x14>
  4055d0:	f000 f860 	bl	405694 <__sinit>
  4055d4:	4b0c      	ldr	r3, [pc, #48]	; (405608 <_fflush_r+0x48>)
  4055d6:	429c      	cmp	r4, r3
  4055d8:	d101      	bne.n	4055de <_fflush_r+0x1e>
  4055da:	686c      	ldr	r4, [r5, #4]
  4055dc:	e008      	b.n	4055f0 <_fflush_r+0x30>
  4055de:	4b0b      	ldr	r3, [pc, #44]	; (40560c <_fflush_r+0x4c>)
  4055e0:	429c      	cmp	r4, r3
  4055e2:	d101      	bne.n	4055e8 <_fflush_r+0x28>
  4055e4:	68ac      	ldr	r4, [r5, #8]
  4055e6:	e003      	b.n	4055f0 <_fflush_r+0x30>
  4055e8:	4b09      	ldr	r3, [pc, #36]	; (405610 <_fflush_r+0x50>)
  4055ea:	429c      	cmp	r4, r3
  4055ec:	bf08      	it	eq
  4055ee:	68ec      	ldreq	r4, [r5, #12]
  4055f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4055f4:	b12b      	cbz	r3, 405602 <_fflush_r+0x42>
  4055f6:	4621      	mov	r1, r4
  4055f8:	4628      	mov	r0, r5
  4055fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4055fe:	f7ff bf57 	b.w	4054b0 <__sflush_r>
  405602:	2000      	movs	r0, #0
  405604:	bd38      	pop	{r3, r4, r5, pc}
  405606:	bf00      	nop
  405608:	00408258 	.word	0x00408258
  40560c:	00408278 	.word	0x00408278
  405610:	00408298 	.word	0x00408298

00405614 <_cleanup_r>:
  405614:	4901      	ldr	r1, [pc, #4]	; (40561c <_cleanup_r+0x8>)
  405616:	f000 b8a9 	b.w	40576c <_fwalk_reent>
  40561a:	bf00      	nop
  40561c:	004055c1 	.word	0x004055c1

00405620 <std.isra.0>:
  405620:	2300      	movs	r3, #0
  405622:	b510      	push	{r4, lr}
  405624:	4604      	mov	r4, r0
  405626:	6003      	str	r3, [r0, #0]
  405628:	6043      	str	r3, [r0, #4]
  40562a:	6083      	str	r3, [r0, #8]
  40562c:	8181      	strh	r1, [r0, #12]
  40562e:	6643      	str	r3, [r0, #100]	; 0x64
  405630:	81c2      	strh	r2, [r0, #14]
  405632:	6103      	str	r3, [r0, #16]
  405634:	6143      	str	r3, [r0, #20]
  405636:	6183      	str	r3, [r0, #24]
  405638:	4619      	mov	r1, r3
  40563a:	2208      	movs	r2, #8
  40563c:	305c      	adds	r0, #92	; 0x5c
  40563e:	f7fd fb96 	bl	402d6e <memset>
  405642:	4b05      	ldr	r3, [pc, #20]	; (405658 <std.isra.0+0x38>)
  405644:	6263      	str	r3, [r4, #36]	; 0x24
  405646:	4b05      	ldr	r3, [pc, #20]	; (40565c <std.isra.0+0x3c>)
  405648:	62a3      	str	r3, [r4, #40]	; 0x28
  40564a:	4b05      	ldr	r3, [pc, #20]	; (405660 <std.isra.0+0x40>)
  40564c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40564e:	4b05      	ldr	r3, [pc, #20]	; (405664 <std.isra.0+0x44>)
  405650:	6224      	str	r4, [r4, #32]
  405652:	6323      	str	r3, [r4, #48]	; 0x30
  405654:	bd10      	pop	{r4, pc}
  405656:	bf00      	nop
  405658:	00406b91 	.word	0x00406b91
  40565c:	00406bb3 	.word	0x00406bb3
  405660:	00406beb 	.word	0x00406beb
  405664:	00406c0f 	.word	0x00406c0f

00405668 <__sfmoreglue>:
  405668:	b570      	push	{r4, r5, r6, lr}
  40566a:	2368      	movs	r3, #104	; 0x68
  40566c:	1e4d      	subs	r5, r1, #1
  40566e:	435d      	muls	r5, r3
  405670:	460e      	mov	r6, r1
  405672:	f105 0174 	add.w	r1, r5, #116	; 0x74
  405676:	f001 f8d9 	bl	40682c <_malloc_r>
  40567a:	4604      	mov	r4, r0
  40567c:	b140      	cbz	r0, 405690 <__sfmoreglue+0x28>
  40567e:	2100      	movs	r1, #0
  405680:	e880 0042 	stmia.w	r0, {r1, r6}
  405684:	300c      	adds	r0, #12
  405686:	60a0      	str	r0, [r4, #8]
  405688:	f105 0268 	add.w	r2, r5, #104	; 0x68
  40568c:	f7fd fb6f 	bl	402d6e <memset>
  405690:	4620      	mov	r0, r4
  405692:	bd70      	pop	{r4, r5, r6, pc}

00405694 <__sinit>:
  405694:	6983      	ldr	r3, [r0, #24]
  405696:	b510      	push	{r4, lr}
  405698:	4604      	mov	r4, r0
  40569a:	bb33      	cbnz	r3, 4056ea <__sinit+0x56>
  40569c:	6483      	str	r3, [r0, #72]	; 0x48
  40569e:	64c3      	str	r3, [r0, #76]	; 0x4c
  4056a0:	6503      	str	r3, [r0, #80]	; 0x50
  4056a2:	4b12      	ldr	r3, [pc, #72]	; (4056ec <__sinit+0x58>)
  4056a4:	4a12      	ldr	r2, [pc, #72]	; (4056f0 <__sinit+0x5c>)
  4056a6:	681b      	ldr	r3, [r3, #0]
  4056a8:	6282      	str	r2, [r0, #40]	; 0x28
  4056aa:	4298      	cmp	r0, r3
  4056ac:	bf04      	itt	eq
  4056ae:	2301      	moveq	r3, #1
  4056b0:	6183      	streq	r3, [r0, #24]
  4056b2:	f000 f81f 	bl	4056f4 <__sfp>
  4056b6:	6060      	str	r0, [r4, #4]
  4056b8:	4620      	mov	r0, r4
  4056ba:	f000 f81b 	bl	4056f4 <__sfp>
  4056be:	60a0      	str	r0, [r4, #8]
  4056c0:	4620      	mov	r0, r4
  4056c2:	f000 f817 	bl	4056f4 <__sfp>
  4056c6:	2200      	movs	r2, #0
  4056c8:	60e0      	str	r0, [r4, #12]
  4056ca:	2104      	movs	r1, #4
  4056cc:	6860      	ldr	r0, [r4, #4]
  4056ce:	f7ff ffa7 	bl	405620 <std.isra.0>
  4056d2:	2201      	movs	r2, #1
  4056d4:	2109      	movs	r1, #9
  4056d6:	68a0      	ldr	r0, [r4, #8]
  4056d8:	f7ff ffa2 	bl	405620 <std.isra.0>
  4056dc:	2202      	movs	r2, #2
  4056de:	2112      	movs	r1, #18
  4056e0:	68e0      	ldr	r0, [r4, #12]
  4056e2:	f7ff ff9d 	bl	405620 <std.isra.0>
  4056e6:	2301      	movs	r3, #1
  4056e8:	61a3      	str	r3, [r4, #24]
  4056ea:	bd10      	pop	{r4, pc}
  4056ec:	004081c0 	.word	0x004081c0
  4056f0:	00405615 	.word	0x00405615

004056f4 <__sfp>:
  4056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4056f6:	4b1c      	ldr	r3, [pc, #112]	; (405768 <__sfp+0x74>)
  4056f8:	681e      	ldr	r6, [r3, #0]
  4056fa:	69b3      	ldr	r3, [r6, #24]
  4056fc:	4607      	mov	r7, r0
  4056fe:	b913      	cbnz	r3, 405706 <__sfp+0x12>
  405700:	4630      	mov	r0, r6
  405702:	f7ff ffc7 	bl	405694 <__sinit>
  405706:	3648      	adds	r6, #72	; 0x48
  405708:	68b4      	ldr	r4, [r6, #8]
  40570a:	6873      	ldr	r3, [r6, #4]
  40570c:	3b01      	subs	r3, #1
  40570e:	d404      	bmi.n	40571a <__sfp+0x26>
  405710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  405714:	b17d      	cbz	r5, 405736 <__sfp+0x42>
  405716:	3468      	adds	r4, #104	; 0x68
  405718:	e7f8      	b.n	40570c <__sfp+0x18>
  40571a:	6833      	ldr	r3, [r6, #0]
  40571c:	b10b      	cbz	r3, 405722 <__sfp+0x2e>
  40571e:	6836      	ldr	r6, [r6, #0]
  405720:	e7f2      	b.n	405708 <__sfp+0x14>
  405722:	2104      	movs	r1, #4
  405724:	4638      	mov	r0, r7
  405726:	f7ff ff9f 	bl	405668 <__sfmoreglue>
  40572a:	6030      	str	r0, [r6, #0]
  40572c:	2800      	cmp	r0, #0
  40572e:	d1f6      	bne.n	40571e <__sfp+0x2a>
  405730:	230c      	movs	r3, #12
  405732:	603b      	str	r3, [r7, #0]
  405734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405736:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40573a:	81e3      	strh	r3, [r4, #14]
  40573c:	2301      	movs	r3, #1
  40573e:	81a3      	strh	r3, [r4, #12]
  405740:	6665      	str	r5, [r4, #100]	; 0x64
  405742:	6025      	str	r5, [r4, #0]
  405744:	60a5      	str	r5, [r4, #8]
  405746:	6065      	str	r5, [r4, #4]
  405748:	6125      	str	r5, [r4, #16]
  40574a:	6165      	str	r5, [r4, #20]
  40574c:	61a5      	str	r5, [r4, #24]
  40574e:	2208      	movs	r2, #8
  405750:	4629      	mov	r1, r5
  405752:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  405756:	f7fd fb0a 	bl	402d6e <memset>
  40575a:	6365      	str	r5, [r4, #52]	; 0x34
  40575c:	63a5      	str	r5, [r4, #56]	; 0x38
  40575e:	64a5      	str	r5, [r4, #72]	; 0x48
  405760:	64e5      	str	r5, [r4, #76]	; 0x4c
  405762:	4620      	mov	r0, r4
  405764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405766:	bf00      	nop
  405768:	004081c0 	.word	0x004081c0

0040576c <_fwalk_reent>:
  40576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405770:	4680      	mov	r8, r0
  405772:	4689      	mov	r9, r1
  405774:	f100 0448 	add.w	r4, r0, #72	; 0x48
  405778:	2600      	movs	r6, #0
  40577a:	b194      	cbz	r4, 4057a2 <_fwalk_reent+0x36>
  40577c:	68a5      	ldr	r5, [r4, #8]
  40577e:	6867      	ldr	r7, [r4, #4]
  405780:	3f01      	subs	r7, #1
  405782:	d40c      	bmi.n	40579e <_fwalk_reent+0x32>
  405784:	89ab      	ldrh	r3, [r5, #12]
  405786:	2b01      	cmp	r3, #1
  405788:	d907      	bls.n	40579a <_fwalk_reent+0x2e>
  40578a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  40578e:	3301      	adds	r3, #1
  405790:	d003      	beq.n	40579a <_fwalk_reent+0x2e>
  405792:	4629      	mov	r1, r5
  405794:	4640      	mov	r0, r8
  405796:	47c8      	blx	r9
  405798:	4306      	orrs	r6, r0
  40579a:	3568      	adds	r5, #104	; 0x68
  40579c:	e7f0      	b.n	405780 <_fwalk_reent+0x14>
  40579e:	6824      	ldr	r4, [r4, #0]
  4057a0:	e7eb      	b.n	40577a <_fwalk_reent+0xe>
  4057a2:	4630      	mov	r0, r6
  4057a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004057a8 <rshift>:
  4057a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4057aa:	6906      	ldr	r6, [r0, #16]
  4057ac:	114b      	asrs	r3, r1, #5
  4057ae:	42b3      	cmp	r3, r6
  4057b0:	f100 0514 	add.w	r5, r0, #20
  4057b4:	da27      	bge.n	405806 <rshift+0x5e>
  4057b6:	f011 011f 	ands.w	r1, r1, #31
  4057ba:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  4057be:	eb05 0283 	add.w	r2, r5, r3, lsl #2
  4057c2:	d101      	bne.n	4057c8 <rshift+0x20>
  4057c4:	4629      	mov	r1, r5
  4057c6:	e016      	b.n	4057f6 <rshift+0x4e>
  4057c8:	1d14      	adds	r4, r2, #4
  4057ca:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  4057ce:	f1c1 0e20 	rsb	lr, r1, #32
  4057d2:	40ca      	lsrs	r2, r1
  4057d4:	462b      	mov	r3, r5
  4057d6:	42b4      	cmp	r4, r6
  4057d8:	d209      	bcs.n	4057ee <rshift+0x46>
  4057da:	6827      	ldr	r7, [r4, #0]
  4057dc:	fa07 f70e 	lsl.w	r7, r7, lr
  4057e0:	433a      	orrs	r2, r7
  4057e2:	f843 2b04 	str.w	r2, [r3], #4
  4057e6:	f854 2b04 	ldr.w	r2, [r4], #4
  4057ea:	40ca      	lsrs	r2, r1
  4057ec:	e7f3      	b.n	4057d6 <rshift+0x2e>
  4057ee:	601a      	str	r2, [r3, #0]
  4057f0:	b152      	cbz	r2, 405808 <rshift+0x60>
  4057f2:	3304      	adds	r3, #4
  4057f4:	e008      	b.n	405808 <rshift+0x60>
  4057f6:	42b2      	cmp	r2, r6
  4057f8:	460b      	mov	r3, r1
  4057fa:	d205      	bcs.n	405808 <rshift+0x60>
  4057fc:	f852 3b04 	ldr.w	r3, [r2], #4
  405800:	f841 3b04 	str.w	r3, [r1], #4
  405804:	e7f7      	b.n	4057f6 <rshift+0x4e>
  405806:	462b      	mov	r3, r5
  405808:	1b5b      	subs	r3, r3, r5
  40580a:	109b      	asrs	r3, r3, #2
  40580c:	6103      	str	r3, [r0, #16]
  40580e:	b903      	cbnz	r3, 405812 <rshift+0x6a>
  405810:	6143      	str	r3, [r0, #20]
  405812:	bdf0      	pop	{r4, r5, r6, r7, pc}

00405814 <__hexdig_fun>:
  405814:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  405818:	2b09      	cmp	r3, #9
  40581a:	d801      	bhi.n	405820 <__hexdig_fun+0xc>
  40581c:	3820      	subs	r0, #32
  40581e:	e00a      	b.n	405836 <__hexdig_fun+0x22>
  405820:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  405824:	2b05      	cmp	r3, #5
  405826:	d801      	bhi.n	40582c <__hexdig_fun+0x18>
  405828:	3847      	subs	r0, #71	; 0x47
  40582a:	e004      	b.n	405836 <__hexdig_fun+0x22>
  40582c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  405830:	2b05      	cmp	r3, #5
  405832:	d802      	bhi.n	40583a <__hexdig_fun+0x26>
  405834:	3827      	subs	r0, #39	; 0x27
  405836:	b2c0      	uxtb	r0, r0
  405838:	4770      	bx	lr
  40583a:	2000      	movs	r0, #0
  40583c:	4770      	bx	lr

0040583e <__gethex>:
  40583e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405842:	b08b      	sub	sp, #44	; 0x2c
  405844:	468a      	mov	sl, r1
  405846:	9002      	str	r0, [sp, #8]
  405848:	9816      	ldr	r0, [sp, #88]	; 0x58
  40584a:	9306      	str	r3, [sp, #24]
  40584c:	4690      	mov	r8, r2
  40584e:	f000 facc 	bl	405dea <__localeconv_l>
  405852:	6803      	ldr	r3, [r0, #0]
  405854:	9303      	str	r3, [sp, #12]
  405856:	4618      	mov	r0, r3
  405858:	f7fe f83e 	bl	4038d8 <strlen>
  40585c:	9b03      	ldr	r3, [sp, #12]
  40585e:	9001      	str	r0, [sp, #4]
  405860:	4403      	add	r3, r0
  405862:	f04f 0b00 	mov.w	fp, #0
  405866:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40586a:	9307      	str	r3, [sp, #28]
  40586c:	f8da 3000 	ldr.w	r3, [sl]
  405870:	3302      	adds	r3, #2
  405872:	461f      	mov	r7, r3
  405874:	f813 0b01 	ldrb.w	r0, [r3], #1
  405878:	2830      	cmp	r0, #48	; 0x30
  40587a:	d102      	bne.n	405882 <__gethex+0x44>
  40587c:	f10b 0b01 	add.w	fp, fp, #1
  405880:	e7f7      	b.n	405872 <__gethex+0x34>
  405882:	f7ff ffc7 	bl	405814 <__hexdig_fun>
  405886:	4604      	mov	r4, r0
  405888:	b9e0      	cbnz	r0, 4058c4 <__gethex+0x86>
  40588a:	9a01      	ldr	r2, [sp, #4]
  40588c:	9903      	ldr	r1, [sp, #12]
  40588e:	4638      	mov	r0, r7
  405890:	f001 f9c1 	bl	406c16 <strncmp>
  405894:	2800      	cmp	r0, #0
  405896:	d134      	bne.n	405902 <__gethex+0xc4>
  405898:	9b01      	ldr	r3, [sp, #4]
  40589a:	5cf8      	ldrb	r0, [r7, r3]
  40589c:	18fe      	adds	r6, r7, r3
  40589e:	f7ff ffb9 	bl	405814 <__hexdig_fun>
  4058a2:	b380      	cbz	r0, 405906 <__gethex+0xc8>
  4058a4:	4633      	mov	r3, r6
  4058a6:	7818      	ldrb	r0, [r3, #0]
  4058a8:	2830      	cmp	r0, #48	; 0x30
  4058aa:	461f      	mov	r7, r3
  4058ac:	f103 0301 	add.w	r3, r3, #1
  4058b0:	d0f9      	beq.n	4058a6 <__gethex+0x68>
  4058b2:	f7ff ffaf 	bl	405814 <__hexdig_fun>
  4058b6:	fab0 f580 	clz	r5, r0
  4058ba:	096d      	lsrs	r5, r5, #5
  4058bc:	4634      	mov	r4, r6
  4058be:	f04f 0b01 	mov.w	fp, #1
  4058c2:	e001      	b.n	4058c8 <__gethex+0x8a>
  4058c4:	2500      	movs	r5, #0
  4058c6:	462c      	mov	r4, r5
  4058c8:	463a      	mov	r2, r7
  4058ca:	4616      	mov	r6, r2
  4058cc:	3201      	adds	r2, #1
  4058ce:	7830      	ldrb	r0, [r6, #0]
  4058d0:	f7ff ffa0 	bl	405814 <__hexdig_fun>
  4058d4:	2800      	cmp	r0, #0
  4058d6:	d1f8      	bne.n	4058ca <__gethex+0x8c>
  4058d8:	9a01      	ldr	r2, [sp, #4]
  4058da:	9903      	ldr	r1, [sp, #12]
  4058dc:	4630      	mov	r0, r6
  4058de:	f001 f99a 	bl	406c16 <strncmp>
  4058e2:	b950      	cbnz	r0, 4058fa <__gethex+0xbc>
  4058e4:	b954      	cbnz	r4, 4058fc <__gethex+0xbe>
  4058e6:	9b01      	ldr	r3, [sp, #4]
  4058e8:	18f4      	adds	r4, r6, r3
  4058ea:	4622      	mov	r2, r4
  4058ec:	4616      	mov	r6, r2
  4058ee:	3201      	adds	r2, #1
  4058f0:	7830      	ldrb	r0, [r6, #0]
  4058f2:	f7ff ff8f 	bl	405814 <__hexdig_fun>
  4058f6:	2800      	cmp	r0, #0
  4058f8:	d1f8      	bne.n	4058ec <__gethex+0xae>
  4058fa:	b134      	cbz	r4, 40590a <__gethex+0xcc>
  4058fc:	1ba4      	subs	r4, r4, r6
  4058fe:	00a4      	lsls	r4, r4, #2
  405900:	e003      	b.n	40590a <__gethex+0xcc>
  405902:	463e      	mov	r6, r7
  405904:	e000      	b.n	405908 <__gethex+0xca>
  405906:	4604      	mov	r4, r0
  405908:	2501      	movs	r5, #1
  40590a:	7833      	ldrb	r3, [r6, #0]
  40590c:	2b50      	cmp	r3, #80	; 0x50
  40590e:	d001      	beq.n	405914 <__gethex+0xd6>
  405910:	2b70      	cmp	r3, #112	; 0x70
  405912:	d12a      	bne.n	40596a <__gethex+0x12c>
  405914:	7873      	ldrb	r3, [r6, #1]
  405916:	2b2b      	cmp	r3, #43	; 0x2b
  405918:	d008      	beq.n	40592c <__gethex+0xee>
  40591a:	2b2d      	cmp	r3, #45	; 0x2d
  40591c:	d003      	beq.n	405926 <__gethex+0xe8>
  40591e:	1c71      	adds	r1, r6, #1
  405920:	f04f 0900 	mov.w	r9, #0
  405924:	e005      	b.n	405932 <__gethex+0xf4>
  405926:	f04f 0901 	mov.w	r9, #1
  40592a:	e001      	b.n	405930 <__gethex+0xf2>
  40592c:	f04f 0900 	mov.w	r9, #0
  405930:	1cb1      	adds	r1, r6, #2
  405932:	7808      	ldrb	r0, [r1, #0]
  405934:	f7ff ff6e 	bl	405814 <__hexdig_fun>
  405938:	1e43      	subs	r3, r0, #1
  40593a:	b2db      	uxtb	r3, r3
  40593c:	2b18      	cmp	r3, #24
  40593e:	d814      	bhi.n	40596a <__gethex+0x12c>
  405940:	f1a0 0210 	sub.w	r2, r0, #16
  405944:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  405948:	f7ff ff64 	bl	405814 <__hexdig_fun>
  40594c:	1e43      	subs	r3, r0, #1
  40594e:	b2db      	uxtb	r3, r3
  405950:	2b18      	cmp	r3, #24
  405952:	d804      	bhi.n	40595e <__gethex+0x120>
  405954:	230a      	movs	r3, #10
  405956:	fb03 0202 	mla	r2, r3, r2, r0
  40595a:	3a10      	subs	r2, #16
  40595c:	e7f2      	b.n	405944 <__gethex+0x106>
  40595e:	f1b9 0f00 	cmp.w	r9, #0
  405962:	d000      	beq.n	405966 <__gethex+0x128>
  405964:	4252      	negs	r2, r2
  405966:	4414      	add	r4, r2
  405968:	e000      	b.n	40596c <__gethex+0x12e>
  40596a:	4631      	mov	r1, r6
  40596c:	f8ca 1000 	str.w	r1, [sl]
  405970:	b12d      	cbz	r5, 40597e <__gethex+0x140>
  405972:	f1bb 0f00 	cmp.w	fp, #0
  405976:	bf14      	ite	ne
  405978:	2000      	movne	r0, #0
  40597a:	2006      	moveq	r0, #6
  40597c:	e17c      	b.n	405c78 <__gethex+0x43a>
  40597e:	1bf3      	subs	r3, r6, r7
  405980:	3b01      	subs	r3, #1
  405982:	4629      	mov	r1, r5
  405984:	2b07      	cmp	r3, #7
  405986:	dd02      	ble.n	40598e <__gethex+0x150>
  405988:	3101      	adds	r1, #1
  40598a:	105b      	asrs	r3, r3, #1
  40598c:	e7fa      	b.n	405984 <__gethex+0x146>
  40598e:	9802      	ldr	r0, [sp, #8]
  405990:	f000 fb06 	bl	405fa0 <_Balloc>
  405994:	9b01      	ldr	r3, [sp, #4]
  405996:	f100 0a14 	add.w	sl, r0, #20
  40599a:	f04f 0900 	mov.w	r9, #0
  40599e:	f1c3 0301 	rsb	r3, r3, #1
  4059a2:	4605      	mov	r5, r0
  4059a4:	f8cd a010 	str.w	sl, [sp, #16]
  4059a8:	46cb      	mov	fp, r9
  4059aa:	9308      	str	r3, [sp, #32]
  4059ac:	42b7      	cmp	r7, r6
  4059ae:	d22f      	bcs.n	405a10 <__gethex+0x1d2>
  4059b0:	1e73      	subs	r3, r6, #1
  4059b2:	9305      	str	r3, [sp, #20]
  4059b4:	9a07      	ldr	r2, [sp, #28]
  4059b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4059ba:	4293      	cmp	r3, r2
  4059bc:	d00b      	beq.n	4059d6 <__gethex+0x198>
  4059be:	f1bb 0f20 	cmp.w	fp, #32
  4059c2:	d116      	bne.n	4059f2 <__gethex+0x1b4>
  4059c4:	9b04      	ldr	r3, [sp, #16]
  4059c6:	f8c3 9000 	str.w	r9, [r3]
  4059ca:	3304      	adds	r3, #4
  4059cc:	f04f 0900 	mov.w	r9, #0
  4059d0:	9304      	str	r3, [sp, #16]
  4059d2:	46cb      	mov	fp, r9
  4059d4:	e00d      	b.n	4059f2 <__gethex+0x1b4>
  4059d6:	9b05      	ldr	r3, [sp, #20]
  4059d8:	9a08      	ldr	r2, [sp, #32]
  4059da:	4413      	add	r3, r2
  4059dc:	429f      	cmp	r7, r3
  4059de:	d8ee      	bhi.n	4059be <__gethex+0x180>
  4059e0:	4618      	mov	r0, r3
  4059e2:	9a01      	ldr	r2, [sp, #4]
  4059e4:	9903      	ldr	r1, [sp, #12]
  4059e6:	9309      	str	r3, [sp, #36]	; 0x24
  4059e8:	f001 f915 	bl	406c16 <strncmp>
  4059ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4059ee:	b168      	cbz	r0, 405a0c <__gethex+0x1ce>
  4059f0:	e7e5      	b.n	4059be <__gethex+0x180>
  4059f2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
  4059f6:	f7ff ff0d 	bl	405814 <__hexdig_fun>
  4059fa:	f000 000f 	and.w	r0, r0, #15
  4059fe:	fa00 f00b 	lsl.w	r0, r0, fp
  405a02:	9b05      	ldr	r3, [sp, #20]
  405a04:	ea49 0900 	orr.w	r9, r9, r0
  405a08:	f10b 0b04 	add.w	fp, fp, #4
  405a0c:	461e      	mov	r6, r3
  405a0e:	e7cd      	b.n	4059ac <__gethex+0x16e>
  405a10:	9804      	ldr	r0, [sp, #16]
  405a12:	f840 9b04 	str.w	r9, [r0], #4
  405a16:	ebca 0000 	rsb	r0, sl, r0
  405a1a:	1080      	asrs	r0, r0, #2
  405a1c:	6128      	str	r0, [r5, #16]
  405a1e:	0147      	lsls	r7, r0, #5
  405a20:	4648      	mov	r0, r9
  405a22:	f000 fb82 	bl	40612a <__hi0bits>
  405a26:	f8d8 6000 	ldr.w	r6, [r8]
  405a2a:	1a38      	subs	r0, r7, r0
  405a2c:	42b0      	cmp	r0, r6
  405a2e:	dd26      	ble.n	405a7e <__gethex+0x240>
  405a30:	1b87      	subs	r7, r0, r6
  405a32:	4639      	mov	r1, r7
  405a34:	4628      	mov	r0, r5
  405a36:	f000 fe7b 	bl	406730 <__any_on>
  405a3a:	b1c8      	cbz	r0, 405a70 <__gethex+0x232>
  405a3c:	1e7b      	subs	r3, r7, #1
  405a3e:	1159      	asrs	r1, r3, #5
  405a40:	f003 021f 	and.w	r2, r3, #31
  405a44:	f04f 0901 	mov.w	r9, #1
  405a48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
  405a4c:	fa09 f202 	lsl.w	r2, r9, r2
  405a50:	420a      	tst	r2, r1
  405a52:	d00e      	beq.n	405a72 <__gethex+0x234>
  405a54:	454b      	cmp	r3, r9
  405a56:	dc02      	bgt.n	405a5e <__gethex+0x220>
  405a58:	f04f 0902 	mov.w	r9, #2
  405a5c:	e009      	b.n	405a72 <__gethex+0x234>
  405a5e:	1eb9      	subs	r1, r7, #2
  405a60:	4628      	mov	r0, r5
  405a62:	f000 fe65 	bl	406730 <__any_on>
  405a66:	2800      	cmp	r0, #0
  405a68:	d0f6      	beq.n	405a58 <__gethex+0x21a>
  405a6a:	f04f 0903 	mov.w	r9, #3
  405a6e:	e000      	b.n	405a72 <__gethex+0x234>
  405a70:	4681      	mov	r9, r0
  405a72:	4639      	mov	r1, r7
  405a74:	4628      	mov	r0, r5
  405a76:	f7ff fe97 	bl	4057a8 <rshift>
  405a7a:	443c      	add	r4, r7
  405a7c:	e00c      	b.n	405a98 <__gethex+0x25a>
  405a7e:	da09      	bge.n	405a94 <__gethex+0x256>
  405a80:	1a37      	subs	r7, r6, r0
  405a82:	4629      	mov	r1, r5
  405a84:	463a      	mov	r2, r7
  405a86:	9802      	ldr	r0, [sp, #8]
  405a88:	f000 fc84 	bl	406394 <__lshift>
  405a8c:	1be4      	subs	r4, r4, r7
  405a8e:	4605      	mov	r5, r0
  405a90:	f100 0a14 	add.w	sl, r0, #20
  405a94:	f04f 0900 	mov.w	r9, #0
  405a98:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405a9c:	429c      	cmp	r4, r3
  405a9e:	dd08      	ble.n	405ab2 <__gethex+0x274>
  405aa0:	9802      	ldr	r0, [sp, #8]
  405aa2:	4629      	mov	r1, r5
  405aa4:	f000 fab1 	bl	40600a <_Bfree>
  405aa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405aaa:	2300      	movs	r3, #0
  405aac:	6013      	str	r3, [r2, #0]
  405aae:	20a3      	movs	r0, #163	; 0xa3
  405ab0:	e0e2      	b.n	405c78 <__gethex+0x43a>
  405ab2:	f8d8 0004 	ldr.w	r0, [r8, #4]
  405ab6:	4284      	cmp	r4, r0
  405ab8:	da53      	bge.n	405b62 <__gethex+0x324>
  405aba:	1b04      	subs	r4, r0, r4
  405abc:	42a6      	cmp	r6, r4
  405abe:	dc2e      	bgt.n	405b1e <__gethex+0x2e0>
  405ac0:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405ac4:	2b02      	cmp	r3, #2
  405ac6:	d01a      	beq.n	405afe <__gethex+0x2c0>
  405ac8:	2b03      	cmp	r3, #3
  405aca:	d01c      	beq.n	405b06 <__gethex+0x2c8>
  405acc:	2b01      	cmp	r3, #1
  405ace:	d11d      	bne.n	405b0c <__gethex+0x2ce>
  405ad0:	42a6      	cmp	r6, r4
  405ad2:	d11b      	bne.n	405b0c <__gethex+0x2ce>
  405ad4:	2e01      	cmp	r6, #1
  405ad6:	dc0b      	bgt.n	405af0 <__gethex+0x2b2>
  405ad8:	9a06      	ldr	r2, [sp, #24]
  405ada:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405ade:	6013      	str	r3, [r2, #0]
  405ae0:	2301      	movs	r3, #1
  405ae2:	612b      	str	r3, [r5, #16]
  405ae4:	f8ca 3000 	str.w	r3, [sl]
  405ae8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405aea:	2062      	movs	r0, #98	; 0x62
  405aec:	601d      	str	r5, [r3, #0]
  405aee:	e0c3      	b.n	405c78 <__gethex+0x43a>
  405af0:	1e71      	subs	r1, r6, #1
  405af2:	4628      	mov	r0, r5
  405af4:	f000 fe1c 	bl	406730 <__any_on>
  405af8:	2800      	cmp	r0, #0
  405afa:	d1ed      	bne.n	405ad8 <__gethex+0x29a>
  405afc:	e006      	b.n	405b0c <__gethex+0x2ce>
  405afe:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b00:	2b00      	cmp	r3, #0
  405b02:	d0e9      	beq.n	405ad8 <__gethex+0x29a>
  405b04:	e002      	b.n	405b0c <__gethex+0x2ce>
  405b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b08:	2b00      	cmp	r3, #0
  405b0a:	d1e5      	bne.n	405ad8 <__gethex+0x29a>
  405b0c:	9802      	ldr	r0, [sp, #8]
  405b0e:	4629      	mov	r1, r5
  405b10:	f000 fa7b 	bl	40600a <_Bfree>
  405b14:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405b16:	2300      	movs	r3, #0
  405b18:	6013      	str	r3, [r2, #0]
  405b1a:	2050      	movs	r0, #80	; 0x50
  405b1c:	e0ac      	b.n	405c78 <__gethex+0x43a>
  405b1e:	1e67      	subs	r7, r4, #1
  405b20:	f1b9 0f00 	cmp.w	r9, #0
  405b24:	d106      	bne.n	405b34 <__gethex+0x2f6>
  405b26:	b13f      	cbz	r7, 405b38 <__gethex+0x2fa>
  405b28:	4639      	mov	r1, r7
  405b2a:	4628      	mov	r0, r5
  405b2c:	f000 fe00 	bl	406730 <__any_on>
  405b30:	4681      	mov	r9, r0
  405b32:	e001      	b.n	405b38 <__gethex+0x2fa>
  405b34:	f04f 0901 	mov.w	r9, #1
  405b38:	117a      	asrs	r2, r7, #5
  405b3a:	2301      	movs	r3, #1
  405b3c:	f007 071f 	and.w	r7, r7, #31
  405b40:	fa03 f707 	lsl.w	r7, r3, r7
  405b44:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  405b48:	4621      	mov	r1, r4
  405b4a:	421f      	tst	r7, r3
  405b4c:	4628      	mov	r0, r5
  405b4e:	bf18      	it	ne
  405b50:	f049 0902 	orrne.w	r9, r9, #2
  405b54:	1b36      	subs	r6, r6, r4
  405b56:	f7ff fe27 	bl	4057a8 <rshift>
  405b5a:	2702      	movs	r7, #2
  405b5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
  405b60:	e000      	b.n	405b64 <__gethex+0x326>
  405b62:	2701      	movs	r7, #1
  405b64:	f1b9 0f00 	cmp.w	r9, #0
  405b68:	f000 8081 	beq.w	405c6e <__gethex+0x430>
  405b6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  405b70:	2b02      	cmp	r3, #2
  405b72:	d00e      	beq.n	405b92 <__gethex+0x354>
  405b74:	2b03      	cmp	r3, #3
  405b76:	d010      	beq.n	405b9a <__gethex+0x35c>
  405b78:	2b01      	cmp	r3, #1
  405b7a:	d176      	bne.n	405c6a <__gethex+0x42c>
  405b7c:	f019 0f02 	tst.w	r9, #2
  405b80:	d073      	beq.n	405c6a <__gethex+0x42c>
  405b82:	f8da 0000 	ldr.w	r0, [sl]
  405b86:	ea49 0900 	orr.w	r9, r9, r0
  405b8a:	f019 0f01 	tst.w	r9, #1
  405b8e:	d107      	bne.n	405ba0 <__gethex+0x362>
  405b90:	e06b      	b.n	405c6a <__gethex+0x42c>
  405b92:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b94:	f1c3 0301 	rsb	r3, r3, #1
  405b98:	9315      	str	r3, [sp, #84]	; 0x54
  405b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405b9c:	2b00      	cmp	r3, #0
  405b9e:	d064      	beq.n	405c6a <__gethex+0x42c>
  405ba0:	f8d5 a010 	ldr.w	sl, [r5, #16]
  405ba4:	f105 0314 	add.w	r3, r5, #20
  405ba8:	ea4f 098a 	mov.w	r9, sl, lsl #2
  405bac:	eb03 0109 	add.w	r1, r3, r9
  405bb0:	2000      	movs	r0, #0
  405bb2:	681a      	ldr	r2, [r3, #0]
  405bb4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  405bb8:	d002      	beq.n	405bc0 <__gethex+0x382>
  405bba:	3201      	adds	r2, #1
  405bbc:	601a      	str	r2, [r3, #0]
  405bbe:	e020      	b.n	405c02 <__gethex+0x3c4>
  405bc0:	f843 0b04 	str.w	r0, [r3], #4
  405bc4:	4299      	cmp	r1, r3
  405bc6:	d8f4      	bhi.n	405bb2 <__gethex+0x374>
  405bc8:	68ab      	ldr	r3, [r5, #8]
  405bca:	459a      	cmp	sl, r3
  405bcc:	db12      	blt.n	405bf4 <__gethex+0x3b6>
  405bce:	6869      	ldr	r1, [r5, #4]
  405bd0:	9802      	ldr	r0, [sp, #8]
  405bd2:	3101      	adds	r1, #1
  405bd4:	f000 f9e4 	bl	405fa0 <_Balloc>
  405bd8:	692a      	ldr	r2, [r5, #16]
  405bda:	3202      	adds	r2, #2
  405bdc:	f105 010c 	add.w	r1, r5, #12
  405be0:	4683      	mov	fp, r0
  405be2:	0092      	lsls	r2, r2, #2
  405be4:	300c      	adds	r0, #12
  405be6:	f7fd f8b7 	bl	402d58 <memcpy>
  405bea:	4629      	mov	r1, r5
  405bec:	9802      	ldr	r0, [sp, #8]
  405bee:	f000 fa0c 	bl	40600a <_Bfree>
  405bf2:	465d      	mov	r5, fp
  405bf4:	692b      	ldr	r3, [r5, #16]
  405bf6:	1c5a      	adds	r2, r3, #1
  405bf8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  405bfc:	612a      	str	r2, [r5, #16]
  405bfe:	2201      	movs	r2, #1
  405c00:	615a      	str	r2, [r3, #20]
  405c02:	2f02      	cmp	r7, #2
  405c04:	f105 0214 	add.w	r2, r5, #20
  405c08:	d111      	bne.n	405c2e <__gethex+0x3f0>
  405c0a:	f8d8 3000 	ldr.w	r3, [r8]
  405c0e:	3b01      	subs	r3, #1
  405c10:	429e      	cmp	r6, r3
  405c12:	d127      	bne.n	405c64 <__gethex+0x426>
  405c14:	1171      	asrs	r1, r6, #5
  405c16:	2301      	movs	r3, #1
  405c18:	f006 061f 	and.w	r6, r6, #31
  405c1c:	fa03 f606 	lsl.w	r6, r3, r6
  405c20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  405c24:	421e      	tst	r6, r3
  405c26:	bf0c      	ite	eq
  405c28:	2702      	moveq	r7, #2
  405c2a:	2701      	movne	r7, #1
  405c2c:	e01a      	b.n	405c64 <__gethex+0x426>
  405c2e:	692b      	ldr	r3, [r5, #16]
  405c30:	459a      	cmp	sl, r3
  405c32:	da0a      	bge.n	405c4a <__gethex+0x40c>
  405c34:	2101      	movs	r1, #1
  405c36:	4628      	mov	r0, r5
  405c38:	f7ff fdb6 	bl	4057a8 <rshift>
  405c3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405c40:	3401      	adds	r4, #1
  405c42:	429c      	cmp	r4, r3
  405c44:	f73f af2c 	bgt.w	405aa0 <__gethex+0x262>
  405c48:	e00b      	b.n	405c62 <__gethex+0x424>
  405c4a:	f016 061f 	ands.w	r6, r6, #31
  405c4e:	d008      	beq.n	405c62 <__gethex+0x424>
  405c50:	4491      	add	r9, r2
  405c52:	f1c6 0620 	rsb	r6, r6, #32
  405c56:	f859 0c04 	ldr.w	r0, [r9, #-4]
  405c5a:	f000 fa66 	bl	40612a <__hi0bits>
  405c5e:	42b0      	cmp	r0, r6
  405c60:	dbe8      	blt.n	405c34 <__gethex+0x3f6>
  405c62:	2701      	movs	r7, #1
  405c64:	f047 0720 	orr.w	r7, r7, #32
  405c68:	e001      	b.n	405c6e <__gethex+0x430>
  405c6a:	f047 0710 	orr.w	r7, r7, #16
  405c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405c70:	601d      	str	r5, [r3, #0]
  405c72:	9b06      	ldr	r3, [sp, #24]
  405c74:	4638      	mov	r0, r7
  405c76:	601c      	str	r4, [r3, #0]
  405c78:	b00b      	add	sp, #44	; 0x2c
  405c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405c7e <L_shift>:
  405c7e:	f1c2 0208 	rsb	r2, r2, #8
  405c82:	0092      	lsls	r2, r2, #2
  405c84:	b570      	push	{r4, r5, r6, lr}
  405c86:	f1c2 0620 	rsb	r6, r2, #32
  405c8a:	6843      	ldr	r3, [r0, #4]
  405c8c:	6805      	ldr	r5, [r0, #0]
  405c8e:	fa03 f406 	lsl.w	r4, r3, r6
  405c92:	432c      	orrs	r4, r5
  405c94:	40d3      	lsrs	r3, r2
  405c96:	6004      	str	r4, [r0, #0]
  405c98:	f840 3f04 	str.w	r3, [r0, #4]!
  405c9c:	4288      	cmp	r0, r1
  405c9e:	d3f4      	bcc.n	405c8a <L_shift+0xc>
  405ca0:	bd70      	pop	{r4, r5, r6, pc}

00405ca2 <__match>:
  405ca2:	b530      	push	{r4, r5, lr}
  405ca4:	6803      	ldr	r3, [r0, #0]
  405ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
  405caa:	3301      	adds	r3, #1
  405cac:	b14c      	cbz	r4, 405cc2 <__match+0x20>
  405cae:	781a      	ldrb	r2, [r3, #0]
  405cb0:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
  405cb4:	2d19      	cmp	r5, #25
  405cb6:	bf98      	it	ls
  405cb8:	3220      	addls	r2, #32
  405cba:	42a2      	cmp	r2, r4
  405cbc:	d0f3      	beq.n	405ca6 <__match+0x4>
  405cbe:	2000      	movs	r0, #0
  405cc0:	bd30      	pop	{r4, r5, pc}
  405cc2:	6003      	str	r3, [r0, #0]
  405cc4:	2001      	movs	r0, #1
  405cc6:	bd30      	pop	{r4, r5, pc}

00405cc8 <__hexnan>:
  405cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ccc:	680b      	ldr	r3, [r1, #0]
  405cce:	f8d0 b000 	ldr.w	fp, [r0]
  405cd2:	115e      	asrs	r6, r3, #5
  405cd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  405cd8:	f013 031f 	ands.w	r3, r3, #31
  405cdc:	b085      	sub	sp, #20
  405cde:	bf18      	it	ne
  405ce0:	3604      	addne	r6, #4
  405ce2:	1f35      	subs	r5, r6, #4
  405ce4:	4617      	mov	r7, r2
  405ce6:	2200      	movs	r2, #0
  405ce8:	4682      	mov	sl, r0
  405cea:	9301      	str	r3, [sp, #4]
  405cec:	f846 2c04 	str.w	r2, [r6, #-4]
  405cf0:	46a8      	mov	r8, r5
  405cf2:	462c      	mov	r4, r5
  405cf4:	9200      	str	r2, [sp, #0]
  405cf6:	4691      	mov	r9, r2
  405cf8:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
  405cfc:	2900      	cmp	r1, #0
  405cfe:	d03c      	beq.n	405d7a <__hexnan+0xb2>
  405d00:	4608      	mov	r0, r1
  405d02:	9203      	str	r2, [sp, #12]
  405d04:	9102      	str	r1, [sp, #8]
  405d06:	f7ff fd85 	bl	405814 <__hexdig_fun>
  405d0a:	9a03      	ldr	r2, [sp, #12]
  405d0c:	bb00      	cbnz	r0, 405d50 <__hexnan+0x88>
  405d0e:	9902      	ldr	r1, [sp, #8]
  405d10:	2920      	cmp	r1, #32
  405d12:	d816      	bhi.n	405d42 <__hexnan+0x7a>
  405d14:	9b00      	ldr	r3, [sp, #0]
  405d16:	4599      	cmp	r9, r3
  405d18:	ddee      	ble.n	405cf8 <__hexnan+0x30>
  405d1a:	4544      	cmp	r4, r8
  405d1c:	d205      	bcs.n	405d2a <__hexnan+0x62>
  405d1e:	2a07      	cmp	r2, #7
  405d20:	dc03      	bgt.n	405d2a <__hexnan+0x62>
  405d22:	4641      	mov	r1, r8
  405d24:	4620      	mov	r0, r4
  405d26:	f7ff ffaa 	bl	405c7e <L_shift>
  405d2a:	42bc      	cmp	r4, r7
  405d2c:	d923      	bls.n	405d76 <__hexnan+0xae>
  405d2e:	2300      	movs	r3, #0
  405d30:	f1a4 0804 	sub.w	r8, r4, #4
  405d34:	f844 3c04 	str.w	r3, [r4, #-4]
  405d38:	f8cd 9000 	str.w	r9, [sp]
  405d3c:	4644      	mov	r4, r8
  405d3e:	461a      	mov	r2, r3
  405d40:	e7da      	b.n	405cf8 <__hexnan+0x30>
  405d42:	2929      	cmp	r1, #41	; 0x29
  405d44:	d148      	bne.n	405dd8 <__hexnan+0x110>
  405d46:	f10b 0301 	add.w	r3, fp, #1
  405d4a:	f8ca 3000 	str.w	r3, [sl]
  405d4e:	e014      	b.n	405d7a <__hexnan+0xb2>
  405d50:	3201      	adds	r2, #1
  405d52:	2a08      	cmp	r2, #8
  405d54:	f109 0901 	add.w	r9, r9, #1
  405d58:	dd06      	ble.n	405d68 <__hexnan+0xa0>
  405d5a:	42bc      	cmp	r4, r7
  405d5c:	d9cc      	bls.n	405cf8 <__hexnan+0x30>
  405d5e:	2300      	movs	r3, #0
  405d60:	f844 3c04 	str.w	r3, [r4, #-4]
  405d64:	2201      	movs	r2, #1
  405d66:	3c04      	subs	r4, #4
  405d68:	6821      	ldr	r1, [r4, #0]
  405d6a:	f000 000f 	and.w	r0, r0, #15
  405d6e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
  405d72:	6020      	str	r0, [r4, #0]
  405d74:	e7c0      	b.n	405cf8 <__hexnan+0x30>
  405d76:	2208      	movs	r2, #8
  405d78:	e7be      	b.n	405cf8 <__hexnan+0x30>
  405d7a:	f1b9 0f00 	cmp.w	r9, #0
  405d7e:	d02b      	beq.n	405dd8 <__hexnan+0x110>
  405d80:	4544      	cmp	r4, r8
  405d82:	d205      	bcs.n	405d90 <__hexnan+0xc8>
  405d84:	2a07      	cmp	r2, #7
  405d86:	dc03      	bgt.n	405d90 <__hexnan+0xc8>
  405d88:	4641      	mov	r1, r8
  405d8a:	4620      	mov	r0, r4
  405d8c:	f7ff ff77 	bl	405c7e <L_shift>
  405d90:	42bc      	cmp	r4, r7
  405d92:	d90c      	bls.n	405dae <__hexnan+0xe6>
  405d94:	463b      	mov	r3, r7
  405d96:	f854 2b04 	ldr.w	r2, [r4], #4
  405d9a:	f843 2b04 	str.w	r2, [r3], #4
  405d9e:	42a5      	cmp	r5, r4
  405da0:	d2f9      	bcs.n	405d96 <__hexnan+0xce>
  405da2:	2200      	movs	r2, #0
  405da4:	f843 2b04 	str.w	r2, [r3], #4
  405da8:	429d      	cmp	r5, r3
  405daa:	d2fb      	bcs.n	405da4 <__hexnan+0xdc>
  405dac:	e00b      	b.n	405dc6 <__hexnan+0xfe>
  405dae:	9b01      	ldr	r3, [sp, #4]
  405db0:	b14b      	cbz	r3, 405dc6 <__hexnan+0xfe>
  405db2:	f1c3 0220 	rsb	r2, r3, #32
  405db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  405dba:	40d3      	lsrs	r3, r2
  405dbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
  405dc0:	4013      	ands	r3, r2
  405dc2:	f846 3c04 	str.w	r3, [r6, #-4]
  405dc6:	682b      	ldr	r3, [r5, #0]
  405dc8:	b943      	cbnz	r3, 405ddc <__hexnan+0x114>
  405dca:	42bd      	cmp	r5, r7
  405dcc:	d102      	bne.n	405dd4 <__hexnan+0x10c>
  405dce:	2301      	movs	r3, #1
  405dd0:	602b      	str	r3, [r5, #0]
  405dd2:	e003      	b.n	405ddc <__hexnan+0x114>
  405dd4:	3d04      	subs	r5, #4
  405dd6:	e7f6      	b.n	405dc6 <__hexnan+0xfe>
  405dd8:	2004      	movs	r0, #4
  405dda:	e000      	b.n	405dde <__hexnan+0x116>
  405ddc:	2005      	movs	r0, #5
  405dde:	b005      	add	sp, #20
  405de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405de4 <__locale_ctype_ptr_l>:
  405de4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  405de8:	4770      	bx	lr

00405dea <__localeconv_l>:
  405dea:	30f0      	adds	r0, #240	; 0xf0
  405dec:	4770      	bx	lr
	...

00405df0 <_localeconv_r>:
  405df0:	4b04      	ldr	r3, [pc, #16]	; (405e04 <_localeconv_r+0x14>)
  405df2:	681b      	ldr	r3, [r3, #0]
  405df4:	6a18      	ldr	r0, [r3, #32]
  405df6:	4b04      	ldr	r3, [pc, #16]	; (405e08 <_localeconv_r+0x18>)
  405df8:	2800      	cmp	r0, #0
  405dfa:	bf08      	it	eq
  405dfc:	4618      	moveq	r0, r3
  405dfe:	30f0      	adds	r0, #240	; 0xf0
  405e00:	4770      	bx	lr
  405e02:	bf00      	nop
  405e04:	20000078 	.word	0x20000078
  405e08:	2000007c 	.word	0x2000007c

00405e0c <__swhatbuf_r>:
  405e0c:	b570      	push	{r4, r5, r6, lr}
  405e0e:	460e      	mov	r6, r1
  405e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405e14:	2900      	cmp	r1, #0
  405e16:	b090      	sub	sp, #64	; 0x40
  405e18:	4614      	mov	r4, r2
  405e1a:	461d      	mov	r5, r3
  405e1c:	da06      	bge.n	405e2c <__swhatbuf_r+0x20>
  405e1e:	2300      	movs	r3, #0
  405e20:	602b      	str	r3, [r5, #0]
  405e22:	89b3      	ldrh	r3, [r6, #12]
  405e24:	061a      	lsls	r2, r3, #24
  405e26:	d50e      	bpl.n	405e46 <__swhatbuf_r+0x3a>
  405e28:	2340      	movs	r3, #64	; 0x40
  405e2a:	e00e      	b.n	405e4a <__swhatbuf_r+0x3e>
  405e2c:	aa01      	add	r2, sp, #4
  405e2e:	f000 ff37 	bl	406ca0 <_fstat_r>
  405e32:	2800      	cmp	r0, #0
  405e34:	dbf3      	blt.n	405e1e <__swhatbuf_r+0x12>
  405e36:	9a02      	ldr	r2, [sp, #8]
  405e38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405e3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  405e40:	425a      	negs	r2, r3
  405e42:	415a      	adcs	r2, r3
  405e44:	602a      	str	r2, [r5, #0]
  405e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405e4a:	2000      	movs	r0, #0
  405e4c:	6023      	str	r3, [r4, #0]
  405e4e:	b010      	add	sp, #64	; 0x40
  405e50:	bd70      	pop	{r4, r5, r6, pc}
	...

00405e54 <__smakebuf_r>:
  405e54:	898b      	ldrh	r3, [r1, #12]
  405e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
  405e58:	079e      	lsls	r6, r3, #30
  405e5a:	4605      	mov	r5, r0
  405e5c:	460c      	mov	r4, r1
  405e5e:	d410      	bmi.n	405e82 <__smakebuf_r+0x2e>
  405e60:	ab01      	add	r3, sp, #4
  405e62:	466a      	mov	r2, sp
  405e64:	f7ff ffd2 	bl	405e0c <__swhatbuf_r>
  405e68:	9900      	ldr	r1, [sp, #0]
  405e6a:	4606      	mov	r6, r0
  405e6c:	4628      	mov	r0, r5
  405e6e:	f000 fcdd 	bl	40682c <_malloc_r>
  405e72:	b968      	cbnz	r0, 405e90 <__smakebuf_r+0x3c>
  405e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e78:	059a      	lsls	r2, r3, #22
  405e7a:	d422      	bmi.n	405ec2 <__smakebuf_r+0x6e>
  405e7c:	f043 0302 	orr.w	r3, r3, #2
  405e80:	81a3      	strh	r3, [r4, #12]
  405e82:	f104 0347 	add.w	r3, r4, #71	; 0x47
  405e86:	6023      	str	r3, [r4, #0]
  405e88:	6123      	str	r3, [r4, #16]
  405e8a:	2301      	movs	r3, #1
  405e8c:	6163      	str	r3, [r4, #20]
  405e8e:	e018      	b.n	405ec2 <__smakebuf_r+0x6e>
  405e90:	4b0d      	ldr	r3, [pc, #52]	; (405ec8 <__smakebuf_r+0x74>)
  405e92:	62ab      	str	r3, [r5, #40]	; 0x28
  405e94:	89a3      	ldrh	r3, [r4, #12]
  405e96:	6020      	str	r0, [r4, #0]
  405e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405e9c:	81a3      	strh	r3, [r4, #12]
  405e9e:	9b00      	ldr	r3, [sp, #0]
  405ea0:	6163      	str	r3, [r4, #20]
  405ea2:	9b01      	ldr	r3, [sp, #4]
  405ea4:	6120      	str	r0, [r4, #16]
  405ea6:	b14b      	cbz	r3, 405ebc <__smakebuf_r+0x68>
  405ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405eac:	4628      	mov	r0, r5
  405eae:	f000 ff09 	bl	406cc4 <_isatty_r>
  405eb2:	b118      	cbz	r0, 405ebc <__smakebuf_r+0x68>
  405eb4:	89a3      	ldrh	r3, [r4, #12]
  405eb6:	f043 0301 	orr.w	r3, r3, #1
  405eba:	81a3      	strh	r3, [r4, #12]
  405ebc:	89a0      	ldrh	r0, [r4, #12]
  405ebe:	4330      	orrs	r0, r6
  405ec0:	81a0      	strh	r0, [r4, #12]
  405ec2:	b002      	add	sp, #8
  405ec4:	bd70      	pop	{r4, r5, r6, pc}
  405ec6:	bf00      	nop
  405ec8:	00405615 	.word	0x00405615

00405ecc <malloc>:
  405ecc:	4b02      	ldr	r3, [pc, #8]	; (405ed8 <malloc+0xc>)
  405ece:	4601      	mov	r1, r0
  405ed0:	6818      	ldr	r0, [r3, #0]
  405ed2:	f000 bcab 	b.w	40682c <_malloc_r>
  405ed6:	bf00      	nop
  405ed8:	20000078 	.word	0x20000078

00405edc <__ascii_mbtowc>:
  405edc:	b082      	sub	sp, #8
  405ede:	b901      	cbnz	r1, 405ee2 <__ascii_mbtowc+0x6>
  405ee0:	a901      	add	r1, sp, #4
  405ee2:	b13a      	cbz	r2, 405ef4 <__ascii_mbtowc+0x18>
  405ee4:	b143      	cbz	r3, 405ef8 <__ascii_mbtowc+0x1c>
  405ee6:	7813      	ldrb	r3, [r2, #0]
  405ee8:	600b      	str	r3, [r1, #0]
  405eea:	7812      	ldrb	r2, [r2, #0]
  405eec:	1c10      	adds	r0, r2, #0
  405eee:	bf18      	it	ne
  405ef0:	2001      	movne	r0, #1
  405ef2:	e003      	b.n	405efc <__ascii_mbtowc+0x20>
  405ef4:	4610      	mov	r0, r2
  405ef6:	e001      	b.n	405efc <__ascii_mbtowc+0x20>
  405ef8:	f06f 0001 	mvn.w	r0, #1
  405efc:	b002      	add	sp, #8
  405efe:	4770      	bx	lr

00405f00 <memchr>:
  405f00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f04:	2a10      	cmp	r2, #16
  405f06:	db2b      	blt.n	405f60 <memchr+0x60>
  405f08:	f010 0f07 	tst.w	r0, #7
  405f0c:	d008      	beq.n	405f20 <memchr+0x20>
  405f0e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f12:	3a01      	subs	r2, #1
  405f14:	428b      	cmp	r3, r1
  405f16:	d02d      	beq.n	405f74 <memchr+0x74>
  405f18:	f010 0f07 	tst.w	r0, #7
  405f1c:	b342      	cbz	r2, 405f70 <memchr+0x70>
  405f1e:	d1f6      	bne.n	405f0e <memchr+0xe>
  405f20:	b4f0      	push	{r4, r5, r6, r7}
  405f22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405f26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405f2a:	f022 0407 	bic.w	r4, r2, #7
  405f2e:	f07f 0700 	mvns.w	r7, #0
  405f32:	2300      	movs	r3, #0
  405f34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405f38:	3c08      	subs	r4, #8
  405f3a:	ea85 0501 	eor.w	r5, r5, r1
  405f3e:	ea86 0601 	eor.w	r6, r6, r1
  405f42:	fa85 f547 	uadd8	r5, r5, r7
  405f46:	faa3 f587 	sel	r5, r3, r7
  405f4a:	fa86 f647 	uadd8	r6, r6, r7
  405f4e:	faa5 f687 	sel	r6, r5, r7
  405f52:	b98e      	cbnz	r6, 405f78 <memchr+0x78>
  405f54:	d1ee      	bne.n	405f34 <memchr+0x34>
  405f56:	bcf0      	pop	{r4, r5, r6, r7}
  405f58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f5c:	f002 0207 	and.w	r2, r2, #7
  405f60:	b132      	cbz	r2, 405f70 <memchr+0x70>
  405f62:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f66:	3a01      	subs	r2, #1
  405f68:	ea83 0301 	eor.w	r3, r3, r1
  405f6c:	b113      	cbz	r3, 405f74 <memchr+0x74>
  405f6e:	d1f8      	bne.n	405f62 <memchr+0x62>
  405f70:	2000      	movs	r0, #0
  405f72:	4770      	bx	lr
  405f74:	3801      	subs	r0, #1
  405f76:	4770      	bx	lr
  405f78:	2d00      	cmp	r5, #0
  405f7a:	bf06      	itte	eq
  405f7c:	4635      	moveq	r5, r6
  405f7e:	3803      	subeq	r0, #3
  405f80:	3807      	subne	r0, #7
  405f82:	f015 0f01 	tst.w	r5, #1
  405f86:	d107      	bne.n	405f98 <memchr+0x98>
  405f88:	3001      	adds	r0, #1
  405f8a:	f415 7f80 	tst.w	r5, #256	; 0x100
  405f8e:	bf02      	ittt	eq
  405f90:	3001      	addeq	r0, #1
  405f92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405f96:	3001      	addeq	r0, #1
  405f98:	bcf0      	pop	{r4, r5, r6, r7}
  405f9a:	3801      	subs	r0, #1
  405f9c:	4770      	bx	lr
  405f9e:	bf00      	nop

00405fa0 <_Balloc>:
  405fa0:	b570      	push	{r4, r5, r6, lr}
  405fa2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  405fa4:	4604      	mov	r4, r0
  405fa6:	460e      	mov	r6, r1
  405fa8:	b93d      	cbnz	r5, 405fba <_Balloc+0x1a>
  405faa:	2010      	movs	r0, #16
  405fac:	f7ff ff8e 	bl	405ecc <malloc>
  405fb0:	6260      	str	r0, [r4, #36]	; 0x24
  405fb2:	6045      	str	r5, [r0, #4]
  405fb4:	6085      	str	r5, [r0, #8]
  405fb6:	6005      	str	r5, [r0, #0]
  405fb8:	60c5      	str	r5, [r0, #12]
  405fba:	6a65      	ldr	r5, [r4, #36]	; 0x24
  405fbc:	68eb      	ldr	r3, [r5, #12]
  405fbe:	b143      	cbz	r3, 405fd2 <_Balloc+0x32>
  405fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405fc2:	68db      	ldr	r3, [r3, #12]
  405fc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  405fc8:	b178      	cbz	r0, 405fea <_Balloc+0x4a>
  405fca:	6802      	ldr	r2, [r0, #0]
  405fcc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  405fd0:	e017      	b.n	406002 <_Balloc+0x62>
  405fd2:	2221      	movs	r2, #33	; 0x21
  405fd4:	2104      	movs	r1, #4
  405fd6:	4620      	mov	r0, r4
  405fd8:	f000 fbcc 	bl	406774 <_calloc_r>
  405fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405fde:	60e8      	str	r0, [r5, #12]
  405fe0:	68db      	ldr	r3, [r3, #12]
  405fe2:	2b00      	cmp	r3, #0
  405fe4:	d1ec      	bne.n	405fc0 <_Balloc+0x20>
  405fe6:	2000      	movs	r0, #0
  405fe8:	bd70      	pop	{r4, r5, r6, pc}
  405fea:	2101      	movs	r1, #1
  405fec:	fa01 f506 	lsl.w	r5, r1, r6
  405ff0:	1d6a      	adds	r2, r5, #5
  405ff2:	0092      	lsls	r2, r2, #2
  405ff4:	4620      	mov	r0, r4
  405ff6:	f000 fbbd 	bl	406774 <_calloc_r>
  405ffa:	2800      	cmp	r0, #0
  405ffc:	d0f3      	beq.n	405fe6 <_Balloc+0x46>
  405ffe:	6046      	str	r6, [r0, #4]
  406000:	6085      	str	r5, [r0, #8]
  406002:	2300      	movs	r3, #0
  406004:	6103      	str	r3, [r0, #16]
  406006:	60c3      	str	r3, [r0, #12]
  406008:	bd70      	pop	{r4, r5, r6, pc}

0040600a <_Bfree>:
  40600a:	b570      	push	{r4, r5, r6, lr}
  40600c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  40600e:	4606      	mov	r6, r0
  406010:	460d      	mov	r5, r1
  406012:	b93c      	cbnz	r4, 406024 <_Bfree+0x1a>
  406014:	2010      	movs	r0, #16
  406016:	f7ff ff59 	bl	405ecc <malloc>
  40601a:	6270      	str	r0, [r6, #36]	; 0x24
  40601c:	6044      	str	r4, [r0, #4]
  40601e:	6084      	str	r4, [r0, #8]
  406020:	6004      	str	r4, [r0, #0]
  406022:	60c4      	str	r4, [r0, #12]
  406024:	b13d      	cbz	r5, 406036 <_Bfree+0x2c>
  406026:	6a73      	ldr	r3, [r6, #36]	; 0x24
  406028:	686a      	ldr	r2, [r5, #4]
  40602a:	68db      	ldr	r3, [r3, #12]
  40602c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406030:	6029      	str	r1, [r5, #0]
  406032:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406036:	bd70      	pop	{r4, r5, r6, pc}

00406038 <__multadd>:
  406038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40603c:	690d      	ldr	r5, [r1, #16]
  40603e:	461f      	mov	r7, r3
  406040:	4606      	mov	r6, r0
  406042:	460c      	mov	r4, r1
  406044:	f101 0e14 	add.w	lr, r1, #20
  406048:	2300      	movs	r3, #0
  40604a:	f8de 0000 	ldr.w	r0, [lr]
  40604e:	b281      	uxth	r1, r0
  406050:	fb02 7101 	mla	r1, r2, r1, r7
  406054:	0c0f      	lsrs	r7, r1, #16
  406056:	0c00      	lsrs	r0, r0, #16
  406058:	fb02 7000 	mla	r0, r2, r0, r7
  40605c:	b289      	uxth	r1, r1
  40605e:	3301      	adds	r3, #1
  406060:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  406064:	429d      	cmp	r5, r3
  406066:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40606a:	f84e 1b04 	str.w	r1, [lr], #4
  40606e:	dcec      	bgt.n	40604a <__multadd+0x12>
  406070:	b1d7      	cbz	r7, 4060a8 <__multadd+0x70>
  406072:	68a3      	ldr	r3, [r4, #8]
  406074:	429d      	cmp	r5, r3
  406076:	db12      	blt.n	40609e <__multadd+0x66>
  406078:	6861      	ldr	r1, [r4, #4]
  40607a:	4630      	mov	r0, r6
  40607c:	3101      	adds	r1, #1
  40607e:	f7ff ff8f 	bl	405fa0 <_Balloc>
  406082:	6922      	ldr	r2, [r4, #16]
  406084:	3202      	adds	r2, #2
  406086:	f104 010c 	add.w	r1, r4, #12
  40608a:	4680      	mov	r8, r0
  40608c:	0092      	lsls	r2, r2, #2
  40608e:	300c      	adds	r0, #12
  406090:	f7fc fe62 	bl	402d58 <memcpy>
  406094:	4621      	mov	r1, r4
  406096:	4630      	mov	r0, r6
  406098:	f7ff ffb7 	bl	40600a <_Bfree>
  40609c:	4644      	mov	r4, r8
  40609e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4060a2:	3501      	adds	r5, #1
  4060a4:	615f      	str	r7, [r3, #20]
  4060a6:	6125      	str	r5, [r4, #16]
  4060a8:	4620      	mov	r0, r4
  4060aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004060ae <__s2b>:
  4060ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4060b2:	460c      	mov	r4, r1
  4060b4:	4615      	mov	r5, r2
  4060b6:	461f      	mov	r7, r3
  4060b8:	2209      	movs	r2, #9
  4060ba:	3308      	adds	r3, #8
  4060bc:	4606      	mov	r6, r0
  4060be:	fb93 f3f2 	sdiv	r3, r3, r2
  4060c2:	2100      	movs	r1, #0
  4060c4:	2201      	movs	r2, #1
  4060c6:	429a      	cmp	r2, r3
  4060c8:	da02      	bge.n	4060d0 <__s2b+0x22>
  4060ca:	0052      	lsls	r2, r2, #1
  4060cc:	3101      	adds	r1, #1
  4060ce:	e7fa      	b.n	4060c6 <__s2b+0x18>
  4060d0:	4630      	mov	r0, r6
  4060d2:	f7ff ff65 	bl	405fa0 <_Balloc>
  4060d6:	9b08      	ldr	r3, [sp, #32]
  4060d8:	6143      	str	r3, [r0, #20]
  4060da:	2d09      	cmp	r5, #9
  4060dc:	f04f 0301 	mov.w	r3, #1
  4060e0:	6103      	str	r3, [r0, #16]
  4060e2:	dd11      	ble.n	406108 <__s2b+0x5a>
  4060e4:	f104 0809 	add.w	r8, r4, #9
  4060e8:	46c1      	mov	r9, r8
  4060ea:	442c      	add	r4, r5
  4060ec:	f819 3b01 	ldrb.w	r3, [r9], #1
  4060f0:	4601      	mov	r1, r0
  4060f2:	3b30      	subs	r3, #48	; 0x30
  4060f4:	220a      	movs	r2, #10
  4060f6:	4630      	mov	r0, r6
  4060f8:	f7ff ff9e 	bl	406038 <__multadd>
  4060fc:	45a1      	cmp	r9, r4
  4060fe:	d1f5      	bne.n	4060ec <__s2b+0x3e>
  406100:	eb08 0405 	add.w	r4, r8, r5
  406104:	3c08      	subs	r4, #8
  406106:	e001      	b.n	40610c <__s2b+0x5e>
  406108:	340a      	adds	r4, #10
  40610a:	2509      	movs	r5, #9
  40610c:	1b2d      	subs	r5, r5, r4
  40610e:	1963      	adds	r3, r4, r5
  406110:	429f      	cmp	r7, r3
  406112:	dd08      	ble.n	406126 <__s2b+0x78>
  406114:	f814 3b01 	ldrb.w	r3, [r4], #1
  406118:	4601      	mov	r1, r0
  40611a:	3b30      	subs	r3, #48	; 0x30
  40611c:	220a      	movs	r2, #10
  40611e:	4630      	mov	r0, r6
  406120:	f7ff ff8a 	bl	406038 <__multadd>
  406124:	e7f3      	b.n	40610e <__s2b+0x60>
  406126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040612a <__hi0bits>:
  40612a:	0c03      	lsrs	r3, r0, #16
  40612c:	041b      	lsls	r3, r3, #16
  40612e:	b913      	cbnz	r3, 406136 <__hi0bits+0xc>
  406130:	0400      	lsls	r0, r0, #16
  406132:	2310      	movs	r3, #16
  406134:	e000      	b.n	406138 <__hi0bits+0xe>
  406136:	2300      	movs	r3, #0
  406138:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40613c:	bf04      	itt	eq
  40613e:	0200      	lsleq	r0, r0, #8
  406140:	3308      	addeq	r3, #8
  406142:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  406146:	bf04      	itt	eq
  406148:	0100      	lsleq	r0, r0, #4
  40614a:	3304      	addeq	r3, #4
  40614c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  406150:	bf04      	itt	eq
  406152:	0080      	lsleq	r0, r0, #2
  406154:	3302      	addeq	r3, #2
  406156:	2800      	cmp	r0, #0
  406158:	db03      	blt.n	406162 <__hi0bits+0x38>
  40615a:	0042      	lsls	r2, r0, #1
  40615c:	d503      	bpl.n	406166 <__hi0bits+0x3c>
  40615e:	1c58      	adds	r0, r3, #1
  406160:	4770      	bx	lr
  406162:	4618      	mov	r0, r3
  406164:	4770      	bx	lr
  406166:	2020      	movs	r0, #32
  406168:	4770      	bx	lr

0040616a <__lo0bits>:
  40616a:	6803      	ldr	r3, [r0, #0]
  40616c:	f013 0207 	ands.w	r2, r3, #7
  406170:	d00b      	beq.n	40618a <__lo0bits+0x20>
  406172:	07d9      	lsls	r1, r3, #31
  406174:	d422      	bmi.n	4061bc <__lo0bits+0x52>
  406176:	079a      	lsls	r2, r3, #30
  406178:	bf4b      	itete	mi
  40617a:	085b      	lsrmi	r3, r3, #1
  40617c:	089b      	lsrpl	r3, r3, #2
  40617e:	6003      	strmi	r3, [r0, #0]
  406180:	6003      	strpl	r3, [r0, #0]
  406182:	bf4c      	ite	mi
  406184:	2001      	movmi	r0, #1
  406186:	2002      	movpl	r0, #2
  406188:	4770      	bx	lr
  40618a:	b299      	uxth	r1, r3
  40618c:	b909      	cbnz	r1, 406192 <__lo0bits+0x28>
  40618e:	0c1b      	lsrs	r3, r3, #16
  406190:	2210      	movs	r2, #16
  406192:	f013 0fff 	tst.w	r3, #255	; 0xff
  406196:	bf04      	itt	eq
  406198:	0a1b      	lsreq	r3, r3, #8
  40619a:	3208      	addeq	r2, #8
  40619c:	0719      	lsls	r1, r3, #28
  40619e:	bf04      	itt	eq
  4061a0:	091b      	lsreq	r3, r3, #4
  4061a2:	3204      	addeq	r2, #4
  4061a4:	0799      	lsls	r1, r3, #30
  4061a6:	bf04      	itt	eq
  4061a8:	089b      	lsreq	r3, r3, #2
  4061aa:	3202      	addeq	r2, #2
  4061ac:	07d9      	lsls	r1, r3, #31
  4061ae:	d402      	bmi.n	4061b6 <__lo0bits+0x4c>
  4061b0:	085b      	lsrs	r3, r3, #1
  4061b2:	d005      	beq.n	4061c0 <__lo0bits+0x56>
  4061b4:	3201      	adds	r2, #1
  4061b6:	6003      	str	r3, [r0, #0]
  4061b8:	4610      	mov	r0, r2
  4061ba:	4770      	bx	lr
  4061bc:	2000      	movs	r0, #0
  4061be:	4770      	bx	lr
  4061c0:	2020      	movs	r0, #32
  4061c2:	4770      	bx	lr

004061c4 <__i2b>:
  4061c4:	b510      	push	{r4, lr}
  4061c6:	460c      	mov	r4, r1
  4061c8:	2101      	movs	r1, #1
  4061ca:	f7ff fee9 	bl	405fa0 <_Balloc>
  4061ce:	2201      	movs	r2, #1
  4061d0:	6144      	str	r4, [r0, #20]
  4061d2:	6102      	str	r2, [r0, #16]
  4061d4:	bd10      	pop	{r4, pc}

004061d6 <__multiply>:
  4061d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061da:	4614      	mov	r4, r2
  4061dc:	690a      	ldr	r2, [r1, #16]
  4061de:	6923      	ldr	r3, [r4, #16]
  4061e0:	429a      	cmp	r2, r3
  4061e2:	bfb8      	it	lt
  4061e4:	460b      	movlt	r3, r1
  4061e6:	4688      	mov	r8, r1
  4061e8:	bfbc      	itt	lt
  4061ea:	46a0      	movlt	r8, r4
  4061ec:	461c      	movlt	r4, r3
  4061ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
  4061f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
  4061f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4061fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
  4061fe:	eb07 0609 	add.w	r6, r7, r9
  406202:	429e      	cmp	r6, r3
  406204:	bfc8      	it	gt
  406206:	3101      	addgt	r1, #1
  406208:	f7ff feca 	bl	405fa0 <_Balloc>
  40620c:	f100 0514 	add.w	r5, r0, #20
  406210:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  406214:	462b      	mov	r3, r5
  406216:	2200      	movs	r2, #0
  406218:	4563      	cmp	r3, ip
  40621a:	d202      	bcs.n	406222 <__multiply+0x4c>
  40621c:	f843 2b04 	str.w	r2, [r3], #4
  406220:	e7fa      	b.n	406218 <__multiply+0x42>
  406222:	f104 0214 	add.w	r2, r4, #20
  406226:	f108 0114 	add.w	r1, r8, #20
  40622a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  40622e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  406232:	9300      	str	r3, [sp, #0]
  406234:	9b00      	ldr	r3, [sp, #0]
  406236:	9201      	str	r2, [sp, #4]
  406238:	4293      	cmp	r3, r2
  40623a:	d957      	bls.n	4062ec <__multiply+0x116>
  40623c:	f8b2 b000 	ldrh.w	fp, [r2]
  406240:	f1bb 0f00 	cmp.w	fp, #0
  406244:	d023      	beq.n	40628e <__multiply+0xb8>
  406246:	4689      	mov	r9, r1
  406248:	46ae      	mov	lr, r5
  40624a:	f04f 0800 	mov.w	r8, #0
  40624e:	f859 4b04 	ldr.w	r4, [r9], #4
  406252:	f8be a000 	ldrh.w	sl, [lr]
  406256:	b2a3      	uxth	r3, r4
  406258:	fb0b a303 	mla	r3, fp, r3, sl
  40625c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  406260:	f8de 4000 	ldr.w	r4, [lr]
  406264:	4443      	add	r3, r8
  406266:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40626a:	fb0b 840a 	mla	r4, fp, sl, r8
  40626e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  406272:	46f2      	mov	sl, lr
  406274:	b29b      	uxth	r3, r3
  406276:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  40627a:	454f      	cmp	r7, r9
  40627c:	ea4f 4814 	mov.w	r8, r4, lsr #16
  406280:	f84a 3b04 	str.w	r3, [sl], #4
  406284:	d901      	bls.n	40628a <__multiply+0xb4>
  406286:	46d6      	mov	lr, sl
  406288:	e7e1      	b.n	40624e <__multiply+0x78>
  40628a:	f8ce 8004 	str.w	r8, [lr, #4]
  40628e:	9b01      	ldr	r3, [sp, #4]
  406290:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  406294:	3204      	adds	r2, #4
  406296:	f1ba 0f00 	cmp.w	sl, #0
  40629a:	d021      	beq.n	4062e0 <__multiply+0x10a>
  40629c:	682b      	ldr	r3, [r5, #0]
  40629e:	462c      	mov	r4, r5
  4062a0:	4689      	mov	r9, r1
  4062a2:	f04f 0800 	mov.w	r8, #0
  4062a6:	f8b9 e000 	ldrh.w	lr, [r9]
  4062aa:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  4062ae:	fb0a be0e 	mla	lr, sl, lr, fp
  4062b2:	44f0      	add	r8, lr
  4062b4:	46a3      	mov	fp, r4
  4062b6:	b29b      	uxth	r3, r3
  4062b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4062bc:	f84b 3b04 	str.w	r3, [fp], #4
  4062c0:	f859 3b04 	ldr.w	r3, [r9], #4
  4062c4:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  4062c8:	0c1b      	lsrs	r3, r3, #16
  4062ca:	fb0a e303 	mla	r3, sl, r3, lr
  4062ce:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  4062d2:	454f      	cmp	r7, r9
  4062d4:	ea4f 4813 	mov.w	r8, r3, lsr #16
  4062d8:	d901      	bls.n	4062de <__multiply+0x108>
  4062da:	465c      	mov	r4, fp
  4062dc:	e7e3      	b.n	4062a6 <__multiply+0xd0>
  4062de:	6063      	str	r3, [r4, #4]
  4062e0:	3504      	adds	r5, #4
  4062e2:	e7a7      	b.n	406234 <__multiply+0x5e>
  4062e4:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  4062e8:	b913      	cbnz	r3, 4062f0 <__multiply+0x11a>
  4062ea:	3e01      	subs	r6, #1
  4062ec:	2e00      	cmp	r6, #0
  4062ee:	dcf9      	bgt.n	4062e4 <__multiply+0x10e>
  4062f0:	6106      	str	r6, [r0, #16]
  4062f2:	b003      	add	sp, #12
  4062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004062f8 <__pow5mult>:
  4062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4062fc:	4615      	mov	r5, r2
  4062fe:	f012 0203 	ands.w	r2, r2, #3
  406302:	4606      	mov	r6, r0
  406304:	460f      	mov	r7, r1
  406306:	d007      	beq.n	406318 <__pow5mult+0x20>
  406308:	3a01      	subs	r2, #1
  40630a:	4c21      	ldr	r4, [pc, #132]	; (406390 <__pow5mult+0x98>)
  40630c:	2300      	movs	r3, #0
  40630e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  406312:	f7ff fe91 	bl	406038 <__multadd>
  406316:	4607      	mov	r7, r0
  406318:	10ad      	asrs	r5, r5, #2
  40631a:	d036      	beq.n	40638a <__pow5mult+0x92>
  40631c:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40631e:	b93c      	cbnz	r4, 406330 <__pow5mult+0x38>
  406320:	2010      	movs	r0, #16
  406322:	f7ff fdd3 	bl	405ecc <malloc>
  406326:	6270      	str	r0, [r6, #36]	; 0x24
  406328:	6044      	str	r4, [r0, #4]
  40632a:	6084      	str	r4, [r0, #8]
  40632c:	6004      	str	r4, [r0, #0]
  40632e:	60c4      	str	r4, [r0, #12]
  406330:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  406334:	f8d8 4008 	ldr.w	r4, [r8, #8]
  406338:	b94c      	cbnz	r4, 40634e <__pow5mult+0x56>
  40633a:	f240 2171 	movw	r1, #625	; 0x271
  40633e:	4630      	mov	r0, r6
  406340:	f7ff ff40 	bl	4061c4 <__i2b>
  406344:	2300      	movs	r3, #0
  406346:	f8c8 0008 	str.w	r0, [r8, #8]
  40634a:	4604      	mov	r4, r0
  40634c:	6003      	str	r3, [r0, #0]
  40634e:	f04f 0800 	mov.w	r8, #0
  406352:	07eb      	lsls	r3, r5, #31
  406354:	d50a      	bpl.n	40636c <__pow5mult+0x74>
  406356:	4639      	mov	r1, r7
  406358:	4622      	mov	r2, r4
  40635a:	4630      	mov	r0, r6
  40635c:	f7ff ff3b 	bl	4061d6 <__multiply>
  406360:	4639      	mov	r1, r7
  406362:	4681      	mov	r9, r0
  406364:	4630      	mov	r0, r6
  406366:	f7ff fe50 	bl	40600a <_Bfree>
  40636a:	464f      	mov	r7, r9
  40636c:	106d      	asrs	r5, r5, #1
  40636e:	d00c      	beq.n	40638a <__pow5mult+0x92>
  406370:	6820      	ldr	r0, [r4, #0]
  406372:	b108      	cbz	r0, 406378 <__pow5mult+0x80>
  406374:	4604      	mov	r4, r0
  406376:	e7ec      	b.n	406352 <__pow5mult+0x5a>
  406378:	4622      	mov	r2, r4
  40637a:	4621      	mov	r1, r4
  40637c:	4630      	mov	r0, r6
  40637e:	f7ff ff2a 	bl	4061d6 <__multiply>
  406382:	6020      	str	r0, [r4, #0]
  406384:	f8c0 8000 	str.w	r8, [r0]
  406388:	e7f4      	b.n	406374 <__pow5mult+0x7c>
  40638a:	4638      	mov	r0, r7
  40638c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406390:	004083b8 	.word	0x004083b8

00406394 <__lshift>:
  406394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406398:	460c      	mov	r4, r1
  40639a:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40639e:	6926      	ldr	r6, [r4, #16]
  4063a0:	6849      	ldr	r1, [r1, #4]
  4063a2:	68a3      	ldr	r3, [r4, #8]
  4063a4:	4456      	add	r6, sl
  4063a6:	4607      	mov	r7, r0
  4063a8:	4691      	mov	r9, r2
  4063aa:	1c75      	adds	r5, r6, #1
  4063ac:	42ab      	cmp	r3, r5
  4063ae:	da02      	bge.n	4063b6 <__lshift+0x22>
  4063b0:	3101      	adds	r1, #1
  4063b2:	005b      	lsls	r3, r3, #1
  4063b4:	e7fa      	b.n	4063ac <__lshift+0x18>
  4063b6:	4638      	mov	r0, r7
  4063b8:	f7ff fdf2 	bl	405fa0 <_Balloc>
  4063bc:	2300      	movs	r3, #0
  4063be:	4680      	mov	r8, r0
  4063c0:	f100 0114 	add.w	r1, r0, #20
  4063c4:	461a      	mov	r2, r3
  4063c6:	4553      	cmp	r3, sl
  4063c8:	da03      	bge.n	4063d2 <__lshift+0x3e>
  4063ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4063ce:	3301      	adds	r3, #1
  4063d0:	e7f9      	b.n	4063c6 <__lshift+0x32>
  4063d2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  4063d6:	6920      	ldr	r0, [r4, #16]
  4063d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4063dc:	f019 091f 	ands.w	r9, r9, #31
  4063e0:	f104 0114 	add.w	r1, r4, #20
  4063e4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4063e8:	d014      	beq.n	406414 <__lshift+0x80>
  4063ea:	f1c9 0c20 	rsb	ip, r9, #32
  4063ee:	2200      	movs	r2, #0
  4063f0:	6808      	ldr	r0, [r1, #0]
  4063f2:	fa00 f009 	lsl.w	r0, r0, r9
  4063f6:	4302      	orrs	r2, r0
  4063f8:	469a      	mov	sl, r3
  4063fa:	f843 2b04 	str.w	r2, [r3], #4
  4063fe:	f851 2b04 	ldr.w	r2, [r1], #4
  406402:	458e      	cmp	lr, r1
  406404:	fa22 f20c 	lsr.w	r2, r2, ip
  406408:	d8f2      	bhi.n	4063f0 <__lshift+0x5c>
  40640a:	f8ca 2004 	str.w	r2, [sl, #4]
  40640e:	b142      	cbz	r2, 406422 <__lshift+0x8e>
  406410:	1cb5      	adds	r5, r6, #2
  406412:	e006      	b.n	406422 <__lshift+0x8e>
  406414:	3b04      	subs	r3, #4
  406416:	f851 2b04 	ldr.w	r2, [r1], #4
  40641a:	f843 2f04 	str.w	r2, [r3, #4]!
  40641e:	458e      	cmp	lr, r1
  406420:	d8f9      	bhi.n	406416 <__lshift+0x82>
  406422:	3d01      	subs	r5, #1
  406424:	4638      	mov	r0, r7
  406426:	f8c8 5010 	str.w	r5, [r8, #16]
  40642a:	4621      	mov	r1, r4
  40642c:	f7ff fded 	bl	40600a <_Bfree>
  406430:	4640      	mov	r0, r8
  406432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00406436 <__mcmp>:
  406436:	6903      	ldr	r3, [r0, #16]
  406438:	690a      	ldr	r2, [r1, #16]
  40643a:	1a9b      	subs	r3, r3, r2
  40643c:	b510      	push	{r4, lr}
  40643e:	d111      	bne.n	406464 <__mcmp+0x2e>
  406440:	0092      	lsls	r2, r2, #2
  406442:	3014      	adds	r0, #20
  406444:	3114      	adds	r1, #20
  406446:	1883      	adds	r3, r0, r2
  406448:	440a      	add	r2, r1
  40644a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40644e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  406452:	428c      	cmp	r4, r1
  406454:	d002      	beq.n	40645c <__mcmp+0x26>
  406456:	d307      	bcc.n	406468 <__mcmp+0x32>
  406458:	2001      	movs	r0, #1
  40645a:	bd10      	pop	{r4, pc}
  40645c:	4298      	cmp	r0, r3
  40645e:	d3f4      	bcc.n	40644a <__mcmp+0x14>
  406460:	2000      	movs	r0, #0
  406462:	bd10      	pop	{r4, pc}
  406464:	4618      	mov	r0, r3
  406466:	bd10      	pop	{r4, pc}
  406468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40646c:	bd10      	pop	{r4, pc}

0040646e <__mdiff>:
  40646e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406472:	460c      	mov	r4, r1
  406474:	4607      	mov	r7, r0
  406476:	4611      	mov	r1, r2
  406478:	4620      	mov	r0, r4
  40647a:	4615      	mov	r5, r2
  40647c:	f7ff ffdb 	bl	406436 <__mcmp>
  406480:	1e06      	subs	r6, r0, #0
  406482:	d108      	bne.n	406496 <__mdiff+0x28>
  406484:	4631      	mov	r1, r6
  406486:	4638      	mov	r0, r7
  406488:	f7ff fd8a 	bl	405fa0 <_Balloc>
  40648c:	2301      	movs	r3, #1
  40648e:	6103      	str	r3, [r0, #16]
  406490:	6146      	str	r6, [r0, #20]
  406492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406496:	bfbc      	itt	lt
  406498:	4623      	movlt	r3, r4
  40649a:	462c      	movlt	r4, r5
  40649c:	4638      	mov	r0, r7
  40649e:	6861      	ldr	r1, [r4, #4]
  4064a0:	bfba      	itte	lt
  4064a2:	461d      	movlt	r5, r3
  4064a4:	2601      	movlt	r6, #1
  4064a6:	2600      	movge	r6, #0
  4064a8:	f7ff fd7a 	bl	405fa0 <_Balloc>
  4064ac:	692b      	ldr	r3, [r5, #16]
  4064ae:	60c6      	str	r6, [r0, #12]
  4064b0:	6926      	ldr	r6, [r4, #16]
  4064b2:	f105 0914 	add.w	r9, r5, #20
  4064b6:	3414      	adds	r4, #20
  4064b8:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  4064bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4064c0:	f100 0514 	add.w	r5, r0, #20
  4064c4:	f04f 0c00 	mov.w	ip, #0
  4064c8:	f854 3b04 	ldr.w	r3, [r4], #4
  4064cc:	f859 2b04 	ldr.w	r2, [r9], #4
  4064d0:	fa1c f183 	uxtah	r1, ip, r3
  4064d4:	fa1f fe82 	uxth.w	lr, r2
  4064d8:	0c12      	lsrs	r2, r2, #16
  4064da:	ebce 0101 	rsb	r1, lr, r1
  4064de:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  4064e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4064e6:	b289      	uxth	r1, r1
  4064e8:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4064ec:	45c8      	cmp	r8, r9
  4064ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4064f2:	46a6      	mov	lr, r4
  4064f4:	f845 3b04 	str.w	r3, [r5], #4
  4064f8:	d8e6      	bhi.n	4064c8 <__mdiff+0x5a>
  4064fa:	45be      	cmp	lr, r7
  4064fc:	d20e      	bcs.n	40651c <__mdiff+0xae>
  4064fe:	f85e 1b04 	ldr.w	r1, [lr], #4
  406502:	fa1c f281 	uxtah	r2, ip, r1
  406506:	1413      	asrs	r3, r2, #16
  406508:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  40650c:	b292      	uxth	r2, r2
  40650e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406512:	ea4f 4c23 	mov.w	ip, r3, asr #16
  406516:	f845 2b04 	str.w	r2, [r5], #4
  40651a:	e7ee      	b.n	4064fa <__mdiff+0x8c>
  40651c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  406520:	b90b      	cbnz	r3, 406526 <__mdiff+0xb8>
  406522:	3e01      	subs	r6, #1
  406524:	e7fa      	b.n	40651c <__mdiff+0xae>
  406526:	6106      	str	r6, [r0, #16]
  406528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040652c <__ulp>:
  40652c:	4b10      	ldr	r3, [pc, #64]	; (406570 <__ulp+0x44>)
  40652e:	400b      	ands	r3, r1
  406530:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  406534:	2b00      	cmp	r3, #0
  406536:	dd02      	ble.n	40653e <__ulp+0x12>
  406538:	2000      	movs	r0, #0
  40653a:	4619      	mov	r1, r3
  40653c:	4770      	bx	lr
  40653e:	425b      	negs	r3, r3
  406540:	151b      	asrs	r3, r3, #20
  406542:	2b13      	cmp	r3, #19
  406544:	f04f 0000 	mov.w	r0, #0
  406548:	f04f 0100 	mov.w	r1, #0
  40654c:	dc04      	bgt.n	406558 <__ulp+0x2c>
  40654e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  406552:	fa42 f103 	asr.w	r1, r2, r3
  406556:	4770      	bx	lr
  406558:	3b14      	subs	r3, #20
  40655a:	2b1e      	cmp	r3, #30
  40655c:	f04f 0201 	mov.w	r2, #1
  406560:	bfda      	itte	le
  406562:	f1c3 031f 	rsble	r3, r3, #31
  406566:	fa02 f303 	lslle.w	r3, r2, r3
  40656a:	4613      	movgt	r3, r2
  40656c:	4618      	mov	r0, r3
  40656e:	4770      	bx	lr
  406570:	7ff00000 	.word	0x7ff00000

00406574 <__b2d>:
  406574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406576:	6905      	ldr	r5, [r0, #16]
  406578:	f100 0614 	add.w	r6, r0, #20
  40657c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  406580:	1f2f      	subs	r7, r5, #4
  406582:	f855 4c04 	ldr.w	r4, [r5, #-4]
  406586:	4620      	mov	r0, r4
  406588:	f7ff fdcf 	bl	40612a <__hi0bits>
  40658c:	f1c0 0320 	rsb	r3, r0, #32
  406590:	280a      	cmp	r0, #10
  406592:	600b      	str	r3, [r1, #0]
  406594:	dc14      	bgt.n	4065c0 <__b2d+0x4c>
  406596:	f1c0 0e0b 	rsb	lr, r0, #11
  40659a:	fa24 f10e 	lsr.w	r1, r4, lr
  40659e:	42be      	cmp	r6, r7
  4065a0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
  4065a4:	bf34      	ite	cc
  4065a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  4065aa:	2100      	movcs	r1, #0
  4065ac:	3015      	adds	r0, #21
  4065ae:	fa04 f000 	lsl.w	r0, r4, r0
  4065b2:	fa21 f10e 	lsr.w	r1, r1, lr
  4065b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  4065ba:	ea40 0201 	orr.w	r2, r0, r1
  4065be:	e023      	b.n	406608 <__b2d+0x94>
  4065c0:	42be      	cmp	r6, r7
  4065c2:	bf3a      	itte	cc
  4065c4:	f1a5 0708 	subcc.w	r7, r5, #8
  4065c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
  4065cc:	2100      	movcs	r1, #0
  4065ce:	380b      	subs	r0, #11
  4065d0:	d015      	beq.n	4065fe <__b2d+0x8a>
  4065d2:	4084      	lsls	r4, r0
  4065d4:	f1c0 0520 	rsb	r5, r0, #32
  4065d8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  4065dc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  4065e0:	42b7      	cmp	r7, r6
  4065e2:	fa21 fe05 	lsr.w	lr, r1, r5
  4065e6:	ea44 030e 	orr.w	r3, r4, lr
  4065ea:	bf8c      	ite	hi
  4065ec:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
  4065f0:	2400      	movls	r4, #0
  4065f2:	fa01 f000 	lsl.w	r0, r1, r0
  4065f6:	40ec      	lsrs	r4, r5
  4065f8:	ea40 0204 	orr.w	r2, r0, r4
  4065fc:	e004      	b.n	406608 <__b2d+0x94>
  4065fe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  406602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  406606:	460a      	mov	r2, r1
  406608:	4610      	mov	r0, r2
  40660a:	4619      	mov	r1, r3
  40660c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0040660e <__d2b>:
  40660e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  406612:	2101      	movs	r1, #1
  406614:	461c      	mov	r4, r3
  406616:	4690      	mov	r8, r2
  406618:	9e08      	ldr	r6, [sp, #32]
  40661a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40661c:	f7ff fcc0 	bl	405fa0 <_Balloc>
  406620:	f3c4 0213 	ubfx	r2, r4, #0, #20
  406624:	f3c4 540a 	ubfx	r4, r4, #20, #11
  406628:	4607      	mov	r7, r0
  40662a:	b10c      	cbz	r4, 406630 <__d2b+0x22>
  40662c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  406630:	9201      	str	r2, [sp, #4]
  406632:	f1b8 0f00 	cmp.w	r8, #0
  406636:	d019      	beq.n	40666c <__d2b+0x5e>
  406638:	a802      	add	r0, sp, #8
  40663a:	f840 8d08 	str.w	r8, [r0, #-8]!
  40663e:	f7ff fd94 	bl	40616a <__lo0bits>
  406642:	9b00      	ldr	r3, [sp, #0]
  406644:	b148      	cbz	r0, 40665a <__d2b+0x4c>
  406646:	9a01      	ldr	r2, [sp, #4]
  406648:	f1c0 0120 	rsb	r1, r0, #32
  40664c:	fa02 f101 	lsl.w	r1, r2, r1
  406650:	430b      	orrs	r3, r1
  406652:	40c2      	lsrs	r2, r0
  406654:	617b      	str	r3, [r7, #20]
  406656:	9201      	str	r2, [sp, #4]
  406658:	e000      	b.n	40665c <__d2b+0x4e>
  40665a:	617b      	str	r3, [r7, #20]
  40665c:	9b01      	ldr	r3, [sp, #4]
  40665e:	61bb      	str	r3, [r7, #24]
  406660:	2b00      	cmp	r3, #0
  406662:	bf14      	ite	ne
  406664:	2102      	movne	r1, #2
  406666:	2101      	moveq	r1, #1
  406668:	6139      	str	r1, [r7, #16]
  40666a:	e007      	b.n	40667c <__d2b+0x6e>
  40666c:	a801      	add	r0, sp, #4
  40666e:	f7ff fd7c 	bl	40616a <__lo0bits>
  406672:	9b01      	ldr	r3, [sp, #4]
  406674:	617b      	str	r3, [r7, #20]
  406676:	2101      	movs	r1, #1
  406678:	6139      	str	r1, [r7, #16]
  40667a:	3020      	adds	r0, #32
  40667c:	b134      	cbz	r4, 40668c <__d2b+0x7e>
  40667e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  406682:	4404      	add	r4, r0
  406684:	6034      	str	r4, [r6, #0]
  406686:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40668a:	e009      	b.n	4066a0 <__d2b+0x92>
  40668c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  406690:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406694:	6030      	str	r0, [r6, #0]
  406696:	6918      	ldr	r0, [r3, #16]
  406698:	f7ff fd47 	bl	40612a <__hi0bits>
  40669c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4066a0:	6028      	str	r0, [r5, #0]
  4066a2:	4638      	mov	r0, r7
  4066a4:	b002      	add	sp, #8
  4066a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004066aa <__ratio>:
  4066aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4066ae:	4688      	mov	r8, r1
  4066b0:	4669      	mov	r1, sp
  4066b2:	4681      	mov	r9, r0
  4066b4:	f7ff ff5e 	bl	406574 <__b2d>
  4066b8:	460d      	mov	r5, r1
  4066ba:	4604      	mov	r4, r0
  4066bc:	a901      	add	r1, sp, #4
  4066be:	4640      	mov	r0, r8
  4066c0:	f7ff ff58 	bl	406574 <__b2d>
  4066c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4066c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
  4066cc:	460f      	mov	r7, r1
  4066ce:	1a9a      	subs	r2, r3, r2
  4066d0:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4066d4:	1ac9      	subs	r1, r1, r3
  4066d6:	eb01 1342 	add.w	r3, r1, r2, lsl #5
  4066da:	2b00      	cmp	r3, #0
  4066dc:	bfc8      	it	gt
  4066de:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
  4066e2:	4606      	mov	r6, r0
  4066e4:	bfd8      	it	le
  4066e6:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
  4066ea:	4632      	mov	r2, r6
  4066ec:	463b      	mov	r3, r7
  4066ee:	4620      	mov	r0, r4
  4066f0:	4629      	mov	r1, r5
  4066f2:	f000 fdff 	bl	4072f4 <__aeabi_ddiv>
  4066f6:	b003      	add	sp, #12
  4066f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

004066fc <__copybits>:
  4066fc:	3901      	subs	r1, #1
  4066fe:	b510      	push	{r4, lr}
  406700:	1149      	asrs	r1, r1, #5
  406702:	6914      	ldr	r4, [r2, #16]
  406704:	3101      	adds	r1, #1
  406706:	f102 0314 	add.w	r3, r2, #20
  40670a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40670e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  406712:	42a3      	cmp	r3, r4
  406714:	4602      	mov	r2, r0
  406716:	d204      	bcs.n	406722 <__copybits+0x26>
  406718:	f853 2b04 	ldr.w	r2, [r3], #4
  40671c:	f840 2b04 	str.w	r2, [r0], #4
  406720:	e7f7      	b.n	406712 <__copybits+0x16>
  406722:	2300      	movs	r3, #0
  406724:	428a      	cmp	r2, r1
  406726:	d202      	bcs.n	40672e <__copybits+0x32>
  406728:	f842 3b04 	str.w	r3, [r2], #4
  40672c:	e7fa      	b.n	406724 <__copybits+0x28>
  40672e:	bd10      	pop	{r4, pc}

00406730 <__any_on>:
  406730:	f100 0214 	add.w	r2, r0, #20
  406734:	6900      	ldr	r0, [r0, #16]
  406736:	114b      	asrs	r3, r1, #5
  406738:	4298      	cmp	r0, r3
  40673a:	b510      	push	{r4, lr}
  40673c:	db0c      	blt.n	406758 <__any_on+0x28>
  40673e:	dd0c      	ble.n	40675a <__any_on+0x2a>
  406740:	f011 011f 	ands.w	r1, r1, #31
  406744:	d009      	beq.n	40675a <__any_on+0x2a>
  406746:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
  40674a:	fa24 f001 	lsr.w	r0, r4, r1
  40674e:	fa00 f101 	lsl.w	r1, r0, r1
  406752:	428c      	cmp	r4, r1
  406754:	d10c      	bne.n	406770 <__any_on+0x40>
  406756:	e000      	b.n	40675a <__any_on+0x2a>
  406758:	4603      	mov	r3, r0
  40675a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40675e:	4293      	cmp	r3, r2
  406760:	d904      	bls.n	40676c <__any_on+0x3c>
  406762:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  406766:	2900      	cmp	r1, #0
  406768:	d0f9      	beq.n	40675e <__any_on+0x2e>
  40676a:	e001      	b.n	406770 <__any_on+0x40>
  40676c:	2000      	movs	r0, #0
  40676e:	bd10      	pop	{r4, pc}
  406770:	2001      	movs	r0, #1
  406772:	bd10      	pop	{r4, pc}

00406774 <_calloc_r>:
  406774:	b538      	push	{r3, r4, r5, lr}
  406776:	fb02 f401 	mul.w	r4, r2, r1
  40677a:	4621      	mov	r1, r4
  40677c:	f000 f856 	bl	40682c <_malloc_r>
  406780:	4605      	mov	r5, r0
  406782:	b118      	cbz	r0, 40678c <_calloc_r+0x18>
  406784:	4622      	mov	r2, r4
  406786:	2100      	movs	r1, #0
  406788:	f7fc faf1 	bl	402d6e <memset>
  40678c:	4628      	mov	r0, r5
  40678e:	bd38      	pop	{r3, r4, r5, pc}

00406790 <_free_r>:
  406790:	b538      	push	{r3, r4, r5, lr}
  406792:	4605      	mov	r5, r0
  406794:	2900      	cmp	r1, #0
  406796:	d046      	beq.n	406826 <_free_r+0x96>
  406798:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40679c:	1f0c      	subs	r4, r1, #4
  40679e:	2b00      	cmp	r3, #0
  4067a0:	bfb8      	it	lt
  4067a2:	18e4      	addlt	r4, r4, r3
  4067a4:	f000 fab0 	bl	406d08 <__malloc_lock>
  4067a8:	4a1f      	ldr	r2, [pc, #124]	; (406828 <_free_r+0x98>)
  4067aa:	6813      	ldr	r3, [r2, #0]
  4067ac:	4611      	mov	r1, r2
  4067ae:	b913      	cbnz	r3, 4067b6 <_free_r+0x26>
  4067b0:	6063      	str	r3, [r4, #4]
  4067b2:	6014      	str	r4, [r2, #0]
  4067b4:	e032      	b.n	40681c <_free_r+0x8c>
  4067b6:	42a3      	cmp	r3, r4
  4067b8:	d90e      	bls.n	4067d8 <_free_r+0x48>
  4067ba:	6822      	ldr	r2, [r4, #0]
  4067bc:	18a0      	adds	r0, r4, r2
  4067be:	4283      	cmp	r3, r0
  4067c0:	bf04      	itt	eq
  4067c2:	6818      	ldreq	r0, [r3, #0]
  4067c4:	685b      	ldreq	r3, [r3, #4]
  4067c6:	6063      	str	r3, [r4, #4]
  4067c8:	bf04      	itt	eq
  4067ca:	1812      	addeq	r2, r2, r0
  4067cc:	6022      	streq	r2, [r4, #0]
  4067ce:	600c      	str	r4, [r1, #0]
  4067d0:	e024      	b.n	40681c <_free_r+0x8c>
  4067d2:	42a2      	cmp	r2, r4
  4067d4:	d803      	bhi.n	4067de <_free_r+0x4e>
  4067d6:	4613      	mov	r3, r2
  4067d8:	685a      	ldr	r2, [r3, #4]
  4067da:	2a00      	cmp	r2, #0
  4067dc:	d1f9      	bne.n	4067d2 <_free_r+0x42>
  4067de:	6818      	ldr	r0, [r3, #0]
  4067e0:	1819      	adds	r1, r3, r0
  4067e2:	42a1      	cmp	r1, r4
  4067e4:	d10b      	bne.n	4067fe <_free_r+0x6e>
  4067e6:	6821      	ldr	r1, [r4, #0]
  4067e8:	4401      	add	r1, r0
  4067ea:	1858      	adds	r0, r3, r1
  4067ec:	4282      	cmp	r2, r0
  4067ee:	6019      	str	r1, [r3, #0]
  4067f0:	d114      	bne.n	40681c <_free_r+0x8c>
  4067f2:	6810      	ldr	r0, [r2, #0]
  4067f4:	6852      	ldr	r2, [r2, #4]
  4067f6:	605a      	str	r2, [r3, #4]
  4067f8:	4401      	add	r1, r0
  4067fa:	6019      	str	r1, [r3, #0]
  4067fc:	e00e      	b.n	40681c <_free_r+0x8c>
  4067fe:	d902      	bls.n	406806 <_free_r+0x76>
  406800:	230c      	movs	r3, #12
  406802:	602b      	str	r3, [r5, #0]
  406804:	e00a      	b.n	40681c <_free_r+0x8c>
  406806:	6821      	ldr	r1, [r4, #0]
  406808:	1860      	adds	r0, r4, r1
  40680a:	4282      	cmp	r2, r0
  40680c:	bf04      	itt	eq
  40680e:	6810      	ldreq	r0, [r2, #0]
  406810:	6852      	ldreq	r2, [r2, #4]
  406812:	6062      	str	r2, [r4, #4]
  406814:	bf04      	itt	eq
  406816:	1809      	addeq	r1, r1, r0
  406818:	6021      	streq	r1, [r4, #0]
  40681a:	605c      	str	r4, [r3, #4]
  40681c:	4628      	mov	r0, r5
  40681e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406822:	f000 ba72 	b.w	406d0a <__malloc_unlock>
  406826:	bd38      	pop	{r3, r4, r5, pc}
  406828:	200004f4 	.word	0x200004f4

0040682c <_malloc_r>:
  40682c:	b570      	push	{r4, r5, r6, lr}
  40682e:	1ccd      	adds	r5, r1, #3
  406830:	f025 0503 	bic.w	r5, r5, #3
  406834:	3508      	adds	r5, #8
  406836:	2d0c      	cmp	r5, #12
  406838:	bf38      	it	cc
  40683a:	250c      	movcc	r5, #12
  40683c:	2d00      	cmp	r5, #0
  40683e:	4606      	mov	r6, r0
  406840:	db01      	blt.n	406846 <_malloc_r+0x1a>
  406842:	42a9      	cmp	r1, r5
  406844:	d902      	bls.n	40684c <_malloc_r+0x20>
  406846:	230c      	movs	r3, #12
  406848:	6033      	str	r3, [r6, #0]
  40684a:	e046      	b.n	4068da <_malloc_r+0xae>
  40684c:	f000 fa5c 	bl	406d08 <__malloc_lock>
  406850:	4b23      	ldr	r3, [pc, #140]	; (4068e0 <_malloc_r+0xb4>)
  406852:	681c      	ldr	r4, [r3, #0]
  406854:	461a      	mov	r2, r3
  406856:	4621      	mov	r1, r4
  406858:	b1a1      	cbz	r1, 406884 <_malloc_r+0x58>
  40685a:	680b      	ldr	r3, [r1, #0]
  40685c:	1b5b      	subs	r3, r3, r5
  40685e:	d40e      	bmi.n	40687e <_malloc_r+0x52>
  406860:	2b0b      	cmp	r3, #11
  406862:	d903      	bls.n	40686c <_malloc_r+0x40>
  406864:	600b      	str	r3, [r1, #0]
  406866:	18cc      	adds	r4, r1, r3
  406868:	50cd      	str	r5, [r1, r3]
  40686a:	e01e      	b.n	4068aa <_malloc_r+0x7e>
  40686c:	428c      	cmp	r4, r1
  40686e:	bf0d      	iteet	eq
  406870:	6863      	ldreq	r3, [r4, #4]
  406872:	684b      	ldrne	r3, [r1, #4]
  406874:	6063      	strne	r3, [r4, #4]
  406876:	6013      	streq	r3, [r2, #0]
  406878:	bf18      	it	ne
  40687a:	460c      	movne	r4, r1
  40687c:	e015      	b.n	4068aa <_malloc_r+0x7e>
  40687e:	460c      	mov	r4, r1
  406880:	6849      	ldr	r1, [r1, #4]
  406882:	e7e9      	b.n	406858 <_malloc_r+0x2c>
  406884:	4c17      	ldr	r4, [pc, #92]	; (4068e4 <_malloc_r+0xb8>)
  406886:	6823      	ldr	r3, [r4, #0]
  406888:	b91b      	cbnz	r3, 406892 <_malloc_r+0x66>
  40688a:	4630      	mov	r0, r6
  40688c:	f000 f970 	bl	406b70 <_sbrk_r>
  406890:	6020      	str	r0, [r4, #0]
  406892:	4629      	mov	r1, r5
  406894:	4630      	mov	r0, r6
  406896:	f000 f96b 	bl	406b70 <_sbrk_r>
  40689a:	1c43      	adds	r3, r0, #1
  40689c:	d018      	beq.n	4068d0 <_malloc_r+0xa4>
  40689e:	1cc4      	adds	r4, r0, #3
  4068a0:	f024 0403 	bic.w	r4, r4, #3
  4068a4:	42a0      	cmp	r0, r4
  4068a6:	d10d      	bne.n	4068c4 <_malloc_r+0x98>
  4068a8:	6025      	str	r5, [r4, #0]
  4068aa:	4630      	mov	r0, r6
  4068ac:	f000 fa2d 	bl	406d0a <__malloc_unlock>
  4068b0:	f104 000b 	add.w	r0, r4, #11
  4068b4:	1d23      	adds	r3, r4, #4
  4068b6:	f020 0007 	bic.w	r0, r0, #7
  4068ba:	1ac3      	subs	r3, r0, r3
  4068bc:	d00e      	beq.n	4068dc <_malloc_r+0xb0>
  4068be:	425a      	negs	r2, r3
  4068c0:	50e2      	str	r2, [r4, r3]
  4068c2:	bd70      	pop	{r4, r5, r6, pc}
  4068c4:	1a21      	subs	r1, r4, r0
  4068c6:	4630      	mov	r0, r6
  4068c8:	f000 f952 	bl	406b70 <_sbrk_r>
  4068cc:	3001      	adds	r0, #1
  4068ce:	d1eb      	bne.n	4068a8 <_malloc_r+0x7c>
  4068d0:	230c      	movs	r3, #12
  4068d2:	6033      	str	r3, [r6, #0]
  4068d4:	4630      	mov	r0, r6
  4068d6:	f000 fa18 	bl	406d0a <__malloc_unlock>
  4068da:	2000      	movs	r0, #0
  4068dc:	bd70      	pop	{r4, r5, r6, pc}
  4068de:	bf00      	nop
  4068e0:	200004f4 	.word	0x200004f4
  4068e4:	200004f0 	.word	0x200004f0

004068e8 <__sfputc_r>:
  4068e8:	6893      	ldr	r3, [r2, #8]
  4068ea:	3b01      	subs	r3, #1
  4068ec:	2b00      	cmp	r3, #0
  4068ee:	b410      	push	{r4}
  4068f0:	6093      	str	r3, [r2, #8]
  4068f2:	da08      	bge.n	406906 <__sfputc_r+0x1e>
  4068f4:	6994      	ldr	r4, [r2, #24]
  4068f6:	42a3      	cmp	r3, r4
  4068f8:	db02      	blt.n	406900 <__sfputc_r+0x18>
  4068fa:	b2cb      	uxtb	r3, r1
  4068fc:	2b0a      	cmp	r3, #10
  4068fe:	d102      	bne.n	406906 <__sfputc_r+0x1e>
  406900:	bc10      	pop	{r4}
  406902:	f7fd bee7 	b.w	4046d4 <__swbuf_r>
  406906:	6813      	ldr	r3, [r2, #0]
  406908:	1c58      	adds	r0, r3, #1
  40690a:	6010      	str	r0, [r2, #0]
  40690c:	7019      	strb	r1, [r3, #0]
  40690e:	b2c8      	uxtb	r0, r1
  406910:	bc10      	pop	{r4}
  406912:	4770      	bx	lr

00406914 <__sfputs_r>:
  406914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406916:	4606      	mov	r6, r0
  406918:	460f      	mov	r7, r1
  40691a:	4614      	mov	r4, r2
  40691c:	18d5      	adds	r5, r2, r3
  40691e:	42ac      	cmp	r4, r5
  406920:	d008      	beq.n	406934 <__sfputs_r+0x20>
  406922:	463a      	mov	r2, r7
  406924:	f814 1b01 	ldrb.w	r1, [r4], #1
  406928:	4630      	mov	r0, r6
  40692a:	f7ff ffdd 	bl	4068e8 <__sfputc_r>
  40692e:	1c43      	adds	r3, r0, #1
  406930:	d1f5      	bne.n	40691e <__sfputs_r+0xa>
  406932:	e000      	b.n	406936 <__sfputs_r+0x22>
  406934:	2000      	movs	r0, #0
  406936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00406938 <_vfiprintf_r>:
  406938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40693c:	b09d      	sub	sp, #116	; 0x74
  40693e:	460c      	mov	r4, r1
  406940:	4617      	mov	r7, r2
  406942:	9303      	str	r3, [sp, #12]
  406944:	4606      	mov	r6, r0
  406946:	b118      	cbz	r0, 406950 <_vfiprintf_r+0x18>
  406948:	6983      	ldr	r3, [r0, #24]
  40694a:	b90b      	cbnz	r3, 406950 <_vfiprintf_r+0x18>
  40694c:	f7fe fea2 	bl	405694 <__sinit>
  406950:	4b7f      	ldr	r3, [pc, #508]	; (406b50 <_vfiprintf_r+0x218>)
  406952:	429c      	cmp	r4, r3
  406954:	d101      	bne.n	40695a <_vfiprintf_r+0x22>
  406956:	6874      	ldr	r4, [r6, #4]
  406958:	e008      	b.n	40696c <_vfiprintf_r+0x34>
  40695a:	4b7e      	ldr	r3, [pc, #504]	; (406b54 <_vfiprintf_r+0x21c>)
  40695c:	429c      	cmp	r4, r3
  40695e:	d101      	bne.n	406964 <_vfiprintf_r+0x2c>
  406960:	68b4      	ldr	r4, [r6, #8]
  406962:	e003      	b.n	40696c <_vfiprintf_r+0x34>
  406964:	4b7c      	ldr	r3, [pc, #496]	; (406b58 <_vfiprintf_r+0x220>)
  406966:	429c      	cmp	r4, r3
  406968:	bf08      	it	eq
  40696a:	68f4      	ldreq	r4, [r6, #12]
  40696c:	89a3      	ldrh	r3, [r4, #12]
  40696e:	0718      	lsls	r0, r3, #28
  406970:	d50c      	bpl.n	40698c <_vfiprintf_r+0x54>
  406972:	6923      	ldr	r3, [r4, #16]
  406974:	b153      	cbz	r3, 40698c <_vfiprintf_r+0x54>
  406976:	2300      	movs	r3, #0
  406978:	9309      	str	r3, [sp, #36]	; 0x24
  40697a:	2320      	movs	r3, #32
  40697c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  406980:	2330      	movs	r3, #48	; 0x30
  406982:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  406986:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 406b5c <_vfiprintf_r+0x224>
  40698a:	e044      	b.n	406a16 <_vfiprintf_r+0xde>
  40698c:	4621      	mov	r1, r4
  40698e:	4630      	mov	r0, r6
  406990:	f7fd fef4 	bl	40477c <__swsetup_r>
  406994:	2800      	cmp	r0, #0
  406996:	d0ee      	beq.n	406976 <_vfiprintf_r+0x3e>
  406998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40699c:	e0d5      	b.n	406b4a <_vfiprintf_r+0x212>
  40699e:	9a03      	ldr	r2, [sp, #12]
  4069a0:	1d11      	adds	r1, r2, #4
  4069a2:	6812      	ldr	r2, [r2, #0]
  4069a4:	9103      	str	r1, [sp, #12]
  4069a6:	2a00      	cmp	r2, #0
  4069a8:	f280 808c 	bge.w	406ac4 <_vfiprintf_r+0x18c>
  4069ac:	4252      	negs	r2, r2
  4069ae:	f043 0002 	orr.w	r0, r3, #2
  4069b2:	9207      	str	r2, [sp, #28]
  4069b4:	9004      	str	r0, [sp, #16]
  4069b6:	f898 3000 	ldrb.w	r3, [r8]
  4069ba:	2b2e      	cmp	r3, #46	; 0x2e
  4069bc:	f000 8084 	beq.w	406ac8 <_vfiprintf_r+0x190>
  4069c0:	2203      	movs	r2, #3
  4069c2:	f898 1000 	ldrb.w	r1, [r8]
  4069c6:	4865      	ldr	r0, [pc, #404]	; (406b5c <_vfiprintf_r+0x224>)
  4069c8:	f7ff fa9a 	bl	405f00 <memchr>
  4069cc:	b148      	cbz	r0, 4069e2 <_vfiprintf_r+0xaa>
  4069ce:	2340      	movs	r3, #64	; 0x40
  4069d0:	ebcb 0000 	rsb	r0, fp, r0
  4069d4:	fa03 f000 	lsl.w	r0, r3, r0
  4069d8:	9b04      	ldr	r3, [sp, #16]
  4069da:	4318      	orrs	r0, r3
  4069dc:	9004      	str	r0, [sp, #16]
  4069de:	f108 0801 	add.w	r8, r8, #1
  4069e2:	f898 1000 	ldrb.w	r1, [r8]
  4069e6:	485e      	ldr	r0, [pc, #376]	; (406b60 <_vfiprintf_r+0x228>)
  4069e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4069ec:	2206      	movs	r2, #6
  4069ee:	f108 0701 	add.w	r7, r8, #1
  4069f2:	f7ff fa85 	bl	405f00 <memchr>
  4069f6:	2800      	cmp	r0, #0
  4069f8:	f000 8095 	beq.w	406b26 <_vfiprintf_r+0x1ee>
  4069fc:	4b59      	ldr	r3, [pc, #356]	; (406b64 <_vfiprintf_r+0x22c>)
  4069fe:	2b00      	cmp	r3, #0
  406a00:	f040 8088 	bne.w	406b14 <_vfiprintf_r+0x1dc>
  406a04:	9b03      	ldr	r3, [sp, #12]
  406a06:	3307      	adds	r3, #7
  406a08:	f023 0307 	bic.w	r3, r3, #7
  406a0c:	3308      	adds	r3, #8
  406a0e:	9303      	str	r3, [sp, #12]
  406a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a12:	4453      	add	r3, sl
  406a14:	9309      	str	r3, [sp, #36]	; 0x24
  406a16:	46b8      	mov	r8, r7
  406a18:	4645      	mov	r5, r8
  406a1a:	f815 3b01 	ldrb.w	r3, [r5], #1
  406a1e:	b91b      	cbnz	r3, 406a28 <_vfiprintf_r+0xf0>
  406a20:	ebb8 0907 	subs.w	r9, r8, r7
  406a24:	d00f      	beq.n	406a46 <_vfiprintf_r+0x10e>
  406a26:	e003      	b.n	406a30 <_vfiprintf_r+0xf8>
  406a28:	2b25      	cmp	r3, #37	; 0x25
  406a2a:	d0f9      	beq.n	406a20 <_vfiprintf_r+0xe8>
  406a2c:	46a8      	mov	r8, r5
  406a2e:	e7f3      	b.n	406a18 <_vfiprintf_r+0xe0>
  406a30:	464b      	mov	r3, r9
  406a32:	463a      	mov	r2, r7
  406a34:	4621      	mov	r1, r4
  406a36:	4630      	mov	r0, r6
  406a38:	f7ff ff6c 	bl	406914 <__sfputs_r>
  406a3c:	3001      	adds	r0, #1
  406a3e:	d07f      	beq.n	406b40 <_vfiprintf_r+0x208>
  406a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a42:	444b      	add	r3, r9
  406a44:	9309      	str	r3, [sp, #36]	; 0x24
  406a46:	f898 3000 	ldrb.w	r3, [r8]
  406a4a:	2b00      	cmp	r3, #0
  406a4c:	d078      	beq.n	406b40 <_vfiprintf_r+0x208>
  406a4e:	2300      	movs	r3, #0
  406a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  406a54:	9304      	str	r3, [sp, #16]
  406a56:	9307      	str	r3, [sp, #28]
  406a58:	9205      	str	r2, [sp, #20]
  406a5a:	9306      	str	r3, [sp, #24]
  406a5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  406a60:	931a      	str	r3, [sp, #104]	; 0x68
  406a62:	2701      	movs	r7, #1
  406a64:	2205      	movs	r2, #5
  406a66:	7829      	ldrb	r1, [r5, #0]
  406a68:	483f      	ldr	r0, [pc, #252]	; (406b68 <_vfiprintf_r+0x230>)
  406a6a:	f7ff fa49 	bl	405f00 <memchr>
  406a6e:	f105 0801 	add.w	r8, r5, #1
  406a72:	9b04      	ldr	r3, [sp, #16]
  406a74:	b138      	cbz	r0, 406a86 <_vfiprintf_r+0x14e>
  406a76:	4a3c      	ldr	r2, [pc, #240]	; (406b68 <_vfiprintf_r+0x230>)
  406a78:	1a80      	subs	r0, r0, r2
  406a7a:	fa07 f000 	lsl.w	r0, r7, r0
  406a7e:	4318      	orrs	r0, r3
  406a80:	9004      	str	r0, [sp, #16]
  406a82:	4645      	mov	r5, r8
  406a84:	e7ee      	b.n	406a64 <_vfiprintf_r+0x12c>
  406a86:	06d9      	lsls	r1, r3, #27
  406a88:	bf44      	itt	mi
  406a8a:	2220      	movmi	r2, #32
  406a8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406a90:	071a      	lsls	r2, r3, #28
  406a92:	bf44      	itt	mi
  406a94:	222b      	movmi	r2, #43	; 0x2b
  406a96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  406a9a:	782a      	ldrb	r2, [r5, #0]
  406a9c:	2a2a      	cmp	r2, #42	; 0x2a
  406a9e:	f43f af7e 	beq.w	40699e <_vfiprintf_r+0x66>
  406aa2:	9a07      	ldr	r2, [sp, #28]
  406aa4:	2100      	movs	r1, #0
  406aa6:	200a      	movs	r0, #10
  406aa8:	46a8      	mov	r8, r5
  406aaa:	3501      	adds	r5, #1
  406aac:	f898 3000 	ldrb.w	r3, [r8]
  406ab0:	3b30      	subs	r3, #48	; 0x30
  406ab2:	2b09      	cmp	r3, #9
  406ab4:	d803      	bhi.n	406abe <_vfiprintf_r+0x186>
  406ab6:	fb00 3202 	mla	r2, r0, r2, r3
  406aba:	2101      	movs	r1, #1
  406abc:	e7f4      	b.n	406aa8 <_vfiprintf_r+0x170>
  406abe:	2900      	cmp	r1, #0
  406ac0:	f43f af79 	beq.w	4069b6 <_vfiprintf_r+0x7e>
  406ac4:	9207      	str	r2, [sp, #28]
  406ac6:	e776      	b.n	4069b6 <_vfiprintf_r+0x7e>
  406ac8:	f898 3001 	ldrb.w	r3, [r8, #1]
  406acc:	2b2a      	cmp	r3, #42	; 0x2a
  406ace:	d10b      	bne.n	406ae8 <_vfiprintf_r+0x1b0>
  406ad0:	9b03      	ldr	r3, [sp, #12]
  406ad2:	1d1a      	adds	r2, r3, #4
  406ad4:	681b      	ldr	r3, [r3, #0]
  406ad6:	9203      	str	r2, [sp, #12]
  406ad8:	2b00      	cmp	r3, #0
  406ada:	bfb8      	it	lt
  406adc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  406ae0:	f108 0802 	add.w	r8, r8, #2
  406ae4:	9305      	str	r3, [sp, #20]
  406ae6:	e76b      	b.n	4069c0 <_vfiprintf_r+0x88>
  406ae8:	2300      	movs	r3, #0
  406aea:	9305      	str	r3, [sp, #20]
  406aec:	f108 0001 	add.w	r0, r8, #1
  406af0:	4619      	mov	r1, r3
  406af2:	250a      	movs	r5, #10
  406af4:	4680      	mov	r8, r0
  406af6:	3001      	adds	r0, #1
  406af8:	f898 2000 	ldrb.w	r2, [r8]
  406afc:	3a30      	subs	r2, #48	; 0x30
  406afe:	2a09      	cmp	r2, #9
  406b00:	d803      	bhi.n	406b0a <_vfiprintf_r+0x1d2>
  406b02:	fb05 2101 	mla	r1, r5, r1, r2
  406b06:	2301      	movs	r3, #1
  406b08:	e7f4      	b.n	406af4 <_vfiprintf_r+0x1bc>
  406b0a:	2b00      	cmp	r3, #0
  406b0c:	f43f af58 	beq.w	4069c0 <_vfiprintf_r+0x88>
  406b10:	9105      	str	r1, [sp, #20]
  406b12:	e755      	b.n	4069c0 <_vfiprintf_r+0x88>
  406b14:	ab03      	add	r3, sp, #12
  406b16:	9300      	str	r3, [sp, #0]
  406b18:	4622      	mov	r2, r4
  406b1a:	4b14      	ldr	r3, [pc, #80]	; (406b6c <_vfiprintf_r+0x234>)
  406b1c:	a904      	add	r1, sp, #16
  406b1e:	4630      	mov	r0, r6
  406b20:	f7fc f9bc 	bl	402e9c <_printf_float>
  406b24:	e007      	b.n	406b36 <_vfiprintf_r+0x1fe>
  406b26:	ab03      	add	r3, sp, #12
  406b28:	9300      	str	r3, [sp, #0]
  406b2a:	4622      	mov	r2, r4
  406b2c:	4b0f      	ldr	r3, [pc, #60]	; (406b6c <_vfiprintf_r+0x234>)
  406b2e:	a904      	add	r1, sp, #16
  406b30:	4630      	mov	r0, r6
  406b32:	f7fc fc6d 	bl	403410 <_printf_i>
  406b36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  406b3a:	4682      	mov	sl, r0
  406b3c:	f47f af68 	bne.w	406a10 <_vfiprintf_r+0xd8>
  406b40:	89a3      	ldrh	r3, [r4, #12]
  406b42:	065b      	lsls	r3, r3, #25
  406b44:	f53f af28 	bmi.w	406998 <_vfiprintf_r+0x60>
  406b48:	9809      	ldr	r0, [sp, #36]	; 0x24
  406b4a:	b01d      	add	sp, #116	; 0x74
  406b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b50:	00408258 	.word	0x00408258
  406b54:	00408278 	.word	0x00408278
  406b58:	00408298 	.word	0x00408298
  406b5c:	004083ca 	.word	0x004083ca
  406b60:	004083ce 	.word	0x004083ce
  406b64:	00402e9d 	.word	0x00402e9d
  406b68:	004083c4 	.word	0x004083c4
  406b6c:	00406915 	.word	0x00406915

00406b70 <_sbrk_r>:
  406b70:	b538      	push	{r3, r4, r5, lr}
  406b72:	4c06      	ldr	r4, [pc, #24]	; (406b8c <_sbrk_r+0x1c>)
  406b74:	2300      	movs	r3, #0
  406b76:	4605      	mov	r5, r0
  406b78:	4608      	mov	r0, r1
  406b7a:	6023      	str	r3, [r4, #0]
  406b7c:	f7fb fd00 	bl	402580 <_sbrk>
  406b80:	1c43      	adds	r3, r0, #1
  406b82:	d102      	bne.n	406b8a <_sbrk_r+0x1a>
  406b84:	6823      	ldr	r3, [r4, #0]
  406b86:	b103      	cbz	r3, 406b8a <_sbrk_r+0x1a>
  406b88:	602b      	str	r3, [r5, #0]
  406b8a:	bd38      	pop	{r3, r4, r5, pc}
  406b8c:	20000844 	.word	0x20000844

00406b90 <__sread>:
  406b90:	b510      	push	{r4, lr}
  406b92:	460c      	mov	r4, r1
  406b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406b98:	f000 f8b8 	bl	406d0c <_read_r>
  406b9c:	2800      	cmp	r0, #0
  406b9e:	bfab      	itete	ge
  406ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  406ba2:	89a3      	ldrhlt	r3, [r4, #12]
  406ba4:	181b      	addge	r3, r3, r0
  406ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  406baa:	bfac      	ite	ge
  406bac:	6563      	strge	r3, [r4, #84]	; 0x54
  406bae:	81a3      	strhlt	r3, [r4, #12]
  406bb0:	bd10      	pop	{r4, pc}

00406bb2 <__swrite>:
  406bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406bb6:	461f      	mov	r7, r3
  406bb8:	898b      	ldrh	r3, [r1, #12]
  406bba:	05db      	lsls	r3, r3, #23
  406bbc:	4605      	mov	r5, r0
  406bbe:	460c      	mov	r4, r1
  406bc0:	4616      	mov	r6, r2
  406bc2:	d505      	bpl.n	406bd0 <__swrite+0x1e>
  406bc4:	2302      	movs	r3, #2
  406bc6:	2200      	movs	r2, #0
  406bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406bcc:	f000 f88a 	bl	406ce4 <_lseek_r>
  406bd0:	89a3      	ldrh	r3, [r4, #12]
  406bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406bda:	81a3      	strh	r3, [r4, #12]
  406bdc:	4632      	mov	r2, r6
  406bde:	463b      	mov	r3, r7
  406be0:	4628      	mov	r0, r5
  406be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406be6:	f000 b839 	b.w	406c5c <_write_r>

00406bea <__sseek>:
  406bea:	b510      	push	{r4, lr}
  406bec:	460c      	mov	r4, r1
  406bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406bf2:	f000 f877 	bl	406ce4 <_lseek_r>
  406bf6:	1c43      	adds	r3, r0, #1
  406bf8:	89a3      	ldrh	r3, [r4, #12]
  406bfa:	bf15      	itete	ne
  406bfc:	6560      	strne	r0, [r4, #84]	; 0x54
  406bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  406c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  406c06:	81a3      	strheq	r3, [r4, #12]
  406c08:	bf18      	it	ne
  406c0a:	81a3      	strhne	r3, [r4, #12]
  406c0c:	bd10      	pop	{r4, pc}

00406c0e <__sclose>:
  406c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406c12:	f000 b835 	b.w	406c80 <_close_r>

00406c16 <strncmp>:
  406c16:	b530      	push	{r4, r5, lr}
  406c18:	b182      	cbz	r2, 406c3c <strncmp+0x26>
  406c1a:	1e45      	subs	r5, r0, #1
  406c1c:	3901      	subs	r1, #1
  406c1e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  406c22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  406c26:	42a3      	cmp	r3, r4
  406c28:	d106      	bne.n	406c38 <strncmp+0x22>
  406c2a:	43ec      	mvns	r4, r5
  406c2c:	4414      	add	r4, r2
  406c2e:	42e0      	cmn	r0, r4
  406c30:	d001      	beq.n	406c36 <strncmp+0x20>
  406c32:	2b00      	cmp	r3, #0
  406c34:	d1f3      	bne.n	406c1e <strncmp+0x8>
  406c36:	461c      	mov	r4, r3
  406c38:	1b18      	subs	r0, r3, r4
  406c3a:	bd30      	pop	{r4, r5, pc}
  406c3c:	4610      	mov	r0, r2
  406c3e:	bd30      	pop	{r4, r5, pc}

00406c40 <__ascii_wctomb>:
  406c40:	b149      	cbz	r1, 406c56 <__ascii_wctomb+0x16>
  406c42:	2aff      	cmp	r2, #255	; 0xff
  406c44:	bf85      	ittet	hi
  406c46:	238a      	movhi	r3, #138	; 0x8a
  406c48:	6003      	strhi	r3, [r0, #0]
  406c4a:	700a      	strbls	r2, [r1, #0]
  406c4c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  406c50:	bf98      	it	ls
  406c52:	2001      	movls	r0, #1
  406c54:	4770      	bx	lr
  406c56:	4608      	mov	r0, r1
  406c58:	4770      	bx	lr
	...

00406c5c <_write_r>:
  406c5c:	b538      	push	{r3, r4, r5, lr}
  406c5e:	4c07      	ldr	r4, [pc, #28]	; (406c7c <_write_r+0x20>)
  406c60:	4605      	mov	r5, r0
  406c62:	4608      	mov	r0, r1
  406c64:	4611      	mov	r1, r2
  406c66:	2200      	movs	r2, #0
  406c68:	6022      	str	r2, [r4, #0]
  406c6a:	461a      	mov	r2, r3
  406c6c:	f7f9 fa9e 	bl	4001ac <_write>
  406c70:	1c43      	adds	r3, r0, #1
  406c72:	d102      	bne.n	406c7a <_write_r+0x1e>
  406c74:	6823      	ldr	r3, [r4, #0]
  406c76:	b103      	cbz	r3, 406c7a <_write_r+0x1e>
  406c78:	602b      	str	r3, [r5, #0]
  406c7a:	bd38      	pop	{r3, r4, r5, pc}
  406c7c:	20000844 	.word	0x20000844

00406c80 <_close_r>:
  406c80:	b538      	push	{r3, r4, r5, lr}
  406c82:	4c06      	ldr	r4, [pc, #24]	; (406c9c <_close_r+0x1c>)
  406c84:	2300      	movs	r3, #0
  406c86:	4605      	mov	r5, r0
  406c88:	4608      	mov	r0, r1
  406c8a:	6023      	str	r3, [r4, #0]
  406c8c:	f7fb fc92 	bl	4025b4 <_close>
  406c90:	1c43      	adds	r3, r0, #1
  406c92:	d102      	bne.n	406c9a <_close_r+0x1a>
  406c94:	6823      	ldr	r3, [r4, #0]
  406c96:	b103      	cbz	r3, 406c9a <_close_r+0x1a>
  406c98:	602b      	str	r3, [r5, #0]
  406c9a:	bd38      	pop	{r3, r4, r5, pc}
  406c9c:	20000844 	.word	0x20000844

00406ca0 <_fstat_r>:
  406ca0:	b538      	push	{r3, r4, r5, lr}
  406ca2:	4c07      	ldr	r4, [pc, #28]	; (406cc0 <_fstat_r+0x20>)
  406ca4:	2300      	movs	r3, #0
  406ca6:	4605      	mov	r5, r0
  406ca8:	4608      	mov	r0, r1
  406caa:	4611      	mov	r1, r2
  406cac:	6023      	str	r3, [r4, #0]
  406cae:	f7fb fc85 	bl	4025bc <_fstat>
  406cb2:	1c43      	adds	r3, r0, #1
  406cb4:	d102      	bne.n	406cbc <_fstat_r+0x1c>
  406cb6:	6823      	ldr	r3, [r4, #0]
  406cb8:	b103      	cbz	r3, 406cbc <_fstat_r+0x1c>
  406cba:	602b      	str	r3, [r5, #0]
  406cbc:	bd38      	pop	{r3, r4, r5, pc}
  406cbe:	bf00      	nop
  406cc0:	20000844 	.word	0x20000844

00406cc4 <_isatty_r>:
  406cc4:	b538      	push	{r3, r4, r5, lr}
  406cc6:	4c06      	ldr	r4, [pc, #24]	; (406ce0 <_isatty_r+0x1c>)
  406cc8:	2300      	movs	r3, #0
  406cca:	4605      	mov	r5, r0
  406ccc:	4608      	mov	r0, r1
  406cce:	6023      	str	r3, [r4, #0]
  406cd0:	f7fb fc7a 	bl	4025c8 <_isatty>
  406cd4:	1c43      	adds	r3, r0, #1
  406cd6:	d102      	bne.n	406cde <_isatty_r+0x1a>
  406cd8:	6823      	ldr	r3, [r4, #0]
  406cda:	b103      	cbz	r3, 406cde <_isatty_r+0x1a>
  406cdc:	602b      	str	r3, [r5, #0]
  406cde:	bd38      	pop	{r3, r4, r5, pc}
  406ce0:	20000844 	.word	0x20000844

00406ce4 <_lseek_r>:
  406ce4:	b538      	push	{r3, r4, r5, lr}
  406ce6:	4c07      	ldr	r4, [pc, #28]	; (406d04 <_lseek_r+0x20>)
  406ce8:	4605      	mov	r5, r0
  406cea:	4608      	mov	r0, r1
  406cec:	4611      	mov	r1, r2
  406cee:	2200      	movs	r2, #0
  406cf0:	6022      	str	r2, [r4, #0]
  406cf2:	461a      	mov	r2, r3
  406cf4:	f7fb fc6a 	bl	4025cc <_lseek>
  406cf8:	1c43      	adds	r3, r0, #1
  406cfa:	d102      	bne.n	406d02 <_lseek_r+0x1e>
  406cfc:	6823      	ldr	r3, [r4, #0]
  406cfe:	b103      	cbz	r3, 406d02 <_lseek_r+0x1e>
  406d00:	602b      	str	r3, [r5, #0]
  406d02:	bd38      	pop	{r3, r4, r5, pc}
  406d04:	20000844 	.word	0x20000844

00406d08 <__malloc_lock>:
  406d08:	4770      	bx	lr

00406d0a <__malloc_unlock>:
  406d0a:	4770      	bx	lr

00406d0c <_read_r>:
  406d0c:	b538      	push	{r3, r4, r5, lr}
  406d0e:	4c07      	ldr	r4, [pc, #28]	; (406d2c <_read_r+0x20>)
  406d10:	4605      	mov	r5, r0
  406d12:	4608      	mov	r0, r1
  406d14:	4611      	mov	r1, r2
  406d16:	2200      	movs	r2, #0
  406d18:	6022      	str	r2, [r4, #0]
  406d1a:	461a      	mov	r2, r3
  406d1c:	f7f9 fa28 	bl	400170 <_read>
  406d20:	1c43      	adds	r3, r0, #1
  406d22:	d102      	bne.n	406d2a <_read_r+0x1e>
  406d24:	6823      	ldr	r3, [r4, #0]
  406d26:	b103      	cbz	r3, 406d2a <_read_r+0x1e>
  406d28:	602b      	str	r3, [r5, #0]
  406d2a:	bd38      	pop	{r3, r4, r5, pc}
  406d2c:	20000844 	.word	0x20000844

00406d30 <__aeabi_drsub>:
  406d30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406d34:	e002      	b.n	406d3c <__adddf3>
  406d36:	bf00      	nop

00406d38 <__aeabi_dsub>:
  406d38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406d3c <__adddf3>:
  406d3c:	b530      	push	{r4, r5, lr}
  406d3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406d42:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406d46:	ea94 0f05 	teq	r4, r5
  406d4a:	bf08      	it	eq
  406d4c:	ea90 0f02 	teqeq	r0, r2
  406d50:	bf1f      	itttt	ne
  406d52:	ea54 0c00 	orrsne.w	ip, r4, r0
  406d56:	ea55 0c02 	orrsne.w	ip, r5, r2
  406d5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406d5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406d62:	f000 80e2 	beq.w	406f2a <__adddf3+0x1ee>
  406d66:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406d6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406d6e:	bfb8      	it	lt
  406d70:	426d      	neglt	r5, r5
  406d72:	dd0c      	ble.n	406d8e <__adddf3+0x52>
  406d74:	442c      	add	r4, r5
  406d76:	ea80 0202 	eor.w	r2, r0, r2
  406d7a:	ea81 0303 	eor.w	r3, r1, r3
  406d7e:	ea82 0000 	eor.w	r0, r2, r0
  406d82:	ea83 0101 	eor.w	r1, r3, r1
  406d86:	ea80 0202 	eor.w	r2, r0, r2
  406d8a:	ea81 0303 	eor.w	r3, r1, r3
  406d8e:	2d36      	cmp	r5, #54	; 0x36
  406d90:	bf88      	it	hi
  406d92:	bd30      	pophi	{r4, r5, pc}
  406d94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406d98:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406d9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406da0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406da4:	d002      	beq.n	406dac <__adddf3+0x70>
  406da6:	4240      	negs	r0, r0
  406da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406dac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406db0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406db4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406db8:	d002      	beq.n	406dc0 <__adddf3+0x84>
  406dba:	4252      	negs	r2, r2
  406dbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406dc0:	ea94 0f05 	teq	r4, r5
  406dc4:	f000 80a7 	beq.w	406f16 <__adddf3+0x1da>
  406dc8:	f1a4 0401 	sub.w	r4, r4, #1
  406dcc:	f1d5 0e20 	rsbs	lr, r5, #32
  406dd0:	db0d      	blt.n	406dee <__adddf3+0xb2>
  406dd2:	fa02 fc0e 	lsl.w	ip, r2, lr
  406dd6:	fa22 f205 	lsr.w	r2, r2, r5
  406dda:	1880      	adds	r0, r0, r2
  406ddc:	f141 0100 	adc.w	r1, r1, #0
  406de0:	fa03 f20e 	lsl.w	r2, r3, lr
  406de4:	1880      	adds	r0, r0, r2
  406de6:	fa43 f305 	asr.w	r3, r3, r5
  406dea:	4159      	adcs	r1, r3
  406dec:	e00e      	b.n	406e0c <__adddf3+0xd0>
  406dee:	f1a5 0520 	sub.w	r5, r5, #32
  406df2:	f10e 0e20 	add.w	lr, lr, #32
  406df6:	2a01      	cmp	r2, #1
  406df8:	fa03 fc0e 	lsl.w	ip, r3, lr
  406dfc:	bf28      	it	cs
  406dfe:	f04c 0c02 	orrcs.w	ip, ip, #2
  406e02:	fa43 f305 	asr.w	r3, r3, r5
  406e06:	18c0      	adds	r0, r0, r3
  406e08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406e0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406e10:	d507      	bpl.n	406e22 <__adddf3+0xe6>
  406e12:	f04f 0e00 	mov.w	lr, #0
  406e16:	f1dc 0c00 	rsbs	ip, ip, #0
  406e1a:	eb7e 0000 	sbcs.w	r0, lr, r0
  406e1e:	eb6e 0101 	sbc.w	r1, lr, r1
  406e22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406e26:	d31b      	bcc.n	406e60 <__adddf3+0x124>
  406e28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406e2c:	d30c      	bcc.n	406e48 <__adddf3+0x10c>
  406e2e:	0849      	lsrs	r1, r1, #1
  406e30:	ea5f 0030 	movs.w	r0, r0, rrx
  406e34:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406e38:	f104 0401 	add.w	r4, r4, #1
  406e3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406e40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406e44:	f080 809a 	bcs.w	406f7c <__adddf3+0x240>
  406e48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406e4c:	bf08      	it	eq
  406e4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406e52:	f150 0000 	adcs.w	r0, r0, #0
  406e56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406e5a:	ea41 0105 	orr.w	r1, r1, r5
  406e5e:	bd30      	pop	{r4, r5, pc}
  406e60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406e64:	4140      	adcs	r0, r0
  406e66:	eb41 0101 	adc.w	r1, r1, r1
  406e6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406e6e:	f1a4 0401 	sub.w	r4, r4, #1
  406e72:	d1e9      	bne.n	406e48 <__adddf3+0x10c>
  406e74:	f091 0f00 	teq	r1, #0
  406e78:	bf04      	itt	eq
  406e7a:	4601      	moveq	r1, r0
  406e7c:	2000      	moveq	r0, #0
  406e7e:	fab1 f381 	clz	r3, r1
  406e82:	bf08      	it	eq
  406e84:	3320      	addeq	r3, #32
  406e86:	f1a3 030b 	sub.w	r3, r3, #11
  406e8a:	f1b3 0220 	subs.w	r2, r3, #32
  406e8e:	da0c      	bge.n	406eaa <__adddf3+0x16e>
  406e90:	320c      	adds	r2, #12
  406e92:	dd08      	ble.n	406ea6 <__adddf3+0x16a>
  406e94:	f102 0c14 	add.w	ip, r2, #20
  406e98:	f1c2 020c 	rsb	r2, r2, #12
  406e9c:	fa01 f00c 	lsl.w	r0, r1, ip
  406ea0:	fa21 f102 	lsr.w	r1, r1, r2
  406ea4:	e00c      	b.n	406ec0 <__adddf3+0x184>
  406ea6:	f102 0214 	add.w	r2, r2, #20
  406eaa:	bfd8      	it	le
  406eac:	f1c2 0c20 	rsble	ip, r2, #32
  406eb0:	fa01 f102 	lsl.w	r1, r1, r2
  406eb4:	fa20 fc0c 	lsr.w	ip, r0, ip
  406eb8:	bfdc      	itt	le
  406eba:	ea41 010c 	orrle.w	r1, r1, ip
  406ebe:	4090      	lslle	r0, r2
  406ec0:	1ae4      	subs	r4, r4, r3
  406ec2:	bfa2      	ittt	ge
  406ec4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406ec8:	4329      	orrge	r1, r5
  406eca:	bd30      	popge	{r4, r5, pc}
  406ecc:	ea6f 0404 	mvn.w	r4, r4
  406ed0:	3c1f      	subs	r4, #31
  406ed2:	da1c      	bge.n	406f0e <__adddf3+0x1d2>
  406ed4:	340c      	adds	r4, #12
  406ed6:	dc0e      	bgt.n	406ef6 <__adddf3+0x1ba>
  406ed8:	f104 0414 	add.w	r4, r4, #20
  406edc:	f1c4 0220 	rsb	r2, r4, #32
  406ee0:	fa20 f004 	lsr.w	r0, r0, r4
  406ee4:	fa01 f302 	lsl.w	r3, r1, r2
  406ee8:	ea40 0003 	orr.w	r0, r0, r3
  406eec:	fa21 f304 	lsr.w	r3, r1, r4
  406ef0:	ea45 0103 	orr.w	r1, r5, r3
  406ef4:	bd30      	pop	{r4, r5, pc}
  406ef6:	f1c4 040c 	rsb	r4, r4, #12
  406efa:	f1c4 0220 	rsb	r2, r4, #32
  406efe:	fa20 f002 	lsr.w	r0, r0, r2
  406f02:	fa01 f304 	lsl.w	r3, r1, r4
  406f06:	ea40 0003 	orr.w	r0, r0, r3
  406f0a:	4629      	mov	r1, r5
  406f0c:	bd30      	pop	{r4, r5, pc}
  406f0e:	fa21 f004 	lsr.w	r0, r1, r4
  406f12:	4629      	mov	r1, r5
  406f14:	bd30      	pop	{r4, r5, pc}
  406f16:	f094 0f00 	teq	r4, #0
  406f1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406f1e:	bf06      	itte	eq
  406f20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406f24:	3401      	addeq	r4, #1
  406f26:	3d01      	subne	r5, #1
  406f28:	e74e      	b.n	406dc8 <__adddf3+0x8c>
  406f2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406f2e:	bf18      	it	ne
  406f30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406f34:	d029      	beq.n	406f8a <__adddf3+0x24e>
  406f36:	ea94 0f05 	teq	r4, r5
  406f3a:	bf08      	it	eq
  406f3c:	ea90 0f02 	teqeq	r0, r2
  406f40:	d005      	beq.n	406f4e <__adddf3+0x212>
  406f42:	ea54 0c00 	orrs.w	ip, r4, r0
  406f46:	bf04      	itt	eq
  406f48:	4619      	moveq	r1, r3
  406f4a:	4610      	moveq	r0, r2
  406f4c:	bd30      	pop	{r4, r5, pc}
  406f4e:	ea91 0f03 	teq	r1, r3
  406f52:	bf1e      	ittt	ne
  406f54:	2100      	movne	r1, #0
  406f56:	2000      	movne	r0, #0
  406f58:	bd30      	popne	{r4, r5, pc}
  406f5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406f5e:	d105      	bne.n	406f6c <__adddf3+0x230>
  406f60:	0040      	lsls	r0, r0, #1
  406f62:	4149      	adcs	r1, r1
  406f64:	bf28      	it	cs
  406f66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406f6a:	bd30      	pop	{r4, r5, pc}
  406f6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406f70:	bf3c      	itt	cc
  406f72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406f76:	bd30      	popcc	{r4, r5, pc}
  406f78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406f80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406f84:	f04f 0000 	mov.w	r0, #0
  406f88:	bd30      	pop	{r4, r5, pc}
  406f8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406f8e:	bf1a      	itte	ne
  406f90:	4619      	movne	r1, r3
  406f92:	4610      	movne	r0, r2
  406f94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406f98:	bf1c      	itt	ne
  406f9a:	460b      	movne	r3, r1
  406f9c:	4602      	movne	r2, r0
  406f9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406fa2:	bf06      	itte	eq
  406fa4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406fa8:	ea91 0f03 	teqeq	r1, r3
  406fac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406fb0:	bd30      	pop	{r4, r5, pc}
  406fb2:	bf00      	nop

00406fb4 <__aeabi_ui2d>:
  406fb4:	f090 0f00 	teq	r0, #0
  406fb8:	bf04      	itt	eq
  406fba:	2100      	moveq	r1, #0
  406fbc:	4770      	bxeq	lr
  406fbe:	b530      	push	{r4, r5, lr}
  406fc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406fc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406fc8:	f04f 0500 	mov.w	r5, #0
  406fcc:	f04f 0100 	mov.w	r1, #0
  406fd0:	e750      	b.n	406e74 <__adddf3+0x138>
  406fd2:	bf00      	nop

00406fd4 <__aeabi_i2d>:
  406fd4:	f090 0f00 	teq	r0, #0
  406fd8:	bf04      	itt	eq
  406fda:	2100      	moveq	r1, #0
  406fdc:	4770      	bxeq	lr
  406fde:	b530      	push	{r4, r5, lr}
  406fe0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406fe4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406fe8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406fec:	bf48      	it	mi
  406fee:	4240      	negmi	r0, r0
  406ff0:	f04f 0100 	mov.w	r1, #0
  406ff4:	e73e      	b.n	406e74 <__adddf3+0x138>
  406ff6:	bf00      	nop

00406ff8 <__aeabi_f2d>:
  406ff8:	0042      	lsls	r2, r0, #1
  406ffa:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406ffe:	ea4f 0131 	mov.w	r1, r1, rrx
  407002:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407006:	bf1f      	itttt	ne
  407008:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40700c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407010:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407014:	4770      	bxne	lr
  407016:	f092 0f00 	teq	r2, #0
  40701a:	bf14      	ite	ne
  40701c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407020:	4770      	bxeq	lr
  407022:	b530      	push	{r4, r5, lr}
  407024:	f44f 7460 	mov.w	r4, #896	; 0x380
  407028:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40702c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407030:	e720      	b.n	406e74 <__adddf3+0x138>
  407032:	bf00      	nop

00407034 <__aeabi_ul2d>:
  407034:	ea50 0201 	orrs.w	r2, r0, r1
  407038:	bf08      	it	eq
  40703a:	4770      	bxeq	lr
  40703c:	b530      	push	{r4, r5, lr}
  40703e:	f04f 0500 	mov.w	r5, #0
  407042:	e00a      	b.n	40705a <__aeabi_l2d+0x16>

00407044 <__aeabi_l2d>:
  407044:	ea50 0201 	orrs.w	r2, r0, r1
  407048:	bf08      	it	eq
  40704a:	4770      	bxeq	lr
  40704c:	b530      	push	{r4, r5, lr}
  40704e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407052:	d502      	bpl.n	40705a <__aeabi_l2d+0x16>
  407054:	4240      	negs	r0, r0
  407056:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40705a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40705e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407062:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407066:	f43f aedc 	beq.w	406e22 <__adddf3+0xe6>
  40706a:	f04f 0203 	mov.w	r2, #3
  40706e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407072:	bf18      	it	ne
  407074:	3203      	addne	r2, #3
  407076:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40707a:	bf18      	it	ne
  40707c:	3203      	addne	r2, #3
  40707e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407082:	f1c2 0320 	rsb	r3, r2, #32
  407086:	fa00 fc03 	lsl.w	ip, r0, r3
  40708a:	fa20 f002 	lsr.w	r0, r0, r2
  40708e:	fa01 fe03 	lsl.w	lr, r1, r3
  407092:	ea40 000e 	orr.w	r0, r0, lr
  407096:	fa21 f102 	lsr.w	r1, r1, r2
  40709a:	4414      	add	r4, r2
  40709c:	e6c1      	b.n	406e22 <__adddf3+0xe6>
  40709e:	bf00      	nop

004070a0 <__aeabi_dmul>:
  4070a0:	b570      	push	{r4, r5, r6, lr}
  4070a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4070a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4070aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4070ae:	bf1d      	ittte	ne
  4070b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4070b4:	ea94 0f0c 	teqne	r4, ip
  4070b8:	ea95 0f0c 	teqne	r5, ip
  4070bc:	f000 f8de 	bleq	40727c <__aeabi_dmul+0x1dc>
  4070c0:	442c      	add	r4, r5
  4070c2:	ea81 0603 	eor.w	r6, r1, r3
  4070c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4070ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4070ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4070d2:	bf18      	it	ne
  4070d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4070d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4070dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4070e0:	d038      	beq.n	407154 <__aeabi_dmul+0xb4>
  4070e2:	fba0 ce02 	umull	ip, lr, r0, r2
  4070e6:	f04f 0500 	mov.w	r5, #0
  4070ea:	fbe1 e502 	umlal	lr, r5, r1, r2
  4070ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4070f2:	fbe0 e503 	umlal	lr, r5, r0, r3
  4070f6:	f04f 0600 	mov.w	r6, #0
  4070fa:	fbe1 5603 	umlal	r5, r6, r1, r3
  4070fe:	f09c 0f00 	teq	ip, #0
  407102:	bf18      	it	ne
  407104:	f04e 0e01 	orrne.w	lr, lr, #1
  407108:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40710c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407110:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407114:	d204      	bcs.n	407120 <__aeabi_dmul+0x80>
  407116:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40711a:	416d      	adcs	r5, r5
  40711c:	eb46 0606 	adc.w	r6, r6, r6
  407120:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407124:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407128:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40712c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407130:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407134:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407138:	bf88      	it	hi
  40713a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40713e:	d81e      	bhi.n	40717e <__aeabi_dmul+0xde>
  407140:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407144:	bf08      	it	eq
  407146:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40714a:	f150 0000 	adcs.w	r0, r0, #0
  40714e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407152:	bd70      	pop	{r4, r5, r6, pc}
  407154:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407158:	ea46 0101 	orr.w	r1, r6, r1
  40715c:	ea40 0002 	orr.w	r0, r0, r2
  407160:	ea81 0103 	eor.w	r1, r1, r3
  407164:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407168:	bfc2      	ittt	gt
  40716a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40716e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407172:	bd70      	popgt	{r4, r5, r6, pc}
  407174:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407178:	f04f 0e00 	mov.w	lr, #0
  40717c:	3c01      	subs	r4, #1
  40717e:	f300 80ab 	bgt.w	4072d8 <__aeabi_dmul+0x238>
  407182:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407186:	bfde      	ittt	le
  407188:	2000      	movle	r0, #0
  40718a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40718e:	bd70      	pople	{r4, r5, r6, pc}
  407190:	f1c4 0400 	rsb	r4, r4, #0
  407194:	3c20      	subs	r4, #32
  407196:	da35      	bge.n	407204 <__aeabi_dmul+0x164>
  407198:	340c      	adds	r4, #12
  40719a:	dc1b      	bgt.n	4071d4 <__aeabi_dmul+0x134>
  40719c:	f104 0414 	add.w	r4, r4, #20
  4071a0:	f1c4 0520 	rsb	r5, r4, #32
  4071a4:	fa00 f305 	lsl.w	r3, r0, r5
  4071a8:	fa20 f004 	lsr.w	r0, r0, r4
  4071ac:	fa01 f205 	lsl.w	r2, r1, r5
  4071b0:	ea40 0002 	orr.w	r0, r0, r2
  4071b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4071b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4071bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4071c0:	fa21 f604 	lsr.w	r6, r1, r4
  4071c4:	eb42 0106 	adc.w	r1, r2, r6
  4071c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4071cc:	bf08      	it	eq
  4071ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4071d2:	bd70      	pop	{r4, r5, r6, pc}
  4071d4:	f1c4 040c 	rsb	r4, r4, #12
  4071d8:	f1c4 0520 	rsb	r5, r4, #32
  4071dc:	fa00 f304 	lsl.w	r3, r0, r4
  4071e0:	fa20 f005 	lsr.w	r0, r0, r5
  4071e4:	fa01 f204 	lsl.w	r2, r1, r4
  4071e8:	ea40 0002 	orr.w	r0, r0, r2
  4071ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4071f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4071f4:	f141 0100 	adc.w	r1, r1, #0
  4071f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4071fc:	bf08      	it	eq
  4071fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407202:	bd70      	pop	{r4, r5, r6, pc}
  407204:	f1c4 0520 	rsb	r5, r4, #32
  407208:	fa00 f205 	lsl.w	r2, r0, r5
  40720c:	ea4e 0e02 	orr.w	lr, lr, r2
  407210:	fa20 f304 	lsr.w	r3, r0, r4
  407214:	fa01 f205 	lsl.w	r2, r1, r5
  407218:	ea43 0302 	orr.w	r3, r3, r2
  40721c:	fa21 f004 	lsr.w	r0, r1, r4
  407220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407224:	fa21 f204 	lsr.w	r2, r1, r4
  407228:	ea20 0002 	bic.w	r0, r0, r2
  40722c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407234:	bf08      	it	eq
  407236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40723a:	bd70      	pop	{r4, r5, r6, pc}
  40723c:	f094 0f00 	teq	r4, #0
  407240:	d10f      	bne.n	407262 <__aeabi_dmul+0x1c2>
  407242:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407246:	0040      	lsls	r0, r0, #1
  407248:	eb41 0101 	adc.w	r1, r1, r1
  40724c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407250:	bf08      	it	eq
  407252:	3c01      	subeq	r4, #1
  407254:	d0f7      	beq.n	407246 <__aeabi_dmul+0x1a6>
  407256:	ea41 0106 	orr.w	r1, r1, r6
  40725a:	f095 0f00 	teq	r5, #0
  40725e:	bf18      	it	ne
  407260:	4770      	bxne	lr
  407262:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407266:	0052      	lsls	r2, r2, #1
  407268:	eb43 0303 	adc.w	r3, r3, r3
  40726c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407270:	bf08      	it	eq
  407272:	3d01      	subeq	r5, #1
  407274:	d0f7      	beq.n	407266 <__aeabi_dmul+0x1c6>
  407276:	ea43 0306 	orr.w	r3, r3, r6
  40727a:	4770      	bx	lr
  40727c:	ea94 0f0c 	teq	r4, ip
  407280:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407284:	bf18      	it	ne
  407286:	ea95 0f0c 	teqne	r5, ip
  40728a:	d00c      	beq.n	4072a6 <__aeabi_dmul+0x206>
  40728c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407290:	bf18      	it	ne
  407292:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407296:	d1d1      	bne.n	40723c <__aeabi_dmul+0x19c>
  407298:	ea81 0103 	eor.w	r1, r1, r3
  40729c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4072a0:	f04f 0000 	mov.w	r0, #0
  4072a4:	bd70      	pop	{r4, r5, r6, pc}
  4072a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4072aa:	bf06      	itte	eq
  4072ac:	4610      	moveq	r0, r2
  4072ae:	4619      	moveq	r1, r3
  4072b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4072b4:	d019      	beq.n	4072ea <__aeabi_dmul+0x24a>
  4072b6:	ea94 0f0c 	teq	r4, ip
  4072ba:	d102      	bne.n	4072c2 <__aeabi_dmul+0x222>
  4072bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4072c0:	d113      	bne.n	4072ea <__aeabi_dmul+0x24a>
  4072c2:	ea95 0f0c 	teq	r5, ip
  4072c6:	d105      	bne.n	4072d4 <__aeabi_dmul+0x234>
  4072c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4072cc:	bf1c      	itt	ne
  4072ce:	4610      	movne	r0, r2
  4072d0:	4619      	movne	r1, r3
  4072d2:	d10a      	bne.n	4072ea <__aeabi_dmul+0x24a>
  4072d4:	ea81 0103 	eor.w	r1, r1, r3
  4072d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4072dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4072e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4072e4:	f04f 0000 	mov.w	r0, #0
  4072e8:	bd70      	pop	{r4, r5, r6, pc}
  4072ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4072ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4072f2:	bd70      	pop	{r4, r5, r6, pc}

004072f4 <__aeabi_ddiv>:
  4072f4:	b570      	push	{r4, r5, r6, lr}
  4072f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4072fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4072fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407302:	bf1d      	ittte	ne
  407304:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407308:	ea94 0f0c 	teqne	r4, ip
  40730c:	ea95 0f0c 	teqne	r5, ip
  407310:	f000 f8a7 	bleq	407462 <__aeabi_ddiv+0x16e>
  407314:	eba4 0405 	sub.w	r4, r4, r5
  407318:	ea81 0e03 	eor.w	lr, r1, r3
  40731c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407320:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407324:	f000 8088 	beq.w	407438 <__aeabi_ddiv+0x144>
  407328:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40732c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407330:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407334:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407338:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40733c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407340:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407344:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407348:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40734c:	429d      	cmp	r5, r3
  40734e:	bf08      	it	eq
  407350:	4296      	cmpeq	r6, r2
  407352:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407356:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40735a:	d202      	bcs.n	407362 <__aeabi_ddiv+0x6e>
  40735c:	085b      	lsrs	r3, r3, #1
  40735e:	ea4f 0232 	mov.w	r2, r2, rrx
  407362:	1ab6      	subs	r6, r6, r2
  407364:	eb65 0503 	sbc.w	r5, r5, r3
  407368:	085b      	lsrs	r3, r3, #1
  40736a:	ea4f 0232 	mov.w	r2, r2, rrx
  40736e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407372:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407376:	ebb6 0e02 	subs.w	lr, r6, r2
  40737a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40737e:	bf22      	ittt	cs
  407380:	1ab6      	subcs	r6, r6, r2
  407382:	4675      	movcs	r5, lr
  407384:	ea40 000c 	orrcs.w	r0, r0, ip
  407388:	085b      	lsrs	r3, r3, #1
  40738a:	ea4f 0232 	mov.w	r2, r2, rrx
  40738e:	ebb6 0e02 	subs.w	lr, r6, r2
  407392:	eb75 0e03 	sbcs.w	lr, r5, r3
  407396:	bf22      	ittt	cs
  407398:	1ab6      	subcs	r6, r6, r2
  40739a:	4675      	movcs	r5, lr
  40739c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4073a0:	085b      	lsrs	r3, r3, #1
  4073a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4073a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4073aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073ae:	bf22      	ittt	cs
  4073b0:	1ab6      	subcs	r6, r6, r2
  4073b2:	4675      	movcs	r5, lr
  4073b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4073b8:	085b      	lsrs	r3, r3, #1
  4073ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4073be:	ebb6 0e02 	subs.w	lr, r6, r2
  4073c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4073c6:	bf22      	ittt	cs
  4073c8:	1ab6      	subcs	r6, r6, r2
  4073ca:	4675      	movcs	r5, lr
  4073cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4073d0:	ea55 0e06 	orrs.w	lr, r5, r6
  4073d4:	d018      	beq.n	407408 <__aeabi_ddiv+0x114>
  4073d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4073da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4073de:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4073e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4073e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4073ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4073ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4073f2:	d1c0      	bne.n	407376 <__aeabi_ddiv+0x82>
  4073f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4073f8:	d10b      	bne.n	407412 <__aeabi_ddiv+0x11e>
  4073fa:	ea41 0100 	orr.w	r1, r1, r0
  4073fe:	f04f 0000 	mov.w	r0, #0
  407402:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407406:	e7b6      	b.n	407376 <__aeabi_ddiv+0x82>
  407408:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40740c:	bf04      	itt	eq
  40740e:	4301      	orreq	r1, r0
  407410:	2000      	moveq	r0, #0
  407412:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407416:	bf88      	it	hi
  407418:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40741c:	f63f aeaf 	bhi.w	40717e <__aeabi_dmul+0xde>
  407420:	ebb5 0c03 	subs.w	ip, r5, r3
  407424:	bf04      	itt	eq
  407426:	ebb6 0c02 	subseq.w	ip, r6, r2
  40742a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40742e:	f150 0000 	adcs.w	r0, r0, #0
  407432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407436:	bd70      	pop	{r4, r5, r6, pc}
  407438:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40743c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407440:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407444:	bfc2      	ittt	gt
  407446:	ebd4 050c 	rsbsgt	r5, r4, ip
  40744a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40744e:	bd70      	popgt	{r4, r5, r6, pc}
  407450:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407454:	f04f 0e00 	mov.w	lr, #0
  407458:	3c01      	subs	r4, #1
  40745a:	e690      	b.n	40717e <__aeabi_dmul+0xde>
  40745c:	ea45 0e06 	orr.w	lr, r5, r6
  407460:	e68d      	b.n	40717e <__aeabi_dmul+0xde>
  407462:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407466:	ea94 0f0c 	teq	r4, ip
  40746a:	bf08      	it	eq
  40746c:	ea95 0f0c 	teqeq	r5, ip
  407470:	f43f af3b 	beq.w	4072ea <__aeabi_dmul+0x24a>
  407474:	ea94 0f0c 	teq	r4, ip
  407478:	d10a      	bne.n	407490 <__aeabi_ddiv+0x19c>
  40747a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40747e:	f47f af34 	bne.w	4072ea <__aeabi_dmul+0x24a>
  407482:	ea95 0f0c 	teq	r5, ip
  407486:	f47f af25 	bne.w	4072d4 <__aeabi_dmul+0x234>
  40748a:	4610      	mov	r0, r2
  40748c:	4619      	mov	r1, r3
  40748e:	e72c      	b.n	4072ea <__aeabi_dmul+0x24a>
  407490:	ea95 0f0c 	teq	r5, ip
  407494:	d106      	bne.n	4074a4 <__aeabi_ddiv+0x1b0>
  407496:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40749a:	f43f aefd 	beq.w	407298 <__aeabi_dmul+0x1f8>
  40749e:	4610      	mov	r0, r2
  4074a0:	4619      	mov	r1, r3
  4074a2:	e722      	b.n	4072ea <__aeabi_dmul+0x24a>
  4074a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4074a8:	bf18      	it	ne
  4074aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4074ae:	f47f aec5 	bne.w	40723c <__aeabi_dmul+0x19c>
  4074b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4074b6:	f47f af0d 	bne.w	4072d4 <__aeabi_dmul+0x234>
  4074ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4074be:	f47f aeeb 	bne.w	407298 <__aeabi_dmul+0x1f8>
  4074c2:	e712      	b.n	4072ea <__aeabi_dmul+0x24a>

004074c4 <__gedf2>:
  4074c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4074c8:	e006      	b.n	4074d8 <__cmpdf2+0x4>
  4074ca:	bf00      	nop

004074cc <__ledf2>:
  4074cc:	f04f 0c01 	mov.w	ip, #1
  4074d0:	e002      	b.n	4074d8 <__cmpdf2+0x4>
  4074d2:	bf00      	nop

004074d4 <__cmpdf2>:
  4074d4:	f04f 0c01 	mov.w	ip, #1
  4074d8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4074dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4074e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4074e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4074e8:	bf18      	it	ne
  4074ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4074ee:	d01b      	beq.n	407528 <__cmpdf2+0x54>
  4074f0:	b001      	add	sp, #4
  4074f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4074f6:	bf0c      	ite	eq
  4074f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4074fc:	ea91 0f03 	teqne	r1, r3
  407500:	bf02      	ittt	eq
  407502:	ea90 0f02 	teqeq	r0, r2
  407506:	2000      	moveq	r0, #0
  407508:	4770      	bxeq	lr
  40750a:	f110 0f00 	cmn.w	r0, #0
  40750e:	ea91 0f03 	teq	r1, r3
  407512:	bf58      	it	pl
  407514:	4299      	cmppl	r1, r3
  407516:	bf08      	it	eq
  407518:	4290      	cmpeq	r0, r2
  40751a:	bf2c      	ite	cs
  40751c:	17d8      	asrcs	r0, r3, #31
  40751e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407522:	f040 0001 	orr.w	r0, r0, #1
  407526:	4770      	bx	lr
  407528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40752c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407530:	d102      	bne.n	407538 <__cmpdf2+0x64>
  407532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407536:	d107      	bne.n	407548 <__cmpdf2+0x74>
  407538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40753c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407540:	d1d6      	bne.n	4074f0 <__cmpdf2+0x1c>
  407542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407546:	d0d3      	beq.n	4074f0 <__cmpdf2+0x1c>
  407548:	f85d 0b04 	ldr.w	r0, [sp], #4
  40754c:	4770      	bx	lr
  40754e:	bf00      	nop

00407550 <__aeabi_cdrcmple>:
  407550:	4684      	mov	ip, r0
  407552:	4610      	mov	r0, r2
  407554:	4662      	mov	r2, ip
  407556:	468c      	mov	ip, r1
  407558:	4619      	mov	r1, r3
  40755a:	4663      	mov	r3, ip
  40755c:	e000      	b.n	407560 <__aeabi_cdcmpeq>
  40755e:	bf00      	nop

00407560 <__aeabi_cdcmpeq>:
  407560:	b501      	push	{r0, lr}
  407562:	f7ff ffb7 	bl	4074d4 <__cmpdf2>
  407566:	2800      	cmp	r0, #0
  407568:	bf48      	it	mi
  40756a:	f110 0f00 	cmnmi.w	r0, #0
  40756e:	bd01      	pop	{r0, pc}

00407570 <__aeabi_dcmpeq>:
  407570:	f84d ed08 	str.w	lr, [sp, #-8]!
  407574:	f7ff fff4 	bl	407560 <__aeabi_cdcmpeq>
  407578:	bf0c      	ite	eq
  40757a:	2001      	moveq	r0, #1
  40757c:	2000      	movne	r0, #0
  40757e:	f85d fb08 	ldr.w	pc, [sp], #8
  407582:	bf00      	nop

00407584 <__aeabi_dcmplt>:
  407584:	f84d ed08 	str.w	lr, [sp, #-8]!
  407588:	f7ff ffea 	bl	407560 <__aeabi_cdcmpeq>
  40758c:	bf34      	ite	cc
  40758e:	2001      	movcc	r0, #1
  407590:	2000      	movcs	r0, #0
  407592:	f85d fb08 	ldr.w	pc, [sp], #8
  407596:	bf00      	nop

00407598 <__aeabi_dcmple>:
  407598:	f84d ed08 	str.w	lr, [sp, #-8]!
  40759c:	f7ff ffe0 	bl	407560 <__aeabi_cdcmpeq>
  4075a0:	bf94      	ite	ls
  4075a2:	2001      	movls	r0, #1
  4075a4:	2000      	movhi	r0, #0
  4075a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4075aa:	bf00      	nop

004075ac <__aeabi_dcmpge>:
  4075ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075b0:	f7ff ffce 	bl	407550 <__aeabi_cdrcmple>
  4075b4:	bf94      	ite	ls
  4075b6:	2001      	movls	r0, #1
  4075b8:	2000      	movhi	r0, #0
  4075ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4075be:	bf00      	nop

004075c0 <__aeabi_dcmpgt>:
  4075c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075c4:	f7ff ffc4 	bl	407550 <__aeabi_cdrcmple>
  4075c8:	bf34      	ite	cc
  4075ca:	2001      	movcc	r0, #1
  4075cc:	2000      	movcs	r0, #0
  4075ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4075d2:	bf00      	nop

004075d4 <__aeabi_dcmpun>:
  4075d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4075d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4075dc:	d102      	bne.n	4075e4 <__aeabi_dcmpun+0x10>
  4075de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4075e2:	d10a      	bne.n	4075fa <__aeabi_dcmpun+0x26>
  4075e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4075e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4075ec:	d102      	bne.n	4075f4 <__aeabi_dcmpun+0x20>
  4075ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4075f2:	d102      	bne.n	4075fa <__aeabi_dcmpun+0x26>
  4075f4:	f04f 0000 	mov.w	r0, #0
  4075f8:	4770      	bx	lr
  4075fa:	f04f 0001 	mov.w	r0, #1
  4075fe:	4770      	bx	lr

00407600 <__aeabi_d2iz>:
  407600:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407604:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407608:	d215      	bcs.n	407636 <__aeabi_d2iz+0x36>
  40760a:	d511      	bpl.n	407630 <__aeabi_d2iz+0x30>
  40760c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407610:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407614:	d912      	bls.n	40763c <__aeabi_d2iz+0x3c>
  407616:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40761a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40761e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407622:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407626:	fa23 f002 	lsr.w	r0, r3, r2
  40762a:	bf18      	it	ne
  40762c:	4240      	negne	r0, r0
  40762e:	4770      	bx	lr
  407630:	f04f 0000 	mov.w	r0, #0
  407634:	4770      	bx	lr
  407636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40763a:	d105      	bne.n	407648 <__aeabi_d2iz+0x48>
  40763c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407640:	bf08      	it	eq
  407642:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407646:	4770      	bx	lr
  407648:	f04f 0000 	mov.w	r0, #0
  40764c:	4770      	bx	lr
  40764e:	bf00      	nop

00407650 <__aeabi_d2uiz>:
  407650:	004a      	lsls	r2, r1, #1
  407652:	d211      	bcs.n	407678 <__aeabi_d2uiz+0x28>
  407654:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407658:	d211      	bcs.n	40767e <__aeabi_d2uiz+0x2e>
  40765a:	d50d      	bpl.n	407678 <__aeabi_d2uiz+0x28>
  40765c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407660:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407664:	d40e      	bmi.n	407684 <__aeabi_d2uiz+0x34>
  407666:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40766a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40766e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407672:	fa23 f002 	lsr.w	r0, r3, r2
  407676:	4770      	bx	lr
  407678:	f04f 0000 	mov.w	r0, #0
  40767c:	4770      	bx	lr
  40767e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407682:	d102      	bne.n	40768a <__aeabi_d2uiz+0x3a>
  407684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  407688:	4770      	bx	lr
  40768a:	f04f 0000 	mov.w	r0, #0
  40768e:	4770      	bx	lr

00407690 <__aeabi_d2f>:
  407690:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407694:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  407698:	bf24      	itt	cs
  40769a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40769e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4076a2:	d90d      	bls.n	4076c0 <__aeabi_d2f+0x30>
  4076a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4076a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4076ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4076b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4076b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4076b8:	bf08      	it	eq
  4076ba:	f020 0001 	biceq.w	r0, r0, #1
  4076be:	4770      	bx	lr
  4076c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4076c4:	d121      	bne.n	40770a <__aeabi_d2f+0x7a>
  4076c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4076ca:	bfbc      	itt	lt
  4076cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4076d0:	4770      	bxlt	lr
  4076d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4076d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4076da:	f1c2 0218 	rsb	r2, r2, #24
  4076de:	f1c2 0c20 	rsb	ip, r2, #32
  4076e2:	fa10 f30c 	lsls.w	r3, r0, ip
  4076e6:	fa20 f002 	lsr.w	r0, r0, r2
  4076ea:	bf18      	it	ne
  4076ec:	f040 0001 	orrne.w	r0, r0, #1
  4076f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4076f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4076f8:	fa03 fc0c 	lsl.w	ip, r3, ip
  4076fc:	ea40 000c 	orr.w	r0, r0, ip
  407700:	fa23 f302 	lsr.w	r3, r3, r2
  407704:	ea4f 0343 	mov.w	r3, r3, lsl #1
  407708:	e7cc      	b.n	4076a4 <__aeabi_d2f+0x14>
  40770a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40770e:	d107      	bne.n	407720 <__aeabi_d2f+0x90>
  407710:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  407714:	bf1e      	ittt	ne
  407716:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40771a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40771e:	4770      	bxne	lr
  407720:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  407724:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407728:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40772c:	4770      	bx	lr
  40772e:	bf00      	nop

00407730 <__aeabi_frsub>:
  407730:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  407734:	e002      	b.n	40773c <__addsf3>
  407736:	bf00      	nop

00407738 <__aeabi_fsub>:
  407738:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040773c <__addsf3>:
  40773c:	0042      	lsls	r2, r0, #1
  40773e:	bf1f      	itttt	ne
  407740:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  407744:	ea92 0f03 	teqne	r2, r3
  407748:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40774c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407750:	d06a      	beq.n	407828 <__addsf3+0xec>
  407752:	ea4f 6212 	mov.w	r2, r2, lsr #24
  407756:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40775a:	bfc1      	itttt	gt
  40775c:	18d2      	addgt	r2, r2, r3
  40775e:	4041      	eorgt	r1, r0
  407760:	4048      	eorgt	r0, r1
  407762:	4041      	eorgt	r1, r0
  407764:	bfb8      	it	lt
  407766:	425b      	neglt	r3, r3
  407768:	2b19      	cmp	r3, #25
  40776a:	bf88      	it	hi
  40776c:	4770      	bxhi	lr
  40776e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407772:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407776:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40777a:	bf18      	it	ne
  40777c:	4240      	negne	r0, r0
  40777e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407782:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  407786:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40778a:	bf18      	it	ne
  40778c:	4249      	negne	r1, r1
  40778e:	ea92 0f03 	teq	r2, r3
  407792:	d03f      	beq.n	407814 <__addsf3+0xd8>
  407794:	f1a2 0201 	sub.w	r2, r2, #1
  407798:	fa41 fc03 	asr.w	ip, r1, r3
  40779c:	eb10 000c 	adds.w	r0, r0, ip
  4077a0:	f1c3 0320 	rsb	r3, r3, #32
  4077a4:	fa01 f103 	lsl.w	r1, r1, r3
  4077a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4077ac:	d502      	bpl.n	4077b4 <__addsf3+0x78>
  4077ae:	4249      	negs	r1, r1
  4077b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4077b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4077b8:	d313      	bcc.n	4077e2 <__addsf3+0xa6>
  4077ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4077be:	d306      	bcc.n	4077ce <__addsf3+0x92>
  4077c0:	0840      	lsrs	r0, r0, #1
  4077c2:	ea4f 0131 	mov.w	r1, r1, rrx
  4077c6:	f102 0201 	add.w	r2, r2, #1
  4077ca:	2afe      	cmp	r2, #254	; 0xfe
  4077cc:	d251      	bcs.n	407872 <__addsf3+0x136>
  4077ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  4077d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4077d6:	bf08      	it	eq
  4077d8:	f020 0001 	biceq.w	r0, r0, #1
  4077dc:	ea40 0003 	orr.w	r0, r0, r3
  4077e0:	4770      	bx	lr
  4077e2:	0049      	lsls	r1, r1, #1
  4077e4:	eb40 0000 	adc.w	r0, r0, r0
  4077e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4077ec:	f1a2 0201 	sub.w	r2, r2, #1
  4077f0:	d1ed      	bne.n	4077ce <__addsf3+0x92>
  4077f2:	fab0 fc80 	clz	ip, r0
  4077f6:	f1ac 0c08 	sub.w	ip, ip, #8
  4077fa:	ebb2 020c 	subs.w	r2, r2, ip
  4077fe:	fa00 f00c 	lsl.w	r0, r0, ip
  407802:	bfaa      	itet	ge
  407804:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  407808:	4252      	neglt	r2, r2
  40780a:	4318      	orrge	r0, r3
  40780c:	bfbc      	itt	lt
  40780e:	40d0      	lsrlt	r0, r2
  407810:	4318      	orrlt	r0, r3
  407812:	4770      	bx	lr
  407814:	f092 0f00 	teq	r2, #0
  407818:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40781c:	bf06      	itte	eq
  40781e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  407822:	3201      	addeq	r2, #1
  407824:	3b01      	subne	r3, #1
  407826:	e7b5      	b.n	407794 <__addsf3+0x58>
  407828:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40782c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407830:	bf18      	it	ne
  407832:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407836:	d021      	beq.n	40787c <__addsf3+0x140>
  407838:	ea92 0f03 	teq	r2, r3
  40783c:	d004      	beq.n	407848 <__addsf3+0x10c>
  40783e:	f092 0f00 	teq	r2, #0
  407842:	bf08      	it	eq
  407844:	4608      	moveq	r0, r1
  407846:	4770      	bx	lr
  407848:	ea90 0f01 	teq	r0, r1
  40784c:	bf1c      	itt	ne
  40784e:	2000      	movne	r0, #0
  407850:	4770      	bxne	lr
  407852:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  407856:	d104      	bne.n	407862 <__addsf3+0x126>
  407858:	0040      	lsls	r0, r0, #1
  40785a:	bf28      	it	cs
  40785c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  407860:	4770      	bx	lr
  407862:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  407866:	bf3c      	itt	cc
  407868:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40786c:	4770      	bxcc	lr
  40786e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  407872:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  407876:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40787a:	4770      	bx	lr
  40787c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  407880:	bf16      	itet	ne
  407882:	4608      	movne	r0, r1
  407884:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  407888:	4601      	movne	r1, r0
  40788a:	0242      	lsls	r2, r0, #9
  40788c:	bf06      	itte	eq
  40788e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  407892:	ea90 0f01 	teqeq	r0, r1
  407896:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40789a:	4770      	bx	lr

0040789c <__aeabi_ui2f>:
  40789c:	f04f 0300 	mov.w	r3, #0
  4078a0:	e004      	b.n	4078ac <__aeabi_i2f+0x8>
  4078a2:	bf00      	nop

004078a4 <__aeabi_i2f>:
  4078a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4078a8:	bf48      	it	mi
  4078aa:	4240      	negmi	r0, r0
  4078ac:	ea5f 0c00 	movs.w	ip, r0
  4078b0:	bf08      	it	eq
  4078b2:	4770      	bxeq	lr
  4078b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4078b8:	4601      	mov	r1, r0
  4078ba:	f04f 0000 	mov.w	r0, #0
  4078be:	e01c      	b.n	4078fa <__aeabi_l2f+0x2a>

004078c0 <__aeabi_ul2f>:
  4078c0:	ea50 0201 	orrs.w	r2, r0, r1
  4078c4:	bf08      	it	eq
  4078c6:	4770      	bxeq	lr
  4078c8:	f04f 0300 	mov.w	r3, #0
  4078cc:	e00a      	b.n	4078e4 <__aeabi_l2f+0x14>
  4078ce:	bf00      	nop

004078d0 <__aeabi_l2f>:
  4078d0:	ea50 0201 	orrs.w	r2, r0, r1
  4078d4:	bf08      	it	eq
  4078d6:	4770      	bxeq	lr
  4078d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4078dc:	d502      	bpl.n	4078e4 <__aeabi_l2f+0x14>
  4078de:	4240      	negs	r0, r0
  4078e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4078e4:	ea5f 0c01 	movs.w	ip, r1
  4078e8:	bf02      	ittt	eq
  4078ea:	4684      	moveq	ip, r0
  4078ec:	4601      	moveq	r1, r0
  4078ee:	2000      	moveq	r0, #0
  4078f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4078f4:	bf08      	it	eq
  4078f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  4078fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4078fe:	fabc f28c 	clz	r2, ip
  407902:	3a08      	subs	r2, #8
  407904:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  407908:	db10      	blt.n	40792c <__aeabi_l2f+0x5c>
  40790a:	fa01 fc02 	lsl.w	ip, r1, r2
  40790e:	4463      	add	r3, ip
  407910:	fa00 fc02 	lsl.w	ip, r0, r2
  407914:	f1c2 0220 	rsb	r2, r2, #32
  407918:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40791c:	fa20 f202 	lsr.w	r2, r0, r2
  407920:	eb43 0002 	adc.w	r0, r3, r2
  407924:	bf08      	it	eq
  407926:	f020 0001 	biceq.w	r0, r0, #1
  40792a:	4770      	bx	lr
  40792c:	f102 0220 	add.w	r2, r2, #32
  407930:	fa01 fc02 	lsl.w	ip, r1, r2
  407934:	f1c2 0220 	rsb	r2, r2, #32
  407938:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40793c:	fa21 f202 	lsr.w	r2, r1, r2
  407940:	eb43 0002 	adc.w	r0, r3, r2
  407944:	bf08      	it	eq
  407946:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40794a:	4770      	bx	lr

0040794c <__aeabi_fmul>:
  40794c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407950:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407954:	bf1e      	ittt	ne
  407956:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40795a:	ea92 0f0c 	teqne	r2, ip
  40795e:	ea93 0f0c 	teqne	r3, ip
  407962:	d06f      	beq.n	407a44 <__aeabi_fmul+0xf8>
  407964:	441a      	add	r2, r3
  407966:	ea80 0c01 	eor.w	ip, r0, r1
  40796a:	0240      	lsls	r0, r0, #9
  40796c:	bf18      	it	ne
  40796e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  407972:	d01e      	beq.n	4079b2 <__aeabi_fmul+0x66>
  407974:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  407978:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40797c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  407980:	fba0 3101 	umull	r3, r1, r0, r1
  407984:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407988:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40798c:	bf3e      	ittt	cc
  40798e:	0049      	lslcc	r1, r1, #1
  407990:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  407994:	005b      	lslcc	r3, r3, #1
  407996:	ea40 0001 	orr.w	r0, r0, r1
  40799a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40799e:	2afd      	cmp	r2, #253	; 0xfd
  4079a0:	d81d      	bhi.n	4079de <__aeabi_fmul+0x92>
  4079a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4079a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4079aa:	bf08      	it	eq
  4079ac:	f020 0001 	biceq.w	r0, r0, #1
  4079b0:	4770      	bx	lr
  4079b2:	f090 0f00 	teq	r0, #0
  4079b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4079ba:	bf08      	it	eq
  4079bc:	0249      	lsleq	r1, r1, #9
  4079be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4079c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4079c6:	3a7f      	subs	r2, #127	; 0x7f
  4079c8:	bfc2      	ittt	gt
  4079ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4079ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4079d2:	4770      	bxgt	lr
  4079d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4079d8:	f04f 0300 	mov.w	r3, #0
  4079dc:	3a01      	subs	r2, #1
  4079de:	dc5d      	bgt.n	407a9c <__aeabi_fmul+0x150>
  4079e0:	f112 0f19 	cmn.w	r2, #25
  4079e4:	bfdc      	itt	le
  4079e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4079ea:	4770      	bxle	lr
  4079ec:	f1c2 0200 	rsb	r2, r2, #0
  4079f0:	0041      	lsls	r1, r0, #1
  4079f2:	fa21 f102 	lsr.w	r1, r1, r2
  4079f6:	f1c2 0220 	rsb	r2, r2, #32
  4079fa:	fa00 fc02 	lsl.w	ip, r0, r2
  4079fe:	ea5f 0031 	movs.w	r0, r1, rrx
  407a02:	f140 0000 	adc.w	r0, r0, #0
  407a06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  407a0a:	bf08      	it	eq
  407a0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  407a10:	4770      	bx	lr
  407a12:	f092 0f00 	teq	r2, #0
  407a16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407a1a:	bf02      	ittt	eq
  407a1c:	0040      	lsleq	r0, r0, #1
  407a1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407a22:	3a01      	subeq	r2, #1
  407a24:	d0f9      	beq.n	407a1a <__aeabi_fmul+0xce>
  407a26:	ea40 000c 	orr.w	r0, r0, ip
  407a2a:	f093 0f00 	teq	r3, #0
  407a2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407a32:	bf02      	ittt	eq
  407a34:	0049      	lsleq	r1, r1, #1
  407a36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407a3a:	3b01      	subeq	r3, #1
  407a3c:	d0f9      	beq.n	407a32 <__aeabi_fmul+0xe6>
  407a3e:	ea41 010c 	orr.w	r1, r1, ip
  407a42:	e78f      	b.n	407964 <__aeabi_fmul+0x18>
  407a44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407a48:	ea92 0f0c 	teq	r2, ip
  407a4c:	bf18      	it	ne
  407a4e:	ea93 0f0c 	teqne	r3, ip
  407a52:	d00a      	beq.n	407a6a <__aeabi_fmul+0x11e>
  407a54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407a58:	bf18      	it	ne
  407a5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407a5e:	d1d8      	bne.n	407a12 <__aeabi_fmul+0xc6>
  407a60:	ea80 0001 	eor.w	r0, r0, r1
  407a64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407a68:	4770      	bx	lr
  407a6a:	f090 0f00 	teq	r0, #0
  407a6e:	bf17      	itett	ne
  407a70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  407a74:	4608      	moveq	r0, r1
  407a76:	f091 0f00 	teqne	r1, #0
  407a7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  407a7e:	d014      	beq.n	407aaa <__aeabi_fmul+0x15e>
  407a80:	ea92 0f0c 	teq	r2, ip
  407a84:	d101      	bne.n	407a8a <__aeabi_fmul+0x13e>
  407a86:	0242      	lsls	r2, r0, #9
  407a88:	d10f      	bne.n	407aaa <__aeabi_fmul+0x15e>
  407a8a:	ea93 0f0c 	teq	r3, ip
  407a8e:	d103      	bne.n	407a98 <__aeabi_fmul+0x14c>
  407a90:	024b      	lsls	r3, r1, #9
  407a92:	bf18      	it	ne
  407a94:	4608      	movne	r0, r1
  407a96:	d108      	bne.n	407aaa <__aeabi_fmul+0x15e>
  407a98:	ea80 0001 	eor.w	r0, r0, r1
  407a9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  407aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407aa8:	4770      	bx	lr
  407aaa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  407aae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  407ab2:	4770      	bx	lr

00407ab4 <__aeabi_fdiv>:
  407ab4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407ab8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  407abc:	bf1e      	ittt	ne
  407abe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  407ac2:	ea92 0f0c 	teqne	r2, ip
  407ac6:	ea93 0f0c 	teqne	r3, ip
  407aca:	d069      	beq.n	407ba0 <__aeabi_fdiv+0xec>
  407acc:	eba2 0203 	sub.w	r2, r2, r3
  407ad0:	ea80 0c01 	eor.w	ip, r0, r1
  407ad4:	0249      	lsls	r1, r1, #9
  407ad6:	ea4f 2040 	mov.w	r0, r0, lsl #9
  407ada:	d037      	beq.n	407b4c <__aeabi_fdiv+0x98>
  407adc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  407ae0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  407ae4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  407ae8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  407aec:	428b      	cmp	r3, r1
  407aee:	bf38      	it	cc
  407af0:	005b      	lslcc	r3, r3, #1
  407af2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  407af6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  407afa:	428b      	cmp	r3, r1
  407afc:	bf24      	itt	cs
  407afe:	1a5b      	subcs	r3, r3, r1
  407b00:	ea40 000c 	orrcs.w	r0, r0, ip
  407b04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  407b08:	bf24      	itt	cs
  407b0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  407b0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407b12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  407b16:	bf24      	itt	cs
  407b18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  407b1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407b20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  407b24:	bf24      	itt	cs
  407b26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  407b2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407b2e:	011b      	lsls	r3, r3, #4
  407b30:	bf18      	it	ne
  407b32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  407b36:	d1e0      	bne.n	407afa <__aeabi_fdiv+0x46>
  407b38:	2afd      	cmp	r2, #253	; 0xfd
  407b3a:	f63f af50 	bhi.w	4079de <__aeabi_fmul+0x92>
  407b3e:	428b      	cmp	r3, r1
  407b40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  407b44:	bf08      	it	eq
  407b46:	f020 0001 	biceq.w	r0, r0, #1
  407b4a:	4770      	bx	lr
  407b4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  407b50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  407b54:	327f      	adds	r2, #127	; 0x7f
  407b56:	bfc2      	ittt	gt
  407b58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  407b5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  407b60:	4770      	bxgt	lr
  407b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  407b66:	f04f 0300 	mov.w	r3, #0
  407b6a:	3a01      	subs	r2, #1
  407b6c:	e737      	b.n	4079de <__aeabi_fmul+0x92>
  407b6e:	f092 0f00 	teq	r2, #0
  407b72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  407b76:	bf02      	ittt	eq
  407b78:	0040      	lsleq	r0, r0, #1
  407b7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  407b7e:	3a01      	subeq	r2, #1
  407b80:	d0f9      	beq.n	407b76 <__aeabi_fdiv+0xc2>
  407b82:	ea40 000c 	orr.w	r0, r0, ip
  407b86:	f093 0f00 	teq	r3, #0
  407b8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  407b8e:	bf02      	ittt	eq
  407b90:	0049      	lsleq	r1, r1, #1
  407b92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  407b96:	3b01      	subeq	r3, #1
  407b98:	d0f9      	beq.n	407b8e <__aeabi_fdiv+0xda>
  407b9a:	ea41 010c 	orr.w	r1, r1, ip
  407b9e:	e795      	b.n	407acc <__aeabi_fdiv+0x18>
  407ba0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  407ba4:	ea92 0f0c 	teq	r2, ip
  407ba8:	d108      	bne.n	407bbc <__aeabi_fdiv+0x108>
  407baa:	0242      	lsls	r2, r0, #9
  407bac:	f47f af7d 	bne.w	407aaa <__aeabi_fmul+0x15e>
  407bb0:	ea93 0f0c 	teq	r3, ip
  407bb4:	f47f af70 	bne.w	407a98 <__aeabi_fmul+0x14c>
  407bb8:	4608      	mov	r0, r1
  407bba:	e776      	b.n	407aaa <__aeabi_fmul+0x15e>
  407bbc:	ea93 0f0c 	teq	r3, ip
  407bc0:	d104      	bne.n	407bcc <__aeabi_fdiv+0x118>
  407bc2:	024b      	lsls	r3, r1, #9
  407bc4:	f43f af4c 	beq.w	407a60 <__aeabi_fmul+0x114>
  407bc8:	4608      	mov	r0, r1
  407bca:	e76e      	b.n	407aaa <__aeabi_fmul+0x15e>
  407bcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  407bd0:	bf18      	it	ne
  407bd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  407bd6:	d1ca      	bne.n	407b6e <__aeabi_fdiv+0xba>
  407bd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  407bdc:	f47f af5c 	bne.w	407a98 <__aeabi_fmul+0x14c>
  407be0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  407be4:	f47f af3c 	bne.w	407a60 <__aeabi_fmul+0x114>
  407be8:	e75f      	b.n	407aaa <__aeabi_fmul+0x15e>
  407bea:	bf00      	nop

00407bec <__gesf2>:
  407bec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  407bf0:	e006      	b.n	407c00 <__cmpsf2+0x4>
  407bf2:	bf00      	nop

00407bf4 <__lesf2>:
  407bf4:	f04f 0c01 	mov.w	ip, #1
  407bf8:	e002      	b.n	407c00 <__cmpsf2+0x4>
  407bfa:	bf00      	nop

00407bfc <__cmpsf2>:
  407bfc:	f04f 0c01 	mov.w	ip, #1
  407c00:	f84d cd04 	str.w	ip, [sp, #-4]!
  407c04:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407c08:	ea4f 0341 	mov.w	r3, r1, lsl #1
  407c0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407c10:	bf18      	it	ne
  407c12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  407c16:	d011      	beq.n	407c3c <__cmpsf2+0x40>
  407c18:	b001      	add	sp, #4
  407c1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  407c1e:	bf18      	it	ne
  407c20:	ea90 0f01 	teqne	r0, r1
  407c24:	bf58      	it	pl
  407c26:	ebb2 0003 	subspl.w	r0, r2, r3
  407c2a:	bf88      	it	hi
  407c2c:	17c8      	asrhi	r0, r1, #31
  407c2e:	bf38      	it	cc
  407c30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  407c34:	bf18      	it	ne
  407c36:	f040 0001 	orrne.w	r0, r0, #1
  407c3a:	4770      	bx	lr
  407c3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  407c40:	d102      	bne.n	407c48 <__cmpsf2+0x4c>
  407c42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  407c46:	d105      	bne.n	407c54 <__cmpsf2+0x58>
  407c48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  407c4c:	d1e4      	bne.n	407c18 <__cmpsf2+0x1c>
  407c4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  407c52:	d0e1      	beq.n	407c18 <__cmpsf2+0x1c>
  407c54:	f85d 0b04 	ldr.w	r0, [sp], #4
  407c58:	4770      	bx	lr
  407c5a:	bf00      	nop

00407c5c <__aeabi_cfrcmple>:
  407c5c:	4684      	mov	ip, r0
  407c5e:	4608      	mov	r0, r1
  407c60:	4661      	mov	r1, ip
  407c62:	e7ff      	b.n	407c64 <__aeabi_cfcmpeq>

00407c64 <__aeabi_cfcmpeq>:
  407c64:	b50f      	push	{r0, r1, r2, r3, lr}
  407c66:	f7ff ffc9 	bl	407bfc <__cmpsf2>
  407c6a:	2800      	cmp	r0, #0
  407c6c:	bf48      	it	mi
  407c6e:	f110 0f00 	cmnmi.w	r0, #0
  407c72:	bd0f      	pop	{r0, r1, r2, r3, pc}

00407c74 <__aeabi_fcmpeq>:
  407c74:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c78:	f7ff fff4 	bl	407c64 <__aeabi_cfcmpeq>
  407c7c:	bf0c      	ite	eq
  407c7e:	2001      	moveq	r0, #1
  407c80:	2000      	movne	r0, #0
  407c82:	f85d fb08 	ldr.w	pc, [sp], #8
  407c86:	bf00      	nop

00407c88 <__aeabi_fcmplt>:
  407c88:	f84d ed08 	str.w	lr, [sp, #-8]!
  407c8c:	f7ff ffea 	bl	407c64 <__aeabi_cfcmpeq>
  407c90:	bf34      	ite	cc
  407c92:	2001      	movcc	r0, #1
  407c94:	2000      	movcs	r0, #0
  407c96:	f85d fb08 	ldr.w	pc, [sp], #8
  407c9a:	bf00      	nop

00407c9c <__aeabi_fcmple>:
  407c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407ca0:	f7ff ffe0 	bl	407c64 <__aeabi_cfcmpeq>
  407ca4:	bf94      	ite	ls
  407ca6:	2001      	movls	r0, #1
  407ca8:	2000      	movhi	r0, #0
  407caa:	f85d fb08 	ldr.w	pc, [sp], #8
  407cae:	bf00      	nop

00407cb0 <__aeabi_fcmpge>:
  407cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cb4:	f7ff ffd2 	bl	407c5c <__aeabi_cfrcmple>
  407cb8:	bf94      	ite	ls
  407cba:	2001      	movls	r0, #1
  407cbc:	2000      	movhi	r0, #0
  407cbe:	f85d fb08 	ldr.w	pc, [sp], #8
  407cc2:	bf00      	nop

00407cc4 <__aeabi_fcmpgt>:
  407cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
  407cc8:	f7ff ffc8 	bl	407c5c <__aeabi_cfrcmple>
  407ccc:	bf34      	ite	cc
  407cce:	2001      	movcc	r0, #1
  407cd0:	2000      	movcs	r0, #0
  407cd2:	f85d fb08 	ldr.w	pc, [sp], #8
  407cd6:	bf00      	nop

00407cd8 <__aeabi_f2iz>:
  407cd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
  407cdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407ce0:	d30f      	bcc.n	407d02 <__aeabi_f2iz+0x2a>
  407ce2:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407ce6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407cea:	d90d      	bls.n	407d08 <__aeabi_f2iz+0x30>
  407cec:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407cf4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  407cf8:	fa23 f002 	lsr.w	r0, r3, r2
  407cfc:	bf18      	it	ne
  407cfe:	4240      	negne	r0, r0
  407d00:	4770      	bx	lr
  407d02:	f04f 0000 	mov.w	r0, #0
  407d06:	4770      	bx	lr
  407d08:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407d0c:	d101      	bne.n	407d12 <__aeabi_f2iz+0x3a>
  407d0e:	0242      	lsls	r2, r0, #9
  407d10:	d105      	bne.n	407d1e <__aeabi_f2iz+0x46>
  407d12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  407d16:	bf08      	it	eq
  407d18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407d1c:	4770      	bx	lr
  407d1e:	f04f 0000 	mov.w	r0, #0
  407d22:	4770      	bx	lr

00407d24 <__aeabi_f2uiz>:
  407d24:	0042      	lsls	r2, r0, #1
  407d26:	d20e      	bcs.n	407d46 <__aeabi_f2uiz+0x22>
  407d28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  407d2c:	d30b      	bcc.n	407d46 <__aeabi_f2uiz+0x22>
  407d2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  407d32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  407d36:	d409      	bmi.n	407d4c <__aeabi_f2uiz+0x28>
  407d38:	ea4f 2300 	mov.w	r3, r0, lsl #8
  407d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407d40:	fa23 f002 	lsr.w	r0, r3, r2
  407d44:	4770      	bx	lr
  407d46:	f04f 0000 	mov.w	r0, #0
  407d4a:	4770      	bx	lr
  407d4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  407d50:	d101      	bne.n	407d56 <__aeabi_f2uiz+0x32>
  407d52:	0242      	lsls	r2, r0, #9
  407d54:	d102      	bne.n	407d5c <__aeabi_f2uiz+0x38>
  407d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  407d5a:	4770      	bx	lr
  407d5c:	f04f 0000 	mov.w	r0, #0
  407d60:	4770      	bx	lr
  407d62:	bf00      	nop
  407d64:	0a0d0a0d 	.word	0x0a0d0a0d
  407d68:	346d6173 	.word	0x346d6173
  407d6c:	63323364 	.word	0x63323364
  407d70:	756d6920 	.word	0x756d6920
  407d74:	6d656420 	.word	0x6d656420
  407d78:	2e2e2e6f 	.word	0x2e2e2e6f
  407d7c:	00000a0d 	.word	0x00000a0d
  407d80:	0000002e 	.word	0x0000002e
  407d84:	61656c70 	.word	0x61656c70
  407d88:	70206573 	.word	0x70206573
  407d8c:	73736572 	.word	0x73736572
  407d90:	74756220 	.word	0x74756220
  407d94:	206e6f74 	.word	0x206e6f74
  407d98:	61206f74 	.word	0x61206f74
  407d9c:	6d206d72 	.word	0x6d206d72
  407da0:	726f746f 	.word	0x726f746f
  407da4:	000a0d73 	.word	0x000a0d73
  407da8:	6f746f6d 	.word	0x6f746f6d
  407dac:	72615f72 	.word	0x72615f72
  407db0:	3a64656d 	.word	0x3a64656d
  407db4:	0d642520 	.word	0x0d642520
  407db8:	0000000a 	.word	0x0000000a
  407dbc:	6c6c6f72 	.word	0x6c6c6f72
  407dc0:	7469702f 	.word	0x7469702f
  407dc4:	792f6863 	.word	0x792f6863
  407dc8:	65207761 	.word	0x65207761
  407dcc:	726f7272 	.word	0x726f7272
  407dd0:	6469702f 	.word	0x6469702f
  407dd4:	6625203a 	.word	0x6625203a
  407dd8:	20662520 	.word	0x20662520
  407ddc:	25206625 	.word	0x25206625
  407de0:	66252066 	.word	0x66252066
  407de4:	00000a0d 	.word	0x00000a0d
  407de8:	00787061 	.word	0x00787061
  407dec:	642e5041 	.word	0x642e5041
  407df0:	72697365 	.word	0x72697365
  407df4:	615f6465 	.word	0x615f6465
  407df8:	656c676e 	.word	0x656c676e
  407dfc:	203a785f 	.word	0x203a785f
  407e00:	0a0d6625 	.word	0x0a0d6625
  407e04:	00000000 	.word	0x00000000
  407e08:	00797061 	.word	0x00797061
  407e0c:	642e5041 	.word	0x642e5041
  407e10:	72697365 	.word	0x72697365
  407e14:	615f6465 	.word	0x615f6465
  407e18:	656c676e 	.word	0x656c676e
  407e1c:	203a795f 	.word	0x203a795f
  407e20:	0a0d6625 	.word	0x0a0d6625
  407e24:	00000000 	.word	0x00000000
  407e28:	0000706b 	.word	0x0000706b
  407e2c:	666e6f63 	.word	0x666e6f63
  407e30:	702e6769 	.word	0x702e6769
  407e34:	6b5f6469 	.word	0x6b5f6469
  407e38:	25203a70 	.word	0x25203a70
  407e3c:	000a0d66 	.word	0x000a0d66
  407e40:	0000696b 	.word	0x0000696b
  407e44:	666e6f63 	.word	0x666e6f63
  407e48:	702e6769 	.word	0x702e6769
  407e4c:	6b5f6469 	.word	0x6b5f6469
  407e50:	25203a69 	.word	0x25203a69
  407e54:	000a0d66 	.word	0x000a0d66
  407e58:	0000646b 	.word	0x0000646b
  407e5c:	666e6f63 	.word	0x666e6f63
  407e60:	702e6769 	.word	0x702e6769
  407e64:	6b5f6469 	.word	0x6b5f6469
  407e68:	25203a64 	.word	0x25203a64
  407e6c:	000a0d66 	.word	0x000a0d66
  407e70:	5f756d69 	.word	0x5f756d69
  407e74:	696c6163 	.word	0x696c6163
  407e78:	74617262 	.word	0x74617262
  407e7c:	00000065 	.word	0x00000065
  407e80:	5f756d69 	.word	0x5f756d69
  407e84:	696c6163 	.word	0x696c6163
  407e88:	74617262 	.word	0x74617262
  407e8c:	25203a65 	.word	0x25203a65
  407e90:	000a0d64 	.word	0x000a0d64
  407e94:	6f746f6d 	.word	0x6f746f6d
  407e98:	72615f72 	.word	0x72615f72
  407e9c:	0064656d 	.word	0x0064656d
  407ea0:	6f746f6d 	.word	0x6f746f6d
  407ea4:	666f5f72 	.word	0x666f5f72
  407ea8:	74657366 	.word	0x74657366
  407eac:	00000000 	.word	0x00000000
  407eb0:	6f746f6d 	.word	0x6f746f6d
  407eb4:	666f5f72 	.word	0x666f5f72
  407eb8:	74657366 	.word	0x74657366
  407ebc:	6425203a 	.word	0x6425203a
  407ec0:	00000a0d 	.word	0x00000a0d
  407ec4:	6f746f6d 	.word	0x6f746f6d
  407ec8:	696d5f72 	.word	0x696d5f72
  407ecc:	0000006e 	.word	0x0000006e
  407ed0:	6f746f6d 	.word	0x6f746f6d
  407ed4:	696d2072 	.word	0x696d2072
  407ed8:	6f63206e 	.word	0x6f63206e
  407edc:	6e616d6d 	.word	0x6e616d6d
  407ee0:	73692064 	.word	0x73692064
  407ee4:	64657573 	.word	0x64657573
  407ee8:	00000a0d 	.word	0x00000a0d
  407eec:	6f746f6d 	.word	0x6f746f6d
  407ef0:	696d5f72 	.word	0x696d5f72
  407ef4:	00000064 	.word	0x00000064
  407ef8:	6f746f6d 	.word	0x6f746f6d
  407efc:	696d2072 	.word	0x696d2072
  407f00:	6f632064 	.word	0x6f632064
  407f04:	6e616d6d 	.word	0x6e616d6d
  407f08:	73692064 	.word	0x73692064
  407f0c:	64657573 	.word	0x64657573
  407f10:	00000a0d 	.word	0x00000a0d
  407f14:	6f746f6d 	.word	0x6f746f6d
  407f18:	616d5f72 	.word	0x616d5f72
  407f1c:	00000078 	.word	0x00000078
  407f20:	6f746f6d 	.word	0x6f746f6d
  407f24:	616d2072 	.word	0x616d2072
  407f28:	6f632078 	.word	0x6f632078
  407f2c:	6e616d6d 	.word	0x6e616d6d
  407f30:	73692064 	.word	0x73692064
  407f34:	64657573 	.word	0x64657573
  407f38:	00000a0d 	.word	0x00000a0d
  407f3c:	5f676f6c 	.word	0x5f676f6c
  407f40:	00756d69 	.word	0x00756d69
  407f44:	5f676f6c 	.word	0x5f676f6c
  407f48:	3a756d69 	.word	0x3a756d69
  407f4c:	0d642520 	.word	0x0d642520
  407f50:	0000000a 	.word	0x0000000a
  407f54:	5f676f6c 	.word	0x5f676f6c
  407f58:	6f746f6d 	.word	0x6f746f6d
  407f5c:	00000072 	.word	0x00000072
  407f60:	5f676f6c 	.word	0x5f676f6c
  407f64:	6f746f6d 	.word	0x6f746f6d
  407f68:	25203a72 	.word	0x25203a72
  407f6c:	000a0d64 	.word	0x000a0d64
  407f70:	00000020 	.word	0x00000020
  407f74:	5f697774 	.word	0x5f697774
  407f78:	7473616d 	.word	0x7473616d
  407f7c:	695f7265 	.word	0x695f7265
  407f80:	3a74696e 	.word	0x3a74696e
  407f84:	69616620 	.word	0x69616620
  407f88:	0d64656c 	.word	0x0d64656c
  407f8c:	0000000a 	.word	0x0000000a
  407f90:	5f697774 	.word	0x5f697774
  407f94:	7473616d 	.word	0x7473616d
  407f98:	695f7265 	.word	0x695f7265
  407f9c:	3a74696e 	.word	0x3a74696e
  407fa0:	63757320 	.word	0x63757320
  407fa4:	73736563 	.word	0x73736563
  407fa8:	00000a0d 	.word	0x00000a0d
  407fac:	5f697774 	.word	0x5f697774
  407fb0:	626f7270 	.word	0x626f7270
  407fb4:	66203a65 	.word	0x66203a65
  407fb8:	656c6961 	.word	0x656c6961
  407fbc:	000a0d64 	.word	0x000a0d64
  407fc0:	5f697774 	.word	0x5f697774
  407fc4:	626f7270 	.word	0x626f7270
  407fc8:	73203a65 	.word	0x73203a65
  407fcc:	65636375 	.word	0x65636375
  407fd0:	0a0d7373 	.word	0x0a0d7373
  407fd4:	00000000 	.word	0x00000000
  407fd8:	62616e45 	.word	0x62616e45
  407fdc:	0064656c 	.word	0x0064656c
  407fe0:	61736944 	.word	0x61736944
  407fe4:	64656c62 	.word	0x64656c62
  407fe8:	00000000 	.word	0x00000000
  407fec:	69766544 	.word	0x69766544
  407ff0:	203a6563 	.word	0x203a6563
  407ff4:	31257830 	.word	0x31257830
  407ff8:	000a0d78 	.word	0x000a0d78
  407ffc:	65656c53 	.word	0x65656c53
  408000:	6f4d2070 	.word	0x6f4d2070
  408004:	203a6564 	.word	0x203a6564
  408008:	0a0d7325 	.word	0x0a0d7325
  40800c:	00000000 	.word	0x00000000
  408010:	636f6c43 	.word	0x636f6c43
  408014:	6f53206b 	.word	0x6f53206b
  408018:	65637275 	.word	0x65637275
  40801c:	0000203a 	.word	0x0000203a
  408020:	65746e49 	.word	0x65746e49
  408024:	6c616e72 	.word	0x6c616e72
  408028:	484d3820 	.word	0x484d3820
  40802c:	736f207a 	.word	0x736f207a
  408030:	6c6c6963 	.word	0x6c6c6963
  408034:	726f7461 	.word	0x726f7461
  408038:	00000a0d 	.word	0x00000a0d
  40803c:	204c4c50 	.word	0x204c4c50
  408040:	68746977 	.word	0x68746977
  408044:	61205820 	.word	0x61205820
  408048:	20736978 	.word	0x20736978
  40804c:	6f727967 	.word	0x6f727967
  408050:	706f6373 	.word	0x706f6373
  408054:	65722065 	.word	0x65722065
  408058:	65726566 	.word	0x65726566
  40805c:	0d65636e 	.word	0x0d65636e
  408060:	0000000a 	.word	0x0000000a
  408064:	6f727947 	.word	0x6f727947
  408068:	706f6373 	.word	0x706f6373
  40806c:	00203a65 	.word	0x00203a65
  408070:	20303532 	.word	0x20303532
  408074:	0d737064 	.word	0x0d737064
  408078:	0000000a 	.word	0x0000000a
  40807c:	20303035 	.word	0x20303035
  408080:	0d737064 	.word	0x0d737064
  408084:	0000000a 	.word	0x0000000a
  408088:	30303031 	.word	0x30303031
  40808c:	73706420 	.word	0x73706420
  408090:	00000a0d 	.word	0x00000a0d
  408094:	30303032 	.word	0x30303032
  408098:	73706420 	.word	0x73706420
  40809c:	00000a0d 	.word	0x00000a0d
  4080a0:	5f657375 	.word	0x5f657375
  4080a4:	696c6163 	.word	0x696c6163
  4080a8:	74617262 	.word	0x74617262
  4080ac:	25203a65 	.word	0x25203a65
  4080b0:	000a0d64 	.word	0x000a0d64
  4080b4:	75746361 	.word	0x75746361
  4080b8:	745f6c61 	.word	0x745f6c61
  4080bc:	73657268 	.word	0x73657268
  4080c0:	646c6f68 	.word	0x646c6f68
  4080c4:	6625203a 	.word	0x6625203a
  4080c8:	00000a0d 	.word	0x00000a0d
  4080cc:	5f737064 	.word	0x5f737064
  4080d0:	5f726570 	.word	0x5f726570
  4080d4:	69676964 	.word	0x69676964
  4080d8:	25203a74 	.word	0x25203a74
  4080dc:	000a0d66 	.word	0x000a0d66
  4080e0:	676e6172 	.word	0x676e6172
  4080e4:	65705f65 	.word	0x65705f65
  4080e8:	69645f72 	.word	0x69645f72
  4080ec:	3a746967 	.word	0x3a746967
  4080f0:	0d662520 	.word	0x0d662520
  4080f4:	0000000a 	.word	0x0000000a
  4080f8:	696c6163 	.word	0x696c6163
  4080fc:	74617262 	.word	0x74617262
  408100:	20676e69 	.word	0x20676e69
  408104:	2e756d69 	.word	0x2e756d69
  408108:	0a0d2e2e 	.word	0x0a0d2e2e
  40810c:	00000000 	.word	0x00000000
  408110:	696c6163 	.word	0x696c6163
  408114:	74617262 	.word	0x74617262
  408118:	206e6f69 	.word	0x206e6f69
  40811c:	706d6f63 	.word	0x706d6f63
  408120:	6574656c 	.word	0x6574656c
  408124:	000a0d2e 	.word	0x000a0d2e
  408128:	6f746f6d 	.word	0x6f746f6d
  40812c:	6e695f72 	.word	0x6e695f72
  408130:	0a0d7469 	.word	0x0a0d7469
  408134:	00000000 	.word	0x00000000
  408138:	6f746f6d 	.word	0x6f746f6d
  40813c:	756f5f72 	.word	0x756f5f72
  408140:	74757074 	.word	0x74757074
  408144:	6425203a 	.word	0x6425203a
  408148:	00000a0d 	.word	0x00000a0d
  40814c:	00000001 	.word	0x00000001
  408150:	00000002 	.word	0x00000002
  408154:	00000004 	.word	0x00000004
  408158:	00000008 	.word	0x00000008
  40815c:	00000010 	.word	0x00000010
  408160:	00000020 	.word	0x00000020
  408164:	00000040 	.word	0x00000040
  408168:	00000080 	.word	0x00000080
  40816c:	00000100 	.word	0x00000100
  408170:	00000200 	.word	0x00000200
  408174:	00000400 	.word	0x00000400
  408178:	74727173 	.word	0x74727173
  40817c:	00000000 	.word	0x00000000

00408180 <atanlo>:
  408180:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  408190:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

004081a0 <atanhi>:
  4081a0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  4081b0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

004081c0 <_global_impure_ptr>:
  4081c0:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  4081d0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4081e0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4081f0:	63626139 00666564                       9abcdef.

004081f8 <tinytens>:
  4081f8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  408208:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  408218:	64ac6f43 11680628                       Co.d(.h.

00408220 <fpi.6179>:
  408220:	00000035 fffffbce 000003cb 00000001     5...............
  408230:	00000000                                ....

00408234 <fpinan.6215>:
  408234:	00000034 fffffbce 000003cb 00000001     4...............
  408244:	00000000 69666e49 7974696e 4e614e00     ....Infinity.NaN
  408254:	00000000                                ....

00408258 <__sf_fake_stdin>:
	...

00408278 <__sf_fake_stdout>:
	...

00408298 <__sf_fake_stderr>:
	...
  4082b8:	4f500043 00584953 0000002e 00000000     C.POSIX.........

004082c8 <__mprec_tens>:
  4082c8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4082d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4082e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4082f8:	00000000 412e8480 00000000 416312d0     .......A......cA
  408308:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408318:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408328:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408338:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408348:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408358:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408368:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408378:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408388:	79d99db4 44ea7843                       ...yCx.D

00408390 <__mprec_bigtens>:
  408390:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4083a0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4083b0:	7f73bf3c 75154fdd                       <.s..O.u

004083b8 <p05.6097>:
  4083b8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4083c8:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

004083d5 <_ctype_>:
  4083d5:	20202000 20202020 28282020 20282828     .         ((((( 
  4083e5:	20202020 20202020 20202020 20202020                     
  4083f5:	10108820 10101010 10101010 10101010      ...............
  408405:	04040410 04040404 10040404 10101010     ................
  408415:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408425:	01010101 01010101 01010101 10101010     ................
  408435:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408445:	02020202 02020202 02020202 10101010     ................
  408455:	00000020 00000000 00000000 00000000      ...............
	...

004084d8 <_init>:
  4084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4084da:	bf00      	nop
  4084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4084de:	bc08      	pop	{r3}
  4084e0:	469e      	mov	lr, r3
  4084e2:	4770      	bx	lr

004084e4 <__init_array_start>:
  4084e4:	004000f1 	.word	0x004000f1

004084e8 <_fini>:
  4084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4084ea:	bf00      	nop
  4084ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4084ee:	bc08      	pop	{r3}
  4084f0:	469e      	mov	lr, r3
  4084f2:	4770      	bx	lr
  4084f4:	0000      	movs	r0, r0
	...

004084f8 <__portable_delay_cycles_veneer>:
  4084f8:	f85f f000 	ldr.w	pc, [pc]	; 4084fc <__portable_delay_cycles_veneer+0x4>
  4084fc:	20000001 	.word	0x20000001

00408500 <__fini_array_start>:
  408500:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <kp>:
2000000c:	0000 3f80                                   ...?

20000010 <SystemCoreClock>:
20000010:	0900 003d                                   ..=.

20000014 <__fdlib_version>:
20000014:	0001 0000                                   ....

20000018 <impure_data>:
20000018:	0000 0000 8258 0040 8278 0040 8298 0040     ....X.@.x.@...@.
	...

20000078 <_impure_ptr>:
20000078:	0018 2000                                   ... 

2000007c <__global_locale>:
2000007c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000009c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000011c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000013c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000015c:	6c41 0040 5edd 0040 0000 0000 83d5 0040     Al@..^@.......@.
2000016c:	82c0 0040 83c9 0040 83c9 0040 83c9 0040     ..@...@...@...@.
2000017c:	83c9 0040 83c9 0040 83c9 0040 83c9 0040     ..@...@...@...@.
2000018c:	83c9 0040 83c9 0040 ffff ffff ffff ffff     ..@...@.........
2000019c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
