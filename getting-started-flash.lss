
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000654c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  0040654c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000001e4  200001e8  00406734  000201e8  2**2
                  ALLOC
  3 .stack        00003004  200003cc  00406918  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012317  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031b5  00000000  00000000  00032597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005aa9  00000000  00000000  0003574c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e08  00000000  00000000  0003b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c98  00000000  00000000  0003bffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001747f  00000000  00000000  0003cc95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011db9  00000000  00000000  00054114  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000553b5  00000000  00000000  00065ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002dc0  00000000  00000000  000bb284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200033d0 	.word	0x200033d0
  400004:	00401cbd 	.word	0x00401cbd
  400008:	00401cb9 	.word	0x00401cb9
  40000c:	00401cb9 	.word	0x00401cb9
  400010:	00401cb9 	.word	0x00401cb9
  400014:	00401cb9 	.word	0x00401cb9
  400018:	00401cb9 	.word	0x00401cb9
	...
  40002c:	00401cb9 	.word	0x00401cb9
  400030:	00401cb9 	.word	0x00401cb9
  400034:	00000000 	.word	0x00000000
  400038:	00401cb9 	.word	0x00401cb9
  40003c:	00400409 	.word	0x00400409
  400040:	00401cb9 	.word	0x00401cb9
  400044:	00401cb9 	.word	0x00401cb9
  400048:	00401cb9 	.word	0x00401cb9
  40004c:	00401cb9 	.word	0x00401cb9
  400050:	00401cb9 	.word	0x00401cb9
  400054:	00401cb9 	.word	0x00401cb9
  400058:	00401cb9 	.word	0x00401cb9
  40005c:	00401cb9 	.word	0x00401cb9
  400060:	00401cb9 	.word	0x00401cb9
  400064:	00401cb9 	.word	0x00401cb9
  400068:	00000000 	.word	0x00000000
  40006c:	00401901 	.word	0x00401901
  400070:	00401911 	.word	0x00401911
  400074:	00401921 	.word	0x00401921
  400078:	00401cb9 	.word	0x00401cb9
  40007c:	00401cb9 	.word	0x00401cb9
	...
  400088:	00401cb9 	.word	0x00401cb9
  40008c:	00401cb9 	.word	0x00401cb9
  400090:	00401cb9 	.word	0x00401cb9
  400094:	00401cb9 	.word	0x00401cb9
  400098:	00401cb9 	.word	0x00401cb9
  40009c:	00401cb9 	.word	0x00401cb9
  4000a0:	00401cb9 	.word	0x00401cb9
  4000a4:	00401cb9 	.word	0x00401cb9
  4000a8:	00401cb9 	.word	0x00401cb9
  4000ac:	00401cb9 	.word	0x00401cb9
  4000b0:	00401cb9 	.word	0x00401cb9
  4000b4:	00401cb9 	.word	0x00401cb9
  4000b8:	00401cb9 	.word	0x00401cb9
  4000bc:	00401cb9 	.word	0x00401cb9
  4000c0:	00401cb9 	.word	0x00401cb9
  4000c4:	00401cb9 	.word	0x00401cb9
  4000c8:	00401cb9 	.word	0x00401cb9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e8 	.word	0x200001e8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040654c 	.word	0x0040654c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001ec 	.word	0x200001ec
  40011c:	0040654c 	.word	0x0040654c
  400120:	0040654c 	.word	0x0040654c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 fea4 	bl	401e78 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 fc30 	bl	401998 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 fc58 	bl	4019ec <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 fc5c 	bl	4019fc <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 fc5f 	bl	401a0c <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 fbec 	bl	401930 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f001 fe04 	bl	401d64 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f001 fe8b 	bl	401e78 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	200002f4 	.word	0x200002f4
  4001a8:	200002ec 	.word	0x200002ec

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200002f0 	.word	0x200002f0
  4001f8:	200002f4 	.word	0x200002f4

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 fc54 	bl	401ac0 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 fc49 	bl	401ac0 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 fc52 	bl	401ae8 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 fc45 	bl	401ae8 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 fc10 	bl	401ab0 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 fc04 	bl	401ab0 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 fc0a 	bl	401ad4 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 fbfe 	bl	401ad4 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <handle_console>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

void handle_console(uint8_t cmd)
{
  4002f4:	b508      	push	{r3, lr}
    switch(cmd) {
  4002f6:	3802      	subs	r0, #2
  4002f8:	2804      	cmp	r0, #4
  4002fa:	d812      	bhi.n	400322 <handle_console+0x2e>
  4002fc:	e8df f000 	tbb	[pc, r0]
  400300:	0f030609 	.word	0x0f030609
  400304:	0c          	.byte	0x0c
  400305:	00          	.byte	0x00
        case CS_PWMMAX:
        servo_max();
  400306:	f000 fee3 	bl	4010d0 <servo_max>
        break;
  40030a:	bd08      	pop	{r3, pc}
        case CS_PWMMID:
        servo_mid();
  40030c:	f000 fef6 	bl	4010fc <servo_mid>
        break;
  400310:	bd08      	pop	{r3, pc}
        case CS_PWMMIN:
        servo_min();
  400312:	f000 fec7 	bl	4010a4 <servo_min>
        break;
  400316:	bd08      	pop	{r3, pc}
        case CS_PWMSTEPDEC:
        servo_decrement();
  400318:	f000 ff1c 	bl	401154 <servo_decrement>
        break;
  40031c:	bd08      	pop	{r3, pc}
        case CS_PWMSTEPINC:
        servo_increment();
  40031e:	f000 ff03 	bl	401128 <servo_increment>
  400322:	bd08      	pop	{r3, pc}

00400324 <main>:
        break;               
    }
}

int main(void)
{
  400324:	b570      	push	{r4, r5, r6, lr}
  400326:	b084      	sub	sp, #16
    sysclk_init();
  400328:	f7ff fefe 	bl	400128 <sysclk_init>
    board_init();
  40032c:	f000 ff9a 	bl	401264 <board_init>

    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400330:	2013      	movs	r0, #19
  400332:	f001 fb73 	bl	401a1c <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400336:	201f      	movs	r0, #31
  400338:	f001 fb70 	bl	401a1c <pmc_enable_periph_clk>
    cph_millis_init();
  40033c:	f000 f86c 	bl	400418 <cph_millis_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400340:	2009      	movs	r0, #9
  400342:	f001 fb6b 	bl	401a1c <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400346:	4c24      	ldr	r4, [pc, #144]	; (4003d8 <main+0xb4>)
  400348:	4b24      	ldr	r3, [pc, #144]	; (4003dc <main+0xb8>)
  40034a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40034c:	4a24      	ldr	r2, [pc, #144]	; (4003e0 <main+0xbc>)
  40034e:	4b25      	ldr	r3, [pc, #148]	; (4003e4 <main+0xc0>)
  400350:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400352:	4a25      	ldr	r2, [pc, #148]	; (4003e8 <main+0xc4>)
  400354:	4b25      	ldr	r3, [pc, #148]	; (4003ec <main+0xc8>)
  400356:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400358:	4b25      	ldr	r3, [pc, #148]	; (4003f0 <main+0xcc>)
  40035a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  40035c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400360:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400362:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400366:	9303      	str	r3, [sp, #12]
  400368:	2009      	movs	r0, #9
  40036a:	f001 fb57 	bl	401a1c <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40036e:	a901      	add	r1, sp, #4
  400370:	4620      	mov	r0, r4
  400372:	f001 fb81 	bl	401a78 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400376:	4c1f      	ldr	r4, [pc, #124]	; (4003f4 <main+0xd0>)
  400378:	6823      	ldr	r3, [r4, #0]
  40037a:	2100      	movs	r1, #0
  40037c:	6898      	ldr	r0, [r3, #8]
  40037e:	f002 fe99 	bl	4030b4 <setbuf>
	setbuf(stdin, NULL);
  400382:	6823      	ldr	r3, [r4, #0]
  400384:	2100      	movs	r1, #0
  400386:	6858      	ldr	r0, [r3, #4]
  400388:	f002 fe94 	bl	4030b4 <setbuf>
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  40038c:	481a      	ldr	r0, [pc, #104]	; (4003f8 <main+0xd4>)
  40038e:	f002 fe89 	bl	4030a4 <puts>
  400392:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        printf(".");
  400394:	4e19      	ldr	r6, [pc, #100]	; (4003fc <main+0xd8>)
        delay_ms(250);
  400396:	4d1a      	ldr	r5, [pc, #104]	; (400400 <main+0xdc>)
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        printf(".");
  400398:	4630      	mov	r0, r6
  40039a:	f002 fe11 	bl	402fc0 <iprintf>
        delay_ms(250);
  40039e:	4628      	mov	r0, r5
  4003a0:	f006 f8ce 	bl	406540 <__portable_delay_cycles_veneer>
    cph_millis_init();
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  4003a4:	3c01      	subs	r4, #1
  4003a6:	d1f7      	bne.n	400398 <main+0x74>
        printf(".");
        delay_ms(250);
    }
    printf("\r\n");
  4003a8:	4816      	ldr	r0, [pc, #88]	; (400404 <main+0xe0>)
  4003aa:	f002 fe09 	bl	402fc0 <iprintf>

    
    if (imu_init()) {
  4003ae:	f000 fcc3 	bl	400d38 <imu_init>
  4003b2:	b170      	cbz	r0, 4003d2 <main+0xae>

        servo_init();
  4003b4:	f000 fe0a 	bl	400fcc <servo_init>
        // }
        
        

        // Calibrate the imu
        imu_calibrate();
  4003b8:	f000 fcda 	bl	400d70 <imu_calibrate>

        

        while(true) {
            imu_tick();
  4003bc:	f000 fce4 	bl	400d88 <imu_tick>
            servo_tick();
  4003c0:	f000 fe68 	bl	401094 <servo_tick>
            pid_tick();
  4003c4:	f000 fedc 	bl	401180 <pid_tick>
            uint8_t command = cph_console_tick();
  4003c8:	f000 f838 	bl	40043c <cph_console_tick>

            handle_console(command);
  4003cc:	f7ff ff92 	bl	4002f4 <handle_console>
  4003d0:	e7f4      	b.n	4003bc <main+0x98>
    //         delay_ms(500); 
    //     }


    // }
}
  4003d2:	2000      	movs	r0, #0
  4003d4:	b004      	add	sp, #16
  4003d6:	bd70      	pop	{r4, r5, r6, pc}
  4003d8:	400e0800 	.word	0x400e0800
  4003dc:	200002f4 	.word	0x200002f4
  4003e0:	0040027d 	.word	0x0040027d
  4003e4:	200002f0 	.word	0x200002f0
  4003e8:	004001fd 	.word	0x004001fd
  4003ec:	200002ec 	.word	0x200002ec
  4003f0:	07270e00 	.word	0x07270e00
  4003f4:	20000078 	.word	0x20000078
  4003f8:	00406000 	.word	0x00406000
  4003fc:	0040601c 	.word	0x0040601c
  400400:	0020b28a 	.word	0x0020b28a
  400404:	00406018 	.word	0x00406018

00400408 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  400408:	4a02      	ldr	r2, [pc, #8]	; (400414 <SysTick_Handler+0xc>)
  40040a:	6813      	ldr	r3, [r2, #0]
  40040c:	3301      	adds	r3, #1
  40040e:	6013      	str	r3, [r2, #0]
  400410:	4770      	bx	lr
  400412:	bf00      	nop
  400414:	20000204 	.word	0x20000204

00400418 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400418:	4b05      	ldr	r3, [pc, #20]	; (400430 <cph_millis_init+0x18>)
  40041a:	4a06      	ldr	r2, [pc, #24]	; (400434 <cph_millis_init+0x1c>)
  40041c:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40041e:	21f0      	movs	r1, #240	; 0xf0
  400420:	4a05      	ldr	r2, [pc, #20]	; (400438 <cph_millis_init+0x20>)
  400422:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400426:	2200      	movs	r2, #0
  400428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40042a:	2207      	movs	r2, #7
  40042c:	601a      	str	r2, [r3, #0]
  40042e:	4770      	bx	lr
  400430:	e000e010 	.word	0xe000e010
  400434:	0001d4bf 	.word	0x0001d4bf
  400438:	e000ed00 	.word	0xe000ed00

0040043c <cph_console_tick>:

uint8_t uc_char;
uint8_t uc_flag;

uint8_t cph_console_tick(void)
{
  40043c:	b508      	push	{r3, lr}
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
  40043e:	4910      	ldr	r1, [pc, #64]	; (400480 <cph_console_tick+0x44>)
  400440:	4810      	ldr	r0, [pc, #64]	; (400484 <cph_console_tick+0x48>)
  400442:	f001 fb3d 	bl	401ac0 <uart_read>
  400446:	b2c0      	uxtb	r0, r0
  400448:	4b0f      	ldr	r3, [pc, #60]	; (400488 <cph_console_tick+0x4c>)
  40044a:	7018      	strb	r0, [r3, #0]
    if (!uc_flag) {
  40044c:	b9a0      	cbnz	r0, 400478 <cph_console_tick+0x3c>
        switch (uc_char) {
  40044e:	4b0c      	ldr	r3, [pc, #48]	; (400480 <cph_console_tick+0x44>)
  400450:	781b      	ldrb	r3, [r3, #0]
  400452:	2b68      	cmp	r3, #104	; 0x68
  400454:	d00c      	beq.n	400470 <cph_console_tick+0x34>
  400456:	d805      	bhi.n	400464 <cph_console_tick+0x28>
  400458:	2b2b      	cmp	r3, #43	; 0x2b
  40045a:	d00b      	beq.n	400474 <cph_console_tick+0x38>
            case 'm':
            return CS_PWMMID;
            case 'h':
            return CS_PWMMAX;
            case '-':
            return CS_PWMSTEPDEC;
  40045c:	2b2d      	cmp	r3, #45	; 0x2d
  40045e:	bf08      	it	eq
  400460:	2006      	moveq	r0, #6
  400462:	bd08      	pop	{r3, pc}

uint8_t cph_console_tick(void)
{
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
    if (!uc_flag) {
        switch (uc_char) {
  400464:	2b6c      	cmp	r3, #108	; 0x6c
  400466:	d009      	beq.n	40047c <cph_console_tick+0x40>
            case 'l':
            return CS_PWMMIN;
            case 'm':
            return CS_PWMMID;
  400468:	2b6d      	cmp	r3, #109	; 0x6d
  40046a:	bf08      	it	eq
  40046c:	2003      	moveq	r0, #3
  40046e:	bd08      	pop	{r3, pc}
            case 'h':
            return CS_PWMMAX;
  400470:	2004      	movs	r0, #4
  400472:	bd08      	pop	{r3, pc}
            case '-':
            return CS_PWMSTEPDEC;
            case '+':
            return CS_PWMSTEPINC;
  400474:	2005      	movs	r0, #5
  400476:	bd08      	pop	{r3, pc}
            default:
            return CS_NOINPUT;              
        }
    } else {
        return CS_NOINPUT;
  400478:	2000      	movs	r0, #0
  40047a:	bd08      	pop	{r3, pc}
{
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
    if (!uc_flag) {
        switch (uc_char) {
            case 'l':
            return CS_PWMMIN;
  40047c:	2002      	movs	r0, #2
            return CS_NOINPUT;              
        }
    } else {
        return CS_NOINPUT;
    }
  40047e:	bd08      	pop	{r3, pc}
  400480:	20000369 	.word	0x20000369
  400484:	400e0800 	.word	0x400e0800
  400488:	20000368 	.word	0x20000368

0040048c <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  40048c:	b500      	push	{lr}
  40048e:	b089      	sub	sp, #36	; 0x24
  400490:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  400494:	2368      	movs	r3, #104	; 0x68
  400496:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  40049a:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  40049e:	2301      	movs	r3, #1
  4004a0:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  4004a2:	f10d 0207 	add.w	r2, sp, #7
  4004a6:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  4004a8:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4004aa:	a903      	add	r1, sp, #12
  4004ac:	4806      	ldr	r0, [pc, #24]	; (4004c8 <write_register8+0x3c>)
  4004ae:	f001 f833 	bl	401518 <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4004b2:	b910      	cbnz	r0, 4004ba <write_register8+0x2e>
        puts("write_register: success\r\n");
  4004b4:	4805      	ldr	r0, [pc, #20]	; (4004cc <write_register8+0x40>)
  4004b6:	f002 fdf5 	bl	4030a4 <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  4004ba:	4805      	ldr	r0, [pc, #20]	; (4004d0 <write_register8+0x44>)
  4004bc:	f006 f840 	bl	406540 <__portable_delay_cycles_veneer>
}
  4004c0:	b009      	add	sp, #36	; 0x24
  4004c2:	f85d fb04 	ldr.w	pc, [sp], #4
  4004c6:	bf00      	nop
  4004c8:	40018000 	.word	0x40018000
  4004cc:	00406020 	.word	0x00406020
  4004d0:	00014ed3 	.word	0x00014ed3

004004d4 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  4004d4:	b510      	push	{r4, lr}
  4004d6:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4004d8:	4b0e      	ldr	r3, [pc, #56]	; (400514 <read_register8+0x40>)
  4004da:	2200      	movs	r2, #0
  4004dc:	601a      	str	r2, [r3, #0]
  4004de:	605a      	str	r2, [r3, #4]
  4004e0:	609a      	str	r2, [r3, #8]
  4004e2:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4004e4:	2268      	movs	r2, #104	; 0x68
  4004e6:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  4004ea:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4004ee:	2201      	movs	r2, #1
  4004f0:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  4004f2:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4004f4:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4004f6:	a901      	add	r1, sp, #4
  4004f8:	4807      	ldr	r0, [pc, #28]	; (400518 <read_register8+0x44>)
  4004fa:	f000 ffa5 	bl	401448 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4004fe:	b910      	cbnz	r0, 400506 <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  400500:	4b04      	ldr	r3, [pc, #16]	; (400514 <read_register8+0x40>)
  400502:	781c      	ldrb	r4, [r3, #0]
  400504:	e000      	b.n	400508 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  400506:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400508:	4804      	ldr	r0, [pc, #16]	; (40051c <read_register8+0x48>)
  40050a:	f006 f819 	bl	406540 <__portable_delay_cycles_veneer>

    return value;
}
  40050e:	4620      	mov	r0, r4
  400510:	b006      	add	sp, #24
  400512:	bd10      	pop	{r4, pc}
  400514:	20000208 	.word	0x20000208
  400518:	40018000 	.word	0x40018000
  40051c:	00014ed3 	.word	0x00014ed3

00400520 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  400520:	b510      	push	{r4, lr}
  400522:	b086      	sub	sp, #24
  400524:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400526:	4b0c      	ldr	r3, [pc, #48]	; (400558 <read_bytes+0x38>)
  400528:	2100      	movs	r1, #0
  40052a:	6019      	str	r1, [r3, #0]
  40052c:	6059      	str	r1, [r3, #4]
  40052e:	6099      	str	r1, [r3, #8]
  400530:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  400532:	2368      	movs	r3, #104	; 0x68
  400534:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  400538:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  40053c:	2301      	movs	r3, #1
  40053e:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  400540:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  400542:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400544:	a901      	add	r1, sp, #4
  400546:	4805      	ldr	r0, [pc, #20]	; (40055c <read_bytes+0x3c>)
  400548:	f000 ff7e 	bl	401448 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  40054c:	4804      	ldr	r0, [pc, #16]	; (400560 <read_bytes+0x40>)
  40054e:	f005 fff7 	bl	406540 <__portable_delay_cycles_veneer>

    return length;
}
  400552:	b2e0      	uxtb	r0, r4
  400554:	b006      	add	sp, #24
  400556:	bd10      	pop	{r4, pc}
  400558:	20000208 	.word	0x20000208
  40055c:	40018000 	.word	0x40018000
  400560:	00014ed3 	.word	0x00014ed3

00400564 <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  400564:	b570      	push	{r4, r5, r6, lr}
  400566:	4604      	mov	r4, r0
  400568:	460d      	mov	r5, r1
  40056a:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  40056c:	f7ff ffb2 	bl	4004d4 <read_register8>

    if (state) {
  400570:	b126      	cbz	r6, 40057c <write_register_bit+0x18>
        value |= (1 << pos);
  400572:	2101      	movs	r1, #1
  400574:	40a9      	lsls	r1, r5
  400576:	4301      	orrs	r1, r0
  400578:	b2c9      	uxtb	r1, r1
  40057a:	e004      	b.n	400586 <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  40057c:	2101      	movs	r1, #1
  40057e:	40a9      	lsls	r1, r5
  400580:	ea20 0101 	bic.w	r1, r0, r1
  400584:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  400586:	4620      	mov	r0, r4
  400588:	f7ff ff80 	bl	40048c <write_register8>
  40058c:	bd70      	pop	{r4, r5, r6, pc}
  40058e:	bf00      	nop

00400590 <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  400590:	b510      	push	{r4, lr}
  400592:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  400594:	f7ff ff9e 	bl	4004d4 <read_register8>
    return ((value >> pos) & 1);
  400598:	4120      	asrs	r0, r4
}
  40059a:	f000 0001 	and.w	r0, r0, #1
  40059e:	bd10      	pop	{r4, pc}

004005a0 <mpu_init>:

bool mpu_init(void)
{
  4005a0:	b500      	push	{lr}
  4005a2:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  4005a4:	4b0d      	ldr	r3, [pc, #52]	; (4005dc <mpu_init+0x3c>)
  4005a6:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  4005a8:	4b0d      	ldr	r3, [pc, #52]	; (4005e0 <mpu_init+0x40>)
  4005aa:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  4005ac:	a901      	add	r1, sp, #4
  4005ae:	480d      	ldr	r0, [pc, #52]	; (4005e4 <mpu_init+0x44>)
  4005b0:	f000 ff1a 	bl	4013e8 <twi_master_init>
  4005b4:	b138      	cbz	r0, 4005c6 <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  4005b6:	480c      	ldr	r0, [pc, #48]	; (4005e8 <mpu_init+0x48>)
  4005b8:	f002 fd74 	bl	4030a4 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005bc:	480b      	ldr	r0, [pc, #44]	; (4005ec <mpu_init+0x4c>)
  4005be:	f005 ffbf 	bl	406540 <__portable_delay_cycles_veneer>
        return false;
  4005c2:	2000      	movs	r0, #0
  4005c4:	e006      	b.n	4005d4 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  4005c6:	480a      	ldr	r0, [pc, #40]	; (4005f0 <mpu_init+0x50>)
  4005c8:	f002 fd6c 	bl	4030a4 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005cc:	4807      	ldr	r0, [pc, #28]	; (4005ec <mpu_init+0x4c>)
  4005ce:	f005 ffb7 	bl	406540 <__portable_delay_cycles_veneer>
        return true;
  4005d2:	2001      	movs	r0, #1
    }
    
}
  4005d4:	b005      	add	sp, #20
  4005d6:	f85d fb04 	ldr.w	pc, [sp], #4
  4005da:	bf00      	nop
  4005dc:	07270e00 	.word	0x07270e00
  4005e0:	00061a80 	.word	0x00061a80
  4005e4:	40018000 	.word	0x40018000
  4005e8:	0040603c 	.word	0x0040603c
  4005ec:	00014ed3 	.word	0x00014ed3
  4005f0:	00406058 	.word	0x00406058

004005f4 <mpu_probe>:

bool mpu_probe(void)
{
  4005f4:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  4005f6:	2168      	movs	r1, #104	; 0x68
  4005f8:	4809      	ldr	r0, [pc, #36]	; (400620 <mpu_probe+0x2c>)
  4005fa:	f000 ffcf 	bl	40159c <twi_probe>
  4005fe:	b138      	cbz	r0, 400610 <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  400600:	4808      	ldr	r0, [pc, #32]	; (400624 <mpu_probe+0x30>)
  400602:	f002 fd4f 	bl	4030a4 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400606:	4808      	ldr	r0, [pc, #32]	; (400628 <mpu_probe+0x34>)
  400608:	f005 ff9a 	bl	406540 <__portable_delay_cycles_veneer>
        return false;
  40060c:	2000      	movs	r0, #0
  40060e:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400610:	4806      	ldr	r0, [pc, #24]	; (40062c <mpu_probe+0x38>)
  400612:	f002 fd47 	bl	4030a4 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400616:	4804      	ldr	r0, [pc, #16]	; (400628 <mpu_probe+0x34>)
  400618:	f005 ff92 	bl	406540 <__portable_delay_cycles_veneer>
        return true;
  40061c:	2001      	movs	r0, #1
    }
}
  40061e:	bd08      	pop	{r3, pc}
  400620:	40018000 	.word	0x40018000
  400624:	00406074 	.word	0x00406074
  400628:	00014ed3 	.word	0x00014ed3
  40062c:	00406088 	.word	0x00406088

00400630 <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  400630:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  400632:	2075      	movs	r0, #117	; 0x75
  400634:	f7ff ff4e 	bl	4004d4 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400638:	bd08      	pop	{r3, pc}
  40063a:	bf00      	nop

0040063c <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  40063c:	b510      	push	{r4, lr}
  40063e:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400640:	206b      	movs	r0, #107	; 0x6b
  400642:	f7ff ff47 	bl	4004d4 <read_register8>
    value &= 0b11111000; // mask
  400646:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  40064a:	4321      	orrs	r1, r4
  40064c:	206b      	movs	r0, #107	; 0x6b
  40064e:	f7ff ff1d 	bl	40048c <write_register8>
  400652:	bd10      	pop	{r4, pc}

00400654 <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  400654:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400656:	206b      	movs	r0, #107	; 0x6b
  400658:	f7ff ff3c 	bl	4004d4 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  40065c:	f000 0007 	and.w	r0, r0, #7
  400660:	bd08      	pop	{r3, pc}
  400662:	bf00      	nop

00400664 <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  400664:	b510      	push	{r4, lr}
  400666:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400668:	2803      	cmp	r0, #3
  40066a:	d812      	bhi.n	400692 <mpu_set_gyro_scale+0x2e>
  40066c:	e8df f000 	tbb	[pc, r0]
  400670:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400674:	4a0d      	ldr	r2, [pc, #52]	; (4006ac <mpu_set_gyro_scale+0x48>)
  400676:	4b0e      	ldr	r3, [pc, #56]	; (4006b0 <mpu_set_gyro_scale+0x4c>)
  400678:	601a      	str	r2, [r3, #0]
            break;
  40067a:	e00a      	b.n	400692 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  40067c:	4a0d      	ldr	r2, [pc, #52]	; (4006b4 <mpu_set_gyro_scale+0x50>)
  40067e:	4b0c      	ldr	r3, [pc, #48]	; (4006b0 <mpu_set_gyro_scale+0x4c>)
  400680:	601a      	str	r2, [r3, #0]
            break;
  400682:	e006      	b.n	400692 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400684:	4a0c      	ldr	r2, [pc, #48]	; (4006b8 <mpu_set_gyro_scale+0x54>)
  400686:	4b0a      	ldr	r3, [pc, #40]	; (4006b0 <mpu_set_gyro_scale+0x4c>)
  400688:	601a      	str	r2, [r3, #0]
            break;
  40068a:	e002      	b.n	400692 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  40068c:	4a0b      	ldr	r2, [pc, #44]	; (4006bc <mpu_set_gyro_scale+0x58>)
  40068e:	4b08      	ldr	r3, [pc, #32]	; (4006b0 <mpu_set_gyro_scale+0x4c>)
  400690:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  400692:	201b      	movs	r0, #27
  400694:	f7ff ff1e 	bl	4004d4 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400698:	f020 0018 	bic.w	r0, r0, #24
  40069c:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  4006a0:	b2c9      	uxtb	r1, r1
  4006a2:	201b      	movs	r0, #27
  4006a4:	f7ff fef2 	bl	40048c <write_register8>
  4006a8:	bd10      	pop	{r4, pc}
  4006aa:	bf00      	nop
  4006ac:	3bfa1e3f 	.word	0x3bfa1e3f
  4006b0:	2000022c 	.word	0x2000022c
  4006b4:	3c7a2270 	.word	0x3c7a2270
  4006b8:	3cf9bfdf 	.word	0x3cf9bfdf
  4006bc:	3d79c0ec 	.word	0x3d79c0ec

004006c0 <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  4006c0:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  4006c2:	201b      	movs	r0, #27
  4006c4:	f7ff ff06 	bl	4004d4 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  4006c8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  4006cc:	bd08      	pop	{r3, pc}
  4006ce:	bf00      	nop

004006d0 <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  4006d0:	b510      	push	{r4, lr}
  4006d2:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  4006d4:	2803      	cmp	r0, #3
  4006d6:	d812      	bhi.n	4006fe <mpu_set_accel_range+0x2e>
  4006d8:	e8df f000 	tbb	[pc, r0]
  4006dc:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  4006e0:	4a0d      	ldr	r2, [pc, #52]	; (400718 <mpu_set_accel_range+0x48>)
  4006e2:	4b0e      	ldr	r3, [pc, #56]	; (40071c <mpu_set_accel_range+0x4c>)
  4006e4:	601a      	str	r2, [r3, #0]
            break;
  4006e6:	e00a      	b.n	4006fe <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  4006e8:	4a0d      	ldr	r2, [pc, #52]	; (400720 <mpu_set_accel_range+0x50>)
  4006ea:	4b0c      	ldr	r3, [pc, #48]	; (40071c <mpu_set_accel_range+0x4c>)
  4006ec:	601a      	str	r2, [r3, #0]
            break;   
  4006ee:	e006      	b.n	4006fe <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  4006f0:	4a0c      	ldr	r2, [pc, #48]	; (400724 <mpu_set_accel_range+0x54>)
  4006f2:	4b0a      	ldr	r3, [pc, #40]	; (40071c <mpu_set_accel_range+0x4c>)
  4006f4:	601a      	str	r2, [r3, #0]
            break;   
  4006f6:	e002      	b.n	4006fe <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  4006f8:	4a0b      	ldr	r2, [pc, #44]	; (400728 <mpu_set_accel_range+0x58>)
  4006fa:	4b08      	ldr	r3, [pc, #32]	; (40071c <mpu_set_accel_range+0x4c>)
  4006fc:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  4006fe:	201c      	movs	r0, #28
  400700:	f7ff fee8 	bl	4004d4 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400704:	f020 0018 	bic.w	r0, r0, #24
  400708:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  40070c:	b2c9      	uxtb	r1, r1
  40070e:	201c      	movs	r0, #28
  400710:	f7ff febc 	bl	40048c <write_register8>
  400714:	bd10      	pop	{r4, pc}
  400716:	bf00      	nop
  400718:	387fda40 	.word	0x387fda40
  40071c:	20000218 	.word	0x20000218
  400720:	38ffda40 	.word	0x38ffda40
  400724:	397fda40 	.word	0x397fda40
  400728:	39fff518 	.word	0x39fff518

0040072c <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  40072c:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  40072e:	4602      	mov	r2, r0
  400730:	2106      	movs	r1, #6
  400732:	206b      	movs	r0, #107	; 0x6b
  400734:	f7ff ff16 	bl	400564 <write_register_bit>
  400738:	bd08      	pop	{r3, pc}
  40073a:	bf00      	nop

0040073c <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  40073c:	b538      	push	{r3, r4, r5, lr}
  40073e:	4605      	mov	r5, r0
  400740:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  400742:	4a11      	ldr	r2, [pc, #68]	; (400788 <mpu_begin+0x4c>)
  400744:	2300      	movs	r3, #0
  400746:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400748:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  40074a:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  40074c:	2100      	movs	r1, #0
  40074e:	4a0f      	ldr	r2, [pc, #60]	; (40078c <mpu_begin+0x50>)
  400750:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  400752:	4a0f      	ldr	r2, [pc, #60]	; (400790 <mpu_begin+0x54>)
  400754:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400756:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400758:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  40075a:	4a0e      	ldr	r2, [pc, #56]	; (400794 <mpu_begin+0x58>)
  40075c:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  40075e:	f7ff ff67 	bl	400630 <mpu_who_am_i>
  400762:	2868      	cmp	r0, #104	; 0x68
  400764:	d10d      	bne.n	400782 <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400766:	2001      	movs	r0, #1
  400768:	f7ff ff68 	bl	40063c <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  40076c:	4628      	mov	r0, r5
  40076e:	f7ff ff79 	bl	400664 <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  400772:	4620      	mov	r0, r4
  400774:	f7ff ffac 	bl	4006d0 <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400778:	2000      	movs	r0, #0
  40077a:	f7ff ffd7 	bl	40072c <mpu_set_sleep_enabled>

    return true;
  40077e:	2001      	movs	r0, #1
  400780:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  400782:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400784:	bd38      	pop	{r3, r4, r5, pc}
  400786:	bf00      	nop
  400788:	2000034c 	.word	0x2000034c
  40078c:	20000230 	.word	0x20000230
  400790:	20000318 	.word	0x20000318
  400794:	20000234 	.word	0x20000234

00400798 <mpu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400798:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  40079a:	2106      	movs	r1, #6
  40079c:	206b      	movs	r0, #107	; 0x6b
  40079e:	f7ff fef7 	bl	400590 <read_register_bit>
}
  4007a2:	bd08      	pop	{r3, pc}

004007a4 <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  4007a4:	b570      	push	{r4, r5, r6, lr}
  4007a6:	b082      	sub	sp, #8
  4007a8:	4606      	mov	r6, r0
  4007aa:	460d      	mov	r5, r1
  4007ac:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  4007ae:	2300      	movs	r3, #0
  4007b0:	9300      	str	r3, [sp, #0]
  4007b2:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  4007b6:	466a      	mov	r2, sp
  4007b8:	2106      	movs	r1, #6
  4007ba:	2043      	movs	r0, #67	; 0x43
  4007bc:	f7ff feb0 	bl	400520 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  4007c0:	f89d 2000 	ldrb.w	r2, [sp]
  4007c4:	f89d 3001 	ldrb.w	r3, [sp, #1]
  4007c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007cc:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  4007ce:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4007d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4007d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007da:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  4007dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4007e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4007e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007e8:	8023      	strh	r3, [r4, #0]

}
  4007ea:	b002      	add	sp, #8
  4007ec:	bd70      	pop	{r4, r5, r6, pc}
  4007ee:	bf00      	nop

004007f0 <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  4007f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  4007f2:	4d0c      	ldr	r5, [pc, #48]	; (400824 <mpu_read_raw_gyro+0x34>)
  4007f4:	4e0c      	ldr	r6, [pc, #48]	; (400828 <mpu_read_raw_gyro+0x38>)
  4007f6:	4f0d      	ldr	r7, [pc, #52]	; (40082c <mpu_read_raw_gyro+0x3c>)
  4007f8:	462a      	mov	r2, r5
  4007fa:	4631      	mov	r1, r6
  4007fc:	4638      	mov	r0, r7
  4007fe:	f7ff ffd1 	bl	4007a4 <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  400802:	4c0b      	ldr	r4, [pc, #44]	; (400830 <mpu_read_raw_gyro+0x40>)
  400804:	f9b7 0000 	ldrsh.w	r0, [r7]
  400808:	f005 f99a 	bl	405b40 <__aeabi_i2f>
  40080c:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  40080e:	f9b6 0000 	ldrsh.w	r0, [r6]
  400812:	f005 f995 	bl	405b40 <__aeabi_i2f>
  400816:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400818:	f9b5 0000 	ldrsh.w	r0, [r5]
  40081c:	f005 f990 	bl	405b40 <__aeabi_i2f>
  400820:	60a0      	str	r0, [r4, #8]
  400822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400824:	2000033c 	.word	0x2000033c
  400828:	20000310 	.word	0x20000310
  40082c:	20000358 	.word	0x20000358
  400830:	20000304 	.word	0x20000304

00400834 <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400838:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  40083a:	f7ff ffd9 	bl	4007f0 <mpu_read_raw_gyro>

    if (use_calibrate) {
  40083e:	4b3d      	ldr	r3, [pc, #244]	; (400934 <mpu_read_normalized_gyro+0x100>)
  400840:	781b      	ldrb	r3, [r3, #0]
  400842:	b30b      	cbz	r3, 400888 <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400844:	4b3c      	ldr	r3, [pc, #240]	; (400938 <mpu_read_normalized_gyro+0x104>)
  400846:	681e      	ldr	r6, [r3, #0]
  400848:	4d3c      	ldr	r5, [pc, #240]	; (40093c <mpu_read_normalized_gyro+0x108>)
  40084a:	4f3d      	ldr	r7, [pc, #244]	; (400940 <mpu_read_normalized_gyro+0x10c>)
  40084c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 40094c <mpu_read_normalized_gyro+0x118>
  400850:	f8d8 1000 	ldr.w	r1, [r8]
  400854:	6838      	ldr	r0, [r7, #0]
  400856:	f005 f8bd 	bl	4059d4 <__aeabi_fsub>
  40085a:	4631      	mov	r1, r6
  40085c:	f005 f9c4 	bl	405be8 <__aeabi_fmul>
  400860:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  400862:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400866:	6878      	ldr	r0, [r7, #4]
  400868:	f005 f8b4 	bl	4059d4 <__aeabi_fsub>
  40086c:	4631      	mov	r1, r6
  40086e:	f005 f9bb 	bl	405be8 <__aeabi_fmul>
  400872:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400874:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400878:	68b8      	ldr	r0, [r7, #8]
  40087a:	f005 f8ab 	bl	4059d4 <__aeabi_fsub>
  40087e:	4631      	mov	r1, r6
  400880:	f005 f9b2 	bl	405be8 <__aeabi_fmul>
  400884:	60a8      	str	r0, [r5, #8]
  400886:	e012      	b.n	4008ae <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400888:	4b2b      	ldr	r3, [pc, #172]	; (400938 <mpu_read_normalized_gyro+0x104>)
  40088a:	681f      	ldr	r7, [r3, #0]
  40088c:	4d2b      	ldr	r5, [pc, #172]	; (40093c <mpu_read_normalized_gyro+0x108>)
  40088e:	4e2c      	ldr	r6, [pc, #176]	; (400940 <mpu_read_normalized_gyro+0x10c>)
  400890:	4639      	mov	r1, r7
  400892:	6830      	ldr	r0, [r6, #0]
  400894:	f005 f9a8 	bl	405be8 <__aeabi_fmul>
  400898:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  40089a:	4639      	mov	r1, r7
  40089c:	6870      	ldr	r0, [r6, #4]
  40089e:	f005 f9a3 	bl	405be8 <__aeabi_fmul>
  4008a2:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  4008a4:	4639      	mov	r1, r7
  4008a6:	68b0      	ldr	r0, [r6, #8]
  4008a8:	f005 f99e 	bl	405be8 <__aeabi_fmul>
  4008ac:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  4008ae:	2100      	movs	r1, #0
  4008b0:	4b24      	ldr	r3, [pc, #144]	; (400944 <mpu_read_normalized_gyro+0x110>)
  4008b2:	6818      	ldr	r0, [r3, #0]
  4008b4:	f005 fb2c 	bl	405f10 <__aeabi_fcmpeq>
  4008b8:	2800      	cmp	r0, #0
  4008ba:	d132      	bne.n	400922 <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  4008bc:	4b1f      	ldr	r3, [pc, #124]	; (40093c <mpu_read_normalized_gyro+0x108>)
  4008be:	6818      	ldr	r0, [r3, #0]
  4008c0:	f005 fb58 	bl	405f74 <__aeabi_f2iz>
  4008c4:	2800      	cmp	r0, #0
  4008c6:	bfb8      	it	lt
  4008c8:	4240      	neglt	r0, r0
  4008ca:	f005 f939 	bl	405b40 <__aeabi_i2f>
  4008ce:	4b1e      	ldr	r3, [pc, #120]	; (400948 <mpu_read_normalized_gyro+0x114>)
  4008d0:	6819      	ldr	r1, [r3, #0]
  4008d2:	f005 fb27 	bl	405f24 <__aeabi_fcmplt>
  4008d6:	b110      	cbz	r0, 4008de <mpu_read_normalized_gyro+0xaa>
  4008d8:	2200      	movs	r2, #0
  4008da:	4b18      	ldr	r3, [pc, #96]	; (40093c <mpu_read_normalized_gyro+0x108>)
  4008dc:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  4008de:	4b17      	ldr	r3, [pc, #92]	; (40093c <mpu_read_normalized_gyro+0x108>)
  4008e0:	6858      	ldr	r0, [r3, #4]
  4008e2:	f005 fb47 	bl	405f74 <__aeabi_f2iz>
  4008e6:	2800      	cmp	r0, #0
  4008e8:	bfb8      	it	lt
  4008ea:	4240      	neglt	r0, r0
  4008ec:	f005 f928 	bl	405b40 <__aeabi_i2f>
  4008f0:	4b15      	ldr	r3, [pc, #84]	; (400948 <mpu_read_normalized_gyro+0x114>)
  4008f2:	6859      	ldr	r1, [r3, #4]
  4008f4:	f005 fb16 	bl	405f24 <__aeabi_fcmplt>
  4008f8:	b110      	cbz	r0, 400900 <mpu_read_normalized_gyro+0xcc>
  4008fa:	2200      	movs	r2, #0
  4008fc:	4b0f      	ldr	r3, [pc, #60]	; (40093c <mpu_read_normalized_gyro+0x108>)
  4008fe:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400900:	4b0e      	ldr	r3, [pc, #56]	; (40093c <mpu_read_normalized_gyro+0x108>)
  400902:	6898      	ldr	r0, [r3, #8]
  400904:	f005 fb36 	bl	405f74 <__aeabi_f2iz>
  400908:	2800      	cmp	r0, #0
  40090a:	bfb8      	it	lt
  40090c:	4240      	neglt	r0, r0
  40090e:	f005 f917 	bl	405b40 <__aeabi_i2f>
  400912:	4b0d      	ldr	r3, [pc, #52]	; (400948 <mpu_read_normalized_gyro+0x114>)
  400914:	6899      	ldr	r1, [r3, #8]
  400916:	f005 fb05 	bl	405f24 <__aeabi_fcmplt>
  40091a:	b110      	cbz	r0, 400922 <mpu_read_normalized_gyro+0xee>
  40091c:	2200      	movs	r2, #0
  40091e:	4b07      	ldr	r3, [pc, #28]	; (40093c <mpu_read_normalized_gyro+0x108>)
  400920:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  400922:	4b06      	ldr	r3, [pc, #24]	; (40093c <mpu_read_normalized_gyro+0x108>)
  400924:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  40092c:	4620      	mov	r0, r4
  40092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400932:	bf00      	nop
  400934:	20000230 	.word	0x20000230
  400938:	2000022c 	.word	0x2000022c
  40093c:	2000035c 	.word	0x2000035c
  400940:	20000304 	.word	0x20000304
  400944:	20000234 	.word	0x20000234
  400948:	20000318 	.word	0x20000318
  40094c:	2000034c 	.word	0x2000034c

00400950 <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400950:	b570      	push	{r4, r5, r6, lr}
  400952:	b082      	sub	sp, #8
  400954:	4606      	mov	r6, r0
  400956:	460d      	mov	r5, r1
  400958:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  40095a:	2300      	movs	r3, #0
  40095c:	9300      	str	r3, [sp, #0]
  40095e:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  400962:	466a      	mov	r2, sp
  400964:	2106      	movs	r1, #6
  400966:	203b      	movs	r0, #59	; 0x3b
  400968:	f7ff fdda 	bl	400520 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  40096c:	f89d 2000 	ldrb.w	r2, [sp]
  400970:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400978:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  40097a:	f89d 2002 	ldrb.w	r2, [sp, #2]
  40097e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400982:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400986:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400988:	f89d 2004 	ldrb.w	r2, [sp, #4]
  40098c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400994:	8023      	strh	r3, [r4, #0]
}
  400996:	b002      	add	sp, #8
  400998:	bd70      	pop	{r4, r5, r6, pc}
  40099a:	bf00      	nop

0040099c <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  40099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  40099e:	4d0c      	ldr	r5, [pc, #48]	; (4009d0 <mpu_read_raw_acceleration+0x34>)
  4009a0:	4e0c      	ldr	r6, [pc, #48]	; (4009d4 <mpu_read_raw_acceleration+0x38>)
  4009a2:	4f0d      	ldr	r7, [pc, #52]	; (4009d8 <mpu_read_raw_acceleration+0x3c>)
  4009a4:	462a      	mov	r2, r5
  4009a6:	4631      	mov	r1, r6
  4009a8:	4638      	mov	r0, r7
  4009aa:	f7ff ffd1 	bl	400950 <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  4009ae:	4c0b      	ldr	r4, [pc, #44]	; (4009dc <mpu_read_raw_acceleration+0x40>)
  4009b0:	f9b7 0000 	ldrsh.w	r0, [r7]
  4009b4:	f005 f8c4 	bl	405b40 <__aeabi_i2f>
  4009b8:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  4009ba:	f9b6 0000 	ldrsh.w	r0, [r6]
  4009be:	f005 f8bf 	bl	405b40 <__aeabi_i2f>
  4009c2:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  4009c4:	f9b5 0000 	ldrsh.w	r0, [r5]
  4009c8:	f005 f8ba 	bl	405b40 <__aeabi_i2f>
  4009cc:	60a0      	str	r0, [r4, #8]
  4009ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009d0:	20000312 	.word	0x20000312
  4009d4:	2000035a 	.word	0x2000035a
  4009d8:	20000314 	.word	0x20000314
  4009dc:	20000340 	.word	0x20000340

004009e0 <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  4009e0:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  4009e2:	f7ff ffdb 	bl	40099c <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  4009e6:	4b0e      	ldr	r3, [pc, #56]	; (400a20 <mpu_read_normalized_acceleration+0x40>)
  4009e8:	681d      	ldr	r5, [r3, #0]
  4009ea:	4c0e      	ldr	r4, [pc, #56]	; (400a24 <mpu_read_normalized_acceleration+0x44>)
  4009ec:	4e0e      	ldr	r6, [pc, #56]	; (400a28 <mpu_read_normalized_acceleration+0x48>)
  4009ee:	6831      	ldr	r1, [r6, #0]
  4009f0:	4628      	mov	r0, r5
  4009f2:	f005 f8f9 	bl	405be8 <__aeabi_fmul>
  4009f6:	490d      	ldr	r1, [pc, #52]	; (400a2c <mpu_read_normalized_acceleration+0x4c>)
  4009f8:	f005 f8f6 	bl	405be8 <__aeabi_fmul>
  4009fc:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  4009fe:	6871      	ldr	r1, [r6, #4]
  400a00:	4628      	mov	r0, r5
  400a02:	f005 f8f1 	bl	405be8 <__aeabi_fmul>
  400a06:	4909      	ldr	r1, [pc, #36]	; (400a2c <mpu_read_normalized_acceleration+0x4c>)
  400a08:	f005 f8ee 	bl	405be8 <__aeabi_fmul>
  400a0c:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400a0e:	68b1      	ldr	r1, [r6, #8]
  400a10:	4628      	mov	r0, r5
  400a12:	f005 f8e9 	bl	405be8 <__aeabi_fmul>
  400a16:	4905      	ldr	r1, [pc, #20]	; (400a2c <mpu_read_normalized_acceleration+0x4c>)
  400a18:	f005 f8e6 	bl	405be8 <__aeabi_fmul>
  400a1c:	60a0      	str	r0, [r4, #8]
  400a1e:	bd70      	pop	{r4, r5, r6, pc}
  400a20:	20000218 	.word	0x20000218
  400a24:	20000330 	.word	0x20000330
  400a28:	20000340 	.word	0x20000340
  400a2c:	411ce80a 	.word	0x411ce80a

00400a30 <mpu_log_settings>:

    return norm_accel;
}

void mpu_log_settings(void)
{
  400a30:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400a32:	f7ff fdfd 	bl	400630 <mpu_who_am_i>
  400a36:	4601      	mov	r1, r0
  400a38:	482b      	ldr	r0, [pc, #172]	; (400ae8 <mpu_log_settings+0xb8>)
  400a3a:	f002 fac1 	bl	402fc0 <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400a3e:	f7ff feab 	bl	400798 <mpu_get_sleep_enabled>
  400a42:	492a      	ldr	r1, [pc, #168]	; (400aec <mpu_log_settings+0xbc>)
  400a44:	4a2a      	ldr	r2, [pc, #168]	; (400af0 <mpu_log_settings+0xc0>)
  400a46:	2800      	cmp	r0, #0
  400a48:	bf18      	it	ne
  400a4a:	4611      	movne	r1, r2
  400a4c:	4829      	ldr	r0, [pc, #164]	; (400af4 <mpu_log_settings+0xc4>)
  400a4e:	f002 fab7 	bl	402fc0 <iprintf>
    printf("Clock Source: ");
  400a52:	4829      	ldr	r0, [pc, #164]	; (400af8 <mpu_log_settings+0xc8>)
  400a54:	f002 fab4 	bl	402fc0 <iprintf>
    switch (mpu_get_clock_source()) {
  400a58:	f7ff fdfc 	bl	400654 <mpu_get_clock_source>
  400a5c:	b110      	cbz	r0, 400a64 <mpu_log_settings+0x34>
  400a5e:	2801      	cmp	r0, #1
  400a60:	d004      	beq.n	400a6c <mpu_log_settings+0x3c>
  400a62:	e006      	b.n	400a72 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400a64:	4825      	ldr	r0, [pc, #148]	; (400afc <mpu_log_settings+0xcc>)
  400a66:	f002 faab 	bl	402fc0 <iprintf>
        break;
  400a6a:	e002      	b.n	400a72 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400a6c:	4824      	ldr	r0, [pc, #144]	; (400b00 <mpu_log_settings+0xd0>)
  400a6e:	f002 faa7 	bl	402fc0 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400a72:	4824      	ldr	r0, [pc, #144]	; (400b04 <mpu_log_settings+0xd4>)
  400a74:	f002 faa4 	bl	402fc0 <iprintf>
        switch (mpu_get_gyro_scale()) {
  400a78:	f7ff fe22 	bl	4006c0 <mpu_get_gyro_scale>
  400a7c:	2803      	cmp	r0, #3
  400a7e:	d812      	bhi.n	400aa6 <mpu_log_settings+0x76>
  400a80:	e8df f000 	tbb	[pc, r0]
  400a84:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400a88:	481f      	ldr	r0, [pc, #124]	; (400b08 <mpu_log_settings+0xd8>)
  400a8a:	f002 fa99 	bl	402fc0 <iprintf>
        break;
  400a8e:	e00a      	b.n	400aa6 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400a90:	481e      	ldr	r0, [pc, #120]	; (400b0c <mpu_log_settings+0xdc>)
  400a92:	f002 fa95 	bl	402fc0 <iprintf>
        break;
  400a96:	e006      	b.n	400aa6 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400a98:	481d      	ldr	r0, [pc, #116]	; (400b10 <mpu_log_settings+0xe0>)
  400a9a:	f002 fa91 	bl	402fc0 <iprintf>
        break;
  400a9e:	e002      	b.n	400aa6 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400aa0:	481c      	ldr	r0, [pc, #112]	; (400b14 <mpu_log_settings+0xe4>)
  400aa2:	f002 fa8d 	bl	402fc0 <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400aa6:	4b1c      	ldr	r3, [pc, #112]	; (400b18 <mpu_log_settings+0xe8>)
  400aa8:	7819      	ldrb	r1, [r3, #0]
  400aaa:	481c      	ldr	r0, [pc, #112]	; (400b1c <mpu_log_settings+0xec>)
  400aac:	f002 fa88 	bl	402fc0 <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400ab0:	4b1b      	ldr	r3, [pc, #108]	; (400b20 <mpu_log_settings+0xf0>)
  400ab2:	6818      	ldr	r0, [r3, #0]
  400ab4:	f004 fc0e 	bl	4052d4 <__aeabi_f2d>
  400ab8:	4602      	mov	r2, r0
  400aba:	460b      	mov	r3, r1
  400abc:	4819      	ldr	r0, [pc, #100]	; (400b24 <mpu_log_settings+0xf4>)
  400abe:	f002 fa7f 	bl	402fc0 <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400ac2:	4b19      	ldr	r3, [pc, #100]	; (400b28 <mpu_log_settings+0xf8>)
  400ac4:	6818      	ldr	r0, [r3, #0]
  400ac6:	f004 fc05 	bl	4052d4 <__aeabi_f2d>
  400aca:	4602      	mov	r2, r0
  400acc:	460b      	mov	r3, r1
  400ace:	4817      	ldr	r0, [pc, #92]	; (400b2c <mpu_log_settings+0xfc>)
  400ad0:	f002 fa76 	bl	402fc0 <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400ad4:	4b16      	ldr	r3, [pc, #88]	; (400b30 <mpu_log_settings+0x100>)
  400ad6:	6818      	ldr	r0, [r3, #0]
  400ad8:	f004 fbfc 	bl	4052d4 <__aeabi_f2d>
  400adc:	4602      	mov	r2, r0
  400ade:	460b      	mov	r3, r1
  400ae0:	4814      	ldr	r0, [pc, #80]	; (400b34 <mpu_log_settings+0x104>)
  400ae2:	f002 fa6d 	bl	402fc0 <iprintf>
  400ae6:	bd08      	pop	{r3, pc}
  400ae8:	004060b4 	.word	0x004060b4
  400aec:	004060a8 	.word	0x004060a8
  400af0:	004060a0 	.word	0x004060a0
  400af4:	004060c4 	.word	0x004060c4
  400af8:	004060d8 	.word	0x004060d8
  400afc:	004060e8 	.word	0x004060e8
  400b00:	00406104 	.word	0x00406104
  400b04:	0040612c 	.word	0x0040612c
  400b08:	00406138 	.word	0x00406138
  400b0c:	00406144 	.word	0x00406144
  400b10:	00406150 	.word	0x00406150
  400b14:	0040615c 	.word	0x0040615c
  400b18:	20000230 	.word	0x20000230
  400b1c:	00406168 	.word	0x00406168
  400b20:	20000234 	.word	0x20000234
  400b24:	0040617c 	.word	0x0040617c
  400b28:	2000022c 	.word	0x2000022c
  400b2c:	00406194 	.word	0x00406194
  400b30:	20000218 	.word	0x20000218
  400b34:	004061a8 	.word	0x004061a8

00400b38 <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  400b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  400b3a:	4604      	mov	r4, r0
  400b3c:	b1d8      	cbz	r0, 400b76 <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  400b3e:	4b13      	ldr	r3, [pc, #76]	; (400b8c <mpu_set_threshold+0x54>)
  400b40:	781b      	ldrb	r3, [r3, #0]
  400b42:	b913      	cbnz	r3, 400b4a <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  400b44:	2032      	movs	r0, #50	; 0x32
  400b46:	f000 f829 	bl	400b9c <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  400b4a:	4620      	mov	r0, r4
  400b4c:	f004 fff8 	bl	405b40 <__aeabi_i2f>
  400b50:	4607      	mov	r7, r0
  400b52:	4d0f      	ldr	r5, [pc, #60]	; (400b90 <mpu_set_threshold+0x58>)
  400b54:	4e0f      	ldr	r6, [pc, #60]	; (400b94 <mpu_set_threshold+0x5c>)
  400b56:	4601      	mov	r1, r0
  400b58:	6830      	ldr	r0, [r6, #0]
  400b5a:	f005 f845 	bl	405be8 <__aeabi_fmul>
  400b5e:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  400b60:	4639      	mov	r1, r7
  400b62:	6870      	ldr	r0, [r6, #4]
  400b64:	f005 f840 	bl	405be8 <__aeabi_fmul>
  400b68:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  400b6a:	4639      	mov	r1, r7
  400b6c:	68b0      	ldr	r0, [r6, #8]
  400b6e:	f005 f83b 	bl	405be8 <__aeabi_fmul>
  400b72:	60a8      	str	r0, [r5, #8]
  400b74:	e004      	b.n	400b80 <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  400b76:	4b06      	ldr	r3, [pc, #24]	; (400b90 <mpu_set_threshold+0x58>)
  400b78:	2200      	movs	r2, #0
  400b7a:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  400b7c:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  400b7e:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  400b80:	4620      	mov	r0, r4
  400b82:	f004 ffd9 	bl	405b38 <__aeabi_ui2f>
  400b86:	4b04      	ldr	r3, [pc, #16]	; (400b98 <mpu_set_threshold+0x60>)
  400b88:	6018      	str	r0, [r3, #0]
  400b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b8c:	20000230 	.word	0x20000230
  400b90:	20000318 	.word	0x20000318
  400b94:	200002f8 	.word	0x200002f8
  400b98:	20000234 	.word	0x20000234

00400b9c <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  400b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ba0:	b085      	sub	sp, #20
	use_calibrate = true;
  400ba2:	2201      	movs	r2, #1
  400ba4:	4b5e      	ldr	r3, [pc, #376]	; (400d20 <mpu_calibrate_gyro+0x184>)
  400ba6:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400ba8:	4681      	mov	r9, r0
  400baa:	2800      	cmp	r0, #0
  400bac:	d048      	beq.n	400c40 <mpu_calibrate_gyro+0xa4>
  400bae:	2400      	movs	r4, #0
  400bb0:	f04f 0a00 	mov.w	sl, #0
  400bb4:	46d3      	mov	fp, sl
  400bb6:	f8cd a00c 	str.w	sl, [sp, #12]
  400bba:	f8cd a008 	str.w	sl, [sp, #8]
  400bbe:	f8cd a004 	str.w	sl, [sp, #4]
  400bc2:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  400bc6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 400d34 <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  400bca:	f7ff fe11 	bl	4007f0 <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  400bce:	f8d8 7000 	ldr.w	r7, [r8]
  400bd2:	4639      	mov	r1, r7
  400bd4:	9800      	ldr	r0, [sp, #0]
  400bd6:	f004 feff 	bl	4059d8 <__addsf3>
  400bda:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  400bdc:	f8d8 6004 	ldr.w	r6, [r8, #4]
  400be0:	4631      	mov	r1, r6
  400be2:	9801      	ldr	r0, [sp, #4]
  400be4:	f004 fef8 	bl	4059d8 <__addsf3>
  400be8:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  400bea:	f8d8 5008 	ldr.w	r5, [r8, #8]
  400bee:	4629      	mov	r1, r5
  400bf0:	9802      	ldr	r0, [sp, #8]
  400bf2:	f004 fef1 	bl	4059d8 <__addsf3>
  400bf6:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  400bf8:	4639      	mov	r1, r7
  400bfa:	4638      	mov	r0, r7
  400bfc:	f004 fff4 	bl	405be8 <__aeabi_fmul>
  400c00:	4601      	mov	r1, r0
  400c02:	9803      	ldr	r0, [sp, #12]
  400c04:	f004 fee8 	bl	4059d8 <__addsf3>
  400c08:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  400c0a:	4631      	mov	r1, r6
  400c0c:	4630      	mov	r0, r6
  400c0e:	f004 ffeb 	bl	405be8 <__aeabi_fmul>
  400c12:	4601      	mov	r1, r0
  400c14:	4658      	mov	r0, fp
  400c16:	f004 fedf 	bl	4059d8 <__addsf3>
  400c1a:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  400c1c:	4629      	mov	r1, r5
  400c1e:	4628      	mov	r0, r5
  400c20:	f004 ffe2 	bl	405be8 <__aeabi_fmul>
  400c24:	4601      	mov	r1, r0
  400c26:	4650      	mov	r0, sl
  400c28:	f004 fed6 	bl	4059d8 <__addsf3>
  400c2c:	4682      	mov	sl, r0

		delay_ms(5);
  400c2e:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400c32:	f005 fc85 	bl	406540 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400c36:	3401      	adds	r4, #1
  400c38:	b2e4      	uxtb	r4, r4
  400c3a:	45a1      	cmp	r9, r4
  400c3c:	d1c5      	bne.n	400bca <mpu_calibrate_gyro+0x2e>
  400c3e:	e00a      	b.n	400c56 <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  400c40:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  400c44:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  400c46:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  400c4a:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  400c4e:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  400c52:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  400c56:	4648      	mov	r0, r9
  400c58:	f004 ff72 	bl	405b40 <__aeabi_i2f>
  400c5c:	4605      	mov	r5, r0
  400c5e:	4601      	mov	r1, r0
  400c60:	9800      	ldr	r0, [sp, #0]
  400c62:	f005 f875 	bl	405d50 <__aeabi_fdiv>
  400c66:	4606      	mov	r6, r0
  400c68:	4c2e      	ldr	r4, [pc, #184]	; (400d24 <mpu_calibrate_gyro+0x188>)
  400c6a:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  400c6c:	4629      	mov	r1, r5
  400c6e:	9801      	ldr	r0, [sp, #4]
  400c70:	f005 f86e 	bl	405d50 <__aeabi_fdiv>
  400c74:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  400c76:	4629      	mov	r1, r5
  400c78:	9802      	ldr	r0, [sp, #8]
  400c7a:	f005 f869 	bl	405d50 <__aeabi_fdiv>
  400c7e:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  400c80:	9f03      	ldr	r7, [sp, #12]
  400c82:	4929      	ldr	r1, [pc, #164]	; (400d28 <mpu_calibrate_gyro+0x18c>)
  400c84:	4638      	mov	r0, r7
  400c86:	f005 f863 	bl	405d50 <__aeabi_fdiv>
  400c8a:	4605      	mov	r5, r0
  400c8c:	4631      	mov	r1, r6
  400c8e:	4630      	mov	r0, r6
  400c90:	f004 ffaa 	bl	405be8 <__aeabi_fmul>
  400c94:	4601      	mov	r1, r0
  400c96:	4628      	mov	r0, r5
  400c98:	f004 fe9c 	bl	4059d4 <__aeabi_fsub>
  400c9c:	f004 fb1a 	bl	4052d4 <__aeabi_f2d>
  400ca0:	f001 f95e 	bl	401f60 <sqrt>
  400ca4:	4e21      	ldr	r6, [pc, #132]	; (400d2c <mpu_calibrate_gyro+0x190>)
  400ca6:	f004 fe41 	bl	40592c <__aeabi_d2f>
  400caa:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  400cac:	6865      	ldr	r5, [r4, #4]
  400cae:	491e      	ldr	r1, [pc, #120]	; (400d28 <mpu_calibrate_gyro+0x18c>)
  400cb0:	4658      	mov	r0, fp
  400cb2:	f005 f84d 	bl	405d50 <__aeabi_fdiv>
  400cb6:	4607      	mov	r7, r0
  400cb8:	4629      	mov	r1, r5
  400cba:	4628      	mov	r0, r5
  400cbc:	f004 ff94 	bl	405be8 <__aeabi_fmul>
  400cc0:	4601      	mov	r1, r0
  400cc2:	4638      	mov	r0, r7
  400cc4:	f004 fe86 	bl	4059d4 <__aeabi_fsub>
  400cc8:	f004 fb04 	bl	4052d4 <__aeabi_f2d>
  400ccc:	f001 f948 	bl	401f60 <sqrt>
  400cd0:	f004 fe2c 	bl	40592c <__aeabi_d2f>
  400cd4:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  400cd6:	68a4      	ldr	r4, [r4, #8]
  400cd8:	4913      	ldr	r1, [pc, #76]	; (400d28 <mpu_calibrate_gyro+0x18c>)
  400cda:	4650      	mov	r0, sl
  400cdc:	f005 f838 	bl	405d50 <__aeabi_fdiv>
  400ce0:	4605      	mov	r5, r0
  400ce2:	4621      	mov	r1, r4
  400ce4:	4620      	mov	r0, r4
  400ce6:	f004 ff7f 	bl	405be8 <__aeabi_fmul>
  400cea:	4601      	mov	r1, r0
  400cec:	4628      	mov	r0, r5
  400cee:	f004 fe71 	bl	4059d4 <__aeabi_fsub>
  400cf2:	f004 faef 	bl	4052d4 <__aeabi_f2d>
  400cf6:	f001 f933 	bl	401f60 <sqrt>
  400cfa:	f004 fe17 	bl	40592c <__aeabi_d2f>
  400cfe:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  400d00:	4b0b      	ldr	r3, [pc, #44]	; (400d30 <mpu_calibrate_gyro+0x194>)
  400d02:	681c      	ldr	r4, [r3, #0]
  400d04:	2100      	movs	r1, #0
  400d06:	4620      	mov	r0, r4
  400d08:	f005 f92a 	bl	405f60 <__aeabi_fcmpgt>
  400d0c:	b128      	cbz	r0, 400d1a <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  400d0e:	4620      	mov	r0, r4
  400d10:	f005 f956 	bl	405fc0 <__aeabi_f2uiz>
  400d14:	b2c0      	uxtb	r0, r0
  400d16:	f7ff ff0f 	bl	400b38 <mpu_set_threshold>
	}

}
  400d1a:	b005      	add	sp, #20
  400d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d20:	20000230 	.word	0x20000230
  400d24:	2000034c 	.word	0x2000034c
  400d28:	42480000 	.word	0x42480000
  400d2c:	200002f8 	.word	0x200002f8
  400d30:	20000234 	.word	0x20000234
  400d34:	20000304 	.word	0x20000304

00400d38 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  400d38:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  400d3a:	4b0c      	ldr	r3, [pc, #48]	; (400d6c <imu_init+0x34>)
  400d3c:	2200      	movs	r2, #0
  400d3e:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  400d40:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  400d42:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  400d44:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  400d46:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  400d48:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  400d4a:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  400d4c:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  400d4e:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  400d50:	f7ff fc26 	bl	4005a0 <mpu_init>
  400d54:	4604      	mov	r4, r0
  400d56:	f7ff fc4d 	bl	4005f4 <mpu_probe>
  400d5a:	4020      	ands	r0, r4
  400d5c:	b2c4      	uxtb	r4, r0
  400d5e:	2100      	movs	r1, #0
  400d60:	4608      	mov	r0, r1
  400d62:	f7ff fceb 	bl	40073c <mpu_begin>
}
  400d66:	4020      	ands	r0, r4
  400d68:	bd10      	pop	{r4, pc}
  400d6a:	bf00      	nop
  400d6c:	2000036c 	.word	0x2000036c

00400d70 <imu_calibrate>:

void imu_calibrate(void)
{
  400d70:	b508      	push	{r3, lr}
    mpu_calibrate_gyro(GYRO_SAMPLES);
  400d72:	2032      	movs	r0, #50	; 0x32
  400d74:	f7ff ff12 	bl	400b9c <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  400d78:	2000      	movs	r0, #0
  400d7a:	f7ff fedd 	bl	400b38 <mpu_set_threshold>
    mpu_log_settings();
  400d7e:	f7ff fe57 	bl	400a30 <mpu_log_settings>
  400d82:	bd08      	pop	{r3, pc}
  400d84:	0000      	movs	r0, r0
	...

00400d88 <imu_tick>:
}

void imu_tick(void)
{
  400d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d8c:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  400d8e:	4b82      	ldr	r3, [pc, #520]	; (400f98 <imu_tick+0x210>)
  400d90:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  400d92:	a808      	add	r0, sp, #32
  400d94:	f7ff fd4e 	bl	400834 <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  400d98:	f7ff fe22 	bl	4009e0 <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  400d9c:	4c7f      	ldr	r4, [pc, #508]	; (400f9c <imu_tick+0x214>)
  400d9e:	6820      	ldr	r0, [r4, #0]
  400da0:	f004 fa98 	bl	4052d4 <__aeabi_f2d>
  400da4:	a37a      	add	r3, pc, #488	; (adr r3, 400f90 <imu_tick+0x208>)
  400da6:	e9d3 2300 	ldrd	r2, r3, [r3]
  400daa:	f004 fae7 	bl	40537c <__aeabi_dmul>
  400dae:	2200      	movs	r2, #0
  400db0:	4b7b      	ldr	r3, [pc, #492]	; (400fa0 <imu_tick+0x218>)
  400db2:	f004 fc0d 	bl	4055d0 <__aeabi_ddiv>
  400db6:	f004 fdb9 	bl	40592c <__aeabi_d2f>
  400dba:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  400dbc:	6860      	ldr	r0, [r4, #4]
  400dbe:	f004 fa89 	bl	4052d4 <__aeabi_f2d>
  400dc2:	a373      	add	r3, pc, #460	; (adr r3, 400f90 <imu_tick+0x208>)
  400dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  400dc8:	f004 fad8 	bl	40537c <__aeabi_dmul>
  400dcc:	2200      	movs	r2, #0
  400dce:	4b74      	ldr	r3, [pc, #464]	; (400fa0 <imu_tick+0x218>)
  400dd0:	f004 fbfe 	bl	4055d0 <__aeabi_ddiv>
  400dd4:	f004 fdaa 	bl	40592c <__aeabi_d2f>
  400dd8:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  400dda:	68a0      	ldr	r0, [r4, #8]
  400ddc:	f004 fa7a 	bl	4052d4 <__aeabi_f2d>
  400de0:	a36b      	add	r3, pc, #428	; (adr r3, 400f90 <imu_tick+0x208>)
  400de2:	e9d3 2300 	ldrd	r2, r3, [r3]
  400de6:	f004 fac9 	bl	40537c <__aeabi_dmul>
  400dea:	2200      	movs	r2, #0
  400dec:	4b6c      	ldr	r3, [pc, #432]	; (400fa0 <imu_tick+0x218>)
  400dee:	f004 fbef 	bl	4055d0 <__aeabi_ddiv>
  400df2:	f004 fd9b 	bl	40592c <__aeabi_d2f>
  400df6:	9007      	str	r0, [sp, #28]



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  400df8:	4c6a      	ldr	r4, [pc, #424]	; (400fa4 <imu_tick+0x21c>)
  400dfa:	6820      	ldr	r0, [r4, #0]
  400dfc:	f004 fa6a 	bl	4052d4 <__aeabi_f2d>
  400e00:	e9cd 0100 	strd	r0, r1, [sp]
  400e04:	6860      	ldr	r0, [r4, #4]
  400e06:	f004 fa65 	bl	4052d4 <__aeabi_f2d>
  400e0a:	4682      	mov	sl, r0
  400e0c:	468b      	mov	fp, r1
  400e0e:	68a0      	ldr	r0, [r4, #8]
  400e10:	f004 fa60 	bl	4052d4 <__aeabi_f2d>
  400e14:	4606      	mov	r6, r0
  400e16:	460f      	mov	r7, r1
  400e18:	4632      	mov	r2, r6
  400e1a:	463b      	mov	r3, r7
  400e1c:	4630      	mov	r0, r6
  400e1e:	4639      	mov	r1, r7
  400e20:	f004 faac 	bl	40537c <__aeabi_dmul>
  400e24:	4680      	mov	r8, r0
  400e26:	4689      	mov	r9, r1
  400e28:	4652      	mov	r2, sl
  400e2a:	465b      	mov	r3, fp
  400e2c:	4650      	mov	r0, sl
  400e2e:	4659      	mov	r1, fp
  400e30:	f004 faa4 	bl	40537c <__aeabi_dmul>
  400e34:	4602      	mov	r2, r0
  400e36:	460b      	mov	r3, r1
  400e38:	4640      	mov	r0, r8
  400e3a:	4649      	mov	r1, r9
  400e3c:	f004 f8ec 	bl	405018 <__adddf3>
  400e40:	f001 f88e 	bl	401f60 <sqrt>
  400e44:	4602      	mov	r2, r0
  400e46:	460b      	mov	r3, r1
  400e48:	e9dd 0100 	ldrd	r0, r1, [sp]
  400e4c:	f001 f886 	bl	401f5c <atan2>
  400e50:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  400e54:	6860      	ldr	r0, [r4, #4]
  400e56:	f004 fa3d 	bl	4052d4 <__aeabi_f2d>
  400e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e5e:	6820      	ldr	r0, [r4, #0]
  400e60:	f004 fa38 	bl	4052d4 <__aeabi_f2d>
  400e64:	4682      	mov	sl, r0
  400e66:	468b      	mov	fp, r1
  400e68:	68a0      	ldr	r0, [r4, #8]
  400e6a:	f004 fa33 	bl	4052d4 <__aeabi_f2d>
  400e6e:	4606      	mov	r6, r0
  400e70:	460f      	mov	r7, r1
  400e72:	4652      	mov	r2, sl
  400e74:	465b      	mov	r3, fp
  400e76:	4650      	mov	r0, sl
  400e78:	4659      	mov	r1, fp
  400e7a:	f004 fa7f 	bl	40537c <__aeabi_dmul>
  400e7e:	4680      	mov	r8, r0
  400e80:	4689      	mov	r9, r1
  400e82:	4632      	mov	r2, r6
  400e84:	463b      	mov	r3, r7
  400e86:	4630      	mov	r0, r6
  400e88:	4639      	mov	r1, r7
  400e8a:	f004 fa77 	bl	40537c <__aeabi_dmul>
  400e8e:	4602      	mov	r2, r0
  400e90:	460b      	mov	r3, r1
  400e92:	4640      	mov	r0, r8
  400e94:	4649      	mov	r1, r9
  400e96:	f004 f8bf 	bl	405018 <__adddf3>
  400e9a:	f001 f861 	bl	401f60 <sqrt>
  400e9e:	4602      	mov	r2, r0
  400ea0:	460b      	mov	r3, r1
  400ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400ea6:	f001 f859 	bl	401f5c <atan2>
  400eaa:	4680      	mov	r8, r0
  400eac:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  400eae:	f8df a118 	ldr.w	sl, [pc, #280]	; 400fc8 <imu_tick+0x240>
    float dt = ((float)delta_t/1000.0f);
  400eb2:	f8da 0000 	ldr.w	r0, [sl]
  400eb6:	1a28      	subs	r0, r5, r0
  400eb8:	f004 fe3e 	bl	405b38 <__aeabi_ui2f>
  400ebc:	493a      	ldr	r1, [pc, #232]	; (400fa8 <imu_tick+0x220>)
  400ebe:	f004 ff47 	bl	405d50 <__aeabi_fdiv>
  400ec2:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400ec4:	4601      	mov	r1, r0
  400ec6:	9805      	ldr	r0, [sp, #20]
  400ec8:	f004 fe8e 	bl	405be8 <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  400ecc:	4f37      	ldr	r7, [pc, #220]	; (400fac <imu_tick+0x224>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400ece:	6839      	ldr	r1, [r7, #0]
  400ed0:	f004 fd82 	bl	4059d8 <__addsf3>
  400ed4:	4936      	ldr	r1, [pc, #216]	; (400fb0 <imu_tick+0x228>)
  400ed6:	f004 fe87 	bl	405be8 <__aeabi_fmul>
  400eda:	4683      	mov	fp, r0
  400edc:	2200      	movs	r2, #0
  400ede:	4b30      	ldr	r3, [pc, #192]	; (400fa0 <imu_tick+0x218>)
  400ee0:	4640      	mov	r0, r8
  400ee2:	4649      	mov	r1, r9
  400ee4:	f004 fa4a 	bl	40537c <__aeabi_dmul>
  400ee8:	a329      	add	r3, pc, #164	; (adr r3, 400f90 <imu_tick+0x208>)
  400eea:	e9d3 2300 	ldrd	r2, r3, [r3]
  400eee:	f004 fb6f 	bl	4055d0 <__aeabi_ddiv>
  400ef2:	f004 fd1b 	bl	40592c <__aeabi_d2f>
  400ef6:	492f      	ldr	r1, [pc, #188]	; (400fb4 <imu_tick+0x22c>)
  400ef8:	f004 fe76 	bl	405be8 <__aeabi_fmul>
  400efc:	4601      	mov	r1, r0
  400efe:	4658      	mov	r0, fp
  400f00:	f004 fd6a 	bl	4059d8 <__addsf3>
  400f04:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400f06:	4621      	mov	r1, r4
  400f08:	9806      	ldr	r0, [sp, #24]
  400f0a:	f004 fe6d 	bl	405be8 <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  400f0e:	4e2a      	ldr	r6, [pc, #168]	; (400fb8 <imu_tick+0x230>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400f10:	6831      	ldr	r1, [r6, #0]
  400f12:	f004 fd61 	bl	4059d8 <__addsf3>
  400f16:	4926      	ldr	r1, [pc, #152]	; (400fb0 <imu_tick+0x228>)
  400f18:	f004 fe66 	bl	405be8 <__aeabi_fmul>
  400f1c:	4681      	mov	r9, r0
  400f1e:	2200      	movs	r2, #0
  400f20:	4b1f      	ldr	r3, [pc, #124]	; (400fa0 <imu_tick+0x218>)
  400f22:	e9dd 0100 	ldrd	r0, r1, [sp]
  400f26:	f004 fa29 	bl	40537c <__aeabi_dmul>
  400f2a:	a319      	add	r3, pc, #100	; (adr r3, 400f90 <imu_tick+0x208>)
  400f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f30:	f004 fb4e 	bl	4055d0 <__aeabi_ddiv>
  400f34:	f004 fcfa 	bl	40592c <__aeabi_d2f>
  400f38:	491e      	ldr	r1, [pc, #120]	; (400fb4 <imu_tick+0x22c>)
  400f3a:	f004 fe55 	bl	405be8 <__aeabi_fmul>
  400f3e:	4601      	mov	r1, r0
  400f40:	4648      	mov	r0, r9
  400f42:	f004 fd49 	bl	4059d8 <__addsf3>
  400f46:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  400f48:	4621      	mov	r1, r4
  400f4a:	9807      	ldr	r0, [sp, #28]
  400f4c:	f004 fe4c 	bl	405be8 <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  400f50:	4c1a      	ldr	r4, [pc, #104]	; (400fbc <imu_tick+0x234>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  400f52:	6821      	ldr	r1, [r4, #0]
  400f54:	f004 fd40 	bl	4059d8 <__addsf3>
  400f58:	4915      	ldr	r1, [pc, #84]	; (400fb0 <imu_tick+0x228>)
  400f5a:	f004 fe45 	bl	405be8 <__aeabi_fmul>
  400f5e:	2100      	movs	r1, #0
  400f60:	f004 fd3a 	bl	4059d8 <__addsf3>


    last_time_read = t_now;
  400f64:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  400f68:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  400f6c:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  400f70:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  400f72:	4b13      	ldr	r3, [pc, #76]	; (400fc0 <imu_tick+0x238>)
  400f74:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  400f78:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  400f7c:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  400f7e:	4b11      	ldr	r3, [pc, #68]	; (400fc4 <imu_tick+0x23c>)
  400f80:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  400f84:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  400f88:	6098      	str	r0, [r3, #8]


  400f8a:	b00d      	add	sp, #52	; 0x34
  400f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400f90:	54442d18 	.word	0x54442d18
  400f94:	400921fb 	.word	0x400921fb
  400f98:	20000204 	.word	0x20000204
  400f9c:	2000035c 	.word	0x2000035c
  400fa0:	40668000 	.word	0x40668000
  400fa4:	20000330 	.word	0x20000330
  400fa8:	447a0000 	.word	0x447a0000
  400fac:	20000220 	.word	0x20000220
  400fb0:	3f75c28f 	.word	0x3f75c28f
  400fb4:	3d23d710 	.word	0x3d23d710
  400fb8:	20000224 	.word	0x20000224
  400fbc:	20000228 	.word	0x20000228
  400fc0:	20000390 	.word	0x20000390
  400fc4:	2000036c 	.word	0x2000036c
  400fc8:	2000021c 	.word	0x2000021c

00400fcc <servo_init>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void servo_init(void)
{
  400fcc:	b570      	push	{r4, r5, r6, lr}
  400fce:	b084      	sub	sp, #16
    
	printf("servo_init\r\n");
  400fd0:	4819      	ldr	r0, [pc, #100]	; (401038 <servo_init+0x6c>)
  400fd2:	f001 fff5 	bl	402fc0 <iprintf>
	
	current_duty = PWM_MIN;
  400fd6:	4e19      	ldr	r6, [pc, #100]	; (40103c <servo_init+0x70>)
  400fd8:	f240 437e 	movw	r3, #1150	; 0x47e
  400fdc:	6033      	str	r3, [r6, #0]

    pio_configure_pin(EXT1_PIN_PWM_0, PIO_TYPE_PIO_PERIPH_B);
  400fde:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fe2:	2017      	movs	r0, #23
  400fe4:	f000 fb68 	bl	4016b8 <pio_configure_pin>

	/* Enable PWM peripheral clock */

	pmc_enable_periph_clk(ID_PWM);
  400fe8:	201f      	movs	r0, #31
  400fea:	f000 fd17 	bl	401a1c <pmc_enable_periph_clk>


	/* Disable PWM channels for LEDs */

	pwm_channel_disable(PWM, EXT1_PWM_CHANNEL);
  400fee:	4c14      	ldr	r4, [pc, #80]	; (401040 <servo_init+0x74>)
  400ff0:	2100      	movs	r1, #0
  400ff2:	4620      	mov	r0, r4
  400ff4:	f000 fe5a 	bl	401cac <pwm_channel_disable>

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  400ff8:	4b12      	ldr	r3, [pc, #72]	; (401044 <servo_init+0x78>)
  400ffa:	9301      	str	r3, [sp, #4]
  400ffc:	2500      	movs	r5, #0
  400ffe:	9502      	str	r5, [sp, #8]
  401000:	4b11      	ldr	r3, [pc, #68]	; (401048 <servo_init+0x7c>)
  401002:	9303      	str	r3, [sp, #12]
        .ul_clka = PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	pwm_init(PWM, &clock_setting);
  401004:	a901      	add	r1, sp, #4
  401006:	4620      	mov	r0, r4
  401008:	f000 fda4 	bl	401b54 <pwm_init>


	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_servo.alignment = PWM_ALIGN_LEFT;
  40100c:	490f      	ldr	r1, [pc, #60]	; (40104c <servo_init+0x80>)
  40100e:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	// g_pwm_channel_servo.polarity = PWM_LOW;
	g_pwm_channel_servo.polarity = PWM_HIGH;
  401010:	2301      	movs	r3, #1
  401012:	728b      	strb	r3, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_servo.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401014:	230b      	movs	r3, #11
  401016:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_servo.ul_period = PWM_PERIOD_TICKS;
  401018:	f644 6320 	movw	r3, #20000	; 0x4e20
  40101c:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_servo.ul_duty = current_duty;
  40101e:	6833      	ldr	r3, [r6, #0]
  401020:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_servo.channel = EXT1_PWM_CHANNEL;
  401022:	600d      	str	r5, [r1, #0]

	pwm_channel_init(PWM, &g_pwm_channel_servo);
  401024:	4620      	mov	r0, r4
  401026:	f000 fdb9 	bl	401b9c <pwm_channel_init>

    pwm_channel_enable(PWM, EXT1_PWM_CHANNEL);
  40102a:	4629      	mov	r1, r5
  40102c:	4620      	mov	r0, r4
  40102e:	f000 fe37 	bl	401ca0 <pwm_channel_enable>
	
}
  401032:	b004      	add	sp, #16
  401034:	bd70      	pop	{r4, r5, r6, pc}
  401036:	bf00      	nop
  401038:	004061c0 	.word	0x004061c0
  40103c:	20000238 	.word	0x20000238
  401040:	40020000 	.word	0x40020000
  401044:	000f4240 	.word	0x000f4240
  401048:	07270e00 	.word	0x07270e00
  40104c:	2000039c 	.word	0x2000039c

00401050 <servo_set_angle>:
	// 	servo_set_angle(ap.imu.y_axis);
	// }
}

void servo_set_angle(float angle)
{
  401050:	b510      	push	{r4, lr}

clock_time_t f_servo_timeout = 0;

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  401052:	f004 ff8f 	bl	405f74 <__aeabi_f2iz>
  401056:	f240 3352 	movw	r3, #850	; 0x352
  40105a:	fb03 f000 	mul.w	r0, r3, r0
  40105e:	4c09      	ldr	r4, [pc, #36]	; (401084 <servo_set_angle+0x34>)
  401060:	fb84 3400 	smull	r3, r4, r4, r0
  401064:	4404      	add	r4, r0
  401066:	17c0      	asrs	r0, r0, #31
  401068:	ebc0 14a4 	rsb	r4, r0, r4, asr #6
  40106c:	f204 447e 	addw	r4, r4, #1150	; 0x47e

	// long duty = map(x, ANGLE_MIN, ANGLE_MAX, PWM_MIN, PWM_MAX);
	long duty = map(x, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);


	printf("current_duty_cycle: %d\r\n", duty);
  401070:	4621      	mov	r1, r4
  401072:	4805      	ldr	r0, [pc, #20]	; (401088 <servo_set_angle+0x38>)
  401074:	f001 ffa4 	bl	402fc0 <iprintf>
	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, duty);
  401078:	4622      	mov	r2, r4
  40107a:	4904      	ldr	r1, [pc, #16]	; (40108c <servo_set_angle+0x3c>)
  40107c:	4804      	ldr	r0, [pc, #16]	; (401090 <servo_set_angle+0x40>)
  40107e:	f000 fe01 	bl	401c84 <pwm_channel_update_duty>
  401082:	bd10      	pop	{r4, pc}
  401084:	b60b60b7 	.word	0xb60b60b7
  401088:	004061d0 	.word	0x004061d0
  40108c:	2000039c 	.word	0x2000039c
  401090:	40020000 	.word	0x40020000

00401094 <servo_tick>:
    pwm_channel_enable(PWM, EXT1_PWM_CHANNEL);
	
}

void servo_tick(void)
{
  401094:	b508      	push	{r3, lr}

	servo_set_angle(ap.imu.y_axis);
  401096:	4b02      	ldr	r3, [pc, #8]	; (4010a0 <servo_tick+0xc>)
  401098:	6858      	ldr	r0, [r3, #4]
  40109a:	f7ff ffd9 	bl	401050 <servo_set_angle>
  40109e:	bd08      	pop	{r3, pc}
  4010a0:	2000036c 	.word	0x2000036c

004010a4 <servo_min>:
	printf("current_duty_cycle: %d\r\n", duty);
	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, duty);
}

void servo_min(void)
{
  4010a4:	b510      	push	{r4, lr}
	current_duty = PWM_MIN;
  4010a6:	4c06      	ldr	r4, [pc, #24]	; (4010c0 <servo_min+0x1c>)
  4010a8:	f240 417e 	movw	r1, #1150	; 0x47e
  4010ac:	6021      	str	r1, [r4, #0]
	printf("current_duty_cycle: %d\r\n", current_duty);
  4010ae:	4805      	ldr	r0, [pc, #20]	; (4010c4 <servo_min+0x20>)
  4010b0:	f001 ff86 	bl	402fc0 <iprintf>
	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, current_duty);
  4010b4:	6822      	ldr	r2, [r4, #0]
  4010b6:	4904      	ldr	r1, [pc, #16]	; (4010c8 <servo_min+0x24>)
  4010b8:	4804      	ldr	r0, [pc, #16]	; (4010cc <servo_min+0x28>)
  4010ba:	f000 fde3 	bl	401c84 <pwm_channel_update_duty>
  4010be:	bd10      	pop	{r4, pc}
  4010c0:	20000238 	.word	0x20000238
  4010c4:	004061d0 	.word	0x004061d0
  4010c8:	2000039c 	.word	0x2000039c
  4010cc:	40020000 	.word	0x40020000

004010d0 <servo_max>:
}

void servo_max(void)
{
  4010d0:	b510      	push	{r4, lr}
	current_duty = PWM_MAX;
  4010d2:	4c06      	ldr	r4, [pc, #24]	; (4010ec <servo_max+0x1c>)
  4010d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  4010d8:	6021      	str	r1, [r4, #0]
	printf("current_duty_cycle: %d\r\n", current_duty);
  4010da:	4805      	ldr	r0, [pc, #20]	; (4010f0 <servo_max+0x20>)
  4010dc:	f001 ff70 	bl	402fc0 <iprintf>
	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, current_duty);
  4010e0:	6822      	ldr	r2, [r4, #0]
  4010e2:	4904      	ldr	r1, [pc, #16]	; (4010f4 <servo_max+0x24>)
  4010e4:	4804      	ldr	r0, [pc, #16]	; (4010f8 <servo_max+0x28>)
  4010e6:	f000 fdcd 	bl	401c84 <pwm_channel_update_duty>
  4010ea:	bd10      	pop	{r4, pc}
  4010ec:	20000238 	.word	0x20000238
  4010f0:	004061d0 	.word	0x004061d0
  4010f4:	2000039c 	.word	0x2000039c
  4010f8:	40020000 	.word	0x40020000

004010fc <servo_mid>:
}

void servo_mid(void)
{
  4010fc:	b510      	push	{r4, lr}
	current_duty = PWM_MID;
  4010fe:	4c06      	ldr	r4, [pc, #24]	; (401118 <servo_mid+0x1c>)
  401100:	f240 5146 	movw	r1, #1350	; 0x546
  401104:	6021      	str	r1, [r4, #0]
	printf("current_duty_cycle: %d\r\n", current_duty);
  401106:	4805      	ldr	r0, [pc, #20]	; (40111c <servo_mid+0x20>)
  401108:	f001 ff5a 	bl	402fc0 <iprintf>
	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, current_duty);
  40110c:	6822      	ldr	r2, [r4, #0]
  40110e:	4904      	ldr	r1, [pc, #16]	; (401120 <servo_mid+0x24>)
  401110:	4804      	ldr	r0, [pc, #16]	; (401124 <servo_mid+0x28>)
  401112:	f000 fdb7 	bl	401c84 <pwm_channel_update_duty>
  401116:	bd10      	pop	{r4, pc}
  401118:	20000238 	.word	0x20000238
  40111c:	004061d0 	.word	0x004061d0
  401120:	2000039c 	.word	0x2000039c
  401124:	40020000 	.word	0x40020000

00401128 <servo_increment>:
}

void servo_increment(void)
{
  401128:	b510      	push	{r4, lr}
	current_duty += PWM_STEP;
  40112a:	4c06      	ldr	r4, [pc, #24]	; (401144 <servo_increment+0x1c>)
  40112c:	6821      	ldr	r1, [r4, #0]
  40112e:	310a      	adds	r1, #10
  401130:	6021      	str	r1, [r4, #0]
	printf("current_duty_cycle: %d\r\n", current_duty);
  401132:	4805      	ldr	r0, [pc, #20]	; (401148 <servo_increment+0x20>)
  401134:	f001 ff44 	bl	402fc0 <iprintf>
	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, current_duty);
  401138:	6822      	ldr	r2, [r4, #0]
  40113a:	4904      	ldr	r1, [pc, #16]	; (40114c <servo_increment+0x24>)
  40113c:	4804      	ldr	r0, [pc, #16]	; (401150 <servo_increment+0x28>)
  40113e:	f000 fda1 	bl	401c84 <pwm_channel_update_duty>
  401142:	bd10      	pop	{r4, pc}
  401144:	20000238 	.word	0x20000238
  401148:	004061d0 	.word	0x004061d0
  40114c:	2000039c 	.word	0x2000039c
  401150:	40020000 	.word	0x40020000

00401154 <servo_decrement>:
}

void servo_decrement(void)
{
  401154:	b510      	push	{r4, lr}
	current_duty -= PWM_STEP;
  401156:	4c06      	ldr	r4, [pc, #24]	; (401170 <servo_decrement+0x1c>)
  401158:	6821      	ldr	r1, [r4, #0]
  40115a:	390a      	subs	r1, #10
  40115c:	6021      	str	r1, [r4, #0]
	printf("current_duty_cycle: %d\r\n", current_duty);
  40115e:	4805      	ldr	r0, [pc, #20]	; (401174 <servo_decrement+0x20>)
  401160:	f001 ff2e 	bl	402fc0 <iprintf>
	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, current_duty);
  401164:	6822      	ldr	r2, [r4, #0]
  401166:	4904      	ldr	r1, [pc, #16]	; (401178 <servo_decrement+0x24>)
  401168:	4804      	ldr	r0, [pc, #16]	; (40117c <servo_decrement+0x28>)
  40116a:	f000 fd8b 	bl	401c84 <pwm_channel_update_duty>
  40116e:	bd10      	pop	{r4, pc}
  401170:	20000238 	.word	0x20000238
  401174:	004061d0 	.word	0x004061d0
  401178:	2000039c 	.word	0x2000039c
  40117c:	40020000 	.word	0x40020000

00401180 <pid_tick>:
float kd = 0.0;
float desired_angle = 0.0f;


void pid_tick(void)
{
  401180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    previous_error = time;
  401184:	4c27      	ldr	r4, [pc, #156]	; (401224 <pid_tick+0xa4>)
  401186:	6820      	ldr	r0, [r4, #0]
  401188:	f004 fcd6 	bl	405b38 <__aeabi_ui2f>
  40118c:	4680      	mov	r8, r0
    time = cph_get_millis();
  40118e:	4b26      	ldr	r3, [pc, #152]	; (401228 <pid_tick+0xa8>)
  401190:	681b      	ldr	r3, [r3, #0]
  401192:	6023      	str	r3, [r4, #0]
    elapsed_time = (time - previous_time)/1000;
  401194:	4a25      	ldr	r2, [pc, #148]	; (40122c <pid_tick+0xac>)
  401196:	6814      	ldr	r4, [r2, #0]
  401198:	1b1b      	subs	r3, r3, r4
  40119a:	4c25      	ldr	r4, [pc, #148]	; (401230 <pid_tick+0xb0>)
  40119c:	fba4 3403 	umull	r3, r4, r4, r3
  4011a0:	09a4      	lsrs	r4, r4, #6
  4011a2:	4b24      	ldr	r3, [pc, #144]	; (401234 <pid_tick+0xb4>)
  4011a4:	601c      	str	r4, [r3, #0]

    error = ap.imu.y_axis - desired_angle;
  4011a6:	4b24      	ldr	r3, [pc, #144]	; (401238 <pid_tick+0xb8>)
  4011a8:	6819      	ldr	r1, [r3, #0]
  4011aa:	4b24      	ldr	r3, [pc, #144]	; (40123c <pid_tick+0xbc>)
  4011ac:	6858      	ldr	r0, [r3, #4]
  4011ae:	f004 fc11 	bl	4059d4 <__aeabi_fsub>
  4011b2:	4605      	mov	r5, r0
  4011b4:	4b22      	ldr	r3, [pc, #136]	; (401240 <pid_tick+0xc0>)
  4011b6:	6018      	str	r0, [r3, #0]
    pid_p = kp*error;
  4011b8:	4b22      	ldr	r3, [pc, #136]	; (401244 <pid_tick+0xc4>)
  4011ba:	6819      	ldr	r1, [r3, #0]
  4011bc:	f004 fd14 	bl	405be8 <__aeabi_fmul>
  4011c0:	4606      	mov	r6, r0
  4011c2:	4b21      	ldr	r3, [pc, #132]	; (401248 <pid_tick+0xc8>)
  4011c4:	6018      	str	r0, [r3, #0]

    // if (-3.0f < error < 3.0f) {
    //     pid_i = pid_i +(ki*error);
    // }

    pid_i = pid_i +(ki*error);
  4011c6:	4b21      	ldr	r3, [pc, #132]	; (40124c <pid_tick+0xcc>)
  4011c8:	6819      	ldr	r1, [r3, #0]
  4011ca:	4628      	mov	r0, r5
  4011cc:	f004 fd0c 	bl	405be8 <__aeabi_fmul>
  4011d0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401260 <pid_tick+0xe0>
  4011d4:	f8d9 1000 	ldr.w	r1, [r9]
  4011d8:	f004 fbfe 	bl	4059d8 <__addsf3>
  4011dc:	4607      	mov	r7, r0
  4011de:	f8c9 0000 	str.w	r0, [r9]

    pid_d = kd * ((error-previous_error)/elapsed_time);
  4011e2:	4641      	mov	r1, r8
  4011e4:	4628      	mov	r0, r5
  4011e6:	f004 fbf5 	bl	4059d4 <__aeabi_fsub>
  4011ea:	4680      	mov	r8, r0
  4011ec:	4620      	mov	r0, r4
  4011ee:	f004 fca3 	bl	405b38 <__aeabi_ui2f>
  4011f2:	4601      	mov	r1, r0
  4011f4:	4640      	mov	r0, r8
  4011f6:	f004 fdab 	bl	405d50 <__aeabi_fdiv>
  4011fa:	4b15      	ldr	r3, [pc, #84]	; (401250 <pid_tick+0xd0>)
  4011fc:	6819      	ldr	r1, [r3, #0]
  4011fe:	f004 fcf3 	bl	405be8 <__aeabi_fmul>
  401202:	4604      	mov	r4, r0
  401204:	4b13      	ldr	r3, [pc, #76]	; (401254 <pid_tick+0xd4>)
  401206:	6018      	str	r0, [r3, #0]

    pid = pid_p + pid_i + pid_d;
  401208:	4639      	mov	r1, r7
  40120a:	4630      	mov	r0, r6
  40120c:	f004 fbe4 	bl	4059d8 <__addsf3>
  401210:	4621      	mov	r1, r4
  401212:	f004 fbe1 	bl	4059d8 <__addsf3>
  401216:	4b10      	ldr	r3, [pc, #64]	; (401258 <pid_tick+0xd8>)
  401218:	6018      	str	r0, [r3, #0]

    previous_error = error;
  40121a:	4b10      	ldr	r3, [pc, #64]	; (40125c <pid_tick+0xdc>)
  40121c:	601d      	str	r5, [r3, #0]
  40121e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401222:	bf00      	nop
  401224:	2000025c 	.word	0x2000025c
  401228:	20000204 	.word	0x20000204
  40122c:	20000260 	.word	0x20000260
  401230:	10624dd3 	.word	0x10624dd3
  401234:	20000264 	.word	0x20000264
  401238:	20000248 	.word	0x20000248
  40123c:	2000036c 	.word	0x2000036c
  401240:	20000250 	.word	0x20000250
  401244:	2000000c 	.word	0x2000000c
  401248:	20000268 	.word	0x20000268
  40124c:	20000258 	.word	0x20000258
  401250:	20000254 	.word	0x20000254
  401254:	2000023c 	.word	0x2000023c
  401258:	20000244 	.word	0x20000244
  40125c:	20000240 	.word	0x20000240
  401260:	2000024c 	.word	0x2000024c

00401264 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401264:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  401266:	482c      	ldr	r0, [pc, #176]	; (401318 <board_init+0xb4>)
  401268:	f000 fc02 	bl	401a70 <wdt_disable>
  40126c:	200b      	movs	r0, #11
  40126e:	f000 fbd5 	bl	401a1c <pmc_enable_periph_clk>
  401272:	200c      	movs	r0, #12
  401274:	f000 fbd2 	bl	401a1c <pmc_enable_periph_clk>
  401278:	200d      	movs	r0, #13
  40127a:	f000 fbcf 	bl	401a1c <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40127e:	4b27      	ldr	r3, [pc, #156]	; (40131c <board_init+0xb8>)
  401280:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401284:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401286:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401288:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40128c:	4c24      	ldr	r4, [pc, #144]	; (401320 <board_init+0xbc>)
  40128e:	2504      	movs	r5, #4
  401290:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401292:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401296:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401298:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40129c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40129e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4012a0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4012a4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4012a6:	f022 0204 	bic.w	r2, r2, #4
  4012aa:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4012ac:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4012ae:	f022 0204 	bic.w	r2, r2, #4
  4012b2:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4012b8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ba:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4012c4:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012c6:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012c8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4012cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4012d0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012d2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4012d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4012dc:	210c      	movs	r1, #12
  4012de:	4811      	ldr	r0, [pc, #68]	; (401324 <board_init+0xc0>)
  4012e0:	f000 fa76 	bl	4017d0 <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4012e4:	4e10      	ldr	r6, [pc, #64]	; (401328 <board_init+0xc4>)
  4012e6:	4631      	mov	r1, r6
  4012e8:	2003      	movs	r0, #3
  4012ea:	f000 f9e5 	bl	4016b8 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4012ee:	4631      	mov	r1, r6
  4012f0:	4628      	mov	r0, r5
  4012f2:	f000 f9e1 	bl	4016b8 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4012f6:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4012f8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4012fc:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4012fe:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401300:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401304:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401306:	f023 0304 	bic.w	r3, r3, #4
  40130a:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40130c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40130e:	f023 0304 	bic.w	r3, r3, #4
  401312:	6763      	str	r3, [r4, #116]	; 0x74
  401314:	bd70      	pop	{r4, r5, r6, pc}
  401316:	bf00      	nop
  401318:	400e1450 	.word	0x400e1450
  40131c:	400e1200 	.word	0x400e1200
  401320:	400e0e00 	.word	0x400e0e00
  401324:	400e1000 	.word	0x400e1000
  401328:	08000001 	.word	0x08000001

0040132c <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40132c:	4b2b      	ldr	r3, [pc, #172]	; (4013dc <twi_set_speed+0xb0>)
  40132e:	4299      	cmp	r1, r3
  401330:	d849      	bhi.n	4013c6 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401332:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401336:	4299      	cmp	r1, r3
  401338:	d92b      	bls.n	401392 <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40133a:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40133c:	4c28      	ldr	r4, [pc, #160]	; (4013e0 <twi_set_speed+0xb4>)
  40133e:	fba4 3402 	umull	r3, r4, r4, r2
  401342:	0ba4      	lsrs	r4, r4, #14
  401344:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401346:	4b27      	ldr	r3, [pc, #156]	; (4013e4 <twi_set_speed+0xb8>)
  401348:	440b      	add	r3, r1
  40134a:	009b      	lsls	r3, r3, #2
  40134c:	fbb2 f2f3 	udiv	r2, r2, r3
  401350:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401352:	2cff      	cmp	r4, #255	; 0xff
  401354:	d939      	bls.n	4013ca <twi_set_speed+0x9e>
  401356:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401358:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40135a:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40135c:	2cff      	cmp	r4, #255	; 0xff
  40135e:	d902      	bls.n	401366 <twi_set_speed+0x3a>
  401360:	2b07      	cmp	r3, #7
  401362:	d1f9      	bne.n	401358 <twi_set_speed+0x2c>
  401364:	e00a      	b.n	40137c <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401366:	2aff      	cmp	r2, #255	; 0xff
  401368:	d908      	bls.n	40137c <twi_set_speed+0x50>
  40136a:	2b06      	cmp	r3, #6
  40136c:	d900      	bls.n	401370 <twi_set_speed+0x44>
  40136e:	e005      	b.n	40137c <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  401370:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  401372:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401374:	2aff      	cmp	r2, #255	; 0xff
  401376:	d901      	bls.n	40137c <twi_set_speed+0x50>
  401378:	2b06      	cmp	r3, #6
  40137a:	d9f9      	bls.n	401370 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  40137c:	0212      	lsls	r2, r2, #8
  40137e:	b292      	uxth	r2, r2
  401380:	041b      	lsls	r3, r3, #16
  401382:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401386:	431a      	orrs	r2, r3
  401388:	b2e4      	uxtb	r4, r4
  40138a:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  40138c:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40138e:	2000      	movs	r0, #0
  401390:	e021      	b.n	4013d6 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401392:	0049      	lsls	r1, r1, #1
  401394:	fbb2 f2f1 	udiv	r2, r2, r1
  401398:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40139a:	2aff      	cmp	r2, #255	; 0xff
  40139c:	d907      	bls.n	4013ae <twi_set_speed+0x82>
  40139e:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4013a0:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4013a2:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4013a4:	2aff      	cmp	r2, #255	; 0xff
  4013a6:	d903      	bls.n	4013b0 <twi_set_speed+0x84>
  4013a8:	2b07      	cmp	r3, #7
  4013aa:	d1f9      	bne.n	4013a0 <twi_set_speed+0x74>
  4013ac:	e000      	b.n	4013b0 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4013ae:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4013b0:	0211      	lsls	r1, r2, #8
  4013b2:	b289      	uxth	r1, r1
  4013b4:	041b      	lsls	r3, r3, #16
  4013b6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4013ba:	430b      	orrs	r3, r1
  4013bc:	b2d2      	uxtb	r2, r2
  4013be:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4013c0:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4013c2:	2000      	movs	r0, #0
}
  4013c4:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  4013c6:	2001      	movs	r0, #1
  4013c8:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4013ca:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4013cc:	bf88      	it	hi
  4013ce:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4013d0:	d8ce      	bhi.n	401370 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4013d2:	2300      	movs	r3, #0
  4013d4:	e7d2      	b.n	40137c <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  4013d6:	bc10      	pop	{r4}
  4013d8:	4770      	bx	lr
  4013da:	bf00      	nop
  4013dc:	00061a80 	.word	0x00061a80
  4013e0:	057619f1 	.word	0x057619f1
  4013e4:	3ffd1200 	.word	0x3ffd1200

004013e8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4013e8:	b538      	push	{r3, r4, r5, lr}
  4013ea:	4604      	mov	r4, r0
  4013ec:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4013ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  4013f2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4013f4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4013f6:	2380      	movs	r3, #128	; 0x80
  4013f8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4013fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4013fc:	2308      	movs	r3, #8
  4013fe:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401400:	2320      	movs	r3, #32
  401402:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401404:	2304      	movs	r3, #4
  401406:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401408:	680a      	ldr	r2, [r1, #0]
  40140a:	6849      	ldr	r1, [r1, #4]
  40140c:	f7ff ff8e 	bl	40132c <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401410:	2801      	cmp	r0, #1
  401412:	bf14      	ite	ne
  401414:	2000      	movne	r0, #0
  401416:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  401418:	7a6b      	ldrb	r3, [r5, #9]
  40141a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  40141c:	bf04      	itt	eq
  40141e:	2340      	moveq	r3, #64	; 0x40
  401420:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401422:	bd38      	pop	{r3, r4, r5, pc}

00401424 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401424:	460a      	mov	r2, r1
  401426:	b159      	cbz	r1, 401440 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  401428:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  40142a:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  40142c:	bfc4      	itt	gt
  40142e:	7841      	ldrbgt	r1, [r0, #1]
  401430:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401434:	2a02      	cmp	r2, #2
  401436:	dd05      	ble.n	401444 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  401438:	7880      	ldrb	r0, [r0, #2]
  40143a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40143e:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401440:	2000      	movs	r0, #0
  401442:	4770      	bx	lr
  401444:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  401446:	4770      	bx	lr

00401448 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40144c:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  40144e:	2c00      	cmp	r4, #0
  401450:	d045      	beq.n	4014de <twi_master_read+0x96>
  401452:	460b      	mov	r3, r1
  401454:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401456:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401458:	2000      	movs	r0, #0
  40145a:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  40145c:	684a      	ldr	r2, [r1, #4]
  40145e:	0212      	lsls	r2, r2, #8
  401460:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401464:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  401468:	7c1a      	ldrb	r2, [r3, #16]
  40146a:	0412      	lsls	r2, r2, #16
  40146c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401470:	430a      	orrs	r2, r1
  401472:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401474:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401476:	6859      	ldr	r1, [r3, #4]
  401478:	4618      	mov	r0, r3
  40147a:	f7ff ffd3 	bl	401424 <twi_mk_addr>
  40147e:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401480:	2c01      	cmp	r4, #1
  401482:	d104      	bne.n	40148e <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401484:	2303      	movs	r3, #3
  401486:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401488:	f04f 0e01 	mov.w	lr, #1
  40148c:	e033      	b.n	4014f6 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40148e:	2301      	movs	r3, #1
  401490:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  401492:	f04f 0e00 	mov.w	lr, #0
  401496:	e02e      	b.n	4014f6 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401498:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40149a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  40149c:	f413 7f80 	tst.w	r3, #256	; 0x100
  4014a0:	d120      	bne.n	4014e4 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  4014a2:	1e51      	subs	r1, r2, #1
  4014a4:	b30a      	cbz	r2, 4014ea <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4014a6:	2c01      	cmp	r4, #1
  4014a8:	d106      	bne.n	4014b8 <twi_master_read+0x70>
  4014aa:	f1be 0f00 	cmp.w	lr, #0
  4014ae:	d12f      	bne.n	401510 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  4014b0:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  4014b4:	46e6      	mov	lr, ip
  4014b6:	e02b      	b.n	401510 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4014b8:	f013 0f02 	tst.w	r3, #2
  4014bc:	d005      	beq.n	4014ca <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4014be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4014c0:	7033      	strb	r3, [r6, #0]

		cnt--;
  4014c2:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4014c4:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4014c6:	463a      	mov	r2, r7
  4014c8:	e000      	b.n	4014cc <twi_master_read+0x84>
  4014ca:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4014cc:	2c00      	cmp	r4, #0
  4014ce:	d1e4      	bne.n	40149a <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4014d0:	6a2b      	ldr	r3, [r5, #32]
  4014d2:	f013 0f01 	tst.w	r3, #1
  4014d6:	d0fb      	beq.n	4014d0 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  4014d8:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  4014da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4014de:	2001      	movs	r0, #1
  4014e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4014e4:	2005      	movs	r0, #5
  4014e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  4014ea:	2009      	movs	r0, #9
  4014ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4014f0:	2005      	movs	r0, #5
  4014f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4014f6:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4014f8:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4014fc:	d1f8      	bne.n	4014f0 <twi_master_read+0xa8>
  4014fe:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401502:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401506:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  40150a:	f04f 0c01 	mov.w	ip, #1
  40150e:	e7ca      	b.n	4014a6 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401510:	f013 0f02 	tst.w	r3, #2
  401514:	d0c0      	beq.n	401498 <twi_master_read+0x50>
  401516:	e7d2      	b.n	4014be <twi_master_read+0x76>

00401518 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401518:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40151a:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  40151c:	2d00      	cmp	r5, #0
  40151e:	d034      	beq.n	40158a <twi_master_write+0x72>
  401520:	460b      	mov	r3, r1
  401522:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401524:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401526:	2000      	movs	r0, #0
  401528:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40152a:	7c0a      	ldrb	r2, [r1, #16]
  40152c:	0412      	lsls	r2, r2, #16
  40152e:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401532:	685a      	ldr	r2, [r3, #4]
  401534:	0212      	lsls	r2, r2, #8
  401536:	f402 7240 	and.w	r2, r2, #768	; 0x300
  40153a:	430a      	orrs	r2, r1
  40153c:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40153e:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401540:	6859      	ldr	r1, [r3, #4]
  401542:	4618      	mov	r0, r3
  401544:	f7ff ff6e 	bl	401424 <twi_mk_addr>
  401548:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40154a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40154c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401550:	d004      	beq.n	40155c <twi_master_write+0x44>
  401552:	e01c      	b.n	40158e <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401554:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401556:	f413 7f80 	tst.w	r3, #256	; 0x100
  40155a:	d11a      	bne.n	401592 <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  40155c:	f013 0f04 	tst.w	r3, #4
  401560:	d003      	beq.n	40156a <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401562:	7833      	ldrb	r3, [r6, #0]
  401564:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  401566:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401568:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40156a:	2d00      	cmp	r5, #0
  40156c:	d1f2      	bne.n	401554 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  40156e:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401570:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401574:	d10f      	bne.n	401596 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401576:	f013 0f04 	tst.w	r3, #4
  40157a:	d0f8      	beq.n	40156e <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  40157c:	2302      	movs	r3, #2
  40157e:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401580:	6a23      	ldr	r3, [r4, #32]
  401582:	f013 0f01 	tst.w	r3, #1
  401586:	d0fb      	beq.n	401580 <twi_master_write+0x68>
  401588:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40158a:	2001      	movs	r0, #1
  40158c:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40158e:	2005      	movs	r0, #5
  401590:	bd70      	pop	{r4, r5, r6, pc}
  401592:	2005      	movs	r0, #5
  401594:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401596:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401598:	bd70      	pop	{r4, r5, r6, pc}
  40159a:	bf00      	nop

0040159c <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  40159c:	b500      	push	{lr}
  40159e:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  4015a0:	2300      	movs	r3, #0
  4015a2:	aa06      	add	r2, sp, #24
  4015a4:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  4015a8:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  4015aa:	2201      	movs	r2, #1
  4015ac:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  4015ae:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  4015b2:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  4015b6:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  4015b8:	a901      	add	r1, sp, #4
  4015ba:	f7ff ffad 	bl	401518 <twi_master_write>
}
  4015be:	b007      	add	sp, #28
  4015c0:	f85d fb04 	ldr.w	pc, [sp], #4

004015c4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4015c4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4015c6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4015ca:	d02f      	beq.n	40162c <pio_set_peripheral+0x68>
  4015cc:	d807      	bhi.n	4015de <pio_set_peripheral+0x1a>
  4015ce:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4015d2:	d014      	beq.n	4015fe <pio_set_peripheral+0x3a>
  4015d4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4015d8:	d01e      	beq.n	401618 <pio_set_peripheral+0x54>
  4015da:	b939      	cbnz	r1, 4015ec <pio_set_peripheral+0x28>
  4015dc:	4770      	bx	lr
  4015de:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4015e2:	d036      	beq.n	401652 <pio_set_peripheral+0x8e>
  4015e4:	d804      	bhi.n	4015f0 <pio_set_peripheral+0x2c>
  4015e6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4015ea:	d029      	beq.n	401640 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4015ec:	6042      	str	r2, [r0, #4]
  4015ee:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4015f0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4015f4:	d02d      	beq.n	401652 <pio_set_peripheral+0x8e>
  4015f6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4015fa:	d02a      	beq.n	401652 <pio_set_peripheral+0x8e>
  4015fc:	e7f6      	b.n	4015ec <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4015fe:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401600:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401602:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401604:	43d3      	mvns	r3, r2
  401606:	4021      	ands	r1, r4
  401608:	4019      	ands	r1, r3
  40160a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40160c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40160e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401610:	4021      	ands	r1, r4
  401612:	400b      	ands	r3, r1
  401614:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401616:	e01a      	b.n	40164e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401618:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40161a:	4313      	orrs	r3, r2
  40161c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40161e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401620:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401622:	400b      	ands	r3, r1
  401624:	ea23 0302 	bic.w	r3, r3, r2
  401628:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40162a:	e7df      	b.n	4015ec <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40162c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40162e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401630:	400b      	ands	r3, r1
  401632:	ea23 0302 	bic.w	r3, r3, r2
  401636:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401638:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40163a:	4313      	orrs	r3, r2
  40163c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40163e:	e7d5      	b.n	4015ec <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401640:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401642:	4313      	orrs	r3, r2
  401644:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401646:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401648:	4313      	orrs	r3, r2
  40164a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40164c:	e7ce      	b.n	4015ec <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40164e:	6042      	str	r2, [r0, #4]
}
  401650:	bc10      	pop	{r4}
  401652:	4770      	bx	lr

00401654 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401654:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401656:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40165a:	bf14      	ite	ne
  40165c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40165e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401660:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401664:	bf14      	ite	ne
  401666:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401668:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40166a:	f012 0f02 	tst.w	r2, #2
  40166e:	d002      	beq.n	401676 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401670:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401674:	e004      	b.n	401680 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401676:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40167a:	bf18      	it	ne
  40167c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401680:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401682:	6001      	str	r1, [r0, #0]
  401684:	4770      	bx	lr
  401686:	bf00      	nop

00401688 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401688:	b410      	push	{r4}
  40168a:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40168c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40168e:	b10c      	cbz	r4, 401694 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401690:	6641      	str	r1, [r0, #100]	; 0x64
  401692:	e000      	b.n	401696 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401694:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401696:	b10b      	cbz	r3, 40169c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401698:	6501      	str	r1, [r0, #80]	; 0x50
  40169a:	e000      	b.n	40169e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40169c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40169e:	b10a      	cbz	r2, 4016a4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4016a0:	6301      	str	r1, [r0, #48]	; 0x30
  4016a2:	e000      	b.n	4016a6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4016a4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4016a6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4016a8:	6001      	str	r1, [r0, #0]
}
  4016aa:	bc10      	pop	{r4}
  4016ac:	4770      	bx	lr
  4016ae:	bf00      	nop

004016b0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4016b0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4016b2:	4770      	bx	lr

004016b4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4016b4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4016b6:	4770      	bx	lr

004016b8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4016b8:	b570      	push	{r4, r5, r6, lr}
  4016ba:	b082      	sub	sp, #8
  4016bc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4016be:	0943      	lsrs	r3, r0, #5
  4016c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4016c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4016c8:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4016ca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4016ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016d2:	d047      	beq.n	401764 <pio_configure_pin+0xac>
  4016d4:	d809      	bhi.n	4016ea <pio_configure_pin+0x32>
  4016d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4016da:	d021      	beq.n	401720 <pio_configure_pin+0x68>
  4016dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4016e0:	d02f      	beq.n	401742 <pio_configure_pin+0x8a>
  4016e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4016e6:	d16f      	bne.n	4017c8 <pio_configure_pin+0x110>
  4016e8:	e009      	b.n	4016fe <pio_configure_pin+0x46>
  4016ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4016ee:	d055      	beq.n	40179c <pio_configure_pin+0xe4>
  4016f0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4016f4:	d052      	beq.n	40179c <pio_configure_pin+0xe4>
  4016f6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4016fa:	d044      	beq.n	401786 <pio_configure_pin+0xce>
  4016fc:	e064      	b.n	4017c8 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4016fe:	f000 001f 	and.w	r0, r0, #31
  401702:	2601      	movs	r6, #1
  401704:	4086      	lsls	r6, r0
  401706:	4632      	mov	r2, r6
  401708:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40170c:	4620      	mov	r0, r4
  40170e:	f7ff ff59 	bl	4015c4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401712:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401716:	bf14      	ite	ne
  401718:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40171a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40171c:	2001      	movs	r0, #1
  40171e:	e054      	b.n	4017ca <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401720:	f000 001f 	and.w	r0, r0, #31
  401724:	2601      	movs	r6, #1
  401726:	4086      	lsls	r6, r0
  401728:	4632      	mov	r2, r6
  40172a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40172e:	4620      	mov	r0, r4
  401730:	f7ff ff48 	bl	4015c4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401734:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401738:	bf14      	ite	ne
  40173a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40173c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40173e:	2001      	movs	r0, #1
  401740:	e043      	b.n	4017ca <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401742:	f000 001f 	and.w	r0, r0, #31
  401746:	2601      	movs	r6, #1
  401748:	4086      	lsls	r6, r0
  40174a:	4632      	mov	r2, r6
  40174c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401750:	4620      	mov	r0, r4
  401752:	f7ff ff37 	bl	4015c4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401756:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40175a:	bf14      	ite	ne
  40175c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40175e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401760:	2001      	movs	r0, #1
  401762:	e032      	b.n	4017ca <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401764:	f000 001f 	and.w	r0, r0, #31
  401768:	2601      	movs	r6, #1
  40176a:	4086      	lsls	r6, r0
  40176c:	4632      	mov	r2, r6
  40176e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401772:	4620      	mov	r0, r4
  401774:	f7ff ff26 	bl	4015c4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401778:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40177c:	bf14      	ite	ne
  40177e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401780:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401782:	2001      	movs	r0, #1
  401784:	e021      	b.n	4017ca <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401786:	f000 011f 	and.w	r1, r0, #31
  40178a:	2601      	movs	r6, #1
  40178c:	462a      	mov	r2, r5
  40178e:	fa06 f101 	lsl.w	r1, r6, r1
  401792:	4620      	mov	r0, r4
  401794:	f7ff ff5e 	bl	401654 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401798:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40179a:	e016      	b.n	4017ca <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40179c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4017a0:	f000 011f 	and.w	r1, r0, #31
  4017a4:	2601      	movs	r6, #1
  4017a6:	ea05 0306 	and.w	r3, r5, r6
  4017aa:	9300      	str	r3, [sp, #0]
  4017ac:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4017b0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4017b4:	bf14      	ite	ne
  4017b6:	2200      	movne	r2, #0
  4017b8:	2201      	moveq	r2, #1
  4017ba:	fa06 f101 	lsl.w	r1, r6, r1
  4017be:	4620      	mov	r0, r4
  4017c0:	f7ff ff62 	bl	401688 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  4017c4:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4017c6:	e000      	b.n	4017ca <pio_configure_pin+0x112>

	default:
		return 0;
  4017c8:	2000      	movs	r0, #0
	}

	return 1;
}
  4017ca:	b002      	add	sp, #8
  4017cc:	bd70      	pop	{r4, r5, r6, pc}
  4017ce:	bf00      	nop

004017d0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4017d0:	b570      	push	{r4, r5, r6, lr}
  4017d2:	b082      	sub	sp, #8
  4017d4:	4605      	mov	r5, r0
  4017d6:	460e      	mov	r6, r1
  4017d8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4017da:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4017de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4017e2:	d038      	beq.n	401856 <pio_configure_pin_group+0x86>
  4017e4:	d809      	bhi.n	4017fa <pio_configure_pin_group+0x2a>
  4017e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4017ea:	d01c      	beq.n	401826 <pio_configure_pin_group+0x56>
  4017ec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4017f0:	d025      	beq.n	40183e <pio_configure_pin_group+0x6e>
  4017f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4017f6:	d150      	bne.n	40189a <pio_configure_pin_group+0xca>
  4017f8:	e009      	b.n	40180e <pio_configure_pin_group+0x3e>
  4017fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4017fe:	d03a      	beq.n	401876 <pio_configure_pin_group+0xa6>
  401800:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401804:	d037      	beq.n	401876 <pio_configure_pin_group+0xa6>
  401806:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40180a:	d030      	beq.n	40186e <pio_configure_pin_group+0x9e>
  40180c:	e045      	b.n	40189a <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40180e:	460a      	mov	r2, r1
  401810:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401814:	f7ff fed6 	bl	4015c4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401818:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40181c:	bf14      	ite	ne
  40181e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401820:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401822:	2001      	movs	r0, #1
  401824:	e03a      	b.n	40189c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401826:	460a      	mov	r2, r1
  401828:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40182c:	f7ff feca 	bl	4015c4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401830:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401834:	bf14      	ite	ne
  401836:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401838:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40183a:	2001      	movs	r0, #1
  40183c:	e02e      	b.n	40189c <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40183e:	460a      	mov	r2, r1
  401840:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401844:	f7ff febe 	bl	4015c4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401848:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40184c:	bf14      	ite	ne
  40184e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401850:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401852:	2001      	movs	r0, #1
  401854:	e022      	b.n	40189c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401856:	460a      	mov	r2, r1
  401858:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40185c:	f7ff feb2 	bl	4015c4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401860:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401864:	bf14      	ite	ne
  401866:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401868:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40186a:	2001      	movs	r0, #1
  40186c:	e016      	b.n	40189c <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40186e:	f7ff fef1 	bl	401654 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401872:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401874:	e012      	b.n	40189c <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401876:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  40187a:	f004 0301 	and.w	r3, r4, #1
  40187e:	9300      	str	r3, [sp, #0]
  401880:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401884:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401888:	bf14      	ite	ne
  40188a:	2200      	movne	r2, #0
  40188c:	2201      	moveq	r2, #1
  40188e:	4631      	mov	r1, r6
  401890:	4628      	mov	r0, r5
  401892:	f7ff fef9 	bl	401688 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401896:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401898:	e000      	b.n	40189c <pio_configure_pin_group+0xcc>

	default:
		return 0;
  40189a:	2000      	movs	r0, #0
	}

	return 1;
}
  40189c:	b002      	add	sp, #8
  40189e:	bd70      	pop	{r4, r5, r6, pc}

004018a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4018a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4018a4:	4681      	mov	r9, r0
  4018a6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4018a8:	f7ff ff02 	bl	4016b0 <pio_get_interrupt_status>
  4018ac:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4018ae:	4648      	mov	r0, r9
  4018b0:	f7ff ff00 	bl	4016b4 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  4018b4:	4005      	ands	r5, r0
  4018b6:	d013      	beq.n	4018e0 <pio_handler_process+0x40>
  4018b8:	4c0e      	ldr	r4, [pc, #56]	; (4018f4 <pio_handler_process+0x54>)
  4018ba:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4018be:	6823      	ldr	r3, [r4, #0]
  4018c0:	4543      	cmp	r3, r8
  4018c2:	d108      	bne.n	4018d6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4018c4:	6861      	ldr	r1, [r4, #4]
  4018c6:	4229      	tst	r1, r5
  4018c8:	d005      	beq.n	4018d6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4018ca:	68e3      	ldr	r3, [r4, #12]
  4018cc:	4640      	mov	r0, r8
  4018ce:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4018d0:	6863      	ldr	r3, [r4, #4]
  4018d2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4018d6:	42b4      	cmp	r4, r6
  4018d8:	d002      	beq.n	4018e0 <pio_handler_process+0x40>
  4018da:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4018dc:	2d00      	cmp	r5, #0
  4018de:	d1ee      	bne.n	4018be <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4018e0:	4b05      	ldr	r3, [pc, #20]	; (4018f8 <pio_handler_process+0x58>)
  4018e2:	681b      	ldr	r3, [r3, #0]
  4018e4:	b123      	cbz	r3, 4018f0 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4018e6:	4b05      	ldr	r3, [pc, #20]	; (4018fc <pio_handler_process+0x5c>)
  4018e8:	681b      	ldr	r3, [r3, #0]
  4018ea:	b10b      	cbz	r3, 4018f0 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4018ec:	4648      	mov	r0, r9
  4018ee:	4798      	blx	r3
  4018f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4018f4:	20000270 	.word	0x20000270
  4018f8:	200003c4 	.word	0x200003c4
  4018fc:	2000026c 	.word	0x2000026c

00401900 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401900:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401902:	210b      	movs	r1, #11
  401904:	4801      	ldr	r0, [pc, #4]	; (40190c <PIOA_Handler+0xc>)
  401906:	f7ff ffcb 	bl	4018a0 <pio_handler_process>
  40190a:	bd08      	pop	{r3, pc}
  40190c:	400e0e00 	.word	0x400e0e00

00401910 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401910:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401912:	210c      	movs	r1, #12
  401914:	4801      	ldr	r0, [pc, #4]	; (40191c <PIOB_Handler+0xc>)
  401916:	f7ff ffc3 	bl	4018a0 <pio_handler_process>
  40191a:	bd08      	pop	{r3, pc}
  40191c:	400e1000 	.word	0x400e1000

00401920 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401920:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401922:	210d      	movs	r1, #13
  401924:	4801      	ldr	r0, [pc, #4]	; (40192c <PIOC_Handler+0xc>)
  401926:	f7ff ffbb 	bl	4018a0 <pio_handler_process>
  40192a:	bd08      	pop	{r3, pc}
  40192c:	400e1200 	.word	0x400e1200

00401930 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401930:	4a18      	ldr	r2, [pc, #96]	; (401994 <pmc_switch_mck_to_pllack+0x64>)
  401932:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401938:	4318      	orrs	r0, r3
  40193a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40193c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40193e:	f013 0f08 	tst.w	r3, #8
  401942:	d003      	beq.n	40194c <pmc_switch_mck_to_pllack+0x1c>
  401944:	e009      	b.n	40195a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401946:	3b01      	subs	r3, #1
  401948:	d103      	bne.n	401952 <pmc_switch_mck_to_pllack+0x22>
  40194a:	e01e      	b.n	40198a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40194c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401950:	4910      	ldr	r1, [pc, #64]	; (401994 <pmc_switch_mck_to_pllack+0x64>)
  401952:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401954:	f012 0f08 	tst.w	r2, #8
  401958:	d0f5      	beq.n	401946 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40195a:	4a0e      	ldr	r2, [pc, #56]	; (401994 <pmc_switch_mck_to_pllack+0x64>)
  40195c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40195e:	f023 0303 	bic.w	r3, r3, #3
  401962:	f043 0302 	orr.w	r3, r3, #2
  401966:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401968:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40196a:	f010 0008 	ands.w	r0, r0, #8
  40196e:	d004      	beq.n	40197a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401970:	2000      	movs	r0, #0
  401972:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401974:	3b01      	subs	r3, #1
  401976:	d103      	bne.n	401980 <pmc_switch_mck_to_pllack+0x50>
  401978:	e009      	b.n	40198e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40197a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40197e:	4905      	ldr	r1, [pc, #20]	; (401994 <pmc_switch_mck_to_pllack+0x64>)
  401980:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401982:	f012 0f08 	tst.w	r2, #8
  401986:	d0f5      	beq.n	401974 <pmc_switch_mck_to_pllack+0x44>
  401988:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40198a:	2001      	movs	r0, #1
  40198c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40198e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401990:	4770      	bx	lr
  401992:	bf00      	nop
  401994:	400e0400 	.word	0x400e0400

00401998 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401998:	b138      	cbz	r0, 4019aa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40199a:	4911      	ldr	r1, [pc, #68]	; (4019e0 <pmc_switch_mainck_to_xtal+0x48>)
  40199c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40199e:	4a11      	ldr	r2, [pc, #68]	; (4019e4 <pmc_switch_mainck_to_xtal+0x4c>)
  4019a0:	401a      	ands	r2, r3
  4019a2:	4b11      	ldr	r3, [pc, #68]	; (4019e8 <pmc_switch_mainck_to_xtal+0x50>)
  4019a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019a6:	620b      	str	r3, [r1, #32]
  4019a8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019aa:	480d      	ldr	r0, [pc, #52]	; (4019e0 <pmc_switch_mainck_to_xtal+0x48>)
  4019ac:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4019ae:	0209      	lsls	r1, r1, #8
  4019b0:	b289      	uxth	r1, r1
  4019b2:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  4019b6:	f023 0303 	bic.w	r3, r3, #3
  4019ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4019be:	f043 0301 	orr.w	r3, r3, #1
  4019c2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019c4:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4019c6:	4602      	mov	r2, r0
  4019c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019ca:	f013 0f01 	tst.w	r3, #1
  4019ce:	d0fb      	beq.n	4019c8 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4019d0:	4a03      	ldr	r2, [pc, #12]	; (4019e0 <pmc_switch_mainck_to_xtal+0x48>)
  4019d2:	6a13      	ldr	r3, [r2, #32]
  4019d4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4019d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4019dc:	6213      	str	r3, [r2, #32]
  4019de:	4770      	bx	lr
  4019e0:	400e0400 	.word	0x400e0400
  4019e4:	fec8fffc 	.word	0xfec8fffc
  4019e8:	01370002 	.word	0x01370002

004019ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4019ec:	4b02      	ldr	r3, [pc, #8]	; (4019f8 <pmc_osc_is_ready_mainck+0xc>)
  4019ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4019f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4019f4:	4770      	bx	lr
  4019f6:	bf00      	nop
  4019f8:	400e0400 	.word	0x400e0400

004019fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4019fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a00:	4b01      	ldr	r3, [pc, #4]	; (401a08 <pmc_disable_pllack+0xc>)
  401a02:	629a      	str	r2, [r3, #40]	; 0x28
  401a04:	4770      	bx	lr
  401a06:	bf00      	nop
  401a08:	400e0400 	.word	0x400e0400

00401a0c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a0c:	4b02      	ldr	r3, [pc, #8]	; (401a18 <pmc_is_locked_pllack+0xc>)
  401a0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a10:	f000 0002 	and.w	r0, r0, #2
  401a14:	4770      	bx	lr
  401a16:	bf00      	nop
  401a18:	400e0400 	.word	0x400e0400

00401a1c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401a1c:	2822      	cmp	r0, #34	; 0x22
  401a1e:	d81e      	bhi.n	401a5e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401a20:	281f      	cmp	r0, #31
  401a22:	d80c      	bhi.n	401a3e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401a24:	4b11      	ldr	r3, [pc, #68]	; (401a6c <pmc_enable_periph_clk+0x50>)
  401a26:	699a      	ldr	r2, [r3, #24]
  401a28:	2301      	movs	r3, #1
  401a2a:	4083      	lsls	r3, r0
  401a2c:	4393      	bics	r3, r2
  401a2e:	d018      	beq.n	401a62 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401a30:	2301      	movs	r3, #1
  401a32:	fa03 f000 	lsl.w	r0, r3, r0
  401a36:	4b0d      	ldr	r3, [pc, #52]	; (401a6c <pmc_enable_periph_clk+0x50>)
  401a38:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401a3a:	2000      	movs	r0, #0
  401a3c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401a3e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401a40:	4b0a      	ldr	r3, [pc, #40]	; (401a6c <pmc_enable_periph_clk+0x50>)
  401a42:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401a46:	2301      	movs	r3, #1
  401a48:	4083      	lsls	r3, r0
  401a4a:	4393      	bics	r3, r2
  401a4c:	d00b      	beq.n	401a66 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401a4e:	2301      	movs	r3, #1
  401a50:	fa03 f000 	lsl.w	r0, r3, r0
  401a54:	4b05      	ldr	r3, [pc, #20]	; (401a6c <pmc_enable_periph_clk+0x50>)
  401a56:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401a5a:	2000      	movs	r0, #0
  401a5c:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401a5e:	2001      	movs	r0, #1
  401a60:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401a62:	2000      	movs	r0, #0
  401a64:	4770      	bx	lr
  401a66:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401a68:	4770      	bx	lr
  401a6a:	bf00      	nop
  401a6c:	400e0400 	.word	0x400e0400

00401a70 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401a74:	6043      	str	r3, [r0, #4]
  401a76:	4770      	bx	lr

00401a78 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401a78:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401a7a:	23ac      	movs	r3, #172	; 0xac
  401a7c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401a7e:	680b      	ldr	r3, [r1, #0]
  401a80:	684a      	ldr	r2, [r1, #4]
  401a82:	fbb3 f3f2 	udiv	r3, r3, r2
  401a86:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401a88:	1e5c      	subs	r4, r3, #1
  401a8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401a8e:	4294      	cmp	r4, r2
  401a90:	d80a      	bhi.n	401aa8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  401a92:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401a94:	688b      	ldr	r3, [r1, #8]
  401a96:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401a98:	f240 2302 	movw	r3, #514	; 0x202
  401a9c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401aa0:	2350      	movs	r3, #80	; 0x50
  401aa2:	6003      	str	r3, [r0, #0]

	return 0;
  401aa4:	2000      	movs	r0, #0
  401aa6:	e000      	b.n	401aaa <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  401aa8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  401aaa:	bc10      	pop	{r4}
  401aac:	4770      	bx	lr
  401aae:	bf00      	nop

00401ab0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401ab0:	6943      	ldr	r3, [r0, #20]
  401ab2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401ab6:	bf1a      	itte	ne
  401ab8:	61c1      	strne	r1, [r0, #28]
	return 0;
  401aba:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401abc:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  401abe:	4770      	bx	lr

00401ac0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401ac0:	6943      	ldr	r3, [r0, #20]
  401ac2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401ac6:	bf1d      	ittte	ne
  401ac8:	6983      	ldrne	r3, [r0, #24]
  401aca:	700b      	strbne	r3, [r1, #0]
	return 0;
  401acc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  401ace:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  401ad0:	4770      	bx	lr
  401ad2:	bf00      	nop

00401ad4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401ad4:	6943      	ldr	r3, [r0, #20]
  401ad6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401ada:	bf1d      	ittte	ne
  401adc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401ae0:	61c1      	strne	r1, [r0, #28]
	return 0;
  401ae2:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  401ae4:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  401ae6:	4770      	bx	lr

00401ae8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401ae8:	6943      	ldr	r3, [r0, #20]
  401aea:	f013 0f01 	tst.w	r3, #1
  401aee:	d005      	beq.n	401afc <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401af0:	6983      	ldr	r3, [r0, #24]
  401af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401af6:	600b      	str	r3, [r1, #0]

	return 0;
  401af8:	2000      	movs	r0, #0
  401afa:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  401afc:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  401afe:	4770      	bx	lr

00401b00 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401b00:	b4f0      	push	{r4, r5, r6, r7}
  401b02:	b08c      	sub	sp, #48	; 0x30
  401b04:	4607      	mov	r7, r0
  401b06:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  401b08:	ac01      	add	r4, sp, #4
  401b0a:	4d11      	ldr	r5, [pc, #68]	; (401b50 <pwm_clocks_generate+0x50>)
  401b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  401b1c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401b1e:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  401b20:	f852 3b04 	ldr.w	r3, [r2], #4
  401b24:	fbb6 f3f3 	udiv	r3, r6, r3
  401b28:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401b30:	d905      	bls.n	401b3e <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  401b32:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401b34:	280b      	cmp	r0, #11
  401b36:	d1f3      	bne.n	401b20 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401b38:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401b3c:	e005      	b.n	401b4a <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  401b3e:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  401b40:	bf94      	ite	ls
  401b42:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  401b46:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  401b4a:	b00c      	add	sp, #48	; 0x30
  401b4c:	bcf0      	pop	{r4, r5, r6, r7}
  401b4e:	4770      	bx	lr
  401b50:	004061ec 	.word	0x004061ec

00401b54 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401b54:	b570      	push	{r4, r5, r6, lr}
  401b56:	4606      	mov	r6, r0
  401b58:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  401b5a:	6808      	ldr	r0, [r1, #0]
  401b5c:	b140      	cbz	r0, 401b70 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  401b5e:	6889      	ldr	r1, [r1, #8]
  401b60:	f7ff ffce 	bl	401b00 <pwm_clocks_generate>
  401b64:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  401b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401b6a:	4298      	cmp	r0, r3
  401b6c:	d101      	bne.n	401b72 <pwm_init+0x1e>
  401b6e:	e00e      	b.n	401b8e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  401b70:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401b72:	6860      	ldr	r0, [r4, #4]
  401b74:	b140      	cbz	r0, 401b88 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401b76:	68a1      	ldr	r1, [r4, #8]
  401b78:	f7ff ffc2 	bl	401b00 <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  401b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401b80:	4298      	cmp	r0, r3
  401b82:	d007      	beq.n	401b94 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  401b84:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  401b88:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  401b8a:	2000      	movs	r0, #0
  401b8c:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401b8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401b92:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401b94:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  401b98:	bd70      	pop	{r4, r5, r6, pc}
  401b9a:	bf00      	nop

00401b9c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401b9c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  401b9e:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401ba0:	684a      	ldr	r2, [r1, #4]
  401ba2:	f002 020f 	and.w	r2, r2, #15
  401ba6:	8a8c      	ldrh	r4, [r1, #20]
  401ba8:	4322      	orrs	r2, r4
  401baa:	890c      	ldrh	r4, [r1, #8]
  401bac:	4322      	orrs	r2, r4
  401bae:	7a8c      	ldrb	r4, [r1, #10]
  401bb0:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  401bb4:	7d8c      	ldrb	r4, [r1, #22]
  401bb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  401bba:	7dcc      	ldrb	r4, [r1, #23]
  401bbc:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  401bc0:	7e0c      	ldrb	r4, [r1, #24]
  401bc2:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  401bc6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401bca:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  401bce:	68ca      	ldr	r2, [r1, #12]
  401bd0:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  401bd4:	690a      	ldr	r2, [r1, #16]
  401bd6:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  401bda:	7d8a      	ldrb	r2, [r1, #22]
  401bdc:	b13a      	cbz	r2, 401bee <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  401bde:	8b8c      	ldrh	r4, [r1, #28]
  401be0:	8b4a      	ldrh	r2, [r1, #26]
  401be2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  401be6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  401bea:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  401bee:	6c84      	ldr	r4, [r0, #72]	; 0x48
  401bf0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  401bf4:	409a      	lsls	r2, r3
  401bf6:	43d2      	mvns	r2, r2
  401bf8:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401bfc:	7fcc      	ldrb	r4, [r1, #31]
  401bfe:	fa04 f603 	lsl.w	r6, r4, r3
  401c02:	7f8c      	ldrb	r4, [r1, #30]
  401c04:	409c      	lsls	r4, r3
  401c06:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  401c0a:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401c0c:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  401c0e:	6c44      	ldr	r4, [r0, #68]	; 0x44
  401c10:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  401c12:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  401c16:	fa04 f503 	lsl.w	r5, r4, r3
  401c1a:	f891 4020 	ldrb.w	r4, [r1, #32]
  401c1e:	409c      	lsls	r4, r3
  401c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401c24:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401c26:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  401c28:	2201      	movs	r2, #1
  401c2a:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  401c2c:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  401c30:	b11c      	cbz	r4, 401c3a <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  401c32:	6a04      	ldr	r4, [r0, #32]
  401c34:	4314      	orrs	r4, r2
  401c36:	6204      	str	r4, [r0, #32]
  401c38:	e003      	b.n	401c42 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  401c3a:	6a04      	ldr	r4, [r0, #32]
  401c3c:	ea24 0402 	bic.w	r4, r4, r2
  401c40:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  401c42:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  401c46:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  401c48:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401c4a:	bf0c      	ite	eq
  401c4c:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  401c4e:	4394      	bicne	r4, r2
  401c50:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401c52:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  401c56:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  401c58:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401c5a:	bf0c      	ite	eq
  401c5c:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  401c60:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  401c64:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401c66:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401c68:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  401c6a:	22ff      	movs	r2, #255	; 0xff
  401c6c:	409a      	lsls	r2, r3
  401c6e:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401c72:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  401c76:	fa01 f303 	lsl.w	r3, r1, r3
  401c7a:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  401c7c:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  401c7e:	2000      	movs	r0, #0
  401c80:	bc70      	pop	{r4, r5, r6}
  401c82:	4770      	bx	lr

00401c84 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401c84:	690b      	ldr	r3, [r1, #16]
  401c86:	4293      	cmp	r3, r2
  401c88:	d307      	bcc.n	401c9a <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  401c8a:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401c8c:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401c8e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401c92:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  401c96:	2000      	movs	r0, #0
  401c98:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  401c9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  401c9e:	4770      	bx	lr

00401ca0 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  401ca0:	2301      	movs	r3, #1
  401ca2:	fa03 f101 	lsl.w	r1, r3, r1
  401ca6:	6041      	str	r1, [r0, #4]
  401ca8:	4770      	bx	lr
  401caa:	bf00      	nop

00401cac <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  401cac:	2301      	movs	r3, #1
  401cae:	fa03 f101 	lsl.w	r1, r3, r1
  401cb2:	6081      	str	r1, [r0, #8]
  401cb4:	4770      	bx	lr
  401cb6:	bf00      	nop

00401cb8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401cb8:	e7fe      	b.n	401cb8 <Dummy_Handler>
  401cba:	bf00      	nop

00401cbc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401cbc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  401cbe:	4b20      	ldr	r3, [pc, #128]	; (401d40 <Reset_Handler+0x84>)
  401cc0:	4a20      	ldr	r2, [pc, #128]	; (401d44 <Reset_Handler+0x88>)
  401cc2:	429a      	cmp	r2, r3
  401cc4:	d912      	bls.n	401cec <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  401cc6:	4b20      	ldr	r3, [pc, #128]	; (401d48 <Reset_Handler+0x8c>)
  401cc8:	4a1d      	ldr	r2, [pc, #116]	; (401d40 <Reset_Handler+0x84>)
  401cca:	429a      	cmp	r2, r3
  401ccc:	d21e      	bcs.n	401d0c <Reset_Handler+0x50>
  401cce:	4611      	mov	r1, r2
  401cd0:	3b01      	subs	r3, #1
  401cd2:	1a9b      	subs	r3, r3, r2
  401cd4:	f023 0303 	bic.w	r3, r3, #3
  401cd8:	3304      	adds	r3, #4
  401cda:	4a1a      	ldr	r2, [pc, #104]	; (401d44 <Reset_Handler+0x88>)
  401cdc:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  401cde:	f852 0b04 	ldr.w	r0, [r2], #4
  401ce2:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401ce6:	429a      	cmp	r2, r3
  401ce8:	d1f9      	bne.n	401cde <Reset_Handler+0x22>
  401cea:	e00f      	b.n	401d0c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401cec:	4b14      	ldr	r3, [pc, #80]	; (401d40 <Reset_Handler+0x84>)
  401cee:	4a15      	ldr	r2, [pc, #84]	; (401d44 <Reset_Handler+0x88>)
  401cf0:	429a      	cmp	r2, r3
  401cf2:	d20b      	bcs.n	401d0c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401cf4:	4b14      	ldr	r3, [pc, #80]	; (401d48 <Reset_Handler+0x8c>)
  401cf6:	4a12      	ldr	r2, [pc, #72]	; (401d40 <Reset_Handler+0x84>)
  401cf8:	1a9a      	subs	r2, r3, r2
  401cfa:	4814      	ldr	r0, [pc, #80]	; (401d4c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401cfc:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401cfe:	b12a      	cbz	r2, 401d0c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  401d00:	f851 2904 	ldr.w	r2, [r1], #-4
  401d04:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401d08:	4281      	cmp	r1, r0
  401d0a:	d1f9      	bne.n	401d00 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401d0c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401d0e:	4b10      	ldr	r3, [pc, #64]	; (401d50 <Reset_Handler+0x94>)
  401d10:	4a10      	ldr	r2, [pc, #64]	; (401d54 <Reset_Handler+0x98>)
  401d12:	429a      	cmp	r2, r3
  401d14:	d20b      	bcs.n	401d2e <Reset_Handler+0x72>
  401d16:	1d13      	adds	r3, r2, #4
  401d18:	4a0f      	ldr	r2, [pc, #60]	; (401d58 <Reset_Handler+0x9c>)
  401d1a:	1ad2      	subs	r2, r2, r3
  401d1c:	f022 0203 	bic.w	r2, r2, #3
  401d20:	441a      	add	r2, r3
  401d22:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401d24:	2100      	movs	r1, #0
  401d26:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401d2a:	429a      	cmp	r2, r3
  401d2c:	d1fb      	bne.n	401d26 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401d2e:	4b0b      	ldr	r3, [pc, #44]	; (401d5c <Reset_Handler+0xa0>)
  401d30:	4a0b      	ldr	r2, [pc, #44]	; (401d60 <Reset_Handler+0xa4>)
  401d32:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401d34:	f000 fca6 	bl	402684 <__libc_init_array>

	/* Branch to main function */
	main();
  401d38:	f7fe faf4 	bl	400324 <main>
  401d3c:	e7fe      	b.n	401d3c <Reset_Handler+0x80>
  401d3e:	bf00      	nop
  401d40:	20000000 	.word	0x20000000
  401d44:	0040654c 	.word	0x0040654c
  401d48:	200001e8 	.word	0x200001e8
  401d4c:	00406548 	.word	0x00406548
  401d50:	200003cc 	.word	0x200003cc
  401d54:	200001e8 	.word	0x200001e8
  401d58:	200003cf 	.word	0x200003cf
  401d5c:	e000ed00 	.word	0xe000ed00
  401d60:	00400000 	.word	0x00400000

00401d64 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401d64:	4b3d      	ldr	r3, [pc, #244]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d68:	f003 0303 	and.w	r3, r3, #3
  401d6c:	2b03      	cmp	r3, #3
  401d6e:	d85d      	bhi.n	401e2c <SystemCoreClockUpdate+0xc8>
  401d70:	e8df f003 	tbb	[pc, r3]
  401d74:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401d78:	4b39      	ldr	r3, [pc, #228]	; (401e60 <SystemCoreClockUpdate+0xfc>)
  401d7a:	695b      	ldr	r3, [r3, #20]
  401d7c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401d80:	bf14      	ite	ne
  401d82:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401d86:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401d8a:	4b36      	ldr	r3, [pc, #216]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401d8c:	601a      	str	r2, [r3, #0]
  401d8e:	e04d      	b.n	401e2c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401d90:	4b32      	ldr	r3, [pc, #200]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401d92:	6a1b      	ldr	r3, [r3, #32]
  401d94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401d98:	d003      	beq.n	401da2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401d9a:	4a33      	ldr	r2, [pc, #204]	; (401e68 <SystemCoreClockUpdate+0x104>)
  401d9c:	4b31      	ldr	r3, [pc, #196]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401d9e:	601a      	str	r2, [r3, #0]
  401da0:	e044      	b.n	401e2c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401da2:	4a32      	ldr	r2, [pc, #200]	; (401e6c <SystemCoreClockUpdate+0x108>)
  401da4:	4b2f      	ldr	r3, [pc, #188]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401da6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401da8:	4b2c      	ldr	r3, [pc, #176]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401daa:	6a1b      	ldr	r3, [r3, #32]
  401dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401db0:	2b10      	cmp	r3, #16
  401db2:	d002      	beq.n	401dba <SystemCoreClockUpdate+0x56>
  401db4:	2b20      	cmp	r3, #32
  401db6:	d004      	beq.n	401dc2 <SystemCoreClockUpdate+0x5e>
  401db8:	e038      	b.n	401e2c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401dba:	4a2d      	ldr	r2, [pc, #180]	; (401e70 <SystemCoreClockUpdate+0x10c>)
  401dbc:	4b29      	ldr	r3, [pc, #164]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401dbe:	601a      	str	r2, [r3, #0]
			break;
  401dc0:	e034      	b.n	401e2c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401dc2:	4a29      	ldr	r2, [pc, #164]	; (401e68 <SystemCoreClockUpdate+0x104>)
  401dc4:	4b27      	ldr	r3, [pc, #156]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401dc6:	601a      	str	r2, [r3, #0]
			break;
  401dc8:	e030      	b.n	401e2c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401dca:	4b24      	ldr	r3, [pc, #144]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401dcc:	6a1b      	ldr	r3, [r3, #32]
  401dce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401dd2:	d003      	beq.n	401ddc <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401dd4:	4a24      	ldr	r2, [pc, #144]	; (401e68 <SystemCoreClockUpdate+0x104>)
  401dd6:	4b23      	ldr	r3, [pc, #140]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401dd8:	601a      	str	r2, [r3, #0]
  401dda:	e012      	b.n	401e02 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ddc:	4a23      	ldr	r2, [pc, #140]	; (401e6c <SystemCoreClockUpdate+0x108>)
  401dde:	4b21      	ldr	r3, [pc, #132]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401de0:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401de2:	4b1e      	ldr	r3, [pc, #120]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401de4:	6a1b      	ldr	r3, [r3, #32]
  401de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401dea:	2b10      	cmp	r3, #16
  401dec:	d002      	beq.n	401df4 <SystemCoreClockUpdate+0x90>
  401dee:	2b20      	cmp	r3, #32
  401df0:	d004      	beq.n	401dfc <SystemCoreClockUpdate+0x98>
  401df2:	e006      	b.n	401e02 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401df4:	4a1e      	ldr	r2, [pc, #120]	; (401e70 <SystemCoreClockUpdate+0x10c>)
  401df6:	4b1b      	ldr	r3, [pc, #108]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401df8:	601a      	str	r2, [r3, #0]
					break;
  401dfa:	e002      	b.n	401e02 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401dfc:	4a1a      	ldr	r2, [pc, #104]	; (401e68 <SystemCoreClockUpdate+0x104>)
  401dfe:	4b19      	ldr	r3, [pc, #100]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401e00:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401e02:	4b16      	ldr	r3, [pc, #88]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e06:	f003 0303 	and.w	r3, r3, #3
  401e0a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401e0c:	4a13      	ldr	r2, [pc, #76]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401e0e:	bf07      	ittee	eq
  401e10:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401e12:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401e14:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401e16:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401e18:	4812      	ldr	r0, [pc, #72]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401e1a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  401e1e:	6803      	ldr	r3, [r0, #0]
  401e20:	fb01 3303 	mla	r3, r1, r3, r3
  401e24:	b2d2      	uxtb	r2, r2
  401e26:	fbb3 f3f2 	udiv	r3, r3, r2
  401e2a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401e2c:	4b0b      	ldr	r3, [pc, #44]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e34:	2b70      	cmp	r3, #112	; 0x70
  401e36:	d107      	bne.n	401e48 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401e38:	4a0a      	ldr	r2, [pc, #40]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401e3a:	6813      	ldr	r3, [r2, #0]
  401e3c:	490d      	ldr	r1, [pc, #52]	; (401e74 <SystemCoreClockUpdate+0x110>)
  401e3e:	fba1 1303 	umull	r1, r3, r1, r3
  401e42:	085b      	lsrs	r3, r3, #1
  401e44:	6013      	str	r3, [r2, #0]
  401e46:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401e48:	4b04      	ldr	r3, [pc, #16]	; (401e5c <SystemCoreClockUpdate+0xf8>)
  401e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401e4c:	4905      	ldr	r1, [pc, #20]	; (401e64 <SystemCoreClockUpdate+0x100>)
  401e4e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401e52:	680b      	ldr	r3, [r1, #0]
  401e54:	40d3      	lsrs	r3, r2
  401e56:	600b      	str	r3, [r1, #0]
  401e58:	4770      	bx	lr
  401e5a:	bf00      	nop
  401e5c:	400e0400 	.word	0x400e0400
  401e60:	400e1410 	.word	0x400e1410
  401e64:	20000010 	.word	0x20000010
  401e68:	00b71b00 	.word	0x00b71b00
  401e6c:	003d0900 	.word	0x003d0900
  401e70:	007a1200 	.word	0x007a1200
  401e74:	aaaaaaab 	.word	0xaaaaaaab

00401e78 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401e78:	4b1a      	ldr	r3, [pc, #104]	; (401ee4 <system_init_flash+0x6c>)
  401e7a:	4298      	cmp	r0, r3
  401e7c:	d807      	bhi.n	401e8e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401e7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401e82:	4a19      	ldr	r2, [pc, #100]	; (401ee8 <system_init_flash+0x70>)
  401e84:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401e86:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401e8a:	6013      	str	r3, [r2, #0]
  401e8c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401e8e:	4b17      	ldr	r3, [pc, #92]	; (401eec <system_init_flash+0x74>)
  401e90:	4298      	cmp	r0, r3
  401e92:	d806      	bhi.n	401ea2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401e94:	4b16      	ldr	r3, [pc, #88]	; (401ef0 <system_init_flash+0x78>)
  401e96:	4a14      	ldr	r2, [pc, #80]	; (401ee8 <system_init_flash+0x70>)
  401e98:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401e9a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401e9e:	6013      	str	r3, [r2, #0]
  401ea0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401ea2:	4b14      	ldr	r3, [pc, #80]	; (401ef4 <system_init_flash+0x7c>)
  401ea4:	4298      	cmp	r0, r3
  401ea6:	d806      	bhi.n	401eb6 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401ea8:	4b13      	ldr	r3, [pc, #76]	; (401ef8 <system_init_flash+0x80>)
  401eaa:	4a0f      	ldr	r2, [pc, #60]	; (401ee8 <system_init_flash+0x70>)
  401eac:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401eae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401eb2:	6013      	str	r3, [r2, #0]
  401eb4:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401eb6:	4b11      	ldr	r3, [pc, #68]	; (401efc <system_init_flash+0x84>)
  401eb8:	4298      	cmp	r0, r3
  401eba:	d806      	bhi.n	401eca <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401ebc:	4b10      	ldr	r3, [pc, #64]	; (401f00 <system_init_flash+0x88>)
  401ebe:	4a0a      	ldr	r2, [pc, #40]	; (401ee8 <system_init_flash+0x70>)
  401ec0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401ec2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401ec6:	6013      	str	r3, [r2, #0]
  401ec8:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401eca:	4b0e      	ldr	r3, [pc, #56]	; (401f04 <system_init_flash+0x8c>)
  401ecc:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401ece:	bf94      	ite	ls
  401ed0:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401ed4:	4b0c      	ldrhi	r3, [pc, #48]	; (401f08 <system_init_flash+0x90>)
  401ed6:	4a04      	ldr	r2, [pc, #16]	; (401ee8 <system_init_flash+0x70>)
  401ed8:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401eda:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401ede:	6013      	str	r3, [r2, #0]
  401ee0:	4770      	bx	lr
  401ee2:	bf00      	nop
  401ee4:	01312cff 	.word	0x01312cff
  401ee8:	400e0a00 	.word	0x400e0a00
  401eec:	026259ff 	.word	0x026259ff
  401ef0:	04000100 	.word	0x04000100
  401ef4:	039386ff 	.word	0x039386ff
  401ef8:	04000200 	.word	0x04000200
  401efc:	04c4b3ff 	.word	0x04c4b3ff
  401f00:	04000300 	.word	0x04000300
  401f04:	05f5e0ff 	.word	0x05f5e0ff
  401f08:	04000500 	.word	0x04000500

00401f0c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401f0c:	4b09      	ldr	r3, [pc, #36]	; (401f34 <_sbrk+0x28>)
  401f0e:	681b      	ldr	r3, [r3, #0]
  401f10:	b913      	cbnz	r3, 401f18 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401f12:	4a09      	ldr	r2, [pc, #36]	; (401f38 <_sbrk+0x2c>)
  401f14:	4b07      	ldr	r3, [pc, #28]	; (401f34 <_sbrk+0x28>)
  401f16:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401f18:	4b06      	ldr	r3, [pc, #24]	; (401f34 <_sbrk+0x28>)
  401f1a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401f1c:	181a      	adds	r2, r3, r0
  401f1e:	4907      	ldr	r1, [pc, #28]	; (401f3c <_sbrk+0x30>)
  401f20:	4291      	cmp	r1, r2
  401f22:	db04      	blt.n	401f2e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401f24:	4610      	mov	r0, r2
  401f26:	4a03      	ldr	r2, [pc, #12]	; (401f34 <_sbrk+0x28>)
  401f28:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401f2a:	4618      	mov	r0, r3
  401f2c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401f32:	4770      	bx	lr
  401f34:	200002e0 	.word	0x200002e0
  401f38:	200033d0 	.word	0x200033d0
  401f3c:	20027ffc 	.word	0x20027ffc

00401f40 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401f44:	4770      	bx	lr
  401f46:	bf00      	nop

00401f48 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401f4c:	604b      	str	r3, [r1, #4]

	return 0;
}
  401f4e:	2000      	movs	r0, #0
  401f50:	4770      	bx	lr
  401f52:	bf00      	nop

00401f54 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401f54:	2001      	movs	r0, #1
  401f56:	4770      	bx	lr

00401f58 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401f58:	2000      	movs	r0, #0
  401f5a:	4770      	bx	lr

00401f5c <atan2>:
  401f5c:	f000 b85c 	b.w	402018 <__ieee754_atan2>

00401f60 <sqrt>:
  401f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f64:	b08b      	sub	sp, #44	; 0x2c
  401f66:	4604      	mov	r4, r0
  401f68:	460d      	mov	r5, r1
  401f6a:	f000 f91f 	bl	4021ac <__ieee754_sqrt>
  401f6e:	4b28      	ldr	r3, [pc, #160]	; (402010 <sqrt+0xb0>)
  401f70:	f993 a000 	ldrsb.w	sl, [r3]
  401f74:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  401f78:	4606      	mov	r6, r0
  401f7a:	460f      	mov	r7, r1
  401f7c:	d012      	beq.n	401fa4 <sqrt+0x44>
  401f7e:	4622      	mov	r2, r4
  401f80:	462b      	mov	r3, r5
  401f82:	4620      	mov	r0, r4
  401f84:	4629      	mov	r1, r5
  401f86:	f003 fc93 	bl	4058b0 <__aeabi_dcmpun>
  401f8a:	4683      	mov	fp, r0
  401f8c:	b950      	cbnz	r0, 401fa4 <sqrt+0x44>
  401f8e:	f04f 0800 	mov.w	r8, #0
  401f92:	f04f 0900 	mov.w	r9, #0
  401f96:	4642      	mov	r2, r8
  401f98:	464b      	mov	r3, r9
  401f9a:	4620      	mov	r0, r4
  401f9c:	4629      	mov	r1, r5
  401f9e:	f003 fc5f 	bl	405860 <__aeabi_dcmplt>
  401fa2:	b920      	cbnz	r0, 401fae <sqrt+0x4e>
  401fa4:	4630      	mov	r0, r6
  401fa6:	4639      	mov	r1, r7
  401fa8:	b00b      	add	sp, #44	; 0x2c
  401faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fae:	4b19      	ldr	r3, [pc, #100]	; (402014 <sqrt+0xb4>)
  401fb0:	f8cd b020 	str.w	fp, [sp, #32]
  401fb4:	2201      	movs	r2, #1
  401fb6:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401fba:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401fbe:	e88d 000c 	stmia.w	sp, {r2, r3}
  401fc2:	f1ba 0f00 	cmp.w	sl, #0
  401fc6:	d015      	beq.n	401ff4 <sqrt+0x94>
  401fc8:	4642      	mov	r2, r8
  401fca:	464b      	mov	r3, r9
  401fcc:	4640      	mov	r0, r8
  401fce:	4649      	mov	r1, r9
  401fd0:	f003 fafe 	bl	4055d0 <__aeabi_ddiv>
  401fd4:	f1ba 0f02 	cmp.w	sl, #2
  401fd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401fdc:	d10c      	bne.n	401ff8 <sqrt+0x98>
  401fde:	f000 fb4b 	bl	402678 <__errno>
  401fe2:	2321      	movs	r3, #33	; 0x21
  401fe4:	6003      	str	r3, [r0, #0]
  401fe6:	9b08      	ldr	r3, [sp, #32]
  401fe8:	b963      	cbnz	r3, 402004 <sqrt+0xa4>
  401fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  401fee:	b00b      	add	sp, #44	; 0x2c
  401ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ff4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401ff8:	4668      	mov	r0, sp
  401ffa:	f000 fb3b 	bl	402674 <matherr>
  401ffe:	2800      	cmp	r0, #0
  402000:	d1f1      	bne.n	401fe6 <sqrt+0x86>
  402002:	e7ec      	b.n	401fde <sqrt+0x7e>
  402004:	f000 fb38 	bl	402678 <__errno>
  402008:	9b08      	ldr	r3, [sp, #32]
  40200a:	6003      	str	r3, [r0, #0]
  40200c:	e7ed      	b.n	401fea <sqrt+0x8a>
  40200e:	bf00      	nop
  402010:	20000014 	.word	0x20000014
  402014:	00406218 	.word	0x00406218

00402018 <__ieee754_atan2>:
  402018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40201c:	4254      	negs	r4, r2
  40201e:	4314      	orrs	r4, r2
  402020:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  402024:	f8df e180 	ldr.w	lr, [pc, #384]	; 4021a8 <__ieee754_atan2+0x190>
  402028:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  40202c:	4574      	cmp	r4, lr
  40202e:	4606      	mov	r6, r0
  402030:	460d      	mov	r5, r1
  402032:	d83e      	bhi.n	4020b2 <__ieee754_atan2+0x9a>
  402034:	4244      	negs	r4, r0
  402036:	4304      	orrs	r4, r0
  402038:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  40203c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  402040:	4574      	cmp	r4, lr
  402042:	468a      	mov	sl, r1
  402044:	d835      	bhi.n	4020b2 <__ieee754_atan2+0x9a>
  402046:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  40204a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  40204e:	4314      	orrs	r4, r2
  402050:	d044      	beq.n	4020dc <__ieee754_atan2+0xc4>
  402052:	179c      	asrs	r4, r3, #30
  402054:	f004 0402 	and.w	r4, r4, #2
  402058:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  40205c:	ea50 010b 	orrs.w	r1, r0, fp
  402060:	d02f      	beq.n	4020c2 <__ieee754_atan2+0xaa>
  402062:	ea52 0109 	orrs.w	r1, r2, r9
  402066:	d033      	beq.n	4020d0 <__ieee754_atan2+0xb8>
  402068:	45f1      	cmp	r9, lr
  40206a:	d046      	beq.n	4020fa <__ieee754_atan2+0xe2>
  40206c:	45f3      	cmp	fp, lr
  40206e:	d02f      	beq.n	4020d0 <__ieee754_atan2+0xb8>
  402070:	ebc9 090b 	rsb	r9, r9, fp
  402074:	ea4f 5929 	mov.w	r9, r9, asr #20
  402078:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  40207c:	dc34      	bgt.n	4020e8 <__ieee754_atan2+0xd0>
  40207e:	2b00      	cmp	r3, #0
  402080:	db57      	blt.n	402132 <__ieee754_atan2+0x11a>
  402082:	4630      	mov	r0, r6
  402084:	4629      	mov	r1, r5
  402086:	f003 faa3 	bl	4055d0 <__aeabi_ddiv>
  40208a:	f000 faef 	bl	40266c <fabs>
  40208e:	f000 f94f 	bl	402330 <atan>
  402092:	2c01      	cmp	r4, #1
  402094:	d04a      	beq.n	40212c <__ieee754_atan2+0x114>
  402096:	2c02      	cmp	r4, #2
  402098:	d03b      	beq.n	402112 <__ieee754_atan2+0xfa>
  40209a:	b184      	cbz	r4, 4020be <__ieee754_atan2+0xa6>
  40209c:	a332      	add	r3, pc, #200	; (adr r3, 402168 <__ieee754_atan2+0x150>)
  40209e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020a2:	f002 ffb7 	bl	405014 <__aeabi_dsub>
  4020a6:	a332      	add	r3, pc, #200	; (adr r3, 402170 <__ieee754_atan2+0x158>)
  4020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4020ac:	f002 ffb2 	bl	405014 <__aeabi_dsub>
  4020b0:	e005      	b.n	4020be <__ieee754_atan2+0xa6>
  4020b2:	4610      	mov	r0, r2
  4020b4:	4619      	mov	r1, r3
  4020b6:	4632      	mov	r2, r6
  4020b8:	462b      	mov	r3, r5
  4020ba:	f002 ffad 	bl	405018 <__adddf3>
  4020be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020c2:	2c02      	cmp	r4, #2
  4020c4:	d014      	beq.n	4020f0 <__ieee754_atan2+0xd8>
  4020c6:	2c03      	cmp	r4, #3
  4020c8:	d10c      	bne.n	4020e4 <__ieee754_atan2+0xcc>
  4020ca:	482d      	ldr	r0, [pc, #180]	; (402180 <__ieee754_atan2+0x168>)
  4020cc:	492d      	ldr	r1, [pc, #180]	; (402184 <__ieee754_atan2+0x16c>)
  4020ce:	e7f6      	b.n	4020be <__ieee754_atan2+0xa6>
  4020d0:	f1ba 0f00 	cmp.w	sl, #0
  4020d4:	482a      	ldr	r0, [pc, #168]	; (402180 <__ieee754_atan2+0x168>)
  4020d6:	db0e      	blt.n	4020f6 <__ieee754_atan2+0xde>
  4020d8:	492b      	ldr	r1, [pc, #172]	; (402188 <__ieee754_atan2+0x170>)
  4020da:	e7f0      	b.n	4020be <__ieee754_atan2+0xa6>
  4020dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020e0:	f000 b926 	b.w	402330 <atan>
  4020e4:	4629      	mov	r1, r5
  4020e6:	e7ea      	b.n	4020be <__ieee754_atan2+0xa6>
  4020e8:	a123      	add	r1, pc, #140	; (adr r1, 402178 <__ieee754_atan2+0x160>)
  4020ea:	e9d1 0100 	ldrd	r0, r1, [r1]
  4020ee:	e7d0      	b.n	402092 <__ieee754_atan2+0x7a>
  4020f0:	4823      	ldr	r0, [pc, #140]	; (402180 <__ieee754_atan2+0x168>)
  4020f2:	4926      	ldr	r1, [pc, #152]	; (40218c <__ieee754_atan2+0x174>)
  4020f4:	e7e3      	b.n	4020be <__ieee754_atan2+0xa6>
  4020f6:	4926      	ldr	r1, [pc, #152]	; (402190 <__ieee754_atan2+0x178>)
  4020f8:	e7e1      	b.n	4020be <__ieee754_atan2+0xa6>
  4020fa:	45cb      	cmp	fp, r9
  4020fc:	d01f      	beq.n	40213e <__ieee754_atan2+0x126>
  4020fe:	2c02      	cmp	r4, #2
  402100:	d0f6      	beq.n	4020f0 <__ieee754_atan2+0xd8>
  402102:	2c03      	cmp	r4, #3
  402104:	d0e1      	beq.n	4020ca <__ieee754_atan2+0xb2>
  402106:	2c01      	cmp	r4, #1
  402108:	f04f 0000 	mov.w	r0, #0
  40210c:	d020      	beq.n	402150 <__ieee754_atan2+0x138>
  40210e:	4601      	mov	r1, r0
  402110:	e7d5      	b.n	4020be <__ieee754_atan2+0xa6>
  402112:	a315      	add	r3, pc, #84	; (adr r3, 402168 <__ieee754_atan2+0x150>)
  402114:	e9d3 2300 	ldrd	r2, r3, [r3]
  402118:	f002 ff7c 	bl	405014 <__aeabi_dsub>
  40211c:	4602      	mov	r2, r0
  40211e:	460b      	mov	r3, r1
  402120:	a113      	add	r1, pc, #76	; (adr r1, 402170 <__ieee754_atan2+0x158>)
  402122:	e9d1 0100 	ldrd	r0, r1, [r1]
  402126:	f002 ff75 	bl	405014 <__aeabi_dsub>
  40212a:	e7c8      	b.n	4020be <__ieee754_atan2+0xa6>
  40212c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402130:	e7c5      	b.n	4020be <__ieee754_atan2+0xa6>
  402132:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  402136:	daa4      	bge.n	402082 <__ieee754_atan2+0x6a>
  402138:	2000      	movs	r0, #0
  40213a:	2100      	movs	r1, #0
  40213c:	e7a9      	b.n	402092 <__ieee754_atan2+0x7a>
  40213e:	2c02      	cmp	r4, #2
  402140:	d00e      	beq.n	402160 <__ieee754_atan2+0x148>
  402142:	2c03      	cmp	r4, #3
  402144:	d009      	beq.n	40215a <__ieee754_atan2+0x142>
  402146:	2c01      	cmp	r4, #1
  402148:	480d      	ldr	r0, [pc, #52]	; (402180 <__ieee754_atan2+0x168>)
  40214a:	d004      	beq.n	402156 <__ieee754_atan2+0x13e>
  40214c:	4911      	ldr	r1, [pc, #68]	; (402194 <__ieee754_atan2+0x17c>)
  40214e:	e7b6      	b.n	4020be <__ieee754_atan2+0xa6>
  402150:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402154:	e7b3      	b.n	4020be <__ieee754_atan2+0xa6>
  402156:	4910      	ldr	r1, [pc, #64]	; (402198 <__ieee754_atan2+0x180>)
  402158:	e7b1      	b.n	4020be <__ieee754_atan2+0xa6>
  40215a:	4810      	ldr	r0, [pc, #64]	; (40219c <__ieee754_atan2+0x184>)
  40215c:	4910      	ldr	r1, [pc, #64]	; (4021a0 <__ieee754_atan2+0x188>)
  40215e:	e7ae      	b.n	4020be <__ieee754_atan2+0xa6>
  402160:	480e      	ldr	r0, [pc, #56]	; (40219c <__ieee754_atan2+0x184>)
  402162:	4910      	ldr	r1, [pc, #64]	; (4021a4 <__ieee754_atan2+0x18c>)
  402164:	e7ab      	b.n	4020be <__ieee754_atan2+0xa6>
  402166:	bf00      	nop
  402168:	33145c07 	.word	0x33145c07
  40216c:	3ca1a626 	.word	0x3ca1a626
  402170:	54442d18 	.word	0x54442d18
  402174:	400921fb 	.word	0x400921fb
  402178:	54442d18 	.word	0x54442d18
  40217c:	3ff921fb 	.word	0x3ff921fb
  402180:	54442d18 	.word	0x54442d18
  402184:	c00921fb 	.word	0xc00921fb
  402188:	3ff921fb 	.word	0x3ff921fb
  40218c:	400921fb 	.word	0x400921fb
  402190:	bff921fb 	.word	0xbff921fb
  402194:	3fe921fb 	.word	0x3fe921fb
  402198:	bfe921fb 	.word	0xbfe921fb
  40219c:	7f3321d2 	.word	0x7f3321d2
  4021a0:	c002d97c 	.word	0xc002d97c
  4021a4:	4002d97c 	.word	0x4002d97c
  4021a8:	7ff00000 	.word	0x7ff00000

004021ac <__ieee754_sqrt>:
  4021ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4021b0:	4e5d      	ldr	r6, [pc, #372]	; (402328 <__ieee754_sqrt+0x17c>)
  4021b2:	46b6      	mov	lr, r6
  4021b4:	400e      	ands	r6, r1
  4021b6:	4576      	cmp	r6, lr
  4021b8:	460c      	mov	r4, r1
  4021ba:	4605      	mov	r5, r0
  4021bc:	f000 8095 	beq.w	4022ea <__ieee754_sqrt+0x13e>
  4021c0:	2900      	cmp	r1, #0
  4021c2:	460b      	mov	r3, r1
  4021c4:	4602      	mov	r2, r0
  4021c6:	dd73      	ble.n	4022b0 <__ieee754_sqrt+0x104>
  4021c8:	150f      	asrs	r7, r1, #20
  4021ca:	d07e      	beq.n	4022ca <__ieee754_sqrt+0x11e>
  4021cc:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4021d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4021d4:	07f8      	lsls	r0, r7, #31
  4021d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4021da:	d464      	bmi.n	4022a6 <__ieee754_sqrt+0xfa>
  4021dc:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4021e0:	2600      	movs	r6, #0
  4021e2:	440b      	add	r3, r1
  4021e4:	107f      	asrs	r7, r7, #1
  4021e6:	0052      	lsls	r2, r2, #1
  4021e8:	46b6      	mov	lr, r6
  4021ea:	2016      	movs	r0, #22
  4021ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4021f0:	eb0e 0401 	add.w	r4, lr, r1
  4021f4:	429c      	cmp	r4, r3
  4021f6:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4021fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4021fe:	dc03      	bgt.n	402208 <__ieee754_sqrt+0x5c>
  402200:	1b1b      	subs	r3, r3, r4
  402202:	eb04 0e01 	add.w	lr, r4, r1
  402206:	440e      	add	r6, r1
  402208:	3801      	subs	r0, #1
  40220a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40220e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402212:	d1ed      	bne.n	4021f0 <__ieee754_sqrt+0x44>
  402214:	4684      	mov	ip, r0
  402216:	2420      	movs	r4, #32
  402218:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40221c:	e009      	b.n	402232 <__ieee754_sqrt+0x86>
  40221e:	d020      	beq.n	402262 <__ieee754_sqrt+0xb6>
  402220:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  402224:	3c01      	subs	r4, #1
  402226:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40222a:	442b      	add	r3, r5
  40222c:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402230:	d020      	beq.n	402274 <__ieee754_sqrt+0xc8>
  402232:	459e      	cmp	lr, r3
  402234:	eb01 050c 	add.w	r5, r1, ip
  402238:	daf1      	bge.n	40221e <__ieee754_sqrt+0x72>
  40223a:	2d00      	cmp	r5, #0
  40223c:	eb05 0c01 	add.w	ip, r5, r1
  402240:	db09      	blt.n	402256 <__ieee754_sqrt+0xaa>
  402242:	46f0      	mov	r8, lr
  402244:	4295      	cmp	r5, r2
  402246:	ebce 0303 	rsb	r3, lr, r3
  40224a:	d900      	bls.n	40224e <__ieee754_sqrt+0xa2>
  40224c:	3b01      	subs	r3, #1
  40224e:	1b52      	subs	r2, r2, r5
  402250:	4408      	add	r0, r1
  402252:	46c6      	mov	lr, r8
  402254:	e7e4      	b.n	402220 <__ieee754_sqrt+0x74>
  402256:	f1bc 0f00 	cmp.w	ip, #0
  40225a:	dbf2      	blt.n	402242 <__ieee754_sqrt+0x96>
  40225c:	f10e 0801 	add.w	r8, lr, #1
  402260:	e7f0      	b.n	402244 <__ieee754_sqrt+0x98>
  402262:	4295      	cmp	r5, r2
  402264:	d817      	bhi.n	402296 <__ieee754_sqrt+0xea>
  402266:	2d00      	cmp	r5, #0
  402268:	eb05 0c01 	add.w	ip, r5, r1
  40226c:	db47      	blt.n	4022fe <__ieee754_sqrt+0x152>
  40226e:	4698      	mov	r8, r3
  402270:	2300      	movs	r3, #0
  402272:	e7ec      	b.n	40224e <__ieee754_sqrt+0xa2>
  402274:	4313      	orrs	r3, r2
  402276:	d110      	bne.n	40229a <__ieee754_sqrt+0xee>
  402278:	0840      	lsrs	r0, r0, #1
  40227a:	1073      	asrs	r3, r6, #1
  40227c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402280:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402284:	07f2      	lsls	r2, r6, #31
  402286:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40228a:	bf48      	it	mi
  40228c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402290:	4649      	mov	r1, r9
  402292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402296:	4673      	mov	r3, lr
  402298:	e7c2      	b.n	402220 <__ieee754_sqrt+0x74>
  40229a:	1c41      	adds	r1, r0, #1
  40229c:	d033      	beq.n	402306 <__ieee754_sqrt+0x15a>
  40229e:	f000 0301 	and.w	r3, r0, #1
  4022a2:	4418      	add	r0, r3
  4022a4:	e7e8      	b.n	402278 <__ieee754_sqrt+0xcc>
  4022a6:	005b      	lsls	r3, r3, #1
  4022a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4022ac:	0052      	lsls	r2, r2, #1
  4022ae:	e795      	b.n	4021dc <__ieee754_sqrt+0x30>
  4022b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4022b4:	4306      	orrs	r6, r0
  4022b6:	d0ec      	beq.n	402292 <__ieee754_sqrt+0xe6>
  4022b8:	bb69      	cbnz	r1, 402316 <__ieee754_sqrt+0x16a>
  4022ba:	460f      	mov	r7, r1
  4022bc:	0ad3      	lsrs	r3, r2, #11
  4022be:	3f15      	subs	r7, #21
  4022c0:	0552      	lsls	r2, r2, #21
  4022c2:	2b00      	cmp	r3, #0
  4022c4:	d0fa      	beq.n	4022bc <__ieee754_sqrt+0x110>
  4022c6:	02dd      	lsls	r5, r3, #11
  4022c8:	d420      	bmi.n	40230c <__ieee754_sqrt+0x160>
  4022ca:	2100      	movs	r1, #0
  4022cc:	e000      	b.n	4022d0 <__ieee754_sqrt+0x124>
  4022ce:	4601      	mov	r1, r0
  4022d0:	005b      	lsls	r3, r3, #1
  4022d2:	02dc      	lsls	r4, r3, #11
  4022d4:	f101 0001 	add.w	r0, r1, #1
  4022d8:	d5f9      	bpl.n	4022ce <__ieee754_sqrt+0x122>
  4022da:	f1c0 0420 	rsb	r4, r0, #32
  4022de:	fa22 f404 	lsr.w	r4, r2, r4
  4022e2:	4323      	orrs	r3, r4
  4022e4:	1a7f      	subs	r7, r7, r1
  4022e6:	4082      	lsls	r2, r0
  4022e8:	e770      	b.n	4021cc <__ieee754_sqrt+0x20>
  4022ea:	4602      	mov	r2, r0
  4022ec:	460b      	mov	r3, r1
  4022ee:	f003 f845 	bl	40537c <__aeabi_dmul>
  4022f2:	462a      	mov	r2, r5
  4022f4:	4623      	mov	r3, r4
  4022f6:	f002 fe8f 	bl	405018 <__adddf3>
  4022fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4022fe:	f1bc 0f00 	cmp.w	ip, #0
  402302:	daab      	bge.n	40225c <__ieee754_sqrt+0xb0>
  402304:	e7b3      	b.n	40226e <__ieee754_sqrt+0xc2>
  402306:	3601      	adds	r6, #1
  402308:	4620      	mov	r0, r4
  40230a:	e7b6      	b.n	40227a <__ieee754_sqrt+0xce>
  40230c:	2420      	movs	r4, #32
  40230e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  402312:	2000      	movs	r0, #0
  402314:	e7e3      	b.n	4022de <__ieee754_sqrt+0x132>
  402316:	4602      	mov	r2, r0
  402318:	460b      	mov	r3, r1
  40231a:	f002 fe7b 	bl	405014 <__aeabi_dsub>
  40231e:	4602      	mov	r2, r0
  402320:	460b      	mov	r3, r1
  402322:	f003 f955 	bl	4055d0 <__aeabi_ddiv>
  402326:	e7b4      	b.n	402292 <__ieee754_sqrt+0xe6>
  402328:	7ff00000 	.word	0x7ff00000
  40232c:	00000000 	.word	0x00000000

00402330 <atan>:
  402330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402334:	4bc0      	ldr	r3, [pc, #768]	; (402638 <atan+0x308>)
  402336:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40233a:	429e      	cmp	r6, r3
  40233c:	460d      	mov	r5, r1
  40233e:	468a      	mov	sl, r1
  402340:	4604      	mov	r4, r0
  402342:	dd0f      	ble.n	402364 <atan+0x34>
  402344:	4bbd      	ldr	r3, [pc, #756]	; (40263c <atan+0x30c>)
  402346:	429e      	cmp	r6, r3
  402348:	f300 80b2 	bgt.w	4024b0 <atan+0x180>
  40234c:	f000 80ad 	beq.w	4024aa <atan+0x17a>
  402350:	4bbb      	ldr	r3, [pc, #748]	; (402640 <atan+0x310>)
  402352:	49bc      	ldr	r1, [pc, #752]	; (402644 <atan+0x314>)
  402354:	4cbc      	ldr	r4, [pc, #752]	; (402648 <atan+0x318>)
  402356:	f1ba 0f00 	cmp.w	sl, #0
  40235a:	bfc8      	it	gt
  40235c:	4619      	movgt	r1, r3
  40235e:	4620      	mov	r0, r4
  402360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402364:	4bb9      	ldr	r3, [pc, #740]	; (40264c <atan+0x31c>)
  402366:	429e      	cmp	r6, r3
  402368:	f300 80bc 	bgt.w	4024e4 <atan+0x1b4>
  40236c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  402370:	429e      	cmp	r6, r3
  402372:	f340 80a7 	ble.w	4024c4 <atan+0x194>
  402376:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  40237a:	4622      	mov	r2, r4
  40237c:	462b      	mov	r3, r5
  40237e:	4620      	mov	r0, r4
  402380:	4629      	mov	r1, r5
  402382:	f002 fffb 	bl	40537c <__aeabi_dmul>
  402386:	4602      	mov	r2, r0
  402388:	460b      	mov	r3, r1
  40238a:	4680      	mov	r8, r0
  40238c:	4689      	mov	r9, r1
  40238e:	f002 fff5 	bl	40537c <__aeabi_dmul>
  402392:	a391      	add	r3, pc, #580	; (adr r3, 4025d8 <atan+0x2a8>)
  402394:	e9d3 2300 	ldrd	r2, r3, [r3]
  402398:	4606      	mov	r6, r0
  40239a:	460f      	mov	r7, r1
  40239c:	f002 ffee 	bl	40537c <__aeabi_dmul>
  4023a0:	a38f      	add	r3, pc, #572	; (adr r3, 4025e0 <atan+0x2b0>)
  4023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023a6:	f002 fe37 	bl	405018 <__adddf3>
  4023aa:	4632      	mov	r2, r6
  4023ac:	463b      	mov	r3, r7
  4023ae:	f002 ffe5 	bl	40537c <__aeabi_dmul>
  4023b2:	a38d      	add	r3, pc, #564	; (adr r3, 4025e8 <atan+0x2b8>)
  4023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023b8:	f002 fe2e 	bl	405018 <__adddf3>
  4023bc:	4632      	mov	r2, r6
  4023be:	463b      	mov	r3, r7
  4023c0:	f002 ffdc 	bl	40537c <__aeabi_dmul>
  4023c4:	a38a      	add	r3, pc, #552	; (adr r3, 4025f0 <atan+0x2c0>)
  4023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023ca:	f002 fe25 	bl	405018 <__adddf3>
  4023ce:	4632      	mov	r2, r6
  4023d0:	463b      	mov	r3, r7
  4023d2:	f002 ffd3 	bl	40537c <__aeabi_dmul>
  4023d6:	a388      	add	r3, pc, #544	; (adr r3, 4025f8 <atan+0x2c8>)
  4023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023dc:	f002 fe1c 	bl	405018 <__adddf3>
  4023e0:	4632      	mov	r2, r6
  4023e2:	463b      	mov	r3, r7
  4023e4:	f002 ffca 	bl	40537c <__aeabi_dmul>
  4023e8:	a385      	add	r3, pc, #532	; (adr r3, 402600 <atan+0x2d0>)
  4023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023ee:	f002 fe13 	bl	405018 <__adddf3>
  4023f2:	4642      	mov	r2, r8
  4023f4:	464b      	mov	r3, r9
  4023f6:	f002 ffc1 	bl	40537c <__aeabi_dmul>
  4023fa:	a383      	add	r3, pc, #524	; (adr r3, 402608 <atan+0x2d8>)
  4023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402400:	4680      	mov	r8, r0
  402402:	4689      	mov	r9, r1
  402404:	4630      	mov	r0, r6
  402406:	4639      	mov	r1, r7
  402408:	f002 ffb8 	bl	40537c <__aeabi_dmul>
  40240c:	a380      	add	r3, pc, #512	; (adr r3, 402610 <atan+0x2e0>)
  40240e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402412:	f002 fdff 	bl	405014 <__aeabi_dsub>
  402416:	4632      	mov	r2, r6
  402418:	463b      	mov	r3, r7
  40241a:	f002 ffaf 	bl	40537c <__aeabi_dmul>
  40241e:	a37e      	add	r3, pc, #504	; (adr r3, 402618 <atan+0x2e8>)
  402420:	e9d3 2300 	ldrd	r2, r3, [r3]
  402424:	f002 fdf6 	bl	405014 <__aeabi_dsub>
  402428:	4632      	mov	r2, r6
  40242a:	463b      	mov	r3, r7
  40242c:	f002 ffa6 	bl	40537c <__aeabi_dmul>
  402430:	a37b      	add	r3, pc, #492	; (adr r3, 402620 <atan+0x2f0>)
  402432:	e9d3 2300 	ldrd	r2, r3, [r3]
  402436:	f002 fded 	bl	405014 <__aeabi_dsub>
  40243a:	4632      	mov	r2, r6
  40243c:	463b      	mov	r3, r7
  40243e:	f002 ff9d 	bl	40537c <__aeabi_dmul>
  402442:	a379      	add	r3, pc, #484	; (adr r3, 402628 <atan+0x2f8>)
  402444:	e9d3 2300 	ldrd	r2, r3, [r3]
  402448:	f002 fde4 	bl	405014 <__aeabi_dsub>
  40244c:	4632      	mov	r2, r6
  40244e:	463b      	mov	r3, r7
  402450:	f002 ff94 	bl	40537c <__aeabi_dmul>
  402454:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402458:	4602      	mov	r2, r0
  40245a:	460b      	mov	r3, r1
  40245c:	d069      	beq.n	402532 <atan+0x202>
  40245e:	4640      	mov	r0, r8
  402460:	4649      	mov	r1, r9
  402462:	f002 fdd9 	bl	405018 <__adddf3>
  402466:	4622      	mov	r2, r4
  402468:	462b      	mov	r3, r5
  40246a:	f002 ff87 	bl	40537c <__aeabi_dmul>
  40246e:	4e78      	ldr	r6, [pc, #480]	; (402650 <atan+0x320>)
  402470:	4b78      	ldr	r3, [pc, #480]	; (402654 <atan+0x324>)
  402472:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402476:	445e      	add	r6, fp
  402478:	449b      	add	fp, r3
  40247a:	e9db 2300 	ldrd	r2, r3, [fp]
  40247e:	f002 fdc9 	bl	405014 <__aeabi_dsub>
  402482:	4622      	mov	r2, r4
  402484:	462b      	mov	r3, r5
  402486:	f002 fdc5 	bl	405014 <__aeabi_dsub>
  40248a:	4602      	mov	r2, r0
  40248c:	460b      	mov	r3, r1
  40248e:	e9d6 0100 	ldrd	r0, r1, [r6]
  402492:	f002 fdbf 	bl	405014 <__aeabi_dsub>
  402496:	f1ba 0f00 	cmp.w	sl, #0
  40249a:	4604      	mov	r4, r0
  40249c:	f6bf af5f 	bge.w	40235e <atan+0x2e>
  4024a0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4024a4:	4620      	mov	r0, r4
  4024a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024aa:	2800      	cmp	r0, #0
  4024ac:	f43f af50 	beq.w	402350 <atan+0x20>
  4024b0:	4622      	mov	r2, r4
  4024b2:	4620      	mov	r0, r4
  4024b4:	462b      	mov	r3, r5
  4024b6:	4629      	mov	r1, r5
  4024b8:	f002 fdae 	bl	405018 <__adddf3>
  4024bc:	4604      	mov	r4, r0
  4024be:	4620      	mov	r0, r4
  4024c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024c4:	a35a      	add	r3, pc, #360	; (adr r3, 402630 <atan+0x300>)
  4024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024ca:	f002 fda5 	bl	405018 <__adddf3>
  4024ce:	2200      	movs	r2, #0
  4024d0:	4b61      	ldr	r3, [pc, #388]	; (402658 <atan+0x328>)
  4024d2:	f003 f9e3 	bl	40589c <__aeabi_dcmpgt>
  4024d6:	2800      	cmp	r0, #0
  4024d8:	f43f af4d 	beq.w	402376 <atan+0x46>
  4024dc:	4629      	mov	r1, r5
  4024de:	4620      	mov	r0, r4
  4024e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024e4:	f000 f8c2 	bl	40266c <fabs>
  4024e8:	4b5c      	ldr	r3, [pc, #368]	; (40265c <atan+0x32c>)
  4024ea:	429e      	cmp	r6, r3
  4024ec:	4604      	mov	r4, r0
  4024ee:	460d      	mov	r5, r1
  4024f0:	dc2f      	bgt.n	402552 <atan+0x222>
  4024f2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  4024f6:	429e      	cmp	r6, r3
  4024f8:	dc54      	bgt.n	4025a4 <atan+0x274>
  4024fa:	4602      	mov	r2, r0
  4024fc:	460b      	mov	r3, r1
  4024fe:	f002 fd8b 	bl	405018 <__adddf3>
  402502:	2200      	movs	r2, #0
  402504:	4b54      	ldr	r3, [pc, #336]	; (402658 <atan+0x328>)
  402506:	f002 fd85 	bl	405014 <__aeabi_dsub>
  40250a:	2200      	movs	r2, #0
  40250c:	4606      	mov	r6, r0
  40250e:	460f      	mov	r7, r1
  402510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402514:	4620      	mov	r0, r4
  402516:	4629      	mov	r1, r5
  402518:	f002 fd7e 	bl	405018 <__adddf3>
  40251c:	4602      	mov	r2, r0
  40251e:	460b      	mov	r3, r1
  402520:	4630      	mov	r0, r6
  402522:	4639      	mov	r1, r7
  402524:	f003 f854 	bl	4055d0 <__aeabi_ddiv>
  402528:	f04f 0b00 	mov.w	fp, #0
  40252c:	4604      	mov	r4, r0
  40252e:	460d      	mov	r5, r1
  402530:	e723      	b.n	40237a <atan+0x4a>
  402532:	4640      	mov	r0, r8
  402534:	4649      	mov	r1, r9
  402536:	f002 fd6f 	bl	405018 <__adddf3>
  40253a:	4622      	mov	r2, r4
  40253c:	462b      	mov	r3, r5
  40253e:	f002 ff1d 	bl	40537c <__aeabi_dmul>
  402542:	4602      	mov	r2, r0
  402544:	460b      	mov	r3, r1
  402546:	4620      	mov	r0, r4
  402548:	4629      	mov	r1, r5
  40254a:	f002 fd63 	bl	405014 <__aeabi_dsub>
  40254e:	4604      	mov	r4, r0
  402550:	e705      	b.n	40235e <atan+0x2e>
  402552:	4b43      	ldr	r3, [pc, #268]	; (402660 <atan+0x330>)
  402554:	429e      	cmp	r6, r3
  402556:	dc1a      	bgt.n	40258e <atan+0x25e>
  402558:	2200      	movs	r2, #0
  40255a:	4b42      	ldr	r3, [pc, #264]	; (402664 <atan+0x334>)
  40255c:	f002 fd5a 	bl	405014 <__aeabi_dsub>
  402560:	2200      	movs	r2, #0
  402562:	4606      	mov	r6, r0
  402564:	460f      	mov	r7, r1
  402566:	4b3f      	ldr	r3, [pc, #252]	; (402664 <atan+0x334>)
  402568:	4620      	mov	r0, r4
  40256a:	4629      	mov	r1, r5
  40256c:	f002 ff06 	bl	40537c <__aeabi_dmul>
  402570:	2200      	movs	r2, #0
  402572:	4b39      	ldr	r3, [pc, #228]	; (402658 <atan+0x328>)
  402574:	f002 fd50 	bl	405018 <__adddf3>
  402578:	4602      	mov	r2, r0
  40257a:	460b      	mov	r3, r1
  40257c:	4630      	mov	r0, r6
  40257e:	4639      	mov	r1, r7
  402580:	f003 f826 	bl	4055d0 <__aeabi_ddiv>
  402584:	f04f 0b02 	mov.w	fp, #2
  402588:	4604      	mov	r4, r0
  40258a:	460d      	mov	r5, r1
  40258c:	e6f5      	b.n	40237a <atan+0x4a>
  40258e:	4602      	mov	r2, r0
  402590:	460b      	mov	r3, r1
  402592:	2000      	movs	r0, #0
  402594:	4934      	ldr	r1, [pc, #208]	; (402668 <atan+0x338>)
  402596:	f003 f81b 	bl	4055d0 <__aeabi_ddiv>
  40259a:	f04f 0b03 	mov.w	fp, #3
  40259e:	4604      	mov	r4, r0
  4025a0:	460d      	mov	r5, r1
  4025a2:	e6ea      	b.n	40237a <atan+0x4a>
  4025a4:	2200      	movs	r2, #0
  4025a6:	4b2c      	ldr	r3, [pc, #176]	; (402658 <atan+0x328>)
  4025a8:	f002 fd34 	bl	405014 <__aeabi_dsub>
  4025ac:	2200      	movs	r2, #0
  4025ae:	4606      	mov	r6, r0
  4025b0:	460f      	mov	r7, r1
  4025b2:	4b29      	ldr	r3, [pc, #164]	; (402658 <atan+0x328>)
  4025b4:	4620      	mov	r0, r4
  4025b6:	4629      	mov	r1, r5
  4025b8:	f002 fd2e 	bl	405018 <__adddf3>
  4025bc:	4602      	mov	r2, r0
  4025be:	460b      	mov	r3, r1
  4025c0:	4630      	mov	r0, r6
  4025c2:	4639      	mov	r1, r7
  4025c4:	f003 f804 	bl	4055d0 <__aeabi_ddiv>
  4025c8:	f04f 0b01 	mov.w	fp, #1
  4025cc:	4604      	mov	r4, r0
  4025ce:	460d      	mov	r5, r1
  4025d0:	e6d3      	b.n	40237a <atan+0x4a>
  4025d2:	bf00      	nop
  4025d4:	f3af 8000 	nop.w
  4025d8:	e322da11 	.word	0xe322da11
  4025dc:	3f90ad3a 	.word	0x3f90ad3a
  4025e0:	24760deb 	.word	0x24760deb
  4025e4:	3fa97b4b 	.word	0x3fa97b4b
  4025e8:	a0d03d51 	.word	0xa0d03d51
  4025ec:	3fb10d66 	.word	0x3fb10d66
  4025f0:	c54c206e 	.word	0xc54c206e
  4025f4:	3fb745cd 	.word	0x3fb745cd
  4025f8:	920083ff 	.word	0x920083ff
  4025fc:	3fc24924 	.word	0x3fc24924
  402600:	5555550d 	.word	0x5555550d
  402604:	3fd55555 	.word	0x3fd55555
  402608:	2c6a6c2f 	.word	0x2c6a6c2f
  40260c:	bfa2b444 	.word	0xbfa2b444
  402610:	52defd9a 	.word	0x52defd9a
  402614:	3fadde2d 	.word	0x3fadde2d
  402618:	af749a6d 	.word	0xaf749a6d
  40261c:	3fb3b0f2 	.word	0x3fb3b0f2
  402620:	fe231671 	.word	0xfe231671
  402624:	3fbc71c6 	.word	0x3fbc71c6
  402628:	9998ebc4 	.word	0x9998ebc4
  40262c:	3fc99999 	.word	0x3fc99999
  402630:	8800759c 	.word	0x8800759c
  402634:	7e37e43c 	.word	0x7e37e43c
  402638:	440fffff 	.word	0x440fffff
  40263c:	7ff00000 	.word	0x7ff00000
  402640:	3ff921fb 	.word	0x3ff921fb
  402644:	bff921fb 	.word	0xbff921fb
  402648:	54442d18 	.word	0x54442d18
  40264c:	3fdbffff 	.word	0x3fdbffff
  402650:	00406240 	.word	0x00406240
  402654:	00406220 	.word	0x00406220
  402658:	3ff00000 	.word	0x3ff00000
  40265c:	3ff2ffff 	.word	0x3ff2ffff
  402660:	40037fff 	.word	0x40037fff
  402664:	3ff80000 	.word	0x3ff80000
  402668:	bff00000 	.word	0xbff00000

0040266c <fabs>:
  40266c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402670:	4770      	bx	lr
  402672:	bf00      	nop

00402674 <matherr>:
  402674:	2000      	movs	r0, #0
  402676:	4770      	bx	lr

00402678 <__errno>:
  402678:	4b01      	ldr	r3, [pc, #4]	; (402680 <__errno+0x8>)
  40267a:	6818      	ldr	r0, [r3, #0]
  40267c:	4770      	bx	lr
  40267e:	bf00      	nop
  402680:	20000078 	.word	0x20000078

00402684 <__libc_init_array>:
  402684:	b570      	push	{r4, r5, r6, lr}
  402686:	4b0e      	ldr	r3, [pc, #56]	; (4026c0 <__libc_init_array+0x3c>)
  402688:	4c0e      	ldr	r4, [pc, #56]	; (4026c4 <__libc_init_array+0x40>)
  40268a:	1ae4      	subs	r4, r4, r3
  40268c:	10a4      	asrs	r4, r4, #2
  40268e:	2500      	movs	r5, #0
  402690:	461e      	mov	r6, r3
  402692:	42a5      	cmp	r5, r4
  402694:	d004      	beq.n	4026a0 <__libc_init_array+0x1c>
  402696:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40269a:	4798      	blx	r3
  40269c:	3501      	adds	r5, #1
  40269e:	e7f8      	b.n	402692 <__libc_init_array+0xe>
  4026a0:	f003 ff3e 	bl	406520 <_init>
  4026a4:	4c08      	ldr	r4, [pc, #32]	; (4026c8 <__libc_init_array+0x44>)
  4026a6:	4b09      	ldr	r3, [pc, #36]	; (4026cc <__libc_init_array+0x48>)
  4026a8:	1ae4      	subs	r4, r4, r3
  4026aa:	10a4      	asrs	r4, r4, #2
  4026ac:	2500      	movs	r5, #0
  4026ae:	461e      	mov	r6, r3
  4026b0:	42a5      	cmp	r5, r4
  4026b2:	d004      	beq.n	4026be <__libc_init_array+0x3a>
  4026b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4026b8:	4798      	blx	r3
  4026ba:	3501      	adds	r5, #1
  4026bc:	e7f8      	b.n	4026b0 <__libc_init_array+0x2c>
  4026be:	bd70      	pop	{r4, r5, r6, pc}
  4026c0:	0040652c 	.word	0x0040652c
  4026c4:	0040652c 	.word	0x0040652c
  4026c8:	00406530 	.word	0x00406530
  4026cc:	0040652c 	.word	0x0040652c

004026d0 <memset>:
  4026d0:	4402      	add	r2, r0
  4026d2:	4603      	mov	r3, r0
  4026d4:	4293      	cmp	r3, r2
  4026d6:	d002      	beq.n	4026de <memset+0xe>
  4026d8:	f803 1b01 	strb.w	r1, [r3], #1
  4026dc:	e7fa      	b.n	4026d4 <memset+0x4>
  4026de:	4770      	bx	lr

004026e0 <__cvt>:
  4026e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026e4:	b088      	sub	sp, #32
  4026e6:	2b00      	cmp	r3, #0
  4026e8:	9f14      	ldr	r7, [sp, #80]	; 0x50
  4026ea:	9912      	ldr	r1, [sp, #72]	; 0x48
  4026ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4026ee:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4026f2:	461e      	mov	r6, r3
  4026f4:	f027 0720 	bic.w	r7, r7, #32
  4026f8:	bfbb      	ittet	lt
  4026fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4026fe:	461e      	movlt	r6, r3
  402700:	2300      	movge	r3, #0
  402702:	232d      	movlt	r3, #45	; 0x2d
  402704:	2f46      	cmp	r7, #70	; 0x46
  402706:	4614      	mov	r4, r2
  402708:	700b      	strb	r3, [r1, #0]
  40270a:	d003      	beq.n	402714 <__cvt+0x34>
  40270c:	2f45      	cmp	r7, #69	; 0x45
  40270e:	d103      	bne.n	402718 <__cvt+0x38>
  402710:	3501      	adds	r5, #1
  402712:	e001      	b.n	402718 <__cvt+0x38>
  402714:	2303      	movs	r3, #3
  402716:	e000      	b.n	40271a <__cvt+0x3a>
  402718:	2302      	movs	r3, #2
  40271a:	aa07      	add	r2, sp, #28
  40271c:	9204      	str	r2, [sp, #16]
  40271e:	aa06      	add	r2, sp, #24
  402720:	9203      	str	r2, [sp, #12]
  402722:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402726:	4622      	mov	r2, r4
  402728:	4633      	mov	r3, r6
  40272a:	f000 fed1 	bl	4034d0 <_dtoa_r>
  40272e:	2f47      	cmp	r7, #71	; 0x47
  402730:	4680      	mov	r8, r0
  402732:	d102      	bne.n	40273a <__cvt+0x5a>
  402734:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402736:	07db      	lsls	r3, r3, #31
  402738:	d528      	bpl.n	40278c <__cvt+0xac>
  40273a:	2f46      	cmp	r7, #70	; 0x46
  40273c:	eb08 0905 	add.w	r9, r8, r5
  402740:	d111      	bne.n	402766 <__cvt+0x86>
  402742:	f898 3000 	ldrb.w	r3, [r8]
  402746:	2b30      	cmp	r3, #48	; 0x30
  402748:	d10a      	bne.n	402760 <__cvt+0x80>
  40274a:	2200      	movs	r2, #0
  40274c:	2300      	movs	r3, #0
  40274e:	4620      	mov	r0, r4
  402750:	4631      	mov	r1, r6
  402752:	f003 f87b 	bl	40584c <__aeabi_dcmpeq>
  402756:	b918      	cbnz	r0, 402760 <__cvt+0x80>
  402758:	f1c5 0501 	rsb	r5, r5, #1
  40275c:	f8ca 5000 	str.w	r5, [sl]
  402760:	f8da 3000 	ldr.w	r3, [sl]
  402764:	4499      	add	r9, r3
  402766:	2200      	movs	r2, #0
  402768:	2300      	movs	r3, #0
  40276a:	4620      	mov	r0, r4
  40276c:	4631      	mov	r1, r6
  40276e:	f003 f86d 	bl	40584c <__aeabi_dcmpeq>
  402772:	b908      	cbnz	r0, 402778 <__cvt+0x98>
  402774:	2230      	movs	r2, #48	; 0x30
  402776:	e002      	b.n	40277e <__cvt+0x9e>
  402778:	f8cd 901c 	str.w	r9, [sp, #28]
  40277c:	e006      	b.n	40278c <__cvt+0xac>
  40277e:	9b07      	ldr	r3, [sp, #28]
  402780:	4599      	cmp	r9, r3
  402782:	d903      	bls.n	40278c <__cvt+0xac>
  402784:	1c59      	adds	r1, r3, #1
  402786:	9107      	str	r1, [sp, #28]
  402788:	701a      	strb	r2, [r3, #0]
  40278a:	e7f8      	b.n	40277e <__cvt+0x9e>
  40278c:	9b07      	ldr	r3, [sp, #28]
  40278e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402790:	ebc8 0303 	rsb	r3, r8, r3
  402794:	4640      	mov	r0, r8
  402796:	6013      	str	r3, [r2, #0]
  402798:	b008      	add	sp, #32
  40279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040279e <__exponent>:
  40279e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4027a0:	4603      	mov	r3, r0
  4027a2:	2900      	cmp	r1, #0
  4027a4:	bfb8      	it	lt
  4027a6:	4249      	neglt	r1, r1
  4027a8:	f803 2b02 	strb.w	r2, [r3], #2
  4027ac:	bfb4      	ite	lt
  4027ae:	222d      	movlt	r2, #45	; 0x2d
  4027b0:	222b      	movge	r2, #43	; 0x2b
  4027b2:	2909      	cmp	r1, #9
  4027b4:	7042      	strb	r2, [r0, #1]
  4027b6:	dd19      	ble.n	4027ec <__exponent+0x4e>
  4027b8:	f10d 0207 	add.w	r2, sp, #7
  4027bc:	4616      	mov	r6, r2
  4027be:	250a      	movs	r5, #10
  4027c0:	fb91 f4f5 	sdiv	r4, r1, r5
  4027c4:	fb05 1114 	mls	r1, r5, r4, r1
  4027c8:	3130      	adds	r1, #48	; 0x30
  4027ca:	2c09      	cmp	r4, #9
  4027cc:	f802 1d01 	strb.w	r1, [r2, #-1]!
  4027d0:	4621      	mov	r1, r4
  4027d2:	dcf5      	bgt.n	4027c0 <__exponent+0x22>
  4027d4:	3130      	adds	r1, #48	; 0x30
  4027d6:	1e54      	subs	r4, r2, #1
  4027d8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4027dc:	42b4      	cmp	r4, r6
  4027de:	461a      	mov	r2, r3
  4027e0:	d20a      	bcs.n	4027f8 <__exponent+0x5a>
  4027e2:	f814 2b01 	ldrb.w	r2, [r4], #1
  4027e6:	f803 2b01 	strb.w	r2, [r3], #1
  4027ea:	e7f7      	b.n	4027dc <__exponent+0x3e>
  4027ec:	2430      	movs	r4, #48	; 0x30
  4027ee:	461a      	mov	r2, r3
  4027f0:	4421      	add	r1, r4
  4027f2:	f802 4b02 	strb.w	r4, [r2], #2
  4027f6:	7059      	strb	r1, [r3, #1]
  4027f8:	1a10      	subs	r0, r2, r0
  4027fa:	b002      	add	sp, #8
  4027fc:	bd70      	pop	{r4, r5, r6, pc}
	...

00402800 <_printf_float>:
  402800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402804:	b091      	sub	sp, #68	; 0x44
  402806:	460c      	mov	r4, r1
  402808:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  40280c:	4616      	mov	r6, r2
  40280e:	461f      	mov	r7, r3
  402810:	4605      	mov	r5, r0
  402812:	f001 fd75 	bl	404300 <_localeconv_r>
  402816:	6803      	ldr	r3, [r0, #0]
  402818:	9309      	str	r3, [sp, #36]	; 0x24
  40281a:	4618      	mov	r0, r3
  40281c:	f000 fcfc 	bl	403218 <strlen>
  402820:	2300      	movs	r3, #0
  402822:	930e      	str	r3, [sp, #56]	; 0x38
  402824:	f8d8 3000 	ldr.w	r3, [r8]
  402828:	900a      	str	r0, [sp, #40]	; 0x28
  40282a:	3307      	adds	r3, #7
  40282c:	f023 0307 	bic.w	r3, r3, #7
  402830:	f103 0208 	add.w	r2, r3, #8
  402834:	f894 9018 	ldrb.w	r9, [r4, #24]
  402838:	f8d4 b000 	ldr.w	fp, [r4]
  40283c:	f8c8 2000 	str.w	r2, [r8]
  402840:	e9d3 2300 	ldrd	r2, r3, [r3]
  402844:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402848:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  40284c:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402850:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402854:	930b      	str	r3, [sp, #44]	; 0x2c
  402856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40285a:	4ba7      	ldr	r3, [pc, #668]	; (402af8 <_printf_float+0x2f8>)
  40285c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40285e:	4640      	mov	r0, r8
  402860:	f003 f826 	bl	4058b0 <__aeabi_dcmpun>
  402864:	b9a0      	cbnz	r0, 402890 <_printf_float+0x90>
  402866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40286a:	4ba3      	ldr	r3, [pc, #652]	; (402af8 <_printf_float+0x2f8>)
  40286c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40286e:	4640      	mov	r0, r8
  402870:	f003 f800 	bl	405874 <__aeabi_dcmple>
  402874:	b960      	cbnz	r0, 402890 <_printf_float+0x90>
  402876:	2200      	movs	r2, #0
  402878:	2300      	movs	r3, #0
  40287a:	4640      	mov	r0, r8
  40287c:	4651      	mov	r1, sl
  40287e:	f002 ffef 	bl	405860 <__aeabi_dcmplt>
  402882:	b110      	cbz	r0, 40288a <_printf_float+0x8a>
  402884:	232d      	movs	r3, #45	; 0x2d
  402886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40288a:	4b9c      	ldr	r3, [pc, #624]	; (402afc <_printf_float+0x2fc>)
  40288c:	4a9c      	ldr	r2, [pc, #624]	; (402b00 <_printf_float+0x300>)
  40288e:	e00a      	b.n	4028a6 <_printf_float+0xa6>
  402890:	4642      	mov	r2, r8
  402892:	4653      	mov	r3, sl
  402894:	4640      	mov	r0, r8
  402896:	4651      	mov	r1, sl
  402898:	f003 f80a 	bl	4058b0 <__aeabi_dcmpun>
  40289c:	2800      	cmp	r0, #0
  40289e:	f000 8192 	beq.w	402bc6 <_printf_float+0x3c6>
  4028a2:	4b98      	ldr	r3, [pc, #608]	; (402b04 <_printf_float+0x304>)
  4028a4:	4a98      	ldr	r2, [pc, #608]	; (402b08 <_printf_float+0x308>)
  4028a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  4028aa:	bf8c      	ite	hi
  4028ac:	4690      	movhi	r8, r2
  4028ae:	4698      	movls	r8, r3
  4028b0:	2303      	movs	r3, #3
  4028b2:	6123      	str	r3, [r4, #16]
  4028b4:	f02b 0304 	bic.w	r3, fp, #4
  4028b8:	6023      	str	r3, [r4, #0]
  4028ba:	f04f 0a00 	mov.w	sl, #0
  4028be:	e03d      	b.n	40293c <_printf_float+0x13c>
  4028c0:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  4028c4:	f000 818a 	beq.w	402bdc <_printf_float+0x3dc>
  4028c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  4028cc:	f000 8186 	beq.w	402bdc <_printf_float+0x3dc>
  4028d0:	6023      	str	r3, [r4, #0]
  4028d2:	2100      	movs	r1, #0
  4028d4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  4028d8:	9301      	str	r3, [sp, #4]
  4028da:	6863      	ldr	r3, [r4, #4]
  4028dc:	9005      	str	r0, [sp, #20]
  4028de:	9202      	str	r2, [sp, #8]
  4028e0:	9300      	str	r3, [sp, #0]
  4028e2:	4642      	mov	r2, r8
  4028e4:	4653      	mov	r3, sl
  4028e6:	9106      	str	r1, [sp, #24]
  4028e8:	f8cd 9010 	str.w	r9, [sp, #16]
  4028ec:	f8cd e00c 	str.w	lr, [sp, #12]
  4028f0:	4628      	mov	r0, r5
  4028f2:	f7ff fef5 	bl	4026e0 <__cvt>
  4028f6:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  4028fa:	2b47      	cmp	r3, #71	; 0x47
  4028fc:	4680      	mov	r8, r0
  4028fe:	f000 8184 	beq.w	402c0a <_printf_float+0x40a>
  402902:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402906:	990d      	ldr	r1, [sp, #52]	; 0x34
  402908:	f200 818d 	bhi.w	402c26 <_printf_float+0x426>
  40290c:	3901      	subs	r1, #1
  40290e:	464a      	mov	r2, r9
  402910:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402914:	910d      	str	r1, [sp, #52]	; 0x34
  402916:	f7ff ff42 	bl	40279e <__exponent>
  40291a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40291c:	1883      	adds	r3, r0, r2
  40291e:	2a01      	cmp	r2, #1
  402920:	4682      	mov	sl, r0
  402922:	6123      	str	r3, [r4, #16]
  402924:	f300 817c 	bgt.w	402c20 <_printf_float+0x420>
  402928:	6822      	ldr	r2, [r4, #0]
  40292a:	07d1      	lsls	r1, r2, #31
  40292c:	f100 8178 	bmi.w	402c20 <_printf_float+0x420>
  402930:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402934:	b113      	cbz	r3, 40293c <_printf_float+0x13c>
  402936:	232d      	movs	r3, #45	; 0x2d
  402938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40293c:	9700      	str	r7, [sp, #0]
  40293e:	4633      	mov	r3, r6
  402940:	aa0f      	add	r2, sp, #60	; 0x3c
  402942:	4621      	mov	r1, r4
  402944:	4628      	mov	r0, r5
  402946:	f000 f99f 	bl	402c88 <_printf_common>
  40294a:	3001      	adds	r0, #1
  40294c:	d102      	bne.n	402954 <_printf_float+0x154>
  40294e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402952:	e196      	b.n	402c82 <_printf_float+0x482>
  402954:	6823      	ldr	r3, [r4, #0]
  402956:	055a      	lsls	r2, r3, #21
  402958:	d401      	bmi.n	40295e <_printf_float+0x15e>
  40295a:	6923      	ldr	r3, [r4, #16]
  40295c:	e065      	b.n	402a2a <_printf_float+0x22a>
  40295e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402962:	f240 80d5 	bls.w	402b10 <_printf_float+0x310>
  402966:	2200      	movs	r2, #0
  402968:	2300      	movs	r3, #0
  40296a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40296e:	f002 ff6d 	bl	40584c <__aeabi_dcmpeq>
  402972:	b378      	cbz	r0, 4029d4 <_printf_float+0x1d4>
  402974:	2301      	movs	r3, #1
  402976:	4a65      	ldr	r2, [pc, #404]	; (402b0c <_printf_float+0x30c>)
  402978:	4631      	mov	r1, r6
  40297a:	4628      	mov	r0, r5
  40297c:	47b8      	blx	r7
  40297e:	3001      	adds	r0, #1
  402980:	d0e5      	beq.n	40294e <_printf_float+0x14e>
  402982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402986:	429a      	cmp	r2, r3
  402988:	db0b      	blt.n	4029a2 <_printf_float+0x1a2>
  40298a:	6823      	ldr	r3, [r4, #0]
  40298c:	07d8      	lsls	r0, r3, #31
  40298e:	d408      	bmi.n	4029a2 <_printf_float+0x1a2>
  402990:	6823      	ldr	r3, [r4, #0]
  402992:	079b      	lsls	r3, r3, #30
  402994:	f140 8111 	bpl.w	402bba <_printf_float+0x3ba>
  402998:	f04f 0800 	mov.w	r8, #0
  40299c:	f104 0919 	add.w	r9, r4, #25
  4029a0:	e106      	b.n	402bb0 <_printf_float+0x3b0>
  4029a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4029a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4029a6:	4631      	mov	r1, r6
  4029a8:	4628      	mov	r0, r5
  4029aa:	47b8      	blx	r7
  4029ac:	3001      	adds	r0, #1
  4029ae:	d0ce      	beq.n	40294e <_printf_float+0x14e>
  4029b0:	f04f 0800 	mov.w	r8, #0
  4029b4:	f104 091a 	add.w	r9, r4, #26
  4029b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4029ba:	3b01      	subs	r3, #1
  4029bc:	4598      	cmp	r8, r3
  4029be:	dae7      	bge.n	402990 <_printf_float+0x190>
  4029c0:	2301      	movs	r3, #1
  4029c2:	464a      	mov	r2, r9
  4029c4:	4631      	mov	r1, r6
  4029c6:	4628      	mov	r0, r5
  4029c8:	47b8      	blx	r7
  4029ca:	3001      	adds	r0, #1
  4029cc:	d0bf      	beq.n	40294e <_printf_float+0x14e>
  4029ce:	f108 0801 	add.w	r8, r8, #1
  4029d2:	e7f1      	b.n	4029b8 <_printf_float+0x1b8>
  4029d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4029d6:	2b00      	cmp	r3, #0
  4029d8:	dc29      	bgt.n	402a2e <_printf_float+0x22e>
  4029da:	2301      	movs	r3, #1
  4029dc:	4a4b      	ldr	r2, [pc, #300]	; (402b0c <_printf_float+0x30c>)
  4029de:	4631      	mov	r1, r6
  4029e0:	4628      	mov	r0, r5
  4029e2:	47b8      	blx	r7
  4029e4:	3001      	adds	r0, #1
  4029e6:	d0b2      	beq.n	40294e <_printf_float+0x14e>
  4029e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4029ea:	b923      	cbnz	r3, 4029f6 <_printf_float+0x1f6>
  4029ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4029ee:	b913      	cbnz	r3, 4029f6 <_printf_float+0x1f6>
  4029f0:	6823      	ldr	r3, [r4, #0]
  4029f2:	07d9      	lsls	r1, r3, #31
  4029f4:	d5cc      	bpl.n	402990 <_printf_float+0x190>
  4029f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4029f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4029fa:	4631      	mov	r1, r6
  4029fc:	4628      	mov	r0, r5
  4029fe:	47b8      	blx	r7
  402a00:	3001      	adds	r0, #1
  402a02:	d0a4      	beq.n	40294e <_printf_float+0x14e>
  402a04:	f04f 0900 	mov.w	r9, #0
  402a08:	f104 0a1a 	add.w	sl, r4, #26
  402a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402a0e:	425b      	negs	r3, r3
  402a10:	4599      	cmp	r9, r3
  402a12:	da09      	bge.n	402a28 <_printf_float+0x228>
  402a14:	2301      	movs	r3, #1
  402a16:	4652      	mov	r2, sl
  402a18:	4631      	mov	r1, r6
  402a1a:	4628      	mov	r0, r5
  402a1c:	47b8      	blx	r7
  402a1e:	3001      	adds	r0, #1
  402a20:	d095      	beq.n	40294e <_printf_float+0x14e>
  402a22:	f109 0901 	add.w	r9, r9, #1
  402a26:	e7f1      	b.n	402a0c <_printf_float+0x20c>
  402a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a2a:	4642      	mov	r2, r8
  402a2c:	e0a7      	b.n	402b7e <_printf_float+0x37e>
  402a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402a30:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402a32:	429a      	cmp	r2, r3
  402a34:	bfa8      	it	ge
  402a36:	461a      	movge	r2, r3
  402a38:	2a00      	cmp	r2, #0
  402a3a:	4691      	mov	r9, r2
  402a3c:	dc06      	bgt.n	402a4c <_printf_float+0x24c>
  402a3e:	f04f 0a00 	mov.w	sl, #0
  402a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  402a46:	f104 0b1a 	add.w	fp, r4, #26
  402a4a:	e011      	b.n	402a70 <_printf_float+0x270>
  402a4c:	4613      	mov	r3, r2
  402a4e:	4631      	mov	r1, r6
  402a50:	4642      	mov	r2, r8
  402a52:	4628      	mov	r0, r5
  402a54:	47b8      	blx	r7
  402a56:	3001      	adds	r0, #1
  402a58:	d1f1      	bne.n	402a3e <_printf_float+0x23e>
  402a5a:	e778      	b.n	40294e <_printf_float+0x14e>
  402a5c:	2301      	movs	r3, #1
  402a5e:	465a      	mov	r2, fp
  402a60:	4631      	mov	r1, r6
  402a62:	4628      	mov	r0, r5
  402a64:	47b8      	blx	r7
  402a66:	3001      	adds	r0, #1
  402a68:	f43f af71 	beq.w	40294e <_printf_float+0x14e>
  402a6c:	f10a 0a01 	add.w	sl, sl, #1
  402a70:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402a72:	ebc9 0203 	rsb	r2, r9, r3
  402a76:	4592      	cmp	sl, r2
  402a78:	dbf0      	blt.n	402a5c <_printf_float+0x25c>
  402a7a:	eb08 0903 	add.w	r9, r8, r3
  402a7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a82:	429a      	cmp	r2, r3
  402a84:	db0f      	blt.n	402aa6 <_printf_float+0x2a6>
  402a86:	6823      	ldr	r3, [r4, #0]
  402a88:	07da      	lsls	r2, r3, #31
  402a8a:	d40c      	bmi.n	402aa6 <_printf_float+0x2a6>
  402a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a90:	4498      	add	r8, r3
  402a92:	ebc9 0808 	rsb	r8, r9, r8
  402a96:	1a9b      	subs	r3, r3, r2
  402a98:	4598      	cmp	r8, r3
  402a9a:	bfa8      	it	ge
  402a9c:	4698      	movge	r8, r3
  402a9e:	f1b8 0f00 	cmp.w	r8, #0
  402aa2:	dc08      	bgt.n	402ab6 <_printf_float+0x2b6>
  402aa4:	e00f      	b.n	402ac6 <_printf_float+0x2c6>
  402aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402aaa:	4631      	mov	r1, r6
  402aac:	4628      	mov	r0, r5
  402aae:	47b8      	blx	r7
  402ab0:	3001      	adds	r0, #1
  402ab2:	d1eb      	bne.n	402a8c <_printf_float+0x28c>
  402ab4:	e74b      	b.n	40294e <_printf_float+0x14e>
  402ab6:	4643      	mov	r3, r8
  402ab8:	464a      	mov	r2, r9
  402aba:	4631      	mov	r1, r6
  402abc:	4628      	mov	r0, r5
  402abe:	47b8      	blx	r7
  402ac0:	3001      	adds	r0, #1
  402ac2:	f43f af44 	beq.w	40294e <_printf_float+0x14e>
  402ac6:	f04f 0900 	mov.w	r9, #0
  402aca:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402ace:	f104 0a1a 	add.w	sl, r4, #26
  402ad2:	e009      	b.n	402ae8 <_printf_float+0x2e8>
  402ad4:	2301      	movs	r3, #1
  402ad6:	4652      	mov	r2, sl
  402ad8:	4631      	mov	r1, r6
  402ada:	4628      	mov	r0, r5
  402adc:	47b8      	blx	r7
  402ade:	3001      	adds	r0, #1
  402ae0:	f43f af35 	beq.w	40294e <_printf_float+0x14e>
  402ae4:	f109 0901 	add.w	r9, r9, #1
  402ae8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402aec:	1a9b      	subs	r3, r3, r2
  402aee:	ebc8 0303 	rsb	r3, r8, r3
  402af2:	4599      	cmp	r9, r3
  402af4:	dbee      	blt.n	402ad4 <_printf_float+0x2d4>
  402af6:	e74b      	b.n	402990 <_printf_float+0x190>
  402af8:	7fefffff 	.word	0x7fefffff
  402afc:	00406264 	.word	0x00406264
  402b00:	00406268 	.word	0x00406268
  402b04:	0040626c 	.word	0x0040626c
  402b08:	00406270 	.word	0x00406270
  402b0c:	00406274 	.word	0x00406274
  402b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402b12:	2a01      	cmp	r2, #1
  402b14:	dc01      	bgt.n	402b1a <_printf_float+0x31a>
  402b16:	07db      	lsls	r3, r3, #31
  402b18:	d538      	bpl.n	402b8c <_printf_float+0x38c>
  402b1a:	2301      	movs	r3, #1
  402b1c:	4642      	mov	r2, r8
  402b1e:	4631      	mov	r1, r6
  402b20:	4628      	mov	r0, r5
  402b22:	47b8      	blx	r7
  402b24:	3001      	adds	r0, #1
  402b26:	f43f af12 	beq.w	40294e <_printf_float+0x14e>
  402b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402b2e:	4631      	mov	r1, r6
  402b30:	4628      	mov	r0, r5
  402b32:	47b8      	blx	r7
  402b34:	3001      	adds	r0, #1
  402b36:	f43f af0a 	beq.w	40294e <_printf_float+0x14e>
  402b3a:	2200      	movs	r2, #0
  402b3c:	2300      	movs	r3, #0
  402b3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402b42:	f002 fe83 	bl	40584c <__aeabi_dcmpeq>
  402b46:	b120      	cbz	r0, 402b52 <_printf_float+0x352>
  402b48:	f04f 0800 	mov.w	r8, #0
  402b4c:	f104 091a 	add.w	r9, r4, #26
  402b50:	e00e      	b.n	402b70 <_printf_float+0x370>
  402b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b54:	f108 0201 	add.w	r2, r8, #1
  402b58:	3b01      	subs	r3, #1
  402b5a:	e019      	b.n	402b90 <_printf_float+0x390>
  402b5c:	2301      	movs	r3, #1
  402b5e:	464a      	mov	r2, r9
  402b60:	4631      	mov	r1, r6
  402b62:	4628      	mov	r0, r5
  402b64:	47b8      	blx	r7
  402b66:	3001      	adds	r0, #1
  402b68:	f43f aef1 	beq.w	40294e <_printf_float+0x14e>
  402b6c:	f108 0801 	add.w	r8, r8, #1
  402b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b72:	3b01      	subs	r3, #1
  402b74:	4598      	cmp	r8, r3
  402b76:	dbf1      	blt.n	402b5c <_printf_float+0x35c>
  402b78:	4653      	mov	r3, sl
  402b7a:	f104 0250 	add.w	r2, r4, #80	; 0x50
  402b7e:	4631      	mov	r1, r6
  402b80:	4628      	mov	r0, r5
  402b82:	47b8      	blx	r7
  402b84:	3001      	adds	r0, #1
  402b86:	f47f af03 	bne.w	402990 <_printf_float+0x190>
  402b8a:	e6e0      	b.n	40294e <_printf_float+0x14e>
  402b8c:	2301      	movs	r3, #1
  402b8e:	4642      	mov	r2, r8
  402b90:	4631      	mov	r1, r6
  402b92:	4628      	mov	r0, r5
  402b94:	47b8      	blx	r7
  402b96:	3001      	adds	r0, #1
  402b98:	d1ee      	bne.n	402b78 <_printf_float+0x378>
  402b9a:	e6d8      	b.n	40294e <_printf_float+0x14e>
  402b9c:	2301      	movs	r3, #1
  402b9e:	464a      	mov	r2, r9
  402ba0:	4631      	mov	r1, r6
  402ba2:	4628      	mov	r0, r5
  402ba4:	47b8      	blx	r7
  402ba6:	3001      	adds	r0, #1
  402ba8:	f43f aed1 	beq.w	40294e <_printf_float+0x14e>
  402bac:	f108 0801 	add.w	r8, r8, #1
  402bb0:	68e3      	ldr	r3, [r4, #12]
  402bb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402bb4:	1a9b      	subs	r3, r3, r2
  402bb6:	4598      	cmp	r8, r3
  402bb8:	dbf0      	blt.n	402b9c <_printf_float+0x39c>
  402bba:	68e0      	ldr	r0, [r4, #12]
  402bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402bbe:	4298      	cmp	r0, r3
  402bc0:	bfb8      	it	lt
  402bc2:	4618      	movlt	r0, r3
  402bc4:	e05d      	b.n	402c82 <_printf_float+0x482>
  402bc6:	6862      	ldr	r2, [r4, #4]
  402bc8:	1c53      	adds	r3, r2, #1
  402bca:	a80e      	add	r0, sp, #56	; 0x38
  402bcc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  402bd0:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402bd4:	f47f ae74 	bne.w	4028c0 <_printf_float+0xc0>
  402bd8:	2206      	movs	r2, #6
  402bda:	e001      	b.n	402be0 <_printf_float+0x3e0>
  402bdc:	b912      	cbnz	r2, 402be4 <_printf_float+0x3e4>
  402bde:	2201      	movs	r2, #1
  402be0:	6062      	str	r2, [r4, #4]
  402be2:	e675      	b.n	4028d0 <_printf_float+0xd0>
  402be4:	2100      	movs	r1, #0
  402be6:	9106      	str	r1, [sp, #24]
  402be8:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  402bec:	e88d 000c 	stmia.w	sp, {r2, r3}
  402bf0:	6023      	str	r3, [r4, #0]
  402bf2:	9005      	str	r0, [sp, #20]
  402bf4:	4642      	mov	r2, r8
  402bf6:	f8cd 9010 	str.w	r9, [sp, #16]
  402bfa:	f8cd e00c 	str.w	lr, [sp, #12]
  402bfe:	9102      	str	r1, [sp, #8]
  402c00:	4653      	mov	r3, sl
  402c02:	4628      	mov	r0, r5
  402c04:	f7ff fd6c 	bl	4026e0 <__cvt>
  402c08:	4680      	mov	r8, r0
  402c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402c0c:	1cd8      	adds	r0, r3, #3
  402c0e:	db02      	blt.n	402c16 <_printf_float+0x416>
  402c10:	6862      	ldr	r2, [r4, #4]
  402c12:	4293      	cmp	r3, r2
  402c14:	dd1d      	ble.n	402c52 <_printf_float+0x452>
  402c16:	f1a9 0902 	sub.w	r9, r9, #2
  402c1a:	fa5f f989 	uxtb.w	r9, r9
  402c1e:	e670      	b.n	402902 <_printf_float+0x102>
  402c20:	3301      	adds	r3, #1
  402c22:	6123      	str	r3, [r4, #16]
  402c24:	e684      	b.n	402930 <_printf_float+0x130>
  402c26:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  402c2a:	d114      	bne.n	402c56 <_printf_float+0x456>
  402c2c:	2900      	cmp	r1, #0
  402c2e:	6863      	ldr	r3, [r4, #4]
  402c30:	dd07      	ble.n	402c42 <_printf_float+0x442>
  402c32:	6121      	str	r1, [r4, #16]
  402c34:	b913      	cbnz	r3, 402c3c <_printf_float+0x43c>
  402c36:	6822      	ldr	r2, [r4, #0]
  402c38:	07d2      	lsls	r2, r2, #31
  402c3a:	d51d      	bpl.n	402c78 <_printf_float+0x478>
  402c3c:	3301      	adds	r3, #1
  402c3e:	440b      	add	r3, r1
  402c40:	e019      	b.n	402c76 <_printf_float+0x476>
  402c42:	b913      	cbnz	r3, 402c4a <_printf_float+0x44a>
  402c44:	6822      	ldr	r2, [r4, #0]
  402c46:	07d0      	lsls	r0, r2, #31
  402c48:	d501      	bpl.n	402c4e <_printf_float+0x44e>
  402c4a:	3302      	adds	r3, #2
  402c4c:	e013      	b.n	402c76 <_printf_float+0x476>
  402c4e:	2301      	movs	r3, #1
  402c50:	e011      	b.n	402c76 <_printf_float+0x476>
  402c52:	f04f 0967 	mov.w	r9, #103	; 0x67
  402c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402c58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402c5a:	4293      	cmp	r3, r2
  402c5c:	db05      	blt.n	402c6a <_printf_float+0x46a>
  402c5e:	6822      	ldr	r2, [r4, #0]
  402c60:	6123      	str	r3, [r4, #16]
  402c62:	07d1      	lsls	r1, r2, #31
  402c64:	d508      	bpl.n	402c78 <_printf_float+0x478>
  402c66:	3301      	adds	r3, #1
  402c68:	e005      	b.n	402c76 <_printf_float+0x476>
  402c6a:	2b00      	cmp	r3, #0
  402c6c:	bfd4      	ite	le
  402c6e:	f1c3 0302 	rsble	r3, r3, #2
  402c72:	2301      	movgt	r3, #1
  402c74:	4413      	add	r3, r2
  402c76:	6123      	str	r3, [r4, #16]
  402c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402c7a:	65a3      	str	r3, [r4, #88]	; 0x58
  402c7c:	f04f 0a00 	mov.w	sl, #0
  402c80:	e656      	b.n	402930 <_printf_float+0x130>
  402c82:	b011      	add	sp, #68	; 0x44
  402c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402c88 <_printf_common>:
  402c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402c8c:	4691      	mov	r9, r2
  402c8e:	461f      	mov	r7, r3
  402c90:	690a      	ldr	r2, [r1, #16]
  402c92:	688b      	ldr	r3, [r1, #8]
  402c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402c98:	4293      	cmp	r3, r2
  402c9a:	bfb8      	it	lt
  402c9c:	4613      	movlt	r3, r2
  402c9e:	f8c9 3000 	str.w	r3, [r9]
  402ca2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  402ca6:	4606      	mov	r6, r0
  402ca8:	460c      	mov	r4, r1
  402caa:	b112      	cbz	r2, 402cb2 <_printf_common+0x2a>
  402cac:	3301      	adds	r3, #1
  402cae:	f8c9 3000 	str.w	r3, [r9]
  402cb2:	6823      	ldr	r3, [r4, #0]
  402cb4:	0699      	lsls	r1, r3, #26
  402cb6:	bf42      	ittt	mi
  402cb8:	f8d9 3000 	ldrmi.w	r3, [r9]
  402cbc:	3302      	addmi	r3, #2
  402cbe:	f8c9 3000 	strmi.w	r3, [r9]
  402cc2:	6825      	ldr	r5, [r4, #0]
  402cc4:	f015 0506 	ands.w	r5, r5, #6
  402cc8:	d110      	bne.n	402cec <_printf_common+0x64>
  402cca:	f104 0a19 	add.w	sl, r4, #25
  402cce:	e007      	b.n	402ce0 <_printf_common+0x58>
  402cd0:	2301      	movs	r3, #1
  402cd2:	4652      	mov	r2, sl
  402cd4:	4639      	mov	r1, r7
  402cd6:	4630      	mov	r0, r6
  402cd8:	47c0      	blx	r8
  402cda:	3001      	adds	r0, #1
  402cdc:	d01a      	beq.n	402d14 <_printf_common+0x8c>
  402cde:	3501      	adds	r5, #1
  402ce0:	68e3      	ldr	r3, [r4, #12]
  402ce2:	f8d9 2000 	ldr.w	r2, [r9]
  402ce6:	1a9b      	subs	r3, r3, r2
  402ce8:	429d      	cmp	r5, r3
  402cea:	dbf1      	blt.n	402cd0 <_printf_common+0x48>
  402cec:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402cf0:	6822      	ldr	r2, [r4, #0]
  402cf2:	3300      	adds	r3, #0
  402cf4:	bf18      	it	ne
  402cf6:	2301      	movne	r3, #1
  402cf8:	0692      	lsls	r2, r2, #26
  402cfa:	d50f      	bpl.n	402d1c <_printf_common+0x94>
  402cfc:	18e1      	adds	r1, r4, r3
  402cfe:	1c5a      	adds	r2, r3, #1
  402d00:	2030      	movs	r0, #48	; 0x30
  402d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402d06:	4422      	add	r2, r4
  402d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402d10:	3302      	adds	r3, #2
  402d12:	e003      	b.n	402d1c <_printf_common+0x94>
  402d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402d20:	4639      	mov	r1, r7
  402d22:	4630      	mov	r0, r6
  402d24:	47c0      	blx	r8
  402d26:	3001      	adds	r0, #1
  402d28:	d0f4      	beq.n	402d14 <_printf_common+0x8c>
  402d2a:	6822      	ldr	r2, [r4, #0]
  402d2c:	f8d9 5000 	ldr.w	r5, [r9]
  402d30:	68e3      	ldr	r3, [r4, #12]
  402d32:	f002 0206 	and.w	r2, r2, #6
  402d36:	2a04      	cmp	r2, #4
  402d38:	bf08      	it	eq
  402d3a:	1b5d      	subeq	r5, r3, r5
  402d3c:	6922      	ldr	r2, [r4, #16]
  402d3e:	68a3      	ldr	r3, [r4, #8]
  402d40:	bf0c      	ite	eq
  402d42:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402d46:	2500      	movne	r5, #0
  402d48:	4293      	cmp	r3, r2
  402d4a:	bfc4      	itt	gt
  402d4c:	1a9b      	subgt	r3, r3, r2
  402d4e:	18ed      	addgt	r5, r5, r3
  402d50:	f04f 0900 	mov.w	r9, #0
  402d54:	341a      	adds	r4, #26
  402d56:	454d      	cmp	r5, r9
  402d58:	d009      	beq.n	402d6e <_printf_common+0xe6>
  402d5a:	2301      	movs	r3, #1
  402d5c:	4622      	mov	r2, r4
  402d5e:	4639      	mov	r1, r7
  402d60:	4630      	mov	r0, r6
  402d62:	47c0      	blx	r8
  402d64:	3001      	adds	r0, #1
  402d66:	d0d5      	beq.n	402d14 <_printf_common+0x8c>
  402d68:	f109 0901 	add.w	r9, r9, #1
  402d6c:	e7f3      	b.n	402d56 <_printf_common+0xce>
  402d6e:	2000      	movs	r0, #0
  402d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402d74 <_printf_i>:
  402d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402d78:	4617      	mov	r7, r2
  402d7a:	7e0a      	ldrb	r2, [r1, #24]
  402d7c:	b085      	sub	sp, #20
  402d7e:	2a6e      	cmp	r2, #110	; 0x6e
  402d80:	4698      	mov	r8, r3
  402d82:	4606      	mov	r6, r0
  402d84:	460c      	mov	r4, r1
  402d86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402d88:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402d8c:	f000 80ae 	beq.w	402eec <_printf_i+0x178>
  402d90:	d811      	bhi.n	402db6 <_printf_i+0x42>
  402d92:	2a63      	cmp	r2, #99	; 0x63
  402d94:	d022      	beq.n	402ddc <_printf_i+0x68>
  402d96:	d809      	bhi.n	402dac <_printf_i+0x38>
  402d98:	2a00      	cmp	r2, #0
  402d9a:	f000 80bb 	beq.w	402f14 <_printf_i+0x1a0>
  402d9e:	2a58      	cmp	r2, #88	; 0x58
  402da0:	f040 80ca 	bne.w	402f38 <_printf_i+0x1c4>
  402da4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402da8:	4983      	ldr	r1, [pc, #524]	; (402fb8 <_printf_i+0x244>)
  402daa:	e055      	b.n	402e58 <_printf_i+0xe4>
  402dac:	2a64      	cmp	r2, #100	; 0x64
  402dae:	d01e      	beq.n	402dee <_printf_i+0x7a>
  402db0:	2a69      	cmp	r2, #105	; 0x69
  402db2:	d01c      	beq.n	402dee <_printf_i+0x7a>
  402db4:	e0c0      	b.n	402f38 <_printf_i+0x1c4>
  402db6:	2a73      	cmp	r2, #115	; 0x73
  402db8:	f000 80b0 	beq.w	402f1c <_printf_i+0x1a8>
  402dbc:	d809      	bhi.n	402dd2 <_printf_i+0x5e>
  402dbe:	2a6f      	cmp	r2, #111	; 0x6f
  402dc0:	d02e      	beq.n	402e20 <_printf_i+0xac>
  402dc2:	2a70      	cmp	r2, #112	; 0x70
  402dc4:	f040 80b8 	bne.w	402f38 <_printf_i+0x1c4>
  402dc8:	680a      	ldr	r2, [r1, #0]
  402dca:	f042 0220 	orr.w	r2, r2, #32
  402dce:	600a      	str	r2, [r1, #0]
  402dd0:	e03e      	b.n	402e50 <_printf_i+0xdc>
  402dd2:	2a75      	cmp	r2, #117	; 0x75
  402dd4:	d024      	beq.n	402e20 <_printf_i+0xac>
  402dd6:	2a78      	cmp	r2, #120	; 0x78
  402dd8:	d03a      	beq.n	402e50 <_printf_i+0xdc>
  402dda:	e0ad      	b.n	402f38 <_printf_i+0x1c4>
  402ddc:	681a      	ldr	r2, [r3, #0]
  402dde:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402de2:	1d11      	adds	r1, r2, #4
  402de4:	6019      	str	r1, [r3, #0]
  402de6:	6813      	ldr	r3, [r2, #0]
  402de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402dec:	e0a8      	b.n	402f40 <_printf_i+0x1cc>
  402dee:	6821      	ldr	r1, [r4, #0]
  402df0:	681a      	ldr	r2, [r3, #0]
  402df2:	f011 0f80 	tst.w	r1, #128	; 0x80
  402df6:	d002      	beq.n	402dfe <_printf_i+0x8a>
  402df8:	1d11      	adds	r1, r2, #4
  402dfa:	6019      	str	r1, [r3, #0]
  402dfc:	e008      	b.n	402e10 <_printf_i+0x9c>
  402dfe:	f011 0f40 	tst.w	r1, #64	; 0x40
  402e02:	f102 0104 	add.w	r1, r2, #4
  402e06:	6019      	str	r1, [r3, #0]
  402e08:	d002      	beq.n	402e10 <_printf_i+0x9c>
  402e0a:	f9b2 3000 	ldrsh.w	r3, [r2]
  402e0e:	e000      	b.n	402e12 <_printf_i+0x9e>
  402e10:	6813      	ldr	r3, [r2, #0]
  402e12:	2b00      	cmp	r3, #0
  402e14:	da3c      	bge.n	402e90 <_printf_i+0x11c>
  402e16:	222d      	movs	r2, #45	; 0x2d
  402e18:	425b      	negs	r3, r3
  402e1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402e1e:	e037      	b.n	402e90 <_printf_i+0x11c>
  402e20:	6821      	ldr	r1, [r4, #0]
  402e22:	681a      	ldr	r2, [r3, #0]
  402e24:	f011 0f80 	tst.w	r1, #128	; 0x80
  402e28:	d002      	beq.n	402e30 <_printf_i+0xbc>
  402e2a:	1d11      	adds	r1, r2, #4
  402e2c:	6019      	str	r1, [r3, #0]
  402e2e:	e007      	b.n	402e40 <_printf_i+0xcc>
  402e30:	f011 0f40 	tst.w	r1, #64	; 0x40
  402e34:	f102 0104 	add.w	r1, r2, #4
  402e38:	6019      	str	r1, [r3, #0]
  402e3a:	d001      	beq.n	402e40 <_printf_i+0xcc>
  402e3c:	8813      	ldrh	r3, [r2, #0]
  402e3e:	e000      	b.n	402e42 <_printf_i+0xce>
  402e40:	6813      	ldr	r3, [r2, #0]
  402e42:	7e22      	ldrb	r2, [r4, #24]
  402e44:	495c      	ldr	r1, [pc, #368]	; (402fb8 <_printf_i+0x244>)
  402e46:	2a6f      	cmp	r2, #111	; 0x6f
  402e48:	bf14      	ite	ne
  402e4a:	220a      	movne	r2, #10
  402e4c:	2208      	moveq	r2, #8
  402e4e:	e01b      	b.n	402e88 <_printf_i+0x114>
  402e50:	2278      	movs	r2, #120	; 0x78
  402e52:	495a      	ldr	r1, [pc, #360]	; (402fbc <_printf_i+0x248>)
  402e54:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402e58:	6822      	ldr	r2, [r4, #0]
  402e5a:	6818      	ldr	r0, [r3, #0]
  402e5c:	f012 0f80 	tst.w	r2, #128	; 0x80
  402e60:	f100 0504 	add.w	r5, r0, #4
  402e64:	601d      	str	r5, [r3, #0]
  402e66:	d103      	bne.n	402e70 <_printf_i+0xfc>
  402e68:	0655      	lsls	r5, r2, #25
  402e6a:	d501      	bpl.n	402e70 <_printf_i+0xfc>
  402e6c:	8803      	ldrh	r3, [r0, #0]
  402e6e:	e000      	b.n	402e72 <_printf_i+0xfe>
  402e70:	6803      	ldr	r3, [r0, #0]
  402e72:	07d0      	lsls	r0, r2, #31
  402e74:	bf44      	itt	mi
  402e76:	f042 0220 	orrmi.w	r2, r2, #32
  402e7a:	6022      	strmi	r2, [r4, #0]
  402e7c:	b91b      	cbnz	r3, 402e86 <_printf_i+0x112>
  402e7e:	6822      	ldr	r2, [r4, #0]
  402e80:	f022 0220 	bic.w	r2, r2, #32
  402e84:	6022      	str	r2, [r4, #0]
  402e86:	2210      	movs	r2, #16
  402e88:	2000      	movs	r0, #0
  402e8a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402e8e:	e001      	b.n	402e94 <_printf_i+0x120>
  402e90:	4949      	ldr	r1, [pc, #292]	; (402fb8 <_printf_i+0x244>)
  402e92:	220a      	movs	r2, #10
  402e94:	6865      	ldr	r5, [r4, #4]
  402e96:	60a5      	str	r5, [r4, #8]
  402e98:	2d00      	cmp	r5, #0
  402e9a:	db08      	blt.n	402eae <_printf_i+0x13a>
  402e9c:	6820      	ldr	r0, [r4, #0]
  402e9e:	f020 0004 	bic.w	r0, r0, #4
  402ea2:	6020      	str	r0, [r4, #0]
  402ea4:	b92b      	cbnz	r3, 402eb2 <_printf_i+0x13e>
  402ea6:	2d00      	cmp	r5, #0
  402ea8:	d17d      	bne.n	402fa6 <_printf_i+0x232>
  402eaa:	4675      	mov	r5, lr
  402eac:	e00c      	b.n	402ec8 <_printf_i+0x154>
  402eae:	2b00      	cmp	r3, #0
  402eb0:	d079      	beq.n	402fa6 <_printf_i+0x232>
  402eb2:	4675      	mov	r5, lr
  402eb4:	fbb3 f0f2 	udiv	r0, r3, r2
  402eb8:	fb02 3310 	mls	r3, r2, r0, r3
  402ebc:	5ccb      	ldrb	r3, [r1, r3]
  402ebe:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402ec2:	4603      	mov	r3, r0
  402ec4:	2800      	cmp	r0, #0
  402ec6:	d1f5      	bne.n	402eb4 <_printf_i+0x140>
  402ec8:	2a08      	cmp	r2, #8
  402eca:	d10b      	bne.n	402ee4 <_printf_i+0x170>
  402ecc:	6823      	ldr	r3, [r4, #0]
  402ece:	07da      	lsls	r2, r3, #31
  402ed0:	d508      	bpl.n	402ee4 <_printf_i+0x170>
  402ed2:	6923      	ldr	r3, [r4, #16]
  402ed4:	6862      	ldr	r2, [r4, #4]
  402ed6:	429a      	cmp	r2, r3
  402ed8:	bfde      	ittt	le
  402eda:	2330      	movle	r3, #48	; 0x30
  402edc:	f805 3c01 	strble.w	r3, [r5, #-1]
  402ee0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  402ee4:	ebc5 030e 	rsb	r3, r5, lr
  402ee8:	6123      	str	r3, [r4, #16]
  402eea:	e02e      	b.n	402f4a <_printf_i+0x1d6>
  402eec:	6808      	ldr	r0, [r1, #0]
  402eee:	681a      	ldr	r2, [r3, #0]
  402ef0:	6949      	ldr	r1, [r1, #20]
  402ef2:	f010 0f80 	tst.w	r0, #128	; 0x80
  402ef6:	d003      	beq.n	402f00 <_printf_i+0x18c>
  402ef8:	1d10      	adds	r0, r2, #4
  402efa:	6018      	str	r0, [r3, #0]
  402efc:	6813      	ldr	r3, [r2, #0]
  402efe:	e008      	b.n	402f12 <_printf_i+0x19e>
  402f00:	f010 0f40 	tst.w	r0, #64	; 0x40
  402f04:	f102 0004 	add.w	r0, r2, #4
  402f08:	6018      	str	r0, [r3, #0]
  402f0a:	6813      	ldr	r3, [r2, #0]
  402f0c:	d001      	beq.n	402f12 <_printf_i+0x19e>
  402f0e:	8019      	strh	r1, [r3, #0]
  402f10:	e000      	b.n	402f14 <_printf_i+0x1a0>
  402f12:	6019      	str	r1, [r3, #0]
  402f14:	2300      	movs	r3, #0
  402f16:	6123      	str	r3, [r4, #16]
  402f18:	4675      	mov	r5, lr
  402f1a:	e016      	b.n	402f4a <_printf_i+0x1d6>
  402f1c:	681a      	ldr	r2, [r3, #0]
  402f1e:	1d11      	adds	r1, r2, #4
  402f20:	6019      	str	r1, [r3, #0]
  402f22:	6815      	ldr	r5, [r2, #0]
  402f24:	6862      	ldr	r2, [r4, #4]
  402f26:	2100      	movs	r1, #0
  402f28:	4628      	mov	r0, r5
  402f2a:	f001 fa61 	bl	4043f0 <memchr>
  402f2e:	b108      	cbz	r0, 402f34 <_printf_i+0x1c0>
  402f30:	1b40      	subs	r0, r0, r5
  402f32:	6060      	str	r0, [r4, #4]
  402f34:	6863      	ldr	r3, [r4, #4]
  402f36:	e004      	b.n	402f42 <_printf_i+0x1ce>
  402f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402f3c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402f40:	2301      	movs	r3, #1
  402f42:	6123      	str	r3, [r4, #16]
  402f44:	2300      	movs	r3, #0
  402f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402f4a:	f8cd 8000 	str.w	r8, [sp]
  402f4e:	463b      	mov	r3, r7
  402f50:	aa03      	add	r2, sp, #12
  402f52:	4621      	mov	r1, r4
  402f54:	4630      	mov	r0, r6
  402f56:	f7ff fe97 	bl	402c88 <_printf_common>
  402f5a:	3001      	adds	r0, #1
  402f5c:	d102      	bne.n	402f64 <_printf_i+0x1f0>
  402f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402f62:	e026      	b.n	402fb2 <_printf_i+0x23e>
  402f64:	6923      	ldr	r3, [r4, #16]
  402f66:	462a      	mov	r2, r5
  402f68:	4639      	mov	r1, r7
  402f6a:	4630      	mov	r0, r6
  402f6c:	47c0      	blx	r8
  402f6e:	3001      	adds	r0, #1
  402f70:	d0f5      	beq.n	402f5e <_printf_i+0x1ea>
  402f72:	6823      	ldr	r3, [r4, #0]
  402f74:	079b      	lsls	r3, r3, #30
  402f76:	d510      	bpl.n	402f9a <_printf_i+0x226>
  402f78:	2500      	movs	r5, #0
  402f7a:	f104 0919 	add.w	r9, r4, #25
  402f7e:	e007      	b.n	402f90 <_printf_i+0x21c>
  402f80:	2301      	movs	r3, #1
  402f82:	464a      	mov	r2, r9
  402f84:	4639      	mov	r1, r7
  402f86:	4630      	mov	r0, r6
  402f88:	47c0      	blx	r8
  402f8a:	3001      	adds	r0, #1
  402f8c:	d0e7      	beq.n	402f5e <_printf_i+0x1ea>
  402f8e:	3501      	adds	r5, #1
  402f90:	68e3      	ldr	r3, [r4, #12]
  402f92:	9a03      	ldr	r2, [sp, #12]
  402f94:	1a9b      	subs	r3, r3, r2
  402f96:	429d      	cmp	r5, r3
  402f98:	dbf2      	blt.n	402f80 <_printf_i+0x20c>
  402f9a:	68e0      	ldr	r0, [r4, #12]
  402f9c:	9b03      	ldr	r3, [sp, #12]
  402f9e:	4298      	cmp	r0, r3
  402fa0:	bfb8      	it	lt
  402fa2:	4618      	movlt	r0, r3
  402fa4:	e005      	b.n	402fb2 <_printf_i+0x23e>
  402fa6:	780b      	ldrb	r3, [r1, #0]
  402fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402fb0:	e78a      	b.n	402ec8 <_printf_i+0x154>
  402fb2:	b005      	add	sp, #20
  402fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402fb8:	00406276 	.word	0x00406276
  402fbc:	00406287 	.word	0x00406287

00402fc0 <iprintf>:
  402fc0:	b40f      	push	{r0, r1, r2, r3}
  402fc2:	4b0a      	ldr	r3, [pc, #40]	; (402fec <iprintf+0x2c>)
  402fc4:	b513      	push	{r0, r1, r4, lr}
  402fc6:	681c      	ldr	r4, [r3, #0]
  402fc8:	b124      	cbz	r4, 402fd4 <iprintf+0x14>
  402fca:	69a3      	ldr	r3, [r4, #24]
  402fcc:	b913      	cbnz	r3, 402fd4 <iprintf+0x14>
  402fce:	4620      	mov	r0, r4
  402fd0:	f001 f90c 	bl	4041ec <__sinit>
  402fd4:	ab05      	add	r3, sp, #20
  402fd6:	9a04      	ldr	r2, [sp, #16]
  402fd8:	68a1      	ldr	r1, [r4, #8]
  402fda:	9301      	str	r3, [sp, #4]
  402fdc:	4620      	mov	r0, r4
  402fde:	f001 fe1b 	bl	404c18 <_vfiprintf_r>
  402fe2:	b002      	add	sp, #8
  402fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402fe8:	b004      	add	sp, #16
  402fea:	4770      	bx	lr
  402fec:	20000078 	.word	0x20000078

00402ff0 <_puts_r>:
  402ff0:	b570      	push	{r4, r5, r6, lr}
  402ff2:	460e      	mov	r6, r1
  402ff4:	4605      	mov	r5, r0
  402ff6:	b118      	cbz	r0, 403000 <_puts_r+0x10>
  402ff8:	6983      	ldr	r3, [r0, #24]
  402ffa:	b90b      	cbnz	r3, 403000 <_puts_r+0x10>
  402ffc:	f001 f8f6 	bl	4041ec <__sinit>
  403000:	69ab      	ldr	r3, [r5, #24]
  403002:	68ac      	ldr	r4, [r5, #8]
  403004:	b913      	cbnz	r3, 40300c <_puts_r+0x1c>
  403006:	4628      	mov	r0, r5
  403008:	f001 f8f0 	bl	4041ec <__sinit>
  40300c:	4b22      	ldr	r3, [pc, #136]	; (403098 <_puts_r+0xa8>)
  40300e:	429c      	cmp	r4, r3
  403010:	d101      	bne.n	403016 <_puts_r+0x26>
  403012:	686c      	ldr	r4, [r5, #4]
  403014:	e008      	b.n	403028 <_puts_r+0x38>
  403016:	4b21      	ldr	r3, [pc, #132]	; (40309c <_puts_r+0xac>)
  403018:	429c      	cmp	r4, r3
  40301a:	d101      	bne.n	403020 <_puts_r+0x30>
  40301c:	68ac      	ldr	r4, [r5, #8]
  40301e:	e003      	b.n	403028 <_puts_r+0x38>
  403020:	4b1f      	ldr	r3, [pc, #124]	; (4030a0 <_puts_r+0xb0>)
  403022:	429c      	cmp	r4, r3
  403024:	bf08      	it	eq
  403026:	68ec      	ldreq	r4, [r5, #12]
  403028:	89a3      	ldrh	r3, [r4, #12]
  40302a:	071b      	lsls	r3, r3, #28
  40302c:	d501      	bpl.n	403032 <_puts_r+0x42>
  40302e:	6923      	ldr	r3, [r4, #16]
  403030:	b93b      	cbnz	r3, 403042 <_puts_r+0x52>
  403032:	4621      	mov	r1, r4
  403034:	4628      	mov	r0, r5
  403036:	f000 f94b 	bl	4032d0 <__swsetup_r>
  40303a:	b110      	cbz	r0, 403042 <_puts_r+0x52>
  40303c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403040:	bd70      	pop	{r4, r5, r6, pc}
  403042:	3e01      	subs	r6, #1
  403044:	68a3      	ldr	r3, [r4, #8]
  403046:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  40304a:	3b01      	subs	r3, #1
  40304c:	60a3      	str	r3, [r4, #8]
  40304e:	b191      	cbz	r1, 403076 <_puts_r+0x86>
  403050:	2b00      	cmp	r3, #0
  403052:	da04      	bge.n	40305e <_puts_r+0x6e>
  403054:	69a2      	ldr	r2, [r4, #24]
  403056:	4293      	cmp	r3, r2
  403058:	db06      	blt.n	403068 <_puts_r+0x78>
  40305a:	290a      	cmp	r1, #10
  40305c:	d004      	beq.n	403068 <_puts_r+0x78>
  40305e:	6823      	ldr	r3, [r4, #0]
  403060:	1c5a      	adds	r2, r3, #1
  403062:	6022      	str	r2, [r4, #0]
  403064:	7019      	strb	r1, [r3, #0]
  403066:	e7ed      	b.n	403044 <_puts_r+0x54>
  403068:	4622      	mov	r2, r4
  40306a:	4628      	mov	r0, r5
  40306c:	f000 f8dc 	bl	403228 <__swbuf_r>
  403070:	3001      	adds	r0, #1
  403072:	d1e7      	bne.n	403044 <_puts_r+0x54>
  403074:	e7e2      	b.n	40303c <_puts_r+0x4c>
  403076:	2b00      	cmp	r3, #0
  403078:	da08      	bge.n	40308c <_puts_r+0x9c>
  40307a:	4622      	mov	r2, r4
  40307c:	210a      	movs	r1, #10
  40307e:	4628      	mov	r0, r5
  403080:	f000 f8d2 	bl	403228 <__swbuf_r>
  403084:	3001      	adds	r0, #1
  403086:	d0d9      	beq.n	40303c <_puts_r+0x4c>
  403088:	200a      	movs	r0, #10
  40308a:	bd70      	pop	{r4, r5, r6, pc}
  40308c:	6823      	ldr	r3, [r4, #0]
  40308e:	200a      	movs	r0, #10
  403090:	1c5a      	adds	r2, r3, #1
  403092:	6022      	str	r2, [r4, #0]
  403094:	7018      	strb	r0, [r3, #0]
  403096:	bd70      	pop	{r4, r5, r6, pc}
  403098:	004062a8 	.word	0x004062a8
  40309c:	004062c8 	.word	0x004062c8
  4030a0:	004062e8 	.word	0x004062e8

004030a4 <puts>:
  4030a4:	4b02      	ldr	r3, [pc, #8]	; (4030b0 <puts+0xc>)
  4030a6:	4601      	mov	r1, r0
  4030a8:	6818      	ldr	r0, [r3, #0]
  4030aa:	f7ff bfa1 	b.w	402ff0 <_puts_r>
  4030ae:	bf00      	nop
  4030b0:	20000078 	.word	0x20000078

004030b4 <setbuf>:
  4030b4:	2900      	cmp	r1, #0
  4030b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4030ba:	bf0c      	ite	eq
  4030bc:	2202      	moveq	r2, #2
  4030be:	2200      	movne	r2, #0
  4030c0:	f000 b800 	b.w	4030c4 <setvbuf>

004030c4 <setvbuf>:
  4030c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4030c8:	461d      	mov	r5, r3
  4030ca:	4b4f      	ldr	r3, [pc, #316]	; (403208 <setvbuf+0x144>)
  4030cc:	681e      	ldr	r6, [r3, #0]
  4030ce:	4604      	mov	r4, r0
  4030d0:	460f      	mov	r7, r1
  4030d2:	4690      	mov	r8, r2
  4030d4:	b126      	cbz	r6, 4030e0 <setvbuf+0x1c>
  4030d6:	69b3      	ldr	r3, [r6, #24]
  4030d8:	b913      	cbnz	r3, 4030e0 <setvbuf+0x1c>
  4030da:	4630      	mov	r0, r6
  4030dc:	f001 f886 	bl	4041ec <__sinit>
  4030e0:	4b4a      	ldr	r3, [pc, #296]	; (40320c <setvbuf+0x148>)
  4030e2:	429c      	cmp	r4, r3
  4030e4:	d101      	bne.n	4030ea <setvbuf+0x26>
  4030e6:	6874      	ldr	r4, [r6, #4]
  4030e8:	e008      	b.n	4030fc <setvbuf+0x38>
  4030ea:	4b49      	ldr	r3, [pc, #292]	; (403210 <setvbuf+0x14c>)
  4030ec:	429c      	cmp	r4, r3
  4030ee:	d101      	bne.n	4030f4 <setvbuf+0x30>
  4030f0:	68b4      	ldr	r4, [r6, #8]
  4030f2:	e003      	b.n	4030fc <setvbuf+0x38>
  4030f4:	4b47      	ldr	r3, [pc, #284]	; (403214 <setvbuf+0x150>)
  4030f6:	429c      	cmp	r4, r3
  4030f8:	bf08      	it	eq
  4030fa:	68f4      	ldreq	r4, [r6, #12]
  4030fc:	f1b8 0f02 	cmp.w	r8, #2
  403100:	d004      	beq.n	40310c <setvbuf+0x48>
  403102:	f1b8 0f01 	cmp.w	r8, #1
  403106:	d879      	bhi.n	4031fc <setvbuf+0x138>
  403108:	2d00      	cmp	r5, #0
  40310a:	db77      	blt.n	4031fc <setvbuf+0x138>
  40310c:	4621      	mov	r1, r4
  40310e:	4630      	mov	r0, r6
  403110:	f001 f802 	bl	404118 <_fflush_r>
  403114:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403116:	b141      	cbz	r1, 40312a <setvbuf+0x66>
  403118:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40311c:	4299      	cmp	r1, r3
  40311e:	d002      	beq.n	403126 <setvbuf+0x62>
  403120:	4630      	mov	r0, r6
  403122:	f001 fca5 	bl	404a70 <_free_r>
  403126:	2300      	movs	r3, #0
  403128:	6363      	str	r3, [r4, #52]	; 0x34
  40312a:	2300      	movs	r3, #0
  40312c:	61a3      	str	r3, [r4, #24]
  40312e:	6063      	str	r3, [r4, #4]
  403130:	89a3      	ldrh	r3, [r4, #12]
  403132:	061b      	lsls	r3, r3, #24
  403134:	d503      	bpl.n	40313e <setvbuf+0x7a>
  403136:	6921      	ldr	r1, [r4, #16]
  403138:	4630      	mov	r0, r6
  40313a:	f001 fc99 	bl	404a70 <_free_r>
  40313e:	89a3      	ldrh	r3, [r4, #12]
  403140:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  403144:	f023 0303 	bic.w	r3, r3, #3
  403148:	f1b8 0f02 	cmp.w	r8, #2
  40314c:	81a3      	strh	r3, [r4, #12]
  40314e:	d01e      	beq.n	40318e <setvbuf+0xca>
  403150:	ab01      	add	r3, sp, #4
  403152:	466a      	mov	r2, sp
  403154:	4621      	mov	r1, r4
  403156:	4630      	mov	r0, r6
  403158:	f001 f8e0 	bl	40431c <__swhatbuf_r>
  40315c:	89a3      	ldrh	r3, [r4, #12]
  40315e:	4318      	orrs	r0, r3
  403160:	81a0      	strh	r0, [r4, #12]
  403162:	b90d      	cbnz	r5, 403168 <setvbuf+0xa4>
  403164:	9d00      	ldr	r5, [sp, #0]
  403166:	e000      	b.n	40316a <setvbuf+0xa6>
  403168:	bb2f      	cbnz	r7, 4031b6 <setvbuf+0xf2>
  40316a:	4628      	mov	r0, r5
  40316c:	f001 f936 	bl	4043dc <malloc>
  403170:	4607      	mov	r7, r0
  403172:	b9d0      	cbnz	r0, 4031aa <setvbuf+0xe6>
  403174:	f8dd 9000 	ldr.w	r9, [sp]
  403178:	45a9      	cmp	r9, r5
  40317a:	d102      	bne.n	403182 <setvbuf+0xbe>
  40317c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403180:	e006      	b.n	403190 <setvbuf+0xcc>
  403182:	4648      	mov	r0, r9
  403184:	f001 f92a 	bl	4043dc <malloc>
  403188:	4607      	mov	r7, r0
  40318a:	b978      	cbnz	r0, 4031ac <setvbuf+0xe8>
  40318c:	e7f6      	b.n	40317c <setvbuf+0xb8>
  40318e:	2000      	movs	r0, #0
  403190:	89a3      	ldrh	r3, [r4, #12]
  403192:	f043 0302 	orr.w	r3, r3, #2
  403196:	81a3      	strh	r3, [r4, #12]
  403198:	2300      	movs	r3, #0
  40319a:	60a3      	str	r3, [r4, #8]
  40319c:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4031a0:	6023      	str	r3, [r4, #0]
  4031a2:	6123      	str	r3, [r4, #16]
  4031a4:	2301      	movs	r3, #1
  4031a6:	6163      	str	r3, [r4, #20]
  4031a8:	e02a      	b.n	403200 <setvbuf+0x13c>
  4031aa:	46a9      	mov	r9, r5
  4031ac:	89a3      	ldrh	r3, [r4, #12]
  4031ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4031b2:	81a3      	strh	r3, [r4, #12]
  4031b4:	464d      	mov	r5, r9
  4031b6:	69b3      	ldr	r3, [r6, #24]
  4031b8:	b913      	cbnz	r3, 4031c0 <setvbuf+0xfc>
  4031ba:	4630      	mov	r0, r6
  4031bc:	f001 f816 	bl	4041ec <__sinit>
  4031c0:	f1b8 0f01 	cmp.w	r8, #1
  4031c4:	bf08      	it	eq
  4031c6:	89a3      	ldrheq	r3, [r4, #12]
  4031c8:	6027      	str	r7, [r4, #0]
  4031ca:	bf04      	itt	eq
  4031cc:	f043 0301 	orreq.w	r3, r3, #1
  4031d0:	81a3      	strheq	r3, [r4, #12]
  4031d2:	89a3      	ldrh	r3, [r4, #12]
  4031d4:	6127      	str	r7, [r4, #16]
  4031d6:	f003 0008 	and.w	r0, r3, #8
  4031da:	b280      	uxth	r0, r0
  4031dc:	6165      	str	r5, [r4, #20]
  4031de:	b158      	cbz	r0, 4031f8 <setvbuf+0x134>
  4031e0:	f013 0301 	ands.w	r3, r3, #1
  4031e4:	f04f 0000 	mov.w	r0, #0
  4031e8:	bf1d      	ittte	ne
  4031ea:	426d      	negne	r5, r5
  4031ec:	60a0      	strne	r0, [r4, #8]
  4031ee:	61a5      	strne	r5, [r4, #24]
  4031f0:	60a5      	streq	r5, [r4, #8]
  4031f2:	bf08      	it	eq
  4031f4:	4618      	moveq	r0, r3
  4031f6:	e003      	b.n	403200 <setvbuf+0x13c>
  4031f8:	60a0      	str	r0, [r4, #8]
  4031fa:	e001      	b.n	403200 <setvbuf+0x13c>
  4031fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403200:	b003      	add	sp, #12
  403202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403206:	bf00      	nop
  403208:	20000078 	.word	0x20000078
  40320c:	004062a8 	.word	0x004062a8
  403210:	004062c8 	.word	0x004062c8
  403214:	004062e8 	.word	0x004062e8

00403218 <strlen>:
  403218:	4603      	mov	r3, r0
  40321a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40321e:	2a00      	cmp	r2, #0
  403220:	d1fb      	bne.n	40321a <strlen+0x2>
  403222:	1a18      	subs	r0, r3, r0
  403224:	3801      	subs	r0, #1
  403226:	4770      	bx	lr

00403228 <__swbuf_r>:
  403228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40322a:	460f      	mov	r7, r1
  40322c:	4614      	mov	r4, r2
  40322e:	4605      	mov	r5, r0
  403230:	b118      	cbz	r0, 40323a <__swbuf_r+0x12>
  403232:	6983      	ldr	r3, [r0, #24]
  403234:	b90b      	cbnz	r3, 40323a <__swbuf_r+0x12>
  403236:	f000 ffd9 	bl	4041ec <__sinit>
  40323a:	4b22      	ldr	r3, [pc, #136]	; (4032c4 <__swbuf_r+0x9c>)
  40323c:	429c      	cmp	r4, r3
  40323e:	d101      	bne.n	403244 <__swbuf_r+0x1c>
  403240:	686c      	ldr	r4, [r5, #4]
  403242:	e008      	b.n	403256 <__swbuf_r+0x2e>
  403244:	4b20      	ldr	r3, [pc, #128]	; (4032c8 <__swbuf_r+0xa0>)
  403246:	429c      	cmp	r4, r3
  403248:	d101      	bne.n	40324e <__swbuf_r+0x26>
  40324a:	68ac      	ldr	r4, [r5, #8]
  40324c:	e003      	b.n	403256 <__swbuf_r+0x2e>
  40324e:	4b1f      	ldr	r3, [pc, #124]	; (4032cc <__swbuf_r+0xa4>)
  403250:	429c      	cmp	r4, r3
  403252:	bf08      	it	eq
  403254:	68ec      	ldreq	r4, [r5, #12]
  403256:	69a3      	ldr	r3, [r4, #24]
  403258:	60a3      	str	r3, [r4, #8]
  40325a:	89a3      	ldrh	r3, [r4, #12]
  40325c:	071a      	lsls	r2, r3, #28
  40325e:	d509      	bpl.n	403274 <__swbuf_r+0x4c>
  403260:	6923      	ldr	r3, [r4, #16]
  403262:	b13b      	cbz	r3, 403274 <__swbuf_r+0x4c>
  403264:	6823      	ldr	r3, [r4, #0]
  403266:	6920      	ldr	r0, [r4, #16]
  403268:	1a18      	subs	r0, r3, r0
  40326a:	6963      	ldr	r3, [r4, #20]
  40326c:	4298      	cmp	r0, r3
  40326e:	b2fe      	uxtb	r6, r7
  403270:	db0f      	blt.n	403292 <__swbuf_r+0x6a>
  403272:	e008      	b.n	403286 <__swbuf_r+0x5e>
  403274:	4621      	mov	r1, r4
  403276:	4628      	mov	r0, r5
  403278:	f000 f82a 	bl	4032d0 <__swsetup_r>
  40327c:	2800      	cmp	r0, #0
  40327e:	d0f1      	beq.n	403264 <__swbuf_r+0x3c>
  403280:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  403284:	e01b      	b.n	4032be <__swbuf_r+0x96>
  403286:	4621      	mov	r1, r4
  403288:	4628      	mov	r0, r5
  40328a:	f000 ff45 	bl	404118 <_fflush_r>
  40328e:	2800      	cmp	r0, #0
  403290:	d1f6      	bne.n	403280 <__swbuf_r+0x58>
  403292:	68a3      	ldr	r3, [r4, #8]
  403294:	3b01      	subs	r3, #1
  403296:	60a3      	str	r3, [r4, #8]
  403298:	6823      	ldr	r3, [r4, #0]
  40329a:	1c5a      	adds	r2, r3, #1
  40329c:	6022      	str	r2, [r4, #0]
  40329e:	701f      	strb	r7, [r3, #0]
  4032a0:	6963      	ldr	r3, [r4, #20]
  4032a2:	3001      	adds	r0, #1
  4032a4:	4298      	cmp	r0, r3
  4032a6:	d004      	beq.n	4032b2 <__swbuf_r+0x8a>
  4032a8:	89a3      	ldrh	r3, [r4, #12]
  4032aa:	07db      	lsls	r3, r3, #31
  4032ac:	d507      	bpl.n	4032be <__swbuf_r+0x96>
  4032ae:	2e0a      	cmp	r6, #10
  4032b0:	d105      	bne.n	4032be <__swbuf_r+0x96>
  4032b2:	4621      	mov	r1, r4
  4032b4:	4628      	mov	r0, r5
  4032b6:	f000 ff2f 	bl	404118 <_fflush_r>
  4032ba:	2800      	cmp	r0, #0
  4032bc:	d1e0      	bne.n	403280 <__swbuf_r+0x58>
  4032be:	4630      	mov	r0, r6
  4032c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4032c2:	bf00      	nop
  4032c4:	004062a8 	.word	0x004062a8
  4032c8:	004062c8 	.word	0x004062c8
  4032cc:	004062e8 	.word	0x004062e8

004032d0 <__swsetup_r>:
  4032d0:	4b32      	ldr	r3, [pc, #200]	; (40339c <__swsetup_r+0xcc>)
  4032d2:	b570      	push	{r4, r5, r6, lr}
  4032d4:	681d      	ldr	r5, [r3, #0]
  4032d6:	4606      	mov	r6, r0
  4032d8:	460c      	mov	r4, r1
  4032da:	b125      	cbz	r5, 4032e6 <__swsetup_r+0x16>
  4032dc:	69ab      	ldr	r3, [r5, #24]
  4032de:	b913      	cbnz	r3, 4032e6 <__swsetup_r+0x16>
  4032e0:	4628      	mov	r0, r5
  4032e2:	f000 ff83 	bl	4041ec <__sinit>
  4032e6:	4b2e      	ldr	r3, [pc, #184]	; (4033a0 <__swsetup_r+0xd0>)
  4032e8:	429c      	cmp	r4, r3
  4032ea:	d101      	bne.n	4032f0 <__swsetup_r+0x20>
  4032ec:	686c      	ldr	r4, [r5, #4]
  4032ee:	e008      	b.n	403302 <__swsetup_r+0x32>
  4032f0:	4b2c      	ldr	r3, [pc, #176]	; (4033a4 <__swsetup_r+0xd4>)
  4032f2:	429c      	cmp	r4, r3
  4032f4:	d101      	bne.n	4032fa <__swsetup_r+0x2a>
  4032f6:	68ac      	ldr	r4, [r5, #8]
  4032f8:	e003      	b.n	403302 <__swsetup_r+0x32>
  4032fa:	4b2b      	ldr	r3, [pc, #172]	; (4033a8 <__swsetup_r+0xd8>)
  4032fc:	429c      	cmp	r4, r3
  4032fe:	bf08      	it	eq
  403300:	68ec      	ldreq	r4, [r5, #12]
  403302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403306:	b29a      	uxth	r2, r3
  403308:	0715      	lsls	r5, r2, #28
  40330a:	d41d      	bmi.n	403348 <__swsetup_r+0x78>
  40330c:	06d0      	lsls	r0, r2, #27
  40330e:	d402      	bmi.n	403316 <__swsetup_r+0x46>
  403310:	2209      	movs	r2, #9
  403312:	6032      	str	r2, [r6, #0]
  403314:	e03a      	b.n	40338c <__swsetup_r+0xbc>
  403316:	0751      	lsls	r1, r2, #29
  403318:	d512      	bpl.n	403340 <__swsetup_r+0x70>
  40331a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40331c:	b141      	cbz	r1, 403330 <__swsetup_r+0x60>
  40331e:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403322:	4299      	cmp	r1, r3
  403324:	d002      	beq.n	40332c <__swsetup_r+0x5c>
  403326:	4630      	mov	r0, r6
  403328:	f001 fba2 	bl	404a70 <_free_r>
  40332c:	2300      	movs	r3, #0
  40332e:	6363      	str	r3, [r4, #52]	; 0x34
  403330:	89a3      	ldrh	r3, [r4, #12]
  403332:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  403336:	81a3      	strh	r3, [r4, #12]
  403338:	2300      	movs	r3, #0
  40333a:	6063      	str	r3, [r4, #4]
  40333c:	6923      	ldr	r3, [r4, #16]
  40333e:	6023      	str	r3, [r4, #0]
  403340:	89a3      	ldrh	r3, [r4, #12]
  403342:	f043 0308 	orr.w	r3, r3, #8
  403346:	81a3      	strh	r3, [r4, #12]
  403348:	6923      	ldr	r3, [r4, #16]
  40334a:	b94b      	cbnz	r3, 403360 <__swsetup_r+0x90>
  40334c:	89a3      	ldrh	r3, [r4, #12]
  40334e:	f403 7320 	and.w	r3, r3, #640	; 0x280
  403352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403356:	d003      	beq.n	403360 <__swsetup_r+0x90>
  403358:	4621      	mov	r1, r4
  40335a:	4630      	mov	r0, r6
  40335c:	f001 f802 	bl	404364 <__smakebuf_r>
  403360:	89a2      	ldrh	r2, [r4, #12]
  403362:	f012 0301 	ands.w	r3, r2, #1
  403366:	d005      	beq.n	403374 <__swsetup_r+0xa4>
  403368:	2300      	movs	r3, #0
  40336a:	60a3      	str	r3, [r4, #8]
  40336c:	6963      	ldr	r3, [r4, #20]
  40336e:	425b      	negs	r3, r3
  403370:	61a3      	str	r3, [r4, #24]
  403372:	e003      	b.n	40337c <__swsetup_r+0xac>
  403374:	0792      	lsls	r2, r2, #30
  403376:	bf58      	it	pl
  403378:	6963      	ldrpl	r3, [r4, #20]
  40337a:	60a3      	str	r3, [r4, #8]
  40337c:	6923      	ldr	r3, [r4, #16]
  40337e:	b95b      	cbnz	r3, 403398 <__swsetup_r+0xc8>
  403380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403384:	f003 0080 	and.w	r0, r3, #128	; 0x80
  403388:	b280      	uxth	r0, r0
  40338a:	b130      	cbz	r0, 40339a <__swsetup_r+0xca>
  40338c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403390:	81a3      	strh	r3, [r4, #12]
  403392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403396:	bd70      	pop	{r4, r5, r6, pc}
  403398:	2000      	movs	r0, #0
  40339a:	bd70      	pop	{r4, r5, r6, pc}
  40339c:	20000078 	.word	0x20000078
  4033a0:	004062a8 	.word	0x004062a8
  4033a4:	004062c8 	.word	0x004062c8
  4033a8:	004062e8 	.word	0x004062e8

004033ac <quorem>:
  4033ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033b0:	6903      	ldr	r3, [r0, #16]
  4033b2:	690c      	ldr	r4, [r1, #16]
  4033b4:	429c      	cmp	r4, r3
  4033b6:	4680      	mov	r8, r0
  4033b8:	f300 8083 	bgt.w	4034c2 <quorem+0x116>
  4033bc:	3c01      	subs	r4, #1
  4033be:	f101 0714 	add.w	r7, r1, #20
  4033c2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4033c6:	f100 0614 	add.w	r6, r0, #20
  4033ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4033ce:	eb06 030e 	add.w	r3, r6, lr
  4033d2:	9301      	str	r3, [sp, #4]
  4033d4:	3501      	adds	r5, #1
  4033d6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  4033da:	fbb3 f5f5 	udiv	r5, r3, r5
  4033de:	eb07 090e 	add.w	r9, r7, lr
  4033e2:	2d00      	cmp	r5, #0
  4033e4:	d039      	beq.n	40345a <quorem+0xae>
  4033e6:	f04f 0a00 	mov.w	sl, #0
  4033ea:	4638      	mov	r0, r7
  4033ec:	46b4      	mov	ip, r6
  4033ee:	46d3      	mov	fp, sl
  4033f0:	f850 2b04 	ldr.w	r2, [r0], #4
  4033f4:	b293      	uxth	r3, r2
  4033f6:	fb05 a303 	mla	r3, r5, r3, sl
  4033fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4033fe:	b29b      	uxth	r3, r3
  403400:	ebc3 030b 	rsb	r3, r3, fp
  403404:	0c12      	lsrs	r2, r2, #16
  403406:	f8bc b000 	ldrh.w	fp, [ip]
  40340a:	fb05 a202 	mla	r2, r5, r2, sl
  40340e:	fa13 f38b 	uxtah	r3, r3, fp
  403412:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403416:	fa1f fb82 	uxth.w	fp, r2
  40341a:	f8dc 2000 	ldr.w	r2, [ip]
  40341e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  403422:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403426:	b29b      	uxth	r3, r3
  403428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40342c:	4581      	cmp	r9, r0
  40342e:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403432:	f84c 3b04 	str.w	r3, [ip], #4
  403436:	d2db      	bcs.n	4033f0 <quorem+0x44>
  403438:	f856 300e 	ldr.w	r3, [r6, lr]
  40343c:	b96b      	cbnz	r3, 40345a <quorem+0xae>
  40343e:	9b01      	ldr	r3, [sp, #4]
  403440:	3b04      	subs	r3, #4
  403442:	429e      	cmp	r6, r3
  403444:	461a      	mov	r2, r3
  403446:	d302      	bcc.n	40344e <quorem+0xa2>
  403448:	f8c8 4010 	str.w	r4, [r8, #16]
  40344c:	e005      	b.n	40345a <quorem+0xae>
  40344e:	6812      	ldr	r2, [r2, #0]
  403450:	3b04      	subs	r3, #4
  403452:	2a00      	cmp	r2, #0
  403454:	d1f8      	bne.n	403448 <quorem+0x9c>
  403456:	3c01      	subs	r4, #1
  403458:	e7f3      	b.n	403442 <quorem+0x96>
  40345a:	4640      	mov	r0, r8
  40345c:	f001 fa31 	bl	4048c2 <__mcmp>
  403460:	2800      	cmp	r0, #0
  403462:	db2c      	blt.n	4034be <quorem+0x112>
  403464:	3501      	adds	r5, #1
  403466:	4630      	mov	r0, r6
  403468:	f04f 0e00 	mov.w	lr, #0
  40346c:	f857 1b04 	ldr.w	r1, [r7], #4
  403470:	f8d0 c000 	ldr.w	ip, [r0]
  403474:	b28a      	uxth	r2, r1
  403476:	ebc2 030e 	rsb	r3, r2, lr
  40347a:	0c09      	lsrs	r1, r1, #16
  40347c:	fa13 f38c 	uxtah	r3, r3, ip
  403480:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  403484:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403488:	b29b      	uxth	r3, r3
  40348a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40348e:	45b9      	cmp	r9, r7
  403490:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403494:	f840 3b04 	str.w	r3, [r0], #4
  403498:	d2e8      	bcs.n	40346c <quorem+0xc0>
  40349a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40349e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  4034a2:	b962      	cbnz	r2, 4034be <quorem+0x112>
  4034a4:	3b04      	subs	r3, #4
  4034a6:	429e      	cmp	r6, r3
  4034a8:	461a      	mov	r2, r3
  4034aa:	d302      	bcc.n	4034b2 <quorem+0x106>
  4034ac:	f8c8 4010 	str.w	r4, [r8, #16]
  4034b0:	e005      	b.n	4034be <quorem+0x112>
  4034b2:	6812      	ldr	r2, [r2, #0]
  4034b4:	3b04      	subs	r3, #4
  4034b6:	2a00      	cmp	r2, #0
  4034b8:	d1f8      	bne.n	4034ac <quorem+0x100>
  4034ba:	3c01      	subs	r4, #1
  4034bc:	e7f3      	b.n	4034a6 <quorem+0xfa>
  4034be:	4628      	mov	r0, r5
  4034c0:	e000      	b.n	4034c4 <quorem+0x118>
  4034c2:	2000      	movs	r0, #0
  4034c4:	b003      	add	sp, #12
  4034c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034ca:	0000      	movs	r0, r0
  4034cc:	0000      	movs	r0, r0
	...

004034d0 <_dtoa_r>:
  4034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4034d6:	b095      	sub	sp, #84	; 0x54
  4034d8:	4682      	mov	sl, r0
  4034da:	9c21      	ldr	r4, [sp, #132]	; 0x84
  4034dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4034e0:	b945      	cbnz	r5, 4034f4 <_dtoa_r+0x24>
  4034e2:	2010      	movs	r0, #16
  4034e4:	f000 ff7a 	bl	4043dc <malloc>
  4034e8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  4034ec:	6045      	str	r5, [r0, #4]
  4034ee:	6085      	str	r5, [r0, #8]
  4034f0:	6005      	str	r5, [r0, #0]
  4034f2:	60c5      	str	r5, [r0, #12]
  4034f4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4034f8:	6819      	ldr	r1, [r3, #0]
  4034fa:	b159      	cbz	r1, 403514 <_dtoa_r+0x44>
  4034fc:	685a      	ldr	r2, [r3, #4]
  4034fe:	604a      	str	r2, [r1, #4]
  403500:	2301      	movs	r3, #1
  403502:	4093      	lsls	r3, r2
  403504:	608b      	str	r3, [r1, #8]
  403506:	4650      	mov	r0, sl
  403508:	f001 f802 	bl	404510 <_Bfree>
  40350c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403510:	2200      	movs	r2, #0
  403512:	601a      	str	r2, [r3, #0]
  403514:	9b03      	ldr	r3, [sp, #12]
  403516:	4aa0      	ldr	r2, [pc, #640]	; (403798 <_dtoa_r+0x2c8>)
  403518:	2b00      	cmp	r3, #0
  40351a:	bfbf      	itttt	lt
  40351c:	2301      	movlt	r3, #1
  40351e:	6023      	strlt	r3, [r4, #0]
  403520:	9b03      	ldrlt	r3, [sp, #12]
  403522:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  403526:	bfb8      	it	lt
  403528:	9303      	strlt	r3, [sp, #12]
  40352a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40352e:	bfa4      	itt	ge
  403530:	2300      	movge	r3, #0
  403532:	6023      	strge	r3, [r4, #0]
  403534:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  403538:	0d1b      	lsrs	r3, r3, #20
  40353a:	051b      	lsls	r3, r3, #20
  40353c:	4293      	cmp	r3, r2
  40353e:	d11d      	bne.n	40357c <_dtoa_r+0xac>
  403540:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403542:	f242 730f 	movw	r3, #9999	; 0x270f
  403546:	6013      	str	r3, [r2, #0]
  403548:	9b02      	ldr	r3, [sp, #8]
  40354a:	b943      	cbnz	r3, 40355e <_dtoa_r+0x8e>
  40354c:	4a93      	ldr	r2, [pc, #588]	; (40379c <_dtoa_r+0x2cc>)
  40354e:	4b94      	ldr	r3, [pc, #592]	; (4037a0 <_dtoa_r+0x2d0>)
  403550:	f3c8 0013 	ubfx	r0, r8, #0, #20
  403554:	2800      	cmp	r0, #0
  403556:	bf14      	ite	ne
  403558:	4618      	movne	r0, r3
  40355a:	4610      	moveq	r0, r2
  40355c:	e000      	b.n	403560 <_dtoa_r+0x90>
  40355e:	4890      	ldr	r0, [pc, #576]	; (4037a0 <_dtoa_r+0x2d0>)
  403560:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403562:	2b00      	cmp	r3, #0
  403564:	f000 854a 	beq.w	403ffc <_dtoa_r+0xb2c>
  403568:	78c3      	ldrb	r3, [r0, #3]
  40356a:	b113      	cbz	r3, 403572 <_dtoa_r+0xa2>
  40356c:	f100 0308 	add.w	r3, r0, #8
  403570:	e000      	b.n	403574 <_dtoa_r+0xa4>
  403572:	1cc3      	adds	r3, r0, #3
  403574:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403576:	6013      	str	r3, [r2, #0]
  403578:	f000 bd40 	b.w	403ffc <_dtoa_r+0xb2c>
  40357c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  403580:	2200      	movs	r2, #0
  403582:	2300      	movs	r3, #0
  403584:	4620      	mov	r0, r4
  403586:	4629      	mov	r1, r5
  403588:	f002 f960 	bl	40584c <__aeabi_dcmpeq>
  40358c:	4607      	mov	r7, r0
  40358e:	b158      	cbz	r0, 4035a8 <_dtoa_r+0xd8>
  403590:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403592:	2301      	movs	r3, #1
  403594:	6013      	str	r3, [r2, #0]
  403596:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403598:	2b00      	cmp	r3, #0
  40359a:	f000 8522 	beq.w	403fe2 <_dtoa_r+0xb12>
  40359e:	4881      	ldr	r0, [pc, #516]	; (4037a4 <_dtoa_r+0x2d4>)
  4035a0:	6018      	str	r0, [r3, #0]
  4035a2:	3801      	subs	r0, #1
  4035a4:	f000 bd2a 	b.w	403ffc <_dtoa_r+0xb2c>
  4035a8:	ab12      	add	r3, sp, #72	; 0x48
  4035aa:	9301      	str	r3, [sp, #4]
  4035ac:	ab13      	add	r3, sp, #76	; 0x4c
  4035ae:	9300      	str	r3, [sp, #0]
  4035b0:	4622      	mov	r2, r4
  4035b2:	462b      	mov	r3, r5
  4035b4:	4650      	mov	r0, sl
  4035b6:	f001 f9ff 	bl	4049b8 <__d2b>
  4035ba:	f3c8 560a 	ubfx	r6, r8, #20, #11
  4035be:	9004      	str	r0, [sp, #16]
  4035c0:	b156      	cbz	r6, 4035d8 <_dtoa_r+0x108>
  4035c2:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4035c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4035ca:	4620      	mov	r0, r4
  4035cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4035d0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  4035d4:	9711      	str	r7, [sp, #68]	; 0x44
  4035d6:	e01d      	b.n	403614 <_dtoa_r+0x144>
  4035d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4035da:	9e12      	ldr	r6, [sp, #72]	; 0x48
  4035dc:	441e      	add	r6, r3
  4035de:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4035e2:	2b20      	cmp	r3, #32
  4035e4:	dd0a      	ble.n	4035fc <_dtoa_r+0x12c>
  4035e6:	9a02      	ldr	r2, [sp, #8]
  4035e8:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4035ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4035f0:	fa22 f000 	lsr.w	r0, r2, r0
  4035f4:	fa08 f303 	lsl.w	r3, r8, r3
  4035f8:	4318      	orrs	r0, r3
  4035fa:	e004      	b.n	403606 <_dtoa_r+0x136>
  4035fc:	f1c3 0020 	rsb	r0, r3, #32
  403600:	9b02      	ldr	r3, [sp, #8]
  403602:	fa03 f000 	lsl.w	r0, r3, r0
  403606:	f001 fe43 	bl	405290 <__aeabi_ui2d>
  40360a:	2301      	movs	r3, #1
  40360c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403610:	3e01      	subs	r6, #1
  403612:	9311      	str	r3, [sp, #68]	; 0x44
  403614:	2200      	movs	r2, #0
  403616:	4b64      	ldr	r3, [pc, #400]	; (4037a8 <_dtoa_r+0x2d8>)
  403618:	f001 fcfc 	bl	405014 <__aeabi_dsub>
  40361c:	a358      	add	r3, pc, #352	; (adr r3, 403780 <_dtoa_r+0x2b0>)
  40361e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403622:	f001 feab 	bl	40537c <__aeabi_dmul>
  403626:	a358      	add	r3, pc, #352	; (adr r3, 403788 <_dtoa_r+0x2b8>)
  403628:	e9d3 2300 	ldrd	r2, r3, [r3]
  40362c:	f001 fcf4 	bl	405018 <__adddf3>
  403630:	4604      	mov	r4, r0
  403632:	4630      	mov	r0, r6
  403634:	460d      	mov	r5, r1
  403636:	f001 fe3b 	bl	4052b0 <__aeabi_i2d>
  40363a:	a355      	add	r3, pc, #340	; (adr r3, 403790 <_dtoa_r+0x2c0>)
  40363c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403640:	f001 fe9c 	bl	40537c <__aeabi_dmul>
  403644:	4602      	mov	r2, r0
  403646:	460b      	mov	r3, r1
  403648:	4620      	mov	r0, r4
  40364a:	4629      	mov	r1, r5
  40364c:	f001 fce4 	bl	405018 <__adddf3>
  403650:	4604      	mov	r4, r0
  403652:	460d      	mov	r5, r1
  403654:	f002 f942 	bl	4058dc <__aeabi_d2iz>
  403658:	2200      	movs	r2, #0
  40365a:	4683      	mov	fp, r0
  40365c:	2300      	movs	r3, #0
  40365e:	4620      	mov	r0, r4
  403660:	4629      	mov	r1, r5
  403662:	f002 f8fd 	bl	405860 <__aeabi_dcmplt>
  403666:	b158      	cbz	r0, 403680 <_dtoa_r+0x1b0>
  403668:	4658      	mov	r0, fp
  40366a:	f001 fe21 	bl	4052b0 <__aeabi_i2d>
  40366e:	4602      	mov	r2, r0
  403670:	460b      	mov	r3, r1
  403672:	4620      	mov	r0, r4
  403674:	4629      	mov	r1, r5
  403676:	f002 f8e9 	bl	40584c <__aeabi_dcmpeq>
  40367a:	b908      	cbnz	r0, 403680 <_dtoa_r+0x1b0>
  40367c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403680:	f1bb 0f16 	cmp.w	fp, #22
  403684:	d80d      	bhi.n	4036a2 <_dtoa_r+0x1d2>
  403686:	4949      	ldr	r1, [pc, #292]	; (4037ac <_dtoa_r+0x2dc>)
  403688:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40368c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403690:	e9d1 0100 	ldrd	r0, r1, [r1]
  403694:	f002 f902 	bl	40589c <__aeabi_dcmpgt>
  403698:	b130      	cbz	r0, 4036a8 <_dtoa_r+0x1d8>
  40369a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  40369e:	2300      	movs	r3, #0
  4036a0:	e000      	b.n	4036a4 <_dtoa_r+0x1d4>
  4036a2:	2301      	movs	r3, #1
  4036a4:	9310      	str	r3, [sp, #64]	; 0x40
  4036a6:	e000      	b.n	4036aa <_dtoa_r+0x1da>
  4036a8:	9010      	str	r0, [sp, #64]	; 0x40
  4036aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4036ac:	1b9e      	subs	r6, r3, r6
  4036ae:	1e73      	subs	r3, r6, #1
  4036b0:	9307      	str	r3, [sp, #28]
  4036b2:	bf43      	ittte	mi
  4036b4:	f1c3 0800 	rsbmi	r8, r3, #0
  4036b8:	2300      	movmi	r3, #0
  4036ba:	9307      	strmi	r3, [sp, #28]
  4036bc:	f04f 0800 	movpl.w	r8, #0
  4036c0:	f1bb 0f00 	cmp.w	fp, #0
  4036c4:	db06      	blt.n	4036d4 <_dtoa_r+0x204>
  4036c6:	9b07      	ldr	r3, [sp, #28]
  4036c8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  4036cc:	445b      	add	r3, fp
  4036ce:	9307      	str	r3, [sp, #28]
  4036d0:	2700      	movs	r7, #0
  4036d2:	e005      	b.n	4036e0 <_dtoa_r+0x210>
  4036d4:	2300      	movs	r3, #0
  4036d6:	ebcb 0808 	rsb	r8, fp, r8
  4036da:	f1cb 0700 	rsb	r7, fp, #0
  4036de:	930b      	str	r3, [sp, #44]	; 0x2c
  4036e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4036e2:	2b09      	cmp	r3, #9
  4036e4:	d827      	bhi.n	403736 <_dtoa_r+0x266>
  4036e6:	2b05      	cmp	r3, #5
  4036e8:	bfc4      	itt	gt
  4036ea:	3b04      	subgt	r3, #4
  4036ec:	931e      	strgt	r3, [sp, #120]	; 0x78
  4036ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4036f0:	f1a3 0302 	sub.w	r3, r3, #2
  4036f4:	bfcc      	ite	gt
  4036f6:	2500      	movgt	r5, #0
  4036f8:	2501      	movle	r5, #1
  4036fa:	2b03      	cmp	r3, #3
  4036fc:	d820      	bhi.n	403740 <_dtoa_r+0x270>
  4036fe:	e8df f003 	tbb	[pc, r3]
  403702:	0e06      	.short	0x0e06
  403704:	0402      	.short	0x0402
  403706:	2301      	movs	r3, #1
  403708:	e002      	b.n	403710 <_dtoa_r+0x240>
  40370a:	2301      	movs	r3, #1
  40370c:	e008      	b.n	403720 <_dtoa_r+0x250>
  40370e:	2300      	movs	r3, #0
  403710:	930a      	str	r3, [sp, #40]	; 0x28
  403712:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403714:	2b00      	cmp	r3, #0
  403716:	dd1d      	ble.n	403754 <_dtoa_r+0x284>
  403718:	4699      	mov	r9, r3
  40371a:	9305      	str	r3, [sp, #20]
  40371c:	e021      	b.n	403762 <_dtoa_r+0x292>
  40371e:	2300      	movs	r3, #0
  403720:	930a      	str	r3, [sp, #40]	; 0x28
  403722:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403724:	eb0b 0903 	add.w	r9, fp, r3
  403728:	f109 0301 	add.w	r3, r9, #1
  40372c:	2b01      	cmp	r3, #1
  40372e:	9305      	str	r3, [sp, #20]
  403730:	bfb8      	it	lt
  403732:	2301      	movlt	r3, #1
  403734:	e015      	b.n	403762 <_dtoa_r+0x292>
  403736:	2501      	movs	r5, #1
  403738:	2300      	movs	r3, #0
  40373a:	931e      	str	r3, [sp, #120]	; 0x78
  40373c:	950a      	str	r5, [sp, #40]	; 0x28
  40373e:	e001      	b.n	403744 <_dtoa_r+0x274>
  403740:	2301      	movs	r3, #1
  403742:	930a      	str	r3, [sp, #40]	; 0x28
  403744:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  403748:	2200      	movs	r2, #0
  40374a:	f8cd 9014 	str.w	r9, [sp, #20]
  40374e:	2312      	movs	r3, #18
  403750:	921f      	str	r2, [sp, #124]	; 0x7c
  403752:	e006      	b.n	403762 <_dtoa_r+0x292>
  403754:	f04f 0901 	mov.w	r9, #1
  403758:	f8cd 9014 	str.w	r9, [sp, #20]
  40375c:	464b      	mov	r3, r9
  40375e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  403762:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  403766:	2200      	movs	r2, #0
  403768:	6062      	str	r2, [r4, #4]
  40376a:	2104      	movs	r1, #4
  40376c:	f101 0214 	add.w	r2, r1, #20
  403770:	429a      	cmp	r2, r3
  403772:	d81d      	bhi.n	4037b0 <_dtoa_r+0x2e0>
  403774:	6862      	ldr	r2, [r4, #4]
  403776:	3201      	adds	r2, #1
  403778:	6062      	str	r2, [r4, #4]
  40377a:	0049      	lsls	r1, r1, #1
  40377c:	e7f6      	b.n	40376c <_dtoa_r+0x29c>
  40377e:	bf00      	nop
  403780:	636f4361 	.word	0x636f4361
  403784:	3fd287a7 	.word	0x3fd287a7
  403788:	8b60c8b3 	.word	0x8b60c8b3
  40378c:	3fc68a28 	.word	0x3fc68a28
  403790:	509f79fb 	.word	0x509f79fb
  403794:	3fd34413 	.word	0x3fd34413
  403798:	7ff00000 	.word	0x7ff00000
  40379c:	00406298 	.word	0x00406298
  4037a0:	004062a1 	.word	0x004062a1
  4037a4:	00406275 	.word	0x00406275
  4037a8:	3ff80000 	.word	0x3ff80000
  4037ac:	00406308 	.word	0x00406308
  4037b0:	6861      	ldr	r1, [r4, #4]
  4037b2:	4650      	mov	r0, sl
  4037b4:	f000 fe77 	bl	4044a6 <_Balloc>
  4037b8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4037bc:	6020      	str	r0, [r4, #0]
  4037be:	681b      	ldr	r3, [r3, #0]
  4037c0:	9306      	str	r3, [sp, #24]
  4037c2:	9b05      	ldr	r3, [sp, #20]
  4037c4:	2b0e      	cmp	r3, #14
  4037c6:	f200 815d 	bhi.w	403a84 <_dtoa_r+0x5b4>
  4037ca:	2d00      	cmp	r5, #0
  4037cc:	f000 815a 	beq.w	403a84 <_dtoa_r+0x5b4>
  4037d0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4037d4:	f1bb 0f00 	cmp.w	fp, #0
  4037d8:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  4037dc:	dd31      	ble.n	403842 <_dtoa_r+0x372>
  4037de:	4aa0      	ldr	r2, [pc, #640]	; (403a60 <_dtoa_r+0x590>)
  4037e0:	f00b 030f 	and.w	r3, fp, #15
  4037e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4037e8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4037ec:	ea4f 152b 	mov.w	r5, fp, asr #4
  4037f0:	06e8      	lsls	r0, r5, #27
  4037f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
  4037f6:	d50c      	bpl.n	403812 <_dtoa_r+0x342>
  4037f8:	4b9a      	ldr	r3, [pc, #616]	; (403a64 <_dtoa_r+0x594>)
  4037fa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4037fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403802:	f001 fee5 	bl	4055d0 <__aeabi_ddiv>
  403806:	f005 050f 	and.w	r5, r5, #15
  40380a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40380e:	2403      	movs	r4, #3
  403810:	e000      	b.n	403814 <_dtoa_r+0x344>
  403812:	2402      	movs	r4, #2
  403814:	4e93      	ldr	r6, [pc, #588]	; (403a64 <_dtoa_r+0x594>)
  403816:	b16d      	cbz	r5, 403834 <_dtoa_r+0x364>
  403818:	07e9      	lsls	r1, r5, #31
  40381a:	d508      	bpl.n	40382e <_dtoa_r+0x35e>
  40381c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403820:	e9d6 2300 	ldrd	r2, r3, [r6]
  403824:	f001 fdaa 	bl	40537c <__aeabi_dmul>
  403828:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40382c:	3401      	adds	r4, #1
  40382e:	106d      	asrs	r5, r5, #1
  403830:	3608      	adds	r6, #8
  403832:	e7f0      	b.n	403816 <_dtoa_r+0x346>
  403834:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  403838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40383c:	f001 fec8 	bl	4055d0 <__aeabi_ddiv>
  403840:	e020      	b.n	403884 <_dtoa_r+0x3b4>
  403842:	f1cb 0500 	rsb	r5, fp, #0
  403846:	b305      	cbz	r5, 40388a <_dtoa_r+0x3ba>
  403848:	4b85      	ldr	r3, [pc, #532]	; (403a60 <_dtoa_r+0x590>)
  40384a:	4e86      	ldr	r6, [pc, #536]	; (403a64 <_dtoa_r+0x594>)
  40384c:	f005 020f 	and.w	r2, r5, #15
  403850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403854:	e9d3 2300 	ldrd	r2, r3, [r3]
  403858:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40385c:	f001 fd8e 	bl	40537c <__aeabi_dmul>
  403860:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403864:	112d      	asrs	r5, r5, #4
  403866:	2300      	movs	r3, #0
  403868:	2402      	movs	r4, #2
  40386a:	b155      	cbz	r5, 403882 <_dtoa_r+0x3b2>
  40386c:	07ea      	lsls	r2, r5, #31
  40386e:	d505      	bpl.n	40387c <_dtoa_r+0x3ac>
  403870:	e9d6 2300 	ldrd	r2, r3, [r6]
  403874:	f001 fd82 	bl	40537c <__aeabi_dmul>
  403878:	3401      	adds	r4, #1
  40387a:	2301      	movs	r3, #1
  40387c:	106d      	asrs	r5, r5, #1
  40387e:	3608      	adds	r6, #8
  403880:	e7f3      	b.n	40386a <_dtoa_r+0x39a>
  403882:	b11b      	cbz	r3, 40388c <_dtoa_r+0x3bc>
  403884:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403888:	e000      	b.n	40388c <_dtoa_r+0x3bc>
  40388a:	2402      	movs	r4, #2
  40388c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40388e:	b1e3      	cbz	r3, 4038ca <_dtoa_r+0x3fa>
  403890:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  403894:	2200      	movs	r2, #0
  403896:	4b74      	ldr	r3, [pc, #464]	; (403a68 <_dtoa_r+0x598>)
  403898:	4628      	mov	r0, r5
  40389a:	4631      	mov	r1, r6
  40389c:	f001 ffe0 	bl	405860 <__aeabi_dcmplt>
  4038a0:	b198      	cbz	r0, 4038ca <_dtoa_r+0x3fa>
  4038a2:	9b05      	ldr	r3, [sp, #20]
  4038a4:	b18b      	cbz	r3, 4038ca <_dtoa_r+0x3fa>
  4038a6:	f1b9 0f00 	cmp.w	r9, #0
  4038aa:	f340 80e7 	ble.w	403a7c <_dtoa_r+0x5ac>
  4038ae:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  4038b2:	9308      	str	r3, [sp, #32]
  4038b4:	4631      	mov	r1, r6
  4038b6:	2200      	movs	r2, #0
  4038b8:	4b6c      	ldr	r3, [pc, #432]	; (403a6c <_dtoa_r+0x59c>)
  4038ba:	4628      	mov	r0, r5
  4038bc:	f001 fd5e 	bl	40537c <__aeabi_dmul>
  4038c0:	3401      	adds	r4, #1
  4038c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4038c6:	464e      	mov	r6, r9
  4038c8:	e002      	b.n	4038d0 <_dtoa_r+0x400>
  4038ca:	9e05      	ldr	r6, [sp, #20]
  4038cc:	f8cd b020 	str.w	fp, [sp, #32]
  4038d0:	4620      	mov	r0, r4
  4038d2:	f001 fced 	bl	4052b0 <__aeabi_i2d>
  4038d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4038da:	f001 fd4f 	bl	40537c <__aeabi_dmul>
  4038de:	4b64      	ldr	r3, [pc, #400]	; (403a70 <_dtoa_r+0x5a0>)
  4038e0:	2200      	movs	r2, #0
  4038e2:	f001 fb99 	bl	405018 <__adddf3>
  4038e6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  4038ea:	4604      	mov	r4, r0
  4038ec:	930c      	str	r3, [sp, #48]	; 0x30
  4038ee:	461d      	mov	r5, r3
  4038f0:	b9d6      	cbnz	r6, 403928 <_dtoa_r+0x458>
  4038f2:	2200      	movs	r2, #0
  4038f4:	4b5f      	ldr	r3, [pc, #380]	; (403a74 <_dtoa_r+0x5a4>)
  4038f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4038fa:	f001 fb8b 	bl	405014 <__aeabi_dsub>
  4038fe:	4622      	mov	r2, r4
  403900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403902:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403906:	f001 ffc9 	bl	40589c <__aeabi_dcmpgt>
  40390a:	2800      	cmp	r0, #0
  40390c:	f040 8240 	bne.w	403d90 <_dtoa_r+0x8c0>
  403910:	990c      	ldr	r1, [sp, #48]	; 0x30
  403912:	4622      	mov	r2, r4
  403914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  403918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40391c:	f001 ffa0 	bl	405860 <__aeabi_dcmplt>
  403920:	2800      	cmp	r0, #0
  403922:	f040 822c 	bne.w	403d7e <_dtoa_r+0x8ae>
  403926:	e0a9      	b.n	403a7c <_dtoa_r+0x5ac>
  403928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40392a:	4b4d      	ldr	r3, [pc, #308]	; (403a60 <_dtoa_r+0x590>)
  40392c:	1e71      	subs	r1, r6, #1
  40392e:	2a00      	cmp	r2, #0
  403930:	d049      	beq.n	4039c6 <_dtoa_r+0x4f6>
  403932:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403936:	e9d3 2300 	ldrd	r2, r3, [r3]
  40393a:	2000      	movs	r0, #0
  40393c:	494e      	ldr	r1, [pc, #312]	; (403a78 <_dtoa_r+0x5a8>)
  40393e:	f001 fe47 	bl	4055d0 <__aeabi_ddiv>
  403942:	4622      	mov	r2, r4
  403944:	462b      	mov	r3, r5
  403946:	f001 fb65 	bl	405014 <__aeabi_dsub>
  40394a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40394e:	9c06      	ldr	r4, [sp, #24]
  403950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403954:	f001 ffc2 	bl	4058dc <__aeabi_d2iz>
  403958:	4605      	mov	r5, r0
  40395a:	f001 fca9 	bl	4052b0 <__aeabi_i2d>
  40395e:	4602      	mov	r2, r0
  403960:	460b      	mov	r3, r1
  403962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403966:	f001 fb55 	bl	405014 <__aeabi_dsub>
  40396a:	3530      	adds	r5, #48	; 0x30
  40396c:	f804 5b01 	strb.w	r5, [r4], #1
  403970:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403974:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403978:	f001 ff72 	bl	405860 <__aeabi_dcmplt>
  40397c:	2800      	cmp	r0, #0
  40397e:	f040 8320 	bne.w	403fc2 <_dtoa_r+0xaf2>
  403982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403986:	2000      	movs	r0, #0
  403988:	4937      	ldr	r1, [pc, #220]	; (403a68 <_dtoa_r+0x598>)
  40398a:	f001 fb43 	bl	405014 <__aeabi_dsub>
  40398e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403992:	f001 ff65 	bl	405860 <__aeabi_dcmplt>
  403996:	2800      	cmp	r0, #0
  403998:	f040 80d2 	bne.w	403b40 <_dtoa_r+0x670>
  40399c:	9b06      	ldr	r3, [sp, #24]
  40399e:	1ae3      	subs	r3, r4, r3
  4039a0:	42b3      	cmp	r3, r6
  4039a2:	da6b      	bge.n	403a7c <_dtoa_r+0x5ac>
  4039a4:	2200      	movs	r2, #0
  4039a6:	4b31      	ldr	r3, [pc, #196]	; (403a6c <_dtoa_r+0x59c>)
  4039a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4039ac:	f001 fce6 	bl	40537c <__aeabi_dmul>
  4039b0:	2200      	movs	r2, #0
  4039b2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4039b6:	4b2d      	ldr	r3, [pc, #180]	; (403a6c <_dtoa_r+0x59c>)
  4039b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4039bc:	f001 fcde 	bl	40537c <__aeabi_dmul>
  4039c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4039c4:	e7c4      	b.n	403950 <_dtoa_r+0x480>
  4039c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4039ca:	4622      	mov	r2, r4
  4039cc:	462b      	mov	r3, r5
  4039ce:	e9d1 0100 	ldrd	r0, r1, [r1]
  4039d2:	f001 fcd3 	bl	40537c <__aeabi_dmul>
  4039d6:	9b06      	ldr	r3, [sp, #24]
  4039d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4039dc:	199c      	adds	r4, r3, r6
  4039de:	461d      	mov	r5, r3
  4039e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4039e4:	f001 ff7a 	bl	4058dc <__aeabi_d2iz>
  4039e8:	4606      	mov	r6, r0
  4039ea:	f001 fc61 	bl	4052b0 <__aeabi_i2d>
  4039ee:	3630      	adds	r6, #48	; 0x30
  4039f0:	4602      	mov	r2, r0
  4039f2:	460b      	mov	r3, r1
  4039f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4039f8:	f001 fb0c 	bl	405014 <__aeabi_dsub>
  4039fc:	f805 6b01 	strb.w	r6, [r5], #1
  403a00:	42ac      	cmp	r4, r5
  403a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403a06:	f04f 0200 	mov.w	r2, #0
  403a0a:	d123      	bne.n	403a54 <_dtoa_r+0x584>
  403a0c:	4b1a      	ldr	r3, [pc, #104]	; (403a78 <_dtoa_r+0x5a8>)
  403a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403a12:	f001 fb01 	bl	405018 <__adddf3>
  403a16:	4602      	mov	r2, r0
  403a18:	460b      	mov	r3, r1
  403a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403a1e:	f001 ff3d 	bl	40589c <__aeabi_dcmpgt>
  403a22:	2800      	cmp	r0, #0
  403a24:	f040 808c 	bne.w	403b40 <_dtoa_r+0x670>
  403a28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403a2c:	2000      	movs	r0, #0
  403a2e:	4912      	ldr	r1, [pc, #72]	; (403a78 <_dtoa_r+0x5a8>)
  403a30:	f001 faf0 	bl	405014 <__aeabi_dsub>
  403a34:	4602      	mov	r2, r0
  403a36:	460b      	mov	r3, r1
  403a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403a3c:	f001 ff10 	bl	405860 <__aeabi_dcmplt>
  403a40:	b1e0      	cbz	r0, 403a7c <_dtoa_r+0x5ac>
  403a42:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403a46:	2b30      	cmp	r3, #48	; 0x30
  403a48:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403a4c:	f040 82b9 	bne.w	403fc2 <_dtoa_r+0xaf2>
  403a50:	4614      	mov	r4, r2
  403a52:	e7f6      	b.n	403a42 <_dtoa_r+0x572>
  403a54:	4b05      	ldr	r3, [pc, #20]	; (403a6c <_dtoa_r+0x59c>)
  403a56:	f001 fc91 	bl	40537c <__aeabi_dmul>
  403a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403a5e:	e7bf      	b.n	4039e0 <_dtoa_r+0x510>
  403a60:	00406308 	.word	0x00406308
  403a64:	004063d0 	.word	0x004063d0
  403a68:	3ff00000 	.word	0x3ff00000
  403a6c:	40240000 	.word	0x40240000
  403a70:	401c0000 	.word	0x401c0000
  403a74:	40140000 	.word	0x40140000
  403a78:	3fe00000 	.word	0x3fe00000
  403a7c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  403a80:	e9cd 3402 	strd	r3, r4, [sp, #8]
  403a84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403a86:	2b00      	cmp	r3, #0
  403a88:	db7d      	blt.n	403b86 <_dtoa_r+0x6b6>
  403a8a:	f1bb 0f0e 	cmp.w	fp, #14
  403a8e:	dc7a      	bgt.n	403b86 <_dtoa_r+0x6b6>
  403a90:	4bab      	ldr	r3, [pc, #684]	; (403d40 <_dtoa_r+0x870>)
  403a92:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403a96:	e9d3 6700 	ldrd	r6, r7, [r3]
  403a9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403a9c:	2b00      	cmp	r3, #0
  403a9e:	da14      	bge.n	403aca <_dtoa_r+0x5fa>
  403aa0:	9b05      	ldr	r3, [sp, #20]
  403aa2:	2b00      	cmp	r3, #0
  403aa4:	dc11      	bgt.n	403aca <_dtoa_r+0x5fa>
  403aa6:	f040 816c 	bne.w	403d82 <_dtoa_r+0x8b2>
  403aaa:	2200      	movs	r2, #0
  403aac:	4ba5      	ldr	r3, [pc, #660]	; (403d44 <_dtoa_r+0x874>)
  403aae:	4630      	mov	r0, r6
  403ab0:	4639      	mov	r1, r7
  403ab2:	f001 fc63 	bl	40537c <__aeabi_dmul>
  403ab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403aba:	f001 fee5 	bl	405888 <__aeabi_dcmpge>
  403abe:	9d05      	ldr	r5, [sp, #20]
  403ac0:	462e      	mov	r6, r5
  403ac2:	2800      	cmp	r0, #0
  403ac4:	f040 815f 	bne.w	403d86 <_dtoa_r+0x8b6>
  403ac8:	e165      	b.n	403d96 <_dtoa_r+0x8c6>
  403aca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  403ace:	9c06      	ldr	r4, [sp, #24]
  403ad0:	4632      	mov	r2, r6
  403ad2:	463b      	mov	r3, r7
  403ad4:	4640      	mov	r0, r8
  403ad6:	4649      	mov	r1, r9
  403ad8:	f001 fd7a 	bl	4055d0 <__aeabi_ddiv>
  403adc:	f001 fefe 	bl	4058dc <__aeabi_d2iz>
  403ae0:	4605      	mov	r5, r0
  403ae2:	f001 fbe5 	bl	4052b0 <__aeabi_i2d>
  403ae6:	4632      	mov	r2, r6
  403ae8:	463b      	mov	r3, r7
  403aea:	f001 fc47 	bl	40537c <__aeabi_dmul>
  403aee:	460b      	mov	r3, r1
  403af0:	4602      	mov	r2, r0
  403af2:	4649      	mov	r1, r9
  403af4:	4640      	mov	r0, r8
  403af6:	f001 fa8d 	bl	405014 <__aeabi_dsub>
  403afa:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  403afe:	9b06      	ldr	r3, [sp, #24]
  403b00:	f804 eb01 	strb.w	lr, [r4], #1
  403b04:	ebc3 0e04 	rsb	lr, r3, r4
  403b08:	9b05      	ldr	r3, [sp, #20]
  403b0a:	4573      	cmp	r3, lr
  403b0c:	d12e      	bne.n	403b6c <_dtoa_r+0x69c>
  403b0e:	4602      	mov	r2, r0
  403b10:	460b      	mov	r3, r1
  403b12:	f001 fa81 	bl	405018 <__adddf3>
  403b16:	4680      	mov	r8, r0
  403b18:	4689      	mov	r9, r1
  403b1a:	4602      	mov	r2, r0
  403b1c:	460b      	mov	r3, r1
  403b1e:	4630      	mov	r0, r6
  403b20:	4639      	mov	r1, r7
  403b22:	f001 fe9d 	bl	405860 <__aeabi_dcmplt>
  403b26:	b978      	cbnz	r0, 403b48 <_dtoa_r+0x678>
  403b28:	4642      	mov	r2, r8
  403b2a:	464b      	mov	r3, r9
  403b2c:	4630      	mov	r0, r6
  403b2e:	4639      	mov	r1, r7
  403b30:	f001 fe8c 	bl	40584c <__aeabi_dcmpeq>
  403b34:	2800      	cmp	r0, #0
  403b36:	f000 8246 	beq.w	403fc6 <_dtoa_r+0xaf6>
  403b3a:	07eb      	lsls	r3, r5, #31
  403b3c:	d404      	bmi.n	403b48 <_dtoa_r+0x678>
  403b3e:	e242      	b.n	403fc6 <_dtoa_r+0xaf6>
  403b40:	f8dd b020 	ldr.w	fp, [sp, #32]
  403b44:	e000      	b.n	403b48 <_dtoa_r+0x678>
  403b46:	461c      	mov	r4, r3
  403b48:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  403b4c:	2a39      	cmp	r2, #57	; 0x39
  403b4e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  403b52:	d107      	bne.n	403b64 <_dtoa_r+0x694>
  403b54:	9a06      	ldr	r2, [sp, #24]
  403b56:	429a      	cmp	r2, r3
  403b58:	d1f5      	bne.n	403b46 <_dtoa_r+0x676>
  403b5a:	9906      	ldr	r1, [sp, #24]
  403b5c:	2230      	movs	r2, #48	; 0x30
  403b5e:	f10b 0b01 	add.w	fp, fp, #1
  403b62:	700a      	strb	r2, [r1, #0]
  403b64:	781a      	ldrb	r2, [r3, #0]
  403b66:	3201      	adds	r2, #1
  403b68:	701a      	strb	r2, [r3, #0]
  403b6a:	e22c      	b.n	403fc6 <_dtoa_r+0xaf6>
  403b6c:	2200      	movs	r2, #0
  403b6e:	4b76      	ldr	r3, [pc, #472]	; (403d48 <_dtoa_r+0x878>)
  403b70:	f001 fc04 	bl	40537c <__aeabi_dmul>
  403b74:	2200      	movs	r2, #0
  403b76:	2300      	movs	r3, #0
  403b78:	4680      	mov	r8, r0
  403b7a:	4689      	mov	r9, r1
  403b7c:	f001 fe66 	bl	40584c <__aeabi_dcmpeq>
  403b80:	2800      	cmp	r0, #0
  403b82:	d0a5      	beq.n	403ad0 <_dtoa_r+0x600>
  403b84:	e21f      	b.n	403fc6 <_dtoa_r+0xaf6>
  403b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403b88:	2a00      	cmp	r2, #0
  403b8a:	d02b      	beq.n	403be4 <_dtoa_r+0x714>
  403b8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403b8e:	2a01      	cmp	r2, #1
  403b90:	dc0a      	bgt.n	403ba8 <_dtoa_r+0x6d8>
  403b92:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b94:	b112      	cbz	r2, 403b9c <_dtoa_r+0x6cc>
  403b96:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403b9a:	e002      	b.n	403ba2 <_dtoa_r+0x6d2>
  403b9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403b9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403ba2:	463d      	mov	r5, r7
  403ba4:	4644      	mov	r4, r8
  403ba6:	e013      	b.n	403bd0 <_dtoa_r+0x700>
  403ba8:	9b05      	ldr	r3, [sp, #20]
  403baa:	1e5d      	subs	r5, r3, #1
  403bac:	42af      	cmp	r7, r5
  403bae:	bfbf      	itttt	lt
  403bb0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  403bb2:	1bea      	sublt	r2, r5, r7
  403bb4:	189b      	addlt	r3, r3, r2
  403bb6:	930b      	strlt	r3, [sp, #44]	; 0x2c
  403bb8:	9b05      	ldr	r3, [sp, #20]
  403bba:	bfb6      	itet	lt
  403bbc:	462f      	movlt	r7, r5
  403bbe:	1b7d      	subge	r5, r7, r5
  403bc0:	2500      	movlt	r5, #0
  403bc2:	2b00      	cmp	r3, #0
  403bc4:	bfab      	itete	ge
  403bc6:	9b05      	ldrge	r3, [sp, #20]
  403bc8:	ebc3 0408 	rsblt	r4, r3, r8
  403bcc:	4644      	movge	r4, r8
  403bce:	2300      	movlt	r3, #0
  403bd0:	9a07      	ldr	r2, [sp, #28]
  403bd2:	2101      	movs	r1, #1
  403bd4:	441a      	add	r2, r3
  403bd6:	4650      	mov	r0, sl
  403bd8:	4498      	add	r8, r3
  403bda:	9207      	str	r2, [sp, #28]
  403bdc:	f000 fd37 	bl	40464e <__i2b>
  403be0:	4606      	mov	r6, r0
  403be2:	e002      	b.n	403bea <_dtoa_r+0x71a>
  403be4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403be6:	463d      	mov	r5, r7
  403be8:	4644      	mov	r4, r8
  403bea:	b15c      	cbz	r4, 403c04 <_dtoa_r+0x734>
  403bec:	9b07      	ldr	r3, [sp, #28]
  403bee:	2b00      	cmp	r3, #0
  403bf0:	dd08      	ble.n	403c04 <_dtoa_r+0x734>
  403bf2:	42a3      	cmp	r3, r4
  403bf4:	9a07      	ldr	r2, [sp, #28]
  403bf6:	bfa8      	it	ge
  403bf8:	4623      	movge	r3, r4
  403bfa:	ebc3 0808 	rsb	r8, r3, r8
  403bfe:	1ae4      	subs	r4, r4, r3
  403c00:	1ad3      	subs	r3, r2, r3
  403c02:	9307      	str	r3, [sp, #28]
  403c04:	2f00      	cmp	r7, #0
  403c06:	dd1d      	ble.n	403c44 <_dtoa_r+0x774>
  403c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c0a:	b1ab      	cbz	r3, 403c38 <_dtoa_r+0x768>
  403c0c:	b18d      	cbz	r5, 403c32 <_dtoa_r+0x762>
  403c0e:	4631      	mov	r1, r6
  403c10:	462a      	mov	r2, r5
  403c12:	4650      	mov	r0, sl
  403c14:	f000 fdb6 	bl	404784 <__pow5mult>
  403c18:	9a04      	ldr	r2, [sp, #16]
  403c1a:	4601      	mov	r1, r0
  403c1c:	4606      	mov	r6, r0
  403c1e:	4650      	mov	r0, sl
  403c20:	f000 fd1e 	bl	404660 <__multiply>
  403c24:	9904      	ldr	r1, [sp, #16]
  403c26:	9008      	str	r0, [sp, #32]
  403c28:	4650      	mov	r0, sl
  403c2a:	f000 fc71 	bl	404510 <_Bfree>
  403c2e:	9b08      	ldr	r3, [sp, #32]
  403c30:	9304      	str	r3, [sp, #16]
  403c32:	1b7a      	subs	r2, r7, r5
  403c34:	d006      	beq.n	403c44 <_dtoa_r+0x774>
  403c36:	e000      	b.n	403c3a <_dtoa_r+0x76a>
  403c38:	463a      	mov	r2, r7
  403c3a:	9904      	ldr	r1, [sp, #16]
  403c3c:	4650      	mov	r0, sl
  403c3e:	f000 fda1 	bl	404784 <__pow5mult>
  403c42:	9004      	str	r0, [sp, #16]
  403c44:	2101      	movs	r1, #1
  403c46:	4650      	mov	r0, sl
  403c48:	f000 fd01 	bl	40464e <__i2b>
  403c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c4e:	4605      	mov	r5, r0
  403c50:	b35b      	cbz	r3, 403caa <_dtoa_r+0x7da>
  403c52:	461a      	mov	r2, r3
  403c54:	4601      	mov	r1, r0
  403c56:	4650      	mov	r0, sl
  403c58:	f000 fd94 	bl	404784 <__pow5mult>
  403c5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403c5e:	2b01      	cmp	r3, #1
  403c60:	4605      	mov	r5, r0
  403c62:	dc18      	bgt.n	403c96 <_dtoa_r+0x7c6>
  403c64:	9b02      	ldr	r3, [sp, #8]
  403c66:	b983      	cbnz	r3, 403c8a <_dtoa_r+0x7ba>
  403c68:	9b03      	ldr	r3, [sp, #12]
  403c6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403c6e:	b973      	cbnz	r3, 403c8e <_dtoa_r+0x7be>
  403c70:	9b03      	ldr	r3, [sp, #12]
  403c72:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  403c76:	0d3f      	lsrs	r7, r7, #20
  403c78:	053f      	lsls	r7, r7, #20
  403c7a:	b14f      	cbz	r7, 403c90 <_dtoa_r+0x7c0>
  403c7c:	9b07      	ldr	r3, [sp, #28]
  403c7e:	3301      	adds	r3, #1
  403c80:	f108 0801 	add.w	r8, r8, #1
  403c84:	9307      	str	r3, [sp, #28]
  403c86:	2701      	movs	r7, #1
  403c88:	e002      	b.n	403c90 <_dtoa_r+0x7c0>
  403c8a:	2700      	movs	r7, #0
  403c8c:	e000      	b.n	403c90 <_dtoa_r+0x7c0>
  403c8e:	9f02      	ldr	r7, [sp, #8]
  403c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c92:	b173      	cbz	r3, 403cb2 <_dtoa_r+0x7e2>
  403c94:	e000      	b.n	403c98 <_dtoa_r+0x7c8>
  403c96:	2700      	movs	r7, #0
  403c98:	692b      	ldr	r3, [r5, #16]
  403c9a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  403c9e:	6918      	ldr	r0, [r3, #16]
  403ca0:	f000 fc88 	bl	4045b4 <__hi0bits>
  403ca4:	f1c0 0020 	rsb	r0, r0, #32
  403ca8:	e004      	b.n	403cb4 <_dtoa_r+0x7e4>
  403caa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403cac:	2b01      	cmp	r3, #1
  403cae:	ddd9      	ble.n	403c64 <_dtoa_r+0x794>
  403cb0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  403cb2:	2001      	movs	r0, #1
  403cb4:	9b07      	ldr	r3, [sp, #28]
  403cb6:	4418      	add	r0, r3
  403cb8:	f010 001f 	ands.w	r0, r0, #31
  403cbc:	d008      	beq.n	403cd0 <_dtoa_r+0x800>
  403cbe:	f1c0 0320 	rsb	r3, r0, #32
  403cc2:	2b04      	cmp	r3, #4
  403cc4:	dd02      	ble.n	403ccc <_dtoa_r+0x7fc>
  403cc6:	f1c0 001c 	rsb	r0, r0, #28
  403cca:	e002      	b.n	403cd2 <_dtoa_r+0x802>
  403ccc:	d006      	beq.n	403cdc <_dtoa_r+0x80c>
  403cce:	4618      	mov	r0, r3
  403cd0:	301c      	adds	r0, #28
  403cd2:	9b07      	ldr	r3, [sp, #28]
  403cd4:	4403      	add	r3, r0
  403cd6:	4480      	add	r8, r0
  403cd8:	4404      	add	r4, r0
  403cda:	9307      	str	r3, [sp, #28]
  403cdc:	f1b8 0f00 	cmp.w	r8, #0
  403ce0:	dd05      	ble.n	403cee <_dtoa_r+0x81e>
  403ce2:	4642      	mov	r2, r8
  403ce4:	9904      	ldr	r1, [sp, #16]
  403ce6:	4650      	mov	r0, sl
  403ce8:	f000 fd9a 	bl	404820 <__lshift>
  403cec:	9004      	str	r0, [sp, #16]
  403cee:	9b07      	ldr	r3, [sp, #28]
  403cf0:	2b00      	cmp	r3, #0
  403cf2:	dd05      	ble.n	403d00 <_dtoa_r+0x830>
  403cf4:	4629      	mov	r1, r5
  403cf6:	461a      	mov	r2, r3
  403cf8:	4650      	mov	r0, sl
  403cfa:	f000 fd91 	bl	404820 <__lshift>
  403cfe:	4605      	mov	r5, r0
  403d00:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403d02:	b31b      	cbz	r3, 403d4c <_dtoa_r+0x87c>
  403d04:	4629      	mov	r1, r5
  403d06:	9804      	ldr	r0, [sp, #16]
  403d08:	f000 fddb 	bl	4048c2 <__mcmp>
  403d0c:	2800      	cmp	r0, #0
  403d0e:	da1d      	bge.n	403d4c <_dtoa_r+0x87c>
  403d10:	2300      	movs	r3, #0
  403d12:	220a      	movs	r2, #10
  403d14:	9904      	ldr	r1, [sp, #16]
  403d16:	4650      	mov	r0, sl
  403d18:	f000 fc11 	bl	40453e <__multadd>
  403d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d1e:	9004      	str	r0, [sp, #16]
  403d20:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403d24:	2b00      	cmp	r3, #0
  403d26:	f000 8160 	beq.w	403fea <_dtoa_r+0xb1a>
  403d2a:	4631      	mov	r1, r6
  403d2c:	2300      	movs	r3, #0
  403d2e:	220a      	movs	r2, #10
  403d30:	4650      	mov	r0, sl
  403d32:	f000 fc04 	bl	40453e <__multadd>
  403d36:	f1b9 0f00 	cmp.w	r9, #0
  403d3a:	4606      	mov	r6, r0
  403d3c:	dc3e      	bgt.n	403dbc <_dtoa_r+0x8ec>
  403d3e:	e03a      	b.n	403db6 <_dtoa_r+0x8e6>
  403d40:	00406308 	.word	0x00406308
  403d44:	40140000 	.word	0x40140000
  403d48:	40240000 	.word	0x40240000
  403d4c:	9b05      	ldr	r3, [sp, #20]
  403d4e:	2b00      	cmp	r3, #0
  403d50:	dc2b      	bgt.n	403daa <_dtoa_r+0x8da>
  403d52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403d54:	2b02      	cmp	r3, #2
  403d56:	dd28      	ble.n	403daa <_dtoa_r+0x8da>
  403d58:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403d5c:	f1b9 0f00 	cmp.w	r9, #0
  403d60:	d111      	bne.n	403d86 <_dtoa_r+0x8b6>
  403d62:	4629      	mov	r1, r5
  403d64:	464b      	mov	r3, r9
  403d66:	2205      	movs	r2, #5
  403d68:	4650      	mov	r0, sl
  403d6a:	f000 fbe8 	bl	40453e <__multadd>
  403d6e:	4601      	mov	r1, r0
  403d70:	4605      	mov	r5, r0
  403d72:	9804      	ldr	r0, [sp, #16]
  403d74:	f000 fda5 	bl	4048c2 <__mcmp>
  403d78:	2800      	cmp	r0, #0
  403d7a:	dc0c      	bgt.n	403d96 <_dtoa_r+0x8c6>
  403d7c:	e003      	b.n	403d86 <_dtoa_r+0x8b6>
  403d7e:	4635      	mov	r5, r6
  403d80:	e000      	b.n	403d84 <_dtoa_r+0x8b4>
  403d82:	2500      	movs	r5, #0
  403d84:	462e      	mov	r6, r5
  403d86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403d88:	9c06      	ldr	r4, [sp, #24]
  403d8a:	ea6f 0b03 	mvn.w	fp, r3
  403d8e:	e009      	b.n	403da4 <_dtoa_r+0x8d4>
  403d90:	f8dd b020 	ldr.w	fp, [sp, #32]
  403d94:	4635      	mov	r5, r6
  403d96:	9b06      	ldr	r3, [sp, #24]
  403d98:	9a06      	ldr	r2, [sp, #24]
  403d9a:	1c5c      	adds	r4, r3, #1
  403d9c:	2331      	movs	r3, #49	; 0x31
  403d9e:	7013      	strb	r3, [r2, #0]
  403da0:	f10b 0b01 	add.w	fp, fp, #1
  403da4:	9605      	str	r6, [sp, #20]
  403da6:	2600      	movs	r6, #0
  403da8:	e0f9      	b.n	403f9e <_dtoa_r+0xace>
  403daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dac:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403db0:	b923      	cbnz	r3, 403dbc <_dtoa_r+0x8ec>
  403db2:	9c06      	ldr	r4, [sp, #24]
  403db4:	e0b2      	b.n	403f1c <_dtoa_r+0xa4c>
  403db6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403db8:	2b02      	cmp	r3, #2
  403dba:	dccf      	bgt.n	403d5c <_dtoa_r+0x88c>
  403dbc:	2c00      	cmp	r4, #0
  403dbe:	dd05      	ble.n	403dcc <_dtoa_r+0x8fc>
  403dc0:	4631      	mov	r1, r6
  403dc2:	4622      	mov	r2, r4
  403dc4:	4650      	mov	r0, sl
  403dc6:	f000 fd2b 	bl	404820 <__lshift>
  403dca:	4606      	mov	r6, r0
  403dcc:	b19f      	cbz	r7, 403df6 <_dtoa_r+0x926>
  403dce:	6871      	ldr	r1, [r6, #4]
  403dd0:	4650      	mov	r0, sl
  403dd2:	f000 fb68 	bl	4044a6 <_Balloc>
  403dd6:	6932      	ldr	r2, [r6, #16]
  403dd8:	3202      	adds	r2, #2
  403dda:	4604      	mov	r4, r0
  403ddc:	0092      	lsls	r2, r2, #2
  403dde:	f106 010c 	add.w	r1, r6, #12
  403de2:	300c      	adds	r0, #12
  403de4:	f000 fb54 	bl	404490 <memcpy>
  403de8:	2201      	movs	r2, #1
  403dea:	4621      	mov	r1, r4
  403dec:	4650      	mov	r0, sl
  403dee:	f000 fd17 	bl	404820 <__lshift>
  403df2:	9005      	str	r0, [sp, #20]
  403df4:	e000      	b.n	403df8 <_dtoa_r+0x928>
  403df6:	9605      	str	r6, [sp, #20]
  403df8:	9b02      	ldr	r3, [sp, #8]
  403dfa:	9f06      	ldr	r7, [sp, #24]
  403dfc:	f003 0301 	and.w	r3, r3, #1
  403e00:	9307      	str	r3, [sp, #28]
  403e02:	4629      	mov	r1, r5
  403e04:	9804      	ldr	r0, [sp, #16]
  403e06:	f7ff fad1 	bl	4033ac <quorem>
  403e0a:	4631      	mov	r1, r6
  403e0c:	4604      	mov	r4, r0
  403e0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403e12:	9804      	ldr	r0, [sp, #16]
  403e14:	f000 fd55 	bl	4048c2 <__mcmp>
  403e18:	9a05      	ldr	r2, [sp, #20]
  403e1a:	9002      	str	r0, [sp, #8]
  403e1c:	4629      	mov	r1, r5
  403e1e:	4650      	mov	r0, sl
  403e20:	f000 fd6b 	bl	4048fa <__mdiff>
  403e24:	68c3      	ldr	r3, [r0, #12]
  403e26:	4602      	mov	r2, r0
  403e28:	b93b      	cbnz	r3, 403e3a <_dtoa_r+0x96a>
  403e2a:	4601      	mov	r1, r0
  403e2c:	900a      	str	r0, [sp, #40]	; 0x28
  403e2e:	9804      	ldr	r0, [sp, #16]
  403e30:	f000 fd47 	bl	4048c2 <__mcmp>
  403e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403e36:	4603      	mov	r3, r0
  403e38:	e000      	b.n	403e3c <_dtoa_r+0x96c>
  403e3a:	2301      	movs	r3, #1
  403e3c:	4611      	mov	r1, r2
  403e3e:	4650      	mov	r0, sl
  403e40:	930a      	str	r3, [sp, #40]	; 0x28
  403e42:	f000 fb65 	bl	404510 <_Bfree>
  403e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e48:	b953      	cbnz	r3, 403e60 <_dtoa_r+0x990>
  403e4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403e4c:	b942      	cbnz	r2, 403e60 <_dtoa_r+0x990>
  403e4e:	9a07      	ldr	r2, [sp, #28]
  403e50:	b932      	cbnz	r2, 403e60 <_dtoa_r+0x990>
  403e52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403e56:	d02a      	beq.n	403eae <_dtoa_r+0x9de>
  403e58:	9b02      	ldr	r3, [sp, #8]
  403e5a:	2b00      	cmp	r3, #0
  403e5c:	dc1c      	bgt.n	403e98 <_dtoa_r+0x9c8>
  403e5e:	e01d      	b.n	403e9c <_dtoa_r+0x9cc>
  403e60:	9a02      	ldr	r2, [sp, #8]
  403e62:	2a00      	cmp	r2, #0
  403e64:	db04      	blt.n	403e70 <_dtoa_r+0x9a0>
  403e66:	d11b      	bne.n	403ea0 <_dtoa_r+0x9d0>
  403e68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403e6a:	b9ca      	cbnz	r2, 403ea0 <_dtoa_r+0x9d0>
  403e6c:	9a07      	ldr	r2, [sp, #28]
  403e6e:	b9ba      	cbnz	r2, 403ea0 <_dtoa_r+0x9d0>
  403e70:	2b00      	cmp	r3, #0
  403e72:	dd13      	ble.n	403e9c <_dtoa_r+0x9cc>
  403e74:	2201      	movs	r2, #1
  403e76:	9904      	ldr	r1, [sp, #16]
  403e78:	4650      	mov	r0, sl
  403e7a:	f000 fcd1 	bl	404820 <__lshift>
  403e7e:	4629      	mov	r1, r5
  403e80:	9004      	str	r0, [sp, #16]
  403e82:	f000 fd1e 	bl	4048c2 <__mcmp>
  403e86:	2800      	cmp	r0, #0
  403e88:	dc03      	bgt.n	403e92 <_dtoa_r+0x9c2>
  403e8a:	d107      	bne.n	403e9c <_dtoa_r+0x9cc>
  403e8c:	f018 0f01 	tst.w	r8, #1
  403e90:	d004      	beq.n	403e9c <_dtoa_r+0x9cc>
  403e92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403e96:	d00a      	beq.n	403eae <_dtoa_r+0x9de>
  403e98:	f104 0831 	add.w	r8, r4, #49	; 0x31
  403e9c:	1c7c      	adds	r4, r7, #1
  403e9e:	e00c      	b.n	403eba <_dtoa_r+0x9ea>
  403ea0:	2b00      	cmp	r3, #0
  403ea2:	f107 0401 	add.w	r4, r7, #1
  403ea6:	dd0b      	ble.n	403ec0 <_dtoa_r+0x9f0>
  403ea8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403eac:	d103      	bne.n	403eb6 <_dtoa_r+0x9e6>
  403eae:	2339      	movs	r3, #57	; 0x39
  403eb0:	703b      	strb	r3, [r7, #0]
  403eb2:	3701      	adds	r7, #1
  403eb4:	e056      	b.n	403f64 <_dtoa_r+0xa94>
  403eb6:	f108 0801 	add.w	r8, r8, #1
  403eba:	f887 8000 	strb.w	r8, [r7]
  403ebe:	e06e      	b.n	403f9e <_dtoa_r+0xace>
  403ec0:	9b06      	ldr	r3, [sp, #24]
  403ec2:	f804 8c01 	strb.w	r8, [r4, #-1]
  403ec6:	1ae3      	subs	r3, r4, r3
  403ec8:	454b      	cmp	r3, r9
  403eca:	4627      	mov	r7, r4
  403ecc:	d03b      	beq.n	403f46 <_dtoa_r+0xa76>
  403ece:	2300      	movs	r3, #0
  403ed0:	220a      	movs	r2, #10
  403ed2:	9904      	ldr	r1, [sp, #16]
  403ed4:	4650      	mov	r0, sl
  403ed6:	f000 fb32 	bl	40453e <__multadd>
  403eda:	9b05      	ldr	r3, [sp, #20]
  403edc:	9004      	str	r0, [sp, #16]
  403ede:	429e      	cmp	r6, r3
  403ee0:	f04f 020a 	mov.w	r2, #10
  403ee4:	f04f 0300 	mov.w	r3, #0
  403ee8:	4631      	mov	r1, r6
  403eea:	4650      	mov	r0, sl
  403eec:	d104      	bne.n	403ef8 <_dtoa_r+0xa28>
  403eee:	f000 fb26 	bl	40453e <__multadd>
  403ef2:	4606      	mov	r6, r0
  403ef4:	9005      	str	r0, [sp, #20]
  403ef6:	e784      	b.n	403e02 <_dtoa_r+0x932>
  403ef8:	f000 fb21 	bl	40453e <__multadd>
  403efc:	2300      	movs	r3, #0
  403efe:	4606      	mov	r6, r0
  403f00:	220a      	movs	r2, #10
  403f02:	9905      	ldr	r1, [sp, #20]
  403f04:	4650      	mov	r0, sl
  403f06:	f000 fb1a 	bl	40453e <__multadd>
  403f0a:	9005      	str	r0, [sp, #20]
  403f0c:	e779      	b.n	403e02 <_dtoa_r+0x932>
  403f0e:	2300      	movs	r3, #0
  403f10:	220a      	movs	r2, #10
  403f12:	9904      	ldr	r1, [sp, #16]
  403f14:	4650      	mov	r0, sl
  403f16:	f000 fb12 	bl	40453e <__multadd>
  403f1a:	9004      	str	r0, [sp, #16]
  403f1c:	4629      	mov	r1, r5
  403f1e:	9804      	ldr	r0, [sp, #16]
  403f20:	f7ff fa44 	bl	4033ac <quorem>
  403f24:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403f28:	f804 8b01 	strb.w	r8, [r4], #1
  403f2c:	9b06      	ldr	r3, [sp, #24]
  403f2e:	1ae3      	subs	r3, r4, r3
  403f30:	454b      	cmp	r3, r9
  403f32:	dbec      	blt.n	403f0e <_dtoa_r+0xa3e>
  403f34:	9b06      	ldr	r3, [sp, #24]
  403f36:	9605      	str	r6, [sp, #20]
  403f38:	f1b9 0f01 	cmp.w	r9, #1
  403f3c:	bfac      	ite	ge
  403f3e:	444b      	addge	r3, r9
  403f40:	3301      	addlt	r3, #1
  403f42:	461f      	mov	r7, r3
  403f44:	2600      	movs	r6, #0
  403f46:	2201      	movs	r2, #1
  403f48:	9904      	ldr	r1, [sp, #16]
  403f4a:	4650      	mov	r0, sl
  403f4c:	f000 fc68 	bl	404820 <__lshift>
  403f50:	4629      	mov	r1, r5
  403f52:	9004      	str	r0, [sp, #16]
  403f54:	f000 fcb5 	bl	4048c2 <__mcmp>
  403f58:	2800      	cmp	r0, #0
  403f5a:	dc03      	bgt.n	403f64 <_dtoa_r+0xa94>
  403f5c:	d116      	bne.n	403f8c <_dtoa_r+0xabc>
  403f5e:	f018 0f01 	tst.w	r8, #1
  403f62:	d013      	beq.n	403f8c <_dtoa_r+0xabc>
  403f64:	463c      	mov	r4, r7
  403f66:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403f6a:	2b39      	cmp	r3, #57	; 0x39
  403f6c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403f70:	d109      	bne.n	403f86 <_dtoa_r+0xab6>
  403f72:	9b06      	ldr	r3, [sp, #24]
  403f74:	4293      	cmp	r3, r2
  403f76:	d104      	bne.n	403f82 <_dtoa_r+0xab2>
  403f78:	f10b 0b01 	add.w	fp, fp, #1
  403f7c:	2331      	movs	r3, #49	; 0x31
  403f7e:	9a06      	ldr	r2, [sp, #24]
  403f80:	e002      	b.n	403f88 <_dtoa_r+0xab8>
  403f82:	4614      	mov	r4, r2
  403f84:	e7ef      	b.n	403f66 <_dtoa_r+0xa96>
  403f86:	3301      	adds	r3, #1
  403f88:	7013      	strb	r3, [r2, #0]
  403f8a:	e008      	b.n	403f9e <_dtoa_r+0xace>
  403f8c:	463c      	mov	r4, r7
  403f8e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403f92:	2b30      	cmp	r3, #48	; 0x30
  403f94:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403f98:	d101      	bne.n	403f9e <_dtoa_r+0xace>
  403f9a:	4614      	mov	r4, r2
  403f9c:	e7f7      	b.n	403f8e <_dtoa_r+0xabe>
  403f9e:	4629      	mov	r1, r5
  403fa0:	4650      	mov	r0, sl
  403fa2:	f000 fab5 	bl	404510 <_Bfree>
  403fa6:	9b05      	ldr	r3, [sp, #20]
  403fa8:	b16b      	cbz	r3, 403fc6 <_dtoa_r+0xaf6>
  403faa:	b12e      	cbz	r6, 403fb8 <_dtoa_r+0xae8>
  403fac:	429e      	cmp	r6, r3
  403fae:	d003      	beq.n	403fb8 <_dtoa_r+0xae8>
  403fb0:	4631      	mov	r1, r6
  403fb2:	4650      	mov	r0, sl
  403fb4:	f000 faac 	bl	404510 <_Bfree>
  403fb8:	9905      	ldr	r1, [sp, #20]
  403fba:	4650      	mov	r0, sl
  403fbc:	f000 faa8 	bl	404510 <_Bfree>
  403fc0:	e001      	b.n	403fc6 <_dtoa_r+0xaf6>
  403fc2:	f8dd b020 	ldr.w	fp, [sp, #32]
  403fc6:	9904      	ldr	r1, [sp, #16]
  403fc8:	4650      	mov	r0, sl
  403fca:	f000 faa1 	bl	404510 <_Bfree>
  403fce:	2300      	movs	r3, #0
  403fd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403fd2:	7023      	strb	r3, [r4, #0]
  403fd4:	f10b 0301 	add.w	r3, fp, #1
  403fd8:	6013      	str	r3, [r2, #0]
  403fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403fdc:	b11b      	cbz	r3, 403fe6 <_dtoa_r+0xb16>
  403fde:	601c      	str	r4, [r3, #0]
  403fe0:	e001      	b.n	403fe6 <_dtoa_r+0xb16>
  403fe2:	4808      	ldr	r0, [pc, #32]	; (404004 <_dtoa_r+0xb34>)
  403fe4:	e00a      	b.n	403ffc <_dtoa_r+0xb2c>
  403fe6:	9806      	ldr	r0, [sp, #24]
  403fe8:	e008      	b.n	403ffc <_dtoa_r+0xb2c>
  403fea:	f1b9 0f00 	cmp.w	r9, #0
  403fee:	f73f aee0 	bgt.w	403db2 <_dtoa_r+0x8e2>
  403ff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403ff4:	2b02      	cmp	r3, #2
  403ff6:	f77f aedc 	ble.w	403db2 <_dtoa_r+0x8e2>
  403ffa:	e6af      	b.n	403d5c <_dtoa_r+0x88c>
  403ffc:	b015      	add	sp, #84	; 0x54
  403ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404002:	bf00      	nop
  404004:	00406274 	.word	0x00406274

00404008 <__sflush_r>:
  404008:	898a      	ldrh	r2, [r1, #12]
  40400a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40400e:	4605      	mov	r5, r0
  404010:	0710      	lsls	r0, r2, #28
  404012:	460c      	mov	r4, r1
  404014:	d459      	bmi.n	4040ca <__sflush_r+0xc2>
  404016:	684b      	ldr	r3, [r1, #4]
  404018:	2b00      	cmp	r3, #0
  40401a:	dc02      	bgt.n	404022 <__sflush_r+0x1a>
  40401c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40401e:	2b00      	cmp	r3, #0
  404020:	dd17      	ble.n	404052 <__sflush_r+0x4a>
  404022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404024:	b1ae      	cbz	r6, 404052 <__sflush_r+0x4a>
  404026:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  40402a:	2300      	movs	r3, #0
  40402c:	b292      	uxth	r2, r2
  40402e:	682f      	ldr	r7, [r5, #0]
  404030:	602b      	str	r3, [r5, #0]
  404032:	b10a      	cbz	r2, 404038 <__sflush_r+0x30>
  404034:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404036:	e015      	b.n	404064 <__sflush_r+0x5c>
  404038:	6a21      	ldr	r1, [r4, #32]
  40403a:	2301      	movs	r3, #1
  40403c:	4628      	mov	r0, r5
  40403e:	47b0      	blx	r6
  404040:	1c41      	adds	r1, r0, #1
  404042:	d10f      	bne.n	404064 <__sflush_r+0x5c>
  404044:	682b      	ldr	r3, [r5, #0]
  404046:	b16b      	cbz	r3, 404064 <__sflush_r+0x5c>
  404048:	2b1d      	cmp	r3, #29
  40404a:	d001      	beq.n	404050 <__sflush_r+0x48>
  40404c:	2b16      	cmp	r3, #22
  40404e:	d103      	bne.n	404058 <__sflush_r+0x50>
  404050:	602f      	str	r7, [r5, #0]
  404052:	2000      	movs	r0, #0
  404054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404058:	89a3      	ldrh	r3, [r4, #12]
  40405a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40405e:	81a3      	strh	r3, [r4, #12]
  404060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404064:	89a3      	ldrh	r3, [r4, #12]
  404066:	075a      	lsls	r2, r3, #29
  404068:	d505      	bpl.n	404076 <__sflush_r+0x6e>
  40406a:	6863      	ldr	r3, [r4, #4]
  40406c:	1ac0      	subs	r0, r0, r3
  40406e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404070:	b10b      	cbz	r3, 404076 <__sflush_r+0x6e>
  404072:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404074:	1ac0      	subs	r0, r0, r3
  404076:	2300      	movs	r3, #0
  404078:	4602      	mov	r2, r0
  40407a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40407c:	6a21      	ldr	r1, [r4, #32]
  40407e:	4628      	mov	r0, r5
  404080:	47b0      	blx	r6
  404082:	1c43      	adds	r3, r0, #1
  404084:	89a3      	ldrh	r3, [r4, #12]
  404086:	d106      	bne.n	404096 <__sflush_r+0x8e>
  404088:	6829      	ldr	r1, [r5, #0]
  40408a:	291d      	cmp	r1, #29
  40408c:	d83a      	bhi.n	404104 <__sflush_r+0xfc>
  40408e:	4a21      	ldr	r2, [pc, #132]	; (404114 <__sflush_r+0x10c>)
  404090:	40ca      	lsrs	r2, r1
  404092:	07d6      	lsls	r6, r2, #31
  404094:	d536      	bpl.n	404104 <__sflush_r+0xfc>
  404096:	2200      	movs	r2, #0
  404098:	6062      	str	r2, [r4, #4]
  40409a:	04d9      	lsls	r1, r3, #19
  40409c:	6922      	ldr	r2, [r4, #16]
  40409e:	6022      	str	r2, [r4, #0]
  4040a0:	d504      	bpl.n	4040ac <__sflush_r+0xa4>
  4040a2:	1c42      	adds	r2, r0, #1
  4040a4:	d101      	bne.n	4040aa <__sflush_r+0xa2>
  4040a6:	682b      	ldr	r3, [r5, #0]
  4040a8:	b903      	cbnz	r3, 4040ac <__sflush_r+0xa4>
  4040aa:	6560      	str	r0, [r4, #84]	; 0x54
  4040ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4040ae:	602f      	str	r7, [r5, #0]
  4040b0:	2900      	cmp	r1, #0
  4040b2:	d0ce      	beq.n	404052 <__sflush_r+0x4a>
  4040b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4040b8:	4299      	cmp	r1, r3
  4040ba:	d002      	beq.n	4040c2 <__sflush_r+0xba>
  4040bc:	4628      	mov	r0, r5
  4040be:	f000 fcd7 	bl	404a70 <_free_r>
  4040c2:	2000      	movs	r0, #0
  4040c4:	6360      	str	r0, [r4, #52]	; 0x34
  4040c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4040ca:	690f      	ldr	r7, [r1, #16]
  4040cc:	2f00      	cmp	r7, #0
  4040ce:	d0c0      	beq.n	404052 <__sflush_r+0x4a>
  4040d0:	0793      	lsls	r3, r2, #30
  4040d2:	680e      	ldr	r6, [r1, #0]
  4040d4:	bf08      	it	eq
  4040d6:	694b      	ldreq	r3, [r1, #20]
  4040d8:	600f      	str	r7, [r1, #0]
  4040da:	bf18      	it	ne
  4040dc:	2300      	movne	r3, #0
  4040de:	ebc7 0806 	rsb	r8, r7, r6
  4040e2:	608b      	str	r3, [r1, #8]
  4040e4:	e002      	b.n	4040ec <__sflush_r+0xe4>
  4040e6:	4407      	add	r7, r0
  4040e8:	ebc0 0808 	rsb	r8, r0, r8
  4040ec:	f1b8 0f00 	cmp.w	r8, #0
  4040f0:	ddaf      	ble.n	404052 <__sflush_r+0x4a>
  4040f2:	4643      	mov	r3, r8
  4040f4:	463a      	mov	r2, r7
  4040f6:	6a21      	ldr	r1, [r4, #32]
  4040f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4040fa:	4628      	mov	r0, r5
  4040fc:	47b0      	blx	r6
  4040fe:	2800      	cmp	r0, #0
  404100:	dcf1      	bgt.n	4040e6 <__sflush_r+0xde>
  404102:	89a3      	ldrh	r3, [r4, #12]
  404104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404108:	81a3      	strh	r3, [r4, #12]
  40410a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404112:	bf00      	nop
  404114:	20400001 	.word	0x20400001

00404118 <_fflush_r>:
  404118:	b538      	push	{r3, r4, r5, lr}
  40411a:	690b      	ldr	r3, [r1, #16]
  40411c:	4605      	mov	r5, r0
  40411e:	460c      	mov	r4, r1
  404120:	b1db      	cbz	r3, 40415a <_fflush_r+0x42>
  404122:	b118      	cbz	r0, 40412c <_fflush_r+0x14>
  404124:	6983      	ldr	r3, [r0, #24]
  404126:	b90b      	cbnz	r3, 40412c <_fflush_r+0x14>
  404128:	f000 f860 	bl	4041ec <__sinit>
  40412c:	4b0c      	ldr	r3, [pc, #48]	; (404160 <_fflush_r+0x48>)
  40412e:	429c      	cmp	r4, r3
  404130:	d101      	bne.n	404136 <_fflush_r+0x1e>
  404132:	686c      	ldr	r4, [r5, #4]
  404134:	e008      	b.n	404148 <_fflush_r+0x30>
  404136:	4b0b      	ldr	r3, [pc, #44]	; (404164 <_fflush_r+0x4c>)
  404138:	429c      	cmp	r4, r3
  40413a:	d101      	bne.n	404140 <_fflush_r+0x28>
  40413c:	68ac      	ldr	r4, [r5, #8]
  40413e:	e003      	b.n	404148 <_fflush_r+0x30>
  404140:	4b09      	ldr	r3, [pc, #36]	; (404168 <_fflush_r+0x50>)
  404142:	429c      	cmp	r4, r3
  404144:	bf08      	it	eq
  404146:	68ec      	ldreq	r4, [r5, #12]
  404148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40414c:	b12b      	cbz	r3, 40415a <_fflush_r+0x42>
  40414e:	4621      	mov	r1, r4
  404150:	4628      	mov	r0, r5
  404152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404156:	f7ff bf57 	b.w	404008 <__sflush_r>
  40415a:	2000      	movs	r0, #0
  40415c:	bd38      	pop	{r3, r4, r5, pc}
  40415e:	bf00      	nop
  404160:	004062a8 	.word	0x004062a8
  404164:	004062c8 	.word	0x004062c8
  404168:	004062e8 	.word	0x004062e8

0040416c <_cleanup_r>:
  40416c:	4901      	ldr	r1, [pc, #4]	; (404174 <_cleanup_r+0x8>)
  40416e:	f000 b8a9 	b.w	4042c4 <_fwalk_reent>
  404172:	bf00      	nop
  404174:	00404119 	.word	0x00404119

00404178 <std.isra.0>:
  404178:	2300      	movs	r3, #0
  40417a:	b510      	push	{r4, lr}
  40417c:	4604      	mov	r4, r0
  40417e:	6003      	str	r3, [r0, #0]
  404180:	6043      	str	r3, [r0, #4]
  404182:	6083      	str	r3, [r0, #8]
  404184:	8181      	strh	r1, [r0, #12]
  404186:	6643      	str	r3, [r0, #100]	; 0x64
  404188:	81c2      	strh	r2, [r0, #14]
  40418a:	6103      	str	r3, [r0, #16]
  40418c:	6143      	str	r3, [r0, #20]
  40418e:	6183      	str	r3, [r0, #24]
  404190:	4619      	mov	r1, r3
  404192:	2208      	movs	r2, #8
  404194:	305c      	adds	r0, #92	; 0x5c
  404196:	f7fe fa9b 	bl	4026d0 <memset>
  40419a:	4b05      	ldr	r3, [pc, #20]	; (4041b0 <std.isra.0+0x38>)
  40419c:	6263      	str	r3, [r4, #36]	; 0x24
  40419e:	4b05      	ldr	r3, [pc, #20]	; (4041b4 <std.isra.0+0x3c>)
  4041a0:	62a3      	str	r3, [r4, #40]	; 0x28
  4041a2:	4b05      	ldr	r3, [pc, #20]	; (4041b8 <std.isra.0+0x40>)
  4041a4:	62e3      	str	r3, [r4, #44]	; 0x2c
  4041a6:	4b05      	ldr	r3, [pc, #20]	; (4041bc <std.isra.0+0x44>)
  4041a8:	6224      	str	r4, [r4, #32]
  4041aa:	6323      	str	r3, [r4, #48]	; 0x30
  4041ac:	bd10      	pop	{r4, pc}
  4041ae:	bf00      	nop
  4041b0:	00404e71 	.word	0x00404e71
  4041b4:	00404e93 	.word	0x00404e93
  4041b8:	00404ecb 	.word	0x00404ecb
  4041bc:	00404eef 	.word	0x00404eef

004041c0 <__sfmoreglue>:
  4041c0:	b570      	push	{r4, r5, r6, lr}
  4041c2:	2368      	movs	r3, #104	; 0x68
  4041c4:	1e4d      	subs	r5, r1, #1
  4041c6:	435d      	muls	r5, r3
  4041c8:	460e      	mov	r6, r1
  4041ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4041ce:	f000 fc9d 	bl	404b0c <_malloc_r>
  4041d2:	4604      	mov	r4, r0
  4041d4:	b140      	cbz	r0, 4041e8 <__sfmoreglue+0x28>
  4041d6:	2100      	movs	r1, #0
  4041d8:	e880 0042 	stmia.w	r0, {r1, r6}
  4041dc:	300c      	adds	r0, #12
  4041de:	60a0      	str	r0, [r4, #8]
  4041e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4041e4:	f7fe fa74 	bl	4026d0 <memset>
  4041e8:	4620      	mov	r0, r4
  4041ea:	bd70      	pop	{r4, r5, r6, pc}

004041ec <__sinit>:
  4041ec:	6983      	ldr	r3, [r0, #24]
  4041ee:	b510      	push	{r4, lr}
  4041f0:	4604      	mov	r4, r0
  4041f2:	bb33      	cbnz	r3, 404242 <__sinit+0x56>
  4041f4:	6483      	str	r3, [r0, #72]	; 0x48
  4041f6:	64c3      	str	r3, [r0, #76]	; 0x4c
  4041f8:	6503      	str	r3, [r0, #80]	; 0x50
  4041fa:	4b12      	ldr	r3, [pc, #72]	; (404244 <__sinit+0x58>)
  4041fc:	4a12      	ldr	r2, [pc, #72]	; (404248 <__sinit+0x5c>)
  4041fe:	681b      	ldr	r3, [r3, #0]
  404200:	6282      	str	r2, [r0, #40]	; 0x28
  404202:	4298      	cmp	r0, r3
  404204:	bf04      	itt	eq
  404206:	2301      	moveq	r3, #1
  404208:	6183      	streq	r3, [r0, #24]
  40420a:	f000 f81f 	bl	40424c <__sfp>
  40420e:	6060      	str	r0, [r4, #4]
  404210:	4620      	mov	r0, r4
  404212:	f000 f81b 	bl	40424c <__sfp>
  404216:	60a0      	str	r0, [r4, #8]
  404218:	4620      	mov	r0, r4
  40421a:	f000 f817 	bl	40424c <__sfp>
  40421e:	2200      	movs	r2, #0
  404220:	60e0      	str	r0, [r4, #12]
  404222:	2104      	movs	r1, #4
  404224:	6860      	ldr	r0, [r4, #4]
  404226:	f7ff ffa7 	bl	404178 <std.isra.0>
  40422a:	2201      	movs	r2, #1
  40422c:	2109      	movs	r1, #9
  40422e:	68a0      	ldr	r0, [r4, #8]
  404230:	f7ff ffa2 	bl	404178 <std.isra.0>
  404234:	2202      	movs	r2, #2
  404236:	2112      	movs	r1, #18
  404238:	68e0      	ldr	r0, [r4, #12]
  40423a:	f7ff ff9d 	bl	404178 <std.isra.0>
  40423e:	2301      	movs	r3, #1
  404240:	61a3      	str	r3, [r4, #24]
  404242:	bd10      	pop	{r4, pc}
  404244:	00406260 	.word	0x00406260
  404248:	0040416d 	.word	0x0040416d

0040424c <__sfp>:
  40424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40424e:	4b1c      	ldr	r3, [pc, #112]	; (4042c0 <__sfp+0x74>)
  404250:	681e      	ldr	r6, [r3, #0]
  404252:	69b3      	ldr	r3, [r6, #24]
  404254:	4607      	mov	r7, r0
  404256:	b913      	cbnz	r3, 40425e <__sfp+0x12>
  404258:	4630      	mov	r0, r6
  40425a:	f7ff ffc7 	bl	4041ec <__sinit>
  40425e:	3648      	adds	r6, #72	; 0x48
  404260:	68b4      	ldr	r4, [r6, #8]
  404262:	6873      	ldr	r3, [r6, #4]
  404264:	3b01      	subs	r3, #1
  404266:	d404      	bmi.n	404272 <__sfp+0x26>
  404268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40426c:	b17d      	cbz	r5, 40428e <__sfp+0x42>
  40426e:	3468      	adds	r4, #104	; 0x68
  404270:	e7f8      	b.n	404264 <__sfp+0x18>
  404272:	6833      	ldr	r3, [r6, #0]
  404274:	b10b      	cbz	r3, 40427a <__sfp+0x2e>
  404276:	6836      	ldr	r6, [r6, #0]
  404278:	e7f2      	b.n	404260 <__sfp+0x14>
  40427a:	2104      	movs	r1, #4
  40427c:	4638      	mov	r0, r7
  40427e:	f7ff ff9f 	bl	4041c0 <__sfmoreglue>
  404282:	6030      	str	r0, [r6, #0]
  404284:	2800      	cmp	r0, #0
  404286:	d1f6      	bne.n	404276 <__sfp+0x2a>
  404288:	230c      	movs	r3, #12
  40428a:	603b      	str	r3, [r7, #0]
  40428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40428e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404292:	81e3      	strh	r3, [r4, #14]
  404294:	2301      	movs	r3, #1
  404296:	81a3      	strh	r3, [r4, #12]
  404298:	6665      	str	r5, [r4, #100]	; 0x64
  40429a:	6025      	str	r5, [r4, #0]
  40429c:	60a5      	str	r5, [r4, #8]
  40429e:	6065      	str	r5, [r4, #4]
  4042a0:	6125      	str	r5, [r4, #16]
  4042a2:	6165      	str	r5, [r4, #20]
  4042a4:	61a5      	str	r5, [r4, #24]
  4042a6:	2208      	movs	r2, #8
  4042a8:	4629      	mov	r1, r5
  4042aa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4042ae:	f7fe fa0f 	bl	4026d0 <memset>
  4042b2:	6365      	str	r5, [r4, #52]	; 0x34
  4042b4:	63a5      	str	r5, [r4, #56]	; 0x38
  4042b6:	64a5      	str	r5, [r4, #72]	; 0x48
  4042b8:	64e5      	str	r5, [r4, #76]	; 0x4c
  4042ba:	4620      	mov	r0, r4
  4042bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042be:	bf00      	nop
  4042c0:	00406260 	.word	0x00406260

004042c4 <_fwalk_reent>:
  4042c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4042c8:	4680      	mov	r8, r0
  4042ca:	4689      	mov	r9, r1
  4042cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4042d0:	2600      	movs	r6, #0
  4042d2:	b194      	cbz	r4, 4042fa <_fwalk_reent+0x36>
  4042d4:	68a5      	ldr	r5, [r4, #8]
  4042d6:	6867      	ldr	r7, [r4, #4]
  4042d8:	3f01      	subs	r7, #1
  4042da:	d40c      	bmi.n	4042f6 <_fwalk_reent+0x32>
  4042dc:	89ab      	ldrh	r3, [r5, #12]
  4042de:	2b01      	cmp	r3, #1
  4042e0:	d907      	bls.n	4042f2 <_fwalk_reent+0x2e>
  4042e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4042e6:	3301      	adds	r3, #1
  4042e8:	d003      	beq.n	4042f2 <_fwalk_reent+0x2e>
  4042ea:	4629      	mov	r1, r5
  4042ec:	4640      	mov	r0, r8
  4042ee:	47c8      	blx	r9
  4042f0:	4306      	orrs	r6, r0
  4042f2:	3568      	adds	r5, #104	; 0x68
  4042f4:	e7f0      	b.n	4042d8 <_fwalk_reent+0x14>
  4042f6:	6824      	ldr	r4, [r4, #0]
  4042f8:	e7eb      	b.n	4042d2 <_fwalk_reent+0xe>
  4042fa:	4630      	mov	r0, r6
  4042fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00404300 <_localeconv_r>:
  404300:	4b04      	ldr	r3, [pc, #16]	; (404314 <_localeconv_r+0x14>)
  404302:	681b      	ldr	r3, [r3, #0]
  404304:	6a18      	ldr	r0, [r3, #32]
  404306:	4b04      	ldr	r3, [pc, #16]	; (404318 <_localeconv_r+0x18>)
  404308:	2800      	cmp	r0, #0
  40430a:	bf08      	it	eq
  40430c:	4618      	moveq	r0, r3
  40430e:	30f0      	adds	r0, #240	; 0xf0
  404310:	4770      	bx	lr
  404312:	bf00      	nop
  404314:	20000078 	.word	0x20000078
  404318:	2000007c 	.word	0x2000007c

0040431c <__swhatbuf_r>:
  40431c:	b570      	push	{r4, r5, r6, lr}
  40431e:	460e      	mov	r6, r1
  404320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404324:	2900      	cmp	r1, #0
  404326:	b090      	sub	sp, #64	; 0x40
  404328:	4614      	mov	r4, r2
  40432a:	461d      	mov	r5, r3
  40432c:	da06      	bge.n	40433c <__swhatbuf_r+0x20>
  40432e:	2300      	movs	r3, #0
  404330:	602b      	str	r3, [r5, #0]
  404332:	89b3      	ldrh	r3, [r6, #12]
  404334:	061a      	lsls	r2, r3, #24
  404336:	d50e      	bpl.n	404356 <__swhatbuf_r+0x3a>
  404338:	2340      	movs	r3, #64	; 0x40
  40433a:	e00e      	b.n	40435a <__swhatbuf_r+0x3e>
  40433c:	aa01      	add	r2, sp, #4
  40433e:	f000 fdfd 	bl	404f3c <_fstat_r>
  404342:	2800      	cmp	r0, #0
  404344:	dbf3      	blt.n	40432e <__swhatbuf_r+0x12>
  404346:	9a02      	ldr	r2, [sp, #8]
  404348:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40434c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404350:	425a      	negs	r2, r3
  404352:	415a      	adcs	r2, r3
  404354:	602a      	str	r2, [r5, #0]
  404356:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40435a:	2000      	movs	r0, #0
  40435c:	6023      	str	r3, [r4, #0]
  40435e:	b010      	add	sp, #64	; 0x40
  404360:	bd70      	pop	{r4, r5, r6, pc}
	...

00404364 <__smakebuf_r>:
  404364:	898b      	ldrh	r3, [r1, #12]
  404366:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404368:	079e      	lsls	r6, r3, #30
  40436a:	4605      	mov	r5, r0
  40436c:	460c      	mov	r4, r1
  40436e:	d410      	bmi.n	404392 <__smakebuf_r+0x2e>
  404370:	ab01      	add	r3, sp, #4
  404372:	466a      	mov	r2, sp
  404374:	f7ff ffd2 	bl	40431c <__swhatbuf_r>
  404378:	9900      	ldr	r1, [sp, #0]
  40437a:	4606      	mov	r6, r0
  40437c:	4628      	mov	r0, r5
  40437e:	f000 fbc5 	bl	404b0c <_malloc_r>
  404382:	b968      	cbnz	r0, 4043a0 <__smakebuf_r+0x3c>
  404384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404388:	059a      	lsls	r2, r3, #22
  40438a:	d422      	bmi.n	4043d2 <__smakebuf_r+0x6e>
  40438c:	f043 0302 	orr.w	r3, r3, #2
  404390:	81a3      	strh	r3, [r4, #12]
  404392:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404396:	6023      	str	r3, [r4, #0]
  404398:	6123      	str	r3, [r4, #16]
  40439a:	2301      	movs	r3, #1
  40439c:	6163      	str	r3, [r4, #20]
  40439e:	e018      	b.n	4043d2 <__smakebuf_r+0x6e>
  4043a0:	4b0d      	ldr	r3, [pc, #52]	; (4043d8 <__smakebuf_r+0x74>)
  4043a2:	62ab      	str	r3, [r5, #40]	; 0x28
  4043a4:	89a3      	ldrh	r3, [r4, #12]
  4043a6:	6020      	str	r0, [r4, #0]
  4043a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4043ac:	81a3      	strh	r3, [r4, #12]
  4043ae:	9b00      	ldr	r3, [sp, #0]
  4043b0:	6163      	str	r3, [r4, #20]
  4043b2:	9b01      	ldr	r3, [sp, #4]
  4043b4:	6120      	str	r0, [r4, #16]
  4043b6:	b14b      	cbz	r3, 4043cc <__smakebuf_r+0x68>
  4043b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4043bc:	4628      	mov	r0, r5
  4043be:	f000 fdcf 	bl	404f60 <_isatty_r>
  4043c2:	b118      	cbz	r0, 4043cc <__smakebuf_r+0x68>
  4043c4:	89a3      	ldrh	r3, [r4, #12]
  4043c6:	f043 0301 	orr.w	r3, r3, #1
  4043ca:	81a3      	strh	r3, [r4, #12]
  4043cc:	89a0      	ldrh	r0, [r4, #12]
  4043ce:	4330      	orrs	r0, r6
  4043d0:	81a0      	strh	r0, [r4, #12]
  4043d2:	b002      	add	sp, #8
  4043d4:	bd70      	pop	{r4, r5, r6, pc}
  4043d6:	bf00      	nop
  4043d8:	0040416d 	.word	0x0040416d

004043dc <malloc>:
  4043dc:	4b02      	ldr	r3, [pc, #8]	; (4043e8 <malloc+0xc>)
  4043de:	4601      	mov	r1, r0
  4043e0:	6818      	ldr	r0, [r3, #0]
  4043e2:	f000 bb93 	b.w	404b0c <_malloc_r>
  4043e6:	bf00      	nop
  4043e8:	20000078 	.word	0x20000078
  4043ec:	00000000 	.word	0x00000000

004043f0 <memchr>:
  4043f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4043f4:	2a10      	cmp	r2, #16
  4043f6:	db2b      	blt.n	404450 <memchr+0x60>
  4043f8:	f010 0f07 	tst.w	r0, #7
  4043fc:	d008      	beq.n	404410 <memchr+0x20>
  4043fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  404402:	3a01      	subs	r2, #1
  404404:	428b      	cmp	r3, r1
  404406:	d02d      	beq.n	404464 <memchr+0x74>
  404408:	f010 0f07 	tst.w	r0, #7
  40440c:	b342      	cbz	r2, 404460 <memchr+0x70>
  40440e:	d1f6      	bne.n	4043fe <memchr+0xe>
  404410:	b4f0      	push	{r4, r5, r6, r7}
  404412:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404416:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40441a:	f022 0407 	bic.w	r4, r2, #7
  40441e:	f07f 0700 	mvns.w	r7, #0
  404422:	2300      	movs	r3, #0
  404424:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404428:	3c08      	subs	r4, #8
  40442a:	ea85 0501 	eor.w	r5, r5, r1
  40442e:	ea86 0601 	eor.w	r6, r6, r1
  404432:	fa85 f547 	uadd8	r5, r5, r7
  404436:	faa3 f587 	sel	r5, r3, r7
  40443a:	fa86 f647 	uadd8	r6, r6, r7
  40443e:	faa5 f687 	sel	r6, r5, r7
  404442:	b98e      	cbnz	r6, 404468 <memchr+0x78>
  404444:	d1ee      	bne.n	404424 <memchr+0x34>
  404446:	bcf0      	pop	{r4, r5, r6, r7}
  404448:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40444c:	f002 0207 	and.w	r2, r2, #7
  404450:	b132      	cbz	r2, 404460 <memchr+0x70>
  404452:	f810 3b01 	ldrb.w	r3, [r0], #1
  404456:	3a01      	subs	r2, #1
  404458:	ea83 0301 	eor.w	r3, r3, r1
  40445c:	b113      	cbz	r3, 404464 <memchr+0x74>
  40445e:	d1f8      	bne.n	404452 <memchr+0x62>
  404460:	2000      	movs	r0, #0
  404462:	4770      	bx	lr
  404464:	3801      	subs	r0, #1
  404466:	4770      	bx	lr
  404468:	2d00      	cmp	r5, #0
  40446a:	bf06      	itte	eq
  40446c:	4635      	moveq	r5, r6
  40446e:	3803      	subeq	r0, #3
  404470:	3807      	subne	r0, #7
  404472:	f015 0f01 	tst.w	r5, #1
  404476:	d107      	bne.n	404488 <memchr+0x98>
  404478:	3001      	adds	r0, #1
  40447a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40447e:	bf02      	ittt	eq
  404480:	3001      	addeq	r0, #1
  404482:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404486:	3001      	addeq	r0, #1
  404488:	bcf0      	pop	{r4, r5, r6, r7}
  40448a:	3801      	subs	r0, #1
  40448c:	4770      	bx	lr
  40448e:	bf00      	nop

00404490 <memcpy>:
  404490:	b510      	push	{r4, lr}
  404492:	1e43      	subs	r3, r0, #1
  404494:	440a      	add	r2, r1
  404496:	4291      	cmp	r1, r2
  404498:	d004      	beq.n	4044a4 <memcpy+0x14>
  40449a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40449e:	f803 4f01 	strb.w	r4, [r3, #1]!
  4044a2:	e7f8      	b.n	404496 <memcpy+0x6>
  4044a4:	bd10      	pop	{r4, pc}

004044a6 <_Balloc>:
  4044a6:	b570      	push	{r4, r5, r6, lr}
  4044a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4044aa:	4604      	mov	r4, r0
  4044ac:	460e      	mov	r6, r1
  4044ae:	b93d      	cbnz	r5, 4044c0 <_Balloc+0x1a>
  4044b0:	2010      	movs	r0, #16
  4044b2:	f7ff ff93 	bl	4043dc <malloc>
  4044b6:	6260      	str	r0, [r4, #36]	; 0x24
  4044b8:	6045      	str	r5, [r0, #4]
  4044ba:	6085      	str	r5, [r0, #8]
  4044bc:	6005      	str	r5, [r0, #0]
  4044be:	60c5      	str	r5, [r0, #12]
  4044c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4044c2:	68eb      	ldr	r3, [r5, #12]
  4044c4:	b143      	cbz	r3, 4044d8 <_Balloc+0x32>
  4044c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4044c8:	68db      	ldr	r3, [r3, #12]
  4044ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  4044ce:	b178      	cbz	r0, 4044f0 <_Balloc+0x4a>
  4044d0:	6802      	ldr	r2, [r0, #0]
  4044d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4044d6:	e017      	b.n	404508 <_Balloc+0x62>
  4044d8:	2221      	movs	r2, #33	; 0x21
  4044da:	2104      	movs	r1, #4
  4044dc:	4620      	mov	r0, r4
  4044de:	f000 fab9 	bl	404a54 <_calloc_r>
  4044e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4044e4:	60e8      	str	r0, [r5, #12]
  4044e6:	68db      	ldr	r3, [r3, #12]
  4044e8:	2b00      	cmp	r3, #0
  4044ea:	d1ec      	bne.n	4044c6 <_Balloc+0x20>
  4044ec:	2000      	movs	r0, #0
  4044ee:	bd70      	pop	{r4, r5, r6, pc}
  4044f0:	2101      	movs	r1, #1
  4044f2:	fa01 f506 	lsl.w	r5, r1, r6
  4044f6:	1d6a      	adds	r2, r5, #5
  4044f8:	0092      	lsls	r2, r2, #2
  4044fa:	4620      	mov	r0, r4
  4044fc:	f000 faaa 	bl	404a54 <_calloc_r>
  404500:	2800      	cmp	r0, #0
  404502:	d0f3      	beq.n	4044ec <_Balloc+0x46>
  404504:	6046      	str	r6, [r0, #4]
  404506:	6085      	str	r5, [r0, #8]
  404508:	2300      	movs	r3, #0
  40450a:	6103      	str	r3, [r0, #16]
  40450c:	60c3      	str	r3, [r0, #12]
  40450e:	bd70      	pop	{r4, r5, r6, pc}

00404510 <_Bfree>:
  404510:	b570      	push	{r4, r5, r6, lr}
  404512:	6a44      	ldr	r4, [r0, #36]	; 0x24
  404514:	4606      	mov	r6, r0
  404516:	460d      	mov	r5, r1
  404518:	b93c      	cbnz	r4, 40452a <_Bfree+0x1a>
  40451a:	2010      	movs	r0, #16
  40451c:	f7ff ff5e 	bl	4043dc <malloc>
  404520:	6270      	str	r0, [r6, #36]	; 0x24
  404522:	6044      	str	r4, [r0, #4]
  404524:	6084      	str	r4, [r0, #8]
  404526:	6004      	str	r4, [r0, #0]
  404528:	60c4      	str	r4, [r0, #12]
  40452a:	b13d      	cbz	r5, 40453c <_Bfree+0x2c>
  40452c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40452e:	686a      	ldr	r2, [r5, #4]
  404530:	68db      	ldr	r3, [r3, #12]
  404532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404536:	6029      	str	r1, [r5, #0]
  404538:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40453c:	bd70      	pop	{r4, r5, r6, pc}

0040453e <__multadd>:
  40453e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404542:	690d      	ldr	r5, [r1, #16]
  404544:	461f      	mov	r7, r3
  404546:	4606      	mov	r6, r0
  404548:	460c      	mov	r4, r1
  40454a:	f101 0e14 	add.w	lr, r1, #20
  40454e:	2300      	movs	r3, #0
  404550:	f8de 0000 	ldr.w	r0, [lr]
  404554:	b281      	uxth	r1, r0
  404556:	fb02 7101 	mla	r1, r2, r1, r7
  40455a:	0c0f      	lsrs	r7, r1, #16
  40455c:	0c00      	lsrs	r0, r0, #16
  40455e:	fb02 7000 	mla	r0, r2, r0, r7
  404562:	b289      	uxth	r1, r1
  404564:	3301      	adds	r3, #1
  404566:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40456a:	429d      	cmp	r5, r3
  40456c:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404570:	f84e 1b04 	str.w	r1, [lr], #4
  404574:	dcec      	bgt.n	404550 <__multadd+0x12>
  404576:	b1d7      	cbz	r7, 4045ae <__multadd+0x70>
  404578:	68a3      	ldr	r3, [r4, #8]
  40457a:	429d      	cmp	r5, r3
  40457c:	db12      	blt.n	4045a4 <__multadd+0x66>
  40457e:	6861      	ldr	r1, [r4, #4]
  404580:	4630      	mov	r0, r6
  404582:	3101      	adds	r1, #1
  404584:	f7ff ff8f 	bl	4044a6 <_Balloc>
  404588:	6922      	ldr	r2, [r4, #16]
  40458a:	3202      	adds	r2, #2
  40458c:	f104 010c 	add.w	r1, r4, #12
  404590:	4680      	mov	r8, r0
  404592:	0092      	lsls	r2, r2, #2
  404594:	300c      	adds	r0, #12
  404596:	f7ff ff7b 	bl	404490 <memcpy>
  40459a:	4621      	mov	r1, r4
  40459c:	4630      	mov	r0, r6
  40459e:	f7ff ffb7 	bl	404510 <_Bfree>
  4045a2:	4644      	mov	r4, r8
  4045a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4045a8:	3501      	adds	r5, #1
  4045aa:	615f      	str	r7, [r3, #20]
  4045ac:	6125      	str	r5, [r4, #16]
  4045ae:	4620      	mov	r0, r4
  4045b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004045b4 <__hi0bits>:
  4045b4:	0c03      	lsrs	r3, r0, #16
  4045b6:	041b      	lsls	r3, r3, #16
  4045b8:	b913      	cbnz	r3, 4045c0 <__hi0bits+0xc>
  4045ba:	0400      	lsls	r0, r0, #16
  4045bc:	2310      	movs	r3, #16
  4045be:	e000      	b.n	4045c2 <__hi0bits+0xe>
  4045c0:	2300      	movs	r3, #0
  4045c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4045c6:	bf04      	itt	eq
  4045c8:	0200      	lsleq	r0, r0, #8
  4045ca:	3308      	addeq	r3, #8
  4045cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4045d0:	bf04      	itt	eq
  4045d2:	0100      	lsleq	r0, r0, #4
  4045d4:	3304      	addeq	r3, #4
  4045d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4045da:	bf04      	itt	eq
  4045dc:	0080      	lsleq	r0, r0, #2
  4045de:	3302      	addeq	r3, #2
  4045e0:	2800      	cmp	r0, #0
  4045e2:	db03      	blt.n	4045ec <__hi0bits+0x38>
  4045e4:	0042      	lsls	r2, r0, #1
  4045e6:	d503      	bpl.n	4045f0 <__hi0bits+0x3c>
  4045e8:	1c58      	adds	r0, r3, #1
  4045ea:	4770      	bx	lr
  4045ec:	4618      	mov	r0, r3
  4045ee:	4770      	bx	lr
  4045f0:	2020      	movs	r0, #32
  4045f2:	4770      	bx	lr

004045f4 <__lo0bits>:
  4045f4:	6803      	ldr	r3, [r0, #0]
  4045f6:	f013 0207 	ands.w	r2, r3, #7
  4045fa:	d00b      	beq.n	404614 <__lo0bits+0x20>
  4045fc:	07d9      	lsls	r1, r3, #31
  4045fe:	d422      	bmi.n	404646 <__lo0bits+0x52>
  404600:	079a      	lsls	r2, r3, #30
  404602:	bf4b      	itete	mi
  404604:	085b      	lsrmi	r3, r3, #1
  404606:	089b      	lsrpl	r3, r3, #2
  404608:	6003      	strmi	r3, [r0, #0]
  40460a:	6003      	strpl	r3, [r0, #0]
  40460c:	bf4c      	ite	mi
  40460e:	2001      	movmi	r0, #1
  404610:	2002      	movpl	r0, #2
  404612:	4770      	bx	lr
  404614:	b299      	uxth	r1, r3
  404616:	b909      	cbnz	r1, 40461c <__lo0bits+0x28>
  404618:	0c1b      	lsrs	r3, r3, #16
  40461a:	2210      	movs	r2, #16
  40461c:	f013 0fff 	tst.w	r3, #255	; 0xff
  404620:	bf04      	itt	eq
  404622:	0a1b      	lsreq	r3, r3, #8
  404624:	3208      	addeq	r2, #8
  404626:	0719      	lsls	r1, r3, #28
  404628:	bf04      	itt	eq
  40462a:	091b      	lsreq	r3, r3, #4
  40462c:	3204      	addeq	r2, #4
  40462e:	0799      	lsls	r1, r3, #30
  404630:	bf04      	itt	eq
  404632:	089b      	lsreq	r3, r3, #2
  404634:	3202      	addeq	r2, #2
  404636:	07d9      	lsls	r1, r3, #31
  404638:	d402      	bmi.n	404640 <__lo0bits+0x4c>
  40463a:	085b      	lsrs	r3, r3, #1
  40463c:	d005      	beq.n	40464a <__lo0bits+0x56>
  40463e:	3201      	adds	r2, #1
  404640:	6003      	str	r3, [r0, #0]
  404642:	4610      	mov	r0, r2
  404644:	4770      	bx	lr
  404646:	2000      	movs	r0, #0
  404648:	4770      	bx	lr
  40464a:	2020      	movs	r0, #32
  40464c:	4770      	bx	lr

0040464e <__i2b>:
  40464e:	b510      	push	{r4, lr}
  404650:	460c      	mov	r4, r1
  404652:	2101      	movs	r1, #1
  404654:	f7ff ff27 	bl	4044a6 <_Balloc>
  404658:	2201      	movs	r2, #1
  40465a:	6144      	str	r4, [r0, #20]
  40465c:	6102      	str	r2, [r0, #16]
  40465e:	bd10      	pop	{r4, pc}

00404660 <__multiply>:
  404660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404664:	4614      	mov	r4, r2
  404666:	690a      	ldr	r2, [r1, #16]
  404668:	6923      	ldr	r3, [r4, #16]
  40466a:	429a      	cmp	r2, r3
  40466c:	bfb8      	it	lt
  40466e:	460b      	movlt	r3, r1
  404670:	4688      	mov	r8, r1
  404672:	bfbc      	itt	lt
  404674:	46a0      	movlt	r8, r4
  404676:	461c      	movlt	r4, r3
  404678:	f8d8 7010 	ldr.w	r7, [r8, #16]
  40467c:	f8d4 9010 	ldr.w	r9, [r4, #16]
  404680:	f8d8 3008 	ldr.w	r3, [r8, #8]
  404684:	f8d8 1004 	ldr.w	r1, [r8, #4]
  404688:	eb07 0609 	add.w	r6, r7, r9
  40468c:	429e      	cmp	r6, r3
  40468e:	bfc8      	it	gt
  404690:	3101      	addgt	r1, #1
  404692:	f7ff ff08 	bl	4044a6 <_Balloc>
  404696:	f100 0514 	add.w	r5, r0, #20
  40469a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  40469e:	462b      	mov	r3, r5
  4046a0:	2200      	movs	r2, #0
  4046a2:	4563      	cmp	r3, ip
  4046a4:	d202      	bcs.n	4046ac <__multiply+0x4c>
  4046a6:	f843 2b04 	str.w	r2, [r3], #4
  4046aa:	e7fa      	b.n	4046a2 <__multiply+0x42>
  4046ac:	f104 0214 	add.w	r2, r4, #20
  4046b0:	f108 0114 	add.w	r1, r8, #20
  4046b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  4046b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4046bc:	9300      	str	r3, [sp, #0]
  4046be:	9b00      	ldr	r3, [sp, #0]
  4046c0:	9201      	str	r2, [sp, #4]
  4046c2:	4293      	cmp	r3, r2
  4046c4:	d957      	bls.n	404776 <__multiply+0x116>
  4046c6:	f8b2 b000 	ldrh.w	fp, [r2]
  4046ca:	f1bb 0f00 	cmp.w	fp, #0
  4046ce:	d023      	beq.n	404718 <__multiply+0xb8>
  4046d0:	4689      	mov	r9, r1
  4046d2:	46ae      	mov	lr, r5
  4046d4:	f04f 0800 	mov.w	r8, #0
  4046d8:	f859 4b04 	ldr.w	r4, [r9], #4
  4046dc:	f8be a000 	ldrh.w	sl, [lr]
  4046e0:	b2a3      	uxth	r3, r4
  4046e2:	fb0b a303 	mla	r3, fp, r3, sl
  4046e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  4046ea:	f8de 4000 	ldr.w	r4, [lr]
  4046ee:	4443      	add	r3, r8
  4046f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4046f4:	fb0b 840a 	mla	r4, fp, sl, r8
  4046f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4046fc:	46f2      	mov	sl, lr
  4046fe:	b29b      	uxth	r3, r3
  404700:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404704:	454f      	cmp	r7, r9
  404706:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40470a:	f84a 3b04 	str.w	r3, [sl], #4
  40470e:	d901      	bls.n	404714 <__multiply+0xb4>
  404710:	46d6      	mov	lr, sl
  404712:	e7e1      	b.n	4046d8 <__multiply+0x78>
  404714:	f8ce 8004 	str.w	r8, [lr, #4]
  404718:	9b01      	ldr	r3, [sp, #4]
  40471a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  40471e:	3204      	adds	r2, #4
  404720:	f1ba 0f00 	cmp.w	sl, #0
  404724:	d021      	beq.n	40476a <__multiply+0x10a>
  404726:	682b      	ldr	r3, [r5, #0]
  404728:	462c      	mov	r4, r5
  40472a:	4689      	mov	r9, r1
  40472c:	f04f 0800 	mov.w	r8, #0
  404730:	f8b9 e000 	ldrh.w	lr, [r9]
  404734:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  404738:	fb0a be0e 	mla	lr, sl, lr, fp
  40473c:	44f0      	add	r8, lr
  40473e:	46a3      	mov	fp, r4
  404740:	b29b      	uxth	r3, r3
  404742:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404746:	f84b 3b04 	str.w	r3, [fp], #4
  40474a:	f859 3b04 	ldr.w	r3, [r9], #4
  40474e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  404752:	0c1b      	lsrs	r3, r3, #16
  404754:	fb0a e303 	mla	r3, sl, r3, lr
  404758:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  40475c:	454f      	cmp	r7, r9
  40475e:	ea4f 4813 	mov.w	r8, r3, lsr #16
  404762:	d901      	bls.n	404768 <__multiply+0x108>
  404764:	465c      	mov	r4, fp
  404766:	e7e3      	b.n	404730 <__multiply+0xd0>
  404768:	6063      	str	r3, [r4, #4]
  40476a:	3504      	adds	r5, #4
  40476c:	e7a7      	b.n	4046be <__multiply+0x5e>
  40476e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  404772:	b913      	cbnz	r3, 40477a <__multiply+0x11a>
  404774:	3e01      	subs	r6, #1
  404776:	2e00      	cmp	r6, #0
  404778:	dcf9      	bgt.n	40476e <__multiply+0x10e>
  40477a:	6106      	str	r6, [r0, #16]
  40477c:	b003      	add	sp, #12
  40477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00404784 <__pow5mult>:
  404784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404788:	4615      	mov	r5, r2
  40478a:	f012 0203 	ands.w	r2, r2, #3
  40478e:	4606      	mov	r6, r0
  404790:	460f      	mov	r7, r1
  404792:	d007      	beq.n	4047a4 <__pow5mult+0x20>
  404794:	3a01      	subs	r2, #1
  404796:	4c21      	ldr	r4, [pc, #132]	; (40481c <__pow5mult+0x98>)
  404798:	2300      	movs	r3, #0
  40479a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40479e:	f7ff fece 	bl	40453e <__multadd>
  4047a2:	4607      	mov	r7, r0
  4047a4:	10ad      	asrs	r5, r5, #2
  4047a6:	d036      	beq.n	404816 <__pow5mult+0x92>
  4047a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4047aa:	b93c      	cbnz	r4, 4047bc <__pow5mult+0x38>
  4047ac:	2010      	movs	r0, #16
  4047ae:	f7ff fe15 	bl	4043dc <malloc>
  4047b2:	6270      	str	r0, [r6, #36]	; 0x24
  4047b4:	6044      	str	r4, [r0, #4]
  4047b6:	6084      	str	r4, [r0, #8]
  4047b8:	6004      	str	r4, [r0, #0]
  4047ba:	60c4      	str	r4, [r0, #12]
  4047bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  4047c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  4047c4:	b94c      	cbnz	r4, 4047da <__pow5mult+0x56>
  4047c6:	f240 2171 	movw	r1, #625	; 0x271
  4047ca:	4630      	mov	r0, r6
  4047cc:	f7ff ff3f 	bl	40464e <__i2b>
  4047d0:	2300      	movs	r3, #0
  4047d2:	f8c8 0008 	str.w	r0, [r8, #8]
  4047d6:	4604      	mov	r4, r0
  4047d8:	6003      	str	r3, [r0, #0]
  4047da:	f04f 0800 	mov.w	r8, #0
  4047de:	07eb      	lsls	r3, r5, #31
  4047e0:	d50a      	bpl.n	4047f8 <__pow5mult+0x74>
  4047e2:	4639      	mov	r1, r7
  4047e4:	4622      	mov	r2, r4
  4047e6:	4630      	mov	r0, r6
  4047e8:	f7ff ff3a 	bl	404660 <__multiply>
  4047ec:	4639      	mov	r1, r7
  4047ee:	4681      	mov	r9, r0
  4047f0:	4630      	mov	r0, r6
  4047f2:	f7ff fe8d 	bl	404510 <_Bfree>
  4047f6:	464f      	mov	r7, r9
  4047f8:	106d      	asrs	r5, r5, #1
  4047fa:	d00c      	beq.n	404816 <__pow5mult+0x92>
  4047fc:	6820      	ldr	r0, [r4, #0]
  4047fe:	b108      	cbz	r0, 404804 <__pow5mult+0x80>
  404800:	4604      	mov	r4, r0
  404802:	e7ec      	b.n	4047de <__pow5mult+0x5a>
  404804:	4622      	mov	r2, r4
  404806:	4621      	mov	r1, r4
  404808:	4630      	mov	r0, r6
  40480a:	f7ff ff29 	bl	404660 <__multiply>
  40480e:	6020      	str	r0, [r4, #0]
  404810:	f8c0 8000 	str.w	r8, [r0]
  404814:	e7f4      	b.n	404800 <__pow5mult+0x7c>
  404816:	4638      	mov	r0, r7
  404818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40481c:	004063f8 	.word	0x004063f8

00404820 <__lshift>:
  404820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404824:	460c      	mov	r4, r1
  404826:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40482a:	6926      	ldr	r6, [r4, #16]
  40482c:	6849      	ldr	r1, [r1, #4]
  40482e:	68a3      	ldr	r3, [r4, #8]
  404830:	4456      	add	r6, sl
  404832:	4607      	mov	r7, r0
  404834:	4691      	mov	r9, r2
  404836:	1c75      	adds	r5, r6, #1
  404838:	42ab      	cmp	r3, r5
  40483a:	da02      	bge.n	404842 <__lshift+0x22>
  40483c:	3101      	adds	r1, #1
  40483e:	005b      	lsls	r3, r3, #1
  404840:	e7fa      	b.n	404838 <__lshift+0x18>
  404842:	4638      	mov	r0, r7
  404844:	f7ff fe2f 	bl	4044a6 <_Balloc>
  404848:	2300      	movs	r3, #0
  40484a:	4680      	mov	r8, r0
  40484c:	f100 0114 	add.w	r1, r0, #20
  404850:	461a      	mov	r2, r3
  404852:	4553      	cmp	r3, sl
  404854:	da03      	bge.n	40485e <__lshift+0x3e>
  404856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40485a:	3301      	adds	r3, #1
  40485c:	e7f9      	b.n	404852 <__lshift+0x32>
  40485e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  404862:	6920      	ldr	r0, [r4, #16]
  404864:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404868:	f019 091f 	ands.w	r9, r9, #31
  40486c:	f104 0114 	add.w	r1, r4, #20
  404870:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404874:	d014      	beq.n	4048a0 <__lshift+0x80>
  404876:	f1c9 0c20 	rsb	ip, r9, #32
  40487a:	2200      	movs	r2, #0
  40487c:	6808      	ldr	r0, [r1, #0]
  40487e:	fa00 f009 	lsl.w	r0, r0, r9
  404882:	4302      	orrs	r2, r0
  404884:	469a      	mov	sl, r3
  404886:	f843 2b04 	str.w	r2, [r3], #4
  40488a:	f851 2b04 	ldr.w	r2, [r1], #4
  40488e:	458e      	cmp	lr, r1
  404890:	fa22 f20c 	lsr.w	r2, r2, ip
  404894:	d8f2      	bhi.n	40487c <__lshift+0x5c>
  404896:	f8ca 2004 	str.w	r2, [sl, #4]
  40489a:	b142      	cbz	r2, 4048ae <__lshift+0x8e>
  40489c:	1cb5      	adds	r5, r6, #2
  40489e:	e006      	b.n	4048ae <__lshift+0x8e>
  4048a0:	3b04      	subs	r3, #4
  4048a2:	f851 2b04 	ldr.w	r2, [r1], #4
  4048a6:	f843 2f04 	str.w	r2, [r3, #4]!
  4048aa:	458e      	cmp	lr, r1
  4048ac:	d8f9      	bhi.n	4048a2 <__lshift+0x82>
  4048ae:	3d01      	subs	r5, #1
  4048b0:	4638      	mov	r0, r7
  4048b2:	f8c8 5010 	str.w	r5, [r8, #16]
  4048b6:	4621      	mov	r1, r4
  4048b8:	f7ff fe2a 	bl	404510 <_Bfree>
  4048bc:	4640      	mov	r0, r8
  4048be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004048c2 <__mcmp>:
  4048c2:	6903      	ldr	r3, [r0, #16]
  4048c4:	690a      	ldr	r2, [r1, #16]
  4048c6:	1a9b      	subs	r3, r3, r2
  4048c8:	b510      	push	{r4, lr}
  4048ca:	d111      	bne.n	4048f0 <__mcmp+0x2e>
  4048cc:	0092      	lsls	r2, r2, #2
  4048ce:	3014      	adds	r0, #20
  4048d0:	3114      	adds	r1, #20
  4048d2:	1883      	adds	r3, r0, r2
  4048d4:	440a      	add	r2, r1
  4048d6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4048da:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  4048de:	428c      	cmp	r4, r1
  4048e0:	d002      	beq.n	4048e8 <__mcmp+0x26>
  4048e2:	d307      	bcc.n	4048f4 <__mcmp+0x32>
  4048e4:	2001      	movs	r0, #1
  4048e6:	bd10      	pop	{r4, pc}
  4048e8:	4298      	cmp	r0, r3
  4048ea:	d3f4      	bcc.n	4048d6 <__mcmp+0x14>
  4048ec:	2000      	movs	r0, #0
  4048ee:	bd10      	pop	{r4, pc}
  4048f0:	4618      	mov	r0, r3
  4048f2:	bd10      	pop	{r4, pc}
  4048f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4048f8:	bd10      	pop	{r4, pc}

004048fa <__mdiff>:
  4048fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4048fe:	460c      	mov	r4, r1
  404900:	4607      	mov	r7, r0
  404902:	4611      	mov	r1, r2
  404904:	4620      	mov	r0, r4
  404906:	4615      	mov	r5, r2
  404908:	f7ff ffdb 	bl	4048c2 <__mcmp>
  40490c:	1e06      	subs	r6, r0, #0
  40490e:	d108      	bne.n	404922 <__mdiff+0x28>
  404910:	4631      	mov	r1, r6
  404912:	4638      	mov	r0, r7
  404914:	f7ff fdc7 	bl	4044a6 <_Balloc>
  404918:	2301      	movs	r3, #1
  40491a:	6103      	str	r3, [r0, #16]
  40491c:	6146      	str	r6, [r0, #20]
  40491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404922:	bfbc      	itt	lt
  404924:	4623      	movlt	r3, r4
  404926:	462c      	movlt	r4, r5
  404928:	4638      	mov	r0, r7
  40492a:	6861      	ldr	r1, [r4, #4]
  40492c:	bfba      	itte	lt
  40492e:	461d      	movlt	r5, r3
  404930:	2601      	movlt	r6, #1
  404932:	2600      	movge	r6, #0
  404934:	f7ff fdb7 	bl	4044a6 <_Balloc>
  404938:	692b      	ldr	r3, [r5, #16]
  40493a:	60c6      	str	r6, [r0, #12]
  40493c:	6926      	ldr	r6, [r4, #16]
  40493e:	f105 0914 	add.w	r9, r5, #20
  404942:	3414      	adds	r4, #20
  404944:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  404948:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40494c:	f100 0514 	add.w	r5, r0, #20
  404950:	f04f 0c00 	mov.w	ip, #0
  404954:	f854 3b04 	ldr.w	r3, [r4], #4
  404958:	f859 2b04 	ldr.w	r2, [r9], #4
  40495c:	fa1c f183 	uxtah	r1, ip, r3
  404960:	fa1f fe82 	uxth.w	lr, r2
  404964:	0c12      	lsrs	r2, r2, #16
  404966:	ebce 0101 	rsb	r1, lr, r1
  40496a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  40496e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404972:	b289      	uxth	r1, r1
  404974:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404978:	45c8      	cmp	r8, r9
  40497a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40497e:	46a6      	mov	lr, r4
  404980:	f845 3b04 	str.w	r3, [r5], #4
  404984:	d8e6      	bhi.n	404954 <__mdiff+0x5a>
  404986:	45be      	cmp	lr, r7
  404988:	d20e      	bcs.n	4049a8 <__mdiff+0xae>
  40498a:	f85e 1b04 	ldr.w	r1, [lr], #4
  40498e:	fa1c f281 	uxtah	r2, ip, r1
  404992:	1413      	asrs	r3, r2, #16
  404994:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  404998:	b292      	uxth	r2, r2
  40499a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40499e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4049a2:	f845 2b04 	str.w	r2, [r5], #4
  4049a6:	e7ee      	b.n	404986 <__mdiff+0x8c>
  4049a8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4049ac:	b90b      	cbnz	r3, 4049b2 <__mdiff+0xb8>
  4049ae:	3e01      	subs	r6, #1
  4049b0:	e7fa      	b.n	4049a8 <__mdiff+0xae>
  4049b2:	6106      	str	r6, [r0, #16]
  4049b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004049b8 <__d2b>:
  4049b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4049bc:	2101      	movs	r1, #1
  4049be:	461c      	mov	r4, r3
  4049c0:	4690      	mov	r8, r2
  4049c2:	9e08      	ldr	r6, [sp, #32]
  4049c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4049c6:	f7ff fd6e 	bl	4044a6 <_Balloc>
  4049ca:	f3c4 0213 	ubfx	r2, r4, #0, #20
  4049ce:	f3c4 540a 	ubfx	r4, r4, #20, #11
  4049d2:	4607      	mov	r7, r0
  4049d4:	b10c      	cbz	r4, 4049da <__d2b+0x22>
  4049d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4049da:	9201      	str	r2, [sp, #4]
  4049dc:	f1b8 0f00 	cmp.w	r8, #0
  4049e0:	d019      	beq.n	404a16 <__d2b+0x5e>
  4049e2:	a802      	add	r0, sp, #8
  4049e4:	f840 8d08 	str.w	r8, [r0, #-8]!
  4049e8:	f7ff fe04 	bl	4045f4 <__lo0bits>
  4049ec:	9b00      	ldr	r3, [sp, #0]
  4049ee:	b148      	cbz	r0, 404a04 <__d2b+0x4c>
  4049f0:	9a01      	ldr	r2, [sp, #4]
  4049f2:	f1c0 0120 	rsb	r1, r0, #32
  4049f6:	fa02 f101 	lsl.w	r1, r2, r1
  4049fa:	430b      	orrs	r3, r1
  4049fc:	40c2      	lsrs	r2, r0
  4049fe:	617b      	str	r3, [r7, #20]
  404a00:	9201      	str	r2, [sp, #4]
  404a02:	e000      	b.n	404a06 <__d2b+0x4e>
  404a04:	617b      	str	r3, [r7, #20]
  404a06:	9b01      	ldr	r3, [sp, #4]
  404a08:	61bb      	str	r3, [r7, #24]
  404a0a:	2b00      	cmp	r3, #0
  404a0c:	bf14      	ite	ne
  404a0e:	2102      	movne	r1, #2
  404a10:	2101      	moveq	r1, #1
  404a12:	6139      	str	r1, [r7, #16]
  404a14:	e007      	b.n	404a26 <__d2b+0x6e>
  404a16:	a801      	add	r0, sp, #4
  404a18:	f7ff fdec 	bl	4045f4 <__lo0bits>
  404a1c:	9b01      	ldr	r3, [sp, #4]
  404a1e:	617b      	str	r3, [r7, #20]
  404a20:	2101      	movs	r1, #1
  404a22:	6139      	str	r1, [r7, #16]
  404a24:	3020      	adds	r0, #32
  404a26:	b134      	cbz	r4, 404a36 <__d2b+0x7e>
  404a28:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  404a2c:	4404      	add	r4, r0
  404a2e:	6034      	str	r4, [r6, #0]
  404a30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404a34:	e009      	b.n	404a4a <__d2b+0x92>
  404a36:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  404a3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404a3e:	6030      	str	r0, [r6, #0]
  404a40:	6918      	ldr	r0, [r3, #16]
  404a42:	f7ff fdb7 	bl	4045b4 <__hi0bits>
  404a46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  404a4a:	6028      	str	r0, [r5, #0]
  404a4c:	4638      	mov	r0, r7
  404a4e:	b002      	add	sp, #8
  404a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404a54 <_calloc_r>:
  404a54:	b538      	push	{r3, r4, r5, lr}
  404a56:	fb02 f401 	mul.w	r4, r2, r1
  404a5a:	4621      	mov	r1, r4
  404a5c:	f000 f856 	bl	404b0c <_malloc_r>
  404a60:	4605      	mov	r5, r0
  404a62:	b118      	cbz	r0, 404a6c <_calloc_r+0x18>
  404a64:	4622      	mov	r2, r4
  404a66:	2100      	movs	r1, #0
  404a68:	f7fd fe32 	bl	4026d0 <memset>
  404a6c:	4628      	mov	r0, r5
  404a6e:	bd38      	pop	{r3, r4, r5, pc}

00404a70 <_free_r>:
  404a70:	b538      	push	{r3, r4, r5, lr}
  404a72:	4605      	mov	r5, r0
  404a74:	2900      	cmp	r1, #0
  404a76:	d046      	beq.n	404b06 <_free_r+0x96>
  404a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404a7c:	1f0c      	subs	r4, r1, #4
  404a7e:	2b00      	cmp	r3, #0
  404a80:	bfb8      	it	lt
  404a82:	18e4      	addlt	r4, r4, r3
  404a84:	f000 faa0 	bl	404fc8 <__malloc_lock>
  404a88:	4a1f      	ldr	r2, [pc, #124]	; (404b08 <_free_r+0x98>)
  404a8a:	6813      	ldr	r3, [r2, #0]
  404a8c:	4611      	mov	r1, r2
  404a8e:	b913      	cbnz	r3, 404a96 <_free_r+0x26>
  404a90:	6063      	str	r3, [r4, #4]
  404a92:	6014      	str	r4, [r2, #0]
  404a94:	e032      	b.n	404afc <_free_r+0x8c>
  404a96:	42a3      	cmp	r3, r4
  404a98:	d90e      	bls.n	404ab8 <_free_r+0x48>
  404a9a:	6822      	ldr	r2, [r4, #0]
  404a9c:	18a0      	adds	r0, r4, r2
  404a9e:	4283      	cmp	r3, r0
  404aa0:	bf04      	itt	eq
  404aa2:	6818      	ldreq	r0, [r3, #0]
  404aa4:	685b      	ldreq	r3, [r3, #4]
  404aa6:	6063      	str	r3, [r4, #4]
  404aa8:	bf04      	itt	eq
  404aaa:	1812      	addeq	r2, r2, r0
  404aac:	6022      	streq	r2, [r4, #0]
  404aae:	600c      	str	r4, [r1, #0]
  404ab0:	e024      	b.n	404afc <_free_r+0x8c>
  404ab2:	42a2      	cmp	r2, r4
  404ab4:	d803      	bhi.n	404abe <_free_r+0x4e>
  404ab6:	4613      	mov	r3, r2
  404ab8:	685a      	ldr	r2, [r3, #4]
  404aba:	2a00      	cmp	r2, #0
  404abc:	d1f9      	bne.n	404ab2 <_free_r+0x42>
  404abe:	6818      	ldr	r0, [r3, #0]
  404ac0:	1819      	adds	r1, r3, r0
  404ac2:	42a1      	cmp	r1, r4
  404ac4:	d10b      	bne.n	404ade <_free_r+0x6e>
  404ac6:	6821      	ldr	r1, [r4, #0]
  404ac8:	4401      	add	r1, r0
  404aca:	1858      	adds	r0, r3, r1
  404acc:	4282      	cmp	r2, r0
  404ace:	6019      	str	r1, [r3, #0]
  404ad0:	d114      	bne.n	404afc <_free_r+0x8c>
  404ad2:	6810      	ldr	r0, [r2, #0]
  404ad4:	6852      	ldr	r2, [r2, #4]
  404ad6:	605a      	str	r2, [r3, #4]
  404ad8:	4401      	add	r1, r0
  404ada:	6019      	str	r1, [r3, #0]
  404adc:	e00e      	b.n	404afc <_free_r+0x8c>
  404ade:	d902      	bls.n	404ae6 <_free_r+0x76>
  404ae0:	230c      	movs	r3, #12
  404ae2:	602b      	str	r3, [r5, #0]
  404ae4:	e00a      	b.n	404afc <_free_r+0x8c>
  404ae6:	6821      	ldr	r1, [r4, #0]
  404ae8:	1860      	adds	r0, r4, r1
  404aea:	4282      	cmp	r2, r0
  404aec:	bf04      	itt	eq
  404aee:	6810      	ldreq	r0, [r2, #0]
  404af0:	6852      	ldreq	r2, [r2, #4]
  404af2:	6062      	str	r2, [r4, #4]
  404af4:	bf04      	itt	eq
  404af6:	1809      	addeq	r1, r1, r0
  404af8:	6021      	streq	r1, [r4, #0]
  404afa:	605c      	str	r4, [r3, #4]
  404afc:	4628      	mov	r0, r5
  404afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404b02:	f000 ba62 	b.w	404fca <__malloc_unlock>
  404b06:	bd38      	pop	{r3, r4, r5, pc}
  404b08:	200002e8 	.word	0x200002e8

00404b0c <_malloc_r>:
  404b0c:	b570      	push	{r4, r5, r6, lr}
  404b0e:	1ccd      	adds	r5, r1, #3
  404b10:	f025 0503 	bic.w	r5, r5, #3
  404b14:	3508      	adds	r5, #8
  404b16:	2d0c      	cmp	r5, #12
  404b18:	bf38      	it	cc
  404b1a:	250c      	movcc	r5, #12
  404b1c:	2d00      	cmp	r5, #0
  404b1e:	4606      	mov	r6, r0
  404b20:	db01      	blt.n	404b26 <_malloc_r+0x1a>
  404b22:	42a9      	cmp	r1, r5
  404b24:	d902      	bls.n	404b2c <_malloc_r+0x20>
  404b26:	230c      	movs	r3, #12
  404b28:	6033      	str	r3, [r6, #0]
  404b2a:	e046      	b.n	404bba <_malloc_r+0xae>
  404b2c:	f000 fa4c 	bl	404fc8 <__malloc_lock>
  404b30:	4b23      	ldr	r3, [pc, #140]	; (404bc0 <_malloc_r+0xb4>)
  404b32:	681c      	ldr	r4, [r3, #0]
  404b34:	461a      	mov	r2, r3
  404b36:	4621      	mov	r1, r4
  404b38:	b1a1      	cbz	r1, 404b64 <_malloc_r+0x58>
  404b3a:	680b      	ldr	r3, [r1, #0]
  404b3c:	1b5b      	subs	r3, r3, r5
  404b3e:	d40e      	bmi.n	404b5e <_malloc_r+0x52>
  404b40:	2b0b      	cmp	r3, #11
  404b42:	d903      	bls.n	404b4c <_malloc_r+0x40>
  404b44:	600b      	str	r3, [r1, #0]
  404b46:	18cc      	adds	r4, r1, r3
  404b48:	50cd      	str	r5, [r1, r3]
  404b4a:	e01e      	b.n	404b8a <_malloc_r+0x7e>
  404b4c:	428c      	cmp	r4, r1
  404b4e:	bf0d      	iteet	eq
  404b50:	6863      	ldreq	r3, [r4, #4]
  404b52:	684b      	ldrne	r3, [r1, #4]
  404b54:	6063      	strne	r3, [r4, #4]
  404b56:	6013      	streq	r3, [r2, #0]
  404b58:	bf18      	it	ne
  404b5a:	460c      	movne	r4, r1
  404b5c:	e015      	b.n	404b8a <_malloc_r+0x7e>
  404b5e:	460c      	mov	r4, r1
  404b60:	6849      	ldr	r1, [r1, #4]
  404b62:	e7e9      	b.n	404b38 <_malloc_r+0x2c>
  404b64:	4c17      	ldr	r4, [pc, #92]	; (404bc4 <_malloc_r+0xb8>)
  404b66:	6823      	ldr	r3, [r4, #0]
  404b68:	b91b      	cbnz	r3, 404b72 <_malloc_r+0x66>
  404b6a:	4630      	mov	r0, r6
  404b6c:	f000 f970 	bl	404e50 <_sbrk_r>
  404b70:	6020      	str	r0, [r4, #0]
  404b72:	4629      	mov	r1, r5
  404b74:	4630      	mov	r0, r6
  404b76:	f000 f96b 	bl	404e50 <_sbrk_r>
  404b7a:	1c43      	adds	r3, r0, #1
  404b7c:	d018      	beq.n	404bb0 <_malloc_r+0xa4>
  404b7e:	1cc4      	adds	r4, r0, #3
  404b80:	f024 0403 	bic.w	r4, r4, #3
  404b84:	42a0      	cmp	r0, r4
  404b86:	d10d      	bne.n	404ba4 <_malloc_r+0x98>
  404b88:	6025      	str	r5, [r4, #0]
  404b8a:	4630      	mov	r0, r6
  404b8c:	f000 fa1d 	bl	404fca <__malloc_unlock>
  404b90:	f104 000b 	add.w	r0, r4, #11
  404b94:	1d23      	adds	r3, r4, #4
  404b96:	f020 0007 	bic.w	r0, r0, #7
  404b9a:	1ac3      	subs	r3, r0, r3
  404b9c:	d00e      	beq.n	404bbc <_malloc_r+0xb0>
  404b9e:	425a      	negs	r2, r3
  404ba0:	50e2      	str	r2, [r4, r3]
  404ba2:	bd70      	pop	{r4, r5, r6, pc}
  404ba4:	1a21      	subs	r1, r4, r0
  404ba6:	4630      	mov	r0, r6
  404ba8:	f000 f952 	bl	404e50 <_sbrk_r>
  404bac:	3001      	adds	r0, #1
  404bae:	d1eb      	bne.n	404b88 <_malloc_r+0x7c>
  404bb0:	230c      	movs	r3, #12
  404bb2:	6033      	str	r3, [r6, #0]
  404bb4:	4630      	mov	r0, r6
  404bb6:	f000 fa08 	bl	404fca <__malloc_unlock>
  404bba:	2000      	movs	r0, #0
  404bbc:	bd70      	pop	{r4, r5, r6, pc}
  404bbe:	bf00      	nop
  404bc0:	200002e8 	.word	0x200002e8
  404bc4:	200002e4 	.word	0x200002e4

00404bc8 <__sfputc_r>:
  404bc8:	6893      	ldr	r3, [r2, #8]
  404bca:	3b01      	subs	r3, #1
  404bcc:	2b00      	cmp	r3, #0
  404bce:	b410      	push	{r4}
  404bd0:	6093      	str	r3, [r2, #8]
  404bd2:	da08      	bge.n	404be6 <__sfputc_r+0x1e>
  404bd4:	6994      	ldr	r4, [r2, #24]
  404bd6:	42a3      	cmp	r3, r4
  404bd8:	db02      	blt.n	404be0 <__sfputc_r+0x18>
  404bda:	b2cb      	uxtb	r3, r1
  404bdc:	2b0a      	cmp	r3, #10
  404bde:	d102      	bne.n	404be6 <__sfputc_r+0x1e>
  404be0:	bc10      	pop	{r4}
  404be2:	f7fe bb21 	b.w	403228 <__swbuf_r>
  404be6:	6813      	ldr	r3, [r2, #0]
  404be8:	1c58      	adds	r0, r3, #1
  404bea:	6010      	str	r0, [r2, #0]
  404bec:	7019      	strb	r1, [r3, #0]
  404bee:	b2c8      	uxtb	r0, r1
  404bf0:	bc10      	pop	{r4}
  404bf2:	4770      	bx	lr

00404bf4 <__sfputs_r>:
  404bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404bf6:	4606      	mov	r6, r0
  404bf8:	460f      	mov	r7, r1
  404bfa:	4614      	mov	r4, r2
  404bfc:	18d5      	adds	r5, r2, r3
  404bfe:	42ac      	cmp	r4, r5
  404c00:	d008      	beq.n	404c14 <__sfputs_r+0x20>
  404c02:	463a      	mov	r2, r7
  404c04:	f814 1b01 	ldrb.w	r1, [r4], #1
  404c08:	4630      	mov	r0, r6
  404c0a:	f7ff ffdd 	bl	404bc8 <__sfputc_r>
  404c0e:	1c43      	adds	r3, r0, #1
  404c10:	d1f5      	bne.n	404bfe <__sfputs_r+0xa>
  404c12:	e000      	b.n	404c16 <__sfputs_r+0x22>
  404c14:	2000      	movs	r0, #0
  404c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404c18 <_vfiprintf_r>:
  404c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c1c:	b09d      	sub	sp, #116	; 0x74
  404c1e:	460c      	mov	r4, r1
  404c20:	4617      	mov	r7, r2
  404c22:	9303      	str	r3, [sp, #12]
  404c24:	4606      	mov	r6, r0
  404c26:	b118      	cbz	r0, 404c30 <_vfiprintf_r+0x18>
  404c28:	6983      	ldr	r3, [r0, #24]
  404c2a:	b90b      	cbnz	r3, 404c30 <_vfiprintf_r+0x18>
  404c2c:	f7ff fade 	bl	4041ec <__sinit>
  404c30:	4b7f      	ldr	r3, [pc, #508]	; (404e30 <_vfiprintf_r+0x218>)
  404c32:	429c      	cmp	r4, r3
  404c34:	d101      	bne.n	404c3a <_vfiprintf_r+0x22>
  404c36:	6874      	ldr	r4, [r6, #4]
  404c38:	e008      	b.n	404c4c <_vfiprintf_r+0x34>
  404c3a:	4b7e      	ldr	r3, [pc, #504]	; (404e34 <_vfiprintf_r+0x21c>)
  404c3c:	429c      	cmp	r4, r3
  404c3e:	d101      	bne.n	404c44 <_vfiprintf_r+0x2c>
  404c40:	68b4      	ldr	r4, [r6, #8]
  404c42:	e003      	b.n	404c4c <_vfiprintf_r+0x34>
  404c44:	4b7c      	ldr	r3, [pc, #496]	; (404e38 <_vfiprintf_r+0x220>)
  404c46:	429c      	cmp	r4, r3
  404c48:	bf08      	it	eq
  404c4a:	68f4      	ldreq	r4, [r6, #12]
  404c4c:	89a3      	ldrh	r3, [r4, #12]
  404c4e:	0718      	lsls	r0, r3, #28
  404c50:	d50c      	bpl.n	404c6c <_vfiprintf_r+0x54>
  404c52:	6923      	ldr	r3, [r4, #16]
  404c54:	b153      	cbz	r3, 404c6c <_vfiprintf_r+0x54>
  404c56:	2300      	movs	r3, #0
  404c58:	9309      	str	r3, [sp, #36]	; 0x24
  404c5a:	2320      	movs	r3, #32
  404c5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404c60:	2330      	movs	r3, #48	; 0x30
  404c62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404c66:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 404e3c <_vfiprintf_r+0x224>
  404c6a:	e044      	b.n	404cf6 <_vfiprintf_r+0xde>
  404c6c:	4621      	mov	r1, r4
  404c6e:	4630      	mov	r0, r6
  404c70:	f7fe fb2e 	bl	4032d0 <__swsetup_r>
  404c74:	2800      	cmp	r0, #0
  404c76:	d0ee      	beq.n	404c56 <_vfiprintf_r+0x3e>
  404c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404c7c:	e0d5      	b.n	404e2a <_vfiprintf_r+0x212>
  404c7e:	9a03      	ldr	r2, [sp, #12]
  404c80:	1d11      	adds	r1, r2, #4
  404c82:	6812      	ldr	r2, [r2, #0]
  404c84:	9103      	str	r1, [sp, #12]
  404c86:	2a00      	cmp	r2, #0
  404c88:	f280 808c 	bge.w	404da4 <_vfiprintf_r+0x18c>
  404c8c:	4252      	negs	r2, r2
  404c8e:	f043 0002 	orr.w	r0, r3, #2
  404c92:	9207      	str	r2, [sp, #28]
  404c94:	9004      	str	r0, [sp, #16]
  404c96:	f898 3000 	ldrb.w	r3, [r8]
  404c9a:	2b2e      	cmp	r3, #46	; 0x2e
  404c9c:	f000 8084 	beq.w	404da8 <_vfiprintf_r+0x190>
  404ca0:	2203      	movs	r2, #3
  404ca2:	f898 1000 	ldrb.w	r1, [r8]
  404ca6:	4865      	ldr	r0, [pc, #404]	; (404e3c <_vfiprintf_r+0x224>)
  404ca8:	f7ff fba2 	bl	4043f0 <memchr>
  404cac:	b148      	cbz	r0, 404cc2 <_vfiprintf_r+0xaa>
  404cae:	2340      	movs	r3, #64	; 0x40
  404cb0:	ebcb 0000 	rsb	r0, fp, r0
  404cb4:	fa03 f000 	lsl.w	r0, r3, r0
  404cb8:	9b04      	ldr	r3, [sp, #16]
  404cba:	4318      	orrs	r0, r3
  404cbc:	9004      	str	r0, [sp, #16]
  404cbe:	f108 0801 	add.w	r8, r8, #1
  404cc2:	f898 1000 	ldrb.w	r1, [r8]
  404cc6:	485e      	ldr	r0, [pc, #376]	; (404e40 <_vfiprintf_r+0x228>)
  404cc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  404ccc:	2206      	movs	r2, #6
  404cce:	f108 0701 	add.w	r7, r8, #1
  404cd2:	f7ff fb8d 	bl	4043f0 <memchr>
  404cd6:	2800      	cmp	r0, #0
  404cd8:	f000 8095 	beq.w	404e06 <_vfiprintf_r+0x1ee>
  404cdc:	4b59      	ldr	r3, [pc, #356]	; (404e44 <_vfiprintf_r+0x22c>)
  404cde:	2b00      	cmp	r3, #0
  404ce0:	f040 8088 	bne.w	404df4 <_vfiprintf_r+0x1dc>
  404ce4:	9b03      	ldr	r3, [sp, #12]
  404ce6:	3307      	adds	r3, #7
  404ce8:	f023 0307 	bic.w	r3, r3, #7
  404cec:	3308      	adds	r3, #8
  404cee:	9303      	str	r3, [sp, #12]
  404cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404cf2:	4453      	add	r3, sl
  404cf4:	9309      	str	r3, [sp, #36]	; 0x24
  404cf6:	46b8      	mov	r8, r7
  404cf8:	4645      	mov	r5, r8
  404cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
  404cfe:	b91b      	cbnz	r3, 404d08 <_vfiprintf_r+0xf0>
  404d00:	ebb8 0907 	subs.w	r9, r8, r7
  404d04:	d00f      	beq.n	404d26 <_vfiprintf_r+0x10e>
  404d06:	e003      	b.n	404d10 <_vfiprintf_r+0xf8>
  404d08:	2b25      	cmp	r3, #37	; 0x25
  404d0a:	d0f9      	beq.n	404d00 <_vfiprintf_r+0xe8>
  404d0c:	46a8      	mov	r8, r5
  404d0e:	e7f3      	b.n	404cf8 <_vfiprintf_r+0xe0>
  404d10:	464b      	mov	r3, r9
  404d12:	463a      	mov	r2, r7
  404d14:	4621      	mov	r1, r4
  404d16:	4630      	mov	r0, r6
  404d18:	f7ff ff6c 	bl	404bf4 <__sfputs_r>
  404d1c:	3001      	adds	r0, #1
  404d1e:	d07f      	beq.n	404e20 <_vfiprintf_r+0x208>
  404d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d22:	444b      	add	r3, r9
  404d24:	9309      	str	r3, [sp, #36]	; 0x24
  404d26:	f898 3000 	ldrb.w	r3, [r8]
  404d2a:	2b00      	cmp	r3, #0
  404d2c:	d078      	beq.n	404e20 <_vfiprintf_r+0x208>
  404d2e:	2300      	movs	r3, #0
  404d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  404d34:	9304      	str	r3, [sp, #16]
  404d36:	9307      	str	r3, [sp, #28]
  404d38:	9205      	str	r2, [sp, #20]
  404d3a:	9306      	str	r3, [sp, #24]
  404d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404d40:	931a      	str	r3, [sp, #104]	; 0x68
  404d42:	2701      	movs	r7, #1
  404d44:	2205      	movs	r2, #5
  404d46:	7829      	ldrb	r1, [r5, #0]
  404d48:	483f      	ldr	r0, [pc, #252]	; (404e48 <_vfiprintf_r+0x230>)
  404d4a:	f7ff fb51 	bl	4043f0 <memchr>
  404d4e:	f105 0801 	add.w	r8, r5, #1
  404d52:	9b04      	ldr	r3, [sp, #16]
  404d54:	b138      	cbz	r0, 404d66 <_vfiprintf_r+0x14e>
  404d56:	4a3c      	ldr	r2, [pc, #240]	; (404e48 <_vfiprintf_r+0x230>)
  404d58:	1a80      	subs	r0, r0, r2
  404d5a:	fa07 f000 	lsl.w	r0, r7, r0
  404d5e:	4318      	orrs	r0, r3
  404d60:	9004      	str	r0, [sp, #16]
  404d62:	4645      	mov	r5, r8
  404d64:	e7ee      	b.n	404d44 <_vfiprintf_r+0x12c>
  404d66:	06d9      	lsls	r1, r3, #27
  404d68:	bf44      	itt	mi
  404d6a:	2220      	movmi	r2, #32
  404d6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404d70:	071a      	lsls	r2, r3, #28
  404d72:	bf44      	itt	mi
  404d74:	222b      	movmi	r2, #43	; 0x2b
  404d76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404d7a:	782a      	ldrb	r2, [r5, #0]
  404d7c:	2a2a      	cmp	r2, #42	; 0x2a
  404d7e:	f43f af7e 	beq.w	404c7e <_vfiprintf_r+0x66>
  404d82:	9a07      	ldr	r2, [sp, #28]
  404d84:	2100      	movs	r1, #0
  404d86:	200a      	movs	r0, #10
  404d88:	46a8      	mov	r8, r5
  404d8a:	3501      	adds	r5, #1
  404d8c:	f898 3000 	ldrb.w	r3, [r8]
  404d90:	3b30      	subs	r3, #48	; 0x30
  404d92:	2b09      	cmp	r3, #9
  404d94:	d803      	bhi.n	404d9e <_vfiprintf_r+0x186>
  404d96:	fb00 3202 	mla	r2, r0, r2, r3
  404d9a:	2101      	movs	r1, #1
  404d9c:	e7f4      	b.n	404d88 <_vfiprintf_r+0x170>
  404d9e:	2900      	cmp	r1, #0
  404da0:	f43f af79 	beq.w	404c96 <_vfiprintf_r+0x7e>
  404da4:	9207      	str	r2, [sp, #28]
  404da6:	e776      	b.n	404c96 <_vfiprintf_r+0x7e>
  404da8:	f898 3001 	ldrb.w	r3, [r8, #1]
  404dac:	2b2a      	cmp	r3, #42	; 0x2a
  404dae:	d10b      	bne.n	404dc8 <_vfiprintf_r+0x1b0>
  404db0:	9b03      	ldr	r3, [sp, #12]
  404db2:	1d1a      	adds	r2, r3, #4
  404db4:	681b      	ldr	r3, [r3, #0]
  404db6:	9203      	str	r2, [sp, #12]
  404db8:	2b00      	cmp	r3, #0
  404dba:	bfb8      	it	lt
  404dbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  404dc0:	f108 0802 	add.w	r8, r8, #2
  404dc4:	9305      	str	r3, [sp, #20]
  404dc6:	e76b      	b.n	404ca0 <_vfiprintf_r+0x88>
  404dc8:	2300      	movs	r3, #0
  404dca:	9305      	str	r3, [sp, #20]
  404dcc:	f108 0001 	add.w	r0, r8, #1
  404dd0:	4619      	mov	r1, r3
  404dd2:	250a      	movs	r5, #10
  404dd4:	4680      	mov	r8, r0
  404dd6:	3001      	adds	r0, #1
  404dd8:	f898 2000 	ldrb.w	r2, [r8]
  404ddc:	3a30      	subs	r2, #48	; 0x30
  404dde:	2a09      	cmp	r2, #9
  404de0:	d803      	bhi.n	404dea <_vfiprintf_r+0x1d2>
  404de2:	fb05 2101 	mla	r1, r5, r1, r2
  404de6:	2301      	movs	r3, #1
  404de8:	e7f4      	b.n	404dd4 <_vfiprintf_r+0x1bc>
  404dea:	2b00      	cmp	r3, #0
  404dec:	f43f af58 	beq.w	404ca0 <_vfiprintf_r+0x88>
  404df0:	9105      	str	r1, [sp, #20]
  404df2:	e755      	b.n	404ca0 <_vfiprintf_r+0x88>
  404df4:	ab03      	add	r3, sp, #12
  404df6:	9300      	str	r3, [sp, #0]
  404df8:	4622      	mov	r2, r4
  404dfa:	4b14      	ldr	r3, [pc, #80]	; (404e4c <_vfiprintf_r+0x234>)
  404dfc:	a904      	add	r1, sp, #16
  404dfe:	4630      	mov	r0, r6
  404e00:	f7fd fcfe 	bl	402800 <_printf_float>
  404e04:	e007      	b.n	404e16 <_vfiprintf_r+0x1fe>
  404e06:	ab03      	add	r3, sp, #12
  404e08:	9300      	str	r3, [sp, #0]
  404e0a:	4622      	mov	r2, r4
  404e0c:	4b0f      	ldr	r3, [pc, #60]	; (404e4c <_vfiprintf_r+0x234>)
  404e0e:	a904      	add	r1, sp, #16
  404e10:	4630      	mov	r0, r6
  404e12:	f7fd ffaf 	bl	402d74 <_printf_i>
  404e16:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  404e1a:	4682      	mov	sl, r0
  404e1c:	f47f af68 	bne.w	404cf0 <_vfiprintf_r+0xd8>
  404e20:	89a3      	ldrh	r3, [r4, #12]
  404e22:	065b      	lsls	r3, r3, #25
  404e24:	f53f af28 	bmi.w	404c78 <_vfiprintf_r+0x60>
  404e28:	9809      	ldr	r0, [sp, #36]	; 0x24
  404e2a:	b01d      	add	sp, #116	; 0x74
  404e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e30:	004062a8 	.word	0x004062a8
  404e34:	004062c8 	.word	0x004062c8
  404e38:	004062e8 	.word	0x004062e8
  404e3c:	0040640a 	.word	0x0040640a
  404e40:	0040640e 	.word	0x0040640e
  404e44:	00402801 	.word	0x00402801
  404e48:	00406404 	.word	0x00406404
  404e4c:	00404bf5 	.word	0x00404bf5

00404e50 <_sbrk_r>:
  404e50:	b538      	push	{r3, r4, r5, lr}
  404e52:	4c06      	ldr	r4, [pc, #24]	; (404e6c <_sbrk_r+0x1c>)
  404e54:	2300      	movs	r3, #0
  404e56:	4605      	mov	r5, r0
  404e58:	4608      	mov	r0, r1
  404e5a:	6023      	str	r3, [r4, #0]
  404e5c:	f7fd f856 	bl	401f0c <_sbrk>
  404e60:	1c43      	adds	r3, r0, #1
  404e62:	d102      	bne.n	404e6a <_sbrk_r+0x1a>
  404e64:	6823      	ldr	r3, [r4, #0]
  404e66:	b103      	cbz	r3, 404e6a <_sbrk_r+0x1a>
  404e68:	602b      	str	r3, [r5, #0]
  404e6a:	bd38      	pop	{r3, r4, r5, pc}
  404e6c:	200003c8 	.word	0x200003c8

00404e70 <__sread>:
  404e70:	b510      	push	{r4, lr}
  404e72:	460c      	mov	r4, r1
  404e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404e78:	f000 f8a8 	bl	404fcc <_read_r>
  404e7c:	2800      	cmp	r0, #0
  404e7e:	bfab      	itete	ge
  404e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  404e82:	89a3      	ldrhlt	r3, [r4, #12]
  404e84:	181b      	addge	r3, r3, r0
  404e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  404e8a:	bfac      	ite	ge
  404e8c:	6563      	strge	r3, [r4, #84]	; 0x54
  404e8e:	81a3      	strhlt	r3, [r4, #12]
  404e90:	bd10      	pop	{r4, pc}

00404e92 <__swrite>:
  404e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e96:	461f      	mov	r7, r3
  404e98:	898b      	ldrh	r3, [r1, #12]
  404e9a:	05db      	lsls	r3, r3, #23
  404e9c:	4605      	mov	r5, r0
  404e9e:	460c      	mov	r4, r1
  404ea0:	4616      	mov	r6, r2
  404ea2:	d505      	bpl.n	404eb0 <__swrite+0x1e>
  404ea4:	2302      	movs	r3, #2
  404ea6:	2200      	movs	r2, #0
  404ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404eac:	f000 f868 	bl	404f80 <_lseek_r>
  404eb0:	89a3      	ldrh	r3, [r4, #12]
  404eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404eba:	81a3      	strh	r3, [r4, #12]
  404ebc:	4632      	mov	r2, r6
  404ebe:	463b      	mov	r3, r7
  404ec0:	4628      	mov	r0, r5
  404ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404ec6:	f000 b817 	b.w	404ef8 <_write_r>

00404eca <__sseek>:
  404eca:	b510      	push	{r4, lr}
  404ecc:	460c      	mov	r4, r1
  404ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ed2:	f000 f855 	bl	404f80 <_lseek_r>
  404ed6:	1c43      	adds	r3, r0, #1
  404ed8:	89a3      	ldrh	r3, [r4, #12]
  404eda:	bf15      	itete	ne
  404edc:	6560      	strne	r0, [r4, #84]	; 0x54
  404ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404ee6:	81a3      	strheq	r3, [r4, #12]
  404ee8:	bf18      	it	ne
  404eea:	81a3      	strhne	r3, [r4, #12]
  404eec:	bd10      	pop	{r4, pc}

00404eee <__sclose>:
  404eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404ef2:	f000 b813 	b.w	404f1c <_close_r>
	...

00404ef8 <_write_r>:
  404ef8:	b538      	push	{r3, r4, r5, lr}
  404efa:	4c07      	ldr	r4, [pc, #28]	; (404f18 <_write_r+0x20>)
  404efc:	4605      	mov	r5, r0
  404efe:	4608      	mov	r0, r1
  404f00:	4611      	mov	r1, r2
  404f02:	2200      	movs	r2, #0
  404f04:	6022      	str	r2, [r4, #0]
  404f06:	461a      	mov	r2, r3
  404f08:	f7fb f950 	bl	4001ac <_write>
  404f0c:	1c43      	adds	r3, r0, #1
  404f0e:	d102      	bne.n	404f16 <_write_r+0x1e>
  404f10:	6823      	ldr	r3, [r4, #0]
  404f12:	b103      	cbz	r3, 404f16 <_write_r+0x1e>
  404f14:	602b      	str	r3, [r5, #0]
  404f16:	bd38      	pop	{r3, r4, r5, pc}
  404f18:	200003c8 	.word	0x200003c8

00404f1c <_close_r>:
  404f1c:	b538      	push	{r3, r4, r5, lr}
  404f1e:	4c06      	ldr	r4, [pc, #24]	; (404f38 <_close_r+0x1c>)
  404f20:	2300      	movs	r3, #0
  404f22:	4605      	mov	r5, r0
  404f24:	4608      	mov	r0, r1
  404f26:	6023      	str	r3, [r4, #0]
  404f28:	f7fd f80a 	bl	401f40 <_close>
  404f2c:	1c43      	adds	r3, r0, #1
  404f2e:	d102      	bne.n	404f36 <_close_r+0x1a>
  404f30:	6823      	ldr	r3, [r4, #0]
  404f32:	b103      	cbz	r3, 404f36 <_close_r+0x1a>
  404f34:	602b      	str	r3, [r5, #0]
  404f36:	bd38      	pop	{r3, r4, r5, pc}
  404f38:	200003c8 	.word	0x200003c8

00404f3c <_fstat_r>:
  404f3c:	b538      	push	{r3, r4, r5, lr}
  404f3e:	4c07      	ldr	r4, [pc, #28]	; (404f5c <_fstat_r+0x20>)
  404f40:	2300      	movs	r3, #0
  404f42:	4605      	mov	r5, r0
  404f44:	4608      	mov	r0, r1
  404f46:	4611      	mov	r1, r2
  404f48:	6023      	str	r3, [r4, #0]
  404f4a:	f7fc fffd 	bl	401f48 <_fstat>
  404f4e:	1c43      	adds	r3, r0, #1
  404f50:	d102      	bne.n	404f58 <_fstat_r+0x1c>
  404f52:	6823      	ldr	r3, [r4, #0]
  404f54:	b103      	cbz	r3, 404f58 <_fstat_r+0x1c>
  404f56:	602b      	str	r3, [r5, #0]
  404f58:	bd38      	pop	{r3, r4, r5, pc}
  404f5a:	bf00      	nop
  404f5c:	200003c8 	.word	0x200003c8

00404f60 <_isatty_r>:
  404f60:	b538      	push	{r3, r4, r5, lr}
  404f62:	4c06      	ldr	r4, [pc, #24]	; (404f7c <_isatty_r+0x1c>)
  404f64:	2300      	movs	r3, #0
  404f66:	4605      	mov	r5, r0
  404f68:	4608      	mov	r0, r1
  404f6a:	6023      	str	r3, [r4, #0]
  404f6c:	f7fc fff2 	bl	401f54 <_isatty>
  404f70:	1c43      	adds	r3, r0, #1
  404f72:	d102      	bne.n	404f7a <_isatty_r+0x1a>
  404f74:	6823      	ldr	r3, [r4, #0]
  404f76:	b103      	cbz	r3, 404f7a <_isatty_r+0x1a>
  404f78:	602b      	str	r3, [r5, #0]
  404f7a:	bd38      	pop	{r3, r4, r5, pc}
  404f7c:	200003c8 	.word	0x200003c8

00404f80 <_lseek_r>:
  404f80:	b538      	push	{r3, r4, r5, lr}
  404f82:	4c07      	ldr	r4, [pc, #28]	; (404fa0 <_lseek_r+0x20>)
  404f84:	4605      	mov	r5, r0
  404f86:	4608      	mov	r0, r1
  404f88:	4611      	mov	r1, r2
  404f8a:	2200      	movs	r2, #0
  404f8c:	6022      	str	r2, [r4, #0]
  404f8e:	461a      	mov	r2, r3
  404f90:	f7fc ffe2 	bl	401f58 <_lseek>
  404f94:	1c43      	adds	r3, r0, #1
  404f96:	d102      	bne.n	404f9e <_lseek_r+0x1e>
  404f98:	6823      	ldr	r3, [r4, #0]
  404f9a:	b103      	cbz	r3, 404f9e <_lseek_r+0x1e>
  404f9c:	602b      	str	r3, [r5, #0]
  404f9e:	bd38      	pop	{r3, r4, r5, pc}
  404fa0:	200003c8 	.word	0x200003c8

00404fa4 <__ascii_mbtowc>:
  404fa4:	b082      	sub	sp, #8
  404fa6:	b901      	cbnz	r1, 404faa <__ascii_mbtowc+0x6>
  404fa8:	a901      	add	r1, sp, #4
  404faa:	b13a      	cbz	r2, 404fbc <__ascii_mbtowc+0x18>
  404fac:	b143      	cbz	r3, 404fc0 <__ascii_mbtowc+0x1c>
  404fae:	7813      	ldrb	r3, [r2, #0]
  404fb0:	600b      	str	r3, [r1, #0]
  404fb2:	7812      	ldrb	r2, [r2, #0]
  404fb4:	1c10      	adds	r0, r2, #0
  404fb6:	bf18      	it	ne
  404fb8:	2001      	movne	r0, #1
  404fba:	e003      	b.n	404fc4 <__ascii_mbtowc+0x20>
  404fbc:	4610      	mov	r0, r2
  404fbe:	e001      	b.n	404fc4 <__ascii_mbtowc+0x20>
  404fc0:	f06f 0001 	mvn.w	r0, #1
  404fc4:	b002      	add	sp, #8
  404fc6:	4770      	bx	lr

00404fc8 <__malloc_lock>:
  404fc8:	4770      	bx	lr

00404fca <__malloc_unlock>:
  404fca:	4770      	bx	lr

00404fcc <_read_r>:
  404fcc:	b538      	push	{r3, r4, r5, lr}
  404fce:	4c07      	ldr	r4, [pc, #28]	; (404fec <_read_r+0x20>)
  404fd0:	4605      	mov	r5, r0
  404fd2:	4608      	mov	r0, r1
  404fd4:	4611      	mov	r1, r2
  404fd6:	2200      	movs	r2, #0
  404fd8:	6022      	str	r2, [r4, #0]
  404fda:	461a      	mov	r2, r3
  404fdc:	f7fb f8c8 	bl	400170 <_read>
  404fe0:	1c43      	adds	r3, r0, #1
  404fe2:	d102      	bne.n	404fea <_read_r+0x1e>
  404fe4:	6823      	ldr	r3, [r4, #0]
  404fe6:	b103      	cbz	r3, 404fea <_read_r+0x1e>
  404fe8:	602b      	str	r3, [r5, #0]
  404fea:	bd38      	pop	{r3, r4, r5, pc}
  404fec:	200003c8 	.word	0x200003c8

00404ff0 <__ascii_wctomb>:
  404ff0:	b149      	cbz	r1, 405006 <__ascii_wctomb+0x16>
  404ff2:	2aff      	cmp	r2, #255	; 0xff
  404ff4:	bf85      	ittet	hi
  404ff6:	238a      	movhi	r3, #138	; 0x8a
  404ff8:	6003      	strhi	r3, [r0, #0]
  404ffa:	700a      	strbls	r2, [r1, #0]
  404ffc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  405000:	bf98      	it	ls
  405002:	2001      	movls	r0, #1
  405004:	4770      	bx	lr
  405006:	4608      	mov	r0, r1
  405008:	4770      	bx	lr
	...

0040500c <__aeabi_drsub>:
  40500c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405010:	e002      	b.n	405018 <__adddf3>
  405012:	bf00      	nop

00405014 <__aeabi_dsub>:
  405014:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405018 <__adddf3>:
  405018:	b530      	push	{r4, r5, lr}
  40501a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40501e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405022:	ea94 0f05 	teq	r4, r5
  405026:	bf08      	it	eq
  405028:	ea90 0f02 	teqeq	r0, r2
  40502c:	bf1f      	itttt	ne
  40502e:	ea54 0c00 	orrsne.w	ip, r4, r0
  405032:	ea55 0c02 	orrsne.w	ip, r5, r2
  405036:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40503a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40503e:	f000 80e2 	beq.w	405206 <__adddf3+0x1ee>
  405042:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405046:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40504a:	bfb8      	it	lt
  40504c:	426d      	neglt	r5, r5
  40504e:	dd0c      	ble.n	40506a <__adddf3+0x52>
  405050:	442c      	add	r4, r5
  405052:	ea80 0202 	eor.w	r2, r0, r2
  405056:	ea81 0303 	eor.w	r3, r1, r3
  40505a:	ea82 0000 	eor.w	r0, r2, r0
  40505e:	ea83 0101 	eor.w	r1, r3, r1
  405062:	ea80 0202 	eor.w	r2, r0, r2
  405066:	ea81 0303 	eor.w	r3, r1, r3
  40506a:	2d36      	cmp	r5, #54	; 0x36
  40506c:	bf88      	it	hi
  40506e:	bd30      	pophi	{r4, r5, pc}
  405070:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405074:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405078:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40507c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405080:	d002      	beq.n	405088 <__adddf3+0x70>
  405082:	4240      	negs	r0, r0
  405084:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405088:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40508c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405090:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405094:	d002      	beq.n	40509c <__adddf3+0x84>
  405096:	4252      	negs	r2, r2
  405098:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40509c:	ea94 0f05 	teq	r4, r5
  4050a0:	f000 80a7 	beq.w	4051f2 <__adddf3+0x1da>
  4050a4:	f1a4 0401 	sub.w	r4, r4, #1
  4050a8:	f1d5 0e20 	rsbs	lr, r5, #32
  4050ac:	db0d      	blt.n	4050ca <__adddf3+0xb2>
  4050ae:	fa02 fc0e 	lsl.w	ip, r2, lr
  4050b2:	fa22 f205 	lsr.w	r2, r2, r5
  4050b6:	1880      	adds	r0, r0, r2
  4050b8:	f141 0100 	adc.w	r1, r1, #0
  4050bc:	fa03 f20e 	lsl.w	r2, r3, lr
  4050c0:	1880      	adds	r0, r0, r2
  4050c2:	fa43 f305 	asr.w	r3, r3, r5
  4050c6:	4159      	adcs	r1, r3
  4050c8:	e00e      	b.n	4050e8 <__adddf3+0xd0>
  4050ca:	f1a5 0520 	sub.w	r5, r5, #32
  4050ce:	f10e 0e20 	add.w	lr, lr, #32
  4050d2:	2a01      	cmp	r2, #1
  4050d4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4050d8:	bf28      	it	cs
  4050da:	f04c 0c02 	orrcs.w	ip, ip, #2
  4050de:	fa43 f305 	asr.w	r3, r3, r5
  4050e2:	18c0      	adds	r0, r0, r3
  4050e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4050e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4050ec:	d507      	bpl.n	4050fe <__adddf3+0xe6>
  4050ee:	f04f 0e00 	mov.w	lr, #0
  4050f2:	f1dc 0c00 	rsbs	ip, ip, #0
  4050f6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4050fa:	eb6e 0101 	sbc.w	r1, lr, r1
  4050fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405102:	d31b      	bcc.n	40513c <__adddf3+0x124>
  405104:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405108:	d30c      	bcc.n	405124 <__adddf3+0x10c>
  40510a:	0849      	lsrs	r1, r1, #1
  40510c:	ea5f 0030 	movs.w	r0, r0, rrx
  405110:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405114:	f104 0401 	add.w	r4, r4, #1
  405118:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40511c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405120:	f080 809a 	bcs.w	405258 <__adddf3+0x240>
  405124:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405128:	bf08      	it	eq
  40512a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40512e:	f150 0000 	adcs.w	r0, r0, #0
  405132:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405136:	ea41 0105 	orr.w	r1, r1, r5
  40513a:	bd30      	pop	{r4, r5, pc}
  40513c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405140:	4140      	adcs	r0, r0
  405142:	eb41 0101 	adc.w	r1, r1, r1
  405146:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40514a:	f1a4 0401 	sub.w	r4, r4, #1
  40514e:	d1e9      	bne.n	405124 <__adddf3+0x10c>
  405150:	f091 0f00 	teq	r1, #0
  405154:	bf04      	itt	eq
  405156:	4601      	moveq	r1, r0
  405158:	2000      	moveq	r0, #0
  40515a:	fab1 f381 	clz	r3, r1
  40515e:	bf08      	it	eq
  405160:	3320      	addeq	r3, #32
  405162:	f1a3 030b 	sub.w	r3, r3, #11
  405166:	f1b3 0220 	subs.w	r2, r3, #32
  40516a:	da0c      	bge.n	405186 <__adddf3+0x16e>
  40516c:	320c      	adds	r2, #12
  40516e:	dd08      	ble.n	405182 <__adddf3+0x16a>
  405170:	f102 0c14 	add.w	ip, r2, #20
  405174:	f1c2 020c 	rsb	r2, r2, #12
  405178:	fa01 f00c 	lsl.w	r0, r1, ip
  40517c:	fa21 f102 	lsr.w	r1, r1, r2
  405180:	e00c      	b.n	40519c <__adddf3+0x184>
  405182:	f102 0214 	add.w	r2, r2, #20
  405186:	bfd8      	it	le
  405188:	f1c2 0c20 	rsble	ip, r2, #32
  40518c:	fa01 f102 	lsl.w	r1, r1, r2
  405190:	fa20 fc0c 	lsr.w	ip, r0, ip
  405194:	bfdc      	itt	le
  405196:	ea41 010c 	orrle.w	r1, r1, ip
  40519a:	4090      	lslle	r0, r2
  40519c:	1ae4      	subs	r4, r4, r3
  40519e:	bfa2      	ittt	ge
  4051a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4051a4:	4329      	orrge	r1, r5
  4051a6:	bd30      	popge	{r4, r5, pc}
  4051a8:	ea6f 0404 	mvn.w	r4, r4
  4051ac:	3c1f      	subs	r4, #31
  4051ae:	da1c      	bge.n	4051ea <__adddf3+0x1d2>
  4051b0:	340c      	adds	r4, #12
  4051b2:	dc0e      	bgt.n	4051d2 <__adddf3+0x1ba>
  4051b4:	f104 0414 	add.w	r4, r4, #20
  4051b8:	f1c4 0220 	rsb	r2, r4, #32
  4051bc:	fa20 f004 	lsr.w	r0, r0, r4
  4051c0:	fa01 f302 	lsl.w	r3, r1, r2
  4051c4:	ea40 0003 	orr.w	r0, r0, r3
  4051c8:	fa21 f304 	lsr.w	r3, r1, r4
  4051cc:	ea45 0103 	orr.w	r1, r5, r3
  4051d0:	bd30      	pop	{r4, r5, pc}
  4051d2:	f1c4 040c 	rsb	r4, r4, #12
  4051d6:	f1c4 0220 	rsb	r2, r4, #32
  4051da:	fa20 f002 	lsr.w	r0, r0, r2
  4051de:	fa01 f304 	lsl.w	r3, r1, r4
  4051e2:	ea40 0003 	orr.w	r0, r0, r3
  4051e6:	4629      	mov	r1, r5
  4051e8:	bd30      	pop	{r4, r5, pc}
  4051ea:	fa21 f004 	lsr.w	r0, r1, r4
  4051ee:	4629      	mov	r1, r5
  4051f0:	bd30      	pop	{r4, r5, pc}
  4051f2:	f094 0f00 	teq	r4, #0
  4051f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4051fa:	bf06      	itte	eq
  4051fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405200:	3401      	addeq	r4, #1
  405202:	3d01      	subne	r5, #1
  405204:	e74e      	b.n	4050a4 <__adddf3+0x8c>
  405206:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40520a:	bf18      	it	ne
  40520c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405210:	d029      	beq.n	405266 <__adddf3+0x24e>
  405212:	ea94 0f05 	teq	r4, r5
  405216:	bf08      	it	eq
  405218:	ea90 0f02 	teqeq	r0, r2
  40521c:	d005      	beq.n	40522a <__adddf3+0x212>
  40521e:	ea54 0c00 	orrs.w	ip, r4, r0
  405222:	bf04      	itt	eq
  405224:	4619      	moveq	r1, r3
  405226:	4610      	moveq	r0, r2
  405228:	bd30      	pop	{r4, r5, pc}
  40522a:	ea91 0f03 	teq	r1, r3
  40522e:	bf1e      	ittt	ne
  405230:	2100      	movne	r1, #0
  405232:	2000      	movne	r0, #0
  405234:	bd30      	popne	{r4, r5, pc}
  405236:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40523a:	d105      	bne.n	405248 <__adddf3+0x230>
  40523c:	0040      	lsls	r0, r0, #1
  40523e:	4149      	adcs	r1, r1
  405240:	bf28      	it	cs
  405242:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405246:	bd30      	pop	{r4, r5, pc}
  405248:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40524c:	bf3c      	itt	cc
  40524e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405252:	bd30      	popcc	{r4, r5, pc}
  405254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405258:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40525c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405260:	f04f 0000 	mov.w	r0, #0
  405264:	bd30      	pop	{r4, r5, pc}
  405266:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40526a:	bf1a      	itte	ne
  40526c:	4619      	movne	r1, r3
  40526e:	4610      	movne	r0, r2
  405270:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405274:	bf1c      	itt	ne
  405276:	460b      	movne	r3, r1
  405278:	4602      	movne	r2, r0
  40527a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40527e:	bf06      	itte	eq
  405280:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405284:	ea91 0f03 	teqeq	r1, r3
  405288:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40528c:	bd30      	pop	{r4, r5, pc}
  40528e:	bf00      	nop

00405290 <__aeabi_ui2d>:
  405290:	f090 0f00 	teq	r0, #0
  405294:	bf04      	itt	eq
  405296:	2100      	moveq	r1, #0
  405298:	4770      	bxeq	lr
  40529a:	b530      	push	{r4, r5, lr}
  40529c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4052a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4052a4:	f04f 0500 	mov.w	r5, #0
  4052a8:	f04f 0100 	mov.w	r1, #0
  4052ac:	e750      	b.n	405150 <__adddf3+0x138>
  4052ae:	bf00      	nop

004052b0 <__aeabi_i2d>:
  4052b0:	f090 0f00 	teq	r0, #0
  4052b4:	bf04      	itt	eq
  4052b6:	2100      	moveq	r1, #0
  4052b8:	4770      	bxeq	lr
  4052ba:	b530      	push	{r4, r5, lr}
  4052bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4052c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4052c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4052c8:	bf48      	it	mi
  4052ca:	4240      	negmi	r0, r0
  4052cc:	f04f 0100 	mov.w	r1, #0
  4052d0:	e73e      	b.n	405150 <__adddf3+0x138>
  4052d2:	bf00      	nop

004052d4 <__aeabi_f2d>:
  4052d4:	0042      	lsls	r2, r0, #1
  4052d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4052da:	ea4f 0131 	mov.w	r1, r1, rrx
  4052de:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4052e2:	bf1f      	itttt	ne
  4052e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4052e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4052ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4052f0:	4770      	bxne	lr
  4052f2:	f092 0f00 	teq	r2, #0
  4052f6:	bf14      	ite	ne
  4052f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4052fc:	4770      	bxeq	lr
  4052fe:	b530      	push	{r4, r5, lr}
  405300:	f44f 7460 	mov.w	r4, #896	; 0x380
  405304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40530c:	e720      	b.n	405150 <__adddf3+0x138>
  40530e:	bf00      	nop

00405310 <__aeabi_ul2d>:
  405310:	ea50 0201 	orrs.w	r2, r0, r1
  405314:	bf08      	it	eq
  405316:	4770      	bxeq	lr
  405318:	b530      	push	{r4, r5, lr}
  40531a:	f04f 0500 	mov.w	r5, #0
  40531e:	e00a      	b.n	405336 <__aeabi_l2d+0x16>

00405320 <__aeabi_l2d>:
  405320:	ea50 0201 	orrs.w	r2, r0, r1
  405324:	bf08      	it	eq
  405326:	4770      	bxeq	lr
  405328:	b530      	push	{r4, r5, lr}
  40532a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40532e:	d502      	bpl.n	405336 <__aeabi_l2d+0x16>
  405330:	4240      	negs	r0, r0
  405332:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405336:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40533a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40533e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405342:	f43f aedc 	beq.w	4050fe <__adddf3+0xe6>
  405346:	f04f 0203 	mov.w	r2, #3
  40534a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40534e:	bf18      	it	ne
  405350:	3203      	addne	r2, #3
  405352:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405356:	bf18      	it	ne
  405358:	3203      	addne	r2, #3
  40535a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40535e:	f1c2 0320 	rsb	r3, r2, #32
  405362:	fa00 fc03 	lsl.w	ip, r0, r3
  405366:	fa20 f002 	lsr.w	r0, r0, r2
  40536a:	fa01 fe03 	lsl.w	lr, r1, r3
  40536e:	ea40 000e 	orr.w	r0, r0, lr
  405372:	fa21 f102 	lsr.w	r1, r1, r2
  405376:	4414      	add	r4, r2
  405378:	e6c1      	b.n	4050fe <__adddf3+0xe6>
  40537a:	bf00      	nop

0040537c <__aeabi_dmul>:
  40537c:	b570      	push	{r4, r5, r6, lr}
  40537e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405382:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405386:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40538a:	bf1d      	ittte	ne
  40538c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405390:	ea94 0f0c 	teqne	r4, ip
  405394:	ea95 0f0c 	teqne	r5, ip
  405398:	f000 f8de 	bleq	405558 <__aeabi_dmul+0x1dc>
  40539c:	442c      	add	r4, r5
  40539e:	ea81 0603 	eor.w	r6, r1, r3
  4053a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4053a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4053aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4053ae:	bf18      	it	ne
  4053b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4053b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4053b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4053bc:	d038      	beq.n	405430 <__aeabi_dmul+0xb4>
  4053be:	fba0 ce02 	umull	ip, lr, r0, r2
  4053c2:	f04f 0500 	mov.w	r5, #0
  4053c6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4053ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4053ce:	fbe0 e503 	umlal	lr, r5, r0, r3
  4053d2:	f04f 0600 	mov.w	r6, #0
  4053d6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4053da:	f09c 0f00 	teq	ip, #0
  4053de:	bf18      	it	ne
  4053e0:	f04e 0e01 	orrne.w	lr, lr, #1
  4053e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4053e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4053ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4053f0:	d204      	bcs.n	4053fc <__aeabi_dmul+0x80>
  4053f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4053f6:	416d      	adcs	r5, r5
  4053f8:	eb46 0606 	adc.w	r6, r6, r6
  4053fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405400:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405404:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405408:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40540c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405410:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405414:	bf88      	it	hi
  405416:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40541a:	d81e      	bhi.n	40545a <__aeabi_dmul+0xde>
  40541c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405420:	bf08      	it	eq
  405422:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405426:	f150 0000 	adcs.w	r0, r0, #0
  40542a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40542e:	bd70      	pop	{r4, r5, r6, pc}
  405430:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405434:	ea46 0101 	orr.w	r1, r6, r1
  405438:	ea40 0002 	orr.w	r0, r0, r2
  40543c:	ea81 0103 	eor.w	r1, r1, r3
  405440:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405444:	bfc2      	ittt	gt
  405446:	ebd4 050c 	rsbsgt	r5, r4, ip
  40544a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40544e:	bd70      	popgt	{r4, r5, r6, pc}
  405450:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405454:	f04f 0e00 	mov.w	lr, #0
  405458:	3c01      	subs	r4, #1
  40545a:	f300 80ab 	bgt.w	4055b4 <__aeabi_dmul+0x238>
  40545e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405462:	bfde      	ittt	le
  405464:	2000      	movle	r0, #0
  405466:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40546a:	bd70      	pople	{r4, r5, r6, pc}
  40546c:	f1c4 0400 	rsb	r4, r4, #0
  405470:	3c20      	subs	r4, #32
  405472:	da35      	bge.n	4054e0 <__aeabi_dmul+0x164>
  405474:	340c      	adds	r4, #12
  405476:	dc1b      	bgt.n	4054b0 <__aeabi_dmul+0x134>
  405478:	f104 0414 	add.w	r4, r4, #20
  40547c:	f1c4 0520 	rsb	r5, r4, #32
  405480:	fa00 f305 	lsl.w	r3, r0, r5
  405484:	fa20 f004 	lsr.w	r0, r0, r4
  405488:	fa01 f205 	lsl.w	r2, r1, r5
  40548c:	ea40 0002 	orr.w	r0, r0, r2
  405490:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405498:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40549c:	fa21 f604 	lsr.w	r6, r1, r4
  4054a0:	eb42 0106 	adc.w	r1, r2, r6
  4054a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4054a8:	bf08      	it	eq
  4054aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4054ae:	bd70      	pop	{r4, r5, r6, pc}
  4054b0:	f1c4 040c 	rsb	r4, r4, #12
  4054b4:	f1c4 0520 	rsb	r5, r4, #32
  4054b8:	fa00 f304 	lsl.w	r3, r0, r4
  4054bc:	fa20 f005 	lsr.w	r0, r0, r5
  4054c0:	fa01 f204 	lsl.w	r2, r1, r4
  4054c4:	ea40 0002 	orr.w	r0, r0, r2
  4054c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4054cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4054d0:	f141 0100 	adc.w	r1, r1, #0
  4054d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4054d8:	bf08      	it	eq
  4054da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4054de:	bd70      	pop	{r4, r5, r6, pc}
  4054e0:	f1c4 0520 	rsb	r5, r4, #32
  4054e4:	fa00 f205 	lsl.w	r2, r0, r5
  4054e8:	ea4e 0e02 	orr.w	lr, lr, r2
  4054ec:	fa20 f304 	lsr.w	r3, r0, r4
  4054f0:	fa01 f205 	lsl.w	r2, r1, r5
  4054f4:	ea43 0302 	orr.w	r3, r3, r2
  4054f8:	fa21 f004 	lsr.w	r0, r1, r4
  4054fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405500:	fa21 f204 	lsr.w	r2, r1, r4
  405504:	ea20 0002 	bic.w	r0, r0, r2
  405508:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40550c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405510:	bf08      	it	eq
  405512:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405516:	bd70      	pop	{r4, r5, r6, pc}
  405518:	f094 0f00 	teq	r4, #0
  40551c:	d10f      	bne.n	40553e <__aeabi_dmul+0x1c2>
  40551e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405522:	0040      	lsls	r0, r0, #1
  405524:	eb41 0101 	adc.w	r1, r1, r1
  405528:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40552c:	bf08      	it	eq
  40552e:	3c01      	subeq	r4, #1
  405530:	d0f7      	beq.n	405522 <__aeabi_dmul+0x1a6>
  405532:	ea41 0106 	orr.w	r1, r1, r6
  405536:	f095 0f00 	teq	r5, #0
  40553a:	bf18      	it	ne
  40553c:	4770      	bxne	lr
  40553e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405542:	0052      	lsls	r2, r2, #1
  405544:	eb43 0303 	adc.w	r3, r3, r3
  405548:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40554c:	bf08      	it	eq
  40554e:	3d01      	subeq	r5, #1
  405550:	d0f7      	beq.n	405542 <__aeabi_dmul+0x1c6>
  405552:	ea43 0306 	orr.w	r3, r3, r6
  405556:	4770      	bx	lr
  405558:	ea94 0f0c 	teq	r4, ip
  40555c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405560:	bf18      	it	ne
  405562:	ea95 0f0c 	teqne	r5, ip
  405566:	d00c      	beq.n	405582 <__aeabi_dmul+0x206>
  405568:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40556c:	bf18      	it	ne
  40556e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405572:	d1d1      	bne.n	405518 <__aeabi_dmul+0x19c>
  405574:	ea81 0103 	eor.w	r1, r1, r3
  405578:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40557c:	f04f 0000 	mov.w	r0, #0
  405580:	bd70      	pop	{r4, r5, r6, pc}
  405582:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405586:	bf06      	itte	eq
  405588:	4610      	moveq	r0, r2
  40558a:	4619      	moveq	r1, r3
  40558c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405590:	d019      	beq.n	4055c6 <__aeabi_dmul+0x24a>
  405592:	ea94 0f0c 	teq	r4, ip
  405596:	d102      	bne.n	40559e <__aeabi_dmul+0x222>
  405598:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40559c:	d113      	bne.n	4055c6 <__aeabi_dmul+0x24a>
  40559e:	ea95 0f0c 	teq	r5, ip
  4055a2:	d105      	bne.n	4055b0 <__aeabi_dmul+0x234>
  4055a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4055a8:	bf1c      	itt	ne
  4055aa:	4610      	movne	r0, r2
  4055ac:	4619      	movne	r1, r3
  4055ae:	d10a      	bne.n	4055c6 <__aeabi_dmul+0x24a>
  4055b0:	ea81 0103 	eor.w	r1, r1, r3
  4055b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4055b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4055bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4055c0:	f04f 0000 	mov.w	r0, #0
  4055c4:	bd70      	pop	{r4, r5, r6, pc}
  4055c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4055ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4055ce:	bd70      	pop	{r4, r5, r6, pc}

004055d0 <__aeabi_ddiv>:
  4055d0:	b570      	push	{r4, r5, r6, lr}
  4055d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4055d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4055da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4055de:	bf1d      	ittte	ne
  4055e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4055e4:	ea94 0f0c 	teqne	r4, ip
  4055e8:	ea95 0f0c 	teqne	r5, ip
  4055ec:	f000 f8a7 	bleq	40573e <__aeabi_ddiv+0x16e>
  4055f0:	eba4 0405 	sub.w	r4, r4, r5
  4055f4:	ea81 0e03 	eor.w	lr, r1, r3
  4055f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4055fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405600:	f000 8088 	beq.w	405714 <__aeabi_ddiv+0x144>
  405604:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405608:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40560c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405610:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405614:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405618:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40561c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405620:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405624:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405628:	429d      	cmp	r5, r3
  40562a:	bf08      	it	eq
  40562c:	4296      	cmpeq	r6, r2
  40562e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405632:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405636:	d202      	bcs.n	40563e <__aeabi_ddiv+0x6e>
  405638:	085b      	lsrs	r3, r3, #1
  40563a:	ea4f 0232 	mov.w	r2, r2, rrx
  40563e:	1ab6      	subs	r6, r6, r2
  405640:	eb65 0503 	sbc.w	r5, r5, r3
  405644:	085b      	lsrs	r3, r3, #1
  405646:	ea4f 0232 	mov.w	r2, r2, rrx
  40564a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40564e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405652:	ebb6 0e02 	subs.w	lr, r6, r2
  405656:	eb75 0e03 	sbcs.w	lr, r5, r3
  40565a:	bf22      	ittt	cs
  40565c:	1ab6      	subcs	r6, r6, r2
  40565e:	4675      	movcs	r5, lr
  405660:	ea40 000c 	orrcs.w	r0, r0, ip
  405664:	085b      	lsrs	r3, r3, #1
  405666:	ea4f 0232 	mov.w	r2, r2, rrx
  40566a:	ebb6 0e02 	subs.w	lr, r6, r2
  40566e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405672:	bf22      	ittt	cs
  405674:	1ab6      	subcs	r6, r6, r2
  405676:	4675      	movcs	r5, lr
  405678:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40567c:	085b      	lsrs	r3, r3, #1
  40567e:	ea4f 0232 	mov.w	r2, r2, rrx
  405682:	ebb6 0e02 	subs.w	lr, r6, r2
  405686:	eb75 0e03 	sbcs.w	lr, r5, r3
  40568a:	bf22      	ittt	cs
  40568c:	1ab6      	subcs	r6, r6, r2
  40568e:	4675      	movcs	r5, lr
  405690:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405694:	085b      	lsrs	r3, r3, #1
  405696:	ea4f 0232 	mov.w	r2, r2, rrx
  40569a:	ebb6 0e02 	subs.w	lr, r6, r2
  40569e:	eb75 0e03 	sbcs.w	lr, r5, r3
  4056a2:	bf22      	ittt	cs
  4056a4:	1ab6      	subcs	r6, r6, r2
  4056a6:	4675      	movcs	r5, lr
  4056a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4056ac:	ea55 0e06 	orrs.w	lr, r5, r6
  4056b0:	d018      	beq.n	4056e4 <__aeabi_ddiv+0x114>
  4056b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4056b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4056ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4056be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4056c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4056c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4056ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4056ce:	d1c0      	bne.n	405652 <__aeabi_ddiv+0x82>
  4056d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4056d4:	d10b      	bne.n	4056ee <__aeabi_ddiv+0x11e>
  4056d6:	ea41 0100 	orr.w	r1, r1, r0
  4056da:	f04f 0000 	mov.w	r0, #0
  4056de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4056e2:	e7b6      	b.n	405652 <__aeabi_ddiv+0x82>
  4056e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4056e8:	bf04      	itt	eq
  4056ea:	4301      	orreq	r1, r0
  4056ec:	2000      	moveq	r0, #0
  4056ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4056f2:	bf88      	it	hi
  4056f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4056f8:	f63f aeaf 	bhi.w	40545a <__aeabi_dmul+0xde>
  4056fc:	ebb5 0c03 	subs.w	ip, r5, r3
  405700:	bf04      	itt	eq
  405702:	ebb6 0c02 	subseq.w	ip, r6, r2
  405706:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40570a:	f150 0000 	adcs.w	r0, r0, #0
  40570e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405712:	bd70      	pop	{r4, r5, r6, pc}
  405714:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405718:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40571c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405720:	bfc2      	ittt	gt
  405722:	ebd4 050c 	rsbsgt	r5, r4, ip
  405726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40572a:	bd70      	popgt	{r4, r5, r6, pc}
  40572c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405730:	f04f 0e00 	mov.w	lr, #0
  405734:	3c01      	subs	r4, #1
  405736:	e690      	b.n	40545a <__aeabi_dmul+0xde>
  405738:	ea45 0e06 	orr.w	lr, r5, r6
  40573c:	e68d      	b.n	40545a <__aeabi_dmul+0xde>
  40573e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405742:	ea94 0f0c 	teq	r4, ip
  405746:	bf08      	it	eq
  405748:	ea95 0f0c 	teqeq	r5, ip
  40574c:	f43f af3b 	beq.w	4055c6 <__aeabi_dmul+0x24a>
  405750:	ea94 0f0c 	teq	r4, ip
  405754:	d10a      	bne.n	40576c <__aeabi_ddiv+0x19c>
  405756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40575a:	f47f af34 	bne.w	4055c6 <__aeabi_dmul+0x24a>
  40575e:	ea95 0f0c 	teq	r5, ip
  405762:	f47f af25 	bne.w	4055b0 <__aeabi_dmul+0x234>
  405766:	4610      	mov	r0, r2
  405768:	4619      	mov	r1, r3
  40576a:	e72c      	b.n	4055c6 <__aeabi_dmul+0x24a>
  40576c:	ea95 0f0c 	teq	r5, ip
  405770:	d106      	bne.n	405780 <__aeabi_ddiv+0x1b0>
  405772:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405776:	f43f aefd 	beq.w	405574 <__aeabi_dmul+0x1f8>
  40577a:	4610      	mov	r0, r2
  40577c:	4619      	mov	r1, r3
  40577e:	e722      	b.n	4055c6 <__aeabi_dmul+0x24a>
  405780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405784:	bf18      	it	ne
  405786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40578a:	f47f aec5 	bne.w	405518 <__aeabi_dmul+0x19c>
  40578e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405792:	f47f af0d 	bne.w	4055b0 <__aeabi_dmul+0x234>
  405796:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40579a:	f47f aeeb 	bne.w	405574 <__aeabi_dmul+0x1f8>
  40579e:	e712      	b.n	4055c6 <__aeabi_dmul+0x24a>

004057a0 <__gedf2>:
  4057a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4057a4:	e006      	b.n	4057b4 <__cmpdf2+0x4>
  4057a6:	bf00      	nop

004057a8 <__ledf2>:
  4057a8:	f04f 0c01 	mov.w	ip, #1
  4057ac:	e002      	b.n	4057b4 <__cmpdf2+0x4>
  4057ae:	bf00      	nop

004057b0 <__cmpdf2>:
  4057b0:	f04f 0c01 	mov.w	ip, #1
  4057b4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4057b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4057bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4057c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4057c4:	bf18      	it	ne
  4057c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4057ca:	d01b      	beq.n	405804 <__cmpdf2+0x54>
  4057cc:	b001      	add	sp, #4
  4057ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4057d2:	bf0c      	ite	eq
  4057d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4057d8:	ea91 0f03 	teqne	r1, r3
  4057dc:	bf02      	ittt	eq
  4057de:	ea90 0f02 	teqeq	r0, r2
  4057e2:	2000      	moveq	r0, #0
  4057e4:	4770      	bxeq	lr
  4057e6:	f110 0f00 	cmn.w	r0, #0
  4057ea:	ea91 0f03 	teq	r1, r3
  4057ee:	bf58      	it	pl
  4057f0:	4299      	cmppl	r1, r3
  4057f2:	bf08      	it	eq
  4057f4:	4290      	cmpeq	r0, r2
  4057f6:	bf2c      	ite	cs
  4057f8:	17d8      	asrcs	r0, r3, #31
  4057fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4057fe:	f040 0001 	orr.w	r0, r0, #1
  405802:	4770      	bx	lr
  405804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40580c:	d102      	bne.n	405814 <__cmpdf2+0x64>
  40580e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405812:	d107      	bne.n	405824 <__cmpdf2+0x74>
  405814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40581c:	d1d6      	bne.n	4057cc <__cmpdf2+0x1c>
  40581e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405822:	d0d3      	beq.n	4057cc <__cmpdf2+0x1c>
  405824:	f85d 0b04 	ldr.w	r0, [sp], #4
  405828:	4770      	bx	lr
  40582a:	bf00      	nop

0040582c <__aeabi_cdrcmple>:
  40582c:	4684      	mov	ip, r0
  40582e:	4610      	mov	r0, r2
  405830:	4662      	mov	r2, ip
  405832:	468c      	mov	ip, r1
  405834:	4619      	mov	r1, r3
  405836:	4663      	mov	r3, ip
  405838:	e000      	b.n	40583c <__aeabi_cdcmpeq>
  40583a:	bf00      	nop

0040583c <__aeabi_cdcmpeq>:
  40583c:	b501      	push	{r0, lr}
  40583e:	f7ff ffb7 	bl	4057b0 <__cmpdf2>
  405842:	2800      	cmp	r0, #0
  405844:	bf48      	it	mi
  405846:	f110 0f00 	cmnmi.w	r0, #0
  40584a:	bd01      	pop	{r0, pc}

0040584c <__aeabi_dcmpeq>:
  40584c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405850:	f7ff fff4 	bl	40583c <__aeabi_cdcmpeq>
  405854:	bf0c      	ite	eq
  405856:	2001      	moveq	r0, #1
  405858:	2000      	movne	r0, #0
  40585a:	f85d fb08 	ldr.w	pc, [sp], #8
  40585e:	bf00      	nop

00405860 <__aeabi_dcmplt>:
  405860:	f84d ed08 	str.w	lr, [sp, #-8]!
  405864:	f7ff ffea 	bl	40583c <__aeabi_cdcmpeq>
  405868:	bf34      	ite	cc
  40586a:	2001      	movcc	r0, #1
  40586c:	2000      	movcs	r0, #0
  40586e:	f85d fb08 	ldr.w	pc, [sp], #8
  405872:	bf00      	nop

00405874 <__aeabi_dcmple>:
  405874:	f84d ed08 	str.w	lr, [sp, #-8]!
  405878:	f7ff ffe0 	bl	40583c <__aeabi_cdcmpeq>
  40587c:	bf94      	ite	ls
  40587e:	2001      	movls	r0, #1
  405880:	2000      	movhi	r0, #0
  405882:	f85d fb08 	ldr.w	pc, [sp], #8
  405886:	bf00      	nop

00405888 <__aeabi_dcmpge>:
  405888:	f84d ed08 	str.w	lr, [sp, #-8]!
  40588c:	f7ff ffce 	bl	40582c <__aeabi_cdrcmple>
  405890:	bf94      	ite	ls
  405892:	2001      	movls	r0, #1
  405894:	2000      	movhi	r0, #0
  405896:	f85d fb08 	ldr.w	pc, [sp], #8
  40589a:	bf00      	nop

0040589c <__aeabi_dcmpgt>:
  40589c:	f84d ed08 	str.w	lr, [sp, #-8]!
  4058a0:	f7ff ffc4 	bl	40582c <__aeabi_cdrcmple>
  4058a4:	bf34      	ite	cc
  4058a6:	2001      	movcc	r0, #1
  4058a8:	2000      	movcs	r0, #0
  4058aa:	f85d fb08 	ldr.w	pc, [sp], #8
  4058ae:	bf00      	nop

004058b0 <__aeabi_dcmpun>:
  4058b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4058b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4058b8:	d102      	bne.n	4058c0 <__aeabi_dcmpun+0x10>
  4058ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4058be:	d10a      	bne.n	4058d6 <__aeabi_dcmpun+0x26>
  4058c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4058c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4058c8:	d102      	bne.n	4058d0 <__aeabi_dcmpun+0x20>
  4058ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4058ce:	d102      	bne.n	4058d6 <__aeabi_dcmpun+0x26>
  4058d0:	f04f 0000 	mov.w	r0, #0
  4058d4:	4770      	bx	lr
  4058d6:	f04f 0001 	mov.w	r0, #1
  4058da:	4770      	bx	lr

004058dc <__aeabi_d2iz>:
  4058dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4058e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4058e4:	d215      	bcs.n	405912 <__aeabi_d2iz+0x36>
  4058e6:	d511      	bpl.n	40590c <__aeabi_d2iz+0x30>
  4058e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4058ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4058f0:	d912      	bls.n	405918 <__aeabi_d2iz+0x3c>
  4058f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4058f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4058fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4058fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405902:	fa23 f002 	lsr.w	r0, r3, r2
  405906:	bf18      	it	ne
  405908:	4240      	negne	r0, r0
  40590a:	4770      	bx	lr
  40590c:	f04f 0000 	mov.w	r0, #0
  405910:	4770      	bx	lr
  405912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405916:	d105      	bne.n	405924 <__aeabi_d2iz+0x48>
  405918:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40591c:	bf08      	it	eq
  40591e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405922:	4770      	bx	lr
  405924:	f04f 0000 	mov.w	r0, #0
  405928:	4770      	bx	lr
  40592a:	bf00      	nop

0040592c <__aeabi_d2f>:
  40592c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405934:	bf24      	itt	cs
  405936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40593a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40593e:	d90d      	bls.n	40595c <__aeabi_d2f+0x30>
  405940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40594c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405954:	bf08      	it	eq
  405956:	f020 0001 	biceq.w	r0, r0, #1
  40595a:	4770      	bx	lr
  40595c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405960:	d121      	bne.n	4059a6 <__aeabi_d2f+0x7a>
  405962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405966:	bfbc      	itt	lt
  405968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40596c:	4770      	bxlt	lr
  40596e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405972:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405976:	f1c2 0218 	rsb	r2, r2, #24
  40597a:	f1c2 0c20 	rsb	ip, r2, #32
  40597e:	fa10 f30c 	lsls.w	r3, r0, ip
  405982:	fa20 f002 	lsr.w	r0, r0, r2
  405986:	bf18      	it	ne
  405988:	f040 0001 	orrne.w	r0, r0, #1
  40598c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405994:	fa03 fc0c 	lsl.w	ip, r3, ip
  405998:	ea40 000c 	orr.w	r0, r0, ip
  40599c:	fa23 f302 	lsr.w	r3, r3, r2
  4059a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4059a4:	e7cc      	b.n	405940 <__aeabi_d2f+0x14>
  4059a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4059aa:	d107      	bne.n	4059bc <__aeabi_d2f+0x90>
  4059ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4059b0:	bf1e      	ittt	ne
  4059b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4059b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4059ba:	4770      	bxne	lr
  4059bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4059c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4059c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4059c8:	4770      	bx	lr
  4059ca:	bf00      	nop

004059cc <__aeabi_frsub>:
  4059cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4059d0:	e002      	b.n	4059d8 <__addsf3>
  4059d2:	bf00      	nop

004059d4 <__aeabi_fsub>:
  4059d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004059d8 <__addsf3>:
  4059d8:	0042      	lsls	r2, r0, #1
  4059da:	bf1f      	itttt	ne
  4059dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4059e0:	ea92 0f03 	teqne	r2, r3
  4059e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4059e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4059ec:	d06a      	beq.n	405ac4 <__addsf3+0xec>
  4059ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4059f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4059f6:	bfc1      	itttt	gt
  4059f8:	18d2      	addgt	r2, r2, r3
  4059fa:	4041      	eorgt	r1, r0
  4059fc:	4048      	eorgt	r0, r1
  4059fe:	4041      	eorgt	r1, r0
  405a00:	bfb8      	it	lt
  405a02:	425b      	neglt	r3, r3
  405a04:	2b19      	cmp	r3, #25
  405a06:	bf88      	it	hi
  405a08:	4770      	bxhi	lr
  405a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405a16:	bf18      	it	ne
  405a18:	4240      	negne	r0, r0
  405a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405a26:	bf18      	it	ne
  405a28:	4249      	negne	r1, r1
  405a2a:	ea92 0f03 	teq	r2, r3
  405a2e:	d03f      	beq.n	405ab0 <__addsf3+0xd8>
  405a30:	f1a2 0201 	sub.w	r2, r2, #1
  405a34:	fa41 fc03 	asr.w	ip, r1, r3
  405a38:	eb10 000c 	adds.w	r0, r0, ip
  405a3c:	f1c3 0320 	rsb	r3, r3, #32
  405a40:	fa01 f103 	lsl.w	r1, r1, r3
  405a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405a48:	d502      	bpl.n	405a50 <__addsf3+0x78>
  405a4a:	4249      	negs	r1, r1
  405a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405a54:	d313      	bcc.n	405a7e <__addsf3+0xa6>
  405a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  405a5a:	d306      	bcc.n	405a6a <__addsf3+0x92>
  405a5c:	0840      	lsrs	r0, r0, #1
  405a5e:	ea4f 0131 	mov.w	r1, r1, rrx
  405a62:	f102 0201 	add.w	r2, r2, #1
  405a66:	2afe      	cmp	r2, #254	; 0xfe
  405a68:	d251      	bcs.n	405b0e <__addsf3+0x136>
  405a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  405a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405a72:	bf08      	it	eq
  405a74:	f020 0001 	biceq.w	r0, r0, #1
  405a78:	ea40 0003 	orr.w	r0, r0, r3
  405a7c:	4770      	bx	lr
  405a7e:	0049      	lsls	r1, r1, #1
  405a80:	eb40 0000 	adc.w	r0, r0, r0
  405a84:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405a88:	f1a2 0201 	sub.w	r2, r2, #1
  405a8c:	d1ed      	bne.n	405a6a <__addsf3+0x92>
  405a8e:	fab0 fc80 	clz	ip, r0
  405a92:	f1ac 0c08 	sub.w	ip, ip, #8
  405a96:	ebb2 020c 	subs.w	r2, r2, ip
  405a9a:	fa00 f00c 	lsl.w	r0, r0, ip
  405a9e:	bfaa      	itet	ge
  405aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405aa4:	4252      	neglt	r2, r2
  405aa6:	4318      	orrge	r0, r3
  405aa8:	bfbc      	itt	lt
  405aaa:	40d0      	lsrlt	r0, r2
  405aac:	4318      	orrlt	r0, r3
  405aae:	4770      	bx	lr
  405ab0:	f092 0f00 	teq	r2, #0
  405ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405ab8:	bf06      	itte	eq
  405aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  405abe:	3201      	addeq	r2, #1
  405ac0:	3b01      	subne	r3, #1
  405ac2:	e7b5      	b.n	405a30 <__addsf3+0x58>
  405ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405acc:	bf18      	it	ne
  405ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405ad2:	d021      	beq.n	405b18 <__addsf3+0x140>
  405ad4:	ea92 0f03 	teq	r2, r3
  405ad8:	d004      	beq.n	405ae4 <__addsf3+0x10c>
  405ada:	f092 0f00 	teq	r2, #0
  405ade:	bf08      	it	eq
  405ae0:	4608      	moveq	r0, r1
  405ae2:	4770      	bx	lr
  405ae4:	ea90 0f01 	teq	r0, r1
  405ae8:	bf1c      	itt	ne
  405aea:	2000      	movne	r0, #0
  405aec:	4770      	bxne	lr
  405aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  405af2:	d104      	bne.n	405afe <__addsf3+0x126>
  405af4:	0040      	lsls	r0, r0, #1
  405af6:	bf28      	it	cs
  405af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405afc:	4770      	bx	lr
  405afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405b02:	bf3c      	itt	cc
  405b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  405b08:	4770      	bxcc	lr
  405b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405b16:	4770      	bx	lr
  405b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
  405b1c:	bf16      	itet	ne
  405b1e:	4608      	movne	r0, r1
  405b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405b24:	4601      	movne	r1, r0
  405b26:	0242      	lsls	r2, r0, #9
  405b28:	bf06      	itte	eq
  405b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  405b2e:	ea90 0f01 	teqeq	r0, r1
  405b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405b36:	4770      	bx	lr

00405b38 <__aeabi_ui2f>:
  405b38:	f04f 0300 	mov.w	r3, #0
  405b3c:	e004      	b.n	405b48 <__aeabi_i2f+0x8>
  405b3e:	bf00      	nop

00405b40 <__aeabi_i2f>:
  405b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405b44:	bf48      	it	mi
  405b46:	4240      	negmi	r0, r0
  405b48:	ea5f 0c00 	movs.w	ip, r0
  405b4c:	bf08      	it	eq
  405b4e:	4770      	bxeq	lr
  405b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405b54:	4601      	mov	r1, r0
  405b56:	f04f 0000 	mov.w	r0, #0
  405b5a:	e01c      	b.n	405b96 <__aeabi_l2f+0x2a>

00405b5c <__aeabi_ul2f>:
  405b5c:	ea50 0201 	orrs.w	r2, r0, r1
  405b60:	bf08      	it	eq
  405b62:	4770      	bxeq	lr
  405b64:	f04f 0300 	mov.w	r3, #0
  405b68:	e00a      	b.n	405b80 <__aeabi_l2f+0x14>
  405b6a:	bf00      	nop

00405b6c <__aeabi_l2f>:
  405b6c:	ea50 0201 	orrs.w	r2, r0, r1
  405b70:	bf08      	it	eq
  405b72:	4770      	bxeq	lr
  405b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405b78:	d502      	bpl.n	405b80 <__aeabi_l2f+0x14>
  405b7a:	4240      	negs	r0, r0
  405b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405b80:	ea5f 0c01 	movs.w	ip, r1
  405b84:	bf02      	ittt	eq
  405b86:	4684      	moveq	ip, r0
  405b88:	4601      	moveq	r1, r0
  405b8a:	2000      	moveq	r0, #0
  405b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405b90:	bf08      	it	eq
  405b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  405b9a:	fabc f28c 	clz	r2, ip
  405b9e:	3a08      	subs	r2, #8
  405ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405ba4:	db10      	blt.n	405bc8 <__aeabi_l2f+0x5c>
  405ba6:	fa01 fc02 	lsl.w	ip, r1, r2
  405baa:	4463      	add	r3, ip
  405bac:	fa00 fc02 	lsl.w	ip, r0, r2
  405bb0:	f1c2 0220 	rsb	r2, r2, #32
  405bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405bb8:	fa20 f202 	lsr.w	r2, r0, r2
  405bbc:	eb43 0002 	adc.w	r0, r3, r2
  405bc0:	bf08      	it	eq
  405bc2:	f020 0001 	biceq.w	r0, r0, #1
  405bc6:	4770      	bx	lr
  405bc8:	f102 0220 	add.w	r2, r2, #32
  405bcc:	fa01 fc02 	lsl.w	ip, r1, r2
  405bd0:	f1c2 0220 	rsb	r2, r2, #32
  405bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  405bd8:	fa21 f202 	lsr.w	r2, r1, r2
  405bdc:	eb43 0002 	adc.w	r0, r3, r2
  405be0:	bf08      	it	eq
  405be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405be6:	4770      	bx	lr

00405be8 <__aeabi_fmul>:
  405be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405bf0:	bf1e      	ittt	ne
  405bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405bf6:	ea92 0f0c 	teqne	r2, ip
  405bfa:	ea93 0f0c 	teqne	r3, ip
  405bfe:	d06f      	beq.n	405ce0 <__aeabi_fmul+0xf8>
  405c00:	441a      	add	r2, r3
  405c02:	ea80 0c01 	eor.w	ip, r0, r1
  405c06:	0240      	lsls	r0, r0, #9
  405c08:	bf18      	it	ne
  405c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  405c0e:	d01e      	beq.n	405c4e <__aeabi_fmul+0x66>
  405c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  405c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  405c1c:	fba0 3101 	umull	r3, r1, r0, r1
  405c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405c28:	bf3e      	ittt	cc
  405c2a:	0049      	lslcc	r1, r1, #1
  405c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405c30:	005b      	lslcc	r3, r3, #1
  405c32:	ea40 0001 	orr.w	r0, r0, r1
  405c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  405c3a:	2afd      	cmp	r2, #253	; 0xfd
  405c3c:	d81d      	bhi.n	405c7a <__aeabi_fmul+0x92>
  405c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405c46:	bf08      	it	eq
  405c48:	f020 0001 	biceq.w	r0, r0, #1
  405c4c:	4770      	bx	lr
  405c4e:	f090 0f00 	teq	r0, #0
  405c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405c56:	bf08      	it	eq
  405c58:	0249      	lsleq	r1, r1, #9
  405c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405c62:	3a7f      	subs	r2, #127	; 0x7f
  405c64:	bfc2      	ittt	gt
  405c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405c6e:	4770      	bxgt	lr
  405c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405c74:	f04f 0300 	mov.w	r3, #0
  405c78:	3a01      	subs	r2, #1
  405c7a:	dc5d      	bgt.n	405d38 <__aeabi_fmul+0x150>
  405c7c:	f112 0f19 	cmn.w	r2, #25
  405c80:	bfdc      	itt	le
  405c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405c86:	4770      	bxle	lr
  405c88:	f1c2 0200 	rsb	r2, r2, #0
  405c8c:	0041      	lsls	r1, r0, #1
  405c8e:	fa21 f102 	lsr.w	r1, r1, r2
  405c92:	f1c2 0220 	rsb	r2, r2, #32
  405c96:	fa00 fc02 	lsl.w	ip, r0, r2
  405c9a:	ea5f 0031 	movs.w	r0, r1, rrx
  405c9e:	f140 0000 	adc.w	r0, r0, #0
  405ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405ca6:	bf08      	it	eq
  405ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405cac:	4770      	bx	lr
  405cae:	f092 0f00 	teq	r2, #0
  405cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405cb6:	bf02      	ittt	eq
  405cb8:	0040      	lsleq	r0, r0, #1
  405cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405cbe:	3a01      	subeq	r2, #1
  405cc0:	d0f9      	beq.n	405cb6 <__aeabi_fmul+0xce>
  405cc2:	ea40 000c 	orr.w	r0, r0, ip
  405cc6:	f093 0f00 	teq	r3, #0
  405cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405cce:	bf02      	ittt	eq
  405cd0:	0049      	lsleq	r1, r1, #1
  405cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405cd6:	3b01      	subeq	r3, #1
  405cd8:	d0f9      	beq.n	405cce <__aeabi_fmul+0xe6>
  405cda:	ea41 010c 	orr.w	r1, r1, ip
  405cde:	e78f      	b.n	405c00 <__aeabi_fmul+0x18>
  405ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405ce4:	ea92 0f0c 	teq	r2, ip
  405ce8:	bf18      	it	ne
  405cea:	ea93 0f0c 	teqne	r3, ip
  405cee:	d00a      	beq.n	405d06 <__aeabi_fmul+0x11e>
  405cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405cf4:	bf18      	it	ne
  405cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405cfa:	d1d8      	bne.n	405cae <__aeabi_fmul+0xc6>
  405cfc:	ea80 0001 	eor.w	r0, r0, r1
  405d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405d04:	4770      	bx	lr
  405d06:	f090 0f00 	teq	r0, #0
  405d0a:	bf17      	itett	ne
  405d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405d10:	4608      	moveq	r0, r1
  405d12:	f091 0f00 	teqne	r1, #0
  405d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405d1a:	d014      	beq.n	405d46 <__aeabi_fmul+0x15e>
  405d1c:	ea92 0f0c 	teq	r2, ip
  405d20:	d101      	bne.n	405d26 <__aeabi_fmul+0x13e>
  405d22:	0242      	lsls	r2, r0, #9
  405d24:	d10f      	bne.n	405d46 <__aeabi_fmul+0x15e>
  405d26:	ea93 0f0c 	teq	r3, ip
  405d2a:	d103      	bne.n	405d34 <__aeabi_fmul+0x14c>
  405d2c:	024b      	lsls	r3, r1, #9
  405d2e:	bf18      	it	ne
  405d30:	4608      	movne	r0, r1
  405d32:	d108      	bne.n	405d46 <__aeabi_fmul+0x15e>
  405d34:	ea80 0001 	eor.w	r0, r0, r1
  405d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405d44:	4770      	bx	lr
  405d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405d4e:	4770      	bx	lr

00405d50 <__aeabi_fdiv>:
  405d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405d58:	bf1e      	ittt	ne
  405d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405d5e:	ea92 0f0c 	teqne	r2, ip
  405d62:	ea93 0f0c 	teqne	r3, ip
  405d66:	d069      	beq.n	405e3c <__aeabi_fdiv+0xec>
  405d68:	eba2 0203 	sub.w	r2, r2, r3
  405d6c:	ea80 0c01 	eor.w	ip, r0, r1
  405d70:	0249      	lsls	r1, r1, #9
  405d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405d76:	d037      	beq.n	405de8 <__aeabi_fdiv+0x98>
  405d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405d88:	428b      	cmp	r3, r1
  405d8a:	bf38      	it	cc
  405d8c:	005b      	lslcc	r3, r3, #1
  405d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405d96:	428b      	cmp	r3, r1
  405d98:	bf24      	itt	cs
  405d9a:	1a5b      	subcs	r3, r3, r1
  405d9c:	ea40 000c 	orrcs.w	r0, r0, ip
  405da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405da4:	bf24      	itt	cs
  405da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405db2:	bf24      	itt	cs
  405db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405dc0:	bf24      	itt	cs
  405dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405dca:	011b      	lsls	r3, r3, #4
  405dcc:	bf18      	it	ne
  405dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405dd2:	d1e0      	bne.n	405d96 <__aeabi_fdiv+0x46>
  405dd4:	2afd      	cmp	r2, #253	; 0xfd
  405dd6:	f63f af50 	bhi.w	405c7a <__aeabi_fmul+0x92>
  405dda:	428b      	cmp	r3, r1
  405ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405de0:	bf08      	it	eq
  405de2:	f020 0001 	biceq.w	r0, r0, #1
  405de6:	4770      	bx	lr
  405de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405df0:	327f      	adds	r2, #127	; 0x7f
  405df2:	bfc2      	ittt	gt
  405df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405dfc:	4770      	bxgt	lr
  405dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405e02:	f04f 0300 	mov.w	r3, #0
  405e06:	3a01      	subs	r2, #1
  405e08:	e737      	b.n	405c7a <__aeabi_fmul+0x92>
  405e0a:	f092 0f00 	teq	r2, #0
  405e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405e12:	bf02      	ittt	eq
  405e14:	0040      	lsleq	r0, r0, #1
  405e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405e1a:	3a01      	subeq	r2, #1
  405e1c:	d0f9      	beq.n	405e12 <__aeabi_fdiv+0xc2>
  405e1e:	ea40 000c 	orr.w	r0, r0, ip
  405e22:	f093 0f00 	teq	r3, #0
  405e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405e2a:	bf02      	ittt	eq
  405e2c:	0049      	lsleq	r1, r1, #1
  405e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405e32:	3b01      	subeq	r3, #1
  405e34:	d0f9      	beq.n	405e2a <__aeabi_fdiv+0xda>
  405e36:	ea41 010c 	orr.w	r1, r1, ip
  405e3a:	e795      	b.n	405d68 <__aeabi_fdiv+0x18>
  405e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405e40:	ea92 0f0c 	teq	r2, ip
  405e44:	d108      	bne.n	405e58 <__aeabi_fdiv+0x108>
  405e46:	0242      	lsls	r2, r0, #9
  405e48:	f47f af7d 	bne.w	405d46 <__aeabi_fmul+0x15e>
  405e4c:	ea93 0f0c 	teq	r3, ip
  405e50:	f47f af70 	bne.w	405d34 <__aeabi_fmul+0x14c>
  405e54:	4608      	mov	r0, r1
  405e56:	e776      	b.n	405d46 <__aeabi_fmul+0x15e>
  405e58:	ea93 0f0c 	teq	r3, ip
  405e5c:	d104      	bne.n	405e68 <__aeabi_fdiv+0x118>
  405e5e:	024b      	lsls	r3, r1, #9
  405e60:	f43f af4c 	beq.w	405cfc <__aeabi_fmul+0x114>
  405e64:	4608      	mov	r0, r1
  405e66:	e76e      	b.n	405d46 <__aeabi_fmul+0x15e>
  405e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405e6c:	bf18      	it	ne
  405e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405e72:	d1ca      	bne.n	405e0a <__aeabi_fdiv+0xba>
  405e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405e78:	f47f af5c 	bne.w	405d34 <__aeabi_fmul+0x14c>
  405e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405e80:	f47f af3c 	bne.w	405cfc <__aeabi_fmul+0x114>
  405e84:	e75f      	b.n	405d46 <__aeabi_fmul+0x15e>
  405e86:	bf00      	nop

00405e88 <__gesf2>:
  405e88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  405e8c:	e006      	b.n	405e9c <__cmpsf2+0x4>
  405e8e:	bf00      	nop

00405e90 <__lesf2>:
  405e90:	f04f 0c01 	mov.w	ip, #1
  405e94:	e002      	b.n	405e9c <__cmpsf2+0x4>
  405e96:	bf00      	nop

00405e98 <__cmpsf2>:
  405e98:	f04f 0c01 	mov.w	ip, #1
  405e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
  405ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405eac:	bf18      	it	ne
  405eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405eb2:	d011      	beq.n	405ed8 <__cmpsf2+0x40>
  405eb4:	b001      	add	sp, #4
  405eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  405eba:	bf18      	it	ne
  405ebc:	ea90 0f01 	teqne	r0, r1
  405ec0:	bf58      	it	pl
  405ec2:	ebb2 0003 	subspl.w	r0, r2, r3
  405ec6:	bf88      	it	hi
  405ec8:	17c8      	asrhi	r0, r1, #31
  405eca:	bf38      	it	cc
  405ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  405ed0:	bf18      	it	ne
  405ed2:	f040 0001 	orrne.w	r0, r0, #1
  405ed6:	4770      	bx	lr
  405ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405edc:	d102      	bne.n	405ee4 <__cmpsf2+0x4c>
  405ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405ee2:	d105      	bne.n	405ef0 <__cmpsf2+0x58>
  405ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405ee8:	d1e4      	bne.n	405eb4 <__cmpsf2+0x1c>
  405eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405eee:	d0e1      	beq.n	405eb4 <__cmpsf2+0x1c>
  405ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
  405ef4:	4770      	bx	lr
  405ef6:	bf00      	nop

00405ef8 <__aeabi_cfrcmple>:
  405ef8:	4684      	mov	ip, r0
  405efa:	4608      	mov	r0, r1
  405efc:	4661      	mov	r1, ip
  405efe:	e7ff      	b.n	405f00 <__aeabi_cfcmpeq>

00405f00 <__aeabi_cfcmpeq>:
  405f00:	b50f      	push	{r0, r1, r2, r3, lr}
  405f02:	f7ff ffc9 	bl	405e98 <__cmpsf2>
  405f06:	2800      	cmp	r0, #0
  405f08:	bf48      	it	mi
  405f0a:	f110 0f00 	cmnmi.w	r0, #0
  405f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00405f10 <__aeabi_fcmpeq>:
  405f10:	f84d ed08 	str.w	lr, [sp, #-8]!
  405f14:	f7ff fff4 	bl	405f00 <__aeabi_cfcmpeq>
  405f18:	bf0c      	ite	eq
  405f1a:	2001      	moveq	r0, #1
  405f1c:	2000      	movne	r0, #0
  405f1e:	f85d fb08 	ldr.w	pc, [sp], #8
  405f22:	bf00      	nop

00405f24 <__aeabi_fcmplt>:
  405f24:	f84d ed08 	str.w	lr, [sp, #-8]!
  405f28:	f7ff ffea 	bl	405f00 <__aeabi_cfcmpeq>
  405f2c:	bf34      	ite	cc
  405f2e:	2001      	movcc	r0, #1
  405f30:	2000      	movcs	r0, #0
  405f32:	f85d fb08 	ldr.w	pc, [sp], #8
  405f36:	bf00      	nop

00405f38 <__aeabi_fcmple>:
  405f38:	f84d ed08 	str.w	lr, [sp, #-8]!
  405f3c:	f7ff ffe0 	bl	405f00 <__aeabi_cfcmpeq>
  405f40:	bf94      	ite	ls
  405f42:	2001      	movls	r0, #1
  405f44:	2000      	movhi	r0, #0
  405f46:	f85d fb08 	ldr.w	pc, [sp], #8
  405f4a:	bf00      	nop

00405f4c <__aeabi_fcmpge>:
  405f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405f50:	f7ff ffd2 	bl	405ef8 <__aeabi_cfrcmple>
  405f54:	bf94      	ite	ls
  405f56:	2001      	movls	r0, #1
  405f58:	2000      	movhi	r0, #0
  405f5a:	f85d fb08 	ldr.w	pc, [sp], #8
  405f5e:	bf00      	nop

00405f60 <__aeabi_fcmpgt>:
  405f60:	f84d ed08 	str.w	lr, [sp, #-8]!
  405f64:	f7ff ffc8 	bl	405ef8 <__aeabi_cfrcmple>
  405f68:	bf34      	ite	cc
  405f6a:	2001      	movcc	r0, #1
  405f6c:	2000      	movcs	r0, #0
  405f6e:	f85d fb08 	ldr.w	pc, [sp], #8
  405f72:	bf00      	nop

00405f74 <__aeabi_f2iz>:
  405f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405f7c:	d30f      	bcc.n	405f9e <__aeabi_f2iz+0x2a>
  405f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405f86:	d90d      	bls.n	405fa4 <__aeabi_f2iz+0x30>
  405f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405f90:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405f94:	fa23 f002 	lsr.w	r0, r3, r2
  405f98:	bf18      	it	ne
  405f9a:	4240      	negne	r0, r0
  405f9c:	4770      	bx	lr
  405f9e:	f04f 0000 	mov.w	r0, #0
  405fa2:	4770      	bx	lr
  405fa4:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405fa8:	d101      	bne.n	405fae <__aeabi_f2iz+0x3a>
  405faa:	0242      	lsls	r2, r0, #9
  405fac:	d105      	bne.n	405fba <__aeabi_f2iz+0x46>
  405fae:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  405fb2:	bf08      	it	eq
  405fb4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405fb8:	4770      	bx	lr
  405fba:	f04f 0000 	mov.w	r0, #0
  405fbe:	4770      	bx	lr

00405fc0 <__aeabi_f2uiz>:
  405fc0:	0042      	lsls	r2, r0, #1
  405fc2:	d20e      	bcs.n	405fe2 <__aeabi_f2uiz+0x22>
  405fc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405fc8:	d30b      	bcc.n	405fe2 <__aeabi_f2uiz+0x22>
  405fca:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405fce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405fd2:	d409      	bmi.n	405fe8 <__aeabi_f2uiz+0x28>
  405fd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405fdc:	fa23 f002 	lsr.w	r0, r3, r2
  405fe0:	4770      	bx	lr
  405fe2:	f04f 0000 	mov.w	r0, #0
  405fe6:	4770      	bx	lr
  405fe8:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405fec:	d101      	bne.n	405ff2 <__aeabi_f2uiz+0x32>
  405fee:	0242      	lsls	r2, r0, #9
  405ff0:	d102      	bne.n	405ff8 <__aeabi_f2uiz+0x38>
  405ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  405ff6:	4770      	bx	lr
  405ff8:	f04f 0000 	mov.w	r0, #0
  405ffc:	4770      	bx	lr
  405ffe:	bf00      	nop
  406000:	0a0d0a0d 	.word	0x0a0d0a0d
  406004:	346d6173 	.word	0x346d6173
  406008:	63323364 	.word	0x63323364
  40600c:	756d6920 	.word	0x756d6920
  406010:	6d656420 	.word	0x6d656420
  406014:	2e2e2e6f 	.word	0x2e2e2e6f
  406018:	00000a0d 	.word	0x00000a0d
  40601c:	0000002e 	.word	0x0000002e
  406020:	74697277 	.word	0x74697277
  406024:	65725f65 	.word	0x65725f65
  406028:	74736967 	.word	0x74736967
  40602c:	203a7265 	.word	0x203a7265
  406030:	63637573 	.word	0x63637573
  406034:	0d737365 	.word	0x0d737365
  406038:	0000000a 	.word	0x0000000a
  40603c:	5f697774 	.word	0x5f697774
  406040:	7473616d 	.word	0x7473616d
  406044:	695f7265 	.word	0x695f7265
  406048:	3a74696e 	.word	0x3a74696e
  40604c:	69616620 	.word	0x69616620
  406050:	0d64656c 	.word	0x0d64656c
  406054:	0000000a 	.word	0x0000000a
  406058:	5f697774 	.word	0x5f697774
  40605c:	7473616d 	.word	0x7473616d
  406060:	695f7265 	.word	0x695f7265
  406064:	3a74696e 	.word	0x3a74696e
  406068:	63757320 	.word	0x63757320
  40606c:	73736563 	.word	0x73736563
  406070:	00000a0d 	.word	0x00000a0d
  406074:	5f697774 	.word	0x5f697774
  406078:	626f7270 	.word	0x626f7270
  40607c:	66203a65 	.word	0x66203a65
  406080:	656c6961 	.word	0x656c6961
  406084:	000a0d64 	.word	0x000a0d64
  406088:	5f697774 	.word	0x5f697774
  40608c:	626f7270 	.word	0x626f7270
  406090:	73203a65 	.word	0x73203a65
  406094:	65636375 	.word	0x65636375
  406098:	0a0d7373 	.word	0x0a0d7373
  40609c:	00000000 	.word	0x00000000
  4060a0:	62616e45 	.word	0x62616e45
  4060a4:	0064656c 	.word	0x0064656c
  4060a8:	61736944 	.word	0x61736944
  4060ac:	64656c62 	.word	0x64656c62
  4060b0:	00000000 	.word	0x00000000
  4060b4:	69766544 	.word	0x69766544
  4060b8:	203a6563 	.word	0x203a6563
  4060bc:	31257830 	.word	0x31257830
  4060c0:	000a0d78 	.word	0x000a0d78
  4060c4:	65656c53 	.word	0x65656c53
  4060c8:	6f4d2070 	.word	0x6f4d2070
  4060cc:	203a6564 	.word	0x203a6564
  4060d0:	0a0d7325 	.word	0x0a0d7325
  4060d4:	00000000 	.word	0x00000000
  4060d8:	636f6c43 	.word	0x636f6c43
  4060dc:	6f53206b 	.word	0x6f53206b
  4060e0:	65637275 	.word	0x65637275
  4060e4:	0000203a 	.word	0x0000203a
  4060e8:	65746e49 	.word	0x65746e49
  4060ec:	6c616e72 	.word	0x6c616e72
  4060f0:	484d3820 	.word	0x484d3820
  4060f4:	736f207a 	.word	0x736f207a
  4060f8:	6c6c6963 	.word	0x6c6c6963
  4060fc:	726f7461 	.word	0x726f7461
  406100:	00000a0d 	.word	0x00000a0d
  406104:	204c4c50 	.word	0x204c4c50
  406108:	68746977 	.word	0x68746977
  40610c:	61205820 	.word	0x61205820
  406110:	20736978 	.word	0x20736978
  406114:	6f727967 	.word	0x6f727967
  406118:	706f6373 	.word	0x706f6373
  40611c:	65722065 	.word	0x65722065
  406120:	65726566 	.word	0x65726566
  406124:	0d65636e 	.word	0x0d65636e
  406128:	0000000a 	.word	0x0000000a
  40612c:	6f727947 	.word	0x6f727947
  406130:	706f6373 	.word	0x706f6373
  406134:	00203a65 	.word	0x00203a65
  406138:	20303532 	.word	0x20303532
  40613c:	0d737064 	.word	0x0d737064
  406140:	0000000a 	.word	0x0000000a
  406144:	20303035 	.word	0x20303035
  406148:	0d737064 	.word	0x0d737064
  40614c:	0000000a 	.word	0x0000000a
  406150:	30303031 	.word	0x30303031
  406154:	73706420 	.word	0x73706420
  406158:	00000a0d 	.word	0x00000a0d
  40615c:	30303032 	.word	0x30303032
  406160:	73706420 	.word	0x73706420
  406164:	00000a0d 	.word	0x00000a0d
  406168:	5f657375 	.word	0x5f657375
  40616c:	696c6163 	.word	0x696c6163
  406170:	74617262 	.word	0x74617262
  406174:	25203a65 	.word	0x25203a65
  406178:	000a0d64 	.word	0x000a0d64
  40617c:	75746361 	.word	0x75746361
  406180:	745f6c61 	.word	0x745f6c61
  406184:	73657268 	.word	0x73657268
  406188:	646c6f68 	.word	0x646c6f68
  40618c:	6625203a 	.word	0x6625203a
  406190:	00000a0d 	.word	0x00000a0d
  406194:	5f737064 	.word	0x5f737064
  406198:	5f726570 	.word	0x5f726570
  40619c:	69676964 	.word	0x69676964
  4061a0:	25203a74 	.word	0x25203a74
  4061a4:	000a0d66 	.word	0x000a0d66
  4061a8:	676e6172 	.word	0x676e6172
  4061ac:	65705f65 	.word	0x65705f65
  4061b0:	69645f72 	.word	0x69645f72
  4061b4:	3a746967 	.word	0x3a746967
  4061b8:	0d662520 	.word	0x0d662520
  4061bc:	0000000a 	.word	0x0000000a
  4061c0:	76726573 	.word	0x76726573
  4061c4:	6e695f6f 	.word	0x6e695f6f
  4061c8:	0a0d7469 	.word	0x0a0d7469
  4061cc:	00000000 	.word	0x00000000
  4061d0:	72727563 	.word	0x72727563
  4061d4:	5f746e65 	.word	0x5f746e65
  4061d8:	79747564 	.word	0x79747564
  4061dc:	6379635f 	.word	0x6379635f
  4061e0:	203a656c 	.word	0x203a656c
  4061e4:	0a0d6425 	.word	0x0a0d6425
  4061e8:	00000000 	.word	0x00000000
  4061ec:	00000001 	.word	0x00000001
  4061f0:	00000002 	.word	0x00000002
  4061f4:	00000004 	.word	0x00000004
  4061f8:	00000008 	.word	0x00000008
  4061fc:	00000010 	.word	0x00000010
  406200:	00000020 	.word	0x00000020
  406204:	00000040 	.word	0x00000040
  406208:	00000080 	.word	0x00000080
  40620c:	00000100 	.word	0x00000100
  406210:	00000200 	.word	0x00000200
  406214:	00000400 	.word	0x00000400
  406218:	74727173 	.word	0x74727173
  40621c:	00000000 	.word	0x00000000

00406220 <atanlo>:
  406220:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  406230:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00406240 <atanhi>:
  406240:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  406250:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00406260 <_global_impure_ptr>:
  406260:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  406270:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  406280:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  406290:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4062a0:	4e614e00 00000000                       .NaN....

004062a8 <__sf_fake_stdin>:
	...

004062c8 <__sf_fake_stdout>:
	...

004062e8 <__sf_fake_stderr>:
	...

00406308 <__mprec_tens>:
  406308:	00000000 3ff00000 00000000 40240000     .......?......$@
  406318:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406328:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406338:	00000000 412e8480 00000000 416312d0     .......A......cA
  406348:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406358:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406368:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406378:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406388:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406398:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4063a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4063b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4063c8:	79d99db4 44ea7843                       ...yCx.D

004063d0 <__mprec_bigtens>:
  4063d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4063e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4063f0:	7f73bf3c 75154fdd                       <.s..O.u

004063f8 <p05.6097>:
  4063f8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406408:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  406418:	5849534f 00002e00                                OSIX...

0040641f <_ctype_>:
  40641f:	20202000 20202020 28282020 20282828     .         ((((( 
  40642f:	20202020 20202020 20202020 20202020                     
  40643f:	10108820 10101010 10101010 10101010      ...............
  40644f:	04040410 04040404 10040404 10101010     ................
  40645f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40646f:	01010101 01010101 01010101 10101010     ................
  40647f:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40648f:	02020202 02020202 02020202 10101010     ................
  40649f:	00000020 00000000 00000000 00000000      ...............
	...

00406520 <_init>:
  406520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406522:	bf00      	nop
  406524:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406526:	bc08      	pop	{r3}
  406528:	469e      	mov	lr, r3
  40652a:	4770      	bx	lr

0040652c <__init_array_start>:
  40652c:	004000f1 	.word	0x004000f1

00406530 <_fini>:
  406530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406532:	bf00      	nop
  406534:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406536:	bc08      	pop	{r3}
  406538:	469e      	mov	lr, r3
  40653a:	4770      	bx	lr
  40653c:	0000      	movs	r0, r0
	...

00406540 <__portable_delay_cycles_veneer>:
  406540:	f85f f000 	ldr.w	pc, [pc]	; 406544 <__portable_delay_cycles_veneer+0x4>
  406544:	20000001 	.word	0x20000001

00406548 <__fini_array_start>:
  406548:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <kp>:
2000000c:	0000 3f80                                   ...?

20000010 <SystemCoreClock>:
20000010:	0900 003d                                   ..=.

20000014 <__fdlib_version>:
20000014:	0001 0000                                   ....

20000018 <impure_data>:
20000018:	0000 0000 62a8 0040 62c8 0040 62e8 0040     .....b@..b@..b@.
	...

20000078 <_impure_ptr>:
20000078:	0018 2000                                   ... 

2000007c <__global_locale>:
2000007c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000009c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000011c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000013c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000015c:	4ff1 0040 4fa5 0040 0000 0000 641f 0040     .O@..O@......d@.
2000016c:	641d 0040 6409 0040 6409 0040 6409 0040     .d@..d@..d@..d@.
2000017c:	6409 0040 6409 0040 6409 0040 6409 0040     .d@..d@..d@..d@.
2000018c:	6409 0040 6409 0040 ffff ffff ffff ffff     .d@..d@.........
2000019c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
