
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005004  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e0  20000000  00405004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000002d8  200001e0  004051e4  000201e0  2**2
                  ALLOC
  3 .stack        00003000  200004b8  004054bc  000201e0  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011ed0  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fa5  00000000  00000000  00032148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005a66  00000000  00000000  000350ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000de8  00000000  00000000  0003ab53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c88  00000000  00000000  0003b93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016e36  00000000  00000000  0003c5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010f95  00000000  00000000  000533f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00055418  00000000  00000000  0006438e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c88  00000000  00000000  000b97a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034b8 	.word	0x200034b8
  400004:	004015bd 	.word	0x004015bd
  400008:	004015b9 	.word	0x004015b9
  40000c:	004015b9 	.word	0x004015b9
  400010:	004015b9 	.word	0x004015b9
  400014:	004015b9 	.word	0x004015b9
  400018:	004015b9 	.word	0x004015b9
	...
  40002c:	004015b9 	.word	0x004015b9
  400030:	004015b9 	.word	0x004015b9
  400034:	00000000 	.word	0x00000000
  400038:	004015b9 	.word	0x004015b9
  40003c:	004004e1 	.word	0x004004e1
  400040:	004015b9 	.word	0x004015b9
  400044:	004015b9 	.word	0x004015b9
  400048:	004015b9 	.word	0x004015b9
  40004c:	004015b9 	.word	0x004015b9
  400050:	004015b9 	.word	0x004015b9
  400054:	004015b9 	.word	0x004015b9
  400058:	004015b9 	.word	0x004015b9
  40005c:	004015b9 	.word	0x004015b9
  400060:	004015b9 	.word	0x004015b9
  400064:	004015b9 	.word	0x004015b9
  400068:	00000000 	.word	0x00000000
  40006c:	00401201 	.word	0x00401201
  400070:	00401211 	.word	0x00401211
  400074:	00401221 	.word	0x00401221
  400078:	004015b9 	.word	0x004015b9
  40007c:	004015b9 	.word	0x004015b9
	...
  400088:	004015b9 	.word	0x004015b9
  40008c:	004015b9 	.word	0x004015b9
  400090:	004015b9 	.word	0x004015b9
  400094:	004015b9 	.word	0x004015b9
  400098:	004015b9 	.word	0x004015b9
  40009c:	004015b9 	.word	0x004015b9
  4000a0:	004015b9 	.word	0x004015b9
  4000a4:	004015b9 	.word	0x004015b9
  4000a8:	004015b9 	.word	0x004015b9
  4000ac:	004015b9 	.word	0x004015b9
  4000b0:	004015b9 	.word	0x004015b9
  4000b4:	004015b9 	.word	0x004015b9
  4000b8:	004015b9 	.word	0x004015b9
  4000bc:	004015b9 	.word	0x004015b9
  4000c0:	004015b9 	.word	0x004015b9
  4000c4:	004015b9 	.word	0x004015b9
  4000c8:	004015b9 	.word	0x004015b9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e0 	.word	0x200001e0
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00405004 	.word	0x00405004

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001e4 	.word	0x200001e4
  40011c:	00405004 	.word	0x00405004
  400120:	00405004 	.word	0x00405004
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 fb24 	bl	401778 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 f8b0 	bl	401298 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 f8d8 	bl	4012ec <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 f8dc 	bl	4012fc <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 f8df 	bl	40130c <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 f86c 	bl	401230 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f001 fa84 	bl	401664 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f001 fb0b 	bl	401778 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	200002ac 	.word	0x200002ac
  4001a8:	200002a4 	.word	0x200002a4

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200002a8 	.word	0x200002a8
  4001f8:	200002ac 	.word	0x200002ac

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 f8d4 	bl	4013c0 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 f8c9 	bl	4013c0 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 f8d2 	bl	4013e8 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 f8c5 	bl	4013e8 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 f890 	bl	4013b0 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 f884 	bl	4013b0 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 f88a 	bl	4013d4 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 f87e 	bl	4013d4 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <handle_console>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

void handle_console(uint8_t cmd)
{
  4002f4:	b530      	push	{r4, r5, lr}
  4002f6:	b093      	sub	sp, #76	; 0x4c
    switch(cmd) {
  4002f8:	3802      	subs	r0, #2
  4002fa:	2804      	cmp	r0, #4
  4002fc:	d87b      	bhi.n	4003f6 <handle_console+0x102>
  4002fe:	e8df f000 	tbb	[pc, r0]
  400302:	1b33      	.short	0x1b33
  400304:	6303      	.short	0x6303
  400306:	4b          	.byte	0x4b
  400307:	00          	.byte	0x00
        case CS_PWMMAX:
        //servo_max();
        motor_max(motors[0]);
  400308:	4c3c      	ldr	r4, [pc, #240]	; (4003fc <handle_console+0x108>)
  40030a:	2544      	movs	r5, #68	; 0x44
  40030c:	462a      	mov	r2, r5
  40030e:	f104 0110 	add.w	r1, r4, #16
  400312:	4668      	mov	r0, sp
  400314:	f001 fac8 	bl	4018a8 <memcpy>
  400318:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  40031c:	f000 fbc4 	bl	400aa8 <motor_max>
        motor_max(motors[1]);
  400320:	462a      	mov	r2, r5
  400322:	f104 0164 	add.w	r1, r4, #100	; 0x64
  400326:	4668      	mov	r0, sp
  400328:	f001 fabe 	bl	4018a8 <memcpy>
  40032c:	3454      	adds	r4, #84	; 0x54
  40032e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  400332:	f000 fbb9 	bl	400aa8 <motor_max>
        break;
  400336:	e05e      	b.n	4003f6 <handle_console+0x102>
        case CS_PWMMID:
        //servo_mid();
        motor_mid(motors[0]);
  400338:	4c30      	ldr	r4, [pc, #192]	; (4003fc <handle_console+0x108>)
  40033a:	2544      	movs	r5, #68	; 0x44
  40033c:	462a      	mov	r2, r5
  40033e:	f104 0110 	add.w	r1, r4, #16
  400342:	4668      	mov	r0, sp
  400344:	f001 fab0 	bl	4018a8 <memcpy>
  400348:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  40034c:	f000 fb90 	bl	400a70 <motor_mid>
        motor_mid(motors[1]);
  400350:	462a      	mov	r2, r5
  400352:	f104 0164 	add.w	r1, r4, #100	; 0x64
  400356:	4668      	mov	r0, sp
  400358:	f001 faa6 	bl	4018a8 <memcpy>
  40035c:	3454      	adds	r4, #84	; 0x54
  40035e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  400362:	f000 fb85 	bl	400a70 <motor_mid>
        break;
  400366:	e046      	b.n	4003f6 <handle_console+0x102>
        case CS_PWMMIN:
        //servo_min();
        motor_min(motors[0]);
  400368:	4c24      	ldr	r4, [pc, #144]	; (4003fc <handle_console+0x108>)
  40036a:	2544      	movs	r5, #68	; 0x44
  40036c:	462a      	mov	r2, r5
  40036e:	f104 0110 	add.w	r1, r4, #16
  400372:	4668      	mov	r0, sp
  400374:	f001 fa98 	bl	4018a8 <memcpy>
  400378:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  40037c:	f000 fb5c 	bl	400a38 <motor_min>
        motor_min(motors[1]);
  400380:	462a      	mov	r2, r5
  400382:	f104 0164 	add.w	r1, r4, #100	; 0x64
  400386:	4668      	mov	r0, sp
  400388:	f001 fa8e 	bl	4018a8 <memcpy>
  40038c:	3454      	adds	r4, #84	; 0x54
  40038e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  400392:	f000 fb51 	bl	400a38 <motor_min>
        break;
  400396:	e02e      	b.n	4003f6 <handle_console+0x102>
        case CS_PWMSTEPDEC:
        //servo_decrement();
        motor_decrement(motors[0]);
  400398:	4c18      	ldr	r4, [pc, #96]	; (4003fc <handle_console+0x108>)
  40039a:	2544      	movs	r5, #68	; 0x44
  40039c:	462a      	mov	r2, r5
  40039e:	f104 0110 	add.w	r1, r4, #16
  4003a2:	4668      	mov	r0, sp
  4003a4:	f001 fa80 	bl	4018a8 <memcpy>
  4003a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  4003ac:	f000 fbb8 	bl	400b20 <motor_decrement>
        motor_decrement(motors[1]);
  4003b0:	462a      	mov	r2, r5
  4003b2:	f104 0164 	add.w	r1, r4, #100	; 0x64
  4003b6:	4668      	mov	r0, sp
  4003b8:	f001 fa76 	bl	4018a8 <memcpy>
  4003bc:	3454      	adds	r4, #84	; 0x54
  4003be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  4003c2:	f000 fbad 	bl	400b20 <motor_decrement>
        break;
  4003c6:	e016      	b.n	4003f6 <handle_console+0x102>
        case CS_PWMSTEPINC:
        //servo_increment();
        motor_increment(motors[0]);
  4003c8:	4c0c      	ldr	r4, [pc, #48]	; (4003fc <handle_console+0x108>)
  4003ca:	2544      	movs	r5, #68	; 0x44
  4003cc:	462a      	mov	r2, r5
  4003ce:	f104 0110 	add.w	r1, r4, #16
  4003d2:	4668      	mov	r0, sp
  4003d4:	f001 fa68 	bl	4018a8 <memcpy>
  4003d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  4003dc:	f000 fb80 	bl	400ae0 <motor_increment>
        motor_increment(motors[1]);
  4003e0:	462a      	mov	r2, r5
  4003e2:	f104 0164 	add.w	r1, r4, #100	; 0x64
  4003e6:	4668      	mov	r0, sp
  4003e8:	f001 fa5e 	bl	4018a8 <memcpy>
  4003ec:	3454      	adds	r4, #84	; 0x54
  4003ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  4003f2:	f000 fb75 	bl	400ae0 <motor_increment>
        break;               
    }
}
  4003f6:	b013      	add	sp, #76	; 0x4c
  4003f8:	bd30      	pop	{r4, r5, pc}
  4003fa:	bf00      	nop
  4003fc:	200002dc 	.word	0x200002dc

00400400 <main>:

int main(void)
{
  400400:	b570      	push	{r4, r5, r6, lr}
  400402:	b084      	sub	sp, #16
    sysclk_init();
  400404:	f7ff fe90 	bl	400128 <sysclk_init>
    board_init();
  400408:	f000 fbac 	bl	400b64 <board_init>

    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  40040c:	2013      	movs	r0, #19
  40040e:	f000 ff85 	bl	40131c <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400412:	201f      	movs	r0, #31
  400414:	f000 ff82 	bl	40131c <pmc_enable_periph_clk>
    cph_millis_init();
  400418:	f000 f86a 	bl	4004f0 <cph_millis_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40041c:	2009      	movs	r0, #9
  40041e:	f000 ff7d 	bl	40131c <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400422:	4c22      	ldr	r4, [pc, #136]	; (4004ac <main+0xac>)
  400424:	4b22      	ldr	r3, [pc, #136]	; (4004b0 <main+0xb0>)
  400426:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400428:	4a22      	ldr	r2, [pc, #136]	; (4004b4 <main+0xb4>)
  40042a:	4b23      	ldr	r3, [pc, #140]	; (4004b8 <main+0xb8>)
  40042c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40042e:	4a23      	ldr	r2, [pc, #140]	; (4004bc <main+0xbc>)
  400430:	4b23      	ldr	r3, [pc, #140]	; (4004c0 <main+0xc0>)
  400432:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400434:	4b23      	ldr	r3, [pc, #140]	; (4004c4 <main+0xc4>)
  400436:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400438:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40043c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  40043e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400442:	9303      	str	r3, [sp, #12]
  400444:	2009      	movs	r0, #9
  400446:	f000 ff69 	bl	40131c <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40044a:	a901      	add	r1, sp, #4
  40044c:	4620      	mov	r0, r4
  40044e:	f000 ff93 	bl	401378 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400452:	4c1d      	ldr	r4, [pc, #116]	; (4004c8 <main+0xc8>)
  400454:	6823      	ldr	r3, [r4, #0]
  400456:	2100      	movs	r1, #0
  400458:	6898      	ldr	r0, [r3, #8]
  40045a:	f001 ff21 	bl	4022a0 <setbuf>
	setbuf(stdin, NULL);
  40045e:	6823      	ldr	r3, [r4, #0]
  400460:	2100      	movs	r1, #0
  400462:	6858      	ldr	r0, [r3, #4]
  400464:	f001 ff1c 	bl	4022a0 <setbuf>
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  400468:	4818      	ldr	r0, [pc, #96]	; (4004cc <main+0xcc>)
  40046a:	f001 ff11 	bl	402290 <puts>
  40046e:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        printf(".");
  400470:	4e17      	ldr	r6, [pc, #92]	; (4004d0 <main+0xd0>)
        delay_ms(250);
  400472:	4d18      	ldr	r5, [pc, #96]	; (4004d4 <main+0xd4>)
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        printf(".");
  400474:	4630      	mov	r0, r6
  400476:	f001 fe99 	bl	4021ac <iprintf>
        delay_ms(250);
  40047a:	4628      	mov	r0, r5
  40047c:	f004 fdbc 	bl	404ff8 <__portable_delay_cycles_veneer>
    cph_millis_init();
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  400480:	3c01      	subs	r4, #1
  400482:	d1f7      	bne.n	400474 <main+0x74>
        printf(".");
        delay_ms(250);
    }
    printf("\r\n");
  400484:	4814      	ldr	r0, [pc, #80]	; (4004d8 <main+0xd8>)
  400486:	f001 fe91 	bl	4021ac <iprintf>

    
    if (imu_init()) {
  40048a:	f000 f9bb 	bl	400804 <imu_init>
  40048e:	b150      	cbz	r0, 4004a6 <main+0xa6>

        // servo_init();
        motor_init();
  400490:	f000 f9f8 	bl	400884 <motor_init>

        while (true) {
            uint8_t command = cph_console_tick();
            handle_console(command);
            delay_ms(100);
  400494:	4c11      	ldr	r4, [pc, #68]	; (4004dc <main+0xdc>)

        // servo_init();
        motor_init();

        while (true) {
            uint8_t command = cph_console_tick();
  400496:	f000 f83d 	bl	400514 <cph_console_tick>
            handle_console(command);
  40049a:	f7ff ff2b 	bl	4002f4 <handle_console>
            delay_ms(100);
  40049e:	4620      	mov	r0, r4
  4004a0:	f004 fdaa 	bl	404ff8 <__portable_delay_cycles_veneer>
  4004a4:	e7f7      	b.n	400496 <main+0x96>
    //         delay_ms(500); 
    //     }


    // }
}
  4004a6:	2000      	movs	r0, #0
  4004a8:	b004      	add	sp, #16
  4004aa:	bd70      	pop	{r4, r5, r6, pc}
  4004ac:	400e0800 	.word	0x400e0800
  4004b0:	200002ac 	.word	0x200002ac
  4004b4:	0040027d 	.word	0x0040027d
  4004b8:	200002a8 	.word	0x200002a8
  4004bc:	004001fd 	.word	0x004001fd
  4004c0:	200002a4 	.word	0x200002a4
  4004c4:	07270e00 	.word	0x07270e00
  4004c8:	20000070 	.word	0x20000070
  4004cc:	00404b04 	.word	0x00404b04
  4004d0:	00404b20 	.word	0x00404b20
  4004d4:	0020b28a 	.word	0x0020b28a
  4004d8:	00404b1c 	.word	0x00404b1c
  4004dc:	000d1437 	.word	0x000d1437

004004e0 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  4004e0:	4a02      	ldr	r2, [pc, #8]	; (4004ec <SysTick_Handler+0xc>)
  4004e2:	6813      	ldr	r3, [r2, #0]
  4004e4:	3301      	adds	r3, #1
  4004e6:	6013      	str	r3, [r2, #0]
  4004e8:	4770      	bx	lr
  4004ea:	bf00      	nop
  4004ec:	200001fc 	.word	0x200001fc

004004f0 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4004f0:	4b05      	ldr	r3, [pc, #20]	; (400508 <cph_millis_init+0x18>)
  4004f2:	4a06      	ldr	r2, [pc, #24]	; (40050c <cph_millis_init+0x1c>)
  4004f4:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4004f6:	21f0      	movs	r1, #240	; 0xf0
  4004f8:	4a05      	ldr	r2, [pc, #20]	; (400510 <cph_millis_init+0x20>)
  4004fa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4004fe:	2200      	movs	r2, #0
  400500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400502:	2207      	movs	r2, #7
  400504:	601a      	str	r2, [r3, #0]
  400506:	4770      	bx	lr
  400508:	e000e010 	.word	0xe000e010
  40050c:	0001d4bf 	.word	0x0001d4bf
  400510:	e000ed00 	.word	0xe000ed00

00400514 <cph_console_tick>:

uint8_t uc_char;
uint8_t uc_flag;

uint8_t cph_console_tick(void)
{
  400514:	b508      	push	{r3, lr}
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
  400516:	4912      	ldr	r1, [pc, #72]	; (400560 <cph_console_tick+0x4c>)
  400518:	4812      	ldr	r0, [pc, #72]	; (400564 <cph_console_tick+0x50>)
  40051a:	f000 ff51 	bl	4013c0 <uart_read>
  40051e:	b2c0      	uxtb	r0, r0
  400520:	4b11      	ldr	r3, [pc, #68]	; (400568 <cph_console_tick+0x54>)
  400522:	7018      	strb	r0, [r3, #0]
    if (!uc_flag) {
  400524:	b9c0      	cbnz	r0, 400558 <cph_console_tick+0x44>
        switch (uc_char) {
  400526:	4b0e      	ldr	r3, [pc, #56]	; (400560 <cph_console_tick+0x4c>)
  400528:	781b      	ldrb	r3, [r3, #0]
  40052a:	2b2d      	cmp	r3, #45	; 0x2d
  40052c:	d012      	beq.n	400554 <cph_console_tick+0x40>
  40052e:	d805      	bhi.n	40053c <cph_console_tick+0x28>
  400530:	2b0d      	cmp	r3, #13
  400532:	d013      	beq.n	40055c <cph_console_tick+0x48>
            case 'h':
            return CS_PWMMAX;
            case '-':
            return CS_PWMSTEPDEC;
            case '+':
            return CS_PWMSTEPINC;
  400534:	2b2b      	cmp	r3, #43	; 0x2b
  400536:	bf08      	it	eq
  400538:	2005      	moveq	r0, #5
  40053a:	bd08      	pop	{r3, pc}

uint8_t cph_console_tick(void)
{
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
    if (!uc_flag) {
        switch (uc_char) {
  40053c:	2b6c      	cmp	r3, #108	; 0x6c
  40053e:	d005      	beq.n	40054c <cph_console_tick+0x38>
  400540:	2b6d      	cmp	r3, #109	; 0x6d
  400542:	d005      	beq.n	400550 <cph_console_tick+0x3c>
            case 'l':
            return CS_PWMMIN;
            case 'm':
            return CS_PWMMID;
            case 'h':
            return CS_PWMMAX;
  400544:	2b68      	cmp	r3, #104	; 0x68
  400546:	bf08      	it	eq
  400548:	2004      	moveq	r0, #4
  40054a:	bd08      	pop	{r3, pc}
    if (!uc_flag) {
        switch (uc_char) {
            case '\r':
            return CS_INVALID;
            case 'l':
            return CS_PWMMIN;
  40054c:	2002      	movs	r0, #2
  40054e:	bd08      	pop	{r3, pc}
            case 'm':
            return CS_PWMMID;
  400550:	2003      	movs	r0, #3
  400552:	bd08      	pop	{r3, pc}
            case 'h':
            return CS_PWMMAX;
            case '-':
            return CS_PWMSTEPDEC;
  400554:	2006      	movs	r0, #6
  400556:	bd08      	pop	{r3, pc}
            return CS_PWMSTEPINC;
            default:
            return CS_NOINPUT;              
        }
    } else {
        return CS_NOINPUT;
  400558:	2000      	movs	r0, #0
  40055a:	bd08      	pop	{r3, pc}
{
    uc_flag = uart_read(CONSOLE_UART, &uc_char);
    if (!uc_flag) {
        switch (uc_char) {
            case '\r':
            return CS_INVALID;
  40055c:	2001      	movs	r0, #1
            return CS_NOINPUT;              
        }
    } else {
        return CS_NOINPUT;
    }
  40055e:	bd08      	pop	{r3, pc}
  400560:	2000047d 	.word	0x2000047d
  400564:	400e0800 	.word	0x400e0800
  400568:	2000047c 	.word	0x2000047c

0040056c <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  40056c:	b500      	push	{lr}
  40056e:	b089      	sub	sp, #36	; 0x24
  400570:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  400574:	2368      	movs	r3, #104	; 0x68
  400576:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  40057a:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  40057e:	2301      	movs	r3, #1
  400580:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  400582:	f10d 0207 	add.w	r2, sp, #7
  400586:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  400588:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  40058a:	a903      	add	r1, sp, #12
  40058c:	4806      	ldr	r0, [pc, #24]	; (4005a8 <write_register8+0x3c>)
  40058e:	f000 fc43 	bl	400e18 <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  400592:	b910      	cbnz	r0, 40059a <write_register8+0x2e>
        puts("write_register: success\r\n");
  400594:	4805      	ldr	r0, [pc, #20]	; (4005ac <write_register8+0x40>)
  400596:	f001 fe7b 	bl	402290 <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  40059a:	4805      	ldr	r0, [pc, #20]	; (4005b0 <write_register8+0x44>)
  40059c:	f004 fd2c 	bl	404ff8 <__portable_delay_cycles_veneer>
}
  4005a0:	b009      	add	sp, #36	; 0x24
  4005a2:	f85d fb04 	ldr.w	pc, [sp], #4
  4005a6:	bf00      	nop
  4005a8:	40018000 	.word	0x40018000
  4005ac:	00404b24 	.word	0x00404b24
  4005b0:	00014ed3 	.word	0x00014ed3

004005b4 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  4005b4:	b510      	push	{r4, lr}
  4005b6:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4005b8:	4b0e      	ldr	r3, [pc, #56]	; (4005f4 <read_register8+0x40>)
  4005ba:	2200      	movs	r2, #0
  4005bc:	601a      	str	r2, [r3, #0]
  4005be:	605a      	str	r2, [r3, #4]
  4005c0:	609a      	str	r2, [r3, #8]
  4005c2:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4005c4:	2268      	movs	r2, #104	; 0x68
  4005c6:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  4005ca:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4005ce:	2201      	movs	r2, #1
  4005d0:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  4005d2:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4005d4:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4005d6:	a901      	add	r1, sp, #4
  4005d8:	4807      	ldr	r0, [pc, #28]	; (4005f8 <read_register8+0x44>)
  4005da:	f000 fbb5 	bl	400d48 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4005de:	b910      	cbnz	r0, 4005e6 <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  4005e0:	4b04      	ldr	r3, [pc, #16]	; (4005f4 <read_register8+0x40>)
  4005e2:	781c      	ldrb	r4, [r3, #0]
  4005e4:	e000      	b.n	4005e8 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  4005e6:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  4005e8:	4804      	ldr	r0, [pc, #16]	; (4005fc <read_register8+0x48>)
  4005ea:	f004 fd05 	bl	404ff8 <__portable_delay_cycles_veneer>

    return value;
}
  4005ee:	4620      	mov	r0, r4
  4005f0:	b006      	add	sp, #24
  4005f2:	bd10      	pop	{r4, pc}
  4005f4:	20000200 	.word	0x20000200
  4005f8:	40018000 	.word	0x40018000
  4005fc:	00014ed3 	.word	0x00014ed3

00400600 <write_register_bit>:
    return length;
}


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  400600:	b570      	push	{r4, r5, r6, lr}
  400602:	4604      	mov	r4, r0
  400604:	460d      	mov	r5, r1
  400606:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400608:	f7ff ffd4 	bl	4005b4 <read_register8>

    if (state) {
  40060c:	b126      	cbz	r6, 400618 <write_register_bit+0x18>
        value |= (1 << pos);
  40060e:	2101      	movs	r1, #1
  400610:	40a9      	lsls	r1, r5
  400612:	4301      	orrs	r1, r0
  400614:	b2c9      	uxtb	r1, r1
  400616:	e004      	b.n	400622 <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400618:	2101      	movs	r1, #1
  40061a:	40a9      	lsls	r1, r5
  40061c:	ea20 0101 	bic.w	r1, r0, r1
  400620:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  400622:	4620      	mov	r0, r4
  400624:	f7ff ffa2 	bl	40056c <write_register8>
  400628:	bd70      	pop	{r4, r5, r6, pc}
  40062a:	bf00      	nop

0040062c <mpu_init>:
    value = read_register8(reg);
    return ((value >> pos) & 1);
}

bool mpu_init(void)
{
  40062c:	b500      	push	{lr}
  40062e:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400630:	4b0d      	ldr	r3, [pc, #52]	; (400668 <mpu_init+0x3c>)
  400632:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400634:	4b0d      	ldr	r3, [pc, #52]	; (40066c <mpu_init+0x40>)
  400636:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400638:	a901      	add	r1, sp, #4
  40063a:	480d      	ldr	r0, [pc, #52]	; (400670 <mpu_init+0x44>)
  40063c:	f000 fb54 	bl	400ce8 <twi_master_init>
  400640:	b138      	cbz	r0, 400652 <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  400642:	480c      	ldr	r0, [pc, #48]	; (400674 <mpu_init+0x48>)
  400644:	f001 fe24 	bl	402290 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400648:	480b      	ldr	r0, [pc, #44]	; (400678 <mpu_init+0x4c>)
  40064a:	f004 fcd5 	bl	404ff8 <__portable_delay_cycles_veneer>
        return false;
  40064e:	2000      	movs	r0, #0
  400650:	e006      	b.n	400660 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  400652:	480a      	ldr	r0, [pc, #40]	; (40067c <mpu_init+0x50>)
  400654:	f001 fe1c 	bl	402290 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400658:	4807      	ldr	r0, [pc, #28]	; (400678 <mpu_init+0x4c>)
  40065a:	f004 fccd 	bl	404ff8 <__portable_delay_cycles_veneer>
        return true;
  40065e:	2001      	movs	r0, #1
    }
    
}
  400660:	b005      	add	sp, #20
  400662:	f85d fb04 	ldr.w	pc, [sp], #4
  400666:	bf00      	nop
  400668:	07270e00 	.word	0x07270e00
  40066c:	00061a80 	.word	0x00061a80
  400670:	40018000 	.word	0x40018000
  400674:	00404b40 	.word	0x00404b40
  400678:	00014ed3 	.word	0x00014ed3
  40067c:	00404b5c 	.word	0x00404b5c

00400680 <mpu_probe>:

bool mpu_probe(void)
{
  400680:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  400682:	2168      	movs	r1, #104	; 0x68
  400684:	4809      	ldr	r0, [pc, #36]	; (4006ac <mpu_probe+0x2c>)
  400686:	f000 fc09 	bl	400e9c <twi_probe>
  40068a:	b138      	cbz	r0, 40069c <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  40068c:	4808      	ldr	r0, [pc, #32]	; (4006b0 <mpu_probe+0x30>)
  40068e:	f001 fdff 	bl	402290 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400692:	4808      	ldr	r0, [pc, #32]	; (4006b4 <mpu_probe+0x34>)
  400694:	f004 fcb0 	bl	404ff8 <__portable_delay_cycles_veneer>
        return false;
  400698:	2000      	movs	r0, #0
  40069a:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  40069c:	4806      	ldr	r0, [pc, #24]	; (4006b8 <mpu_probe+0x38>)
  40069e:	f001 fdf7 	bl	402290 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4006a2:	4804      	ldr	r0, [pc, #16]	; (4006b4 <mpu_probe+0x34>)
  4006a4:	f004 fca8 	bl	404ff8 <__portable_delay_cycles_veneer>
        return true;
  4006a8:	2001      	movs	r0, #1
    }
}
  4006aa:	bd08      	pop	{r3, pc}
  4006ac:	40018000 	.word	0x40018000
  4006b0:	00404b78 	.word	0x00404b78
  4006b4:	00014ed3 	.word	0x00014ed3
  4006b8:	00404b8c 	.word	0x00404b8c

004006bc <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  4006bc:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  4006be:	2075      	movs	r0, #117	; 0x75
  4006c0:	f7ff ff78 	bl	4005b4 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  4006c4:	bd08      	pop	{r3, pc}
  4006c6:	bf00      	nop

004006c8 <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  4006c8:	b510      	push	{r4, lr}
  4006ca:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  4006cc:	206b      	movs	r0, #107	; 0x6b
  4006ce:	f7ff ff71 	bl	4005b4 <read_register8>
    value &= 0b11111000; // mask
  4006d2:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  4006d6:	4321      	orrs	r1, r4
  4006d8:	206b      	movs	r0, #107	; 0x6b
  4006da:	f7ff ff47 	bl	40056c <write_register8>
  4006de:	bd10      	pop	{r4, pc}

004006e0 <mpu_set_gyro_scale>:

    return (uint8_t)value;
}

void mpu_set_gyro_scale(uint8_t scale)
{
  4006e0:	b510      	push	{r4, lr}
  4006e2:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  4006e4:	2803      	cmp	r0, #3
  4006e6:	d812      	bhi.n	40070e <mpu_set_gyro_scale+0x2e>
  4006e8:	e8df f000 	tbb	[pc, r0]
  4006ec:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  4006f0:	4a0d      	ldr	r2, [pc, #52]	; (400728 <mpu_set_gyro_scale+0x48>)
  4006f2:	4b0e      	ldr	r3, [pc, #56]	; (40072c <mpu_set_gyro_scale+0x4c>)
  4006f4:	601a      	str	r2, [r3, #0]
            break;
  4006f6:	e00a      	b.n	40070e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  4006f8:	4a0d      	ldr	r2, [pc, #52]	; (400730 <mpu_set_gyro_scale+0x50>)
  4006fa:	4b0c      	ldr	r3, [pc, #48]	; (40072c <mpu_set_gyro_scale+0x4c>)
  4006fc:	601a      	str	r2, [r3, #0]
            break;
  4006fe:	e006      	b.n	40070e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400700:	4a0c      	ldr	r2, [pc, #48]	; (400734 <mpu_set_gyro_scale+0x54>)
  400702:	4b0a      	ldr	r3, [pc, #40]	; (40072c <mpu_set_gyro_scale+0x4c>)
  400704:	601a      	str	r2, [r3, #0]
            break;
  400706:	e002      	b.n	40070e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400708:	4a0b      	ldr	r2, [pc, #44]	; (400738 <mpu_set_gyro_scale+0x58>)
  40070a:	4b08      	ldr	r3, [pc, #32]	; (40072c <mpu_set_gyro_scale+0x4c>)
  40070c:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  40070e:	201b      	movs	r0, #27
  400710:	f7ff ff50 	bl	4005b4 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400714:	f020 0018 	bic.w	r0, r0, #24
  400718:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  40071c:	b2c9      	uxtb	r1, r1
  40071e:	201b      	movs	r0, #27
  400720:	f7ff ff24 	bl	40056c <write_register8>
  400724:	bd10      	pop	{r4, pc}
  400726:	bf00      	nop
  400728:	3bfa1e3f 	.word	0x3bfa1e3f
  40072c:	20000214 	.word	0x20000214
  400730:	3c7a2270 	.word	0x3c7a2270
  400734:	3cf9bfdf 	.word	0x3cf9bfdf
  400738:	3d79c0ec 	.word	0x3d79c0ec

0040073c <mpu_set_accel_range>:

    return (uint8_t)value;
}

void mpu_set_accel_range(uint8_t range)
{
  40073c:	b510      	push	{r4, lr}
  40073e:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  400740:	2803      	cmp	r0, #3
  400742:	d812      	bhi.n	40076a <mpu_set_accel_range+0x2e>
  400744:	e8df f000 	tbb	[pc, r0]
  400748:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  40074c:	4a0d      	ldr	r2, [pc, #52]	; (400784 <mpu_set_accel_range+0x48>)
  40074e:	4b0e      	ldr	r3, [pc, #56]	; (400788 <mpu_set_accel_range+0x4c>)
  400750:	601a      	str	r2, [r3, #0]
            break;
  400752:	e00a      	b.n	40076a <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  400754:	4a0d      	ldr	r2, [pc, #52]	; (40078c <mpu_set_accel_range+0x50>)
  400756:	4b0c      	ldr	r3, [pc, #48]	; (400788 <mpu_set_accel_range+0x4c>)
  400758:	601a      	str	r2, [r3, #0]
            break;   
  40075a:	e006      	b.n	40076a <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  40075c:	4a0c      	ldr	r2, [pc, #48]	; (400790 <mpu_set_accel_range+0x54>)
  40075e:	4b0a      	ldr	r3, [pc, #40]	; (400788 <mpu_set_accel_range+0x4c>)
  400760:	601a      	str	r2, [r3, #0]
            break;   
  400762:	e002      	b.n	40076a <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400764:	4a0b      	ldr	r2, [pc, #44]	; (400794 <mpu_set_accel_range+0x58>)
  400766:	4b08      	ldr	r3, [pc, #32]	; (400788 <mpu_set_accel_range+0x4c>)
  400768:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  40076a:	201c      	movs	r0, #28
  40076c:	f7ff ff22 	bl	4005b4 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400770:	f020 0018 	bic.w	r0, r0, #24
  400774:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  400778:	b2c9      	uxtb	r1, r1
  40077a:	201c      	movs	r0, #28
  40077c:	f7ff fef6 	bl	40056c <write_register8>
  400780:	bd10      	pop	{r4, pc}
  400782:	bf00      	nop
  400784:	387fda40 	.word	0x387fda40
  400788:	20000210 	.word	0x20000210
  40078c:	38ffda40 	.word	0x38ffda40
  400790:	397fda40 	.word	0x397fda40
  400794:	39fff518 	.word	0x39fff518

00400798 <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400798:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  40079a:	4602      	mov	r2, r0
  40079c:	2106      	movs	r1, #6
  40079e:	206b      	movs	r0, #107	; 0x6b
  4007a0:	f7ff ff2e 	bl	400600 <write_register_bit>
  4007a4:	bd08      	pop	{r3, pc}
  4007a6:	bf00      	nop

004007a8 <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  4007a8:	b538      	push	{r3, r4, r5, lr}
  4007aa:	4605      	mov	r5, r0
  4007ac:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  4007ae:	4a11      	ldr	r2, [pc, #68]	; (4007f4 <mpu_begin+0x4c>)
  4007b0:	2300      	movs	r3, #0
  4007b2:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  4007b4:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  4007b6:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  4007b8:	2100      	movs	r1, #0
  4007ba:	4a0f      	ldr	r2, [pc, #60]	; (4007f8 <mpu_begin+0x50>)
  4007bc:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  4007be:	4a0f      	ldr	r2, [pc, #60]	; (4007fc <mpu_begin+0x54>)
  4007c0:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  4007c2:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  4007c4:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  4007c6:	4a0e      	ldr	r2, [pc, #56]	; (400800 <mpu_begin+0x58>)
  4007c8:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  4007ca:	f7ff ff77 	bl	4006bc <mpu_who_am_i>
  4007ce:	2868      	cmp	r0, #104	; 0x68
  4007d0:	d10d      	bne.n	4007ee <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  4007d2:	2001      	movs	r0, #1
  4007d4:	f7ff ff78 	bl	4006c8 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  4007d8:	4628      	mov	r0, r5
  4007da:	f7ff ff81 	bl	4006e0 <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  4007de:	4620      	mov	r0, r4
  4007e0:	f7ff ffac 	bl	40073c <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  4007e4:	2000      	movs	r0, #0
  4007e6:	f7ff ffd7 	bl	400798 <mpu_set_sleep_enabled>

    return true;
  4007ea:	2001      	movs	r0, #1
  4007ec:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  4007ee:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  4007f0:	bd38      	pop	{r3, r4, r5, pc}
  4007f2:	bf00      	nop
  4007f4:	20000460 	.word	0x20000460
  4007f8:	20000218 	.word	0x20000218
  4007fc:	2000042c 	.word	0x2000042c
  400800:	2000021c 	.word	0x2000021c

00400804 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  400804:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  400806:	4b0c      	ldr	r3, [pc, #48]	; (400838 <imu_init+0x34>)
  400808:	2200      	movs	r2, #0
  40080a:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  40080c:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  40080e:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  400810:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  400812:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  400814:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  400816:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  400818:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  40081a:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  40081c:	f7ff ff06 	bl	40062c <mpu_init>
  400820:	4604      	mov	r4, r0
  400822:	f7ff ff2d 	bl	400680 <mpu_probe>
  400826:	4020      	ands	r0, r4
  400828:	b2c4      	uxtb	r4, r0
  40082a:	2100      	movs	r1, #0
  40082c:	4608      	mov	r0, r1
  40082e:	f7ff ffbb 	bl	4007a8 <mpu_begin>
}
  400832:	4020      	ands	r0, r4
  400834:	bd10      	pop	{r4, pc}
  400836:	bf00      	nop
  400838:	20000480 	.word	0x20000480

0040083c <motor_config_pins>:
	motors[1].angle_max = AP_ANGLE_MAX;
	motors[1].timeout = 1000;
}

void motor_config_pins(t_motor_config motor_cfg)
{
  40083c:	b084      	sub	sp, #16
  40083e:	b538      	push	{r3, r4, r5, lr}
  400840:	ac04      	add	r4, sp, #16
  400842:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_configure_pin(motor_cfg.ul_pin, motor_cfg.ul_flag);
  400846:	9906      	ldr	r1, [sp, #24]
  400848:	9805      	ldr	r0, [sp, #20]
  40084a:	f000 fbb5 	bl	400fb8 <pio_configure_pin>

	pmc_enable_periph_clk(motor_cfg.ul_periph_clkid);
  40084e:	9807      	ldr	r0, [sp, #28]
  400850:	f000 fd64 	bl	40131c <pmc_enable_periph_clk>

	pwm_channel_disable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  400854:	ad04      	add	r5, sp, #16
  400856:	9908      	ldr	r1, [sp, #32]
  400858:	f855 0b14 	ldr.w	r0, [r5], #20
  40085c:	f000 fea6 	bl	4015ac <pwm_channel_disable>
	pwm_init(motor_cfg.p_pwm, &motor_cfg.clock_setting);
  400860:	ac04      	add	r4, sp, #16
  400862:	4629      	mov	r1, r5
  400864:	f854 0b20 	ldr.w	r0, [r4], #32
  400868:	f000 fdf4 	bl	401454 <pwm_init>

	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
  40086c:	4621      	mov	r1, r4
  40086e:	9804      	ldr	r0, [sp, #16]
  400870:	f000 fe14 	bl	40149c <pwm_channel_init>
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  400874:	9908      	ldr	r1, [sp, #32]
  400876:	9804      	ldr	r0, [sp, #16]
  400878:	f000 fe92 	bl	4015a0 <pwm_channel_enable>
}
  40087c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400880:	b004      	add	sp, #16
  400882:	4770      	bx	lr

00400884 <motor_init>:
uint32_t motor_current_duty = 0;
void motor_config_pins(t_motor_config motor_cfg);


void motor_init(void)
{
  400884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400888:	b0b3      	sub	sp, #204	; 0xcc
	printf("motor_init\r\n");
  40088a:	485b      	ldr	r0, [pc, #364]	; (4009f8 <motor_init+0x174>)
  40088c:	f001 fc8e 	bl	4021ac <iprintf>
        .ul_clka = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_mck = sysclk_get_cpu_hz()
	};

	t_motor_config motor_cfg0 = {
  400890:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  400894:	2248      	movs	r2, #72	; 0x48
  400896:	2100      	movs	r1, #0
  400898:	4648      	mov	r0, r9
  40089a:	f001 f810 	bl	4018be <memset>
		.pwm_channel.ul_period = MOTOR_PWM_PERIOD_TICKS,
		.pwm_channel.ul_duty = MOTOR_PWM_MIN,
		.pwm_channel.channel = EXT1_PWM_CHANNEL
	};

		t_motor_config motor_cfg1 = {
  40089e:	2248      	movs	r2, #72	; 0x48
  4008a0:	2100      	movs	r1, #0
  4008a2:	a80e      	add	r0, sp, #56	; 0x38
  4008a4:	f001 f80b 	bl	4018be <memset>
	};

	


	motor_config_pins(motor_cfg0);
  4008a8:	4b54      	ldr	r3, [pc, #336]	; (4009fc <motor_init+0x178>)
  4008aa:	9320      	str	r3, [sp, #128]	; 0x80
  4008ac:	2417      	movs	r4, #23
  4008ae:	9421      	str	r4, [sp, #132]	; 0x84
  4008b0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  4008b4:	9722      	str	r7, [sp, #136]	; 0x88
  4008b6:	231f      	movs	r3, #31
  4008b8:	9323      	str	r3, [sp, #140]	; 0x8c
  4008ba:	4e51      	ldr	r6, [pc, #324]	; (400a00 <motor_init+0x17c>)
  4008bc:	9625      	str	r6, [sp, #148]	; 0x94
  4008be:	9626      	str	r6, [sp, #152]	; 0x98
  4008c0:	4b50      	ldr	r3, [pc, #320]	; (400a04 <motor_init+0x180>)
  4008c2:	9327      	str	r3, [sp, #156]	; 0x9c
  4008c4:	f04f 080b 	mov.w	r8, #11
  4008c8:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  4008cc:	2501      	movs	r5, #1
  4008ce:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  4008d2:	f240 4a7e 	movw	sl, #1150	; 0x47e
  4008d6:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  4008da:	f644 6b20 	movw	fp, #20000	; 0x4e20
  4008de:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  4008e2:	46ee      	mov	lr, sp
  4008e4:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
  4008e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4008ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4008f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4008f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4008f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4008fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  400900:	e89c 0003 	ldmia.w	ip, {r0, r1}
  400904:	e88e 0003 	stmia.w	lr, {r0, r1}
  400908:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  40090c:	f7ff ff96 	bl	40083c <motor_config_pins>
	motor_config_pins(motor_cfg1);
  400910:	4b3a      	ldr	r3, [pc, #232]	; (4009fc <motor_init+0x178>)
  400912:	930e      	str	r3, [sp, #56]	; 0x38
  400914:	2353      	movs	r3, #83	; 0x53
  400916:	930f      	str	r3, [sp, #60]	; 0x3c
  400918:	9710      	str	r7, [sp, #64]	; 0x40
  40091a:	231f      	movs	r3, #31
  40091c:	9311      	str	r3, [sp, #68]	; 0x44
  40091e:	9512      	str	r5, [sp, #72]	; 0x48
  400920:	9613      	str	r6, [sp, #76]	; 0x4c
  400922:	9614      	str	r6, [sp, #80]	; 0x50
  400924:	4b37      	ldr	r3, [pc, #220]	; (400a04 <motor_init+0x180>)
  400926:	9315      	str	r3, [sp, #84]	; 0x54
  400928:	9516      	str	r5, [sp, #88]	; 0x58
  40092a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  40092e:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  400932:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  400936:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  40093a:	46ee      	mov	lr, sp
  40093c:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  400940:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  400944:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  400948:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40094c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  400950:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  400954:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  400958:	e89c 0003 	ldmia.w	ip, {r0, r1}
  40095c:	e88e 0003 	stmia.w	lr, {r0, r1}
  400960:	ab0e      	add	r3, sp, #56	; 0x38
  400962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400964:	f7ff ff6a 	bl	40083c <motor_config_pins>

	motors[0].config = motor_cfg0;
  400968:	4b24      	ldr	r3, [pc, #144]	; (4009fc <motor_init+0x178>)
  40096a:	9320      	str	r3, [sp, #128]	; 0x80
  40096c:	9421      	str	r4, [sp, #132]	; 0x84
  40096e:	9722      	str	r7, [sp, #136]	; 0x88
  400970:	231f      	movs	r3, #31
  400972:	9323      	str	r3, [sp, #140]	; 0x8c
  400974:	9625      	str	r6, [sp, #148]	; 0x94
  400976:	9626      	str	r6, [sp, #152]	; 0x98
  400978:	4b22      	ldr	r3, [pc, #136]	; (400a04 <motor_init+0x180>)
  40097a:	9327      	str	r3, [sp, #156]	; 0x9c
  40097c:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  400980:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  400984:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  400988:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  40098c:	4c1e      	ldr	r4, [pc, #120]	; (400a08 <motor_init+0x184>)
  40098e:	2248      	movs	r2, #72	; 0x48
  400990:	4649      	mov	r1, r9
  400992:	4620      	mov	r0, r4
  400994:	f000 ff88 	bl	4018a8 <memcpy>
	motors[0].angle_min = AP_ANGLE_MIN;
  400998:	f06f 0359 	mvn.w	r3, #89	; 0x59
  40099c:	64a3      	str	r3, [r4, #72]	; 0x48
	motors[0].angle_max = AP_ANGLE_MAX;
  40099e:	235a      	movs	r3, #90	; 0x5a
  4009a0:	64e3      	str	r3, [r4, #76]	; 0x4c
	motors[0].timeout = 1000;
  4009a2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  4009a6:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50

	motors[1].config = motor_cfg1;
  4009aa:	4b14      	ldr	r3, [pc, #80]	; (4009fc <motor_init+0x178>)
  4009ac:	930e      	str	r3, [sp, #56]	; 0x38
  4009ae:	2353      	movs	r3, #83	; 0x53
  4009b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4009b2:	9710      	str	r7, [sp, #64]	; 0x40
  4009b4:	231f      	movs	r3, #31
  4009b6:	9311      	str	r3, [sp, #68]	; 0x44
  4009b8:	9512      	str	r5, [sp, #72]	; 0x48
  4009ba:	9613      	str	r6, [sp, #76]	; 0x4c
  4009bc:	9614      	str	r6, [sp, #80]	; 0x50
  4009be:	4b11      	ldr	r3, [pc, #68]	; (400a04 <motor_init+0x180>)
  4009c0:	9315      	str	r3, [sp, #84]	; 0x54
  4009c2:	9516      	str	r5, [sp, #88]	; 0x58
  4009c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  4009c8:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  4009cc:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  4009d0:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  4009d4:	2248      	movs	r2, #72	; 0x48
  4009d6:	a90e      	add	r1, sp, #56	; 0x38
  4009d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
  4009dc:	f000 ff64 	bl	4018a8 <memcpy>
	motors[1].angle_min = AP_ANGLE_MIN;
  4009e0:	f06f 0359 	mvn.w	r3, #89	; 0x59
  4009e4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	motors[1].angle_max = AP_ANGLE_MAX;
  4009e8:	235a      	movs	r3, #90	; 0x5a
  4009ea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	motors[1].timeout = 1000;
  4009ee:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
}
  4009f2:	b033      	add	sp, #204	; 0xcc
  4009f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4009f8:	00404cc4 	.word	0x00404cc4
  4009fc:	40020000 	.word	0x40020000
  400a00:	000f4240 	.word	0x000f4240
  400a04:	07270e00 	.word	0x07270e00
  400a08:	200002dc 	.word	0x200002dc

00400a0c <motor_set_power>:
{

}

void motor_set_power(t_motor motor, uint32_t power)
{
  400a0c:	b084      	sub	sp, #16
  400a0e:	b508      	push	{r3, lr}
  400a10:	f10d 0e08 	add.w	lr, sp, #8
  400a14:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  400a18:	9917      	ldr	r1, [sp, #92]	; 0x5c
	motor.config.pwm_channel.ul_duty = power;
  400a1a:	910d      	str	r1, [sp, #52]	; 0x34
	printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
  400a1c:	4805      	ldr	r0, [pc, #20]	; (400a34 <motor_set_power+0x28>)
  400a1e:	f001 fbc5 	bl	4021ac <iprintf>
	pwm_channel_update_duty(motor.config.p_pwm, &motor.config.pwm_channel, motor.config.pwm_channel.ul_duty);
  400a22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  400a24:	a90a      	add	r1, sp, #40	; 0x28
  400a26:	9802      	ldr	r0, [sp, #8]
  400a28:	f000 fdac 	bl	401584 <pwm_channel_update_duty>
}
  400a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400a30:	b004      	add	sp, #16
  400a32:	4770      	bx	lr
  400a34:	00404cd4 	.word	0x00404cd4

00400a38 <motor_min>:

void motor_min(t_motor motor)
{
  400a38:	b084      	sub	sp, #16
  400a3a:	b500      	push	{lr}
  400a3c:	b093      	sub	sp, #76	; 0x4c
  400a3e:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  400a42:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MIN;
  400a46:	f240 437e 	movw	r3, #1150	; 0x47e
  400a4a:	4a08      	ldr	r2, [pc, #32]	; (400a6c <motor_min+0x34>)
  400a4c:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, MOTOR_PWM_MIN);
  400a4e:	9311      	str	r3, [sp, #68]	; 0x44
  400a50:	2244      	movs	r2, #68	; 0x44
  400a52:	a918      	add	r1, sp, #96	; 0x60
  400a54:	4668      	mov	r0, sp
  400a56:	f000 ff27 	bl	4018a8 <memcpy>
  400a5a:	ab14      	add	r3, sp, #80	; 0x50
  400a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400a5e:	f7ff ffd5 	bl	400a0c <motor_set_power>
}
  400a62:	b013      	add	sp, #76	; 0x4c
  400a64:	f85d eb04 	ldr.w	lr, [sp], #4
  400a68:	b004      	add	sp, #16
  400a6a:	4770      	bx	lr
  400a6c:	20000220 	.word	0x20000220

00400a70 <motor_mid>:

void motor_mid(t_motor motor)
{
  400a70:	b084      	sub	sp, #16
  400a72:	b500      	push	{lr}
  400a74:	b093      	sub	sp, #76	; 0x4c
  400a76:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  400a7a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MID;
  400a7e:	f240 5346 	movw	r3, #1350	; 0x546
  400a82:	4a08      	ldr	r2, [pc, #32]	; (400aa4 <motor_mid+0x34>)
  400a84:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  400a86:	9311      	str	r3, [sp, #68]	; 0x44
  400a88:	2244      	movs	r2, #68	; 0x44
  400a8a:	a918      	add	r1, sp, #96	; 0x60
  400a8c:	4668      	mov	r0, sp
  400a8e:	f000 ff0b 	bl	4018a8 <memcpy>
  400a92:	ab14      	add	r3, sp, #80	; 0x50
  400a94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400a96:	f7ff ffb9 	bl	400a0c <motor_set_power>
}
  400a9a:	b013      	add	sp, #76	; 0x4c
  400a9c:	f85d eb04 	ldr.w	lr, [sp], #4
  400aa0:	b004      	add	sp, #16
  400aa2:	4770      	bx	lr
  400aa4:	20000220 	.word	0x20000220

00400aa8 <motor_max>:

void motor_max(t_motor motor)
{
  400aa8:	b084      	sub	sp, #16
  400aaa:	b500      	push	{lr}
  400aac:	b093      	sub	sp, #76	; 0x4c
  400aae:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  400ab2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MAX;
  400ab6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  400aba:	4a08      	ldr	r2, [pc, #32]	; (400adc <motor_max+0x34>)
  400abc:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, motor_current_duty);
  400abe:	9311      	str	r3, [sp, #68]	; 0x44
  400ac0:	2244      	movs	r2, #68	; 0x44
  400ac2:	a918      	add	r1, sp, #96	; 0x60
  400ac4:	4668      	mov	r0, sp
  400ac6:	f000 feef 	bl	4018a8 <memcpy>
  400aca:	ab14      	add	r3, sp, #80	; 0x50
  400acc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400ace:	f7ff ff9d 	bl	400a0c <motor_set_power>
}
  400ad2:	b013      	add	sp, #76	; 0x4c
  400ad4:	f85d eb04 	ldr.w	lr, [sp], #4
  400ad8:	b004      	add	sp, #16
  400ada:	4770      	bx	lr
  400adc:	20000220 	.word	0x20000220

00400ae0 <motor_increment>:

void motor_increment(t_motor motor)
{
  400ae0:	b084      	sub	sp, #16
  400ae2:	b500      	push	{lr}
  400ae4:	b093      	sub	sp, #76	; 0x4c
  400ae6:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  400aea:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    if (motor_current_duty == MOTOR_PWM_MAX)
  400aee:	4b0b      	ldr	r3, [pc, #44]	; (400b1c <motor_increment+0x3c>)
  400af0:	681b      	ldr	r3, [r3, #0]
  400af2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  400af6:	d00c      	beq.n	400b12 <motor_increment+0x32>
        return;
	motor_current_duty += MOTOR_PWM_STEP;
  400af8:	330a      	adds	r3, #10
  400afa:	4a08      	ldr	r2, [pc, #32]	; (400b1c <motor_increment+0x3c>)
  400afc:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  400afe:	9311      	str	r3, [sp, #68]	; 0x44
  400b00:	2244      	movs	r2, #68	; 0x44
  400b02:	a918      	add	r1, sp, #96	; 0x60
  400b04:	4668      	mov	r0, sp
  400b06:	f000 fecf 	bl	4018a8 <memcpy>
  400b0a:	ab14      	add	r3, sp, #80	; 0x50
  400b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400b0e:	f7ff ff7d 	bl	400a0c <motor_set_power>
}
  400b12:	b013      	add	sp, #76	; 0x4c
  400b14:	f85d eb04 	ldr.w	lr, [sp], #4
  400b18:	b004      	add	sp, #16
  400b1a:	4770      	bx	lr
  400b1c:	20000220 	.word	0x20000220

00400b20 <motor_decrement>:

void motor_decrement(t_motor motor)
{
  400b20:	b084      	sub	sp, #16
  400b22:	b500      	push	{lr}
  400b24:	b093      	sub	sp, #76	; 0x4c
  400b26:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  400b2a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    if (motor_current_duty == MOTOR_PWM_MIN)
  400b2e:	4b0c      	ldr	r3, [pc, #48]	; (400b60 <motor_decrement+0x40>)
  400b30:	681b      	ldr	r3, [r3, #0]
  400b32:	f240 427e 	movw	r2, #1150	; 0x47e
  400b36:	4293      	cmp	r3, r2
  400b38:	d00c      	beq.n	400b54 <motor_decrement+0x34>
        return;
	motor_current_duty -= MOTOR_PWM_STEP;
  400b3a:	3b0a      	subs	r3, #10
  400b3c:	4a08      	ldr	r2, [pc, #32]	; (400b60 <motor_decrement+0x40>)
  400b3e:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  400b40:	9311      	str	r3, [sp, #68]	; 0x44
  400b42:	2244      	movs	r2, #68	; 0x44
  400b44:	a918      	add	r1, sp, #96	; 0x60
  400b46:	4668      	mov	r0, sp
  400b48:	f000 feae 	bl	4018a8 <memcpy>
  400b4c:	ab14      	add	r3, sp, #80	; 0x50
  400b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400b50:	f7ff ff5c 	bl	400a0c <motor_set_power>
  400b54:	b013      	add	sp, #76	; 0x4c
  400b56:	f85d eb04 	ldr.w	lr, [sp], #4
  400b5a:	b004      	add	sp, #16
  400b5c:	4770      	bx	lr
  400b5e:	bf00      	nop
  400b60:	20000220 	.word	0x20000220

00400b64 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400b64:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  400b66:	482c      	ldr	r0, [pc, #176]	; (400c18 <board_init+0xb4>)
  400b68:	f000 fc02 	bl	401370 <wdt_disable>
  400b6c:	200b      	movs	r0, #11
  400b6e:	f000 fbd5 	bl	40131c <pmc_enable_periph_clk>
  400b72:	200c      	movs	r0, #12
  400b74:	f000 fbd2 	bl	40131c <pmc_enable_periph_clk>
  400b78:	200d      	movs	r0, #13
  400b7a:	f000 fbcf 	bl	40131c <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b7e:	4b27      	ldr	r3, [pc, #156]	; (400c1c <board_init+0xb8>)
  400b80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400b84:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b86:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b88:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b8c:	4c24      	ldr	r4, [pc, #144]	; (400c20 <board_init+0xbc>)
  400b8e:	2504      	movs	r5, #4
  400b90:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b92:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400b96:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400b98:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400b9c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400b9e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400ba0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400ba4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400ba6:	f022 0204 	bic.w	r2, r2, #4
  400baa:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400bac:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400bae:	f022 0204 	bic.w	r2, r2, #4
  400bb2:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400bb8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bba:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400bc4:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bc6:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bc8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400bcc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400bd0:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400bd2:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400bd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400bd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400bdc:	210c      	movs	r1, #12
  400bde:	4811      	ldr	r0, [pc, #68]	; (400c24 <board_init+0xc0>)
  400be0:	f000 fa76 	bl	4010d0 <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400be4:	4e10      	ldr	r6, [pc, #64]	; (400c28 <board_init+0xc4>)
  400be6:	4631      	mov	r1, r6
  400be8:	2003      	movs	r0, #3
  400bea:	f000 f9e5 	bl	400fb8 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  400bee:	4631      	mov	r1, r6
  400bf0:	4628      	mov	r0, r5
  400bf2:	f000 f9e1 	bl	400fb8 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400bf6:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400bf8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400bfc:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400bfe:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400c00:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400c04:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400c06:	f023 0304 	bic.w	r3, r3, #4
  400c0a:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400c0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400c0e:	f023 0304 	bic.w	r3, r3, #4
  400c12:	6763      	str	r3, [r4, #116]	; 0x74
  400c14:	bd70      	pop	{r4, r5, r6, pc}
  400c16:	bf00      	nop
  400c18:	400e1450 	.word	0x400e1450
  400c1c:	400e1200 	.word	0x400e1200
  400c20:	400e0e00 	.word	0x400e0e00
  400c24:	400e1000 	.word	0x400e1000
  400c28:	08000001 	.word	0x08000001

00400c2c <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400c2c:	4b2b      	ldr	r3, [pc, #172]	; (400cdc <twi_set_speed+0xb0>)
  400c2e:	4299      	cmp	r1, r3
  400c30:	d849      	bhi.n	400cc6 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400c32:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400c36:	4299      	cmp	r1, r3
  400c38:	d92b      	bls.n	400c92 <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  400c3a:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400c3c:	4c28      	ldr	r4, [pc, #160]	; (400ce0 <twi_set_speed+0xb4>)
  400c3e:	fba4 3402 	umull	r3, r4, r4, r2
  400c42:	0ba4      	lsrs	r4, r4, #14
  400c44:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400c46:	4b27      	ldr	r3, [pc, #156]	; (400ce4 <twi_set_speed+0xb8>)
  400c48:	440b      	add	r3, r1
  400c4a:	009b      	lsls	r3, r3, #2
  400c4c:	fbb2 f2f3 	udiv	r2, r2, r3
  400c50:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c52:	2cff      	cmp	r4, #255	; 0xff
  400c54:	d939      	bls.n	400cca <twi_set_speed+0x9e>
  400c56:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  400c58:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  400c5a:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c5c:	2cff      	cmp	r4, #255	; 0xff
  400c5e:	d902      	bls.n	400c66 <twi_set_speed+0x3a>
  400c60:	2b07      	cmp	r3, #7
  400c62:	d1f9      	bne.n	400c58 <twi_set_speed+0x2c>
  400c64:	e00a      	b.n	400c7c <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c66:	2aff      	cmp	r2, #255	; 0xff
  400c68:	d908      	bls.n	400c7c <twi_set_speed+0x50>
  400c6a:	2b06      	cmp	r3, #6
  400c6c:	d900      	bls.n	400c70 <twi_set_speed+0x44>
  400c6e:	e005      	b.n	400c7c <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  400c70:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  400c72:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c74:	2aff      	cmp	r2, #255	; 0xff
  400c76:	d901      	bls.n	400c7c <twi_set_speed+0x50>
  400c78:	2b06      	cmp	r3, #6
  400c7a:	d9f9      	bls.n	400c70 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400c7c:	0212      	lsls	r2, r2, #8
  400c7e:	b292      	uxth	r2, r2
  400c80:	041b      	lsls	r3, r3, #16
  400c82:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400c86:	431a      	orrs	r2, r3
  400c88:	b2e4      	uxtb	r4, r4
  400c8a:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400c8c:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400c8e:	2000      	movs	r0, #0
  400c90:	e021      	b.n	400cd6 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400c92:	0049      	lsls	r1, r1, #1
  400c94:	fbb2 f2f1 	udiv	r2, r2, r1
  400c98:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400c9a:	2aff      	cmp	r2, #255	; 0xff
  400c9c:	d907      	bls.n	400cae <twi_set_speed+0x82>
  400c9e:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  400ca0:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  400ca2:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400ca4:	2aff      	cmp	r2, #255	; 0xff
  400ca6:	d903      	bls.n	400cb0 <twi_set_speed+0x84>
  400ca8:	2b07      	cmp	r3, #7
  400caa:	d1f9      	bne.n	400ca0 <twi_set_speed+0x74>
  400cac:	e000      	b.n	400cb0 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400cae:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400cb0:	0211      	lsls	r1, r2, #8
  400cb2:	b289      	uxth	r1, r1
  400cb4:	041b      	lsls	r3, r3, #16
  400cb6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400cba:	430b      	orrs	r3, r1
  400cbc:	b2d2      	uxtb	r2, r2
  400cbe:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400cc0:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400cc2:	2000      	movs	r0, #0
}
  400cc4:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400cc6:	2001      	movs	r0, #1
  400cc8:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400cca:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400ccc:	bf88      	it	hi
  400cce:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400cd0:	d8ce      	bhi.n	400c70 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400cd2:	2300      	movs	r3, #0
  400cd4:	e7d2      	b.n	400c7c <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  400cd6:	bc10      	pop	{r4}
  400cd8:	4770      	bx	lr
  400cda:	bf00      	nop
  400cdc:	00061a80 	.word	0x00061a80
  400ce0:	057619f1 	.word	0x057619f1
  400ce4:	3ffd1200 	.word	0x3ffd1200

00400ce8 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400ce8:	b538      	push	{r3, r4, r5, lr}
  400cea:	4604      	mov	r4, r0
  400cec:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  400cf2:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400cf4:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400cf6:	2380      	movs	r3, #128	; 0x80
  400cf8:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400cfa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400cfc:	2308      	movs	r3, #8
  400cfe:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400d00:	2320      	movs	r3, #32
  400d02:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400d04:	2304      	movs	r3, #4
  400d06:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400d08:	680a      	ldr	r2, [r1, #0]
  400d0a:	6849      	ldr	r1, [r1, #4]
  400d0c:	f7ff ff8e 	bl	400c2c <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  400d10:	2801      	cmp	r0, #1
  400d12:	bf14      	ite	ne
  400d14:	2000      	movne	r0, #0
  400d16:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400d18:	7a6b      	ldrb	r3, [r5, #9]
  400d1a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400d1c:	bf04      	itt	eq
  400d1e:	2340      	moveq	r3, #64	; 0x40
  400d20:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400d22:	bd38      	pop	{r3, r4, r5, pc}

00400d24 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400d24:	460a      	mov	r2, r1
  400d26:	b159      	cbz	r1, 400d40 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  400d28:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  400d2a:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  400d2c:	bfc4      	itt	gt
  400d2e:	7841      	ldrbgt	r1, [r0, #1]
  400d30:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  400d34:	2a02      	cmp	r2, #2
  400d36:	dd05      	ble.n	400d44 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  400d38:	7880      	ldrb	r0, [r0, #2]
  400d3a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  400d3e:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400d40:	2000      	movs	r0, #0
  400d42:	4770      	bx	lr
  400d44:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  400d46:	4770      	bx	lr

00400d48 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400d4c:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  400d4e:	2c00      	cmp	r4, #0
  400d50:	d045      	beq.n	400dde <twi_master_read+0x96>
  400d52:	460b      	mov	r3, r1
  400d54:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400d56:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400d58:	2000      	movs	r0, #0
  400d5a:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400d5c:	684a      	ldr	r2, [r1, #4]
  400d5e:	0212      	lsls	r2, r2, #8
  400d60:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400d64:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  400d68:	7c1a      	ldrb	r2, [r3, #16]
  400d6a:	0412      	lsls	r2, r2, #16
  400d6c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  400d70:	430a      	orrs	r2, r1
  400d72:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400d74:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400d76:	6859      	ldr	r1, [r3, #4]
  400d78:	4618      	mov	r0, r3
  400d7a:	f7ff ffd3 	bl	400d24 <twi_mk_addr>
  400d7e:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400d80:	2c01      	cmp	r4, #1
  400d82:	d104      	bne.n	400d8e <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400d84:	2303      	movs	r3, #3
  400d86:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  400d88:	f04f 0e01 	mov.w	lr, #1
  400d8c:	e033      	b.n	400df6 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400d8e:	2301      	movs	r3, #1
  400d90:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  400d92:	f04f 0e00 	mov.w	lr, #0
  400d96:	e02e      	b.n	400df6 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  400d98:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400d9a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400d9c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400da0:	d120      	bne.n	400de4 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400da2:	1e51      	subs	r1, r2, #1
  400da4:	b30a      	cbz	r2, 400dea <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400da6:	2c01      	cmp	r4, #1
  400da8:	d106      	bne.n	400db8 <twi_master_read+0x70>
  400daa:	f1be 0f00 	cmp.w	lr, #0
  400dae:	d12f      	bne.n	400e10 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  400db0:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  400db4:	46e6      	mov	lr, ip
  400db6:	e02b      	b.n	400e10 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400db8:	f013 0f02 	tst.w	r3, #2
  400dbc:	d005      	beq.n	400dca <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400dbe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400dc0:	7033      	strb	r3, [r6, #0]

		cnt--;
  400dc2:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400dc4:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400dc6:	463a      	mov	r2, r7
  400dc8:	e000      	b.n	400dcc <twi_master_read+0x84>
  400dca:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400dcc:	2c00      	cmp	r4, #0
  400dce:	d1e4      	bne.n	400d9a <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400dd0:	6a2b      	ldr	r3, [r5, #32]
  400dd2:	f013 0f01 	tst.w	r3, #1
  400dd6:	d0fb      	beq.n	400dd0 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  400dd8:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  400dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400dde:	2001      	movs	r0, #1
  400de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400de4:	2005      	movs	r0, #5
  400de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400dea:	2009      	movs	r0, #9
  400dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400df0:	2005      	movs	r0, #5
  400df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400df6:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400df8:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400dfc:	d1f8      	bne.n	400df0 <twi_master_read+0xa8>
  400dfe:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  400e02:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  400e06:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  400e0a:	f04f 0c01 	mov.w	ip, #1
  400e0e:	e7ca      	b.n	400da6 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400e10:	f013 0f02 	tst.w	r3, #2
  400e14:	d0c0      	beq.n	400d98 <twi_master_read+0x50>
  400e16:	e7d2      	b.n	400dbe <twi_master_read+0x76>

00400e18 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400e18:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400e1a:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  400e1c:	2d00      	cmp	r5, #0
  400e1e:	d034      	beq.n	400e8a <twi_master_write+0x72>
  400e20:	460b      	mov	r3, r1
  400e22:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400e24:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400e26:	2000      	movs	r0, #0
  400e28:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400e2a:	7c0a      	ldrb	r2, [r1, #16]
  400e2c:	0412      	lsls	r2, r2, #16
  400e2e:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  400e32:	685a      	ldr	r2, [r3, #4]
  400e34:	0212      	lsls	r2, r2, #8
  400e36:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400e3a:	430a      	orrs	r2, r1
  400e3c:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400e3e:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400e40:	6859      	ldr	r1, [r3, #4]
  400e42:	4618      	mov	r0, r3
  400e44:	f7ff ff6e 	bl	400d24 <twi_mk_addr>
  400e48:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400e4a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400e4c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400e50:	d004      	beq.n	400e5c <twi_master_write+0x44>
  400e52:	e01c      	b.n	400e8e <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400e54:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400e56:	f413 7f80 	tst.w	r3, #256	; 0x100
  400e5a:	d11a      	bne.n	400e92 <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  400e5c:	f013 0f04 	tst.w	r3, #4
  400e60:	d003      	beq.n	400e6a <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400e62:	7833      	ldrb	r3, [r6, #0]
  400e64:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  400e66:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400e68:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400e6a:	2d00      	cmp	r5, #0
  400e6c:	d1f2      	bne.n	400e54 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400e6e:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400e70:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400e74:	d10f      	bne.n	400e96 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400e76:	f013 0f04 	tst.w	r3, #4
  400e7a:	d0f8      	beq.n	400e6e <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400e7c:	2302      	movs	r3, #2
  400e7e:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400e80:	6a23      	ldr	r3, [r4, #32]
  400e82:	f013 0f01 	tst.w	r3, #1
  400e86:	d0fb      	beq.n	400e80 <twi_master_write+0x68>
  400e88:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400e8a:	2001      	movs	r0, #1
  400e8c:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400e8e:	2005      	movs	r0, #5
  400e90:	bd70      	pop	{r4, r5, r6, pc}
  400e92:	2005      	movs	r0, #5
  400e94:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400e96:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  400e98:	bd70      	pop	{r4, r5, r6, pc}
  400e9a:	bf00      	nop

00400e9c <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  400e9c:	b500      	push	{lr}
  400e9e:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  400ea0:	2300      	movs	r3, #0
  400ea2:	aa06      	add	r2, sp, #24
  400ea4:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  400ea8:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  400eaa:	2201      	movs	r2, #1
  400eac:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  400eae:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  400eb2:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  400eb6:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  400eb8:	a901      	add	r1, sp, #4
  400eba:	f7ff ffad 	bl	400e18 <twi_master_write>
}
  400ebe:	b007      	add	sp, #28
  400ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00400ec4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400ec4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ec6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400eca:	d02f      	beq.n	400f2c <pio_set_peripheral+0x68>
  400ecc:	d807      	bhi.n	400ede <pio_set_peripheral+0x1a>
  400ece:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400ed2:	d014      	beq.n	400efe <pio_set_peripheral+0x3a>
  400ed4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ed8:	d01e      	beq.n	400f18 <pio_set_peripheral+0x54>
  400eda:	b939      	cbnz	r1, 400eec <pio_set_peripheral+0x28>
  400edc:	4770      	bx	lr
  400ede:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ee2:	d036      	beq.n	400f52 <pio_set_peripheral+0x8e>
  400ee4:	d804      	bhi.n	400ef0 <pio_set_peripheral+0x2c>
  400ee6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400eea:	d029      	beq.n	400f40 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400eec:	6042      	str	r2, [r0, #4]
  400eee:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400ef0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400ef4:	d02d      	beq.n	400f52 <pio_set_peripheral+0x8e>
  400ef6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400efa:	d02a      	beq.n	400f52 <pio_set_peripheral+0x8e>
  400efc:	e7f6      	b.n	400eec <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400efe:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f00:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f02:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400f04:	43d3      	mvns	r3, r2
  400f06:	4021      	ands	r1, r4
  400f08:	4019      	ands	r1, r3
  400f0a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f0c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f0e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f10:	4021      	ands	r1, r4
  400f12:	400b      	ands	r3, r1
  400f14:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f16:	e01a      	b.n	400f4e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f18:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f1a:	4313      	orrs	r3, r2
  400f1c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f1e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f20:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400f22:	400b      	ands	r3, r1
  400f24:	ea23 0302 	bic.w	r3, r3, r2
  400f28:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f2a:	e7df      	b.n	400eec <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f2c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f2e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400f30:	400b      	ands	r3, r1
  400f32:	ea23 0302 	bic.w	r3, r3, r2
  400f36:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f38:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f3a:	4313      	orrs	r3, r2
  400f3c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f3e:	e7d5      	b.n	400eec <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f40:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400f42:	4313      	orrs	r3, r2
  400f44:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400f46:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f48:	4313      	orrs	r3, r2
  400f4a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f4c:	e7ce      	b.n	400eec <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400f4e:	6042      	str	r2, [r0, #4]
}
  400f50:	bc10      	pop	{r4}
  400f52:	4770      	bx	lr

00400f54 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400f54:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f56:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400f5a:	bf14      	ite	ne
  400f5c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f5e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400f60:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400f64:	bf14      	ite	ne
  400f66:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400f68:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400f6a:	f012 0f02 	tst.w	r2, #2
  400f6e:	d002      	beq.n	400f76 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400f70:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400f74:	e004      	b.n	400f80 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400f76:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400f7a:	bf18      	it	ne
  400f7c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400f80:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400f82:	6001      	str	r1, [r0, #0]
  400f84:	4770      	bx	lr
  400f86:	bf00      	nop

00400f88 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400f88:	b410      	push	{r4}
  400f8a:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400f8c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400f8e:	b10c      	cbz	r4, 400f94 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400f90:	6641      	str	r1, [r0, #100]	; 0x64
  400f92:	e000      	b.n	400f96 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400f94:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400f96:	b10b      	cbz	r3, 400f9c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400f98:	6501      	str	r1, [r0, #80]	; 0x50
  400f9a:	e000      	b.n	400f9e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400f9c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400f9e:	b10a      	cbz	r2, 400fa4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400fa0:	6301      	str	r1, [r0, #48]	; 0x30
  400fa2:	e000      	b.n	400fa6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400fa4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400fa6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400fa8:	6001      	str	r1, [r0, #0]
}
  400faa:	bc10      	pop	{r4}
  400fac:	4770      	bx	lr
  400fae:	bf00      	nop

00400fb0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400fb0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400fb2:	4770      	bx	lr

00400fb4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400fb4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400fb6:	4770      	bx	lr

00400fb8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400fb8:	b570      	push	{r4, r5, r6, lr}
  400fba:	b082      	sub	sp, #8
  400fbc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400fbe:	0943      	lsrs	r3, r0, #5
  400fc0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400fc4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400fc8:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400fca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400fd2:	d047      	beq.n	401064 <pio_configure_pin+0xac>
  400fd4:	d809      	bhi.n	400fea <pio_configure_pin+0x32>
  400fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400fda:	d021      	beq.n	401020 <pio_configure_pin+0x68>
  400fdc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400fe0:	d02f      	beq.n	401042 <pio_configure_pin+0x8a>
  400fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400fe6:	d16f      	bne.n	4010c8 <pio_configure_pin+0x110>
  400fe8:	e009      	b.n	400ffe <pio_configure_pin+0x46>
  400fea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400fee:	d055      	beq.n	40109c <pio_configure_pin+0xe4>
  400ff0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400ff4:	d052      	beq.n	40109c <pio_configure_pin+0xe4>
  400ff6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400ffa:	d044      	beq.n	401086 <pio_configure_pin+0xce>
  400ffc:	e064      	b.n	4010c8 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400ffe:	f000 001f 	and.w	r0, r0, #31
  401002:	2601      	movs	r6, #1
  401004:	4086      	lsls	r6, r0
  401006:	4632      	mov	r2, r6
  401008:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40100c:	4620      	mov	r0, r4
  40100e:	f7ff ff59 	bl	400ec4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401012:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401016:	bf14      	ite	ne
  401018:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40101a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40101c:	2001      	movs	r0, #1
  40101e:	e054      	b.n	4010ca <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401020:	f000 001f 	and.w	r0, r0, #31
  401024:	2601      	movs	r6, #1
  401026:	4086      	lsls	r6, r0
  401028:	4632      	mov	r2, r6
  40102a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40102e:	4620      	mov	r0, r4
  401030:	f7ff ff48 	bl	400ec4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401034:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401038:	bf14      	ite	ne
  40103a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40103c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40103e:	2001      	movs	r0, #1
  401040:	e043      	b.n	4010ca <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401042:	f000 001f 	and.w	r0, r0, #31
  401046:	2601      	movs	r6, #1
  401048:	4086      	lsls	r6, r0
  40104a:	4632      	mov	r2, r6
  40104c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401050:	4620      	mov	r0, r4
  401052:	f7ff ff37 	bl	400ec4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401056:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40105a:	bf14      	ite	ne
  40105c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40105e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401060:	2001      	movs	r0, #1
  401062:	e032      	b.n	4010ca <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401064:	f000 001f 	and.w	r0, r0, #31
  401068:	2601      	movs	r6, #1
  40106a:	4086      	lsls	r6, r0
  40106c:	4632      	mov	r2, r6
  40106e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401072:	4620      	mov	r0, r4
  401074:	f7ff ff26 	bl	400ec4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401078:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40107c:	bf14      	ite	ne
  40107e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401080:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401082:	2001      	movs	r0, #1
  401084:	e021      	b.n	4010ca <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401086:	f000 011f 	and.w	r1, r0, #31
  40108a:	2601      	movs	r6, #1
  40108c:	462a      	mov	r2, r5
  40108e:	fa06 f101 	lsl.w	r1, r6, r1
  401092:	4620      	mov	r0, r4
  401094:	f7ff ff5e 	bl	400f54 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401098:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40109a:	e016      	b.n	4010ca <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40109c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4010a0:	f000 011f 	and.w	r1, r0, #31
  4010a4:	2601      	movs	r6, #1
  4010a6:	ea05 0306 	and.w	r3, r5, r6
  4010aa:	9300      	str	r3, [sp, #0]
  4010ac:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4010b0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4010b4:	bf14      	ite	ne
  4010b6:	2200      	movne	r2, #0
  4010b8:	2201      	moveq	r2, #1
  4010ba:	fa06 f101 	lsl.w	r1, r6, r1
  4010be:	4620      	mov	r0, r4
  4010c0:	f7ff ff62 	bl	400f88 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  4010c4:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4010c6:	e000      	b.n	4010ca <pio_configure_pin+0x112>

	default:
		return 0;
  4010c8:	2000      	movs	r0, #0
	}

	return 1;
}
  4010ca:	b002      	add	sp, #8
  4010cc:	bd70      	pop	{r4, r5, r6, pc}
  4010ce:	bf00      	nop

004010d0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4010d0:	b570      	push	{r4, r5, r6, lr}
  4010d2:	b082      	sub	sp, #8
  4010d4:	4605      	mov	r5, r0
  4010d6:	460e      	mov	r6, r1
  4010d8:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4010da:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4010de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4010e2:	d038      	beq.n	401156 <pio_configure_pin_group+0x86>
  4010e4:	d809      	bhi.n	4010fa <pio_configure_pin_group+0x2a>
  4010e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4010ea:	d01c      	beq.n	401126 <pio_configure_pin_group+0x56>
  4010ec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4010f0:	d025      	beq.n	40113e <pio_configure_pin_group+0x6e>
  4010f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4010f6:	d150      	bne.n	40119a <pio_configure_pin_group+0xca>
  4010f8:	e009      	b.n	40110e <pio_configure_pin_group+0x3e>
  4010fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4010fe:	d03a      	beq.n	401176 <pio_configure_pin_group+0xa6>
  401100:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401104:	d037      	beq.n	401176 <pio_configure_pin_group+0xa6>
  401106:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40110a:	d030      	beq.n	40116e <pio_configure_pin_group+0x9e>
  40110c:	e045      	b.n	40119a <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40110e:	460a      	mov	r2, r1
  401110:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401114:	f7ff fed6 	bl	400ec4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401118:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40111c:	bf14      	ite	ne
  40111e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401120:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401122:	2001      	movs	r0, #1
  401124:	e03a      	b.n	40119c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401126:	460a      	mov	r2, r1
  401128:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40112c:	f7ff feca 	bl	400ec4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401130:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401134:	bf14      	ite	ne
  401136:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401138:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40113a:	2001      	movs	r0, #1
  40113c:	e02e      	b.n	40119c <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40113e:	460a      	mov	r2, r1
  401140:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401144:	f7ff febe 	bl	400ec4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401148:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40114c:	bf14      	ite	ne
  40114e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401150:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401152:	2001      	movs	r0, #1
  401154:	e022      	b.n	40119c <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401156:	460a      	mov	r2, r1
  401158:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40115c:	f7ff feb2 	bl	400ec4 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401160:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401164:	bf14      	ite	ne
  401166:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401168:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40116a:	2001      	movs	r0, #1
  40116c:	e016      	b.n	40119c <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40116e:	f7ff fef1 	bl	400f54 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401172:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401174:	e012      	b.n	40119c <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401176:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  40117a:	f004 0301 	and.w	r3, r4, #1
  40117e:	9300      	str	r3, [sp, #0]
  401180:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401184:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401188:	bf14      	ite	ne
  40118a:	2200      	movne	r2, #0
  40118c:	2201      	moveq	r2, #1
  40118e:	4631      	mov	r1, r6
  401190:	4628      	mov	r0, r5
  401192:	f7ff fef9 	bl	400f88 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401196:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401198:	e000      	b.n	40119c <pio_configure_pin_group+0xcc>

	default:
		return 0;
  40119a:	2000      	movs	r0, #0
	}

	return 1;
}
  40119c:	b002      	add	sp, #8
  40119e:	bd70      	pop	{r4, r5, r6, pc}

004011a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4011a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4011a4:	4681      	mov	r9, r0
  4011a6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4011a8:	f7ff ff02 	bl	400fb0 <pio_get_interrupt_status>
  4011ac:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4011ae:	4648      	mov	r0, r9
  4011b0:	f7ff ff00 	bl	400fb4 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  4011b4:	4005      	ands	r5, r0
  4011b6:	d013      	beq.n	4011e0 <pio_handler_process+0x40>
  4011b8:	4c0e      	ldr	r4, [pc, #56]	; (4011f4 <pio_handler_process+0x54>)
  4011ba:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4011be:	6823      	ldr	r3, [r4, #0]
  4011c0:	4543      	cmp	r3, r8
  4011c2:	d108      	bne.n	4011d6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4011c4:	6861      	ldr	r1, [r4, #4]
  4011c6:	4229      	tst	r1, r5
  4011c8:	d005      	beq.n	4011d6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4011ca:	68e3      	ldr	r3, [r4, #12]
  4011cc:	4640      	mov	r0, r8
  4011ce:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4011d0:	6863      	ldr	r3, [r4, #4]
  4011d2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4011d6:	42b4      	cmp	r4, r6
  4011d8:	d002      	beq.n	4011e0 <pio_handler_process+0x40>
  4011da:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4011dc:	2d00      	cmp	r5, #0
  4011de:	d1ee      	bne.n	4011be <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4011e0:	4b05      	ldr	r3, [pc, #20]	; (4011f8 <pio_handler_process+0x58>)
  4011e2:	681b      	ldr	r3, [r3, #0]
  4011e4:	b123      	cbz	r3, 4011f0 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4011e6:	4b05      	ldr	r3, [pc, #20]	; (4011fc <pio_handler_process+0x5c>)
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	b10b      	cbz	r3, 4011f0 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4011ec:	4648      	mov	r0, r9
  4011ee:	4798      	blx	r3
  4011f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4011f4:	20000228 	.word	0x20000228
  4011f8:	200004b0 	.word	0x200004b0
  4011fc:	20000224 	.word	0x20000224

00401200 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401200:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401202:	210b      	movs	r1, #11
  401204:	4801      	ldr	r0, [pc, #4]	; (40120c <PIOA_Handler+0xc>)
  401206:	f7ff ffcb 	bl	4011a0 <pio_handler_process>
  40120a:	bd08      	pop	{r3, pc}
  40120c:	400e0e00 	.word	0x400e0e00

00401210 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401210:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401212:	210c      	movs	r1, #12
  401214:	4801      	ldr	r0, [pc, #4]	; (40121c <PIOB_Handler+0xc>)
  401216:	f7ff ffc3 	bl	4011a0 <pio_handler_process>
  40121a:	bd08      	pop	{r3, pc}
  40121c:	400e1000 	.word	0x400e1000

00401220 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401220:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401222:	210d      	movs	r1, #13
  401224:	4801      	ldr	r0, [pc, #4]	; (40122c <PIOC_Handler+0xc>)
  401226:	f7ff ffbb 	bl	4011a0 <pio_handler_process>
  40122a:	bd08      	pop	{r3, pc}
  40122c:	400e1200 	.word	0x400e1200

00401230 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401230:	4a18      	ldr	r2, [pc, #96]	; (401294 <pmc_switch_mck_to_pllack+0x64>)
  401232:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401238:	4318      	orrs	r0, r3
  40123a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40123c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40123e:	f013 0f08 	tst.w	r3, #8
  401242:	d003      	beq.n	40124c <pmc_switch_mck_to_pllack+0x1c>
  401244:	e009      	b.n	40125a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401246:	3b01      	subs	r3, #1
  401248:	d103      	bne.n	401252 <pmc_switch_mck_to_pllack+0x22>
  40124a:	e01e      	b.n	40128a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40124c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401250:	4910      	ldr	r1, [pc, #64]	; (401294 <pmc_switch_mck_to_pllack+0x64>)
  401252:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401254:	f012 0f08 	tst.w	r2, #8
  401258:	d0f5      	beq.n	401246 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40125a:	4a0e      	ldr	r2, [pc, #56]	; (401294 <pmc_switch_mck_to_pllack+0x64>)
  40125c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40125e:	f023 0303 	bic.w	r3, r3, #3
  401262:	f043 0302 	orr.w	r3, r3, #2
  401266:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401268:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40126a:	f010 0008 	ands.w	r0, r0, #8
  40126e:	d004      	beq.n	40127a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401270:	2000      	movs	r0, #0
  401272:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401274:	3b01      	subs	r3, #1
  401276:	d103      	bne.n	401280 <pmc_switch_mck_to_pllack+0x50>
  401278:	e009      	b.n	40128e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40127a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40127e:	4905      	ldr	r1, [pc, #20]	; (401294 <pmc_switch_mck_to_pllack+0x64>)
  401280:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401282:	f012 0f08 	tst.w	r2, #8
  401286:	d0f5      	beq.n	401274 <pmc_switch_mck_to_pllack+0x44>
  401288:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40128a:	2001      	movs	r0, #1
  40128c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40128e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401290:	4770      	bx	lr
  401292:	bf00      	nop
  401294:	400e0400 	.word	0x400e0400

00401298 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401298:	b138      	cbz	r0, 4012aa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40129a:	4911      	ldr	r1, [pc, #68]	; (4012e0 <pmc_switch_mainck_to_xtal+0x48>)
  40129c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40129e:	4a11      	ldr	r2, [pc, #68]	; (4012e4 <pmc_switch_mainck_to_xtal+0x4c>)
  4012a0:	401a      	ands	r2, r3
  4012a2:	4b11      	ldr	r3, [pc, #68]	; (4012e8 <pmc_switch_mainck_to_xtal+0x50>)
  4012a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4012a6:	620b      	str	r3, [r1, #32]
  4012a8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012aa:	480d      	ldr	r0, [pc, #52]	; (4012e0 <pmc_switch_mainck_to_xtal+0x48>)
  4012ac:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4012ae:	0209      	lsls	r1, r1, #8
  4012b0:	b289      	uxth	r1, r1
  4012b2:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  4012b6:	f023 0303 	bic.w	r3, r3, #3
  4012ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4012be:	f043 0301 	orr.w	r3, r3, #1
  4012c2:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4012c4:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4012c6:	4602      	mov	r2, r0
  4012c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012ca:	f013 0f01 	tst.w	r3, #1
  4012ce:	d0fb      	beq.n	4012c8 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4012d0:	4a03      	ldr	r2, [pc, #12]	; (4012e0 <pmc_switch_mainck_to_xtal+0x48>)
  4012d2:	6a13      	ldr	r3, [r2, #32]
  4012d4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4012dc:	6213      	str	r3, [r2, #32]
  4012de:	4770      	bx	lr
  4012e0:	400e0400 	.word	0x400e0400
  4012e4:	fec8fffc 	.word	0xfec8fffc
  4012e8:	01370002 	.word	0x01370002

004012ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4012ec:	4b02      	ldr	r3, [pc, #8]	; (4012f8 <pmc_osc_is_ready_mainck+0xc>)
  4012ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4012f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4012f4:	4770      	bx	lr
  4012f6:	bf00      	nop
  4012f8:	400e0400 	.word	0x400e0400

004012fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4012fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401300:	4b01      	ldr	r3, [pc, #4]	; (401308 <pmc_disable_pllack+0xc>)
  401302:	629a      	str	r2, [r3, #40]	; 0x28
  401304:	4770      	bx	lr
  401306:	bf00      	nop
  401308:	400e0400 	.word	0x400e0400

0040130c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40130c:	4b02      	ldr	r3, [pc, #8]	; (401318 <pmc_is_locked_pllack+0xc>)
  40130e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401310:	f000 0002 	and.w	r0, r0, #2
  401314:	4770      	bx	lr
  401316:	bf00      	nop
  401318:	400e0400 	.word	0x400e0400

0040131c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40131c:	2822      	cmp	r0, #34	; 0x22
  40131e:	d81e      	bhi.n	40135e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401320:	281f      	cmp	r0, #31
  401322:	d80c      	bhi.n	40133e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401324:	4b11      	ldr	r3, [pc, #68]	; (40136c <pmc_enable_periph_clk+0x50>)
  401326:	699a      	ldr	r2, [r3, #24]
  401328:	2301      	movs	r3, #1
  40132a:	4083      	lsls	r3, r0
  40132c:	4393      	bics	r3, r2
  40132e:	d018      	beq.n	401362 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401330:	2301      	movs	r3, #1
  401332:	fa03 f000 	lsl.w	r0, r3, r0
  401336:	4b0d      	ldr	r3, [pc, #52]	; (40136c <pmc_enable_periph_clk+0x50>)
  401338:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40133a:	2000      	movs	r0, #0
  40133c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40133e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401340:	4b0a      	ldr	r3, [pc, #40]	; (40136c <pmc_enable_periph_clk+0x50>)
  401342:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401346:	2301      	movs	r3, #1
  401348:	4083      	lsls	r3, r0
  40134a:	4393      	bics	r3, r2
  40134c:	d00b      	beq.n	401366 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40134e:	2301      	movs	r3, #1
  401350:	fa03 f000 	lsl.w	r0, r3, r0
  401354:	4b05      	ldr	r3, [pc, #20]	; (40136c <pmc_enable_periph_clk+0x50>)
  401356:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40135a:	2000      	movs	r0, #0
  40135c:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40135e:	2001      	movs	r0, #1
  401360:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401362:	2000      	movs	r0, #0
  401364:	4770      	bx	lr
  401366:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401368:	4770      	bx	lr
  40136a:	bf00      	nop
  40136c:	400e0400 	.word	0x400e0400

00401370 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401374:	6043      	str	r3, [r0, #4]
  401376:	4770      	bx	lr

00401378 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401378:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40137a:	23ac      	movs	r3, #172	; 0xac
  40137c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40137e:	680b      	ldr	r3, [r1, #0]
  401380:	684a      	ldr	r2, [r1, #4]
  401382:	fbb3 f3f2 	udiv	r3, r3, r2
  401386:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401388:	1e5c      	subs	r4, r3, #1
  40138a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40138e:	4294      	cmp	r4, r2
  401390:	d80a      	bhi.n	4013a8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  401392:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401394:	688b      	ldr	r3, [r1, #8]
  401396:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401398:	f240 2302 	movw	r3, #514	; 0x202
  40139c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4013a0:	2350      	movs	r3, #80	; 0x50
  4013a2:	6003      	str	r3, [r0, #0]

	return 0;
  4013a4:	2000      	movs	r0, #0
  4013a6:	e000      	b.n	4013aa <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  4013a8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  4013aa:	bc10      	pop	{r4}
  4013ac:	4770      	bx	lr
  4013ae:	bf00      	nop

004013b0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4013b0:	6943      	ldr	r3, [r0, #20]
  4013b2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4013b6:	bf1a      	itte	ne
  4013b8:	61c1      	strne	r1, [r0, #28]
	return 0;
  4013ba:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4013bc:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4013be:	4770      	bx	lr

004013c0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4013c0:	6943      	ldr	r3, [r0, #20]
  4013c2:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4013c6:	bf1d      	ittte	ne
  4013c8:	6983      	ldrne	r3, [r0, #24]
  4013ca:	700b      	strbne	r3, [r1, #0]
	return 0;
  4013cc:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4013ce:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4013d0:	4770      	bx	lr
  4013d2:	bf00      	nop

004013d4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4013d4:	6943      	ldr	r3, [r0, #20]
  4013d6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4013da:	bf1d      	ittte	ne
  4013dc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4013e0:	61c1      	strne	r1, [r0, #28]
	return 0;
  4013e2:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4013e4:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4013e6:	4770      	bx	lr

004013e8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4013e8:	6943      	ldr	r3, [r0, #20]
  4013ea:	f013 0f01 	tst.w	r3, #1
  4013ee:	d005      	beq.n	4013fc <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4013f0:	6983      	ldr	r3, [r0, #24]
  4013f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4013f6:	600b      	str	r3, [r1, #0]

	return 0;
  4013f8:	2000      	movs	r0, #0
  4013fa:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4013fc:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4013fe:	4770      	bx	lr

00401400 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401400:	b4f0      	push	{r4, r5, r6, r7}
  401402:	b08c      	sub	sp, #48	; 0x30
  401404:	4607      	mov	r7, r0
  401406:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  401408:	ac01      	add	r4, sp, #4
  40140a:	4d11      	ldr	r5, [pc, #68]	; (401450 <pwm_clocks_generate+0x50>)
  40140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  40141c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  40141e:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  401420:	f852 3b04 	ldr.w	r3, [r2], #4
  401424:	fbb6 f3f3 	udiv	r3, r6, r3
  401428:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  40142c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401430:	d905      	bls.n	40143e <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  401432:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401434:	280b      	cmp	r0, #11
  401436:	d1f3      	bne.n	401420 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401438:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40143c:	e005      	b.n	40144a <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  40143e:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  401440:	bf94      	ite	ls
  401442:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  401446:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  40144a:	b00c      	add	sp, #48	; 0x30
  40144c:	bcf0      	pop	{r4, r5, r6, r7}
  40144e:	4770      	bx	lr
  401450:	00404ce8 	.word	0x00404ce8

00401454 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401454:	b570      	push	{r4, r5, r6, lr}
  401456:	4606      	mov	r6, r0
  401458:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  40145a:	6808      	ldr	r0, [r1, #0]
  40145c:	b140      	cbz	r0, 401470 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  40145e:	6889      	ldr	r1, [r1, #8]
  401460:	f7ff ffce 	bl	401400 <pwm_clocks_generate>
  401464:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  401466:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40146a:	4298      	cmp	r0, r3
  40146c:	d101      	bne.n	401472 <pwm_init+0x1e>
  40146e:	e00e      	b.n	40148e <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  401470:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401472:	6860      	ldr	r0, [r4, #4]
  401474:	b140      	cbz	r0, 401488 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401476:	68a1      	ldr	r1, [r4, #8]
  401478:	f7ff ffc2 	bl	401400 <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  40147c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401480:	4298      	cmp	r0, r3
  401482:	d007      	beq.n	401494 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  401484:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  401488:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  40148a:	2000      	movs	r0, #0
  40148c:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  40148e:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401492:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401494:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  401498:	bd70      	pop	{r4, r5, r6, pc}
  40149a:	bf00      	nop

0040149c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  40149c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  40149e:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4014a0:	684a      	ldr	r2, [r1, #4]
  4014a2:	f002 020f 	and.w	r2, r2, #15
  4014a6:	8a8c      	ldrh	r4, [r1, #20]
  4014a8:	4322      	orrs	r2, r4
  4014aa:	890c      	ldrh	r4, [r1, #8]
  4014ac:	4322      	orrs	r2, r4
  4014ae:	7a8c      	ldrb	r4, [r1, #10]
  4014b0:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  4014b4:	7d8c      	ldrb	r4, [r1, #22]
  4014b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4014ba:	7dcc      	ldrb	r4, [r1, #23]
  4014bc:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  4014c0:	7e0c      	ldrb	r4, [r1, #24]
  4014c2:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  4014c6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4014ca:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4014ce:	68ca      	ldr	r2, [r1, #12]
  4014d0:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  4014d4:	690a      	ldr	r2, [r1, #16]
  4014d6:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  4014da:	7d8a      	ldrb	r2, [r1, #22]
  4014dc:	b13a      	cbz	r2, 4014ee <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  4014de:	8b8c      	ldrh	r4, [r1, #28]
  4014e0:	8b4a      	ldrh	r2, [r1, #26]
  4014e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  4014e6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  4014ea:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  4014ee:	6c84      	ldr	r4, [r0, #72]	; 0x48
  4014f0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  4014f4:	409a      	lsls	r2, r3
  4014f6:	43d2      	mvns	r2, r2
  4014f8:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  4014fc:	7fcc      	ldrb	r4, [r1, #31]
  4014fe:	fa04 f603 	lsl.w	r6, r4, r3
  401502:	7f8c      	ldrb	r4, [r1, #30]
  401504:	409c      	lsls	r4, r3
  401506:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  40150a:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  40150c:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40150e:	6c44      	ldr	r4, [r0, #68]	; 0x44
  401510:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  401512:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  401516:	fa04 f503 	lsl.w	r5, r4, r3
  40151a:	f891 4020 	ldrb.w	r4, [r1, #32]
  40151e:	409c      	lsls	r4, r3
  401520:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401524:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401526:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  401528:	2201      	movs	r2, #1
  40152a:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  40152c:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  401530:	b11c      	cbz	r4, 40153a <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  401532:	6a04      	ldr	r4, [r0, #32]
  401534:	4314      	orrs	r4, r2
  401536:	6204      	str	r4, [r0, #32]
  401538:	e003      	b.n	401542 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40153a:	6a04      	ldr	r4, [r0, #32]
  40153c:	ea24 0402 	bic.w	r4, r4, r2
  401540:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  401542:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  401546:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  401548:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40154a:	bf0c      	ite	eq
  40154c:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  40154e:	4394      	bicne	r4, r2
  401550:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401552:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  401556:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  401558:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40155a:	bf0c      	ite	eq
  40155c:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  401560:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  401564:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401566:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401568:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  40156a:	22ff      	movs	r2, #255	; 0xff
  40156c:	409a      	lsls	r2, r3
  40156e:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401572:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  401576:	fa01 f303 	lsl.w	r3, r1, r3
  40157a:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  40157c:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  40157e:	2000      	movs	r0, #0
  401580:	bc70      	pop	{r4, r5, r6}
  401582:	4770      	bx	lr

00401584 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401584:	690b      	ldr	r3, [r1, #16]
  401586:	4293      	cmp	r3, r2
  401588:	d307      	bcc.n	40159a <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  40158a:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  40158c:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  40158e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401592:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  401596:	2000      	movs	r0, #0
  401598:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  40159a:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  40159e:	4770      	bx	lr

004015a0 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4015a0:	2301      	movs	r3, #1
  4015a2:	fa03 f101 	lsl.w	r1, r3, r1
  4015a6:	6041      	str	r1, [r0, #4]
  4015a8:	4770      	bx	lr
  4015aa:	bf00      	nop

004015ac <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4015ac:	2301      	movs	r3, #1
  4015ae:	fa03 f101 	lsl.w	r1, r3, r1
  4015b2:	6081      	str	r1, [r0, #8]
  4015b4:	4770      	bx	lr
  4015b6:	bf00      	nop

004015b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4015b8:	e7fe      	b.n	4015b8 <Dummy_Handler>
  4015ba:	bf00      	nop

004015bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4015bc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4015be:	4b20      	ldr	r3, [pc, #128]	; (401640 <Reset_Handler+0x84>)
  4015c0:	4a20      	ldr	r2, [pc, #128]	; (401644 <Reset_Handler+0x88>)
  4015c2:	429a      	cmp	r2, r3
  4015c4:	d912      	bls.n	4015ec <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  4015c6:	4b20      	ldr	r3, [pc, #128]	; (401648 <Reset_Handler+0x8c>)
  4015c8:	4a1d      	ldr	r2, [pc, #116]	; (401640 <Reset_Handler+0x84>)
  4015ca:	429a      	cmp	r2, r3
  4015cc:	d21e      	bcs.n	40160c <Reset_Handler+0x50>
  4015ce:	4611      	mov	r1, r2
  4015d0:	3b01      	subs	r3, #1
  4015d2:	1a9b      	subs	r3, r3, r2
  4015d4:	f023 0303 	bic.w	r3, r3, #3
  4015d8:	3304      	adds	r3, #4
  4015da:	4a1a      	ldr	r2, [pc, #104]	; (401644 <Reset_Handler+0x88>)
  4015dc:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4015de:	f852 0b04 	ldr.w	r0, [r2], #4
  4015e2:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4015e6:	429a      	cmp	r2, r3
  4015e8:	d1f9      	bne.n	4015de <Reset_Handler+0x22>
  4015ea:	e00f      	b.n	40160c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4015ec:	4b14      	ldr	r3, [pc, #80]	; (401640 <Reset_Handler+0x84>)
  4015ee:	4a15      	ldr	r2, [pc, #84]	; (401644 <Reset_Handler+0x88>)
  4015f0:	429a      	cmp	r2, r3
  4015f2:	d20b      	bcs.n	40160c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4015f4:	4b14      	ldr	r3, [pc, #80]	; (401648 <Reset_Handler+0x8c>)
  4015f6:	4a12      	ldr	r2, [pc, #72]	; (401640 <Reset_Handler+0x84>)
  4015f8:	1a9a      	subs	r2, r3, r2
  4015fa:	4814      	ldr	r0, [pc, #80]	; (40164c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4015fc:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4015fe:	b12a      	cbz	r2, 40160c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  401600:	f851 2904 	ldr.w	r2, [r1], #-4
  401604:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401608:	4281      	cmp	r1, r0
  40160a:	d1f9      	bne.n	401600 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40160c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40160e:	4b10      	ldr	r3, [pc, #64]	; (401650 <Reset_Handler+0x94>)
  401610:	4a10      	ldr	r2, [pc, #64]	; (401654 <Reset_Handler+0x98>)
  401612:	429a      	cmp	r2, r3
  401614:	d20b      	bcs.n	40162e <Reset_Handler+0x72>
  401616:	1d13      	adds	r3, r2, #4
  401618:	4a0f      	ldr	r2, [pc, #60]	; (401658 <Reset_Handler+0x9c>)
  40161a:	1ad2      	subs	r2, r2, r3
  40161c:	f022 0203 	bic.w	r2, r2, #3
  401620:	441a      	add	r2, r3
  401622:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401624:	2100      	movs	r1, #0
  401626:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40162a:	429a      	cmp	r2, r3
  40162c:	d1fb      	bne.n	401626 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  40162e:	4b0b      	ldr	r3, [pc, #44]	; (40165c <Reset_Handler+0xa0>)
  401630:	4a0b      	ldr	r2, [pc, #44]	; (401660 <Reset_Handler+0xa4>)
  401632:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401634:	f000 f912 	bl	40185c <__libc_init_array>

	/* Branch to main function */
	main();
  401638:	f7fe fee2 	bl	400400 <main>
  40163c:	e7fe      	b.n	40163c <Reset_Handler+0x80>
  40163e:	bf00      	nop
  401640:	20000000 	.word	0x20000000
  401644:	00405004 	.word	0x00405004
  401648:	200001e0 	.word	0x200001e0
  40164c:	00405000 	.word	0x00405000
  401650:	200004b8 	.word	0x200004b8
  401654:	200001e0 	.word	0x200001e0
  401658:	200004bb 	.word	0x200004bb
  40165c:	e000ed00 	.word	0xe000ed00
  401660:	00400000 	.word	0x00400000

00401664 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401664:	4b3d      	ldr	r3, [pc, #244]	; (40175c <SystemCoreClockUpdate+0xf8>)
  401666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401668:	f003 0303 	and.w	r3, r3, #3
  40166c:	2b03      	cmp	r3, #3
  40166e:	d85d      	bhi.n	40172c <SystemCoreClockUpdate+0xc8>
  401670:	e8df f003 	tbb	[pc, r3]
  401674:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401678:	4b39      	ldr	r3, [pc, #228]	; (401760 <SystemCoreClockUpdate+0xfc>)
  40167a:	695b      	ldr	r3, [r3, #20]
  40167c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401680:	bf14      	ite	ne
  401682:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401686:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40168a:	4b36      	ldr	r3, [pc, #216]	; (401764 <SystemCoreClockUpdate+0x100>)
  40168c:	601a      	str	r2, [r3, #0]
  40168e:	e04d      	b.n	40172c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401690:	4b32      	ldr	r3, [pc, #200]	; (40175c <SystemCoreClockUpdate+0xf8>)
  401692:	6a1b      	ldr	r3, [r3, #32]
  401694:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401698:	d003      	beq.n	4016a2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40169a:	4a33      	ldr	r2, [pc, #204]	; (401768 <SystemCoreClockUpdate+0x104>)
  40169c:	4b31      	ldr	r3, [pc, #196]	; (401764 <SystemCoreClockUpdate+0x100>)
  40169e:	601a      	str	r2, [r3, #0]
  4016a0:	e044      	b.n	40172c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016a2:	4a32      	ldr	r2, [pc, #200]	; (40176c <SystemCoreClockUpdate+0x108>)
  4016a4:	4b2f      	ldr	r3, [pc, #188]	; (401764 <SystemCoreClockUpdate+0x100>)
  4016a6:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4016a8:	4b2c      	ldr	r3, [pc, #176]	; (40175c <SystemCoreClockUpdate+0xf8>)
  4016aa:	6a1b      	ldr	r3, [r3, #32]
  4016ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016b0:	2b10      	cmp	r3, #16
  4016b2:	d002      	beq.n	4016ba <SystemCoreClockUpdate+0x56>
  4016b4:	2b20      	cmp	r3, #32
  4016b6:	d004      	beq.n	4016c2 <SystemCoreClockUpdate+0x5e>
  4016b8:	e038      	b.n	40172c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4016ba:	4a2d      	ldr	r2, [pc, #180]	; (401770 <SystemCoreClockUpdate+0x10c>)
  4016bc:	4b29      	ldr	r3, [pc, #164]	; (401764 <SystemCoreClockUpdate+0x100>)
  4016be:	601a      	str	r2, [r3, #0]
			break;
  4016c0:	e034      	b.n	40172c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4016c2:	4a29      	ldr	r2, [pc, #164]	; (401768 <SystemCoreClockUpdate+0x104>)
  4016c4:	4b27      	ldr	r3, [pc, #156]	; (401764 <SystemCoreClockUpdate+0x100>)
  4016c6:	601a      	str	r2, [r3, #0]
			break;
  4016c8:	e030      	b.n	40172c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4016ca:	4b24      	ldr	r3, [pc, #144]	; (40175c <SystemCoreClockUpdate+0xf8>)
  4016cc:	6a1b      	ldr	r3, [r3, #32]
  4016ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4016d2:	d003      	beq.n	4016dc <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4016d4:	4a24      	ldr	r2, [pc, #144]	; (401768 <SystemCoreClockUpdate+0x104>)
  4016d6:	4b23      	ldr	r3, [pc, #140]	; (401764 <SystemCoreClockUpdate+0x100>)
  4016d8:	601a      	str	r2, [r3, #0]
  4016da:	e012      	b.n	401702 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016dc:	4a23      	ldr	r2, [pc, #140]	; (40176c <SystemCoreClockUpdate+0x108>)
  4016de:	4b21      	ldr	r3, [pc, #132]	; (401764 <SystemCoreClockUpdate+0x100>)
  4016e0:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4016e2:	4b1e      	ldr	r3, [pc, #120]	; (40175c <SystemCoreClockUpdate+0xf8>)
  4016e4:	6a1b      	ldr	r3, [r3, #32]
  4016e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016ea:	2b10      	cmp	r3, #16
  4016ec:	d002      	beq.n	4016f4 <SystemCoreClockUpdate+0x90>
  4016ee:	2b20      	cmp	r3, #32
  4016f0:	d004      	beq.n	4016fc <SystemCoreClockUpdate+0x98>
  4016f2:	e006      	b.n	401702 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4016f4:	4a1e      	ldr	r2, [pc, #120]	; (401770 <SystemCoreClockUpdate+0x10c>)
  4016f6:	4b1b      	ldr	r3, [pc, #108]	; (401764 <SystemCoreClockUpdate+0x100>)
  4016f8:	601a      	str	r2, [r3, #0]
					break;
  4016fa:	e002      	b.n	401702 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4016fc:	4a1a      	ldr	r2, [pc, #104]	; (401768 <SystemCoreClockUpdate+0x104>)
  4016fe:	4b19      	ldr	r3, [pc, #100]	; (401764 <SystemCoreClockUpdate+0x100>)
  401700:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401702:	4b16      	ldr	r3, [pc, #88]	; (40175c <SystemCoreClockUpdate+0xf8>)
  401704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401706:	f003 0303 	and.w	r3, r3, #3
  40170a:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40170c:	4a13      	ldr	r2, [pc, #76]	; (40175c <SystemCoreClockUpdate+0xf8>)
  40170e:	bf07      	ittee	eq
  401710:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401712:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401714:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401716:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401718:	4812      	ldr	r0, [pc, #72]	; (401764 <SystemCoreClockUpdate+0x100>)
  40171a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40171e:	6803      	ldr	r3, [r0, #0]
  401720:	fb01 3303 	mla	r3, r1, r3, r3
  401724:	b2d2      	uxtb	r2, r2
  401726:	fbb3 f3f2 	udiv	r3, r3, r2
  40172a:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40172c:	4b0b      	ldr	r3, [pc, #44]	; (40175c <SystemCoreClockUpdate+0xf8>)
  40172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401730:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401734:	2b70      	cmp	r3, #112	; 0x70
  401736:	d107      	bne.n	401748 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401738:	4a0a      	ldr	r2, [pc, #40]	; (401764 <SystemCoreClockUpdate+0x100>)
  40173a:	6813      	ldr	r3, [r2, #0]
  40173c:	490d      	ldr	r1, [pc, #52]	; (401774 <SystemCoreClockUpdate+0x110>)
  40173e:	fba1 1303 	umull	r1, r3, r1, r3
  401742:	085b      	lsrs	r3, r3, #1
  401744:	6013      	str	r3, [r2, #0]
  401746:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401748:	4b04      	ldr	r3, [pc, #16]	; (40175c <SystemCoreClockUpdate+0xf8>)
  40174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40174c:	4905      	ldr	r1, [pc, #20]	; (401764 <SystemCoreClockUpdate+0x100>)
  40174e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401752:	680b      	ldr	r3, [r1, #0]
  401754:	40d3      	lsrs	r3, r2
  401756:	600b      	str	r3, [r1, #0]
  401758:	4770      	bx	lr
  40175a:	bf00      	nop
  40175c:	400e0400 	.word	0x400e0400
  401760:	400e1410 	.word	0x400e1410
  401764:	2000000c 	.word	0x2000000c
  401768:	00b71b00 	.word	0x00b71b00
  40176c:	003d0900 	.word	0x003d0900
  401770:	007a1200 	.word	0x007a1200
  401774:	aaaaaaab 	.word	0xaaaaaaab

00401778 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401778:	4b1a      	ldr	r3, [pc, #104]	; (4017e4 <system_init_flash+0x6c>)
  40177a:	4298      	cmp	r0, r3
  40177c:	d807      	bhi.n	40178e <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40177e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401782:	4a19      	ldr	r2, [pc, #100]	; (4017e8 <system_init_flash+0x70>)
  401784:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401786:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40178a:	6013      	str	r3, [r2, #0]
  40178c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40178e:	4b17      	ldr	r3, [pc, #92]	; (4017ec <system_init_flash+0x74>)
  401790:	4298      	cmp	r0, r3
  401792:	d806      	bhi.n	4017a2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401794:	4b16      	ldr	r3, [pc, #88]	; (4017f0 <system_init_flash+0x78>)
  401796:	4a14      	ldr	r2, [pc, #80]	; (4017e8 <system_init_flash+0x70>)
  401798:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40179a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40179e:	6013      	str	r3, [r2, #0]
  4017a0:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4017a2:	4b14      	ldr	r3, [pc, #80]	; (4017f4 <system_init_flash+0x7c>)
  4017a4:	4298      	cmp	r0, r3
  4017a6:	d806      	bhi.n	4017b6 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4017a8:	4b13      	ldr	r3, [pc, #76]	; (4017f8 <system_init_flash+0x80>)
  4017aa:	4a0f      	ldr	r2, [pc, #60]	; (4017e8 <system_init_flash+0x70>)
  4017ac:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4017ae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4017b2:	6013      	str	r3, [r2, #0]
  4017b4:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4017b6:	4b11      	ldr	r3, [pc, #68]	; (4017fc <system_init_flash+0x84>)
  4017b8:	4298      	cmp	r0, r3
  4017ba:	d806      	bhi.n	4017ca <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4017bc:	4b10      	ldr	r3, [pc, #64]	; (401800 <system_init_flash+0x88>)
  4017be:	4a0a      	ldr	r2, [pc, #40]	; (4017e8 <system_init_flash+0x70>)
  4017c0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4017c2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4017c6:	6013      	str	r3, [r2, #0]
  4017c8:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4017ca:	4b0e      	ldr	r3, [pc, #56]	; (401804 <system_init_flash+0x8c>)
  4017cc:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4017ce:	bf94      	ite	ls
  4017d0:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4017d4:	4b0c      	ldrhi	r3, [pc, #48]	; (401808 <system_init_flash+0x90>)
  4017d6:	4a04      	ldr	r2, [pc, #16]	; (4017e8 <system_init_flash+0x70>)
  4017d8:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4017da:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4017de:	6013      	str	r3, [r2, #0]
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop
  4017e4:	01312cff 	.word	0x01312cff
  4017e8:	400e0a00 	.word	0x400e0a00
  4017ec:	026259ff 	.word	0x026259ff
  4017f0:	04000100 	.word	0x04000100
  4017f4:	039386ff 	.word	0x039386ff
  4017f8:	04000200 	.word	0x04000200
  4017fc:	04c4b3ff 	.word	0x04c4b3ff
  401800:	04000300 	.word	0x04000300
  401804:	05f5e0ff 	.word	0x05f5e0ff
  401808:	04000500 	.word	0x04000500

0040180c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40180c:	4b09      	ldr	r3, [pc, #36]	; (401834 <_sbrk+0x28>)
  40180e:	681b      	ldr	r3, [r3, #0]
  401810:	b913      	cbnz	r3, 401818 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401812:	4a09      	ldr	r2, [pc, #36]	; (401838 <_sbrk+0x2c>)
  401814:	4b07      	ldr	r3, [pc, #28]	; (401834 <_sbrk+0x28>)
  401816:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401818:	4b06      	ldr	r3, [pc, #24]	; (401834 <_sbrk+0x28>)
  40181a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40181c:	181a      	adds	r2, r3, r0
  40181e:	4907      	ldr	r1, [pc, #28]	; (40183c <_sbrk+0x30>)
  401820:	4291      	cmp	r1, r2
  401822:	db04      	blt.n	40182e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401824:	4610      	mov	r0, r2
  401826:	4a03      	ldr	r2, [pc, #12]	; (401834 <_sbrk+0x28>)
  401828:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40182a:	4618      	mov	r0, r3
  40182c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40182e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401832:	4770      	bx	lr
  401834:	20000298 	.word	0x20000298
  401838:	200034b8 	.word	0x200034b8
  40183c:	20027ffc 	.word	0x20027ffc

00401840 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401844:	4770      	bx	lr
  401846:	bf00      	nop

00401848 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40184c:	604b      	str	r3, [r1, #4]

	return 0;
}
  40184e:	2000      	movs	r0, #0
  401850:	4770      	bx	lr
  401852:	bf00      	nop

00401854 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401854:	2001      	movs	r0, #1
  401856:	4770      	bx	lr

00401858 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401858:	2000      	movs	r0, #0
  40185a:	4770      	bx	lr

0040185c <__libc_init_array>:
  40185c:	b570      	push	{r4, r5, r6, lr}
  40185e:	4b0e      	ldr	r3, [pc, #56]	; (401898 <__libc_init_array+0x3c>)
  401860:	4c0e      	ldr	r4, [pc, #56]	; (40189c <__libc_init_array+0x40>)
  401862:	1ae4      	subs	r4, r4, r3
  401864:	10a4      	asrs	r4, r4, #2
  401866:	2500      	movs	r5, #0
  401868:	461e      	mov	r6, r3
  40186a:	42a5      	cmp	r5, r4
  40186c:	d004      	beq.n	401878 <__libc_init_array+0x1c>
  40186e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401872:	4798      	blx	r3
  401874:	3501      	adds	r5, #1
  401876:	e7f8      	b.n	40186a <__libc_init_array+0xe>
  401878:	f003 fbae 	bl	404fd8 <_init>
  40187c:	4c08      	ldr	r4, [pc, #32]	; (4018a0 <__libc_init_array+0x44>)
  40187e:	4b09      	ldr	r3, [pc, #36]	; (4018a4 <__libc_init_array+0x48>)
  401880:	1ae4      	subs	r4, r4, r3
  401882:	10a4      	asrs	r4, r4, #2
  401884:	2500      	movs	r5, #0
  401886:	461e      	mov	r6, r3
  401888:	42a5      	cmp	r5, r4
  40188a:	d004      	beq.n	401896 <__libc_init_array+0x3a>
  40188c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401890:	4798      	blx	r3
  401892:	3501      	adds	r5, #1
  401894:	e7f8      	b.n	401888 <__libc_init_array+0x2c>
  401896:	bd70      	pop	{r4, r5, r6, pc}
  401898:	00404fe4 	.word	0x00404fe4
  40189c:	00404fe4 	.word	0x00404fe4
  4018a0:	00404fe8 	.word	0x00404fe8
  4018a4:	00404fe4 	.word	0x00404fe4

004018a8 <memcpy>:
  4018a8:	b510      	push	{r4, lr}
  4018aa:	1e43      	subs	r3, r0, #1
  4018ac:	440a      	add	r2, r1
  4018ae:	4291      	cmp	r1, r2
  4018b0:	d004      	beq.n	4018bc <memcpy+0x14>
  4018b2:	f811 4b01 	ldrb.w	r4, [r1], #1
  4018b6:	f803 4f01 	strb.w	r4, [r3, #1]!
  4018ba:	e7f8      	b.n	4018ae <memcpy+0x6>
  4018bc:	bd10      	pop	{r4, pc}

004018be <memset>:
  4018be:	4402      	add	r2, r0
  4018c0:	4603      	mov	r3, r0
  4018c2:	4293      	cmp	r3, r2
  4018c4:	d002      	beq.n	4018cc <memset+0xe>
  4018c6:	f803 1b01 	strb.w	r1, [r3], #1
  4018ca:	e7fa      	b.n	4018c2 <memset+0x4>
  4018cc:	4770      	bx	lr

004018ce <__cvt>:
  4018ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018d2:	b088      	sub	sp, #32
  4018d4:	2b00      	cmp	r3, #0
  4018d6:	9f14      	ldr	r7, [sp, #80]	; 0x50
  4018d8:	9912      	ldr	r1, [sp, #72]	; 0x48
  4018da:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4018dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4018e0:	461e      	mov	r6, r3
  4018e2:	f027 0720 	bic.w	r7, r7, #32
  4018e6:	bfbb      	ittet	lt
  4018e8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4018ec:	461e      	movlt	r6, r3
  4018ee:	2300      	movge	r3, #0
  4018f0:	232d      	movlt	r3, #45	; 0x2d
  4018f2:	2f46      	cmp	r7, #70	; 0x46
  4018f4:	4614      	mov	r4, r2
  4018f6:	700b      	strb	r3, [r1, #0]
  4018f8:	d003      	beq.n	401902 <__cvt+0x34>
  4018fa:	2f45      	cmp	r7, #69	; 0x45
  4018fc:	d103      	bne.n	401906 <__cvt+0x38>
  4018fe:	3501      	adds	r5, #1
  401900:	e001      	b.n	401906 <__cvt+0x38>
  401902:	2303      	movs	r3, #3
  401904:	e000      	b.n	401908 <__cvt+0x3a>
  401906:	2302      	movs	r3, #2
  401908:	aa07      	add	r2, sp, #28
  40190a:	9204      	str	r2, [sp, #16]
  40190c:	aa06      	add	r2, sp, #24
  40190e:	9203      	str	r2, [sp, #12]
  401910:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  401914:	4622      	mov	r2, r4
  401916:	4633      	mov	r3, r6
  401918:	f000 fece 	bl	4026b8 <_dtoa_r>
  40191c:	2f47      	cmp	r7, #71	; 0x47
  40191e:	4680      	mov	r8, r0
  401920:	d102      	bne.n	401928 <__cvt+0x5a>
  401922:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401924:	07db      	lsls	r3, r3, #31
  401926:	d528      	bpl.n	40197a <__cvt+0xac>
  401928:	2f46      	cmp	r7, #70	; 0x46
  40192a:	eb08 0905 	add.w	r9, r8, r5
  40192e:	d111      	bne.n	401954 <__cvt+0x86>
  401930:	f898 3000 	ldrb.w	r3, [r8]
  401934:	2b30      	cmp	r3, #48	; 0x30
  401936:	d10a      	bne.n	40194e <__cvt+0x80>
  401938:	2200      	movs	r2, #0
  40193a:	2300      	movs	r3, #0
  40193c:	4620      	mov	r0, r4
  40193e:	4631      	mov	r1, r6
  401940:	f003 f870 	bl	404a24 <__aeabi_dcmpeq>
  401944:	b918      	cbnz	r0, 40194e <__cvt+0x80>
  401946:	f1c5 0501 	rsb	r5, r5, #1
  40194a:	f8ca 5000 	str.w	r5, [sl]
  40194e:	f8da 3000 	ldr.w	r3, [sl]
  401952:	4499      	add	r9, r3
  401954:	2200      	movs	r2, #0
  401956:	2300      	movs	r3, #0
  401958:	4620      	mov	r0, r4
  40195a:	4631      	mov	r1, r6
  40195c:	f003 f862 	bl	404a24 <__aeabi_dcmpeq>
  401960:	b908      	cbnz	r0, 401966 <__cvt+0x98>
  401962:	2230      	movs	r2, #48	; 0x30
  401964:	e002      	b.n	40196c <__cvt+0x9e>
  401966:	f8cd 901c 	str.w	r9, [sp, #28]
  40196a:	e006      	b.n	40197a <__cvt+0xac>
  40196c:	9b07      	ldr	r3, [sp, #28]
  40196e:	4599      	cmp	r9, r3
  401970:	d903      	bls.n	40197a <__cvt+0xac>
  401972:	1c59      	adds	r1, r3, #1
  401974:	9107      	str	r1, [sp, #28]
  401976:	701a      	strb	r2, [r3, #0]
  401978:	e7f8      	b.n	40196c <__cvt+0x9e>
  40197a:	9b07      	ldr	r3, [sp, #28]
  40197c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40197e:	ebc8 0303 	rsb	r3, r8, r3
  401982:	4640      	mov	r0, r8
  401984:	6013      	str	r3, [r2, #0]
  401986:	b008      	add	sp, #32
  401988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040198c <__exponent>:
  40198c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  40198e:	4603      	mov	r3, r0
  401990:	2900      	cmp	r1, #0
  401992:	bfb8      	it	lt
  401994:	4249      	neglt	r1, r1
  401996:	f803 2b02 	strb.w	r2, [r3], #2
  40199a:	bfb4      	ite	lt
  40199c:	222d      	movlt	r2, #45	; 0x2d
  40199e:	222b      	movge	r2, #43	; 0x2b
  4019a0:	2909      	cmp	r1, #9
  4019a2:	7042      	strb	r2, [r0, #1]
  4019a4:	dd19      	ble.n	4019da <__exponent+0x4e>
  4019a6:	f10d 0207 	add.w	r2, sp, #7
  4019aa:	4616      	mov	r6, r2
  4019ac:	250a      	movs	r5, #10
  4019ae:	fb91 f4f5 	sdiv	r4, r1, r5
  4019b2:	fb05 1114 	mls	r1, r5, r4, r1
  4019b6:	3130      	adds	r1, #48	; 0x30
  4019b8:	2c09      	cmp	r4, #9
  4019ba:	f802 1d01 	strb.w	r1, [r2, #-1]!
  4019be:	4621      	mov	r1, r4
  4019c0:	dcf5      	bgt.n	4019ae <__exponent+0x22>
  4019c2:	3130      	adds	r1, #48	; 0x30
  4019c4:	1e54      	subs	r4, r2, #1
  4019c6:	f802 1c01 	strb.w	r1, [r2, #-1]
  4019ca:	42b4      	cmp	r4, r6
  4019cc:	461a      	mov	r2, r3
  4019ce:	d20a      	bcs.n	4019e6 <__exponent+0x5a>
  4019d0:	f814 2b01 	ldrb.w	r2, [r4], #1
  4019d4:	f803 2b01 	strb.w	r2, [r3], #1
  4019d8:	e7f7      	b.n	4019ca <__exponent+0x3e>
  4019da:	2430      	movs	r4, #48	; 0x30
  4019dc:	461a      	mov	r2, r3
  4019de:	4421      	add	r1, r4
  4019e0:	f802 4b02 	strb.w	r4, [r2], #2
  4019e4:	7059      	strb	r1, [r3, #1]
  4019e6:	1a10      	subs	r0, r2, r0
  4019e8:	b002      	add	sp, #8
  4019ea:	bd70      	pop	{r4, r5, r6, pc}

004019ec <_printf_float>:
  4019ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019f0:	b091      	sub	sp, #68	; 0x44
  4019f2:	460c      	mov	r4, r1
  4019f4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  4019f8:	4616      	mov	r6, r2
  4019fa:	461f      	mov	r7, r3
  4019fc:	4605      	mov	r5, r0
  4019fe:	f001 fd73 	bl	4034e8 <_localeconv_r>
  401a02:	6803      	ldr	r3, [r0, #0]
  401a04:	9309      	str	r3, [sp, #36]	; 0x24
  401a06:	4618      	mov	r0, r3
  401a08:	f000 fcfc 	bl	402404 <strlen>
  401a0c:	2300      	movs	r3, #0
  401a0e:	930e      	str	r3, [sp, #56]	; 0x38
  401a10:	f8d8 3000 	ldr.w	r3, [r8]
  401a14:	900a      	str	r0, [sp, #40]	; 0x28
  401a16:	3307      	adds	r3, #7
  401a18:	f023 0307 	bic.w	r3, r3, #7
  401a1c:	f103 0208 	add.w	r2, r3, #8
  401a20:	f894 9018 	ldrb.w	r9, [r4, #24]
  401a24:	f8d4 b000 	ldr.w	fp, [r4]
  401a28:	f8c8 2000 	str.w	r2, [r8]
  401a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401a30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  401a34:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  401a38:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  401a3c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  401a40:	930b      	str	r3, [sp, #44]	; 0x2c
  401a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401a46:	4ba7      	ldr	r3, [pc, #668]	; (401ce4 <_printf_float+0x2f8>)
  401a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401a4a:	4640      	mov	r0, r8
  401a4c:	f003 f81c 	bl	404a88 <__aeabi_dcmpun>
  401a50:	b9a0      	cbnz	r0, 401a7c <_printf_float+0x90>
  401a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401a56:	4ba3      	ldr	r3, [pc, #652]	; (401ce4 <_printf_float+0x2f8>)
  401a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401a5a:	4640      	mov	r0, r8
  401a5c:	f002 fff6 	bl	404a4c <__aeabi_dcmple>
  401a60:	b960      	cbnz	r0, 401a7c <_printf_float+0x90>
  401a62:	2200      	movs	r2, #0
  401a64:	2300      	movs	r3, #0
  401a66:	4640      	mov	r0, r8
  401a68:	4651      	mov	r1, sl
  401a6a:	f002 ffe5 	bl	404a38 <__aeabi_dcmplt>
  401a6e:	b110      	cbz	r0, 401a76 <_printf_float+0x8a>
  401a70:	232d      	movs	r3, #45	; 0x2d
  401a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401a76:	4b9c      	ldr	r3, [pc, #624]	; (401ce8 <_printf_float+0x2fc>)
  401a78:	4a9c      	ldr	r2, [pc, #624]	; (401cec <_printf_float+0x300>)
  401a7a:	e00a      	b.n	401a92 <_printf_float+0xa6>
  401a7c:	4642      	mov	r2, r8
  401a7e:	4653      	mov	r3, sl
  401a80:	4640      	mov	r0, r8
  401a82:	4651      	mov	r1, sl
  401a84:	f003 f800 	bl	404a88 <__aeabi_dcmpun>
  401a88:	2800      	cmp	r0, #0
  401a8a:	f000 8192 	beq.w	401db2 <_printf_float+0x3c6>
  401a8e:	4b98      	ldr	r3, [pc, #608]	; (401cf0 <_printf_float+0x304>)
  401a90:	4a98      	ldr	r2, [pc, #608]	; (401cf4 <_printf_float+0x308>)
  401a92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  401a96:	bf8c      	ite	hi
  401a98:	4690      	movhi	r8, r2
  401a9a:	4698      	movls	r8, r3
  401a9c:	2303      	movs	r3, #3
  401a9e:	6123      	str	r3, [r4, #16]
  401aa0:	f02b 0304 	bic.w	r3, fp, #4
  401aa4:	6023      	str	r3, [r4, #0]
  401aa6:	f04f 0a00 	mov.w	sl, #0
  401aaa:	e03d      	b.n	401b28 <_printf_float+0x13c>
  401aac:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  401ab0:	f000 818a 	beq.w	401dc8 <_printf_float+0x3dc>
  401ab4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  401ab8:	f000 8186 	beq.w	401dc8 <_printf_float+0x3dc>
  401abc:	6023      	str	r3, [r4, #0]
  401abe:	2100      	movs	r1, #0
  401ac0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  401ac4:	9301      	str	r3, [sp, #4]
  401ac6:	6863      	ldr	r3, [r4, #4]
  401ac8:	9005      	str	r0, [sp, #20]
  401aca:	9202      	str	r2, [sp, #8]
  401acc:	9300      	str	r3, [sp, #0]
  401ace:	4642      	mov	r2, r8
  401ad0:	4653      	mov	r3, sl
  401ad2:	9106      	str	r1, [sp, #24]
  401ad4:	f8cd 9010 	str.w	r9, [sp, #16]
  401ad8:	f8cd e00c 	str.w	lr, [sp, #12]
  401adc:	4628      	mov	r0, r5
  401ade:	f7ff fef6 	bl	4018ce <__cvt>
  401ae2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  401ae6:	2b47      	cmp	r3, #71	; 0x47
  401ae8:	4680      	mov	r8, r0
  401aea:	f000 8184 	beq.w	401df6 <_printf_float+0x40a>
  401aee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  401af2:	990d      	ldr	r1, [sp, #52]	; 0x34
  401af4:	f200 818d 	bhi.w	401e12 <_printf_float+0x426>
  401af8:	3901      	subs	r1, #1
  401afa:	464a      	mov	r2, r9
  401afc:	f104 0050 	add.w	r0, r4, #80	; 0x50
  401b00:	910d      	str	r1, [sp, #52]	; 0x34
  401b02:	f7ff ff43 	bl	40198c <__exponent>
  401b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401b08:	1883      	adds	r3, r0, r2
  401b0a:	2a01      	cmp	r2, #1
  401b0c:	4682      	mov	sl, r0
  401b0e:	6123      	str	r3, [r4, #16]
  401b10:	f300 817c 	bgt.w	401e0c <_printf_float+0x420>
  401b14:	6822      	ldr	r2, [r4, #0]
  401b16:	07d1      	lsls	r1, r2, #31
  401b18:	f100 8178 	bmi.w	401e0c <_printf_float+0x420>
  401b1c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  401b20:	b113      	cbz	r3, 401b28 <_printf_float+0x13c>
  401b22:	232d      	movs	r3, #45	; 0x2d
  401b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401b28:	9700      	str	r7, [sp, #0]
  401b2a:	4633      	mov	r3, r6
  401b2c:	aa0f      	add	r2, sp, #60	; 0x3c
  401b2e:	4621      	mov	r1, r4
  401b30:	4628      	mov	r0, r5
  401b32:	f000 f99f 	bl	401e74 <_printf_common>
  401b36:	3001      	adds	r0, #1
  401b38:	d102      	bne.n	401b40 <_printf_float+0x154>
  401b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401b3e:	e196      	b.n	401e6e <_printf_float+0x482>
  401b40:	6823      	ldr	r3, [r4, #0]
  401b42:	055a      	lsls	r2, r3, #21
  401b44:	d401      	bmi.n	401b4a <_printf_float+0x15e>
  401b46:	6923      	ldr	r3, [r4, #16]
  401b48:	e065      	b.n	401c16 <_printf_float+0x22a>
  401b4a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  401b4e:	f240 80d5 	bls.w	401cfc <_printf_float+0x310>
  401b52:	2200      	movs	r2, #0
  401b54:	2300      	movs	r3, #0
  401b56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  401b5a:	f002 ff63 	bl	404a24 <__aeabi_dcmpeq>
  401b5e:	b378      	cbz	r0, 401bc0 <_printf_float+0x1d4>
  401b60:	2301      	movs	r3, #1
  401b62:	4a65      	ldr	r2, [pc, #404]	; (401cf8 <_printf_float+0x30c>)
  401b64:	4631      	mov	r1, r6
  401b66:	4628      	mov	r0, r5
  401b68:	47b8      	blx	r7
  401b6a:	3001      	adds	r0, #1
  401b6c:	d0e5      	beq.n	401b3a <_printf_float+0x14e>
  401b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401b72:	429a      	cmp	r2, r3
  401b74:	db0b      	blt.n	401b8e <_printf_float+0x1a2>
  401b76:	6823      	ldr	r3, [r4, #0]
  401b78:	07d8      	lsls	r0, r3, #31
  401b7a:	d408      	bmi.n	401b8e <_printf_float+0x1a2>
  401b7c:	6823      	ldr	r3, [r4, #0]
  401b7e:	079b      	lsls	r3, r3, #30
  401b80:	f140 8111 	bpl.w	401da6 <_printf_float+0x3ba>
  401b84:	f04f 0800 	mov.w	r8, #0
  401b88:	f104 0919 	add.w	r9, r4, #25
  401b8c:	e106      	b.n	401d9c <_printf_float+0x3b0>
  401b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401b90:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401b92:	4631      	mov	r1, r6
  401b94:	4628      	mov	r0, r5
  401b96:	47b8      	blx	r7
  401b98:	3001      	adds	r0, #1
  401b9a:	d0ce      	beq.n	401b3a <_printf_float+0x14e>
  401b9c:	f04f 0800 	mov.w	r8, #0
  401ba0:	f104 091a 	add.w	r9, r4, #26
  401ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401ba6:	3b01      	subs	r3, #1
  401ba8:	4598      	cmp	r8, r3
  401baa:	dae7      	bge.n	401b7c <_printf_float+0x190>
  401bac:	2301      	movs	r3, #1
  401bae:	464a      	mov	r2, r9
  401bb0:	4631      	mov	r1, r6
  401bb2:	4628      	mov	r0, r5
  401bb4:	47b8      	blx	r7
  401bb6:	3001      	adds	r0, #1
  401bb8:	d0bf      	beq.n	401b3a <_printf_float+0x14e>
  401bba:	f108 0801 	add.w	r8, r8, #1
  401bbe:	e7f1      	b.n	401ba4 <_printf_float+0x1b8>
  401bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401bc2:	2b00      	cmp	r3, #0
  401bc4:	dc29      	bgt.n	401c1a <_printf_float+0x22e>
  401bc6:	2301      	movs	r3, #1
  401bc8:	4a4b      	ldr	r2, [pc, #300]	; (401cf8 <_printf_float+0x30c>)
  401bca:	4631      	mov	r1, r6
  401bcc:	4628      	mov	r0, r5
  401bce:	47b8      	blx	r7
  401bd0:	3001      	adds	r0, #1
  401bd2:	d0b2      	beq.n	401b3a <_printf_float+0x14e>
  401bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401bd6:	b923      	cbnz	r3, 401be2 <_printf_float+0x1f6>
  401bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401bda:	b913      	cbnz	r3, 401be2 <_printf_float+0x1f6>
  401bdc:	6823      	ldr	r3, [r4, #0]
  401bde:	07d9      	lsls	r1, r3, #31
  401be0:	d5cc      	bpl.n	401b7c <_printf_float+0x190>
  401be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401be6:	4631      	mov	r1, r6
  401be8:	4628      	mov	r0, r5
  401bea:	47b8      	blx	r7
  401bec:	3001      	adds	r0, #1
  401bee:	d0a4      	beq.n	401b3a <_printf_float+0x14e>
  401bf0:	f04f 0900 	mov.w	r9, #0
  401bf4:	f104 0a1a 	add.w	sl, r4, #26
  401bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401bfa:	425b      	negs	r3, r3
  401bfc:	4599      	cmp	r9, r3
  401bfe:	da09      	bge.n	401c14 <_printf_float+0x228>
  401c00:	2301      	movs	r3, #1
  401c02:	4652      	mov	r2, sl
  401c04:	4631      	mov	r1, r6
  401c06:	4628      	mov	r0, r5
  401c08:	47b8      	blx	r7
  401c0a:	3001      	adds	r0, #1
  401c0c:	d095      	beq.n	401b3a <_printf_float+0x14e>
  401c0e:	f109 0901 	add.w	r9, r9, #1
  401c12:	e7f1      	b.n	401bf8 <_printf_float+0x20c>
  401c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c16:	4642      	mov	r2, r8
  401c18:	e0a7      	b.n	401d6a <_printf_float+0x37e>
  401c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401c1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  401c1e:	429a      	cmp	r2, r3
  401c20:	bfa8      	it	ge
  401c22:	461a      	movge	r2, r3
  401c24:	2a00      	cmp	r2, #0
  401c26:	4691      	mov	r9, r2
  401c28:	dc06      	bgt.n	401c38 <_printf_float+0x24c>
  401c2a:	f04f 0a00 	mov.w	sl, #0
  401c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  401c32:	f104 0b1a 	add.w	fp, r4, #26
  401c36:	e011      	b.n	401c5c <_printf_float+0x270>
  401c38:	4613      	mov	r3, r2
  401c3a:	4631      	mov	r1, r6
  401c3c:	4642      	mov	r2, r8
  401c3e:	4628      	mov	r0, r5
  401c40:	47b8      	blx	r7
  401c42:	3001      	adds	r0, #1
  401c44:	d1f1      	bne.n	401c2a <_printf_float+0x23e>
  401c46:	e778      	b.n	401b3a <_printf_float+0x14e>
  401c48:	2301      	movs	r3, #1
  401c4a:	465a      	mov	r2, fp
  401c4c:	4631      	mov	r1, r6
  401c4e:	4628      	mov	r0, r5
  401c50:	47b8      	blx	r7
  401c52:	3001      	adds	r0, #1
  401c54:	f43f af71 	beq.w	401b3a <_printf_float+0x14e>
  401c58:	f10a 0a01 	add.w	sl, sl, #1
  401c5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
  401c5e:	ebc9 0203 	rsb	r2, r9, r3
  401c62:	4592      	cmp	sl, r2
  401c64:	dbf0      	blt.n	401c48 <_printf_float+0x25c>
  401c66:	eb08 0903 	add.w	r9, r8, r3
  401c6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c6e:	429a      	cmp	r2, r3
  401c70:	db0f      	blt.n	401c92 <_printf_float+0x2a6>
  401c72:	6823      	ldr	r3, [r4, #0]
  401c74:	07da      	lsls	r2, r3, #31
  401c76:	d40c      	bmi.n	401c92 <_printf_float+0x2a6>
  401c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401c7c:	4498      	add	r8, r3
  401c7e:	ebc9 0808 	rsb	r8, r9, r8
  401c82:	1a9b      	subs	r3, r3, r2
  401c84:	4598      	cmp	r8, r3
  401c86:	bfa8      	it	ge
  401c88:	4698      	movge	r8, r3
  401c8a:	f1b8 0f00 	cmp.w	r8, #0
  401c8e:	dc08      	bgt.n	401ca2 <_printf_float+0x2b6>
  401c90:	e00f      	b.n	401cb2 <_printf_float+0x2c6>
  401c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401c96:	4631      	mov	r1, r6
  401c98:	4628      	mov	r0, r5
  401c9a:	47b8      	blx	r7
  401c9c:	3001      	adds	r0, #1
  401c9e:	d1eb      	bne.n	401c78 <_printf_float+0x28c>
  401ca0:	e74b      	b.n	401b3a <_printf_float+0x14e>
  401ca2:	4643      	mov	r3, r8
  401ca4:	464a      	mov	r2, r9
  401ca6:	4631      	mov	r1, r6
  401ca8:	4628      	mov	r0, r5
  401caa:	47b8      	blx	r7
  401cac:	3001      	adds	r0, #1
  401cae:	f43f af44 	beq.w	401b3a <_printf_float+0x14e>
  401cb2:	f04f 0900 	mov.w	r9, #0
  401cb6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  401cba:	f104 0a1a 	add.w	sl, r4, #26
  401cbe:	e009      	b.n	401cd4 <_printf_float+0x2e8>
  401cc0:	2301      	movs	r3, #1
  401cc2:	4652      	mov	r2, sl
  401cc4:	4631      	mov	r1, r6
  401cc6:	4628      	mov	r0, r5
  401cc8:	47b8      	blx	r7
  401cca:	3001      	adds	r0, #1
  401ccc:	f43f af35 	beq.w	401b3a <_printf_float+0x14e>
  401cd0:	f109 0901 	add.w	r9, r9, #1
  401cd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401cd8:	1a9b      	subs	r3, r3, r2
  401cda:	ebc8 0303 	rsb	r3, r8, r3
  401cde:	4599      	cmp	r9, r3
  401ce0:	dbee      	blt.n	401cc0 <_printf_float+0x2d4>
  401ce2:	e74b      	b.n	401b7c <_printf_float+0x190>
  401ce4:	7fefffff 	.word	0x7fefffff
  401ce8:	00404d18 	.word	0x00404d18
  401cec:	00404d1c 	.word	0x00404d1c
  401cf0:	00404d20 	.word	0x00404d20
  401cf4:	00404d24 	.word	0x00404d24
  401cf8:	00404d28 	.word	0x00404d28
  401cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401cfe:	2a01      	cmp	r2, #1
  401d00:	dc01      	bgt.n	401d06 <_printf_float+0x31a>
  401d02:	07db      	lsls	r3, r3, #31
  401d04:	d538      	bpl.n	401d78 <_printf_float+0x38c>
  401d06:	2301      	movs	r3, #1
  401d08:	4642      	mov	r2, r8
  401d0a:	4631      	mov	r1, r6
  401d0c:	4628      	mov	r0, r5
  401d0e:	47b8      	blx	r7
  401d10:	3001      	adds	r0, #1
  401d12:	f43f af12 	beq.w	401b3a <_printf_float+0x14e>
  401d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401d1a:	4631      	mov	r1, r6
  401d1c:	4628      	mov	r0, r5
  401d1e:	47b8      	blx	r7
  401d20:	3001      	adds	r0, #1
  401d22:	f43f af0a 	beq.w	401b3a <_printf_float+0x14e>
  401d26:	2200      	movs	r2, #0
  401d28:	2300      	movs	r3, #0
  401d2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  401d2e:	f002 fe79 	bl	404a24 <__aeabi_dcmpeq>
  401d32:	b120      	cbz	r0, 401d3e <_printf_float+0x352>
  401d34:	f04f 0800 	mov.w	r8, #0
  401d38:	f104 091a 	add.w	r9, r4, #26
  401d3c:	e00e      	b.n	401d5c <_printf_float+0x370>
  401d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401d40:	f108 0201 	add.w	r2, r8, #1
  401d44:	3b01      	subs	r3, #1
  401d46:	e019      	b.n	401d7c <_printf_float+0x390>
  401d48:	2301      	movs	r3, #1
  401d4a:	464a      	mov	r2, r9
  401d4c:	4631      	mov	r1, r6
  401d4e:	4628      	mov	r0, r5
  401d50:	47b8      	blx	r7
  401d52:	3001      	adds	r0, #1
  401d54:	f43f aef1 	beq.w	401b3a <_printf_float+0x14e>
  401d58:	f108 0801 	add.w	r8, r8, #1
  401d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401d5e:	3b01      	subs	r3, #1
  401d60:	4598      	cmp	r8, r3
  401d62:	dbf1      	blt.n	401d48 <_printf_float+0x35c>
  401d64:	4653      	mov	r3, sl
  401d66:	f104 0250 	add.w	r2, r4, #80	; 0x50
  401d6a:	4631      	mov	r1, r6
  401d6c:	4628      	mov	r0, r5
  401d6e:	47b8      	blx	r7
  401d70:	3001      	adds	r0, #1
  401d72:	f47f af03 	bne.w	401b7c <_printf_float+0x190>
  401d76:	e6e0      	b.n	401b3a <_printf_float+0x14e>
  401d78:	2301      	movs	r3, #1
  401d7a:	4642      	mov	r2, r8
  401d7c:	4631      	mov	r1, r6
  401d7e:	4628      	mov	r0, r5
  401d80:	47b8      	blx	r7
  401d82:	3001      	adds	r0, #1
  401d84:	d1ee      	bne.n	401d64 <_printf_float+0x378>
  401d86:	e6d8      	b.n	401b3a <_printf_float+0x14e>
  401d88:	2301      	movs	r3, #1
  401d8a:	464a      	mov	r2, r9
  401d8c:	4631      	mov	r1, r6
  401d8e:	4628      	mov	r0, r5
  401d90:	47b8      	blx	r7
  401d92:	3001      	adds	r0, #1
  401d94:	f43f aed1 	beq.w	401b3a <_printf_float+0x14e>
  401d98:	f108 0801 	add.w	r8, r8, #1
  401d9c:	68e3      	ldr	r3, [r4, #12]
  401d9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  401da0:	1a9b      	subs	r3, r3, r2
  401da2:	4598      	cmp	r8, r3
  401da4:	dbf0      	blt.n	401d88 <_printf_float+0x39c>
  401da6:	68e0      	ldr	r0, [r4, #12]
  401da8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401daa:	4298      	cmp	r0, r3
  401dac:	bfb8      	it	lt
  401dae:	4618      	movlt	r0, r3
  401db0:	e05d      	b.n	401e6e <_printf_float+0x482>
  401db2:	6862      	ldr	r2, [r4, #4]
  401db4:	1c53      	adds	r3, r2, #1
  401db6:	a80e      	add	r0, sp, #56	; 0x38
  401db8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  401dbc:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  401dc0:	f47f ae74 	bne.w	401aac <_printf_float+0xc0>
  401dc4:	2206      	movs	r2, #6
  401dc6:	e001      	b.n	401dcc <_printf_float+0x3e0>
  401dc8:	b912      	cbnz	r2, 401dd0 <_printf_float+0x3e4>
  401dca:	2201      	movs	r2, #1
  401dcc:	6062      	str	r2, [r4, #4]
  401dce:	e675      	b.n	401abc <_printf_float+0xd0>
  401dd0:	2100      	movs	r1, #0
  401dd2:	9106      	str	r1, [sp, #24]
  401dd4:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  401dd8:	e88d 000c 	stmia.w	sp, {r2, r3}
  401ddc:	6023      	str	r3, [r4, #0]
  401dde:	9005      	str	r0, [sp, #20]
  401de0:	4642      	mov	r2, r8
  401de2:	f8cd 9010 	str.w	r9, [sp, #16]
  401de6:	f8cd e00c 	str.w	lr, [sp, #12]
  401dea:	9102      	str	r1, [sp, #8]
  401dec:	4653      	mov	r3, sl
  401dee:	4628      	mov	r0, r5
  401df0:	f7ff fd6d 	bl	4018ce <__cvt>
  401df4:	4680      	mov	r8, r0
  401df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401df8:	1cd8      	adds	r0, r3, #3
  401dfa:	db02      	blt.n	401e02 <_printf_float+0x416>
  401dfc:	6862      	ldr	r2, [r4, #4]
  401dfe:	4293      	cmp	r3, r2
  401e00:	dd1d      	ble.n	401e3e <_printf_float+0x452>
  401e02:	f1a9 0902 	sub.w	r9, r9, #2
  401e06:	fa5f f989 	uxtb.w	r9, r9
  401e0a:	e670      	b.n	401aee <_printf_float+0x102>
  401e0c:	3301      	adds	r3, #1
  401e0e:	6123      	str	r3, [r4, #16]
  401e10:	e684      	b.n	401b1c <_printf_float+0x130>
  401e12:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  401e16:	d114      	bne.n	401e42 <_printf_float+0x456>
  401e18:	2900      	cmp	r1, #0
  401e1a:	6863      	ldr	r3, [r4, #4]
  401e1c:	dd07      	ble.n	401e2e <_printf_float+0x442>
  401e1e:	6121      	str	r1, [r4, #16]
  401e20:	b913      	cbnz	r3, 401e28 <_printf_float+0x43c>
  401e22:	6822      	ldr	r2, [r4, #0]
  401e24:	07d2      	lsls	r2, r2, #31
  401e26:	d51d      	bpl.n	401e64 <_printf_float+0x478>
  401e28:	3301      	adds	r3, #1
  401e2a:	440b      	add	r3, r1
  401e2c:	e019      	b.n	401e62 <_printf_float+0x476>
  401e2e:	b913      	cbnz	r3, 401e36 <_printf_float+0x44a>
  401e30:	6822      	ldr	r2, [r4, #0]
  401e32:	07d0      	lsls	r0, r2, #31
  401e34:	d501      	bpl.n	401e3a <_printf_float+0x44e>
  401e36:	3302      	adds	r3, #2
  401e38:	e013      	b.n	401e62 <_printf_float+0x476>
  401e3a:	2301      	movs	r3, #1
  401e3c:	e011      	b.n	401e62 <_printf_float+0x476>
  401e3e:	f04f 0967 	mov.w	r9, #103	; 0x67
  401e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401e46:	4293      	cmp	r3, r2
  401e48:	db05      	blt.n	401e56 <_printf_float+0x46a>
  401e4a:	6822      	ldr	r2, [r4, #0]
  401e4c:	6123      	str	r3, [r4, #16]
  401e4e:	07d1      	lsls	r1, r2, #31
  401e50:	d508      	bpl.n	401e64 <_printf_float+0x478>
  401e52:	3301      	adds	r3, #1
  401e54:	e005      	b.n	401e62 <_printf_float+0x476>
  401e56:	2b00      	cmp	r3, #0
  401e58:	bfd4      	ite	le
  401e5a:	f1c3 0302 	rsble	r3, r3, #2
  401e5e:	2301      	movgt	r3, #1
  401e60:	4413      	add	r3, r2
  401e62:	6123      	str	r3, [r4, #16]
  401e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401e66:	65a3      	str	r3, [r4, #88]	; 0x58
  401e68:	f04f 0a00 	mov.w	sl, #0
  401e6c:	e656      	b.n	401b1c <_printf_float+0x130>
  401e6e:	b011      	add	sp, #68	; 0x44
  401e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00401e74 <_printf_common>:
  401e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e78:	4691      	mov	r9, r2
  401e7a:	461f      	mov	r7, r3
  401e7c:	690a      	ldr	r2, [r1, #16]
  401e7e:	688b      	ldr	r3, [r1, #8]
  401e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
  401e84:	4293      	cmp	r3, r2
  401e86:	bfb8      	it	lt
  401e88:	4613      	movlt	r3, r2
  401e8a:	f8c9 3000 	str.w	r3, [r9]
  401e8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  401e92:	4606      	mov	r6, r0
  401e94:	460c      	mov	r4, r1
  401e96:	b112      	cbz	r2, 401e9e <_printf_common+0x2a>
  401e98:	3301      	adds	r3, #1
  401e9a:	f8c9 3000 	str.w	r3, [r9]
  401e9e:	6823      	ldr	r3, [r4, #0]
  401ea0:	0699      	lsls	r1, r3, #26
  401ea2:	bf42      	ittt	mi
  401ea4:	f8d9 3000 	ldrmi.w	r3, [r9]
  401ea8:	3302      	addmi	r3, #2
  401eaa:	f8c9 3000 	strmi.w	r3, [r9]
  401eae:	6825      	ldr	r5, [r4, #0]
  401eb0:	f015 0506 	ands.w	r5, r5, #6
  401eb4:	d110      	bne.n	401ed8 <_printf_common+0x64>
  401eb6:	f104 0a19 	add.w	sl, r4, #25
  401eba:	e007      	b.n	401ecc <_printf_common+0x58>
  401ebc:	2301      	movs	r3, #1
  401ebe:	4652      	mov	r2, sl
  401ec0:	4639      	mov	r1, r7
  401ec2:	4630      	mov	r0, r6
  401ec4:	47c0      	blx	r8
  401ec6:	3001      	adds	r0, #1
  401ec8:	d01a      	beq.n	401f00 <_printf_common+0x8c>
  401eca:	3501      	adds	r5, #1
  401ecc:	68e3      	ldr	r3, [r4, #12]
  401ece:	f8d9 2000 	ldr.w	r2, [r9]
  401ed2:	1a9b      	subs	r3, r3, r2
  401ed4:	429d      	cmp	r5, r3
  401ed6:	dbf1      	blt.n	401ebc <_printf_common+0x48>
  401ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  401edc:	6822      	ldr	r2, [r4, #0]
  401ede:	3300      	adds	r3, #0
  401ee0:	bf18      	it	ne
  401ee2:	2301      	movne	r3, #1
  401ee4:	0692      	lsls	r2, r2, #26
  401ee6:	d50f      	bpl.n	401f08 <_printf_common+0x94>
  401ee8:	18e1      	adds	r1, r4, r3
  401eea:	1c5a      	adds	r2, r3, #1
  401eec:	2030      	movs	r0, #48	; 0x30
  401eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  401ef2:	4422      	add	r2, r4
  401ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  401ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  401efc:	3302      	adds	r3, #2
  401efe:	e003      	b.n	401f08 <_printf_common+0x94>
  401f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401f0c:	4639      	mov	r1, r7
  401f0e:	4630      	mov	r0, r6
  401f10:	47c0      	blx	r8
  401f12:	3001      	adds	r0, #1
  401f14:	d0f4      	beq.n	401f00 <_printf_common+0x8c>
  401f16:	6822      	ldr	r2, [r4, #0]
  401f18:	f8d9 5000 	ldr.w	r5, [r9]
  401f1c:	68e3      	ldr	r3, [r4, #12]
  401f1e:	f002 0206 	and.w	r2, r2, #6
  401f22:	2a04      	cmp	r2, #4
  401f24:	bf08      	it	eq
  401f26:	1b5d      	subeq	r5, r3, r5
  401f28:	6922      	ldr	r2, [r4, #16]
  401f2a:	68a3      	ldr	r3, [r4, #8]
  401f2c:	bf0c      	ite	eq
  401f2e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  401f32:	2500      	movne	r5, #0
  401f34:	4293      	cmp	r3, r2
  401f36:	bfc4      	itt	gt
  401f38:	1a9b      	subgt	r3, r3, r2
  401f3a:	18ed      	addgt	r5, r5, r3
  401f3c:	f04f 0900 	mov.w	r9, #0
  401f40:	341a      	adds	r4, #26
  401f42:	454d      	cmp	r5, r9
  401f44:	d009      	beq.n	401f5a <_printf_common+0xe6>
  401f46:	2301      	movs	r3, #1
  401f48:	4622      	mov	r2, r4
  401f4a:	4639      	mov	r1, r7
  401f4c:	4630      	mov	r0, r6
  401f4e:	47c0      	blx	r8
  401f50:	3001      	adds	r0, #1
  401f52:	d0d5      	beq.n	401f00 <_printf_common+0x8c>
  401f54:	f109 0901 	add.w	r9, r9, #1
  401f58:	e7f3      	b.n	401f42 <_printf_common+0xce>
  401f5a:	2000      	movs	r0, #0
  401f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401f60 <_printf_i>:
  401f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401f64:	4617      	mov	r7, r2
  401f66:	7e0a      	ldrb	r2, [r1, #24]
  401f68:	b085      	sub	sp, #20
  401f6a:	2a6e      	cmp	r2, #110	; 0x6e
  401f6c:	4698      	mov	r8, r3
  401f6e:	4606      	mov	r6, r0
  401f70:	460c      	mov	r4, r1
  401f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401f74:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  401f78:	f000 80ae 	beq.w	4020d8 <_printf_i+0x178>
  401f7c:	d811      	bhi.n	401fa2 <_printf_i+0x42>
  401f7e:	2a63      	cmp	r2, #99	; 0x63
  401f80:	d022      	beq.n	401fc8 <_printf_i+0x68>
  401f82:	d809      	bhi.n	401f98 <_printf_i+0x38>
  401f84:	2a00      	cmp	r2, #0
  401f86:	f000 80bb 	beq.w	402100 <_printf_i+0x1a0>
  401f8a:	2a58      	cmp	r2, #88	; 0x58
  401f8c:	f040 80ca 	bne.w	402124 <_printf_i+0x1c4>
  401f90:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  401f94:	4983      	ldr	r1, [pc, #524]	; (4021a4 <_printf_i+0x244>)
  401f96:	e055      	b.n	402044 <_printf_i+0xe4>
  401f98:	2a64      	cmp	r2, #100	; 0x64
  401f9a:	d01e      	beq.n	401fda <_printf_i+0x7a>
  401f9c:	2a69      	cmp	r2, #105	; 0x69
  401f9e:	d01c      	beq.n	401fda <_printf_i+0x7a>
  401fa0:	e0c0      	b.n	402124 <_printf_i+0x1c4>
  401fa2:	2a73      	cmp	r2, #115	; 0x73
  401fa4:	f000 80b0 	beq.w	402108 <_printf_i+0x1a8>
  401fa8:	d809      	bhi.n	401fbe <_printf_i+0x5e>
  401faa:	2a6f      	cmp	r2, #111	; 0x6f
  401fac:	d02e      	beq.n	40200c <_printf_i+0xac>
  401fae:	2a70      	cmp	r2, #112	; 0x70
  401fb0:	f040 80b8 	bne.w	402124 <_printf_i+0x1c4>
  401fb4:	680a      	ldr	r2, [r1, #0]
  401fb6:	f042 0220 	orr.w	r2, r2, #32
  401fba:	600a      	str	r2, [r1, #0]
  401fbc:	e03e      	b.n	40203c <_printf_i+0xdc>
  401fbe:	2a75      	cmp	r2, #117	; 0x75
  401fc0:	d024      	beq.n	40200c <_printf_i+0xac>
  401fc2:	2a78      	cmp	r2, #120	; 0x78
  401fc4:	d03a      	beq.n	40203c <_printf_i+0xdc>
  401fc6:	e0ad      	b.n	402124 <_printf_i+0x1c4>
  401fc8:	681a      	ldr	r2, [r3, #0]
  401fca:	f101 0542 	add.w	r5, r1, #66	; 0x42
  401fce:	1d11      	adds	r1, r2, #4
  401fd0:	6019      	str	r1, [r3, #0]
  401fd2:	6813      	ldr	r3, [r2, #0]
  401fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  401fd8:	e0a8      	b.n	40212c <_printf_i+0x1cc>
  401fda:	6821      	ldr	r1, [r4, #0]
  401fdc:	681a      	ldr	r2, [r3, #0]
  401fde:	f011 0f80 	tst.w	r1, #128	; 0x80
  401fe2:	d002      	beq.n	401fea <_printf_i+0x8a>
  401fe4:	1d11      	adds	r1, r2, #4
  401fe6:	6019      	str	r1, [r3, #0]
  401fe8:	e008      	b.n	401ffc <_printf_i+0x9c>
  401fea:	f011 0f40 	tst.w	r1, #64	; 0x40
  401fee:	f102 0104 	add.w	r1, r2, #4
  401ff2:	6019      	str	r1, [r3, #0]
  401ff4:	d002      	beq.n	401ffc <_printf_i+0x9c>
  401ff6:	f9b2 3000 	ldrsh.w	r3, [r2]
  401ffa:	e000      	b.n	401ffe <_printf_i+0x9e>
  401ffc:	6813      	ldr	r3, [r2, #0]
  401ffe:	2b00      	cmp	r3, #0
  402000:	da3c      	bge.n	40207c <_printf_i+0x11c>
  402002:	222d      	movs	r2, #45	; 0x2d
  402004:	425b      	negs	r3, r3
  402006:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  40200a:	e037      	b.n	40207c <_printf_i+0x11c>
  40200c:	6821      	ldr	r1, [r4, #0]
  40200e:	681a      	ldr	r2, [r3, #0]
  402010:	f011 0f80 	tst.w	r1, #128	; 0x80
  402014:	d002      	beq.n	40201c <_printf_i+0xbc>
  402016:	1d11      	adds	r1, r2, #4
  402018:	6019      	str	r1, [r3, #0]
  40201a:	e007      	b.n	40202c <_printf_i+0xcc>
  40201c:	f011 0f40 	tst.w	r1, #64	; 0x40
  402020:	f102 0104 	add.w	r1, r2, #4
  402024:	6019      	str	r1, [r3, #0]
  402026:	d001      	beq.n	40202c <_printf_i+0xcc>
  402028:	8813      	ldrh	r3, [r2, #0]
  40202a:	e000      	b.n	40202e <_printf_i+0xce>
  40202c:	6813      	ldr	r3, [r2, #0]
  40202e:	7e22      	ldrb	r2, [r4, #24]
  402030:	495c      	ldr	r1, [pc, #368]	; (4021a4 <_printf_i+0x244>)
  402032:	2a6f      	cmp	r2, #111	; 0x6f
  402034:	bf14      	ite	ne
  402036:	220a      	movne	r2, #10
  402038:	2208      	moveq	r2, #8
  40203a:	e01b      	b.n	402074 <_printf_i+0x114>
  40203c:	2278      	movs	r2, #120	; 0x78
  40203e:	495a      	ldr	r1, [pc, #360]	; (4021a8 <_printf_i+0x248>)
  402040:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402044:	6822      	ldr	r2, [r4, #0]
  402046:	6818      	ldr	r0, [r3, #0]
  402048:	f012 0f80 	tst.w	r2, #128	; 0x80
  40204c:	f100 0504 	add.w	r5, r0, #4
  402050:	601d      	str	r5, [r3, #0]
  402052:	d103      	bne.n	40205c <_printf_i+0xfc>
  402054:	0655      	lsls	r5, r2, #25
  402056:	d501      	bpl.n	40205c <_printf_i+0xfc>
  402058:	8803      	ldrh	r3, [r0, #0]
  40205a:	e000      	b.n	40205e <_printf_i+0xfe>
  40205c:	6803      	ldr	r3, [r0, #0]
  40205e:	07d0      	lsls	r0, r2, #31
  402060:	bf44      	itt	mi
  402062:	f042 0220 	orrmi.w	r2, r2, #32
  402066:	6022      	strmi	r2, [r4, #0]
  402068:	b91b      	cbnz	r3, 402072 <_printf_i+0x112>
  40206a:	6822      	ldr	r2, [r4, #0]
  40206c:	f022 0220 	bic.w	r2, r2, #32
  402070:	6022      	str	r2, [r4, #0]
  402072:	2210      	movs	r2, #16
  402074:	2000      	movs	r0, #0
  402076:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  40207a:	e001      	b.n	402080 <_printf_i+0x120>
  40207c:	4949      	ldr	r1, [pc, #292]	; (4021a4 <_printf_i+0x244>)
  40207e:	220a      	movs	r2, #10
  402080:	6865      	ldr	r5, [r4, #4]
  402082:	60a5      	str	r5, [r4, #8]
  402084:	2d00      	cmp	r5, #0
  402086:	db08      	blt.n	40209a <_printf_i+0x13a>
  402088:	6820      	ldr	r0, [r4, #0]
  40208a:	f020 0004 	bic.w	r0, r0, #4
  40208e:	6020      	str	r0, [r4, #0]
  402090:	b92b      	cbnz	r3, 40209e <_printf_i+0x13e>
  402092:	2d00      	cmp	r5, #0
  402094:	d17d      	bne.n	402192 <_printf_i+0x232>
  402096:	4675      	mov	r5, lr
  402098:	e00c      	b.n	4020b4 <_printf_i+0x154>
  40209a:	2b00      	cmp	r3, #0
  40209c:	d079      	beq.n	402192 <_printf_i+0x232>
  40209e:	4675      	mov	r5, lr
  4020a0:	fbb3 f0f2 	udiv	r0, r3, r2
  4020a4:	fb02 3310 	mls	r3, r2, r0, r3
  4020a8:	5ccb      	ldrb	r3, [r1, r3]
  4020aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4020ae:	4603      	mov	r3, r0
  4020b0:	2800      	cmp	r0, #0
  4020b2:	d1f5      	bne.n	4020a0 <_printf_i+0x140>
  4020b4:	2a08      	cmp	r2, #8
  4020b6:	d10b      	bne.n	4020d0 <_printf_i+0x170>
  4020b8:	6823      	ldr	r3, [r4, #0]
  4020ba:	07da      	lsls	r2, r3, #31
  4020bc:	d508      	bpl.n	4020d0 <_printf_i+0x170>
  4020be:	6923      	ldr	r3, [r4, #16]
  4020c0:	6862      	ldr	r2, [r4, #4]
  4020c2:	429a      	cmp	r2, r3
  4020c4:	bfde      	ittt	le
  4020c6:	2330      	movle	r3, #48	; 0x30
  4020c8:	f805 3c01 	strble.w	r3, [r5, #-1]
  4020cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  4020d0:	ebc5 030e 	rsb	r3, r5, lr
  4020d4:	6123      	str	r3, [r4, #16]
  4020d6:	e02e      	b.n	402136 <_printf_i+0x1d6>
  4020d8:	6808      	ldr	r0, [r1, #0]
  4020da:	681a      	ldr	r2, [r3, #0]
  4020dc:	6949      	ldr	r1, [r1, #20]
  4020de:	f010 0f80 	tst.w	r0, #128	; 0x80
  4020e2:	d003      	beq.n	4020ec <_printf_i+0x18c>
  4020e4:	1d10      	adds	r0, r2, #4
  4020e6:	6018      	str	r0, [r3, #0]
  4020e8:	6813      	ldr	r3, [r2, #0]
  4020ea:	e008      	b.n	4020fe <_printf_i+0x19e>
  4020ec:	f010 0f40 	tst.w	r0, #64	; 0x40
  4020f0:	f102 0004 	add.w	r0, r2, #4
  4020f4:	6018      	str	r0, [r3, #0]
  4020f6:	6813      	ldr	r3, [r2, #0]
  4020f8:	d001      	beq.n	4020fe <_printf_i+0x19e>
  4020fa:	8019      	strh	r1, [r3, #0]
  4020fc:	e000      	b.n	402100 <_printf_i+0x1a0>
  4020fe:	6019      	str	r1, [r3, #0]
  402100:	2300      	movs	r3, #0
  402102:	6123      	str	r3, [r4, #16]
  402104:	4675      	mov	r5, lr
  402106:	e016      	b.n	402136 <_printf_i+0x1d6>
  402108:	681a      	ldr	r2, [r3, #0]
  40210a:	1d11      	adds	r1, r2, #4
  40210c:	6019      	str	r1, [r3, #0]
  40210e:	6815      	ldr	r5, [r2, #0]
  402110:	6862      	ldr	r2, [r4, #4]
  402112:	2100      	movs	r1, #0
  402114:	4628      	mov	r0, r5
  402116:	f001 fa63 	bl	4035e0 <memchr>
  40211a:	b108      	cbz	r0, 402120 <_printf_i+0x1c0>
  40211c:	1b40      	subs	r0, r0, r5
  40211e:	6060      	str	r0, [r4, #4]
  402120:	6863      	ldr	r3, [r4, #4]
  402122:	e004      	b.n	40212e <_printf_i+0x1ce>
  402124:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402128:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  40212c:	2301      	movs	r3, #1
  40212e:	6123      	str	r3, [r4, #16]
  402130:	2300      	movs	r3, #0
  402132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402136:	f8cd 8000 	str.w	r8, [sp]
  40213a:	463b      	mov	r3, r7
  40213c:	aa03      	add	r2, sp, #12
  40213e:	4621      	mov	r1, r4
  402140:	4630      	mov	r0, r6
  402142:	f7ff fe97 	bl	401e74 <_printf_common>
  402146:	3001      	adds	r0, #1
  402148:	d102      	bne.n	402150 <_printf_i+0x1f0>
  40214a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40214e:	e026      	b.n	40219e <_printf_i+0x23e>
  402150:	6923      	ldr	r3, [r4, #16]
  402152:	462a      	mov	r2, r5
  402154:	4639      	mov	r1, r7
  402156:	4630      	mov	r0, r6
  402158:	47c0      	blx	r8
  40215a:	3001      	adds	r0, #1
  40215c:	d0f5      	beq.n	40214a <_printf_i+0x1ea>
  40215e:	6823      	ldr	r3, [r4, #0]
  402160:	079b      	lsls	r3, r3, #30
  402162:	d510      	bpl.n	402186 <_printf_i+0x226>
  402164:	2500      	movs	r5, #0
  402166:	f104 0919 	add.w	r9, r4, #25
  40216a:	e007      	b.n	40217c <_printf_i+0x21c>
  40216c:	2301      	movs	r3, #1
  40216e:	464a      	mov	r2, r9
  402170:	4639      	mov	r1, r7
  402172:	4630      	mov	r0, r6
  402174:	47c0      	blx	r8
  402176:	3001      	adds	r0, #1
  402178:	d0e7      	beq.n	40214a <_printf_i+0x1ea>
  40217a:	3501      	adds	r5, #1
  40217c:	68e3      	ldr	r3, [r4, #12]
  40217e:	9a03      	ldr	r2, [sp, #12]
  402180:	1a9b      	subs	r3, r3, r2
  402182:	429d      	cmp	r5, r3
  402184:	dbf2      	blt.n	40216c <_printf_i+0x20c>
  402186:	68e0      	ldr	r0, [r4, #12]
  402188:	9b03      	ldr	r3, [sp, #12]
  40218a:	4298      	cmp	r0, r3
  40218c:	bfb8      	it	lt
  40218e:	4618      	movlt	r0, r3
  402190:	e005      	b.n	40219e <_printf_i+0x23e>
  402192:	780b      	ldrb	r3, [r1, #0]
  402194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402198:	f104 0542 	add.w	r5, r4, #66	; 0x42
  40219c:	e78a      	b.n	4020b4 <_printf_i+0x154>
  40219e:	b005      	add	sp, #20
  4021a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4021a4:	00404d2a 	.word	0x00404d2a
  4021a8:	00404d3b 	.word	0x00404d3b

004021ac <iprintf>:
  4021ac:	b40f      	push	{r0, r1, r2, r3}
  4021ae:	4b0a      	ldr	r3, [pc, #40]	; (4021d8 <iprintf+0x2c>)
  4021b0:	b513      	push	{r0, r1, r4, lr}
  4021b2:	681c      	ldr	r4, [r3, #0]
  4021b4:	b124      	cbz	r4, 4021c0 <iprintf+0x14>
  4021b6:	69a3      	ldr	r3, [r4, #24]
  4021b8:	b913      	cbnz	r3, 4021c0 <iprintf+0x14>
  4021ba:	4620      	mov	r0, r4
  4021bc:	f001 f90a 	bl	4033d4 <__sinit>
  4021c0:	ab05      	add	r3, sp, #20
  4021c2:	9a04      	ldr	r2, [sp, #16]
  4021c4:	68a1      	ldr	r1, [r4, #8]
  4021c6:	9301      	str	r3, [sp, #4]
  4021c8:	4620      	mov	r0, r4
  4021ca:	f001 fe11 	bl	403df0 <_vfiprintf_r>
  4021ce:	b002      	add	sp, #8
  4021d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4021d4:	b004      	add	sp, #16
  4021d6:	4770      	bx	lr
  4021d8:	20000070 	.word	0x20000070

004021dc <_puts_r>:
  4021dc:	b570      	push	{r4, r5, r6, lr}
  4021de:	460e      	mov	r6, r1
  4021e0:	4605      	mov	r5, r0
  4021e2:	b118      	cbz	r0, 4021ec <_puts_r+0x10>
  4021e4:	6983      	ldr	r3, [r0, #24]
  4021e6:	b90b      	cbnz	r3, 4021ec <_puts_r+0x10>
  4021e8:	f001 f8f4 	bl	4033d4 <__sinit>
  4021ec:	69ab      	ldr	r3, [r5, #24]
  4021ee:	68ac      	ldr	r4, [r5, #8]
  4021f0:	b913      	cbnz	r3, 4021f8 <_puts_r+0x1c>
  4021f2:	4628      	mov	r0, r5
  4021f4:	f001 f8ee 	bl	4033d4 <__sinit>
  4021f8:	4b22      	ldr	r3, [pc, #136]	; (402284 <_puts_r+0xa8>)
  4021fa:	429c      	cmp	r4, r3
  4021fc:	d101      	bne.n	402202 <_puts_r+0x26>
  4021fe:	686c      	ldr	r4, [r5, #4]
  402200:	e008      	b.n	402214 <_puts_r+0x38>
  402202:	4b21      	ldr	r3, [pc, #132]	; (402288 <_puts_r+0xac>)
  402204:	429c      	cmp	r4, r3
  402206:	d101      	bne.n	40220c <_puts_r+0x30>
  402208:	68ac      	ldr	r4, [r5, #8]
  40220a:	e003      	b.n	402214 <_puts_r+0x38>
  40220c:	4b1f      	ldr	r3, [pc, #124]	; (40228c <_puts_r+0xb0>)
  40220e:	429c      	cmp	r4, r3
  402210:	bf08      	it	eq
  402212:	68ec      	ldreq	r4, [r5, #12]
  402214:	89a3      	ldrh	r3, [r4, #12]
  402216:	071b      	lsls	r3, r3, #28
  402218:	d501      	bpl.n	40221e <_puts_r+0x42>
  40221a:	6923      	ldr	r3, [r4, #16]
  40221c:	b93b      	cbnz	r3, 40222e <_puts_r+0x52>
  40221e:	4621      	mov	r1, r4
  402220:	4628      	mov	r0, r5
  402222:	f000 f94b 	bl	4024bc <__swsetup_r>
  402226:	b110      	cbz	r0, 40222e <_puts_r+0x52>
  402228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40222c:	bd70      	pop	{r4, r5, r6, pc}
  40222e:	3e01      	subs	r6, #1
  402230:	68a3      	ldr	r3, [r4, #8]
  402232:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  402236:	3b01      	subs	r3, #1
  402238:	60a3      	str	r3, [r4, #8]
  40223a:	b191      	cbz	r1, 402262 <_puts_r+0x86>
  40223c:	2b00      	cmp	r3, #0
  40223e:	da04      	bge.n	40224a <_puts_r+0x6e>
  402240:	69a2      	ldr	r2, [r4, #24]
  402242:	4293      	cmp	r3, r2
  402244:	db06      	blt.n	402254 <_puts_r+0x78>
  402246:	290a      	cmp	r1, #10
  402248:	d004      	beq.n	402254 <_puts_r+0x78>
  40224a:	6823      	ldr	r3, [r4, #0]
  40224c:	1c5a      	adds	r2, r3, #1
  40224e:	6022      	str	r2, [r4, #0]
  402250:	7019      	strb	r1, [r3, #0]
  402252:	e7ed      	b.n	402230 <_puts_r+0x54>
  402254:	4622      	mov	r2, r4
  402256:	4628      	mov	r0, r5
  402258:	f000 f8dc 	bl	402414 <__swbuf_r>
  40225c:	3001      	adds	r0, #1
  40225e:	d1e7      	bne.n	402230 <_puts_r+0x54>
  402260:	e7e2      	b.n	402228 <_puts_r+0x4c>
  402262:	2b00      	cmp	r3, #0
  402264:	da08      	bge.n	402278 <_puts_r+0x9c>
  402266:	4622      	mov	r2, r4
  402268:	210a      	movs	r1, #10
  40226a:	4628      	mov	r0, r5
  40226c:	f000 f8d2 	bl	402414 <__swbuf_r>
  402270:	3001      	adds	r0, #1
  402272:	d0d9      	beq.n	402228 <_puts_r+0x4c>
  402274:	200a      	movs	r0, #10
  402276:	bd70      	pop	{r4, r5, r6, pc}
  402278:	6823      	ldr	r3, [r4, #0]
  40227a:	200a      	movs	r0, #10
  40227c:	1c5a      	adds	r2, r3, #1
  40227e:	6022      	str	r2, [r4, #0]
  402280:	7018      	strb	r0, [r3, #0]
  402282:	bd70      	pop	{r4, r5, r6, pc}
  402284:	00404d5c 	.word	0x00404d5c
  402288:	00404d7c 	.word	0x00404d7c
  40228c:	00404d9c 	.word	0x00404d9c

00402290 <puts>:
  402290:	4b02      	ldr	r3, [pc, #8]	; (40229c <puts+0xc>)
  402292:	4601      	mov	r1, r0
  402294:	6818      	ldr	r0, [r3, #0]
  402296:	f7ff bfa1 	b.w	4021dc <_puts_r>
  40229a:	bf00      	nop
  40229c:	20000070 	.word	0x20000070

004022a0 <setbuf>:
  4022a0:	2900      	cmp	r1, #0
  4022a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4022a6:	bf0c      	ite	eq
  4022a8:	2202      	moveq	r2, #2
  4022aa:	2200      	movne	r2, #0
  4022ac:	f000 b800 	b.w	4022b0 <setvbuf>

004022b0 <setvbuf>:
  4022b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4022b4:	461d      	mov	r5, r3
  4022b6:	4b4f      	ldr	r3, [pc, #316]	; (4023f4 <setvbuf+0x144>)
  4022b8:	681e      	ldr	r6, [r3, #0]
  4022ba:	4604      	mov	r4, r0
  4022bc:	460f      	mov	r7, r1
  4022be:	4690      	mov	r8, r2
  4022c0:	b126      	cbz	r6, 4022cc <setvbuf+0x1c>
  4022c2:	69b3      	ldr	r3, [r6, #24]
  4022c4:	b913      	cbnz	r3, 4022cc <setvbuf+0x1c>
  4022c6:	4630      	mov	r0, r6
  4022c8:	f001 f884 	bl	4033d4 <__sinit>
  4022cc:	4b4a      	ldr	r3, [pc, #296]	; (4023f8 <setvbuf+0x148>)
  4022ce:	429c      	cmp	r4, r3
  4022d0:	d101      	bne.n	4022d6 <setvbuf+0x26>
  4022d2:	6874      	ldr	r4, [r6, #4]
  4022d4:	e008      	b.n	4022e8 <setvbuf+0x38>
  4022d6:	4b49      	ldr	r3, [pc, #292]	; (4023fc <setvbuf+0x14c>)
  4022d8:	429c      	cmp	r4, r3
  4022da:	d101      	bne.n	4022e0 <setvbuf+0x30>
  4022dc:	68b4      	ldr	r4, [r6, #8]
  4022de:	e003      	b.n	4022e8 <setvbuf+0x38>
  4022e0:	4b47      	ldr	r3, [pc, #284]	; (402400 <setvbuf+0x150>)
  4022e2:	429c      	cmp	r4, r3
  4022e4:	bf08      	it	eq
  4022e6:	68f4      	ldreq	r4, [r6, #12]
  4022e8:	f1b8 0f02 	cmp.w	r8, #2
  4022ec:	d004      	beq.n	4022f8 <setvbuf+0x48>
  4022ee:	f1b8 0f01 	cmp.w	r8, #1
  4022f2:	d879      	bhi.n	4023e8 <setvbuf+0x138>
  4022f4:	2d00      	cmp	r5, #0
  4022f6:	db77      	blt.n	4023e8 <setvbuf+0x138>
  4022f8:	4621      	mov	r1, r4
  4022fa:	4630      	mov	r0, r6
  4022fc:	f001 f800 	bl	403300 <_fflush_r>
  402300:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402302:	b141      	cbz	r1, 402316 <setvbuf+0x66>
  402304:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402308:	4299      	cmp	r1, r3
  40230a:	d002      	beq.n	402312 <setvbuf+0x62>
  40230c:	4630      	mov	r0, r6
  40230e:	f001 fc9b 	bl	403c48 <_free_r>
  402312:	2300      	movs	r3, #0
  402314:	6363      	str	r3, [r4, #52]	; 0x34
  402316:	2300      	movs	r3, #0
  402318:	61a3      	str	r3, [r4, #24]
  40231a:	6063      	str	r3, [r4, #4]
  40231c:	89a3      	ldrh	r3, [r4, #12]
  40231e:	061b      	lsls	r3, r3, #24
  402320:	d503      	bpl.n	40232a <setvbuf+0x7a>
  402322:	6921      	ldr	r1, [r4, #16]
  402324:	4630      	mov	r0, r6
  402326:	f001 fc8f 	bl	403c48 <_free_r>
  40232a:	89a3      	ldrh	r3, [r4, #12]
  40232c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402330:	f023 0303 	bic.w	r3, r3, #3
  402334:	f1b8 0f02 	cmp.w	r8, #2
  402338:	81a3      	strh	r3, [r4, #12]
  40233a:	d01e      	beq.n	40237a <setvbuf+0xca>
  40233c:	ab01      	add	r3, sp, #4
  40233e:	466a      	mov	r2, sp
  402340:	4621      	mov	r1, r4
  402342:	4630      	mov	r0, r6
  402344:	f001 f8de 	bl	403504 <__swhatbuf_r>
  402348:	89a3      	ldrh	r3, [r4, #12]
  40234a:	4318      	orrs	r0, r3
  40234c:	81a0      	strh	r0, [r4, #12]
  40234e:	b90d      	cbnz	r5, 402354 <setvbuf+0xa4>
  402350:	9d00      	ldr	r5, [sp, #0]
  402352:	e000      	b.n	402356 <setvbuf+0xa6>
  402354:	bb2f      	cbnz	r7, 4023a2 <setvbuf+0xf2>
  402356:	4628      	mov	r0, r5
  402358:	f001 f934 	bl	4035c4 <malloc>
  40235c:	4607      	mov	r7, r0
  40235e:	b9d0      	cbnz	r0, 402396 <setvbuf+0xe6>
  402360:	f8dd 9000 	ldr.w	r9, [sp]
  402364:	45a9      	cmp	r9, r5
  402366:	d102      	bne.n	40236e <setvbuf+0xbe>
  402368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40236c:	e006      	b.n	40237c <setvbuf+0xcc>
  40236e:	4648      	mov	r0, r9
  402370:	f001 f928 	bl	4035c4 <malloc>
  402374:	4607      	mov	r7, r0
  402376:	b978      	cbnz	r0, 402398 <setvbuf+0xe8>
  402378:	e7f6      	b.n	402368 <setvbuf+0xb8>
  40237a:	2000      	movs	r0, #0
  40237c:	89a3      	ldrh	r3, [r4, #12]
  40237e:	f043 0302 	orr.w	r3, r3, #2
  402382:	81a3      	strh	r3, [r4, #12]
  402384:	2300      	movs	r3, #0
  402386:	60a3      	str	r3, [r4, #8]
  402388:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40238c:	6023      	str	r3, [r4, #0]
  40238e:	6123      	str	r3, [r4, #16]
  402390:	2301      	movs	r3, #1
  402392:	6163      	str	r3, [r4, #20]
  402394:	e02a      	b.n	4023ec <setvbuf+0x13c>
  402396:	46a9      	mov	r9, r5
  402398:	89a3      	ldrh	r3, [r4, #12]
  40239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40239e:	81a3      	strh	r3, [r4, #12]
  4023a0:	464d      	mov	r5, r9
  4023a2:	69b3      	ldr	r3, [r6, #24]
  4023a4:	b913      	cbnz	r3, 4023ac <setvbuf+0xfc>
  4023a6:	4630      	mov	r0, r6
  4023a8:	f001 f814 	bl	4033d4 <__sinit>
  4023ac:	f1b8 0f01 	cmp.w	r8, #1
  4023b0:	bf08      	it	eq
  4023b2:	89a3      	ldrheq	r3, [r4, #12]
  4023b4:	6027      	str	r7, [r4, #0]
  4023b6:	bf04      	itt	eq
  4023b8:	f043 0301 	orreq.w	r3, r3, #1
  4023bc:	81a3      	strheq	r3, [r4, #12]
  4023be:	89a3      	ldrh	r3, [r4, #12]
  4023c0:	6127      	str	r7, [r4, #16]
  4023c2:	f003 0008 	and.w	r0, r3, #8
  4023c6:	b280      	uxth	r0, r0
  4023c8:	6165      	str	r5, [r4, #20]
  4023ca:	b158      	cbz	r0, 4023e4 <setvbuf+0x134>
  4023cc:	f013 0301 	ands.w	r3, r3, #1
  4023d0:	f04f 0000 	mov.w	r0, #0
  4023d4:	bf1d      	ittte	ne
  4023d6:	426d      	negne	r5, r5
  4023d8:	60a0      	strne	r0, [r4, #8]
  4023da:	61a5      	strne	r5, [r4, #24]
  4023dc:	60a5      	streq	r5, [r4, #8]
  4023de:	bf08      	it	eq
  4023e0:	4618      	moveq	r0, r3
  4023e2:	e003      	b.n	4023ec <setvbuf+0x13c>
  4023e4:	60a0      	str	r0, [r4, #8]
  4023e6:	e001      	b.n	4023ec <setvbuf+0x13c>
  4023e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4023ec:	b003      	add	sp, #12
  4023ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4023f2:	bf00      	nop
  4023f4:	20000070 	.word	0x20000070
  4023f8:	00404d5c 	.word	0x00404d5c
  4023fc:	00404d7c 	.word	0x00404d7c
  402400:	00404d9c 	.word	0x00404d9c

00402404 <strlen>:
  402404:	4603      	mov	r3, r0
  402406:	f813 2b01 	ldrb.w	r2, [r3], #1
  40240a:	2a00      	cmp	r2, #0
  40240c:	d1fb      	bne.n	402406 <strlen+0x2>
  40240e:	1a18      	subs	r0, r3, r0
  402410:	3801      	subs	r0, #1
  402412:	4770      	bx	lr

00402414 <__swbuf_r>:
  402414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402416:	460f      	mov	r7, r1
  402418:	4614      	mov	r4, r2
  40241a:	4605      	mov	r5, r0
  40241c:	b118      	cbz	r0, 402426 <__swbuf_r+0x12>
  40241e:	6983      	ldr	r3, [r0, #24]
  402420:	b90b      	cbnz	r3, 402426 <__swbuf_r+0x12>
  402422:	f000 ffd7 	bl	4033d4 <__sinit>
  402426:	4b22      	ldr	r3, [pc, #136]	; (4024b0 <__swbuf_r+0x9c>)
  402428:	429c      	cmp	r4, r3
  40242a:	d101      	bne.n	402430 <__swbuf_r+0x1c>
  40242c:	686c      	ldr	r4, [r5, #4]
  40242e:	e008      	b.n	402442 <__swbuf_r+0x2e>
  402430:	4b20      	ldr	r3, [pc, #128]	; (4024b4 <__swbuf_r+0xa0>)
  402432:	429c      	cmp	r4, r3
  402434:	d101      	bne.n	40243a <__swbuf_r+0x26>
  402436:	68ac      	ldr	r4, [r5, #8]
  402438:	e003      	b.n	402442 <__swbuf_r+0x2e>
  40243a:	4b1f      	ldr	r3, [pc, #124]	; (4024b8 <__swbuf_r+0xa4>)
  40243c:	429c      	cmp	r4, r3
  40243e:	bf08      	it	eq
  402440:	68ec      	ldreq	r4, [r5, #12]
  402442:	69a3      	ldr	r3, [r4, #24]
  402444:	60a3      	str	r3, [r4, #8]
  402446:	89a3      	ldrh	r3, [r4, #12]
  402448:	071a      	lsls	r2, r3, #28
  40244a:	d509      	bpl.n	402460 <__swbuf_r+0x4c>
  40244c:	6923      	ldr	r3, [r4, #16]
  40244e:	b13b      	cbz	r3, 402460 <__swbuf_r+0x4c>
  402450:	6823      	ldr	r3, [r4, #0]
  402452:	6920      	ldr	r0, [r4, #16]
  402454:	1a18      	subs	r0, r3, r0
  402456:	6963      	ldr	r3, [r4, #20]
  402458:	4298      	cmp	r0, r3
  40245a:	b2fe      	uxtb	r6, r7
  40245c:	db0f      	blt.n	40247e <__swbuf_r+0x6a>
  40245e:	e008      	b.n	402472 <__swbuf_r+0x5e>
  402460:	4621      	mov	r1, r4
  402462:	4628      	mov	r0, r5
  402464:	f000 f82a 	bl	4024bc <__swsetup_r>
  402468:	2800      	cmp	r0, #0
  40246a:	d0f1      	beq.n	402450 <__swbuf_r+0x3c>
  40246c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  402470:	e01b      	b.n	4024aa <__swbuf_r+0x96>
  402472:	4621      	mov	r1, r4
  402474:	4628      	mov	r0, r5
  402476:	f000 ff43 	bl	403300 <_fflush_r>
  40247a:	2800      	cmp	r0, #0
  40247c:	d1f6      	bne.n	40246c <__swbuf_r+0x58>
  40247e:	68a3      	ldr	r3, [r4, #8]
  402480:	3b01      	subs	r3, #1
  402482:	60a3      	str	r3, [r4, #8]
  402484:	6823      	ldr	r3, [r4, #0]
  402486:	1c5a      	adds	r2, r3, #1
  402488:	6022      	str	r2, [r4, #0]
  40248a:	701f      	strb	r7, [r3, #0]
  40248c:	6963      	ldr	r3, [r4, #20]
  40248e:	3001      	adds	r0, #1
  402490:	4298      	cmp	r0, r3
  402492:	d004      	beq.n	40249e <__swbuf_r+0x8a>
  402494:	89a3      	ldrh	r3, [r4, #12]
  402496:	07db      	lsls	r3, r3, #31
  402498:	d507      	bpl.n	4024aa <__swbuf_r+0x96>
  40249a:	2e0a      	cmp	r6, #10
  40249c:	d105      	bne.n	4024aa <__swbuf_r+0x96>
  40249e:	4621      	mov	r1, r4
  4024a0:	4628      	mov	r0, r5
  4024a2:	f000 ff2d 	bl	403300 <_fflush_r>
  4024a6:	2800      	cmp	r0, #0
  4024a8:	d1e0      	bne.n	40246c <__swbuf_r+0x58>
  4024aa:	4630      	mov	r0, r6
  4024ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024ae:	bf00      	nop
  4024b0:	00404d5c 	.word	0x00404d5c
  4024b4:	00404d7c 	.word	0x00404d7c
  4024b8:	00404d9c 	.word	0x00404d9c

004024bc <__swsetup_r>:
  4024bc:	4b32      	ldr	r3, [pc, #200]	; (402588 <__swsetup_r+0xcc>)
  4024be:	b570      	push	{r4, r5, r6, lr}
  4024c0:	681d      	ldr	r5, [r3, #0]
  4024c2:	4606      	mov	r6, r0
  4024c4:	460c      	mov	r4, r1
  4024c6:	b125      	cbz	r5, 4024d2 <__swsetup_r+0x16>
  4024c8:	69ab      	ldr	r3, [r5, #24]
  4024ca:	b913      	cbnz	r3, 4024d2 <__swsetup_r+0x16>
  4024cc:	4628      	mov	r0, r5
  4024ce:	f000 ff81 	bl	4033d4 <__sinit>
  4024d2:	4b2e      	ldr	r3, [pc, #184]	; (40258c <__swsetup_r+0xd0>)
  4024d4:	429c      	cmp	r4, r3
  4024d6:	d101      	bne.n	4024dc <__swsetup_r+0x20>
  4024d8:	686c      	ldr	r4, [r5, #4]
  4024da:	e008      	b.n	4024ee <__swsetup_r+0x32>
  4024dc:	4b2c      	ldr	r3, [pc, #176]	; (402590 <__swsetup_r+0xd4>)
  4024de:	429c      	cmp	r4, r3
  4024e0:	d101      	bne.n	4024e6 <__swsetup_r+0x2a>
  4024e2:	68ac      	ldr	r4, [r5, #8]
  4024e4:	e003      	b.n	4024ee <__swsetup_r+0x32>
  4024e6:	4b2b      	ldr	r3, [pc, #172]	; (402594 <__swsetup_r+0xd8>)
  4024e8:	429c      	cmp	r4, r3
  4024ea:	bf08      	it	eq
  4024ec:	68ec      	ldreq	r4, [r5, #12]
  4024ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4024f2:	b29a      	uxth	r2, r3
  4024f4:	0715      	lsls	r5, r2, #28
  4024f6:	d41d      	bmi.n	402534 <__swsetup_r+0x78>
  4024f8:	06d0      	lsls	r0, r2, #27
  4024fa:	d402      	bmi.n	402502 <__swsetup_r+0x46>
  4024fc:	2209      	movs	r2, #9
  4024fe:	6032      	str	r2, [r6, #0]
  402500:	e03a      	b.n	402578 <__swsetup_r+0xbc>
  402502:	0751      	lsls	r1, r2, #29
  402504:	d512      	bpl.n	40252c <__swsetup_r+0x70>
  402506:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402508:	b141      	cbz	r1, 40251c <__swsetup_r+0x60>
  40250a:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40250e:	4299      	cmp	r1, r3
  402510:	d002      	beq.n	402518 <__swsetup_r+0x5c>
  402512:	4630      	mov	r0, r6
  402514:	f001 fb98 	bl	403c48 <_free_r>
  402518:	2300      	movs	r3, #0
  40251a:	6363      	str	r3, [r4, #52]	; 0x34
  40251c:	89a3      	ldrh	r3, [r4, #12]
  40251e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  402522:	81a3      	strh	r3, [r4, #12]
  402524:	2300      	movs	r3, #0
  402526:	6063      	str	r3, [r4, #4]
  402528:	6923      	ldr	r3, [r4, #16]
  40252a:	6023      	str	r3, [r4, #0]
  40252c:	89a3      	ldrh	r3, [r4, #12]
  40252e:	f043 0308 	orr.w	r3, r3, #8
  402532:	81a3      	strh	r3, [r4, #12]
  402534:	6923      	ldr	r3, [r4, #16]
  402536:	b94b      	cbnz	r3, 40254c <__swsetup_r+0x90>
  402538:	89a3      	ldrh	r3, [r4, #12]
  40253a:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40253e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402542:	d003      	beq.n	40254c <__swsetup_r+0x90>
  402544:	4621      	mov	r1, r4
  402546:	4630      	mov	r0, r6
  402548:	f001 f800 	bl	40354c <__smakebuf_r>
  40254c:	89a2      	ldrh	r2, [r4, #12]
  40254e:	f012 0301 	ands.w	r3, r2, #1
  402552:	d005      	beq.n	402560 <__swsetup_r+0xa4>
  402554:	2300      	movs	r3, #0
  402556:	60a3      	str	r3, [r4, #8]
  402558:	6963      	ldr	r3, [r4, #20]
  40255a:	425b      	negs	r3, r3
  40255c:	61a3      	str	r3, [r4, #24]
  40255e:	e003      	b.n	402568 <__swsetup_r+0xac>
  402560:	0792      	lsls	r2, r2, #30
  402562:	bf58      	it	pl
  402564:	6963      	ldrpl	r3, [r4, #20]
  402566:	60a3      	str	r3, [r4, #8]
  402568:	6923      	ldr	r3, [r4, #16]
  40256a:	b95b      	cbnz	r3, 402584 <__swsetup_r+0xc8>
  40256c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402570:	f003 0080 	and.w	r0, r3, #128	; 0x80
  402574:	b280      	uxth	r0, r0
  402576:	b130      	cbz	r0, 402586 <__swsetup_r+0xca>
  402578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40257c:	81a3      	strh	r3, [r4, #12]
  40257e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402582:	bd70      	pop	{r4, r5, r6, pc}
  402584:	2000      	movs	r0, #0
  402586:	bd70      	pop	{r4, r5, r6, pc}
  402588:	20000070 	.word	0x20000070
  40258c:	00404d5c 	.word	0x00404d5c
  402590:	00404d7c 	.word	0x00404d7c
  402594:	00404d9c 	.word	0x00404d9c

00402598 <quorem>:
  402598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40259c:	6903      	ldr	r3, [r0, #16]
  40259e:	690c      	ldr	r4, [r1, #16]
  4025a0:	429c      	cmp	r4, r3
  4025a2:	4680      	mov	r8, r0
  4025a4:	f300 8083 	bgt.w	4026ae <quorem+0x116>
  4025a8:	3c01      	subs	r4, #1
  4025aa:	f101 0714 	add.w	r7, r1, #20
  4025ae:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4025b2:	f100 0614 	add.w	r6, r0, #20
  4025b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4025ba:	eb06 030e 	add.w	r3, r6, lr
  4025be:	9301      	str	r3, [sp, #4]
  4025c0:	3501      	adds	r5, #1
  4025c2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  4025c6:	fbb3 f5f5 	udiv	r5, r3, r5
  4025ca:	eb07 090e 	add.w	r9, r7, lr
  4025ce:	2d00      	cmp	r5, #0
  4025d0:	d039      	beq.n	402646 <quorem+0xae>
  4025d2:	f04f 0a00 	mov.w	sl, #0
  4025d6:	4638      	mov	r0, r7
  4025d8:	46b4      	mov	ip, r6
  4025da:	46d3      	mov	fp, sl
  4025dc:	f850 2b04 	ldr.w	r2, [r0], #4
  4025e0:	b293      	uxth	r3, r2
  4025e2:	fb05 a303 	mla	r3, r5, r3, sl
  4025e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4025ea:	b29b      	uxth	r3, r3
  4025ec:	ebc3 030b 	rsb	r3, r3, fp
  4025f0:	0c12      	lsrs	r2, r2, #16
  4025f2:	f8bc b000 	ldrh.w	fp, [ip]
  4025f6:	fb05 a202 	mla	r2, r5, r2, sl
  4025fa:	fa13 f38b 	uxtah	r3, r3, fp
  4025fe:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  402602:	fa1f fb82 	uxth.w	fp, r2
  402606:	f8dc 2000 	ldr.w	r2, [ip]
  40260a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40260e:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402612:	b29b      	uxth	r3, r3
  402614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402618:	4581      	cmp	r9, r0
  40261a:	ea4f 4b22 	mov.w	fp, r2, asr #16
  40261e:	f84c 3b04 	str.w	r3, [ip], #4
  402622:	d2db      	bcs.n	4025dc <quorem+0x44>
  402624:	f856 300e 	ldr.w	r3, [r6, lr]
  402628:	b96b      	cbnz	r3, 402646 <quorem+0xae>
  40262a:	9b01      	ldr	r3, [sp, #4]
  40262c:	3b04      	subs	r3, #4
  40262e:	429e      	cmp	r6, r3
  402630:	461a      	mov	r2, r3
  402632:	d302      	bcc.n	40263a <quorem+0xa2>
  402634:	f8c8 4010 	str.w	r4, [r8, #16]
  402638:	e005      	b.n	402646 <quorem+0xae>
  40263a:	6812      	ldr	r2, [r2, #0]
  40263c:	3b04      	subs	r3, #4
  40263e:	2a00      	cmp	r2, #0
  402640:	d1f8      	bne.n	402634 <quorem+0x9c>
  402642:	3c01      	subs	r4, #1
  402644:	e7f3      	b.n	40262e <quorem+0x96>
  402646:	4640      	mov	r0, r8
  402648:	f001 fa27 	bl	403a9a <__mcmp>
  40264c:	2800      	cmp	r0, #0
  40264e:	db2c      	blt.n	4026aa <quorem+0x112>
  402650:	3501      	adds	r5, #1
  402652:	4630      	mov	r0, r6
  402654:	f04f 0e00 	mov.w	lr, #0
  402658:	f857 1b04 	ldr.w	r1, [r7], #4
  40265c:	f8d0 c000 	ldr.w	ip, [r0]
  402660:	b28a      	uxth	r2, r1
  402662:	ebc2 030e 	rsb	r3, r2, lr
  402666:	0c09      	lsrs	r1, r1, #16
  402668:	fa13 f38c 	uxtah	r3, r3, ip
  40266c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  402670:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402674:	b29b      	uxth	r3, r3
  402676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40267a:	45b9      	cmp	r9, r7
  40267c:	ea4f 4e22 	mov.w	lr, r2, asr #16
  402680:	f840 3b04 	str.w	r3, [r0], #4
  402684:	d2e8      	bcs.n	402658 <quorem+0xc0>
  402686:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40268a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40268e:	b962      	cbnz	r2, 4026aa <quorem+0x112>
  402690:	3b04      	subs	r3, #4
  402692:	429e      	cmp	r6, r3
  402694:	461a      	mov	r2, r3
  402696:	d302      	bcc.n	40269e <quorem+0x106>
  402698:	f8c8 4010 	str.w	r4, [r8, #16]
  40269c:	e005      	b.n	4026aa <quorem+0x112>
  40269e:	6812      	ldr	r2, [r2, #0]
  4026a0:	3b04      	subs	r3, #4
  4026a2:	2a00      	cmp	r2, #0
  4026a4:	d1f8      	bne.n	402698 <quorem+0x100>
  4026a6:	3c01      	subs	r4, #1
  4026a8:	e7f3      	b.n	402692 <quorem+0xfa>
  4026aa:	4628      	mov	r0, r5
  4026ac:	e000      	b.n	4026b0 <quorem+0x118>
  4026ae:	2000      	movs	r0, #0
  4026b0:	b003      	add	sp, #12
  4026b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

004026b8 <_dtoa_r>:
  4026b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4026be:	b095      	sub	sp, #84	; 0x54
  4026c0:	4682      	mov	sl, r0
  4026c2:	9c21      	ldr	r4, [sp, #132]	; 0x84
  4026c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4026c8:	b945      	cbnz	r5, 4026dc <_dtoa_r+0x24>
  4026ca:	2010      	movs	r0, #16
  4026cc:	f000 ff7a 	bl	4035c4 <malloc>
  4026d0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  4026d4:	6045      	str	r5, [r0, #4]
  4026d6:	6085      	str	r5, [r0, #8]
  4026d8:	6005      	str	r5, [r0, #0]
  4026da:	60c5      	str	r5, [r0, #12]
  4026dc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4026e0:	6819      	ldr	r1, [r3, #0]
  4026e2:	b159      	cbz	r1, 4026fc <_dtoa_r+0x44>
  4026e4:	685a      	ldr	r2, [r3, #4]
  4026e6:	604a      	str	r2, [r1, #4]
  4026e8:	2301      	movs	r3, #1
  4026ea:	4093      	lsls	r3, r2
  4026ec:	608b      	str	r3, [r1, #8]
  4026ee:	4650      	mov	r0, sl
  4026f0:	f000 fffb 	bl	4036ea <_Bfree>
  4026f4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4026f8:	2200      	movs	r2, #0
  4026fa:	601a      	str	r2, [r3, #0]
  4026fc:	9b03      	ldr	r3, [sp, #12]
  4026fe:	4aa0      	ldr	r2, [pc, #640]	; (402980 <_dtoa_r+0x2c8>)
  402700:	2b00      	cmp	r3, #0
  402702:	bfbf      	itttt	lt
  402704:	2301      	movlt	r3, #1
  402706:	6023      	strlt	r3, [r4, #0]
  402708:	9b03      	ldrlt	r3, [sp, #12]
  40270a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  40270e:	bfb8      	it	lt
  402710:	9303      	strlt	r3, [sp, #12]
  402712:	f8dd 800c 	ldr.w	r8, [sp, #12]
  402716:	bfa4      	itt	ge
  402718:	2300      	movge	r3, #0
  40271a:	6023      	strge	r3, [r4, #0]
  40271c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  402720:	0d1b      	lsrs	r3, r3, #20
  402722:	051b      	lsls	r3, r3, #20
  402724:	4293      	cmp	r3, r2
  402726:	d11d      	bne.n	402764 <_dtoa_r+0xac>
  402728:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40272a:	f242 730f 	movw	r3, #9999	; 0x270f
  40272e:	6013      	str	r3, [r2, #0]
  402730:	9b02      	ldr	r3, [sp, #8]
  402732:	b943      	cbnz	r3, 402746 <_dtoa_r+0x8e>
  402734:	4a93      	ldr	r2, [pc, #588]	; (402984 <_dtoa_r+0x2cc>)
  402736:	4b94      	ldr	r3, [pc, #592]	; (402988 <_dtoa_r+0x2d0>)
  402738:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40273c:	2800      	cmp	r0, #0
  40273e:	bf14      	ite	ne
  402740:	4618      	movne	r0, r3
  402742:	4610      	moveq	r0, r2
  402744:	e000      	b.n	402748 <_dtoa_r+0x90>
  402746:	4890      	ldr	r0, [pc, #576]	; (402988 <_dtoa_r+0x2d0>)
  402748:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40274a:	2b00      	cmp	r3, #0
  40274c:	f000 854a 	beq.w	4031e4 <_dtoa_r+0xb2c>
  402750:	78c3      	ldrb	r3, [r0, #3]
  402752:	b113      	cbz	r3, 40275a <_dtoa_r+0xa2>
  402754:	f100 0308 	add.w	r3, r0, #8
  402758:	e000      	b.n	40275c <_dtoa_r+0xa4>
  40275a:	1cc3      	adds	r3, r0, #3
  40275c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40275e:	6013      	str	r3, [r2, #0]
  402760:	f000 bd40 	b.w	4031e4 <_dtoa_r+0xb2c>
  402764:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  402768:	2200      	movs	r2, #0
  40276a:	2300      	movs	r3, #0
  40276c:	4620      	mov	r0, r4
  40276e:	4629      	mov	r1, r5
  402770:	f002 f958 	bl	404a24 <__aeabi_dcmpeq>
  402774:	4607      	mov	r7, r0
  402776:	b158      	cbz	r0, 402790 <_dtoa_r+0xd8>
  402778:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40277a:	2301      	movs	r3, #1
  40277c:	6013      	str	r3, [r2, #0]
  40277e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402780:	2b00      	cmp	r3, #0
  402782:	f000 8522 	beq.w	4031ca <_dtoa_r+0xb12>
  402786:	4881      	ldr	r0, [pc, #516]	; (40298c <_dtoa_r+0x2d4>)
  402788:	6018      	str	r0, [r3, #0]
  40278a:	3801      	subs	r0, #1
  40278c:	f000 bd2a 	b.w	4031e4 <_dtoa_r+0xb2c>
  402790:	ab12      	add	r3, sp, #72	; 0x48
  402792:	9301      	str	r3, [sp, #4]
  402794:	ab13      	add	r3, sp, #76	; 0x4c
  402796:	9300      	str	r3, [sp, #0]
  402798:	4622      	mov	r2, r4
  40279a:	462b      	mov	r3, r5
  40279c:	4650      	mov	r0, sl
  40279e:	f001 f9f7 	bl	403b90 <__d2b>
  4027a2:	f3c8 560a 	ubfx	r6, r8, #20, #11
  4027a6:	9004      	str	r0, [sp, #16]
  4027a8:	b156      	cbz	r6, 4027c0 <_dtoa_r+0x108>
  4027aa:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4027ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4027b2:	4620      	mov	r0, r4
  4027b4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4027b8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  4027bc:	9711      	str	r7, [sp, #68]	; 0x44
  4027be:	e01d      	b.n	4027fc <_dtoa_r+0x144>
  4027c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4027c2:	9e12      	ldr	r6, [sp, #72]	; 0x48
  4027c4:	441e      	add	r6, r3
  4027c6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4027ca:	2b20      	cmp	r3, #32
  4027cc:	dd0a      	ble.n	4027e4 <_dtoa_r+0x12c>
  4027ce:	9a02      	ldr	r2, [sp, #8]
  4027d0:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4027d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4027d8:	fa22 f000 	lsr.w	r0, r2, r0
  4027dc:	fa08 f303 	lsl.w	r3, r8, r3
  4027e0:	4318      	orrs	r0, r3
  4027e2:	e004      	b.n	4027ee <_dtoa_r+0x136>
  4027e4:	f1c3 0020 	rsb	r0, r3, #32
  4027e8:	9b02      	ldr	r3, [sp, #8]
  4027ea:	fa03 f000 	lsl.w	r0, r3, r0
  4027ee:	f001 fe3b 	bl	404468 <__aeabi_ui2d>
  4027f2:	2301      	movs	r3, #1
  4027f4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4027f8:	3e01      	subs	r6, #1
  4027fa:	9311      	str	r3, [sp, #68]	; 0x44
  4027fc:	2200      	movs	r2, #0
  4027fe:	4b64      	ldr	r3, [pc, #400]	; (402990 <_dtoa_r+0x2d8>)
  402800:	f001 fcf4 	bl	4041ec <__aeabi_dsub>
  402804:	a358      	add	r3, pc, #352	; (adr r3, 402968 <_dtoa_r+0x2b0>)
  402806:	e9d3 2300 	ldrd	r2, r3, [r3]
  40280a:	f001 fea3 	bl	404554 <__aeabi_dmul>
  40280e:	a358      	add	r3, pc, #352	; (adr r3, 402970 <_dtoa_r+0x2b8>)
  402810:	e9d3 2300 	ldrd	r2, r3, [r3]
  402814:	f001 fcec 	bl	4041f0 <__adddf3>
  402818:	4604      	mov	r4, r0
  40281a:	4630      	mov	r0, r6
  40281c:	460d      	mov	r5, r1
  40281e:	f001 fe33 	bl	404488 <__aeabi_i2d>
  402822:	a355      	add	r3, pc, #340	; (adr r3, 402978 <_dtoa_r+0x2c0>)
  402824:	e9d3 2300 	ldrd	r2, r3, [r3]
  402828:	f001 fe94 	bl	404554 <__aeabi_dmul>
  40282c:	4602      	mov	r2, r0
  40282e:	460b      	mov	r3, r1
  402830:	4620      	mov	r0, r4
  402832:	4629      	mov	r1, r5
  402834:	f001 fcdc 	bl	4041f0 <__adddf3>
  402838:	4604      	mov	r4, r0
  40283a:	460d      	mov	r5, r1
  40283c:	f002 f93a 	bl	404ab4 <__aeabi_d2iz>
  402840:	2200      	movs	r2, #0
  402842:	4683      	mov	fp, r0
  402844:	2300      	movs	r3, #0
  402846:	4620      	mov	r0, r4
  402848:	4629      	mov	r1, r5
  40284a:	f002 f8f5 	bl	404a38 <__aeabi_dcmplt>
  40284e:	b158      	cbz	r0, 402868 <_dtoa_r+0x1b0>
  402850:	4658      	mov	r0, fp
  402852:	f001 fe19 	bl	404488 <__aeabi_i2d>
  402856:	4602      	mov	r2, r0
  402858:	460b      	mov	r3, r1
  40285a:	4620      	mov	r0, r4
  40285c:	4629      	mov	r1, r5
  40285e:	f002 f8e1 	bl	404a24 <__aeabi_dcmpeq>
  402862:	b908      	cbnz	r0, 402868 <_dtoa_r+0x1b0>
  402864:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402868:	f1bb 0f16 	cmp.w	fp, #22
  40286c:	d80d      	bhi.n	40288a <_dtoa_r+0x1d2>
  40286e:	4949      	ldr	r1, [pc, #292]	; (402994 <_dtoa_r+0x2dc>)
  402870:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  402874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402878:	e9d1 0100 	ldrd	r0, r1, [r1]
  40287c:	f002 f8fa 	bl	404a74 <__aeabi_dcmpgt>
  402880:	b130      	cbz	r0, 402890 <_dtoa_r+0x1d8>
  402882:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402886:	2300      	movs	r3, #0
  402888:	e000      	b.n	40288c <_dtoa_r+0x1d4>
  40288a:	2301      	movs	r3, #1
  40288c:	9310      	str	r3, [sp, #64]	; 0x40
  40288e:	e000      	b.n	402892 <_dtoa_r+0x1da>
  402890:	9010      	str	r0, [sp, #64]	; 0x40
  402892:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402894:	1b9e      	subs	r6, r3, r6
  402896:	1e73      	subs	r3, r6, #1
  402898:	9307      	str	r3, [sp, #28]
  40289a:	bf43      	ittte	mi
  40289c:	f1c3 0800 	rsbmi	r8, r3, #0
  4028a0:	2300      	movmi	r3, #0
  4028a2:	9307      	strmi	r3, [sp, #28]
  4028a4:	f04f 0800 	movpl.w	r8, #0
  4028a8:	f1bb 0f00 	cmp.w	fp, #0
  4028ac:	db06      	blt.n	4028bc <_dtoa_r+0x204>
  4028ae:	9b07      	ldr	r3, [sp, #28]
  4028b0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  4028b4:	445b      	add	r3, fp
  4028b6:	9307      	str	r3, [sp, #28]
  4028b8:	2700      	movs	r7, #0
  4028ba:	e005      	b.n	4028c8 <_dtoa_r+0x210>
  4028bc:	2300      	movs	r3, #0
  4028be:	ebcb 0808 	rsb	r8, fp, r8
  4028c2:	f1cb 0700 	rsb	r7, fp, #0
  4028c6:	930b      	str	r3, [sp, #44]	; 0x2c
  4028c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4028ca:	2b09      	cmp	r3, #9
  4028cc:	d827      	bhi.n	40291e <_dtoa_r+0x266>
  4028ce:	2b05      	cmp	r3, #5
  4028d0:	bfc4      	itt	gt
  4028d2:	3b04      	subgt	r3, #4
  4028d4:	931e      	strgt	r3, [sp, #120]	; 0x78
  4028d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4028d8:	f1a3 0302 	sub.w	r3, r3, #2
  4028dc:	bfcc      	ite	gt
  4028de:	2500      	movgt	r5, #0
  4028e0:	2501      	movle	r5, #1
  4028e2:	2b03      	cmp	r3, #3
  4028e4:	d820      	bhi.n	402928 <_dtoa_r+0x270>
  4028e6:	e8df f003 	tbb	[pc, r3]
  4028ea:	0e06      	.short	0x0e06
  4028ec:	0402      	.short	0x0402
  4028ee:	2301      	movs	r3, #1
  4028f0:	e002      	b.n	4028f8 <_dtoa_r+0x240>
  4028f2:	2301      	movs	r3, #1
  4028f4:	e008      	b.n	402908 <_dtoa_r+0x250>
  4028f6:	2300      	movs	r3, #0
  4028f8:	930a      	str	r3, [sp, #40]	; 0x28
  4028fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4028fc:	2b00      	cmp	r3, #0
  4028fe:	dd1d      	ble.n	40293c <_dtoa_r+0x284>
  402900:	4699      	mov	r9, r3
  402902:	9305      	str	r3, [sp, #20]
  402904:	e021      	b.n	40294a <_dtoa_r+0x292>
  402906:	2300      	movs	r3, #0
  402908:	930a      	str	r3, [sp, #40]	; 0x28
  40290a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40290c:	eb0b 0903 	add.w	r9, fp, r3
  402910:	f109 0301 	add.w	r3, r9, #1
  402914:	2b01      	cmp	r3, #1
  402916:	9305      	str	r3, [sp, #20]
  402918:	bfb8      	it	lt
  40291a:	2301      	movlt	r3, #1
  40291c:	e015      	b.n	40294a <_dtoa_r+0x292>
  40291e:	2501      	movs	r5, #1
  402920:	2300      	movs	r3, #0
  402922:	931e      	str	r3, [sp, #120]	; 0x78
  402924:	950a      	str	r5, [sp, #40]	; 0x28
  402926:	e001      	b.n	40292c <_dtoa_r+0x274>
  402928:	2301      	movs	r3, #1
  40292a:	930a      	str	r3, [sp, #40]	; 0x28
  40292c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  402930:	2200      	movs	r2, #0
  402932:	f8cd 9014 	str.w	r9, [sp, #20]
  402936:	2312      	movs	r3, #18
  402938:	921f      	str	r2, [sp, #124]	; 0x7c
  40293a:	e006      	b.n	40294a <_dtoa_r+0x292>
  40293c:	f04f 0901 	mov.w	r9, #1
  402940:	f8cd 9014 	str.w	r9, [sp, #20]
  402944:	464b      	mov	r3, r9
  402946:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  40294a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  40294e:	2200      	movs	r2, #0
  402950:	6062      	str	r2, [r4, #4]
  402952:	2104      	movs	r1, #4
  402954:	f101 0214 	add.w	r2, r1, #20
  402958:	429a      	cmp	r2, r3
  40295a:	d81d      	bhi.n	402998 <_dtoa_r+0x2e0>
  40295c:	6862      	ldr	r2, [r4, #4]
  40295e:	3201      	adds	r2, #1
  402960:	6062      	str	r2, [r4, #4]
  402962:	0049      	lsls	r1, r1, #1
  402964:	e7f6      	b.n	402954 <_dtoa_r+0x29c>
  402966:	bf00      	nop
  402968:	636f4361 	.word	0x636f4361
  40296c:	3fd287a7 	.word	0x3fd287a7
  402970:	8b60c8b3 	.word	0x8b60c8b3
  402974:	3fc68a28 	.word	0x3fc68a28
  402978:	509f79fb 	.word	0x509f79fb
  40297c:	3fd34413 	.word	0x3fd34413
  402980:	7ff00000 	.word	0x7ff00000
  402984:	00404d4c 	.word	0x00404d4c
  402988:	00404d55 	.word	0x00404d55
  40298c:	00404d29 	.word	0x00404d29
  402990:	3ff80000 	.word	0x3ff80000
  402994:	00404dc0 	.word	0x00404dc0
  402998:	6861      	ldr	r1, [r4, #4]
  40299a:	4650      	mov	r0, sl
  40299c:	f000 fe70 	bl	403680 <_Balloc>
  4029a0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4029a4:	6020      	str	r0, [r4, #0]
  4029a6:	681b      	ldr	r3, [r3, #0]
  4029a8:	9306      	str	r3, [sp, #24]
  4029aa:	9b05      	ldr	r3, [sp, #20]
  4029ac:	2b0e      	cmp	r3, #14
  4029ae:	f200 815d 	bhi.w	402c6c <_dtoa_r+0x5b4>
  4029b2:	2d00      	cmp	r5, #0
  4029b4:	f000 815a 	beq.w	402c6c <_dtoa_r+0x5b4>
  4029b8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4029bc:	f1bb 0f00 	cmp.w	fp, #0
  4029c0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  4029c4:	dd31      	ble.n	402a2a <_dtoa_r+0x372>
  4029c6:	4aa0      	ldr	r2, [pc, #640]	; (402c48 <_dtoa_r+0x590>)
  4029c8:	f00b 030f 	and.w	r3, fp, #15
  4029cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4029d0:	e9d3 3400 	ldrd	r3, r4, [r3]
  4029d4:	ea4f 152b 	mov.w	r5, fp, asr #4
  4029d8:	06e8      	lsls	r0, r5, #27
  4029da:	e9cd 3408 	strd	r3, r4, [sp, #32]
  4029de:	d50c      	bpl.n	4029fa <_dtoa_r+0x342>
  4029e0:	4b9a      	ldr	r3, [pc, #616]	; (402c4c <_dtoa_r+0x594>)
  4029e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4029e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4029ea:	f001 fedd 	bl	4047a8 <__aeabi_ddiv>
  4029ee:	f005 050f 	and.w	r5, r5, #15
  4029f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4029f6:	2403      	movs	r4, #3
  4029f8:	e000      	b.n	4029fc <_dtoa_r+0x344>
  4029fa:	2402      	movs	r4, #2
  4029fc:	4e93      	ldr	r6, [pc, #588]	; (402c4c <_dtoa_r+0x594>)
  4029fe:	b16d      	cbz	r5, 402a1c <_dtoa_r+0x364>
  402a00:	07e9      	lsls	r1, r5, #31
  402a02:	d508      	bpl.n	402a16 <_dtoa_r+0x35e>
  402a04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  402a08:	e9d6 2300 	ldrd	r2, r3, [r6]
  402a0c:	f001 fda2 	bl	404554 <__aeabi_dmul>
  402a10:	e9cd 0108 	strd	r0, r1, [sp, #32]
  402a14:	3401      	adds	r4, #1
  402a16:	106d      	asrs	r5, r5, #1
  402a18:	3608      	adds	r6, #8
  402a1a:	e7f0      	b.n	4029fe <_dtoa_r+0x346>
  402a1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  402a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402a24:	f001 fec0 	bl	4047a8 <__aeabi_ddiv>
  402a28:	e020      	b.n	402a6c <_dtoa_r+0x3b4>
  402a2a:	f1cb 0500 	rsb	r5, fp, #0
  402a2e:	b305      	cbz	r5, 402a72 <_dtoa_r+0x3ba>
  402a30:	4b85      	ldr	r3, [pc, #532]	; (402c48 <_dtoa_r+0x590>)
  402a32:	4e86      	ldr	r6, [pc, #536]	; (402c4c <_dtoa_r+0x594>)
  402a34:	f005 020f 	and.w	r2, r5, #15
  402a38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  402a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402a40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402a44:	f001 fd86 	bl	404554 <__aeabi_dmul>
  402a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402a4c:	112d      	asrs	r5, r5, #4
  402a4e:	2300      	movs	r3, #0
  402a50:	2402      	movs	r4, #2
  402a52:	b155      	cbz	r5, 402a6a <_dtoa_r+0x3b2>
  402a54:	07ea      	lsls	r2, r5, #31
  402a56:	d505      	bpl.n	402a64 <_dtoa_r+0x3ac>
  402a58:	e9d6 2300 	ldrd	r2, r3, [r6]
  402a5c:	f001 fd7a 	bl	404554 <__aeabi_dmul>
  402a60:	3401      	adds	r4, #1
  402a62:	2301      	movs	r3, #1
  402a64:	106d      	asrs	r5, r5, #1
  402a66:	3608      	adds	r6, #8
  402a68:	e7f3      	b.n	402a52 <_dtoa_r+0x39a>
  402a6a:	b11b      	cbz	r3, 402a74 <_dtoa_r+0x3bc>
  402a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402a70:	e000      	b.n	402a74 <_dtoa_r+0x3bc>
  402a72:	2402      	movs	r4, #2
  402a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402a76:	b1e3      	cbz	r3, 402ab2 <_dtoa_r+0x3fa>
  402a78:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  402a7c:	2200      	movs	r2, #0
  402a7e:	4b74      	ldr	r3, [pc, #464]	; (402c50 <_dtoa_r+0x598>)
  402a80:	4628      	mov	r0, r5
  402a82:	4631      	mov	r1, r6
  402a84:	f001 ffd8 	bl	404a38 <__aeabi_dcmplt>
  402a88:	b198      	cbz	r0, 402ab2 <_dtoa_r+0x3fa>
  402a8a:	9b05      	ldr	r3, [sp, #20]
  402a8c:	b18b      	cbz	r3, 402ab2 <_dtoa_r+0x3fa>
  402a8e:	f1b9 0f00 	cmp.w	r9, #0
  402a92:	f340 80e7 	ble.w	402c64 <_dtoa_r+0x5ac>
  402a96:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  402a9a:	9308      	str	r3, [sp, #32]
  402a9c:	4631      	mov	r1, r6
  402a9e:	2200      	movs	r2, #0
  402aa0:	4b6c      	ldr	r3, [pc, #432]	; (402c54 <_dtoa_r+0x59c>)
  402aa2:	4628      	mov	r0, r5
  402aa4:	f001 fd56 	bl	404554 <__aeabi_dmul>
  402aa8:	3401      	adds	r4, #1
  402aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402aae:	464e      	mov	r6, r9
  402ab0:	e002      	b.n	402ab8 <_dtoa_r+0x400>
  402ab2:	9e05      	ldr	r6, [sp, #20]
  402ab4:	f8cd b020 	str.w	fp, [sp, #32]
  402ab8:	4620      	mov	r0, r4
  402aba:	f001 fce5 	bl	404488 <__aeabi_i2d>
  402abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402ac2:	f001 fd47 	bl	404554 <__aeabi_dmul>
  402ac6:	4b64      	ldr	r3, [pc, #400]	; (402c58 <_dtoa_r+0x5a0>)
  402ac8:	2200      	movs	r2, #0
  402aca:	f001 fb91 	bl	4041f0 <__adddf3>
  402ace:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  402ad2:	4604      	mov	r4, r0
  402ad4:	930c      	str	r3, [sp, #48]	; 0x30
  402ad6:	461d      	mov	r5, r3
  402ad8:	b9d6      	cbnz	r6, 402b10 <_dtoa_r+0x458>
  402ada:	2200      	movs	r2, #0
  402adc:	4b5f      	ldr	r3, [pc, #380]	; (402c5c <_dtoa_r+0x5a4>)
  402ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402ae2:	f001 fb83 	bl	4041ec <__aeabi_dsub>
  402ae6:	4622      	mov	r2, r4
  402ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402aee:	f001 ffc1 	bl	404a74 <__aeabi_dcmpgt>
  402af2:	2800      	cmp	r0, #0
  402af4:	f040 8240 	bne.w	402f78 <_dtoa_r+0x8c0>
  402af8:	990c      	ldr	r1, [sp, #48]	; 0x30
  402afa:	4622      	mov	r2, r4
  402afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  402b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402b04:	f001 ff98 	bl	404a38 <__aeabi_dcmplt>
  402b08:	2800      	cmp	r0, #0
  402b0a:	f040 822c 	bne.w	402f66 <_dtoa_r+0x8ae>
  402b0e:	e0a9      	b.n	402c64 <_dtoa_r+0x5ac>
  402b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402b12:	4b4d      	ldr	r3, [pc, #308]	; (402c48 <_dtoa_r+0x590>)
  402b14:	1e71      	subs	r1, r6, #1
  402b16:	2a00      	cmp	r2, #0
  402b18:	d049      	beq.n	402bae <_dtoa_r+0x4f6>
  402b1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  402b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b22:	2000      	movs	r0, #0
  402b24:	494e      	ldr	r1, [pc, #312]	; (402c60 <_dtoa_r+0x5a8>)
  402b26:	f001 fe3f 	bl	4047a8 <__aeabi_ddiv>
  402b2a:	4622      	mov	r2, r4
  402b2c:	462b      	mov	r3, r5
  402b2e:	f001 fb5d 	bl	4041ec <__aeabi_dsub>
  402b32:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402b36:	9c06      	ldr	r4, [sp, #24]
  402b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402b3c:	f001 ffba 	bl	404ab4 <__aeabi_d2iz>
  402b40:	4605      	mov	r5, r0
  402b42:	f001 fca1 	bl	404488 <__aeabi_i2d>
  402b46:	4602      	mov	r2, r0
  402b48:	460b      	mov	r3, r1
  402b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402b4e:	f001 fb4d 	bl	4041ec <__aeabi_dsub>
  402b52:	3530      	adds	r5, #48	; 0x30
  402b54:	f804 5b01 	strb.w	r5, [r4], #1
  402b58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402b60:	f001 ff6a 	bl	404a38 <__aeabi_dcmplt>
  402b64:	2800      	cmp	r0, #0
  402b66:	f040 8320 	bne.w	4031aa <_dtoa_r+0xaf2>
  402b6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402b6e:	2000      	movs	r0, #0
  402b70:	4937      	ldr	r1, [pc, #220]	; (402c50 <_dtoa_r+0x598>)
  402b72:	f001 fb3b 	bl	4041ec <__aeabi_dsub>
  402b76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402b7a:	f001 ff5d 	bl	404a38 <__aeabi_dcmplt>
  402b7e:	2800      	cmp	r0, #0
  402b80:	f040 80d2 	bne.w	402d28 <_dtoa_r+0x670>
  402b84:	9b06      	ldr	r3, [sp, #24]
  402b86:	1ae3      	subs	r3, r4, r3
  402b88:	42b3      	cmp	r3, r6
  402b8a:	da6b      	bge.n	402c64 <_dtoa_r+0x5ac>
  402b8c:	2200      	movs	r2, #0
  402b8e:	4b31      	ldr	r3, [pc, #196]	; (402c54 <_dtoa_r+0x59c>)
  402b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402b94:	f001 fcde 	bl	404554 <__aeabi_dmul>
  402b98:	2200      	movs	r2, #0
  402b9a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402b9e:	4b2d      	ldr	r3, [pc, #180]	; (402c54 <_dtoa_r+0x59c>)
  402ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402ba4:	f001 fcd6 	bl	404554 <__aeabi_dmul>
  402ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402bac:	e7c4      	b.n	402b38 <_dtoa_r+0x480>
  402bae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  402bb2:	4622      	mov	r2, r4
  402bb4:	462b      	mov	r3, r5
  402bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
  402bba:	f001 fccb 	bl	404554 <__aeabi_dmul>
  402bbe:	9b06      	ldr	r3, [sp, #24]
  402bc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402bc4:	199c      	adds	r4, r3, r6
  402bc6:	461d      	mov	r5, r3
  402bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402bcc:	f001 ff72 	bl	404ab4 <__aeabi_d2iz>
  402bd0:	4606      	mov	r6, r0
  402bd2:	f001 fc59 	bl	404488 <__aeabi_i2d>
  402bd6:	3630      	adds	r6, #48	; 0x30
  402bd8:	4602      	mov	r2, r0
  402bda:	460b      	mov	r3, r1
  402bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402be0:	f001 fb04 	bl	4041ec <__aeabi_dsub>
  402be4:	f805 6b01 	strb.w	r6, [r5], #1
  402be8:	42ac      	cmp	r4, r5
  402bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402bee:	f04f 0200 	mov.w	r2, #0
  402bf2:	d123      	bne.n	402c3c <_dtoa_r+0x584>
  402bf4:	4b1a      	ldr	r3, [pc, #104]	; (402c60 <_dtoa_r+0x5a8>)
  402bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402bfa:	f001 faf9 	bl	4041f0 <__adddf3>
  402bfe:	4602      	mov	r2, r0
  402c00:	460b      	mov	r3, r1
  402c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402c06:	f001 ff35 	bl	404a74 <__aeabi_dcmpgt>
  402c0a:	2800      	cmp	r0, #0
  402c0c:	f040 808c 	bne.w	402d28 <_dtoa_r+0x670>
  402c10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402c14:	2000      	movs	r0, #0
  402c16:	4912      	ldr	r1, [pc, #72]	; (402c60 <_dtoa_r+0x5a8>)
  402c18:	f001 fae8 	bl	4041ec <__aeabi_dsub>
  402c1c:	4602      	mov	r2, r0
  402c1e:	460b      	mov	r3, r1
  402c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402c24:	f001 ff08 	bl	404a38 <__aeabi_dcmplt>
  402c28:	b1e0      	cbz	r0, 402c64 <_dtoa_r+0x5ac>
  402c2a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  402c2e:	2b30      	cmp	r3, #48	; 0x30
  402c30:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  402c34:	f040 82b9 	bne.w	4031aa <_dtoa_r+0xaf2>
  402c38:	4614      	mov	r4, r2
  402c3a:	e7f6      	b.n	402c2a <_dtoa_r+0x572>
  402c3c:	4b05      	ldr	r3, [pc, #20]	; (402c54 <_dtoa_r+0x59c>)
  402c3e:	f001 fc89 	bl	404554 <__aeabi_dmul>
  402c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402c46:	e7bf      	b.n	402bc8 <_dtoa_r+0x510>
  402c48:	00404dc0 	.word	0x00404dc0
  402c4c:	00404e88 	.word	0x00404e88
  402c50:	3ff00000 	.word	0x3ff00000
  402c54:	40240000 	.word	0x40240000
  402c58:	401c0000 	.word	0x401c0000
  402c5c:	40140000 	.word	0x40140000
  402c60:	3fe00000 	.word	0x3fe00000
  402c64:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  402c68:	e9cd 3402 	strd	r3, r4, [sp, #8]
  402c6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c6e:	2b00      	cmp	r3, #0
  402c70:	db7d      	blt.n	402d6e <_dtoa_r+0x6b6>
  402c72:	f1bb 0f0e 	cmp.w	fp, #14
  402c76:	dc7a      	bgt.n	402d6e <_dtoa_r+0x6b6>
  402c78:	4bab      	ldr	r3, [pc, #684]	; (402f28 <_dtoa_r+0x870>)
  402c7a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  402c7e:	e9d3 6700 	ldrd	r6, r7, [r3]
  402c82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402c84:	2b00      	cmp	r3, #0
  402c86:	da14      	bge.n	402cb2 <_dtoa_r+0x5fa>
  402c88:	9b05      	ldr	r3, [sp, #20]
  402c8a:	2b00      	cmp	r3, #0
  402c8c:	dc11      	bgt.n	402cb2 <_dtoa_r+0x5fa>
  402c8e:	f040 816c 	bne.w	402f6a <_dtoa_r+0x8b2>
  402c92:	2200      	movs	r2, #0
  402c94:	4ba5      	ldr	r3, [pc, #660]	; (402f2c <_dtoa_r+0x874>)
  402c96:	4630      	mov	r0, r6
  402c98:	4639      	mov	r1, r7
  402c9a:	f001 fc5b 	bl	404554 <__aeabi_dmul>
  402c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402ca2:	f001 fedd 	bl	404a60 <__aeabi_dcmpge>
  402ca6:	9d05      	ldr	r5, [sp, #20]
  402ca8:	462e      	mov	r6, r5
  402caa:	2800      	cmp	r0, #0
  402cac:	f040 815f 	bne.w	402f6e <_dtoa_r+0x8b6>
  402cb0:	e165      	b.n	402f7e <_dtoa_r+0x8c6>
  402cb2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  402cb6:	9c06      	ldr	r4, [sp, #24]
  402cb8:	4632      	mov	r2, r6
  402cba:	463b      	mov	r3, r7
  402cbc:	4640      	mov	r0, r8
  402cbe:	4649      	mov	r1, r9
  402cc0:	f001 fd72 	bl	4047a8 <__aeabi_ddiv>
  402cc4:	f001 fef6 	bl	404ab4 <__aeabi_d2iz>
  402cc8:	4605      	mov	r5, r0
  402cca:	f001 fbdd 	bl	404488 <__aeabi_i2d>
  402cce:	4632      	mov	r2, r6
  402cd0:	463b      	mov	r3, r7
  402cd2:	f001 fc3f 	bl	404554 <__aeabi_dmul>
  402cd6:	460b      	mov	r3, r1
  402cd8:	4602      	mov	r2, r0
  402cda:	4649      	mov	r1, r9
  402cdc:	4640      	mov	r0, r8
  402cde:	f001 fa85 	bl	4041ec <__aeabi_dsub>
  402ce2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  402ce6:	9b06      	ldr	r3, [sp, #24]
  402ce8:	f804 eb01 	strb.w	lr, [r4], #1
  402cec:	ebc3 0e04 	rsb	lr, r3, r4
  402cf0:	9b05      	ldr	r3, [sp, #20]
  402cf2:	4573      	cmp	r3, lr
  402cf4:	d12e      	bne.n	402d54 <_dtoa_r+0x69c>
  402cf6:	4602      	mov	r2, r0
  402cf8:	460b      	mov	r3, r1
  402cfa:	f001 fa79 	bl	4041f0 <__adddf3>
  402cfe:	4680      	mov	r8, r0
  402d00:	4689      	mov	r9, r1
  402d02:	4602      	mov	r2, r0
  402d04:	460b      	mov	r3, r1
  402d06:	4630      	mov	r0, r6
  402d08:	4639      	mov	r1, r7
  402d0a:	f001 fe95 	bl	404a38 <__aeabi_dcmplt>
  402d0e:	b978      	cbnz	r0, 402d30 <_dtoa_r+0x678>
  402d10:	4642      	mov	r2, r8
  402d12:	464b      	mov	r3, r9
  402d14:	4630      	mov	r0, r6
  402d16:	4639      	mov	r1, r7
  402d18:	f001 fe84 	bl	404a24 <__aeabi_dcmpeq>
  402d1c:	2800      	cmp	r0, #0
  402d1e:	f000 8246 	beq.w	4031ae <_dtoa_r+0xaf6>
  402d22:	07eb      	lsls	r3, r5, #31
  402d24:	d404      	bmi.n	402d30 <_dtoa_r+0x678>
  402d26:	e242      	b.n	4031ae <_dtoa_r+0xaf6>
  402d28:	f8dd b020 	ldr.w	fp, [sp, #32]
  402d2c:	e000      	b.n	402d30 <_dtoa_r+0x678>
  402d2e:	461c      	mov	r4, r3
  402d30:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  402d34:	2a39      	cmp	r2, #57	; 0x39
  402d36:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  402d3a:	d107      	bne.n	402d4c <_dtoa_r+0x694>
  402d3c:	9a06      	ldr	r2, [sp, #24]
  402d3e:	429a      	cmp	r2, r3
  402d40:	d1f5      	bne.n	402d2e <_dtoa_r+0x676>
  402d42:	9906      	ldr	r1, [sp, #24]
  402d44:	2230      	movs	r2, #48	; 0x30
  402d46:	f10b 0b01 	add.w	fp, fp, #1
  402d4a:	700a      	strb	r2, [r1, #0]
  402d4c:	781a      	ldrb	r2, [r3, #0]
  402d4e:	3201      	adds	r2, #1
  402d50:	701a      	strb	r2, [r3, #0]
  402d52:	e22c      	b.n	4031ae <_dtoa_r+0xaf6>
  402d54:	2200      	movs	r2, #0
  402d56:	4b76      	ldr	r3, [pc, #472]	; (402f30 <_dtoa_r+0x878>)
  402d58:	f001 fbfc 	bl	404554 <__aeabi_dmul>
  402d5c:	2200      	movs	r2, #0
  402d5e:	2300      	movs	r3, #0
  402d60:	4680      	mov	r8, r0
  402d62:	4689      	mov	r9, r1
  402d64:	f001 fe5e 	bl	404a24 <__aeabi_dcmpeq>
  402d68:	2800      	cmp	r0, #0
  402d6a:	d0a5      	beq.n	402cb8 <_dtoa_r+0x600>
  402d6c:	e21f      	b.n	4031ae <_dtoa_r+0xaf6>
  402d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402d70:	2a00      	cmp	r2, #0
  402d72:	d02b      	beq.n	402dcc <_dtoa_r+0x714>
  402d74:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  402d76:	2a01      	cmp	r2, #1
  402d78:	dc0a      	bgt.n	402d90 <_dtoa_r+0x6d8>
  402d7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d7c:	b112      	cbz	r2, 402d84 <_dtoa_r+0x6cc>
  402d7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  402d82:	e002      	b.n	402d8a <_dtoa_r+0x6d2>
  402d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  402d8a:	463d      	mov	r5, r7
  402d8c:	4644      	mov	r4, r8
  402d8e:	e013      	b.n	402db8 <_dtoa_r+0x700>
  402d90:	9b05      	ldr	r3, [sp, #20]
  402d92:	1e5d      	subs	r5, r3, #1
  402d94:	42af      	cmp	r7, r5
  402d96:	bfbf      	itttt	lt
  402d98:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  402d9a:	1bea      	sublt	r2, r5, r7
  402d9c:	189b      	addlt	r3, r3, r2
  402d9e:	930b      	strlt	r3, [sp, #44]	; 0x2c
  402da0:	9b05      	ldr	r3, [sp, #20]
  402da2:	bfb6      	itet	lt
  402da4:	462f      	movlt	r7, r5
  402da6:	1b7d      	subge	r5, r7, r5
  402da8:	2500      	movlt	r5, #0
  402daa:	2b00      	cmp	r3, #0
  402dac:	bfab      	itete	ge
  402dae:	9b05      	ldrge	r3, [sp, #20]
  402db0:	ebc3 0408 	rsblt	r4, r3, r8
  402db4:	4644      	movge	r4, r8
  402db6:	2300      	movlt	r3, #0
  402db8:	9a07      	ldr	r2, [sp, #28]
  402dba:	2101      	movs	r1, #1
  402dbc:	441a      	add	r2, r3
  402dbe:	4650      	mov	r0, sl
  402dc0:	4498      	add	r8, r3
  402dc2:	9207      	str	r2, [sp, #28]
  402dc4:	f000 fd30 	bl	403828 <__i2b>
  402dc8:	4606      	mov	r6, r0
  402dca:	e002      	b.n	402dd2 <_dtoa_r+0x71a>
  402dcc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  402dce:	463d      	mov	r5, r7
  402dd0:	4644      	mov	r4, r8
  402dd2:	b15c      	cbz	r4, 402dec <_dtoa_r+0x734>
  402dd4:	9b07      	ldr	r3, [sp, #28]
  402dd6:	2b00      	cmp	r3, #0
  402dd8:	dd08      	ble.n	402dec <_dtoa_r+0x734>
  402dda:	42a3      	cmp	r3, r4
  402ddc:	9a07      	ldr	r2, [sp, #28]
  402dde:	bfa8      	it	ge
  402de0:	4623      	movge	r3, r4
  402de2:	ebc3 0808 	rsb	r8, r3, r8
  402de6:	1ae4      	subs	r4, r4, r3
  402de8:	1ad3      	subs	r3, r2, r3
  402dea:	9307      	str	r3, [sp, #28]
  402dec:	2f00      	cmp	r7, #0
  402dee:	dd1d      	ble.n	402e2c <_dtoa_r+0x774>
  402df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402df2:	b1ab      	cbz	r3, 402e20 <_dtoa_r+0x768>
  402df4:	b18d      	cbz	r5, 402e1a <_dtoa_r+0x762>
  402df6:	4631      	mov	r1, r6
  402df8:	462a      	mov	r2, r5
  402dfa:	4650      	mov	r0, sl
  402dfc:	f000 fdae 	bl	40395c <__pow5mult>
  402e00:	9a04      	ldr	r2, [sp, #16]
  402e02:	4601      	mov	r1, r0
  402e04:	4606      	mov	r6, r0
  402e06:	4650      	mov	r0, sl
  402e08:	f000 fd17 	bl	40383a <__multiply>
  402e0c:	9904      	ldr	r1, [sp, #16]
  402e0e:	9008      	str	r0, [sp, #32]
  402e10:	4650      	mov	r0, sl
  402e12:	f000 fc6a 	bl	4036ea <_Bfree>
  402e16:	9b08      	ldr	r3, [sp, #32]
  402e18:	9304      	str	r3, [sp, #16]
  402e1a:	1b7a      	subs	r2, r7, r5
  402e1c:	d006      	beq.n	402e2c <_dtoa_r+0x774>
  402e1e:	e000      	b.n	402e22 <_dtoa_r+0x76a>
  402e20:	463a      	mov	r2, r7
  402e22:	9904      	ldr	r1, [sp, #16]
  402e24:	4650      	mov	r0, sl
  402e26:	f000 fd99 	bl	40395c <__pow5mult>
  402e2a:	9004      	str	r0, [sp, #16]
  402e2c:	2101      	movs	r1, #1
  402e2e:	4650      	mov	r0, sl
  402e30:	f000 fcfa 	bl	403828 <__i2b>
  402e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402e36:	4605      	mov	r5, r0
  402e38:	b35b      	cbz	r3, 402e92 <_dtoa_r+0x7da>
  402e3a:	461a      	mov	r2, r3
  402e3c:	4601      	mov	r1, r0
  402e3e:	4650      	mov	r0, sl
  402e40:	f000 fd8c 	bl	40395c <__pow5mult>
  402e44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402e46:	2b01      	cmp	r3, #1
  402e48:	4605      	mov	r5, r0
  402e4a:	dc18      	bgt.n	402e7e <_dtoa_r+0x7c6>
  402e4c:	9b02      	ldr	r3, [sp, #8]
  402e4e:	b983      	cbnz	r3, 402e72 <_dtoa_r+0x7ba>
  402e50:	9b03      	ldr	r3, [sp, #12]
  402e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402e56:	b973      	cbnz	r3, 402e76 <_dtoa_r+0x7be>
  402e58:	9b03      	ldr	r3, [sp, #12]
  402e5a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  402e5e:	0d3f      	lsrs	r7, r7, #20
  402e60:	053f      	lsls	r7, r7, #20
  402e62:	b14f      	cbz	r7, 402e78 <_dtoa_r+0x7c0>
  402e64:	9b07      	ldr	r3, [sp, #28]
  402e66:	3301      	adds	r3, #1
  402e68:	f108 0801 	add.w	r8, r8, #1
  402e6c:	9307      	str	r3, [sp, #28]
  402e6e:	2701      	movs	r7, #1
  402e70:	e002      	b.n	402e78 <_dtoa_r+0x7c0>
  402e72:	2700      	movs	r7, #0
  402e74:	e000      	b.n	402e78 <_dtoa_r+0x7c0>
  402e76:	9f02      	ldr	r7, [sp, #8]
  402e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402e7a:	b173      	cbz	r3, 402e9a <_dtoa_r+0x7e2>
  402e7c:	e000      	b.n	402e80 <_dtoa_r+0x7c8>
  402e7e:	2700      	movs	r7, #0
  402e80:	692b      	ldr	r3, [r5, #16]
  402e82:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402e86:	6918      	ldr	r0, [r3, #16]
  402e88:	f000 fc81 	bl	40378e <__hi0bits>
  402e8c:	f1c0 0020 	rsb	r0, r0, #32
  402e90:	e004      	b.n	402e9c <_dtoa_r+0x7e4>
  402e92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402e94:	2b01      	cmp	r3, #1
  402e96:	ddd9      	ble.n	402e4c <_dtoa_r+0x794>
  402e98:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  402e9a:	2001      	movs	r0, #1
  402e9c:	9b07      	ldr	r3, [sp, #28]
  402e9e:	4418      	add	r0, r3
  402ea0:	f010 001f 	ands.w	r0, r0, #31
  402ea4:	d008      	beq.n	402eb8 <_dtoa_r+0x800>
  402ea6:	f1c0 0320 	rsb	r3, r0, #32
  402eaa:	2b04      	cmp	r3, #4
  402eac:	dd02      	ble.n	402eb4 <_dtoa_r+0x7fc>
  402eae:	f1c0 001c 	rsb	r0, r0, #28
  402eb2:	e002      	b.n	402eba <_dtoa_r+0x802>
  402eb4:	d006      	beq.n	402ec4 <_dtoa_r+0x80c>
  402eb6:	4618      	mov	r0, r3
  402eb8:	301c      	adds	r0, #28
  402eba:	9b07      	ldr	r3, [sp, #28]
  402ebc:	4403      	add	r3, r0
  402ebe:	4480      	add	r8, r0
  402ec0:	4404      	add	r4, r0
  402ec2:	9307      	str	r3, [sp, #28]
  402ec4:	f1b8 0f00 	cmp.w	r8, #0
  402ec8:	dd05      	ble.n	402ed6 <_dtoa_r+0x81e>
  402eca:	4642      	mov	r2, r8
  402ecc:	9904      	ldr	r1, [sp, #16]
  402ece:	4650      	mov	r0, sl
  402ed0:	f000 fd92 	bl	4039f8 <__lshift>
  402ed4:	9004      	str	r0, [sp, #16]
  402ed6:	9b07      	ldr	r3, [sp, #28]
  402ed8:	2b00      	cmp	r3, #0
  402eda:	dd05      	ble.n	402ee8 <_dtoa_r+0x830>
  402edc:	4629      	mov	r1, r5
  402ede:	461a      	mov	r2, r3
  402ee0:	4650      	mov	r0, sl
  402ee2:	f000 fd89 	bl	4039f8 <__lshift>
  402ee6:	4605      	mov	r5, r0
  402ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402eea:	b31b      	cbz	r3, 402f34 <_dtoa_r+0x87c>
  402eec:	4629      	mov	r1, r5
  402eee:	9804      	ldr	r0, [sp, #16]
  402ef0:	f000 fdd3 	bl	403a9a <__mcmp>
  402ef4:	2800      	cmp	r0, #0
  402ef6:	da1d      	bge.n	402f34 <_dtoa_r+0x87c>
  402ef8:	2300      	movs	r3, #0
  402efa:	220a      	movs	r2, #10
  402efc:	9904      	ldr	r1, [sp, #16]
  402efe:	4650      	mov	r0, sl
  402f00:	f000 fc0a 	bl	403718 <__multadd>
  402f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402f06:	9004      	str	r0, [sp, #16]
  402f08:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402f0c:	2b00      	cmp	r3, #0
  402f0e:	f000 8160 	beq.w	4031d2 <_dtoa_r+0xb1a>
  402f12:	4631      	mov	r1, r6
  402f14:	2300      	movs	r3, #0
  402f16:	220a      	movs	r2, #10
  402f18:	4650      	mov	r0, sl
  402f1a:	f000 fbfd 	bl	403718 <__multadd>
  402f1e:	f1b9 0f00 	cmp.w	r9, #0
  402f22:	4606      	mov	r6, r0
  402f24:	dc3e      	bgt.n	402fa4 <_dtoa_r+0x8ec>
  402f26:	e03a      	b.n	402f9e <_dtoa_r+0x8e6>
  402f28:	00404dc0 	.word	0x00404dc0
  402f2c:	40140000 	.word	0x40140000
  402f30:	40240000 	.word	0x40240000
  402f34:	9b05      	ldr	r3, [sp, #20]
  402f36:	2b00      	cmp	r3, #0
  402f38:	dc2b      	bgt.n	402f92 <_dtoa_r+0x8da>
  402f3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402f3c:	2b02      	cmp	r3, #2
  402f3e:	dd28      	ble.n	402f92 <_dtoa_r+0x8da>
  402f40:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402f44:	f1b9 0f00 	cmp.w	r9, #0
  402f48:	d111      	bne.n	402f6e <_dtoa_r+0x8b6>
  402f4a:	4629      	mov	r1, r5
  402f4c:	464b      	mov	r3, r9
  402f4e:	2205      	movs	r2, #5
  402f50:	4650      	mov	r0, sl
  402f52:	f000 fbe1 	bl	403718 <__multadd>
  402f56:	4601      	mov	r1, r0
  402f58:	4605      	mov	r5, r0
  402f5a:	9804      	ldr	r0, [sp, #16]
  402f5c:	f000 fd9d 	bl	403a9a <__mcmp>
  402f60:	2800      	cmp	r0, #0
  402f62:	dc0c      	bgt.n	402f7e <_dtoa_r+0x8c6>
  402f64:	e003      	b.n	402f6e <_dtoa_r+0x8b6>
  402f66:	4635      	mov	r5, r6
  402f68:	e000      	b.n	402f6c <_dtoa_r+0x8b4>
  402f6a:	2500      	movs	r5, #0
  402f6c:	462e      	mov	r6, r5
  402f6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402f70:	9c06      	ldr	r4, [sp, #24]
  402f72:	ea6f 0b03 	mvn.w	fp, r3
  402f76:	e009      	b.n	402f8c <_dtoa_r+0x8d4>
  402f78:	f8dd b020 	ldr.w	fp, [sp, #32]
  402f7c:	4635      	mov	r5, r6
  402f7e:	9b06      	ldr	r3, [sp, #24]
  402f80:	9a06      	ldr	r2, [sp, #24]
  402f82:	1c5c      	adds	r4, r3, #1
  402f84:	2331      	movs	r3, #49	; 0x31
  402f86:	7013      	strb	r3, [r2, #0]
  402f88:	f10b 0b01 	add.w	fp, fp, #1
  402f8c:	9605      	str	r6, [sp, #20]
  402f8e:	2600      	movs	r6, #0
  402f90:	e0f9      	b.n	403186 <_dtoa_r+0xace>
  402f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402f94:	f8dd 9014 	ldr.w	r9, [sp, #20]
  402f98:	b923      	cbnz	r3, 402fa4 <_dtoa_r+0x8ec>
  402f9a:	9c06      	ldr	r4, [sp, #24]
  402f9c:	e0b2      	b.n	403104 <_dtoa_r+0xa4c>
  402f9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402fa0:	2b02      	cmp	r3, #2
  402fa2:	dccf      	bgt.n	402f44 <_dtoa_r+0x88c>
  402fa4:	2c00      	cmp	r4, #0
  402fa6:	dd05      	ble.n	402fb4 <_dtoa_r+0x8fc>
  402fa8:	4631      	mov	r1, r6
  402faa:	4622      	mov	r2, r4
  402fac:	4650      	mov	r0, sl
  402fae:	f000 fd23 	bl	4039f8 <__lshift>
  402fb2:	4606      	mov	r6, r0
  402fb4:	b19f      	cbz	r7, 402fde <_dtoa_r+0x926>
  402fb6:	6871      	ldr	r1, [r6, #4]
  402fb8:	4650      	mov	r0, sl
  402fba:	f000 fb61 	bl	403680 <_Balloc>
  402fbe:	6932      	ldr	r2, [r6, #16]
  402fc0:	3202      	adds	r2, #2
  402fc2:	4604      	mov	r4, r0
  402fc4:	0092      	lsls	r2, r2, #2
  402fc6:	f106 010c 	add.w	r1, r6, #12
  402fca:	300c      	adds	r0, #12
  402fcc:	f7fe fc6c 	bl	4018a8 <memcpy>
  402fd0:	2201      	movs	r2, #1
  402fd2:	4621      	mov	r1, r4
  402fd4:	4650      	mov	r0, sl
  402fd6:	f000 fd0f 	bl	4039f8 <__lshift>
  402fda:	9005      	str	r0, [sp, #20]
  402fdc:	e000      	b.n	402fe0 <_dtoa_r+0x928>
  402fde:	9605      	str	r6, [sp, #20]
  402fe0:	9b02      	ldr	r3, [sp, #8]
  402fe2:	9f06      	ldr	r7, [sp, #24]
  402fe4:	f003 0301 	and.w	r3, r3, #1
  402fe8:	9307      	str	r3, [sp, #28]
  402fea:	4629      	mov	r1, r5
  402fec:	9804      	ldr	r0, [sp, #16]
  402fee:	f7ff fad3 	bl	402598 <quorem>
  402ff2:	4631      	mov	r1, r6
  402ff4:	4604      	mov	r4, r0
  402ff6:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402ffa:	9804      	ldr	r0, [sp, #16]
  402ffc:	f000 fd4d 	bl	403a9a <__mcmp>
  403000:	9a05      	ldr	r2, [sp, #20]
  403002:	9002      	str	r0, [sp, #8]
  403004:	4629      	mov	r1, r5
  403006:	4650      	mov	r0, sl
  403008:	f000 fd63 	bl	403ad2 <__mdiff>
  40300c:	68c3      	ldr	r3, [r0, #12]
  40300e:	4602      	mov	r2, r0
  403010:	b93b      	cbnz	r3, 403022 <_dtoa_r+0x96a>
  403012:	4601      	mov	r1, r0
  403014:	900a      	str	r0, [sp, #40]	; 0x28
  403016:	9804      	ldr	r0, [sp, #16]
  403018:	f000 fd3f 	bl	403a9a <__mcmp>
  40301c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40301e:	4603      	mov	r3, r0
  403020:	e000      	b.n	403024 <_dtoa_r+0x96c>
  403022:	2301      	movs	r3, #1
  403024:	4611      	mov	r1, r2
  403026:	4650      	mov	r0, sl
  403028:	930a      	str	r3, [sp, #40]	; 0x28
  40302a:	f000 fb5e 	bl	4036ea <_Bfree>
  40302e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403030:	b953      	cbnz	r3, 403048 <_dtoa_r+0x990>
  403032:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403034:	b942      	cbnz	r2, 403048 <_dtoa_r+0x990>
  403036:	9a07      	ldr	r2, [sp, #28]
  403038:	b932      	cbnz	r2, 403048 <_dtoa_r+0x990>
  40303a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40303e:	d02a      	beq.n	403096 <_dtoa_r+0x9de>
  403040:	9b02      	ldr	r3, [sp, #8]
  403042:	2b00      	cmp	r3, #0
  403044:	dc1c      	bgt.n	403080 <_dtoa_r+0x9c8>
  403046:	e01d      	b.n	403084 <_dtoa_r+0x9cc>
  403048:	9a02      	ldr	r2, [sp, #8]
  40304a:	2a00      	cmp	r2, #0
  40304c:	db04      	blt.n	403058 <_dtoa_r+0x9a0>
  40304e:	d11b      	bne.n	403088 <_dtoa_r+0x9d0>
  403050:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403052:	b9ca      	cbnz	r2, 403088 <_dtoa_r+0x9d0>
  403054:	9a07      	ldr	r2, [sp, #28]
  403056:	b9ba      	cbnz	r2, 403088 <_dtoa_r+0x9d0>
  403058:	2b00      	cmp	r3, #0
  40305a:	dd13      	ble.n	403084 <_dtoa_r+0x9cc>
  40305c:	2201      	movs	r2, #1
  40305e:	9904      	ldr	r1, [sp, #16]
  403060:	4650      	mov	r0, sl
  403062:	f000 fcc9 	bl	4039f8 <__lshift>
  403066:	4629      	mov	r1, r5
  403068:	9004      	str	r0, [sp, #16]
  40306a:	f000 fd16 	bl	403a9a <__mcmp>
  40306e:	2800      	cmp	r0, #0
  403070:	dc03      	bgt.n	40307a <_dtoa_r+0x9c2>
  403072:	d107      	bne.n	403084 <_dtoa_r+0x9cc>
  403074:	f018 0f01 	tst.w	r8, #1
  403078:	d004      	beq.n	403084 <_dtoa_r+0x9cc>
  40307a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40307e:	d00a      	beq.n	403096 <_dtoa_r+0x9de>
  403080:	f104 0831 	add.w	r8, r4, #49	; 0x31
  403084:	1c7c      	adds	r4, r7, #1
  403086:	e00c      	b.n	4030a2 <_dtoa_r+0x9ea>
  403088:	2b00      	cmp	r3, #0
  40308a:	f107 0401 	add.w	r4, r7, #1
  40308e:	dd0b      	ble.n	4030a8 <_dtoa_r+0x9f0>
  403090:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403094:	d103      	bne.n	40309e <_dtoa_r+0x9e6>
  403096:	2339      	movs	r3, #57	; 0x39
  403098:	703b      	strb	r3, [r7, #0]
  40309a:	3701      	adds	r7, #1
  40309c:	e056      	b.n	40314c <_dtoa_r+0xa94>
  40309e:	f108 0801 	add.w	r8, r8, #1
  4030a2:	f887 8000 	strb.w	r8, [r7]
  4030a6:	e06e      	b.n	403186 <_dtoa_r+0xace>
  4030a8:	9b06      	ldr	r3, [sp, #24]
  4030aa:	f804 8c01 	strb.w	r8, [r4, #-1]
  4030ae:	1ae3      	subs	r3, r4, r3
  4030b0:	454b      	cmp	r3, r9
  4030b2:	4627      	mov	r7, r4
  4030b4:	d03b      	beq.n	40312e <_dtoa_r+0xa76>
  4030b6:	2300      	movs	r3, #0
  4030b8:	220a      	movs	r2, #10
  4030ba:	9904      	ldr	r1, [sp, #16]
  4030bc:	4650      	mov	r0, sl
  4030be:	f000 fb2b 	bl	403718 <__multadd>
  4030c2:	9b05      	ldr	r3, [sp, #20]
  4030c4:	9004      	str	r0, [sp, #16]
  4030c6:	429e      	cmp	r6, r3
  4030c8:	f04f 020a 	mov.w	r2, #10
  4030cc:	f04f 0300 	mov.w	r3, #0
  4030d0:	4631      	mov	r1, r6
  4030d2:	4650      	mov	r0, sl
  4030d4:	d104      	bne.n	4030e0 <_dtoa_r+0xa28>
  4030d6:	f000 fb1f 	bl	403718 <__multadd>
  4030da:	4606      	mov	r6, r0
  4030dc:	9005      	str	r0, [sp, #20]
  4030de:	e784      	b.n	402fea <_dtoa_r+0x932>
  4030e0:	f000 fb1a 	bl	403718 <__multadd>
  4030e4:	2300      	movs	r3, #0
  4030e6:	4606      	mov	r6, r0
  4030e8:	220a      	movs	r2, #10
  4030ea:	9905      	ldr	r1, [sp, #20]
  4030ec:	4650      	mov	r0, sl
  4030ee:	f000 fb13 	bl	403718 <__multadd>
  4030f2:	9005      	str	r0, [sp, #20]
  4030f4:	e779      	b.n	402fea <_dtoa_r+0x932>
  4030f6:	2300      	movs	r3, #0
  4030f8:	220a      	movs	r2, #10
  4030fa:	9904      	ldr	r1, [sp, #16]
  4030fc:	4650      	mov	r0, sl
  4030fe:	f000 fb0b 	bl	403718 <__multadd>
  403102:	9004      	str	r0, [sp, #16]
  403104:	4629      	mov	r1, r5
  403106:	9804      	ldr	r0, [sp, #16]
  403108:	f7ff fa46 	bl	402598 <quorem>
  40310c:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403110:	f804 8b01 	strb.w	r8, [r4], #1
  403114:	9b06      	ldr	r3, [sp, #24]
  403116:	1ae3      	subs	r3, r4, r3
  403118:	454b      	cmp	r3, r9
  40311a:	dbec      	blt.n	4030f6 <_dtoa_r+0xa3e>
  40311c:	9b06      	ldr	r3, [sp, #24]
  40311e:	9605      	str	r6, [sp, #20]
  403120:	f1b9 0f01 	cmp.w	r9, #1
  403124:	bfac      	ite	ge
  403126:	444b      	addge	r3, r9
  403128:	3301      	addlt	r3, #1
  40312a:	461f      	mov	r7, r3
  40312c:	2600      	movs	r6, #0
  40312e:	2201      	movs	r2, #1
  403130:	9904      	ldr	r1, [sp, #16]
  403132:	4650      	mov	r0, sl
  403134:	f000 fc60 	bl	4039f8 <__lshift>
  403138:	4629      	mov	r1, r5
  40313a:	9004      	str	r0, [sp, #16]
  40313c:	f000 fcad 	bl	403a9a <__mcmp>
  403140:	2800      	cmp	r0, #0
  403142:	dc03      	bgt.n	40314c <_dtoa_r+0xa94>
  403144:	d116      	bne.n	403174 <_dtoa_r+0xabc>
  403146:	f018 0f01 	tst.w	r8, #1
  40314a:	d013      	beq.n	403174 <_dtoa_r+0xabc>
  40314c:	463c      	mov	r4, r7
  40314e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403152:	2b39      	cmp	r3, #57	; 0x39
  403154:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403158:	d109      	bne.n	40316e <_dtoa_r+0xab6>
  40315a:	9b06      	ldr	r3, [sp, #24]
  40315c:	4293      	cmp	r3, r2
  40315e:	d104      	bne.n	40316a <_dtoa_r+0xab2>
  403160:	f10b 0b01 	add.w	fp, fp, #1
  403164:	2331      	movs	r3, #49	; 0x31
  403166:	9a06      	ldr	r2, [sp, #24]
  403168:	e002      	b.n	403170 <_dtoa_r+0xab8>
  40316a:	4614      	mov	r4, r2
  40316c:	e7ef      	b.n	40314e <_dtoa_r+0xa96>
  40316e:	3301      	adds	r3, #1
  403170:	7013      	strb	r3, [r2, #0]
  403172:	e008      	b.n	403186 <_dtoa_r+0xace>
  403174:	463c      	mov	r4, r7
  403176:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40317a:	2b30      	cmp	r3, #48	; 0x30
  40317c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403180:	d101      	bne.n	403186 <_dtoa_r+0xace>
  403182:	4614      	mov	r4, r2
  403184:	e7f7      	b.n	403176 <_dtoa_r+0xabe>
  403186:	4629      	mov	r1, r5
  403188:	4650      	mov	r0, sl
  40318a:	f000 faae 	bl	4036ea <_Bfree>
  40318e:	9b05      	ldr	r3, [sp, #20]
  403190:	b16b      	cbz	r3, 4031ae <_dtoa_r+0xaf6>
  403192:	b12e      	cbz	r6, 4031a0 <_dtoa_r+0xae8>
  403194:	429e      	cmp	r6, r3
  403196:	d003      	beq.n	4031a0 <_dtoa_r+0xae8>
  403198:	4631      	mov	r1, r6
  40319a:	4650      	mov	r0, sl
  40319c:	f000 faa5 	bl	4036ea <_Bfree>
  4031a0:	9905      	ldr	r1, [sp, #20]
  4031a2:	4650      	mov	r0, sl
  4031a4:	f000 faa1 	bl	4036ea <_Bfree>
  4031a8:	e001      	b.n	4031ae <_dtoa_r+0xaf6>
  4031aa:	f8dd b020 	ldr.w	fp, [sp, #32]
  4031ae:	9904      	ldr	r1, [sp, #16]
  4031b0:	4650      	mov	r0, sl
  4031b2:	f000 fa9a 	bl	4036ea <_Bfree>
  4031b6:	2300      	movs	r3, #0
  4031b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4031ba:	7023      	strb	r3, [r4, #0]
  4031bc:	f10b 0301 	add.w	r3, fp, #1
  4031c0:	6013      	str	r3, [r2, #0]
  4031c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4031c4:	b11b      	cbz	r3, 4031ce <_dtoa_r+0xb16>
  4031c6:	601c      	str	r4, [r3, #0]
  4031c8:	e001      	b.n	4031ce <_dtoa_r+0xb16>
  4031ca:	4808      	ldr	r0, [pc, #32]	; (4031ec <_dtoa_r+0xb34>)
  4031cc:	e00a      	b.n	4031e4 <_dtoa_r+0xb2c>
  4031ce:	9806      	ldr	r0, [sp, #24]
  4031d0:	e008      	b.n	4031e4 <_dtoa_r+0xb2c>
  4031d2:	f1b9 0f00 	cmp.w	r9, #0
  4031d6:	f73f aee0 	bgt.w	402f9a <_dtoa_r+0x8e2>
  4031da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4031dc:	2b02      	cmp	r3, #2
  4031de:	f77f aedc 	ble.w	402f9a <_dtoa_r+0x8e2>
  4031e2:	e6af      	b.n	402f44 <_dtoa_r+0x88c>
  4031e4:	b015      	add	sp, #84	; 0x54
  4031e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031ea:	bf00      	nop
  4031ec:	00404d28 	.word	0x00404d28

004031f0 <__sflush_r>:
  4031f0:	898a      	ldrh	r2, [r1, #12]
  4031f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4031f6:	4605      	mov	r5, r0
  4031f8:	0710      	lsls	r0, r2, #28
  4031fa:	460c      	mov	r4, r1
  4031fc:	d459      	bmi.n	4032b2 <__sflush_r+0xc2>
  4031fe:	684b      	ldr	r3, [r1, #4]
  403200:	2b00      	cmp	r3, #0
  403202:	dc02      	bgt.n	40320a <__sflush_r+0x1a>
  403204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  403206:	2b00      	cmp	r3, #0
  403208:	dd17      	ble.n	40323a <__sflush_r+0x4a>
  40320a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40320c:	b1ae      	cbz	r6, 40323a <__sflush_r+0x4a>
  40320e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  403212:	2300      	movs	r3, #0
  403214:	b292      	uxth	r2, r2
  403216:	682f      	ldr	r7, [r5, #0]
  403218:	602b      	str	r3, [r5, #0]
  40321a:	b10a      	cbz	r2, 403220 <__sflush_r+0x30>
  40321c:	6d60      	ldr	r0, [r4, #84]	; 0x54
  40321e:	e015      	b.n	40324c <__sflush_r+0x5c>
  403220:	6a21      	ldr	r1, [r4, #32]
  403222:	2301      	movs	r3, #1
  403224:	4628      	mov	r0, r5
  403226:	47b0      	blx	r6
  403228:	1c41      	adds	r1, r0, #1
  40322a:	d10f      	bne.n	40324c <__sflush_r+0x5c>
  40322c:	682b      	ldr	r3, [r5, #0]
  40322e:	b16b      	cbz	r3, 40324c <__sflush_r+0x5c>
  403230:	2b1d      	cmp	r3, #29
  403232:	d001      	beq.n	403238 <__sflush_r+0x48>
  403234:	2b16      	cmp	r3, #22
  403236:	d103      	bne.n	403240 <__sflush_r+0x50>
  403238:	602f      	str	r7, [r5, #0]
  40323a:	2000      	movs	r0, #0
  40323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403240:	89a3      	ldrh	r3, [r4, #12]
  403242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403246:	81a3      	strh	r3, [r4, #12]
  403248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40324c:	89a3      	ldrh	r3, [r4, #12]
  40324e:	075a      	lsls	r2, r3, #29
  403250:	d505      	bpl.n	40325e <__sflush_r+0x6e>
  403252:	6863      	ldr	r3, [r4, #4]
  403254:	1ac0      	subs	r0, r0, r3
  403256:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403258:	b10b      	cbz	r3, 40325e <__sflush_r+0x6e>
  40325a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40325c:	1ac0      	subs	r0, r0, r3
  40325e:	2300      	movs	r3, #0
  403260:	4602      	mov	r2, r0
  403262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403264:	6a21      	ldr	r1, [r4, #32]
  403266:	4628      	mov	r0, r5
  403268:	47b0      	blx	r6
  40326a:	1c43      	adds	r3, r0, #1
  40326c:	89a3      	ldrh	r3, [r4, #12]
  40326e:	d106      	bne.n	40327e <__sflush_r+0x8e>
  403270:	6829      	ldr	r1, [r5, #0]
  403272:	291d      	cmp	r1, #29
  403274:	d83a      	bhi.n	4032ec <__sflush_r+0xfc>
  403276:	4a21      	ldr	r2, [pc, #132]	; (4032fc <__sflush_r+0x10c>)
  403278:	40ca      	lsrs	r2, r1
  40327a:	07d6      	lsls	r6, r2, #31
  40327c:	d536      	bpl.n	4032ec <__sflush_r+0xfc>
  40327e:	2200      	movs	r2, #0
  403280:	6062      	str	r2, [r4, #4]
  403282:	04d9      	lsls	r1, r3, #19
  403284:	6922      	ldr	r2, [r4, #16]
  403286:	6022      	str	r2, [r4, #0]
  403288:	d504      	bpl.n	403294 <__sflush_r+0xa4>
  40328a:	1c42      	adds	r2, r0, #1
  40328c:	d101      	bne.n	403292 <__sflush_r+0xa2>
  40328e:	682b      	ldr	r3, [r5, #0]
  403290:	b903      	cbnz	r3, 403294 <__sflush_r+0xa4>
  403292:	6560      	str	r0, [r4, #84]	; 0x54
  403294:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403296:	602f      	str	r7, [r5, #0]
  403298:	2900      	cmp	r1, #0
  40329a:	d0ce      	beq.n	40323a <__sflush_r+0x4a>
  40329c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4032a0:	4299      	cmp	r1, r3
  4032a2:	d002      	beq.n	4032aa <__sflush_r+0xba>
  4032a4:	4628      	mov	r0, r5
  4032a6:	f000 fccf 	bl	403c48 <_free_r>
  4032aa:	2000      	movs	r0, #0
  4032ac:	6360      	str	r0, [r4, #52]	; 0x34
  4032ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032b2:	690f      	ldr	r7, [r1, #16]
  4032b4:	2f00      	cmp	r7, #0
  4032b6:	d0c0      	beq.n	40323a <__sflush_r+0x4a>
  4032b8:	0793      	lsls	r3, r2, #30
  4032ba:	680e      	ldr	r6, [r1, #0]
  4032bc:	bf08      	it	eq
  4032be:	694b      	ldreq	r3, [r1, #20]
  4032c0:	600f      	str	r7, [r1, #0]
  4032c2:	bf18      	it	ne
  4032c4:	2300      	movne	r3, #0
  4032c6:	ebc7 0806 	rsb	r8, r7, r6
  4032ca:	608b      	str	r3, [r1, #8]
  4032cc:	e002      	b.n	4032d4 <__sflush_r+0xe4>
  4032ce:	4407      	add	r7, r0
  4032d0:	ebc0 0808 	rsb	r8, r0, r8
  4032d4:	f1b8 0f00 	cmp.w	r8, #0
  4032d8:	ddaf      	ble.n	40323a <__sflush_r+0x4a>
  4032da:	4643      	mov	r3, r8
  4032dc:	463a      	mov	r2, r7
  4032de:	6a21      	ldr	r1, [r4, #32]
  4032e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4032e2:	4628      	mov	r0, r5
  4032e4:	47b0      	blx	r6
  4032e6:	2800      	cmp	r0, #0
  4032e8:	dcf1      	bgt.n	4032ce <__sflush_r+0xde>
  4032ea:	89a3      	ldrh	r3, [r4, #12]
  4032ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4032f0:	81a3      	strh	r3, [r4, #12]
  4032f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4032f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4032fa:	bf00      	nop
  4032fc:	20400001 	.word	0x20400001

00403300 <_fflush_r>:
  403300:	b538      	push	{r3, r4, r5, lr}
  403302:	690b      	ldr	r3, [r1, #16]
  403304:	4605      	mov	r5, r0
  403306:	460c      	mov	r4, r1
  403308:	b1db      	cbz	r3, 403342 <_fflush_r+0x42>
  40330a:	b118      	cbz	r0, 403314 <_fflush_r+0x14>
  40330c:	6983      	ldr	r3, [r0, #24]
  40330e:	b90b      	cbnz	r3, 403314 <_fflush_r+0x14>
  403310:	f000 f860 	bl	4033d4 <__sinit>
  403314:	4b0c      	ldr	r3, [pc, #48]	; (403348 <_fflush_r+0x48>)
  403316:	429c      	cmp	r4, r3
  403318:	d101      	bne.n	40331e <_fflush_r+0x1e>
  40331a:	686c      	ldr	r4, [r5, #4]
  40331c:	e008      	b.n	403330 <_fflush_r+0x30>
  40331e:	4b0b      	ldr	r3, [pc, #44]	; (40334c <_fflush_r+0x4c>)
  403320:	429c      	cmp	r4, r3
  403322:	d101      	bne.n	403328 <_fflush_r+0x28>
  403324:	68ac      	ldr	r4, [r5, #8]
  403326:	e003      	b.n	403330 <_fflush_r+0x30>
  403328:	4b09      	ldr	r3, [pc, #36]	; (403350 <_fflush_r+0x50>)
  40332a:	429c      	cmp	r4, r3
  40332c:	bf08      	it	eq
  40332e:	68ec      	ldreq	r4, [r5, #12]
  403330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403334:	b12b      	cbz	r3, 403342 <_fflush_r+0x42>
  403336:	4621      	mov	r1, r4
  403338:	4628      	mov	r0, r5
  40333a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40333e:	f7ff bf57 	b.w	4031f0 <__sflush_r>
  403342:	2000      	movs	r0, #0
  403344:	bd38      	pop	{r3, r4, r5, pc}
  403346:	bf00      	nop
  403348:	00404d5c 	.word	0x00404d5c
  40334c:	00404d7c 	.word	0x00404d7c
  403350:	00404d9c 	.word	0x00404d9c

00403354 <_cleanup_r>:
  403354:	4901      	ldr	r1, [pc, #4]	; (40335c <_cleanup_r+0x8>)
  403356:	f000 b8a9 	b.w	4034ac <_fwalk_reent>
  40335a:	bf00      	nop
  40335c:	00403301 	.word	0x00403301

00403360 <std.isra.0>:
  403360:	2300      	movs	r3, #0
  403362:	b510      	push	{r4, lr}
  403364:	4604      	mov	r4, r0
  403366:	6003      	str	r3, [r0, #0]
  403368:	6043      	str	r3, [r0, #4]
  40336a:	6083      	str	r3, [r0, #8]
  40336c:	8181      	strh	r1, [r0, #12]
  40336e:	6643      	str	r3, [r0, #100]	; 0x64
  403370:	81c2      	strh	r2, [r0, #14]
  403372:	6103      	str	r3, [r0, #16]
  403374:	6143      	str	r3, [r0, #20]
  403376:	6183      	str	r3, [r0, #24]
  403378:	4619      	mov	r1, r3
  40337a:	2208      	movs	r2, #8
  40337c:	305c      	adds	r0, #92	; 0x5c
  40337e:	f7fe fa9e 	bl	4018be <memset>
  403382:	4b05      	ldr	r3, [pc, #20]	; (403398 <std.isra.0+0x38>)
  403384:	6263      	str	r3, [r4, #36]	; 0x24
  403386:	4b05      	ldr	r3, [pc, #20]	; (40339c <std.isra.0+0x3c>)
  403388:	62a3      	str	r3, [r4, #40]	; 0x28
  40338a:	4b05      	ldr	r3, [pc, #20]	; (4033a0 <std.isra.0+0x40>)
  40338c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40338e:	4b05      	ldr	r3, [pc, #20]	; (4033a4 <std.isra.0+0x44>)
  403390:	6224      	str	r4, [r4, #32]
  403392:	6323      	str	r3, [r4, #48]	; 0x30
  403394:	bd10      	pop	{r4, pc}
  403396:	bf00      	nop
  403398:	00404049 	.word	0x00404049
  40339c:	0040406b 	.word	0x0040406b
  4033a0:	004040a3 	.word	0x004040a3
  4033a4:	004040c7 	.word	0x004040c7

004033a8 <__sfmoreglue>:
  4033a8:	b570      	push	{r4, r5, r6, lr}
  4033aa:	2368      	movs	r3, #104	; 0x68
  4033ac:	1e4d      	subs	r5, r1, #1
  4033ae:	435d      	muls	r5, r3
  4033b0:	460e      	mov	r6, r1
  4033b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4033b6:	f000 fc95 	bl	403ce4 <_malloc_r>
  4033ba:	4604      	mov	r4, r0
  4033bc:	b140      	cbz	r0, 4033d0 <__sfmoreglue+0x28>
  4033be:	2100      	movs	r1, #0
  4033c0:	e880 0042 	stmia.w	r0, {r1, r6}
  4033c4:	300c      	adds	r0, #12
  4033c6:	60a0      	str	r0, [r4, #8]
  4033c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4033cc:	f7fe fa77 	bl	4018be <memset>
  4033d0:	4620      	mov	r0, r4
  4033d2:	bd70      	pop	{r4, r5, r6, pc}

004033d4 <__sinit>:
  4033d4:	6983      	ldr	r3, [r0, #24]
  4033d6:	b510      	push	{r4, lr}
  4033d8:	4604      	mov	r4, r0
  4033da:	bb33      	cbnz	r3, 40342a <__sinit+0x56>
  4033dc:	6483      	str	r3, [r0, #72]	; 0x48
  4033de:	64c3      	str	r3, [r0, #76]	; 0x4c
  4033e0:	6503      	str	r3, [r0, #80]	; 0x50
  4033e2:	4b12      	ldr	r3, [pc, #72]	; (40342c <__sinit+0x58>)
  4033e4:	4a12      	ldr	r2, [pc, #72]	; (403430 <__sinit+0x5c>)
  4033e6:	681b      	ldr	r3, [r3, #0]
  4033e8:	6282      	str	r2, [r0, #40]	; 0x28
  4033ea:	4298      	cmp	r0, r3
  4033ec:	bf04      	itt	eq
  4033ee:	2301      	moveq	r3, #1
  4033f0:	6183      	streq	r3, [r0, #24]
  4033f2:	f000 f81f 	bl	403434 <__sfp>
  4033f6:	6060      	str	r0, [r4, #4]
  4033f8:	4620      	mov	r0, r4
  4033fa:	f000 f81b 	bl	403434 <__sfp>
  4033fe:	60a0      	str	r0, [r4, #8]
  403400:	4620      	mov	r0, r4
  403402:	f000 f817 	bl	403434 <__sfp>
  403406:	2200      	movs	r2, #0
  403408:	60e0      	str	r0, [r4, #12]
  40340a:	2104      	movs	r1, #4
  40340c:	6860      	ldr	r0, [r4, #4]
  40340e:	f7ff ffa7 	bl	403360 <std.isra.0>
  403412:	2201      	movs	r2, #1
  403414:	2109      	movs	r1, #9
  403416:	68a0      	ldr	r0, [r4, #8]
  403418:	f7ff ffa2 	bl	403360 <std.isra.0>
  40341c:	2202      	movs	r2, #2
  40341e:	2112      	movs	r1, #18
  403420:	68e0      	ldr	r0, [r4, #12]
  403422:	f7ff ff9d 	bl	403360 <std.isra.0>
  403426:	2301      	movs	r3, #1
  403428:	61a3      	str	r3, [r4, #24]
  40342a:	bd10      	pop	{r4, pc}
  40342c:	00404d14 	.word	0x00404d14
  403430:	00403355 	.word	0x00403355

00403434 <__sfp>:
  403434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403436:	4b1c      	ldr	r3, [pc, #112]	; (4034a8 <__sfp+0x74>)
  403438:	681e      	ldr	r6, [r3, #0]
  40343a:	69b3      	ldr	r3, [r6, #24]
  40343c:	4607      	mov	r7, r0
  40343e:	b913      	cbnz	r3, 403446 <__sfp+0x12>
  403440:	4630      	mov	r0, r6
  403442:	f7ff ffc7 	bl	4033d4 <__sinit>
  403446:	3648      	adds	r6, #72	; 0x48
  403448:	68b4      	ldr	r4, [r6, #8]
  40344a:	6873      	ldr	r3, [r6, #4]
  40344c:	3b01      	subs	r3, #1
  40344e:	d404      	bmi.n	40345a <__sfp+0x26>
  403450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  403454:	b17d      	cbz	r5, 403476 <__sfp+0x42>
  403456:	3468      	adds	r4, #104	; 0x68
  403458:	e7f8      	b.n	40344c <__sfp+0x18>
  40345a:	6833      	ldr	r3, [r6, #0]
  40345c:	b10b      	cbz	r3, 403462 <__sfp+0x2e>
  40345e:	6836      	ldr	r6, [r6, #0]
  403460:	e7f2      	b.n	403448 <__sfp+0x14>
  403462:	2104      	movs	r1, #4
  403464:	4638      	mov	r0, r7
  403466:	f7ff ff9f 	bl	4033a8 <__sfmoreglue>
  40346a:	6030      	str	r0, [r6, #0]
  40346c:	2800      	cmp	r0, #0
  40346e:	d1f6      	bne.n	40345e <__sfp+0x2a>
  403470:	230c      	movs	r3, #12
  403472:	603b      	str	r3, [r7, #0]
  403474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403476:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40347a:	81e3      	strh	r3, [r4, #14]
  40347c:	2301      	movs	r3, #1
  40347e:	81a3      	strh	r3, [r4, #12]
  403480:	6665      	str	r5, [r4, #100]	; 0x64
  403482:	6025      	str	r5, [r4, #0]
  403484:	60a5      	str	r5, [r4, #8]
  403486:	6065      	str	r5, [r4, #4]
  403488:	6125      	str	r5, [r4, #16]
  40348a:	6165      	str	r5, [r4, #20]
  40348c:	61a5      	str	r5, [r4, #24]
  40348e:	2208      	movs	r2, #8
  403490:	4629      	mov	r1, r5
  403492:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  403496:	f7fe fa12 	bl	4018be <memset>
  40349a:	6365      	str	r5, [r4, #52]	; 0x34
  40349c:	63a5      	str	r5, [r4, #56]	; 0x38
  40349e:	64a5      	str	r5, [r4, #72]	; 0x48
  4034a0:	64e5      	str	r5, [r4, #76]	; 0x4c
  4034a2:	4620      	mov	r0, r4
  4034a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4034a6:	bf00      	nop
  4034a8:	00404d14 	.word	0x00404d14

004034ac <_fwalk_reent>:
  4034ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4034b0:	4680      	mov	r8, r0
  4034b2:	4689      	mov	r9, r1
  4034b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4034b8:	2600      	movs	r6, #0
  4034ba:	b194      	cbz	r4, 4034e2 <_fwalk_reent+0x36>
  4034bc:	68a5      	ldr	r5, [r4, #8]
  4034be:	6867      	ldr	r7, [r4, #4]
  4034c0:	3f01      	subs	r7, #1
  4034c2:	d40c      	bmi.n	4034de <_fwalk_reent+0x32>
  4034c4:	89ab      	ldrh	r3, [r5, #12]
  4034c6:	2b01      	cmp	r3, #1
  4034c8:	d907      	bls.n	4034da <_fwalk_reent+0x2e>
  4034ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4034ce:	3301      	adds	r3, #1
  4034d0:	d003      	beq.n	4034da <_fwalk_reent+0x2e>
  4034d2:	4629      	mov	r1, r5
  4034d4:	4640      	mov	r0, r8
  4034d6:	47c8      	blx	r9
  4034d8:	4306      	orrs	r6, r0
  4034da:	3568      	adds	r5, #104	; 0x68
  4034dc:	e7f0      	b.n	4034c0 <_fwalk_reent+0x14>
  4034de:	6824      	ldr	r4, [r4, #0]
  4034e0:	e7eb      	b.n	4034ba <_fwalk_reent+0xe>
  4034e2:	4630      	mov	r0, r6
  4034e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004034e8 <_localeconv_r>:
  4034e8:	4b04      	ldr	r3, [pc, #16]	; (4034fc <_localeconv_r+0x14>)
  4034ea:	681b      	ldr	r3, [r3, #0]
  4034ec:	6a18      	ldr	r0, [r3, #32]
  4034ee:	4b04      	ldr	r3, [pc, #16]	; (403500 <_localeconv_r+0x18>)
  4034f0:	2800      	cmp	r0, #0
  4034f2:	bf08      	it	eq
  4034f4:	4618      	moveq	r0, r3
  4034f6:	30f0      	adds	r0, #240	; 0xf0
  4034f8:	4770      	bx	lr
  4034fa:	bf00      	nop
  4034fc:	20000070 	.word	0x20000070
  403500:	20000074 	.word	0x20000074

00403504 <__swhatbuf_r>:
  403504:	b570      	push	{r4, r5, r6, lr}
  403506:	460e      	mov	r6, r1
  403508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40350c:	2900      	cmp	r1, #0
  40350e:	b090      	sub	sp, #64	; 0x40
  403510:	4614      	mov	r4, r2
  403512:	461d      	mov	r5, r3
  403514:	da06      	bge.n	403524 <__swhatbuf_r+0x20>
  403516:	2300      	movs	r3, #0
  403518:	602b      	str	r3, [r5, #0]
  40351a:	89b3      	ldrh	r3, [r6, #12]
  40351c:	061a      	lsls	r2, r3, #24
  40351e:	d50e      	bpl.n	40353e <__swhatbuf_r+0x3a>
  403520:	2340      	movs	r3, #64	; 0x40
  403522:	e00e      	b.n	403542 <__swhatbuf_r+0x3e>
  403524:	aa01      	add	r2, sp, #4
  403526:	f000 fdf5 	bl	404114 <_fstat_r>
  40352a:	2800      	cmp	r0, #0
  40352c:	dbf3      	blt.n	403516 <__swhatbuf_r+0x12>
  40352e:	9a02      	ldr	r2, [sp, #8]
  403530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  403538:	425a      	negs	r2, r3
  40353a:	415a      	adcs	r2, r3
  40353c:	602a      	str	r2, [r5, #0]
  40353e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403542:	2000      	movs	r0, #0
  403544:	6023      	str	r3, [r4, #0]
  403546:	b010      	add	sp, #64	; 0x40
  403548:	bd70      	pop	{r4, r5, r6, pc}
	...

0040354c <__smakebuf_r>:
  40354c:	898b      	ldrh	r3, [r1, #12]
  40354e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  403550:	079e      	lsls	r6, r3, #30
  403552:	4605      	mov	r5, r0
  403554:	460c      	mov	r4, r1
  403556:	d410      	bmi.n	40357a <__smakebuf_r+0x2e>
  403558:	ab01      	add	r3, sp, #4
  40355a:	466a      	mov	r2, sp
  40355c:	f7ff ffd2 	bl	403504 <__swhatbuf_r>
  403560:	9900      	ldr	r1, [sp, #0]
  403562:	4606      	mov	r6, r0
  403564:	4628      	mov	r0, r5
  403566:	f000 fbbd 	bl	403ce4 <_malloc_r>
  40356a:	b968      	cbnz	r0, 403588 <__smakebuf_r+0x3c>
  40356c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403570:	059a      	lsls	r2, r3, #22
  403572:	d422      	bmi.n	4035ba <__smakebuf_r+0x6e>
  403574:	f043 0302 	orr.w	r3, r3, #2
  403578:	81a3      	strh	r3, [r4, #12]
  40357a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40357e:	6023      	str	r3, [r4, #0]
  403580:	6123      	str	r3, [r4, #16]
  403582:	2301      	movs	r3, #1
  403584:	6163      	str	r3, [r4, #20]
  403586:	e018      	b.n	4035ba <__smakebuf_r+0x6e>
  403588:	4b0d      	ldr	r3, [pc, #52]	; (4035c0 <__smakebuf_r+0x74>)
  40358a:	62ab      	str	r3, [r5, #40]	; 0x28
  40358c:	89a3      	ldrh	r3, [r4, #12]
  40358e:	6020      	str	r0, [r4, #0]
  403590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403594:	81a3      	strh	r3, [r4, #12]
  403596:	9b00      	ldr	r3, [sp, #0]
  403598:	6163      	str	r3, [r4, #20]
  40359a:	9b01      	ldr	r3, [sp, #4]
  40359c:	6120      	str	r0, [r4, #16]
  40359e:	b14b      	cbz	r3, 4035b4 <__smakebuf_r+0x68>
  4035a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4035a4:	4628      	mov	r0, r5
  4035a6:	f000 fdc7 	bl	404138 <_isatty_r>
  4035aa:	b118      	cbz	r0, 4035b4 <__smakebuf_r+0x68>
  4035ac:	89a3      	ldrh	r3, [r4, #12]
  4035ae:	f043 0301 	orr.w	r3, r3, #1
  4035b2:	81a3      	strh	r3, [r4, #12]
  4035b4:	89a0      	ldrh	r0, [r4, #12]
  4035b6:	4330      	orrs	r0, r6
  4035b8:	81a0      	strh	r0, [r4, #12]
  4035ba:	b002      	add	sp, #8
  4035bc:	bd70      	pop	{r4, r5, r6, pc}
  4035be:	bf00      	nop
  4035c0:	00403355 	.word	0x00403355

004035c4 <malloc>:
  4035c4:	4b02      	ldr	r3, [pc, #8]	; (4035d0 <malloc+0xc>)
  4035c6:	4601      	mov	r1, r0
  4035c8:	6818      	ldr	r0, [r3, #0]
  4035ca:	f000 bb8b 	b.w	403ce4 <_malloc_r>
  4035ce:	bf00      	nop
  4035d0:	20000070 	.word	0x20000070
	...

004035e0 <memchr>:
  4035e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4035e4:	2a10      	cmp	r2, #16
  4035e6:	db2b      	blt.n	403640 <memchr+0x60>
  4035e8:	f010 0f07 	tst.w	r0, #7
  4035ec:	d008      	beq.n	403600 <memchr+0x20>
  4035ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  4035f2:	3a01      	subs	r2, #1
  4035f4:	428b      	cmp	r3, r1
  4035f6:	d02d      	beq.n	403654 <memchr+0x74>
  4035f8:	f010 0f07 	tst.w	r0, #7
  4035fc:	b342      	cbz	r2, 403650 <memchr+0x70>
  4035fe:	d1f6      	bne.n	4035ee <memchr+0xe>
  403600:	b4f0      	push	{r4, r5, r6, r7}
  403602:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403606:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40360a:	f022 0407 	bic.w	r4, r2, #7
  40360e:	f07f 0700 	mvns.w	r7, #0
  403612:	2300      	movs	r3, #0
  403614:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403618:	3c08      	subs	r4, #8
  40361a:	ea85 0501 	eor.w	r5, r5, r1
  40361e:	ea86 0601 	eor.w	r6, r6, r1
  403622:	fa85 f547 	uadd8	r5, r5, r7
  403626:	faa3 f587 	sel	r5, r3, r7
  40362a:	fa86 f647 	uadd8	r6, r6, r7
  40362e:	faa5 f687 	sel	r6, r5, r7
  403632:	b98e      	cbnz	r6, 403658 <memchr+0x78>
  403634:	d1ee      	bne.n	403614 <memchr+0x34>
  403636:	bcf0      	pop	{r4, r5, r6, r7}
  403638:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40363c:	f002 0207 	and.w	r2, r2, #7
  403640:	b132      	cbz	r2, 403650 <memchr+0x70>
  403642:	f810 3b01 	ldrb.w	r3, [r0], #1
  403646:	3a01      	subs	r2, #1
  403648:	ea83 0301 	eor.w	r3, r3, r1
  40364c:	b113      	cbz	r3, 403654 <memchr+0x74>
  40364e:	d1f8      	bne.n	403642 <memchr+0x62>
  403650:	2000      	movs	r0, #0
  403652:	4770      	bx	lr
  403654:	3801      	subs	r0, #1
  403656:	4770      	bx	lr
  403658:	2d00      	cmp	r5, #0
  40365a:	bf06      	itte	eq
  40365c:	4635      	moveq	r5, r6
  40365e:	3803      	subeq	r0, #3
  403660:	3807      	subne	r0, #7
  403662:	f015 0f01 	tst.w	r5, #1
  403666:	d107      	bne.n	403678 <memchr+0x98>
  403668:	3001      	adds	r0, #1
  40366a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40366e:	bf02      	ittt	eq
  403670:	3001      	addeq	r0, #1
  403672:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403676:	3001      	addeq	r0, #1
  403678:	bcf0      	pop	{r4, r5, r6, r7}
  40367a:	3801      	subs	r0, #1
  40367c:	4770      	bx	lr
  40367e:	bf00      	nop

00403680 <_Balloc>:
  403680:	b570      	push	{r4, r5, r6, lr}
  403682:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403684:	4604      	mov	r4, r0
  403686:	460e      	mov	r6, r1
  403688:	b93d      	cbnz	r5, 40369a <_Balloc+0x1a>
  40368a:	2010      	movs	r0, #16
  40368c:	f7ff ff9a 	bl	4035c4 <malloc>
  403690:	6260      	str	r0, [r4, #36]	; 0x24
  403692:	6045      	str	r5, [r0, #4]
  403694:	6085      	str	r5, [r0, #8]
  403696:	6005      	str	r5, [r0, #0]
  403698:	60c5      	str	r5, [r0, #12]
  40369a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40369c:	68eb      	ldr	r3, [r5, #12]
  40369e:	b143      	cbz	r3, 4036b2 <_Balloc+0x32>
  4036a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4036a2:	68db      	ldr	r3, [r3, #12]
  4036a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  4036a8:	b178      	cbz	r0, 4036ca <_Balloc+0x4a>
  4036aa:	6802      	ldr	r2, [r0, #0]
  4036ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4036b0:	e017      	b.n	4036e2 <_Balloc+0x62>
  4036b2:	2221      	movs	r2, #33	; 0x21
  4036b4:	2104      	movs	r1, #4
  4036b6:	4620      	mov	r0, r4
  4036b8:	f000 fab8 	bl	403c2c <_calloc_r>
  4036bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4036be:	60e8      	str	r0, [r5, #12]
  4036c0:	68db      	ldr	r3, [r3, #12]
  4036c2:	2b00      	cmp	r3, #0
  4036c4:	d1ec      	bne.n	4036a0 <_Balloc+0x20>
  4036c6:	2000      	movs	r0, #0
  4036c8:	bd70      	pop	{r4, r5, r6, pc}
  4036ca:	2101      	movs	r1, #1
  4036cc:	fa01 f506 	lsl.w	r5, r1, r6
  4036d0:	1d6a      	adds	r2, r5, #5
  4036d2:	0092      	lsls	r2, r2, #2
  4036d4:	4620      	mov	r0, r4
  4036d6:	f000 faa9 	bl	403c2c <_calloc_r>
  4036da:	2800      	cmp	r0, #0
  4036dc:	d0f3      	beq.n	4036c6 <_Balloc+0x46>
  4036de:	6046      	str	r6, [r0, #4]
  4036e0:	6085      	str	r5, [r0, #8]
  4036e2:	2300      	movs	r3, #0
  4036e4:	6103      	str	r3, [r0, #16]
  4036e6:	60c3      	str	r3, [r0, #12]
  4036e8:	bd70      	pop	{r4, r5, r6, pc}

004036ea <_Bfree>:
  4036ea:	b570      	push	{r4, r5, r6, lr}
  4036ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4036ee:	4606      	mov	r6, r0
  4036f0:	460d      	mov	r5, r1
  4036f2:	b93c      	cbnz	r4, 403704 <_Bfree+0x1a>
  4036f4:	2010      	movs	r0, #16
  4036f6:	f7ff ff65 	bl	4035c4 <malloc>
  4036fa:	6270      	str	r0, [r6, #36]	; 0x24
  4036fc:	6044      	str	r4, [r0, #4]
  4036fe:	6084      	str	r4, [r0, #8]
  403700:	6004      	str	r4, [r0, #0]
  403702:	60c4      	str	r4, [r0, #12]
  403704:	b13d      	cbz	r5, 403716 <_Bfree+0x2c>
  403706:	6a73      	ldr	r3, [r6, #36]	; 0x24
  403708:	686a      	ldr	r2, [r5, #4]
  40370a:	68db      	ldr	r3, [r3, #12]
  40370c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  403710:	6029      	str	r1, [r5, #0]
  403712:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  403716:	bd70      	pop	{r4, r5, r6, pc}

00403718 <__multadd>:
  403718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40371c:	690d      	ldr	r5, [r1, #16]
  40371e:	461f      	mov	r7, r3
  403720:	4606      	mov	r6, r0
  403722:	460c      	mov	r4, r1
  403724:	f101 0e14 	add.w	lr, r1, #20
  403728:	2300      	movs	r3, #0
  40372a:	f8de 0000 	ldr.w	r0, [lr]
  40372e:	b281      	uxth	r1, r0
  403730:	fb02 7101 	mla	r1, r2, r1, r7
  403734:	0c0f      	lsrs	r7, r1, #16
  403736:	0c00      	lsrs	r0, r0, #16
  403738:	fb02 7000 	mla	r0, r2, r0, r7
  40373c:	b289      	uxth	r1, r1
  40373e:	3301      	adds	r3, #1
  403740:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  403744:	429d      	cmp	r5, r3
  403746:	ea4f 4710 	mov.w	r7, r0, lsr #16
  40374a:	f84e 1b04 	str.w	r1, [lr], #4
  40374e:	dcec      	bgt.n	40372a <__multadd+0x12>
  403750:	b1d7      	cbz	r7, 403788 <__multadd+0x70>
  403752:	68a3      	ldr	r3, [r4, #8]
  403754:	429d      	cmp	r5, r3
  403756:	db12      	blt.n	40377e <__multadd+0x66>
  403758:	6861      	ldr	r1, [r4, #4]
  40375a:	4630      	mov	r0, r6
  40375c:	3101      	adds	r1, #1
  40375e:	f7ff ff8f 	bl	403680 <_Balloc>
  403762:	6922      	ldr	r2, [r4, #16]
  403764:	3202      	adds	r2, #2
  403766:	f104 010c 	add.w	r1, r4, #12
  40376a:	4680      	mov	r8, r0
  40376c:	0092      	lsls	r2, r2, #2
  40376e:	300c      	adds	r0, #12
  403770:	f7fe f89a 	bl	4018a8 <memcpy>
  403774:	4621      	mov	r1, r4
  403776:	4630      	mov	r0, r6
  403778:	f7ff ffb7 	bl	4036ea <_Bfree>
  40377c:	4644      	mov	r4, r8
  40377e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403782:	3501      	adds	r5, #1
  403784:	615f      	str	r7, [r3, #20]
  403786:	6125      	str	r5, [r4, #16]
  403788:	4620      	mov	r0, r4
  40378a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040378e <__hi0bits>:
  40378e:	0c03      	lsrs	r3, r0, #16
  403790:	041b      	lsls	r3, r3, #16
  403792:	b913      	cbnz	r3, 40379a <__hi0bits+0xc>
  403794:	0400      	lsls	r0, r0, #16
  403796:	2310      	movs	r3, #16
  403798:	e000      	b.n	40379c <__hi0bits+0xe>
  40379a:	2300      	movs	r3, #0
  40379c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4037a0:	bf04      	itt	eq
  4037a2:	0200      	lsleq	r0, r0, #8
  4037a4:	3308      	addeq	r3, #8
  4037a6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4037aa:	bf04      	itt	eq
  4037ac:	0100      	lsleq	r0, r0, #4
  4037ae:	3304      	addeq	r3, #4
  4037b0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4037b4:	bf04      	itt	eq
  4037b6:	0080      	lsleq	r0, r0, #2
  4037b8:	3302      	addeq	r3, #2
  4037ba:	2800      	cmp	r0, #0
  4037bc:	db03      	blt.n	4037c6 <__hi0bits+0x38>
  4037be:	0042      	lsls	r2, r0, #1
  4037c0:	d503      	bpl.n	4037ca <__hi0bits+0x3c>
  4037c2:	1c58      	adds	r0, r3, #1
  4037c4:	4770      	bx	lr
  4037c6:	4618      	mov	r0, r3
  4037c8:	4770      	bx	lr
  4037ca:	2020      	movs	r0, #32
  4037cc:	4770      	bx	lr

004037ce <__lo0bits>:
  4037ce:	6803      	ldr	r3, [r0, #0]
  4037d0:	f013 0207 	ands.w	r2, r3, #7
  4037d4:	d00b      	beq.n	4037ee <__lo0bits+0x20>
  4037d6:	07d9      	lsls	r1, r3, #31
  4037d8:	d422      	bmi.n	403820 <__lo0bits+0x52>
  4037da:	079a      	lsls	r2, r3, #30
  4037dc:	bf4b      	itete	mi
  4037de:	085b      	lsrmi	r3, r3, #1
  4037e0:	089b      	lsrpl	r3, r3, #2
  4037e2:	6003      	strmi	r3, [r0, #0]
  4037e4:	6003      	strpl	r3, [r0, #0]
  4037e6:	bf4c      	ite	mi
  4037e8:	2001      	movmi	r0, #1
  4037ea:	2002      	movpl	r0, #2
  4037ec:	4770      	bx	lr
  4037ee:	b299      	uxth	r1, r3
  4037f0:	b909      	cbnz	r1, 4037f6 <__lo0bits+0x28>
  4037f2:	0c1b      	lsrs	r3, r3, #16
  4037f4:	2210      	movs	r2, #16
  4037f6:	f013 0fff 	tst.w	r3, #255	; 0xff
  4037fa:	bf04      	itt	eq
  4037fc:	0a1b      	lsreq	r3, r3, #8
  4037fe:	3208      	addeq	r2, #8
  403800:	0719      	lsls	r1, r3, #28
  403802:	bf04      	itt	eq
  403804:	091b      	lsreq	r3, r3, #4
  403806:	3204      	addeq	r2, #4
  403808:	0799      	lsls	r1, r3, #30
  40380a:	bf04      	itt	eq
  40380c:	089b      	lsreq	r3, r3, #2
  40380e:	3202      	addeq	r2, #2
  403810:	07d9      	lsls	r1, r3, #31
  403812:	d402      	bmi.n	40381a <__lo0bits+0x4c>
  403814:	085b      	lsrs	r3, r3, #1
  403816:	d005      	beq.n	403824 <__lo0bits+0x56>
  403818:	3201      	adds	r2, #1
  40381a:	6003      	str	r3, [r0, #0]
  40381c:	4610      	mov	r0, r2
  40381e:	4770      	bx	lr
  403820:	2000      	movs	r0, #0
  403822:	4770      	bx	lr
  403824:	2020      	movs	r0, #32
  403826:	4770      	bx	lr

00403828 <__i2b>:
  403828:	b510      	push	{r4, lr}
  40382a:	460c      	mov	r4, r1
  40382c:	2101      	movs	r1, #1
  40382e:	f7ff ff27 	bl	403680 <_Balloc>
  403832:	2201      	movs	r2, #1
  403834:	6144      	str	r4, [r0, #20]
  403836:	6102      	str	r2, [r0, #16]
  403838:	bd10      	pop	{r4, pc}

0040383a <__multiply>:
  40383a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40383e:	4614      	mov	r4, r2
  403840:	690a      	ldr	r2, [r1, #16]
  403842:	6923      	ldr	r3, [r4, #16]
  403844:	429a      	cmp	r2, r3
  403846:	bfb8      	it	lt
  403848:	460b      	movlt	r3, r1
  40384a:	4688      	mov	r8, r1
  40384c:	bfbc      	itt	lt
  40384e:	46a0      	movlt	r8, r4
  403850:	461c      	movlt	r4, r3
  403852:	f8d8 7010 	ldr.w	r7, [r8, #16]
  403856:	f8d4 9010 	ldr.w	r9, [r4, #16]
  40385a:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40385e:	f8d8 1004 	ldr.w	r1, [r8, #4]
  403862:	eb07 0609 	add.w	r6, r7, r9
  403866:	429e      	cmp	r6, r3
  403868:	bfc8      	it	gt
  40386a:	3101      	addgt	r1, #1
  40386c:	f7ff ff08 	bl	403680 <_Balloc>
  403870:	f100 0514 	add.w	r5, r0, #20
  403874:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  403878:	462b      	mov	r3, r5
  40387a:	2200      	movs	r2, #0
  40387c:	4563      	cmp	r3, ip
  40387e:	d202      	bcs.n	403886 <__multiply+0x4c>
  403880:	f843 2b04 	str.w	r2, [r3], #4
  403884:	e7fa      	b.n	40387c <__multiply+0x42>
  403886:	f104 0214 	add.w	r2, r4, #20
  40388a:	f108 0114 	add.w	r1, r8, #20
  40388e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  403892:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  403896:	9300      	str	r3, [sp, #0]
  403898:	9b00      	ldr	r3, [sp, #0]
  40389a:	9201      	str	r2, [sp, #4]
  40389c:	4293      	cmp	r3, r2
  40389e:	d957      	bls.n	403950 <__multiply+0x116>
  4038a0:	f8b2 b000 	ldrh.w	fp, [r2]
  4038a4:	f1bb 0f00 	cmp.w	fp, #0
  4038a8:	d023      	beq.n	4038f2 <__multiply+0xb8>
  4038aa:	4689      	mov	r9, r1
  4038ac:	46ae      	mov	lr, r5
  4038ae:	f04f 0800 	mov.w	r8, #0
  4038b2:	f859 4b04 	ldr.w	r4, [r9], #4
  4038b6:	f8be a000 	ldrh.w	sl, [lr]
  4038ba:	b2a3      	uxth	r3, r4
  4038bc:	fb0b a303 	mla	r3, fp, r3, sl
  4038c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  4038c4:	f8de 4000 	ldr.w	r4, [lr]
  4038c8:	4443      	add	r3, r8
  4038ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4038ce:	fb0b 840a 	mla	r4, fp, sl, r8
  4038d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4038d6:	46f2      	mov	sl, lr
  4038d8:	b29b      	uxth	r3, r3
  4038da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4038de:	454f      	cmp	r7, r9
  4038e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4038e4:	f84a 3b04 	str.w	r3, [sl], #4
  4038e8:	d901      	bls.n	4038ee <__multiply+0xb4>
  4038ea:	46d6      	mov	lr, sl
  4038ec:	e7e1      	b.n	4038b2 <__multiply+0x78>
  4038ee:	f8ce 8004 	str.w	r8, [lr, #4]
  4038f2:	9b01      	ldr	r3, [sp, #4]
  4038f4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  4038f8:	3204      	adds	r2, #4
  4038fa:	f1ba 0f00 	cmp.w	sl, #0
  4038fe:	d021      	beq.n	403944 <__multiply+0x10a>
  403900:	682b      	ldr	r3, [r5, #0]
  403902:	462c      	mov	r4, r5
  403904:	4689      	mov	r9, r1
  403906:	f04f 0800 	mov.w	r8, #0
  40390a:	f8b9 e000 	ldrh.w	lr, [r9]
  40390e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  403912:	fb0a be0e 	mla	lr, sl, lr, fp
  403916:	44f0      	add	r8, lr
  403918:	46a3      	mov	fp, r4
  40391a:	b29b      	uxth	r3, r3
  40391c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403920:	f84b 3b04 	str.w	r3, [fp], #4
  403924:	f859 3b04 	ldr.w	r3, [r9], #4
  403928:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  40392c:	0c1b      	lsrs	r3, r3, #16
  40392e:	fb0a e303 	mla	r3, sl, r3, lr
  403932:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  403936:	454f      	cmp	r7, r9
  403938:	ea4f 4813 	mov.w	r8, r3, lsr #16
  40393c:	d901      	bls.n	403942 <__multiply+0x108>
  40393e:	465c      	mov	r4, fp
  403940:	e7e3      	b.n	40390a <__multiply+0xd0>
  403942:	6063      	str	r3, [r4, #4]
  403944:	3504      	adds	r5, #4
  403946:	e7a7      	b.n	403898 <__multiply+0x5e>
  403948:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  40394c:	b913      	cbnz	r3, 403954 <__multiply+0x11a>
  40394e:	3e01      	subs	r6, #1
  403950:	2e00      	cmp	r6, #0
  403952:	dcf9      	bgt.n	403948 <__multiply+0x10e>
  403954:	6106      	str	r6, [r0, #16]
  403956:	b003      	add	sp, #12
  403958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040395c <__pow5mult>:
  40395c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403960:	4615      	mov	r5, r2
  403962:	f012 0203 	ands.w	r2, r2, #3
  403966:	4606      	mov	r6, r0
  403968:	460f      	mov	r7, r1
  40396a:	d007      	beq.n	40397c <__pow5mult+0x20>
  40396c:	3a01      	subs	r2, #1
  40396e:	4c21      	ldr	r4, [pc, #132]	; (4039f4 <__pow5mult+0x98>)
  403970:	2300      	movs	r3, #0
  403972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  403976:	f7ff fecf 	bl	403718 <__multadd>
  40397a:	4607      	mov	r7, r0
  40397c:	10ad      	asrs	r5, r5, #2
  40397e:	d036      	beq.n	4039ee <__pow5mult+0x92>
  403980:	6a74      	ldr	r4, [r6, #36]	; 0x24
  403982:	b93c      	cbnz	r4, 403994 <__pow5mult+0x38>
  403984:	2010      	movs	r0, #16
  403986:	f7ff fe1d 	bl	4035c4 <malloc>
  40398a:	6270      	str	r0, [r6, #36]	; 0x24
  40398c:	6044      	str	r4, [r0, #4]
  40398e:	6084      	str	r4, [r0, #8]
  403990:	6004      	str	r4, [r0, #0]
  403992:	60c4      	str	r4, [r0, #12]
  403994:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  403998:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40399c:	b94c      	cbnz	r4, 4039b2 <__pow5mult+0x56>
  40399e:	f240 2171 	movw	r1, #625	; 0x271
  4039a2:	4630      	mov	r0, r6
  4039a4:	f7ff ff40 	bl	403828 <__i2b>
  4039a8:	2300      	movs	r3, #0
  4039aa:	f8c8 0008 	str.w	r0, [r8, #8]
  4039ae:	4604      	mov	r4, r0
  4039b0:	6003      	str	r3, [r0, #0]
  4039b2:	f04f 0800 	mov.w	r8, #0
  4039b6:	07eb      	lsls	r3, r5, #31
  4039b8:	d50a      	bpl.n	4039d0 <__pow5mult+0x74>
  4039ba:	4639      	mov	r1, r7
  4039bc:	4622      	mov	r2, r4
  4039be:	4630      	mov	r0, r6
  4039c0:	f7ff ff3b 	bl	40383a <__multiply>
  4039c4:	4639      	mov	r1, r7
  4039c6:	4681      	mov	r9, r0
  4039c8:	4630      	mov	r0, r6
  4039ca:	f7ff fe8e 	bl	4036ea <_Bfree>
  4039ce:	464f      	mov	r7, r9
  4039d0:	106d      	asrs	r5, r5, #1
  4039d2:	d00c      	beq.n	4039ee <__pow5mult+0x92>
  4039d4:	6820      	ldr	r0, [r4, #0]
  4039d6:	b108      	cbz	r0, 4039dc <__pow5mult+0x80>
  4039d8:	4604      	mov	r4, r0
  4039da:	e7ec      	b.n	4039b6 <__pow5mult+0x5a>
  4039dc:	4622      	mov	r2, r4
  4039de:	4621      	mov	r1, r4
  4039e0:	4630      	mov	r0, r6
  4039e2:	f7ff ff2a 	bl	40383a <__multiply>
  4039e6:	6020      	str	r0, [r4, #0]
  4039e8:	f8c0 8000 	str.w	r8, [r0]
  4039ec:	e7f4      	b.n	4039d8 <__pow5mult+0x7c>
  4039ee:	4638      	mov	r0, r7
  4039f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4039f4:	00404eb0 	.word	0x00404eb0

004039f8 <__lshift>:
  4039f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4039fc:	460c      	mov	r4, r1
  4039fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
  403a02:	6926      	ldr	r6, [r4, #16]
  403a04:	6849      	ldr	r1, [r1, #4]
  403a06:	68a3      	ldr	r3, [r4, #8]
  403a08:	4456      	add	r6, sl
  403a0a:	4607      	mov	r7, r0
  403a0c:	4691      	mov	r9, r2
  403a0e:	1c75      	adds	r5, r6, #1
  403a10:	42ab      	cmp	r3, r5
  403a12:	da02      	bge.n	403a1a <__lshift+0x22>
  403a14:	3101      	adds	r1, #1
  403a16:	005b      	lsls	r3, r3, #1
  403a18:	e7fa      	b.n	403a10 <__lshift+0x18>
  403a1a:	4638      	mov	r0, r7
  403a1c:	f7ff fe30 	bl	403680 <_Balloc>
  403a20:	2300      	movs	r3, #0
  403a22:	4680      	mov	r8, r0
  403a24:	f100 0114 	add.w	r1, r0, #20
  403a28:	461a      	mov	r2, r3
  403a2a:	4553      	cmp	r3, sl
  403a2c:	da03      	bge.n	403a36 <__lshift+0x3e>
  403a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403a32:	3301      	adds	r3, #1
  403a34:	e7f9      	b.n	403a2a <__lshift+0x32>
  403a36:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  403a3a:	6920      	ldr	r0, [r4, #16]
  403a3c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403a40:	f019 091f 	ands.w	r9, r9, #31
  403a44:	f104 0114 	add.w	r1, r4, #20
  403a48:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  403a4c:	d014      	beq.n	403a78 <__lshift+0x80>
  403a4e:	f1c9 0c20 	rsb	ip, r9, #32
  403a52:	2200      	movs	r2, #0
  403a54:	6808      	ldr	r0, [r1, #0]
  403a56:	fa00 f009 	lsl.w	r0, r0, r9
  403a5a:	4302      	orrs	r2, r0
  403a5c:	469a      	mov	sl, r3
  403a5e:	f843 2b04 	str.w	r2, [r3], #4
  403a62:	f851 2b04 	ldr.w	r2, [r1], #4
  403a66:	458e      	cmp	lr, r1
  403a68:	fa22 f20c 	lsr.w	r2, r2, ip
  403a6c:	d8f2      	bhi.n	403a54 <__lshift+0x5c>
  403a6e:	f8ca 2004 	str.w	r2, [sl, #4]
  403a72:	b142      	cbz	r2, 403a86 <__lshift+0x8e>
  403a74:	1cb5      	adds	r5, r6, #2
  403a76:	e006      	b.n	403a86 <__lshift+0x8e>
  403a78:	3b04      	subs	r3, #4
  403a7a:	f851 2b04 	ldr.w	r2, [r1], #4
  403a7e:	f843 2f04 	str.w	r2, [r3, #4]!
  403a82:	458e      	cmp	lr, r1
  403a84:	d8f9      	bhi.n	403a7a <__lshift+0x82>
  403a86:	3d01      	subs	r5, #1
  403a88:	4638      	mov	r0, r7
  403a8a:	f8c8 5010 	str.w	r5, [r8, #16]
  403a8e:	4621      	mov	r1, r4
  403a90:	f7ff fe2b 	bl	4036ea <_Bfree>
  403a94:	4640      	mov	r0, r8
  403a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403a9a <__mcmp>:
  403a9a:	6903      	ldr	r3, [r0, #16]
  403a9c:	690a      	ldr	r2, [r1, #16]
  403a9e:	1a9b      	subs	r3, r3, r2
  403aa0:	b510      	push	{r4, lr}
  403aa2:	d111      	bne.n	403ac8 <__mcmp+0x2e>
  403aa4:	0092      	lsls	r2, r2, #2
  403aa6:	3014      	adds	r0, #20
  403aa8:	3114      	adds	r1, #20
  403aaa:	1883      	adds	r3, r0, r2
  403aac:	440a      	add	r2, r1
  403aae:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  403ab2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  403ab6:	428c      	cmp	r4, r1
  403ab8:	d002      	beq.n	403ac0 <__mcmp+0x26>
  403aba:	d307      	bcc.n	403acc <__mcmp+0x32>
  403abc:	2001      	movs	r0, #1
  403abe:	bd10      	pop	{r4, pc}
  403ac0:	4298      	cmp	r0, r3
  403ac2:	d3f4      	bcc.n	403aae <__mcmp+0x14>
  403ac4:	2000      	movs	r0, #0
  403ac6:	bd10      	pop	{r4, pc}
  403ac8:	4618      	mov	r0, r3
  403aca:	bd10      	pop	{r4, pc}
  403acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403ad0:	bd10      	pop	{r4, pc}

00403ad2 <__mdiff>:
  403ad2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403ad6:	460c      	mov	r4, r1
  403ad8:	4607      	mov	r7, r0
  403ada:	4611      	mov	r1, r2
  403adc:	4620      	mov	r0, r4
  403ade:	4615      	mov	r5, r2
  403ae0:	f7ff ffdb 	bl	403a9a <__mcmp>
  403ae4:	1e06      	subs	r6, r0, #0
  403ae6:	d108      	bne.n	403afa <__mdiff+0x28>
  403ae8:	4631      	mov	r1, r6
  403aea:	4638      	mov	r0, r7
  403aec:	f7ff fdc8 	bl	403680 <_Balloc>
  403af0:	2301      	movs	r3, #1
  403af2:	6103      	str	r3, [r0, #16]
  403af4:	6146      	str	r6, [r0, #20]
  403af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403afa:	bfbc      	itt	lt
  403afc:	4623      	movlt	r3, r4
  403afe:	462c      	movlt	r4, r5
  403b00:	4638      	mov	r0, r7
  403b02:	6861      	ldr	r1, [r4, #4]
  403b04:	bfba      	itte	lt
  403b06:	461d      	movlt	r5, r3
  403b08:	2601      	movlt	r6, #1
  403b0a:	2600      	movge	r6, #0
  403b0c:	f7ff fdb8 	bl	403680 <_Balloc>
  403b10:	692b      	ldr	r3, [r5, #16]
  403b12:	60c6      	str	r6, [r0, #12]
  403b14:	6926      	ldr	r6, [r4, #16]
  403b16:	f105 0914 	add.w	r9, r5, #20
  403b1a:	3414      	adds	r4, #20
  403b1c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  403b20:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  403b24:	f100 0514 	add.w	r5, r0, #20
  403b28:	f04f 0c00 	mov.w	ip, #0
  403b2c:	f854 3b04 	ldr.w	r3, [r4], #4
  403b30:	f859 2b04 	ldr.w	r2, [r9], #4
  403b34:	fa1c f183 	uxtah	r1, ip, r3
  403b38:	fa1f fe82 	uxth.w	lr, r2
  403b3c:	0c12      	lsrs	r2, r2, #16
  403b3e:	ebce 0101 	rsb	r1, lr, r1
  403b42:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  403b46:	eb03 4321 	add.w	r3, r3, r1, asr #16
  403b4a:	b289      	uxth	r1, r1
  403b4c:	ea4f 4c23 	mov.w	ip, r3, asr #16
  403b50:	45c8      	cmp	r8, r9
  403b52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  403b56:	46a6      	mov	lr, r4
  403b58:	f845 3b04 	str.w	r3, [r5], #4
  403b5c:	d8e6      	bhi.n	403b2c <__mdiff+0x5a>
  403b5e:	45be      	cmp	lr, r7
  403b60:	d20e      	bcs.n	403b80 <__mdiff+0xae>
  403b62:	f85e 1b04 	ldr.w	r1, [lr], #4
  403b66:	fa1c f281 	uxtah	r2, ip, r1
  403b6a:	1413      	asrs	r3, r2, #16
  403b6c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  403b70:	b292      	uxth	r2, r2
  403b72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403b76:	ea4f 4c23 	mov.w	ip, r3, asr #16
  403b7a:	f845 2b04 	str.w	r2, [r5], #4
  403b7e:	e7ee      	b.n	403b5e <__mdiff+0x8c>
  403b80:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403b84:	b90b      	cbnz	r3, 403b8a <__mdiff+0xb8>
  403b86:	3e01      	subs	r6, #1
  403b88:	e7fa      	b.n	403b80 <__mdiff+0xae>
  403b8a:	6106      	str	r6, [r0, #16]
  403b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00403b90 <__d2b>:
  403b90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  403b94:	2101      	movs	r1, #1
  403b96:	461c      	mov	r4, r3
  403b98:	4690      	mov	r8, r2
  403b9a:	9e08      	ldr	r6, [sp, #32]
  403b9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403b9e:	f7ff fd6f 	bl	403680 <_Balloc>
  403ba2:	f3c4 0213 	ubfx	r2, r4, #0, #20
  403ba6:	f3c4 540a 	ubfx	r4, r4, #20, #11
  403baa:	4607      	mov	r7, r0
  403bac:	b10c      	cbz	r4, 403bb2 <__d2b+0x22>
  403bae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  403bb2:	9201      	str	r2, [sp, #4]
  403bb4:	f1b8 0f00 	cmp.w	r8, #0
  403bb8:	d019      	beq.n	403bee <__d2b+0x5e>
  403bba:	a802      	add	r0, sp, #8
  403bbc:	f840 8d08 	str.w	r8, [r0, #-8]!
  403bc0:	f7ff fe05 	bl	4037ce <__lo0bits>
  403bc4:	9b00      	ldr	r3, [sp, #0]
  403bc6:	b148      	cbz	r0, 403bdc <__d2b+0x4c>
  403bc8:	9a01      	ldr	r2, [sp, #4]
  403bca:	f1c0 0120 	rsb	r1, r0, #32
  403bce:	fa02 f101 	lsl.w	r1, r2, r1
  403bd2:	430b      	orrs	r3, r1
  403bd4:	40c2      	lsrs	r2, r0
  403bd6:	617b      	str	r3, [r7, #20]
  403bd8:	9201      	str	r2, [sp, #4]
  403bda:	e000      	b.n	403bde <__d2b+0x4e>
  403bdc:	617b      	str	r3, [r7, #20]
  403bde:	9b01      	ldr	r3, [sp, #4]
  403be0:	61bb      	str	r3, [r7, #24]
  403be2:	2b00      	cmp	r3, #0
  403be4:	bf14      	ite	ne
  403be6:	2102      	movne	r1, #2
  403be8:	2101      	moveq	r1, #1
  403bea:	6139      	str	r1, [r7, #16]
  403bec:	e007      	b.n	403bfe <__d2b+0x6e>
  403bee:	a801      	add	r0, sp, #4
  403bf0:	f7ff fded 	bl	4037ce <__lo0bits>
  403bf4:	9b01      	ldr	r3, [sp, #4]
  403bf6:	617b      	str	r3, [r7, #20]
  403bf8:	2101      	movs	r1, #1
  403bfa:	6139      	str	r1, [r7, #16]
  403bfc:	3020      	adds	r0, #32
  403bfe:	b134      	cbz	r4, 403c0e <__d2b+0x7e>
  403c00:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  403c04:	4404      	add	r4, r0
  403c06:	6034      	str	r4, [r6, #0]
  403c08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  403c0c:	e009      	b.n	403c22 <__d2b+0x92>
  403c0e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  403c12:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  403c16:	6030      	str	r0, [r6, #0]
  403c18:	6918      	ldr	r0, [r3, #16]
  403c1a:	f7ff fdb8 	bl	40378e <__hi0bits>
  403c1e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  403c22:	6028      	str	r0, [r5, #0]
  403c24:	4638      	mov	r0, r7
  403c26:	b002      	add	sp, #8
  403c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403c2c <_calloc_r>:
  403c2c:	b538      	push	{r3, r4, r5, lr}
  403c2e:	fb02 f401 	mul.w	r4, r2, r1
  403c32:	4621      	mov	r1, r4
  403c34:	f000 f856 	bl	403ce4 <_malloc_r>
  403c38:	4605      	mov	r5, r0
  403c3a:	b118      	cbz	r0, 403c44 <_calloc_r+0x18>
  403c3c:	4622      	mov	r2, r4
  403c3e:	2100      	movs	r1, #0
  403c40:	f7fd fe3d 	bl	4018be <memset>
  403c44:	4628      	mov	r0, r5
  403c46:	bd38      	pop	{r3, r4, r5, pc}

00403c48 <_free_r>:
  403c48:	b538      	push	{r3, r4, r5, lr}
  403c4a:	4605      	mov	r5, r0
  403c4c:	2900      	cmp	r1, #0
  403c4e:	d046      	beq.n	403cde <_free_r+0x96>
  403c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
  403c54:	1f0c      	subs	r4, r1, #4
  403c56:	2b00      	cmp	r3, #0
  403c58:	bfb8      	it	lt
  403c5a:	18e4      	addlt	r4, r4, r3
  403c5c:	f000 faa0 	bl	4041a0 <__malloc_lock>
  403c60:	4a1f      	ldr	r2, [pc, #124]	; (403ce0 <_free_r+0x98>)
  403c62:	6813      	ldr	r3, [r2, #0]
  403c64:	4611      	mov	r1, r2
  403c66:	b913      	cbnz	r3, 403c6e <_free_r+0x26>
  403c68:	6063      	str	r3, [r4, #4]
  403c6a:	6014      	str	r4, [r2, #0]
  403c6c:	e032      	b.n	403cd4 <_free_r+0x8c>
  403c6e:	42a3      	cmp	r3, r4
  403c70:	d90e      	bls.n	403c90 <_free_r+0x48>
  403c72:	6822      	ldr	r2, [r4, #0]
  403c74:	18a0      	adds	r0, r4, r2
  403c76:	4283      	cmp	r3, r0
  403c78:	bf04      	itt	eq
  403c7a:	6818      	ldreq	r0, [r3, #0]
  403c7c:	685b      	ldreq	r3, [r3, #4]
  403c7e:	6063      	str	r3, [r4, #4]
  403c80:	bf04      	itt	eq
  403c82:	1812      	addeq	r2, r2, r0
  403c84:	6022      	streq	r2, [r4, #0]
  403c86:	600c      	str	r4, [r1, #0]
  403c88:	e024      	b.n	403cd4 <_free_r+0x8c>
  403c8a:	42a2      	cmp	r2, r4
  403c8c:	d803      	bhi.n	403c96 <_free_r+0x4e>
  403c8e:	4613      	mov	r3, r2
  403c90:	685a      	ldr	r2, [r3, #4]
  403c92:	2a00      	cmp	r2, #0
  403c94:	d1f9      	bne.n	403c8a <_free_r+0x42>
  403c96:	6818      	ldr	r0, [r3, #0]
  403c98:	1819      	adds	r1, r3, r0
  403c9a:	42a1      	cmp	r1, r4
  403c9c:	d10b      	bne.n	403cb6 <_free_r+0x6e>
  403c9e:	6821      	ldr	r1, [r4, #0]
  403ca0:	4401      	add	r1, r0
  403ca2:	1858      	adds	r0, r3, r1
  403ca4:	4282      	cmp	r2, r0
  403ca6:	6019      	str	r1, [r3, #0]
  403ca8:	d114      	bne.n	403cd4 <_free_r+0x8c>
  403caa:	6810      	ldr	r0, [r2, #0]
  403cac:	6852      	ldr	r2, [r2, #4]
  403cae:	605a      	str	r2, [r3, #4]
  403cb0:	4401      	add	r1, r0
  403cb2:	6019      	str	r1, [r3, #0]
  403cb4:	e00e      	b.n	403cd4 <_free_r+0x8c>
  403cb6:	d902      	bls.n	403cbe <_free_r+0x76>
  403cb8:	230c      	movs	r3, #12
  403cba:	602b      	str	r3, [r5, #0]
  403cbc:	e00a      	b.n	403cd4 <_free_r+0x8c>
  403cbe:	6821      	ldr	r1, [r4, #0]
  403cc0:	1860      	adds	r0, r4, r1
  403cc2:	4282      	cmp	r2, r0
  403cc4:	bf04      	itt	eq
  403cc6:	6810      	ldreq	r0, [r2, #0]
  403cc8:	6852      	ldreq	r2, [r2, #4]
  403cca:	6062      	str	r2, [r4, #4]
  403ccc:	bf04      	itt	eq
  403cce:	1809      	addeq	r1, r1, r0
  403cd0:	6021      	streq	r1, [r4, #0]
  403cd2:	605c      	str	r4, [r3, #4]
  403cd4:	4628      	mov	r0, r5
  403cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403cda:	f000 ba62 	b.w	4041a2 <__malloc_unlock>
  403cde:	bd38      	pop	{r3, r4, r5, pc}
  403ce0:	200002a0 	.word	0x200002a0

00403ce4 <_malloc_r>:
  403ce4:	b570      	push	{r4, r5, r6, lr}
  403ce6:	1ccd      	adds	r5, r1, #3
  403ce8:	f025 0503 	bic.w	r5, r5, #3
  403cec:	3508      	adds	r5, #8
  403cee:	2d0c      	cmp	r5, #12
  403cf0:	bf38      	it	cc
  403cf2:	250c      	movcc	r5, #12
  403cf4:	2d00      	cmp	r5, #0
  403cf6:	4606      	mov	r6, r0
  403cf8:	db01      	blt.n	403cfe <_malloc_r+0x1a>
  403cfa:	42a9      	cmp	r1, r5
  403cfc:	d902      	bls.n	403d04 <_malloc_r+0x20>
  403cfe:	230c      	movs	r3, #12
  403d00:	6033      	str	r3, [r6, #0]
  403d02:	e046      	b.n	403d92 <_malloc_r+0xae>
  403d04:	f000 fa4c 	bl	4041a0 <__malloc_lock>
  403d08:	4b23      	ldr	r3, [pc, #140]	; (403d98 <_malloc_r+0xb4>)
  403d0a:	681c      	ldr	r4, [r3, #0]
  403d0c:	461a      	mov	r2, r3
  403d0e:	4621      	mov	r1, r4
  403d10:	b1a1      	cbz	r1, 403d3c <_malloc_r+0x58>
  403d12:	680b      	ldr	r3, [r1, #0]
  403d14:	1b5b      	subs	r3, r3, r5
  403d16:	d40e      	bmi.n	403d36 <_malloc_r+0x52>
  403d18:	2b0b      	cmp	r3, #11
  403d1a:	d903      	bls.n	403d24 <_malloc_r+0x40>
  403d1c:	600b      	str	r3, [r1, #0]
  403d1e:	18cc      	adds	r4, r1, r3
  403d20:	50cd      	str	r5, [r1, r3]
  403d22:	e01e      	b.n	403d62 <_malloc_r+0x7e>
  403d24:	428c      	cmp	r4, r1
  403d26:	bf0d      	iteet	eq
  403d28:	6863      	ldreq	r3, [r4, #4]
  403d2a:	684b      	ldrne	r3, [r1, #4]
  403d2c:	6063      	strne	r3, [r4, #4]
  403d2e:	6013      	streq	r3, [r2, #0]
  403d30:	bf18      	it	ne
  403d32:	460c      	movne	r4, r1
  403d34:	e015      	b.n	403d62 <_malloc_r+0x7e>
  403d36:	460c      	mov	r4, r1
  403d38:	6849      	ldr	r1, [r1, #4]
  403d3a:	e7e9      	b.n	403d10 <_malloc_r+0x2c>
  403d3c:	4c17      	ldr	r4, [pc, #92]	; (403d9c <_malloc_r+0xb8>)
  403d3e:	6823      	ldr	r3, [r4, #0]
  403d40:	b91b      	cbnz	r3, 403d4a <_malloc_r+0x66>
  403d42:	4630      	mov	r0, r6
  403d44:	f000 f970 	bl	404028 <_sbrk_r>
  403d48:	6020      	str	r0, [r4, #0]
  403d4a:	4629      	mov	r1, r5
  403d4c:	4630      	mov	r0, r6
  403d4e:	f000 f96b 	bl	404028 <_sbrk_r>
  403d52:	1c43      	adds	r3, r0, #1
  403d54:	d018      	beq.n	403d88 <_malloc_r+0xa4>
  403d56:	1cc4      	adds	r4, r0, #3
  403d58:	f024 0403 	bic.w	r4, r4, #3
  403d5c:	42a0      	cmp	r0, r4
  403d5e:	d10d      	bne.n	403d7c <_malloc_r+0x98>
  403d60:	6025      	str	r5, [r4, #0]
  403d62:	4630      	mov	r0, r6
  403d64:	f000 fa1d 	bl	4041a2 <__malloc_unlock>
  403d68:	f104 000b 	add.w	r0, r4, #11
  403d6c:	1d23      	adds	r3, r4, #4
  403d6e:	f020 0007 	bic.w	r0, r0, #7
  403d72:	1ac3      	subs	r3, r0, r3
  403d74:	d00e      	beq.n	403d94 <_malloc_r+0xb0>
  403d76:	425a      	negs	r2, r3
  403d78:	50e2      	str	r2, [r4, r3]
  403d7a:	bd70      	pop	{r4, r5, r6, pc}
  403d7c:	1a21      	subs	r1, r4, r0
  403d7e:	4630      	mov	r0, r6
  403d80:	f000 f952 	bl	404028 <_sbrk_r>
  403d84:	3001      	adds	r0, #1
  403d86:	d1eb      	bne.n	403d60 <_malloc_r+0x7c>
  403d88:	230c      	movs	r3, #12
  403d8a:	6033      	str	r3, [r6, #0]
  403d8c:	4630      	mov	r0, r6
  403d8e:	f000 fa08 	bl	4041a2 <__malloc_unlock>
  403d92:	2000      	movs	r0, #0
  403d94:	bd70      	pop	{r4, r5, r6, pc}
  403d96:	bf00      	nop
  403d98:	200002a0 	.word	0x200002a0
  403d9c:	2000029c 	.word	0x2000029c

00403da0 <__sfputc_r>:
  403da0:	6893      	ldr	r3, [r2, #8]
  403da2:	3b01      	subs	r3, #1
  403da4:	2b00      	cmp	r3, #0
  403da6:	b410      	push	{r4}
  403da8:	6093      	str	r3, [r2, #8]
  403daa:	da08      	bge.n	403dbe <__sfputc_r+0x1e>
  403dac:	6994      	ldr	r4, [r2, #24]
  403dae:	42a3      	cmp	r3, r4
  403db0:	db02      	blt.n	403db8 <__sfputc_r+0x18>
  403db2:	b2cb      	uxtb	r3, r1
  403db4:	2b0a      	cmp	r3, #10
  403db6:	d102      	bne.n	403dbe <__sfputc_r+0x1e>
  403db8:	bc10      	pop	{r4}
  403dba:	f7fe bb2b 	b.w	402414 <__swbuf_r>
  403dbe:	6813      	ldr	r3, [r2, #0]
  403dc0:	1c58      	adds	r0, r3, #1
  403dc2:	6010      	str	r0, [r2, #0]
  403dc4:	7019      	strb	r1, [r3, #0]
  403dc6:	b2c8      	uxtb	r0, r1
  403dc8:	bc10      	pop	{r4}
  403dca:	4770      	bx	lr

00403dcc <__sfputs_r>:
  403dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403dce:	4606      	mov	r6, r0
  403dd0:	460f      	mov	r7, r1
  403dd2:	4614      	mov	r4, r2
  403dd4:	18d5      	adds	r5, r2, r3
  403dd6:	42ac      	cmp	r4, r5
  403dd8:	d008      	beq.n	403dec <__sfputs_r+0x20>
  403dda:	463a      	mov	r2, r7
  403ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
  403de0:	4630      	mov	r0, r6
  403de2:	f7ff ffdd 	bl	403da0 <__sfputc_r>
  403de6:	1c43      	adds	r3, r0, #1
  403de8:	d1f5      	bne.n	403dd6 <__sfputs_r+0xa>
  403dea:	e000      	b.n	403dee <__sfputs_r+0x22>
  403dec:	2000      	movs	r0, #0
  403dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00403df0 <_vfiprintf_r>:
  403df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403df4:	b09d      	sub	sp, #116	; 0x74
  403df6:	460c      	mov	r4, r1
  403df8:	4617      	mov	r7, r2
  403dfa:	9303      	str	r3, [sp, #12]
  403dfc:	4606      	mov	r6, r0
  403dfe:	b118      	cbz	r0, 403e08 <_vfiprintf_r+0x18>
  403e00:	6983      	ldr	r3, [r0, #24]
  403e02:	b90b      	cbnz	r3, 403e08 <_vfiprintf_r+0x18>
  403e04:	f7ff fae6 	bl	4033d4 <__sinit>
  403e08:	4b7f      	ldr	r3, [pc, #508]	; (404008 <_vfiprintf_r+0x218>)
  403e0a:	429c      	cmp	r4, r3
  403e0c:	d101      	bne.n	403e12 <_vfiprintf_r+0x22>
  403e0e:	6874      	ldr	r4, [r6, #4]
  403e10:	e008      	b.n	403e24 <_vfiprintf_r+0x34>
  403e12:	4b7e      	ldr	r3, [pc, #504]	; (40400c <_vfiprintf_r+0x21c>)
  403e14:	429c      	cmp	r4, r3
  403e16:	d101      	bne.n	403e1c <_vfiprintf_r+0x2c>
  403e18:	68b4      	ldr	r4, [r6, #8]
  403e1a:	e003      	b.n	403e24 <_vfiprintf_r+0x34>
  403e1c:	4b7c      	ldr	r3, [pc, #496]	; (404010 <_vfiprintf_r+0x220>)
  403e1e:	429c      	cmp	r4, r3
  403e20:	bf08      	it	eq
  403e22:	68f4      	ldreq	r4, [r6, #12]
  403e24:	89a3      	ldrh	r3, [r4, #12]
  403e26:	0718      	lsls	r0, r3, #28
  403e28:	d50c      	bpl.n	403e44 <_vfiprintf_r+0x54>
  403e2a:	6923      	ldr	r3, [r4, #16]
  403e2c:	b153      	cbz	r3, 403e44 <_vfiprintf_r+0x54>
  403e2e:	2300      	movs	r3, #0
  403e30:	9309      	str	r3, [sp, #36]	; 0x24
  403e32:	2320      	movs	r3, #32
  403e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  403e38:	2330      	movs	r3, #48	; 0x30
  403e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  403e3e:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 404014 <_vfiprintf_r+0x224>
  403e42:	e044      	b.n	403ece <_vfiprintf_r+0xde>
  403e44:	4621      	mov	r1, r4
  403e46:	4630      	mov	r0, r6
  403e48:	f7fe fb38 	bl	4024bc <__swsetup_r>
  403e4c:	2800      	cmp	r0, #0
  403e4e:	d0ee      	beq.n	403e2e <_vfiprintf_r+0x3e>
  403e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403e54:	e0d5      	b.n	404002 <_vfiprintf_r+0x212>
  403e56:	9a03      	ldr	r2, [sp, #12]
  403e58:	1d11      	adds	r1, r2, #4
  403e5a:	6812      	ldr	r2, [r2, #0]
  403e5c:	9103      	str	r1, [sp, #12]
  403e5e:	2a00      	cmp	r2, #0
  403e60:	f280 808c 	bge.w	403f7c <_vfiprintf_r+0x18c>
  403e64:	4252      	negs	r2, r2
  403e66:	f043 0002 	orr.w	r0, r3, #2
  403e6a:	9207      	str	r2, [sp, #28]
  403e6c:	9004      	str	r0, [sp, #16]
  403e6e:	f898 3000 	ldrb.w	r3, [r8]
  403e72:	2b2e      	cmp	r3, #46	; 0x2e
  403e74:	f000 8084 	beq.w	403f80 <_vfiprintf_r+0x190>
  403e78:	2203      	movs	r2, #3
  403e7a:	f898 1000 	ldrb.w	r1, [r8]
  403e7e:	4865      	ldr	r0, [pc, #404]	; (404014 <_vfiprintf_r+0x224>)
  403e80:	f7ff fbae 	bl	4035e0 <memchr>
  403e84:	b148      	cbz	r0, 403e9a <_vfiprintf_r+0xaa>
  403e86:	2340      	movs	r3, #64	; 0x40
  403e88:	ebcb 0000 	rsb	r0, fp, r0
  403e8c:	fa03 f000 	lsl.w	r0, r3, r0
  403e90:	9b04      	ldr	r3, [sp, #16]
  403e92:	4318      	orrs	r0, r3
  403e94:	9004      	str	r0, [sp, #16]
  403e96:	f108 0801 	add.w	r8, r8, #1
  403e9a:	f898 1000 	ldrb.w	r1, [r8]
  403e9e:	485e      	ldr	r0, [pc, #376]	; (404018 <_vfiprintf_r+0x228>)
  403ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  403ea4:	2206      	movs	r2, #6
  403ea6:	f108 0701 	add.w	r7, r8, #1
  403eaa:	f7ff fb99 	bl	4035e0 <memchr>
  403eae:	2800      	cmp	r0, #0
  403eb0:	f000 8095 	beq.w	403fde <_vfiprintf_r+0x1ee>
  403eb4:	4b59      	ldr	r3, [pc, #356]	; (40401c <_vfiprintf_r+0x22c>)
  403eb6:	2b00      	cmp	r3, #0
  403eb8:	f040 8088 	bne.w	403fcc <_vfiprintf_r+0x1dc>
  403ebc:	9b03      	ldr	r3, [sp, #12]
  403ebe:	3307      	adds	r3, #7
  403ec0:	f023 0307 	bic.w	r3, r3, #7
  403ec4:	3308      	adds	r3, #8
  403ec6:	9303      	str	r3, [sp, #12]
  403ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403eca:	4453      	add	r3, sl
  403ecc:	9309      	str	r3, [sp, #36]	; 0x24
  403ece:	46b8      	mov	r8, r7
  403ed0:	4645      	mov	r5, r8
  403ed2:	f815 3b01 	ldrb.w	r3, [r5], #1
  403ed6:	b91b      	cbnz	r3, 403ee0 <_vfiprintf_r+0xf0>
  403ed8:	ebb8 0907 	subs.w	r9, r8, r7
  403edc:	d00f      	beq.n	403efe <_vfiprintf_r+0x10e>
  403ede:	e003      	b.n	403ee8 <_vfiprintf_r+0xf8>
  403ee0:	2b25      	cmp	r3, #37	; 0x25
  403ee2:	d0f9      	beq.n	403ed8 <_vfiprintf_r+0xe8>
  403ee4:	46a8      	mov	r8, r5
  403ee6:	e7f3      	b.n	403ed0 <_vfiprintf_r+0xe0>
  403ee8:	464b      	mov	r3, r9
  403eea:	463a      	mov	r2, r7
  403eec:	4621      	mov	r1, r4
  403eee:	4630      	mov	r0, r6
  403ef0:	f7ff ff6c 	bl	403dcc <__sfputs_r>
  403ef4:	3001      	adds	r0, #1
  403ef6:	d07f      	beq.n	403ff8 <_vfiprintf_r+0x208>
  403ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403efa:	444b      	add	r3, r9
  403efc:	9309      	str	r3, [sp, #36]	; 0x24
  403efe:	f898 3000 	ldrb.w	r3, [r8]
  403f02:	2b00      	cmp	r3, #0
  403f04:	d078      	beq.n	403ff8 <_vfiprintf_r+0x208>
  403f06:	2300      	movs	r3, #0
  403f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  403f0c:	9304      	str	r3, [sp, #16]
  403f0e:	9307      	str	r3, [sp, #28]
  403f10:	9205      	str	r2, [sp, #20]
  403f12:	9306      	str	r3, [sp, #24]
  403f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  403f18:	931a      	str	r3, [sp, #104]	; 0x68
  403f1a:	2701      	movs	r7, #1
  403f1c:	2205      	movs	r2, #5
  403f1e:	7829      	ldrb	r1, [r5, #0]
  403f20:	483f      	ldr	r0, [pc, #252]	; (404020 <_vfiprintf_r+0x230>)
  403f22:	f7ff fb5d 	bl	4035e0 <memchr>
  403f26:	f105 0801 	add.w	r8, r5, #1
  403f2a:	9b04      	ldr	r3, [sp, #16]
  403f2c:	b138      	cbz	r0, 403f3e <_vfiprintf_r+0x14e>
  403f2e:	4a3c      	ldr	r2, [pc, #240]	; (404020 <_vfiprintf_r+0x230>)
  403f30:	1a80      	subs	r0, r0, r2
  403f32:	fa07 f000 	lsl.w	r0, r7, r0
  403f36:	4318      	orrs	r0, r3
  403f38:	9004      	str	r0, [sp, #16]
  403f3a:	4645      	mov	r5, r8
  403f3c:	e7ee      	b.n	403f1c <_vfiprintf_r+0x12c>
  403f3e:	06d9      	lsls	r1, r3, #27
  403f40:	bf44      	itt	mi
  403f42:	2220      	movmi	r2, #32
  403f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  403f48:	071a      	lsls	r2, r3, #28
  403f4a:	bf44      	itt	mi
  403f4c:	222b      	movmi	r2, #43	; 0x2b
  403f4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  403f52:	782a      	ldrb	r2, [r5, #0]
  403f54:	2a2a      	cmp	r2, #42	; 0x2a
  403f56:	f43f af7e 	beq.w	403e56 <_vfiprintf_r+0x66>
  403f5a:	9a07      	ldr	r2, [sp, #28]
  403f5c:	2100      	movs	r1, #0
  403f5e:	200a      	movs	r0, #10
  403f60:	46a8      	mov	r8, r5
  403f62:	3501      	adds	r5, #1
  403f64:	f898 3000 	ldrb.w	r3, [r8]
  403f68:	3b30      	subs	r3, #48	; 0x30
  403f6a:	2b09      	cmp	r3, #9
  403f6c:	d803      	bhi.n	403f76 <_vfiprintf_r+0x186>
  403f6e:	fb00 3202 	mla	r2, r0, r2, r3
  403f72:	2101      	movs	r1, #1
  403f74:	e7f4      	b.n	403f60 <_vfiprintf_r+0x170>
  403f76:	2900      	cmp	r1, #0
  403f78:	f43f af79 	beq.w	403e6e <_vfiprintf_r+0x7e>
  403f7c:	9207      	str	r2, [sp, #28]
  403f7e:	e776      	b.n	403e6e <_vfiprintf_r+0x7e>
  403f80:	f898 3001 	ldrb.w	r3, [r8, #1]
  403f84:	2b2a      	cmp	r3, #42	; 0x2a
  403f86:	d10b      	bne.n	403fa0 <_vfiprintf_r+0x1b0>
  403f88:	9b03      	ldr	r3, [sp, #12]
  403f8a:	1d1a      	adds	r2, r3, #4
  403f8c:	681b      	ldr	r3, [r3, #0]
  403f8e:	9203      	str	r2, [sp, #12]
  403f90:	2b00      	cmp	r3, #0
  403f92:	bfb8      	it	lt
  403f94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  403f98:	f108 0802 	add.w	r8, r8, #2
  403f9c:	9305      	str	r3, [sp, #20]
  403f9e:	e76b      	b.n	403e78 <_vfiprintf_r+0x88>
  403fa0:	2300      	movs	r3, #0
  403fa2:	9305      	str	r3, [sp, #20]
  403fa4:	f108 0001 	add.w	r0, r8, #1
  403fa8:	4619      	mov	r1, r3
  403faa:	250a      	movs	r5, #10
  403fac:	4680      	mov	r8, r0
  403fae:	3001      	adds	r0, #1
  403fb0:	f898 2000 	ldrb.w	r2, [r8]
  403fb4:	3a30      	subs	r2, #48	; 0x30
  403fb6:	2a09      	cmp	r2, #9
  403fb8:	d803      	bhi.n	403fc2 <_vfiprintf_r+0x1d2>
  403fba:	fb05 2101 	mla	r1, r5, r1, r2
  403fbe:	2301      	movs	r3, #1
  403fc0:	e7f4      	b.n	403fac <_vfiprintf_r+0x1bc>
  403fc2:	2b00      	cmp	r3, #0
  403fc4:	f43f af58 	beq.w	403e78 <_vfiprintf_r+0x88>
  403fc8:	9105      	str	r1, [sp, #20]
  403fca:	e755      	b.n	403e78 <_vfiprintf_r+0x88>
  403fcc:	ab03      	add	r3, sp, #12
  403fce:	9300      	str	r3, [sp, #0]
  403fd0:	4622      	mov	r2, r4
  403fd2:	4b14      	ldr	r3, [pc, #80]	; (404024 <_vfiprintf_r+0x234>)
  403fd4:	a904      	add	r1, sp, #16
  403fd6:	4630      	mov	r0, r6
  403fd8:	f7fd fd08 	bl	4019ec <_printf_float>
  403fdc:	e007      	b.n	403fee <_vfiprintf_r+0x1fe>
  403fde:	ab03      	add	r3, sp, #12
  403fe0:	9300      	str	r3, [sp, #0]
  403fe2:	4622      	mov	r2, r4
  403fe4:	4b0f      	ldr	r3, [pc, #60]	; (404024 <_vfiprintf_r+0x234>)
  403fe6:	a904      	add	r1, sp, #16
  403fe8:	4630      	mov	r0, r6
  403fea:	f7fd ffb9 	bl	401f60 <_printf_i>
  403fee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  403ff2:	4682      	mov	sl, r0
  403ff4:	f47f af68 	bne.w	403ec8 <_vfiprintf_r+0xd8>
  403ff8:	89a3      	ldrh	r3, [r4, #12]
  403ffa:	065b      	lsls	r3, r3, #25
  403ffc:	f53f af28 	bmi.w	403e50 <_vfiprintf_r+0x60>
  404000:	9809      	ldr	r0, [sp, #36]	; 0x24
  404002:	b01d      	add	sp, #116	; 0x74
  404004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404008:	00404d5c 	.word	0x00404d5c
  40400c:	00404d7c 	.word	0x00404d7c
  404010:	00404d9c 	.word	0x00404d9c
  404014:	00404ec2 	.word	0x00404ec2
  404018:	00404ec6 	.word	0x00404ec6
  40401c:	004019ed 	.word	0x004019ed
  404020:	00404ebc 	.word	0x00404ebc
  404024:	00403dcd 	.word	0x00403dcd

00404028 <_sbrk_r>:
  404028:	b538      	push	{r3, r4, r5, lr}
  40402a:	4c06      	ldr	r4, [pc, #24]	; (404044 <_sbrk_r+0x1c>)
  40402c:	2300      	movs	r3, #0
  40402e:	4605      	mov	r5, r0
  404030:	4608      	mov	r0, r1
  404032:	6023      	str	r3, [r4, #0]
  404034:	f7fd fbea 	bl	40180c <_sbrk>
  404038:	1c43      	adds	r3, r0, #1
  40403a:	d102      	bne.n	404042 <_sbrk_r+0x1a>
  40403c:	6823      	ldr	r3, [r4, #0]
  40403e:	b103      	cbz	r3, 404042 <_sbrk_r+0x1a>
  404040:	602b      	str	r3, [r5, #0]
  404042:	bd38      	pop	{r3, r4, r5, pc}
  404044:	200004b4 	.word	0x200004b4

00404048 <__sread>:
  404048:	b510      	push	{r4, lr}
  40404a:	460c      	mov	r4, r1
  40404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404050:	f000 f8a8 	bl	4041a4 <_read_r>
  404054:	2800      	cmp	r0, #0
  404056:	bfab      	itete	ge
  404058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  40405a:	89a3      	ldrhlt	r3, [r4, #12]
  40405c:	181b      	addge	r3, r3, r0
  40405e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  404062:	bfac      	ite	ge
  404064:	6563      	strge	r3, [r4, #84]	; 0x54
  404066:	81a3      	strhlt	r3, [r4, #12]
  404068:	bd10      	pop	{r4, pc}

0040406a <__swrite>:
  40406a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40406e:	461f      	mov	r7, r3
  404070:	898b      	ldrh	r3, [r1, #12]
  404072:	05db      	lsls	r3, r3, #23
  404074:	4605      	mov	r5, r0
  404076:	460c      	mov	r4, r1
  404078:	4616      	mov	r6, r2
  40407a:	d505      	bpl.n	404088 <__swrite+0x1e>
  40407c:	2302      	movs	r3, #2
  40407e:	2200      	movs	r2, #0
  404080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404084:	f000 f868 	bl	404158 <_lseek_r>
  404088:	89a3      	ldrh	r3, [r4, #12]
  40408a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40408e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404092:	81a3      	strh	r3, [r4, #12]
  404094:	4632      	mov	r2, r6
  404096:	463b      	mov	r3, r7
  404098:	4628      	mov	r0, r5
  40409a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40409e:	f000 b817 	b.w	4040d0 <_write_r>

004040a2 <__sseek>:
  4040a2:	b510      	push	{r4, lr}
  4040a4:	460c      	mov	r4, r1
  4040a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4040aa:	f000 f855 	bl	404158 <_lseek_r>
  4040ae:	1c43      	adds	r3, r0, #1
  4040b0:	89a3      	ldrh	r3, [r4, #12]
  4040b2:	bf15      	itete	ne
  4040b4:	6560      	strne	r0, [r4, #84]	; 0x54
  4040b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4040ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4040be:	81a3      	strheq	r3, [r4, #12]
  4040c0:	bf18      	it	ne
  4040c2:	81a3      	strhne	r3, [r4, #12]
  4040c4:	bd10      	pop	{r4, pc}

004040c6 <__sclose>:
  4040c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4040ca:	f000 b813 	b.w	4040f4 <_close_r>
	...

004040d0 <_write_r>:
  4040d0:	b538      	push	{r3, r4, r5, lr}
  4040d2:	4c07      	ldr	r4, [pc, #28]	; (4040f0 <_write_r+0x20>)
  4040d4:	4605      	mov	r5, r0
  4040d6:	4608      	mov	r0, r1
  4040d8:	4611      	mov	r1, r2
  4040da:	2200      	movs	r2, #0
  4040dc:	6022      	str	r2, [r4, #0]
  4040de:	461a      	mov	r2, r3
  4040e0:	f7fc f864 	bl	4001ac <_write>
  4040e4:	1c43      	adds	r3, r0, #1
  4040e6:	d102      	bne.n	4040ee <_write_r+0x1e>
  4040e8:	6823      	ldr	r3, [r4, #0]
  4040ea:	b103      	cbz	r3, 4040ee <_write_r+0x1e>
  4040ec:	602b      	str	r3, [r5, #0]
  4040ee:	bd38      	pop	{r3, r4, r5, pc}
  4040f0:	200004b4 	.word	0x200004b4

004040f4 <_close_r>:
  4040f4:	b538      	push	{r3, r4, r5, lr}
  4040f6:	4c06      	ldr	r4, [pc, #24]	; (404110 <_close_r+0x1c>)
  4040f8:	2300      	movs	r3, #0
  4040fa:	4605      	mov	r5, r0
  4040fc:	4608      	mov	r0, r1
  4040fe:	6023      	str	r3, [r4, #0]
  404100:	f7fd fb9e 	bl	401840 <_close>
  404104:	1c43      	adds	r3, r0, #1
  404106:	d102      	bne.n	40410e <_close_r+0x1a>
  404108:	6823      	ldr	r3, [r4, #0]
  40410a:	b103      	cbz	r3, 40410e <_close_r+0x1a>
  40410c:	602b      	str	r3, [r5, #0]
  40410e:	bd38      	pop	{r3, r4, r5, pc}
  404110:	200004b4 	.word	0x200004b4

00404114 <_fstat_r>:
  404114:	b538      	push	{r3, r4, r5, lr}
  404116:	4c07      	ldr	r4, [pc, #28]	; (404134 <_fstat_r+0x20>)
  404118:	2300      	movs	r3, #0
  40411a:	4605      	mov	r5, r0
  40411c:	4608      	mov	r0, r1
  40411e:	4611      	mov	r1, r2
  404120:	6023      	str	r3, [r4, #0]
  404122:	f7fd fb91 	bl	401848 <_fstat>
  404126:	1c43      	adds	r3, r0, #1
  404128:	d102      	bne.n	404130 <_fstat_r+0x1c>
  40412a:	6823      	ldr	r3, [r4, #0]
  40412c:	b103      	cbz	r3, 404130 <_fstat_r+0x1c>
  40412e:	602b      	str	r3, [r5, #0]
  404130:	bd38      	pop	{r3, r4, r5, pc}
  404132:	bf00      	nop
  404134:	200004b4 	.word	0x200004b4

00404138 <_isatty_r>:
  404138:	b538      	push	{r3, r4, r5, lr}
  40413a:	4c06      	ldr	r4, [pc, #24]	; (404154 <_isatty_r+0x1c>)
  40413c:	2300      	movs	r3, #0
  40413e:	4605      	mov	r5, r0
  404140:	4608      	mov	r0, r1
  404142:	6023      	str	r3, [r4, #0]
  404144:	f7fd fb86 	bl	401854 <_isatty>
  404148:	1c43      	adds	r3, r0, #1
  40414a:	d102      	bne.n	404152 <_isatty_r+0x1a>
  40414c:	6823      	ldr	r3, [r4, #0]
  40414e:	b103      	cbz	r3, 404152 <_isatty_r+0x1a>
  404150:	602b      	str	r3, [r5, #0]
  404152:	bd38      	pop	{r3, r4, r5, pc}
  404154:	200004b4 	.word	0x200004b4

00404158 <_lseek_r>:
  404158:	b538      	push	{r3, r4, r5, lr}
  40415a:	4c07      	ldr	r4, [pc, #28]	; (404178 <_lseek_r+0x20>)
  40415c:	4605      	mov	r5, r0
  40415e:	4608      	mov	r0, r1
  404160:	4611      	mov	r1, r2
  404162:	2200      	movs	r2, #0
  404164:	6022      	str	r2, [r4, #0]
  404166:	461a      	mov	r2, r3
  404168:	f7fd fb76 	bl	401858 <_lseek>
  40416c:	1c43      	adds	r3, r0, #1
  40416e:	d102      	bne.n	404176 <_lseek_r+0x1e>
  404170:	6823      	ldr	r3, [r4, #0]
  404172:	b103      	cbz	r3, 404176 <_lseek_r+0x1e>
  404174:	602b      	str	r3, [r5, #0]
  404176:	bd38      	pop	{r3, r4, r5, pc}
  404178:	200004b4 	.word	0x200004b4

0040417c <__ascii_mbtowc>:
  40417c:	b082      	sub	sp, #8
  40417e:	b901      	cbnz	r1, 404182 <__ascii_mbtowc+0x6>
  404180:	a901      	add	r1, sp, #4
  404182:	b13a      	cbz	r2, 404194 <__ascii_mbtowc+0x18>
  404184:	b143      	cbz	r3, 404198 <__ascii_mbtowc+0x1c>
  404186:	7813      	ldrb	r3, [r2, #0]
  404188:	600b      	str	r3, [r1, #0]
  40418a:	7812      	ldrb	r2, [r2, #0]
  40418c:	1c10      	adds	r0, r2, #0
  40418e:	bf18      	it	ne
  404190:	2001      	movne	r0, #1
  404192:	e003      	b.n	40419c <__ascii_mbtowc+0x20>
  404194:	4610      	mov	r0, r2
  404196:	e001      	b.n	40419c <__ascii_mbtowc+0x20>
  404198:	f06f 0001 	mvn.w	r0, #1
  40419c:	b002      	add	sp, #8
  40419e:	4770      	bx	lr

004041a0 <__malloc_lock>:
  4041a0:	4770      	bx	lr

004041a2 <__malloc_unlock>:
  4041a2:	4770      	bx	lr

004041a4 <_read_r>:
  4041a4:	b538      	push	{r3, r4, r5, lr}
  4041a6:	4c07      	ldr	r4, [pc, #28]	; (4041c4 <_read_r+0x20>)
  4041a8:	4605      	mov	r5, r0
  4041aa:	4608      	mov	r0, r1
  4041ac:	4611      	mov	r1, r2
  4041ae:	2200      	movs	r2, #0
  4041b0:	6022      	str	r2, [r4, #0]
  4041b2:	461a      	mov	r2, r3
  4041b4:	f7fb ffdc 	bl	400170 <_read>
  4041b8:	1c43      	adds	r3, r0, #1
  4041ba:	d102      	bne.n	4041c2 <_read_r+0x1e>
  4041bc:	6823      	ldr	r3, [r4, #0]
  4041be:	b103      	cbz	r3, 4041c2 <_read_r+0x1e>
  4041c0:	602b      	str	r3, [r5, #0]
  4041c2:	bd38      	pop	{r3, r4, r5, pc}
  4041c4:	200004b4 	.word	0x200004b4

004041c8 <__ascii_wctomb>:
  4041c8:	b149      	cbz	r1, 4041de <__ascii_wctomb+0x16>
  4041ca:	2aff      	cmp	r2, #255	; 0xff
  4041cc:	bf85      	ittet	hi
  4041ce:	238a      	movhi	r3, #138	; 0x8a
  4041d0:	6003      	strhi	r3, [r0, #0]
  4041d2:	700a      	strbls	r2, [r1, #0]
  4041d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  4041d8:	bf98      	it	ls
  4041da:	2001      	movls	r0, #1
  4041dc:	4770      	bx	lr
  4041de:	4608      	mov	r0, r1
  4041e0:	4770      	bx	lr
	...

004041e4 <__aeabi_drsub>:
  4041e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4041e8:	e002      	b.n	4041f0 <__adddf3>
  4041ea:	bf00      	nop

004041ec <__aeabi_dsub>:
  4041ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004041f0 <__adddf3>:
  4041f0:	b530      	push	{r4, r5, lr}
  4041f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4041f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4041fa:	ea94 0f05 	teq	r4, r5
  4041fe:	bf08      	it	eq
  404200:	ea90 0f02 	teqeq	r0, r2
  404204:	bf1f      	itttt	ne
  404206:	ea54 0c00 	orrsne.w	ip, r4, r0
  40420a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40420e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404216:	f000 80e2 	beq.w	4043de <__adddf3+0x1ee>
  40421a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40421e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404222:	bfb8      	it	lt
  404224:	426d      	neglt	r5, r5
  404226:	dd0c      	ble.n	404242 <__adddf3+0x52>
  404228:	442c      	add	r4, r5
  40422a:	ea80 0202 	eor.w	r2, r0, r2
  40422e:	ea81 0303 	eor.w	r3, r1, r3
  404232:	ea82 0000 	eor.w	r0, r2, r0
  404236:	ea83 0101 	eor.w	r1, r3, r1
  40423a:	ea80 0202 	eor.w	r2, r0, r2
  40423e:	ea81 0303 	eor.w	r3, r1, r3
  404242:	2d36      	cmp	r5, #54	; 0x36
  404244:	bf88      	it	hi
  404246:	bd30      	pophi	{r4, r5, pc}
  404248:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40424c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404250:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404258:	d002      	beq.n	404260 <__adddf3+0x70>
  40425a:	4240      	negs	r0, r0
  40425c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404260:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404264:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40426c:	d002      	beq.n	404274 <__adddf3+0x84>
  40426e:	4252      	negs	r2, r2
  404270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404274:	ea94 0f05 	teq	r4, r5
  404278:	f000 80a7 	beq.w	4043ca <__adddf3+0x1da>
  40427c:	f1a4 0401 	sub.w	r4, r4, #1
  404280:	f1d5 0e20 	rsbs	lr, r5, #32
  404284:	db0d      	blt.n	4042a2 <__adddf3+0xb2>
  404286:	fa02 fc0e 	lsl.w	ip, r2, lr
  40428a:	fa22 f205 	lsr.w	r2, r2, r5
  40428e:	1880      	adds	r0, r0, r2
  404290:	f141 0100 	adc.w	r1, r1, #0
  404294:	fa03 f20e 	lsl.w	r2, r3, lr
  404298:	1880      	adds	r0, r0, r2
  40429a:	fa43 f305 	asr.w	r3, r3, r5
  40429e:	4159      	adcs	r1, r3
  4042a0:	e00e      	b.n	4042c0 <__adddf3+0xd0>
  4042a2:	f1a5 0520 	sub.w	r5, r5, #32
  4042a6:	f10e 0e20 	add.w	lr, lr, #32
  4042aa:	2a01      	cmp	r2, #1
  4042ac:	fa03 fc0e 	lsl.w	ip, r3, lr
  4042b0:	bf28      	it	cs
  4042b2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4042b6:	fa43 f305 	asr.w	r3, r3, r5
  4042ba:	18c0      	adds	r0, r0, r3
  4042bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4042c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4042c4:	d507      	bpl.n	4042d6 <__adddf3+0xe6>
  4042c6:	f04f 0e00 	mov.w	lr, #0
  4042ca:	f1dc 0c00 	rsbs	ip, ip, #0
  4042ce:	eb7e 0000 	sbcs.w	r0, lr, r0
  4042d2:	eb6e 0101 	sbc.w	r1, lr, r1
  4042d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4042da:	d31b      	bcc.n	404314 <__adddf3+0x124>
  4042dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4042e0:	d30c      	bcc.n	4042fc <__adddf3+0x10c>
  4042e2:	0849      	lsrs	r1, r1, #1
  4042e4:	ea5f 0030 	movs.w	r0, r0, rrx
  4042e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4042ec:	f104 0401 	add.w	r4, r4, #1
  4042f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4042f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4042f8:	f080 809a 	bcs.w	404430 <__adddf3+0x240>
  4042fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404300:	bf08      	it	eq
  404302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404306:	f150 0000 	adcs.w	r0, r0, #0
  40430a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40430e:	ea41 0105 	orr.w	r1, r1, r5
  404312:	bd30      	pop	{r4, r5, pc}
  404314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404318:	4140      	adcs	r0, r0
  40431a:	eb41 0101 	adc.w	r1, r1, r1
  40431e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404322:	f1a4 0401 	sub.w	r4, r4, #1
  404326:	d1e9      	bne.n	4042fc <__adddf3+0x10c>
  404328:	f091 0f00 	teq	r1, #0
  40432c:	bf04      	itt	eq
  40432e:	4601      	moveq	r1, r0
  404330:	2000      	moveq	r0, #0
  404332:	fab1 f381 	clz	r3, r1
  404336:	bf08      	it	eq
  404338:	3320      	addeq	r3, #32
  40433a:	f1a3 030b 	sub.w	r3, r3, #11
  40433e:	f1b3 0220 	subs.w	r2, r3, #32
  404342:	da0c      	bge.n	40435e <__adddf3+0x16e>
  404344:	320c      	adds	r2, #12
  404346:	dd08      	ble.n	40435a <__adddf3+0x16a>
  404348:	f102 0c14 	add.w	ip, r2, #20
  40434c:	f1c2 020c 	rsb	r2, r2, #12
  404350:	fa01 f00c 	lsl.w	r0, r1, ip
  404354:	fa21 f102 	lsr.w	r1, r1, r2
  404358:	e00c      	b.n	404374 <__adddf3+0x184>
  40435a:	f102 0214 	add.w	r2, r2, #20
  40435e:	bfd8      	it	le
  404360:	f1c2 0c20 	rsble	ip, r2, #32
  404364:	fa01 f102 	lsl.w	r1, r1, r2
  404368:	fa20 fc0c 	lsr.w	ip, r0, ip
  40436c:	bfdc      	itt	le
  40436e:	ea41 010c 	orrle.w	r1, r1, ip
  404372:	4090      	lslle	r0, r2
  404374:	1ae4      	subs	r4, r4, r3
  404376:	bfa2      	ittt	ge
  404378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40437c:	4329      	orrge	r1, r5
  40437e:	bd30      	popge	{r4, r5, pc}
  404380:	ea6f 0404 	mvn.w	r4, r4
  404384:	3c1f      	subs	r4, #31
  404386:	da1c      	bge.n	4043c2 <__adddf3+0x1d2>
  404388:	340c      	adds	r4, #12
  40438a:	dc0e      	bgt.n	4043aa <__adddf3+0x1ba>
  40438c:	f104 0414 	add.w	r4, r4, #20
  404390:	f1c4 0220 	rsb	r2, r4, #32
  404394:	fa20 f004 	lsr.w	r0, r0, r4
  404398:	fa01 f302 	lsl.w	r3, r1, r2
  40439c:	ea40 0003 	orr.w	r0, r0, r3
  4043a0:	fa21 f304 	lsr.w	r3, r1, r4
  4043a4:	ea45 0103 	orr.w	r1, r5, r3
  4043a8:	bd30      	pop	{r4, r5, pc}
  4043aa:	f1c4 040c 	rsb	r4, r4, #12
  4043ae:	f1c4 0220 	rsb	r2, r4, #32
  4043b2:	fa20 f002 	lsr.w	r0, r0, r2
  4043b6:	fa01 f304 	lsl.w	r3, r1, r4
  4043ba:	ea40 0003 	orr.w	r0, r0, r3
  4043be:	4629      	mov	r1, r5
  4043c0:	bd30      	pop	{r4, r5, pc}
  4043c2:	fa21 f004 	lsr.w	r0, r1, r4
  4043c6:	4629      	mov	r1, r5
  4043c8:	bd30      	pop	{r4, r5, pc}
  4043ca:	f094 0f00 	teq	r4, #0
  4043ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4043d2:	bf06      	itte	eq
  4043d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4043d8:	3401      	addeq	r4, #1
  4043da:	3d01      	subne	r5, #1
  4043dc:	e74e      	b.n	40427c <__adddf3+0x8c>
  4043de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4043e2:	bf18      	it	ne
  4043e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4043e8:	d029      	beq.n	40443e <__adddf3+0x24e>
  4043ea:	ea94 0f05 	teq	r4, r5
  4043ee:	bf08      	it	eq
  4043f0:	ea90 0f02 	teqeq	r0, r2
  4043f4:	d005      	beq.n	404402 <__adddf3+0x212>
  4043f6:	ea54 0c00 	orrs.w	ip, r4, r0
  4043fa:	bf04      	itt	eq
  4043fc:	4619      	moveq	r1, r3
  4043fe:	4610      	moveq	r0, r2
  404400:	bd30      	pop	{r4, r5, pc}
  404402:	ea91 0f03 	teq	r1, r3
  404406:	bf1e      	ittt	ne
  404408:	2100      	movne	r1, #0
  40440a:	2000      	movne	r0, #0
  40440c:	bd30      	popne	{r4, r5, pc}
  40440e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404412:	d105      	bne.n	404420 <__adddf3+0x230>
  404414:	0040      	lsls	r0, r0, #1
  404416:	4149      	adcs	r1, r1
  404418:	bf28      	it	cs
  40441a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40441e:	bd30      	pop	{r4, r5, pc}
  404420:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404424:	bf3c      	itt	cc
  404426:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40442a:	bd30      	popcc	{r4, r5, pc}
  40442c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404430:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404438:	f04f 0000 	mov.w	r0, #0
  40443c:	bd30      	pop	{r4, r5, pc}
  40443e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404442:	bf1a      	itte	ne
  404444:	4619      	movne	r1, r3
  404446:	4610      	movne	r0, r2
  404448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40444c:	bf1c      	itt	ne
  40444e:	460b      	movne	r3, r1
  404450:	4602      	movne	r2, r0
  404452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404456:	bf06      	itte	eq
  404458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40445c:	ea91 0f03 	teqeq	r1, r3
  404460:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404464:	bd30      	pop	{r4, r5, pc}
  404466:	bf00      	nop

00404468 <__aeabi_ui2d>:
  404468:	f090 0f00 	teq	r0, #0
  40446c:	bf04      	itt	eq
  40446e:	2100      	moveq	r1, #0
  404470:	4770      	bxeq	lr
  404472:	b530      	push	{r4, r5, lr}
  404474:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404478:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40447c:	f04f 0500 	mov.w	r5, #0
  404480:	f04f 0100 	mov.w	r1, #0
  404484:	e750      	b.n	404328 <__adddf3+0x138>
  404486:	bf00      	nop

00404488 <__aeabi_i2d>:
  404488:	f090 0f00 	teq	r0, #0
  40448c:	bf04      	itt	eq
  40448e:	2100      	moveq	r1, #0
  404490:	4770      	bxeq	lr
  404492:	b530      	push	{r4, r5, lr}
  404494:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404498:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40449c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4044a0:	bf48      	it	mi
  4044a2:	4240      	negmi	r0, r0
  4044a4:	f04f 0100 	mov.w	r1, #0
  4044a8:	e73e      	b.n	404328 <__adddf3+0x138>
  4044aa:	bf00      	nop

004044ac <__aeabi_f2d>:
  4044ac:	0042      	lsls	r2, r0, #1
  4044ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4044b2:	ea4f 0131 	mov.w	r1, r1, rrx
  4044b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4044ba:	bf1f      	itttt	ne
  4044bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4044c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4044c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4044c8:	4770      	bxne	lr
  4044ca:	f092 0f00 	teq	r2, #0
  4044ce:	bf14      	ite	ne
  4044d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4044d4:	4770      	bxeq	lr
  4044d6:	b530      	push	{r4, r5, lr}
  4044d8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4044dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4044e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4044e4:	e720      	b.n	404328 <__adddf3+0x138>
  4044e6:	bf00      	nop

004044e8 <__aeabi_ul2d>:
  4044e8:	ea50 0201 	orrs.w	r2, r0, r1
  4044ec:	bf08      	it	eq
  4044ee:	4770      	bxeq	lr
  4044f0:	b530      	push	{r4, r5, lr}
  4044f2:	f04f 0500 	mov.w	r5, #0
  4044f6:	e00a      	b.n	40450e <__aeabi_l2d+0x16>

004044f8 <__aeabi_l2d>:
  4044f8:	ea50 0201 	orrs.w	r2, r0, r1
  4044fc:	bf08      	it	eq
  4044fe:	4770      	bxeq	lr
  404500:	b530      	push	{r4, r5, lr}
  404502:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404506:	d502      	bpl.n	40450e <__aeabi_l2d+0x16>
  404508:	4240      	negs	r0, r0
  40450a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40450e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404512:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404516:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40451a:	f43f aedc 	beq.w	4042d6 <__adddf3+0xe6>
  40451e:	f04f 0203 	mov.w	r2, #3
  404522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404526:	bf18      	it	ne
  404528:	3203      	addne	r2, #3
  40452a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40452e:	bf18      	it	ne
  404530:	3203      	addne	r2, #3
  404532:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404536:	f1c2 0320 	rsb	r3, r2, #32
  40453a:	fa00 fc03 	lsl.w	ip, r0, r3
  40453e:	fa20 f002 	lsr.w	r0, r0, r2
  404542:	fa01 fe03 	lsl.w	lr, r1, r3
  404546:	ea40 000e 	orr.w	r0, r0, lr
  40454a:	fa21 f102 	lsr.w	r1, r1, r2
  40454e:	4414      	add	r4, r2
  404550:	e6c1      	b.n	4042d6 <__adddf3+0xe6>
  404552:	bf00      	nop

00404554 <__aeabi_dmul>:
  404554:	b570      	push	{r4, r5, r6, lr}
  404556:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40455a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40455e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404562:	bf1d      	ittte	ne
  404564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404568:	ea94 0f0c 	teqne	r4, ip
  40456c:	ea95 0f0c 	teqne	r5, ip
  404570:	f000 f8de 	bleq	404730 <__aeabi_dmul+0x1dc>
  404574:	442c      	add	r4, r5
  404576:	ea81 0603 	eor.w	r6, r1, r3
  40457a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40457e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404582:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404586:	bf18      	it	ne
  404588:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40458c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404594:	d038      	beq.n	404608 <__aeabi_dmul+0xb4>
  404596:	fba0 ce02 	umull	ip, lr, r0, r2
  40459a:	f04f 0500 	mov.w	r5, #0
  40459e:	fbe1 e502 	umlal	lr, r5, r1, r2
  4045a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4045a6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4045aa:	f04f 0600 	mov.w	r6, #0
  4045ae:	fbe1 5603 	umlal	r5, r6, r1, r3
  4045b2:	f09c 0f00 	teq	ip, #0
  4045b6:	bf18      	it	ne
  4045b8:	f04e 0e01 	orrne.w	lr, lr, #1
  4045bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4045c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4045c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4045c8:	d204      	bcs.n	4045d4 <__aeabi_dmul+0x80>
  4045ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4045ce:	416d      	adcs	r5, r5
  4045d0:	eb46 0606 	adc.w	r6, r6, r6
  4045d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4045d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4045dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4045e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4045e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4045e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4045ec:	bf88      	it	hi
  4045ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4045f2:	d81e      	bhi.n	404632 <__aeabi_dmul+0xde>
  4045f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4045f8:	bf08      	it	eq
  4045fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4045fe:	f150 0000 	adcs.w	r0, r0, #0
  404602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404606:	bd70      	pop	{r4, r5, r6, pc}
  404608:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40460c:	ea46 0101 	orr.w	r1, r6, r1
  404610:	ea40 0002 	orr.w	r0, r0, r2
  404614:	ea81 0103 	eor.w	r1, r1, r3
  404618:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40461c:	bfc2      	ittt	gt
  40461e:	ebd4 050c 	rsbsgt	r5, r4, ip
  404622:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404626:	bd70      	popgt	{r4, r5, r6, pc}
  404628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40462c:	f04f 0e00 	mov.w	lr, #0
  404630:	3c01      	subs	r4, #1
  404632:	f300 80ab 	bgt.w	40478c <__aeabi_dmul+0x238>
  404636:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40463a:	bfde      	ittt	le
  40463c:	2000      	movle	r0, #0
  40463e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  404642:	bd70      	pople	{r4, r5, r6, pc}
  404644:	f1c4 0400 	rsb	r4, r4, #0
  404648:	3c20      	subs	r4, #32
  40464a:	da35      	bge.n	4046b8 <__aeabi_dmul+0x164>
  40464c:	340c      	adds	r4, #12
  40464e:	dc1b      	bgt.n	404688 <__aeabi_dmul+0x134>
  404650:	f104 0414 	add.w	r4, r4, #20
  404654:	f1c4 0520 	rsb	r5, r4, #32
  404658:	fa00 f305 	lsl.w	r3, r0, r5
  40465c:	fa20 f004 	lsr.w	r0, r0, r4
  404660:	fa01 f205 	lsl.w	r2, r1, r5
  404664:	ea40 0002 	orr.w	r0, r0, r2
  404668:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40466c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404670:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404674:	fa21 f604 	lsr.w	r6, r1, r4
  404678:	eb42 0106 	adc.w	r1, r2, r6
  40467c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404680:	bf08      	it	eq
  404682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404686:	bd70      	pop	{r4, r5, r6, pc}
  404688:	f1c4 040c 	rsb	r4, r4, #12
  40468c:	f1c4 0520 	rsb	r5, r4, #32
  404690:	fa00 f304 	lsl.w	r3, r0, r4
  404694:	fa20 f005 	lsr.w	r0, r0, r5
  404698:	fa01 f204 	lsl.w	r2, r1, r4
  40469c:	ea40 0002 	orr.w	r0, r0, r2
  4046a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4046a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4046a8:	f141 0100 	adc.w	r1, r1, #0
  4046ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4046b0:	bf08      	it	eq
  4046b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4046b6:	bd70      	pop	{r4, r5, r6, pc}
  4046b8:	f1c4 0520 	rsb	r5, r4, #32
  4046bc:	fa00 f205 	lsl.w	r2, r0, r5
  4046c0:	ea4e 0e02 	orr.w	lr, lr, r2
  4046c4:	fa20 f304 	lsr.w	r3, r0, r4
  4046c8:	fa01 f205 	lsl.w	r2, r1, r5
  4046cc:	ea43 0302 	orr.w	r3, r3, r2
  4046d0:	fa21 f004 	lsr.w	r0, r1, r4
  4046d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4046d8:	fa21 f204 	lsr.w	r2, r1, r4
  4046dc:	ea20 0002 	bic.w	r0, r0, r2
  4046e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4046e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4046e8:	bf08      	it	eq
  4046ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4046ee:	bd70      	pop	{r4, r5, r6, pc}
  4046f0:	f094 0f00 	teq	r4, #0
  4046f4:	d10f      	bne.n	404716 <__aeabi_dmul+0x1c2>
  4046f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4046fa:	0040      	lsls	r0, r0, #1
  4046fc:	eb41 0101 	adc.w	r1, r1, r1
  404700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404704:	bf08      	it	eq
  404706:	3c01      	subeq	r4, #1
  404708:	d0f7      	beq.n	4046fa <__aeabi_dmul+0x1a6>
  40470a:	ea41 0106 	orr.w	r1, r1, r6
  40470e:	f095 0f00 	teq	r5, #0
  404712:	bf18      	it	ne
  404714:	4770      	bxne	lr
  404716:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40471a:	0052      	lsls	r2, r2, #1
  40471c:	eb43 0303 	adc.w	r3, r3, r3
  404720:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404724:	bf08      	it	eq
  404726:	3d01      	subeq	r5, #1
  404728:	d0f7      	beq.n	40471a <__aeabi_dmul+0x1c6>
  40472a:	ea43 0306 	orr.w	r3, r3, r6
  40472e:	4770      	bx	lr
  404730:	ea94 0f0c 	teq	r4, ip
  404734:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404738:	bf18      	it	ne
  40473a:	ea95 0f0c 	teqne	r5, ip
  40473e:	d00c      	beq.n	40475a <__aeabi_dmul+0x206>
  404740:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404744:	bf18      	it	ne
  404746:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40474a:	d1d1      	bne.n	4046f0 <__aeabi_dmul+0x19c>
  40474c:	ea81 0103 	eor.w	r1, r1, r3
  404750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404754:	f04f 0000 	mov.w	r0, #0
  404758:	bd70      	pop	{r4, r5, r6, pc}
  40475a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40475e:	bf06      	itte	eq
  404760:	4610      	moveq	r0, r2
  404762:	4619      	moveq	r1, r3
  404764:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404768:	d019      	beq.n	40479e <__aeabi_dmul+0x24a>
  40476a:	ea94 0f0c 	teq	r4, ip
  40476e:	d102      	bne.n	404776 <__aeabi_dmul+0x222>
  404770:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404774:	d113      	bne.n	40479e <__aeabi_dmul+0x24a>
  404776:	ea95 0f0c 	teq	r5, ip
  40477a:	d105      	bne.n	404788 <__aeabi_dmul+0x234>
  40477c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404780:	bf1c      	itt	ne
  404782:	4610      	movne	r0, r2
  404784:	4619      	movne	r1, r3
  404786:	d10a      	bne.n	40479e <__aeabi_dmul+0x24a>
  404788:	ea81 0103 	eor.w	r1, r1, r3
  40478c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404790:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404798:	f04f 0000 	mov.w	r0, #0
  40479c:	bd70      	pop	{r4, r5, r6, pc}
  40479e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4047a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4047a6:	bd70      	pop	{r4, r5, r6, pc}

004047a8 <__aeabi_ddiv>:
  4047a8:	b570      	push	{r4, r5, r6, lr}
  4047aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4047ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4047b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4047b6:	bf1d      	ittte	ne
  4047b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4047bc:	ea94 0f0c 	teqne	r4, ip
  4047c0:	ea95 0f0c 	teqne	r5, ip
  4047c4:	f000 f8a7 	bleq	404916 <__aeabi_ddiv+0x16e>
  4047c8:	eba4 0405 	sub.w	r4, r4, r5
  4047cc:	ea81 0e03 	eor.w	lr, r1, r3
  4047d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4047d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4047d8:	f000 8088 	beq.w	4048ec <__aeabi_ddiv+0x144>
  4047dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4047e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4047e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4047e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4047ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4047f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4047f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4047f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4047fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404800:	429d      	cmp	r5, r3
  404802:	bf08      	it	eq
  404804:	4296      	cmpeq	r6, r2
  404806:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40480a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40480e:	d202      	bcs.n	404816 <__aeabi_ddiv+0x6e>
  404810:	085b      	lsrs	r3, r3, #1
  404812:	ea4f 0232 	mov.w	r2, r2, rrx
  404816:	1ab6      	subs	r6, r6, r2
  404818:	eb65 0503 	sbc.w	r5, r5, r3
  40481c:	085b      	lsrs	r3, r3, #1
  40481e:	ea4f 0232 	mov.w	r2, r2, rrx
  404822:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404826:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40482a:	ebb6 0e02 	subs.w	lr, r6, r2
  40482e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404832:	bf22      	ittt	cs
  404834:	1ab6      	subcs	r6, r6, r2
  404836:	4675      	movcs	r5, lr
  404838:	ea40 000c 	orrcs.w	r0, r0, ip
  40483c:	085b      	lsrs	r3, r3, #1
  40483e:	ea4f 0232 	mov.w	r2, r2, rrx
  404842:	ebb6 0e02 	subs.w	lr, r6, r2
  404846:	eb75 0e03 	sbcs.w	lr, r5, r3
  40484a:	bf22      	ittt	cs
  40484c:	1ab6      	subcs	r6, r6, r2
  40484e:	4675      	movcs	r5, lr
  404850:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404854:	085b      	lsrs	r3, r3, #1
  404856:	ea4f 0232 	mov.w	r2, r2, rrx
  40485a:	ebb6 0e02 	subs.w	lr, r6, r2
  40485e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404862:	bf22      	ittt	cs
  404864:	1ab6      	subcs	r6, r6, r2
  404866:	4675      	movcs	r5, lr
  404868:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40486c:	085b      	lsrs	r3, r3, #1
  40486e:	ea4f 0232 	mov.w	r2, r2, rrx
  404872:	ebb6 0e02 	subs.w	lr, r6, r2
  404876:	eb75 0e03 	sbcs.w	lr, r5, r3
  40487a:	bf22      	ittt	cs
  40487c:	1ab6      	subcs	r6, r6, r2
  40487e:	4675      	movcs	r5, lr
  404880:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404884:	ea55 0e06 	orrs.w	lr, r5, r6
  404888:	d018      	beq.n	4048bc <__aeabi_ddiv+0x114>
  40488a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40488e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404892:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40489a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40489e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4048a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4048a6:	d1c0      	bne.n	40482a <__aeabi_ddiv+0x82>
  4048a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4048ac:	d10b      	bne.n	4048c6 <__aeabi_ddiv+0x11e>
  4048ae:	ea41 0100 	orr.w	r1, r1, r0
  4048b2:	f04f 0000 	mov.w	r0, #0
  4048b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4048ba:	e7b6      	b.n	40482a <__aeabi_ddiv+0x82>
  4048bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4048c0:	bf04      	itt	eq
  4048c2:	4301      	orreq	r1, r0
  4048c4:	2000      	moveq	r0, #0
  4048c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4048ca:	bf88      	it	hi
  4048cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4048d0:	f63f aeaf 	bhi.w	404632 <__aeabi_dmul+0xde>
  4048d4:	ebb5 0c03 	subs.w	ip, r5, r3
  4048d8:	bf04      	itt	eq
  4048da:	ebb6 0c02 	subseq.w	ip, r6, r2
  4048de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4048e2:	f150 0000 	adcs.w	r0, r0, #0
  4048e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4048ea:	bd70      	pop	{r4, r5, r6, pc}
  4048ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4048f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4048f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4048f8:	bfc2      	ittt	gt
  4048fa:	ebd4 050c 	rsbsgt	r5, r4, ip
  4048fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404902:	bd70      	popgt	{r4, r5, r6, pc}
  404904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404908:	f04f 0e00 	mov.w	lr, #0
  40490c:	3c01      	subs	r4, #1
  40490e:	e690      	b.n	404632 <__aeabi_dmul+0xde>
  404910:	ea45 0e06 	orr.w	lr, r5, r6
  404914:	e68d      	b.n	404632 <__aeabi_dmul+0xde>
  404916:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40491a:	ea94 0f0c 	teq	r4, ip
  40491e:	bf08      	it	eq
  404920:	ea95 0f0c 	teqeq	r5, ip
  404924:	f43f af3b 	beq.w	40479e <__aeabi_dmul+0x24a>
  404928:	ea94 0f0c 	teq	r4, ip
  40492c:	d10a      	bne.n	404944 <__aeabi_ddiv+0x19c>
  40492e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404932:	f47f af34 	bne.w	40479e <__aeabi_dmul+0x24a>
  404936:	ea95 0f0c 	teq	r5, ip
  40493a:	f47f af25 	bne.w	404788 <__aeabi_dmul+0x234>
  40493e:	4610      	mov	r0, r2
  404940:	4619      	mov	r1, r3
  404942:	e72c      	b.n	40479e <__aeabi_dmul+0x24a>
  404944:	ea95 0f0c 	teq	r5, ip
  404948:	d106      	bne.n	404958 <__aeabi_ddiv+0x1b0>
  40494a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40494e:	f43f aefd 	beq.w	40474c <__aeabi_dmul+0x1f8>
  404952:	4610      	mov	r0, r2
  404954:	4619      	mov	r1, r3
  404956:	e722      	b.n	40479e <__aeabi_dmul+0x24a>
  404958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40495c:	bf18      	it	ne
  40495e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404962:	f47f aec5 	bne.w	4046f0 <__aeabi_dmul+0x19c>
  404966:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40496a:	f47f af0d 	bne.w	404788 <__aeabi_dmul+0x234>
  40496e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404972:	f47f aeeb 	bne.w	40474c <__aeabi_dmul+0x1f8>
  404976:	e712      	b.n	40479e <__aeabi_dmul+0x24a>

00404978 <__gedf2>:
  404978:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  40497c:	e006      	b.n	40498c <__cmpdf2+0x4>
  40497e:	bf00      	nop

00404980 <__ledf2>:
  404980:	f04f 0c01 	mov.w	ip, #1
  404984:	e002      	b.n	40498c <__cmpdf2+0x4>
  404986:	bf00      	nop

00404988 <__cmpdf2>:
  404988:	f04f 0c01 	mov.w	ip, #1
  40498c:	f84d cd04 	str.w	ip, [sp, #-4]!
  404990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40499c:	bf18      	it	ne
  40499e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4049a2:	d01b      	beq.n	4049dc <__cmpdf2+0x54>
  4049a4:	b001      	add	sp, #4
  4049a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4049aa:	bf0c      	ite	eq
  4049ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4049b0:	ea91 0f03 	teqne	r1, r3
  4049b4:	bf02      	ittt	eq
  4049b6:	ea90 0f02 	teqeq	r0, r2
  4049ba:	2000      	moveq	r0, #0
  4049bc:	4770      	bxeq	lr
  4049be:	f110 0f00 	cmn.w	r0, #0
  4049c2:	ea91 0f03 	teq	r1, r3
  4049c6:	bf58      	it	pl
  4049c8:	4299      	cmppl	r1, r3
  4049ca:	bf08      	it	eq
  4049cc:	4290      	cmpeq	r0, r2
  4049ce:	bf2c      	ite	cs
  4049d0:	17d8      	asrcs	r0, r3, #31
  4049d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4049d6:	f040 0001 	orr.w	r0, r0, #1
  4049da:	4770      	bx	lr
  4049dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4049e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4049e4:	d102      	bne.n	4049ec <__cmpdf2+0x64>
  4049e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4049ea:	d107      	bne.n	4049fc <__cmpdf2+0x74>
  4049ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4049f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4049f4:	d1d6      	bne.n	4049a4 <__cmpdf2+0x1c>
  4049f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4049fa:	d0d3      	beq.n	4049a4 <__cmpdf2+0x1c>
  4049fc:	f85d 0b04 	ldr.w	r0, [sp], #4
  404a00:	4770      	bx	lr
  404a02:	bf00      	nop

00404a04 <__aeabi_cdrcmple>:
  404a04:	4684      	mov	ip, r0
  404a06:	4610      	mov	r0, r2
  404a08:	4662      	mov	r2, ip
  404a0a:	468c      	mov	ip, r1
  404a0c:	4619      	mov	r1, r3
  404a0e:	4663      	mov	r3, ip
  404a10:	e000      	b.n	404a14 <__aeabi_cdcmpeq>
  404a12:	bf00      	nop

00404a14 <__aeabi_cdcmpeq>:
  404a14:	b501      	push	{r0, lr}
  404a16:	f7ff ffb7 	bl	404988 <__cmpdf2>
  404a1a:	2800      	cmp	r0, #0
  404a1c:	bf48      	it	mi
  404a1e:	f110 0f00 	cmnmi.w	r0, #0
  404a22:	bd01      	pop	{r0, pc}

00404a24 <__aeabi_dcmpeq>:
  404a24:	f84d ed08 	str.w	lr, [sp, #-8]!
  404a28:	f7ff fff4 	bl	404a14 <__aeabi_cdcmpeq>
  404a2c:	bf0c      	ite	eq
  404a2e:	2001      	moveq	r0, #1
  404a30:	2000      	movne	r0, #0
  404a32:	f85d fb08 	ldr.w	pc, [sp], #8
  404a36:	bf00      	nop

00404a38 <__aeabi_dcmplt>:
  404a38:	f84d ed08 	str.w	lr, [sp, #-8]!
  404a3c:	f7ff ffea 	bl	404a14 <__aeabi_cdcmpeq>
  404a40:	bf34      	ite	cc
  404a42:	2001      	movcc	r0, #1
  404a44:	2000      	movcs	r0, #0
  404a46:	f85d fb08 	ldr.w	pc, [sp], #8
  404a4a:	bf00      	nop

00404a4c <__aeabi_dcmple>:
  404a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404a50:	f7ff ffe0 	bl	404a14 <__aeabi_cdcmpeq>
  404a54:	bf94      	ite	ls
  404a56:	2001      	movls	r0, #1
  404a58:	2000      	movhi	r0, #0
  404a5a:	f85d fb08 	ldr.w	pc, [sp], #8
  404a5e:	bf00      	nop

00404a60 <__aeabi_dcmpge>:
  404a60:	f84d ed08 	str.w	lr, [sp, #-8]!
  404a64:	f7ff ffce 	bl	404a04 <__aeabi_cdrcmple>
  404a68:	bf94      	ite	ls
  404a6a:	2001      	movls	r0, #1
  404a6c:	2000      	movhi	r0, #0
  404a6e:	f85d fb08 	ldr.w	pc, [sp], #8
  404a72:	bf00      	nop

00404a74 <__aeabi_dcmpgt>:
  404a74:	f84d ed08 	str.w	lr, [sp, #-8]!
  404a78:	f7ff ffc4 	bl	404a04 <__aeabi_cdrcmple>
  404a7c:	bf34      	ite	cc
  404a7e:	2001      	movcc	r0, #1
  404a80:	2000      	movcs	r0, #0
  404a82:	f85d fb08 	ldr.w	pc, [sp], #8
  404a86:	bf00      	nop

00404a88 <__aeabi_dcmpun>:
  404a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404a90:	d102      	bne.n	404a98 <__aeabi_dcmpun+0x10>
  404a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404a96:	d10a      	bne.n	404aae <__aeabi_dcmpun+0x26>
  404a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404aa0:	d102      	bne.n	404aa8 <__aeabi_dcmpun+0x20>
  404aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404aa6:	d102      	bne.n	404aae <__aeabi_dcmpun+0x26>
  404aa8:	f04f 0000 	mov.w	r0, #0
  404aac:	4770      	bx	lr
  404aae:	f04f 0001 	mov.w	r0, #1
  404ab2:	4770      	bx	lr

00404ab4 <__aeabi_d2iz>:
  404ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  404abc:	d215      	bcs.n	404aea <__aeabi_d2iz+0x36>
  404abe:	d511      	bpl.n	404ae4 <__aeabi_d2iz+0x30>
  404ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  404ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  404ac8:	d912      	bls.n	404af0 <__aeabi_d2iz+0x3c>
  404aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  404ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  404ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404ada:	fa23 f002 	lsr.w	r0, r3, r2
  404ade:	bf18      	it	ne
  404ae0:	4240      	negne	r0, r0
  404ae2:	4770      	bx	lr
  404ae4:	f04f 0000 	mov.w	r0, #0
  404ae8:	4770      	bx	lr
  404aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  404aee:	d105      	bne.n	404afc <__aeabi_d2iz+0x48>
  404af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  404af4:	bf08      	it	eq
  404af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404afa:	4770      	bx	lr
  404afc:	f04f 0000 	mov.w	r0, #0
  404b00:	4770      	bx	lr
  404b02:	bf00      	nop
  404b04:	0a0d0a0d 	.word	0x0a0d0a0d
  404b08:	346d6173 	.word	0x346d6173
  404b0c:	63323364 	.word	0x63323364
  404b10:	756d6920 	.word	0x756d6920
  404b14:	6d656420 	.word	0x6d656420
  404b18:	2e2e2e6f 	.word	0x2e2e2e6f
  404b1c:	00000a0d 	.word	0x00000a0d
  404b20:	0000002e 	.word	0x0000002e
  404b24:	74697277 	.word	0x74697277
  404b28:	65725f65 	.word	0x65725f65
  404b2c:	74736967 	.word	0x74736967
  404b30:	203a7265 	.word	0x203a7265
  404b34:	63637573 	.word	0x63637573
  404b38:	0d737365 	.word	0x0d737365
  404b3c:	0000000a 	.word	0x0000000a
  404b40:	5f697774 	.word	0x5f697774
  404b44:	7473616d 	.word	0x7473616d
  404b48:	695f7265 	.word	0x695f7265
  404b4c:	3a74696e 	.word	0x3a74696e
  404b50:	69616620 	.word	0x69616620
  404b54:	0d64656c 	.word	0x0d64656c
  404b58:	0000000a 	.word	0x0000000a
  404b5c:	5f697774 	.word	0x5f697774
  404b60:	7473616d 	.word	0x7473616d
  404b64:	695f7265 	.word	0x695f7265
  404b68:	3a74696e 	.word	0x3a74696e
  404b6c:	63757320 	.word	0x63757320
  404b70:	73736563 	.word	0x73736563
  404b74:	00000a0d 	.word	0x00000a0d
  404b78:	5f697774 	.word	0x5f697774
  404b7c:	626f7270 	.word	0x626f7270
  404b80:	66203a65 	.word	0x66203a65
  404b84:	656c6961 	.word	0x656c6961
  404b88:	000a0d64 	.word	0x000a0d64
  404b8c:	5f697774 	.word	0x5f697774
  404b90:	626f7270 	.word	0x626f7270
  404b94:	73203a65 	.word	0x73203a65
  404b98:	65636375 	.word	0x65636375
  404b9c:	0a0d7373 	.word	0x0a0d7373
  404ba0:	00000000 	.word	0x00000000
  404ba4:	62616e45 	.word	0x62616e45
  404ba8:	0064656c 	.word	0x0064656c
  404bac:	61736944 	.word	0x61736944
  404bb0:	64656c62 	.word	0x64656c62
  404bb4:	00000000 	.word	0x00000000
  404bb8:	69766544 	.word	0x69766544
  404bbc:	203a6563 	.word	0x203a6563
  404bc0:	31257830 	.word	0x31257830
  404bc4:	000a0d78 	.word	0x000a0d78
  404bc8:	65656c53 	.word	0x65656c53
  404bcc:	6f4d2070 	.word	0x6f4d2070
  404bd0:	203a6564 	.word	0x203a6564
  404bd4:	0a0d7325 	.word	0x0a0d7325
  404bd8:	00000000 	.word	0x00000000
  404bdc:	636f6c43 	.word	0x636f6c43
  404be0:	6f53206b 	.word	0x6f53206b
  404be4:	65637275 	.word	0x65637275
  404be8:	0000203a 	.word	0x0000203a
  404bec:	65746e49 	.word	0x65746e49
  404bf0:	6c616e72 	.word	0x6c616e72
  404bf4:	484d3820 	.word	0x484d3820
  404bf8:	736f207a 	.word	0x736f207a
  404bfc:	6c6c6963 	.word	0x6c6c6963
  404c00:	726f7461 	.word	0x726f7461
  404c04:	00000a0d 	.word	0x00000a0d
  404c08:	204c4c50 	.word	0x204c4c50
  404c0c:	68746977 	.word	0x68746977
  404c10:	61205820 	.word	0x61205820
  404c14:	20736978 	.word	0x20736978
  404c18:	6f727967 	.word	0x6f727967
  404c1c:	706f6373 	.word	0x706f6373
  404c20:	65722065 	.word	0x65722065
  404c24:	65726566 	.word	0x65726566
  404c28:	0d65636e 	.word	0x0d65636e
  404c2c:	0000000a 	.word	0x0000000a
  404c30:	6f727947 	.word	0x6f727947
  404c34:	706f6373 	.word	0x706f6373
  404c38:	00203a65 	.word	0x00203a65
  404c3c:	20303532 	.word	0x20303532
  404c40:	0d737064 	.word	0x0d737064
  404c44:	0000000a 	.word	0x0000000a
  404c48:	20303035 	.word	0x20303035
  404c4c:	0d737064 	.word	0x0d737064
  404c50:	0000000a 	.word	0x0000000a
  404c54:	30303031 	.word	0x30303031
  404c58:	73706420 	.word	0x73706420
  404c5c:	00000a0d 	.word	0x00000a0d
  404c60:	30303032 	.word	0x30303032
  404c64:	73706420 	.word	0x73706420
  404c68:	00000a0d 	.word	0x00000a0d
  404c6c:	5f657375 	.word	0x5f657375
  404c70:	696c6163 	.word	0x696c6163
  404c74:	74617262 	.word	0x74617262
  404c78:	25203a65 	.word	0x25203a65
  404c7c:	000a0d64 	.word	0x000a0d64
  404c80:	75746361 	.word	0x75746361
  404c84:	745f6c61 	.word	0x745f6c61
  404c88:	73657268 	.word	0x73657268
  404c8c:	646c6f68 	.word	0x646c6f68
  404c90:	6625203a 	.word	0x6625203a
  404c94:	00000a0d 	.word	0x00000a0d
  404c98:	5f737064 	.word	0x5f737064
  404c9c:	5f726570 	.word	0x5f726570
  404ca0:	69676964 	.word	0x69676964
  404ca4:	25203a74 	.word	0x25203a74
  404ca8:	000a0d66 	.word	0x000a0d66
  404cac:	676e6172 	.word	0x676e6172
  404cb0:	65705f65 	.word	0x65705f65
  404cb4:	69645f72 	.word	0x69645f72
  404cb8:	3a746967 	.word	0x3a746967
  404cbc:	0d662520 	.word	0x0d662520
  404cc0:	0000000a 	.word	0x0000000a
  404cc4:	6f746f6d 	.word	0x6f746f6d
  404cc8:	6e695f72 	.word	0x6e695f72
  404ccc:	0a0d7469 	.word	0x0a0d7469
  404cd0:	00000000 	.word	0x00000000
  404cd4:	6f746f6d 	.word	0x6f746f6d
  404cd8:	756f5f72 	.word	0x756f5f72
  404cdc:	74757074 	.word	0x74757074
  404ce0:	6425203a 	.word	0x6425203a
  404ce4:	00000a0d 	.word	0x00000a0d
  404ce8:	00000001 	.word	0x00000001
  404cec:	00000002 	.word	0x00000002
  404cf0:	00000004 	.word	0x00000004
  404cf4:	00000008 	.word	0x00000008
  404cf8:	00000010 	.word	0x00000010
  404cfc:	00000020 	.word	0x00000020
  404d00:	00000040 	.word	0x00000040
  404d04:	00000080 	.word	0x00000080
  404d08:	00000100 	.word	0x00000100
  404d0c:	00000200 	.word	0x00000200
  404d10:	00000400 	.word	0x00000400

00404d14 <_global_impure_ptr>:
  404d14:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  404d24:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  404d34:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  404d44:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  404d54:	4e614e00 00000000                       .NaN....

00404d5c <__sf_fake_stdin>:
	...

00404d7c <__sf_fake_stdout>:
	...

00404d9c <__sf_fake_stderr>:
	...

00404dc0 <__mprec_tens>:
  404dc0:	00000000 3ff00000 00000000 40240000     .......?......$@
  404dd0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  404de0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  404df0:	00000000 412e8480 00000000 416312d0     .......A......cA
  404e00:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  404e10:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  404e20:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  404e30:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  404e40:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  404e50:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  404e60:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  404e70:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  404e80:	79d99db4 44ea7843                       ...yCx.D

00404e88 <__mprec_bigtens>:
  404e88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  404e98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  404ea8:	7f73bf3c 75154fdd                       <.s..O.u

00404eb0 <p05.6097>:
  404eb0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  404ec0:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  404ed0:	5849534f 00002e00                                OSIX...

00404ed7 <_ctype_>:
  404ed7:	20202000 20202020 28282020 20282828     .         ((((( 
  404ee7:	20202020 20202020 20202020 20202020                     
  404ef7:	10108820 10101010 10101010 10101010      ...............
  404f07:	04040410 04040404 10040404 10101010     ................
  404f17:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404f27:	01010101 01010101 01010101 10101010     ................
  404f37:	42421010 42424242 02020202 02020202     ..BBBBBB........
  404f47:	02020202 02020202 02020202 10101010     ................
  404f57:	00000020 00000000 00000000 00000000      ...............
	...

00404fd8 <_init>:
  404fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fda:	bf00      	nop
  404fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404fde:	bc08      	pop	{r3}
  404fe0:	469e      	mov	lr, r3
  404fe2:	4770      	bx	lr

00404fe4 <__init_array_start>:
  404fe4:	004000f1 	.word	0x004000f1

00404fe8 <_fini>:
  404fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fea:	bf00      	nop
  404fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404fee:	bc08      	pop	{r3}
  404ff0:	469e      	mov	lr, r3
  404ff2:	4770      	bx	lr
  404ff4:	0000      	movs	r0, r0
	...

00404ff8 <__portable_delay_cycles_veneer>:
  404ff8:	f85f f000 	ldr.w	pc, [pc]	; 404ffc <__portable_delay_cycles_veneer+0x4>
  404ffc:	20000001 	.word	0x20000001

00405000 <__fini_array_start>:
  405000:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 4d5c 0040 4d7c 0040 4d9c 0040     ....\M@.|M@..M@.
	...

20000070 <_impure_ptr>:
20000070:	0010 2000                                   ... 

20000074 <__global_locale>:
20000074:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000094:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000114:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000134:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000154:	41c9 0040 417d 0040 0000 0000 4ed7 0040     .A@.}A@......N@.
20000164:	4ed5 0040 4ec1 0040 4ec1 0040 4ec1 0040     .N@..N@..N@..N@.
20000174:	4ec1 0040 4ec1 0040 4ec1 0040 4ec1 0040     .N@..N@..N@..N@.
20000184:	4ec1 0040 4ec1 0040 ffff ffff ffff ffff     .N@..N@.........
20000194:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001bc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
