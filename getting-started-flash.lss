
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000581c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  0040581c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000c0  200001e4  00405a00  000201e4  2**2
                  ALLOC
  3 .stack        00003004  200002a4  00405ac0  000201e4  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000c3f6  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022a0  00000000  00000000  0002c672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004905  00000000  00000000  0002e912  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b68  00000000  00000000  00033217  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a88  00000000  00000000  00033d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014cad  00000000  00000000  00034807  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c65d  00000000  00000000  000494b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00054264  00000000  00000000  00055b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027a4  00000000  00000000  000a9d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200032a8 	.word	0x200032a8
  400004:	00401191 	.word	0x00401191
  400008:	0040118d 	.word	0x0040118d
  40000c:	0040118d 	.word	0x0040118d
  400010:	0040118d 	.word	0x0040118d
  400014:	0040118d 	.word	0x0040118d
  400018:	0040118d 	.word	0x0040118d
	...
  40002c:	0040118d 	.word	0x0040118d
  400030:	0040118d 	.word	0x0040118d
  400034:	00000000 	.word	0x00000000
  400038:	0040118d 	.word	0x0040118d
  40003c:	0040118d 	.word	0x0040118d
  400040:	0040118d 	.word	0x0040118d
  400044:	0040118d 	.word	0x0040118d
  400048:	0040118d 	.word	0x0040118d
  40004c:	0040118d 	.word	0x0040118d
  400050:	0040118d 	.word	0x0040118d
  400054:	0040118d 	.word	0x0040118d
  400058:	0040118d 	.word	0x0040118d
  40005c:	0040118d 	.word	0x0040118d
  400060:	0040118d 	.word	0x0040118d
  400064:	0040118d 	.word	0x0040118d
  400068:	00000000 	.word	0x00000000
  40006c:	00400f8d 	.word	0x00400f8d
  400070:	00400f9d 	.word	0x00400f9d
  400074:	00400fad 	.word	0x00400fad
  400078:	0040118d 	.word	0x0040118d
  40007c:	0040118d 	.word	0x0040118d
	...
  400088:	0040118d 	.word	0x0040118d
  40008c:	0040118d 	.word	0x0040118d
  400090:	0040118d 	.word	0x0040118d
  400094:	0040118d 	.word	0x0040118d
  400098:	0040118d 	.word	0x0040118d
  40009c:	0040118d 	.word	0x0040118d
  4000a0:	0040118d 	.word	0x0040118d
  4000a4:	0040118d 	.word	0x0040118d
  4000a8:	0040118d 	.word	0x0040118d
  4000ac:	0040118d 	.word	0x0040118d
  4000b0:	0040118d 	.word	0x0040118d
  4000b4:	0040118d 	.word	0x0040118d
  4000b8:	0040118d 	.word	0x0040118d
  4000bc:	0040118d 	.word	0x0040118d
  4000c0:	0040118d 	.word	0x0040118d
  4000c4:	0040118d 	.word	0x0040118d
  4000c8:	0040118d 	.word	0x0040118d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e4 	.word	0x200001e4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040581c 	.word	0x0040581c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001e8 	.word	0x200001e8
  40011c:	0040581c 	.word	0x0040581c
  400120:	0040581c 	.word	0x0040581c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 f90e 	bl	40134c <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f000 ff76 	bl	401024 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f000 ff9e 	bl	401078 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f000 ffa2 	bl	401088 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f000 ffa5 	bl	401098 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f000 ff32 	bl	400fbc <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f001 f86e 	bl	401238 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f001 f8f5 	bl	40134c <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000298 	.word	0x20000298
  4001a8:	20000290 	.word	0x20000290

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	20000294 	.word	0x20000294
  4001f8:	20000298 	.word	0x20000298

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f000 ff9a 	bl	40114c <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f000 ff8f 	bl	40114c <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f000 ff98 	bl	401174 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f000 ff8b 	bl	401174 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f000 ff56 	bl	40113c <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f000 ff4a 	bl	40113c <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f000 ff50 	bl	401160 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f000 ff44 	bl	401160 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000
  4002f4:	00000000 	.word	0x00000000

004002f8 <main>:
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002fc:	b08f      	sub	sp, #60	; 0x3c
    sysclk_init();
  4002fe:	f7ff ff13 	bl	400128 <sysclk_init>
    board_init();
  400302:	f000 faf5 	bl	4008f0 <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400306:	2013      	movs	r0, #19
  400308:	f000 fece 	bl	4010a8 <pmc_enable_periph_clk>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40030c:	2009      	movs	r0, #9
  40030e:	f000 fecb 	bl	4010a8 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400312:	4c81      	ldr	r4, [pc, #516]	; (400518 <main+0x220>)
  400314:	4b81      	ldr	r3, [pc, #516]	; (40051c <main+0x224>)
  400316:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400318:	4a81      	ldr	r2, [pc, #516]	; (400520 <main+0x228>)
  40031a:	4b82      	ldr	r3, [pc, #520]	; (400524 <main+0x22c>)
  40031c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40031e:	4a82      	ldr	r2, [pc, #520]	; (400528 <main+0x230>)
  400320:	4b82      	ldr	r3, [pc, #520]	; (40052c <main+0x234>)
  400322:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400324:	4b82      	ldr	r3, [pc, #520]	; (400530 <main+0x238>)
  400326:	9308      	str	r3, [sp, #32]
	uart_settings.ul_baudrate = opt->baudrate;
  400328:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40032c:	9309      	str	r3, [sp, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
  40032e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400332:	930a      	str	r3, [sp, #40]	; 0x28
  400334:	2009      	movs	r0, #9
  400336:	f000 feb7 	bl	4010a8 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40033a:	a908      	add	r1, sp, #32
  40033c:	4620      	mov	r0, r4
  40033e:	f000 fee1 	bl	401104 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400342:	4c7c      	ldr	r4, [pc, #496]	; (400534 <main+0x23c>)
  400344:	6823      	ldr	r3, [r4, #0]
  400346:	2100      	movs	r1, #0
  400348:	6898      	ldr	r0, [r3, #8]
  40034a:	f002 f91f 	bl	40258c <setbuf>
	setbuf(stdin, NULL);
  40034e:	6823      	ldr	r3, [r4, #0]
  400350:	2100      	movs	r1, #0
  400352:	6858      	ldr	r0, [r3, #4]
  400354:	f002 f91a 	bl	40258c <setbuf>

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  400358:	4877      	ldr	r0, [pc, #476]	; (400538 <main+0x240>)
  40035a:	f002 f90f 	bl	40257c <puts>
  40035e:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        puts(".");
  400360:	4e76      	ldr	r6, [pc, #472]	; (40053c <main+0x244>)
        delay_ms(250);
  400362:	4d77      	ldr	r5, [pc, #476]	; (400540 <main+0x248>)

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        puts(".");
  400364:	4630      	mov	r0, r6
  400366:	f002 f909 	bl	40257c <puts>
        delay_ms(250);
  40036a:	4628      	mov	r0, r5
  40036c:	f005 fa50 	bl	405810 <__portable_delay_cycles_veneer>
    pmc_enable_periph_clk(IMU_TWI_ID);

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  400370:	3c01      	subs	r4, #1
  400372:	d1f7      	bne.n	400364 <main+0x6c>
        puts(".");
        delay_ms(250);
    }
    puts("\r\n");
  400374:	4873      	ldr	r0, [pc, #460]	; (400544 <main+0x24c>)
  400376:	f002 f901 	bl	40257c <puts>

    imu_init();
  40037a:	f000 f97d 	bl	400678 <imu_init>
    imu_probe();
  40037e:	f000 f99f 	bl	4006c0 <imu_probe>
    int16_t ax, ay, az;
    int16_t gx, gy, gz;
    // t_fp_vector gyro;
    // t_fp_vector accel;

    if (imu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2)) {
  400382:	2100      	movs	r1, #0
  400384:	4608      	mov	r0, r1
  400386:	f000 f9f5 	bl	400774 <imu_begin>
  40038a:	2800      	cmp	r0, #0
  40038c:	f000 80ac 	beq.w	4004e8 <main+0x1f0>
        imu_log_settings();
  400390:	f000 fa5a 	bl	400848 <imu_log_settings>
            float gyro_z = (float)gz;
            float accel_x = (float)ax;
            float accel_y = (float)ay;
            float accel_z = (float)az;

            gyro_x = ((float) gx)/131*M_PI/180.0f;
  400394:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 400560 <main+0x268>
            // gyro.z_axis = gyro.z_axis/131*M_PI/180.0f;

            // printf("gyro x/y/z: %d %d %d\r\n", gyro.x_axis, gyro.y_axis, gyro.z_axis);
            // delay_ms(100);

            imu_read_rotation(&gx, &gy, &gz);
  400398:	aa0b      	add	r2, sp, #44	; 0x2c
  40039a:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
  40039e:	a80c      	add	r0, sp, #48	; 0x30
  4003a0:	f000 fa06 	bl	4007b0 <imu_read_rotation>
            imu_read_acceleration(&ax, &ay, &az);
  4003a4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
  4003a8:	a90d      	add	r1, sp, #52	; 0x34
  4003aa:	f10d 0036 	add.w	r0, sp, #54	; 0x36
  4003ae:	f000 fa25 	bl	4007fc <imu_read_acceleration>
            float gyro_z = (float)gz;
            float accel_x = (float)ax;
            float accel_y = (float)ay;
            float accel_z = (float)az;

            gyro_x = ((float) gx)/131*M_PI/180.0f;
  4003b2:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
  4003b6:	f004 fe33 	bl	405020 <__aeabi_i2f>
  4003ba:	4651      	mov	r1, sl
  4003bc:	f004 ff38 	bl	405230 <__aeabi_fdiv>
  4003c0:	f004 f9f8 	bl	4047b4 <__aeabi_f2d>
  4003c4:	a352      	add	r3, pc, #328	; (adr r3, 400510 <main+0x218>)
  4003c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003ca:	f004 fa47 	bl	40485c <__aeabi_dmul>
  4003ce:	2200      	movs	r2, #0
  4003d0:	4b5d      	ldr	r3, [pc, #372]	; (400548 <main+0x250>)
  4003d2:	f004 fb6d 	bl	404ab0 <__aeabi_ddiv>
  4003d6:	f004 fd19 	bl	404e0c <__aeabi_d2f>
  4003da:	4683      	mov	fp, r0
            gyro_y = ((float) gy)/131*M_PI/180.0f;
  4003dc:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
  4003e0:	f004 fe1e 	bl	405020 <__aeabi_i2f>
  4003e4:	4651      	mov	r1, sl
  4003e6:	f004 ff23 	bl	405230 <__aeabi_fdiv>
  4003ea:	f004 f9e3 	bl	4047b4 <__aeabi_f2d>
  4003ee:	a348      	add	r3, pc, #288	; (adr r3, 400510 <main+0x218>)
  4003f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003f4:	f004 fa32 	bl	40485c <__aeabi_dmul>
  4003f8:	2200      	movs	r2, #0
  4003fa:	4b53      	ldr	r3, [pc, #332]	; (400548 <main+0x250>)
  4003fc:	f004 fb58 	bl	404ab0 <__aeabi_ddiv>
  400400:	f004 fd04 	bl	404e0c <__aeabi_d2f>
  400404:	9004      	str	r0, [sp, #16]
            gyro_z = ((float) gz)/131*M_PI/180.0f;
  400406:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
  40040a:	f004 fe09 	bl	405020 <__aeabi_i2f>
  40040e:	4651      	mov	r1, sl
  400410:	f004 ff0e 	bl	405230 <__aeabi_fdiv>
  400414:	f004 f9ce 	bl	4047b4 <__aeabi_f2d>
  400418:	a33d      	add	r3, pc, #244	; (adr r3, 400510 <main+0x218>)
  40041a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40041e:	f004 fa1d 	bl	40485c <__aeabi_dmul>
  400422:	2200      	movs	r2, #0
  400424:	4b48      	ldr	r3, [pc, #288]	; (400548 <main+0x250>)
  400426:	f004 fb43 	bl	404ab0 <__aeabi_ddiv>
  40042a:	f004 fcef 	bl	404e0c <__aeabi_d2f>
  40042e:	9005      	str	r0, [sp, #20]

            float accel_angle_y = atan2(accel_x, sqrt( pow(accel_y, 2) + pow(accel_z, 2))) * 180.0f / M_PI;
  400430:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
  400434:	f004 fdf4 	bl	405020 <__aeabi_i2f>
  400438:	f004 f9bc 	bl	4047b4 <__aeabi_f2d>
  40043c:	4604      	mov	r4, r0
  40043e:	460d      	mov	r5, r1
  400440:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
  400444:	f004 fdec 	bl	405020 <__aeabi_i2f>
  400448:	f004 f9b4 	bl	4047b4 <__aeabi_f2d>
  40044c:	4680      	mov	r8, r0
  40044e:	4689      	mov	r9, r1
  400450:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
  400454:	f004 fde4 	bl	405020 <__aeabi_i2f>
  400458:	f004 f9ac 	bl	4047b4 <__aeabi_f2d>
  40045c:	4602      	mov	r2, r0
  40045e:	460b      	mov	r3, r1
  400460:	f004 f9fc 	bl	40485c <__aeabi_dmul>
  400464:	4606      	mov	r6, r0
  400466:	460f      	mov	r7, r1
  400468:	4642      	mov	r2, r8
  40046a:	464b      	mov	r3, r9
  40046c:	4640      	mov	r0, r8
  40046e:	4649      	mov	r1, r9
  400470:	f004 f9f4 	bl	40485c <__aeabi_dmul>
  400474:	e9cd 0106 	strd	r0, r1, [sp, #24]
  400478:	4632      	mov	r2, r6
  40047a:	463b      	mov	r3, r7
  40047c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400480:	f004 f83a 	bl	4044f8 <__adddf3>
  400484:	f000 ffd6 	bl	401434 <sqrt>
  400488:	4602      	mov	r2, r0
  40048a:	460b      	mov	r3, r1
  40048c:	4620      	mov	r0, r4
  40048e:	4629      	mov	r1, r5
  400490:	f000 ffce 	bl	401430 <atan2>
            float accel_angle_x = atan2(accel_y, sqrt( pow(accel_x, 2) + pow(accel_z, 2))) * 180.0f / M_PI;
  400494:	4622      	mov	r2, r4
  400496:	462b      	mov	r3, r5
  400498:	4620      	mov	r0, r4
  40049a:	4629      	mov	r1, r5
  40049c:	f004 f9de 	bl	40485c <__aeabi_dmul>
  4004a0:	4632      	mov	r2, r6
  4004a2:	463b      	mov	r3, r7
  4004a4:	f004 f828 	bl	4044f8 <__adddf3>
  4004a8:	f000 ffc4 	bl	401434 <sqrt>
  4004ac:	4602      	mov	r2, r0
  4004ae:	460b      	mov	r3, r1
  4004b0:	4640      	mov	r0, r8
  4004b2:	4649      	mov	r1, r9
  4004b4:	f000 ffbc 	bl	401430 <atan2>
            float accel_angle_z = 0;
    
            printf("gyro x/y/z: %d %d %d\r\n", gyro_x, gyro_y, gyro_z);
  4004b8:	4658      	mov	r0, fp
  4004ba:	f004 f97b 	bl	4047b4 <__aeabi_f2d>
  4004be:	4604      	mov	r4, r0
  4004c0:	460d      	mov	r5, r1
  4004c2:	9805      	ldr	r0, [sp, #20]
  4004c4:	f004 f976 	bl	4047b4 <__aeabi_f2d>
  4004c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4004cc:	9804      	ldr	r0, [sp, #16]
  4004ce:	f004 f971 	bl	4047b4 <__aeabi_f2d>
  4004d2:	e9cd 0100 	strd	r0, r1, [sp]
  4004d6:	4622      	mov	r2, r4
  4004d8:	462b      	mov	r3, r5
  4004da:	481c      	ldr	r0, [pc, #112]	; (40054c <main+0x254>)
  4004dc:	f001 ffdc 	bl	402498 <iprintf>
            delay_ms(100);
  4004e0:	481b      	ldr	r0, [pc, #108]	; (400550 <main+0x258>)
  4004e2:	f005 f995 	bl	405810 <__portable_delay_cycles_veneer>
  4004e6:	e757      	b.n	400398 <main+0xa0>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4004e8:	4c1a      	ldr	r4, [pc, #104]	; (400554 <main+0x25c>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4004ea:	4d1b      	ldr	r5, [pc, #108]	; (400558 <main+0x260>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  4004ec:	f44f 0700 	mov.w	r7, #8388608	; 0x800000

    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  4004f0:	4e1a      	ldr	r6, [pc, #104]	; (40055c <main+0x264>)
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4004f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    


    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  4004f4:	f013 0f04 	tst.w	r3, #4
  4004f8:	d1fb      	bne.n	4004f2 <main+0x1fa>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  4004fa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4004fc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  400500:	bf14      	ite	ne
  400502:	636f      	strne	r7, [r5, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400504:	632f      	streq	r7, [r5, #48]	; 0x30
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  400506:	4630      	mov	r0, r6
  400508:	f005 f982 	bl	405810 <__portable_delay_cycles_veneer>
  40050c:	e7f1      	b.n	4004f2 <main+0x1fa>
  40050e:	bf00      	nop
  400510:	54442d18 	.word	0x54442d18
  400514:	400921fb 	.word	0x400921fb
  400518:	400e0800 	.word	0x400e0800
  40051c:	20000298 	.word	0x20000298
  400520:	0040027d 	.word	0x0040027d
  400524:	20000294 	.word	0x20000294
  400528:	004001fd 	.word	0x004001fd
  40052c:	20000290 	.word	0x20000290
  400530:	07270e00 	.word	0x07270e00
  400534:	20000074 	.word	0x20000074
  400538:	00405368 	.word	0x00405368
  40053c:	00405384 	.word	0x00405384
  400540:	0020b28a 	.word	0x0020b28a
  400544:	00405380 	.word	0x00405380
  400548:	40668000 	.word	0x40668000
  40054c:	00405388 	.word	0x00405388
  400550:	000d1437 	.word	0x000d1437
  400554:	400e0e00 	.word	0x400e0e00
  400558:	400e1200 	.word	0x400e1200
  40055c:	00416513 	.word	0x00416513
  400560:	43030000 	.word	0x43030000

00400564 <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  400564:	b500      	push	{lr}
  400566:	b089      	sub	sp, #36	; 0x24
  400568:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  40056c:	2368      	movs	r3, #104	; 0x68
  40056e:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  400572:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  400576:	2301      	movs	r3, #1
  400578:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  40057a:	f10d 0207 	add.w	r2, sp, #7
  40057e:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  400580:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  400582:	a903      	add	r1, sp, #12
  400584:	4806      	ldr	r0, [pc, #24]	; (4005a0 <write_register8+0x3c>)
  400586:	f000 fb0d 	bl	400ba4 <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  40058a:	b910      	cbnz	r0, 400592 <write_register8+0x2e>
        puts("write_register: success\r\n");
  40058c:	4805      	ldr	r0, [pc, #20]	; (4005a4 <write_register8+0x40>)
  40058e:	f001 fff5 	bl	40257c <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  400592:	4805      	ldr	r0, [pc, #20]	; (4005a8 <write_register8+0x44>)
  400594:	f005 f93c 	bl	405810 <__portable_delay_cycles_veneer>
}
  400598:	b009      	add	sp, #36	; 0x24
  40059a:	f85d fb04 	ldr.w	pc, [sp], #4
  40059e:	bf00      	nop
  4005a0:	40018000 	.word	0x40018000
  4005a4:	004053a0 	.word	0x004053a0
  4005a8:	00014ed3 	.word	0x00014ed3

004005ac <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  4005ac:	b510      	push	{r4, lr}
  4005ae:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(imu_buffer, 0, sizeof(imu_buffer));
  4005b0:	4b0e      	ldr	r3, [pc, #56]	; (4005ec <read_register8+0x40>)
  4005b2:	2200      	movs	r2, #0
  4005b4:	601a      	str	r2, [r3, #0]
  4005b6:	605a      	str	r2, [r3, #4]
  4005b8:	609a      	str	r2, [r3, #8]
  4005ba:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4005bc:	2268      	movs	r2, #104	; 0x68
  4005be:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  4005c2:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4005c6:	2201      	movs	r2, #1
  4005c8:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &imu_buffer;
  4005ca:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4005cc:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4005ce:	a901      	add	r1, sp, #4
  4005d0:	4807      	ldr	r0, [pc, #28]	; (4005f0 <read_register8+0x44>)
  4005d2:	f000 fa7f 	bl	400ad4 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4005d6:	b910      	cbnz	r0, 4005de <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = imu_buffer[0];
  4005d8:	4b04      	ldr	r3, [pc, #16]	; (4005ec <read_register8+0x40>)
  4005da:	781c      	ldrb	r4, [r3, #0]
  4005dc:	e000      	b.n	4005e0 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  4005de:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = imu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  4005e0:	4804      	ldr	r0, [pc, #16]	; (4005f4 <read_register8+0x48>)
  4005e2:	f005 f915 	bl	405810 <__portable_delay_cycles_veneer>

    return value;
}
  4005e6:	4620      	mov	r0, r4
  4005e8:	b006      	add	sp, #24
  4005ea:	bd10      	pop	{r4, pc}
  4005ec:	20000200 	.word	0x20000200
  4005f0:	40018000 	.word	0x40018000
  4005f4:	00014ed3 	.word	0x00014ed3

004005f8 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  4005f8:	b510      	push	{r4, lr}
  4005fa:	b086      	sub	sp, #24
  4005fc:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(imu_buffer, 0, sizeof(imu_buffer));
  4005fe:	4b0c      	ldr	r3, [pc, #48]	; (400630 <read_bytes+0x38>)
  400600:	2100      	movs	r1, #0
  400602:	6019      	str	r1, [r3, #0]
  400604:	6059      	str	r1, [r3, #4]
  400606:	6099      	str	r1, [r3, #8]
  400608:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  40060a:	2368      	movs	r3, #104	; 0x68
  40060c:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  400610:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400614:	2301      	movs	r3, #1
  400616:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  400618:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  40061a:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  40061c:	a901      	add	r1, sp, #4
  40061e:	4805      	ldr	r0, [pc, #20]	; (400634 <read_bytes+0x3c>)
  400620:	f000 fa58 	bl	400ad4 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = imu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400624:	4804      	ldr	r0, [pc, #16]	; (400638 <read_bytes+0x40>)
  400626:	f005 f8f3 	bl	405810 <__portable_delay_cycles_veneer>

    return length;
}
  40062a:	b2e0      	uxtb	r0, r4
  40062c:	b006      	add	sp, #24
  40062e:	bd10      	pop	{r4, pc}
  400630:	20000200 	.word	0x20000200
  400634:	40018000 	.word	0x40018000
  400638:	00014ed3 	.word	0x00014ed3

0040063c <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  40063c:	b570      	push	{r4, r5, r6, lr}
  40063e:	4604      	mov	r4, r0
  400640:	460d      	mov	r5, r1
  400642:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400644:	f7ff ffb2 	bl	4005ac <read_register8>

    if (state) {
  400648:	b126      	cbz	r6, 400654 <write_register_bit+0x18>
        value |= (1 << pos);
  40064a:	2101      	movs	r1, #1
  40064c:	40a9      	lsls	r1, r5
  40064e:	4301      	orrs	r1, r0
  400650:	b2c9      	uxtb	r1, r1
  400652:	e004      	b.n	40065e <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400654:	2101      	movs	r1, #1
  400656:	40a9      	lsls	r1, r5
  400658:	ea20 0101 	bic.w	r1, r0, r1
  40065c:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  40065e:	4620      	mov	r0, r4
  400660:	f7ff ff80 	bl	400564 <write_register8>
  400664:	bd70      	pop	{r4, r5, r6, pc}
  400666:	bf00      	nop

00400668 <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  400668:	b510      	push	{r4, lr}
  40066a:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  40066c:	f7ff ff9e 	bl	4005ac <read_register8>
    return ((value >> pos) & 1);
  400670:	4120      	asrs	r0, r4
}
  400672:	f000 0001 	and.w	r0, r0, #1
  400676:	bd10      	pop	{r4, pc}

00400678 <imu_init>:

void imu_init(void)
{
  400678:	b500      	push	{lr}
  40067a:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  40067c:	4b0a      	ldr	r3, [pc, #40]	; (4006a8 <imu_init+0x30>)
  40067e:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400680:	4b0a      	ldr	r3, [pc, #40]	; (4006ac <imu_init+0x34>)
  400682:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400684:	a901      	add	r1, sp, #4
  400686:	480a      	ldr	r0, [pc, #40]	; (4006b0 <imu_init+0x38>)
  400688:	f000 f9f4 	bl	400a74 <twi_master_init>
  40068c:	b118      	cbz	r0, 400696 <imu_init+0x1e>
        puts("twi_master_init: failed\r\n");
  40068e:	4809      	ldr	r0, [pc, #36]	; (4006b4 <imu_init+0x3c>)
  400690:	f001 ff74 	bl	40257c <puts>
  400694:	e002      	b.n	40069c <imu_init+0x24>
        
    } else {
        puts("twi_master_init: success\r\n");
  400696:	4808      	ldr	r0, [pc, #32]	; (4006b8 <imu_init+0x40>)
  400698:	f001 ff70 	bl	40257c <puts>
    }
    // Give I2C time to settle
    delay_ms(TWI_WAIT_TIME);
  40069c:	4807      	ldr	r0, [pc, #28]	; (4006bc <imu_init+0x44>)
  40069e:	f005 f8b7 	bl	405810 <__portable_delay_cycles_veneer>
}
  4006a2:	b005      	add	sp, #20
  4006a4:	f85d fb04 	ldr.w	pc, [sp], #4
  4006a8:	07270e00 	.word	0x07270e00
  4006ac:	00061a80 	.word	0x00061a80
  4006b0:	40018000 	.word	0x40018000
  4006b4:	004053bc 	.word	0x004053bc
  4006b8:	004053d8 	.word	0x004053d8
  4006bc:	00014ed3 	.word	0x00014ed3

004006c0 <imu_probe>:

void imu_probe(void)
{
  4006c0:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  4006c2:	2168      	movs	r1, #104	; 0x68
  4006c4:	4805      	ldr	r0, [pc, #20]	; (4006dc <imu_probe+0x1c>)
  4006c6:	f000 faaf 	bl	400c28 <twi_probe>
  4006ca:	b118      	cbz	r0, 4006d4 <imu_probe+0x14>
        puts("twi_probe: failed\r\n");
  4006cc:	4804      	ldr	r0, [pc, #16]	; (4006e0 <imu_probe+0x20>)
  4006ce:	f001 ff55 	bl	40257c <puts>
  4006d2:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  4006d4:	4803      	ldr	r0, [pc, #12]	; (4006e4 <imu_probe+0x24>)
  4006d6:	f001 ff51 	bl	40257c <puts>
  4006da:	bd08      	pop	{r3, pc}
  4006dc:	40018000 	.word	0x40018000
  4006e0:	004053f4 	.word	0x004053f4
  4006e4:	00405408 	.word	0x00405408

004006e8 <imu_who_am_i>:

    return true;
}

uint8_t imu_who_am_i(void)
{
  4006e8:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  4006ea:	2075      	movs	r0, #117	; 0x75
  4006ec:	f7ff ff5e 	bl	4005ac <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  4006f0:	bd08      	pop	{r3, pc}
  4006f2:	bf00      	nop

004006f4 <imu_set_clock_source>:
}



void imu_set_clock_source(uint8_t source)
{
  4006f4:	b510      	push	{r4, lr}
  4006f6:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  4006f8:	206b      	movs	r0, #107	; 0x6b
  4006fa:	f7ff ff57 	bl	4005ac <read_register8>
    value &= 0b11111000; // mask
  4006fe:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  400702:	4321      	orrs	r1, r4
  400704:	206b      	movs	r0, #107	; 0x6b
  400706:	f7ff ff2d 	bl	400564 <write_register8>
  40070a:	bd10      	pop	{r4, pc}

0040070c <imu_get_clock_source>:
}

uint8_t imu_get_clock_source(void)
{
  40070c:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  40070e:	206b      	movs	r0, #107	; 0x6b
  400710:	f7ff ff4c 	bl	4005ac <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400714:	f000 0007 	and.w	r0, r0, #7
  400718:	bd08      	pop	{r3, pc}
  40071a:	bf00      	nop

0040071c <imu_set_gyro_scale>:

void imu_set_gyro_scale(uint8_t scale)
{
  40071c:	b510      	push	{r4, lr}
  40071e:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  400720:	201b      	movs	r0, #27
  400722:	f7ff ff43 	bl	4005ac <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400726:	f020 0018 	bic.w	r0, r0, #24
  40072a:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  40072e:	b2c9      	uxtb	r1, r1
  400730:	201b      	movs	r0, #27
  400732:	f7ff ff17 	bl	400564 <write_register8>
  400736:	bd10      	pop	{r4, pc}

00400738 <imu_get_gyro_scale>:
}

uint8_t imu_get_gyro_scale(void)
{
  400738:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  40073a:	201b      	movs	r0, #27
  40073c:	f7ff ff36 	bl	4005ac <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  400740:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  400744:	bd08      	pop	{r3, pc}
  400746:	bf00      	nop

00400748 <imu_set_accel_range>:

void imu_set_accel_range(uint8_t range)
{
  400748:	b510      	push	{r4, lr}
  40074a:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  40074c:	201c      	movs	r0, #28
  40074e:	f7ff ff2d 	bl	4005ac <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400752:	f020 0018 	bic.w	r0, r0, #24
  400756:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  40075a:	b2c9      	uxtb	r1, r1
  40075c:	201c      	movs	r0, #28
  40075e:	f7ff ff01 	bl	400564 <write_register8>
  400762:	bd10      	pop	{r4, pc}

00400764 <imu_set_sleep_enabled>:

    return (uint8_t)value;
}

void imu_set_sleep_enabled(bool state)
{
  400764:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  400766:	4602      	mov	r2, r0
  400768:	2106      	movs	r1, #6
  40076a:	206b      	movs	r0, #107	; 0x6b
  40076c:	f7ff ff66 	bl	40063c <write_register_bit>
  400770:	bd08      	pop	{r3, pc}
  400772:	bf00      	nop

00400774 <imu_begin>:
        puts("twi_probe: success\r\n");
    }
}

bool imu_begin(uint8_t scale, uint8_t range)
{
  400774:	b538      	push	{r3, r4, r5, lr}
  400776:	4605      	mov	r5, r0
  400778:	460c      	mov	r4, r1
    if (imu_who_am_i() != 0x68) {
  40077a:	f7ff ffb5 	bl	4006e8 <imu_who_am_i>
  40077e:	2868      	cmp	r0, #104	; 0x68
  400780:	d10d      	bne.n	40079e <imu_begin+0x2a>
        return false;
    }
    imu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400782:	2001      	movs	r0, #1
  400784:	f7ff ffb6 	bl	4006f4 <imu_set_clock_source>
    imu_set_gyro_scale(scale);
  400788:	4628      	mov	r0, r5
  40078a:	f7ff ffc7 	bl	40071c <imu_set_gyro_scale>
    imu_set_accel_range(range);
  40078e:	4620      	mov	r0, r4
  400790:	f7ff ffda 	bl	400748 <imu_set_accel_range>
    imu_set_sleep_enabled(false);
  400794:	2000      	movs	r0, #0
  400796:	f7ff ffe5 	bl	400764 <imu_set_sleep_enabled>

    return true;
  40079a:	2001      	movs	r0, #1
  40079c:	bd38      	pop	{r3, r4, r5, pc}
}

bool imu_begin(uint8_t scale, uint8_t range)
{
    if (imu_who_am_i() != 0x68) {
        return false;
  40079e:	2000      	movs	r0, #0
    imu_set_gyro_scale(scale);
    imu_set_accel_range(range);
    imu_set_sleep_enabled(false);

    return true;
}
  4007a0:	bd38      	pop	{r3, r4, r5, pc}
  4007a2:	bf00      	nop

004007a4 <imu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool imu_get_sleep_enabled(void)
{
  4007a4:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  4007a6:	2106      	movs	r1, #6
  4007a8:	206b      	movs	r0, #107	; 0x6b
  4007aa:	f7ff ff5d 	bl	400668 <read_register_bit>
}
  4007ae:	bd08      	pop	{r3, pc}

004007b0 <imu_read_rotation>:
//     *vect->z_axis = (float) ((((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5]);

// }

void imu_read_rotation(int16_t *x, int16_t *y, int16_t *z)
{
  4007b0:	b570      	push	{r4, r5, r6, lr}
  4007b2:	b082      	sub	sp, #8
  4007b4:	4606      	mov	r6, r0
  4007b6:	460d      	mov	r5, r1
  4007b8:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  4007ba:	2300      	movs	r3, #0
  4007bc:	9300      	str	r3, [sp, #0]
  4007be:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  4007c2:	466a      	mov	r2, sp
  4007c4:	2106      	movs	r1, #6
  4007c6:	2043      	movs	r0, #67	; 0x43
  4007c8:	f7ff ff16 	bl	4005f8 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  4007cc:	f89d 2000 	ldrb.w	r2, [sp]
  4007d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
  4007d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007d8:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  4007da:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4007de:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4007e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007e6:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  4007e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4007ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4007f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007f4:	8023      	strh	r3, [r4, #0]

}
  4007f6:	b002      	add	sp, #8
  4007f8:	bd70      	pop	{r4, r5, r6, pc}
  4007fa:	bf00      	nop

004007fc <imu_read_acceleration>:

void imu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  4007fc:	b570      	push	{r4, r5, r6, lr}
  4007fe:	b082      	sub	sp, #8
  400800:	4606      	mov	r6, r0
  400802:	460d      	mov	r5, r1
  400804:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400806:	2300      	movs	r3, #0
  400808:	9300      	str	r3, [sp, #0]
  40080a:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  40080e:	466a      	mov	r2, sp
  400810:	2106      	movs	r1, #6
  400812:	203b      	movs	r0, #59	; 0x3b
  400814:	f7ff fef0 	bl	4005f8 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400818:	f89d 2000 	ldrb.w	r2, [sp]
  40081c:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400824:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400826:	f89d 2002 	ldrb.w	r2, [sp, #2]
  40082a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40082e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400832:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400834:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400838:	f89d 3005 	ldrb.w	r3, [sp, #5]
  40083c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400840:	8023      	strh	r3, [r4, #0]

}
  400842:	b002      	add	sp, #8
  400844:	bd70      	pop	{r4, r5, r6, pc}
  400846:	bf00      	nop

00400848 <imu_log_settings>:


void imu_log_settings(void)
{
  400848:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", imu_who_am_i());
  40084a:	f7ff ff4d 	bl	4006e8 <imu_who_am_i>
  40084e:	4601      	mov	r1, r0
  400850:	481b      	ldr	r0, [pc, #108]	; (4008c0 <imu_log_settings+0x78>)
  400852:	f001 fe21 	bl	402498 <iprintf>
    printf("Sleep Mode: %s\r\n", imu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400856:	f7ff ffa5 	bl	4007a4 <imu_get_sleep_enabled>
  40085a:	491a      	ldr	r1, [pc, #104]	; (4008c4 <imu_log_settings+0x7c>)
  40085c:	4a1a      	ldr	r2, [pc, #104]	; (4008c8 <imu_log_settings+0x80>)
  40085e:	2800      	cmp	r0, #0
  400860:	bf18      	it	ne
  400862:	4611      	movne	r1, r2
  400864:	4819      	ldr	r0, [pc, #100]	; (4008cc <imu_log_settings+0x84>)
  400866:	f001 fe17 	bl	402498 <iprintf>
    printf("Clock Source: ");
  40086a:	4819      	ldr	r0, [pc, #100]	; (4008d0 <imu_log_settings+0x88>)
  40086c:	f001 fe14 	bl	402498 <iprintf>
    switch (imu_get_clock_source()) {
  400870:	f7ff ff4c 	bl	40070c <imu_get_clock_source>
  400874:	b110      	cbz	r0, 40087c <imu_log_settings+0x34>
  400876:	2801      	cmp	r0, #1
  400878:	d004      	beq.n	400884 <imu_log_settings+0x3c>
  40087a:	e006      	b.n	40088a <imu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  40087c:	4815      	ldr	r0, [pc, #84]	; (4008d4 <imu_log_settings+0x8c>)
  40087e:	f001 fe0b 	bl	402498 <iprintf>
        break;
  400882:	e002      	b.n	40088a <imu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400884:	4814      	ldr	r0, [pc, #80]	; (4008d8 <imu_log_settings+0x90>)
  400886:	f001 fe07 	bl	402498 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  40088a:	4814      	ldr	r0, [pc, #80]	; (4008dc <imu_log_settings+0x94>)
  40088c:	f001 fe04 	bl	402498 <iprintf>
        switch (imu_get_gyro_scale()) {
  400890:	f7ff ff52 	bl	400738 <imu_get_gyro_scale>
  400894:	2803      	cmp	r0, #3
  400896:	d812      	bhi.n	4008be <imu_log_settings+0x76>
  400898:	e8df f000 	tbb	[pc, r0]
  40089c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  4008a0:	480f      	ldr	r0, [pc, #60]	; (4008e0 <imu_log_settings+0x98>)
  4008a2:	f001 fdf9 	bl	402498 <iprintf>
        break;
  4008a6:	bd08      	pop	{r3, pc}
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  4008a8:	480e      	ldr	r0, [pc, #56]	; (4008e4 <imu_log_settings+0x9c>)
  4008aa:	f001 fdf5 	bl	402498 <iprintf>
        break;
  4008ae:	bd08      	pop	{r3, pc}
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  4008b0:	480d      	ldr	r0, [pc, #52]	; (4008e8 <imu_log_settings+0xa0>)
  4008b2:	f001 fdf1 	bl	402498 <iprintf>
        break;
  4008b6:	bd08      	pop	{r3, pc}
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  4008b8:	480c      	ldr	r0, [pc, #48]	; (4008ec <imu_log_settings+0xa4>)
  4008ba:	f001 fded 	bl	402498 <iprintf>
  4008be:	bd08      	pop	{r3, pc}
  4008c0:	00405434 	.word	0x00405434
  4008c4:	00405428 	.word	0x00405428
  4008c8:	00405420 	.word	0x00405420
  4008cc:	00405444 	.word	0x00405444
  4008d0:	00405458 	.word	0x00405458
  4008d4:	00405468 	.word	0x00405468
  4008d8:	00405484 	.word	0x00405484
  4008dc:	004054ac 	.word	0x004054ac
  4008e0:	004054b8 	.word	0x004054b8
  4008e4:	004054c4 	.word	0x004054c4
  4008e8:	004054d0 	.word	0x004054d0
  4008ec:	004054dc 	.word	0x004054dc

004008f0 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4008f0:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4008f2:	482c      	ldr	r0, [pc, #176]	; (4009a4 <board_init+0xb4>)
  4008f4:	f000 fc02 	bl	4010fc <wdt_disable>
  4008f8:	200b      	movs	r0, #11
  4008fa:	f000 fbd5 	bl	4010a8 <pmc_enable_periph_clk>
  4008fe:	200c      	movs	r0, #12
  400900:	f000 fbd2 	bl	4010a8 <pmc_enable_periph_clk>
  400904:	200d      	movs	r0, #13
  400906:	f000 fbcf 	bl	4010a8 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40090a:	4b27      	ldr	r3, [pc, #156]	; (4009a8 <board_init+0xb8>)
  40090c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400910:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400912:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400914:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400918:	4c24      	ldr	r4, [pc, #144]	; (4009ac <board_init+0xbc>)
  40091a:	2504      	movs	r5, #4
  40091c:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40091e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400922:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400924:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400928:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40092a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40092c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400930:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400932:	f022 0204 	bic.w	r2, r2, #4
  400936:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400938:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40093a:	f022 0204 	bic.w	r2, r2, #4
  40093e:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400940:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400944:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400946:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400948:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40094c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400950:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400952:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400954:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400958:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40095c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40095e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400960:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400964:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400968:	210c      	movs	r1, #12
  40096a:	4811      	ldr	r0, [pc, #68]	; (4009b0 <board_init+0xc0>)
  40096c:	f000 fa76 	bl	400e5c <pio_configure_pin_group>
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400970:	4e10      	ldr	r6, [pc, #64]	; (4009b4 <board_init+0xc4>)
  400972:	4631      	mov	r1, r6
  400974:	2003      	movs	r0, #3
  400976:	f000 f9e5 	bl	400d44 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40097a:	4631      	mov	r1, r6
  40097c:	4628      	mov	r0, r5
  40097e:	f000 f9e1 	bl	400d44 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400982:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400984:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400988:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40098a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40098c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400990:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400992:	f023 0304 	bic.w	r3, r3, #4
  400996:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400998:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40099a:	f023 0304 	bic.w	r3, r3, #4
  40099e:	6763      	str	r3, [r4, #116]	; 0x74
  4009a0:	bd70      	pop	{r4, r5, r6, pc}
  4009a2:	bf00      	nop
  4009a4:	400e1450 	.word	0x400e1450
  4009a8:	400e1200 	.word	0x400e1200
  4009ac:	400e0e00 	.word	0x400e0e00
  4009b0:	400e1000 	.word	0x400e1000
  4009b4:	08000001 	.word	0x08000001

004009b8 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4009b8:	4b2b      	ldr	r3, [pc, #172]	; (400a68 <twi_set_speed+0xb0>)
  4009ba:	4299      	cmp	r1, r3
  4009bc:	d849      	bhi.n	400a52 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4009be:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4009c2:	4299      	cmp	r1, r3
  4009c4:	d92b      	bls.n	400a1e <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4009c6:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4009c8:	4c28      	ldr	r4, [pc, #160]	; (400a6c <twi_set_speed+0xb4>)
  4009ca:	fba4 3402 	umull	r3, r4, r4, r2
  4009ce:	0ba4      	lsrs	r4, r4, #14
  4009d0:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4009d2:	4b27      	ldr	r3, [pc, #156]	; (400a70 <twi_set_speed+0xb8>)
  4009d4:	440b      	add	r3, r1
  4009d6:	009b      	lsls	r3, r3, #2
  4009d8:	fbb2 f2f3 	udiv	r2, r2, r3
  4009dc:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4009de:	2cff      	cmp	r4, #255	; 0xff
  4009e0:	d939      	bls.n	400a56 <twi_set_speed+0x9e>
  4009e2:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4009e4:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4009e6:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4009e8:	2cff      	cmp	r4, #255	; 0xff
  4009ea:	d902      	bls.n	4009f2 <twi_set_speed+0x3a>
  4009ec:	2b07      	cmp	r3, #7
  4009ee:	d1f9      	bne.n	4009e4 <twi_set_speed+0x2c>
  4009f0:	e00a      	b.n	400a08 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4009f2:	2aff      	cmp	r2, #255	; 0xff
  4009f4:	d908      	bls.n	400a08 <twi_set_speed+0x50>
  4009f6:	2b06      	cmp	r3, #6
  4009f8:	d900      	bls.n	4009fc <twi_set_speed+0x44>
  4009fa:	e005      	b.n	400a08 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  4009fc:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4009fe:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400a00:	2aff      	cmp	r2, #255	; 0xff
  400a02:	d901      	bls.n	400a08 <twi_set_speed+0x50>
  400a04:	2b06      	cmp	r3, #6
  400a06:	d9f9      	bls.n	4009fc <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  400a08:	0212      	lsls	r2, r2, #8
  400a0a:	b292      	uxth	r2, r2
  400a0c:	041b      	lsls	r3, r3, #16
  400a0e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400a12:	431a      	orrs	r2, r3
  400a14:	b2e4      	uxtb	r4, r4
  400a16:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400a18:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400a1a:	2000      	movs	r0, #0
  400a1c:	e021      	b.n	400a62 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400a1e:	0049      	lsls	r1, r1, #1
  400a20:	fbb2 f2f1 	udiv	r2, r2, r1
  400a24:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400a26:	2aff      	cmp	r2, #255	; 0xff
  400a28:	d907      	bls.n	400a3a <twi_set_speed+0x82>
  400a2a:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  400a2c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  400a2e:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400a30:	2aff      	cmp	r2, #255	; 0xff
  400a32:	d903      	bls.n	400a3c <twi_set_speed+0x84>
  400a34:	2b07      	cmp	r3, #7
  400a36:	d1f9      	bne.n	400a2c <twi_set_speed+0x74>
  400a38:	e000      	b.n	400a3c <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400a3a:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400a3c:	0211      	lsls	r1, r2, #8
  400a3e:	b289      	uxth	r1, r1
  400a40:	041b      	lsls	r3, r3, #16
  400a42:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  400a46:	430b      	orrs	r3, r1
  400a48:	b2d2      	uxtb	r2, r2
  400a4a:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  400a4c:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400a4e:	2000      	movs	r0, #0
}
  400a50:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400a52:	2001      	movs	r0, #1
  400a54:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400a56:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400a58:	bf88      	it	hi
  400a5a:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400a5c:	d8ce      	bhi.n	4009fc <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  400a5e:	2300      	movs	r3, #0
  400a60:	e7d2      	b.n	400a08 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  400a62:	bc10      	pop	{r4}
  400a64:	4770      	bx	lr
  400a66:	bf00      	nop
  400a68:	00061a80 	.word	0x00061a80
  400a6c:	057619f1 	.word	0x057619f1
  400a70:	3ffd1200 	.word	0x3ffd1200

00400a74 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400a74:	b538      	push	{r3, r4, r5, lr}
  400a76:	4604      	mov	r4, r0
  400a78:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  400a7e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  400a80:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  400a82:	2380      	movs	r3, #128	; 0x80
  400a84:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400a86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400a88:	2308      	movs	r3, #8
  400a8a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400a8c:	2320      	movs	r3, #32
  400a8e:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  400a90:	2304      	movs	r3, #4
  400a92:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400a94:	680a      	ldr	r2, [r1, #0]
  400a96:	6849      	ldr	r1, [r1, #4]
  400a98:	f7ff ff8e 	bl	4009b8 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  400a9c:	2801      	cmp	r0, #1
  400a9e:	bf14      	ite	ne
  400aa0:	2000      	movne	r0, #0
  400aa2:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400aa4:	7a6b      	ldrb	r3, [r5, #9]
  400aa6:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400aa8:	bf04      	itt	eq
  400aaa:	2340      	moveq	r3, #64	; 0x40
  400aac:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  400aae:	bd38      	pop	{r3, r4, r5, pc}

00400ab0 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400ab0:	460a      	mov	r2, r1
  400ab2:	b159      	cbz	r1, 400acc <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  400ab4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  400ab6:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  400ab8:	bfc4      	itt	gt
  400aba:	7841      	ldrbgt	r1, [r0, #1]
  400abc:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  400ac0:	2a02      	cmp	r2, #2
  400ac2:	dd05      	ble.n	400ad0 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  400ac4:	7880      	ldrb	r0, [r0, #2]
  400ac6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  400aca:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400acc:	2000      	movs	r0, #0
  400ace:	4770      	bx	lr
  400ad0:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  400ad2:	4770      	bx	lr

00400ad4 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  400ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400ad8:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  400ada:	2c00      	cmp	r4, #0
  400adc:	d045      	beq.n	400b6a <twi_master_read+0x96>
  400ade:	460b      	mov	r3, r1
  400ae0:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400ae2:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400ae4:	2000      	movs	r0, #0
  400ae6:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400ae8:	684a      	ldr	r2, [r1, #4]
  400aea:	0212      	lsls	r2, r2, #8
  400aec:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400af0:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  400af4:	7c1a      	ldrb	r2, [r3, #16]
  400af6:	0412      	lsls	r2, r2, #16
  400af8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  400afc:	430a      	orrs	r2, r1
  400afe:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400b00:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400b02:	6859      	ldr	r1, [r3, #4]
  400b04:	4618      	mov	r0, r3
  400b06:	f7ff ffd3 	bl	400ab0 <twi_mk_addr>
  400b0a:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400b0c:	2c01      	cmp	r4, #1
  400b0e:	d104      	bne.n	400b1a <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400b10:	2303      	movs	r3, #3
  400b12:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  400b14:	f04f 0e01 	mov.w	lr, #1
  400b18:	e033      	b.n	400b82 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400b1a:	2301      	movs	r3, #1
  400b1c:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  400b1e:	f04f 0e00 	mov.w	lr, #0
  400b22:	e02e      	b.n	400b82 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  400b24:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400b26:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400b28:	f413 7f80 	tst.w	r3, #256	; 0x100
  400b2c:	d120      	bne.n	400b70 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400b2e:	1e51      	subs	r1, r2, #1
  400b30:	b30a      	cbz	r2, 400b76 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400b32:	2c01      	cmp	r4, #1
  400b34:	d106      	bne.n	400b44 <twi_master_read+0x70>
  400b36:	f1be 0f00 	cmp.w	lr, #0
  400b3a:	d12f      	bne.n	400b9c <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  400b3c:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  400b40:	46e6      	mov	lr, ip
  400b42:	e02b      	b.n	400b9c <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400b44:	f013 0f02 	tst.w	r3, #2
  400b48:	d005      	beq.n	400b56 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400b4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400b4c:	7033      	strb	r3, [r6, #0]

		cnt--;
  400b4e:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400b50:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400b52:	463a      	mov	r2, r7
  400b54:	e000      	b.n	400b58 <twi_master_read+0x84>
  400b56:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  400b58:	2c00      	cmp	r4, #0
  400b5a:	d1e4      	bne.n	400b26 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400b5c:	6a2b      	ldr	r3, [r5, #32]
  400b5e:	f013 0f01 	tst.w	r3, #1
  400b62:	d0fb      	beq.n	400b5c <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  400b64:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  400b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400b6a:	2001      	movs	r0, #1
  400b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400b70:	2005      	movs	r0, #5
  400b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400b76:	2009      	movs	r0, #9
  400b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400b7c:	2005      	movs	r0, #5
  400b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400b82:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400b84:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400b88:	d1f8      	bne.n	400b7c <twi_master_read+0xa8>
  400b8a:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  400b8e:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  400b92:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  400b96:	f04f 0c01 	mov.w	ip, #1
  400b9a:	e7ca      	b.n	400b32 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400b9c:	f013 0f02 	tst.w	r3, #2
  400ba0:	d0c0      	beq.n	400b24 <twi_master_read+0x50>
  400ba2:	e7d2      	b.n	400b4a <twi_master_read+0x76>

00400ba4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400ba4:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400ba6:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  400ba8:	2d00      	cmp	r5, #0
  400baa:	d034      	beq.n	400c16 <twi_master_write+0x72>
  400bac:	460b      	mov	r3, r1
  400bae:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400bb0:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400bb2:	2000      	movs	r0, #0
  400bb4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  400bb6:	7c0a      	ldrb	r2, [r1, #16]
  400bb8:	0412      	lsls	r2, r2, #16
  400bba:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  400bbe:	685a      	ldr	r2, [r3, #4]
  400bc0:	0212      	lsls	r2, r2, #8
  400bc2:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400bc6:	430a      	orrs	r2, r1
  400bc8:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400bca:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400bcc:	6859      	ldr	r1, [r3, #4]
  400bce:	4618      	mov	r0, r3
  400bd0:	f7ff ff6e 	bl	400ab0 <twi_mk_addr>
  400bd4:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400bd6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400bd8:	f413 7f80 	tst.w	r3, #256	; 0x100
  400bdc:	d004      	beq.n	400be8 <twi_master_write+0x44>
  400bde:	e01c      	b.n	400c1a <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400be0:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400be2:	f413 7f80 	tst.w	r3, #256	; 0x100
  400be6:	d11a      	bne.n	400c1e <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  400be8:	f013 0f04 	tst.w	r3, #4
  400bec:	d003      	beq.n	400bf6 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400bee:	7833      	ldrb	r3, [r6, #0]
  400bf0:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  400bf2:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400bf4:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400bf6:	2d00      	cmp	r5, #0
  400bf8:	d1f2      	bne.n	400be0 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400bfa:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  400bfc:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400c00:	d10f      	bne.n	400c22 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400c02:	f013 0f04 	tst.w	r3, #4
  400c06:	d0f8      	beq.n	400bfa <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400c08:	2302      	movs	r3, #2
  400c0a:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400c0c:	6a23      	ldr	r3, [r4, #32]
  400c0e:	f013 0f01 	tst.w	r3, #1
  400c12:	d0fb      	beq.n	400c0c <twi_master_write+0x68>
  400c14:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400c16:	2001      	movs	r0, #1
  400c18:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400c1a:	2005      	movs	r0, #5
  400c1c:	bd70      	pop	{r4, r5, r6, pc}
  400c1e:	2005      	movs	r0, #5
  400c20:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400c22:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  400c24:	bd70      	pop	{r4, r5, r6, pc}
  400c26:	bf00      	nop

00400c28 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  400c28:	b500      	push	{lr}
  400c2a:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  400c2c:	2300      	movs	r3, #0
  400c2e:	aa06      	add	r2, sp, #24
  400c30:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  400c34:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  400c36:	2201      	movs	r2, #1
  400c38:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  400c3a:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  400c3e:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  400c42:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  400c44:	a901      	add	r1, sp, #4
  400c46:	f7ff ffad 	bl	400ba4 <twi_master_write>
}
  400c4a:	b007      	add	sp, #28
  400c4c:	f85d fb04 	ldr.w	pc, [sp], #4

00400c50 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c50:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c52:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c56:	d02f      	beq.n	400cb8 <pio_set_peripheral+0x68>
  400c58:	d807      	bhi.n	400c6a <pio_set_peripheral+0x1a>
  400c5a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c5e:	d014      	beq.n	400c8a <pio_set_peripheral+0x3a>
  400c60:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c64:	d01e      	beq.n	400ca4 <pio_set_peripheral+0x54>
  400c66:	b939      	cbnz	r1, 400c78 <pio_set_peripheral+0x28>
  400c68:	4770      	bx	lr
  400c6a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c6e:	d036      	beq.n	400cde <pio_set_peripheral+0x8e>
  400c70:	d804      	bhi.n	400c7c <pio_set_peripheral+0x2c>
  400c72:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c76:	d029      	beq.n	400ccc <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c78:	6042      	str	r2, [r0, #4]
  400c7a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c7c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c80:	d02d      	beq.n	400cde <pio_set_peripheral+0x8e>
  400c82:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c86:	d02a      	beq.n	400cde <pio_set_peripheral+0x8e>
  400c88:	e7f6      	b.n	400c78 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400c8a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c8c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c8e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c90:	43d3      	mvns	r3, r2
  400c92:	4021      	ands	r1, r4
  400c94:	4019      	ands	r1, r3
  400c96:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c98:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c9a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c9c:	4021      	ands	r1, r4
  400c9e:	400b      	ands	r3, r1
  400ca0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ca2:	e01a      	b.n	400cda <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ca4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ca6:	4313      	orrs	r3, r2
  400ca8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400caa:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400cac:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400cae:	400b      	ands	r3, r1
  400cb0:	ea23 0302 	bic.w	r3, r3, r2
  400cb4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cb6:	e7df      	b.n	400c78 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cb8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400cba:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400cbc:	400b      	ands	r3, r1
  400cbe:	ea23 0302 	bic.w	r3, r3, r2
  400cc2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400cc4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400cc6:	4313      	orrs	r3, r2
  400cc8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cca:	e7d5      	b.n	400c78 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ccc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400cce:	4313      	orrs	r3, r2
  400cd0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400cd2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400cd4:	4313      	orrs	r3, r2
  400cd6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cd8:	e7ce      	b.n	400c78 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400cda:	6042      	str	r2, [r0, #4]
}
  400cdc:	bc10      	pop	{r4}
  400cde:	4770      	bx	lr

00400ce0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400ce0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ce2:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400ce6:	bf14      	ite	ne
  400ce8:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cea:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400cec:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400cf0:	bf14      	ite	ne
  400cf2:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400cf4:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400cf6:	f012 0f02 	tst.w	r2, #2
  400cfa:	d002      	beq.n	400d02 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400cfc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400d00:	e004      	b.n	400d0c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400d02:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400d06:	bf18      	it	ne
  400d08:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400d0c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400d0e:	6001      	str	r1, [r0, #0]
  400d10:	4770      	bx	lr
  400d12:	bf00      	nop

00400d14 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400d14:	b410      	push	{r4}
  400d16:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d18:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d1a:	b10c      	cbz	r4, 400d20 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400d1c:	6641      	str	r1, [r0, #100]	; 0x64
  400d1e:	e000      	b.n	400d22 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d20:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400d22:	b10b      	cbz	r3, 400d28 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400d24:	6501      	str	r1, [r0, #80]	; 0x50
  400d26:	e000      	b.n	400d2a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400d28:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400d2a:	b10a      	cbz	r2, 400d30 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400d2c:	6301      	str	r1, [r0, #48]	; 0x30
  400d2e:	e000      	b.n	400d32 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400d30:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400d32:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400d34:	6001      	str	r1, [r0, #0]
}
  400d36:	bc10      	pop	{r4}
  400d38:	4770      	bx	lr
  400d3a:	bf00      	nop

00400d3c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400d3c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400d3e:	4770      	bx	lr

00400d40 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400d40:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400d42:	4770      	bx	lr

00400d44 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400d44:	b570      	push	{r4, r5, r6, lr}
  400d46:	b082      	sub	sp, #8
  400d48:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400d4a:	0943      	lsrs	r3, r0, #5
  400d4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400d50:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400d54:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400d56:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400d5e:	d047      	beq.n	400df0 <pio_configure_pin+0xac>
  400d60:	d809      	bhi.n	400d76 <pio_configure_pin+0x32>
  400d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400d66:	d021      	beq.n	400dac <pio_configure_pin+0x68>
  400d68:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400d6c:	d02f      	beq.n	400dce <pio_configure_pin+0x8a>
  400d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400d72:	d16f      	bne.n	400e54 <pio_configure_pin+0x110>
  400d74:	e009      	b.n	400d8a <pio_configure_pin+0x46>
  400d76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400d7a:	d055      	beq.n	400e28 <pio_configure_pin+0xe4>
  400d7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400d80:	d052      	beq.n	400e28 <pio_configure_pin+0xe4>
  400d82:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400d86:	d044      	beq.n	400e12 <pio_configure_pin+0xce>
  400d88:	e064      	b.n	400e54 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400d8a:	f000 001f 	and.w	r0, r0, #31
  400d8e:	2601      	movs	r6, #1
  400d90:	4086      	lsls	r6, r0
  400d92:	4632      	mov	r2, r6
  400d94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d98:	4620      	mov	r0, r4
  400d9a:	f7ff ff59 	bl	400c50 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d9e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400da2:	bf14      	ite	ne
  400da4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400da6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400da8:	2001      	movs	r0, #1
  400daa:	e054      	b.n	400e56 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400dac:	f000 001f 	and.w	r0, r0, #31
  400db0:	2601      	movs	r6, #1
  400db2:	4086      	lsls	r6, r0
  400db4:	4632      	mov	r2, r6
  400db6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400dba:	4620      	mov	r0, r4
  400dbc:	f7ff ff48 	bl	400c50 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400dc0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400dc4:	bf14      	ite	ne
  400dc6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400dc8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400dca:	2001      	movs	r0, #1
  400dcc:	e043      	b.n	400e56 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400dce:	f000 001f 	and.w	r0, r0, #31
  400dd2:	2601      	movs	r6, #1
  400dd4:	4086      	lsls	r6, r0
  400dd6:	4632      	mov	r2, r6
  400dd8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ddc:	4620      	mov	r0, r4
  400dde:	f7ff ff37 	bl	400c50 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400de2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400de6:	bf14      	ite	ne
  400de8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400dea:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400dec:	2001      	movs	r0, #1
  400dee:	e032      	b.n	400e56 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400df0:	f000 001f 	and.w	r0, r0, #31
  400df4:	2601      	movs	r6, #1
  400df6:	4086      	lsls	r6, r0
  400df8:	4632      	mov	r2, r6
  400dfa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400dfe:	4620      	mov	r0, r4
  400e00:	f7ff ff26 	bl	400c50 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e04:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400e08:	bf14      	ite	ne
  400e0a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e0c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400e0e:	2001      	movs	r0, #1
  400e10:	e021      	b.n	400e56 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400e12:	f000 011f 	and.w	r1, r0, #31
  400e16:	2601      	movs	r6, #1
  400e18:	462a      	mov	r2, r5
  400e1a:	fa06 f101 	lsl.w	r1, r6, r1
  400e1e:	4620      	mov	r0, r4
  400e20:	f7ff ff5e 	bl	400ce0 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  400e24:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400e26:	e016      	b.n	400e56 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400e28:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  400e2c:	f000 011f 	and.w	r1, r0, #31
  400e30:	2601      	movs	r6, #1
  400e32:	ea05 0306 	and.w	r3, r5, r6
  400e36:	9300      	str	r3, [sp, #0]
  400e38:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400e3c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400e40:	bf14      	ite	ne
  400e42:	2200      	movne	r2, #0
  400e44:	2201      	moveq	r2, #1
  400e46:	fa06 f101 	lsl.w	r1, r6, r1
  400e4a:	4620      	mov	r0, r4
  400e4c:	f7ff ff62 	bl	400d14 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  400e50:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400e52:	e000      	b.n	400e56 <pio_configure_pin+0x112>

	default:
		return 0;
  400e54:	2000      	movs	r0, #0
	}

	return 1;
}
  400e56:	b002      	add	sp, #8
  400e58:	bd70      	pop	{r4, r5, r6, pc}
  400e5a:	bf00      	nop

00400e5c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400e5c:	b570      	push	{r4, r5, r6, lr}
  400e5e:	b082      	sub	sp, #8
  400e60:	4605      	mov	r5, r0
  400e62:	460e      	mov	r6, r1
  400e64:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400e66:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400e6e:	d038      	beq.n	400ee2 <pio_configure_pin_group+0x86>
  400e70:	d809      	bhi.n	400e86 <pio_configure_pin_group+0x2a>
  400e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400e76:	d01c      	beq.n	400eb2 <pio_configure_pin_group+0x56>
  400e78:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e7c:	d025      	beq.n	400eca <pio_configure_pin_group+0x6e>
  400e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400e82:	d150      	bne.n	400f26 <pio_configure_pin_group+0xca>
  400e84:	e009      	b.n	400e9a <pio_configure_pin_group+0x3e>
  400e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400e8a:	d03a      	beq.n	400f02 <pio_configure_pin_group+0xa6>
  400e8c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400e90:	d037      	beq.n	400f02 <pio_configure_pin_group+0xa6>
  400e92:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e96:	d030      	beq.n	400efa <pio_configure_pin_group+0x9e>
  400e98:	e045      	b.n	400f26 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400e9a:	460a      	mov	r2, r1
  400e9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ea0:	f7ff fed6 	bl	400c50 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ea4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400ea8:	bf14      	ite	ne
  400eaa:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400eac:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400eae:	2001      	movs	r0, #1
  400eb0:	e03a      	b.n	400f28 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400eb2:	460a      	mov	r2, r1
  400eb4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400eb8:	f7ff feca 	bl	400c50 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ebc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400ec0:	bf14      	ite	ne
  400ec2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ec4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ec6:	2001      	movs	r0, #1
  400ec8:	e02e      	b.n	400f28 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400eca:	460a      	mov	r2, r1
  400ecc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400ed0:	f7ff febe 	bl	400c50 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ed4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400ed8:	bf14      	ite	ne
  400eda:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400edc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ede:	2001      	movs	r0, #1
  400ee0:	e022      	b.n	400f28 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400ee2:	460a      	mov	r2, r1
  400ee4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400ee8:	f7ff feb2 	bl	400c50 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400eec:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400ef0:	bf14      	ite	ne
  400ef2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ef4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ef6:	2001      	movs	r0, #1
  400ef8:	e016      	b.n	400f28 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400efa:	f7ff fef1 	bl	400ce0 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  400efe:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400f00:	e012      	b.n	400f28 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400f02:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  400f06:	f004 0301 	and.w	r3, r4, #1
  400f0a:	9300      	str	r3, [sp, #0]
  400f0c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400f10:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400f14:	bf14      	ite	ne
  400f16:	2200      	movne	r2, #0
  400f18:	2201      	moveq	r2, #1
  400f1a:	4631      	mov	r1, r6
  400f1c:	4628      	mov	r0, r5
  400f1e:	f7ff fef9 	bl	400d14 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  400f22:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400f24:	e000      	b.n	400f28 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400f26:	2000      	movs	r0, #0
	}

	return 1;
}
  400f28:	b002      	add	sp, #8
  400f2a:	bd70      	pop	{r4, r5, r6, pc}

00400f2c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f30:	4681      	mov	r9, r0
  400f32:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f34:	f7ff ff02 	bl	400d3c <pio_get_interrupt_status>
  400f38:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f3a:	4648      	mov	r0, r9
  400f3c:	f7ff ff00 	bl	400d40 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  400f40:	4005      	ands	r5, r0
  400f42:	d013      	beq.n	400f6c <pio_handler_process+0x40>
  400f44:	4c0e      	ldr	r4, [pc, #56]	; (400f80 <pio_handler_process+0x54>)
  400f46:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400f4a:	6823      	ldr	r3, [r4, #0]
  400f4c:	4543      	cmp	r3, r8
  400f4e:	d108      	bne.n	400f62 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f50:	6861      	ldr	r1, [r4, #4]
  400f52:	4229      	tst	r1, r5
  400f54:	d005      	beq.n	400f62 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f56:	68e3      	ldr	r3, [r4, #12]
  400f58:	4640      	mov	r0, r8
  400f5a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400f5c:	6863      	ldr	r3, [r4, #4]
  400f5e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f62:	42b4      	cmp	r4, r6
  400f64:	d002      	beq.n	400f6c <pio_handler_process+0x40>
  400f66:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400f68:	2d00      	cmp	r5, #0
  400f6a:	d1ee      	bne.n	400f4a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400f6c:	4b05      	ldr	r3, [pc, #20]	; (400f84 <pio_handler_process+0x58>)
  400f6e:	681b      	ldr	r3, [r3, #0]
  400f70:	b123      	cbz	r3, 400f7c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400f72:	4b05      	ldr	r3, [pc, #20]	; (400f88 <pio_handler_process+0x5c>)
  400f74:	681b      	ldr	r3, [r3, #0]
  400f76:	b10b      	cbz	r3, 400f7c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400f78:	4648      	mov	r0, r9
  400f7a:	4798      	blx	r3
  400f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f80:	20000214 	.word	0x20000214
  400f84:	2000029c 	.word	0x2000029c
  400f88:	20000210 	.word	0x20000210

00400f8c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400f8c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400f8e:	210b      	movs	r1, #11
  400f90:	4801      	ldr	r0, [pc, #4]	; (400f98 <PIOA_Handler+0xc>)
  400f92:	f7ff ffcb 	bl	400f2c <pio_handler_process>
  400f96:	bd08      	pop	{r3, pc}
  400f98:	400e0e00 	.word	0x400e0e00

00400f9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400f9c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400f9e:	210c      	movs	r1, #12
  400fa0:	4801      	ldr	r0, [pc, #4]	; (400fa8 <PIOB_Handler+0xc>)
  400fa2:	f7ff ffc3 	bl	400f2c <pio_handler_process>
  400fa6:	bd08      	pop	{r3, pc}
  400fa8:	400e1000 	.word	0x400e1000

00400fac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400fac:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400fae:	210d      	movs	r1, #13
  400fb0:	4801      	ldr	r0, [pc, #4]	; (400fb8 <PIOC_Handler+0xc>)
  400fb2:	f7ff ffbb 	bl	400f2c <pio_handler_process>
  400fb6:	bd08      	pop	{r3, pc}
  400fb8:	400e1200 	.word	0x400e1200

00400fbc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400fbc:	4a18      	ldr	r2, [pc, #96]	; (401020 <pmc_switch_mck_to_pllack+0x64>)
  400fbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400fc4:	4318      	orrs	r0, r3
  400fc6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400fc8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400fca:	f013 0f08 	tst.w	r3, #8
  400fce:	d003      	beq.n	400fd8 <pmc_switch_mck_to_pllack+0x1c>
  400fd0:	e009      	b.n	400fe6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400fd2:	3b01      	subs	r3, #1
  400fd4:	d103      	bne.n	400fde <pmc_switch_mck_to_pllack+0x22>
  400fd6:	e01e      	b.n	401016 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400fdc:	4910      	ldr	r1, [pc, #64]	; (401020 <pmc_switch_mck_to_pllack+0x64>)
  400fde:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400fe0:	f012 0f08 	tst.w	r2, #8
  400fe4:	d0f5      	beq.n	400fd2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400fe6:	4a0e      	ldr	r2, [pc, #56]	; (401020 <pmc_switch_mck_to_pllack+0x64>)
  400fe8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400fea:	f023 0303 	bic.w	r3, r3, #3
  400fee:	f043 0302 	orr.w	r3, r3, #2
  400ff2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ff4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400ff6:	f010 0008 	ands.w	r0, r0, #8
  400ffa:	d004      	beq.n	401006 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400ffc:	2000      	movs	r0, #0
  400ffe:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401000:	3b01      	subs	r3, #1
  401002:	d103      	bne.n	40100c <pmc_switch_mck_to_pllack+0x50>
  401004:	e009      	b.n	40101a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401006:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40100a:	4905      	ldr	r1, [pc, #20]	; (401020 <pmc_switch_mck_to_pllack+0x64>)
  40100c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40100e:	f012 0f08 	tst.w	r2, #8
  401012:	d0f5      	beq.n	401000 <pmc_switch_mck_to_pllack+0x44>
  401014:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401016:	2001      	movs	r0, #1
  401018:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40101a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop
  401020:	400e0400 	.word	0x400e0400

00401024 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401024:	b138      	cbz	r0, 401036 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401026:	4911      	ldr	r1, [pc, #68]	; (40106c <pmc_switch_mainck_to_xtal+0x48>)
  401028:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40102a:	4a11      	ldr	r2, [pc, #68]	; (401070 <pmc_switch_mainck_to_xtal+0x4c>)
  40102c:	401a      	ands	r2, r3
  40102e:	4b11      	ldr	r3, [pc, #68]	; (401074 <pmc_switch_mainck_to_xtal+0x50>)
  401030:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401032:	620b      	str	r3, [r1, #32]
  401034:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401036:	480d      	ldr	r0, [pc, #52]	; (40106c <pmc_switch_mainck_to_xtal+0x48>)
  401038:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40103a:	0209      	lsls	r1, r1, #8
  40103c:	b289      	uxth	r1, r1
  40103e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  401042:	f023 0303 	bic.w	r3, r3, #3
  401046:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40104a:	f043 0301 	orr.w	r3, r3, #1
  40104e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401050:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401052:	4602      	mov	r2, r0
  401054:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401056:	f013 0f01 	tst.w	r3, #1
  40105a:	d0fb      	beq.n	401054 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40105c:	4a03      	ldr	r2, [pc, #12]	; (40106c <pmc_switch_mainck_to_xtal+0x48>)
  40105e:	6a13      	ldr	r3, [r2, #32]
  401060:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401068:	6213      	str	r3, [r2, #32]
  40106a:	4770      	bx	lr
  40106c:	400e0400 	.word	0x400e0400
  401070:	fec8fffc 	.word	0xfec8fffc
  401074:	01370002 	.word	0x01370002

00401078 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401078:	4b02      	ldr	r3, [pc, #8]	; (401084 <pmc_osc_is_ready_mainck+0xc>)
  40107a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40107c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401080:	4770      	bx	lr
  401082:	bf00      	nop
  401084:	400e0400 	.word	0x400e0400

00401088 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401088:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40108c:	4b01      	ldr	r3, [pc, #4]	; (401094 <pmc_disable_pllack+0xc>)
  40108e:	629a      	str	r2, [r3, #40]	; 0x28
  401090:	4770      	bx	lr
  401092:	bf00      	nop
  401094:	400e0400 	.word	0x400e0400

00401098 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401098:	4b02      	ldr	r3, [pc, #8]	; (4010a4 <pmc_is_locked_pllack+0xc>)
  40109a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40109c:	f000 0002 	and.w	r0, r0, #2
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop
  4010a4:	400e0400 	.word	0x400e0400

004010a8 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4010a8:	2822      	cmp	r0, #34	; 0x22
  4010aa:	d81e      	bhi.n	4010ea <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4010ac:	281f      	cmp	r0, #31
  4010ae:	d80c      	bhi.n	4010ca <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4010b0:	4b11      	ldr	r3, [pc, #68]	; (4010f8 <pmc_enable_periph_clk+0x50>)
  4010b2:	699a      	ldr	r2, [r3, #24]
  4010b4:	2301      	movs	r3, #1
  4010b6:	4083      	lsls	r3, r0
  4010b8:	4393      	bics	r3, r2
  4010ba:	d018      	beq.n	4010ee <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4010bc:	2301      	movs	r3, #1
  4010be:	fa03 f000 	lsl.w	r0, r3, r0
  4010c2:	4b0d      	ldr	r3, [pc, #52]	; (4010f8 <pmc_enable_periph_clk+0x50>)
  4010c4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4010c6:	2000      	movs	r0, #0
  4010c8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4010ca:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010cc:	4b0a      	ldr	r3, [pc, #40]	; (4010f8 <pmc_enable_periph_clk+0x50>)
  4010ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4010d2:	2301      	movs	r3, #1
  4010d4:	4083      	lsls	r3, r0
  4010d6:	4393      	bics	r3, r2
  4010d8:	d00b      	beq.n	4010f2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4010da:	2301      	movs	r3, #1
  4010dc:	fa03 f000 	lsl.w	r0, r3, r0
  4010e0:	4b05      	ldr	r3, [pc, #20]	; (4010f8 <pmc_enable_periph_clk+0x50>)
  4010e2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4010e6:	2000      	movs	r0, #0
  4010e8:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4010ea:	2001      	movs	r0, #1
  4010ec:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4010ee:	2000      	movs	r0, #0
  4010f0:	4770      	bx	lr
  4010f2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	400e0400 	.word	0x400e0400

004010fc <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4010fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401100:	6043      	str	r3, [r0, #4]
  401102:	4770      	bx	lr

00401104 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401104:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401106:	23ac      	movs	r3, #172	; 0xac
  401108:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40110a:	680b      	ldr	r3, [r1, #0]
  40110c:	684a      	ldr	r2, [r1, #4]
  40110e:	fbb3 f3f2 	udiv	r3, r3, r2
  401112:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401114:	1e5c      	subs	r4, r3, #1
  401116:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40111a:	4294      	cmp	r4, r2
  40111c:	d80a      	bhi.n	401134 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  40111e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401120:	688b      	ldr	r3, [r1, #8]
  401122:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401124:	f240 2302 	movw	r3, #514	; 0x202
  401128:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40112c:	2350      	movs	r3, #80	; 0x50
  40112e:	6003      	str	r3, [r0, #0]

	return 0;
  401130:	2000      	movs	r0, #0
  401132:	e000      	b.n	401136 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  401134:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  401136:	bc10      	pop	{r4}
  401138:	4770      	bx	lr
  40113a:	bf00      	nop

0040113c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40113c:	6943      	ldr	r3, [r0, #20]
  40113e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401142:	bf1a      	itte	ne
  401144:	61c1      	strne	r1, [r0, #28]
	return 0;
  401146:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401148:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40114a:	4770      	bx	lr

0040114c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40114c:	6943      	ldr	r3, [r0, #20]
  40114e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401152:	bf1d      	ittte	ne
  401154:	6983      	ldrne	r3, [r0, #24]
  401156:	700b      	strbne	r3, [r1, #0]
	return 0;
  401158:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  40115a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  40115c:	4770      	bx	lr
  40115e:	bf00      	nop

00401160 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401160:	6943      	ldr	r3, [r0, #20]
  401162:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401166:	bf1d      	ittte	ne
  401168:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40116c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40116e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  401170:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  401172:	4770      	bx	lr

00401174 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401174:	6943      	ldr	r3, [r0, #20]
  401176:	f013 0f01 	tst.w	r3, #1
  40117a:	d005      	beq.n	401188 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40117c:	6983      	ldr	r3, [r0, #24]
  40117e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401182:	600b      	str	r3, [r1, #0]

	return 0;
  401184:	2000      	movs	r0, #0
  401186:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  401188:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  40118a:	4770      	bx	lr

0040118c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40118c:	e7fe      	b.n	40118c <Dummy_Handler>
  40118e:	bf00      	nop

00401190 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401190:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  401192:	4b20      	ldr	r3, [pc, #128]	; (401214 <Reset_Handler+0x84>)
  401194:	4a20      	ldr	r2, [pc, #128]	; (401218 <Reset_Handler+0x88>)
  401196:	429a      	cmp	r2, r3
  401198:	d912      	bls.n	4011c0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40119a:	4b20      	ldr	r3, [pc, #128]	; (40121c <Reset_Handler+0x8c>)
  40119c:	4a1d      	ldr	r2, [pc, #116]	; (401214 <Reset_Handler+0x84>)
  40119e:	429a      	cmp	r2, r3
  4011a0:	d21e      	bcs.n	4011e0 <Reset_Handler+0x50>
  4011a2:	4611      	mov	r1, r2
  4011a4:	3b01      	subs	r3, #1
  4011a6:	1a9b      	subs	r3, r3, r2
  4011a8:	f023 0303 	bic.w	r3, r3, #3
  4011ac:	3304      	adds	r3, #4
  4011ae:	4a1a      	ldr	r2, [pc, #104]	; (401218 <Reset_Handler+0x88>)
  4011b0:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4011b2:	f852 0b04 	ldr.w	r0, [r2], #4
  4011b6:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4011ba:	429a      	cmp	r2, r3
  4011bc:	d1f9      	bne.n	4011b2 <Reset_Handler+0x22>
  4011be:	e00f      	b.n	4011e0 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4011c0:	4b14      	ldr	r3, [pc, #80]	; (401214 <Reset_Handler+0x84>)
  4011c2:	4a15      	ldr	r2, [pc, #84]	; (401218 <Reset_Handler+0x88>)
  4011c4:	429a      	cmp	r2, r3
  4011c6:	d20b      	bcs.n	4011e0 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4011c8:	4b14      	ldr	r3, [pc, #80]	; (40121c <Reset_Handler+0x8c>)
  4011ca:	4a12      	ldr	r2, [pc, #72]	; (401214 <Reset_Handler+0x84>)
  4011cc:	1a9a      	subs	r2, r3, r2
  4011ce:	4814      	ldr	r0, [pc, #80]	; (401220 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4011d0:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4011d2:	b12a      	cbz	r2, 4011e0 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  4011d4:	f851 2904 	ldr.w	r2, [r1], #-4
  4011d8:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4011dc:	4281      	cmp	r1, r0
  4011de:	d1f9      	bne.n	4011d4 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4011e0:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4011e2:	4b10      	ldr	r3, [pc, #64]	; (401224 <Reset_Handler+0x94>)
  4011e4:	4a10      	ldr	r2, [pc, #64]	; (401228 <Reset_Handler+0x98>)
  4011e6:	429a      	cmp	r2, r3
  4011e8:	d20b      	bcs.n	401202 <Reset_Handler+0x72>
  4011ea:	1d13      	adds	r3, r2, #4
  4011ec:	4a0f      	ldr	r2, [pc, #60]	; (40122c <Reset_Handler+0x9c>)
  4011ee:	1ad2      	subs	r2, r2, r3
  4011f0:	f022 0203 	bic.w	r2, r2, #3
  4011f4:	441a      	add	r2, r3
  4011f6:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4011f8:	2100      	movs	r1, #0
  4011fa:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4011fe:	429a      	cmp	r2, r3
  401200:	d1fb      	bne.n	4011fa <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401202:	4b0b      	ldr	r3, [pc, #44]	; (401230 <Reset_Handler+0xa0>)
  401204:	4a0b      	ldr	r2, [pc, #44]	; (401234 <Reset_Handler+0xa4>)
  401206:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401208:	f000 fca8 	bl	401b5c <__libc_init_array>

	/* Branch to main function */
	main();
  40120c:	f7ff f874 	bl	4002f8 <main>
  401210:	e7fe      	b.n	401210 <Reset_Handler+0x80>
  401212:	bf00      	nop
  401214:	20000000 	.word	0x20000000
  401218:	0040581c 	.word	0x0040581c
  40121c:	200001e4 	.word	0x200001e4
  401220:	00405818 	.word	0x00405818
  401224:	200002a4 	.word	0x200002a4
  401228:	200001e4 	.word	0x200001e4
  40122c:	200002a7 	.word	0x200002a7
  401230:	e000ed00 	.word	0xe000ed00
  401234:	00400000 	.word	0x00400000

00401238 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401238:	4b3d      	ldr	r3, [pc, #244]	; (401330 <SystemCoreClockUpdate+0xf8>)
  40123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40123c:	f003 0303 	and.w	r3, r3, #3
  401240:	2b03      	cmp	r3, #3
  401242:	d85d      	bhi.n	401300 <SystemCoreClockUpdate+0xc8>
  401244:	e8df f003 	tbb	[pc, r3]
  401248:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40124c:	4b39      	ldr	r3, [pc, #228]	; (401334 <SystemCoreClockUpdate+0xfc>)
  40124e:	695b      	ldr	r3, [r3, #20]
  401250:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401254:	bf14      	ite	ne
  401256:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40125a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40125e:	4b36      	ldr	r3, [pc, #216]	; (401338 <SystemCoreClockUpdate+0x100>)
  401260:	601a      	str	r2, [r3, #0]
  401262:	e04d      	b.n	401300 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401264:	4b32      	ldr	r3, [pc, #200]	; (401330 <SystemCoreClockUpdate+0xf8>)
  401266:	6a1b      	ldr	r3, [r3, #32]
  401268:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40126c:	d003      	beq.n	401276 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40126e:	4a33      	ldr	r2, [pc, #204]	; (40133c <SystemCoreClockUpdate+0x104>)
  401270:	4b31      	ldr	r3, [pc, #196]	; (401338 <SystemCoreClockUpdate+0x100>)
  401272:	601a      	str	r2, [r3, #0]
  401274:	e044      	b.n	401300 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401276:	4a32      	ldr	r2, [pc, #200]	; (401340 <SystemCoreClockUpdate+0x108>)
  401278:	4b2f      	ldr	r3, [pc, #188]	; (401338 <SystemCoreClockUpdate+0x100>)
  40127a:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40127c:	4b2c      	ldr	r3, [pc, #176]	; (401330 <SystemCoreClockUpdate+0xf8>)
  40127e:	6a1b      	ldr	r3, [r3, #32]
  401280:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401284:	2b10      	cmp	r3, #16
  401286:	d002      	beq.n	40128e <SystemCoreClockUpdate+0x56>
  401288:	2b20      	cmp	r3, #32
  40128a:	d004      	beq.n	401296 <SystemCoreClockUpdate+0x5e>
  40128c:	e038      	b.n	401300 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40128e:	4a2d      	ldr	r2, [pc, #180]	; (401344 <SystemCoreClockUpdate+0x10c>)
  401290:	4b29      	ldr	r3, [pc, #164]	; (401338 <SystemCoreClockUpdate+0x100>)
  401292:	601a      	str	r2, [r3, #0]
			break;
  401294:	e034      	b.n	401300 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401296:	4a29      	ldr	r2, [pc, #164]	; (40133c <SystemCoreClockUpdate+0x104>)
  401298:	4b27      	ldr	r3, [pc, #156]	; (401338 <SystemCoreClockUpdate+0x100>)
  40129a:	601a      	str	r2, [r3, #0]
			break;
  40129c:	e030      	b.n	401300 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40129e:	4b24      	ldr	r3, [pc, #144]	; (401330 <SystemCoreClockUpdate+0xf8>)
  4012a0:	6a1b      	ldr	r3, [r3, #32]
  4012a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012a6:	d003      	beq.n	4012b0 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4012a8:	4a24      	ldr	r2, [pc, #144]	; (40133c <SystemCoreClockUpdate+0x104>)
  4012aa:	4b23      	ldr	r3, [pc, #140]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012ac:	601a      	str	r2, [r3, #0]
  4012ae:	e012      	b.n	4012d6 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012b0:	4a23      	ldr	r2, [pc, #140]	; (401340 <SystemCoreClockUpdate+0x108>)
  4012b2:	4b21      	ldr	r3, [pc, #132]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012b4:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4012b6:	4b1e      	ldr	r3, [pc, #120]	; (401330 <SystemCoreClockUpdate+0xf8>)
  4012b8:	6a1b      	ldr	r3, [r3, #32]
  4012ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012be:	2b10      	cmp	r3, #16
  4012c0:	d002      	beq.n	4012c8 <SystemCoreClockUpdate+0x90>
  4012c2:	2b20      	cmp	r3, #32
  4012c4:	d004      	beq.n	4012d0 <SystemCoreClockUpdate+0x98>
  4012c6:	e006      	b.n	4012d6 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4012c8:	4a1e      	ldr	r2, [pc, #120]	; (401344 <SystemCoreClockUpdate+0x10c>)
  4012ca:	4b1b      	ldr	r3, [pc, #108]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012cc:	601a      	str	r2, [r3, #0]
					break;
  4012ce:	e002      	b.n	4012d6 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4012d0:	4a1a      	ldr	r2, [pc, #104]	; (40133c <SystemCoreClockUpdate+0x104>)
  4012d2:	4b19      	ldr	r3, [pc, #100]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012d4:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4012d6:	4b16      	ldr	r3, [pc, #88]	; (401330 <SystemCoreClockUpdate+0xf8>)
  4012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012da:	f003 0303 	and.w	r3, r3, #3
  4012de:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4012e0:	4a13      	ldr	r2, [pc, #76]	; (401330 <SystemCoreClockUpdate+0xf8>)
  4012e2:	bf07      	ittee	eq
  4012e4:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4012e6:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4012e8:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4012ea:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4012ec:	4812      	ldr	r0, [pc, #72]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012ee:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4012f2:	6803      	ldr	r3, [r0, #0]
  4012f4:	fb01 3303 	mla	r3, r1, r3, r3
  4012f8:	b2d2      	uxtb	r2, r2
  4012fa:	fbb3 f3f2 	udiv	r3, r3, r2
  4012fe:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401300:	4b0b      	ldr	r3, [pc, #44]	; (401330 <SystemCoreClockUpdate+0xf8>)
  401302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401304:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401308:	2b70      	cmp	r3, #112	; 0x70
  40130a:	d107      	bne.n	40131c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  40130c:	4a0a      	ldr	r2, [pc, #40]	; (401338 <SystemCoreClockUpdate+0x100>)
  40130e:	6813      	ldr	r3, [r2, #0]
  401310:	490d      	ldr	r1, [pc, #52]	; (401348 <SystemCoreClockUpdate+0x110>)
  401312:	fba1 1303 	umull	r1, r3, r1, r3
  401316:	085b      	lsrs	r3, r3, #1
  401318:	6013      	str	r3, [r2, #0]
  40131a:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40131c:	4b04      	ldr	r3, [pc, #16]	; (401330 <SystemCoreClockUpdate+0xf8>)
  40131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401320:	4905      	ldr	r1, [pc, #20]	; (401338 <SystemCoreClockUpdate+0x100>)
  401322:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401326:	680b      	ldr	r3, [r1, #0]
  401328:	40d3      	lsrs	r3, r2
  40132a:	600b      	str	r3, [r1, #0]
  40132c:	4770      	bx	lr
  40132e:	bf00      	nop
  401330:	400e0400 	.word	0x400e0400
  401334:	400e1410 	.word	0x400e1410
  401338:	2000000c 	.word	0x2000000c
  40133c:	00b71b00 	.word	0x00b71b00
  401340:	003d0900 	.word	0x003d0900
  401344:	007a1200 	.word	0x007a1200
  401348:	aaaaaaab 	.word	0xaaaaaaab

0040134c <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40134c:	4b1a      	ldr	r3, [pc, #104]	; (4013b8 <system_init_flash+0x6c>)
  40134e:	4298      	cmp	r0, r3
  401350:	d807      	bhi.n	401362 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401352:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401356:	4a19      	ldr	r2, [pc, #100]	; (4013bc <system_init_flash+0x70>)
  401358:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40135a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40135e:	6013      	str	r3, [r2, #0]
  401360:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401362:	4b17      	ldr	r3, [pc, #92]	; (4013c0 <system_init_flash+0x74>)
  401364:	4298      	cmp	r0, r3
  401366:	d806      	bhi.n	401376 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401368:	4b16      	ldr	r3, [pc, #88]	; (4013c4 <system_init_flash+0x78>)
  40136a:	4a14      	ldr	r2, [pc, #80]	; (4013bc <system_init_flash+0x70>)
  40136c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40136e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401372:	6013      	str	r3, [r2, #0]
  401374:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401376:	4b14      	ldr	r3, [pc, #80]	; (4013c8 <system_init_flash+0x7c>)
  401378:	4298      	cmp	r0, r3
  40137a:	d806      	bhi.n	40138a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40137c:	4b13      	ldr	r3, [pc, #76]	; (4013cc <system_init_flash+0x80>)
  40137e:	4a0f      	ldr	r2, [pc, #60]	; (4013bc <system_init_flash+0x70>)
  401380:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401382:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401386:	6013      	str	r3, [r2, #0]
  401388:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40138a:	4b11      	ldr	r3, [pc, #68]	; (4013d0 <system_init_flash+0x84>)
  40138c:	4298      	cmp	r0, r3
  40138e:	d806      	bhi.n	40139e <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401390:	4b10      	ldr	r3, [pc, #64]	; (4013d4 <system_init_flash+0x88>)
  401392:	4a0a      	ldr	r2, [pc, #40]	; (4013bc <system_init_flash+0x70>)
  401394:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401396:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40139a:	6013      	str	r3, [r2, #0]
  40139c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40139e:	4b0e      	ldr	r3, [pc, #56]	; (4013d8 <system_init_flash+0x8c>)
  4013a0:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013a2:	bf94      	ite	ls
  4013a4:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4013a8:	4b0c      	ldrhi	r3, [pc, #48]	; (4013dc <system_init_flash+0x90>)
  4013aa:	4a04      	ldr	r2, [pc, #16]	; (4013bc <system_init_flash+0x70>)
  4013ac:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4013ae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4013b2:	6013      	str	r3, [r2, #0]
  4013b4:	4770      	bx	lr
  4013b6:	bf00      	nop
  4013b8:	01312cff 	.word	0x01312cff
  4013bc:	400e0a00 	.word	0x400e0a00
  4013c0:	026259ff 	.word	0x026259ff
  4013c4:	04000100 	.word	0x04000100
  4013c8:	039386ff 	.word	0x039386ff
  4013cc:	04000200 	.word	0x04000200
  4013d0:	04c4b3ff 	.word	0x04c4b3ff
  4013d4:	04000300 	.word	0x04000300
  4013d8:	05f5e0ff 	.word	0x05f5e0ff
  4013dc:	04000500 	.word	0x04000500

004013e0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013e0:	4b09      	ldr	r3, [pc, #36]	; (401408 <_sbrk+0x28>)
  4013e2:	681b      	ldr	r3, [r3, #0]
  4013e4:	b913      	cbnz	r3, 4013ec <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4013e6:	4a09      	ldr	r2, [pc, #36]	; (40140c <_sbrk+0x2c>)
  4013e8:	4b07      	ldr	r3, [pc, #28]	; (401408 <_sbrk+0x28>)
  4013ea:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4013ec:	4b06      	ldr	r3, [pc, #24]	; (401408 <_sbrk+0x28>)
  4013ee:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4013f0:	181a      	adds	r2, r3, r0
  4013f2:	4907      	ldr	r1, [pc, #28]	; (401410 <_sbrk+0x30>)
  4013f4:	4291      	cmp	r1, r2
  4013f6:	db04      	blt.n	401402 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4013f8:	4610      	mov	r0, r2
  4013fa:	4a03      	ldr	r2, [pc, #12]	; (401408 <_sbrk+0x28>)
  4013fc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4013fe:	4618      	mov	r0, r3
  401400:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401406:	4770      	bx	lr
  401408:	20000284 	.word	0x20000284
  40140c:	200032a8 	.word	0x200032a8
  401410:	20027ffc 	.word	0x20027ffc

00401414 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401418:	4770      	bx	lr
  40141a:	bf00      	nop

0040141c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401420:	604b      	str	r3, [r1, #4]

	return 0;
}
  401422:	2000      	movs	r0, #0
  401424:	4770      	bx	lr
  401426:	bf00      	nop

00401428 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401428:	2001      	movs	r0, #1
  40142a:	4770      	bx	lr

0040142c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40142c:	2000      	movs	r0, #0
  40142e:	4770      	bx	lr

00401430 <atan2>:
  401430:	f000 b85e 	b.w	4014f0 <__ieee754_atan2>

00401434 <sqrt>:
  401434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401438:	b08b      	sub	sp, #44	; 0x2c
  40143a:	4604      	mov	r4, r0
  40143c:	460d      	mov	r5, r1
  40143e:	f000 f921 	bl	401684 <__ieee754_sqrt>
  401442:	4b28      	ldr	r3, [pc, #160]	; (4014e4 <sqrt+0xb0>)
  401444:	f993 a000 	ldrsb.w	sl, [r3]
  401448:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  40144c:	4606      	mov	r6, r0
  40144e:	460f      	mov	r7, r1
  401450:	d012      	beq.n	401478 <sqrt+0x44>
  401452:	4622      	mov	r2, r4
  401454:	462b      	mov	r3, r5
  401456:	4620      	mov	r0, r4
  401458:	4629      	mov	r1, r5
  40145a:	f003 fc99 	bl	404d90 <__aeabi_dcmpun>
  40145e:	4683      	mov	fp, r0
  401460:	b950      	cbnz	r0, 401478 <sqrt+0x44>
  401462:	f04f 0800 	mov.w	r8, #0
  401466:	f04f 0900 	mov.w	r9, #0
  40146a:	4642      	mov	r2, r8
  40146c:	464b      	mov	r3, r9
  40146e:	4620      	mov	r0, r4
  401470:	4629      	mov	r1, r5
  401472:	f003 fc65 	bl	404d40 <__aeabi_dcmplt>
  401476:	b920      	cbnz	r0, 401482 <sqrt+0x4e>
  401478:	4630      	mov	r0, r6
  40147a:	4639      	mov	r1, r7
  40147c:	b00b      	add	sp, #44	; 0x2c
  40147e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401482:	4b19      	ldr	r3, [pc, #100]	; (4014e8 <sqrt+0xb4>)
  401484:	f8cd b020 	str.w	fp, [sp, #32]
  401488:	2201      	movs	r2, #1
  40148a:	e9cd 4504 	strd	r4, r5, [sp, #16]
  40148e:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401492:	e88d 000c 	stmia.w	sp, {r2, r3}
  401496:	f1ba 0f00 	cmp.w	sl, #0
  40149a:	d015      	beq.n	4014c8 <sqrt+0x94>
  40149c:	4642      	mov	r2, r8
  40149e:	464b      	mov	r3, r9
  4014a0:	4640      	mov	r0, r8
  4014a2:	4649      	mov	r1, r9
  4014a4:	f003 fb04 	bl	404ab0 <__aeabi_ddiv>
  4014a8:	f1ba 0f02 	cmp.w	sl, #2
  4014ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4014b0:	d10c      	bne.n	4014cc <sqrt+0x98>
  4014b2:	f000 fb4d 	bl	401b50 <__errno>
  4014b6:	2321      	movs	r3, #33	; 0x21
  4014b8:	6003      	str	r3, [r0, #0]
  4014ba:	9b08      	ldr	r3, [sp, #32]
  4014bc:	b963      	cbnz	r3, 4014d8 <sqrt+0xa4>
  4014be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4014c2:	b00b      	add	sp, #44	; 0x2c
  4014c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014c8:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4014cc:	4668      	mov	r0, sp
  4014ce:	f000 fb3d 	bl	401b4c <matherr>
  4014d2:	2800      	cmp	r0, #0
  4014d4:	d1f1      	bne.n	4014ba <sqrt+0x86>
  4014d6:	e7ec      	b.n	4014b2 <sqrt+0x7e>
  4014d8:	f000 fb3a 	bl	401b50 <__errno>
  4014dc:	9b08      	ldr	r3, [sp, #32]
  4014de:	6003      	str	r3, [r0, #0]
  4014e0:	e7ed      	b.n	4014be <sqrt+0x8a>
  4014e2:	bf00      	nop
  4014e4:	20000010 	.word	0x20000010
  4014e8:	004054e8 	.word	0x004054e8
  4014ec:	00000000 	.word	0x00000000

004014f0 <__ieee754_atan2>:
  4014f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014f4:	4254      	negs	r4, r2
  4014f6:	4314      	orrs	r4, r2
  4014f8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  4014fc:	f8df e180 	ldr.w	lr, [pc, #384]	; 401680 <__ieee754_atan2+0x190>
  401500:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  401504:	4574      	cmp	r4, lr
  401506:	4606      	mov	r6, r0
  401508:	460d      	mov	r5, r1
  40150a:	d83e      	bhi.n	40158a <__ieee754_atan2+0x9a>
  40150c:	4244      	negs	r4, r0
  40150e:	4304      	orrs	r4, r0
  401510:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  401514:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  401518:	4574      	cmp	r4, lr
  40151a:	468a      	mov	sl, r1
  40151c:	d835      	bhi.n	40158a <__ieee754_atan2+0x9a>
  40151e:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  401522:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  401526:	4314      	orrs	r4, r2
  401528:	d044      	beq.n	4015b4 <__ieee754_atan2+0xc4>
  40152a:	179c      	asrs	r4, r3, #30
  40152c:	f004 0402 	and.w	r4, r4, #2
  401530:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  401534:	ea50 010b 	orrs.w	r1, r0, fp
  401538:	d02f      	beq.n	40159a <__ieee754_atan2+0xaa>
  40153a:	ea52 0109 	orrs.w	r1, r2, r9
  40153e:	d033      	beq.n	4015a8 <__ieee754_atan2+0xb8>
  401540:	45f1      	cmp	r9, lr
  401542:	d046      	beq.n	4015d2 <__ieee754_atan2+0xe2>
  401544:	45f3      	cmp	fp, lr
  401546:	d02f      	beq.n	4015a8 <__ieee754_atan2+0xb8>
  401548:	ebc9 090b 	rsb	r9, r9, fp
  40154c:	ea4f 5929 	mov.w	r9, r9, asr #20
  401550:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  401554:	dc34      	bgt.n	4015c0 <__ieee754_atan2+0xd0>
  401556:	2b00      	cmp	r3, #0
  401558:	db57      	blt.n	40160a <__ieee754_atan2+0x11a>
  40155a:	4630      	mov	r0, r6
  40155c:	4629      	mov	r1, r5
  40155e:	f003 faa7 	bl	404ab0 <__aeabi_ddiv>
  401562:	f000 faef 	bl	401b44 <fabs>
  401566:	f000 f94f 	bl	401808 <atan>
  40156a:	2c01      	cmp	r4, #1
  40156c:	d04a      	beq.n	401604 <__ieee754_atan2+0x114>
  40156e:	2c02      	cmp	r4, #2
  401570:	d03b      	beq.n	4015ea <__ieee754_atan2+0xfa>
  401572:	b184      	cbz	r4, 401596 <__ieee754_atan2+0xa6>
  401574:	a332      	add	r3, pc, #200	; (adr r3, 401640 <__ieee754_atan2+0x150>)
  401576:	e9d3 2300 	ldrd	r2, r3, [r3]
  40157a:	f002 ffbb 	bl	4044f4 <__aeabi_dsub>
  40157e:	a332      	add	r3, pc, #200	; (adr r3, 401648 <__ieee754_atan2+0x158>)
  401580:	e9d3 2300 	ldrd	r2, r3, [r3]
  401584:	f002 ffb6 	bl	4044f4 <__aeabi_dsub>
  401588:	e005      	b.n	401596 <__ieee754_atan2+0xa6>
  40158a:	4610      	mov	r0, r2
  40158c:	4619      	mov	r1, r3
  40158e:	4632      	mov	r2, r6
  401590:	462b      	mov	r3, r5
  401592:	f002 ffb1 	bl	4044f8 <__adddf3>
  401596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40159a:	2c02      	cmp	r4, #2
  40159c:	d014      	beq.n	4015c8 <__ieee754_atan2+0xd8>
  40159e:	2c03      	cmp	r4, #3
  4015a0:	d10c      	bne.n	4015bc <__ieee754_atan2+0xcc>
  4015a2:	482d      	ldr	r0, [pc, #180]	; (401658 <__ieee754_atan2+0x168>)
  4015a4:	492d      	ldr	r1, [pc, #180]	; (40165c <__ieee754_atan2+0x16c>)
  4015a6:	e7f6      	b.n	401596 <__ieee754_atan2+0xa6>
  4015a8:	f1ba 0f00 	cmp.w	sl, #0
  4015ac:	482a      	ldr	r0, [pc, #168]	; (401658 <__ieee754_atan2+0x168>)
  4015ae:	db0e      	blt.n	4015ce <__ieee754_atan2+0xde>
  4015b0:	492b      	ldr	r1, [pc, #172]	; (401660 <__ieee754_atan2+0x170>)
  4015b2:	e7f0      	b.n	401596 <__ieee754_atan2+0xa6>
  4015b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015b8:	f000 b926 	b.w	401808 <atan>
  4015bc:	4629      	mov	r1, r5
  4015be:	e7ea      	b.n	401596 <__ieee754_atan2+0xa6>
  4015c0:	a123      	add	r1, pc, #140	; (adr r1, 401650 <__ieee754_atan2+0x160>)
  4015c2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015c6:	e7d0      	b.n	40156a <__ieee754_atan2+0x7a>
  4015c8:	4823      	ldr	r0, [pc, #140]	; (401658 <__ieee754_atan2+0x168>)
  4015ca:	4926      	ldr	r1, [pc, #152]	; (401664 <__ieee754_atan2+0x174>)
  4015cc:	e7e3      	b.n	401596 <__ieee754_atan2+0xa6>
  4015ce:	4926      	ldr	r1, [pc, #152]	; (401668 <__ieee754_atan2+0x178>)
  4015d0:	e7e1      	b.n	401596 <__ieee754_atan2+0xa6>
  4015d2:	45cb      	cmp	fp, r9
  4015d4:	d01f      	beq.n	401616 <__ieee754_atan2+0x126>
  4015d6:	2c02      	cmp	r4, #2
  4015d8:	d0f6      	beq.n	4015c8 <__ieee754_atan2+0xd8>
  4015da:	2c03      	cmp	r4, #3
  4015dc:	d0e1      	beq.n	4015a2 <__ieee754_atan2+0xb2>
  4015de:	2c01      	cmp	r4, #1
  4015e0:	f04f 0000 	mov.w	r0, #0
  4015e4:	d020      	beq.n	401628 <__ieee754_atan2+0x138>
  4015e6:	4601      	mov	r1, r0
  4015e8:	e7d5      	b.n	401596 <__ieee754_atan2+0xa6>
  4015ea:	a315      	add	r3, pc, #84	; (adr r3, 401640 <__ieee754_atan2+0x150>)
  4015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015f0:	f002 ff80 	bl	4044f4 <__aeabi_dsub>
  4015f4:	4602      	mov	r2, r0
  4015f6:	460b      	mov	r3, r1
  4015f8:	a113      	add	r1, pc, #76	; (adr r1, 401648 <__ieee754_atan2+0x158>)
  4015fa:	e9d1 0100 	ldrd	r0, r1, [r1]
  4015fe:	f002 ff79 	bl	4044f4 <__aeabi_dsub>
  401602:	e7c8      	b.n	401596 <__ieee754_atan2+0xa6>
  401604:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401608:	e7c5      	b.n	401596 <__ieee754_atan2+0xa6>
  40160a:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  40160e:	daa4      	bge.n	40155a <__ieee754_atan2+0x6a>
  401610:	2000      	movs	r0, #0
  401612:	2100      	movs	r1, #0
  401614:	e7a9      	b.n	40156a <__ieee754_atan2+0x7a>
  401616:	2c02      	cmp	r4, #2
  401618:	d00e      	beq.n	401638 <__ieee754_atan2+0x148>
  40161a:	2c03      	cmp	r4, #3
  40161c:	d009      	beq.n	401632 <__ieee754_atan2+0x142>
  40161e:	2c01      	cmp	r4, #1
  401620:	480d      	ldr	r0, [pc, #52]	; (401658 <__ieee754_atan2+0x168>)
  401622:	d004      	beq.n	40162e <__ieee754_atan2+0x13e>
  401624:	4911      	ldr	r1, [pc, #68]	; (40166c <__ieee754_atan2+0x17c>)
  401626:	e7b6      	b.n	401596 <__ieee754_atan2+0xa6>
  401628:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40162c:	e7b3      	b.n	401596 <__ieee754_atan2+0xa6>
  40162e:	4910      	ldr	r1, [pc, #64]	; (401670 <__ieee754_atan2+0x180>)
  401630:	e7b1      	b.n	401596 <__ieee754_atan2+0xa6>
  401632:	4810      	ldr	r0, [pc, #64]	; (401674 <__ieee754_atan2+0x184>)
  401634:	4910      	ldr	r1, [pc, #64]	; (401678 <__ieee754_atan2+0x188>)
  401636:	e7ae      	b.n	401596 <__ieee754_atan2+0xa6>
  401638:	480e      	ldr	r0, [pc, #56]	; (401674 <__ieee754_atan2+0x184>)
  40163a:	4910      	ldr	r1, [pc, #64]	; (40167c <__ieee754_atan2+0x18c>)
  40163c:	e7ab      	b.n	401596 <__ieee754_atan2+0xa6>
  40163e:	bf00      	nop
  401640:	33145c07 	.word	0x33145c07
  401644:	3ca1a626 	.word	0x3ca1a626
  401648:	54442d18 	.word	0x54442d18
  40164c:	400921fb 	.word	0x400921fb
  401650:	54442d18 	.word	0x54442d18
  401654:	3ff921fb 	.word	0x3ff921fb
  401658:	54442d18 	.word	0x54442d18
  40165c:	c00921fb 	.word	0xc00921fb
  401660:	3ff921fb 	.word	0x3ff921fb
  401664:	400921fb 	.word	0x400921fb
  401668:	bff921fb 	.word	0xbff921fb
  40166c:	3fe921fb 	.word	0x3fe921fb
  401670:	bfe921fb 	.word	0xbfe921fb
  401674:	7f3321d2 	.word	0x7f3321d2
  401678:	c002d97c 	.word	0xc002d97c
  40167c:	4002d97c 	.word	0x4002d97c
  401680:	7ff00000 	.word	0x7ff00000

00401684 <__ieee754_sqrt>:
  401684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401688:	4e5d      	ldr	r6, [pc, #372]	; (401800 <__ieee754_sqrt+0x17c>)
  40168a:	46b6      	mov	lr, r6
  40168c:	400e      	ands	r6, r1
  40168e:	4576      	cmp	r6, lr
  401690:	460c      	mov	r4, r1
  401692:	4605      	mov	r5, r0
  401694:	f000 8095 	beq.w	4017c2 <__ieee754_sqrt+0x13e>
  401698:	2900      	cmp	r1, #0
  40169a:	460b      	mov	r3, r1
  40169c:	4602      	mov	r2, r0
  40169e:	dd73      	ble.n	401788 <__ieee754_sqrt+0x104>
  4016a0:	150f      	asrs	r7, r1, #20
  4016a2:	d07e      	beq.n	4017a2 <__ieee754_sqrt+0x11e>
  4016a4:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4016a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4016ac:	07f8      	lsls	r0, r7, #31
  4016ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4016b2:	d464      	bmi.n	40177e <__ieee754_sqrt+0xfa>
  4016b4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4016b8:	2600      	movs	r6, #0
  4016ba:	440b      	add	r3, r1
  4016bc:	107f      	asrs	r7, r7, #1
  4016be:	0052      	lsls	r2, r2, #1
  4016c0:	46b6      	mov	lr, r6
  4016c2:	2016      	movs	r0, #22
  4016c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4016c8:	eb0e 0401 	add.w	r4, lr, r1
  4016cc:	429c      	cmp	r4, r3
  4016ce:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4016d2:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4016d6:	dc03      	bgt.n	4016e0 <__ieee754_sqrt+0x5c>
  4016d8:	1b1b      	subs	r3, r3, r4
  4016da:	eb04 0e01 	add.w	lr, r4, r1
  4016de:	440e      	add	r6, r1
  4016e0:	3801      	subs	r0, #1
  4016e2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4016e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4016ea:	d1ed      	bne.n	4016c8 <__ieee754_sqrt+0x44>
  4016ec:	4684      	mov	ip, r0
  4016ee:	2420      	movs	r4, #32
  4016f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4016f4:	e009      	b.n	40170a <__ieee754_sqrt+0x86>
  4016f6:	d020      	beq.n	40173a <__ieee754_sqrt+0xb6>
  4016f8:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  4016fc:	3c01      	subs	r4, #1
  4016fe:	ea4f 0151 	mov.w	r1, r1, lsr #1
  401702:	442b      	add	r3, r5
  401704:	ea4f 0242 	mov.w	r2, r2, lsl #1
  401708:	d020      	beq.n	40174c <__ieee754_sqrt+0xc8>
  40170a:	459e      	cmp	lr, r3
  40170c:	eb01 050c 	add.w	r5, r1, ip
  401710:	daf1      	bge.n	4016f6 <__ieee754_sqrt+0x72>
  401712:	2d00      	cmp	r5, #0
  401714:	eb05 0c01 	add.w	ip, r5, r1
  401718:	db09      	blt.n	40172e <__ieee754_sqrt+0xaa>
  40171a:	46f0      	mov	r8, lr
  40171c:	4295      	cmp	r5, r2
  40171e:	ebce 0303 	rsb	r3, lr, r3
  401722:	d900      	bls.n	401726 <__ieee754_sqrt+0xa2>
  401724:	3b01      	subs	r3, #1
  401726:	1b52      	subs	r2, r2, r5
  401728:	4408      	add	r0, r1
  40172a:	46c6      	mov	lr, r8
  40172c:	e7e4      	b.n	4016f8 <__ieee754_sqrt+0x74>
  40172e:	f1bc 0f00 	cmp.w	ip, #0
  401732:	dbf2      	blt.n	40171a <__ieee754_sqrt+0x96>
  401734:	f10e 0801 	add.w	r8, lr, #1
  401738:	e7f0      	b.n	40171c <__ieee754_sqrt+0x98>
  40173a:	4295      	cmp	r5, r2
  40173c:	d817      	bhi.n	40176e <__ieee754_sqrt+0xea>
  40173e:	2d00      	cmp	r5, #0
  401740:	eb05 0c01 	add.w	ip, r5, r1
  401744:	db47      	blt.n	4017d6 <__ieee754_sqrt+0x152>
  401746:	4698      	mov	r8, r3
  401748:	2300      	movs	r3, #0
  40174a:	e7ec      	b.n	401726 <__ieee754_sqrt+0xa2>
  40174c:	4313      	orrs	r3, r2
  40174e:	d110      	bne.n	401772 <__ieee754_sqrt+0xee>
  401750:	0840      	lsrs	r0, r0, #1
  401752:	1073      	asrs	r3, r6, #1
  401754:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  401758:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40175c:	07f2      	lsls	r2, r6, #31
  40175e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  401762:	bf48      	it	mi
  401764:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  401768:	4649      	mov	r1, r9
  40176a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40176e:	4673      	mov	r3, lr
  401770:	e7c2      	b.n	4016f8 <__ieee754_sqrt+0x74>
  401772:	1c41      	adds	r1, r0, #1
  401774:	d033      	beq.n	4017de <__ieee754_sqrt+0x15a>
  401776:	f000 0301 	and.w	r3, r0, #1
  40177a:	4418      	add	r0, r3
  40177c:	e7e8      	b.n	401750 <__ieee754_sqrt+0xcc>
  40177e:	005b      	lsls	r3, r3, #1
  401780:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  401784:	0052      	lsls	r2, r2, #1
  401786:	e795      	b.n	4016b4 <__ieee754_sqrt+0x30>
  401788:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40178c:	4306      	orrs	r6, r0
  40178e:	d0ec      	beq.n	40176a <__ieee754_sqrt+0xe6>
  401790:	bb69      	cbnz	r1, 4017ee <__ieee754_sqrt+0x16a>
  401792:	460f      	mov	r7, r1
  401794:	0ad3      	lsrs	r3, r2, #11
  401796:	3f15      	subs	r7, #21
  401798:	0552      	lsls	r2, r2, #21
  40179a:	2b00      	cmp	r3, #0
  40179c:	d0fa      	beq.n	401794 <__ieee754_sqrt+0x110>
  40179e:	02dd      	lsls	r5, r3, #11
  4017a0:	d420      	bmi.n	4017e4 <__ieee754_sqrt+0x160>
  4017a2:	2100      	movs	r1, #0
  4017a4:	e000      	b.n	4017a8 <__ieee754_sqrt+0x124>
  4017a6:	4601      	mov	r1, r0
  4017a8:	005b      	lsls	r3, r3, #1
  4017aa:	02dc      	lsls	r4, r3, #11
  4017ac:	f101 0001 	add.w	r0, r1, #1
  4017b0:	d5f9      	bpl.n	4017a6 <__ieee754_sqrt+0x122>
  4017b2:	f1c0 0420 	rsb	r4, r0, #32
  4017b6:	fa22 f404 	lsr.w	r4, r2, r4
  4017ba:	4323      	orrs	r3, r4
  4017bc:	1a7f      	subs	r7, r7, r1
  4017be:	4082      	lsls	r2, r0
  4017c0:	e770      	b.n	4016a4 <__ieee754_sqrt+0x20>
  4017c2:	4602      	mov	r2, r0
  4017c4:	460b      	mov	r3, r1
  4017c6:	f003 f849 	bl	40485c <__aeabi_dmul>
  4017ca:	462a      	mov	r2, r5
  4017cc:	4623      	mov	r3, r4
  4017ce:	f002 fe93 	bl	4044f8 <__adddf3>
  4017d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4017d6:	f1bc 0f00 	cmp.w	ip, #0
  4017da:	daab      	bge.n	401734 <__ieee754_sqrt+0xb0>
  4017dc:	e7b3      	b.n	401746 <__ieee754_sqrt+0xc2>
  4017de:	3601      	adds	r6, #1
  4017e0:	4620      	mov	r0, r4
  4017e2:	e7b6      	b.n	401752 <__ieee754_sqrt+0xce>
  4017e4:	2420      	movs	r4, #32
  4017e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  4017ea:	2000      	movs	r0, #0
  4017ec:	e7e3      	b.n	4017b6 <__ieee754_sqrt+0x132>
  4017ee:	4602      	mov	r2, r0
  4017f0:	460b      	mov	r3, r1
  4017f2:	f002 fe7f 	bl	4044f4 <__aeabi_dsub>
  4017f6:	4602      	mov	r2, r0
  4017f8:	460b      	mov	r3, r1
  4017fa:	f003 f959 	bl	404ab0 <__aeabi_ddiv>
  4017fe:	e7b4      	b.n	40176a <__ieee754_sqrt+0xe6>
  401800:	7ff00000 	.word	0x7ff00000
  401804:	00000000 	.word	0x00000000

00401808 <atan>:
  401808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40180c:	4bc0      	ldr	r3, [pc, #768]	; (401b10 <atan+0x308>)
  40180e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401812:	429e      	cmp	r6, r3
  401814:	460d      	mov	r5, r1
  401816:	468a      	mov	sl, r1
  401818:	4604      	mov	r4, r0
  40181a:	dd0f      	ble.n	40183c <atan+0x34>
  40181c:	4bbd      	ldr	r3, [pc, #756]	; (401b14 <atan+0x30c>)
  40181e:	429e      	cmp	r6, r3
  401820:	f300 80b2 	bgt.w	401988 <atan+0x180>
  401824:	f000 80ad 	beq.w	401982 <atan+0x17a>
  401828:	4bbb      	ldr	r3, [pc, #748]	; (401b18 <atan+0x310>)
  40182a:	49bc      	ldr	r1, [pc, #752]	; (401b1c <atan+0x314>)
  40182c:	4cbc      	ldr	r4, [pc, #752]	; (401b20 <atan+0x318>)
  40182e:	f1ba 0f00 	cmp.w	sl, #0
  401832:	bfc8      	it	gt
  401834:	4619      	movgt	r1, r3
  401836:	4620      	mov	r0, r4
  401838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40183c:	4bb9      	ldr	r3, [pc, #740]	; (401b24 <atan+0x31c>)
  40183e:	429e      	cmp	r6, r3
  401840:	f300 80bc 	bgt.w	4019bc <atan+0x1b4>
  401844:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  401848:	429e      	cmp	r6, r3
  40184a:	f340 80a7 	ble.w	40199c <atan+0x194>
  40184e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  401852:	4622      	mov	r2, r4
  401854:	462b      	mov	r3, r5
  401856:	4620      	mov	r0, r4
  401858:	4629      	mov	r1, r5
  40185a:	f002 ffff 	bl	40485c <__aeabi_dmul>
  40185e:	4602      	mov	r2, r0
  401860:	460b      	mov	r3, r1
  401862:	4680      	mov	r8, r0
  401864:	4689      	mov	r9, r1
  401866:	f002 fff9 	bl	40485c <__aeabi_dmul>
  40186a:	a391      	add	r3, pc, #580	; (adr r3, 401ab0 <atan+0x2a8>)
  40186c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401870:	4606      	mov	r6, r0
  401872:	460f      	mov	r7, r1
  401874:	f002 fff2 	bl	40485c <__aeabi_dmul>
  401878:	a38f      	add	r3, pc, #572	; (adr r3, 401ab8 <atan+0x2b0>)
  40187a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40187e:	f002 fe3b 	bl	4044f8 <__adddf3>
  401882:	4632      	mov	r2, r6
  401884:	463b      	mov	r3, r7
  401886:	f002 ffe9 	bl	40485c <__aeabi_dmul>
  40188a:	a38d      	add	r3, pc, #564	; (adr r3, 401ac0 <atan+0x2b8>)
  40188c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401890:	f002 fe32 	bl	4044f8 <__adddf3>
  401894:	4632      	mov	r2, r6
  401896:	463b      	mov	r3, r7
  401898:	f002 ffe0 	bl	40485c <__aeabi_dmul>
  40189c:	a38a      	add	r3, pc, #552	; (adr r3, 401ac8 <atan+0x2c0>)
  40189e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4018a2:	f002 fe29 	bl	4044f8 <__adddf3>
  4018a6:	4632      	mov	r2, r6
  4018a8:	463b      	mov	r3, r7
  4018aa:	f002 ffd7 	bl	40485c <__aeabi_dmul>
  4018ae:	a388      	add	r3, pc, #544	; (adr r3, 401ad0 <atan+0x2c8>)
  4018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4018b4:	f002 fe20 	bl	4044f8 <__adddf3>
  4018b8:	4632      	mov	r2, r6
  4018ba:	463b      	mov	r3, r7
  4018bc:	f002 ffce 	bl	40485c <__aeabi_dmul>
  4018c0:	a385      	add	r3, pc, #532	; (adr r3, 401ad8 <atan+0x2d0>)
  4018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4018c6:	f002 fe17 	bl	4044f8 <__adddf3>
  4018ca:	4642      	mov	r2, r8
  4018cc:	464b      	mov	r3, r9
  4018ce:	f002 ffc5 	bl	40485c <__aeabi_dmul>
  4018d2:	a383      	add	r3, pc, #524	; (adr r3, 401ae0 <atan+0x2d8>)
  4018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4018d8:	4680      	mov	r8, r0
  4018da:	4689      	mov	r9, r1
  4018dc:	4630      	mov	r0, r6
  4018de:	4639      	mov	r1, r7
  4018e0:	f002 ffbc 	bl	40485c <__aeabi_dmul>
  4018e4:	a380      	add	r3, pc, #512	; (adr r3, 401ae8 <atan+0x2e0>)
  4018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4018ea:	f002 fe03 	bl	4044f4 <__aeabi_dsub>
  4018ee:	4632      	mov	r2, r6
  4018f0:	463b      	mov	r3, r7
  4018f2:	f002 ffb3 	bl	40485c <__aeabi_dmul>
  4018f6:	a37e      	add	r3, pc, #504	; (adr r3, 401af0 <atan+0x2e8>)
  4018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4018fc:	f002 fdfa 	bl	4044f4 <__aeabi_dsub>
  401900:	4632      	mov	r2, r6
  401902:	463b      	mov	r3, r7
  401904:	f002 ffaa 	bl	40485c <__aeabi_dmul>
  401908:	a37b      	add	r3, pc, #492	; (adr r3, 401af8 <atan+0x2f0>)
  40190a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40190e:	f002 fdf1 	bl	4044f4 <__aeabi_dsub>
  401912:	4632      	mov	r2, r6
  401914:	463b      	mov	r3, r7
  401916:	f002 ffa1 	bl	40485c <__aeabi_dmul>
  40191a:	a379      	add	r3, pc, #484	; (adr r3, 401b00 <atan+0x2f8>)
  40191c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401920:	f002 fde8 	bl	4044f4 <__aeabi_dsub>
  401924:	4632      	mov	r2, r6
  401926:	463b      	mov	r3, r7
  401928:	f002 ff98 	bl	40485c <__aeabi_dmul>
  40192c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  401930:	4602      	mov	r2, r0
  401932:	460b      	mov	r3, r1
  401934:	d069      	beq.n	401a0a <atan+0x202>
  401936:	4640      	mov	r0, r8
  401938:	4649      	mov	r1, r9
  40193a:	f002 fddd 	bl	4044f8 <__adddf3>
  40193e:	4622      	mov	r2, r4
  401940:	462b      	mov	r3, r5
  401942:	f002 ff8b 	bl	40485c <__aeabi_dmul>
  401946:	4e78      	ldr	r6, [pc, #480]	; (401b28 <atan+0x320>)
  401948:	4b78      	ldr	r3, [pc, #480]	; (401b2c <atan+0x324>)
  40194a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  40194e:	445e      	add	r6, fp
  401950:	449b      	add	fp, r3
  401952:	e9db 2300 	ldrd	r2, r3, [fp]
  401956:	f002 fdcd 	bl	4044f4 <__aeabi_dsub>
  40195a:	4622      	mov	r2, r4
  40195c:	462b      	mov	r3, r5
  40195e:	f002 fdc9 	bl	4044f4 <__aeabi_dsub>
  401962:	4602      	mov	r2, r0
  401964:	460b      	mov	r3, r1
  401966:	e9d6 0100 	ldrd	r0, r1, [r6]
  40196a:	f002 fdc3 	bl	4044f4 <__aeabi_dsub>
  40196e:	f1ba 0f00 	cmp.w	sl, #0
  401972:	4604      	mov	r4, r0
  401974:	f6bf af5f 	bge.w	401836 <atan+0x2e>
  401978:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40197c:	4620      	mov	r0, r4
  40197e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401982:	2800      	cmp	r0, #0
  401984:	f43f af50 	beq.w	401828 <atan+0x20>
  401988:	4622      	mov	r2, r4
  40198a:	4620      	mov	r0, r4
  40198c:	462b      	mov	r3, r5
  40198e:	4629      	mov	r1, r5
  401990:	f002 fdb2 	bl	4044f8 <__adddf3>
  401994:	4604      	mov	r4, r0
  401996:	4620      	mov	r0, r4
  401998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40199c:	a35a      	add	r3, pc, #360	; (adr r3, 401b08 <atan+0x300>)
  40199e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4019a2:	f002 fda9 	bl	4044f8 <__adddf3>
  4019a6:	2200      	movs	r2, #0
  4019a8:	4b61      	ldr	r3, [pc, #388]	; (401b30 <atan+0x328>)
  4019aa:	f003 f9e7 	bl	404d7c <__aeabi_dcmpgt>
  4019ae:	2800      	cmp	r0, #0
  4019b0:	f43f af4d 	beq.w	40184e <atan+0x46>
  4019b4:	4629      	mov	r1, r5
  4019b6:	4620      	mov	r0, r4
  4019b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019bc:	f000 f8c2 	bl	401b44 <fabs>
  4019c0:	4b5c      	ldr	r3, [pc, #368]	; (401b34 <atan+0x32c>)
  4019c2:	429e      	cmp	r6, r3
  4019c4:	4604      	mov	r4, r0
  4019c6:	460d      	mov	r5, r1
  4019c8:	dc2f      	bgt.n	401a2a <atan+0x222>
  4019ca:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  4019ce:	429e      	cmp	r6, r3
  4019d0:	dc54      	bgt.n	401a7c <atan+0x274>
  4019d2:	4602      	mov	r2, r0
  4019d4:	460b      	mov	r3, r1
  4019d6:	f002 fd8f 	bl	4044f8 <__adddf3>
  4019da:	2200      	movs	r2, #0
  4019dc:	4b54      	ldr	r3, [pc, #336]	; (401b30 <atan+0x328>)
  4019de:	f002 fd89 	bl	4044f4 <__aeabi_dsub>
  4019e2:	2200      	movs	r2, #0
  4019e4:	4606      	mov	r6, r0
  4019e6:	460f      	mov	r7, r1
  4019e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4019ec:	4620      	mov	r0, r4
  4019ee:	4629      	mov	r1, r5
  4019f0:	f002 fd82 	bl	4044f8 <__adddf3>
  4019f4:	4602      	mov	r2, r0
  4019f6:	460b      	mov	r3, r1
  4019f8:	4630      	mov	r0, r6
  4019fa:	4639      	mov	r1, r7
  4019fc:	f003 f858 	bl	404ab0 <__aeabi_ddiv>
  401a00:	f04f 0b00 	mov.w	fp, #0
  401a04:	4604      	mov	r4, r0
  401a06:	460d      	mov	r5, r1
  401a08:	e723      	b.n	401852 <atan+0x4a>
  401a0a:	4640      	mov	r0, r8
  401a0c:	4649      	mov	r1, r9
  401a0e:	f002 fd73 	bl	4044f8 <__adddf3>
  401a12:	4622      	mov	r2, r4
  401a14:	462b      	mov	r3, r5
  401a16:	f002 ff21 	bl	40485c <__aeabi_dmul>
  401a1a:	4602      	mov	r2, r0
  401a1c:	460b      	mov	r3, r1
  401a1e:	4620      	mov	r0, r4
  401a20:	4629      	mov	r1, r5
  401a22:	f002 fd67 	bl	4044f4 <__aeabi_dsub>
  401a26:	4604      	mov	r4, r0
  401a28:	e705      	b.n	401836 <atan+0x2e>
  401a2a:	4b43      	ldr	r3, [pc, #268]	; (401b38 <atan+0x330>)
  401a2c:	429e      	cmp	r6, r3
  401a2e:	dc1a      	bgt.n	401a66 <atan+0x25e>
  401a30:	2200      	movs	r2, #0
  401a32:	4b42      	ldr	r3, [pc, #264]	; (401b3c <atan+0x334>)
  401a34:	f002 fd5e 	bl	4044f4 <__aeabi_dsub>
  401a38:	2200      	movs	r2, #0
  401a3a:	4606      	mov	r6, r0
  401a3c:	460f      	mov	r7, r1
  401a3e:	4b3f      	ldr	r3, [pc, #252]	; (401b3c <atan+0x334>)
  401a40:	4620      	mov	r0, r4
  401a42:	4629      	mov	r1, r5
  401a44:	f002 ff0a 	bl	40485c <__aeabi_dmul>
  401a48:	2200      	movs	r2, #0
  401a4a:	4b39      	ldr	r3, [pc, #228]	; (401b30 <atan+0x328>)
  401a4c:	f002 fd54 	bl	4044f8 <__adddf3>
  401a50:	4602      	mov	r2, r0
  401a52:	460b      	mov	r3, r1
  401a54:	4630      	mov	r0, r6
  401a56:	4639      	mov	r1, r7
  401a58:	f003 f82a 	bl	404ab0 <__aeabi_ddiv>
  401a5c:	f04f 0b02 	mov.w	fp, #2
  401a60:	4604      	mov	r4, r0
  401a62:	460d      	mov	r5, r1
  401a64:	e6f5      	b.n	401852 <atan+0x4a>
  401a66:	4602      	mov	r2, r0
  401a68:	460b      	mov	r3, r1
  401a6a:	2000      	movs	r0, #0
  401a6c:	4934      	ldr	r1, [pc, #208]	; (401b40 <atan+0x338>)
  401a6e:	f003 f81f 	bl	404ab0 <__aeabi_ddiv>
  401a72:	f04f 0b03 	mov.w	fp, #3
  401a76:	4604      	mov	r4, r0
  401a78:	460d      	mov	r5, r1
  401a7a:	e6ea      	b.n	401852 <atan+0x4a>
  401a7c:	2200      	movs	r2, #0
  401a7e:	4b2c      	ldr	r3, [pc, #176]	; (401b30 <atan+0x328>)
  401a80:	f002 fd38 	bl	4044f4 <__aeabi_dsub>
  401a84:	2200      	movs	r2, #0
  401a86:	4606      	mov	r6, r0
  401a88:	460f      	mov	r7, r1
  401a8a:	4b29      	ldr	r3, [pc, #164]	; (401b30 <atan+0x328>)
  401a8c:	4620      	mov	r0, r4
  401a8e:	4629      	mov	r1, r5
  401a90:	f002 fd32 	bl	4044f8 <__adddf3>
  401a94:	4602      	mov	r2, r0
  401a96:	460b      	mov	r3, r1
  401a98:	4630      	mov	r0, r6
  401a9a:	4639      	mov	r1, r7
  401a9c:	f003 f808 	bl	404ab0 <__aeabi_ddiv>
  401aa0:	f04f 0b01 	mov.w	fp, #1
  401aa4:	4604      	mov	r4, r0
  401aa6:	460d      	mov	r5, r1
  401aa8:	e6d3      	b.n	401852 <atan+0x4a>
  401aaa:	bf00      	nop
  401aac:	f3af 8000 	nop.w
  401ab0:	e322da11 	.word	0xe322da11
  401ab4:	3f90ad3a 	.word	0x3f90ad3a
  401ab8:	24760deb 	.word	0x24760deb
  401abc:	3fa97b4b 	.word	0x3fa97b4b
  401ac0:	a0d03d51 	.word	0xa0d03d51
  401ac4:	3fb10d66 	.word	0x3fb10d66
  401ac8:	c54c206e 	.word	0xc54c206e
  401acc:	3fb745cd 	.word	0x3fb745cd
  401ad0:	920083ff 	.word	0x920083ff
  401ad4:	3fc24924 	.word	0x3fc24924
  401ad8:	5555550d 	.word	0x5555550d
  401adc:	3fd55555 	.word	0x3fd55555
  401ae0:	2c6a6c2f 	.word	0x2c6a6c2f
  401ae4:	bfa2b444 	.word	0xbfa2b444
  401ae8:	52defd9a 	.word	0x52defd9a
  401aec:	3fadde2d 	.word	0x3fadde2d
  401af0:	af749a6d 	.word	0xaf749a6d
  401af4:	3fb3b0f2 	.word	0x3fb3b0f2
  401af8:	fe231671 	.word	0xfe231671
  401afc:	3fbc71c6 	.word	0x3fbc71c6
  401b00:	9998ebc4 	.word	0x9998ebc4
  401b04:	3fc99999 	.word	0x3fc99999
  401b08:	8800759c 	.word	0x8800759c
  401b0c:	7e37e43c 	.word	0x7e37e43c
  401b10:	440fffff 	.word	0x440fffff
  401b14:	7ff00000 	.word	0x7ff00000
  401b18:	3ff921fb 	.word	0x3ff921fb
  401b1c:	bff921fb 	.word	0xbff921fb
  401b20:	54442d18 	.word	0x54442d18
  401b24:	3fdbffff 	.word	0x3fdbffff
  401b28:	00405510 	.word	0x00405510
  401b2c:	004054f0 	.word	0x004054f0
  401b30:	3ff00000 	.word	0x3ff00000
  401b34:	3ff2ffff 	.word	0x3ff2ffff
  401b38:	40037fff 	.word	0x40037fff
  401b3c:	3ff80000 	.word	0x3ff80000
  401b40:	bff00000 	.word	0xbff00000

00401b44 <fabs>:
  401b44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401b48:	4770      	bx	lr
  401b4a:	bf00      	nop

00401b4c <matherr>:
  401b4c:	2000      	movs	r0, #0
  401b4e:	4770      	bx	lr

00401b50 <__errno>:
  401b50:	4b01      	ldr	r3, [pc, #4]	; (401b58 <__errno+0x8>)
  401b52:	6818      	ldr	r0, [r3, #0]
  401b54:	4770      	bx	lr
  401b56:	bf00      	nop
  401b58:	20000074 	.word	0x20000074

00401b5c <__libc_init_array>:
  401b5c:	b570      	push	{r4, r5, r6, lr}
  401b5e:	4b0e      	ldr	r3, [pc, #56]	; (401b98 <__libc_init_array+0x3c>)
  401b60:	4c0e      	ldr	r4, [pc, #56]	; (401b9c <__libc_init_array+0x40>)
  401b62:	1ae4      	subs	r4, r4, r3
  401b64:	10a4      	asrs	r4, r4, #2
  401b66:	2500      	movs	r5, #0
  401b68:	461e      	mov	r6, r3
  401b6a:	42a5      	cmp	r5, r4
  401b6c:	d004      	beq.n	401b78 <__libc_init_array+0x1c>
  401b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401b72:	4798      	blx	r3
  401b74:	3501      	adds	r5, #1
  401b76:	e7f8      	b.n	401b6a <__libc_init_array+0xe>
  401b78:	f003 fe3a 	bl	4057f0 <_init>
  401b7c:	4c08      	ldr	r4, [pc, #32]	; (401ba0 <__libc_init_array+0x44>)
  401b7e:	4b09      	ldr	r3, [pc, #36]	; (401ba4 <__libc_init_array+0x48>)
  401b80:	1ae4      	subs	r4, r4, r3
  401b82:	10a4      	asrs	r4, r4, #2
  401b84:	2500      	movs	r5, #0
  401b86:	461e      	mov	r6, r3
  401b88:	42a5      	cmp	r5, r4
  401b8a:	d004      	beq.n	401b96 <__libc_init_array+0x3a>
  401b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401b90:	4798      	blx	r3
  401b92:	3501      	adds	r5, #1
  401b94:	e7f8      	b.n	401b88 <__libc_init_array+0x2c>
  401b96:	bd70      	pop	{r4, r5, r6, pc}
  401b98:	004057fc 	.word	0x004057fc
  401b9c:	004057fc 	.word	0x004057fc
  401ba0:	00405800 	.word	0x00405800
  401ba4:	004057fc 	.word	0x004057fc

00401ba8 <memset>:
  401ba8:	4402      	add	r2, r0
  401baa:	4603      	mov	r3, r0
  401bac:	4293      	cmp	r3, r2
  401bae:	d002      	beq.n	401bb6 <memset+0xe>
  401bb0:	f803 1b01 	strb.w	r1, [r3], #1
  401bb4:	e7fa      	b.n	401bac <memset+0x4>
  401bb6:	4770      	bx	lr

00401bb8 <__cvt>:
  401bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401bbc:	b088      	sub	sp, #32
  401bbe:	2b00      	cmp	r3, #0
  401bc0:	9f14      	ldr	r7, [sp, #80]	; 0x50
  401bc2:	9912      	ldr	r1, [sp, #72]	; 0x48
  401bc4:	9d10      	ldr	r5, [sp, #64]	; 0x40
  401bc6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  401bca:	461e      	mov	r6, r3
  401bcc:	f027 0720 	bic.w	r7, r7, #32
  401bd0:	bfbb      	ittet	lt
  401bd2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  401bd6:	461e      	movlt	r6, r3
  401bd8:	2300      	movge	r3, #0
  401bda:	232d      	movlt	r3, #45	; 0x2d
  401bdc:	2f46      	cmp	r7, #70	; 0x46
  401bde:	4614      	mov	r4, r2
  401be0:	700b      	strb	r3, [r1, #0]
  401be2:	d003      	beq.n	401bec <__cvt+0x34>
  401be4:	2f45      	cmp	r7, #69	; 0x45
  401be6:	d103      	bne.n	401bf0 <__cvt+0x38>
  401be8:	3501      	adds	r5, #1
  401bea:	e001      	b.n	401bf0 <__cvt+0x38>
  401bec:	2303      	movs	r3, #3
  401bee:	e000      	b.n	401bf2 <__cvt+0x3a>
  401bf0:	2302      	movs	r3, #2
  401bf2:	aa07      	add	r2, sp, #28
  401bf4:	9204      	str	r2, [sp, #16]
  401bf6:	aa06      	add	r2, sp, #24
  401bf8:	9203      	str	r2, [sp, #12]
  401bfa:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  401bfe:	4622      	mov	r2, r4
  401c00:	4633      	mov	r3, r6
  401c02:	f000 fed1 	bl	4029a8 <_dtoa_r>
  401c06:	2f47      	cmp	r7, #71	; 0x47
  401c08:	4680      	mov	r8, r0
  401c0a:	d102      	bne.n	401c12 <__cvt+0x5a>
  401c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401c0e:	07db      	lsls	r3, r3, #31
  401c10:	d528      	bpl.n	401c64 <__cvt+0xac>
  401c12:	2f46      	cmp	r7, #70	; 0x46
  401c14:	eb08 0905 	add.w	r9, r8, r5
  401c18:	d111      	bne.n	401c3e <__cvt+0x86>
  401c1a:	f898 3000 	ldrb.w	r3, [r8]
  401c1e:	2b30      	cmp	r3, #48	; 0x30
  401c20:	d10a      	bne.n	401c38 <__cvt+0x80>
  401c22:	2200      	movs	r2, #0
  401c24:	2300      	movs	r3, #0
  401c26:	4620      	mov	r0, r4
  401c28:	4631      	mov	r1, r6
  401c2a:	f003 f87f 	bl	404d2c <__aeabi_dcmpeq>
  401c2e:	b918      	cbnz	r0, 401c38 <__cvt+0x80>
  401c30:	f1c5 0501 	rsb	r5, r5, #1
  401c34:	f8ca 5000 	str.w	r5, [sl]
  401c38:	f8da 3000 	ldr.w	r3, [sl]
  401c3c:	4499      	add	r9, r3
  401c3e:	2200      	movs	r2, #0
  401c40:	2300      	movs	r3, #0
  401c42:	4620      	mov	r0, r4
  401c44:	4631      	mov	r1, r6
  401c46:	f003 f871 	bl	404d2c <__aeabi_dcmpeq>
  401c4a:	b908      	cbnz	r0, 401c50 <__cvt+0x98>
  401c4c:	2230      	movs	r2, #48	; 0x30
  401c4e:	e002      	b.n	401c56 <__cvt+0x9e>
  401c50:	f8cd 901c 	str.w	r9, [sp, #28]
  401c54:	e006      	b.n	401c64 <__cvt+0xac>
  401c56:	9b07      	ldr	r3, [sp, #28]
  401c58:	4599      	cmp	r9, r3
  401c5a:	d903      	bls.n	401c64 <__cvt+0xac>
  401c5c:	1c59      	adds	r1, r3, #1
  401c5e:	9107      	str	r1, [sp, #28]
  401c60:	701a      	strb	r2, [r3, #0]
  401c62:	e7f8      	b.n	401c56 <__cvt+0x9e>
  401c64:	9b07      	ldr	r3, [sp, #28]
  401c66:	9a15      	ldr	r2, [sp, #84]	; 0x54
  401c68:	ebc8 0303 	rsb	r3, r8, r3
  401c6c:	4640      	mov	r0, r8
  401c6e:	6013      	str	r3, [r2, #0]
  401c70:	b008      	add	sp, #32
  401c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00401c76 <__exponent>:
  401c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
  401c78:	4603      	mov	r3, r0
  401c7a:	2900      	cmp	r1, #0
  401c7c:	bfb8      	it	lt
  401c7e:	4249      	neglt	r1, r1
  401c80:	f803 2b02 	strb.w	r2, [r3], #2
  401c84:	bfb4      	ite	lt
  401c86:	222d      	movlt	r2, #45	; 0x2d
  401c88:	222b      	movge	r2, #43	; 0x2b
  401c8a:	2909      	cmp	r1, #9
  401c8c:	7042      	strb	r2, [r0, #1]
  401c8e:	dd19      	ble.n	401cc4 <__exponent+0x4e>
  401c90:	f10d 0207 	add.w	r2, sp, #7
  401c94:	4616      	mov	r6, r2
  401c96:	250a      	movs	r5, #10
  401c98:	fb91 f4f5 	sdiv	r4, r1, r5
  401c9c:	fb05 1114 	mls	r1, r5, r4, r1
  401ca0:	3130      	adds	r1, #48	; 0x30
  401ca2:	2c09      	cmp	r4, #9
  401ca4:	f802 1d01 	strb.w	r1, [r2, #-1]!
  401ca8:	4621      	mov	r1, r4
  401caa:	dcf5      	bgt.n	401c98 <__exponent+0x22>
  401cac:	3130      	adds	r1, #48	; 0x30
  401cae:	1e54      	subs	r4, r2, #1
  401cb0:	f802 1c01 	strb.w	r1, [r2, #-1]
  401cb4:	42b4      	cmp	r4, r6
  401cb6:	461a      	mov	r2, r3
  401cb8:	d20a      	bcs.n	401cd0 <__exponent+0x5a>
  401cba:	f814 2b01 	ldrb.w	r2, [r4], #1
  401cbe:	f803 2b01 	strb.w	r2, [r3], #1
  401cc2:	e7f7      	b.n	401cb4 <__exponent+0x3e>
  401cc4:	2430      	movs	r4, #48	; 0x30
  401cc6:	461a      	mov	r2, r3
  401cc8:	4421      	add	r1, r4
  401cca:	f802 4b02 	strb.w	r4, [r2], #2
  401cce:	7059      	strb	r1, [r3, #1]
  401cd0:	1a10      	subs	r0, r2, r0
  401cd2:	b002      	add	sp, #8
  401cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

00401cd8 <_printf_float>:
  401cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cdc:	b091      	sub	sp, #68	; 0x44
  401cde:	460c      	mov	r4, r1
  401ce0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  401ce4:	4616      	mov	r6, r2
  401ce6:	461f      	mov	r7, r3
  401ce8:	4605      	mov	r5, r0
  401cea:	f001 fd75 	bl	4037d8 <_localeconv_r>
  401cee:	6803      	ldr	r3, [r0, #0]
  401cf0:	9309      	str	r3, [sp, #36]	; 0x24
  401cf2:	4618      	mov	r0, r3
  401cf4:	f000 fcfc 	bl	4026f0 <strlen>
  401cf8:	2300      	movs	r3, #0
  401cfa:	930e      	str	r3, [sp, #56]	; 0x38
  401cfc:	f8d8 3000 	ldr.w	r3, [r8]
  401d00:	900a      	str	r0, [sp, #40]	; 0x28
  401d02:	3307      	adds	r3, #7
  401d04:	f023 0307 	bic.w	r3, r3, #7
  401d08:	f103 0208 	add.w	r2, r3, #8
  401d0c:	f894 9018 	ldrb.w	r9, [r4, #24]
  401d10:	f8d4 b000 	ldr.w	fp, [r4]
  401d14:	f8c8 2000 	str.w	r2, [r8]
  401d18:	e9d3 2300 	ldrd	r2, r3, [r3]
  401d1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  401d20:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  401d24:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  401d28:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  401d2c:	930b      	str	r3, [sp, #44]	; 0x2c
  401d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401d32:	4ba7      	ldr	r3, [pc, #668]	; (401fd0 <_printf_float+0x2f8>)
  401d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401d36:	4640      	mov	r0, r8
  401d38:	f003 f82a 	bl	404d90 <__aeabi_dcmpun>
  401d3c:	b9a0      	cbnz	r0, 401d68 <_printf_float+0x90>
  401d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  401d42:	4ba3      	ldr	r3, [pc, #652]	; (401fd0 <_printf_float+0x2f8>)
  401d44:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401d46:	4640      	mov	r0, r8
  401d48:	f003 f804 	bl	404d54 <__aeabi_dcmple>
  401d4c:	b960      	cbnz	r0, 401d68 <_printf_float+0x90>
  401d4e:	2200      	movs	r2, #0
  401d50:	2300      	movs	r3, #0
  401d52:	4640      	mov	r0, r8
  401d54:	4651      	mov	r1, sl
  401d56:	f002 fff3 	bl	404d40 <__aeabi_dcmplt>
  401d5a:	b110      	cbz	r0, 401d62 <_printf_float+0x8a>
  401d5c:	232d      	movs	r3, #45	; 0x2d
  401d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401d62:	4b9c      	ldr	r3, [pc, #624]	; (401fd4 <_printf_float+0x2fc>)
  401d64:	4a9c      	ldr	r2, [pc, #624]	; (401fd8 <_printf_float+0x300>)
  401d66:	e00a      	b.n	401d7e <_printf_float+0xa6>
  401d68:	4642      	mov	r2, r8
  401d6a:	4653      	mov	r3, sl
  401d6c:	4640      	mov	r0, r8
  401d6e:	4651      	mov	r1, sl
  401d70:	f003 f80e 	bl	404d90 <__aeabi_dcmpun>
  401d74:	2800      	cmp	r0, #0
  401d76:	f000 8192 	beq.w	40209e <_printf_float+0x3c6>
  401d7a:	4b98      	ldr	r3, [pc, #608]	; (401fdc <_printf_float+0x304>)
  401d7c:	4a98      	ldr	r2, [pc, #608]	; (401fe0 <_printf_float+0x308>)
  401d7e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  401d82:	bf8c      	ite	hi
  401d84:	4690      	movhi	r8, r2
  401d86:	4698      	movls	r8, r3
  401d88:	2303      	movs	r3, #3
  401d8a:	6123      	str	r3, [r4, #16]
  401d8c:	f02b 0304 	bic.w	r3, fp, #4
  401d90:	6023      	str	r3, [r4, #0]
  401d92:	f04f 0a00 	mov.w	sl, #0
  401d96:	e03d      	b.n	401e14 <_printf_float+0x13c>
  401d98:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  401d9c:	f000 818a 	beq.w	4020b4 <_printf_float+0x3dc>
  401da0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  401da4:	f000 8186 	beq.w	4020b4 <_printf_float+0x3dc>
  401da8:	6023      	str	r3, [r4, #0]
  401daa:	2100      	movs	r1, #0
  401dac:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  401db0:	9301      	str	r3, [sp, #4]
  401db2:	6863      	ldr	r3, [r4, #4]
  401db4:	9005      	str	r0, [sp, #20]
  401db6:	9202      	str	r2, [sp, #8]
  401db8:	9300      	str	r3, [sp, #0]
  401dba:	4642      	mov	r2, r8
  401dbc:	4653      	mov	r3, sl
  401dbe:	9106      	str	r1, [sp, #24]
  401dc0:	f8cd 9010 	str.w	r9, [sp, #16]
  401dc4:	f8cd e00c 	str.w	lr, [sp, #12]
  401dc8:	4628      	mov	r0, r5
  401dca:	f7ff fef5 	bl	401bb8 <__cvt>
  401dce:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  401dd2:	2b47      	cmp	r3, #71	; 0x47
  401dd4:	4680      	mov	r8, r0
  401dd6:	f000 8184 	beq.w	4020e2 <_printf_float+0x40a>
  401dda:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  401dde:	990d      	ldr	r1, [sp, #52]	; 0x34
  401de0:	f200 818d 	bhi.w	4020fe <_printf_float+0x426>
  401de4:	3901      	subs	r1, #1
  401de6:	464a      	mov	r2, r9
  401de8:	f104 0050 	add.w	r0, r4, #80	; 0x50
  401dec:	910d      	str	r1, [sp, #52]	; 0x34
  401dee:	f7ff ff42 	bl	401c76 <__exponent>
  401df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401df4:	1883      	adds	r3, r0, r2
  401df6:	2a01      	cmp	r2, #1
  401df8:	4682      	mov	sl, r0
  401dfa:	6123      	str	r3, [r4, #16]
  401dfc:	f300 817c 	bgt.w	4020f8 <_printf_float+0x420>
  401e00:	6822      	ldr	r2, [r4, #0]
  401e02:	07d1      	lsls	r1, r2, #31
  401e04:	f100 8178 	bmi.w	4020f8 <_printf_float+0x420>
  401e08:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  401e0c:	b113      	cbz	r3, 401e14 <_printf_float+0x13c>
  401e0e:	232d      	movs	r3, #45	; 0x2d
  401e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  401e14:	9700      	str	r7, [sp, #0]
  401e16:	4633      	mov	r3, r6
  401e18:	aa0f      	add	r2, sp, #60	; 0x3c
  401e1a:	4621      	mov	r1, r4
  401e1c:	4628      	mov	r0, r5
  401e1e:	f000 f99f 	bl	402160 <_printf_common>
  401e22:	3001      	adds	r0, #1
  401e24:	d102      	bne.n	401e2c <_printf_float+0x154>
  401e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401e2a:	e196      	b.n	40215a <_printf_float+0x482>
  401e2c:	6823      	ldr	r3, [r4, #0]
  401e2e:	055a      	lsls	r2, r3, #21
  401e30:	d401      	bmi.n	401e36 <_printf_float+0x15e>
  401e32:	6923      	ldr	r3, [r4, #16]
  401e34:	e065      	b.n	401f02 <_printf_float+0x22a>
  401e36:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  401e3a:	f240 80d5 	bls.w	401fe8 <_printf_float+0x310>
  401e3e:	2200      	movs	r2, #0
  401e40:	2300      	movs	r3, #0
  401e42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  401e46:	f002 ff71 	bl	404d2c <__aeabi_dcmpeq>
  401e4a:	b378      	cbz	r0, 401eac <_printf_float+0x1d4>
  401e4c:	2301      	movs	r3, #1
  401e4e:	4a65      	ldr	r2, [pc, #404]	; (401fe4 <_printf_float+0x30c>)
  401e50:	4631      	mov	r1, r6
  401e52:	4628      	mov	r0, r5
  401e54:	47b8      	blx	r7
  401e56:	3001      	adds	r0, #1
  401e58:	d0e5      	beq.n	401e26 <_printf_float+0x14e>
  401e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401e5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401e5e:	429a      	cmp	r2, r3
  401e60:	db0b      	blt.n	401e7a <_printf_float+0x1a2>
  401e62:	6823      	ldr	r3, [r4, #0]
  401e64:	07d8      	lsls	r0, r3, #31
  401e66:	d408      	bmi.n	401e7a <_printf_float+0x1a2>
  401e68:	6823      	ldr	r3, [r4, #0]
  401e6a:	079b      	lsls	r3, r3, #30
  401e6c:	f140 8111 	bpl.w	402092 <_printf_float+0x3ba>
  401e70:	f04f 0800 	mov.w	r8, #0
  401e74:	f104 0919 	add.w	r9, r4, #25
  401e78:	e106      	b.n	402088 <_printf_float+0x3b0>
  401e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401e7e:	4631      	mov	r1, r6
  401e80:	4628      	mov	r0, r5
  401e82:	47b8      	blx	r7
  401e84:	3001      	adds	r0, #1
  401e86:	d0ce      	beq.n	401e26 <_printf_float+0x14e>
  401e88:	f04f 0800 	mov.w	r8, #0
  401e8c:	f104 091a 	add.w	r9, r4, #26
  401e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401e92:	3b01      	subs	r3, #1
  401e94:	4598      	cmp	r8, r3
  401e96:	dae7      	bge.n	401e68 <_printf_float+0x190>
  401e98:	2301      	movs	r3, #1
  401e9a:	464a      	mov	r2, r9
  401e9c:	4631      	mov	r1, r6
  401e9e:	4628      	mov	r0, r5
  401ea0:	47b8      	blx	r7
  401ea2:	3001      	adds	r0, #1
  401ea4:	d0bf      	beq.n	401e26 <_printf_float+0x14e>
  401ea6:	f108 0801 	add.w	r8, r8, #1
  401eaa:	e7f1      	b.n	401e90 <_printf_float+0x1b8>
  401eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401eae:	2b00      	cmp	r3, #0
  401eb0:	dc29      	bgt.n	401f06 <_printf_float+0x22e>
  401eb2:	2301      	movs	r3, #1
  401eb4:	4a4b      	ldr	r2, [pc, #300]	; (401fe4 <_printf_float+0x30c>)
  401eb6:	4631      	mov	r1, r6
  401eb8:	4628      	mov	r0, r5
  401eba:	47b8      	blx	r7
  401ebc:	3001      	adds	r0, #1
  401ebe:	d0b2      	beq.n	401e26 <_printf_float+0x14e>
  401ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401ec2:	b923      	cbnz	r3, 401ece <_printf_float+0x1f6>
  401ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401ec6:	b913      	cbnz	r3, 401ece <_printf_float+0x1f6>
  401ec8:	6823      	ldr	r3, [r4, #0]
  401eca:	07d9      	lsls	r1, r3, #31
  401ecc:	d5cc      	bpl.n	401e68 <_printf_float+0x190>
  401ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401ed2:	4631      	mov	r1, r6
  401ed4:	4628      	mov	r0, r5
  401ed6:	47b8      	blx	r7
  401ed8:	3001      	adds	r0, #1
  401eda:	d0a4      	beq.n	401e26 <_printf_float+0x14e>
  401edc:	f04f 0900 	mov.w	r9, #0
  401ee0:	f104 0a1a 	add.w	sl, r4, #26
  401ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401ee6:	425b      	negs	r3, r3
  401ee8:	4599      	cmp	r9, r3
  401eea:	da09      	bge.n	401f00 <_printf_float+0x228>
  401eec:	2301      	movs	r3, #1
  401eee:	4652      	mov	r2, sl
  401ef0:	4631      	mov	r1, r6
  401ef2:	4628      	mov	r0, r5
  401ef4:	47b8      	blx	r7
  401ef6:	3001      	adds	r0, #1
  401ef8:	d095      	beq.n	401e26 <_printf_float+0x14e>
  401efa:	f109 0901 	add.w	r9, r9, #1
  401efe:	e7f1      	b.n	401ee4 <_printf_float+0x20c>
  401f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401f02:	4642      	mov	r2, r8
  401f04:	e0a7      	b.n	402056 <_printf_float+0x37e>
  401f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
  401f0a:	429a      	cmp	r2, r3
  401f0c:	bfa8      	it	ge
  401f0e:	461a      	movge	r2, r3
  401f10:	2a00      	cmp	r2, #0
  401f12:	4691      	mov	r9, r2
  401f14:	dc06      	bgt.n	401f24 <_printf_float+0x24c>
  401f16:	f04f 0a00 	mov.w	sl, #0
  401f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  401f1e:	f104 0b1a 	add.w	fp, r4, #26
  401f22:	e011      	b.n	401f48 <_printf_float+0x270>
  401f24:	4613      	mov	r3, r2
  401f26:	4631      	mov	r1, r6
  401f28:	4642      	mov	r2, r8
  401f2a:	4628      	mov	r0, r5
  401f2c:	47b8      	blx	r7
  401f2e:	3001      	adds	r0, #1
  401f30:	d1f1      	bne.n	401f16 <_printf_float+0x23e>
  401f32:	e778      	b.n	401e26 <_printf_float+0x14e>
  401f34:	2301      	movs	r3, #1
  401f36:	465a      	mov	r2, fp
  401f38:	4631      	mov	r1, r6
  401f3a:	4628      	mov	r0, r5
  401f3c:	47b8      	blx	r7
  401f3e:	3001      	adds	r0, #1
  401f40:	f43f af71 	beq.w	401e26 <_printf_float+0x14e>
  401f44:	f10a 0a01 	add.w	sl, sl, #1
  401f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
  401f4a:	ebc9 0203 	rsb	r2, r9, r3
  401f4e:	4592      	cmp	sl, r2
  401f50:	dbf0      	blt.n	401f34 <_printf_float+0x25c>
  401f52:	eb08 0903 	add.w	r9, r8, r3
  401f56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401f5a:	429a      	cmp	r2, r3
  401f5c:	db0f      	blt.n	401f7e <_printf_float+0x2a6>
  401f5e:	6823      	ldr	r3, [r4, #0]
  401f60:	07da      	lsls	r2, r3, #31
  401f62:	d40c      	bmi.n	401f7e <_printf_float+0x2a6>
  401f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401f68:	4498      	add	r8, r3
  401f6a:	ebc9 0808 	rsb	r8, r9, r8
  401f6e:	1a9b      	subs	r3, r3, r2
  401f70:	4598      	cmp	r8, r3
  401f72:	bfa8      	it	ge
  401f74:	4698      	movge	r8, r3
  401f76:	f1b8 0f00 	cmp.w	r8, #0
  401f7a:	dc08      	bgt.n	401f8e <_printf_float+0x2b6>
  401f7c:	e00f      	b.n	401f9e <_printf_float+0x2c6>
  401f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
  401f82:	4631      	mov	r1, r6
  401f84:	4628      	mov	r0, r5
  401f86:	47b8      	blx	r7
  401f88:	3001      	adds	r0, #1
  401f8a:	d1eb      	bne.n	401f64 <_printf_float+0x28c>
  401f8c:	e74b      	b.n	401e26 <_printf_float+0x14e>
  401f8e:	4643      	mov	r3, r8
  401f90:	464a      	mov	r2, r9
  401f92:	4631      	mov	r1, r6
  401f94:	4628      	mov	r0, r5
  401f96:	47b8      	blx	r7
  401f98:	3001      	adds	r0, #1
  401f9a:	f43f af44 	beq.w	401e26 <_printf_float+0x14e>
  401f9e:	f04f 0900 	mov.w	r9, #0
  401fa2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  401fa6:	f104 0a1a 	add.w	sl, r4, #26
  401faa:	e009      	b.n	401fc0 <_printf_float+0x2e8>
  401fac:	2301      	movs	r3, #1
  401fae:	4652      	mov	r2, sl
  401fb0:	4631      	mov	r1, r6
  401fb2:	4628      	mov	r0, r5
  401fb4:	47b8      	blx	r7
  401fb6:	3001      	adds	r0, #1
  401fb8:	f43f af35 	beq.w	401e26 <_printf_float+0x14e>
  401fbc:	f109 0901 	add.w	r9, r9, #1
  401fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  401fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401fc4:	1a9b      	subs	r3, r3, r2
  401fc6:	ebc8 0303 	rsb	r3, r8, r3
  401fca:	4599      	cmp	r9, r3
  401fcc:	dbee      	blt.n	401fac <_printf_float+0x2d4>
  401fce:	e74b      	b.n	401e68 <_printf_float+0x190>
  401fd0:	7fefffff 	.word	0x7fefffff
  401fd4:	00405534 	.word	0x00405534
  401fd8:	00405538 	.word	0x00405538
  401fdc:	0040553c 	.word	0x0040553c
  401fe0:	00405540 	.word	0x00405540
  401fe4:	00405544 	.word	0x00405544
  401fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401fea:	2a01      	cmp	r2, #1
  401fec:	dc01      	bgt.n	401ff2 <_printf_float+0x31a>
  401fee:	07db      	lsls	r3, r3, #31
  401ff0:	d538      	bpl.n	402064 <_printf_float+0x38c>
  401ff2:	2301      	movs	r3, #1
  401ff4:	4642      	mov	r2, r8
  401ff6:	4631      	mov	r1, r6
  401ff8:	4628      	mov	r0, r5
  401ffa:	47b8      	blx	r7
  401ffc:	3001      	adds	r0, #1
  401ffe:	f43f af12 	beq.w	401e26 <_printf_float+0x14e>
  402002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402004:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402006:	4631      	mov	r1, r6
  402008:	4628      	mov	r0, r5
  40200a:	47b8      	blx	r7
  40200c:	3001      	adds	r0, #1
  40200e:	f43f af0a 	beq.w	401e26 <_printf_float+0x14e>
  402012:	2200      	movs	r2, #0
  402014:	2300      	movs	r3, #0
  402016:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40201a:	f002 fe87 	bl	404d2c <__aeabi_dcmpeq>
  40201e:	b120      	cbz	r0, 40202a <_printf_float+0x352>
  402020:	f04f 0800 	mov.w	r8, #0
  402024:	f104 091a 	add.w	r9, r4, #26
  402028:	e00e      	b.n	402048 <_printf_float+0x370>
  40202a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40202c:	f108 0201 	add.w	r2, r8, #1
  402030:	3b01      	subs	r3, #1
  402032:	e019      	b.n	402068 <_printf_float+0x390>
  402034:	2301      	movs	r3, #1
  402036:	464a      	mov	r2, r9
  402038:	4631      	mov	r1, r6
  40203a:	4628      	mov	r0, r5
  40203c:	47b8      	blx	r7
  40203e:	3001      	adds	r0, #1
  402040:	f43f aef1 	beq.w	401e26 <_printf_float+0x14e>
  402044:	f108 0801 	add.w	r8, r8, #1
  402048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40204a:	3b01      	subs	r3, #1
  40204c:	4598      	cmp	r8, r3
  40204e:	dbf1      	blt.n	402034 <_printf_float+0x35c>
  402050:	4653      	mov	r3, sl
  402052:	f104 0250 	add.w	r2, r4, #80	; 0x50
  402056:	4631      	mov	r1, r6
  402058:	4628      	mov	r0, r5
  40205a:	47b8      	blx	r7
  40205c:	3001      	adds	r0, #1
  40205e:	f47f af03 	bne.w	401e68 <_printf_float+0x190>
  402062:	e6e0      	b.n	401e26 <_printf_float+0x14e>
  402064:	2301      	movs	r3, #1
  402066:	4642      	mov	r2, r8
  402068:	4631      	mov	r1, r6
  40206a:	4628      	mov	r0, r5
  40206c:	47b8      	blx	r7
  40206e:	3001      	adds	r0, #1
  402070:	d1ee      	bne.n	402050 <_printf_float+0x378>
  402072:	e6d8      	b.n	401e26 <_printf_float+0x14e>
  402074:	2301      	movs	r3, #1
  402076:	464a      	mov	r2, r9
  402078:	4631      	mov	r1, r6
  40207a:	4628      	mov	r0, r5
  40207c:	47b8      	blx	r7
  40207e:	3001      	adds	r0, #1
  402080:	f43f aed1 	beq.w	401e26 <_printf_float+0x14e>
  402084:	f108 0801 	add.w	r8, r8, #1
  402088:	68e3      	ldr	r3, [r4, #12]
  40208a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40208c:	1a9b      	subs	r3, r3, r2
  40208e:	4598      	cmp	r8, r3
  402090:	dbf0      	blt.n	402074 <_printf_float+0x39c>
  402092:	68e0      	ldr	r0, [r4, #12]
  402094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402096:	4298      	cmp	r0, r3
  402098:	bfb8      	it	lt
  40209a:	4618      	movlt	r0, r3
  40209c:	e05d      	b.n	40215a <_printf_float+0x482>
  40209e:	6862      	ldr	r2, [r4, #4]
  4020a0:	1c53      	adds	r3, r2, #1
  4020a2:	a80e      	add	r0, sp, #56	; 0x38
  4020a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  4020a8:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  4020ac:	f47f ae74 	bne.w	401d98 <_printf_float+0xc0>
  4020b0:	2206      	movs	r2, #6
  4020b2:	e001      	b.n	4020b8 <_printf_float+0x3e0>
  4020b4:	b912      	cbnz	r2, 4020bc <_printf_float+0x3e4>
  4020b6:	2201      	movs	r2, #1
  4020b8:	6062      	str	r2, [r4, #4]
  4020ba:	e675      	b.n	401da8 <_printf_float+0xd0>
  4020bc:	2100      	movs	r1, #0
  4020be:	9106      	str	r1, [sp, #24]
  4020c0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  4020c4:	e88d 000c 	stmia.w	sp, {r2, r3}
  4020c8:	6023      	str	r3, [r4, #0]
  4020ca:	9005      	str	r0, [sp, #20]
  4020cc:	4642      	mov	r2, r8
  4020ce:	f8cd 9010 	str.w	r9, [sp, #16]
  4020d2:	f8cd e00c 	str.w	lr, [sp, #12]
  4020d6:	9102      	str	r1, [sp, #8]
  4020d8:	4653      	mov	r3, sl
  4020da:	4628      	mov	r0, r5
  4020dc:	f7ff fd6c 	bl	401bb8 <__cvt>
  4020e0:	4680      	mov	r8, r0
  4020e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4020e4:	1cd8      	adds	r0, r3, #3
  4020e6:	db02      	blt.n	4020ee <_printf_float+0x416>
  4020e8:	6862      	ldr	r2, [r4, #4]
  4020ea:	4293      	cmp	r3, r2
  4020ec:	dd1d      	ble.n	40212a <_printf_float+0x452>
  4020ee:	f1a9 0902 	sub.w	r9, r9, #2
  4020f2:	fa5f f989 	uxtb.w	r9, r9
  4020f6:	e670      	b.n	401dda <_printf_float+0x102>
  4020f8:	3301      	adds	r3, #1
  4020fa:	6123      	str	r3, [r4, #16]
  4020fc:	e684      	b.n	401e08 <_printf_float+0x130>
  4020fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  402102:	d114      	bne.n	40212e <_printf_float+0x456>
  402104:	2900      	cmp	r1, #0
  402106:	6863      	ldr	r3, [r4, #4]
  402108:	dd07      	ble.n	40211a <_printf_float+0x442>
  40210a:	6121      	str	r1, [r4, #16]
  40210c:	b913      	cbnz	r3, 402114 <_printf_float+0x43c>
  40210e:	6822      	ldr	r2, [r4, #0]
  402110:	07d2      	lsls	r2, r2, #31
  402112:	d51d      	bpl.n	402150 <_printf_float+0x478>
  402114:	3301      	adds	r3, #1
  402116:	440b      	add	r3, r1
  402118:	e019      	b.n	40214e <_printf_float+0x476>
  40211a:	b913      	cbnz	r3, 402122 <_printf_float+0x44a>
  40211c:	6822      	ldr	r2, [r4, #0]
  40211e:	07d0      	lsls	r0, r2, #31
  402120:	d501      	bpl.n	402126 <_printf_float+0x44e>
  402122:	3302      	adds	r3, #2
  402124:	e013      	b.n	40214e <_printf_float+0x476>
  402126:	2301      	movs	r3, #1
  402128:	e011      	b.n	40214e <_printf_float+0x476>
  40212a:	f04f 0967 	mov.w	r9, #103	; 0x67
  40212e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402130:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402132:	4293      	cmp	r3, r2
  402134:	db05      	blt.n	402142 <_printf_float+0x46a>
  402136:	6822      	ldr	r2, [r4, #0]
  402138:	6123      	str	r3, [r4, #16]
  40213a:	07d1      	lsls	r1, r2, #31
  40213c:	d508      	bpl.n	402150 <_printf_float+0x478>
  40213e:	3301      	adds	r3, #1
  402140:	e005      	b.n	40214e <_printf_float+0x476>
  402142:	2b00      	cmp	r3, #0
  402144:	bfd4      	ite	le
  402146:	f1c3 0302 	rsble	r3, r3, #2
  40214a:	2301      	movgt	r3, #1
  40214c:	4413      	add	r3, r2
  40214e:	6123      	str	r3, [r4, #16]
  402150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402152:	65a3      	str	r3, [r4, #88]	; 0x58
  402154:	f04f 0a00 	mov.w	sl, #0
  402158:	e656      	b.n	401e08 <_printf_float+0x130>
  40215a:	b011      	add	sp, #68	; 0x44
  40215c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402160 <_printf_common>:
  402160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402164:	4691      	mov	r9, r2
  402166:	461f      	mov	r7, r3
  402168:	690a      	ldr	r2, [r1, #16]
  40216a:	688b      	ldr	r3, [r1, #8]
  40216c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402170:	4293      	cmp	r3, r2
  402172:	bfb8      	it	lt
  402174:	4613      	movlt	r3, r2
  402176:	f8c9 3000 	str.w	r3, [r9]
  40217a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  40217e:	4606      	mov	r6, r0
  402180:	460c      	mov	r4, r1
  402182:	b112      	cbz	r2, 40218a <_printf_common+0x2a>
  402184:	3301      	adds	r3, #1
  402186:	f8c9 3000 	str.w	r3, [r9]
  40218a:	6823      	ldr	r3, [r4, #0]
  40218c:	0699      	lsls	r1, r3, #26
  40218e:	bf42      	ittt	mi
  402190:	f8d9 3000 	ldrmi.w	r3, [r9]
  402194:	3302      	addmi	r3, #2
  402196:	f8c9 3000 	strmi.w	r3, [r9]
  40219a:	6825      	ldr	r5, [r4, #0]
  40219c:	f015 0506 	ands.w	r5, r5, #6
  4021a0:	d110      	bne.n	4021c4 <_printf_common+0x64>
  4021a2:	f104 0a19 	add.w	sl, r4, #25
  4021a6:	e007      	b.n	4021b8 <_printf_common+0x58>
  4021a8:	2301      	movs	r3, #1
  4021aa:	4652      	mov	r2, sl
  4021ac:	4639      	mov	r1, r7
  4021ae:	4630      	mov	r0, r6
  4021b0:	47c0      	blx	r8
  4021b2:	3001      	adds	r0, #1
  4021b4:	d01a      	beq.n	4021ec <_printf_common+0x8c>
  4021b6:	3501      	adds	r5, #1
  4021b8:	68e3      	ldr	r3, [r4, #12]
  4021ba:	f8d9 2000 	ldr.w	r2, [r9]
  4021be:	1a9b      	subs	r3, r3, r2
  4021c0:	429d      	cmp	r5, r3
  4021c2:	dbf1      	blt.n	4021a8 <_printf_common+0x48>
  4021c4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  4021c8:	6822      	ldr	r2, [r4, #0]
  4021ca:	3300      	adds	r3, #0
  4021cc:	bf18      	it	ne
  4021ce:	2301      	movne	r3, #1
  4021d0:	0692      	lsls	r2, r2, #26
  4021d2:	d50f      	bpl.n	4021f4 <_printf_common+0x94>
  4021d4:	18e1      	adds	r1, r4, r3
  4021d6:	1c5a      	adds	r2, r3, #1
  4021d8:	2030      	movs	r0, #48	; 0x30
  4021da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  4021de:	4422      	add	r2, r4
  4021e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  4021e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  4021e8:	3302      	adds	r3, #2
  4021ea:	e003      	b.n	4021f4 <_printf_common+0x94>
  4021ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4021f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4021f8:	4639      	mov	r1, r7
  4021fa:	4630      	mov	r0, r6
  4021fc:	47c0      	blx	r8
  4021fe:	3001      	adds	r0, #1
  402200:	d0f4      	beq.n	4021ec <_printf_common+0x8c>
  402202:	6822      	ldr	r2, [r4, #0]
  402204:	f8d9 5000 	ldr.w	r5, [r9]
  402208:	68e3      	ldr	r3, [r4, #12]
  40220a:	f002 0206 	and.w	r2, r2, #6
  40220e:	2a04      	cmp	r2, #4
  402210:	bf08      	it	eq
  402212:	1b5d      	subeq	r5, r3, r5
  402214:	6922      	ldr	r2, [r4, #16]
  402216:	68a3      	ldr	r3, [r4, #8]
  402218:	bf0c      	ite	eq
  40221a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  40221e:	2500      	movne	r5, #0
  402220:	4293      	cmp	r3, r2
  402222:	bfc4      	itt	gt
  402224:	1a9b      	subgt	r3, r3, r2
  402226:	18ed      	addgt	r5, r5, r3
  402228:	f04f 0900 	mov.w	r9, #0
  40222c:	341a      	adds	r4, #26
  40222e:	454d      	cmp	r5, r9
  402230:	d009      	beq.n	402246 <_printf_common+0xe6>
  402232:	2301      	movs	r3, #1
  402234:	4622      	mov	r2, r4
  402236:	4639      	mov	r1, r7
  402238:	4630      	mov	r0, r6
  40223a:	47c0      	blx	r8
  40223c:	3001      	adds	r0, #1
  40223e:	d0d5      	beq.n	4021ec <_printf_common+0x8c>
  402240:	f109 0901 	add.w	r9, r9, #1
  402244:	e7f3      	b.n	40222e <_printf_common+0xce>
  402246:	2000      	movs	r0, #0
  402248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040224c <_printf_i>:
  40224c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402250:	4617      	mov	r7, r2
  402252:	7e0a      	ldrb	r2, [r1, #24]
  402254:	b085      	sub	sp, #20
  402256:	2a6e      	cmp	r2, #110	; 0x6e
  402258:	4698      	mov	r8, r3
  40225a:	4606      	mov	r6, r0
  40225c:	460c      	mov	r4, r1
  40225e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402260:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402264:	f000 80ae 	beq.w	4023c4 <_printf_i+0x178>
  402268:	d811      	bhi.n	40228e <_printf_i+0x42>
  40226a:	2a63      	cmp	r2, #99	; 0x63
  40226c:	d022      	beq.n	4022b4 <_printf_i+0x68>
  40226e:	d809      	bhi.n	402284 <_printf_i+0x38>
  402270:	2a00      	cmp	r2, #0
  402272:	f000 80bb 	beq.w	4023ec <_printf_i+0x1a0>
  402276:	2a58      	cmp	r2, #88	; 0x58
  402278:	f040 80ca 	bne.w	402410 <_printf_i+0x1c4>
  40227c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402280:	4983      	ldr	r1, [pc, #524]	; (402490 <_printf_i+0x244>)
  402282:	e055      	b.n	402330 <_printf_i+0xe4>
  402284:	2a64      	cmp	r2, #100	; 0x64
  402286:	d01e      	beq.n	4022c6 <_printf_i+0x7a>
  402288:	2a69      	cmp	r2, #105	; 0x69
  40228a:	d01c      	beq.n	4022c6 <_printf_i+0x7a>
  40228c:	e0c0      	b.n	402410 <_printf_i+0x1c4>
  40228e:	2a73      	cmp	r2, #115	; 0x73
  402290:	f000 80b0 	beq.w	4023f4 <_printf_i+0x1a8>
  402294:	d809      	bhi.n	4022aa <_printf_i+0x5e>
  402296:	2a6f      	cmp	r2, #111	; 0x6f
  402298:	d02e      	beq.n	4022f8 <_printf_i+0xac>
  40229a:	2a70      	cmp	r2, #112	; 0x70
  40229c:	f040 80b8 	bne.w	402410 <_printf_i+0x1c4>
  4022a0:	680a      	ldr	r2, [r1, #0]
  4022a2:	f042 0220 	orr.w	r2, r2, #32
  4022a6:	600a      	str	r2, [r1, #0]
  4022a8:	e03e      	b.n	402328 <_printf_i+0xdc>
  4022aa:	2a75      	cmp	r2, #117	; 0x75
  4022ac:	d024      	beq.n	4022f8 <_printf_i+0xac>
  4022ae:	2a78      	cmp	r2, #120	; 0x78
  4022b0:	d03a      	beq.n	402328 <_printf_i+0xdc>
  4022b2:	e0ad      	b.n	402410 <_printf_i+0x1c4>
  4022b4:	681a      	ldr	r2, [r3, #0]
  4022b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
  4022ba:	1d11      	adds	r1, r2, #4
  4022bc:	6019      	str	r1, [r3, #0]
  4022be:	6813      	ldr	r3, [r2, #0]
  4022c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  4022c4:	e0a8      	b.n	402418 <_printf_i+0x1cc>
  4022c6:	6821      	ldr	r1, [r4, #0]
  4022c8:	681a      	ldr	r2, [r3, #0]
  4022ca:	f011 0f80 	tst.w	r1, #128	; 0x80
  4022ce:	d002      	beq.n	4022d6 <_printf_i+0x8a>
  4022d0:	1d11      	adds	r1, r2, #4
  4022d2:	6019      	str	r1, [r3, #0]
  4022d4:	e008      	b.n	4022e8 <_printf_i+0x9c>
  4022d6:	f011 0f40 	tst.w	r1, #64	; 0x40
  4022da:	f102 0104 	add.w	r1, r2, #4
  4022de:	6019      	str	r1, [r3, #0]
  4022e0:	d002      	beq.n	4022e8 <_printf_i+0x9c>
  4022e2:	f9b2 3000 	ldrsh.w	r3, [r2]
  4022e6:	e000      	b.n	4022ea <_printf_i+0x9e>
  4022e8:	6813      	ldr	r3, [r2, #0]
  4022ea:	2b00      	cmp	r3, #0
  4022ec:	da3c      	bge.n	402368 <_printf_i+0x11c>
  4022ee:	222d      	movs	r2, #45	; 0x2d
  4022f0:	425b      	negs	r3, r3
  4022f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  4022f6:	e037      	b.n	402368 <_printf_i+0x11c>
  4022f8:	6821      	ldr	r1, [r4, #0]
  4022fa:	681a      	ldr	r2, [r3, #0]
  4022fc:	f011 0f80 	tst.w	r1, #128	; 0x80
  402300:	d002      	beq.n	402308 <_printf_i+0xbc>
  402302:	1d11      	adds	r1, r2, #4
  402304:	6019      	str	r1, [r3, #0]
  402306:	e007      	b.n	402318 <_printf_i+0xcc>
  402308:	f011 0f40 	tst.w	r1, #64	; 0x40
  40230c:	f102 0104 	add.w	r1, r2, #4
  402310:	6019      	str	r1, [r3, #0]
  402312:	d001      	beq.n	402318 <_printf_i+0xcc>
  402314:	8813      	ldrh	r3, [r2, #0]
  402316:	e000      	b.n	40231a <_printf_i+0xce>
  402318:	6813      	ldr	r3, [r2, #0]
  40231a:	7e22      	ldrb	r2, [r4, #24]
  40231c:	495c      	ldr	r1, [pc, #368]	; (402490 <_printf_i+0x244>)
  40231e:	2a6f      	cmp	r2, #111	; 0x6f
  402320:	bf14      	ite	ne
  402322:	220a      	movne	r2, #10
  402324:	2208      	moveq	r2, #8
  402326:	e01b      	b.n	402360 <_printf_i+0x114>
  402328:	2278      	movs	r2, #120	; 0x78
  40232a:	495a      	ldr	r1, [pc, #360]	; (402494 <_printf_i+0x248>)
  40232c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402330:	6822      	ldr	r2, [r4, #0]
  402332:	6818      	ldr	r0, [r3, #0]
  402334:	f012 0f80 	tst.w	r2, #128	; 0x80
  402338:	f100 0504 	add.w	r5, r0, #4
  40233c:	601d      	str	r5, [r3, #0]
  40233e:	d103      	bne.n	402348 <_printf_i+0xfc>
  402340:	0655      	lsls	r5, r2, #25
  402342:	d501      	bpl.n	402348 <_printf_i+0xfc>
  402344:	8803      	ldrh	r3, [r0, #0]
  402346:	e000      	b.n	40234a <_printf_i+0xfe>
  402348:	6803      	ldr	r3, [r0, #0]
  40234a:	07d0      	lsls	r0, r2, #31
  40234c:	bf44      	itt	mi
  40234e:	f042 0220 	orrmi.w	r2, r2, #32
  402352:	6022      	strmi	r2, [r4, #0]
  402354:	b91b      	cbnz	r3, 40235e <_printf_i+0x112>
  402356:	6822      	ldr	r2, [r4, #0]
  402358:	f022 0220 	bic.w	r2, r2, #32
  40235c:	6022      	str	r2, [r4, #0]
  40235e:	2210      	movs	r2, #16
  402360:	2000      	movs	r0, #0
  402362:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402366:	e001      	b.n	40236c <_printf_i+0x120>
  402368:	4949      	ldr	r1, [pc, #292]	; (402490 <_printf_i+0x244>)
  40236a:	220a      	movs	r2, #10
  40236c:	6865      	ldr	r5, [r4, #4]
  40236e:	60a5      	str	r5, [r4, #8]
  402370:	2d00      	cmp	r5, #0
  402372:	db08      	blt.n	402386 <_printf_i+0x13a>
  402374:	6820      	ldr	r0, [r4, #0]
  402376:	f020 0004 	bic.w	r0, r0, #4
  40237a:	6020      	str	r0, [r4, #0]
  40237c:	b92b      	cbnz	r3, 40238a <_printf_i+0x13e>
  40237e:	2d00      	cmp	r5, #0
  402380:	d17d      	bne.n	40247e <_printf_i+0x232>
  402382:	4675      	mov	r5, lr
  402384:	e00c      	b.n	4023a0 <_printf_i+0x154>
  402386:	2b00      	cmp	r3, #0
  402388:	d079      	beq.n	40247e <_printf_i+0x232>
  40238a:	4675      	mov	r5, lr
  40238c:	fbb3 f0f2 	udiv	r0, r3, r2
  402390:	fb02 3310 	mls	r3, r2, r0, r3
  402394:	5ccb      	ldrb	r3, [r1, r3]
  402396:	f805 3d01 	strb.w	r3, [r5, #-1]!
  40239a:	4603      	mov	r3, r0
  40239c:	2800      	cmp	r0, #0
  40239e:	d1f5      	bne.n	40238c <_printf_i+0x140>
  4023a0:	2a08      	cmp	r2, #8
  4023a2:	d10b      	bne.n	4023bc <_printf_i+0x170>
  4023a4:	6823      	ldr	r3, [r4, #0]
  4023a6:	07da      	lsls	r2, r3, #31
  4023a8:	d508      	bpl.n	4023bc <_printf_i+0x170>
  4023aa:	6923      	ldr	r3, [r4, #16]
  4023ac:	6862      	ldr	r2, [r4, #4]
  4023ae:	429a      	cmp	r2, r3
  4023b0:	bfde      	ittt	le
  4023b2:	2330      	movle	r3, #48	; 0x30
  4023b4:	f805 3c01 	strble.w	r3, [r5, #-1]
  4023b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  4023bc:	ebc5 030e 	rsb	r3, r5, lr
  4023c0:	6123      	str	r3, [r4, #16]
  4023c2:	e02e      	b.n	402422 <_printf_i+0x1d6>
  4023c4:	6808      	ldr	r0, [r1, #0]
  4023c6:	681a      	ldr	r2, [r3, #0]
  4023c8:	6949      	ldr	r1, [r1, #20]
  4023ca:	f010 0f80 	tst.w	r0, #128	; 0x80
  4023ce:	d003      	beq.n	4023d8 <_printf_i+0x18c>
  4023d0:	1d10      	adds	r0, r2, #4
  4023d2:	6018      	str	r0, [r3, #0]
  4023d4:	6813      	ldr	r3, [r2, #0]
  4023d6:	e008      	b.n	4023ea <_printf_i+0x19e>
  4023d8:	f010 0f40 	tst.w	r0, #64	; 0x40
  4023dc:	f102 0004 	add.w	r0, r2, #4
  4023e0:	6018      	str	r0, [r3, #0]
  4023e2:	6813      	ldr	r3, [r2, #0]
  4023e4:	d001      	beq.n	4023ea <_printf_i+0x19e>
  4023e6:	8019      	strh	r1, [r3, #0]
  4023e8:	e000      	b.n	4023ec <_printf_i+0x1a0>
  4023ea:	6019      	str	r1, [r3, #0]
  4023ec:	2300      	movs	r3, #0
  4023ee:	6123      	str	r3, [r4, #16]
  4023f0:	4675      	mov	r5, lr
  4023f2:	e016      	b.n	402422 <_printf_i+0x1d6>
  4023f4:	681a      	ldr	r2, [r3, #0]
  4023f6:	1d11      	adds	r1, r2, #4
  4023f8:	6019      	str	r1, [r3, #0]
  4023fa:	6815      	ldr	r5, [r2, #0]
  4023fc:	6862      	ldr	r2, [r4, #4]
  4023fe:	2100      	movs	r1, #0
  402400:	4628      	mov	r0, r5
  402402:	f001 fa65 	bl	4038d0 <memchr>
  402406:	b108      	cbz	r0, 40240c <_printf_i+0x1c0>
  402408:	1b40      	subs	r0, r0, r5
  40240a:	6060      	str	r0, [r4, #4]
  40240c:	6863      	ldr	r3, [r4, #4]
  40240e:	e004      	b.n	40241a <_printf_i+0x1ce>
  402410:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402414:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402418:	2301      	movs	r3, #1
  40241a:	6123      	str	r3, [r4, #16]
  40241c:	2300      	movs	r3, #0
  40241e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402422:	f8cd 8000 	str.w	r8, [sp]
  402426:	463b      	mov	r3, r7
  402428:	aa03      	add	r2, sp, #12
  40242a:	4621      	mov	r1, r4
  40242c:	4630      	mov	r0, r6
  40242e:	f7ff fe97 	bl	402160 <_printf_common>
  402432:	3001      	adds	r0, #1
  402434:	d102      	bne.n	40243c <_printf_i+0x1f0>
  402436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40243a:	e026      	b.n	40248a <_printf_i+0x23e>
  40243c:	6923      	ldr	r3, [r4, #16]
  40243e:	462a      	mov	r2, r5
  402440:	4639      	mov	r1, r7
  402442:	4630      	mov	r0, r6
  402444:	47c0      	blx	r8
  402446:	3001      	adds	r0, #1
  402448:	d0f5      	beq.n	402436 <_printf_i+0x1ea>
  40244a:	6823      	ldr	r3, [r4, #0]
  40244c:	079b      	lsls	r3, r3, #30
  40244e:	d510      	bpl.n	402472 <_printf_i+0x226>
  402450:	2500      	movs	r5, #0
  402452:	f104 0919 	add.w	r9, r4, #25
  402456:	e007      	b.n	402468 <_printf_i+0x21c>
  402458:	2301      	movs	r3, #1
  40245a:	464a      	mov	r2, r9
  40245c:	4639      	mov	r1, r7
  40245e:	4630      	mov	r0, r6
  402460:	47c0      	blx	r8
  402462:	3001      	adds	r0, #1
  402464:	d0e7      	beq.n	402436 <_printf_i+0x1ea>
  402466:	3501      	adds	r5, #1
  402468:	68e3      	ldr	r3, [r4, #12]
  40246a:	9a03      	ldr	r2, [sp, #12]
  40246c:	1a9b      	subs	r3, r3, r2
  40246e:	429d      	cmp	r5, r3
  402470:	dbf2      	blt.n	402458 <_printf_i+0x20c>
  402472:	68e0      	ldr	r0, [r4, #12]
  402474:	9b03      	ldr	r3, [sp, #12]
  402476:	4298      	cmp	r0, r3
  402478:	bfb8      	it	lt
  40247a:	4618      	movlt	r0, r3
  40247c:	e005      	b.n	40248a <_printf_i+0x23e>
  40247e:	780b      	ldrb	r3, [r1, #0]
  402480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402484:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402488:	e78a      	b.n	4023a0 <_printf_i+0x154>
  40248a:	b005      	add	sp, #20
  40248c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402490:	00405546 	.word	0x00405546
  402494:	00405557 	.word	0x00405557

00402498 <iprintf>:
  402498:	b40f      	push	{r0, r1, r2, r3}
  40249a:	4b0a      	ldr	r3, [pc, #40]	; (4024c4 <iprintf+0x2c>)
  40249c:	b513      	push	{r0, r1, r4, lr}
  40249e:	681c      	ldr	r4, [r3, #0]
  4024a0:	b124      	cbz	r4, 4024ac <iprintf+0x14>
  4024a2:	69a3      	ldr	r3, [r4, #24]
  4024a4:	b913      	cbnz	r3, 4024ac <iprintf+0x14>
  4024a6:	4620      	mov	r0, r4
  4024a8:	f001 f90c 	bl	4036c4 <__sinit>
  4024ac:	ab05      	add	r3, sp, #20
  4024ae:	9a04      	ldr	r2, [sp, #16]
  4024b0:	68a1      	ldr	r1, [r4, #8]
  4024b2:	9301      	str	r3, [sp, #4]
  4024b4:	4620      	mov	r0, r4
  4024b6:	f001 fe1f 	bl	4040f8 <_vfiprintf_r>
  4024ba:	b002      	add	sp, #8
  4024bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4024c0:	b004      	add	sp, #16
  4024c2:	4770      	bx	lr
  4024c4:	20000074 	.word	0x20000074

004024c8 <_puts_r>:
  4024c8:	b570      	push	{r4, r5, r6, lr}
  4024ca:	460e      	mov	r6, r1
  4024cc:	4605      	mov	r5, r0
  4024ce:	b118      	cbz	r0, 4024d8 <_puts_r+0x10>
  4024d0:	6983      	ldr	r3, [r0, #24]
  4024d2:	b90b      	cbnz	r3, 4024d8 <_puts_r+0x10>
  4024d4:	f001 f8f6 	bl	4036c4 <__sinit>
  4024d8:	69ab      	ldr	r3, [r5, #24]
  4024da:	68ac      	ldr	r4, [r5, #8]
  4024dc:	b913      	cbnz	r3, 4024e4 <_puts_r+0x1c>
  4024de:	4628      	mov	r0, r5
  4024e0:	f001 f8f0 	bl	4036c4 <__sinit>
  4024e4:	4b22      	ldr	r3, [pc, #136]	; (402570 <_puts_r+0xa8>)
  4024e6:	429c      	cmp	r4, r3
  4024e8:	d101      	bne.n	4024ee <_puts_r+0x26>
  4024ea:	686c      	ldr	r4, [r5, #4]
  4024ec:	e008      	b.n	402500 <_puts_r+0x38>
  4024ee:	4b21      	ldr	r3, [pc, #132]	; (402574 <_puts_r+0xac>)
  4024f0:	429c      	cmp	r4, r3
  4024f2:	d101      	bne.n	4024f8 <_puts_r+0x30>
  4024f4:	68ac      	ldr	r4, [r5, #8]
  4024f6:	e003      	b.n	402500 <_puts_r+0x38>
  4024f8:	4b1f      	ldr	r3, [pc, #124]	; (402578 <_puts_r+0xb0>)
  4024fa:	429c      	cmp	r4, r3
  4024fc:	bf08      	it	eq
  4024fe:	68ec      	ldreq	r4, [r5, #12]
  402500:	89a3      	ldrh	r3, [r4, #12]
  402502:	071b      	lsls	r3, r3, #28
  402504:	d501      	bpl.n	40250a <_puts_r+0x42>
  402506:	6923      	ldr	r3, [r4, #16]
  402508:	b93b      	cbnz	r3, 40251a <_puts_r+0x52>
  40250a:	4621      	mov	r1, r4
  40250c:	4628      	mov	r0, r5
  40250e:	f000 f94b 	bl	4027a8 <__swsetup_r>
  402512:	b110      	cbz	r0, 40251a <_puts_r+0x52>
  402514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402518:	bd70      	pop	{r4, r5, r6, pc}
  40251a:	3e01      	subs	r6, #1
  40251c:	68a3      	ldr	r3, [r4, #8]
  40251e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  402522:	3b01      	subs	r3, #1
  402524:	60a3      	str	r3, [r4, #8]
  402526:	b191      	cbz	r1, 40254e <_puts_r+0x86>
  402528:	2b00      	cmp	r3, #0
  40252a:	da04      	bge.n	402536 <_puts_r+0x6e>
  40252c:	69a2      	ldr	r2, [r4, #24]
  40252e:	4293      	cmp	r3, r2
  402530:	db06      	blt.n	402540 <_puts_r+0x78>
  402532:	290a      	cmp	r1, #10
  402534:	d004      	beq.n	402540 <_puts_r+0x78>
  402536:	6823      	ldr	r3, [r4, #0]
  402538:	1c5a      	adds	r2, r3, #1
  40253a:	6022      	str	r2, [r4, #0]
  40253c:	7019      	strb	r1, [r3, #0]
  40253e:	e7ed      	b.n	40251c <_puts_r+0x54>
  402540:	4622      	mov	r2, r4
  402542:	4628      	mov	r0, r5
  402544:	f000 f8dc 	bl	402700 <__swbuf_r>
  402548:	3001      	adds	r0, #1
  40254a:	d1e7      	bne.n	40251c <_puts_r+0x54>
  40254c:	e7e2      	b.n	402514 <_puts_r+0x4c>
  40254e:	2b00      	cmp	r3, #0
  402550:	da08      	bge.n	402564 <_puts_r+0x9c>
  402552:	4622      	mov	r2, r4
  402554:	210a      	movs	r1, #10
  402556:	4628      	mov	r0, r5
  402558:	f000 f8d2 	bl	402700 <__swbuf_r>
  40255c:	3001      	adds	r0, #1
  40255e:	d0d9      	beq.n	402514 <_puts_r+0x4c>
  402560:	200a      	movs	r0, #10
  402562:	bd70      	pop	{r4, r5, r6, pc}
  402564:	6823      	ldr	r3, [r4, #0]
  402566:	200a      	movs	r0, #10
  402568:	1c5a      	adds	r2, r3, #1
  40256a:	6022      	str	r2, [r4, #0]
  40256c:	7018      	strb	r0, [r3, #0]
  40256e:	bd70      	pop	{r4, r5, r6, pc}
  402570:	00405578 	.word	0x00405578
  402574:	00405598 	.word	0x00405598
  402578:	004055b8 	.word	0x004055b8

0040257c <puts>:
  40257c:	4b02      	ldr	r3, [pc, #8]	; (402588 <puts+0xc>)
  40257e:	4601      	mov	r1, r0
  402580:	6818      	ldr	r0, [r3, #0]
  402582:	f7ff bfa1 	b.w	4024c8 <_puts_r>
  402586:	bf00      	nop
  402588:	20000074 	.word	0x20000074

0040258c <setbuf>:
  40258c:	2900      	cmp	r1, #0
  40258e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402592:	bf0c      	ite	eq
  402594:	2202      	moveq	r2, #2
  402596:	2200      	movne	r2, #0
  402598:	f000 b800 	b.w	40259c <setvbuf>

0040259c <setvbuf>:
  40259c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  4025a0:	461d      	mov	r5, r3
  4025a2:	4b4f      	ldr	r3, [pc, #316]	; (4026e0 <setvbuf+0x144>)
  4025a4:	681e      	ldr	r6, [r3, #0]
  4025a6:	4604      	mov	r4, r0
  4025a8:	460f      	mov	r7, r1
  4025aa:	4690      	mov	r8, r2
  4025ac:	b126      	cbz	r6, 4025b8 <setvbuf+0x1c>
  4025ae:	69b3      	ldr	r3, [r6, #24]
  4025b0:	b913      	cbnz	r3, 4025b8 <setvbuf+0x1c>
  4025b2:	4630      	mov	r0, r6
  4025b4:	f001 f886 	bl	4036c4 <__sinit>
  4025b8:	4b4a      	ldr	r3, [pc, #296]	; (4026e4 <setvbuf+0x148>)
  4025ba:	429c      	cmp	r4, r3
  4025bc:	d101      	bne.n	4025c2 <setvbuf+0x26>
  4025be:	6874      	ldr	r4, [r6, #4]
  4025c0:	e008      	b.n	4025d4 <setvbuf+0x38>
  4025c2:	4b49      	ldr	r3, [pc, #292]	; (4026e8 <setvbuf+0x14c>)
  4025c4:	429c      	cmp	r4, r3
  4025c6:	d101      	bne.n	4025cc <setvbuf+0x30>
  4025c8:	68b4      	ldr	r4, [r6, #8]
  4025ca:	e003      	b.n	4025d4 <setvbuf+0x38>
  4025cc:	4b47      	ldr	r3, [pc, #284]	; (4026ec <setvbuf+0x150>)
  4025ce:	429c      	cmp	r4, r3
  4025d0:	bf08      	it	eq
  4025d2:	68f4      	ldreq	r4, [r6, #12]
  4025d4:	f1b8 0f02 	cmp.w	r8, #2
  4025d8:	d004      	beq.n	4025e4 <setvbuf+0x48>
  4025da:	f1b8 0f01 	cmp.w	r8, #1
  4025de:	d879      	bhi.n	4026d4 <setvbuf+0x138>
  4025e0:	2d00      	cmp	r5, #0
  4025e2:	db77      	blt.n	4026d4 <setvbuf+0x138>
  4025e4:	4621      	mov	r1, r4
  4025e6:	4630      	mov	r0, r6
  4025e8:	f001 f802 	bl	4035f0 <_fflush_r>
  4025ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4025ee:	b141      	cbz	r1, 402602 <setvbuf+0x66>
  4025f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4025f4:	4299      	cmp	r1, r3
  4025f6:	d002      	beq.n	4025fe <setvbuf+0x62>
  4025f8:	4630      	mov	r0, r6
  4025fa:	f001 fca9 	bl	403f50 <_free_r>
  4025fe:	2300      	movs	r3, #0
  402600:	6363      	str	r3, [r4, #52]	; 0x34
  402602:	2300      	movs	r3, #0
  402604:	61a3      	str	r3, [r4, #24]
  402606:	6063      	str	r3, [r4, #4]
  402608:	89a3      	ldrh	r3, [r4, #12]
  40260a:	061b      	lsls	r3, r3, #24
  40260c:	d503      	bpl.n	402616 <setvbuf+0x7a>
  40260e:	6921      	ldr	r1, [r4, #16]
  402610:	4630      	mov	r0, r6
  402612:	f001 fc9d 	bl	403f50 <_free_r>
  402616:	89a3      	ldrh	r3, [r4, #12]
  402618:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40261c:	f023 0303 	bic.w	r3, r3, #3
  402620:	f1b8 0f02 	cmp.w	r8, #2
  402624:	81a3      	strh	r3, [r4, #12]
  402626:	d01e      	beq.n	402666 <setvbuf+0xca>
  402628:	ab01      	add	r3, sp, #4
  40262a:	466a      	mov	r2, sp
  40262c:	4621      	mov	r1, r4
  40262e:	4630      	mov	r0, r6
  402630:	f001 f8e0 	bl	4037f4 <__swhatbuf_r>
  402634:	89a3      	ldrh	r3, [r4, #12]
  402636:	4318      	orrs	r0, r3
  402638:	81a0      	strh	r0, [r4, #12]
  40263a:	b90d      	cbnz	r5, 402640 <setvbuf+0xa4>
  40263c:	9d00      	ldr	r5, [sp, #0]
  40263e:	e000      	b.n	402642 <setvbuf+0xa6>
  402640:	bb2f      	cbnz	r7, 40268e <setvbuf+0xf2>
  402642:	4628      	mov	r0, r5
  402644:	f001 f936 	bl	4038b4 <malloc>
  402648:	4607      	mov	r7, r0
  40264a:	b9d0      	cbnz	r0, 402682 <setvbuf+0xe6>
  40264c:	f8dd 9000 	ldr.w	r9, [sp]
  402650:	45a9      	cmp	r9, r5
  402652:	d102      	bne.n	40265a <setvbuf+0xbe>
  402654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402658:	e006      	b.n	402668 <setvbuf+0xcc>
  40265a:	4648      	mov	r0, r9
  40265c:	f001 f92a 	bl	4038b4 <malloc>
  402660:	4607      	mov	r7, r0
  402662:	b978      	cbnz	r0, 402684 <setvbuf+0xe8>
  402664:	e7f6      	b.n	402654 <setvbuf+0xb8>
  402666:	2000      	movs	r0, #0
  402668:	89a3      	ldrh	r3, [r4, #12]
  40266a:	f043 0302 	orr.w	r3, r3, #2
  40266e:	81a3      	strh	r3, [r4, #12]
  402670:	2300      	movs	r3, #0
  402672:	60a3      	str	r3, [r4, #8]
  402674:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402678:	6023      	str	r3, [r4, #0]
  40267a:	6123      	str	r3, [r4, #16]
  40267c:	2301      	movs	r3, #1
  40267e:	6163      	str	r3, [r4, #20]
  402680:	e02a      	b.n	4026d8 <setvbuf+0x13c>
  402682:	46a9      	mov	r9, r5
  402684:	89a3      	ldrh	r3, [r4, #12]
  402686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40268a:	81a3      	strh	r3, [r4, #12]
  40268c:	464d      	mov	r5, r9
  40268e:	69b3      	ldr	r3, [r6, #24]
  402690:	b913      	cbnz	r3, 402698 <setvbuf+0xfc>
  402692:	4630      	mov	r0, r6
  402694:	f001 f816 	bl	4036c4 <__sinit>
  402698:	f1b8 0f01 	cmp.w	r8, #1
  40269c:	bf08      	it	eq
  40269e:	89a3      	ldrheq	r3, [r4, #12]
  4026a0:	6027      	str	r7, [r4, #0]
  4026a2:	bf04      	itt	eq
  4026a4:	f043 0301 	orreq.w	r3, r3, #1
  4026a8:	81a3      	strheq	r3, [r4, #12]
  4026aa:	89a3      	ldrh	r3, [r4, #12]
  4026ac:	6127      	str	r7, [r4, #16]
  4026ae:	f003 0008 	and.w	r0, r3, #8
  4026b2:	b280      	uxth	r0, r0
  4026b4:	6165      	str	r5, [r4, #20]
  4026b6:	b158      	cbz	r0, 4026d0 <setvbuf+0x134>
  4026b8:	f013 0301 	ands.w	r3, r3, #1
  4026bc:	f04f 0000 	mov.w	r0, #0
  4026c0:	bf1d      	ittte	ne
  4026c2:	426d      	negne	r5, r5
  4026c4:	60a0      	strne	r0, [r4, #8]
  4026c6:	61a5      	strne	r5, [r4, #24]
  4026c8:	60a5      	streq	r5, [r4, #8]
  4026ca:	bf08      	it	eq
  4026cc:	4618      	moveq	r0, r3
  4026ce:	e003      	b.n	4026d8 <setvbuf+0x13c>
  4026d0:	60a0      	str	r0, [r4, #8]
  4026d2:	e001      	b.n	4026d8 <setvbuf+0x13c>
  4026d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4026d8:	b003      	add	sp, #12
  4026da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4026de:	bf00      	nop
  4026e0:	20000074 	.word	0x20000074
  4026e4:	00405578 	.word	0x00405578
  4026e8:	00405598 	.word	0x00405598
  4026ec:	004055b8 	.word	0x004055b8

004026f0 <strlen>:
  4026f0:	4603      	mov	r3, r0
  4026f2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4026f6:	2a00      	cmp	r2, #0
  4026f8:	d1fb      	bne.n	4026f2 <strlen+0x2>
  4026fa:	1a18      	subs	r0, r3, r0
  4026fc:	3801      	subs	r0, #1
  4026fe:	4770      	bx	lr

00402700 <__swbuf_r>:
  402700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402702:	460f      	mov	r7, r1
  402704:	4614      	mov	r4, r2
  402706:	4605      	mov	r5, r0
  402708:	b118      	cbz	r0, 402712 <__swbuf_r+0x12>
  40270a:	6983      	ldr	r3, [r0, #24]
  40270c:	b90b      	cbnz	r3, 402712 <__swbuf_r+0x12>
  40270e:	f000 ffd9 	bl	4036c4 <__sinit>
  402712:	4b22      	ldr	r3, [pc, #136]	; (40279c <__swbuf_r+0x9c>)
  402714:	429c      	cmp	r4, r3
  402716:	d101      	bne.n	40271c <__swbuf_r+0x1c>
  402718:	686c      	ldr	r4, [r5, #4]
  40271a:	e008      	b.n	40272e <__swbuf_r+0x2e>
  40271c:	4b20      	ldr	r3, [pc, #128]	; (4027a0 <__swbuf_r+0xa0>)
  40271e:	429c      	cmp	r4, r3
  402720:	d101      	bne.n	402726 <__swbuf_r+0x26>
  402722:	68ac      	ldr	r4, [r5, #8]
  402724:	e003      	b.n	40272e <__swbuf_r+0x2e>
  402726:	4b1f      	ldr	r3, [pc, #124]	; (4027a4 <__swbuf_r+0xa4>)
  402728:	429c      	cmp	r4, r3
  40272a:	bf08      	it	eq
  40272c:	68ec      	ldreq	r4, [r5, #12]
  40272e:	69a3      	ldr	r3, [r4, #24]
  402730:	60a3      	str	r3, [r4, #8]
  402732:	89a3      	ldrh	r3, [r4, #12]
  402734:	071a      	lsls	r2, r3, #28
  402736:	d509      	bpl.n	40274c <__swbuf_r+0x4c>
  402738:	6923      	ldr	r3, [r4, #16]
  40273a:	b13b      	cbz	r3, 40274c <__swbuf_r+0x4c>
  40273c:	6823      	ldr	r3, [r4, #0]
  40273e:	6920      	ldr	r0, [r4, #16]
  402740:	1a18      	subs	r0, r3, r0
  402742:	6963      	ldr	r3, [r4, #20]
  402744:	4298      	cmp	r0, r3
  402746:	b2fe      	uxtb	r6, r7
  402748:	db0f      	blt.n	40276a <__swbuf_r+0x6a>
  40274a:	e008      	b.n	40275e <__swbuf_r+0x5e>
  40274c:	4621      	mov	r1, r4
  40274e:	4628      	mov	r0, r5
  402750:	f000 f82a 	bl	4027a8 <__swsetup_r>
  402754:	2800      	cmp	r0, #0
  402756:	d0f1      	beq.n	40273c <__swbuf_r+0x3c>
  402758:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  40275c:	e01b      	b.n	402796 <__swbuf_r+0x96>
  40275e:	4621      	mov	r1, r4
  402760:	4628      	mov	r0, r5
  402762:	f000 ff45 	bl	4035f0 <_fflush_r>
  402766:	2800      	cmp	r0, #0
  402768:	d1f6      	bne.n	402758 <__swbuf_r+0x58>
  40276a:	68a3      	ldr	r3, [r4, #8]
  40276c:	3b01      	subs	r3, #1
  40276e:	60a3      	str	r3, [r4, #8]
  402770:	6823      	ldr	r3, [r4, #0]
  402772:	1c5a      	adds	r2, r3, #1
  402774:	6022      	str	r2, [r4, #0]
  402776:	701f      	strb	r7, [r3, #0]
  402778:	6963      	ldr	r3, [r4, #20]
  40277a:	3001      	adds	r0, #1
  40277c:	4298      	cmp	r0, r3
  40277e:	d004      	beq.n	40278a <__swbuf_r+0x8a>
  402780:	89a3      	ldrh	r3, [r4, #12]
  402782:	07db      	lsls	r3, r3, #31
  402784:	d507      	bpl.n	402796 <__swbuf_r+0x96>
  402786:	2e0a      	cmp	r6, #10
  402788:	d105      	bne.n	402796 <__swbuf_r+0x96>
  40278a:	4621      	mov	r1, r4
  40278c:	4628      	mov	r0, r5
  40278e:	f000 ff2f 	bl	4035f0 <_fflush_r>
  402792:	2800      	cmp	r0, #0
  402794:	d1e0      	bne.n	402758 <__swbuf_r+0x58>
  402796:	4630      	mov	r0, r6
  402798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40279a:	bf00      	nop
  40279c:	00405578 	.word	0x00405578
  4027a0:	00405598 	.word	0x00405598
  4027a4:	004055b8 	.word	0x004055b8

004027a8 <__swsetup_r>:
  4027a8:	4b32      	ldr	r3, [pc, #200]	; (402874 <__swsetup_r+0xcc>)
  4027aa:	b570      	push	{r4, r5, r6, lr}
  4027ac:	681d      	ldr	r5, [r3, #0]
  4027ae:	4606      	mov	r6, r0
  4027b0:	460c      	mov	r4, r1
  4027b2:	b125      	cbz	r5, 4027be <__swsetup_r+0x16>
  4027b4:	69ab      	ldr	r3, [r5, #24]
  4027b6:	b913      	cbnz	r3, 4027be <__swsetup_r+0x16>
  4027b8:	4628      	mov	r0, r5
  4027ba:	f000 ff83 	bl	4036c4 <__sinit>
  4027be:	4b2e      	ldr	r3, [pc, #184]	; (402878 <__swsetup_r+0xd0>)
  4027c0:	429c      	cmp	r4, r3
  4027c2:	d101      	bne.n	4027c8 <__swsetup_r+0x20>
  4027c4:	686c      	ldr	r4, [r5, #4]
  4027c6:	e008      	b.n	4027da <__swsetup_r+0x32>
  4027c8:	4b2c      	ldr	r3, [pc, #176]	; (40287c <__swsetup_r+0xd4>)
  4027ca:	429c      	cmp	r4, r3
  4027cc:	d101      	bne.n	4027d2 <__swsetup_r+0x2a>
  4027ce:	68ac      	ldr	r4, [r5, #8]
  4027d0:	e003      	b.n	4027da <__swsetup_r+0x32>
  4027d2:	4b2b      	ldr	r3, [pc, #172]	; (402880 <__swsetup_r+0xd8>)
  4027d4:	429c      	cmp	r4, r3
  4027d6:	bf08      	it	eq
  4027d8:	68ec      	ldreq	r4, [r5, #12]
  4027da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027de:	b29a      	uxth	r2, r3
  4027e0:	0715      	lsls	r5, r2, #28
  4027e2:	d41d      	bmi.n	402820 <__swsetup_r+0x78>
  4027e4:	06d0      	lsls	r0, r2, #27
  4027e6:	d402      	bmi.n	4027ee <__swsetup_r+0x46>
  4027e8:	2209      	movs	r2, #9
  4027ea:	6032      	str	r2, [r6, #0]
  4027ec:	e03a      	b.n	402864 <__swsetup_r+0xbc>
  4027ee:	0751      	lsls	r1, r2, #29
  4027f0:	d512      	bpl.n	402818 <__swsetup_r+0x70>
  4027f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4027f4:	b141      	cbz	r1, 402808 <__swsetup_r+0x60>
  4027f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4027fa:	4299      	cmp	r1, r3
  4027fc:	d002      	beq.n	402804 <__swsetup_r+0x5c>
  4027fe:	4630      	mov	r0, r6
  402800:	f001 fba6 	bl	403f50 <_free_r>
  402804:	2300      	movs	r3, #0
  402806:	6363      	str	r3, [r4, #52]	; 0x34
  402808:	89a3      	ldrh	r3, [r4, #12]
  40280a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  40280e:	81a3      	strh	r3, [r4, #12]
  402810:	2300      	movs	r3, #0
  402812:	6063      	str	r3, [r4, #4]
  402814:	6923      	ldr	r3, [r4, #16]
  402816:	6023      	str	r3, [r4, #0]
  402818:	89a3      	ldrh	r3, [r4, #12]
  40281a:	f043 0308 	orr.w	r3, r3, #8
  40281e:	81a3      	strh	r3, [r4, #12]
  402820:	6923      	ldr	r3, [r4, #16]
  402822:	b94b      	cbnz	r3, 402838 <__swsetup_r+0x90>
  402824:	89a3      	ldrh	r3, [r4, #12]
  402826:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40282a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40282e:	d003      	beq.n	402838 <__swsetup_r+0x90>
  402830:	4621      	mov	r1, r4
  402832:	4630      	mov	r0, r6
  402834:	f001 f802 	bl	40383c <__smakebuf_r>
  402838:	89a2      	ldrh	r2, [r4, #12]
  40283a:	f012 0301 	ands.w	r3, r2, #1
  40283e:	d005      	beq.n	40284c <__swsetup_r+0xa4>
  402840:	2300      	movs	r3, #0
  402842:	60a3      	str	r3, [r4, #8]
  402844:	6963      	ldr	r3, [r4, #20]
  402846:	425b      	negs	r3, r3
  402848:	61a3      	str	r3, [r4, #24]
  40284a:	e003      	b.n	402854 <__swsetup_r+0xac>
  40284c:	0792      	lsls	r2, r2, #30
  40284e:	bf58      	it	pl
  402850:	6963      	ldrpl	r3, [r4, #20]
  402852:	60a3      	str	r3, [r4, #8]
  402854:	6923      	ldr	r3, [r4, #16]
  402856:	b95b      	cbnz	r3, 402870 <__swsetup_r+0xc8>
  402858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40285c:	f003 0080 	and.w	r0, r3, #128	; 0x80
  402860:	b280      	uxth	r0, r0
  402862:	b130      	cbz	r0, 402872 <__swsetup_r+0xca>
  402864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402868:	81a3      	strh	r3, [r4, #12]
  40286a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40286e:	bd70      	pop	{r4, r5, r6, pc}
  402870:	2000      	movs	r0, #0
  402872:	bd70      	pop	{r4, r5, r6, pc}
  402874:	20000074 	.word	0x20000074
  402878:	00405578 	.word	0x00405578
  40287c:	00405598 	.word	0x00405598
  402880:	004055b8 	.word	0x004055b8

00402884 <quorem>:
  402884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402888:	6903      	ldr	r3, [r0, #16]
  40288a:	690c      	ldr	r4, [r1, #16]
  40288c:	429c      	cmp	r4, r3
  40288e:	4680      	mov	r8, r0
  402890:	f300 8083 	bgt.w	40299a <quorem+0x116>
  402894:	3c01      	subs	r4, #1
  402896:	f101 0714 	add.w	r7, r1, #20
  40289a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  40289e:	f100 0614 	add.w	r6, r0, #20
  4028a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4028a6:	eb06 030e 	add.w	r3, r6, lr
  4028aa:	9301      	str	r3, [sp, #4]
  4028ac:	3501      	adds	r5, #1
  4028ae:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  4028b2:	fbb3 f5f5 	udiv	r5, r3, r5
  4028b6:	eb07 090e 	add.w	r9, r7, lr
  4028ba:	2d00      	cmp	r5, #0
  4028bc:	d039      	beq.n	402932 <quorem+0xae>
  4028be:	f04f 0a00 	mov.w	sl, #0
  4028c2:	4638      	mov	r0, r7
  4028c4:	46b4      	mov	ip, r6
  4028c6:	46d3      	mov	fp, sl
  4028c8:	f850 2b04 	ldr.w	r2, [r0], #4
  4028cc:	b293      	uxth	r3, r2
  4028ce:	fb05 a303 	mla	r3, r5, r3, sl
  4028d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4028d6:	b29b      	uxth	r3, r3
  4028d8:	ebc3 030b 	rsb	r3, r3, fp
  4028dc:	0c12      	lsrs	r2, r2, #16
  4028de:	f8bc b000 	ldrh.w	fp, [ip]
  4028e2:	fb05 a202 	mla	r2, r5, r2, sl
  4028e6:	fa13 f38b 	uxtah	r3, r3, fp
  4028ea:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4028ee:	fa1f fb82 	uxth.w	fp, r2
  4028f2:	f8dc 2000 	ldr.w	r2, [ip]
  4028f6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4028fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4028fe:	b29b      	uxth	r3, r3
  402900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402904:	4581      	cmp	r9, r0
  402906:	ea4f 4b22 	mov.w	fp, r2, asr #16
  40290a:	f84c 3b04 	str.w	r3, [ip], #4
  40290e:	d2db      	bcs.n	4028c8 <quorem+0x44>
  402910:	f856 300e 	ldr.w	r3, [r6, lr]
  402914:	b96b      	cbnz	r3, 402932 <quorem+0xae>
  402916:	9b01      	ldr	r3, [sp, #4]
  402918:	3b04      	subs	r3, #4
  40291a:	429e      	cmp	r6, r3
  40291c:	461a      	mov	r2, r3
  40291e:	d302      	bcc.n	402926 <quorem+0xa2>
  402920:	f8c8 4010 	str.w	r4, [r8, #16]
  402924:	e005      	b.n	402932 <quorem+0xae>
  402926:	6812      	ldr	r2, [r2, #0]
  402928:	3b04      	subs	r3, #4
  40292a:	2a00      	cmp	r2, #0
  40292c:	d1f8      	bne.n	402920 <quorem+0x9c>
  40292e:	3c01      	subs	r4, #1
  402930:	e7f3      	b.n	40291a <quorem+0x96>
  402932:	4640      	mov	r0, r8
  402934:	f001 fa35 	bl	403da2 <__mcmp>
  402938:	2800      	cmp	r0, #0
  40293a:	db2c      	blt.n	402996 <quorem+0x112>
  40293c:	3501      	adds	r5, #1
  40293e:	4630      	mov	r0, r6
  402940:	f04f 0e00 	mov.w	lr, #0
  402944:	f857 1b04 	ldr.w	r1, [r7], #4
  402948:	f8d0 c000 	ldr.w	ip, [r0]
  40294c:	b28a      	uxth	r2, r1
  40294e:	ebc2 030e 	rsb	r3, r2, lr
  402952:	0c09      	lsrs	r1, r1, #16
  402954:	fa13 f38c 	uxtah	r3, r3, ip
  402958:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  40295c:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402960:	b29b      	uxth	r3, r3
  402962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402966:	45b9      	cmp	r9, r7
  402968:	ea4f 4e22 	mov.w	lr, r2, asr #16
  40296c:	f840 3b04 	str.w	r3, [r0], #4
  402970:	d2e8      	bcs.n	402944 <quorem+0xc0>
  402972:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402976:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  40297a:	b962      	cbnz	r2, 402996 <quorem+0x112>
  40297c:	3b04      	subs	r3, #4
  40297e:	429e      	cmp	r6, r3
  402980:	461a      	mov	r2, r3
  402982:	d302      	bcc.n	40298a <quorem+0x106>
  402984:	f8c8 4010 	str.w	r4, [r8, #16]
  402988:	e005      	b.n	402996 <quorem+0x112>
  40298a:	6812      	ldr	r2, [r2, #0]
  40298c:	3b04      	subs	r3, #4
  40298e:	2a00      	cmp	r2, #0
  402990:	d1f8      	bne.n	402984 <quorem+0x100>
  402992:	3c01      	subs	r4, #1
  402994:	e7f3      	b.n	40297e <quorem+0xfa>
  402996:	4628      	mov	r0, r5
  402998:	e000      	b.n	40299c <quorem+0x118>
  40299a:	2000      	movs	r0, #0
  40299c:	b003      	add	sp, #12
  40299e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029a2:	0000      	movs	r0, r0
  4029a4:	0000      	movs	r0, r0
	...

004029a8 <_dtoa_r>:
  4029a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4029ae:	b095      	sub	sp, #84	; 0x54
  4029b0:	4682      	mov	sl, r0
  4029b2:	9c21      	ldr	r4, [sp, #132]	; 0x84
  4029b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4029b8:	b945      	cbnz	r5, 4029cc <_dtoa_r+0x24>
  4029ba:	2010      	movs	r0, #16
  4029bc:	f000 ff7a 	bl	4038b4 <malloc>
  4029c0:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  4029c4:	6045      	str	r5, [r0, #4]
  4029c6:	6085      	str	r5, [r0, #8]
  4029c8:	6005      	str	r5, [r0, #0]
  4029ca:	60c5      	str	r5, [r0, #12]
  4029cc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4029d0:	6819      	ldr	r1, [r3, #0]
  4029d2:	b159      	cbz	r1, 4029ec <_dtoa_r+0x44>
  4029d4:	685a      	ldr	r2, [r3, #4]
  4029d6:	604a      	str	r2, [r1, #4]
  4029d8:	2301      	movs	r3, #1
  4029da:	4093      	lsls	r3, r2
  4029dc:	608b      	str	r3, [r1, #8]
  4029de:	4650      	mov	r0, sl
  4029e0:	f001 f806 	bl	4039f0 <_Bfree>
  4029e4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4029e8:	2200      	movs	r2, #0
  4029ea:	601a      	str	r2, [r3, #0]
  4029ec:	9b03      	ldr	r3, [sp, #12]
  4029ee:	4aa0      	ldr	r2, [pc, #640]	; (402c70 <_dtoa_r+0x2c8>)
  4029f0:	2b00      	cmp	r3, #0
  4029f2:	bfbf      	itttt	lt
  4029f4:	2301      	movlt	r3, #1
  4029f6:	6023      	strlt	r3, [r4, #0]
  4029f8:	9b03      	ldrlt	r3, [sp, #12]
  4029fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4029fe:	bfb8      	it	lt
  402a00:	9303      	strlt	r3, [sp, #12]
  402a02:	f8dd 800c 	ldr.w	r8, [sp, #12]
  402a06:	bfa4      	itt	ge
  402a08:	2300      	movge	r3, #0
  402a0a:	6023      	strge	r3, [r4, #0]
  402a0c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  402a10:	0d1b      	lsrs	r3, r3, #20
  402a12:	051b      	lsls	r3, r3, #20
  402a14:	4293      	cmp	r3, r2
  402a16:	d11d      	bne.n	402a54 <_dtoa_r+0xac>
  402a18:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402a1a:	f242 730f 	movw	r3, #9999	; 0x270f
  402a1e:	6013      	str	r3, [r2, #0]
  402a20:	9b02      	ldr	r3, [sp, #8]
  402a22:	b943      	cbnz	r3, 402a36 <_dtoa_r+0x8e>
  402a24:	4a93      	ldr	r2, [pc, #588]	; (402c74 <_dtoa_r+0x2cc>)
  402a26:	4b94      	ldr	r3, [pc, #592]	; (402c78 <_dtoa_r+0x2d0>)
  402a28:	f3c8 0013 	ubfx	r0, r8, #0, #20
  402a2c:	2800      	cmp	r0, #0
  402a2e:	bf14      	ite	ne
  402a30:	4618      	movne	r0, r3
  402a32:	4610      	moveq	r0, r2
  402a34:	e000      	b.n	402a38 <_dtoa_r+0x90>
  402a36:	4890      	ldr	r0, [pc, #576]	; (402c78 <_dtoa_r+0x2d0>)
  402a38:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402a3a:	2b00      	cmp	r3, #0
  402a3c:	f000 854a 	beq.w	4034d4 <_dtoa_r+0xb2c>
  402a40:	78c3      	ldrb	r3, [r0, #3]
  402a42:	b113      	cbz	r3, 402a4a <_dtoa_r+0xa2>
  402a44:	f100 0308 	add.w	r3, r0, #8
  402a48:	e000      	b.n	402a4c <_dtoa_r+0xa4>
  402a4a:	1cc3      	adds	r3, r0, #3
  402a4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  402a4e:	6013      	str	r3, [r2, #0]
  402a50:	f000 bd40 	b.w	4034d4 <_dtoa_r+0xb2c>
  402a54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  402a58:	2200      	movs	r2, #0
  402a5a:	2300      	movs	r3, #0
  402a5c:	4620      	mov	r0, r4
  402a5e:	4629      	mov	r1, r5
  402a60:	f002 f964 	bl	404d2c <__aeabi_dcmpeq>
  402a64:	4607      	mov	r7, r0
  402a66:	b158      	cbz	r0, 402a80 <_dtoa_r+0xd8>
  402a68:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402a6a:	2301      	movs	r3, #1
  402a6c:	6013      	str	r3, [r2, #0]
  402a6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402a70:	2b00      	cmp	r3, #0
  402a72:	f000 8522 	beq.w	4034ba <_dtoa_r+0xb12>
  402a76:	4881      	ldr	r0, [pc, #516]	; (402c7c <_dtoa_r+0x2d4>)
  402a78:	6018      	str	r0, [r3, #0]
  402a7a:	3801      	subs	r0, #1
  402a7c:	f000 bd2a 	b.w	4034d4 <_dtoa_r+0xb2c>
  402a80:	ab12      	add	r3, sp, #72	; 0x48
  402a82:	9301      	str	r3, [sp, #4]
  402a84:	ab13      	add	r3, sp, #76	; 0x4c
  402a86:	9300      	str	r3, [sp, #0]
  402a88:	4622      	mov	r2, r4
  402a8a:	462b      	mov	r3, r5
  402a8c:	4650      	mov	r0, sl
  402a8e:	f001 fa03 	bl	403e98 <__d2b>
  402a92:	f3c8 560a 	ubfx	r6, r8, #20, #11
  402a96:	9004      	str	r0, [sp, #16]
  402a98:	b156      	cbz	r6, 402ab0 <_dtoa_r+0x108>
  402a9a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  402a9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  402aa2:	4620      	mov	r0, r4
  402aa4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  402aa8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  402aac:	9711      	str	r7, [sp, #68]	; 0x44
  402aae:	e01d      	b.n	402aec <_dtoa_r+0x144>
  402ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402ab2:	9e12      	ldr	r6, [sp, #72]	; 0x48
  402ab4:	441e      	add	r6, r3
  402ab6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  402aba:	2b20      	cmp	r3, #32
  402abc:	dd0a      	ble.n	402ad4 <_dtoa_r+0x12c>
  402abe:	9a02      	ldr	r2, [sp, #8]
  402ac0:	f206 4012 	addw	r0, r6, #1042	; 0x412
  402ac4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  402ac8:	fa22 f000 	lsr.w	r0, r2, r0
  402acc:	fa08 f303 	lsl.w	r3, r8, r3
  402ad0:	4318      	orrs	r0, r3
  402ad2:	e004      	b.n	402ade <_dtoa_r+0x136>
  402ad4:	f1c3 0020 	rsb	r0, r3, #32
  402ad8:	9b02      	ldr	r3, [sp, #8]
  402ada:	fa03 f000 	lsl.w	r0, r3, r0
  402ade:	f001 fe47 	bl	404770 <__aeabi_ui2d>
  402ae2:	2301      	movs	r3, #1
  402ae4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  402ae8:	3e01      	subs	r6, #1
  402aea:	9311      	str	r3, [sp, #68]	; 0x44
  402aec:	2200      	movs	r2, #0
  402aee:	4b64      	ldr	r3, [pc, #400]	; (402c80 <_dtoa_r+0x2d8>)
  402af0:	f001 fd00 	bl	4044f4 <__aeabi_dsub>
  402af4:	a358      	add	r3, pc, #352	; (adr r3, 402c58 <_dtoa_r+0x2b0>)
  402af6:	e9d3 2300 	ldrd	r2, r3, [r3]
  402afa:	f001 feaf 	bl	40485c <__aeabi_dmul>
  402afe:	a358      	add	r3, pc, #352	; (adr r3, 402c60 <_dtoa_r+0x2b8>)
  402b00:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b04:	f001 fcf8 	bl	4044f8 <__adddf3>
  402b08:	4604      	mov	r4, r0
  402b0a:	4630      	mov	r0, r6
  402b0c:	460d      	mov	r5, r1
  402b0e:	f001 fe3f 	bl	404790 <__aeabi_i2d>
  402b12:	a355      	add	r3, pc, #340	; (adr r3, 402c68 <_dtoa_r+0x2c0>)
  402b14:	e9d3 2300 	ldrd	r2, r3, [r3]
  402b18:	f001 fea0 	bl	40485c <__aeabi_dmul>
  402b1c:	4602      	mov	r2, r0
  402b1e:	460b      	mov	r3, r1
  402b20:	4620      	mov	r0, r4
  402b22:	4629      	mov	r1, r5
  402b24:	f001 fce8 	bl	4044f8 <__adddf3>
  402b28:	4604      	mov	r4, r0
  402b2a:	460d      	mov	r5, r1
  402b2c:	f002 f946 	bl	404dbc <__aeabi_d2iz>
  402b30:	2200      	movs	r2, #0
  402b32:	4683      	mov	fp, r0
  402b34:	2300      	movs	r3, #0
  402b36:	4620      	mov	r0, r4
  402b38:	4629      	mov	r1, r5
  402b3a:	f002 f901 	bl	404d40 <__aeabi_dcmplt>
  402b3e:	b158      	cbz	r0, 402b58 <_dtoa_r+0x1b0>
  402b40:	4658      	mov	r0, fp
  402b42:	f001 fe25 	bl	404790 <__aeabi_i2d>
  402b46:	4602      	mov	r2, r0
  402b48:	460b      	mov	r3, r1
  402b4a:	4620      	mov	r0, r4
  402b4c:	4629      	mov	r1, r5
  402b4e:	f002 f8ed 	bl	404d2c <__aeabi_dcmpeq>
  402b52:	b908      	cbnz	r0, 402b58 <_dtoa_r+0x1b0>
  402b54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402b58:	f1bb 0f16 	cmp.w	fp, #22
  402b5c:	d80d      	bhi.n	402b7a <_dtoa_r+0x1d2>
  402b5e:	4949      	ldr	r1, [pc, #292]	; (402c84 <_dtoa_r+0x2dc>)
  402b60:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  402b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402b68:	e9d1 0100 	ldrd	r0, r1, [r1]
  402b6c:	f002 f906 	bl	404d7c <__aeabi_dcmpgt>
  402b70:	b130      	cbz	r0, 402b80 <_dtoa_r+0x1d8>
  402b72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  402b76:	2300      	movs	r3, #0
  402b78:	e000      	b.n	402b7c <_dtoa_r+0x1d4>
  402b7a:	2301      	movs	r3, #1
  402b7c:	9310      	str	r3, [sp, #64]	; 0x40
  402b7e:	e000      	b.n	402b82 <_dtoa_r+0x1da>
  402b80:	9010      	str	r0, [sp, #64]	; 0x40
  402b82:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402b84:	1b9e      	subs	r6, r3, r6
  402b86:	1e73      	subs	r3, r6, #1
  402b88:	9307      	str	r3, [sp, #28]
  402b8a:	bf43      	ittte	mi
  402b8c:	f1c3 0800 	rsbmi	r8, r3, #0
  402b90:	2300      	movmi	r3, #0
  402b92:	9307      	strmi	r3, [sp, #28]
  402b94:	f04f 0800 	movpl.w	r8, #0
  402b98:	f1bb 0f00 	cmp.w	fp, #0
  402b9c:	db06      	blt.n	402bac <_dtoa_r+0x204>
  402b9e:	9b07      	ldr	r3, [sp, #28]
  402ba0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  402ba4:	445b      	add	r3, fp
  402ba6:	9307      	str	r3, [sp, #28]
  402ba8:	2700      	movs	r7, #0
  402baa:	e005      	b.n	402bb8 <_dtoa_r+0x210>
  402bac:	2300      	movs	r3, #0
  402bae:	ebcb 0808 	rsb	r8, fp, r8
  402bb2:	f1cb 0700 	rsb	r7, fp, #0
  402bb6:	930b      	str	r3, [sp, #44]	; 0x2c
  402bb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402bba:	2b09      	cmp	r3, #9
  402bbc:	d827      	bhi.n	402c0e <_dtoa_r+0x266>
  402bbe:	2b05      	cmp	r3, #5
  402bc0:	bfc4      	itt	gt
  402bc2:	3b04      	subgt	r3, #4
  402bc4:	931e      	strgt	r3, [sp, #120]	; 0x78
  402bc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402bc8:	f1a3 0302 	sub.w	r3, r3, #2
  402bcc:	bfcc      	ite	gt
  402bce:	2500      	movgt	r5, #0
  402bd0:	2501      	movle	r5, #1
  402bd2:	2b03      	cmp	r3, #3
  402bd4:	d820      	bhi.n	402c18 <_dtoa_r+0x270>
  402bd6:	e8df f003 	tbb	[pc, r3]
  402bda:	0e06      	.short	0x0e06
  402bdc:	0402      	.short	0x0402
  402bde:	2301      	movs	r3, #1
  402be0:	e002      	b.n	402be8 <_dtoa_r+0x240>
  402be2:	2301      	movs	r3, #1
  402be4:	e008      	b.n	402bf8 <_dtoa_r+0x250>
  402be6:	2300      	movs	r3, #0
  402be8:	930a      	str	r3, [sp, #40]	; 0x28
  402bea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402bec:	2b00      	cmp	r3, #0
  402bee:	dd1d      	ble.n	402c2c <_dtoa_r+0x284>
  402bf0:	4699      	mov	r9, r3
  402bf2:	9305      	str	r3, [sp, #20]
  402bf4:	e021      	b.n	402c3a <_dtoa_r+0x292>
  402bf6:	2300      	movs	r3, #0
  402bf8:	930a      	str	r3, [sp, #40]	; 0x28
  402bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402bfc:	eb0b 0903 	add.w	r9, fp, r3
  402c00:	f109 0301 	add.w	r3, r9, #1
  402c04:	2b01      	cmp	r3, #1
  402c06:	9305      	str	r3, [sp, #20]
  402c08:	bfb8      	it	lt
  402c0a:	2301      	movlt	r3, #1
  402c0c:	e015      	b.n	402c3a <_dtoa_r+0x292>
  402c0e:	2501      	movs	r5, #1
  402c10:	2300      	movs	r3, #0
  402c12:	931e      	str	r3, [sp, #120]	; 0x78
  402c14:	950a      	str	r5, [sp, #40]	; 0x28
  402c16:	e001      	b.n	402c1c <_dtoa_r+0x274>
  402c18:	2301      	movs	r3, #1
  402c1a:	930a      	str	r3, [sp, #40]	; 0x28
  402c1c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  402c20:	2200      	movs	r2, #0
  402c22:	f8cd 9014 	str.w	r9, [sp, #20]
  402c26:	2312      	movs	r3, #18
  402c28:	921f      	str	r2, [sp, #124]	; 0x7c
  402c2a:	e006      	b.n	402c3a <_dtoa_r+0x292>
  402c2c:	f04f 0901 	mov.w	r9, #1
  402c30:	f8cd 9014 	str.w	r9, [sp, #20]
  402c34:	464b      	mov	r3, r9
  402c36:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  402c3a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  402c3e:	2200      	movs	r2, #0
  402c40:	6062      	str	r2, [r4, #4]
  402c42:	2104      	movs	r1, #4
  402c44:	f101 0214 	add.w	r2, r1, #20
  402c48:	429a      	cmp	r2, r3
  402c4a:	d81d      	bhi.n	402c88 <_dtoa_r+0x2e0>
  402c4c:	6862      	ldr	r2, [r4, #4]
  402c4e:	3201      	adds	r2, #1
  402c50:	6062      	str	r2, [r4, #4]
  402c52:	0049      	lsls	r1, r1, #1
  402c54:	e7f6      	b.n	402c44 <_dtoa_r+0x29c>
  402c56:	bf00      	nop
  402c58:	636f4361 	.word	0x636f4361
  402c5c:	3fd287a7 	.word	0x3fd287a7
  402c60:	8b60c8b3 	.word	0x8b60c8b3
  402c64:	3fc68a28 	.word	0x3fc68a28
  402c68:	509f79fb 	.word	0x509f79fb
  402c6c:	3fd34413 	.word	0x3fd34413
  402c70:	7ff00000 	.word	0x7ff00000
  402c74:	00405568 	.word	0x00405568
  402c78:	00405571 	.word	0x00405571
  402c7c:	00405545 	.word	0x00405545
  402c80:	3ff80000 	.word	0x3ff80000
  402c84:	004055d8 	.word	0x004055d8
  402c88:	6861      	ldr	r1, [r4, #4]
  402c8a:	4650      	mov	r0, sl
  402c8c:	f000 fe7b 	bl	403986 <_Balloc>
  402c90:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c94:	6020      	str	r0, [r4, #0]
  402c96:	681b      	ldr	r3, [r3, #0]
  402c98:	9306      	str	r3, [sp, #24]
  402c9a:	9b05      	ldr	r3, [sp, #20]
  402c9c:	2b0e      	cmp	r3, #14
  402c9e:	f200 815d 	bhi.w	402f5c <_dtoa_r+0x5b4>
  402ca2:	2d00      	cmp	r5, #0
  402ca4:	f000 815a 	beq.w	402f5c <_dtoa_r+0x5b4>
  402ca8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  402cac:	f1bb 0f00 	cmp.w	fp, #0
  402cb0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  402cb4:	dd31      	ble.n	402d1a <_dtoa_r+0x372>
  402cb6:	4aa0      	ldr	r2, [pc, #640]	; (402f38 <_dtoa_r+0x590>)
  402cb8:	f00b 030f 	and.w	r3, fp, #15
  402cbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
  402cc4:	ea4f 152b 	mov.w	r5, fp, asr #4
  402cc8:	06e8      	lsls	r0, r5, #27
  402cca:	e9cd 3408 	strd	r3, r4, [sp, #32]
  402cce:	d50c      	bpl.n	402cea <_dtoa_r+0x342>
  402cd0:	4b9a      	ldr	r3, [pc, #616]	; (402f3c <_dtoa_r+0x594>)
  402cd2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402cd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  402cda:	f001 fee9 	bl	404ab0 <__aeabi_ddiv>
  402cde:	f005 050f 	and.w	r5, r5, #15
  402ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402ce6:	2403      	movs	r4, #3
  402ce8:	e000      	b.n	402cec <_dtoa_r+0x344>
  402cea:	2402      	movs	r4, #2
  402cec:	4e93      	ldr	r6, [pc, #588]	; (402f3c <_dtoa_r+0x594>)
  402cee:	b16d      	cbz	r5, 402d0c <_dtoa_r+0x364>
  402cf0:	07e9      	lsls	r1, r5, #31
  402cf2:	d508      	bpl.n	402d06 <_dtoa_r+0x35e>
  402cf4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  402cf8:	e9d6 2300 	ldrd	r2, r3, [r6]
  402cfc:	f001 fdae 	bl	40485c <__aeabi_dmul>
  402d00:	e9cd 0108 	strd	r0, r1, [sp, #32]
  402d04:	3401      	adds	r4, #1
  402d06:	106d      	asrs	r5, r5, #1
  402d08:	3608      	adds	r6, #8
  402d0a:	e7f0      	b.n	402cee <_dtoa_r+0x346>
  402d0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  402d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402d14:	f001 fecc 	bl	404ab0 <__aeabi_ddiv>
  402d18:	e020      	b.n	402d5c <_dtoa_r+0x3b4>
  402d1a:	f1cb 0500 	rsb	r5, fp, #0
  402d1e:	b305      	cbz	r5, 402d62 <_dtoa_r+0x3ba>
  402d20:	4b85      	ldr	r3, [pc, #532]	; (402f38 <_dtoa_r+0x590>)
  402d22:	4e86      	ldr	r6, [pc, #536]	; (402f3c <_dtoa_r+0x594>)
  402d24:	f005 020f 	and.w	r2, r5, #15
  402d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  402d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  402d34:	f001 fd92 	bl	40485c <__aeabi_dmul>
  402d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402d3c:	112d      	asrs	r5, r5, #4
  402d3e:	2300      	movs	r3, #0
  402d40:	2402      	movs	r4, #2
  402d42:	b155      	cbz	r5, 402d5a <_dtoa_r+0x3b2>
  402d44:	07ea      	lsls	r2, r5, #31
  402d46:	d505      	bpl.n	402d54 <_dtoa_r+0x3ac>
  402d48:	e9d6 2300 	ldrd	r2, r3, [r6]
  402d4c:	f001 fd86 	bl	40485c <__aeabi_dmul>
  402d50:	3401      	adds	r4, #1
  402d52:	2301      	movs	r3, #1
  402d54:	106d      	asrs	r5, r5, #1
  402d56:	3608      	adds	r6, #8
  402d58:	e7f3      	b.n	402d42 <_dtoa_r+0x39a>
  402d5a:	b11b      	cbz	r3, 402d64 <_dtoa_r+0x3bc>
  402d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402d60:	e000      	b.n	402d64 <_dtoa_r+0x3bc>
  402d62:	2402      	movs	r4, #2
  402d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402d66:	b1e3      	cbz	r3, 402da2 <_dtoa_r+0x3fa>
  402d68:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  402d6c:	2200      	movs	r2, #0
  402d6e:	4b74      	ldr	r3, [pc, #464]	; (402f40 <_dtoa_r+0x598>)
  402d70:	4628      	mov	r0, r5
  402d72:	4631      	mov	r1, r6
  402d74:	f001 ffe4 	bl	404d40 <__aeabi_dcmplt>
  402d78:	b198      	cbz	r0, 402da2 <_dtoa_r+0x3fa>
  402d7a:	9b05      	ldr	r3, [sp, #20]
  402d7c:	b18b      	cbz	r3, 402da2 <_dtoa_r+0x3fa>
  402d7e:	f1b9 0f00 	cmp.w	r9, #0
  402d82:	f340 80e7 	ble.w	402f54 <_dtoa_r+0x5ac>
  402d86:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  402d8a:	9308      	str	r3, [sp, #32]
  402d8c:	4631      	mov	r1, r6
  402d8e:	2200      	movs	r2, #0
  402d90:	4b6c      	ldr	r3, [pc, #432]	; (402f44 <_dtoa_r+0x59c>)
  402d92:	4628      	mov	r0, r5
  402d94:	f001 fd62 	bl	40485c <__aeabi_dmul>
  402d98:	3401      	adds	r4, #1
  402d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402d9e:	464e      	mov	r6, r9
  402da0:	e002      	b.n	402da8 <_dtoa_r+0x400>
  402da2:	9e05      	ldr	r6, [sp, #20]
  402da4:	f8cd b020 	str.w	fp, [sp, #32]
  402da8:	4620      	mov	r0, r4
  402daa:	f001 fcf1 	bl	404790 <__aeabi_i2d>
  402dae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402db2:	f001 fd53 	bl	40485c <__aeabi_dmul>
  402db6:	4b64      	ldr	r3, [pc, #400]	; (402f48 <_dtoa_r+0x5a0>)
  402db8:	2200      	movs	r2, #0
  402dba:	f001 fb9d 	bl	4044f8 <__adddf3>
  402dbe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  402dc2:	4604      	mov	r4, r0
  402dc4:	930c      	str	r3, [sp, #48]	; 0x30
  402dc6:	461d      	mov	r5, r3
  402dc8:	b9d6      	cbnz	r6, 402e00 <_dtoa_r+0x458>
  402dca:	2200      	movs	r2, #0
  402dcc:	4b5f      	ldr	r3, [pc, #380]	; (402f4c <_dtoa_r+0x5a4>)
  402dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402dd2:	f001 fb8f 	bl	4044f4 <__aeabi_dsub>
  402dd6:	4622      	mov	r2, r4
  402dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402dde:	f001 ffcd 	bl	404d7c <__aeabi_dcmpgt>
  402de2:	2800      	cmp	r0, #0
  402de4:	f040 8240 	bne.w	403268 <_dtoa_r+0x8c0>
  402de8:	990c      	ldr	r1, [sp, #48]	; 0x30
  402dea:	4622      	mov	r2, r4
  402dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  402df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402df4:	f001 ffa4 	bl	404d40 <__aeabi_dcmplt>
  402df8:	2800      	cmp	r0, #0
  402dfa:	f040 822c 	bne.w	403256 <_dtoa_r+0x8ae>
  402dfe:	e0a9      	b.n	402f54 <_dtoa_r+0x5ac>
  402e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402e02:	4b4d      	ldr	r3, [pc, #308]	; (402f38 <_dtoa_r+0x590>)
  402e04:	1e71      	subs	r1, r6, #1
  402e06:	2a00      	cmp	r2, #0
  402e08:	d049      	beq.n	402e9e <_dtoa_r+0x4f6>
  402e0a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  402e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402e12:	2000      	movs	r0, #0
  402e14:	494e      	ldr	r1, [pc, #312]	; (402f50 <_dtoa_r+0x5a8>)
  402e16:	f001 fe4b 	bl	404ab0 <__aeabi_ddiv>
  402e1a:	4622      	mov	r2, r4
  402e1c:	462b      	mov	r3, r5
  402e1e:	f001 fb69 	bl	4044f4 <__aeabi_dsub>
  402e22:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402e26:	9c06      	ldr	r4, [sp, #24]
  402e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402e2c:	f001 ffc6 	bl	404dbc <__aeabi_d2iz>
  402e30:	4605      	mov	r5, r0
  402e32:	f001 fcad 	bl	404790 <__aeabi_i2d>
  402e36:	4602      	mov	r2, r0
  402e38:	460b      	mov	r3, r1
  402e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402e3e:	f001 fb59 	bl	4044f4 <__aeabi_dsub>
  402e42:	3530      	adds	r5, #48	; 0x30
  402e44:	f804 5b01 	strb.w	r5, [r4], #1
  402e48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402e50:	f001 ff76 	bl	404d40 <__aeabi_dcmplt>
  402e54:	2800      	cmp	r0, #0
  402e56:	f040 8320 	bne.w	40349a <_dtoa_r+0xaf2>
  402e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402e5e:	2000      	movs	r0, #0
  402e60:	4937      	ldr	r1, [pc, #220]	; (402f40 <_dtoa_r+0x598>)
  402e62:	f001 fb47 	bl	4044f4 <__aeabi_dsub>
  402e66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402e6a:	f001 ff69 	bl	404d40 <__aeabi_dcmplt>
  402e6e:	2800      	cmp	r0, #0
  402e70:	f040 80d2 	bne.w	403018 <_dtoa_r+0x670>
  402e74:	9b06      	ldr	r3, [sp, #24]
  402e76:	1ae3      	subs	r3, r4, r3
  402e78:	42b3      	cmp	r3, r6
  402e7a:	da6b      	bge.n	402f54 <_dtoa_r+0x5ac>
  402e7c:	2200      	movs	r2, #0
  402e7e:	4b31      	ldr	r3, [pc, #196]	; (402f44 <_dtoa_r+0x59c>)
  402e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402e84:	f001 fcea 	bl	40485c <__aeabi_dmul>
  402e88:	2200      	movs	r2, #0
  402e8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402e8e:	4b2d      	ldr	r3, [pc, #180]	; (402f44 <_dtoa_r+0x59c>)
  402e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402e94:	f001 fce2 	bl	40485c <__aeabi_dmul>
  402e98:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402e9c:	e7c4      	b.n	402e28 <_dtoa_r+0x480>
  402e9e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  402ea2:	4622      	mov	r2, r4
  402ea4:	462b      	mov	r3, r5
  402ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
  402eaa:	f001 fcd7 	bl	40485c <__aeabi_dmul>
  402eae:	9b06      	ldr	r3, [sp, #24]
  402eb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  402eb4:	199c      	adds	r4, r3, r6
  402eb6:	461d      	mov	r5, r3
  402eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402ebc:	f001 ff7e 	bl	404dbc <__aeabi_d2iz>
  402ec0:	4606      	mov	r6, r0
  402ec2:	f001 fc65 	bl	404790 <__aeabi_i2d>
  402ec6:	3630      	adds	r6, #48	; 0x30
  402ec8:	4602      	mov	r2, r0
  402eca:	460b      	mov	r3, r1
  402ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402ed0:	f001 fb10 	bl	4044f4 <__aeabi_dsub>
  402ed4:	f805 6b01 	strb.w	r6, [r5], #1
  402ed8:	42ac      	cmp	r4, r5
  402eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402ede:	f04f 0200 	mov.w	r2, #0
  402ee2:	d123      	bne.n	402f2c <_dtoa_r+0x584>
  402ee4:	4b1a      	ldr	r3, [pc, #104]	; (402f50 <_dtoa_r+0x5a8>)
  402ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  402eea:	f001 fb05 	bl	4044f8 <__adddf3>
  402eee:	4602      	mov	r2, r0
  402ef0:	460b      	mov	r3, r1
  402ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402ef6:	f001 ff41 	bl	404d7c <__aeabi_dcmpgt>
  402efa:	2800      	cmp	r0, #0
  402efc:	f040 808c 	bne.w	403018 <_dtoa_r+0x670>
  402f00:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  402f04:	2000      	movs	r0, #0
  402f06:	4912      	ldr	r1, [pc, #72]	; (402f50 <_dtoa_r+0x5a8>)
  402f08:	f001 faf4 	bl	4044f4 <__aeabi_dsub>
  402f0c:	4602      	mov	r2, r0
  402f0e:	460b      	mov	r3, r1
  402f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  402f14:	f001 ff14 	bl	404d40 <__aeabi_dcmplt>
  402f18:	b1e0      	cbz	r0, 402f54 <_dtoa_r+0x5ac>
  402f1a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  402f1e:	2b30      	cmp	r3, #48	; 0x30
  402f20:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  402f24:	f040 82b9 	bne.w	40349a <_dtoa_r+0xaf2>
  402f28:	4614      	mov	r4, r2
  402f2a:	e7f6      	b.n	402f1a <_dtoa_r+0x572>
  402f2c:	4b05      	ldr	r3, [pc, #20]	; (402f44 <_dtoa_r+0x59c>)
  402f2e:	f001 fc95 	bl	40485c <__aeabi_dmul>
  402f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
  402f36:	e7bf      	b.n	402eb8 <_dtoa_r+0x510>
  402f38:	004055d8 	.word	0x004055d8
  402f3c:	004056a0 	.word	0x004056a0
  402f40:	3ff00000 	.word	0x3ff00000
  402f44:	40240000 	.word	0x40240000
  402f48:	401c0000 	.word	0x401c0000
  402f4c:	40140000 	.word	0x40140000
  402f50:	3fe00000 	.word	0x3fe00000
  402f54:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  402f58:	e9cd 3402 	strd	r3, r4, [sp, #8]
  402f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402f5e:	2b00      	cmp	r3, #0
  402f60:	db7d      	blt.n	40305e <_dtoa_r+0x6b6>
  402f62:	f1bb 0f0e 	cmp.w	fp, #14
  402f66:	dc7a      	bgt.n	40305e <_dtoa_r+0x6b6>
  402f68:	4bab      	ldr	r3, [pc, #684]	; (403218 <_dtoa_r+0x870>)
  402f6a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  402f6e:	e9d3 6700 	ldrd	r6, r7, [r3]
  402f72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402f74:	2b00      	cmp	r3, #0
  402f76:	da14      	bge.n	402fa2 <_dtoa_r+0x5fa>
  402f78:	9b05      	ldr	r3, [sp, #20]
  402f7a:	2b00      	cmp	r3, #0
  402f7c:	dc11      	bgt.n	402fa2 <_dtoa_r+0x5fa>
  402f7e:	f040 816c 	bne.w	40325a <_dtoa_r+0x8b2>
  402f82:	2200      	movs	r2, #0
  402f84:	4ba5      	ldr	r3, [pc, #660]	; (40321c <_dtoa_r+0x874>)
  402f86:	4630      	mov	r0, r6
  402f88:	4639      	mov	r1, r7
  402f8a:	f001 fc67 	bl	40485c <__aeabi_dmul>
  402f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402f92:	f001 fee9 	bl	404d68 <__aeabi_dcmpge>
  402f96:	9d05      	ldr	r5, [sp, #20]
  402f98:	462e      	mov	r6, r5
  402f9a:	2800      	cmp	r0, #0
  402f9c:	f040 815f 	bne.w	40325e <_dtoa_r+0x8b6>
  402fa0:	e165      	b.n	40326e <_dtoa_r+0x8c6>
  402fa2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  402fa6:	9c06      	ldr	r4, [sp, #24]
  402fa8:	4632      	mov	r2, r6
  402faa:	463b      	mov	r3, r7
  402fac:	4640      	mov	r0, r8
  402fae:	4649      	mov	r1, r9
  402fb0:	f001 fd7e 	bl	404ab0 <__aeabi_ddiv>
  402fb4:	f001 ff02 	bl	404dbc <__aeabi_d2iz>
  402fb8:	4605      	mov	r5, r0
  402fba:	f001 fbe9 	bl	404790 <__aeabi_i2d>
  402fbe:	4632      	mov	r2, r6
  402fc0:	463b      	mov	r3, r7
  402fc2:	f001 fc4b 	bl	40485c <__aeabi_dmul>
  402fc6:	460b      	mov	r3, r1
  402fc8:	4602      	mov	r2, r0
  402fca:	4649      	mov	r1, r9
  402fcc:	4640      	mov	r0, r8
  402fce:	f001 fa91 	bl	4044f4 <__aeabi_dsub>
  402fd2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  402fd6:	9b06      	ldr	r3, [sp, #24]
  402fd8:	f804 eb01 	strb.w	lr, [r4], #1
  402fdc:	ebc3 0e04 	rsb	lr, r3, r4
  402fe0:	9b05      	ldr	r3, [sp, #20]
  402fe2:	4573      	cmp	r3, lr
  402fe4:	d12e      	bne.n	403044 <_dtoa_r+0x69c>
  402fe6:	4602      	mov	r2, r0
  402fe8:	460b      	mov	r3, r1
  402fea:	f001 fa85 	bl	4044f8 <__adddf3>
  402fee:	4680      	mov	r8, r0
  402ff0:	4689      	mov	r9, r1
  402ff2:	4602      	mov	r2, r0
  402ff4:	460b      	mov	r3, r1
  402ff6:	4630      	mov	r0, r6
  402ff8:	4639      	mov	r1, r7
  402ffa:	f001 fea1 	bl	404d40 <__aeabi_dcmplt>
  402ffe:	b978      	cbnz	r0, 403020 <_dtoa_r+0x678>
  403000:	4642      	mov	r2, r8
  403002:	464b      	mov	r3, r9
  403004:	4630      	mov	r0, r6
  403006:	4639      	mov	r1, r7
  403008:	f001 fe90 	bl	404d2c <__aeabi_dcmpeq>
  40300c:	2800      	cmp	r0, #0
  40300e:	f000 8246 	beq.w	40349e <_dtoa_r+0xaf6>
  403012:	07eb      	lsls	r3, r5, #31
  403014:	d404      	bmi.n	403020 <_dtoa_r+0x678>
  403016:	e242      	b.n	40349e <_dtoa_r+0xaf6>
  403018:	f8dd b020 	ldr.w	fp, [sp, #32]
  40301c:	e000      	b.n	403020 <_dtoa_r+0x678>
  40301e:	461c      	mov	r4, r3
  403020:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  403024:	2a39      	cmp	r2, #57	; 0x39
  403026:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  40302a:	d107      	bne.n	40303c <_dtoa_r+0x694>
  40302c:	9a06      	ldr	r2, [sp, #24]
  40302e:	429a      	cmp	r2, r3
  403030:	d1f5      	bne.n	40301e <_dtoa_r+0x676>
  403032:	9906      	ldr	r1, [sp, #24]
  403034:	2230      	movs	r2, #48	; 0x30
  403036:	f10b 0b01 	add.w	fp, fp, #1
  40303a:	700a      	strb	r2, [r1, #0]
  40303c:	781a      	ldrb	r2, [r3, #0]
  40303e:	3201      	adds	r2, #1
  403040:	701a      	strb	r2, [r3, #0]
  403042:	e22c      	b.n	40349e <_dtoa_r+0xaf6>
  403044:	2200      	movs	r2, #0
  403046:	4b76      	ldr	r3, [pc, #472]	; (403220 <_dtoa_r+0x878>)
  403048:	f001 fc08 	bl	40485c <__aeabi_dmul>
  40304c:	2200      	movs	r2, #0
  40304e:	2300      	movs	r3, #0
  403050:	4680      	mov	r8, r0
  403052:	4689      	mov	r9, r1
  403054:	f001 fe6a 	bl	404d2c <__aeabi_dcmpeq>
  403058:	2800      	cmp	r0, #0
  40305a:	d0a5      	beq.n	402fa8 <_dtoa_r+0x600>
  40305c:	e21f      	b.n	40349e <_dtoa_r+0xaf6>
  40305e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403060:	2a00      	cmp	r2, #0
  403062:	d02b      	beq.n	4030bc <_dtoa_r+0x714>
  403064:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403066:	2a01      	cmp	r2, #1
  403068:	dc0a      	bgt.n	403080 <_dtoa_r+0x6d8>
  40306a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40306c:	b112      	cbz	r2, 403074 <_dtoa_r+0x6cc>
  40306e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403072:	e002      	b.n	40307a <_dtoa_r+0x6d2>
  403074:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40307a:	463d      	mov	r5, r7
  40307c:	4644      	mov	r4, r8
  40307e:	e013      	b.n	4030a8 <_dtoa_r+0x700>
  403080:	9b05      	ldr	r3, [sp, #20]
  403082:	1e5d      	subs	r5, r3, #1
  403084:	42af      	cmp	r7, r5
  403086:	bfbf      	itttt	lt
  403088:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  40308a:	1bea      	sublt	r2, r5, r7
  40308c:	189b      	addlt	r3, r3, r2
  40308e:	930b      	strlt	r3, [sp, #44]	; 0x2c
  403090:	9b05      	ldr	r3, [sp, #20]
  403092:	bfb6      	itet	lt
  403094:	462f      	movlt	r7, r5
  403096:	1b7d      	subge	r5, r7, r5
  403098:	2500      	movlt	r5, #0
  40309a:	2b00      	cmp	r3, #0
  40309c:	bfab      	itete	ge
  40309e:	9b05      	ldrge	r3, [sp, #20]
  4030a0:	ebc3 0408 	rsblt	r4, r3, r8
  4030a4:	4644      	movge	r4, r8
  4030a6:	2300      	movlt	r3, #0
  4030a8:	9a07      	ldr	r2, [sp, #28]
  4030aa:	2101      	movs	r1, #1
  4030ac:	441a      	add	r2, r3
  4030ae:	4650      	mov	r0, sl
  4030b0:	4498      	add	r8, r3
  4030b2:	9207      	str	r2, [sp, #28]
  4030b4:	f000 fd3b 	bl	403b2e <__i2b>
  4030b8:	4606      	mov	r6, r0
  4030ba:	e002      	b.n	4030c2 <_dtoa_r+0x71a>
  4030bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4030be:	463d      	mov	r5, r7
  4030c0:	4644      	mov	r4, r8
  4030c2:	b15c      	cbz	r4, 4030dc <_dtoa_r+0x734>
  4030c4:	9b07      	ldr	r3, [sp, #28]
  4030c6:	2b00      	cmp	r3, #0
  4030c8:	dd08      	ble.n	4030dc <_dtoa_r+0x734>
  4030ca:	42a3      	cmp	r3, r4
  4030cc:	9a07      	ldr	r2, [sp, #28]
  4030ce:	bfa8      	it	ge
  4030d0:	4623      	movge	r3, r4
  4030d2:	ebc3 0808 	rsb	r8, r3, r8
  4030d6:	1ae4      	subs	r4, r4, r3
  4030d8:	1ad3      	subs	r3, r2, r3
  4030da:	9307      	str	r3, [sp, #28]
  4030dc:	2f00      	cmp	r7, #0
  4030de:	dd1d      	ble.n	40311c <_dtoa_r+0x774>
  4030e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4030e2:	b1ab      	cbz	r3, 403110 <_dtoa_r+0x768>
  4030e4:	b18d      	cbz	r5, 40310a <_dtoa_r+0x762>
  4030e6:	4631      	mov	r1, r6
  4030e8:	462a      	mov	r2, r5
  4030ea:	4650      	mov	r0, sl
  4030ec:	f000 fdba 	bl	403c64 <__pow5mult>
  4030f0:	9a04      	ldr	r2, [sp, #16]
  4030f2:	4601      	mov	r1, r0
  4030f4:	4606      	mov	r6, r0
  4030f6:	4650      	mov	r0, sl
  4030f8:	f000 fd22 	bl	403b40 <__multiply>
  4030fc:	9904      	ldr	r1, [sp, #16]
  4030fe:	9008      	str	r0, [sp, #32]
  403100:	4650      	mov	r0, sl
  403102:	f000 fc75 	bl	4039f0 <_Bfree>
  403106:	9b08      	ldr	r3, [sp, #32]
  403108:	9304      	str	r3, [sp, #16]
  40310a:	1b7a      	subs	r2, r7, r5
  40310c:	d006      	beq.n	40311c <_dtoa_r+0x774>
  40310e:	e000      	b.n	403112 <_dtoa_r+0x76a>
  403110:	463a      	mov	r2, r7
  403112:	9904      	ldr	r1, [sp, #16]
  403114:	4650      	mov	r0, sl
  403116:	f000 fda5 	bl	403c64 <__pow5mult>
  40311a:	9004      	str	r0, [sp, #16]
  40311c:	2101      	movs	r1, #1
  40311e:	4650      	mov	r0, sl
  403120:	f000 fd05 	bl	403b2e <__i2b>
  403124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403126:	4605      	mov	r5, r0
  403128:	b35b      	cbz	r3, 403182 <_dtoa_r+0x7da>
  40312a:	461a      	mov	r2, r3
  40312c:	4601      	mov	r1, r0
  40312e:	4650      	mov	r0, sl
  403130:	f000 fd98 	bl	403c64 <__pow5mult>
  403134:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403136:	2b01      	cmp	r3, #1
  403138:	4605      	mov	r5, r0
  40313a:	dc18      	bgt.n	40316e <_dtoa_r+0x7c6>
  40313c:	9b02      	ldr	r3, [sp, #8]
  40313e:	b983      	cbnz	r3, 403162 <_dtoa_r+0x7ba>
  403140:	9b03      	ldr	r3, [sp, #12]
  403142:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403146:	b973      	cbnz	r3, 403166 <_dtoa_r+0x7be>
  403148:	9b03      	ldr	r3, [sp, #12]
  40314a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  40314e:	0d3f      	lsrs	r7, r7, #20
  403150:	053f      	lsls	r7, r7, #20
  403152:	b14f      	cbz	r7, 403168 <_dtoa_r+0x7c0>
  403154:	9b07      	ldr	r3, [sp, #28]
  403156:	3301      	adds	r3, #1
  403158:	f108 0801 	add.w	r8, r8, #1
  40315c:	9307      	str	r3, [sp, #28]
  40315e:	2701      	movs	r7, #1
  403160:	e002      	b.n	403168 <_dtoa_r+0x7c0>
  403162:	2700      	movs	r7, #0
  403164:	e000      	b.n	403168 <_dtoa_r+0x7c0>
  403166:	9f02      	ldr	r7, [sp, #8]
  403168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40316a:	b173      	cbz	r3, 40318a <_dtoa_r+0x7e2>
  40316c:	e000      	b.n	403170 <_dtoa_r+0x7c8>
  40316e:	2700      	movs	r7, #0
  403170:	692b      	ldr	r3, [r5, #16]
  403172:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  403176:	6918      	ldr	r0, [r3, #16]
  403178:	f000 fc8c 	bl	403a94 <__hi0bits>
  40317c:	f1c0 0020 	rsb	r0, r0, #32
  403180:	e004      	b.n	40318c <_dtoa_r+0x7e4>
  403182:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403184:	2b01      	cmp	r3, #1
  403186:	ddd9      	ble.n	40313c <_dtoa_r+0x794>
  403188:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40318a:	2001      	movs	r0, #1
  40318c:	9b07      	ldr	r3, [sp, #28]
  40318e:	4418      	add	r0, r3
  403190:	f010 001f 	ands.w	r0, r0, #31
  403194:	d008      	beq.n	4031a8 <_dtoa_r+0x800>
  403196:	f1c0 0320 	rsb	r3, r0, #32
  40319a:	2b04      	cmp	r3, #4
  40319c:	dd02      	ble.n	4031a4 <_dtoa_r+0x7fc>
  40319e:	f1c0 001c 	rsb	r0, r0, #28
  4031a2:	e002      	b.n	4031aa <_dtoa_r+0x802>
  4031a4:	d006      	beq.n	4031b4 <_dtoa_r+0x80c>
  4031a6:	4618      	mov	r0, r3
  4031a8:	301c      	adds	r0, #28
  4031aa:	9b07      	ldr	r3, [sp, #28]
  4031ac:	4403      	add	r3, r0
  4031ae:	4480      	add	r8, r0
  4031b0:	4404      	add	r4, r0
  4031b2:	9307      	str	r3, [sp, #28]
  4031b4:	f1b8 0f00 	cmp.w	r8, #0
  4031b8:	dd05      	ble.n	4031c6 <_dtoa_r+0x81e>
  4031ba:	4642      	mov	r2, r8
  4031bc:	9904      	ldr	r1, [sp, #16]
  4031be:	4650      	mov	r0, sl
  4031c0:	f000 fd9e 	bl	403d00 <__lshift>
  4031c4:	9004      	str	r0, [sp, #16]
  4031c6:	9b07      	ldr	r3, [sp, #28]
  4031c8:	2b00      	cmp	r3, #0
  4031ca:	dd05      	ble.n	4031d8 <_dtoa_r+0x830>
  4031cc:	4629      	mov	r1, r5
  4031ce:	461a      	mov	r2, r3
  4031d0:	4650      	mov	r0, sl
  4031d2:	f000 fd95 	bl	403d00 <__lshift>
  4031d6:	4605      	mov	r5, r0
  4031d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4031da:	b31b      	cbz	r3, 403224 <_dtoa_r+0x87c>
  4031dc:	4629      	mov	r1, r5
  4031de:	9804      	ldr	r0, [sp, #16]
  4031e0:	f000 fddf 	bl	403da2 <__mcmp>
  4031e4:	2800      	cmp	r0, #0
  4031e6:	da1d      	bge.n	403224 <_dtoa_r+0x87c>
  4031e8:	2300      	movs	r3, #0
  4031ea:	220a      	movs	r2, #10
  4031ec:	9904      	ldr	r1, [sp, #16]
  4031ee:	4650      	mov	r0, sl
  4031f0:	f000 fc15 	bl	403a1e <__multadd>
  4031f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031f6:	9004      	str	r0, [sp, #16]
  4031f8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4031fc:	2b00      	cmp	r3, #0
  4031fe:	f000 8160 	beq.w	4034c2 <_dtoa_r+0xb1a>
  403202:	4631      	mov	r1, r6
  403204:	2300      	movs	r3, #0
  403206:	220a      	movs	r2, #10
  403208:	4650      	mov	r0, sl
  40320a:	f000 fc08 	bl	403a1e <__multadd>
  40320e:	f1b9 0f00 	cmp.w	r9, #0
  403212:	4606      	mov	r6, r0
  403214:	dc3e      	bgt.n	403294 <_dtoa_r+0x8ec>
  403216:	e03a      	b.n	40328e <_dtoa_r+0x8e6>
  403218:	004055d8 	.word	0x004055d8
  40321c:	40140000 	.word	0x40140000
  403220:	40240000 	.word	0x40240000
  403224:	9b05      	ldr	r3, [sp, #20]
  403226:	2b00      	cmp	r3, #0
  403228:	dc2b      	bgt.n	403282 <_dtoa_r+0x8da>
  40322a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40322c:	2b02      	cmp	r3, #2
  40322e:	dd28      	ble.n	403282 <_dtoa_r+0x8da>
  403230:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403234:	f1b9 0f00 	cmp.w	r9, #0
  403238:	d111      	bne.n	40325e <_dtoa_r+0x8b6>
  40323a:	4629      	mov	r1, r5
  40323c:	464b      	mov	r3, r9
  40323e:	2205      	movs	r2, #5
  403240:	4650      	mov	r0, sl
  403242:	f000 fbec 	bl	403a1e <__multadd>
  403246:	4601      	mov	r1, r0
  403248:	4605      	mov	r5, r0
  40324a:	9804      	ldr	r0, [sp, #16]
  40324c:	f000 fda9 	bl	403da2 <__mcmp>
  403250:	2800      	cmp	r0, #0
  403252:	dc0c      	bgt.n	40326e <_dtoa_r+0x8c6>
  403254:	e003      	b.n	40325e <_dtoa_r+0x8b6>
  403256:	4635      	mov	r5, r6
  403258:	e000      	b.n	40325c <_dtoa_r+0x8b4>
  40325a:	2500      	movs	r5, #0
  40325c:	462e      	mov	r6, r5
  40325e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403260:	9c06      	ldr	r4, [sp, #24]
  403262:	ea6f 0b03 	mvn.w	fp, r3
  403266:	e009      	b.n	40327c <_dtoa_r+0x8d4>
  403268:	f8dd b020 	ldr.w	fp, [sp, #32]
  40326c:	4635      	mov	r5, r6
  40326e:	9b06      	ldr	r3, [sp, #24]
  403270:	9a06      	ldr	r2, [sp, #24]
  403272:	1c5c      	adds	r4, r3, #1
  403274:	2331      	movs	r3, #49	; 0x31
  403276:	7013      	strb	r3, [r2, #0]
  403278:	f10b 0b01 	add.w	fp, fp, #1
  40327c:	9605      	str	r6, [sp, #20]
  40327e:	2600      	movs	r6, #0
  403280:	e0f9      	b.n	403476 <_dtoa_r+0xace>
  403282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403284:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403288:	b923      	cbnz	r3, 403294 <_dtoa_r+0x8ec>
  40328a:	9c06      	ldr	r4, [sp, #24]
  40328c:	e0b2      	b.n	4033f4 <_dtoa_r+0xa4c>
  40328e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403290:	2b02      	cmp	r3, #2
  403292:	dccf      	bgt.n	403234 <_dtoa_r+0x88c>
  403294:	2c00      	cmp	r4, #0
  403296:	dd05      	ble.n	4032a4 <_dtoa_r+0x8fc>
  403298:	4631      	mov	r1, r6
  40329a:	4622      	mov	r2, r4
  40329c:	4650      	mov	r0, sl
  40329e:	f000 fd2f 	bl	403d00 <__lshift>
  4032a2:	4606      	mov	r6, r0
  4032a4:	b19f      	cbz	r7, 4032ce <_dtoa_r+0x926>
  4032a6:	6871      	ldr	r1, [r6, #4]
  4032a8:	4650      	mov	r0, sl
  4032aa:	f000 fb6c 	bl	403986 <_Balloc>
  4032ae:	6932      	ldr	r2, [r6, #16]
  4032b0:	3202      	adds	r2, #2
  4032b2:	4604      	mov	r4, r0
  4032b4:	0092      	lsls	r2, r2, #2
  4032b6:	f106 010c 	add.w	r1, r6, #12
  4032ba:	300c      	adds	r0, #12
  4032bc:	f000 fb58 	bl	403970 <memcpy>
  4032c0:	2201      	movs	r2, #1
  4032c2:	4621      	mov	r1, r4
  4032c4:	4650      	mov	r0, sl
  4032c6:	f000 fd1b 	bl	403d00 <__lshift>
  4032ca:	9005      	str	r0, [sp, #20]
  4032cc:	e000      	b.n	4032d0 <_dtoa_r+0x928>
  4032ce:	9605      	str	r6, [sp, #20]
  4032d0:	9b02      	ldr	r3, [sp, #8]
  4032d2:	9f06      	ldr	r7, [sp, #24]
  4032d4:	f003 0301 	and.w	r3, r3, #1
  4032d8:	9307      	str	r3, [sp, #28]
  4032da:	4629      	mov	r1, r5
  4032dc:	9804      	ldr	r0, [sp, #16]
  4032de:	f7ff fad1 	bl	402884 <quorem>
  4032e2:	4631      	mov	r1, r6
  4032e4:	4604      	mov	r4, r0
  4032e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
  4032ea:	9804      	ldr	r0, [sp, #16]
  4032ec:	f000 fd59 	bl	403da2 <__mcmp>
  4032f0:	9a05      	ldr	r2, [sp, #20]
  4032f2:	9002      	str	r0, [sp, #8]
  4032f4:	4629      	mov	r1, r5
  4032f6:	4650      	mov	r0, sl
  4032f8:	f000 fd6f 	bl	403dda <__mdiff>
  4032fc:	68c3      	ldr	r3, [r0, #12]
  4032fe:	4602      	mov	r2, r0
  403300:	b93b      	cbnz	r3, 403312 <_dtoa_r+0x96a>
  403302:	4601      	mov	r1, r0
  403304:	900a      	str	r0, [sp, #40]	; 0x28
  403306:	9804      	ldr	r0, [sp, #16]
  403308:	f000 fd4b 	bl	403da2 <__mcmp>
  40330c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40330e:	4603      	mov	r3, r0
  403310:	e000      	b.n	403314 <_dtoa_r+0x96c>
  403312:	2301      	movs	r3, #1
  403314:	4611      	mov	r1, r2
  403316:	4650      	mov	r0, sl
  403318:	930a      	str	r3, [sp, #40]	; 0x28
  40331a:	f000 fb69 	bl	4039f0 <_Bfree>
  40331e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403320:	b953      	cbnz	r3, 403338 <_dtoa_r+0x990>
  403322:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403324:	b942      	cbnz	r2, 403338 <_dtoa_r+0x990>
  403326:	9a07      	ldr	r2, [sp, #28]
  403328:	b932      	cbnz	r2, 403338 <_dtoa_r+0x990>
  40332a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40332e:	d02a      	beq.n	403386 <_dtoa_r+0x9de>
  403330:	9b02      	ldr	r3, [sp, #8]
  403332:	2b00      	cmp	r3, #0
  403334:	dc1c      	bgt.n	403370 <_dtoa_r+0x9c8>
  403336:	e01d      	b.n	403374 <_dtoa_r+0x9cc>
  403338:	9a02      	ldr	r2, [sp, #8]
  40333a:	2a00      	cmp	r2, #0
  40333c:	db04      	blt.n	403348 <_dtoa_r+0x9a0>
  40333e:	d11b      	bne.n	403378 <_dtoa_r+0x9d0>
  403340:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403342:	b9ca      	cbnz	r2, 403378 <_dtoa_r+0x9d0>
  403344:	9a07      	ldr	r2, [sp, #28]
  403346:	b9ba      	cbnz	r2, 403378 <_dtoa_r+0x9d0>
  403348:	2b00      	cmp	r3, #0
  40334a:	dd13      	ble.n	403374 <_dtoa_r+0x9cc>
  40334c:	2201      	movs	r2, #1
  40334e:	9904      	ldr	r1, [sp, #16]
  403350:	4650      	mov	r0, sl
  403352:	f000 fcd5 	bl	403d00 <__lshift>
  403356:	4629      	mov	r1, r5
  403358:	9004      	str	r0, [sp, #16]
  40335a:	f000 fd22 	bl	403da2 <__mcmp>
  40335e:	2800      	cmp	r0, #0
  403360:	dc03      	bgt.n	40336a <_dtoa_r+0x9c2>
  403362:	d107      	bne.n	403374 <_dtoa_r+0x9cc>
  403364:	f018 0f01 	tst.w	r8, #1
  403368:	d004      	beq.n	403374 <_dtoa_r+0x9cc>
  40336a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40336e:	d00a      	beq.n	403386 <_dtoa_r+0x9de>
  403370:	f104 0831 	add.w	r8, r4, #49	; 0x31
  403374:	1c7c      	adds	r4, r7, #1
  403376:	e00c      	b.n	403392 <_dtoa_r+0x9ea>
  403378:	2b00      	cmp	r3, #0
  40337a:	f107 0401 	add.w	r4, r7, #1
  40337e:	dd0b      	ble.n	403398 <_dtoa_r+0x9f0>
  403380:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403384:	d103      	bne.n	40338e <_dtoa_r+0x9e6>
  403386:	2339      	movs	r3, #57	; 0x39
  403388:	703b      	strb	r3, [r7, #0]
  40338a:	3701      	adds	r7, #1
  40338c:	e056      	b.n	40343c <_dtoa_r+0xa94>
  40338e:	f108 0801 	add.w	r8, r8, #1
  403392:	f887 8000 	strb.w	r8, [r7]
  403396:	e06e      	b.n	403476 <_dtoa_r+0xace>
  403398:	9b06      	ldr	r3, [sp, #24]
  40339a:	f804 8c01 	strb.w	r8, [r4, #-1]
  40339e:	1ae3      	subs	r3, r4, r3
  4033a0:	454b      	cmp	r3, r9
  4033a2:	4627      	mov	r7, r4
  4033a4:	d03b      	beq.n	40341e <_dtoa_r+0xa76>
  4033a6:	2300      	movs	r3, #0
  4033a8:	220a      	movs	r2, #10
  4033aa:	9904      	ldr	r1, [sp, #16]
  4033ac:	4650      	mov	r0, sl
  4033ae:	f000 fb36 	bl	403a1e <__multadd>
  4033b2:	9b05      	ldr	r3, [sp, #20]
  4033b4:	9004      	str	r0, [sp, #16]
  4033b6:	429e      	cmp	r6, r3
  4033b8:	f04f 020a 	mov.w	r2, #10
  4033bc:	f04f 0300 	mov.w	r3, #0
  4033c0:	4631      	mov	r1, r6
  4033c2:	4650      	mov	r0, sl
  4033c4:	d104      	bne.n	4033d0 <_dtoa_r+0xa28>
  4033c6:	f000 fb2a 	bl	403a1e <__multadd>
  4033ca:	4606      	mov	r6, r0
  4033cc:	9005      	str	r0, [sp, #20]
  4033ce:	e784      	b.n	4032da <_dtoa_r+0x932>
  4033d0:	f000 fb25 	bl	403a1e <__multadd>
  4033d4:	2300      	movs	r3, #0
  4033d6:	4606      	mov	r6, r0
  4033d8:	220a      	movs	r2, #10
  4033da:	9905      	ldr	r1, [sp, #20]
  4033dc:	4650      	mov	r0, sl
  4033de:	f000 fb1e 	bl	403a1e <__multadd>
  4033e2:	9005      	str	r0, [sp, #20]
  4033e4:	e779      	b.n	4032da <_dtoa_r+0x932>
  4033e6:	2300      	movs	r3, #0
  4033e8:	220a      	movs	r2, #10
  4033ea:	9904      	ldr	r1, [sp, #16]
  4033ec:	4650      	mov	r0, sl
  4033ee:	f000 fb16 	bl	403a1e <__multadd>
  4033f2:	9004      	str	r0, [sp, #16]
  4033f4:	4629      	mov	r1, r5
  4033f6:	9804      	ldr	r0, [sp, #16]
  4033f8:	f7ff fa44 	bl	402884 <quorem>
  4033fc:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403400:	f804 8b01 	strb.w	r8, [r4], #1
  403404:	9b06      	ldr	r3, [sp, #24]
  403406:	1ae3      	subs	r3, r4, r3
  403408:	454b      	cmp	r3, r9
  40340a:	dbec      	blt.n	4033e6 <_dtoa_r+0xa3e>
  40340c:	9b06      	ldr	r3, [sp, #24]
  40340e:	9605      	str	r6, [sp, #20]
  403410:	f1b9 0f01 	cmp.w	r9, #1
  403414:	bfac      	ite	ge
  403416:	444b      	addge	r3, r9
  403418:	3301      	addlt	r3, #1
  40341a:	461f      	mov	r7, r3
  40341c:	2600      	movs	r6, #0
  40341e:	2201      	movs	r2, #1
  403420:	9904      	ldr	r1, [sp, #16]
  403422:	4650      	mov	r0, sl
  403424:	f000 fc6c 	bl	403d00 <__lshift>
  403428:	4629      	mov	r1, r5
  40342a:	9004      	str	r0, [sp, #16]
  40342c:	f000 fcb9 	bl	403da2 <__mcmp>
  403430:	2800      	cmp	r0, #0
  403432:	dc03      	bgt.n	40343c <_dtoa_r+0xa94>
  403434:	d116      	bne.n	403464 <_dtoa_r+0xabc>
  403436:	f018 0f01 	tst.w	r8, #1
  40343a:	d013      	beq.n	403464 <_dtoa_r+0xabc>
  40343c:	463c      	mov	r4, r7
  40343e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403442:	2b39      	cmp	r3, #57	; 0x39
  403444:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403448:	d109      	bne.n	40345e <_dtoa_r+0xab6>
  40344a:	9b06      	ldr	r3, [sp, #24]
  40344c:	4293      	cmp	r3, r2
  40344e:	d104      	bne.n	40345a <_dtoa_r+0xab2>
  403450:	f10b 0b01 	add.w	fp, fp, #1
  403454:	2331      	movs	r3, #49	; 0x31
  403456:	9a06      	ldr	r2, [sp, #24]
  403458:	e002      	b.n	403460 <_dtoa_r+0xab8>
  40345a:	4614      	mov	r4, r2
  40345c:	e7ef      	b.n	40343e <_dtoa_r+0xa96>
  40345e:	3301      	adds	r3, #1
  403460:	7013      	strb	r3, [r2, #0]
  403462:	e008      	b.n	403476 <_dtoa_r+0xace>
  403464:	463c      	mov	r4, r7
  403466:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40346a:	2b30      	cmp	r3, #48	; 0x30
  40346c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403470:	d101      	bne.n	403476 <_dtoa_r+0xace>
  403472:	4614      	mov	r4, r2
  403474:	e7f7      	b.n	403466 <_dtoa_r+0xabe>
  403476:	4629      	mov	r1, r5
  403478:	4650      	mov	r0, sl
  40347a:	f000 fab9 	bl	4039f0 <_Bfree>
  40347e:	9b05      	ldr	r3, [sp, #20]
  403480:	b16b      	cbz	r3, 40349e <_dtoa_r+0xaf6>
  403482:	b12e      	cbz	r6, 403490 <_dtoa_r+0xae8>
  403484:	429e      	cmp	r6, r3
  403486:	d003      	beq.n	403490 <_dtoa_r+0xae8>
  403488:	4631      	mov	r1, r6
  40348a:	4650      	mov	r0, sl
  40348c:	f000 fab0 	bl	4039f0 <_Bfree>
  403490:	9905      	ldr	r1, [sp, #20]
  403492:	4650      	mov	r0, sl
  403494:	f000 faac 	bl	4039f0 <_Bfree>
  403498:	e001      	b.n	40349e <_dtoa_r+0xaf6>
  40349a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40349e:	9904      	ldr	r1, [sp, #16]
  4034a0:	4650      	mov	r0, sl
  4034a2:	f000 faa5 	bl	4039f0 <_Bfree>
  4034a6:	2300      	movs	r3, #0
  4034a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4034aa:	7023      	strb	r3, [r4, #0]
  4034ac:	f10b 0301 	add.w	r3, fp, #1
  4034b0:	6013      	str	r3, [r2, #0]
  4034b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4034b4:	b11b      	cbz	r3, 4034be <_dtoa_r+0xb16>
  4034b6:	601c      	str	r4, [r3, #0]
  4034b8:	e001      	b.n	4034be <_dtoa_r+0xb16>
  4034ba:	4808      	ldr	r0, [pc, #32]	; (4034dc <_dtoa_r+0xb34>)
  4034bc:	e00a      	b.n	4034d4 <_dtoa_r+0xb2c>
  4034be:	9806      	ldr	r0, [sp, #24]
  4034c0:	e008      	b.n	4034d4 <_dtoa_r+0xb2c>
  4034c2:	f1b9 0f00 	cmp.w	r9, #0
  4034c6:	f73f aee0 	bgt.w	40328a <_dtoa_r+0x8e2>
  4034ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4034cc:	2b02      	cmp	r3, #2
  4034ce:	f77f aedc 	ble.w	40328a <_dtoa_r+0x8e2>
  4034d2:	e6af      	b.n	403234 <_dtoa_r+0x88c>
  4034d4:	b015      	add	sp, #84	; 0x54
  4034d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034da:	bf00      	nop
  4034dc:	00405544 	.word	0x00405544

004034e0 <__sflush_r>:
  4034e0:	898a      	ldrh	r2, [r1, #12]
  4034e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4034e6:	4605      	mov	r5, r0
  4034e8:	0710      	lsls	r0, r2, #28
  4034ea:	460c      	mov	r4, r1
  4034ec:	d459      	bmi.n	4035a2 <__sflush_r+0xc2>
  4034ee:	684b      	ldr	r3, [r1, #4]
  4034f0:	2b00      	cmp	r3, #0
  4034f2:	dc02      	bgt.n	4034fa <__sflush_r+0x1a>
  4034f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4034f6:	2b00      	cmp	r3, #0
  4034f8:	dd17      	ble.n	40352a <__sflush_r+0x4a>
  4034fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4034fc:	b1ae      	cbz	r6, 40352a <__sflush_r+0x4a>
  4034fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  403502:	2300      	movs	r3, #0
  403504:	b292      	uxth	r2, r2
  403506:	682f      	ldr	r7, [r5, #0]
  403508:	602b      	str	r3, [r5, #0]
  40350a:	b10a      	cbz	r2, 403510 <__sflush_r+0x30>
  40350c:	6d60      	ldr	r0, [r4, #84]	; 0x54
  40350e:	e015      	b.n	40353c <__sflush_r+0x5c>
  403510:	6a21      	ldr	r1, [r4, #32]
  403512:	2301      	movs	r3, #1
  403514:	4628      	mov	r0, r5
  403516:	47b0      	blx	r6
  403518:	1c41      	adds	r1, r0, #1
  40351a:	d10f      	bne.n	40353c <__sflush_r+0x5c>
  40351c:	682b      	ldr	r3, [r5, #0]
  40351e:	b16b      	cbz	r3, 40353c <__sflush_r+0x5c>
  403520:	2b1d      	cmp	r3, #29
  403522:	d001      	beq.n	403528 <__sflush_r+0x48>
  403524:	2b16      	cmp	r3, #22
  403526:	d103      	bne.n	403530 <__sflush_r+0x50>
  403528:	602f      	str	r7, [r5, #0]
  40352a:	2000      	movs	r0, #0
  40352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403530:	89a3      	ldrh	r3, [r4, #12]
  403532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403536:	81a3      	strh	r3, [r4, #12]
  403538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40353c:	89a3      	ldrh	r3, [r4, #12]
  40353e:	075a      	lsls	r2, r3, #29
  403540:	d505      	bpl.n	40354e <__sflush_r+0x6e>
  403542:	6863      	ldr	r3, [r4, #4]
  403544:	1ac0      	subs	r0, r0, r3
  403546:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403548:	b10b      	cbz	r3, 40354e <__sflush_r+0x6e>
  40354a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40354c:	1ac0      	subs	r0, r0, r3
  40354e:	2300      	movs	r3, #0
  403550:	4602      	mov	r2, r0
  403552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403554:	6a21      	ldr	r1, [r4, #32]
  403556:	4628      	mov	r0, r5
  403558:	47b0      	blx	r6
  40355a:	1c43      	adds	r3, r0, #1
  40355c:	89a3      	ldrh	r3, [r4, #12]
  40355e:	d106      	bne.n	40356e <__sflush_r+0x8e>
  403560:	6829      	ldr	r1, [r5, #0]
  403562:	291d      	cmp	r1, #29
  403564:	d83a      	bhi.n	4035dc <__sflush_r+0xfc>
  403566:	4a21      	ldr	r2, [pc, #132]	; (4035ec <__sflush_r+0x10c>)
  403568:	40ca      	lsrs	r2, r1
  40356a:	07d6      	lsls	r6, r2, #31
  40356c:	d536      	bpl.n	4035dc <__sflush_r+0xfc>
  40356e:	2200      	movs	r2, #0
  403570:	6062      	str	r2, [r4, #4]
  403572:	04d9      	lsls	r1, r3, #19
  403574:	6922      	ldr	r2, [r4, #16]
  403576:	6022      	str	r2, [r4, #0]
  403578:	d504      	bpl.n	403584 <__sflush_r+0xa4>
  40357a:	1c42      	adds	r2, r0, #1
  40357c:	d101      	bne.n	403582 <__sflush_r+0xa2>
  40357e:	682b      	ldr	r3, [r5, #0]
  403580:	b903      	cbnz	r3, 403584 <__sflush_r+0xa4>
  403582:	6560      	str	r0, [r4, #84]	; 0x54
  403584:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403586:	602f      	str	r7, [r5, #0]
  403588:	2900      	cmp	r1, #0
  40358a:	d0ce      	beq.n	40352a <__sflush_r+0x4a>
  40358c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403590:	4299      	cmp	r1, r3
  403592:	d002      	beq.n	40359a <__sflush_r+0xba>
  403594:	4628      	mov	r0, r5
  403596:	f000 fcdb 	bl	403f50 <_free_r>
  40359a:	2000      	movs	r0, #0
  40359c:	6360      	str	r0, [r4, #52]	; 0x34
  40359e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4035a2:	690f      	ldr	r7, [r1, #16]
  4035a4:	2f00      	cmp	r7, #0
  4035a6:	d0c0      	beq.n	40352a <__sflush_r+0x4a>
  4035a8:	0793      	lsls	r3, r2, #30
  4035aa:	680e      	ldr	r6, [r1, #0]
  4035ac:	bf08      	it	eq
  4035ae:	694b      	ldreq	r3, [r1, #20]
  4035b0:	600f      	str	r7, [r1, #0]
  4035b2:	bf18      	it	ne
  4035b4:	2300      	movne	r3, #0
  4035b6:	ebc7 0806 	rsb	r8, r7, r6
  4035ba:	608b      	str	r3, [r1, #8]
  4035bc:	e002      	b.n	4035c4 <__sflush_r+0xe4>
  4035be:	4407      	add	r7, r0
  4035c0:	ebc0 0808 	rsb	r8, r0, r8
  4035c4:	f1b8 0f00 	cmp.w	r8, #0
  4035c8:	ddaf      	ble.n	40352a <__sflush_r+0x4a>
  4035ca:	4643      	mov	r3, r8
  4035cc:	463a      	mov	r2, r7
  4035ce:	6a21      	ldr	r1, [r4, #32]
  4035d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4035d2:	4628      	mov	r0, r5
  4035d4:	47b0      	blx	r6
  4035d6:	2800      	cmp	r0, #0
  4035d8:	dcf1      	bgt.n	4035be <__sflush_r+0xde>
  4035da:	89a3      	ldrh	r3, [r4, #12]
  4035dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4035e0:	81a3      	strh	r3, [r4, #12]
  4035e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4035e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4035ea:	bf00      	nop
  4035ec:	20400001 	.word	0x20400001

004035f0 <_fflush_r>:
  4035f0:	b538      	push	{r3, r4, r5, lr}
  4035f2:	690b      	ldr	r3, [r1, #16]
  4035f4:	4605      	mov	r5, r0
  4035f6:	460c      	mov	r4, r1
  4035f8:	b1db      	cbz	r3, 403632 <_fflush_r+0x42>
  4035fa:	b118      	cbz	r0, 403604 <_fflush_r+0x14>
  4035fc:	6983      	ldr	r3, [r0, #24]
  4035fe:	b90b      	cbnz	r3, 403604 <_fflush_r+0x14>
  403600:	f000 f860 	bl	4036c4 <__sinit>
  403604:	4b0c      	ldr	r3, [pc, #48]	; (403638 <_fflush_r+0x48>)
  403606:	429c      	cmp	r4, r3
  403608:	d101      	bne.n	40360e <_fflush_r+0x1e>
  40360a:	686c      	ldr	r4, [r5, #4]
  40360c:	e008      	b.n	403620 <_fflush_r+0x30>
  40360e:	4b0b      	ldr	r3, [pc, #44]	; (40363c <_fflush_r+0x4c>)
  403610:	429c      	cmp	r4, r3
  403612:	d101      	bne.n	403618 <_fflush_r+0x28>
  403614:	68ac      	ldr	r4, [r5, #8]
  403616:	e003      	b.n	403620 <_fflush_r+0x30>
  403618:	4b09      	ldr	r3, [pc, #36]	; (403640 <_fflush_r+0x50>)
  40361a:	429c      	cmp	r4, r3
  40361c:	bf08      	it	eq
  40361e:	68ec      	ldreq	r4, [r5, #12]
  403620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403624:	b12b      	cbz	r3, 403632 <_fflush_r+0x42>
  403626:	4621      	mov	r1, r4
  403628:	4628      	mov	r0, r5
  40362a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40362e:	f7ff bf57 	b.w	4034e0 <__sflush_r>
  403632:	2000      	movs	r0, #0
  403634:	bd38      	pop	{r3, r4, r5, pc}
  403636:	bf00      	nop
  403638:	00405578 	.word	0x00405578
  40363c:	00405598 	.word	0x00405598
  403640:	004055b8 	.word	0x004055b8

00403644 <_cleanup_r>:
  403644:	4901      	ldr	r1, [pc, #4]	; (40364c <_cleanup_r+0x8>)
  403646:	f000 b8a9 	b.w	40379c <_fwalk_reent>
  40364a:	bf00      	nop
  40364c:	004035f1 	.word	0x004035f1

00403650 <std.isra.0>:
  403650:	2300      	movs	r3, #0
  403652:	b510      	push	{r4, lr}
  403654:	4604      	mov	r4, r0
  403656:	6003      	str	r3, [r0, #0]
  403658:	6043      	str	r3, [r0, #4]
  40365a:	6083      	str	r3, [r0, #8]
  40365c:	8181      	strh	r1, [r0, #12]
  40365e:	6643      	str	r3, [r0, #100]	; 0x64
  403660:	81c2      	strh	r2, [r0, #14]
  403662:	6103      	str	r3, [r0, #16]
  403664:	6143      	str	r3, [r0, #20]
  403666:	6183      	str	r3, [r0, #24]
  403668:	4619      	mov	r1, r3
  40366a:	2208      	movs	r2, #8
  40366c:	305c      	adds	r0, #92	; 0x5c
  40366e:	f7fe fa9b 	bl	401ba8 <memset>
  403672:	4b05      	ldr	r3, [pc, #20]	; (403688 <std.isra.0+0x38>)
  403674:	6263      	str	r3, [r4, #36]	; 0x24
  403676:	4b05      	ldr	r3, [pc, #20]	; (40368c <std.isra.0+0x3c>)
  403678:	62a3      	str	r3, [r4, #40]	; 0x28
  40367a:	4b05      	ldr	r3, [pc, #20]	; (403690 <std.isra.0+0x40>)
  40367c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40367e:	4b05      	ldr	r3, [pc, #20]	; (403694 <std.isra.0+0x44>)
  403680:	6224      	str	r4, [r4, #32]
  403682:	6323      	str	r3, [r4, #48]	; 0x30
  403684:	bd10      	pop	{r4, pc}
  403686:	bf00      	nop
  403688:	00404351 	.word	0x00404351
  40368c:	00404373 	.word	0x00404373
  403690:	004043ab 	.word	0x004043ab
  403694:	004043cf 	.word	0x004043cf

00403698 <__sfmoreglue>:
  403698:	b570      	push	{r4, r5, r6, lr}
  40369a:	2368      	movs	r3, #104	; 0x68
  40369c:	1e4d      	subs	r5, r1, #1
  40369e:	435d      	muls	r5, r3
  4036a0:	460e      	mov	r6, r1
  4036a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4036a6:	f000 fca1 	bl	403fec <_malloc_r>
  4036aa:	4604      	mov	r4, r0
  4036ac:	b140      	cbz	r0, 4036c0 <__sfmoreglue+0x28>
  4036ae:	2100      	movs	r1, #0
  4036b0:	e880 0042 	stmia.w	r0, {r1, r6}
  4036b4:	300c      	adds	r0, #12
  4036b6:	60a0      	str	r0, [r4, #8]
  4036b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4036bc:	f7fe fa74 	bl	401ba8 <memset>
  4036c0:	4620      	mov	r0, r4
  4036c2:	bd70      	pop	{r4, r5, r6, pc}

004036c4 <__sinit>:
  4036c4:	6983      	ldr	r3, [r0, #24]
  4036c6:	b510      	push	{r4, lr}
  4036c8:	4604      	mov	r4, r0
  4036ca:	bb33      	cbnz	r3, 40371a <__sinit+0x56>
  4036cc:	6483      	str	r3, [r0, #72]	; 0x48
  4036ce:	64c3      	str	r3, [r0, #76]	; 0x4c
  4036d0:	6503      	str	r3, [r0, #80]	; 0x50
  4036d2:	4b12      	ldr	r3, [pc, #72]	; (40371c <__sinit+0x58>)
  4036d4:	4a12      	ldr	r2, [pc, #72]	; (403720 <__sinit+0x5c>)
  4036d6:	681b      	ldr	r3, [r3, #0]
  4036d8:	6282      	str	r2, [r0, #40]	; 0x28
  4036da:	4298      	cmp	r0, r3
  4036dc:	bf04      	itt	eq
  4036de:	2301      	moveq	r3, #1
  4036e0:	6183      	streq	r3, [r0, #24]
  4036e2:	f000 f81f 	bl	403724 <__sfp>
  4036e6:	6060      	str	r0, [r4, #4]
  4036e8:	4620      	mov	r0, r4
  4036ea:	f000 f81b 	bl	403724 <__sfp>
  4036ee:	60a0      	str	r0, [r4, #8]
  4036f0:	4620      	mov	r0, r4
  4036f2:	f000 f817 	bl	403724 <__sfp>
  4036f6:	2200      	movs	r2, #0
  4036f8:	60e0      	str	r0, [r4, #12]
  4036fa:	2104      	movs	r1, #4
  4036fc:	6860      	ldr	r0, [r4, #4]
  4036fe:	f7ff ffa7 	bl	403650 <std.isra.0>
  403702:	2201      	movs	r2, #1
  403704:	2109      	movs	r1, #9
  403706:	68a0      	ldr	r0, [r4, #8]
  403708:	f7ff ffa2 	bl	403650 <std.isra.0>
  40370c:	2202      	movs	r2, #2
  40370e:	2112      	movs	r1, #18
  403710:	68e0      	ldr	r0, [r4, #12]
  403712:	f7ff ff9d 	bl	403650 <std.isra.0>
  403716:	2301      	movs	r3, #1
  403718:	61a3      	str	r3, [r4, #24]
  40371a:	bd10      	pop	{r4, pc}
  40371c:	00405530 	.word	0x00405530
  403720:	00403645 	.word	0x00403645

00403724 <__sfp>:
  403724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403726:	4b1c      	ldr	r3, [pc, #112]	; (403798 <__sfp+0x74>)
  403728:	681e      	ldr	r6, [r3, #0]
  40372a:	69b3      	ldr	r3, [r6, #24]
  40372c:	4607      	mov	r7, r0
  40372e:	b913      	cbnz	r3, 403736 <__sfp+0x12>
  403730:	4630      	mov	r0, r6
  403732:	f7ff ffc7 	bl	4036c4 <__sinit>
  403736:	3648      	adds	r6, #72	; 0x48
  403738:	68b4      	ldr	r4, [r6, #8]
  40373a:	6873      	ldr	r3, [r6, #4]
  40373c:	3b01      	subs	r3, #1
  40373e:	d404      	bmi.n	40374a <__sfp+0x26>
  403740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  403744:	b17d      	cbz	r5, 403766 <__sfp+0x42>
  403746:	3468      	adds	r4, #104	; 0x68
  403748:	e7f8      	b.n	40373c <__sfp+0x18>
  40374a:	6833      	ldr	r3, [r6, #0]
  40374c:	b10b      	cbz	r3, 403752 <__sfp+0x2e>
  40374e:	6836      	ldr	r6, [r6, #0]
  403750:	e7f2      	b.n	403738 <__sfp+0x14>
  403752:	2104      	movs	r1, #4
  403754:	4638      	mov	r0, r7
  403756:	f7ff ff9f 	bl	403698 <__sfmoreglue>
  40375a:	6030      	str	r0, [r6, #0]
  40375c:	2800      	cmp	r0, #0
  40375e:	d1f6      	bne.n	40374e <__sfp+0x2a>
  403760:	230c      	movs	r3, #12
  403762:	603b      	str	r3, [r7, #0]
  403764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403766:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40376a:	81e3      	strh	r3, [r4, #14]
  40376c:	2301      	movs	r3, #1
  40376e:	81a3      	strh	r3, [r4, #12]
  403770:	6665      	str	r5, [r4, #100]	; 0x64
  403772:	6025      	str	r5, [r4, #0]
  403774:	60a5      	str	r5, [r4, #8]
  403776:	6065      	str	r5, [r4, #4]
  403778:	6125      	str	r5, [r4, #16]
  40377a:	6165      	str	r5, [r4, #20]
  40377c:	61a5      	str	r5, [r4, #24]
  40377e:	2208      	movs	r2, #8
  403780:	4629      	mov	r1, r5
  403782:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  403786:	f7fe fa0f 	bl	401ba8 <memset>
  40378a:	6365      	str	r5, [r4, #52]	; 0x34
  40378c:	63a5      	str	r5, [r4, #56]	; 0x38
  40378e:	64a5      	str	r5, [r4, #72]	; 0x48
  403790:	64e5      	str	r5, [r4, #76]	; 0x4c
  403792:	4620      	mov	r0, r4
  403794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403796:	bf00      	nop
  403798:	00405530 	.word	0x00405530

0040379c <_fwalk_reent>:
  40379c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4037a0:	4680      	mov	r8, r0
  4037a2:	4689      	mov	r9, r1
  4037a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4037a8:	2600      	movs	r6, #0
  4037aa:	b194      	cbz	r4, 4037d2 <_fwalk_reent+0x36>
  4037ac:	68a5      	ldr	r5, [r4, #8]
  4037ae:	6867      	ldr	r7, [r4, #4]
  4037b0:	3f01      	subs	r7, #1
  4037b2:	d40c      	bmi.n	4037ce <_fwalk_reent+0x32>
  4037b4:	89ab      	ldrh	r3, [r5, #12]
  4037b6:	2b01      	cmp	r3, #1
  4037b8:	d907      	bls.n	4037ca <_fwalk_reent+0x2e>
  4037ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4037be:	3301      	adds	r3, #1
  4037c0:	d003      	beq.n	4037ca <_fwalk_reent+0x2e>
  4037c2:	4629      	mov	r1, r5
  4037c4:	4640      	mov	r0, r8
  4037c6:	47c8      	blx	r9
  4037c8:	4306      	orrs	r6, r0
  4037ca:	3568      	adds	r5, #104	; 0x68
  4037cc:	e7f0      	b.n	4037b0 <_fwalk_reent+0x14>
  4037ce:	6824      	ldr	r4, [r4, #0]
  4037d0:	e7eb      	b.n	4037aa <_fwalk_reent+0xe>
  4037d2:	4630      	mov	r0, r6
  4037d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004037d8 <_localeconv_r>:
  4037d8:	4b04      	ldr	r3, [pc, #16]	; (4037ec <_localeconv_r+0x14>)
  4037da:	681b      	ldr	r3, [r3, #0]
  4037dc:	6a18      	ldr	r0, [r3, #32]
  4037de:	4b04      	ldr	r3, [pc, #16]	; (4037f0 <_localeconv_r+0x18>)
  4037e0:	2800      	cmp	r0, #0
  4037e2:	bf08      	it	eq
  4037e4:	4618      	moveq	r0, r3
  4037e6:	30f0      	adds	r0, #240	; 0xf0
  4037e8:	4770      	bx	lr
  4037ea:	bf00      	nop
  4037ec:	20000074 	.word	0x20000074
  4037f0:	20000078 	.word	0x20000078

004037f4 <__swhatbuf_r>:
  4037f4:	b570      	push	{r4, r5, r6, lr}
  4037f6:	460e      	mov	r6, r1
  4037f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4037fc:	2900      	cmp	r1, #0
  4037fe:	b090      	sub	sp, #64	; 0x40
  403800:	4614      	mov	r4, r2
  403802:	461d      	mov	r5, r3
  403804:	da06      	bge.n	403814 <__swhatbuf_r+0x20>
  403806:	2300      	movs	r3, #0
  403808:	602b      	str	r3, [r5, #0]
  40380a:	89b3      	ldrh	r3, [r6, #12]
  40380c:	061a      	lsls	r2, r3, #24
  40380e:	d50e      	bpl.n	40382e <__swhatbuf_r+0x3a>
  403810:	2340      	movs	r3, #64	; 0x40
  403812:	e00e      	b.n	403832 <__swhatbuf_r+0x3e>
  403814:	aa01      	add	r2, sp, #4
  403816:	f000 fe01 	bl	40441c <_fstat_r>
  40381a:	2800      	cmp	r0, #0
  40381c:	dbf3      	blt.n	403806 <__swhatbuf_r+0x12>
  40381e:	9a02      	ldr	r2, [sp, #8]
  403820:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403824:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  403828:	425a      	negs	r2, r3
  40382a:	415a      	adcs	r2, r3
  40382c:	602a      	str	r2, [r5, #0]
  40382e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403832:	2000      	movs	r0, #0
  403834:	6023      	str	r3, [r4, #0]
  403836:	b010      	add	sp, #64	; 0x40
  403838:	bd70      	pop	{r4, r5, r6, pc}
	...

0040383c <__smakebuf_r>:
  40383c:	898b      	ldrh	r3, [r1, #12]
  40383e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  403840:	079e      	lsls	r6, r3, #30
  403842:	4605      	mov	r5, r0
  403844:	460c      	mov	r4, r1
  403846:	d410      	bmi.n	40386a <__smakebuf_r+0x2e>
  403848:	ab01      	add	r3, sp, #4
  40384a:	466a      	mov	r2, sp
  40384c:	f7ff ffd2 	bl	4037f4 <__swhatbuf_r>
  403850:	9900      	ldr	r1, [sp, #0]
  403852:	4606      	mov	r6, r0
  403854:	4628      	mov	r0, r5
  403856:	f000 fbc9 	bl	403fec <_malloc_r>
  40385a:	b968      	cbnz	r0, 403878 <__smakebuf_r+0x3c>
  40385c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403860:	059a      	lsls	r2, r3, #22
  403862:	d422      	bmi.n	4038aa <__smakebuf_r+0x6e>
  403864:	f043 0302 	orr.w	r3, r3, #2
  403868:	81a3      	strh	r3, [r4, #12]
  40386a:	f104 0347 	add.w	r3, r4, #71	; 0x47
  40386e:	6023      	str	r3, [r4, #0]
  403870:	6123      	str	r3, [r4, #16]
  403872:	2301      	movs	r3, #1
  403874:	6163      	str	r3, [r4, #20]
  403876:	e018      	b.n	4038aa <__smakebuf_r+0x6e>
  403878:	4b0d      	ldr	r3, [pc, #52]	; (4038b0 <__smakebuf_r+0x74>)
  40387a:	62ab      	str	r3, [r5, #40]	; 0x28
  40387c:	89a3      	ldrh	r3, [r4, #12]
  40387e:	6020      	str	r0, [r4, #0]
  403880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403884:	81a3      	strh	r3, [r4, #12]
  403886:	9b00      	ldr	r3, [sp, #0]
  403888:	6163      	str	r3, [r4, #20]
  40388a:	9b01      	ldr	r3, [sp, #4]
  40388c:	6120      	str	r0, [r4, #16]
  40388e:	b14b      	cbz	r3, 4038a4 <__smakebuf_r+0x68>
  403890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403894:	4628      	mov	r0, r5
  403896:	f000 fdd3 	bl	404440 <_isatty_r>
  40389a:	b118      	cbz	r0, 4038a4 <__smakebuf_r+0x68>
  40389c:	89a3      	ldrh	r3, [r4, #12]
  40389e:	f043 0301 	orr.w	r3, r3, #1
  4038a2:	81a3      	strh	r3, [r4, #12]
  4038a4:	89a0      	ldrh	r0, [r4, #12]
  4038a6:	4330      	orrs	r0, r6
  4038a8:	81a0      	strh	r0, [r4, #12]
  4038aa:	b002      	add	sp, #8
  4038ac:	bd70      	pop	{r4, r5, r6, pc}
  4038ae:	bf00      	nop
  4038b0:	00403645 	.word	0x00403645

004038b4 <malloc>:
  4038b4:	4b02      	ldr	r3, [pc, #8]	; (4038c0 <malloc+0xc>)
  4038b6:	4601      	mov	r1, r0
  4038b8:	6818      	ldr	r0, [r3, #0]
  4038ba:	f000 bb97 	b.w	403fec <_malloc_r>
  4038be:	bf00      	nop
  4038c0:	20000074 	.word	0x20000074
	...

004038d0 <memchr>:
  4038d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4038d4:	2a10      	cmp	r2, #16
  4038d6:	db2b      	blt.n	403930 <memchr+0x60>
  4038d8:	f010 0f07 	tst.w	r0, #7
  4038dc:	d008      	beq.n	4038f0 <memchr+0x20>
  4038de:	f810 3b01 	ldrb.w	r3, [r0], #1
  4038e2:	3a01      	subs	r2, #1
  4038e4:	428b      	cmp	r3, r1
  4038e6:	d02d      	beq.n	403944 <memchr+0x74>
  4038e8:	f010 0f07 	tst.w	r0, #7
  4038ec:	b342      	cbz	r2, 403940 <memchr+0x70>
  4038ee:	d1f6      	bne.n	4038de <memchr+0xe>
  4038f0:	b4f0      	push	{r4, r5, r6, r7}
  4038f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4038f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4038fa:	f022 0407 	bic.w	r4, r2, #7
  4038fe:	f07f 0700 	mvns.w	r7, #0
  403902:	2300      	movs	r3, #0
  403904:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403908:	3c08      	subs	r4, #8
  40390a:	ea85 0501 	eor.w	r5, r5, r1
  40390e:	ea86 0601 	eor.w	r6, r6, r1
  403912:	fa85 f547 	uadd8	r5, r5, r7
  403916:	faa3 f587 	sel	r5, r3, r7
  40391a:	fa86 f647 	uadd8	r6, r6, r7
  40391e:	faa5 f687 	sel	r6, r5, r7
  403922:	b98e      	cbnz	r6, 403948 <memchr+0x78>
  403924:	d1ee      	bne.n	403904 <memchr+0x34>
  403926:	bcf0      	pop	{r4, r5, r6, r7}
  403928:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40392c:	f002 0207 	and.w	r2, r2, #7
  403930:	b132      	cbz	r2, 403940 <memchr+0x70>
  403932:	f810 3b01 	ldrb.w	r3, [r0], #1
  403936:	3a01      	subs	r2, #1
  403938:	ea83 0301 	eor.w	r3, r3, r1
  40393c:	b113      	cbz	r3, 403944 <memchr+0x74>
  40393e:	d1f8      	bne.n	403932 <memchr+0x62>
  403940:	2000      	movs	r0, #0
  403942:	4770      	bx	lr
  403944:	3801      	subs	r0, #1
  403946:	4770      	bx	lr
  403948:	2d00      	cmp	r5, #0
  40394a:	bf06      	itte	eq
  40394c:	4635      	moveq	r5, r6
  40394e:	3803      	subeq	r0, #3
  403950:	3807      	subne	r0, #7
  403952:	f015 0f01 	tst.w	r5, #1
  403956:	d107      	bne.n	403968 <memchr+0x98>
  403958:	3001      	adds	r0, #1
  40395a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40395e:	bf02      	ittt	eq
  403960:	3001      	addeq	r0, #1
  403962:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403966:	3001      	addeq	r0, #1
  403968:	bcf0      	pop	{r4, r5, r6, r7}
  40396a:	3801      	subs	r0, #1
  40396c:	4770      	bx	lr
  40396e:	bf00      	nop

00403970 <memcpy>:
  403970:	b510      	push	{r4, lr}
  403972:	1e43      	subs	r3, r0, #1
  403974:	440a      	add	r2, r1
  403976:	4291      	cmp	r1, r2
  403978:	d004      	beq.n	403984 <memcpy+0x14>
  40397a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40397e:	f803 4f01 	strb.w	r4, [r3, #1]!
  403982:	e7f8      	b.n	403976 <memcpy+0x6>
  403984:	bd10      	pop	{r4, pc}

00403986 <_Balloc>:
  403986:	b570      	push	{r4, r5, r6, lr}
  403988:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40398a:	4604      	mov	r4, r0
  40398c:	460e      	mov	r6, r1
  40398e:	b93d      	cbnz	r5, 4039a0 <_Balloc+0x1a>
  403990:	2010      	movs	r0, #16
  403992:	f7ff ff8f 	bl	4038b4 <malloc>
  403996:	6260      	str	r0, [r4, #36]	; 0x24
  403998:	6045      	str	r5, [r0, #4]
  40399a:	6085      	str	r5, [r0, #8]
  40399c:	6005      	str	r5, [r0, #0]
  40399e:	60c5      	str	r5, [r0, #12]
  4039a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4039a2:	68eb      	ldr	r3, [r5, #12]
  4039a4:	b143      	cbz	r3, 4039b8 <_Balloc+0x32>
  4039a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4039a8:	68db      	ldr	r3, [r3, #12]
  4039aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  4039ae:	b178      	cbz	r0, 4039d0 <_Balloc+0x4a>
  4039b0:	6802      	ldr	r2, [r0, #0]
  4039b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4039b6:	e017      	b.n	4039e8 <_Balloc+0x62>
  4039b8:	2221      	movs	r2, #33	; 0x21
  4039ba:	2104      	movs	r1, #4
  4039bc:	4620      	mov	r0, r4
  4039be:	f000 fab9 	bl	403f34 <_calloc_r>
  4039c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4039c4:	60e8      	str	r0, [r5, #12]
  4039c6:	68db      	ldr	r3, [r3, #12]
  4039c8:	2b00      	cmp	r3, #0
  4039ca:	d1ec      	bne.n	4039a6 <_Balloc+0x20>
  4039cc:	2000      	movs	r0, #0
  4039ce:	bd70      	pop	{r4, r5, r6, pc}
  4039d0:	2101      	movs	r1, #1
  4039d2:	fa01 f506 	lsl.w	r5, r1, r6
  4039d6:	1d6a      	adds	r2, r5, #5
  4039d8:	0092      	lsls	r2, r2, #2
  4039da:	4620      	mov	r0, r4
  4039dc:	f000 faaa 	bl	403f34 <_calloc_r>
  4039e0:	2800      	cmp	r0, #0
  4039e2:	d0f3      	beq.n	4039cc <_Balloc+0x46>
  4039e4:	6046      	str	r6, [r0, #4]
  4039e6:	6085      	str	r5, [r0, #8]
  4039e8:	2300      	movs	r3, #0
  4039ea:	6103      	str	r3, [r0, #16]
  4039ec:	60c3      	str	r3, [r0, #12]
  4039ee:	bd70      	pop	{r4, r5, r6, pc}

004039f0 <_Bfree>:
  4039f0:	b570      	push	{r4, r5, r6, lr}
  4039f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4039f4:	4606      	mov	r6, r0
  4039f6:	460d      	mov	r5, r1
  4039f8:	b93c      	cbnz	r4, 403a0a <_Bfree+0x1a>
  4039fa:	2010      	movs	r0, #16
  4039fc:	f7ff ff5a 	bl	4038b4 <malloc>
  403a00:	6270      	str	r0, [r6, #36]	; 0x24
  403a02:	6044      	str	r4, [r0, #4]
  403a04:	6084      	str	r4, [r0, #8]
  403a06:	6004      	str	r4, [r0, #0]
  403a08:	60c4      	str	r4, [r0, #12]
  403a0a:	b13d      	cbz	r5, 403a1c <_Bfree+0x2c>
  403a0c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  403a0e:	686a      	ldr	r2, [r5, #4]
  403a10:	68db      	ldr	r3, [r3, #12]
  403a12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  403a16:	6029      	str	r1, [r5, #0]
  403a18:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  403a1c:	bd70      	pop	{r4, r5, r6, pc}

00403a1e <__multadd>:
  403a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a22:	690d      	ldr	r5, [r1, #16]
  403a24:	461f      	mov	r7, r3
  403a26:	4606      	mov	r6, r0
  403a28:	460c      	mov	r4, r1
  403a2a:	f101 0e14 	add.w	lr, r1, #20
  403a2e:	2300      	movs	r3, #0
  403a30:	f8de 0000 	ldr.w	r0, [lr]
  403a34:	b281      	uxth	r1, r0
  403a36:	fb02 7101 	mla	r1, r2, r1, r7
  403a3a:	0c0f      	lsrs	r7, r1, #16
  403a3c:	0c00      	lsrs	r0, r0, #16
  403a3e:	fb02 7000 	mla	r0, r2, r0, r7
  403a42:	b289      	uxth	r1, r1
  403a44:	3301      	adds	r3, #1
  403a46:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  403a4a:	429d      	cmp	r5, r3
  403a4c:	ea4f 4710 	mov.w	r7, r0, lsr #16
  403a50:	f84e 1b04 	str.w	r1, [lr], #4
  403a54:	dcec      	bgt.n	403a30 <__multadd+0x12>
  403a56:	b1d7      	cbz	r7, 403a8e <__multadd+0x70>
  403a58:	68a3      	ldr	r3, [r4, #8]
  403a5a:	429d      	cmp	r5, r3
  403a5c:	db12      	blt.n	403a84 <__multadd+0x66>
  403a5e:	6861      	ldr	r1, [r4, #4]
  403a60:	4630      	mov	r0, r6
  403a62:	3101      	adds	r1, #1
  403a64:	f7ff ff8f 	bl	403986 <_Balloc>
  403a68:	6922      	ldr	r2, [r4, #16]
  403a6a:	3202      	adds	r2, #2
  403a6c:	f104 010c 	add.w	r1, r4, #12
  403a70:	4680      	mov	r8, r0
  403a72:	0092      	lsls	r2, r2, #2
  403a74:	300c      	adds	r0, #12
  403a76:	f7ff ff7b 	bl	403970 <memcpy>
  403a7a:	4621      	mov	r1, r4
  403a7c:	4630      	mov	r0, r6
  403a7e:	f7ff ffb7 	bl	4039f0 <_Bfree>
  403a82:	4644      	mov	r4, r8
  403a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  403a88:	3501      	adds	r5, #1
  403a8a:	615f      	str	r7, [r3, #20]
  403a8c:	6125      	str	r5, [r4, #16]
  403a8e:	4620      	mov	r0, r4
  403a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403a94 <__hi0bits>:
  403a94:	0c03      	lsrs	r3, r0, #16
  403a96:	041b      	lsls	r3, r3, #16
  403a98:	b913      	cbnz	r3, 403aa0 <__hi0bits+0xc>
  403a9a:	0400      	lsls	r0, r0, #16
  403a9c:	2310      	movs	r3, #16
  403a9e:	e000      	b.n	403aa2 <__hi0bits+0xe>
  403aa0:	2300      	movs	r3, #0
  403aa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  403aa6:	bf04      	itt	eq
  403aa8:	0200      	lsleq	r0, r0, #8
  403aaa:	3308      	addeq	r3, #8
  403aac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  403ab0:	bf04      	itt	eq
  403ab2:	0100      	lsleq	r0, r0, #4
  403ab4:	3304      	addeq	r3, #4
  403ab6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  403aba:	bf04      	itt	eq
  403abc:	0080      	lsleq	r0, r0, #2
  403abe:	3302      	addeq	r3, #2
  403ac0:	2800      	cmp	r0, #0
  403ac2:	db03      	blt.n	403acc <__hi0bits+0x38>
  403ac4:	0042      	lsls	r2, r0, #1
  403ac6:	d503      	bpl.n	403ad0 <__hi0bits+0x3c>
  403ac8:	1c58      	adds	r0, r3, #1
  403aca:	4770      	bx	lr
  403acc:	4618      	mov	r0, r3
  403ace:	4770      	bx	lr
  403ad0:	2020      	movs	r0, #32
  403ad2:	4770      	bx	lr

00403ad4 <__lo0bits>:
  403ad4:	6803      	ldr	r3, [r0, #0]
  403ad6:	f013 0207 	ands.w	r2, r3, #7
  403ada:	d00b      	beq.n	403af4 <__lo0bits+0x20>
  403adc:	07d9      	lsls	r1, r3, #31
  403ade:	d422      	bmi.n	403b26 <__lo0bits+0x52>
  403ae0:	079a      	lsls	r2, r3, #30
  403ae2:	bf4b      	itete	mi
  403ae4:	085b      	lsrmi	r3, r3, #1
  403ae6:	089b      	lsrpl	r3, r3, #2
  403ae8:	6003      	strmi	r3, [r0, #0]
  403aea:	6003      	strpl	r3, [r0, #0]
  403aec:	bf4c      	ite	mi
  403aee:	2001      	movmi	r0, #1
  403af0:	2002      	movpl	r0, #2
  403af2:	4770      	bx	lr
  403af4:	b299      	uxth	r1, r3
  403af6:	b909      	cbnz	r1, 403afc <__lo0bits+0x28>
  403af8:	0c1b      	lsrs	r3, r3, #16
  403afa:	2210      	movs	r2, #16
  403afc:	f013 0fff 	tst.w	r3, #255	; 0xff
  403b00:	bf04      	itt	eq
  403b02:	0a1b      	lsreq	r3, r3, #8
  403b04:	3208      	addeq	r2, #8
  403b06:	0719      	lsls	r1, r3, #28
  403b08:	bf04      	itt	eq
  403b0a:	091b      	lsreq	r3, r3, #4
  403b0c:	3204      	addeq	r2, #4
  403b0e:	0799      	lsls	r1, r3, #30
  403b10:	bf04      	itt	eq
  403b12:	089b      	lsreq	r3, r3, #2
  403b14:	3202      	addeq	r2, #2
  403b16:	07d9      	lsls	r1, r3, #31
  403b18:	d402      	bmi.n	403b20 <__lo0bits+0x4c>
  403b1a:	085b      	lsrs	r3, r3, #1
  403b1c:	d005      	beq.n	403b2a <__lo0bits+0x56>
  403b1e:	3201      	adds	r2, #1
  403b20:	6003      	str	r3, [r0, #0]
  403b22:	4610      	mov	r0, r2
  403b24:	4770      	bx	lr
  403b26:	2000      	movs	r0, #0
  403b28:	4770      	bx	lr
  403b2a:	2020      	movs	r0, #32
  403b2c:	4770      	bx	lr

00403b2e <__i2b>:
  403b2e:	b510      	push	{r4, lr}
  403b30:	460c      	mov	r4, r1
  403b32:	2101      	movs	r1, #1
  403b34:	f7ff ff27 	bl	403986 <_Balloc>
  403b38:	2201      	movs	r2, #1
  403b3a:	6144      	str	r4, [r0, #20]
  403b3c:	6102      	str	r2, [r0, #16]
  403b3e:	bd10      	pop	{r4, pc}

00403b40 <__multiply>:
  403b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b44:	4614      	mov	r4, r2
  403b46:	690a      	ldr	r2, [r1, #16]
  403b48:	6923      	ldr	r3, [r4, #16]
  403b4a:	429a      	cmp	r2, r3
  403b4c:	bfb8      	it	lt
  403b4e:	460b      	movlt	r3, r1
  403b50:	4688      	mov	r8, r1
  403b52:	bfbc      	itt	lt
  403b54:	46a0      	movlt	r8, r4
  403b56:	461c      	movlt	r4, r3
  403b58:	f8d8 7010 	ldr.w	r7, [r8, #16]
  403b5c:	f8d4 9010 	ldr.w	r9, [r4, #16]
  403b60:	f8d8 3008 	ldr.w	r3, [r8, #8]
  403b64:	f8d8 1004 	ldr.w	r1, [r8, #4]
  403b68:	eb07 0609 	add.w	r6, r7, r9
  403b6c:	429e      	cmp	r6, r3
  403b6e:	bfc8      	it	gt
  403b70:	3101      	addgt	r1, #1
  403b72:	f7ff ff08 	bl	403986 <_Balloc>
  403b76:	f100 0514 	add.w	r5, r0, #20
  403b7a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  403b7e:	462b      	mov	r3, r5
  403b80:	2200      	movs	r2, #0
  403b82:	4563      	cmp	r3, ip
  403b84:	d202      	bcs.n	403b8c <__multiply+0x4c>
  403b86:	f843 2b04 	str.w	r2, [r3], #4
  403b8a:	e7fa      	b.n	403b82 <__multiply+0x42>
  403b8c:	f104 0214 	add.w	r2, r4, #20
  403b90:	f108 0114 	add.w	r1, r8, #20
  403b94:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  403b98:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  403b9c:	9300      	str	r3, [sp, #0]
  403b9e:	9b00      	ldr	r3, [sp, #0]
  403ba0:	9201      	str	r2, [sp, #4]
  403ba2:	4293      	cmp	r3, r2
  403ba4:	d957      	bls.n	403c56 <__multiply+0x116>
  403ba6:	f8b2 b000 	ldrh.w	fp, [r2]
  403baa:	f1bb 0f00 	cmp.w	fp, #0
  403bae:	d023      	beq.n	403bf8 <__multiply+0xb8>
  403bb0:	4689      	mov	r9, r1
  403bb2:	46ae      	mov	lr, r5
  403bb4:	f04f 0800 	mov.w	r8, #0
  403bb8:	f859 4b04 	ldr.w	r4, [r9], #4
  403bbc:	f8be a000 	ldrh.w	sl, [lr]
  403bc0:	b2a3      	uxth	r3, r4
  403bc2:	fb0b a303 	mla	r3, fp, r3, sl
  403bc6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  403bca:	f8de 4000 	ldr.w	r4, [lr]
  403bce:	4443      	add	r3, r8
  403bd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
  403bd4:	fb0b 840a 	mla	r4, fp, sl, r8
  403bd8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  403bdc:	46f2      	mov	sl, lr
  403bde:	b29b      	uxth	r3, r3
  403be0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  403be4:	454f      	cmp	r7, r9
  403be6:	ea4f 4814 	mov.w	r8, r4, lsr #16
  403bea:	f84a 3b04 	str.w	r3, [sl], #4
  403bee:	d901      	bls.n	403bf4 <__multiply+0xb4>
  403bf0:	46d6      	mov	lr, sl
  403bf2:	e7e1      	b.n	403bb8 <__multiply+0x78>
  403bf4:	f8ce 8004 	str.w	r8, [lr, #4]
  403bf8:	9b01      	ldr	r3, [sp, #4]
  403bfa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  403bfe:	3204      	adds	r2, #4
  403c00:	f1ba 0f00 	cmp.w	sl, #0
  403c04:	d021      	beq.n	403c4a <__multiply+0x10a>
  403c06:	682b      	ldr	r3, [r5, #0]
  403c08:	462c      	mov	r4, r5
  403c0a:	4689      	mov	r9, r1
  403c0c:	f04f 0800 	mov.w	r8, #0
  403c10:	f8b9 e000 	ldrh.w	lr, [r9]
  403c14:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  403c18:	fb0a be0e 	mla	lr, sl, lr, fp
  403c1c:	44f0      	add	r8, lr
  403c1e:	46a3      	mov	fp, r4
  403c20:	b29b      	uxth	r3, r3
  403c22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  403c26:	f84b 3b04 	str.w	r3, [fp], #4
  403c2a:	f859 3b04 	ldr.w	r3, [r9], #4
  403c2e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  403c32:	0c1b      	lsrs	r3, r3, #16
  403c34:	fb0a e303 	mla	r3, sl, r3, lr
  403c38:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  403c3c:	454f      	cmp	r7, r9
  403c3e:	ea4f 4813 	mov.w	r8, r3, lsr #16
  403c42:	d901      	bls.n	403c48 <__multiply+0x108>
  403c44:	465c      	mov	r4, fp
  403c46:	e7e3      	b.n	403c10 <__multiply+0xd0>
  403c48:	6063      	str	r3, [r4, #4]
  403c4a:	3504      	adds	r5, #4
  403c4c:	e7a7      	b.n	403b9e <__multiply+0x5e>
  403c4e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  403c52:	b913      	cbnz	r3, 403c5a <__multiply+0x11a>
  403c54:	3e01      	subs	r6, #1
  403c56:	2e00      	cmp	r6, #0
  403c58:	dcf9      	bgt.n	403c4e <__multiply+0x10e>
  403c5a:	6106      	str	r6, [r0, #16]
  403c5c:	b003      	add	sp, #12
  403c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00403c64 <__pow5mult>:
  403c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403c68:	4615      	mov	r5, r2
  403c6a:	f012 0203 	ands.w	r2, r2, #3
  403c6e:	4606      	mov	r6, r0
  403c70:	460f      	mov	r7, r1
  403c72:	d007      	beq.n	403c84 <__pow5mult+0x20>
  403c74:	3a01      	subs	r2, #1
  403c76:	4c21      	ldr	r4, [pc, #132]	; (403cfc <__pow5mult+0x98>)
  403c78:	2300      	movs	r3, #0
  403c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  403c7e:	f7ff fece 	bl	403a1e <__multadd>
  403c82:	4607      	mov	r7, r0
  403c84:	10ad      	asrs	r5, r5, #2
  403c86:	d036      	beq.n	403cf6 <__pow5mult+0x92>
  403c88:	6a74      	ldr	r4, [r6, #36]	; 0x24
  403c8a:	b93c      	cbnz	r4, 403c9c <__pow5mult+0x38>
  403c8c:	2010      	movs	r0, #16
  403c8e:	f7ff fe11 	bl	4038b4 <malloc>
  403c92:	6270      	str	r0, [r6, #36]	; 0x24
  403c94:	6044      	str	r4, [r0, #4]
  403c96:	6084      	str	r4, [r0, #8]
  403c98:	6004      	str	r4, [r0, #0]
  403c9a:	60c4      	str	r4, [r0, #12]
  403c9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  403ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  403ca4:	b94c      	cbnz	r4, 403cba <__pow5mult+0x56>
  403ca6:	f240 2171 	movw	r1, #625	; 0x271
  403caa:	4630      	mov	r0, r6
  403cac:	f7ff ff3f 	bl	403b2e <__i2b>
  403cb0:	2300      	movs	r3, #0
  403cb2:	f8c8 0008 	str.w	r0, [r8, #8]
  403cb6:	4604      	mov	r4, r0
  403cb8:	6003      	str	r3, [r0, #0]
  403cba:	f04f 0800 	mov.w	r8, #0
  403cbe:	07eb      	lsls	r3, r5, #31
  403cc0:	d50a      	bpl.n	403cd8 <__pow5mult+0x74>
  403cc2:	4639      	mov	r1, r7
  403cc4:	4622      	mov	r2, r4
  403cc6:	4630      	mov	r0, r6
  403cc8:	f7ff ff3a 	bl	403b40 <__multiply>
  403ccc:	4639      	mov	r1, r7
  403cce:	4681      	mov	r9, r0
  403cd0:	4630      	mov	r0, r6
  403cd2:	f7ff fe8d 	bl	4039f0 <_Bfree>
  403cd6:	464f      	mov	r7, r9
  403cd8:	106d      	asrs	r5, r5, #1
  403cda:	d00c      	beq.n	403cf6 <__pow5mult+0x92>
  403cdc:	6820      	ldr	r0, [r4, #0]
  403cde:	b108      	cbz	r0, 403ce4 <__pow5mult+0x80>
  403ce0:	4604      	mov	r4, r0
  403ce2:	e7ec      	b.n	403cbe <__pow5mult+0x5a>
  403ce4:	4622      	mov	r2, r4
  403ce6:	4621      	mov	r1, r4
  403ce8:	4630      	mov	r0, r6
  403cea:	f7ff ff29 	bl	403b40 <__multiply>
  403cee:	6020      	str	r0, [r4, #0]
  403cf0:	f8c0 8000 	str.w	r8, [r0]
  403cf4:	e7f4      	b.n	403ce0 <__pow5mult+0x7c>
  403cf6:	4638      	mov	r0, r7
  403cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403cfc:	004056c8 	.word	0x004056c8

00403d00 <__lshift>:
  403d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d04:	460c      	mov	r4, r1
  403d06:	ea4f 1a62 	mov.w	sl, r2, asr #5
  403d0a:	6926      	ldr	r6, [r4, #16]
  403d0c:	6849      	ldr	r1, [r1, #4]
  403d0e:	68a3      	ldr	r3, [r4, #8]
  403d10:	4456      	add	r6, sl
  403d12:	4607      	mov	r7, r0
  403d14:	4691      	mov	r9, r2
  403d16:	1c75      	adds	r5, r6, #1
  403d18:	42ab      	cmp	r3, r5
  403d1a:	da02      	bge.n	403d22 <__lshift+0x22>
  403d1c:	3101      	adds	r1, #1
  403d1e:	005b      	lsls	r3, r3, #1
  403d20:	e7fa      	b.n	403d18 <__lshift+0x18>
  403d22:	4638      	mov	r0, r7
  403d24:	f7ff fe2f 	bl	403986 <_Balloc>
  403d28:	2300      	movs	r3, #0
  403d2a:	4680      	mov	r8, r0
  403d2c:	f100 0114 	add.w	r1, r0, #20
  403d30:	461a      	mov	r2, r3
  403d32:	4553      	cmp	r3, sl
  403d34:	da03      	bge.n	403d3e <__lshift+0x3e>
  403d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403d3a:	3301      	adds	r3, #1
  403d3c:	e7f9      	b.n	403d32 <__lshift+0x32>
  403d3e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  403d42:	6920      	ldr	r0, [r4, #16]
  403d44:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  403d48:	f019 091f 	ands.w	r9, r9, #31
  403d4c:	f104 0114 	add.w	r1, r4, #20
  403d50:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  403d54:	d014      	beq.n	403d80 <__lshift+0x80>
  403d56:	f1c9 0c20 	rsb	ip, r9, #32
  403d5a:	2200      	movs	r2, #0
  403d5c:	6808      	ldr	r0, [r1, #0]
  403d5e:	fa00 f009 	lsl.w	r0, r0, r9
  403d62:	4302      	orrs	r2, r0
  403d64:	469a      	mov	sl, r3
  403d66:	f843 2b04 	str.w	r2, [r3], #4
  403d6a:	f851 2b04 	ldr.w	r2, [r1], #4
  403d6e:	458e      	cmp	lr, r1
  403d70:	fa22 f20c 	lsr.w	r2, r2, ip
  403d74:	d8f2      	bhi.n	403d5c <__lshift+0x5c>
  403d76:	f8ca 2004 	str.w	r2, [sl, #4]
  403d7a:	b142      	cbz	r2, 403d8e <__lshift+0x8e>
  403d7c:	1cb5      	adds	r5, r6, #2
  403d7e:	e006      	b.n	403d8e <__lshift+0x8e>
  403d80:	3b04      	subs	r3, #4
  403d82:	f851 2b04 	ldr.w	r2, [r1], #4
  403d86:	f843 2f04 	str.w	r2, [r3, #4]!
  403d8a:	458e      	cmp	lr, r1
  403d8c:	d8f9      	bhi.n	403d82 <__lshift+0x82>
  403d8e:	3d01      	subs	r5, #1
  403d90:	4638      	mov	r0, r7
  403d92:	f8c8 5010 	str.w	r5, [r8, #16]
  403d96:	4621      	mov	r1, r4
  403d98:	f7ff fe2a 	bl	4039f0 <_Bfree>
  403d9c:	4640      	mov	r0, r8
  403d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00403da2 <__mcmp>:
  403da2:	6903      	ldr	r3, [r0, #16]
  403da4:	690a      	ldr	r2, [r1, #16]
  403da6:	1a9b      	subs	r3, r3, r2
  403da8:	b510      	push	{r4, lr}
  403daa:	d111      	bne.n	403dd0 <__mcmp+0x2e>
  403dac:	0092      	lsls	r2, r2, #2
  403dae:	3014      	adds	r0, #20
  403db0:	3114      	adds	r1, #20
  403db2:	1883      	adds	r3, r0, r2
  403db4:	440a      	add	r2, r1
  403db6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  403dba:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  403dbe:	428c      	cmp	r4, r1
  403dc0:	d002      	beq.n	403dc8 <__mcmp+0x26>
  403dc2:	d307      	bcc.n	403dd4 <__mcmp+0x32>
  403dc4:	2001      	movs	r0, #1
  403dc6:	bd10      	pop	{r4, pc}
  403dc8:	4298      	cmp	r0, r3
  403dca:	d3f4      	bcc.n	403db6 <__mcmp+0x14>
  403dcc:	2000      	movs	r0, #0
  403dce:	bd10      	pop	{r4, pc}
  403dd0:	4618      	mov	r0, r3
  403dd2:	bd10      	pop	{r4, pc}
  403dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403dd8:	bd10      	pop	{r4, pc}

00403dda <__mdiff>:
  403dda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403dde:	460c      	mov	r4, r1
  403de0:	4607      	mov	r7, r0
  403de2:	4611      	mov	r1, r2
  403de4:	4620      	mov	r0, r4
  403de6:	4615      	mov	r5, r2
  403de8:	f7ff ffdb 	bl	403da2 <__mcmp>
  403dec:	1e06      	subs	r6, r0, #0
  403dee:	d108      	bne.n	403e02 <__mdiff+0x28>
  403df0:	4631      	mov	r1, r6
  403df2:	4638      	mov	r0, r7
  403df4:	f7ff fdc7 	bl	403986 <_Balloc>
  403df8:	2301      	movs	r3, #1
  403dfa:	6103      	str	r3, [r0, #16]
  403dfc:	6146      	str	r6, [r0, #20]
  403dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403e02:	bfbc      	itt	lt
  403e04:	4623      	movlt	r3, r4
  403e06:	462c      	movlt	r4, r5
  403e08:	4638      	mov	r0, r7
  403e0a:	6861      	ldr	r1, [r4, #4]
  403e0c:	bfba      	itte	lt
  403e0e:	461d      	movlt	r5, r3
  403e10:	2601      	movlt	r6, #1
  403e12:	2600      	movge	r6, #0
  403e14:	f7ff fdb7 	bl	403986 <_Balloc>
  403e18:	692b      	ldr	r3, [r5, #16]
  403e1a:	60c6      	str	r6, [r0, #12]
  403e1c:	6926      	ldr	r6, [r4, #16]
  403e1e:	f105 0914 	add.w	r9, r5, #20
  403e22:	3414      	adds	r4, #20
  403e24:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  403e28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  403e2c:	f100 0514 	add.w	r5, r0, #20
  403e30:	f04f 0c00 	mov.w	ip, #0
  403e34:	f854 3b04 	ldr.w	r3, [r4], #4
  403e38:	f859 2b04 	ldr.w	r2, [r9], #4
  403e3c:	fa1c f183 	uxtah	r1, ip, r3
  403e40:	fa1f fe82 	uxth.w	lr, r2
  403e44:	0c12      	lsrs	r2, r2, #16
  403e46:	ebce 0101 	rsb	r1, lr, r1
  403e4a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  403e4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  403e52:	b289      	uxth	r1, r1
  403e54:	ea4f 4c23 	mov.w	ip, r3, asr #16
  403e58:	45c8      	cmp	r8, r9
  403e5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  403e5e:	46a6      	mov	lr, r4
  403e60:	f845 3b04 	str.w	r3, [r5], #4
  403e64:	d8e6      	bhi.n	403e34 <__mdiff+0x5a>
  403e66:	45be      	cmp	lr, r7
  403e68:	d20e      	bcs.n	403e88 <__mdiff+0xae>
  403e6a:	f85e 1b04 	ldr.w	r1, [lr], #4
  403e6e:	fa1c f281 	uxtah	r2, ip, r1
  403e72:	1413      	asrs	r3, r2, #16
  403e74:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  403e78:	b292      	uxth	r2, r2
  403e7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403e7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  403e82:	f845 2b04 	str.w	r2, [r5], #4
  403e86:	e7ee      	b.n	403e66 <__mdiff+0x8c>
  403e88:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403e8c:	b90b      	cbnz	r3, 403e92 <__mdiff+0xb8>
  403e8e:	3e01      	subs	r6, #1
  403e90:	e7fa      	b.n	403e88 <__mdiff+0xae>
  403e92:	6106      	str	r6, [r0, #16]
  403e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00403e98 <__d2b>:
  403e98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  403e9c:	2101      	movs	r1, #1
  403e9e:	461c      	mov	r4, r3
  403ea0:	4690      	mov	r8, r2
  403ea2:	9e08      	ldr	r6, [sp, #32]
  403ea4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403ea6:	f7ff fd6e 	bl	403986 <_Balloc>
  403eaa:	f3c4 0213 	ubfx	r2, r4, #0, #20
  403eae:	f3c4 540a 	ubfx	r4, r4, #20, #11
  403eb2:	4607      	mov	r7, r0
  403eb4:	b10c      	cbz	r4, 403eba <__d2b+0x22>
  403eb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  403eba:	9201      	str	r2, [sp, #4]
  403ebc:	f1b8 0f00 	cmp.w	r8, #0
  403ec0:	d019      	beq.n	403ef6 <__d2b+0x5e>
  403ec2:	a802      	add	r0, sp, #8
  403ec4:	f840 8d08 	str.w	r8, [r0, #-8]!
  403ec8:	f7ff fe04 	bl	403ad4 <__lo0bits>
  403ecc:	9b00      	ldr	r3, [sp, #0]
  403ece:	b148      	cbz	r0, 403ee4 <__d2b+0x4c>
  403ed0:	9a01      	ldr	r2, [sp, #4]
  403ed2:	f1c0 0120 	rsb	r1, r0, #32
  403ed6:	fa02 f101 	lsl.w	r1, r2, r1
  403eda:	430b      	orrs	r3, r1
  403edc:	40c2      	lsrs	r2, r0
  403ede:	617b      	str	r3, [r7, #20]
  403ee0:	9201      	str	r2, [sp, #4]
  403ee2:	e000      	b.n	403ee6 <__d2b+0x4e>
  403ee4:	617b      	str	r3, [r7, #20]
  403ee6:	9b01      	ldr	r3, [sp, #4]
  403ee8:	61bb      	str	r3, [r7, #24]
  403eea:	2b00      	cmp	r3, #0
  403eec:	bf14      	ite	ne
  403eee:	2102      	movne	r1, #2
  403ef0:	2101      	moveq	r1, #1
  403ef2:	6139      	str	r1, [r7, #16]
  403ef4:	e007      	b.n	403f06 <__d2b+0x6e>
  403ef6:	a801      	add	r0, sp, #4
  403ef8:	f7ff fdec 	bl	403ad4 <__lo0bits>
  403efc:	9b01      	ldr	r3, [sp, #4]
  403efe:	617b      	str	r3, [r7, #20]
  403f00:	2101      	movs	r1, #1
  403f02:	6139      	str	r1, [r7, #16]
  403f04:	3020      	adds	r0, #32
  403f06:	b134      	cbz	r4, 403f16 <__d2b+0x7e>
  403f08:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  403f0c:	4404      	add	r4, r0
  403f0e:	6034      	str	r4, [r6, #0]
  403f10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  403f14:	e009      	b.n	403f2a <__d2b+0x92>
  403f16:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  403f1a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  403f1e:	6030      	str	r0, [r6, #0]
  403f20:	6918      	ldr	r0, [r3, #16]
  403f22:	f7ff fdb7 	bl	403a94 <__hi0bits>
  403f26:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  403f2a:	6028      	str	r0, [r5, #0]
  403f2c:	4638      	mov	r0, r7
  403f2e:	b002      	add	sp, #8
  403f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00403f34 <_calloc_r>:
  403f34:	b538      	push	{r3, r4, r5, lr}
  403f36:	fb02 f401 	mul.w	r4, r2, r1
  403f3a:	4621      	mov	r1, r4
  403f3c:	f000 f856 	bl	403fec <_malloc_r>
  403f40:	4605      	mov	r5, r0
  403f42:	b118      	cbz	r0, 403f4c <_calloc_r+0x18>
  403f44:	4622      	mov	r2, r4
  403f46:	2100      	movs	r1, #0
  403f48:	f7fd fe2e 	bl	401ba8 <memset>
  403f4c:	4628      	mov	r0, r5
  403f4e:	bd38      	pop	{r3, r4, r5, pc}

00403f50 <_free_r>:
  403f50:	b538      	push	{r3, r4, r5, lr}
  403f52:	4605      	mov	r5, r0
  403f54:	2900      	cmp	r1, #0
  403f56:	d046      	beq.n	403fe6 <_free_r+0x96>
  403f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
  403f5c:	1f0c      	subs	r4, r1, #4
  403f5e:	2b00      	cmp	r3, #0
  403f60:	bfb8      	it	lt
  403f62:	18e4      	addlt	r4, r4, r3
  403f64:	f000 faa0 	bl	4044a8 <__malloc_lock>
  403f68:	4a1f      	ldr	r2, [pc, #124]	; (403fe8 <_free_r+0x98>)
  403f6a:	6813      	ldr	r3, [r2, #0]
  403f6c:	4611      	mov	r1, r2
  403f6e:	b913      	cbnz	r3, 403f76 <_free_r+0x26>
  403f70:	6063      	str	r3, [r4, #4]
  403f72:	6014      	str	r4, [r2, #0]
  403f74:	e032      	b.n	403fdc <_free_r+0x8c>
  403f76:	42a3      	cmp	r3, r4
  403f78:	d90e      	bls.n	403f98 <_free_r+0x48>
  403f7a:	6822      	ldr	r2, [r4, #0]
  403f7c:	18a0      	adds	r0, r4, r2
  403f7e:	4283      	cmp	r3, r0
  403f80:	bf04      	itt	eq
  403f82:	6818      	ldreq	r0, [r3, #0]
  403f84:	685b      	ldreq	r3, [r3, #4]
  403f86:	6063      	str	r3, [r4, #4]
  403f88:	bf04      	itt	eq
  403f8a:	1812      	addeq	r2, r2, r0
  403f8c:	6022      	streq	r2, [r4, #0]
  403f8e:	600c      	str	r4, [r1, #0]
  403f90:	e024      	b.n	403fdc <_free_r+0x8c>
  403f92:	42a2      	cmp	r2, r4
  403f94:	d803      	bhi.n	403f9e <_free_r+0x4e>
  403f96:	4613      	mov	r3, r2
  403f98:	685a      	ldr	r2, [r3, #4]
  403f9a:	2a00      	cmp	r2, #0
  403f9c:	d1f9      	bne.n	403f92 <_free_r+0x42>
  403f9e:	6818      	ldr	r0, [r3, #0]
  403fa0:	1819      	adds	r1, r3, r0
  403fa2:	42a1      	cmp	r1, r4
  403fa4:	d10b      	bne.n	403fbe <_free_r+0x6e>
  403fa6:	6821      	ldr	r1, [r4, #0]
  403fa8:	4401      	add	r1, r0
  403faa:	1858      	adds	r0, r3, r1
  403fac:	4282      	cmp	r2, r0
  403fae:	6019      	str	r1, [r3, #0]
  403fb0:	d114      	bne.n	403fdc <_free_r+0x8c>
  403fb2:	6810      	ldr	r0, [r2, #0]
  403fb4:	6852      	ldr	r2, [r2, #4]
  403fb6:	605a      	str	r2, [r3, #4]
  403fb8:	4401      	add	r1, r0
  403fba:	6019      	str	r1, [r3, #0]
  403fbc:	e00e      	b.n	403fdc <_free_r+0x8c>
  403fbe:	d902      	bls.n	403fc6 <_free_r+0x76>
  403fc0:	230c      	movs	r3, #12
  403fc2:	602b      	str	r3, [r5, #0]
  403fc4:	e00a      	b.n	403fdc <_free_r+0x8c>
  403fc6:	6821      	ldr	r1, [r4, #0]
  403fc8:	1860      	adds	r0, r4, r1
  403fca:	4282      	cmp	r2, r0
  403fcc:	bf04      	itt	eq
  403fce:	6810      	ldreq	r0, [r2, #0]
  403fd0:	6852      	ldreq	r2, [r2, #4]
  403fd2:	6062      	str	r2, [r4, #4]
  403fd4:	bf04      	itt	eq
  403fd6:	1809      	addeq	r1, r1, r0
  403fd8:	6021      	streq	r1, [r4, #0]
  403fda:	605c      	str	r4, [r3, #4]
  403fdc:	4628      	mov	r0, r5
  403fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403fe2:	f000 ba62 	b.w	4044aa <__malloc_unlock>
  403fe6:	bd38      	pop	{r3, r4, r5, pc}
  403fe8:	2000028c 	.word	0x2000028c

00403fec <_malloc_r>:
  403fec:	b570      	push	{r4, r5, r6, lr}
  403fee:	1ccd      	adds	r5, r1, #3
  403ff0:	f025 0503 	bic.w	r5, r5, #3
  403ff4:	3508      	adds	r5, #8
  403ff6:	2d0c      	cmp	r5, #12
  403ff8:	bf38      	it	cc
  403ffa:	250c      	movcc	r5, #12
  403ffc:	2d00      	cmp	r5, #0
  403ffe:	4606      	mov	r6, r0
  404000:	db01      	blt.n	404006 <_malloc_r+0x1a>
  404002:	42a9      	cmp	r1, r5
  404004:	d902      	bls.n	40400c <_malloc_r+0x20>
  404006:	230c      	movs	r3, #12
  404008:	6033      	str	r3, [r6, #0]
  40400a:	e046      	b.n	40409a <_malloc_r+0xae>
  40400c:	f000 fa4c 	bl	4044a8 <__malloc_lock>
  404010:	4b23      	ldr	r3, [pc, #140]	; (4040a0 <_malloc_r+0xb4>)
  404012:	681c      	ldr	r4, [r3, #0]
  404014:	461a      	mov	r2, r3
  404016:	4621      	mov	r1, r4
  404018:	b1a1      	cbz	r1, 404044 <_malloc_r+0x58>
  40401a:	680b      	ldr	r3, [r1, #0]
  40401c:	1b5b      	subs	r3, r3, r5
  40401e:	d40e      	bmi.n	40403e <_malloc_r+0x52>
  404020:	2b0b      	cmp	r3, #11
  404022:	d903      	bls.n	40402c <_malloc_r+0x40>
  404024:	600b      	str	r3, [r1, #0]
  404026:	18cc      	adds	r4, r1, r3
  404028:	50cd      	str	r5, [r1, r3]
  40402a:	e01e      	b.n	40406a <_malloc_r+0x7e>
  40402c:	428c      	cmp	r4, r1
  40402e:	bf0d      	iteet	eq
  404030:	6863      	ldreq	r3, [r4, #4]
  404032:	684b      	ldrne	r3, [r1, #4]
  404034:	6063      	strne	r3, [r4, #4]
  404036:	6013      	streq	r3, [r2, #0]
  404038:	bf18      	it	ne
  40403a:	460c      	movne	r4, r1
  40403c:	e015      	b.n	40406a <_malloc_r+0x7e>
  40403e:	460c      	mov	r4, r1
  404040:	6849      	ldr	r1, [r1, #4]
  404042:	e7e9      	b.n	404018 <_malloc_r+0x2c>
  404044:	4c17      	ldr	r4, [pc, #92]	; (4040a4 <_malloc_r+0xb8>)
  404046:	6823      	ldr	r3, [r4, #0]
  404048:	b91b      	cbnz	r3, 404052 <_malloc_r+0x66>
  40404a:	4630      	mov	r0, r6
  40404c:	f000 f970 	bl	404330 <_sbrk_r>
  404050:	6020      	str	r0, [r4, #0]
  404052:	4629      	mov	r1, r5
  404054:	4630      	mov	r0, r6
  404056:	f000 f96b 	bl	404330 <_sbrk_r>
  40405a:	1c43      	adds	r3, r0, #1
  40405c:	d018      	beq.n	404090 <_malloc_r+0xa4>
  40405e:	1cc4      	adds	r4, r0, #3
  404060:	f024 0403 	bic.w	r4, r4, #3
  404064:	42a0      	cmp	r0, r4
  404066:	d10d      	bne.n	404084 <_malloc_r+0x98>
  404068:	6025      	str	r5, [r4, #0]
  40406a:	4630      	mov	r0, r6
  40406c:	f000 fa1d 	bl	4044aa <__malloc_unlock>
  404070:	f104 000b 	add.w	r0, r4, #11
  404074:	1d23      	adds	r3, r4, #4
  404076:	f020 0007 	bic.w	r0, r0, #7
  40407a:	1ac3      	subs	r3, r0, r3
  40407c:	d00e      	beq.n	40409c <_malloc_r+0xb0>
  40407e:	425a      	negs	r2, r3
  404080:	50e2      	str	r2, [r4, r3]
  404082:	bd70      	pop	{r4, r5, r6, pc}
  404084:	1a21      	subs	r1, r4, r0
  404086:	4630      	mov	r0, r6
  404088:	f000 f952 	bl	404330 <_sbrk_r>
  40408c:	3001      	adds	r0, #1
  40408e:	d1eb      	bne.n	404068 <_malloc_r+0x7c>
  404090:	230c      	movs	r3, #12
  404092:	6033      	str	r3, [r6, #0]
  404094:	4630      	mov	r0, r6
  404096:	f000 fa08 	bl	4044aa <__malloc_unlock>
  40409a:	2000      	movs	r0, #0
  40409c:	bd70      	pop	{r4, r5, r6, pc}
  40409e:	bf00      	nop
  4040a0:	2000028c 	.word	0x2000028c
  4040a4:	20000288 	.word	0x20000288

004040a8 <__sfputc_r>:
  4040a8:	6893      	ldr	r3, [r2, #8]
  4040aa:	3b01      	subs	r3, #1
  4040ac:	2b00      	cmp	r3, #0
  4040ae:	b410      	push	{r4}
  4040b0:	6093      	str	r3, [r2, #8]
  4040b2:	da08      	bge.n	4040c6 <__sfputc_r+0x1e>
  4040b4:	6994      	ldr	r4, [r2, #24]
  4040b6:	42a3      	cmp	r3, r4
  4040b8:	db02      	blt.n	4040c0 <__sfputc_r+0x18>
  4040ba:	b2cb      	uxtb	r3, r1
  4040bc:	2b0a      	cmp	r3, #10
  4040be:	d102      	bne.n	4040c6 <__sfputc_r+0x1e>
  4040c0:	bc10      	pop	{r4}
  4040c2:	f7fe bb1d 	b.w	402700 <__swbuf_r>
  4040c6:	6813      	ldr	r3, [r2, #0]
  4040c8:	1c58      	adds	r0, r3, #1
  4040ca:	6010      	str	r0, [r2, #0]
  4040cc:	7019      	strb	r1, [r3, #0]
  4040ce:	b2c8      	uxtb	r0, r1
  4040d0:	bc10      	pop	{r4}
  4040d2:	4770      	bx	lr

004040d4 <__sfputs_r>:
  4040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4040d6:	4606      	mov	r6, r0
  4040d8:	460f      	mov	r7, r1
  4040da:	4614      	mov	r4, r2
  4040dc:	18d5      	adds	r5, r2, r3
  4040de:	42ac      	cmp	r4, r5
  4040e0:	d008      	beq.n	4040f4 <__sfputs_r+0x20>
  4040e2:	463a      	mov	r2, r7
  4040e4:	f814 1b01 	ldrb.w	r1, [r4], #1
  4040e8:	4630      	mov	r0, r6
  4040ea:	f7ff ffdd 	bl	4040a8 <__sfputc_r>
  4040ee:	1c43      	adds	r3, r0, #1
  4040f0:	d1f5      	bne.n	4040de <__sfputs_r+0xa>
  4040f2:	e000      	b.n	4040f6 <__sfputs_r+0x22>
  4040f4:	2000      	movs	r0, #0
  4040f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004040f8 <_vfiprintf_r>:
  4040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4040fc:	b09d      	sub	sp, #116	; 0x74
  4040fe:	460c      	mov	r4, r1
  404100:	4617      	mov	r7, r2
  404102:	9303      	str	r3, [sp, #12]
  404104:	4606      	mov	r6, r0
  404106:	b118      	cbz	r0, 404110 <_vfiprintf_r+0x18>
  404108:	6983      	ldr	r3, [r0, #24]
  40410a:	b90b      	cbnz	r3, 404110 <_vfiprintf_r+0x18>
  40410c:	f7ff fada 	bl	4036c4 <__sinit>
  404110:	4b7f      	ldr	r3, [pc, #508]	; (404310 <_vfiprintf_r+0x218>)
  404112:	429c      	cmp	r4, r3
  404114:	d101      	bne.n	40411a <_vfiprintf_r+0x22>
  404116:	6874      	ldr	r4, [r6, #4]
  404118:	e008      	b.n	40412c <_vfiprintf_r+0x34>
  40411a:	4b7e      	ldr	r3, [pc, #504]	; (404314 <_vfiprintf_r+0x21c>)
  40411c:	429c      	cmp	r4, r3
  40411e:	d101      	bne.n	404124 <_vfiprintf_r+0x2c>
  404120:	68b4      	ldr	r4, [r6, #8]
  404122:	e003      	b.n	40412c <_vfiprintf_r+0x34>
  404124:	4b7c      	ldr	r3, [pc, #496]	; (404318 <_vfiprintf_r+0x220>)
  404126:	429c      	cmp	r4, r3
  404128:	bf08      	it	eq
  40412a:	68f4      	ldreq	r4, [r6, #12]
  40412c:	89a3      	ldrh	r3, [r4, #12]
  40412e:	0718      	lsls	r0, r3, #28
  404130:	d50c      	bpl.n	40414c <_vfiprintf_r+0x54>
  404132:	6923      	ldr	r3, [r4, #16]
  404134:	b153      	cbz	r3, 40414c <_vfiprintf_r+0x54>
  404136:	2300      	movs	r3, #0
  404138:	9309      	str	r3, [sp, #36]	; 0x24
  40413a:	2320      	movs	r3, #32
  40413c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404140:	2330      	movs	r3, #48	; 0x30
  404142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404146:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 40431c <_vfiprintf_r+0x224>
  40414a:	e044      	b.n	4041d6 <_vfiprintf_r+0xde>
  40414c:	4621      	mov	r1, r4
  40414e:	4630      	mov	r0, r6
  404150:	f7fe fb2a 	bl	4027a8 <__swsetup_r>
  404154:	2800      	cmp	r0, #0
  404156:	d0ee      	beq.n	404136 <_vfiprintf_r+0x3e>
  404158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40415c:	e0d5      	b.n	40430a <_vfiprintf_r+0x212>
  40415e:	9a03      	ldr	r2, [sp, #12]
  404160:	1d11      	adds	r1, r2, #4
  404162:	6812      	ldr	r2, [r2, #0]
  404164:	9103      	str	r1, [sp, #12]
  404166:	2a00      	cmp	r2, #0
  404168:	f280 808c 	bge.w	404284 <_vfiprintf_r+0x18c>
  40416c:	4252      	negs	r2, r2
  40416e:	f043 0002 	orr.w	r0, r3, #2
  404172:	9207      	str	r2, [sp, #28]
  404174:	9004      	str	r0, [sp, #16]
  404176:	f898 3000 	ldrb.w	r3, [r8]
  40417a:	2b2e      	cmp	r3, #46	; 0x2e
  40417c:	f000 8084 	beq.w	404288 <_vfiprintf_r+0x190>
  404180:	2203      	movs	r2, #3
  404182:	f898 1000 	ldrb.w	r1, [r8]
  404186:	4865      	ldr	r0, [pc, #404]	; (40431c <_vfiprintf_r+0x224>)
  404188:	f7ff fba2 	bl	4038d0 <memchr>
  40418c:	b148      	cbz	r0, 4041a2 <_vfiprintf_r+0xaa>
  40418e:	2340      	movs	r3, #64	; 0x40
  404190:	ebcb 0000 	rsb	r0, fp, r0
  404194:	fa03 f000 	lsl.w	r0, r3, r0
  404198:	9b04      	ldr	r3, [sp, #16]
  40419a:	4318      	orrs	r0, r3
  40419c:	9004      	str	r0, [sp, #16]
  40419e:	f108 0801 	add.w	r8, r8, #1
  4041a2:	f898 1000 	ldrb.w	r1, [r8]
  4041a6:	485e      	ldr	r0, [pc, #376]	; (404320 <_vfiprintf_r+0x228>)
  4041a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4041ac:	2206      	movs	r2, #6
  4041ae:	f108 0701 	add.w	r7, r8, #1
  4041b2:	f7ff fb8d 	bl	4038d0 <memchr>
  4041b6:	2800      	cmp	r0, #0
  4041b8:	f000 8095 	beq.w	4042e6 <_vfiprintf_r+0x1ee>
  4041bc:	4b59      	ldr	r3, [pc, #356]	; (404324 <_vfiprintf_r+0x22c>)
  4041be:	2b00      	cmp	r3, #0
  4041c0:	f040 8088 	bne.w	4042d4 <_vfiprintf_r+0x1dc>
  4041c4:	9b03      	ldr	r3, [sp, #12]
  4041c6:	3307      	adds	r3, #7
  4041c8:	f023 0307 	bic.w	r3, r3, #7
  4041cc:	3308      	adds	r3, #8
  4041ce:	9303      	str	r3, [sp, #12]
  4041d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041d2:	4453      	add	r3, sl
  4041d4:	9309      	str	r3, [sp, #36]	; 0x24
  4041d6:	46b8      	mov	r8, r7
  4041d8:	4645      	mov	r5, r8
  4041da:	f815 3b01 	ldrb.w	r3, [r5], #1
  4041de:	b91b      	cbnz	r3, 4041e8 <_vfiprintf_r+0xf0>
  4041e0:	ebb8 0907 	subs.w	r9, r8, r7
  4041e4:	d00f      	beq.n	404206 <_vfiprintf_r+0x10e>
  4041e6:	e003      	b.n	4041f0 <_vfiprintf_r+0xf8>
  4041e8:	2b25      	cmp	r3, #37	; 0x25
  4041ea:	d0f9      	beq.n	4041e0 <_vfiprintf_r+0xe8>
  4041ec:	46a8      	mov	r8, r5
  4041ee:	e7f3      	b.n	4041d8 <_vfiprintf_r+0xe0>
  4041f0:	464b      	mov	r3, r9
  4041f2:	463a      	mov	r2, r7
  4041f4:	4621      	mov	r1, r4
  4041f6:	4630      	mov	r0, r6
  4041f8:	f7ff ff6c 	bl	4040d4 <__sfputs_r>
  4041fc:	3001      	adds	r0, #1
  4041fe:	d07f      	beq.n	404300 <_vfiprintf_r+0x208>
  404200:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404202:	444b      	add	r3, r9
  404204:	9309      	str	r3, [sp, #36]	; 0x24
  404206:	f898 3000 	ldrb.w	r3, [r8]
  40420a:	2b00      	cmp	r3, #0
  40420c:	d078      	beq.n	404300 <_vfiprintf_r+0x208>
  40420e:	2300      	movs	r3, #0
  404210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  404214:	9304      	str	r3, [sp, #16]
  404216:	9307      	str	r3, [sp, #28]
  404218:	9205      	str	r2, [sp, #20]
  40421a:	9306      	str	r3, [sp, #24]
  40421c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404220:	931a      	str	r3, [sp, #104]	; 0x68
  404222:	2701      	movs	r7, #1
  404224:	2205      	movs	r2, #5
  404226:	7829      	ldrb	r1, [r5, #0]
  404228:	483f      	ldr	r0, [pc, #252]	; (404328 <_vfiprintf_r+0x230>)
  40422a:	f7ff fb51 	bl	4038d0 <memchr>
  40422e:	f105 0801 	add.w	r8, r5, #1
  404232:	9b04      	ldr	r3, [sp, #16]
  404234:	b138      	cbz	r0, 404246 <_vfiprintf_r+0x14e>
  404236:	4a3c      	ldr	r2, [pc, #240]	; (404328 <_vfiprintf_r+0x230>)
  404238:	1a80      	subs	r0, r0, r2
  40423a:	fa07 f000 	lsl.w	r0, r7, r0
  40423e:	4318      	orrs	r0, r3
  404240:	9004      	str	r0, [sp, #16]
  404242:	4645      	mov	r5, r8
  404244:	e7ee      	b.n	404224 <_vfiprintf_r+0x12c>
  404246:	06d9      	lsls	r1, r3, #27
  404248:	bf44      	itt	mi
  40424a:	2220      	movmi	r2, #32
  40424c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404250:	071a      	lsls	r2, r3, #28
  404252:	bf44      	itt	mi
  404254:	222b      	movmi	r2, #43	; 0x2b
  404256:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  40425a:	782a      	ldrb	r2, [r5, #0]
  40425c:	2a2a      	cmp	r2, #42	; 0x2a
  40425e:	f43f af7e 	beq.w	40415e <_vfiprintf_r+0x66>
  404262:	9a07      	ldr	r2, [sp, #28]
  404264:	2100      	movs	r1, #0
  404266:	200a      	movs	r0, #10
  404268:	46a8      	mov	r8, r5
  40426a:	3501      	adds	r5, #1
  40426c:	f898 3000 	ldrb.w	r3, [r8]
  404270:	3b30      	subs	r3, #48	; 0x30
  404272:	2b09      	cmp	r3, #9
  404274:	d803      	bhi.n	40427e <_vfiprintf_r+0x186>
  404276:	fb00 3202 	mla	r2, r0, r2, r3
  40427a:	2101      	movs	r1, #1
  40427c:	e7f4      	b.n	404268 <_vfiprintf_r+0x170>
  40427e:	2900      	cmp	r1, #0
  404280:	f43f af79 	beq.w	404176 <_vfiprintf_r+0x7e>
  404284:	9207      	str	r2, [sp, #28]
  404286:	e776      	b.n	404176 <_vfiprintf_r+0x7e>
  404288:	f898 3001 	ldrb.w	r3, [r8, #1]
  40428c:	2b2a      	cmp	r3, #42	; 0x2a
  40428e:	d10b      	bne.n	4042a8 <_vfiprintf_r+0x1b0>
  404290:	9b03      	ldr	r3, [sp, #12]
  404292:	1d1a      	adds	r2, r3, #4
  404294:	681b      	ldr	r3, [r3, #0]
  404296:	9203      	str	r2, [sp, #12]
  404298:	2b00      	cmp	r3, #0
  40429a:	bfb8      	it	lt
  40429c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  4042a0:	f108 0802 	add.w	r8, r8, #2
  4042a4:	9305      	str	r3, [sp, #20]
  4042a6:	e76b      	b.n	404180 <_vfiprintf_r+0x88>
  4042a8:	2300      	movs	r3, #0
  4042aa:	9305      	str	r3, [sp, #20]
  4042ac:	f108 0001 	add.w	r0, r8, #1
  4042b0:	4619      	mov	r1, r3
  4042b2:	250a      	movs	r5, #10
  4042b4:	4680      	mov	r8, r0
  4042b6:	3001      	adds	r0, #1
  4042b8:	f898 2000 	ldrb.w	r2, [r8]
  4042bc:	3a30      	subs	r2, #48	; 0x30
  4042be:	2a09      	cmp	r2, #9
  4042c0:	d803      	bhi.n	4042ca <_vfiprintf_r+0x1d2>
  4042c2:	fb05 2101 	mla	r1, r5, r1, r2
  4042c6:	2301      	movs	r3, #1
  4042c8:	e7f4      	b.n	4042b4 <_vfiprintf_r+0x1bc>
  4042ca:	2b00      	cmp	r3, #0
  4042cc:	f43f af58 	beq.w	404180 <_vfiprintf_r+0x88>
  4042d0:	9105      	str	r1, [sp, #20]
  4042d2:	e755      	b.n	404180 <_vfiprintf_r+0x88>
  4042d4:	ab03      	add	r3, sp, #12
  4042d6:	9300      	str	r3, [sp, #0]
  4042d8:	4622      	mov	r2, r4
  4042da:	4b14      	ldr	r3, [pc, #80]	; (40432c <_vfiprintf_r+0x234>)
  4042dc:	a904      	add	r1, sp, #16
  4042de:	4630      	mov	r0, r6
  4042e0:	f7fd fcfa 	bl	401cd8 <_printf_float>
  4042e4:	e007      	b.n	4042f6 <_vfiprintf_r+0x1fe>
  4042e6:	ab03      	add	r3, sp, #12
  4042e8:	9300      	str	r3, [sp, #0]
  4042ea:	4622      	mov	r2, r4
  4042ec:	4b0f      	ldr	r3, [pc, #60]	; (40432c <_vfiprintf_r+0x234>)
  4042ee:	a904      	add	r1, sp, #16
  4042f0:	4630      	mov	r0, r6
  4042f2:	f7fd ffab 	bl	40224c <_printf_i>
  4042f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  4042fa:	4682      	mov	sl, r0
  4042fc:	f47f af68 	bne.w	4041d0 <_vfiprintf_r+0xd8>
  404300:	89a3      	ldrh	r3, [r4, #12]
  404302:	065b      	lsls	r3, r3, #25
  404304:	f53f af28 	bmi.w	404158 <_vfiprintf_r+0x60>
  404308:	9809      	ldr	r0, [sp, #36]	; 0x24
  40430a:	b01d      	add	sp, #116	; 0x74
  40430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404310:	00405578 	.word	0x00405578
  404314:	00405598 	.word	0x00405598
  404318:	004055b8 	.word	0x004055b8
  40431c:	004056da 	.word	0x004056da
  404320:	004056de 	.word	0x004056de
  404324:	00401cd9 	.word	0x00401cd9
  404328:	004056d4 	.word	0x004056d4
  40432c:	004040d5 	.word	0x004040d5

00404330 <_sbrk_r>:
  404330:	b538      	push	{r3, r4, r5, lr}
  404332:	4c06      	ldr	r4, [pc, #24]	; (40434c <_sbrk_r+0x1c>)
  404334:	2300      	movs	r3, #0
  404336:	4605      	mov	r5, r0
  404338:	4608      	mov	r0, r1
  40433a:	6023      	str	r3, [r4, #0]
  40433c:	f7fd f850 	bl	4013e0 <_sbrk>
  404340:	1c43      	adds	r3, r0, #1
  404342:	d102      	bne.n	40434a <_sbrk_r+0x1a>
  404344:	6823      	ldr	r3, [r4, #0]
  404346:	b103      	cbz	r3, 40434a <_sbrk_r+0x1a>
  404348:	602b      	str	r3, [r5, #0]
  40434a:	bd38      	pop	{r3, r4, r5, pc}
  40434c:	200002a0 	.word	0x200002a0

00404350 <__sread>:
  404350:	b510      	push	{r4, lr}
  404352:	460c      	mov	r4, r1
  404354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404358:	f000 f8a8 	bl	4044ac <_read_r>
  40435c:	2800      	cmp	r0, #0
  40435e:	bfab      	itete	ge
  404360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  404362:	89a3      	ldrhlt	r3, [r4, #12]
  404364:	181b      	addge	r3, r3, r0
  404366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  40436a:	bfac      	ite	ge
  40436c:	6563      	strge	r3, [r4, #84]	; 0x54
  40436e:	81a3      	strhlt	r3, [r4, #12]
  404370:	bd10      	pop	{r4, pc}

00404372 <__swrite>:
  404372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404376:	461f      	mov	r7, r3
  404378:	898b      	ldrh	r3, [r1, #12]
  40437a:	05db      	lsls	r3, r3, #23
  40437c:	4605      	mov	r5, r0
  40437e:	460c      	mov	r4, r1
  404380:	4616      	mov	r6, r2
  404382:	d505      	bpl.n	404390 <__swrite+0x1e>
  404384:	2302      	movs	r3, #2
  404386:	2200      	movs	r2, #0
  404388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40438c:	f000 f868 	bl	404460 <_lseek_r>
  404390:	89a3      	ldrh	r3, [r4, #12]
  404392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40439a:	81a3      	strh	r3, [r4, #12]
  40439c:	4632      	mov	r2, r6
  40439e:	463b      	mov	r3, r7
  4043a0:	4628      	mov	r0, r5
  4043a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4043a6:	f000 b817 	b.w	4043d8 <_write_r>

004043aa <__sseek>:
  4043aa:	b510      	push	{r4, lr}
  4043ac:	460c      	mov	r4, r1
  4043ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043b2:	f000 f855 	bl	404460 <_lseek_r>
  4043b6:	1c43      	adds	r3, r0, #1
  4043b8:	89a3      	ldrh	r3, [r4, #12]
  4043ba:	bf15      	itete	ne
  4043bc:	6560      	strne	r0, [r4, #84]	; 0x54
  4043be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4043c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4043c6:	81a3      	strheq	r3, [r4, #12]
  4043c8:	bf18      	it	ne
  4043ca:	81a3      	strhne	r3, [r4, #12]
  4043cc:	bd10      	pop	{r4, pc}

004043ce <__sclose>:
  4043ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043d2:	f000 b813 	b.w	4043fc <_close_r>
	...

004043d8 <_write_r>:
  4043d8:	b538      	push	{r3, r4, r5, lr}
  4043da:	4c07      	ldr	r4, [pc, #28]	; (4043f8 <_write_r+0x20>)
  4043dc:	4605      	mov	r5, r0
  4043de:	4608      	mov	r0, r1
  4043e0:	4611      	mov	r1, r2
  4043e2:	2200      	movs	r2, #0
  4043e4:	6022      	str	r2, [r4, #0]
  4043e6:	461a      	mov	r2, r3
  4043e8:	f7fb fee0 	bl	4001ac <_write>
  4043ec:	1c43      	adds	r3, r0, #1
  4043ee:	d102      	bne.n	4043f6 <_write_r+0x1e>
  4043f0:	6823      	ldr	r3, [r4, #0]
  4043f2:	b103      	cbz	r3, 4043f6 <_write_r+0x1e>
  4043f4:	602b      	str	r3, [r5, #0]
  4043f6:	bd38      	pop	{r3, r4, r5, pc}
  4043f8:	200002a0 	.word	0x200002a0

004043fc <_close_r>:
  4043fc:	b538      	push	{r3, r4, r5, lr}
  4043fe:	4c06      	ldr	r4, [pc, #24]	; (404418 <_close_r+0x1c>)
  404400:	2300      	movs	r3, #0
  404402:	4605      	mov	r5, r0
  404404:	4608      	mov	r0, r1
  404406:	6023      	str	r3, [r4, #0]
  404408:	f7fd f804 	bl	401414 <_close>
  40440c:	1c43      	adds	r3, r0, #1
  40440e:	d102      	bne.n	404416 <_close_r+0x1a>
  404410:	6823      	ldr	r3, [r4, #0]
  404412:	b103      	cbz	r3, 404416 <_close_r+0x1a>
  404414:	602b      	str	r3, [r5, #0]
  404416:	bd38      	pop	{r3, r4, r5, pc}
  404418:	200002a0 	.word	0x200002a0

0040441c <_fstat_r>:
  40441c:	b538      	push	{r3, r4, r5, lr}
  40441e:	4c07      	ldr	r4, [pc, #28]	; (40443c <_fstat_r+0x20>)
  404420:	2300      	movs	r3, #0
  404422:	4605      	mov	r5, r0
  404424:	4608      	mov	r0, r1
  404426:	4611      	mov	r1, r2
  404428:	6023      	str	r3, [r4, #0]
  40442a:	f7fc fff7 	bl	40141c <_fstat>
  40442e:	1c43      	adds	r3, r0, #1
  404430:	d102      	bne.n	404438 <_fstat_r+0x1c>
  404432:	6823      	ldr	r3, [r4, #0]
  404434:	b103      	cbz	r3, 404438 <_fstat_r+0x1c>
  404436:	602b      	str	r3, [r5, #0]
  404438:	bd38      	pop	{r3, r4, r5, pc}
  40443a:	bf00      	nop
  40443c:	200002a0 	.word	0x200002a0

00404440 <_isatty_r>:
  404440:	b538      	push	{r3, r4, r5, lr}
  404442:	4c06      	ldr	r4, [pc, #24]	; (40445c <_isatty_r+0x1c>)
  404444:	2300      	movs	r3, #0
  404446:	4605      	mov	r5, r0
  404448:	4608      	mov	r0, r1
  40444a:	6023      	str	r3, [r4, #0]
  40444c:	f7fc ffec 	bl	401428 <_isatty>
  404450:	1c43      	adds	r3, r0, #1
  404452:	d102      	bne.n	40445a <_isatty_r+0x1a>
  404454:	6823      	ldr	r3, [r4, #0]
  404456:	b103      	cbz	r3, 40445a <_isatty_r+0x1a>
  404458:	602b      	str	r3, [r5, #0]
  40445a:	bd38      	pop	{r3, r4, r5, pc}
  40445c:	200002a0 	.word	0x200002a0

00404460 <_lseek_r>:
  404460:	b538      	push	{r3, r4, r5, lr}
  404462:	4c07      	ldr	r4, [pc, #28]	; (404480 <_lseek_r+0x20>)
  404464:	4605      	mov	r5, r0
  404466:	4608      	mov	r0, r1
  404468:	4611      	mov	r1, r2
  40446a:	2200      	movs	r2, #0
  40446c:	6022      	str	r2, [r4, #0]
  40446e:	461a      	mov	r2, r3
  404470:	f7fc ffdc 	bl	40142c <_lseek>
  404474:	1c43      	adds	r3, r0, #1
  404476:	d102      	bne.n	40447e <_lseek_r+0x1e>
  404478:	6823      	ldr	r3, [r4, #0]
  40447a:	b103      	cbz	r3, 40447e <_lseek_r+0x1e>
  40447c:	602b      	str	r3, [r5, #0]
  40447e:	bd38      	pop	{r3, r4, r5, pc}
  404480:	200002a0 	.word	0x200002a0

00404484 <__ascii_mbtowc>:
  404484:	b082      	sub	sp, #8
  404486:	b901      	cbnz	r1, 40448a <__ascii_mbtowc+0x6>
  404488:	a901      	add	r1, sp, #4
  40448a:	b13a      	cbz	r2, 40449c <__ascii_mbtowc+0x18>
  40448c:	b143      	cbz	r3, 4044a0 <__ascii_mbtowc+0x1c>
  40448e:	7813      	ldrb	r3, [r2, #0]
  404490:	600b      	str	r3, [r1, #0]
  404492:	7812      	ldrb	r2, [r2, #0]
  404494:	1c10      	adds	r0, r2, #0
  404496:	bf18      	it	ne
  404498:	2001      	movne	r0, #1
  40449a:	e003      	b.n	4044a4 <__ascii_mbtowc+0x20>
  40449c:	4610      	mov	r0, r2
  40449e:	e001      	b.n	4044a4 <__ascii_mbtowc+0x20>
  4044a0:	f06f 0001 	mvn.w	r0, #1
  4044a4:	b002      	add	sp, #8
  4044a6:	4770      	bx	lr

004044a8 <__malloc_lock>:
  4044a8:	4770      	bx	lr

004044aa <__malloc_unlock>:
  4044aa:	4770      	bx	lr

004044ac <_read_r>:
  4044ac:	b538      	push	{r3, r4, r5, lr}
  4044ae:	4c07      	ldr	r4, [pc, #28]	; (4044cc <_read_r+0x20>)
  4044b0:	4605      	mov	r5, r0
  4044b2:	4608      	mov	r0, r1
  4044b4:	4611      	mov	r1, r2
  4044b6:	2200      	movs	r2, #0
  4044b8:	6022      	str	r2, [r4, #0]
  4044ba:	461a      	mov	r2, r3
  4044bc:	f7fb fe58 	bl	400170 <_read>
  4044c0:	1c43      	adds	r3, r0, #1
  4044c2:	d102      	bne.n	4044ca <_read_r+0x1e>
  4044c4:	6823      	ldr	r3, [r4, #0]
  4044c6:	b103      	cbz	r3, 4044ca <_read_r+0x1e>
  4044c8:	602b      	str	r3, [r5, #0]
  4044ca:	bd38      	pop	{r3, r4, r5, pc}
  4044cc:	200002a0 	.word	0x200002a0

004044d0 <__ascii_wctomb>:
  4044d0:	b149      	cbz	r1, 4044e6 <__ascii_wctomb+0x16>
  4044d2:	2aff      	cmp	r2, #255	; 0xff
  4044d4:	bf85      	ittet	hi
  4044d6:	238a      	movhi	r3, #138	; 0x8a
  4044d8:	6003      	strhi	r3, [r0, #0]
  4044da:	700a      	strbls	r2, [r1, #0]
  4044dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  4044e0:	bf98      	it	ls
  4044e2:	2001      	movls	r0, #1
  4044e4:	4770      	bx	lr
  4044e6:	4608      	mov	r0, r1
  4044e8:	4770      	bx	lr
	...

004044ec <__aeabi_drsub>:
  4044ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4044f0:	e002      	b.n	4044f8 <__adddf3>
  4044f2:	bf00      	nop

004044f4 <__aeabi_dsub>:
  4044f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004044f8 <__adddf3>:
  4044f8:	b530      	push	{r4, r5, lr}
  4044fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4044fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
  404502:	ea94 0f05 	teq	r4, r5
  404506:	bf08      	it	eq
  404508:	ea90 0f02 	teqeq	r0, r2
  40450c:	bf1f      	itttt	ne
  40450e:	ea54 0c00 	orrsne.w	ip, r4, r0
  404512:	ea55 0c02 	orrsne.w	ip, r5, r2
  404516:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40451a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40451e:	f000 80e2 	beq.w	4046e6 <__adddf3+0x1ee>
  404522:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404526:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40452a:	bfb8      	it	lt
  40452c:	426d      	neglt	r5, r5
  40452e:	dd0c      	ble.n	40454a <__adddf3+0x52>
  404530:	442c      	add	r4, r5
  404532:	ea80 0202 	eor.w	r2, r0, r2
  404536:	ea81 0303 	eor.w	r3, r1, r3
  40453a:	ea82 0000 	eor.w	r0, r2, r0
  40453e:	ea83 0101 	eor.w	r1, r3, r1
  404542:	ea80 0202 	eor.w	r2, r0, r2
  404546:	ea81 0303 	eor.w	r3, r1, r3
  40454a:	2d36      	cmp	r5, #54	; 0x36
  40454c:	bf88      	it	hi
  40454e:	bd30      	pophi	{r4, r5, pc}
  404550:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404554:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404558:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40455c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404560:	d002      	beq.n	404568 <__adddf3+0x70>
  404562:	4240      	negs	r0, r0
  404564:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404568:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40456c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404570:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404574:	d002      	beq.n	40457c <__adddf3+0x84>
  404576:	4252      	negs	r2, r2
  404578:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40457c:	ea94 0f05 	teq	r4, r5
  404580:	f000 80a7 	beq.w	4046d2 <__adddf3+0x1da>
  404584:	f1a4 0401 	sub.w	r4, r4, #1
  404588:	f1d5 0e20 	rsbs	lr, r5, #32
  40458c:	db0d      	blt.n	4045aa <__adddf3+0xb2>
  40458e:	fa02 fc0e 	lsl.w	ip, r2, lr
  404592:	fa22 f205 	lsr.w	r2, r2, r5
  404596:	1880      	adds	r0, r0, r2
  404598:	f141 0100 	adc.w	r1, r1, #0
  40459c:	fa03 f20e 	lsl.w	r2, r3, lr
  4045a0:	1880      	adds	r0, r0, r2
  4045a2:	fa43 f305 	asr.w	r3, r3, r5
  4045a6:	4159      	adcs	r1, r3
  4045a8:	e00e      	b.n	4045c8 <__adddf3+0xd0>
  4045aa:	f1a5 0520 	sub.w	r5, r5, #32
  4045ae:	f10e 0e20 	add.w	lr, lr, #32
  4045b2:	2a01      	cmp	r2, #1
  4045b4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4045b8:	bf28      	it	cs
  4045ba:	f04c 0c02 	orrcs.w	ip, ip, #2
  4045be:	fa43 f305 	asr.w	r3, r3, r5
  4045c2:	18c0      	adds	r0, r0, r3
  4045c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4045c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4045cc:	d507      	bpl.n	4045de <__adddf3+0xe6>
  4045ce:	f04f 0e00 	mov.w	lr, #0
  4045d2:	f1dc 0c00 	rsbs	ip, ip, #0
  4045d6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4045da:	eb6e 0101 	sbc.w	r1, lr, r1
  4045de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4045e2:	d31b      	bcc.n	40461c <__adddf3+0x124>
  4045e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4045e8:	d30c      	bcc.n	404604 <__adddf3+0x10c>
  4045ea:	0849      	lsrs	r1, r1, #1
  4045ec:	ea5f 0030 	movs.w	r0, r0, rrx
  4045f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4045f4:	f104 0401 	add.w	r4, r4, #1
  4045f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4045fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  404600:	f080 809a 	bcs.w	404738 <__adddf3+0x240>
  404604:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404608:	bf08      	it	eq
  40460a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40460e:	f150 0000 	adcs.w	r0, r0, #0
  404612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404616:	ea41 0105 	orr.w	r1, r1, r5
  40461a:	bd30      	pop	{r4, r5, pc}
  40461c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404620:	4140      	adcs	r0, r0
  404622:	eb41 0101 	adc.w	r1, r1, r1
  404626:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40462a:	f1a4 0401 	sub.w	r4, r4, #1
  40462e:	d1e9      	bne.n	404604 <__adddf3+0x10c>
  404630:	f091 0f00 	teq	r1, #0
  404634:	bf04      	itt	eq
  404636:	4601      	moveq	r1, r0
  404638:	2000      	moveq	r0, #0
  40463a:	fab1 f381 	clz	r3, r1
  40463e:	bf08      	it	eq
  404640:	3320      	addeq	r3, #32
  404642:	f1a3 030b 	sub.w	r3, r3, #11
  404646:	f1b3 0220 	subs.w	r2, r3, #32
  40464a:	da0c      	bge.n	404666 <__adddf3+0x16e>
  40464c:	320c      	adds	r2, #12
  40464e:	dd08      	ble.n	404662 <__adddf3+0x16a>
  404650:	f102 0c14 	add.w	ip, r2, #20
  404654:	f1c2 020c 	rsb	r2, r2, #12
  404658:	fa01 f00c 	lsl.w	r0, r1, ip
  40465c:	fa21 f102 	lsr.w	r1, r1, r2
  404660:	e00c      	b.n	40467c <__adddf3+0x184>
  404662:	f102 0214 	add.w	r2, r2, #20
  404666:	bfd8      	it	le
  404668:	f1c2 0c20 	rsble	ip, r2, #32
  40466c:	fa01 f102 	lsl.w	r1, r1, r2
  404670:	fa20 fc0c 	lsr.w	ip, r0, ip
  404674:	bfdc      	itt	le
  404676:	ea41 010c 	orrle.w	r1, r1, ip
  40467a:	4090      	lslle	r0, r2
  40467c:	1ae4      	subs	r4, r4, r3
  40467e:	bfa2      	ittt	ge
  404680:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404684:	4329      	orrge	r1, r5
  404686:	bd30      	popge	{r4, r5, pc}
  404688:	ea6f 0404 	mvn.w	r4, r4
  40468c:	3c1f      	subs	r4, #31
  40468e:	da1c      	bge.n	4046ca <__adddf3+0x1d2>
  404690:	340c      	adds	r4, #12
  404692:	dc0e      	bgt.n	4046b2 <__adddf3+0x1ba>
  404694:	f104 0414 	add.w	r4, r4, #20
  404698:	f1c4 0220 	rsb	r2, r4, #32
  40469c:	fa20 f004 	lsr.w	r0, r0, r4
  4046a0:	fa01 f302 	lsl.w	r3, r1, r2
  4046a4:	ea40 0003 	orr.w	r0, r0, r3
  4046a8:	fa21 f304 	lsr.w	r3, r1, r4
  4046ac:	ea45 0103 	orr.w	r1, r5, r3
  4046b0:	bd30      	pop	{r4, r5, pc}
  4046b2:	f1c4 040c 	rsb	r4, r4, #12
  4046b6:	f1c4 0220 	rsb	r2, r4, #32
  4046ba:	fa20 f002 	lsr.w	r0, r0, r2
  4046be:	fa01 f304 	lsl.w	r3, r1, r4
  4046c2:	ea40 0003 	orr.w	r0, r0, r3
  4046c6:	4629      	mov	r1, r5
  4046c8:	bd30      	pop	{r4, r5, pc}
  4046ca:	fa21 f004 	lsr.w	r0, r1, r4
  4046ce:	4629      	mov	r1, r5
  4046d0:	bd30      	pop	{r4, r5, pc}
  4046d2:	f094 0f00 	teq	r4, #0
  4046d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4046da:	bf06      	itte	eq
  4046dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4046e0:	3401      	addeq	r4, #1
  4046e2:	3d01      	subne	r5, #1
  4046e4:	e74e      	b.n	404584 <__adddf3+0x8c>
  4046e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4046ea:	bf18      	it	ne
  4046ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4046f0:	d029      	beq.n	404746 <__adddf3+0x24e>
  4046f2:	ea94 0f05 	teq	r4, r5
  4046f6:	bf08      	it	eq
  4046f8:	ea90 0f02 	teqeq	r0, r2
  4046fc:	d005      	beq.n	40470a <__adddf3+0x212>
  4046fe:	ea54 0c00 	orrs.w	ip, r4, r0
  404702:	bf04      	itt	eq
  404704:	4619      	moveq	r1, r3
  404706:	4610      	moveq	r0, r2
  404708:	bd30      	pop	{r4, r5, pc}
  40470a:	ea91 0f03 	teq	r1, r3
  40470e:	bf1e      	ittt	ne
  404710:	2100      	movne	r1, #0
  404712:	2000      	movne	r0, #0
  404714:	bd30      	popne	{r4, r5, pc}
  404716:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40471a:	d105      	bne.n	404728 <__adddf3+0x230>
  40471c:	0040      	lsls	r0, r0, #1
  40471e:	4149      	adcs	r1, r1
  404720:	bf28      	it	cs
  404722:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  404726:	bd30      	pop	{r4, r5, pc}
  404728:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40472c:	bf3c      	itt	cc
  40472e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404732:	bd30      	popcc	{r4, r5, pc}
  404734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404738:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40473c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404740:	f04f 0000 	mov.w	r0, #0
  404744:	bd30      	pop	{r4, r5, pc}
  404746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40474a:	bf1a      	itte	ne
  40474c:	4619      	movne	r1, r3
  40474e:	4610      	movne	r0, r2
  404750:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404754:	bf1c      	itt	ne
  404756:	460b      	movne	r3, r1
  404758:	4602      	movne	r2, r0
  40475a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40475e:	bf06      	itte	eq
  404760:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404764:	ea91 0f03 	teqeq	r1, r3
  404768:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40476c:	bd30      	pop	{r4, r5, pc}
  40476e:	bf00      	nop

00404770 <__aeabi_ui2d>:
  404770:	f090 0f00 	teq	r0, #0
  404774:	bf04      	itt	eq
  404776:	2100      	moveq	r1, #0
  404778:	4770      	bxeq	lr
  40477a:	b530      	push	{r4, r5, lr}
  40477c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404780:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404784:	f04f 0500 	mov.w	r5, #0
  404788:	f04f 0100 	mov.w	r1, #0
  40478c:	e750      	b.n	404630 <__adddf3+0x138>
  40478e:	bf00      	nop

00404790 <__aeabi_i2d>:
  404790:	f090 0f00 	teq	r0, #0
  404794:	bf04      	itt	eq
  404796:	2100      	moveq	r1, #0
  404798:	4770      	bxeq	lr
  40479a:	b530      	push	{r4, r5, lr}
  40479c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4047a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4047a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4047a8:	bf48      	it	mi
  4047aa:	4240      	negmi	r0, r0
  4047ac:	f04f 0100 	mov.w	r1, #0
  4047b0:	e73e      	b.n	404630 <__adddf3+0x138>
  4047b2:	bf00      	nop

004047b4 <__aeabi_f2d>:
  4047b4:	0042      	lsls	r2, r0, #1
  4047b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4047ba:	ea4f 0131 	mov.w	r1, r1, rrx
  4047be:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4047c2:	bf1f      	itttt	ne
  4047c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4047c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4047cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4047d0:	4770      	bxne	lr
  4047d2:	f092 0f00 	teq	r2, #0
  4047d6:	bf14      	ite	ne
  4047d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4047dc:	4770      	bxeq	lr
  4047de:	b530      	push	{r4, r5, lr}
  4047e0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4047e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4047e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4047ec:	e720      	b.n	404630 <__adddf3+0x138>
  4047ee:	bf00      	nop

004047f0 <__aeabi_ul2d>:
  4047f0:	ea50 0201 	orrs.w	r2, r0, r1
  4047f4:	bf08      	it	eq
  4047f6:	4770      	bxeq	lr
  4047f8:	b530      	push	{r4, r5, lr}
  4047fa:	f04f 0500 	mov.w	r5, #0
  4047fe:	e00a      	b.n	404816 <__aeabi_l2d+0x16>

00404800 <__aeabi_l2d>:
  404800:	ea50 0201 	orrs.w	r2, r0, r1
  404804:	bf08      	it	eq
  404806:	4770      	bxeq	lr
  404808:	b530      	push	{r4, r5, lr}
  40480a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40480e:	d502      	bpl.n	404816 <__aeabi_l2d+0x16>
  404810:	4240      	negs	r0, r0
  404812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404816:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40481a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40481e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404822:	f43f aedc 	beq.w	4045de <__adddf3+0xe6>
  404826:	f04f 0203 	mov.w	r2, #3
  40482a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40482e:	bf18      	it	ne
  404830:	3203      	addne	r2, #3
  404832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404836:	bf18      	it	ne
  404838:	3203      	addne	r2, #3
  40483a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40483e:	f1c2 0320 	rsb	r3, r2, #32
  404842:	fa00 fc03 	lsl.w	ip, r0, r3
  404846:	fa20 f002 	lsr.w	r0, r0, r2
  40484a:	fa01 fe03 	lsl.w	lr, r1, r3
  40484e:	ea40 000e 	orr.w	r0, r0, lr
  404852:	fa21 f102 	lsr.w	r1, r1, r2
  404856:	4414      	add	r4, r2
  404858:	e6c1      	b.n	4045de <__adddf3+0xe6>
  40485a:	bf00      	nop

0040485c <__aeabi_dmul>:
  40485c:	b570      	push	{r4, r5, r6, lr}
  40485e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40486a:	bf1d      	ittte	ne
  40486c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404870:	ea94 0f0c 	teqne	r4, ip
  404874:	ea95 0f0c 	teqne	r5, ip
  404878:	f000 f8de 	bleq	404a38 <__aeabi_dmul+0x1dc>
  40487c:	442c      	add	r4, r5
  40487e:	ea81 0603 	eor.w	r6, r1, r3
  404882:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404886:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40488a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40488e:	bf18      	it	ne
  404890:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40489c:	d038      	beq.n	404910 <__aeabi_dmul+0xb4>
  40489e:	fba0 ce02 	umull	ip, lr, r0, r2
  4048a2:	f04f 0500 	mov.w	r5, #0
  4048a6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4048aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4048ae:	fbe0 e503 	umlal	lr, r5, r0, r3
  4048b2:	f04f 0600 	mov.w	r6, #0
  4048b6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4048ba:	f09c 0f00 	teq	ip, #0
  4048be:	bf18      	it	ne
  4048c0:	f04e 0e01 	orrne.w	lr, lr, #1
  4048c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4048c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4048cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4048d0:	d204      	bcs.n	4048dc <__aeabi_dmul+0x80>
  4048d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4048d6:	416d      	adcs	r5, r5
  4048d8:	eb46 0606 	adc.w	r6, r6, r6
  4048dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4048e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4048e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4048e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4048ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4048f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4048f4:	bf88      	it	hi
  4048f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4048fa:	d81e      	bhi.n	40493a <__aeabi_dmul+0xde>
  4048fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  404900:	bf08      	it	eq
  404902:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  404906:	f150 0000 	adcs.w	r0, r0, #0
  40490a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40490e:	bd70      	pop	{r4, r5, r6, pc}
  404910:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404914:	ea46 0101 	orr.w	r1, r6, r1
  404918:	ea40 0002 	orr.w	r0, r0, r2
  40491c:	ea81 0103 	eor.w	r1, r1, r3
  404920:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404924:	bfc2      	ittt	gt
  404926:	ebd4 050c 	rsbsgt	r5, r4, ip
  40492a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40492e:	bd70      	popgt	{r4, r5, r6, pc}
  404930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404934:	f04f 0e00 	mov.w	lr, #0
  404938:	3c01      	subs	r4, #1
  40493a:	f300 80ab 	bgt.w	404a94 <__aeabi_dmul+0x238>
  40493e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404942:	bfde      	ittt	le
  404944:	2000      	movle	r0, #0
  404946:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40494a:	bd70      	pople	{r4, r5, r6, pc}
  40494c:	f1c4 0400 	rsb	r4, r4, #0
  404950:	3c20      	subs	r4, #32
  404952:	da35      	bge.n	4049c0 <__aeabi_dmul+0x164>
  404954:	340c      	adds	r4, #12
  404956:	dc1b      	bgt.n	404990 <__aeabi_dmul+0x134>
  404958:	f104 0414 	add.w	r4, r4, #20
  40495c:	f1c4 0520 	rsb	r5, r4, #32
  404960:	fa00 f305 	lsl.w	r3, r0, r5
  404964:	fa20 f004 	lsr.w	r0, r0, r4
  404968:	fa01 f205 	lsl.w	r2, r1, r5
  40496c:	ea40 0002 	orr.w	r0, r0, r2
  404970:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404974:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40497c:	fa21 f604 	lsr.w	r6, r1, r4
  404980:	eb42 0106 	adc.w	r1, r2, r6
  404984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404988:	bf08      	it	eq
  40498a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40498e:	bd70      	pop	{r4, r5, r6, pc}
  404990:	f1c4 040c 	rsb	r4, r4, #12
  404994:	f1c4 0520 	rsb	r5, r4, #32
  404998:	fa00 f304 	lsl.w	r3, r0, r4
  40499c:	fa20 f005 	lsr.w	r0, r0, r5
  4049a0:	fa01 f204 	lsl.w	r2, r1, r4
  4049a4:	ea40 0002 	orr.w	r0, r0, r2
  4049a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4049ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4049b0:	f141 0100 	adc.w	r1, r1, #0
  4049b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4049b8:	bf08      	it	eq
  4049ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4049be:	bd70      	pop	{r4, r5, r6, pc}
  4049c0:	f1c4 0520 	rsb	r5, r4, #32
  4049c4:	fa00 f205 	lsl.w	r2, r0, r5
  4049c8:	ea4e 0e02 	orr.w	lr, lr, r2
  4049cc:	fa20 f304 	lsr.w	r3, r0, r4
  4049d0:	fa01 f205 	lsl.w	r2, r1, r5
  4049d4:	ea43 0302 	orr.w	r3, r3, r2
  4049d8:	fa21 f004 	lsr.w	r0, r1, r4
  4049dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4049e0:	fa21 f204 	lsr.w	r2, r1, r4
  4049e4:	ea20 0002 	bic.w	r0, r0, r2
  4049e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4049ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4049f0:	bf08      	it	eq
  4049f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4049f6:	bd70      	pop	{r4, r5, r6, pc}
  4049f8:	f094 0f00 	teq	r4, #0
  4049fc:	d10f      	bne.n	404a1e <__aeabi_dmul+0x1c2>
  4049fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404a02:	0040      	lsls	r0, r0, #1
  404a04:	eb41 0101 	adc.w	r1, r1, r1
  404a08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404a0c:	bf08      	it	eq
  404a0e:	3c01      	subeq	r4, #1
  404a10:	d0f7      	beq.n	404a02 <__aeabi_dmul+0x1a6>
  404a12:	ea41 0106 	orr.w	r1, r1, r6
  404a16:	f095 0f00 	teq	r5, #0
  404a1a:	bf18      	it	ne
  404a1c:	4770      	bxne	lr
  404a1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404a22:	0052      	lsls	r2, r2, #1
  404a24:	eb43 0303 	adc.w	r3, r3, r3
  404a28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404a2c:	bf08      	it	eq
  404a2e:	3d01      	subeq	r5, #1
  404a30:	d0f7      	beq.n	404a22 <__aeabi_dmul+0x1c6>
  404a32:	ea43 0306 	orr.w	r3, r3, r6
  404a36:	4770      	bx	lr
  404a38:	ea94 0f0c 	teq	r4, ip
  404a3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404a40:	bf18      	it	ne
  404a42:	ea95 0f0c 	teqne	r5, ip
  404a46:	d00c      	beq.n	404a62 <__aeabi_dmul+0x206>
  404a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404a4c:	bf18      	it	ne
  404a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404a52:	d1d1      	bne.n	4049f8 <__aeabi_dmul+0x19c>
  404a54:	ea81 0103 	eor.w	r1, r1, r3
  404a58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404a5c:	f04f 0000 	mov.w	r0, #0
  404a60:	bd70      	pop	{r4, r5, r6, pc}
  404a62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404a66:	bf06      	itte	eq
  404a68:	4610      	moveq	r0, r2
  404a6a:	4619      	moveq	r1, r3
  404a6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404a70:	d019      	beq.n	404aa6 <__aeabi_dmul+0x24a>
  404a72:	ea94 0f0c 	teq	r4, ip
  404a76:	d102      	bne.n	404a7e <__aeabi_dmul+0x222>
  404a78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404a7c:	d113      	bne.n	404aa6 <__aeabi_dmul+0x24a>
  404a7e:	ea95 0f0c 	teq	r5, ip
  404a82:	d105      	bne.n	404a90 <__aeabi_dmul+0x234>
  404a84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404a88:	bf1c      	itt	ne
  404a8a:	4610      	movne	r0, r2
  404a8c:	4619      	movne	r1, r3
  404a8e:	d10a      	bne.n	404aa6 <__aeabi_dmul+0x24a>
  404a90:	ea81 0103 	eor.w	r1, r1, r3
  404a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404a98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404a9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404aa0:	f04f 0000 	mov.w	r0, #0
  404aa4:	bd70      	pop	{r4, r5, r6, pc}
  404aa6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404aaa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404aae:	bd70      	pop	{r4, r5, r6, pc}

00404ab0 <__aeabi_ddiv>:
  404ab0:	b570      	push	{r4, r5, r6, lr}
  404ab2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404ab6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404aba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404abe:	bf1d      	ittte	ne
  404ac0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404ac4:	ea94 0f0c 	teqne	r4, ip
  404ac8:	ea95 0f0c 	teqne	r5, ip
  404acc:	f000 f8a7 	bleq	404c1e <__aeabi_ddiv+0x16e>
  404ad0:	eba4 0405 	sub.w	r4, r4, r5
  404ad4:	ea81 0e03 	eor.w	lr, r1, r3
  404ad8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404adc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404ae0:	f000 8088 	beq.w	404bf4 <__aeabi_ddiv+0x144>
  404ae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404ae8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404aec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  404af0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404af4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404af8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404afc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404b00:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404b04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404b08:	429d      	cmp	r5, r3
  404b0a:	bf08      	it	eq
  404b0c:	4296      	cmpeq	r6, r2
  404b0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404b12:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404b16:	d202      	bcs.n	404b1e <__aeabi_ddiv+0x6e>
  404b18:	085b      	lsrs	r3, r3, #1
  404b1a:	ea4f 0232 	mov.w	r2, r2, rrx
  404b1e:	1ab6      	subs	r6, r6, r2
  404b20:	eb65 0503 	sbc.w	r5, r5, r3
  404b24:	085b      	lsrs	r3, r3, #1
  404b26:	ea4f 0232 	mov.w	r2, r2, rrx
  404b2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404b2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404b32:	ebb6 0e02 	subs.w	lr, r6, r2
  404b36:	eb75 0e03 	sbcs.w	lr, r5, r3
  404b3a:	bf22      	ittt	cs
  404b3c:	1ab6      	subcs	r6, r6, r2
  404b3e:	4675      	movcs	r5, lr
  404b40:	ea40 000c 	orrcs.w	r0, r0, ip
  404b44:	085b      	lsrs	r3, r3, #1
  404b46:	ea4f 0232 	mov.w	r2, r2, rrx
  404b4a:	ebb6 0e02 	subs.w	lr, r6, r2
  404b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404b52:	bf22      	ittt	cs
  404b54:	1ab6      	subcs	r6, r6, r2
  404b56:	4675      	movcs	r5, lr
  404b58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404b5c:	085b      	lsrs	r3, r3, #1
  404b5e:	ea4f 0232 	mov.w	r2, r2, rrx
  404b62:	ebb6 0e02 	subs.w	lr, r6, r2
  404b66:	eb75 0e03 	sbcs.w	lr, r5, r3
  404b6a:	bf22      	ittt	cs
  404b6c:	1ab6      	subcs	r6, r6, r2
  404b6e:	4675      	movcs	r5, lr
  404b70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404b74:	085b      	lsrs	r3, r3, #1
  404b76:	ea4f 0232 	mov.w	r2, r2, rrx
  404b7a:	ebb6 0e02 	subs.w	lr, r6, r2
  404b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404b82:	bf22      	ittt	cs
  404b84:	1ab6      	subcs	r6, r6, r2
  404b86:	4675      	movcs	r5, lr
  404b88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404b8c:	ea55 0e06 	orrs.w	lr, r5, r6
  404b90:	d018      	beq.n	404bc4 <__aeabi_ddiv+0x114>
  404b92:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404b96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404b9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404b9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404ba2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404ba6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404baa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404bae:	d1c0      	bne.n	404b32 <__aeabi_ddiv+0x82>
  404bb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404bb4:	d10b      	bne.n	404bce <__aeabi_ddiv+0x11e>
  404bb6:	ea41 0100 	orr.w	r1, r1, r0
  404bba:	f04f 0000 	mov.w	r0, #0
  404bbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404bc2:	e7b6      	b.n	404b32 <__aeabi_ddiv+0x82>
  404bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404bc8:	bf04      	itt	eq
  404bca:	4301      	orreq	r1, r0
  404bcc:	2000      	moveq	r0, #0
  404bce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404bd2:	bf88      	it	hi
  404bd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404bd8:	f63f aeaf 	bhi.w	40493a <__aeabi_dmul+0xde>
  404bdc:	ebb5 0c03 	subs.w	ip, r5, r3
  404be0:	bf04      	itt	eq
  404be2:	ebb6 0c02 	subseq.w	ip, r6, r2
  404be6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404bea:	f150 0000 	adcs.w	r0, r0, #0
  404bee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404bf2:	bd70      	pop	{r4, r5, r6, pc}
  404bf4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404bf8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404bfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404c00:	bfc2      	ittt	gt
  404c02:	ebd4 050c 	rsbsgt	r5, r4, ip
  404c06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404c0a:	bd70      	popgt	{r4, r5, r6, pc}
  404c0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404c10:	f04f 0e00 	mov.w	lr, #0
  404c14:	3c01      	subs	r4, #1
  404c16:	e690      	b.n	40493a <__aeabi_dmul+0xde>
  404c18:	ea45 0e06 	orr.w	lr, r5, r6
  404c1c:	e68d      	b.n	40493a <__aeabi_dmul+0xde>
  404c1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404c22:	ea94 0f0c 	teq	r4, ip
  404c26:	bf08      	it	eq
  404c28:	ea95 0f0c 	teqeq	r5, ip
  404c2c:	f43f af3b 	beq.w	404aa6 <__aeabi_dmul+0x24a>
  404c30:	ea94 0f0c 	teq	r4, ip
  404c34:	d10a      	bne.n	404c4c <__aeabi_ddiv+0x19c>
  404c36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404c3a:	f47f af34 	bne.w	404aa6 <__aeabi_dmul+0x24a>
  404c3e:	ea95 0f0c 	teq	r5, ip
  404c42:	f47f af25 	bne.w	404a90 <__aeabi_dmul+0x234>
  404c46:	4610      	mov	r0, r2
  404c48:	4619      	mov	r1, r3
  404c4a:	e72c      	b.n	404aa6 <__aeabi_dmul+0x24a>
  404c4c:	ea95 0f0c 	teq	r5, ip
  404c50:	d106      	bne.n	404c60 <__aeabi_ddiv+0x1b0>
  404c52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404c56:	f43f aefd 	beq.w	404a54 <__aeabi_dmul+0x1f8>
  404c5a:	4610      	mov	r0, r2
  404c5c:	4619      	mov	r1, r3
  404c5e:	e722      	b.n	404aa6 <__aeabi_dmul+0x24a>
  404c60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404c64:	bf18      	it	ne
  404c66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404c6a:	f47f aec5 	bne.w	4049f8 <__aeabi_dmul+0x19c>
  404c6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404c72:	f47f af0d 	bne.w	404a90 <__aeabi_dmul+0x234>
  404c76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404c7a:	f47f aeeb 	bne.w	404a54 <__aeabi_dmul+0x1f8>
  404c7e:	e712      	b.n	404aa6 <__aeabi_dmul+0x24a>

00404c80 <__gedf2>:
  404c80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  404c84:	e006      	b.n	404c94 <__cmpdf2+0x4>
  404c86:	bf00      	nop

00404c88 <__ledf2>:
  404c88:	f04f 0c01 	mov.w	ip, #1
  404c8c:	e002      	b.n	404c94 <__cmpdf2+0x4>
  404c8e:	bf00      	nop

00404c90 <__cmpdf2>:
  404c90:	f04f 0c01 	mov.w	ip, #1
  404c94:	f84d cd04 	str.w	ip, [sp, #-4]!
  404c98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404c9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404ca0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404ca4:	bf18      	it	ne
  404ca6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404caa:	d01b      	beq.n	404ce4 <__cmpdf2+0x54>
  404cac:	b001      	add	sp, #4
  404cae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  404cb2:	bf0c      	ite	eq
  404cb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404cb8:	ea91 0f03 	teqne	r1, r3
  404cbc:	bf02      	ittt	eq
  404cbe:	ea90 0f02 	teqeq	r0, r2
  404cc2:	2000      	moveq	r0, #0
  404cc4:	4770      	bxeq	lr
  404cc6:	f110 0f00 	cmn.w	r0, #0
  404cca:	ea91 0f03 	teq	r1, r3
  404cce:	bf58      	it	pl
  404cd0:	4299      	cmppl	r1, r3
  404cd2:	bf08      	it	eq
  404cd4:	4290      	cmpeq	r0, r2
  404cd6:	bf2c      	ite	cs
  404cd8:	17d8      	asrcs	r0, r3, #31
  404cda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  404cde:	f040 0001 	orr.w	r0, r0, #1
  404ce2:	4770      	bx	lr
  404ce4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404cec:	d102      	bne.n	404cf4 <__cmpdf2+0x64>
  404cee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404cf2:	d107      	bne.n	404d04 <__cmpdf2+0x74>
  404cf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404cf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404cfc:	d1d6      	bne.n	404cac <__cmpdf2+0x1c>
  404cfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404d02:	d0d3      	beq.n	404cac <__cmpdf2+0x1c>
  404d04:	f85d 0b04 	ldr.w	r0, [sp], #4
  404d08:	4770      	bx	lr
  404d0a:	bf00      	nop

00404d0c <__aeabi_cdrcmple>:
  404d0c:	4684      	mov	ip, r0
  404d0e:	4610      	mov	r0, r2
  404d10:	4662      	mov	r2, ip
  404d12:	468c      	mov	ip, r1
  404d14:	4619      	mov	r1, r3
  404d16:	4663      	mov	r3, ip
  404d18:	e000      	b.n	404d1c <__aeabi_cdcmpeq>
  404d1a:	bf00      	nop

00404d1c <__aeabi_cdcmpeq>:
  404d1c:	b501      	push	{r0, lr}
  404d1e:	f7ff ffb7 	bl	404c90 <__cmpdf2>
  404d22:	2800      	cmp	r0, #0
  404d24:	bf48      	it	mi
  404d26:	f110 0f00 	cmnmi.w	r0, #0
  404d2a:	bd01      	pop	{r0, pc}

00404d2c <__aeabi_dcmpeq>:
  404d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404d30:	f7ff fff4 	bl	404d1c <__aeabi_cdcmpeq>
  404d34:	bf0c      	ite	eq
  404d36:	2001      	moveq	r0, #1
  404d38:	2000      	movne	r0, #0
  404d3a:	f85d fb08 	ldr.w	pc, [sp], #8
  404d3e:	bf00      	nop

00404d40 <__aeabi_dcmplt>:
  404d40:	f84d ed08 	str.w	lr, [sp, #-8]!
  404d44:	f7ff ffea 	bl	404d1c <__aeabi_cdcmpeq>
  404d48:	bf34      	ite	cc
  404d4a:	2001      	movcc	r0, #1
  404d4c:	2000      	movcs	r0, #0
  404d4e:	f85d fb08 	ldr.w	pc, [sp], #8
  404d52:	bf00      	nop

00404d54 <__aeabi_dcmple>:
  404d54:	f84d ed08 	str.w	lr, [sp, #-8]!
  404d58:	f7ff ffe0 	bl	404d1c <__aeabi_cdcmpeq>
  404d5c:	bf94      	ite	ls
  404d5e:	2001      	movls	r0, #1
  404d60:	2000      	movhi	r0, #0
  404d62:	f85d fb08 	ldr.w	pc, [sp], #8
  404d66:	bf00      	nop

00404d68 <__aeabi_dcmpge>:
  404d68:	f84d ed08 	str.w	lr, [sp, #-8]!
  404d6c:	f7ff ffce 	bl	404d0c <__aeabi_cdrcmple>
  404d70:	bf94      	ite	ls
  404d72:	2001      	movls	r0, #1
  404d74:	2000      	movhi	r0, #0
  404d76:	f85d fb08 	ldr.w	pc, [sp], #8
  404d7a:	bf00      	nop

00404d7c <__aeabi_dcmpgt>:
  404d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
  404d80:	f7ff ffc4 	bl	404d0c <__aeabi_cdrcmple>
  404d84:	bf34      	ite	cc
  404d86:	2001      	movcc	r0, #1
  404d88:	2000      	movcs	r0, #0
  404d8a:	f85d fb08 	ldr.w	pc, [sp], #8
  404d8e:	bf00      	nop

00404d90 <__aeabi_dcmpun>:
  404d90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404d94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404d98:	d102      	bne.n	404da0 <__aeabi_dcmpun+0x10>
  404d9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  404d9e:	d10a      	bne.n	404db6 <__aeabi_dcmpun+0x26>
  404da0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404da8:	d102      	bne.n	404db0 <__aeabi_dcmpun+0x20>
  404daa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  404dae:	d102      	bne.n	404db6 <__aeabi_dcmpun+0x26>
  404db0:	f04f 0000 	mov.w	r0, #0
  404db4:	4770      	bx	lr
  404db6:	f04f 0001 	mov.w	r0, #1
  404dba:	4770      	bx	lr

00404dbc <__aeabi_d2iz>:
  404dbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404dc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  404dc4:	d215      	bcs.n	404df2 <__aeabi_d2iz+0x36>
  404dc6:	d511      	bpl.n	404dec <__aeabi_d2iz+0x30>
  404dc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  404dcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  404dd0:	d912      	bls.n	404df8 <__aeabi_d2iz+0x3c>
  404dd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  404dda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  404dde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404de2:	fa23 f002 	lsr.w	r0, r3, r2
  404de6:	bf18      	it	ne
  404de8:	4240      	negne	r0, r0
  404dea:	4770      	bx	lr
  404dec:	f04f 0000 	mov.w	r0, #0
  404df0:	4770      	bx	lr
  404df2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  404df6:	d105      	bne.n	404e04 <__aeabi_d2iz+0x48>
  404df8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  404dfc:	bf08      	it	eq
  404dfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  404e02:	4770      	bx	lr
  404e04:	f04f 0000 	mov.w	r0, #0
  404e08:	4770      	bx	lr
  404e0a:	bf00      	nop

00404e0c <__aeabi_d2f>:
  404e0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404e10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404e14:	bf24      	itt	cs
  404e16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  404e1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  404e1e:	d90d      	bls.n	404e3c <__aeabi_d2f+0x30>
  404e20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404e24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  404e28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  404e2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  404e30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404e34:	bf08      	it	eq
  404e36:	f020 0001 	biceq.w	r0, r0, #1
  404e3a:	4770      	bx	lr
  404e3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  404e40:	d121      	bne.n	404e86 <__aeabi_d2f+0x7a>
  404e42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  404e46:	bfbc      	itt	lt
  404e48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  404e4c:	4770      	bxlt	lr
  404e4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404e52:	ea4f 5252 	mov.w	r2, r2, lsr #21
  404e56:	f1c2 0218 	rsb	r2, r2, #24
  404e5a:	f1c2 0c20 	rsb	ip, r2, #32
  404e5e:	fa10 f30c 	lsls.w	r3, r0, ip
  404e62:	fa20 f002 	lsr.w	r0, r0, r2
  404e66:	bf18      	it	ne
  404e68:	f040 0001 	orrne.w	r0, r0, #1
  404e6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  404e70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  404e74:	fa03 fc0c 	lsl.w	ip, r3, ip
  404e78:	ea40 000c 	orr.w	r0, r0, ip
  404e7c:	fa23 f302 	lsr.w	r3, r3, r2
  404e80:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404e84:	e7cc      	b.n	404e20 <__aeabi_d2f+0x14>
  404e86:	ea7f 5362 	mvns.w	r3, r2, asr #21
  404e8a:	d107      	bne.n	404e9c <__aeabi_d2f+0x90>
  404e8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  404e90:	bf1e      	ittt	ne
  404e92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  404e96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  404e9a:	4770      	bxne	lr
  404e9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  404ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404ea8:	4770      	bx	lr
  404eaa:	bf00      	nop

00404eac <__aeabi_frsub>:
  404eac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  404eb0:	e002      	b.n	404eb8 <__addsf3>
  404eb2:	bf00      	nop

00404eb4 <__aeabi_fsub>:
  404eb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00404eb8 <__addsf3>:
  404eb8:	0042      	lsls	r2, r0, #1
  404eba:	bf1f      	itttt	ne
  404ebc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  404ec0:	ea92 0f03 	teqne	r2, r3
  404ec4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  404ec8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404ecc:	d06a      	beq.n	404fa4 <__addsf3+0xec>
  404ece:	ea4f 6212 	mov.w	r2, r2, lsr #24
  404ed2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  404ed6:	bfc1      	itttt	gt
  404ed8:	18d2      	addgt	r2, r2, r3
  404eda:	4041      	eorgt	r1, r0
  404edc:	4048      	eorgt	r0, r1
  404ede:	4041      	eorgt	r1, r0
  404ee0:	bfb8      	it	lt
  404ee2:	425b      	neglt	r3, r3
  404ee4:	2b19      	cmp	r3, #25
  404ee6:	bf88      	it	hi
  404ee8:	4770      	bxhi	lr
  404eea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  404eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404ef2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  404ef6:	bf18      	it	ne
  404ef8:	4240      	negne	r0, r0
  404efa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404efe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  404f02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  404f06:	bf18      	it	ne
  404f08:	4249      	negne	r1, r1
  404f0a:	ea92 0f03 	teq	r2, r3
  404f0e:	d03f      	beq.n	404f90 <__addsf3+0xd8>
  404f10:	f1a2 0201 	sub.w	r2, r2, #1
  404f14:	fa41 fc03 	asr.w	ip, r1, r3
  404f18:	eb10 000c 	adds.w	r0, r0, ip
  404f1c:	f1c3 0320 	rsb	r3, r3, #32
  404f20:	fa01 f103 	lsl.w	r1, r1, r3
  404f24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404f28:	d502      	bpl.n	404f30 <__addsf3+0x78>
  404f2a:	4249      	negs	r1, r1
  404f2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  404f30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  404f34:	d313      	bcc.n	404f5e <__addsf3+0xa6>
  404f36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  404f3a:	d306      	bcc.n	404f4a <__addsf3+0x92>
  404f3c:	0840      	lsrs	r0, r0, #1
  404f3e:	ea4f 0131 	mov.w	r1, r1, rrx
  404f42:	f102 0201 	add.w	r2, r2, #1
  404f46:	2afe      	cmp	r2, #254	; 0xfe
  404f48:	d251      	bcs.n	404fee <__addsf3+0x136>
  404f4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  404f4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404f52:	bf08      	it	eq
  404f54:	f020 0001 	biceq.w	r0, r0, #1
  404f58:	ea40 0003 	orr.w	r0, r0, r3
  404f5c:	4770      	bx	lr
  404f5e:	0049      	lsls	r1, r1, #1
  404f60:	eb40 0000 	adc.w	r0, r0, r0
  404f64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  404f68:	f1a2 0201 	sub.w	r2, r2, #1
  404f6c:	d1ed      	bne.n	404f4a <__addsf3+0x92>
  404f6e:	fab0 fc80 	clz	ip, r0
  404f72:	f1ac 0c08 	sub.w	ip, ip, #8
  404f76:	ebb2 020c 	subs.w	r2, r2, ip
  404f7a:	fa00 f00c 	lsl.w	r0, r0, ip
  404f7e:	bfaa      	itet	ge
  404f80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  404f84:	4252      	neglt	r2, r2
  404f86:	4318      	orrge	r0, r3
  404f88:	bfbc      	itt	lt
  404f8a:	40d0      	lsrlt	r0, r2
  404f8c:	4318      	orrlt	r0, r3
  404f8e:	4770      	bx	lr
  404f90:	f092 0f00 	teq	r2, #0
  404f94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  404f98:	bf06      	itte	eq
  404f9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  404f9e:	3201      	addeq	r2, #1
  404fa0:	3b01      	subne	r3, #1
  404fa2:	e7b5      	b.n	404f10 <__addsf3+0x58>
  404fa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  404fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404fac:	bf18      	it	ne
  404fae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404fb2:	d021      	beq.n	404ff8 <__addsf3+0x140>
  404fb4:	ea92 0f03 	teq	r2, r3
  404fb8:	d004      	beq.n	404fc4 <__addsf3+0x10c>
  404fba:	f092 0f00 	teq	r2, #0
  404fbe:	bf08      	it	eq
  404fc0:	4608      	moveq	r0, r1
  404fc2:	4770      	bx	lr
  404fc4:	ea90 0f01 	teq	r0, r1
  404fc8:	bf1c      	itt	ne
  404fca:	2000      	movne	r0, #0
  404fcc:	4770      	bxne	lr
  404fce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  404fd2:	d104      	bne.n	404fde <__addsf3+0x126>
  404fd4:	0040      	lsls	r0, r0, #1
  404fd6:	bf28      	it	cs
  404fd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  404fdc:	4770      	bx	lr
  404fde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  404fe2:	bf3c      	itt	cc
  404fe4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  404fe8:	4770      	bxcc	lr
  404fea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404fee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  404ff2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404ff6:	4770      	bx	lr
  404ff8:	ea7f 6222 	mvns.w	r2, r2, asr #24
  404ffc:	bf16      	itet	ne
  404ffe:	4608      	movne	r0, r1
  405000:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405004:	4601      	movne	r1, r0
  405006:	0242      	lsls	r2, r0, #9
  405008:	bf06      	itte	eq
  40500a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40500e:	ea90 0f01 	teqeq	r0, r1
  405012:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405016:	4770      	bx	lr

00405018 <__aeabi_ui2f>:
  405018:	f04f 0300 	mov.w	r3, #0
  40501c:	e004      	b.n	405028 <__aeabi_i2f+0x8>
  40501e:	bf00      	nop

00405020 <__aeabi_i2f>:
  405020:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405024:	bf48      	it	mi
  405026:	4240      	negmi	r0, r0
  405028:	ea5f 0c00 	movs.w	ip, r0
  40502c:	bf08      	it	eq
  40502e:	4770      	bxeq	lr
  405030:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405034:	4601      	mov	r1, r0
  405036:	f04f 0000 	mov.w	r0, #0
  40503a:	e01c      	b.n	405076 <__aeabi_l2f+0x2a>

0040503c <__aeabi_ul2f>:
  40503c:	ea50 0201 	orrs.w	r2, r0, r1
  405040:	bf08      	it	eq
  405042:	4770      	bxeq	lr
  405044:	f04f 0300 	mov.w	r3, #0
  405048:	e00a      	b.n	405060 <__aeabi_l2f+0x14>
  40504a:	bf00      	nop

0040504c <__aeabi_l2f>:
  40504c:	ea50 0201 	orrs.w	r2, r0, r1
  405050:	bf08      	it	eq
  405052:	4770      	bxeq	lr
  405054:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405058:	d502      	bpl.n	405060 <__aeabi_l2f+0x14>
  40505a:	4240      	negs	r0, r0
  40505c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405060:	ea5f 0c01 	movs.w	ip, r1
  405064:	bf02      	ittt	eq
  405066:	4684      	moveq	ip, r0
  405068:	4601      	moveq	r1, r0
  40506a:	2000      	moveq	r0, #0
  40506c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405070:	bf08      	it	eq
  405072:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405076:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40507a:	fabc f28c 	clz	r2, ip
  40507e:	3a08      	subs	r2, #8
  405080:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405084:	db10      	blt.n	4050a8 <__aeabi_l2f+0x5c>
  405086:	fa01 fc02 	lsl.w	ip, r1, r2
  40508a:	4463      	add	r3, ip
  40508c:	fa00 fc02 	lsl.w	ip, r0, r2
  405090:	f1c2 0220 	rsb	r2, r2, #32
  405094:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405098:	fa20 f202 	lsr.w	r2, r0, r2
  40509c:	eb43 0002 	adc.w	r0, r3, r2
  4050a0:	bf08      	it	eq
  4050a2:	f020 0001 	biceq.w	r0, r0, #1
  4050a6:	4770      	bx	lr
  4050a8:	f102 0220 	add.w	r2, r2, #32
  4050ac:	fa01 fc02 	lsl.w	ip, r1, r2
  4050b0:	f1c2 0220 	rsb	r2, r2, #32
  4050b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4050b8:	fa21 f202 	lsr.w	r2, r1, r2
  4050bc:	eb43 0002 	adc.w	r0, r3, r2
  4050c0:	bf08      	it	eq
  4050c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4050c6:	4770      	bx	lr

004050c8 <__aeabi_fmul>:
  4050c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4050cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4050d0:	bf1e      	ittt	ne
  4050d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4050d6:	ea92 0f0c 	teqne	r2, ip
  4050da:	ea93 0f0c 	teqne	r3, ip
  4050de:	d06f      	beq.n	4051c0 <__aeabi_fmul+0xf8>
  4050e0:	441a      	add	r2, r3
  4050e2:	ea80 0c01 	eor.w	ip, r0, r1
  4050e6:	0240      	lsls	r0, r0, #9
  4050e8:	bf18      	it	ne
  4050ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4050ee:	d01e      	beq.n	40512e <__aeabi_fmul+0x66>
  4050f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4050f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4050f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4050fc:	fba0 3101 	umull	r3, r1, r0, r1
  405100:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405104:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405108:	bf3e      	ittt	cc
  40510a:	0049      	lslcc	r1, r1, #1
  40510c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405110:	005b      	lslcc	r3, r3, #1
  405112:	ea40 0001 	orr.w	r0, r0, r1
  405116:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40511a:	2afd      	cmp	r2, #253	; 0xfd
  40511c:	d81d      	bhi.n	40515a <__aeabi_fmul+0x92>
  40511e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405122:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405126:	bf08      	it	eq
  405128:	f020 0001 	biceq.w	r0, r0, #1
  40512c:	4770      	bx	lr
  40512e:	f090 0f00 	teq	r0, #0
  405132:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405136:	bf08      	it	eq
  405138:	0249      	lsleq	r1, r1, #9
  40513a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40513e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405142:	3a7f      	subs	r2, #127	; 0x7f
  405144:	bfc2      	ittt	gt
  405146:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40514a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40514e:	4770      	bxgt	lr
  405150:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405154:	f04f 0300 	mov.w	r3, #0
  405158:	3a01      	subs	r2, #1
  40515a:	dc5d      	bgt.n	405218 <__aeabi_fmul+0x150>
  40515c:	f112 0f19 	cmn.w	r2, #25
  405160:	bfdc      	itt	le
  405162:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405166:	4770      	bxle	lr
  405168:	f1c2 0200 	rsb	r2, r2, #0
  40516c:	0041      	lsls	r1, r0, #1
  40516e:	fa21 f102 	lsr.w	r1, r1, r2
  405172:	f1c2 0220 	rsb	r2, r2, #32
  405176:	fa00 fc02 	lsl.w	ip, r0, r2
  40517a:	ea5f 0031 	movs.w	r0, r1, rrx
  40517e:	f140 0000 	adc.w	r0, r0, #0
  405182:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405186:	bf08      	it	eq
  405188:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40518c:	4770      	bx	lr
  40518e:	f092 0f00 	teq	r2, #0
  405192:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405196:	bf02      	ittt	eq
  405198:	0040      	lsleq	r0, r0, #1
  40519a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40519e:	3a01      	subeq	r2, #1
  4051a0:	d0f9      	beq.n	405196 <__aeabi_fmul+0xce>
  4051a2:	ea40 000c 	orr.w	r0, r0, ip
  4051a6:	f093 0f00 	teq	r3, #0
  4051aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4051ae:	bf02      	ittt	eq
  4051b0:	0049      	lsleq	r1, r1, #1
  4051b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4051b6:	3b01      	subeq	r3, #1
  4051b8:	d0f9      	beq.n	4051ae <__aeabi_fmul+0xe6>
  4051ba:	ea41 010c 	orr.w	r1, r1, ip
  4051be:	e78f      	b.n	4050e0 <__aeabi_fmul+0x18>
  4051c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4051c4:	ea92 0f0c 	teq	r2, ip
  4051c8:	bf18      	it	ne
  4051ca:	ea93 0f0c 	teqne	r3, ip
  4051ce:	d00a      	beq.n	4051e6 <__aeabi_fmul+0x11e>
  4051d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4051d4:	bf18      	it	ne
  4051d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4051da:	d1d8      	bne.n	40518e <__aeabi_fmul+0xc6>
  4051dc:	ea80 0001 	eor.w	r0, r0, r1
  4051e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4051e4:	4770      	bx	lr
  4051e6:	f090 0f00 	teq	r0, #0
  4051ea:	bf17      	itett	ne
  4051ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  4051f0:	4608      	moveq	r0, r1
  4051f2:	f091 0f00 	teqne	r1, #0
  4051f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  4051fa:	d014      	beq.n	405226 <__aeabi_fmul+0x15e>
  4051fc:	ea92 0f0c 	teq	r2, ip
  405200:	d101      	bne.n	405206 <__aeabi_fmul+0x13e>
  405202:	0242      	lsls	r2, r0, #9
  405204:	d10f      	bne.n	405226 <__aeabi_fmul+0x15e>
  405206:	ea93 0f0c 	teq	r3, ip
  40520a:	d103      	bne.n	405214 <__aeabi_fmul+0x14c>
  40520c:	024b      	lsls	r3, r1, #9
  40520e:	bf18      	it	ne
  405210:	4608      	movne	r0, r1
  405212:	d108      	bne.n	405226 <__aeabi_fmul+0x15e>
  405214:	ea80 0001 	eor.w	r0, r0, r1
  405218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40521c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405220:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405224:	4770      	bx	lr
  405226:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40522a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40522e:	4770      	bx	lr

00405230 <__aeabi_fdiv>:
  405230:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405238:	bf1e      	ittt	ne
  40523a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40523e:	ea92 0f0c 	teqne	r2, ip
  405242:	ea93 0f0c 	teqne	r3, ip
  405246:	d069      	beq.n	40531c <__aeabi_fdiv+0xec>
  405248:	eba2 0203 	sub.w	r2, r2, r3
  40524c:	ea80 0c01 	eor.w	ip, r0, r1
  405250:	0249      	lsls	r1, r1, #9
  405252:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405256:	d037      	beq.n	4052c8 <__aeabi_fdiv+0x98>
  405258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40525c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405260:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405264:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405268:	428b      	cmp	r3, r1
  40526a:	bf38      	it	cc
  40526c:	005b      	lslcc	r3, r3, #1
  40526e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405272:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405276:	428b      	cmp	r3, r1
  405278:	bf24      	itt	cs
  40527a:	1a5b      	subcs	r3, r3, r1
  40527c:	ea40 000c 	orrcs.w	r0, r0, ip
  405280:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405284:	bf24      	itt	cs
  405286:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40528a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40528e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405292:	bf24      	itt	cs
  405294:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405298:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40529c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4052a0:	bf24      	itt	cs
  4052a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4052a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4052aa:	011b      	lsls	r3, r3, #4
  4052ac:	bf18      	it	ne
  4052ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4052b2:	d1e0      	bne.n	405276 <__aeabi_fdiv+0x46>
  4052b4:	2afd      	cmp	r2, #253	; 0xfd
  4052b6:	f63f af50 	bhi.w	40515a <__aeabi_fmul+0x92>
  4052ba:	428b      	cmp	r3, r1
  4052bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4052c0:	bf08      	it	eq
  4052c2:	f020 0001 	biceq.w	r0, r0, #1
  4052c6:	4770      	bx	lr
  4052c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4052cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4052d0:	327f      	adds	r2, #127	; 0x7f
  4052d2:	bfc2      	ittt	gt
  4052d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4052d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4052dc:	4770      	bxgt	lr
  4052de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4052e2:	f04f 0300 	mov.w	r3, #0
  4052e6:	3a01      	subs	r2, #1
  4052e8:	e737      	b.n	40515a <__aeabi_fmul+0x92>
  4052ea:	f092 0f00 	teq	r2, #0
  4052ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4052f2:	bf02      	ittt	eq
  4052f4:	0040      	lsleq	r0, r0, #1
  4052f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4052fa:	3a01      	subeq	r2, #1
  4052fc:	d0f9      	beq.n	4052f2 <__aeabi_fdiv+0xc2>
  4052fe:	ea40 000c 	orr.w	r0, r0, ip
  405302:	f093 0f00 	teq	r3, #0
  405306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40530a:	bf02      	ittt	eq
  40530c:	0049      	lsleq	r1, r1, #1
  40530e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405312:	3b01      	subeq	r3, #1
  405314:	d0f9      	beq.n	40530a <__aeabi_fdiv+0xda>
  405316:	ea41 010c 	orr.w	r1, r1, ip
  40531a:	e795      	b.n	405248 <__aeabi_fdiv+0x18>
  40531c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405320:	ea92 0f0c 	teq	r2, ip
  405324:	d108      	bne.n	405338 <__aeabi_fdiv+0x108>
  405326:	0242      	lsls	r2, r0, #9
  405328:	f47f af7d 	bne.w	405226 <__aeabi_fmul+0x15e>
  40532c:	ea93 0f0c 	teq	r3, ip
  405330:	f47f af70 	bne.w	405214 <__aeabi_fmul+0x14c>
  405334:	4608      	mov	r0, r1
  405336:	e776      	b.n	405226 <__aeabi_fmul+0x15e>
  405338:	ea93 0f0c 	teq	r3, ip
  40533c:	d104      	bne.n	405348 <__aeabi_fdiv+0x118>
  40533e:	024b      	lsls	r3, r1, #9
  405340:	f43f af4c 	beq.w	4051dc <__aeabi_fmul+0x114>
  405344:	4608      	mov	r0, r1
  405346:	e76e      	b.n	405226 <__aeabi_fmul+0x15e>
  405348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40534c:	bf18      	it	ne
  40534e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405352:	d1ca      	bne.n	4052ea <__aeabi_fdiv+0xba>
  405354:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405358:	f47f af5c 	bne.w	405214 <__aeabi_fmul+0x14c>
  40535c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405360:	f47f af3c 	bne.w	4051dc <__aeabi_fmul+0x114>
  405364:	e75f      	b.n	405226 <__aeabi_fmul+0x15e>
  405366:	bf00      	nop
  405368:	0a0d0a0d 	.word	0x0a0d0a0d
  40536c:	346d6173 	.word	0x346d6173
  405370:	63323364 	.word	0x63323364
  405374:	756d6920 	.word	0x756d6920
  405378:	6d656420 	.word	0x6d656420
  40537c:	2e2e2e6f 	.word	0x2e2e2e6f
  405380:	00000a0d 	.word	0x00000a0d
  405384:	0000002e 	.word	0x0000002e
  405388:	6f727967 	.word	0x6f727967
  40538c:	792f7820 	.word	0x792f7820
  405390:	203a7a2f 	.word	0x203a7a2f
  405394:	25206425 	.word	0x25206425
  405398:	64252064 	.word	0x64252064
  40539c:	00000a0d 	.word	0x00000a0d
  4053a0:	74697277 	.word	0x74697277
  4053a4:	65725f65 	.word	0x65725f65
  4053a8:	74736967 	.word	0x74736967
  4053ac:	203a7265 	.word	0x203a7265
  4053b0:	63637573 	.word	0x63637573
  4053b4:	0d737365 	.word	0x0d737365
  4053b8:	0000000a 	.word	0x0000000a
  4053bc:	5f697774 	.word	0x5f697774
  4053c0:	7473616d 	.word	0x7473616d
  4053c4:	695f7265 	.word	0x695f7265
  4053c8:	3a74696e 	.word	0x3a74696e
  4053cc:	69616620 	.word	0x69616620
  4053d0:	0d64656c 	.word	0x0d64656c
  4053d4:	0000000a 	.word	0x0000000a
  4053d8:	5f697774 	.word	0x5f697774
  4053dc:	7473616d 	.word	0x7473616d
  4053e0:	695f7265 	.word	0x695f7265
  4053e4:	3a74696e 	.word	0x3a74696e
  4053e8:	63757320 	.word	0x63757320
  4053ec:	73736563 	.word	0x73736563
  4053f0:	00000a0d 	.word	0x00000a0d
  4053f4:	5f697774 	.word	0x5f697774
  4053f8:	626f7270 	.word	0x626f7270
  4053fc:	66203a65 	.word	0x66203a65
  405400:	656c6961 	.word	0x656c6961
  405404:	000a0d64 	.word	0x000a0d64
  405408:	5f697774 	.word	0x5f697774
  40540c:	626f7270 	.word	0x626f7270
  405410:	73203a65 	.word	0x73203a65
  405414:	65636375 	.word	0x65636375
  405418:	0a0d7373 	.word	0x0a0d7373
  40541c:	00000000 	.word	0x00000000
  405420:	62616e45 	.word	0x62616e45
  405424:	0064656c 	.word	0x0064656c
  405428:	61736944 	.word	0x61736944
  40542c:	64656c62 	.word	0x64656c62
  405430:	00000000 	.word	0x00000000
  405434:	69766544 	.word	0x69766544
  405438:	203a6563 	.word	0x203a6563
  40543c:	31257830 	.word	0x31257830
  405440:	000a0d78 	.word	0x000a0d78
  405444:	65656c53 	.word	0x65656c53
  405448:	6f4d2070 	.word	0x6f4d2070
  40544c:	203a6564 	.word	0x203a6564
  405450:	0a0d7325 	.word	0x0a0d7325
  405454:	00000000 	.word	0x00000000
  405458:	636f6c43 	.word	0x636f6c43
  40545c:	6f53206b 	.word	0x6f53206b
  405460:	65637275 	.word	0x65637275
  405464:	0000203a 	.word	0x0000203a
  405468:	65746e49 	.word	0x65746e49
  40546c:	6c616e72 	.word	0x6c616e72
  405470:	484d3820 	.word	0x484d3820
  405474:	736f207a 	.word	0x736f207a
  405478:	6c6c6963 	.word	0x6c6c6963
  40547c:	726f7461 	.word	0x726f7461
  405480:	00000a0d 	.word	0x00000a0d
  405484:	204c4c50 	.word	0x204c4c50
  405488:	68746977 	.word	0x68746977
  40548c:	61205820 	.word	0x61205820
  405490:	20736978 	.word	0x20736978
  405494:	6f727967 	.word	0x6f727967
  405498:	706f6373 	.word	0x706f6373
  40549c:	65722065 	.word	0x65722065
  4054a0:	65726566 	.word	0x65726566
  4054a4:	0d65636e 	.word	0x0d65636e
  4054a8:	0000000a 	.word	0x0000000a
  4054ac:	6f727947 	.word	0x6f727947
  4054b0:	706f6373 	.word	0x706f6373
  4054b4:	00203a65 	.word	0x00203a65
  4054b8:	20303532 	.word	0x20303532
  4054bc:	0d737064 	.word	0x0d737064
  4054c0:	0000000a 	.word	0x0000000a
  4054c4:	20303035 	.word	0x20303035
  4054c8:	0d737064 	.word	0x0d737064
  4054cc:	0000000a 	.word	0x0000000a
  4054d0:	30303031 	.word	0x30303031
  4054d4:	73706420 	.word	0x73706420
  4054d8:	00000a0d 	.word	0x00000a0d
  4054dc:	30303032 	.word	0x30303032
  4054e0:	73706420 	.word	0x73706420
  4054e4:	00000a0d 	.word	0x00000a0d
  4054e8:	74727173 	.word	0x74727173
  4054ec:	00000000 	.word	0x00000000

004054f0 <atanlo>:
  4054f0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  405500:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00405510 <atanhi>:
  405510:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  405520:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00405530 <_global_impure_ptr>:
  405530:	20000014 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  405540:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  405550:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  405560:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  405570:	4e614e00 00000000                       .NaN....

00405578 <__sf_fake_stdin>:
	...

00405598 <__sf_fake_stdout>:
	...

004055b8 <__sf_fake_stderr>:
	...

004055d8 <__mprec_tens>:
  4055d8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4055e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4055f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  405608:	00000000 412e8480 00000000 416312d0     .......A......cA
  405618:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405628:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405638:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405648:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405658:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405668:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405678:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405688:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405698:	79d99db4 44ea7843                       ...yCx.D

004056a0 <__mprec_bigtens>:
  4056a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4056b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4056c0:	7f73bf3c 75154fdd                       <.s..O.u

004056c8 <p05.6097>:
  4056c8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4056d8:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  4056e8:	5849534f 00002e00                                OSIX...

004056ef <_ctype_>:
  4056ef:	20202000 20202020 28282020 20282828     .         ((((( 
  4056ff:	20202020 20202020 20202020 20202020                     
  40570f:	10108820 10101010 10101010 10101010      ...............
  40571f:	04040410 04040404 10040404 10101010     ................
  40572f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40573f:	01010101 01010101 01010101 10101010     ................
  40574f:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40575f:	02020202 02020202 02020202 10101010     ................
  40576f:	00000020 00000000 00000000 00000000      ...............
	...

004057f0 <_init>:
  4057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4057f2:	bf00      	nop
  4057f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4057f6:	bc08      	pop	{r3}
  4057f8:	469e      	mov	lr, r3
  4057fa:	4770      	bx	lr

004057fc <__init_array_start>:
  4057fc:	004000f1 	.word	0x004000f1

00405800 <_fini>:
  405800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405802:	bf00      	nop
  405804:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405806:	bc08      	pop	{r3}
  405808:	469e      	mov	lr, r3
  40580a:	4770      	bx	lr
  40580c:	0000      	movs	r0, r0
	...

00405810 <__portable_delay_cycles_veneer>:
  405810:	f85f f000 	ldr.w	pc, [pc]	; 405814 <__portable_delay_cycles_veneer+0x4>
  405814:	20000001 	.word	0x20000001

00405818 <__fini_array_start>:
  405818:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <__fdlib_version>:
20000010:	0001 0000                                   ....

20000014 <impure_data>:
20000014:	0000 0000 5578 0040 5598 0040 55b8 0040     ....xU@..U@..U@.
	...

20000074 <_impure_ptr>:
20000074:	0014 2000                                   ... 

20000078 <__global_locale>:
20000078:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	44d1 0040 4485 0040 0000 0000 56ef 0040     .D@..D@......V@.
20000168:	56ed 0040 56d9 0040 56d9 0040 56d9 0040     .V@..V@..V@..V@.
20000178:	56d9 0040 56d9 0040 56d9 0040 56d9 0040     .V@..V@..V@..V@.
20000188:	56d9 0040 56d9 0040 ffff ffff ffff ffff     .V@..V@.........
20000198:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
