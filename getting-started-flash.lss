
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000647c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  0040647c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000001e4  200001e8  00406664  000201e8  2**2
                  ALLOC
  3 .stack        00003004  200003cc  00406848  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   000115bb  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f6e  00000000  00000000  0003183b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005a01  00000000  00000000  000347a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000db8  00000000  00000000  0003a1aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c58  00000000  00000000  0003af62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016d81  00000000  00000000  0003bbba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010eed  00000000  00000000  0005293b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000552f8  00000000  00000000  00063828  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d08  00000000  00000000  000b8b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200033d0 	.word	0x200033d0
  400004:	00401bd1 	.word	0x00401bd1
  400008:	00401bcd 	.word	0x00401bcd
  40000c:	00401bcd 	.word	0x00401bcd
  400010:	00401bcd 	.word	0x00401bcd
  400014:	00401bcd 	.word	0x00401bcd
  400018:	00401bcd 	.word	0x00401bcd
	...
  40002c:	00401bcd 	.word	0x00401bcd
  400030:	00401bcd 	.word	0x00401bcd
  400034:	00000000 	.word	0x00000000
  400038:	00401bcd 	.word	0x00401bcd
  40003c:	00400445 	.word	0x00400445
  400040:	00401bcd 	.word	0x00401bcd
  400044:	00401bcd 	.word	0x00401bcd
  400048:	00401bcd 	.word	0x00401bcd
  40004c:	00401bcd 	.word	0x00401bcd
  400050:	00401bcd 	.word	0x00401bcd
  400054:	00401bcd 	.word	0x00401bcd
  400058:	00401bcd 	.word	0x00401bcd
  40005c:	00401bcd 	.word	0x00401bcd
  400060:	00401bcd 	.word	0x00401bcd
  400064:	00401bcd 	.word	0x00401bcd
  400068:	00000000 	.word	0x00000000
  40006c:	00401815 	.word	0x00401815
  400070:	00401825 	.word	0x00401825
  400074:	00401835 	.word	0x00401835
  400078:	00401bcd 	.word	0x00401bcd
  40007c:	00401bcd 	.word	0x00401bcd
	...
  400088:	00401bcd 	.word	0x00401bcd
  40008c:	00401bcd 	.word	0x00401bcd
  400090:	00401bcd 	.word	0x00401bcd
  400094:	00401bcd 	.word	0x00401bcd
  400098:	00401bcd 	.word	0x00401bcd
  40009c:	00401bcd 	.word	0x00401bcd
  4000a0:	00401bcd 	.word	0x00401bcd
  4000a4:	00401bcd 	.word	0x00401bcd
  4000a8:	00401bcd 	.word	0x00401bcd
  4000ac:	00401bcd 	.word	0x00401bcd
  4000b0:	00401bcd 	.word	0x00401bcd
  4000b4:	00401bcd 	.word	0x00401bcd
  4000b8:	00401bcd 	.word	0x00401bcd
  4000bc:	00401bcd 	.word	0x00401bcd
  4000c0:	00401bcd 	.word	0x00401bcd
  4000c4:	00401bcd 	.word	0x00401bcd
  4000c8:	00401bcd 	.word	0x00401bcd

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e8 	.word	0x200001e8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040647c 	.word	0x0040647c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001ec 	.word	0x200001ec
  40011c:	0040647c 	.word	0x0040647c
  400120:	0040647c 	.word	0x0040647c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 fe2e 	bl	401d8c <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 fbba 	bl	4018ac <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 fbe2 	bl	401900 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 fbe6 	bl	401910 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 fbe9 	bl	401920 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 fb76 	bl	401844 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f001 fd8e 	bl	401c78 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f001 fe15 	bl	401d8c <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	200002f8 	.word	0x200002f8
  4001a8:	200002f0 	.word	0x200002f0

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200002f4 	.word	0x200002f4
  4001f8:	200002f8 	.word	0x200002f8

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 fbde 	bl	4019d4 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 fbd3 	bl	4019d4 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 fbdc 	bl	4019fc <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 fbcf 	bl	4019fc <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 fb9a 	bl	4019c4 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 fb8e 	bl	4019c4 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 fb94 	bl	4019e8 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 fb88 	bl	4019e8 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
    sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

int main(void)
{
  4002f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  4002f8:	b08c      	sub	sp, #48	; 0x30
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f000 ff3b 	bl	401178 <board_init>

   

    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 fb14 	bl	401930 <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 fb11 	bl	401930 <pmc_enable_periph_clk>
    cph_millis_init();
  40030e:	f000 f8a1 	bl	400454 <cph_millis_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400312:	2009      	movs	r0, #9
  400314:	f001 fb0c 	bl	401930 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400318:	4c38      	ldr	r4, [pc, #224]	; (4003fc <main+0x108>)
  40031a:	4b39      	ldr	r3, [pc, #228]	; (400400 <main+0x10c>)
  40031c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40031e:	4a39      	ldr	r2, [pc, #228]	; (400404 <main+0x110>)
  400320:	4b39      	ldr	r3, [pc, #228]	; (400408 <main+0x114>)
  400322:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400324:	4a39      	ldr	r2, [pc, #228]	; (40040c <main+0x118>)
  400326:	4b3a      	ldr	r3, [pc, #232]	; (400410 <main+0x11c>)
  400328:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40032a:	4b3a      	ldr	r3, [pc, #232]	; (400414 <main+0x120>)
  40032c:	9309      	str	r3, [sp, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40032e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400332:	930a      	str	r3, [sp, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  400334:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400338:	930b      	str	r3, [sp, #44]	; 0x2c
  40033a:	2009      	movs	r0, #9
  40033c:	f001 faf8 	bl	401930 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400340:	a909      	add	r1, sp, #36	; 0x24
  400342:	4620      	mov	r0, r4
  400344:	f001 fb22 	bl	40198c <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400348:	4c33      	ldr	r4, [pc, #204]	; (400418 <main+0x124>)
  40034a:	6823      	ldr	r3, [r4, #0]
  40034c:	2100      	movs	r1, #0
  40034e:	6898      	ldr	r0, [r3, #8]
  400350:	f002 fe3c 	bl	402fcc <setbuf>
	setbuf(stdin, NULL);
  400354:	6823      	ldr	r3, [r4, #0]
  400356:	2100      	movs	r1, #0
  400358:	6858      	ldr	r0, [r3, #4]
  40035a:	f002 fe37 	bl	402fcc <setbuf>
    configure_console();



    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  40035e:	482f      	ldr	r0, [pc, #188]	; (40041c <main+0x128>)
  400360:	f002 fe2c 	bl	402fbc <puts>
  400364:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        printf(".");
  400366:	4e2e      	ldr	r6, [pc, #184]	; (400420 <main+0x12c>)
        delay_ms(250);
  400368:	4d2e      	ldr	r5, [pc, #184]	; (400424 <main+0x130>)


    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        printf(".");
  40036a:	4630      	mov	r0, r6
  40036c:	f002 fdb4 	bl	402ed8 <iprintf>
        delay_ms(250);
  400370:	4628      	mov	r0, r5
  400372:	f006 f87d 	bl	406470 <__portable_delay_cycles_veneer>



    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  400376:	3c01      	subs	r4, #1
  400378:	d1f7      	bne.n	40036a <main+0x76>
        printf(".");
        delay_ms(250);
    }
    printf("\r\n");
  40037a:	482b      	ldr	r0, [pc, #172]	; (400428 <main+0x134>)
  40037c:	f002 fdac 	bl	402ed8 <iprintf>

    
    if (imu_init()) {
  400380:	f000 fcd0 	bl	400d24 <imu_init>
  400384:	2800      	cmp	r0, #0
  400386:	d034      	beq.n	4003f2 <main+0xfe>

        servo_init();
  400388:	f000 fe14 	bl	400fb4 <servo_init>

        // Calibrate the imu
        imu_calibrate();
  40038c:	f000 fce6 	bl	400d5c <imu_calibrate>
            imu_tick();
            servo_tick();
            pid_tick();


            if (cph_get_millis() >= f_log_timeout) {
  400390:	4d26      	ldr	r5, [pc, #152]	; (40042c <main+0x138>)
  400392:	4c27      	ldr	r4, [pc, #156]	; (400430 <main+0x13c>)

        // Calibrate the imu
        imu_calibrate();

        while(true) {
            imu_tick();
  400394:	f000 fcec 	bl	400d70 <imu_tick>
            servo_tick();
  400398:	f000 fe64 	bl	401064 <servo_tick>
            pid_tick();
  40039c:	f000 fe7a 	bl	401094 <pid_tick>


            if (cph_get_millis() >= f_log_timeout) {
  4003a0:	682a      	ldr	r2, [r5, #0]
  4003a2:	6823      	ldr	r3, [r4, #0]
  4003a4:	429a      	cmp	r2, r3
  4003a6:	d3f5      	bcc.n	400394 <main+0xa0>
                f_log_timeout = cph_get_millis() + 50;
  4003a8:	682b      	ldr	r3, [r5, #0]
  4003aa:	3332      	adds	r3, #50	; 0x32
  4003ac:	6023      	str	r3, [r4, #0]
                // printf("roll/pitch/yaw: %f %f %f\r\n", imu_complementary.x_axis, imu_complementary.y_axis, imu_complementary.z_axis);
                printf("roll/pitch/yaw error/pid: %f %f %f %f %f\r\n", ap.imu.x_axis, ap.imu.y_axis, ap.imu.z_axis, error, pid);
  4003ae:	4e21      	ldr	r6, [pc, #132]	; (400434 <main+0x140>)
  4003b0:	6830      	ldr	r0, [r6, #0]
  4003b2:	f004 ff1f 	bl	4051f4 <__aeabi_f2d>
  4003b6:	4680      	mov	r8, r0
  4003b8:	4689      	mov	r9, r1
  4003ba:	4b1f      	ldr	r3, [pc, #124]	; (400438 <main+0x144>)
  4003bc:	6818      	ldr	r0, [r3, #0]
  4003be:	f004 ff19 	bl	4051f4 <__aeabi_f2d>
  4003c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4003c6:	4b1d      	ldr	r3, [pc, #116]	; (40043c <main+0x148>)
  4003c8:	6818      	ldr	r0, [r3, #0]
  4003ca:	f004 ff13 	bl	4051f4 <__aeabi_f2d>
  4003ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4003d2:	68b0      	ldr	r0, [r6, #8]
  4003d4:	f004 ff0e 	bl	4051f4 <__aeabi_f2d>
  4003d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4003dc:	6870      	ldr	r0, [r6, #4]
  4003de:	f004 ff09 	bl	4051f4 <__aeabi_f2d>
  4003e2:	e9cd 0100 	strd	r0, r1, [sp]
  4003e6:	4642      	mov	r2, r8
  4003e8:	464b      	mov	r3, r9
  4003ea:	4815      	ldr	r0, [pc, #84]	; (400440 <main+0x14c>)
  4003ec:	f002 fd74 	bl	402ed8 <iprintf>
  4003f0:	e7d0      	b.n	400394 <main+0xa0>
    //         delay_ms(500); 
    //     }


    // }
}
  4003f2:	2000      	movs	r0, #0
  4003f4:	b00c      	add	sp, #48	; 0x30
  4003f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  4003fa:	bf00      	nop
  4003fc:	400e0800 	.word	0x400e0800
  400400:	200002f8 	.word	0x200002f8
  400404:	0040027d 	.word	0x0040027d
  400408:	200002f4 	.word	0x200002f4
  40040c:	004001fd 	.word	0x004001fd
  400410:	200002f0 	.word	0x200002f0
  400414:	07270e00 	.word	0x07270e00
  400418:	20000078 	.word	0x20000078
  40041c:	00405f20 	.word	0x00405f20
  400420:	00405f3c 	.word	0x00405f3c
  400424:	0020b28a 	.word	0x0020b28a
  400428:	00405f38 	.word	0x00405f38
  40042c:	20000208 	.word	0x20000208
  400430:	20000204 	.word	0x20000204
  400434:	2000036c 	.word	0x2000036c
  400438:	20000248 	.word	0x20000248
  40043c:	20000254 	.word	0x20000254
  400440:	00405f40 	.word	0x00405f40

00400444 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  400444:	4a02      	ldr	r2, [pc, #8]	; (400450 <SysTick_Handler+0xc>)
  400446:	6813      	ldr	r3, [r2, #0]
  400448:	3301      	adds	r3, #1
  40044a:	6013      	str	r3, [r2, #0]
  40044c:	4770      	bx	lr
  40044e:	bf00      	nop
  400450:	20000208 	.word	0x20000208

00400454 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400454:	4b05      	ldr	r3, [pc, #20]	; (40046c <cph_millis_init+0x18>)
  400456:	4a06      	ldr	r2, [pc, #24]	; (400470 <cph_millis_init+0x1c>)
  400458:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40045a:	21f0      	movs	r1, #240	; 0xf0
  40045c:	4a05      	ldr	r2, [pc, #20]	; (400474 <cph_millis_init+0x20>)
  40045e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400462:	2200      	movs	r2, #0
  400464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400466:	2207      	movs	r2, #7
  400468:	601a      	str	r2, [r3, #0]
  40046a:	4770      	bx	lr
  40046c:	e000e010 	.word	0xe000e010
  400470:	0001d4bf 	.word	0x0001d4bf
  400474:	e000ed00 	.word	0xe000ed00

00400478 <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  400478:	b500      	push	{lr}
  40047a:	b089      	sub	sp, #36	; 0x24
  40047c:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  400480:	2368      	movs	r3, #104	; 0x68
  400482:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  400486:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  40048a:	2301      	movs	r3, #1
  40048c:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  40048e:	f10d 0207 	add.w	r2, sp, #7
  400492:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  400494:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  400496:	a903      	add	r1, sp, #12
  400498:	4806      	ldr	r0, [pc, #24]	; (4004b4 <write_register8+0x3c>)
  40049a:	f000 ffc7 	bl	40142c <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  40049e:	b910      	cbnz	r0, 4004a6 <write_register8+0x2e>
        puts("write_register: success\r\n");
  4004a0:	4805      	ldr	r0, [pc, #20]	; (4004b8 <write_register8+0x40>)
  4004a2:	f002 fd8b 	bl	402fbc <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  4004a6:	4805      	ldr	r0, [pc, #20]	; (4004bc <write_register8+0x44>)
  4004a8:	f005 ffe2 	bl	406470 <__portable_delay_cycles_veneer>
}
  4004ac:	b009      	add	sp, #36	; 0x24
  4004ae:	f85d fb04 	ldr.w	pc, [sp], #4
  4004b2:	bf00      	nop
  4004b4:	40018000 	.word	0x40018000
  4004b8:	00405f6c 	.word	0x00405f6c
  4004bc:	00014ed3 	.word	0x00014ed3

004004c0 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  4004c0:	b510      	push	{r4, lr}
  4004c2:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4004c4:	4b0e      	ldr	r3, [pc, #56]	; (400500 <read_register8+0x40>)
  4004c6:	2200      	movs	r2, #0
  4004c8:	601a      	str	r2, [r3, #0]
  4004ca:	605a      	str	r2, [r3, #4]
  4004cc:	609a      	str	r2, [r3, #8]
  4004ce:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4004d0:	2268      	movs	r2, #104	; 0x68
  4004d2:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  4004d6:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  4004da:	2201      	movs	r2, #1
  4004dc:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  4004de:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  4004e0:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  4004e2:	a901      	add	r1, sp, #4
  4004e4:	4807      	ldr	r0, [pc, #28]	; (400504 <read_register8+0x44>)
  4004e6:	f000 ff39 	bl	40135c <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4004ea:	b910      	cbnz	r0, 4004f2 <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  4004ec:	4b04      	ldr	r3, [pc, #16]	; (400500 <read_register8+0x40>)
  4004ee:	781c      	ldrb	r4, [r3, #0]
  4004f0:	e000      	b.n	4004f4 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  4004f2:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  4004f4:	4804      	ldr	r0, [pc, #16]	; (400508 <read_register8+0x48>)
  4004f6:	f005 ffbb 	bl	406470 <__portable_delay_cycles_veneer>

    return value;
}
  4004fa:	4620      	mov	r0, r4
  4004fc:	b006      	add	sp, #24
  4004fe:	bd10      	pop	{r4, pc}
  400500:	2000020c 	.word	0x2000020c
  400504:	40018000 	.word	0x40018000
  400508:	00014ed3 	.word	0x00014ed3

0040050c <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  40050c:	b510      	push	{r4, lr}
  40050e:	b086      	sub	sp, #24
  400510:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400512:	4b0c      	ldr	r3, [pc, #48]	; (400544 <read_bytes+0x38>)
  400514:	2100      	movs	r1, #0
  400516:	6019      	str	r1, [r3, #0]
  400518:	6059      	str	r1, [r3, #4]
  40051a:	6099      	str	r1, [r3, #8]
  40051c:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  40051e:	2368      	movs	r3, #104	; 0x68
  400520:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  400524:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400528:	2301      	movs	r3, #1
  40052a:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  40052c:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  40052e:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400530:	a901      	add	r1, sp, #4
  400532:	4805      	ldr	r0, [pc, #20]	; (400548 <read_bytes+0x3c>)
  400534:	f000 ff12 	bl	40135c <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400538:	4804      	ldr	r0, [pc, #16]	; (40054c <read_bytes+0x40>)
  40053a:	f005 ff99 	bl	406470 <__portable_delay_cycles_veneer>

    return length;
}
  40053e:	b2e0      	uxtb	r0, r4
  400540:	b006      	add	sp, #24
  400542:	bd10      	pop	{r4, pc}
  400544:	2000020c 	.word	0x2000020c
  400548:	40018000 	.word	0x40018000
  40054c:	00014ed3 	.word	0x00014ed3

00400550 <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  400550:	b570      	push	{r4, r5, r6, lr}
  400552:	4604      	mov	r4, r0
  400554:	460d      	mov	r5, r1
  400556:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400558:	f7ff ffb2 	bl	4004c0 <read_register8>

    if (state) {
  40055c:	b126      	cbz	r6, 400568 <write_register_bit+0x18>
        value |= (1 << pos);
  40055e:	2101      	movs	r1, #1
  400560:	40a9      	lsls	r1, r5
  400562:	4301      	orrs	r1, r0
  400564:	b2c9      	uxtb	r1, r1
  400566:	e004      	b.n	400572 <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400568:	2101      	movs	r1, #1
  40056a:	40a9      	lsls	r1, r5
  40056c:	ea20 0101 	bic.w	r1, r0, r1
  400570:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  400572:	4620      	mov	r0, r4
  400574:	f7ff ff80 	bl	400478 <write_register8>
  400578:	bd70      	pop	{r4, r5, r6, pc}
  40057a:	bf00      	nop

0040057c <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  40057c:	b510      	push	{r4, lr}
  40057e:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  400580:	f7ff ff9e 	bl	4004c0 <read_register8>
    return ((value >> pos) & 1);
  400584:	4120      	asrs	r0, r4
}
  400586:	f000 0001 	and.w	r0, r0, #1
  40058a:	bd10      	pop	{r4, pc}

0040058c <mpu_init>:

bool mpu_init(void)
{
  40058c:	b500      	push	{lr}
  40058e:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  400590:	4b0d      	ldr	r3, [pc, #52]	; (4005c8 <mpu_init+0x3c>)
  400592:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  400594:	4b0d      	ldr	r3, [pc, #52]	; (4005cc <mpu_init+0x40>)
  400596:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  400598:	a901      	add	r1, sp, #4
  40059a:	480d      	ldr	r0, [pc, #52]	; (4005d0 <mpu_init+0x44>)
  40059c:	f000 feae 	bl	4012fc <twi_master_init>
  4005a0:	b138      	cbz	r0, 4005b2 <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  4005a2:	480c      	ldr	r0, [pc, #48]	; (4005d4 <mpu_init+0x48>)
  4005a4:	f002 fd0a 	bl	402fbc <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005a8:	480b      	ldr	r0, [pc, #44]	; (4005d8 <mpu_init+0x4c>)
  4005aa:	f005 ff61 	bl	406470 <__portable_delay_cycles_veneer>
        return false;
  4005ae:	2000      	movs	r0, #0
  4005b0:	e006      	b.n	4005c0 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  4005b2:	480a      	ldr	r0, [pc, #40]	; (4005dc <mpu_init+0x50>)
  4005b4:	f002 fd02 	bl	402fbc <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005b8:	4807      	ldr	r0, [pc, #28]	; (4005d8 <mpu_init+0x4c>)
  4005ba:	f005 ff59 	bl	406470 <__portable_delay_cycles_veneer>
        return true;
  4005be:	2001      	movs	r0, #1
    }
    
}
  4005c0:	b005      	add	sp, #20
  4005c2:	f85d fb04 	ldr.w	pc, [sp], #4
  4005c6:	bf00      	nop
  4005c8:	07270e00 	.word	0x07270e00
  4005cc:	00061a80 	.word	0x00061a80
  4005d0:	40018000 	.word	0x40018000
  4005d4:	00405f88 	.word	0x00405f88
  4005d8:	00014ed3 	.word	0x00014ed3
  4005dc:	00405fa4 	.word	0x00405fa4

004005e0 <mpu_probe>:

bool mpu_probe(void)
{
  4005e0:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  4005e2:	2168      	movs	r1, #104	; 0x68
  4005e4:	4809      	ldr	r0, [pc, #36]	; (40060c <mpu_probe+0x2c>)
  4005e6:	f000 ff63 	bl	4014b0 <twi_probe>
  4005ea:	b138      	cbz	r0, 4005fc <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  4005ec:	4808      	ldr	r0, [pc, #32]	; (400610 <mpu_probe+0x30>)
  4005ee:	f002 fce5 	bl	402fbc <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005f2:	4808      	ldr	r0, [pc, #32]	; (400614 <mpu_probe+0x34>)
  4005f4:	f005 ff3c 	bl	406470 <__portable_delay_cycles_veneer>
        return false;
  4005f8:	2000      	movs	r0, #0
  4005fa:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  4005fc:	4806      	ldr	r0, [pc, #24]	; (400618 <mpu_probe+0x38>)
  4005fe:	f002 fcdd 	bl	402fbc <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400602:	4804      	ldr	r0, [pc, #16]	; (400614 <mpu_probe+0x34>)
  400604:	f005 ff34 	bl	406470 <__portable_delay_cycles_veneer>
        return true;
  400608:	2001      	movs	r0, #1
    }
}
  40060a:	bd08      	pop	{r3, pc}
  40060c:	40018000 	.word	0x40018000
  400610:	00405fc0 	.word	0x00405fc0
  400614:	00014ed3 	.word	0x00014ed3
  400618:	00405fd4 	.word	0x00405fd4

0040061c <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  40061c:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  40061e:	2075      	movs	r0, #117	; 0x75
  400620:	f7ff ff4e 	bl	4004c0 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400624:	bd08      	pop	{r3, pc}
  400626:	bf00      	nop

00400628 <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400628:	b510      	push	{r4, lr}
  40062a:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  40062c:	206b      	movs	r0, #107	; 0x6b
  40062e:	f7ff ff47 	bl	4004c0 <read_register8>
    value &= 0b11111000; // mask
  400632:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  400636:	4321      	orrs	r1, r4
  400638:	206b      	movs	r0, #107	; 0x6b
  40063a:	f7ff ff1d 	bl	400478 <write_register8>
  40063e:	bd10      	pop	{r4, pc}

00400640 <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  400640:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400642:	206b      	movs	r0, #107	; 0x6b
  400644:	f7ff ff3c 	bl	4004c0 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400648:	f000 0007 	and.w	r0, r0, #7
  40064c:	bd08      	pop	{r3, pc}
  40064e:	bf00      	nop

00400650 <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  400650:	b510      	push	{r4, lr}
  400652:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400654:	2803      	cmp	r0, #3
  400656:	d812      	bhi.n	40067e <mpu_set_gyro_scale+0x2e>
  400658:	e8df f000 	tbb	[pc, r0]
  40065c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400660:	4a0d      	ldr	r2, [pc, #52]	; (400698 <mpu_set_gyro_scale+0x48>)
  400662:	4b0e      	ldr	r3, [pc, #56]	; (40069c <mpu_set_gyro_scale+0x4c>)
  400664:	601a      	str	r2, [r3, #0]
            break;
  400666:	e00a      	b.n	40067e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400668:	4a0d      	ldr	r2, [pc, #52]	; (4006a0 <mpu_set_gyro_scale+0x50>)
  40066a:	4b0c      	ldr	r3, [pc, #48]	; (40069c <mpu_set_gyro_scale+0x4c>)
  40066c:	601a      	str	r2, [r3, #0]
            break;
  40066e:	e006      	b.n	40067e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400670:	4a0c      	ldr	r2, [pc, #48]	; (4006a4 <mpu_set_gyro_scale+0x54>)
  400672:	4b0a      	ldr	r3, [pc, #40]	; (40069c <mpu_set_gyro_scale+0x4c>)
  400674:	601a      	str	r2, [r3, #0]
            break;
  400676:	e002      	b.n	40067e <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  400678:	4a0b      	ldr	r2, [pc, #44]	; (4006a8 <mpu_set_gyro_scale+0x58>)
  40067a:	4b08      	ldr	r3, [pc, #32]	; (40069c <mpu_set_gyro_scale+0x4c>)
  40067c:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  40067e:	201b      	movs	r0, #27
  400680:	f7ff ff1e 	bl	4004c0 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  400684:	f020 0018 	bic.w	r0, r0, #24
  400688:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  40068c:	b2c9      	uxtb	r1, r1
  40068e:	201b      	movs	r0, #27
  400690:	f7ff fef2 	bl	400478 <write_register8>
  400694:	bd10      	pop	{r4, pc}
  400696:	bf00      	nop
  400698:	3bfa1e3f 	.word	0x3bfa1e3f
  40069c:	20000230 	.word	0x20000230
  4006a0:	3c7a2270 	.word	0x3c7a2270
  4006a4:	3cf9bfdf 	.word	0x3cf9bfdf
  4006a8:	3d79c0ec 	.word	0x3d79c0ec

004006ac <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  4006ac:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  4006ae:	201b      	movs	r0, #27
  4006b0:	f7ff ff06 	bl	4004c0 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  4006b4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  4006b8:	bd08      	pop	{r3, pc}
  4006ba:	bf00      	nop

004006bc <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  4006bc:	b510      	push	{r4, lr}
  4006be:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  4006c0:	2803      	cmp	r0, #3
  4006c2:	d812      	bhi.n	4006ea <mpu_set_accel_range+0x2e>
  4006c4:	e8df f000 	tbb	[pc, r0]
  4006c8:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  4006cc:	4a0d      	ldr	r2, [pc, #52]	; (400704 <mpu_set_accel_range+0x48>)
  4006ce:	4b0e      	ldr	r3, [pc, #56]	; (400708 <mpu_set_accel_range+0x4c>)
  4006d0:	601a      	str	r2, [r3, #0]
            break;
  4006d2:	e00a      	b.n	4006ea <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  4006d4:	4a0d      	ldr	r2, [pc, #52]	; (40070c <mpu_set_accel_range+0x50>)
  4006d6:	4b0c      	ldr	r3, [pc, #48]	; (400708 <mpu_set_accel_range+0x4c>)
  4006d8:	601a      	str	r2, [r3, #0]
            break;   
  4006da:	e006      	b.n	4006ea <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  4006dc:	4a0c      	ldr	r2, [pc, #48]	; (400710 <mpu_set_accel_range+0x54>)
  4006de:	4b0a      	ldr	r3, [pc, #40]	; (400708 <mpu_set_accel_range+0x4c>)
  4006e0:	601a      	str	r2, [r3, #0]
            break;   
  4006e2:	e002      	b.n	4006ea <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  4006e4:	4a0b      	ldr	r2, [pc, #44]	; (400714 <mpu_set_accel_range+0x58>)
  4006e6:	4b08      	ldr	r3, [pc, #32]	; (400708 <mpu_set_accel_range+0x4c>)
  4006e8:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  4006ea:	201c      	movs	r0, #28
  4006ec:	f7ff fee8 	bl	4004c0 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  4006f0:	f020 0018 	bic.w	r0, r0, #24
  4006f4:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  4006f8:	b2c9      	uxtb	r1, r1
  4006fa:	201c      	movs	r0, #28
  4006fc:	f7ff febc 	bl	400478 <write_register8>
  400700:	bd10      	pop	{r4, pc}
  400702:	bf00      	nop
  400704:	387fda40 	.word	0x387fda40
  400708:	2000021c 	.word	0x2000021c
  40070c:	38ffda40 	.word	0x38ffda40
  400710:	397fda40 	.word	0x397fda40
  400714:	39fff518 	.word	0x39fff518

00400718 <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400718:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  40071a:	4602      	mov	r2, r0
  40071c:	2106      	movs	r1, #6
  40071e:	206b      	movs	r0, #107	; 0x6b
  400720:	f7ff ff16 	bl	400550 <write_register_bit>
  400724:	bd08      	pop	{r3, pc}
  400726:	bf00      	nop

00400728 <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400728:	b538      	push	{r3, r4, r5, lr}
  40072a:	4605      	mov	r5, r0
  40072c:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  40072e:	4a11      	ldr	r2, [pc, #68]	; (400774 <mpu_begin+0x4c>)
  400730:	2300      	movs	r3, #0
  400732:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400734:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400736:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400738:	2100      	movs	r1, #0
  40073a:	4a0f      	ldr	r2, [pc, #60]	; (400778 <mpu_begin+0x50>)
  40073c:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  40073e:	4a0f      	ldr	r2, [pc, #60]	; (40077c <mpu_begin+0x54>)
  400740:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400742:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400744:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400746:	4a0e      	ldr	r2, [pc, #56]	; (400780 <mpu_begin+0x58>)
  400748:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  40074a:	f7ff ff67 	bl	40061c <mpu_who_am_i>
  40074e:	2868      	cmp	r0, #104	; 0x68
  400750:	d10d      	bne.n	40076e <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400752:	2001      	movs	r0, #1
  400754:	f7ff ff68 	bl	400628 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400758:	4628      	mov	r0, r5
  40075a:	f7ff ff79 	bl	400650 <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  40075e:	4620      	mov	r0, r4
  400760:	f7ff ffac 	bl	4006bc <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400764:	2000      	movs	r0, #0
  400766:	f7ff ffd7 	bl	400718 <mpu_set_sleep_enabled>

    return true;
  40076a:	2001      	movs	r0, #1
  40076c:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  40076e:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400770:	bd38      	pop	{r3, r4, r5, pc}
  400772:	bf00      	nop
  400774:	20000350 	.word	0x20000350
  400778:	20000234 	.word	0x20000234
  40077c:	2000031c 	.word	0x2000031c
  400780:	20000238 	.word	0x20000238

00400784 <mpu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400784:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  400786:	2106      	movs	r1, #6
  400788:	206b      	movs	r0, #107	; 0x6b
  40078a:	f7ff fef7 	bl	40057c <read_register_bit>
}
  40078e:	bd08      	pop	{r3, pc}

00400790 <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  400790:	b570      	push	{r4, r5, r6, lr}
  400792:	b082      	sub	sp, #8
  400794:	4606      	mov	r6, r0
  400796:	460d      	mov	r5, r1
  400798:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  40079a:	2300      	movs	r3, #0
  40079c:	9300      	str	r3, [sp, #0]
  40079e:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  4007a2:	466a      	mov	r2, sp
  4007a4:	2106      	movs	r1, #6
  4007a6:	2043      	movs	r0, #67	; 0x43
  4007a8:	f7ff feb0 	bl	40050c <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  4007ac:	f89d 2000 	ldrb.w	r2, [sp]
  4007b0:	f89d 3001 	ldrb.w	r3, [sp, #1]
  4007b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007b8:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  4007ba:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4007be:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4007c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007c6:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  4007c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4007cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4007d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007d4:	8023      	strh	r3, [r4, #0]

}
  4007d6:	b002      	add	sp, #8
  4007d8:	bd70      	pop	{r4, r5, r6, pc}
  4007da:	bf00      	nop

004007dc <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  4007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  4007de:	4d0c      	ldr	r5, [pc, #48]	; (400810 <mpu_read_raw_gyro+0x34>)
  4007e0:	4e0c      	ldr	r6, [pc, #48]	; (400814 <mpu_read_raw_gyro+0x38>)
  4007e2:	4f0d      	ldr	r7, [pc, #52]	; (400818 <mpu_read_raw_gyro+0x3c>)
  4007e4:	462a      	mov	r2, r5
  4007e6:	4631      	mov	r1, r6
  4007e8:	4638      	mov	r0, r7
  4007ea:	f7ff ffd1 	bl	400790 <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  4007ee:	4c0b      	ldr	r4, [pc, #44]	; (40081c <mpu_read_raw_gyro+0x40>)
  4007f0:	f9b7 0000 	ldrsh.w	r0, [r7]
  4007f4:	f005 f934 	bl	405a60 <__aeabi_i2f>
  4007f8:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  4007fa:	f9b6 0000 	ldrsh.w	r0, [r6]
  4007fe:	f005 f92f 	bl	405a60 <__aeabi_i2f>
  400802:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400804:	f9b5 0000 	ldrsh.w	r0, [r5]
  400808:	f005 f92a 	bl	405a60 <__aeabi_i2f>
  40080c:	60a0      	str	r0, [r4, #8]
  40080e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400810:	20000340 	.word	0x20000340
  400814:	20000314 	.word	0x20000314
  400818:	2000035c 	.word	0x2000035c
  40081c:	20000308 	.word	0x20000308

00400820 <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400824:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400826:	f7ff ffd9 	bl	4007dc <mpu_read_raw_gyro>

    if (use_calibrate) {
  40082a:	4b3d      	ldr	r3, [pc, #244]	; (400920 <mpu_read_normalized_gyro+0x100>)
  40082c:	781b      	ldrb	r3, [r3, #0]
  40082e:	b30b      	cbz	r3, 400874 <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400830:	4b3c      	ldr	r3, [pc, #240]	; (400924 <mpu_read_normalized_gyro+0x104>)
  400832:	681e      	ldr	r6, [r3, #0]
  400834:	4d3c      	ldr	r5, [pc, #240]	; (400928 <mpu_read_normalized_gyro+0x108>)
  400836:	4f3d      	ldr	r7, [pc, #244]	; (40092c <mpu_read_normalized_gyro+0x10c>)
  400838:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400938 <mpu_read_normalized_gyro+0x118>
  40083c:	f8d8 1000 	ldr.w	r1, [r8]
  400840:	6838      	ldr	r0, [r7, #0]
  400842:	f005 f857 	bl	4058f4 <__aeabi_fsub>
  400846:	4631      	mov	r1, r6
  400848:	f005 f95e 	bl	405b08 <__aeabi_fmul>
  40084c:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  40084e:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400852:	6878      	ldr	r0, [r7, #4]
  400854:	f005 f84e 	bl	4058f4 <__aeabi_fsub>
  400858:	4631      	mov	r1, r6
  40085a:	f005 f955 	bl	405b08 <__aeabi_fmul>
  40085e:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400860:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400864:	68b8      	ldr	r0, [r7, #8]
  400866:	f005 f845 	bl	4058f4 <__aeabi_fsub>
  40086a:	4631      	mov	r1, r6
  40086c:	f005 f94c 	bl	405b08 <__aeabi_fmul>
  400870:	60a8      	str	r0, [r5, #8]
  400872:	e012      	b.n	40089a <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400874:	4b2b      	ldr	r3, [pc, #172]	; (400924 <mpu_read_normalized_gyro+0x104>)
  400876:	681f      	ldr	r7, [r3, #0]
  400878:	4d2b      	ldr	r5, [pc, #172]	; (400928 <mpu_read_normalized_gyro+0x108>)
  40087a:	4e2c      	ldr	r6, [pc, #176]	; (40092c <mpu_read_normalized_gyro+0x10c>)
  40087c:	4639      	mov	r1, r7
  40087e:	6830      	ldr	r0, [r6, #0]
  400880:	f005 f942 	bl	405b08 <__aeabi_fmul>
  400884:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400886:	4639      	mov	r1, r7
  400888:	6870      	ldr	r0, [r6, #4]
  40088a:	f005 f93d 	bl	405b08 <__aeabi_fmul>
  40088e:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400890:	4639      	mov	r1, r7
  400892:	68b0      	ldr	r0, [r6, #8]
  400894:	f005 f938 	bl	405b08 <__aeabi_fmul>
  400898:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  40089a:	2100      	movs	r1, #0
  40089c:	4b24      	ldr	r3, [pc, #144]	; (400930 <mpu_read_normalized_gyro+0x110>)
  40089e:	6818      	ldr	r0, [r3, #0]
  4008a0:	f005 fac6 	bl	405e30 <__aeabi_fcmpeq>
  4008a4:	2800      	cmp	r0, #0
  4008a6:	d132      	bne.n	40090e <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  4008a8:	4b1f      	ldr	r3, [pc, #124]	; (400928 <mpu_read_normalized_gyro+0x108>)
  4008aa:	6818      	ldr	r0, [r3, #0]
  4008ac:	f005 faf2 	bl	405e94 <__aeabi_f2iz>
  4008b0:	2800      	cmp	r0, #0
  4008b2:	bfb8      	it	lt
  4008b4:	4240      	neglt	r0, r0
  4008b6:	f005 f8d3 	bl	405a60 <__aeabi_i2f>
  4008ba:	4b1e      	ldr	r3, [pc, #120]	; (400934 <mpu_read_normalized_gyro+0x114>)
  4008bc:	6819      	ldr	r1, [r3, #0]
  4008be:	f005 fac1 	bl	405e44 <__aeabi_fcmplt>
  4008c2:	b110      	cbz	r0, 4008ca <mpu_read_normalized_gyro+0xaa>
  4008c4:	2200      	movs	r2, #0
  4008c6:	4b18      	ldr	r3, [pc, #96]	; (400928 <mpu_read_normalized_gyro+0x108>)
  4008c8:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  4008ca:	4b17      	ldr	r3, [pc, #92]	; (400928 <mpu_read_normalized_gyro+0x108>)
  4008cc:	6858      	ldr	r0, [r3, #4]
  4008ce:	f005 fae1 	bl	405e94 <__aeabi_f2iz>
  4008d2:	2800      	cmp	r0, #0
  4008d4:	bfb8      	it	lt
  4008d6:	4240      	neglt	r0, r0
  4008d8:	f005 f8c2 	bl	405a60 <__aeabi_i2f>
  4008dc:	4b15      	ldr	r3, [pc, #84]	; (400934 <mpu_read_normalized_gyro+0x114>)
  4008de:	6859      	ldr	r1, [r3, #4]
  4008e0:	f005 fab0 	bl	405e44 <__aeabi_fcmplt>
  4008e4:	b110      	cbz	r0, 4008ec <mpu_read_normalized_gyro+0xcc>
  4008e6:	2200      	movs	r2, #0
  4008e8:	4b0f      	ldr	r3, [pc, #60]	; (400928 <mpu_read_normalized_gyro+0x108>)
  4008ea:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  4008ec:	4b0e      	ldr	r3, [pc, #56]	; (400928 <mpu_read_normalized_gyro+0x108>)
  4008ee:	6898      	ldr	r0, [r3, #8]
  4008f0:	f005 fad0 	bl	405e94 <__aeabi_f2iz>
  4008f4:	2800      	cmp	r0, #0
  4008f6:	bfb8      	it	lt
  4008f8:	4240      	neglt	r0, r0
  4008fa:	f005 f8b1 	bl	405a60 <__aeabi_i2f>
  4008fe:	4b0d      	ldr	r3, [pc, #52]	; (400934 <mpu_read_normalized_gyro+0x114>)
  400900:	6899      	ldr	r1, [r3, #8]
  400902:	f005 fa9f 	bl	405e44 <__aeabi_fcmplt>
  400906:	b110      	cbz	r0, 40090e <mpu_read_normalized_gyro+0xee>
  400908:	2200      	movs	r2, #0
  40090a:	4b07      	ldr	r3, [pc, #28]	; (400928 <mpu_read_normalized_gyro+0x108>)
  40090c:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  40090e:	4b06      	ldr	r3, [pc, #24]	; (400928 <mpu_read_normalized_gyro+0x108>)
  400910:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400918:	4620      	mov	r0, r4
  40091a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40091e:	bf00      	nop
  400920:	20000234 	.word	0x20000234
  400924:	20000230 	.word	0x20000230
  400928:	20000360 	.word	0x20000360
  40092c:	20000308 	.word	0x20000308
  400930:	20000238 	.word	0x20000238
  400934:	2000031c 	.word	0x2000031c
  400938:	20000350 	.word	0x20000350

0040093c <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  40093c:	b570      	push	{r4, r5, r6, lr}
  40093e:	b082      	sub	sp, #8
  400940:	4606      	mov	r6, r0
  400942:	460d      	mov	r5, r1
  400944:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400946:	2300      	movs	r3, #0
  400948:	9300      	str	r3, [sp, #0]
  40094a:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  40094e:	466a      	mov	r2, sp
  400950:	2106      	movs	r1, #6
  400952:	203b      	movs	r0, #59	; 0x3b
  400954:	f7ff fdda 	bl	40050c <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400958:	f89d 2000 	ldrb.w	r2, [sp]
  40095c:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400960:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400964:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400966:	f89d 2002 	ldrb.w	r2, [sp, #2]
  40096a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40096e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400972:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400974:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400978:	f89d 3005 	ldrb.w	r3, [sp, #5]
  40097c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400980:	8023      	strh	r3, [r4, #0]
}
  400982:	b002      	add	sp, #8
  400984:	bd70      	pop	{r4, r5, r6, pc}
  400986:	bf00      	nop

00400988 <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  400988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  40098a:	4d0c      	ldr	r5, [pc, #48]	; (4009bc <mpu_read_raw_acceleration+0x34>)
  40098c:	4e0c      	ldr	r6, [pc, #48]	; (4009c0 <mpu_read_raw_acceleration+0x38>)
  40098e:	4f0d      	ldr	r7, [pc, #52]	; (4009c4 <mpu_read_raw_acceleration+0x3c>)
  400990:	462a      	mov	r2, r5
  400992:	4631      	mov	r1, r6
  400994:	4638      	mov	r0, r7
  400996:	f7ff ffd1 	bl	40093c <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  40099a:	4c0b      	ldr	r4, [pc, #44]	; (4009c8 <mpu_read_raw_acceleration+0x40>)
  40099c:	f9b7 0000 	ldrsh.w	r0, [r7]
  4009a0:	f005 f85e 	bl	405a60 <__aeabi_i2f>
  4009a4:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  4009a6:	f9b6 0000 	ldrsh.w	r0, [r6]
  4009aa:	f005 f859 	bl	405a60 <__aeabi_i2f>
  4009ae:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  4009b0:	f9b5 0000 	ldrsh.w	r0, [r5]
  4009b4:	f005 f854 	bl	405a60 <__aeabi_i2f>
  4009b8:	60a0      	str	r0, [r4, #8]
  4009ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009bc:	20000316 	.word	0x20000316
  4009c0:	2000035e 	.word	0x2000035e
  4009c4:	20000318 	.word	0x20000318
  4009c8:	20000344 	.word	0x20000344

004009cc <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  4009cc:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  4009ce:	f7ff ffdb 	bl	400988 <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  4009d2:	4b0e      	ldr	r3, [pc, #56]	; (400a0c <mpu_read_normalized_acceleration+0x40>)
  4009d4:	681d      	ldr	r5, [r3, #0]
  4009d6:	4c0e      	ldr	r4, [pc, #56]	; (400a10 <mpu_read_normalized_acceleration+0x44>)
  4009d8:	4e0e      	ldr	r6, [pc, #56]	; (400a14 <mpu_read_normalized_acceleration+0x48>)
  4009da:	6831      	ldr	r1, [r6, #0]
  4009dc:	4628      	mov	r0, r5
  4009de:	f005 f893 	bl	405b08 <__aeabi_fmul>
  4009e2:	490d      	ldr	r1, [pc, #52]	; (400a18 <mpu_read_normalized_acceleration+0x4c>)
  4009e4:	f005 f890 	bl	405b08 <__aeabi_fmul>
  4009e8:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  4009ea:	6871      	ldr	r1, [r6, #4]
  4009ec:	4628      	mov	r0, r5
  4009ee:	f005 f88b 	bl	405b08 <__aeabi_fmul>
  4009f2:	4909      	ldr	r1, [pc, #36]	; (400a18 <mpu_read_normalized_acceleration+0x4c>)
  4009f4:	f005 f888 	bl	405b08 <__aeabi_fmul>
  4009f8:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  4009fa:	68b1      	ldr	r1, [r6, #8]
  4009fc:	4628      	mov	r0, r5
  4009fe:	f005 f883 	bl	405b08 <__aeabi_fmul>
  400a02:	4905      	ldr	r1, [pc, #20]	; (400a18 <mpu_read_normalized_acceleration+0x4c>)
  400a04:	f005 f880 	bl	405b08 <__aeabi_fmul>
  400a08:	60a0      	str	r0, [r4, #8]
  400a0a:	bd70      	pop	{r4, r5, r6, pc}
  400a0c:	2000021c 	.word	0x2000021c
  400a10:	20000334 	.word	0x20000334
  400a14:	20000344 	.word	0x20000344
  400a18:	411ce80a 	.word	0x411ce80a

00400a1c <mpu_log_settings>:

    return norm_accel;
}

void mpu_log_settings(void)
{
  400a1c:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400a1e:	f7ff fdfd 	bl	40061c <mpu_who_am_i>
  400a22:	4601      	mov	r1, r0
  400a24:	482b      	ldr	r0, [pc, #172]	; (400ad4 <mpu_log_settings+0xb8>)
  400a26:	f002 fa57 	bl	402ed8 <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400a2a:	f7ff feab 	bl	400784 <mpu_get_sleep_enabled>
  400a2e:	492a      	ldr	r1, [pc, #168]	; (400ad8 <mpu_log_settings+0xbc>)
  400a30:	4a2a      	ldr	r2, [pc, #168]	; (400adc <mpu_log_settings+0xc0>)
  400a32:	2800      	cmp	r0, #0
  400a34:	bf18      	it	ne
  400a36:	4611      	movne	r1, r2
  400a38:	4829      	ldr	r0, [pc, #164]	; (400ae0 <mpu_log_settings+0xc4>)
  400a3a:	f002 fa4d 	bl	402ed8 <iprintf>
    printf("Clock Source: ");
  400a3e:	4829      	ldr	r0, [pc, #164]	; (400ae4 <mpu_log_settings+0xc8>)
  400a40:	f002 fa4a 	bl	402ed8 <iprintf>
    switch (mpu_get_clock_source()) {
  400a44:	f7ff fdfc 	bl	400640 <mpu_get_clock_source>
  400a48:	b110      	cbz	r0, 400a50 <mpu_log_settings+0x34>
  400a4a:	2801      	cmp	r0, #1
  400a4c:	d004      	beq.n	400a58 <mpu_log_settings+0x3c>
  400a4e:	e006      	b.n	400a5e <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400a50:	4825      	ldr	r0, [pc, #148]	; (400ae8 <mpu_log_settings+0xcc>)
  400a52:	f002 fa41 	bl	402ed8 <iprintf>
        break;
  400a56:	e002      	b.n	400a5e <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400a58:	4824      	ldr	r0, [pc, #144]	; (400aec <mpu_log_settings+0xd0>)
  400a5a:	f002 fa3d 	bl	402ed8 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400a5e:	4824      	ldr	r0, [pc, #144]	; (400af0 <mpu_log_settings+0xd4>)
  400a60:	f002 fa3a 	bl	402ed8 <iprintf>
        switch (mpu_get_gyro_scale()) {
  400a64:	f7ff fe22 	bl	4006ac <mpu_get_gyro_scale>
  400a68:	2803      	cmp	r0, #3
  400a6a:	d812      	bhi.n	400a92 <mpu_log_settings+0x76>
  400a6c:	e8df f000 	tbb	[pc, r0]
  400a70:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400a74:	481f      	ldr	r0, [pc, #124]	; (400af4 <mpu_log_settings+0xd8>)
  400a76:	f002 fa2f 	bl	402ed8 <iprintf>
        break;
  400a7a:	e00a      	b.n	400a92 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400a7c:	481e      	ldr	r0, [pc, #120]	; (400af8 <mpu_log_settings+0xdc>)
  400a7e:	f002 fa2b 	bl	402ed8 <iprintf>
        break;
  400a82:	e006      	b.n	400a92 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400a84:	481d      	ldr	r0, [pc, #116]	; (400afc <mpu_log_settings+0xe0>)
  400a86:	f002 fa27 	bl	402ed8 <iprintf>
        break;
  400a8a:	e002      	b.n	400a92 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400a8c:	481c      	ldr	r0, [pc, #112]	; (400b00 <mpu_log_settings+0xe4>)
  400a8e:	f002 fa23 	bl	402ed8 <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400a92:	4b1c      	ldr	r3, [pc, #112]	; (400b04 <mpu_log_settings+0xe8>)
  400a94:	7819      	ldrb	r1, [r3, #0]
  400a96:	481c      	ldr	r0, [pc, #112]	; (400b08 <mpu_log_settings+0xec>)
  400a98:	f002 fa1e 	bl	402ed8 <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400a9c:	4b1b      	ldr	r3, [pc, #108]	; (400b0c <mpu_log_settings+0xf0>)
  400a9e:	6818      	ldr	r0, [r3, #0]
  400aa0:	f004 fba8 	bl	4051f4 <__aeabi_f2d>
  400aa4:	4602      	mov	r2, r0
  400aa6:	460b      	mov	r3, r1
  400aa8:	4819      	ldr	r0, [pc, #100]	; (400b10 <mpu_log_settings+0xf4>)
  400aaa:	f002 fa15 	bl	402ed8 <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400aae:	4b19      	ldr	r3, [pc, #100]	; (400b14 <mpu_log_settings+0xf8>)
  400ab0:	6818      	ldr	r0, [r3, #0]
  400ab2:	f004 fb9f 	bl	4051f4 <__aeabi_f2d>
  400ab6:	4602      	mov	r2, r0
  400ab8:	460b      	mov	r3, r1
  400aba:	4817      	ldr	r0, [pc, #92]	; (400b18 <mpu_log_settings+0xfc>)
  400abc:	f002 fa0c 	bl	402ed8 <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400ac0:	4b16      	ldr	r3, [pc, #88]	; (400b1c <mpu_log_settings+0x100>)
  400ac2:	6818      	ldr	r0, [r3, #0]
  400ac4:	f004 fb96 	bl	4051f4 <__aeabi_f2d>
  400ac8:	4602      	mov	r2, r0
  400aca:	460b      	mov	r3, r1
  400acc:	4814      	ldr	r0, [pc, #80]	; (400b20 <mpu_log_settings+0x104>)
  400ace:	f002 fa03 	bl	402ed8 <iprintf>
  400ad2:	bd08      	pop	{r3, pc}
  400ad4:	00406000 	.word	0x00406000
  400ad8:	00405ff4 	.word	0x00405ff4
  400adc:	00405fec 	.word	0x00405fec
  400ae0:	00406010 	.word	0x00406010
  400ae4:	00406024 	.word	0x00406024
  400ae8:	00406034 	.word	0x00406034
  400aec:	00406050 	.word	0x00406050
  400af0:	00406078 	.word	0x00406078
  400af4:	00406084 	.word	0x00406084
  400af8:	00406090 	.word	0x00406090
  400afc:	0040609c 	.word	0x0040609c
  400b00:	004060a8 	.word	0x004060a8
  400b04:	20000234 	.word	0x20000234
  400b08:	004060b4 	.word	0x004060b4
  400b0c:	20000238 	.word	0x20000238
  400b10:	004060c8 	.word	0x004060c8
  400b14:	20000230 	.word	0x20000230
  400b18:	004060e0 	.word	0x004060e0
  400b1c:	2000021c 	.word	0x2000021c
  400b20:	004060f4 	.word	0x004060f4

00400b24 <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  400b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  400b26:	4604      	mov	r4, r0
  400b28:	b1d8      	cbz	r0, 400b62 <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  400b2a:	4b13      	ldr	r3, [pc, #76]	; (400b78 <mpu_set_threshold+0x54>)
  400b2c:	781b      	ldrb	r3, [r3, #0]
  400b2e:	b913      	cbnz	r3, 400b36 <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  400b30:	2032      	movs	r0, #50	; 0x32
  400b32:	f000 f829 	bl	400b88 <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  400b36:	4620      	mov	r0, r4
  400b38:	f004 ff92 	bl	405a60 <__aeabi_i2f>
  400b3c:	4607      	mov	r7, r0
  400b3e:	4d0f      	ldr	r5, [pc, #60]	; (400b7c <mpu_set_threshold+0x58>)
  400b40:	4e0f      	ldr	r6, [pc, #60]	; (400b80 <mpu_set_threshold+0x5c>)
  400b42:	4601      	mov	r1, r0
  400b44:	6830      	ldr	r0, [r6, #0]
  400b46:	f004 ffdf 	bl	405b08 <__aeabi_fmul>
  400b4a:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  400b4c:	4639      	mov	r1, r7
  400b4e:	6870      	ldr	r0, [r6, #4]
  400b50:	f004 ffda 	bl	405b08 <__aeabi_fmul>
  400b54:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  400b56:	4639      	mov	r1, r7
  400b58:	68b0      	ldr	r0, [r6, #8]
  400b5a:	f004 ffd5 	bl	405b08 <__aeabi_fmul>
  400b5e:	60a8      	str	r0, [r5, #8]
  400b60:	e004      	b.n	400b6c <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  400b62:	4b06      	ldr	r3, [pc, #24]	; (400b7c <mpu_set_threshold+0x58>)
  400b64:	2200      	movs	r2, #0
  400b66:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  400b68:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  400b6a:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  400b6c:	4620      	mov	r0, r4
  400b6e:	f004 ff73 	bl	405a58 <__aeabi_ui2f>
  400b72:	4b04      	ldr	r3, [pc, #16]	; (400b84 <mpu_set_threshold+0x60>)
  400b74:	6018      	str	r0, [r3, #0]
  400b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b78:	20000234 	.word	0x20000234
  400b7c:	2000031c 	.word	0x2000031c
  400b80:	200002fc 	.word	0x200002fc
  400b84:	20000238 	.word	0x20000238

00400b88 <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  400b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b8c:	b085      	sub	sp, #20
	use_calibrate = true;
  400b8e:	2201      	movs	r2, #1
  400b90:	4b5e      	ldr	r3, [pc, #376]	; (400d0c <mpu_calibrate_gyro+0x184>)
  400b92:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400b94:	4681      	mov	r9, r0
  400b96:	2800      	cmp	r0, #0
  400b98:	d048      	beq.n	400c2c <mpu_calibrate_gyro+0xa4>
  400b9a:	2400      	movs	r4, #0
  400b9c:	f04f 0a00 	mov.w	sl, #0
  400ba0:	46d3      	mov	fp, sl
  400ba2:	f8cd a00c 	str.w	sl, [sp, #12]
  400ba6:	f8cd a008 	str.w	sl, [sp, #8]
  400baa:	f8cd a004 	str.w	sl, [sp, #4]
  400bae:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  400bb2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 400d20 <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  400bb6:	f7ff fe11 	bl	4007dc <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  400bba:	f8d8 7000 	ldr.w	r7, [r8]
  400bbe:	4639      	mov	r1, r7
  400bc0:	9800      	ldr	r0, [sp, #0]
  400bc2:	f004 fe99 	bl	4058f8 <__addsf3>
  400bc6:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  400bc8:	f8d8 6004 	ldr.w	r6, [r8, #4]
  400bcc:	4631      	mov	r1, r6
  400bce:	9801      	ldr	r0, [sp, #4]
  400bd0:	f004 fe92 	bl	4058f8 <__addsf3>
  400bd4:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  400bd6:	f8d8 5008 	ldr.w	r5, [r8, #8]
  400bda:	4629      	mov	r1, r5
  400bdc:	9802      	ldr	r0, [sp, #8]
  400bde:	f004 fe8b 	bl	4058f8 <__addsf3>
  400be2:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  400be4:	4639      	mov	r1, r7
  400be6:	4638      	mov	r0, r7
  400be8:	f004 ff8e 	bl	405b08 <__aeabi_fmul>
  400bec:	4601      	mov	r1, r0
  400bee:	9803      	ldr	r0, [sp, #12]
  400bf0:	f004 fe82 	bl	4058f8 <__addsf3>
  400bf4:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  400bf6:	4631      	mov	r1, r6
  400bf8:	4630      	mov	r0, r6
  400bfa:	f004 ff85 	bl	405b08 <__aeabi_fmul>
  400bfe:	4601      	mov	r1, r0
  400c00:	4658      	mov	r0, fp
  400c02:	f004 fe79 	bl	4058f8 <__addsf3>
  400c06:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  400c08:	4629      	mov	r1, r5
  400c0a:	4628      	mov	r0, r5
  400c0c:	f004 ff7c 	bl	405b08 <__aeabi_fmul>
  400c10:	4601      	mov	r1, r0
  400c12:	4650      	mov	r0, sl
  400c14:	f004 fe70 	bl	4058f8 <__addsf3>
  400c18:	4682      	mov	sl, r0

		delay_ms(5);
  400c1a:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400c1e:	f005 fc27 	bl	406470 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400c22:	3401      	adds	r4, #1
  400c24:	b2e4      	uxtb	r4, r4
  400c26:	45a1      	cmp	r9, r4
  400c28:	d1c5      	bne.n	400bb6 <mpu_calibrate_gyro+0x2e>
  400c2a:	e00a      	b.n	400c42 <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  400c2c:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  400c30:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  400c32:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  400c36:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  400c3a:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  400c3e:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  400c42:	4648      	mov	r0, r9
  400c44:	f004 ff0c 	bl	405a60 <__aeabi_i2f>
  400c48:	4605      	mov	r5, r0
  400c4a:	4601      	mov	r1, r0
  400c4c:	9800      	ldr	r0, [sp, #0]
  400c4e:	f005 f80f 	bl	405c70 <__aeabi_fdiv>
  400c52:	4606      	mov	r6, r0
  400c54:	4c2e      	ldr	r4, [pc, #184]	; (400d10 <mpu_calibrate_gyro+0x188>)
  400c56:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  400c58:	4629      	mov	r1, r5
  400c5a:	9801      	ldr	r0, [sp, #4]
  400c5c:	f005 f808 	bl	405c70 <__aeabi_fdiv>
  400c60:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  400c62:	4629      	mov	r1, r5
  400c64:	9802      	ldr	r0, [sp, #8]
  400c66:	f005 f803 	bl	405c70 <__aeabi_fdiv>
  400c6a:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  400c6c:	9f03      	ldr	r7, [sp, #12]
  400c6e:	4929      	ldr	r1, [pc, #164]	; (400d14 <mpu_calibrate_gyro+0x18c>)
  400c70:	4638      	mov	r0, r7
  400c72:	f004 fffd 	bl	405c70 <__aeabi_fdiv>
  400c76:	4605      	mov	r5, r0
  400c78:	4631      	mov	r1, r6
  400c7a:	4630      	mov	r0, r6
  400c7c:	f004 ff44 	bl	405b08 <__aeabi_fmul>
  400c80:	4601      	mov	r1, r0
  400c82:	4628      	mov	r0, r5
  400c84:	f004 fe36 	bl	4058f4 <__aeabi_fsub>
  400c88:	f004 fab4 	bl	4051f4 <__aeabi_f2d>
  400c8c:	f001 f8f2 	bl	401e74 <sqrt>
  400c90:	4e21      	ldr	r6, [pc, #132]	; (400d18 <mpu_calibrate_gyro+0x190>)
  400c92:	f004 fddb 	bl	40584c <__aeabi_d2f>
  400c96:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  400c98:	6865      	ldr	r5, [r4, #4]
  400c9a:	491e      	ldr	r1, [pc, #120]	; (400d14 <mpu_calibrate_gyro+0x18c>)
  400c9c:	4658      	mov	r0, fp
  400c9e:	f004 ffe7 	bl	405c70 <__aeabi_fdiv>
  400ca2:	4607      	mov	r7, r0
  400ca4:	4629      	mov	r1, r5
  400ca6:	4628      	mov	r0, r5
  400ca8:	f004 ff2e 	bl	405b08 <__aeabi_fmul>
  400cac:	4601      	mov	r1, r0
  400cae:	4638      	mov	r0, r7
  400cb0:	f004 fe20 	bl	4058f4 <__aeabi_fsub>
  400cb4:	f004 fa9e 	bl	4051f4 <__aeabi_f2d>
  400cb8:	f001 f8dc 	bl	401e74 <sqrt>
  400cbc:	f004 fdc6 	bl	40584c <__aeabi_d2f>
  400cc0:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  400cc2:	68a4      	ldr	r4, [r4, #8]
  400cc4:	4913      	ldr	r1, [pc, #76]	; (400d14 <mpu_calibrate_gyro+0x18c>)
  400cc6:	4650      	mov	r0, sl
  400cc8:	f004 ffd2 	bl	405c70 <__aeabi_fdiv>
  400ccc:	4605      	mov	r5, r0
  400cce:	4621      	mov	r1, r4
  400cd0:	4620      	mov	r0, r4
  400cd2:	f004 ff19 	bl	405b08 <__aeabi_fmul>
  400cd6:	4601      	mov	r1, r0
  400cd8:	4628      	mov	r0, r5
  400cda:	f004 fe0b 	bl	4058f4 <__aeabi_fsub>
  400cde:	f004 fa89 	bl	4051f4 <__aeabi_f2d>
  400ce2:	f001 f8c7 	bl	401e74 <sqrt>
  400ce6:	f004 fdb1 	bl	40584c <__aeabi_d2f>
  400cea:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  400cec:	4b0b      	ldr	r3, [pc, #44]	; (400d1c <mpu_calibrate_gyro+0x194>)
  400cee:	681c      	ldr	r4, [r3, #0]
  400cf0:	2100      	movs	r1, #0
  400cf2:	4620      	mov	r0, r4
  400cf4:	f005 f8c4 	bl	405e80 <__aeabi_fcmpgt>
  400cf8:	b128      	cbz	r0, 400d06 <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  400cfa:	4620      	mov	r0, r4
  400cfc:	f005 f8f0 	bl	405ee0 <__aeabi_f2uiz>
  400d00:	b2c0      	uxtb	r0, r0
  400d02:	f7ff ff0f 	bl	400b24 <mpu_set_threshold>
	}

}
  400d06:	b005      	add	sp, #20
  400d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d0c:	20000234 	.word	0x20000234
  400d10:	20000350 	.word	0x20000350
  400d14:	42480000 	.word	0x42480000
  400d18:	200002fc 	.word	0x200002fc
  400d1c:	20000238 	.word	0x20000238
  400d20:	20000308 	.word	0x20000308

00400d24 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  400d24:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  400d26:	4b0c      	ldr	r3, [pc, #48]	; (400d58 <imu_init+0x34>)
  400d28:	2200      	movs	r2, #0
  400d2a:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  400d2c:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  400d2e:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  400d30:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  400d32:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  400d34:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  400d36:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  400d38:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  400d3a:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  400d3c:	f7ff fc26 	bl	40058c <mpu_init>
  400d40:	4604      	mov	r4, r0
  400d42:	f7ff fc4d 	bl	4005e0 <mpu_probe>
  400d46:	4020      	ands	r0, r4
  400d48:	b2c4      	uxtb	r4, r0
  400d4a:	2100      	movs	r1, #0
  400d4c:	4608      	mov	r0, r1
  400d4e:	f7ff fceb 	bl	400728 <mpu_begin>
}
  400d52:	4020      	ands	r0, r4
  400d54:	bd10      	pop	{r4, pc}
  400d56:	bf00      	nop
  400d58:	2000036c 	.word	0x2000036c

00400d5c <imu_calibrate>:

void imu_calibrate(void)
{
  400d5c:	b508      	push	{r3, lr}
    mpu_calibrate_gyro(GYRO_SAMPLES);
  400d5e:	2032      	movs	r0, #50	; 0x32
  400d60:	f7ff ff12 	bl	400b88 <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  400d64:	2000      	movs	r0, #0
  400d66:	f7ff fedd 	bl	400b24 <mpu_set_threshold>
    mpu_log_settings();
  400d6a:	f7ff fe57 	bl	400a1c <mpu_log_settings>
  400d6e:	bd08      	pop	{r3, pc}

00400d70 <imu_tick>:
}

void imu_tick(void)
{
  400d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d74:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  400d76:	4b82      	ldr	r3, [pc, #520]	; (400f80 <imu_tick+0x210>)
  400d78:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  400d7a:	a808      	add	r0, sp, #32
  400d7c:	f7ff fd50 	bl	400820 <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  400d80:	f7ff fe24 	bl	4009cc <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  400d84:	4c7f      	ldr	r4, [pc, #508]	; (400f84 <imu_tick+0x214>)
  400d86:	6820      	ldr	r0, [r4, #0]
  400d88:	f004 fa34 	bl	4051f4 <__aeabi_f2d>
  400d8c:	a37a      	add	r3, pc, #488	; (adr r3, 400f78 <imu_tick+0x208>)
  400d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400d92:	f004 fa83 	bl	40529c <__aeabi_dmul>
  400d96:	2200      	movs	r2, #0
  400d98:	4b7b      	ldr	r3, [pc, #492]	; (400f88 <imu_tick+0x218>)
  400d9a:	f004 fba9 	bl	4054f0 <__aeabi_ddiv>
  400d9e:	f004 fd55 	bl	40584c <__aeabi_d2f>
  400da2:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  400da4:	6860      	ldr	r0, [r4, #4]
  400da6:	f004 fa25 	bl	4051f4 <__aeabi_f2d>
  400daa:	a373      	add	r3, pc, #460	; (adr r3, 400f78 <imu_tick+0x208>)
  400dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  400db0:	f004 fa74 	bl	40529c <__aeabi_dmul>
  400db4:	2200      	movs	r2, #0
  400db6:	4b74      	ldr	r3, [pc, #464]	; (400f88 <imu_tick+0x218>)
  400db8:	f004 fb9a 	bl	4054f0 <__aeabi_ddiv>
  400dbc:	f004 fd46 	bl	40584c <__aeabi_d2f>
  400dc0:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  400dc2:	68a0      	ldr	r0, [r4, #8]
  400dc4:	f004 fa16 	bl	4051f4 <__aeabi_f2d>
  400dc8:	a36b      	add	r3, pc, #428	; (adr r3, 400f78 <imu_tick+0x208>)
  400dca:	e9d3 2300 	ldrd	r2, r3, [r3]
  400dce:	f004 fa65 	bl	40529c <__aeabi_dmul>
  400dd2:	2200      	movs	r2, #0
  400dd4:	4b6c      	ldr	r3, [pc, #432]	; (400f88 <imu_tick+0x218>)
  400dd6:	f004 fb8b 	bl	4054f0 <__aeabi_ddiv>
  400dda:	f004 fd37 	bl	40584c <__aeabi_d2f>
  400dde:	9007      	str	r0, [sp, #28]



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  400de0:	4c6a      	ldr	r4, [pc, #424]	; (400f8c <imu_tick+0x21c>)
  400de2:	6820      	ldr	r0, [r4, #0]
  400de4:	f004 fa06 	bl	4051f4 <__aeabi_f2d>
  400de8:	e9cd 0100 	strd	r0, r1, [sp]
  400dec:	6860      	ldr	r0, [r4, #4]
  400dee:	f004 fa01 	bl	4051f4 <__aeabi_f2d>
  400df2:	4682      	mov	sl, r0
  400df4:	468b      	mov	fp, r1
  400df6:	68a0      	ldr	r0, [r4, #8]
  400df8:	f004 f9fc 	bl	4051f4 <__aeabi_f2d>
  400dfc:	4606      	mov	r6, r0
  400dfe:	460f      	mov	r7, r1
  400e00:	4632      	mov	r2, r6
  400e02:	463b      	mov	r3, r7
  400e04:	4630      	mov	r0, r6
  400e06:	4639      	mov	r1, r7
  400e08:	f004 fa48 	bl	40529c <__aeabi_dmul>
  400e0c:	4680      	mov	r8, r0
  400e0e:	4689      	mov	r9, r1
  400e10:	4652      	mov	r2, sl
  400e12:	465b      	mov	r3, fp
  400e14:	4650      	mov	r0, sl
  400e16:	4659      	mov	r1, fp
  400e18:	f004 fa40 	bl	40529c <__aeabi_dmul>
  400e1c:	4602      	mov	r2, r0
  400e1e:	460b      	mov	r3, r1
  400e20:	4640      	mov	r0, r8
  400e22:	4649      	mov	r1, r9
  400e24:	f004 f888 	bl	404f38 <__adddf3>
  400e28:	f001 f824 	bl	401e74 <sqrt>
  400e2c:	4602      	mov	r2, r0
  400e2e:	460b      	mov	r3, r1
  400e30:	e9dd 0100 	ldrd	r0, r1, [sp]
  400e34:	f001 f81c 	bl	401e70 <atan2>
  400e38:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  400e3c:	6860      	ldr	r0, [r4, #4]
  400e3e:	f004 f9d9 	bl	4051f4 <__aeabi_f2d>
  400e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e46:	6820      	ldr	r0, [r4, #0]
  400e48:	f004 f9d4 	bl	4051f4 <__aeabi_f2d>
  400e4c:	4682      	mov	sl, r0
  400e4e:	468b      	mov	fp, r1
  400e50:	68a0      	ldr	r0, [r4, #8]
  400e52:	f004 f9cf 	bl	4051f4 <__aeabi_f2d>
  400e56:	4606      	mov	r6, r0
  400e58:	460f      	mov	r7, r1
  400e5a:	4652      	mov	r2, sl
  400e5c:	465b      	mov	r3, fp
  400e5e:	4650      	mov	r0, sl
  400e60:	4659      	mov	r1, fp
  400e62:	f004 fa1b 	bl	40529c <__aeabi_dmul>
  400e66:	4680      	mov	r8, r0
  400e68:	4689      	mov	r9, r1
  400e6a:	4632      	mov	r2, r6
  400e6c:	463b      	mov	r3, r7
  400e6e:	4630      	mov	r0, r6
  400e70:	4639      	mov	r1, r7
  400e72:	f004 fa13 	bl	40529c <__aeabi_dmul>
  400e76:	4602      	mov	r2, r0
  400e78:	460b      	mov	r3, r1
  400e7a:	4640      	mov	r0, r8
  400e7c:	4649      	mov	r1, r9
  400e7e:	f004 f85b 	bl	404f38 <__adddf3>
  400e82:	f000 fff7 	bl	401e74 <sqrt>
  400e86:	4602      	mov	r2, r0
  400e88:	460b      	mov	r3, r1
  400e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400e8e:	f000 ffef 	bl	401e70 <atan2>
  400e92:	4680      	mov	r8, r0
  400e94:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  400e96:	f8df a118 	ldr.w	sl, [pc, #280]	; 400fb0 <imu_tick+0x240>
    float dt = ((float)delta_t/1000.0f);
  400e9a:	f8da 0000 	ldr.w	r0, [sl]
  400e9e:	1a28      	subs	r0, r5, r0
  400ea0:	f004 fdda 	bl	405a58 <__aeabi_ui2f>
  400ea4:	493a      	ldr	r1, [pc, #232]	; (400f90 <imu_tick+0x220>)
  400ea6:	f004 fee3 	bl	405c70 <__aeabi_fdiv>
  400eaa:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400eac:	4601      	mov	r1, r0
  400eae:	9805      	ldr	r0, [sp, #20]
  400eb0:	f004 fe2a 	bl	405b08 <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  400eb4:	4f37      	ldr	r7, [pc, #220]	; (400f94 <imu_tick+0x224>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400eb6:	6839      	ldr	r1, [r7, #0]
  400eb8:	f004 fd1e 	bl	4058f8 <__addsf3>
  400ebc:	4936      	ldr	r1, [pc, #216]	; (400f98 <imu_tick+0x228>)
  400ebe:	f004 fe23 	bl	405b08 <__aeabi_fmul>
  400ec2:	4683      	mov	fp, r0
  400ec4:	2200      	movs	r2, #0
  400ec6:	4b30      	ldr	r3, [pc, #192]	; (400f88 <imu_tick+0x218>)
  400ec8:	4640      	mov	r0, r8
  400eca:	4649      	mov	r1, r9
  400ecc:	f004 f9e6 	bl	40529c <__aeabi_dmul>
  400ed0:	a329      	add	r3, pc, #164	; (adr r3, 400f78 <imu_tick+0x208>)
  400ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
  400ed6:	f004 fb0b 	bl	4054f0 <__aeabi_ddiv>
  400eda:	f004 fcb7 	bl	40584c <__aeabi_d2f>
  400ede:	492f      	ldr	r1, [pc, #188]	; (400f9c <imu_tick+0x22c>)
  400ee0:	f004 fe12 	bl	405b08 <__aeabi_fmul>
  400ee4:	4601      	mov	r1, r0
  400ee6:	4658      	mov	r0, fp
  400ee8:	f004 fd06 	bl	4058f8 <__addsf3>
  400eec:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400eee:	4621      	mov	r1, r4
  400ef0:	9806      	ldr	r0, [sp, #24]
  400ef2:	f004 fe09 	bl	405b08 <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  400ef6:	4e2a      	ldr	r6, [pc, #168]	; (400fa0 <imu_tick+0x230>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400ef8:	6831      	ldr	r1, [r6, #0]
  400efa:	f004 fcfd 	bl	4058f8 <__addsf3>
  400efe:	4926      	ldr	r1, [pc, #152]	; (400f98 <imu_tick+0x228>)
  400f00:	f004 fe02 	bl	405b08 <__aeabi_fmul>
  400f04:	4681      	mov	r9, r0
  400f06:	2200      	movs	r2, #0
  400f08:	4b1f      	ldr	r3, [pc, #124]	; (400f88 <imu_tick+0x218>)
  400f0a:	e9dd 0100 	ldrd	r0, r1, [sp]
  400f0e:	f004 f9c5 	bl	40529c <__aeabi_dmul>
  400f12:	a319      	add	r3, pc, #100	; (adr r3, 400f78 <imu_tick+0x208>)
  400f14:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f18:	f004 faea 	bl	4054f0 <__aeabi_ddiv>
  400f1c:	f004 fc96 	bl	40584c <__aeabi_d2f>
  400f20:	491e      	ldr	r1, [pc, #120]	; (400f9c <imu_tick+0x22c>)
  400f22:	f004 fdf1 	bl	405b08 <__aeabi_fmul>
  400f26:	4601      	mov	r1, r0
  400f28:	4648      	mov	r0, r9
  400f2a:	f004 fce5 	bl	4058f8 <__addsf3>
  400f2e:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  400f30:	4621      	mov	r1, r4
  400f32:	9807      	ldr	r0, [sp, #28]
  400f34:	f004 fde8 	bl	405b08 <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  400f38:	4c1a      	ldr	r4, [pc, #104]	; (400fa4 <imu_tick+0x234>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  400f3a:	6821      	ldr	r1, [r4, #0]
  400f3c:	f004 fcdc 	bl	4058f8 <__addsf3>
  400f40:	4915      	ldr	r1, [pc, #84]	; (400f98 <imu_tick+0x228>)
  400f42:	f004 fde1 	bl	405b08 <__aeabi_fmul>
  400f46:	2100      	movs	r1, #0
  400f48:	f004 fcd6 	bl	4058f8 <__addsf3>


    last_time_read = t_now;
  400f4c:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  400f50:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  400f54:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  400f58:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  400f5a:	4b13      	ldr	r3, [pc, #76]	; (400fa8 <imu_tick+0x238>)
  400f5c:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  400f60:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  400f64:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  400f66:	4b11      	ldr	r3, [pc, #68]	; (400fac <imu_tick+0x23c>)
  400f68:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  400f6c:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  400f70:	6098      	str	r0, [r3, #8]


  400f72:	b00d      	add	sp, #52	; 0x34
  400f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400f78:	54442d18 	.word	0x54442d18
  400f7c:	400921fb 	.word	0x400921fb
  400f80:	20000208 	.word	0x20000208
  400f84:	20000360 	.word	0x20000360
  400f88:	40668000 	.word	0x40668000
  400f8c:	20000334 	.word	0x20000334
  400f90:	447a0000 	.word	0x447a0000
  400f94:	20000224 	.word	0x20000224
  400f98:	3f75c28f 	.word	0x3f75c28f
  400f9c:	3d23d710 	.word	0x3d23d710
  400fa0:	20000228 	.word	0x20000228
  400fa4:	2000022c 	.word	0x2000022c
  400fa8:	20000390 	.word	0x20000390
  400fac:	2000036c 	.word	0x2000036c
  400fb0:	20000220 	.word	0x20000220

00400fb4 <servo_init>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void servo_init(void)
{
  400fb4:	b530      	push	{r4, r5, lr}
  400fb6:	b085      	sub	sp, #20
    
    printf("servo_init\r\n");
  400fb8:	4817      	ldr	r0, [pc, #92]	; (401018 <servo_init+0x64>)
  400fba:	f001 ff8d 	bl	402ed8 <iprintf>
    pio_configure_pin(EXT1_PIN_PWM_0, PIO_TYPE_PIO_PERIPH_B);
  400fbe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fc2:	2017      	movs	r0, #23
  400fc4:	f000 fb02 	bl	4015cc <pio_configure_pin>

	/* Enable PWM peripheral clock */

	pmc_enable_periph_clk(ID_PWM);
  400fc8:	201f      	movs	r0, #31
  400fca:	f000 fcb1 	bl	401930 <pmc_enable_periph_clk>


	/* Disable PWM channels for LEDs */

	pwm_channel_disable(PWM, EXT1_PWM_CHANNEL);
  400fce:	4c13      	ldr	r4, [pc, #76]	; (40101c <servo_init+0x68>)
  400fd0:	2100      	movs	r1, #0
  400fd2:	4620      	mov	r0, r4
  400fd4:	f000 fdf4 	bl	401bc0 <pwm_channel_disable>

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  400fd8:	4b11      	ldr	r3, [pc, #68]	; (401020 <servo_init+0x6c>)
  400fda:	9301      	str	r3, [sp, #4]
  400fdc:	2500      	movs	r5, #0
  400fde:	9502      	str	r5, [sp, #8]
  400fe0:	4b10      	ldr	r3, [pc, #64]	; (401024 <servo_init+0x70>)
  400fe2:	9303      	str	r3, [sp, #12]
        .ul_clka = PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	pwm_init(PWM, &clock_setting);
  400fe4:	a901      	add	r1, sp, #4
  400fe6:	4620      	mov	r0, r4
  400fe8:	f000 fd3e 	bl	401a68 <pwm_init>


	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_servo.alignment = PWM_ALIGN_LEFT;
  400fec:	490e      	ldr	r1, [pc, #56]	; (401028 <servo_init+0x74>)
  400fee:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	// g_pwm_channel_servo.polarity = PWM_LOW;
	g_pwm_channel_servo.polarity = PWM_HIGH;
  400ff0:	2301      	movs	r3, #1
  400ff2:	728b      	strb	r3, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_servo.ul_prescaler = PWM_CMR_CPRE_CLKA;
  400ff4:	230b      	movs	r3, #11
  400ff6:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_servo.ul_period = PWM_PERIOD_TICKS;
  400ff8:	f644 6320 	movw	r3, #20000	; 0x4e20
  400ffc:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_servo.ul_duty = PULSE_WIDTH_CENTER_TICKS;
  400ffe:	f240 53dc 	movw	r3, #1500	; 0x5dc
  401002:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_servo.channel = EXT1_PWM_CHANNEL;
  401004:	600d      	str	r5, [r1, #0]

	pwm_channel_init(PWM, &g_pwm_channel_servo);
  401006:	4620      	mov	r0, r4
  401008:	f000 fd52 	bl	401ab0 <pwm_channel_init>

    pwm_channel_enable(PWM, EXT1_PWM_CHANNEL);
  40100c:	4629      	mov	r1, r5
  40100e:	4620      	mov	r0, r4
  401010:	f000 fdd0 	bl	401bb4 <pwm_channel_enable>
	
}
  401014:	b005      	add	sp, #20
  401016:	bd30      	pop	{r4, r5, pc}
  401018:	0040610c 	.word	0x0040610c
  40101c:	40020000 	.word	0x40020000
  401020:	000f4240 	.word	0x000f4240
  401024:	07270e00 	.word	0x07270e00
  401028:	2000039c 	.word	0x2000039c

0040102c <servo_set_angle>:
		servo_set_angle(ap.imu.y_axis);
	}
}

void servo_set_angle(float angle)
{
  40102c:	b508      	push	{r3, lr}

	long duty = map(x, ANGLE_MIN, ANGLE_MAX, PWM_MIN, PWM_MAX);

	// printf("servo_duty: %d\r\n", duty);

	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, duty);
  40102e:	f004 ff31 	bl	405e94 <__aeabi_f2iz>
  401032:	305a      	adds	r0, #90	; 0x5a
  401034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401038:	fb03 f000 	mul.w	r0, r3, r0
  40103c:	4a06      	ldr	r2, [pc, #24]	; (401058 <servo_set_angle+0x2c>)
  40103e:	fb82 3200 	smull	r3, r2, r2, r0
  401042:	4402      	add	r2, r0
  401044:	17c0      	asrs	r0, r0, #31
  401046:	ebc0 12e2 	rsb	r2, r0, r2, asr #7
  40104a:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
  40104e:	4903      	ldr	r1, [pc, #12]	; (40105c <servo_set_angle+0x30>)
  401050:	4803      	ldr	r0, [pc, #12]	; (401060 <servo_set_angle+0x34>)
  401052:	f000 fda1 	bl	401b98 <pwm_channel_update_duty>
  401056:	bd08      	pop	{r3, pc}
  401058:	b60b60b7 	.word	0xb60b60b7
  40105c:	2000039c 	.word	0x2000039c
  401060:	40020000 	.word	0x40020000

00401064 <servo_tick>:
    pwm_channel_enable(PWM, EXT1_PWM_CHANNEL);
	
}

void servo_tick(void)
{
  401064:	b508      	push	{r3, lr}
	/* Stay within update range of servo */
	if (cph_get_millis() >= f_servo_timeout) {
  401066:	4b08      	ldr	r3, [pc, #32]	; (401088 <servo_tick+0x24>)
  401068:	681a      	ldr	r2, [r3, #0]
  40106a:	4b08      	ldr	r3, [pc, #32]	; (40108c <servo_tick+0x28>)
  40106c:	681b      	ldr	r3, [r3, #0]
  40106e:	429a      	cmp	r2, r3
  401070:	d308      	bcc.n	401084 <servo_tick+0x20>
		f_servo_timeout = cph_get_millis() + 50;
  401072:	4b05      	ldr	r3, [pc, #20]	; (401088 <servo_tick+0x24>)
  401074:	681b      	ldr	r3, [r3, #0]
  401076:	3332      	adds	r3, #50	; 0x32
  401078:	4a04      	ldr	r2, [pc, #16]	; (40108c <servo_tick+0x28>)
  40107a:	6013      	str	r3, [r2, #0]
		// servo_set_angle(imu_complementary.y_axis);
		servo_set_angle(ap.imu.y_axis);
  40107c:	4b04      	ldr	r3, [pc, #16]	; (401090 <servo_tick+0x2c>)
  40107e:	6858      	ldr	r0, [r3, #4]
  401080:	f7ff ffd4 	bl	40102c <servo_set_angle>
  401084:	bd08      	pop	{r3, pc}
  401086:	bf00      	nop
  401088:	20000208 	.word	0x20000208
  40108c:	2000023c 	.word	0x2000023c
  401090:	2000036c 	.word	0x2000036c

00401094 <pid_tick>:
float kd = 0.0;
float desired_angle = 0.0f;


void pid_tick(void)
{
  401094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    previous_error = time;
  401098:	4c27      	ldr	r4, [pc, #156]	; (401138 <pid_tick+0xa4>)
  40109a:	6820      	ldr	r0, [r4, #0]
  40109c:	f004 fcdc 	bl	405a58 <__aeabi_ui2f>
  4010a0:	4680      	mov	r8, r0
    time = cph_get_millis();
  4010a2:	4b26      	ldr	r3, [pc, #152]	; (40113c <pid_tick+0xa8>)
  4010a4:	681b      	ldr	r3, [r3, #0]
  4010a6:	6023      	str	r3, [r4, #0]
    elapsed_time = (time - previous_time)/1000;
  4010a8:	4a25      	ldr	r2, [pc, #148]	; (401140 <pid_tick+0xac>)
  4010aa:	6814      	ldr	r4, [r2, #0]
  4010ac:	1b1b      	subs	r3, r3, r4
  4010ae:	4c25      	ldr	r4, [pc, #148]	; (401144 <pid_tick+0xb0>)
  4010b0:	fba4 3403 	umull	r3, r4, r4, r3
  4010b4:	09a4      	lsrs	r4, r4, #6
  4010b6:	4b24      	ldr	r3, [pc, #144]	; (401148 <pid_tick+0xb4>)
  4010b8:	601c      	str	r4, [r3, #0]

    error = ap.imu.y_axis - desired_angle;
  4010ba:	4b24      	ldr	r3, [pc, #144]	; (40114c <pid_tick+0xb8>)
  4010bc:	6819      	ldr	r1, [r3, #0]
  4010be:	4b24      	ldr	r3, [pc, #144]	; (401150 <pid_tick+0xbc>)
  4010c0:	6858      	ldr	r0, [r3, #4]
  4010c2:	f004 fc17 	bl	4058f4 <__aeabi_fsub>
  4010c6:	4605      	mov	r5, r0
  4010c8:	4b22      	ldr	r3, [pc, #136]	; (401154 <pid_tick+0xc0>)
  4010ca:	6018      	str	r0, [r3, #0]
    pid_p = kp*error;
  4010cc:	4b22      	ldr	r3, [pc, #136]	; (401158 <pid_tick+0xc4>)
  4010ce:	6819      	ldr	r1, [r3, #0]
  4010d0:	f004 fd1a 	bl	405b08 <__aeabi_fmul>
  4010d4:	4606      	mov	r6, r0
  4010d6:	4b21      	ldr	r3, [pc, #132]	; (40115c <pid_tick+0xc8>)
  4010d8:	6018      	str	r0, [r3, #0]

    // if (-3.0f < error < 3.0f) {
    //     pid_i = pid_i +(ki*error);
    // }

    pid_i = pid_i +(ki*error);
  4010da:	4b21      	ldr	r3, [pc, #132]	; (401160 <pid_tick+0xcc>)
  4010dc:	6819      	ldr	r1, [r3, #0]
  4010de:	4628      	mov	r0, r5
  4010e0:	f004 fd12 	bl	405b08 <__aeabi_fmul>
  4010e4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401174 <pid_tick+0xe0>
  4010e8:	f8d9 1000 	ldr.w	r1, [r9]
  4010ec:	f004 fc04 	bl	4058f8 <__addsf3>
  4010f0:	4607      	mov	r7, r0
  4010f2:	f8c9 0000 	str.w	r0, [r9]

    pid_d = kd * ((error-previous_error)/elapsed_time);
  4010f6:	4641      	mov	r1, r8
  4010f8:	4628      	mov	r0, r5
  4010fa:	f004 fbfb 	bl	4058f4 <__aeabi_fsub>
  4010fe:	4680      	mov	r8, r0
  401100:	4620      	mov	r0, r4
  401102:	f004 fca9 	bl	405a58 <__aeabi_ui2f>
  401106:	4601      	mov	r1, r0
  401108:	4640      	mov	r0, r8
  40110a:	f004 fdb1 	bl	405c70 <__aeabi_fdiv>
  40110e:	4b15      	ldr	r3, [pc, #84]	; (401164 <pid_tick+0xd0>)
  401110:	6819      	ldr	r1, [r3, #0]
  401112:	f004 fcf9 	bl	405b08 <__aeabi_fmul>
  401116:	4604      	mov	r4, r0
  401118:	4b13      	ldr	r3, [pc, #76]	; (401168 <pid_tick+0xd4>)
  40111a:	6018      	str	r0, [r3, #0]

    pid = pid_p + pid_i + pid_d;
  40111c:	4639      	mov	r1, r7
  40111e:	4630      	mov	r0, r6
  401120:	f004 fbea 	bl	4058f8 <__addsf3>
  401124:	4621      	mov	r1, r4
  401126:	f004 fbe7 	bl	4058f8 <__addsf3>
  40112a:	4b10      	ldr	r3, [pc, #64]	; (40116c <pid_tick+0xd8>)
  40112c:	6018      	str	r0, [r3, #0]

    previous_error = error;
  40112e:	4b10      	ldr	r3, [pc, #64]	; (401170 <pid_tick+0xdc>)
  401130:	601d      	str	r5, [r3, #0]
  401132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401136:	bf00      	nop
  401138:	20000260 	.word	0x20000260
  40113c:	20000208 	.word	0x20000208
  401140:	20000264 	.word	0x20000264
  401144:	10624dd3 	.word	0x10624dd3
  401148:	20000268 	.word	0x20000268
  40114c:	2000024c 	.word	0x2000024c
  401150:	2000036c 	.word	0x2000036c
  401154:	20000254 	.word	0x20000254
  401158:	2000000c 	.word	0x2000000c
  40115c:	2000026c 	.word	0x2000026c
  401160:	2000025c 	.word	0x2000025c
  401164:	20000258 	.word	0x20000258
  401168:	20000240 	.word	0x20000240
  40116c:	20000248 	.word	0x20000248
  401170:	20000244 	.word	0x20000244
  401174:	20000250 	.word	0x20000250

00401178 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401178:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40117a:	482c      	ldr	r0, [pc, #176]	; (40122c <board_init+0xb4>)
  40117c:	f000 fc02 	bl	401984 <wdt_disable>
  401180:	200b      	movs	r0, #11
  401182:	f000 fbd5 	bl	401930 <pmc_enable_periph_clk>
  401186:	200c      	movs	r0, #12
  401188:	f000 fbd2 	bl	401930 <pmc_enable_periph_clk>
  40118c:	200d      	movs	r0, #13
  40118e:	f000 fbcf 	bl	401930 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401192:	4b27      	ldr	r3, [pc, #156]	; (401230 <board_init+0xb8>)
  401194:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401198:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40119a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40119c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4011a0:	4c24      	ldr	r4, [pc, #144]	; (401234 <board_init+0xbc>)
  4011a2:	2504      	movs	r5, #4
  4011a4:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011a6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4011aa:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4011ac:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4011b0:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4011b2:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4011b4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4011b8:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4011ba:	f022 0204 	bic.w	r2, r2, #4
  4011be:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4011c0:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4011c2:	f022 0204 	bic.w	r2, r2, #4
  4011c6:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4011cc:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011ce:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  4011d8:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011da:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011dc:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4011e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4011e4:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4011e6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4011e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  4011ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4011f0:	210c      	movs	r1, #12
  4011f2:	4811      	ldr	r0, [pc, #68]	; (401238 <board_init+0xc0>)
  4011f4:	f000 fa76 	bl	4016e4 <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4011f8:	4e10      	ldr	r6, [pc, #64]	; (40123c <board_init+0xc4>)
  4011fa:	4631      	mov	r1, r6
  4011fc:	2003      	movs	r0, #3
  4011fe:	f000 f9e5 	bl	4015cc <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  401202:	4631      	mov	r1, r6
  401204:	4628      	mov	r0, r5
  401206:	f000 f9e1 	bl	4015cc <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40120a:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40120c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401210:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401212:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401214:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401218:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40121a:	f023 0304 	bic.w	r3, r3, #4
  40121e:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401220:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401222:	f023 0304 	bic.w	r3, r3, #4
  401226:	6763      	str	r3, [r4, #116]	; 0x74
  401228:	bd70      	pop	{r4, r5, r6, pc}
  40122a:	bf00      	nop
  40122c:	400e1450 	.word	0x400e1450
  401230:	400e1200 	.word	0x400e1200
  401234:	400e0e00 	.word	0x400e0e00
  401238:	400e1000 	.word	0x400e1000
  40123c:	08000001 	.word	0x08000001

00401240 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401240:	4b2b      	ldr	r3, [pc, #172]	; (4012f0 <twi_set_speed+0xb0>)
  401242:	4299      	cmp	r1, r3
  401244:	d849      	bhi.n	4012da <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401246:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40124a:	4299      	cmp	r1, r3
  40124c:	d92b      	bls.n	4012a6 <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40124e:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401250:	4c28      	ldr	r4, [pc, #160]	; (4012f4 <twi_set_speed+0xb4>)
  401252:	fba4 3402 	umull	r3, r4, r4, r2
  401256:	0ba4      	lsrs	r4, r4, #14
  401258:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40125a:	4b27      	ldr	r3, [pc, #156]	; (4012f8 <twi_set_speed+0xb8>)
  40125c:	440b      	add	r3, r1
  40125e:	009b      	lsls	r3, r3, #2
  401260:	fbb2 f2f3 	udiv	r2, r2, r3
  401264:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401266:	2cff      	cmp	r4, #255	; 0xff
  401268:	d939      	bls.n	4012de <twi_set_speed+0x9e>
  40126a:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  40126c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40126e:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401270:	2cff      	cmp	r4, #255	; 0xff
  401272:	d902      	bls.n	40127a <twi_set_speed+0x3a>
  401274:	2b07      	cmp	r3, #7
  401276:	d1f9      	bne.n	40126c <twi_set_speed+0x2c>
  401278:	e00a      	b.n	401290 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40127a:	2aff      	cmp	r2, #255	; 0xff
  40127c:	d908      	bls.n	401290 <twi_set_speed+0x50>
  40127e:	2b06      	cmp	r3, #6
  401280:	d900      	bls.n	401284 <twi_set_speed+0x44>
  401282:	e005      	b.n	401290 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  401284:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  401286:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401288:	2aff      	cmp	r2, #255	; 0xff
  40128a:	d901      	bls.n	401290 <twi_set_speed+0x50>
  40128c:	2b06      	cmp	r3, #6
  40128e:	d9f9      	bls.n	401284 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401290:	0212      	lsls	r2, r2, #8
  401292:	b292      	uxth	r2, r2
  401294:	041b      	lsls	r3, r3, #16
  401296:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40129a:	431a      	orrs	r2, r3
  40129c:	b2e4      	uxtb	r4, r4
  40129e:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4012a0:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4012a2:	2000      	movs	r0, #0
  4012a4:	e021      	b.n	4012ea <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4012a6:	0049      	lsls	r1, r1, #1
  4012a8:	fbb2 f2f1 	udiv	r2, r2, r1
  4012ac:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4012ae:	2aff      	cmp	r2, #255	; 0xff
  4012b0:	d907      	bls.n	4012c2 <twi_set_speed+0x82>
  4012b2:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4012b4:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4012b6:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4012b8:	2aff      	cmp	r2, #255	; 0xff
  4012ba:	d903      	bls.n	4012c4 <twi_set_speed+0x84>
  4012bc:	2b07      	cmp	r3, #7
  4012be:	d1f9      	bne.n	4012b4 <twi_set_speed+0x74>
  4012c0:	e000      	b.n	4012c4 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4012c2:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4012c4:	0211      	lsls	r1, r2, #8
  4012c6:	b289      	uxth	r1, r1
  4012c8:	041b      	lsls	r3, r3, #16
  4012ca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4012ce:	430b      	orrs	r3, r1
  4012d0:	b2d2      	uxtb	r2, r2
  4012d2:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4012d4:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4012d6:	2000      	movs	r0, #0
}
  4012d8:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  4012da:	2001      	movs	r0, #1
  4012dc:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4012de:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4012e0:	bf88      	it	hi
  4012e2:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4012e4:	d8ce      	bhi.n	401284 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4012e6:	2300      	movs	r3, #0
  4012e8:	e7d2      	b.n	401290 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  4012ea:	bc10      	pop	{r4}
  4012ec:	4770      	bx	lr
  4012ee:	bf00      	nop
  4012f0:	00061a80 	.word	0x00061a80
  4012f4:	057619f1 	.word	0x057619f1
  4012f8:	3ffd1200 	.word	0x3ffd1200

004012fc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4012fc:	b538      	push	{r3, r4, r5, lr}
  4012fe:	4604      	mov	r4, r0
  401300:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  401306:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  401308:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40130a:	2380      	movs	r3, #128	; 0x80
  40130c:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  40130e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  401310:	2308      	movs	r3, #8
  401312:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401314:	2320      	movs	r3, #32
  401316:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401318:	2304      	movs	r3, #4
  40131a:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  40131c:	680a      	ldr	r2, [r1, #0]
  40131e:	6849      	ldr	r1, [r1, #4]
  401320:	f7ff ff8e 	bl	401240 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401324:	2801      	cmp	r0, #1
  401326:	bf14      	ite	ne
  401328:	2000      	movne	r0, #0
  40132a:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  40132c:	7a6b      	ldrb	r3, [r5, #9]
  40132e:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401330:	bf04      	itt	eq
  401332:	2340      	moveq	r3, #64	; 0x40
  401334:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401336:	bd38      	pop	{r3, r4, r5, pc}

00401338 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401338:	460a      	mov	r2, r1
  40133a:	b159      	cbz	r1, 401354 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  40133c:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  40133e:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  401340:	bfc4      	itt	gt
  401342:	7841      	ldrbgt	r1, [r0, #1]
  401344:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401348:	2a02      	cmp	r2, #2
  40134a:	dd05      	ble.n	401358 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  40134c:	7880      	ldrb	r0, [r0, #2]
  40134e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401352:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401354:	2000      	movs	r0, #0
  401356:	4770      	bx	lr
  401358:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  40135a:	4770      	bx	lr

0040135c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  40135c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401360:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401362:	2c00      	cmp	r4, #0
  401364:	d045      	beq.n	4013f2 <twi_master_read+0x96>
  401366:	460b      	mov	r3, r1
  401368:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  40136a:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40136c:	2000      	movs	r0, #0
  40136e:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401370:	684a      	ldr	r2, [r1, #4]
  401372:	0212      	lsls	r2, r2, #8
  401374:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401378:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  40137c:	7c1a      	ldrb	r2, [r3, #16]
  40137e:	0412      	lsls	r2, r2, #16
  401380:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401384:	430a      	orrs	r2, r1
  401386:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401388:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40138a:	6859      	ldr	r1, [r3, #4]
  40138c:	4618      	mov	r0, r3
  40138e:	f7ff ffd3 	bl	401338 <twi_mk_addr>
  401392:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401394:	2c01      	cmp	r4, #1
  401396:	d104      	bne.n	4013a2 <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401398:	2303      	movs	r3, #3
  40139a:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  40139c:	f04f 0e01 	mov.w	lr, #1
  4013a0:	e033      	b.n	40140a <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4013a2:	2301      	movs	r3, #1
  4013a4:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  4013a6:	f04f 0e00 	mov.w	lr, #0
  4013aa:	e02e      	b.n	40140a <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  4013ac:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4013ae:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4013b0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4013b4:	d120      	bne.n	4013f8 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  4013b6:	1e51      	subs	r1, r2, #1
  4013b8:	b30a      	cbz	r2, 4013fe <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4013ba:	2c01      	cmp	r4, #1
  4013bc:	d106      	bne.n	4013cc <twi_master_read+0x70>
  4013be:	f1be 0f00 	cmp.w	lr, #0
  4013c2:	d12f      	bne.n	401424 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  4013c4:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  4013c8:	46e6      	mov	lr, ip
  4013ca:	e02b      	b.n	401424 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4013cc:	f013 0f02 	tst.w	r3, #2
  4013d0:	d005      	beq.n	4013de <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4013d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4013d4:	7033      	strb	r3, [r6, #0]

		cnt--;
  4013d6:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4013d8:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4013da:	463a      	mov	r2, r7
  4013dc:	e000      	b.n	4013e0 <twi_master_read+0x84>
  4013de:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4013e0:	2c00      	cmp	r4, #0
  4013e2:	d1e4      	bne.n	4013ae <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4013e4:	6a2b      	ldr	r3, [r5, #32]
  4013e6:	f013 0f01 	tst.w	r3, #1
  4013ea:	d0fb      	beq.n	4013e4 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  4013ec:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  4013ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4013f2:	2001      	movs	r0, #1
  4013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4013f8:	2005      	movs	r0, #5
  4013fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  4013fe:	2009      	movs	r0, #9
  401400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401404:	2005      	movs	r0, #5
  401406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40140a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  40140c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401410:	d1f8      	bne.n	401404 <twi_master_read+0xa8>
  401412:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401416:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  40141a:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  40141e:	f04f 0c01 	mov.w	ip, #1
  401422:	e7ca      	b.n	4013ba <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401424:	f013 0f02 	tst.w	r3, #2
  401428:	d0c0      	beq.n	4013ac <twi_master_read+0x50>
  40142a:	e7d2      	b.n	4013d2 <twi_master_read+0x76>

0040142c <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  40142c:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40142e:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  401430:	2d00      	cmp	r5, #0
  401432:	d034      	beq.n	40149e <twi_master_write+0x72>
  401434:	460b      	mov	r3, r1
  401436:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401438:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40143a:	2000      	movs	r0, #0
  40143c:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40143e:	7c0a      	ldrb	r2, [r1, #16]
  401440:	0412      	lsls	r2, r2, #16
  401442:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401446:	685a      	ldr	r2, [r3, #4]
  401448:	0212      	lsls	r2, r2, #8
  40144a:	f402 7240 	and.w	r2, r2, #768	; 0x300
  40144e:	430a      	orrs	r2, r1
  401450:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401452:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401454:	6859      	ldr	r1, [r3, #4]
  401456:	4618      	mov	r0, r3
  401458:	f7ff ff6e 	bl	401338 <twi_mk_addr>
  40145c:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40145e:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401460:	f413 7f80 	tst.w	r3, #256	; 0x100
  401464:	d004      	beq.n	401470 <twi_master_write+0x44>
  401466:	e01c      	b.n	4014a2 <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401468:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40146a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40146e:	d11a      	bne.n	4014a6 <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401470:	f013 0f04 	tst.w	r3, #4
  401474:	d003      	beq.n	40147e <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401476:	7833      	ldrb	r3, [r6, #0]
  401478:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  40147a:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40147c:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40147e:	2d00      	cmp	r5, #0
  401480:	d1f2      	bne.n	401468 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401482:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401484:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401488:	d10f      	bne.n	4014aa <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  40148a:	f013 0f04 	tst.w	r3, #4
  40148e:	d0f8      	beq.n	401482 <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401490:	2302      	movs	r3, #2
  401492:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401494:	6a23      	ldr	r3, [r4, #32]
  401496:	f013 0f01 	tst.w	r3, #1
  40149a:	d0fb      	beq.n	401494 <twi_master_write+0x68>
  40149c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40149e:	2001      	movs	r0, #1
  4014a0:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4014a2:	2005      	movs	r0, #5
  4014a4:	bd70      	pop	{r4, r5, r6, pc}
  4014a6:	2005      	movs	r0, #5
  4014a8:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4014aa:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4014ac:	bd70      	pop	{r4, r5, r6, pc}
  4014ae:	bf00      	nop

004014b0 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  4014b0:	b500      	push	{lr}
  4014b2:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  4014b4:	2300      	movs	r3, #0
  4014b6:	aa06      	add	r2, sp, #24
  4014b8:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  4014bc:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  4014be:	2201      	movs	r2, #1
  4014c0:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  4014c2:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  4014c6:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  4014ca:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  4014cc:	a901      	add	r1, sp, #4
  4014ce:	f7ff ffad 	bl	40142c <twi_master_write>
}
  4014d2:	b007      	add	sp, #28
  4014d4:	f85d fb04 	ldr.w	pc, [sp], #4

004014d8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4014d8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4014da:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4014de:	d02f      	beq.n	401540 <pio_set_peripheral+0x68>
  4014e0:	d807      	bhi.n	4014f2 <pio_set_peripheral+0x1a>
  4014e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4014e6:	d014      	beq.n	401512 <pio_set_peripheral+0x3a>
  4014e8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4014ec:	d01e      	beq.n	40152c <pio_set_peripheral+0x54>
  4014ee:	b939      	cbnz	r1, 401500 <pio_set_peripheral+0x28>
  4014f0:	4770      	bx	lr
  4014f2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4014f6:	d036      	beq.n	401566 <pio_set_peripheral+0x8e>
  4014f8:	d804      	bhi.n	401504 <pio_set_peripheral+0x2c>
  4014fa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4014fe:	d029      	beq.n	401554 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401500:	6042      	str	r2, [r0, #4]
  401502:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401504:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401508:	d02d      	beq.n	401566 <pio_set_peripheral+0x8e>
  40150a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40150e:	d02a      	beq.n	401566 <pio_set_peripheral+0x8e>
  401510:	e7f6      	b.n	401500 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401512:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401514:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401516:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401518:	43d3      	mvns	r3, r2
  40151a:	4021      	ands	r1, r4
  40151c:	4019      	ands	r1, r3
  40151e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401520:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401522:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401524:	4021      	ands	r1, r4
  401526:	400b      	ands	r3, r1
  401528:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40152a:	e01a      	b.n	401562 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40152c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40152e:	4313      	orrs	r3, r2
  401530:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401532:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401534:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401536:	400b      	ands	r3, r1
  401538:	ea23 0302 	bic.w	r3, r3, r2
  40153c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40153e:	e7df      	b.n	401500 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401540:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401542:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401544:	400b      	ands	r3, r1
  401546:	ea23 0302 	bic.w	r3, r3, r2
  40154a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40154c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40154e:	4313      	orrs	r3, r2
  401550:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401552:	e7d5      	b.n	401500 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401554:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401556:	4313      	orrs	r3, r2
  401558:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40155a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40155c:	4313      	orrs	r3, r2
  40155e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401560:	e7ce      	b.n	401500 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401562:	6042      	str	r2, [r0, #4]
}
  401564:	bc10      	pop	{r4}
  401566:	4770      	bx	lr

00401568 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401568:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40156a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40156e:	bf14      	ite	ne
  401570:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401572:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401574:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401578:	bf14      	ite	ne
  40157a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40157c:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40157e:	f012 0f02 	tst.w	r2, #2
  401582:	d002      	beq.n	40158a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401584:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401588:	e004      	b.n	401594 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40158a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40158e:	bf18      	it	ne
  401590:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401594:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401596:	6001      	str	r1, [r0, #0]
  401598:	4770      	bx	lr
  40159a:	bf00      	nop

0040159c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40159c:	b410      	push	{r4}
  40159e:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4015a0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4015a2:	b10c      	cbz	r4, 4015a8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4015a4:	6641      	str	r1, [r0, #100]	; 0x64
  4015a6:	e000      	b.n	4015aa <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4015a8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4015aa:	b10b      	cbz	r3, 4015b0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4015ac:	6501      	str	r1, [r0, #80]	; 0x50
  4015ae:	e000      	b.n	4015b2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4015b0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4015b2:	b10a      	cbz	r2, 4015b8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4015b4:	6301      	str	r1, [r0, #48]	; 0x30
  4015b6:	e000      	b.n	4015ba <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4015b8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4015ba:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4015bc:	6001      	str	r1, [r0, #0]
}
  4015be:	bc10      	pop	{r4}
  4015c0:	4770      	bx	lr
  4015c2:	bf00      	nop

004015c4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4015c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4015c6:	4770      	bx	lr

004015c8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4015c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4015ca:	4770      	bx	lr

004015cc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4015cc:	b570      	push	{r4, r5, r6, lr}
  4015ce:	b082      	sub	sp, #8
  4015d0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4015d2:	0943      	lsrs	r3, r0, #5
  4015d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4015d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4015dc:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4015de:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4015e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4015e6:	d047      	beq.n	401678 <pio_configure_pin+0xac>
  4015e8:	d809      	bhi.n	4015fe <pio_configure_pin+0x32>
  4015ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4015ee:	d021      	beq.n	401634 <pio_configure_pin+0x68>
  4015f0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4015f4:	d02f      	beq.n	401656 <pio_configure_pin+0x8a>
  4015f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4015fa:	d16f      	bne.n	4016dc <pio_configure_pin+0x110>
  4015fc:	e009      	b.n	401612 <pio_configure_pin+0x46>
  4015fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401602:	d055      	beq.n	4016b0 <pio_configure_pin+0xe4>
  401604:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401608:	d052      	beq.n	4016b0 <pio_configure_pin+0xe4>
  40160a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40160e:	d044      	beq.n	40169a <pio_configure_pin+0xce>
  401610:	e064      	b.n	4016dc <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401612:	f000 001f 	and.w	r0, r0, #31
  401616:	2601      	movs	r6, #1
  401618:	4086      	lsls	r6, r0
  40161a:	4632      	mov	r2, r6
  40161c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401620:	4620      	mov	r0, r4
  401622:	f7ff ff59 	bl	4014d8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401626:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40162a:	bf14      	ite	ne
  40162c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40162e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401630:	2001      	movs	r0, #1
  401632:	e054      	b.n	4016de <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401634:	f000 001f 	and.w	r0, r0, #31
  401638:	2601      	movs	r6, #1
  40163a:	4086      	lsls	r6, r0
  40163c:	4632      	mov	r2, r6
  40163e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401642:	4620      	mov	r0, r4
  401644:	f7ff ff48 	bl	4014d8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401648:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40164c:	bf14      	ite	ne
  40164e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401650:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401652:	2001      	movs	r0, #1
  401654:	e043      	b.n	4016de <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401656:	f000 001f 	and.w	r0, r0, #31
  40165a:	2601      	movs	r6, #1
  40165c:	4086      	lsls	r6, r0
  40165e:	4632      	mov	r2, r6
  401660:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401664:	4620      	mov	r0, r4
  401666:	f7ff ff37 	bl	4014d8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40166a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40166e:	bf14      	ite	ne
  401670:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401672:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401674:	2001      	movs	r0, #1
  401676:	e032      	b.n	4016de <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401678:	f000 001f 	and.w	r0, r0, #31
  40167c:	2601      	movs	r6, #1
  40167e:	4086      	lsls	r6, r0
  401680:	4632      	mov	r2, r6
  401682:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401686:	4620      	mov	r0, r4
  401688:	f7ff ff26 	bl	4014d8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40168c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401690:	bf14      	ite	ne
  401692:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401694:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401696:	2001      	movs	r0, #1
  401698:	e021      	b.n	4016de <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40169a:	f000 011f 	and.w	r1, r0, #31
  40169e:	2601      	movs	r6, #1
  4016a0:	462a      	mov	r2, r5
  4016a2:	fa06 f101 	lsl.w	r1, r6, r1
  4016a6:	4620      	mov	r0, r4
  4016a8:	f7ff ff5e 	bl	401568 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  4016ac:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4016ae:	e016      	b.n	4016de <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4016b0:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4016b4:	f000 011f 	and.w	r1, r0, #31
  4016b8:	2601      	movs	r6, #1
  4016ba:	ea05 0306 	and.w	r3, r5, r6
  4016be:	9300      	str	r3, [sp, #0]
  4016c0:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4016c4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4016c8:	bf14      	ite	ne
  4016ca:	2200      	movne	r2, #0
  4016cc:	2201      	moveq	r2, #1
  4016ce:	fa06 f101 	lsl.w	r1, r6, r1
  4016d2:	4620      	mov	r0, r4
  4016d4:	f7ff ff62 	bl	40159c <pio_set_output>

	default:
		return 0;
	}

	return 1;
  4016d8:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4016da:	e000      	b.n	4016de <pio_configure_pin+0x112>

	default:
		return 0;
  4016dc:	2000      	movs	r0, #0
	}

	return 1;
}
  4016de:	b002      	add	sp, #8
  4016e0:	bd70      	pop	{r4, r5, r6, pc}
  4016e2:	bf00      	nop

004016e4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4016e4:	b570      	push	{r4, r5, r6, lr}
  4016e6:	b082      	sub	sp, #8
  4016e8:	4605      	mov	r5, r0
  4016ea:	460e      	mov	r6, r1
  4016ec:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4016ee:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4016f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4016f6:	d038      	beq.n	40176a <pio_configure_pin_group+0x86>
  4016f8:	d809      	bhi.n	40170e <pio_configure_pin_group+0x2a>
  4016fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4016fe:	d01c      	beq.n	40173a <pio_configure_pin_group+0x56>
  401700:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401704:	d025      	beq.n	401752 <pio_configure_pin_group+0x6e>
  401706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40170a:	d150      	bne.n	4017ae <pio_configure_pin_group+0xca>
  40170c:	e009      	b.n	401722 <pio_configure_pin_group+0x3e>
  40170e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401712:	d03a      	beq.n	40178a <pio_configure_pin_group+0xa6>
  401714:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401718:	d037      	beq.n	40178a <pio_configure_pin_group+0xa6>
  40171a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40171e:	d030      	beq.n	401782 <pio_configure_pin_group+0x9e>
  401720:	e045      	b.n	4017ae <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401722:	460a      	mov	r2, r1
  401724:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401728:	f7ff fed6 	bl	4014d8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40172c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401730:	bf14      	ite	ne
  401732:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401734:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401736:	2001      	movs	r0, #1
  401738:	e03a      	b.n	4017b0 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40173a:	460a      	mov	r2, r1
  40173c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401740:	f7ff feca 	bl	4014d8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401744:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401748:	bf14      	ite	ne
  40174a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40174c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40174e:	2001      	movs	r0, #1
  401750:	e02e      	b.n	4017b0 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401752:	460a      	mov	r2, r1
  401754:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401758:	f7ff febe 	bl	4014d8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40175c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401760:	bf14      	ite	ne
  401762:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401764:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401766:	2001      	movs	r0, #1
  401768:	e022      	b.n	4017b0 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40176a:	460a      	mov	r2, r1
  40176c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401770:	f7ff feb2 	bl	4014d8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401774:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401778:	bf14      	ite	ne
  40177a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40177c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40177e:	2001      	movs	r0, #1
  401780:	e016      	b.n	4017b0 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401782:	f7ff fef1 	bl	401568 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401786:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401788:	e012      	b.n	4017b0 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40178a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  40178e:	f004 0301 	and.w	r3, r4, #1
  401792:	9300      	str	r3, [sp, #0]
  401794:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401798:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40179c:	bf14      	ite	ne
  40179e:	2200      	movne	r2, #0
  4017a0:	2201      	moveq	r2, #1
  4017a2:	4631      	mov	r1, r6
  4017a4:	4628      	mov	r0, r5
  4017a6:	f7ff fef9 	bl	40159c <pio_set_output>

	default:
		return 0;
	}

	return 1;
  4017aa:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4017ac:	e000      	b.n	4017b0 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4017ae:	2000      	movs	r0, #0
	}

	return 1;
}
  4017b0:	b002      	add	sp, #8
  4017b2:	bd70      	pop	{r4, r5, r6, pc}

004017b4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4017b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4017b8:	4681      	mov	r9, r0
  4017ba:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4017bc:	f7ff ff02 	bl	4015c4 <pio_get_interrupt_status>
  4017c0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4017c2:	4648      	mov	r0, r9
  4017c4:	f7ff ff00 	bl	4015c8 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  4017c8:	4005      	ands	r5, r0
  4017ca:	d013      	beq.n	4017f4 <pio_handler_process+0x40>
  4017cc:	4c0e      	ldr	r4, [pc, #56]	; (401808 <pio_handler_process+0x54>)
  4017ce:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4017d2:	6823      	ldr	r3, [r4, #0]
  4017d4:	4543      	cmp	r3, r8
  4017d6:	d108      	bne.n	4017ea <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4017d8:	6861      	ldr	r1, [r4, #4]
  4017da:	4229      	tst	r1, r5
  4017dc:	d005      	beq.n	4017ea <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4017de:	68e3      	ldr	r3, [r4, #12]
  4017e0:	4640      	mov	r0, r8
  4017e2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4017e4:	6863      	ldr	r3, [r4, #4]
  4017e6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4017ea:	42b4      	cmp	r4, r6
  4017ec:	d002      	beq.n	4017f4 <pio_handler_process+0x40>
  4017ee:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4017f0:	2d00      	cmp	r5, #0
  4017f2:	d1ee      	bne.n	4017d2 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4017f4:	4b05      	ldr	r3, [pc, #20]	; (40180c <pio_handler_process+0x58>)
  4017f6:	681b      	ldr	r3, [r3, #0]
  4017f8:	b123      	cbz	r3, 401804 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4017fa:	4b05      	ldr	r3, [pc, #20]	; (401810 <pio_handler_process+0x5c>)
  4017fc:	681b      	ldr	r3, [r3, #0]
  4017fe:	b10b      	cbz	r3, 401804 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401800:	4648      	mov	r0, r9
  401802:	4798      	blx	r3
  401804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401808:	20000274 	.word	0x20000274
  40180c:	200003c4 	.word	0x200003c4
  401810:	20000270 	.word	0x20000270

00401814 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401814:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401816:	210b      	movs	r1, #11
  401818:	4801      	ldr	r0, [pc, #4]	; (401820 <PIOA_Handler+0xc>)
  40181a:	f7ff ffcb 	bl	4017b4 <pio_handler_process>
  40181e:	bd08      	pop	{r3, pc}
  401820:	400e0e00 	.word	0x400e0e00

00401824 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401824:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401826:	210c      	movs	r1, #12
  401828:	4801      	ldr	r0, [pc, #4]	; (401830 <PIOB_Handler+0xc>)
  40182a:	f7ff ffc3 	bl	4017b4 <pio_handler_process>
  40182e:	bd08      	pop	{r3, pc}
  401830:	400e1000 	.word	0x400e1000

00401834 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401834:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401836:	210d      	movs	r1, #13
  401838:	4801      	ldr	r0, [pc, #4]	; (401840 <PIOC_Handler+0xc>)
  40183a:	f7ff ffbb 	bl	4017b4 <pio_handler_process>
  40183e:	bd08      	pop	{r3, pc}
  401840:	400e1200 	.word	0x400e1200

00401844 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401844:	4a18      	ldr	r2, [pc, #96]	; (4018a8 <pmc_switch_mck_to_pllack+0x64>)
  401846:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40184c:	4318      	orrs	r0, r3
  40184e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401850:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401852:	f013 0f08 	tst.w	r3, #8
  401856:	d003      	beq.n	401860 <pmc_switch_mck_to_pllack+0x1c>
  401858:	e009      	b.n	40186e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40185a:	3b01      	subs	r3, #1
  40185c:	d103      	bne.n	401866 <pmc_switch_mck_to_pllack+0x22>
  40185e:	e01e      	b.n	40189e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401860:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401864:	4910      	ldr	r1, [pc, #64]	; (4018a8 <pmc_switch_mck_to_pllack+0x64>)
  401866:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401868:	f012 0f08 	tst.w	r2, #8
  40186c:	d0f5      	beq.n	40185a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40186e:	4a0e      	ldr	r2, [pc, #56]	; (4018a8 <pmc_switch_mck_to_pllack+0x64>)
  401870:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401872:	f023 0303 	bic.w	r3, r3, #3
  401876:	f043 0302 	orr.w	r3, r3, #2
  40187a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40187c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40187e:	f010 0008 	ands.w	r0, r0, #8
  401882:	d004      	beq.n	40188e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401884:	2000      	movs	r0, #0
  401886:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401888:	3b01      	subs	r3, #1
  40188a:	d103      	bne.n	401894 <pmc_switch_mck_to_pllack+0x50>
  40188c:	e009      	b.n	4018a2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40188e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401892:	4905      	ldr	r1, [pc, #20]	; (4018a8 <pmc_switch_mck_to_pllack+0x64>)
  401894:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401896:	f012 0f08 	tst.w	r2, #8
  40189a:	d0f5      	beq.n	401888 <pmc_switch_mck_to_pllack+0x44>
  40189c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40189e:	2001      	movs	r0, #1
  4018a0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4018a2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4018a4:	4770      	bx	lr
  4018a6:	bf00      	nop
  4018a8:	400e0400 	.word	0x400e0400

004018ac <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4018ac:	b138      	cbz	r0, 4018be <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4018ae:	4911      	ldr	r1, [pc, #68]	; (4018f4 <pmc_switch_mainck_to_xtal+0x48>)
  4018b0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4018b2:	4a11      	ldr	r2, [pc, #68]	; (4018f8 <pmc_switch_mainck_to_xtal+0x4c>)
  4018b4:	401a      	ands	r2, r3
  4018b6:	4b11      	ldr	r3, [pc, #68]	; (4018fc <pmc_switch_mainck_to_xtal+0x50>)
  4018b8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4018ba:	620b      	str	r3, [r1, #32]
  4018bc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4018be:	480d      	ldr	r0, [pc, #52]	; (4018f4 <pmc_switch_mainck_to_xtal+0x48>)
  4018c0:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4018c2:	0209      	lsls	r1, r1, #8
  4018c4:	b289      	uxth	r1, r1
  4018c6:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  4018ca:	f023 0303 	bic.w	r3, r3, #3
  4018ce:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4018d2:	f043 0301 	orr.w	r3, r3, #1
  4018d6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4018d8:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4018da:	4602      	mov	r2, r0
  4018dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4018de:	f013 0f01 	tst.w	r3, #1
  4018e2:	d0fb      	beq.n	4018dc <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4018e4:	4a03      	ldr	r2, [pc, #12]	; (4018f4 <pmc_switch_mainck_to_xtal+0x48>)
  4018e6:	6a13      	ldr	r3, [r2, #32]
  4018e8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4018ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4018f0:	6213      	str	r3, [r2, #32]
  4018f2:	4770      	bx	lr
  4018f4:	400e0400 	.word	0x400e0400
  4018f8:	fec8fffc 	.word	0xfec8fffc
  4018fc:	01370002 	.word	0x01370002

00401900 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401900:	4b02      	ldr	r3, [pc, #8]	; (40190c <pmc_osc_is_ready_mainck+0xc>)
  401902:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401904:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401908:	4770      	bx	lr
  40190a:	bf00      	nop
  40190c:	400e0400 	.word	0x400e0400

00401910 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401910:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401914:	4b01      	ldr	r3, [pc, #4]	; (40191c <pmc_disable_pllack+0xc>)
  401916:	629a      	str	r2, [r3, #40]	; 0x28
  401918:	4770      	bx	lr
  40191a:	bf00      	nop
  40191c:	400e0400 	.word	0x400e0400

00401920 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401920:	4b02      	ldr	r3, [pc, #8]	; (40192c <pmc_is_locked_pllack+0xc>)
  401922:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401924:	f000 0002 	and.w	r0, r0, #2
  401928:	4770      	bx	lr
  40192a:	bf00      	nop
  40192c:	400e0400 	.word	0x400e0400

00401930 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401930:	2822      	cmp	r0, #34	; 0x22
  401932:	d81e      	bhi.n	401972 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401934:	281f      	cmp	r0, #31
  401936:	d80c      	bhi.n	401952 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401938:	4b11      	ldr	r3, [pc, #68]	; (401980 <pmc_enable_periph_clk+0x50>)
  40193a:	699a      	ldr	r2, [r3, #24]
  40193c:	2301      	movs	r3, #1
  40193e:	4083      	lsls	r3, r0
  401940:	4393      	bics	r3, r2
  401942:	d018      	beq.n	401976 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401944:	2301      	movs	r3, #1
  401946:	fa03 f000 	lsl.w	r0, r3, r0
  40194a:	4b0d      	ldr	r3, [pc, #52]	; (401980 <pmc_enable_periph_clk+0x50>)
  40194c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40194e:	2000      	movs	r0, #0
  401950:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401952:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401954:	4b0a      	ldr	r3, [pc, #40]	; (401980 <pmc_enable_periph_clk+0x50>)
  401956:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40195a:	2301      	movs	r3, #1
  40195c:	4083      	lsls	r3, r0
  40195e:	4393      	bics	r3, r2
  401960:	d00b      	beq.n	40197a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401962:	2301      	movs	r3, #1
  401964:	fa03 f000 	lsl.w	r0, r3, r0
  401968:	4b05      	ldr	r3, [pc, #20]	; (401980 <pmc_enable_periph_clk+0x50>)
  40196a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40196e:	2000      	movs	r0, #0
  401970:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401972:	2001      	movs	r0, #1
  401974:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401976:	2000      	movs	r0, #0
  401978:	4770      	bx	lr
  40197a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40197c:	4770      	bx	lr
  40197e:	bf00      	nop
  401980:	400e0400 	.word	0x400e0400

00401984 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401988:	6043      	str	r3, [r0, #4]
  40198a:	4770      	bx	lr

0040198c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40198c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40198e:	23ac      	movs	r3, #172	; 0xac
  401990:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401992:	680b      	ldr	r3, [r1, #0]
  401994:	684a      	ldr	r2, [r1, #4]
  401996:	fbb3 f3f2 	udiv	r3, r3, r2
  40199a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40199c:	1e5c      	subs	r4, r3, #1
  40199e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4019a2:	4294      	cmp	r4, r2
  4019a4:	d80a      	bhi.n	4019bc <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  4019a6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4019a8:	688b      	ldr	r3, [r1, #8]
  4019aa:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4019ac:	f240 2302 	movw	r3, #514	; 0x202
  4019b0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4019b4:	2350      	movs	r3, #80	; 0x50
  4019b6:	6003      	str	r3, [r0, #0]

	return 0;
  4019b8:	2000      	movs	r0, #0
  4019ba:	e000      	b.n	4019be <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  4019bc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  4019be:	bc10      	pop	{r4}
  4019c0:	4770      	bx	lr
  4019c2:	bf00      	nop

004019c4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4019c4:	6943      	ldr	r3, [r0, #20]
  4019c6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4019ca:	bf1a      	itte	ne
  4019cc:	61c1      	strne	r1, [r0, #28]
	return 0;
  4019ce:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4019d0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4019d2:	4770      	bx	lr

004019d4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4019d4:	6943      	ldr	r3, [r0, #20]
  4019d6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4019da:	bf1d      	ittte	ne
  4019dc:	6983      	ldrne	r3, [r0, #24]
  4019de:	700b      	strbne	r3, [r1, #0]
	return 0;
  4019e0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4019e2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4019e4:	4770      	bx	lr
  4019e6:	bf00      	nop

004019e8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4019e8:	6943      	ldr	r3, [r0, #20]
  4019ea:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4019ee:	bf1d      	ittte	ne
  4019f0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4019f4:	61c1      	strne	r1, [r0, #28]
	return 0;
  4019f6:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4019f8:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4019fa:	4770      	bx	lr

004019fc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4019fc:	6943      	ldr	r3, [r0, #20]
  4019fe:	f013 0f01 	tst.w	r3, #1
  401a02:	d005      	beq.n	401a10 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401a04:	6983      	ldr	r3, [r0, #24]
  401a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401a0a:	600b      	str	r3, [r1, #0]

	return 0;
  401a0c:	2000      	movs	r0, #0
  401a0e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  401a10:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  401a12:	4770      	bx	lr

00401a14 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401a14:	b4f0      	push	{r4, r5, r6, r7}
  401a16:	b08c      	sub	sp, #48	; 0x30
  401a18:	4607      	mov	r7, r0
  401a1a:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  401a1c:	ac01      	add	r4, sp, #4
  401a1e:	4d11      	ldr	r5, [pc, #68]	; (401a64 <pwm_clocks_generate+0x50>)
  401a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  401a30:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401a32:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  401a34:	f852 3b04 	ldr.w	r3, [r2], #4
  401a38:	fbb6 f3f3 	udiv	r3, r6, r3
  401a3c:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401a44:	d905      	bls.n	401a52 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  401a46:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401a48:	280b      	cmp	r0, #11
  401a4a:	d1f3      	bne.n	401a34 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401a4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401a50:	e005      	b.n	401a5e <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  401a52:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  401a54:	bf94      	ite	ls
  401a56:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  401a5a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  401a5e:	b00c      	add	sp, #48	; 0x30
  401a60:	bcf0      	pop	{r4, r5, r6, r7}
  401a62:	4770      	bx	lr
  401a64:	0040611c 	.word	0x0040611c

00401a68 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401a68:	b570      	push	{r4, r5, r6, lr}
  401a6a:	4606      	mov	r6, r0
  401a6c:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  401a6e:	6808      	ldr	r0, [r1, #0]
  401a70:	b140      	cbz	r0, 401a84 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  401a72:	6889      	ldr	r1, [r1, #8]
  401a74:	f7ff ffce 	bl	401a14 <pwm_clocks_generate>
  401a78:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  401a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401a7e:	4298      	cmp	r0, r3
  401a80:	d101      	bne.n	401a86 <pwm_init+0x1e>
  401a82:	e00e      	b.n	401aa2 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  401a84:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401a86:	6860      	ldr	r0, [r4, #4]
  401a88:	b140      	cbz	r0, 401a9c <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401a8a:	68a1      	ldr	r1, [r4, #8]
  401a8c:	f7ff ffc2 	bl	401a14 <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  401a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401a94:	4298      	cmp	r0, r3
  401a96:	d007      	beq.n	401aa8 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  401a98:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  401a9c:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  401a9e:	2000      	movs	r0, #0
  401aa0:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401aa2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401aa6:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401aa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  401aac:	bd70      	pop	{r4, r5, r6, pc}
  401aae:	bf00      	nop

00401ab0 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401ab0:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  401ab2:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401ab4:	684a      	ldr	r2, [r1, #4]
  401ab6:	f002 020f 	and.w	r2, r2, #15
  401aba:	8a8c      	ldrh	r4, [r1, #20]
  401abc:	4322      	orrs	r2, r4
  401abe:	890c      	ldrh	r4, [r1, #8]
  401ac0:	4322      	orrs	r2, r4
  401ac2:	7a8c      	ldrb	r4, [r1, #10]
  401ac4:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  401ac8:	7d8c      	ldrb	r4, [r1, #22]
  401aca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  401ace:	7dcc      	ldrb	r4, [r1, #23]
  401ad0:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  401ad4:	7e0c      	ldrb	r4, [r1, #24]
  401ad6:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  401ada:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401ade:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  401ae2:	68ca      	ldr	r2, [r1, #12]
  401ae4:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  401ae8:	690a      	ldr	r2, [r1, #16]
  401aea:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  401aee:	7d8a      	ldrb	r2, [r1, #22]
  401af0:	b13a      	cbz	r2, 401b02 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  401af2:	8b8c      	ldrh	r4, [r1, #28]
  401af4:	8b4a      	ldrh	r2, [r1, #26]
  401af6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  401afa:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  401afe:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  401b02:	6c84      	ldr	r4, [r0, #72]	; 0x48
  401b04:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  401b08:	409a      	lsls	r2, r3
  401b0a:	43d2      	mvns	r2, r2
  401b0c:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401b10:	7fcc      	ldrb	r4, [r1, #31]
  401b12:	fa04 f603 	lsl.w	r6, r4, r3
  401b16:	7f8c      	ldrb	r4, [r1, #30]
  401b18:	409c      	lsls	r4, r3
  401b1a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  401b1e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401b20:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  401b22:	6c44      	ldr	r4, [r0, #68]	; 0x44
  401b24:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  401b26:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  401b2a:	fa04 f503 	lsl.w	r5, r4, r3
  401b2e:	f891 4020 	ldrb.w	r4, [r1, #32]
  401b32:	409c      	lsls	r4, r3
  401b34:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401b38:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401b3a:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  401b3c:	2201      	movs	r2, #1
  401b3e:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  401b40:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  401b44:	b11c      	cbz	r4, 401b4e <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  401b46:	6a04      	ldr	r4, [r0, #32]
  401b48:	4314      	orrs	r4, r2
  401b4a:	6204      	str	r4, [r0, #32]
  401b4c:	e003      	b.n	401b56 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  401b4e:	6a04      	ldr	r4, [r0, #32]
  401b50:	ea24 0402 	bic.w	r4, r4, r2
  401b54:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  401b56:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  401b5a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  401b5c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401b5e:	bf0c      	ite	eq
  401b60:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  401b62:	4394      	bicne	r4, r2
  401b64:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401b66:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  401b6a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  401b6c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401b6e:	bf0c      	ite	eq
  401b70:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  401b74:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  401b78:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401b7a:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401b7c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  401b7e:	22ff      	movs	r2, #255	; 0xff
  401b80:	409a      	lsls	r2, r3
  401b82:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401b86:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  401b8a:	fa01 f303 	lsl.w	r3, r1, r3
  401b8e:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  401b90:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  401b92:	2000      	movs	r0, #0
  401b94:	bc70      	pop	{r4, r5, r6}
  401b96:	4770      	bx	lr

00401b98 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401b98:	690b      	ldr	r3, [r1, #16]
  401b9a:	4293      	cmp	r3, r2
  401b9c:	d307      	bcc.n	401bae <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  401b9e:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401ba0:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401ba2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401ba6:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  401baa:	2000      	movs	r0, #0
  401bac:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  401bae:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  401bb2:	4770      	bx	lr

00401bb4 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  401bb4:	2301      	movs	r3, #1
  401bb6:	fa03 f101 	lsl.w	r1, r3, r1
  401bba:	6041      	str	r1, [r0, #4]
  401bbc:	4770      	bx	lr
  401bbe:	bf00      	nop

00401bc0 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  401bc0:	2301      	movs	r3, #1
  401bc2:	fa03 f101 	lsl.w	r1, r3, r1
  401bc6:	6081      	str	r1, [r0, #8]
  401bc8:	4770      	bx	lr
  401bca:	bf00      	nop

00401bcc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401bcc:	e7fe      	b.n	401bcc <Dummy_Handler>
  401bce:	bf00      	nop

00401bd0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401bd0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  401bd2:	4b20      	ldr	r3, [pc, #128]	; (401c54 <Reset_Handler+0x84>)
  401bd4:	4a20      	ldr	r2, [pc, #128]	; (401c58 <Reset_Handler+0x88>)
  401bd6:	429a      	cmp	r2, r3
  401bd8:	d912      	bls.n	401c00 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  401bda:	4b20      	ldr	r3, [pc, #128]	; (401c5c <Reset_Handler+0x8c>)
  401bdc:	4a1d      	ldr	r2, [pc, #116]	; (401c54 <Reset_Handler+0x84>)
  401bde:	429a      	cmp	r2, r3
  401be0:	d21e      	bcs.n	401c20 <Reset_Handler+0x50>
  401be2:	4611      	mov	r1, r2
  401be4:	3b01      	subs	r3, #1
  401be6:	1a9b      	subs	r3, r3, r2
  401be8:	f023 0303 	bic.w	r3, r3, #3
  401bec:	3304      	adds	r3, #4
  401bee:	4a1a      	ldr	r2, [pc, #104]	; (401c58 <Reset_Handler+0x88>)
  401bf0:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  401bf2:	f852 0b04 	ldr.w	r0, [r2], #4
  401bf6:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401bfa:	429a      	cmp	r2, r3
  401bfc:	d1f9      	bne.n	401bf2 <Reset_Handler+0x22>
  401bfe:	e00f      	b.n	401c20 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401c00:	4b14      	ldr	r3, [pc, #80]	; (401c54 <Reset_Handler+0x84>)
  401c02:	4a15      	ldr	r2, [pc, #84]	; (401c58 <Reset_Handler+0x88>)
  401c04:	429a      	cmp	r2, r3
  401c06:	d20b      	bcs.n	401c20 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401c08:	4b14      	ldr	r3, [pc, #80]	; (401c5c <Reset_Handler+0x8c>)
  401c0a:	4a12      	ldr	r2, [pc, #72]	; (401c54 <Reset_Handler+0x84>)
  401c0c:	1a9a      	subs	r2, r3, r2
  401c0e:	4814      	ldr	r0, [pc, #80]	; (401c60 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401c10:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401c12:	b12a      	cbz	r2, 401c20 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  401c14:	f851 2904 	ldr.w	r2, [r1], #-4
  401c18:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401c1c:	4281      	cmp	r1, r0
  401c1e:	d1f9      	bne.n	401c14 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401c20:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401c22:	4b10      	ldr	r3, [pc, #64]	; (401c64 <Reset_Handler+0x94>)
  401c24:	4a10      	ldr	r2, [pc, #64]	; (401c68 <Reset_Handler+0x98>)
  401c26:	429a      	cmp	r2, r3
  401c28:	d20b      	bcs.n	401c42 <Reset_Handler+0x72>
  401c2a:	1d13      	adds	r3, r2, #4
  401c2c:	4a0f      	ldr	r2, [pc, #60]	; (401c6c <Reset_Handler+0x9c>)
  401c2e:	1ad2      	subs	r2, r2, r3
  401c30:	f022 0203 	bic.w	r2, r2, #3
  401c34:	441a      	add	r2, r3
  401c36:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401c38:	2100      	movs	r1, #0
  401c3a:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401c3e:	429a      	cmp	r2, r3
  401c40:	d1fb      	bne.n	401c3a <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401c42:	4b0b      	ldr	r3, [pc, #44]	; (401c70 <Reset_Handler+0xa0>)
  401c44:	4a0b      	ldr	r2, [pc, #44]	; (401c74 <Reset_Handler+0xa4>)
  401c46:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401c48:	f000 fca8 	bl	40259c <__libc_init_array>

	/* Branch to main function */
	main();
  401c4c:	f7fe fb52 	bl	4002f4 <main>
  401c50:	e7fe      	b.n	401c50 <Reset_Handler+0x80>
  401c52:	bf00      	nop
  401c54:	20000000 	.word	0x20000000
  401c58:	0040647c 	.word	0x0040647c
  401c5c:	200001e8 	.word	0x200001e8
  401c60:	00406478 	.word	0x00406478
  401c64:	200003cc 	.word	0x200003cc
  401c68:	200001e8 	.word	0x200001e8
  401c6c:	200003cf 	.word	0x200003cf
  401c70:	e000ed00 	.word	0xe000ed00
  401c74:	00400000 	.word	0x00400000

00401c78 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401c78:	4b3d      	ldr	r3, [pc, #244]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c7c:	f003 0303 	and.w	r3, r3, #3
  401c80:	2b03      	cmp	r3, #3
  401c82:	d85d      	bhi.n	401d40 <SystemCoreClockUpdate+0xc8>
  401c84:	e8df f003 	tbb	[pc, r3]
  401c88:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401c8c:	4b39      	ldr	r3, [pc, #228]	; (401d74 <SystemCoreClockUpdate+0xfc>)
  401c8e:	695b      	ldr	r3, [r3, #20]
  401c90:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401c94:	bf14      	ite	ne
  401c96:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401c9a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401c9e:	4b36      	ldr	r3, [pc, #216]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401ca0:	601a      	str	r2, [r3, #0]
  401ca2:	e04d      	b.n	401d40 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401ca4:	4b32      	ldr	r3, [pc, #200]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401ca6:	6a1b      	ldr	r3, [r3, #32]
  401ca8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401cac:	d003      	beq.n	401cb6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401cae:	4a33      	ldr	r2, [pc, #204]	; (401d7c <SystemCoreClockUpdate+0x104>)
  401cb0:	4b31      	ldr	r3, [pc, #196]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401cb2:	601a      	str	r2, [r3, #0]
  401cb4:	e044      	b.n	401d40 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401cb6:	4a32      	ldr	r2, [pc, #200]	; (401d80 <SystemCoreClockUpdate+0x108>)
  401cb8:	4b2f      	ldr	r3, [pc, #188]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401cba:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401cbc:	4b2c      	ldr	r3, [pc, #176]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401cbe:	6a1b      	ldr	r3, [r3, #32]
  401cc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cc4:	2b10      	cmp	r3, #16
  401cc6:	d002      	beq.n	401cce <SystemCoreClockUpdate+0x56>
  401cc8:	2b20      	cmp	r3, #32
  401cca:	d004      	beq.n	401cd6 <SystemCoreClockUpdate+0x5e>
  401ccc:	e038      	b.n	401d40 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401cce:	4a2d      	ldr	r2, [pc, #180]	; (401d84 <SystemCoreClockUpdate+0x10c>)
  401cd0:	4b29      	ldr	r3, [pc, #164]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401cd2:	601a      	str	r2, [r3, #0]
			break;
  401cd4:	e034      	b.n	401d40 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401cd6:	4a29      	ldr	r2, [pc, #164]	; (401d7c <SystemCoreClockUpdate+0x104>)
  401cd8:	4b27      	ldr	r3, [pc, #156]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401cda:	601a      	str	r2, [r3, #0]
			break;
  401cdc:	e030      	b.n	401d40 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401cde:	4b24      	ldr	r3, [pc, #144]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401ce0:	6a1b      	ldr	r3, [r3, #32]
  401ce2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401ce6:	d003      	beq.n	401cf0 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401ce8:	4a24      	ldr	r2, [pc, #144]	; (401d7c <SystemCoreClockUpdate+0x104>)
  401cea:	4b23      	ldr	r3, [pc, #140]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401cec:	601a      	str	r2, [r3, #0]
  401cee:	e012      	b.n	401d16 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401cf0:	4a23      	ldr	r2, [pc, #140]	; (401d80 <SystemCoreClockUpdate+0x108>)
  401cf2:	4b21      	ldr	r3, [pc, #132]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401cf4:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401cf6:	4b1e      	ldr	r3, [pc, #120]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401cf8:	6a1b      	ldr	r3, [r3, #32]
  401cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cfe:	2b10      	cmp	r3, #16
  401d00:	d002      	beq.n	401d08 <SystemCoreClockUpdate+0x90>
  401d02:	2b20      	cmp	r3, #32
  401d04:	d004      	beq.n	401d10 <SystemCoreClockUpdate+0x98>
  401d06:	e006      	b.n	401d16 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401d08:	4a1e      	ldr	r2, [pc, #120]	; (401d84 <SystemCoreClockUpdate+0x10c>)
  401d0a:	4b1b      	ldr	r3, [pc, #108]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401d0c:	601a      	str	r2, [r3, #0]
					break;
  401d0e:	e002      	b.n	401d16 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401d10:	4a1a      	ldr	r2, [pc, #104]	; (401d7c <SystemCoreClockUpdate+0x104>)
  401d12:	4b19      	ldr	r3, [pc, #100]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401d14:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401d16:	4b16      	ldr	r3, [pc, #88]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d1a:	f003 0303 	and.w	r3, r3, #3
  401d1e:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401d20:	4a13      	ldr	r2, [pc, #76]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401d22:	bf07      	ittee	eq
  401d24:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401d26:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401d28:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401d2a:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401d2c:	4812      	ldr	r0, [pc, #72]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401d2e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  401d32:	6803      	ldr	r3, [r0, #0]
  401d34:	fb01 3303 	mla	r3, r1, r3, r3
  401d38:	b2d2      	uxtb	r2, r2
  401d3a:	fbb3 f3f2 	udiv	r3, r3, r2
  401d3e:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401d40:	4b0b      	ldr	r3, [pc, #44]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d48:	2b70      	cmp	r3, #112	; 0x70
  401d4a:	d107      	bne.n	401d5c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401d4c:	4a0a      	ldr	r2, [pc, #40]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401d4e:	6813      	ldr	r3, [r2, #0]
  401d50:	490d      	ldr	r1, [pc, #52]	; (401d88 <SystemCoreClockUpdate+0x110>)
  401d52:	fba1 1303 	umull	r1, r3, r1, r3
  401d56:	085b      	lsrs	r3, r3, #1
  401d58:	6013      	str	r3, [r2, #0]
  401d5a:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401d5c:	4b04      	ldr	r3, [pc, #16]	; (401d70 <SystemCoreClockUpdate+0xf8>)
  401d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401d60:	4905      	ldr	r1, [pc, #20]	; (401d78 <SystemCoreClockUpdate+0x100>)
  401d62:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401d66:	680b      	ldr	r3, [r1, #0]
  401d68:	40d3      	lsrs	r3, r2
  401d6a:	600b      	str	r3, [r1, #0]
  401d6c:	4770      	bx	lr
  401d6e:	bf00      	nop
  401d70:	400e0400 	.word	0x400e0400
  401d74:	400e1410 	.word	0x400e1410
  401d78:	20000010 	.word	0x20000010
  401d7c:	00b71b00 	.word	0x00b71b00
  401d80:	003d0900 	.word	0x003d0900
  401d84:	007a1200 	.word	0x007a1200
  401d88:	aaaaaaab 	.word	0xaaaaaaab

00401d8c <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401d8c:	4b1a      	ldr	r3, [pc, #104]	; (401df8 <system_init_flash+0x6c>)
  401d8e:	4298      	cmp	r0, r3
  401d90:	d807      	bhi.n	401da2 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401d96:	4a19      	ldr	r2, [pc, #100]	; (401dfc <system_init_flash+0x70>)
  401d98:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d9a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401d9e:	6013      	str	r3, [r2, #0]
  401da0:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401da2:	4b17      	ldr	r3, [pc, #92]	; (401e00 <system_init_flash+0x74>)
  401da4:	4298      	cmp	r0, r3
  401da6:	d806      	bhi.n	401db6 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401da8:	4b16      	ldr	r3, [pc, #88]	; (401e04 <system_init_flash+0x78>)
  401daa:	4a14      	ldr	r2, [pc, #80]	; (401dfc <system_init_flash+0x70>)
  401dac:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401dae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401db2:	6013      	str	r3, [r2, #0]
  401db4:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401db6:	4b14      	ldr	r3, [pc, #80]	; (401e08 <system_init_flash+0x7c>)
  401db8:	4298      	cmp	r0, r3
  401dba:	d806      	bhi.n	401dca <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401dbc:	4b13      	ldr	r3, [pc, #76]	; (401e0c <system_init_flash+0x80>)
  401dbe:	4a0f      	ldr	r2, [pc, #60]	; (401dfc <system_init_flash+0x70>)
  401dc0:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401dc2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401dc6:	6013      	str	r3, [r2, #0]
  401dc8:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401dca:	4b11      	ldr	r3, [pc, #68]	; (401e10 <system_init_flash+0x84>)
  401dcc:	4298      	cmp	r0, r3
  401dce:	d806      	bhi.n	401dde <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401dd0:	4b10      	ldr	r3, [pc, #64]	; (401e14 <system_init_flash+0x88>)
  401dd2:	4a0a      	ldr	r2, [pc, #40]	; (401dfc <system_init_flash+0x70>)
  401dd4:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401dd6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401dda:	6013      	str	r3, [r2, #0]
  401ddc:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401dde:	4b0e      	ldr	r3, [pc, #56]	; (401e18 <system_init_flash+0x8c>)
  401de0:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401de2:	bf94      	ite	ls
  401de4:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401de8:	4b0c      	ldrhi	r3, [pc, #48]	; (401e1c <system_init_flash+0x90>)
  401dea:	4a04      	ldr	r2, [pc, #16]	; (401dfc <system_init_flash+0x70>)
  401dec:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401dee:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401df2:	6013      	str	r3, [r2, #0]
  401df4:	4770      	bx	lr
  401df6:	bf00      	nop
  401df8:	01312cff 	.word	0x01312cff
  401dfc:	400e0a00 	.word	0x400e0a00
  401e00:	026259ff 	.word	0x026259ff
  401e04:	04000100 	.word	0x04000100
  401e08:	039386ff 	.word	0x039386ff
  401e0c:	04000200 	.word	0x04000200
  401e10:	04c4b3ff 	.word	0x04c4b3ff
  401e14:	04000300 	.word	0x04000300
  401e18:	05f5e0ff 	.word	0x05f5e0ff
  401e1c:	04000500 	.word	0x04000500

00401e20 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401e20:	4b09      	ldr	r3, [pc, #36]	; (401e48 <_sbrk+0x28>)
  401e22:	681b      	ldr	r3, [r3, #0]
  401e24:	b913      	cbnz	r3, 401e2c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401e26:	4a09      	ldr	r2, [pc, #36]	; (401e4c <_sbrk+0x2c>)
  401e28:	4b07      	ldr	r3, [pc, #28]	; (401e48 <_sbrk+0x28>)
  401e2a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401e2c:	4b06      	ldr	r3, [pc, #24]	; (401e48 <_sbrk+0x28>)
  401e2e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401e30:	181a      	adds	r2, r3, r0
  401e32:	4907      	ldr	r1, [pc, #28]	; (401e50 <_sbrk+0x30>)
  401e34:	4291      	cmp	r1, r2
  401e36:	db04      	blt.n	401e42 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401e38:	4610      	mov	r0, r2
  401e3a:	4a03      	ldr	r2, [pc, #12]	; (401e48 <_sbrk+0x28>)
  401e3c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401e3e:	4618      	mov	r0, r3
  401e40:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401e46:	4770      	bx	lr
  401e48:	200002e4 	.word	0x200002e4
  401e4c:	200033d0 	.word	0x200033d0
  401e50:	20027ffc 	.word	0x20027ffc

00401e54 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401e58:	4770      	bx	lr
  401e5a:	bf00      	nop

00401e5c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401e60:	604b      	str	r3, [r1, #4]

	return 0;
}
  401e62:	2000      	movs	r0, #0
  401e64:	4770      	bx	lr
  401e66:	bf00      	nop

00401e68 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401e68:	2001      	movs	r0, #1
  401e6a:	4770      	bx	lr

00401e6c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401e6c:	2000      	movs	r0, #0
  401e6e:	4770      	bx	lr

00401e70 <atan2>:
  401e70:	f000 b85e 	b.w	401f30 <__ieee754_atan2>

00401e74 <sqrt>:
  401e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e78:	b08b      	sub	sp, #44	; 0x2c
  401e7a:	4604      	mov	r4, r0
  401e7c:	460d      	mov	r5, r1
  401e7e:	f000 f921 	bl	4020c4 <__ieee754_sqrt>
  401e82:	4b28      	ldr	r3, [pc, #160]	; (401f24 <sqrt+0xb0>)
  401e84:	f993 a000 	ldrsb.w	sl, [r3]
  401e88:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  401e8c:	4606      	mov	r6, r0
  401e8e:	460f      	mov	r7, r1
  401e90:	d012      	beq.n	401eb8 <sqrt+0x44>
  401e92:	4622      	mov	r2, r4
  401e94:	462b      	mov	r3, r5
  401e96:	4620      	mov	r0, r4
  401e98:	4629      	mov	r1, r5
  401e9a:	f003 fc99 	bl	4057d0 <__aeabi_dcmpun>
  401e9e:	4683      	mov	fp, r0
  401ea0:	b950      	cbnz	r0, 401eb8 <sqrt+0x44>
  401ea2:	f04f 0800 	mov.w	r8, #0
  401ea6:	f04f 0900 	mov.w	r9, #0
  401eaa:	4642      	mov	r2, r8
  401eac:	464b      	mov	r3, r9
  401eae:	4620      	mov	r0, r4
  401eb0:	4629      	mov	r1, r5
  401eb2:	f003 fc65 	bl	405780 <__aeabi_dcmplt>
  401eb6:	b920      	cbnz	r0, 401ec2 <sqrt+0x4e>
  401eb8:	4630      	mov	r0, r6
  401eba:	4639      	mov	r1, r7
  401ebc:	b00b      	add	sp, #44	; 0x2c
  401ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ec2:	4b19      	ldr	r3, [pc, #100]	; (401f28 <sqrt+0xb4>)
  401ec4:	f8cd b020 	str.w	fp, [sp, #32]
  401ec8:	2201      	movs	r2, #1
  401eca:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401ece:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401ed2:	e88d 000c 	stmia.w	sp, {r2, r3}
  401ed6:	f1ba 0f00 	cmp.w	sl, #0
  401eda:	d015      	beq.n	401f08 <sqrt+0x94>
  401edc:	4642      	mov	r2, r8
  401ede:	464b      	mov	r3, r9
  401ee0:	4640      	mov	r0, r8
  401ee2:	4649      	mov	r1, r9
  401ee4:	f003 fb04 	bl	4054f0 <__aeabi_ddiv>
  401ee8:	f1ba 0f02 	cmp.w	sl, #2
  401eec:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401ef0:	d10c      	bne.n	401f0c <sqrt+0x98>
  401ef2:	f000 fb4d 	bl	402590 <__errno>
  401ef6:	2321      	movs	r3, #33	; 0x21
  401ef8:	6003      	str	r3, [r0, #0]
  401efa:	9b08      	ldr	r3, [sp, #32]
  401efc:	b963      	cbnz	r3, 401f18 <sqrt+0xa4>
  401efe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  401f02:	b00b      	add	sp, #44	; 0x2c
  401f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f08:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401f0c:	4668      	mov	r0, sp
  401f0e:	f000 fb3d 	bl	40258c <matherr>
  401f12:	2800      	cmp	r0, #0
  401f14:	d1f1      	bne.n	401efa <sqrt+0x86>
  401f16:	e7ec      	b.n	401ef2 <sqrt+0x7e>
  401f18:	f000 fb3a 	bl	402590 <__errno>
  401f1c:	9b08      	ldr	r3, [sp, #32]
  401f1e:	6003      	str	r3, [r0, #0]
  401f20:	e7ed      	b.n	401efe <sqrt+0x8a>
  401f22:	bf00      	nop
  401f24:	20000014 	.word	0x20000014
  401f28:	00406148 	.word	0x00406148
  401f2c:	00000000 	.word	0x00000000

00401f30 <__ieee754_atan2>:
  401f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f34:	4254      	negs	r4, r2
  401f36:	4314      	orrs	r4, r2
  401f38:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  401f3c:	f8df e180 	ldr.w	lr, [pc, #384]	; 4020c0 <__ieee754_atan2+0x190>
  401f40:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  401f44:	4574      	cmp	r4, lr
  401f46:	4606      	mov	r6, r0
  401f48:	460d      	mov	r5, r1
  401f4a:	d83e      	bhi.n	401fca <__ieee754_atan2+0x9a>
  401f4c:	4244      	negs	r4, r0
  401f4e:	4304      	orrs	r4, r0
  401f50:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  401f54:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  401f58:	4574      	cmp	r4, lr
  401f5a:	468a      	mov	sl, r1
  401f5c:	d835      	bhi.n	401fca <__ieee754_atan2+0x9a>
  401f5e:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  401f62:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  401f66:	4314      	orrs	r4, r2
  401f68:	d044      	beq.n	401ff4 <__ieee754_atan2+0xc4>
  401f6a:	179c      	asrs	r4, r3, #30
  401f6c:	f004 0402 	and.w	r4, r4, #2
  401f70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  401f74:	ea50 010b 	orrs.w	r1, r0, fp
  401f78:	d02f      	beq.n	401fda <__ieee754_atan2+0xaa>
  401f7a:	ea52 0109 	orrs.w	r1, r2, r9
  401f7e:	d033      	beq.n	401fe8 <__ieee754_atan2+0xb8>
  401f80:	45f1      	cmp	r9, lr
  401f82:	d046      	beq.n	402012 <__ieee754_atan2+0xe2>
  401f84:	45f3      	cmp	fp, lr
  401f86:	d02f      	beq.n	401fe8 <__ieee754_atan2+0xb8>
  401f88:	ebc9 090b 	rsb	r9, r9, fp
  401f8c:	ea4f 5929 	mov.w	r9, r9, asr #20
  401f90:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  401f94:	dc34      	bgt.n	402000 <__ieee754_atan2+0xd0>
  401f96:	2b00      	cmp	r3, #0
  401f98:	db57      	blt.n	40204a <__ieee754_atan2+0x11a>
  401f9a:	4630      	mov	r0, r6
  401f9c:	4629      	mov	r1, r5
  401f9e:	f003 faa7 	bl	4054f0 <__aeabi_ddiv>
  401fa2:	f000 faef 	bl	402584 <fabs>
  401fa6:	f000 f94f 	bl	402248 <atan>
  401faa:	2c01      	cmp	r4, #1
  401fac:	d04a      	beq.n	402044 <__ieee754_atan2+0x114>
  401fae:	2c02      	cmp	r4, #2
  401fb0:	d03b      	beq.n	40202a <__ieee754_atan2+0xfa>
  401fb2:	b184      	cbz	r4, 401fd6 <__ieee754_atan2+0xa6>
  401fb4:	a332      	add	r3, pc, #200	; (adr r3, 402080 <__ieee754_atan2+0x150>)
  401fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
  401fba:	f002 ffbb 	bl	404f34 <__aeabi_dsub>
  401fbe:	a332      	add	r3, pc, #200	; (adr r3, 402088 <__ieee754_atan2+0x158>)
  401fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
  401fc4:	f002 ffb6 	bl	404f34 <__aeabi_dsub>
  401fc8:	e005      	b.n	401fd6 <__ieee754_atan2+0xa6>
  401fca:	4610      	mov	r0, r2
  401fcc:	4619      	mov	r1, r3
  401fce:	4632      	mov	r2, r6
  401fd0:	462b      	mov	r3, r5
  401fd2:	f002 ffb1 	bl	404f38 <__adddf3>
  401fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fda:	2c02      	cmp	r4, #2
  401fdc:	d014      	beq.n	402008 <__ieee754_atan2+0xd8>
  401fde:	2c03      	cmp	r4, #3
  401fe0:	d10c      	bne.n	401ffc <__ieee754_atan2+0xcc>
  401fe2:	482d      	ldr	r0, [pc, #180]	; (402098 <__ieee754_atan2+0x168>)
  401fe4:	492d      	ldr	r1, [pc, #180]	; (40209c <__ieee754_atan2+0x16c>)
  401fe6:	e7f6      	b.n	401fd6 <__ieee754_atan2+0xa6>
  401fe8:	f1ba 0f00 	cmp.w	sl, #0
  401fec:	482a      	ldr	r0, [pc, #168]	; (402098 <__ieee754_atan2+0x168>)
  401fee:	db0e      	blt.n	40200e <__ieee754_atan2+0xde>
  401ff0:	492b      	ldr	r1, [pc, #172]	; (4020a0 <__ieee754_atan2+0x170>)
  401ff2:	e7f0      	b.n	401fd6 <__ieee754_atan2+0xa6>
  401ff4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ff8:	f000 b926 	b.w	402248 <atan>
  401ffc:	4629      	mov	r1, r5
  401ffe:	e7ea      	b.n	401fd6 <__ieee754_atan2+0xa6>
  402000:	a123      	add	r1, pc, #140	; (adr r1, 402090 <__ieee754_atan2+0x160>)
  402002:	e9d1 0100 	ldrd	r0, r1, [r1]
  402006:	e7d0      	b.n	401faa <__ieee754_atan2+0x7a>
  402008:	4823      	ldr	r0, [pc, #140]	; (402098 <__ieee754_atan2+0x168>)
  40200a:	4926      	ldr	r1, [pc, #152]	; (4020a4 <__ieee754_atan2+0x174>)
  40200c:	e7e3      	b.n	401fd6 <__ieee754_atan2+0xa6>
  40200e:	4926      	ldr	r1, [pc, #152]	; (4020a8 <__ieee754_atan2+0x178>)
  402010:	e7e1      	b.n	401fd6 <__ieee754_atan2+0xa6>
  402012:	45cb      	cmp	fp, r9
  402014:	d01f      	beq.n	402056 <__ieee754_atan2+0x126>
  402016:	2c02      	cmp	r4, #2
  402018:	d0f6      	beq.n	402008 <__ieee754_atan2+0xd8>
  40201a:	2c03      	cmp	r4, #3
  40201c:	d0e1      	beq.n	401fe2 <__ieee754_atan2+0xb2>
  40201e:	2c01      	cmp	r4, #1
  402020:	f04f 0000 	mov.w	r0, #0
  402024:	d020      	beq.n	402068 <__ieee754_atan2+0x138>
  402026:	4601      	mov	r1, r0
  402028:	e7d5      	b.n	401fd6 <__ieee754_atan2+0xa6>
  40202a:	a315      	add	r3, pc, #84	; (adr r3, 402080 <__ieee754_atan2+0x150>)
  40202c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402030:	f002 ff80 	bl	404f34 <__aeabi_dsub>
  402034:	4602      	mov	r2, r0
  402036:	460b      	mov	r3, r1
  402038:	a113      	add	r1, pc, #76	; (adr r1, 402088 <__ieee754_atan2+0x158>)
  40203a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40203e:	f002 ff79 	bl	404f34 <__aeabi_dsub>
  402042:	e7c8      	b.n	401fd6 <__ieee754_atan2+0xa6>
  402044:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402048:	e7c5      	b.n	401fd6 <__ieee754_atan2+0xa6>
  40204a:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  40204e:	daa4      	bge.n	401f9a <__ieee754_atan2+0x6a>
  402050:	2000      	movs	r0, #0
  402052:	2100      	movs	r1, #0
  402054:	e7a9      	b.n	401faa <__ieee754_atan2+0x7a>
  402056:	2c02      	cmp	r4, #2
  402058:	d00e      	beq.n	402078 <__ieee754_atan2+0x148>
  40205a:	2c03      	cmp	r4, #3
  40205c:	d009      	beq.n	402072 <__ieee754_atan2+0x142>
  40205e:	2c01      	cmp	r4, #1
  402060:	480d      	ldr	r0, [pc, #52]	; (402098 <__ieee754_atan2+0x168>)
  402062:	d004      	beq.n	40206e <__ieee754_atan2+0x13e>
  402064:	4911      	ldr	r1, [pc, #68]	; (4020ac <__ieee754_atan2+0x17c>)
  402066:	e7b6      	b.n	401fd6 <__ieee754_atan2+0xa6>
  402068:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40206c:	e7b3      	b.n	401fd6 <__ieee754_atan2+0xa6>
  40206e:	4910      	ldr	r1, [pc, #64]	; (4020b0 <__ieee754_atan2+0x180>)
  402070:	e7b1      	b.n	401fd6 <__ieee754_atan2+0xa6>
  402072:	4810      	ldr	r0, [pc, #64]	; (4020b4 <__ieee754_atan2+0x184>)
  402074:	4910      	ldr	r1, [pc, #64]	; (4020b8 <__ieee754_atan2+0x188>)
  402076:	e7ae      	b.n	401fd6 <__ieee754_atan2+0xa6>
  402078:	480e      	ldr	r0, [pc, #56]	; (4020b4 <__ieee754_atan2+0x184>)
  40207a:	4910      	ldr	r1, [pc, #64]	; (4020bc <__ieee754_atan2+0x18c>)
  40207c:	e7ab      	b.n	401fd6 <__ieee754_atan2+0xa6>
  40207e:	bf00      	nop
  402080:	33145c07 	.word	0x33145c07
  402084:	3ca1a626 	.word	0x3ca1a626
  402088:	54442d18 	.word	0x54442d18
  40208c:	400921fb 	.word	0x400921fb
  402090:	54442d18 	.word	0x54442d18
  402094:	3ff921fb 	.word	0x3ff921fb
  402098:	54442d18 	.word	0x54442d18
  40209c:	c00921fb 	.word	0xc00921fb
  4020a0:	3ff921fb 	.word	0x3ff921fb
  4020a4:	400921fb 	.word	0x400921fb
  4020a8:	bff921fb 	.word	0xbff921fb
  4020ac:	3fe921fb 	.word	0x3fe921fb
  4020b0:	bfe921fb 	.word	0xbfe921fb
  4020b4:	7f3321d2 	.word	0x7f3321d2
  4020b8:	c002d97c 	.word	0xc002d97c
  4020bc:	4002d97c 	.word	0x4002d97c
  4020c0:	7ff00000 	.word	0x7ff00000

004020c4 <__ieee754_sqrt>:
  4020c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4020c8:	4e5d      	ldr	r6, [pc, #372]	; (402240 <__ieee754_sqrt+0x17c>)
  4020ca:	46b6      	mov	lr, r6
  4020cc:	400e      	ands	r6, r1
  4020ce:	4576      	cmp	r6, lr
  4020d0:	460c      	mov	r4, r1
  4020d2:	4605      	mov	r5, r0
  4020d4:	f000 8095 	beq.w	402202 <__ieee754_sqrt+0x13e>
  4020d8:	2900      	cmp	r1, #0
  4020da:	460b      	mov	r3, r1
  4020dc:	4602      	mov	r2, r0
  4020de:	dd73      	ble.n	4021c8 <__ieee754_sqrt+0x104>
  4020e0:	150f      	asrs	r7, r1, #20
  4020e2:	d07e      	beq.n	4021e2 <__ieee754_sqrt+0x11e>
  4020e4:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4020e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4020ec:	07f8      	lsls	r0, r7, #31
  4020ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4020f2:	d464      	bmi.n	4021be <__ieee754_sqrt+0xfa>
  4020f4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4020f8:	2600      	movs	r6, #0
  4020fa:	440b      	add	r3, r1
  4020fc:	107f      	asrs	r7, r7, #1
  4020fe:	0052      	lsls	r2, r2, #1
  402100:	46b6      	mov	lr, r6
  402102:	2016      	movs	r0, #22
  402104:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402108:	eb0e 0401 	add.w	r4, lr, r1
  40210c:	429c      	cmp	r4, r3
  40210e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  402112:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402116:	dc03      	bgt.n	402120 <__ieee754_sqrt+0x5c>
  402118:	1b1b      	subs	r3, r3, r4
  40211a:	eb04 0e01 	add.w	lr, r4, r1
  40211e:	440e      	add	r6, r1
  402120:	3801      	subs	r0, #1
  402122:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  402126:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40212a:	d1ed      	bne.n	402108 <__ieee754_sqrt+0x44>
  40212c:	4684      	mov	ip, r0
  40212e:	2420      	movs	r4, #32
  402130:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402134:	e009      	b.n	40214a <__ieee754_sqrt+0x86>
  402136:	d020      	beq.n	40217a <__ieee754_sqrt+0xb6>
  402138:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40213c:	3c01      	subs	r4, #1
  40213e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402142:	442b      	add	r3, r5
  402144:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402148:	d020      	beq.n	40218c <__ieee754_sqrt+0xc8>
  40214a:	459e      	cmp	lr, r3
  40214c:	eb01 050c 	add.w	r5, r1, ip
  402150:	daf1      	bge.n	402136 <__ieee754_sqrt+0x72>
  402152:	2d00      	cmp	r5, #0
  402154:	eb05 0c01 	add.w	ip, r5, r1
  402158:	db09      	blt.n	40216e <__ieee754_sqrt+0xaa>
  40215a:	46f0      	mov	r8, lr
  40215c:	4295      	cmp	r5, r2
  40215e:	ebce 0303 	rsb	r3, lr, r3
  402162:	d900      	bls.n	402166 <__ieee754_sqrt+0xa2>
  402164:	3b01      	subs	r3, #1
  402166:	1b52      	subs	r2, r2, r5
  402168:	4408      	add	r0, r1
  40216a:	46c6      	mov	lr, r8
  40216c:	e7e4      	b.n	402138 <__ieee754_sqrt+0x74>
  40216e:	f1bc 0f00 	cmp.w	ip, #0
  402172:	dbf2      	blt.n	40215a <__ieee754_sqrt+0x96>
  402174:	f10e 0801 	add.w	r8, lr, #1
  402178:	e7f0      	b.n	40215c <__ieee754_sqrt+0x98>
  40217a:	4295      	cmp	r5, r2
  40217c:	d817      	bhi.n	4021ae <__ieee754_sqrt+0xea>
  40217e:	2d00      	cmp	r5, #0
  402180:	eb05 0c01 	add.w	ip, r5, r1
  402184:	db47      	blt.n	402216 <__ieee754_sqrt+0x152>
  402186:	4698      	mov	r8, r3
  402188:	2300      	movs	r3, #0
  40218a:	e7ec      	b.n	402166 <__ieee754_sqrt+0xa2>
  40218c:	4313      	orrs	r3, r2
  40218e:	d110      	bne.n	4021b2 <__ieee754_sqrt+0xee>
  402190:	0840      	lsrs	r0, r0, #1
  402192:	1073      	asrs	r3, r6, #1
  402194:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402198:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40219c:	07f2      	lsls	r2, r6, #31
  40219e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  4021a2:	bf48      	it	mi
  4021a4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  4021a8:	4649      	mov	r1, r9
  4021aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4021ae:	4673      	mov	r3, lr
  4021b0:	e7c2      	b.n	402138 <__ieee754_sqrt+0x74>
  4021b2:	1c41      	adds	r1, r0, #1
  4021b4:	d033      	beq.n	40221e <__ieee754_sqrt+0x15a>
  4021b6:	f000 0301 	and.w	r3, r0, #1
  4021ba:	4418      	add	r0, r3
  4021bc:	e7e8      	b.n	402190 <__ieee754_sqrt+0xcc>
  4021be:	005b      	lsls	r3, r3, #1
  4021c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4021c4:	0052      	lsls	r2, r2, #1
  4021c6:	e795      	b.n	4020f4 <__ieee754_sqrt+0x30>
  4021c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4021cc:	4306      	orrs	r6, r0
  4021ce:	d0ec      	beq.n	4021aa <__ieee754_sqrt+0xe6>
  4021d0:	bb69      	cbnz	r1, 40222e <__ieee754_sqrt+0x16a>
  4021d2:	460f      	mov	r7, r1
  4021d4:	0ad3      	lsrs	r3, r2, #11
  4021d6:	3f15      	subs	r7, #21
  4021d8:	0552      	lsls	r2, r2, #21
  4021da:	2b00      	cmp	r3, #0
  4021dc:	d0fa      	beq.n	4021d4 <__ieee754_sqrt+0x110>
  4021de:	02dd      	lsls	r5, r3, #11
  4021e0:	d420      	bmi.n	402224 <__ieee754_sqrt+0x160>
  4021e2:	2100      	movs	r1, #0
  4021e4:	e000      	b.n	4021e8 <__ieee754_sqrt+0x124>
  4021e6:	4601      	mov	r1, r0
  4021e8:	005b      	lsls	r3, r3, #1
  4021ea:	02dc      	lsls	r4, r3, #11
  4021ec:	f101 0001 	add.w	r0, r1, #1
  4021f0:	d5f9      	bpl.n	4021e6 <__ieee754_sqrt+0x122>
  4021f2:	f1c0 0420 	rsb	r4, r0, #32
  4021f6:	fa22 f404 	lsr.w	r4, r2, r4
  4021fa:	4323      	orrs	r3, r4
  4021fc:	1a7f      	subs	r7, r7, r1
  4021fe:	4082      	lsls	r2, r0
  402200:	e770      	b.n	4020e4 <__ieee754_sqrt+0x20>
  402202:	4602      	mov	r2, r0
  402204:	460b      	mov	r3, r1
  402206:	f003 f849 	bl	40529c <__aeabi_dmul>
  40220a:	462a      	mov	r2, r5
  40220c:	4623      	mov	r3, r4
  40220e:	f002 fe93 	bl	404f38 <__adddf3>
  402212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402216:	f1bc 0f00 	cmp.w	ip, #0
  40221a:	daab      	bge.n	402174 <__ieee754_sqrt+0xb0>
  40221c:	e7b3      	b.n	402186 <__ieee754_sqrt+0xc2>
  40221e:	3601      	adds	r6, #1
  402220:	4620      	mov	r0, r4
  402222:	e7b6      	b.n	402192 <__ieee754_sqrt+0xce>
  402224:	2420      	movs	r4, #32
  402226:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  40222a:	2000      	movs	r0, #0
  40222c:	e7e3      	b.n	4021f6 <__ieee754_sqrt+0x132>
  40222e:	4602      	mov	r2, r0
  402230:	460b      	mov	r3, r1
  402232:	f002 fe7f 	bl	404f34 <__aeabi_dsub>
  402236:	4602      	mov	r2, r0
  402238:	460b      	mov	r3, r1
  40223a:	f003 f959 	bl	4054f0 <__aeabi_ddiv>
  40223e:	e7b4      	b.n	4021aa <__ieee754_sqrt+0xe6>
  402240:	7ff00000 	.word	0x7ff00000
  402244:	00000000 	.word	0x00000000

00402248 <atan>:
  402248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40224c:	4bc0      	ldr	r3, [pc, #768]	; (402550 <atan+0x308>)
  40224e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  402252:	429e      	cmp	r6, r3
  402254:	460d      	mov	r5, r1
  402256:	468a      	mov	sl, r1
  402258:	4604      	mov	r4, r0
  40225a:	dd0f      	ble.n	40227c <atan+0x34>
  40225c:	4bbd      	ldr	r3, [pc, #756]	; (402554 <atan+0x30c>)
  40225e:	429e      	cmp	r6, r3
  402260:	f300 80b2 	bgt.w	4023c8 <atan+0x180>
  402264:	f000 80ad 	beq.w	4023c2 <atan+0x17a>
  402268:	4bbb      	ldr	r3, [pc, #748]	; (402558 <atan+0x310>)
  40226a:	49bc      	ldr	r1, [pc, #752]	; (40255c <atan+0x314>)
  40226c:	4cbc      	ldr	r4, [pc, #752]	; (402560 <atan+0x318>)
  40226e:	f1ba 0f00 	cmp.w	sl, #0
  402272:	bfc8      	it	gt
  402274:	4619      	movgt	r1, r3
  402276:	4620      	mov	r0, r4
  402278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40227c:	4bb9      	ldr	r3, [pc, #740]	; (402564 <atan+0x31c>)
  40227e:	429e      	cmp	r6, r3
  402280:	f300 80bc 	bgt.w	4023fc <atan+0x1b4>
  402284:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  402288:	429e      	cmp	r6, r3
  40228a:	f340 80a7 	ble.w	4023dc <atan+0x194>
  40228e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  402292:	4622      	mov	r2, r4
  402294:	462b      	mov	r3, r5
  402296:	4620      	mov	r0, r4
  402298:	4629      	mov	r1, r5
  40229a:	f002 ffff 	bl	40529c <__aeabi_dmul>
  40229e:	4602      	mov	r2, r0
  4022a0:	460b      	mov	r3, r1
  4022a2:	4680      	mov	r8, r0
  4022a4:	4689      	mov	r9, r1
  4022a6:	f002 fff9 	bl	40529c <__aeabi_dmul>
  4022aa:	a391      	add	r3, pc, #580	; (adr r3, 4024f0 <atan+0x2a8>)
  4022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022b0:	4606      	mov	r6, r0
  4022b2:	460f      	mov	r7, r1
  4022b4:	f002 fff2 	bl	40529c <__aeabi_dmul>
  4022b8:	a38f      	add	r3, pc, #572	; (adr r3, 4024f8 <atan+0x2b0>)
  4022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022be:	f002 fe3b 	bl	404f38 <__adddf3>
  4022c2:	4632      	mov	r2, r6
  4022c4:	463b      	mov	r3, r7
  4022c6:	f002 ffe9 	bl	40529c <__aeabi_dmul>
  4022ca:	a38d      	add	r3, pc, #564	; (adr r3, 402500 <atan+0x2b8>)
  4022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022d0:	f002 fe32 	bl	404f38 <__adddf3>
  4022d4:	4632      	mov	r2, r6
  4022d6:	463b      	mov	r3, r7
  4022d8:	f002 ffe0 	bl	40529c <__aeabi_dmul>
  4022dc:	a38a      	add	r3, pc, #552	; (adr r3, 402508 <atan+0x2c0>)
  4022de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022e2:	f002 fe29 	bl	404f38 <__adddf3>
  4022e6:	4632      	mov	r2, r6
  4022e8:	463b      	mov	r3, r7
  4022ea:	f002 ffd7 	bl	40529c <__aeabi_dmul>
  4022ee:	a388      	add	r3, pc, #544	; (adr r3, 402510 <atan+0x2c8>)
  4022f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4022f4:	f002 fe20 	bl	404f38 <__adddf3>
  4022f8:	4632      	mov	r2, r6
  4022fa:	463b      	mov	r3, r7
  4022fc:	f002 ffce 	bl	40529c <__aeabi_dmul>
  402300:	a385      	add	r3, pc, #532	; (adr r3, 402518 <atan+0x2d0>)
  402302:	e9d3 2300 	ldrd	r2, r3, [r3]
  402306:	f002 fe17 	bl	404f38 <__adddf3>
  40230a:	4642      	mov	r2, r8
  40230c:	464b      	mov	r3, r9
  40230e:	f002 ffc5 	bl	40529c <__aeabi_dmul>
  402312:	a383      	add	r3, pc, #524	; (adr r3, 402520 <atan+0x2d8>)
  402314:	e9d3 2300 	ldrd	r2, r3, [r3]
  402318:	4680      	mov	r8, r0
  40231a:	4689      	mov	r9, r1
  40231c:	4630      	mov	r0, r6
  40231e:	4639      	mov	r1, r7
  402320:	f002 ffbc 	bl	40529c <__aeabi_dmul>
  402324:	a380      	add	r3, pc, #512	; (adr r3, 402528 <atan+0x2e0>)
  402326:	e9d3 2300 	ldrd	r2, r3, [r3]
  40232a:	f002 fe03 	bl	404f34 <__aeabi_dsub>
  40232e:	4632      	mov	r2, r6
  402330:	463b      	mov	r3, r7
  402332:	f002 ffb3 	bl	40529c <__aeabi_dmul>
  402336:	a37e      	add	r3, pc, #504	; (adr r3, 402530 <atan+0x2e8>)
  402338:	e9d3 2300 	ldrd	r2, r3, [r3]
  40233c:	f002 fdfa 	bl	404f34 <__aeabi_dsub>
  402340:	4632      	mov	r2, r6
  402342:	463b      	mov	r3, r7
  402344:	f002 ffaa 	bl	40529c <__aeabi_dmul>
  402348:	a37b      	add	r3, pc, #492	; (adr r3, 402538 <atan+0x2f0>)
  40234a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40234e:	f002 fdf1 	bl	404f34 <__aeabi_dsub>
  402352:	4632      	mov	r2, r6
  402354:	463b      	mov	r3, r7
  402356:	f002 ffa1 	bl	40529c <__aeabi_dmul>
  40235a:	a379      	add	r3, pc, #484	; (adr r3, 402540 <atan+0x2f8>)
  40235c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402360:	f002 fde8 	bl	404f34 <__aeabi_dsub>
  402364:	4632      	mov	r2, r6
  402366:	463b      	mov	r3, r7
  402368:	f002 ff98 	bl	40529c <__aeabi_dmul>
  40236c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402370:	4602      	mov	r2, r0
  402372:	460b      	mov	r3, r1
  402374:	d069      	beq.n	40244a <atan+0x202>
  402376:	4640      	mov	r0, r8
  402378:	4649      	mov	r1, r9
  40237a:	f002 fddd 	bl	404f38 <__adddf3>
  40237e:	4622      	mov	r2, r4
  402380:	462b      	mov	r3, r5
  402382:	f002 ff8b 	bl	40529c <__aeabi_dmul>
  402386:	4e78      	ldr	r6, [pc, #480]	; (402568 <atan+0x320>)
  402388:	4b78      	ldr	r3, [pc, #480]	; (40256c <atan+0x324>)
  40238a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  40238e:	445e      	add	r6, fp
  402390:	449b      	add	fp, r3
  402392:	e9db 2300 	ldrd	r2, r3, [fp]
  402396:	f002 fdcd 	bl	404f34 <__aeabi_dsub>
  40239a:	4622      	mov	r2, r4
  40239c:	462b      	mov	r3, r5
  40239e:	f002 fdc9 	bl	404f34 <__aeabi_dsub>
  4023a2:	4602      	mov	r2, r0
  4023a4:	460b      	mov	r3, r1
  4023a6:	e9d6 0100 	ldrd	r0, r1, [r6]
  4023aa:	f002 fdc3 	bl	404f34 <__aeabi_dsub>
  4023ae:	f1ba 0f00 	cmp.w	sl, #0
  4023b2:	4604      	mov	r4, r0
  4023b4:	f6bf af5f 	bge.w	402276 <atan+0x2e>
  4023b8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4023bc:	4620      	mov	r0, r4
  4023be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023c2:	2800      	cmp	r0, #0
  4023c4:	f43f af50 	beq.w	402268 <atan+0x20>
  4023c8:	4622      	mov	r2, r4
  4023ca:	4620      	mov	r0, r4
  4023cc:	462b      	mov	r3, r5
  4023ce:	4629      	mov	r1, r5
  4023d0:	f002 fdb2 	bl	404f38 <__adddf3>
  4023d4:	4604      	mov	r4, r0
  4023d6:	4620      	mov	r0, r4
  4023d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023dc:	a35a      	add	r3, pc, #360	; (adr r3, 402548 <atan+0x300>)
  4023de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4023e2:	f002 fda9 	bl	404f38 <__adddf3>
  4023e6:	2200      	movs	r2, #0
  4023e8:	4b61      	ldr	r3, [pc, #388]	; (402570 <atan+0x328>)
  4023ea:	f003 f9e7 	bl	4057bc <__aeabi_dcmpgt>
  4023ee:	2800      	cmp	r0, #0
  4023f0:	f43f af4d 	beq.w	40228e <atan+0x46>
  4023f4:	4629      	mov	r1, r5
  4023f6:	4620      	mov	r0, r4
  4023f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023fc:	f000 f8c2 	bl	402584 <fabs>
  402400:	4b5c      	ldr	r3, [pc, #368]	; (402574 <atan+0x32c>)
  402402:	429e      	cmp	r6, r3
  402404:	4604      	mov	r4, r0
  402406:	460d      	mov	r5, r1
  402408:	dc2f      	bgt.n	40246a <atan+0x222>
  40240a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  40240e:	429e      	cmp	r6, r3
  402410:	dc54      	bgt.n	4024bc <atan+0x274>
  402412:	4602      	mov	r2, r0
  402414:	460b      	mov	r3, r1
  402416:	f002 fd8f 	bl	404f38 <__adddf3>
  40241a:	2200      	movs	r2, #0
  40241c:	4b54      	ldr	r3, [pc, #336]	; (402570 <atan+0x328>)
  40241e:	f002 fd89 	bl	404f34 <__aeabi_dsub>
  402422:	2200      	movs	r2, #0
  402424:	4606      	mov	r6, r0
  402426:	460f      	mov	r7, r1
  402428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40242c:	4620      	mov	r0, r4
  40242e:	4629      	mov	r1, r5
  402430:	f002 fd82 	bl	404f38 <__adddf3>
  402434:	4602      	mov	r2, r0
  402436:	460b      	mov	r3, r1
  402438:	4630      	mov	r0, r6
  40243a:	4639      	mov	r1, r7
  40243c:	f003 f858 	bl	4054f0 <__aeabi_ddiv>
  402440:	f04f 0b00 	mov.w	fp, #0
  402444:	4604      	mov	r4, r0
  402446:	460d      	mov	r5, r1
  402448:	e723      	b.n	402292 <atan+0x4a>
  40244a:	4640      	mov	r0, r8
  40244c:	4649      	mov	r1, r9
  40244e:	f002 fd73 	bl	404f38 <__adddf3>
  402452:	4622      	mov	r2, r4
  402454:	462b      	mov	r3, r5
  402456:	f002 ff21 	bl	40529c <__aeabi_dmul>
  40245a:	4602      	mov	r2, r0
  40245c:	460b      	mov	r3, r1
  40245e:	4620      	mov	r0, r4
  402460:	4629      	mov	r1, r5
  402462:	f002 fd67 	bl	404f34 <__aeabi_dsub>
  402466:	4604      	mov	r4, r0
  402468:	e705      	b.n	402276 <atan+0x2e>
  40246a:	4b43      	ldr	r3, [pc, #268]	; (402578 <atan+0x330>)
  40246c:	429e      	cmp	r6, r3
  40246e:	dc1a      	bgt.n	4024a6 <atan+0x25e>
  402470:	2200      	movs	r2, #0
  402472:	4b42      	ldr	r3, [pc, #264]	; (40257c <atan+0x334>)
  402474:	f002 fd5e 	bl	404f34 <__aeabi_dsub>
  402478:	2200      	movs	r2, #0
  40247a:	4606      	mov	r6, r0
  40247c:	460f      	mov	r7, r1
  40247e:	4b3f      	ldr	r3, [pc, #252]	; (40257c <atan+0x334>)
  402480:	4620      	mov	r0, r4
  402482:	4629      	mov	r1, r5
  402484:	f002 ff0a 	bl	40529c <__aeabi_dmul>
  402488:	2200      	movs	r2, #0
  40248a:	4b39      	ldr	r3, [pc, #228]	; (402570 <atan+0x328>)
  40248c:	f002 fd54 	bl	404f38 <__adddf3>
  402490:	4602      	mov	r2, r0
  402492:	460b      	mov	r3, r1
  402494:	4630      	mov	r0, r6
  402496:	4639      	mov	r1, r7
  402498:	f003 f82a 	bl	4054f0 <__aeabi_ddiv>
  40249c:	f04f 0b02 	mov.w	fp, #2
  4024a0:	4604      	mov	r4, r0
  4024a2:	460d      	mov	r5, r1
  4024a4:	e6f5      	b.n	402292 <atan+0x4a>
  4024a6:	4602      	mov	r2, r0
  4024a8:	460b      	mov	r3, r1
  4024aa:	2000      	movs	r0, #0
  4024ac:	4934      	ldr	r1, [pc, #208]	; (402580 <atan+0x338>)
  4024ae:	f003 f81f 	bl	4054f0 <__aeabi_ddiv>
  4024b2:	f04f 0b03 	mov.w	fp, #3
  4024b6:	4604      	mov	r4, r0
  4024b8:	460d      	mov	r5, r1
  4024ba:	e6ea      	b.n	402292 <atan+0x4a>
  4024bc:	2200      	movs	r2, #0
  4024be:	4b2c      	ldr	r3, [pc, #176]	; (402570 <atan+0x328>)
  4024c0:	f002 fd38 	bl	404f34 <__aeabi_dsub>
  4024c4:	2200      	movs	r2, #0
  4024c6:	4606      	mov	r6, r0
  4024c8:	460f      	mov	r7, r1
  4024ca:	4b29      	ldr	r3, [pc, #164]	; (402570 <atan+0x328>)
  4024cc:	4620      	mov	r0, r4
  4024ce:	4629      	mov	r1, r5
  4024d0:	f002 fd32 	bl	404f38 <__adddf3>
  4024d4:	4602      	mov	r2, r0
  4024d6:	460b      	mov	r3, r1
  4024d8:	4630      	mov	r0, r6
  4024da:	4639      	mov	r1, r7
  4024dc:	f003 f808 	bl	4054f0 <__aeabi_ddiv>
  4024e0:	f04f 0b01 	mov.w	fp, #1
  4024e4:	4604      	mov	r4, r0
  4024e6:	460d      	mov	r5, r1
  4024e8:	e6d3      	b.n	402292 <atan+0x4a>
  4024ea:	bf00      	nop
  4024ec:	f3af 8000 	nop.w
  4024f0:	e322da11 	.word	0xe322da11
  4024f4:	3f90ad3a 	.word	0x3f90ad3a
  4024f8:	24760deb 	.word	0x24760deb
  4024fc:	3fa97b4b 	.word	0x3fa97b4b
  402500:	a0d03d51 	.word	0xa0d03d51
  402504:	3fb10d66 	.word	0x3fb10d66
  402508:	c54c206e 	.word	0xc54c206e
  40250c:	3fb745cd 	.word	0x3fb745cd
  402510:	920083ff 	.word	0x920083ff
  402514:	3fc24924 	.word	0x3fc24924
  402518:	5555550d 	.word	0x5555550d
  40251c:	3fd55555 	.word	0x3fd55555
  402520:	2c6a6c2f 	.word	0x2c6a6c2f
  402524:	bfa2b444 	.word	0xbfa2b444
  402528:	52defd9a 	.word	0x52defd9a
  40252c:	3fadde2d 	.word	0x3fadde2d
  402530:	af749a6d 	.word	0xaf749a6d
  402534:	3fb3b0f2 	.word	0x3fb3b0f2
  402538:	fe231671 	.word	0xfe231671
  40253c:	3fbc71c6 	.word	0x3fbc71c6
  402540:	9998ebc4 	.word	0x9998ebc4
  402544:	3fc99999 	.word	0x3fc99999
  402548:	8800759c 	.word	0x8800759c
  40254c:	7e37e43c 	.word	0x7e37e43c
  402550:	440fffff 	.word	0x440fffff
  402554:	7ff00000 	.word	0x7ff00000
  402558:	3ff921fb 	.word	0x3ff921fb
  40255c:	bff921fb 	.word	0xbff921fb
  402560:	54442d18 	.word	0x54442d18
  402564:	3fdbffff 	.word	0x3fdbffff
  402568:	00406170 	.word	0x00406170
  40256c:	00406150 	.word	0x00406150
  402570:	3ff00000 	.word	0x3ff00000
  402574:	3ff2ffff 	.word	0x3ff2ffff
  402578:	40037fff 	.word	0x40037fff
  40257c:	3ff80000 	.word	0x3ff80000
  402580:	bff00000 	.word	0xbff00000

00402584 <fabs>:
  402584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402588:	4770      	bx	lr
  40258a:	bf00      	nop

0040258c <matherr>:
  40258c:	2000      	movs	r0, #0
  40258e:	4770      	bx	lr

00402590 <__errno>:
  402590:	4b01      	ldr	r3, [pc, #4]	; (402598 <__errno+0x8>)
  402592:	6818      	ldr	r0, [r3, #0]
  402594:	4770      	bx	lr
  402596:	bf00      	nop
  402598:	20000078 	.word	0x20000078

0040259c <__libc_init_array>:
  40259c:	b570      	push	{r4, r5, r6, lr}
  40259e:	4b0e      	ldr	r3, [pc, #56]	; (4025d8 <__libc_init_array+0x3c>)
  4025a0:	4c0e      	ldr	r4, [pc, #56]	; (4025dc <__libc_init_array+0x40>)
  4025a2:	1ae4      	subs	r4, r4, r3
  4025a4:	10a4      	asrs	r4, r4, #2
  4025a6:	2500      	movs	r5, #0
  4025a8:	461e      	mov	r6, r3
  4025aa:	42a5      	cmp	r5, r4
  4025ac:	d004      	beq.n	4025b8 <__libc_init_array+0x1c>
  4025ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4025b2:	4798      	blx	r3
  4025b4:	3501      	adds	r5, #1
  4025b6:	e7f8      	b.n	4025aa <__libc_init_array+0xe>
  4025b8:	f003 ff4a 	bl	406450 <_init>
  4025bc:	4c08      	ldr	r4, [pc, #32]	; (4025e0 <__libc_init_array+0x44>)
  4025be:	4b09      	ldr	r3, [pc, #36]	; (4025e4 <__libc_init_array+0x48>)
  4025c0:	1ae4      	subs	r4, r4, r3
  4025c2:	10a4      	asrs	r4, r4, #2
  4025c4:	2500      	movs	r5, #0
  4025c6:	461e      	mov	r6, r3
  4025c8:	42a5      	cmp	r5, r4
  4025ca:	d004      	beq.n	4025d6 <__libc_init_array+0x3a>
  4025cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4025d0:	4798      	blx	r3
  4025d2:	3501      	adds	r5, #1
  4025d4:	e7f8      	b.n	4025c8 <__libc_init_array+0x2c>
  4025d6:	bd70      	pop	{r4, r5, r6, pc}
  4025d8:	0040645c 	.word	0x0040645c
  4025dc:	0040645c 	.word	0x0040645c
  4025e0:	00406460 	.word	0x00406460
  4025e4:	0040645c 	.word	0x0040645c

004025e8 <memset>:
  4025e8:	4402      	add	r2, r0
  4025ea:	4603      	mov	r3, r0
  4025ec:	4293      	cmp	r3, r2
  4025ee:	d002      	beq.n	4025f6 <memset+0xe>
  4025f0:	f803 1b01 	strb.w	r1, [r3], #1
  4025f4:	e7fa      	b.n	4025ec <memset+0x4>
  4025f6:	4770      	bx	lr

004025f8 <__cvt>:
  4025f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4025fc:	b088      	sub	sp, #32
  4025fe:	2b00      	cmp	r3, #0
  402600:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402602:	9912      	ldr	r1, [sp, #72]	; 0x48
  402604:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402606:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  40260a:	461e      	mov	r6, r3
  40260c:	f027 0720 	bic.w	r7, r7, #32
  402610:	bfbb      	ittet	lt
  402612:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402616:	461e      	movlt	r6, r3
  402618:	2300      	movge	r3, #0
  40261a:	232d      	movlt	r3, #45	; 0x2d
  40261c:	2f46      	cmp	r7, #70	; 0x46
  40261e:	4614      	mov	r4, r2
  402620:	700b      	strb	r3, [r1, #0]
  402622:	d003      	beq.n	40262c <__cvt+0x34>
  402624:	2f45      	cmp	r7, #69	; 0x45
  402626:	d103      	bne.n	402630 <__cvt+0x38>
  402628:	3501      	adds	r5, #1
  40262a:	e001      	b.n	402630 <__cvt+0x38>
  40262c:	2303      	movs	r3, #3
  40262e:	e000      	b.n	402632 <__cvt+0x3a>
  402630:	2302      	movs	r3, #2
  402632:	aa07      	add	r2, sp, #28
  402634:	9204      	str	r2, [sp, #16]
  402636:	aa06      	add	r2, sp, #24
  402638:	9203      	str	r2, [sp, #12]
  40263a:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  40263e:	4622      	mov	r2, r4
  402640:	4633      	mov	r3, r6
  402642:	f000 fed1 	bl	4033e8 <_dtoa_r>
  402646:	2f47      	cmp	r7, #71	; 0x47
  402648:	4680      	mov	r8, r0
  40264a:	d102      	bne.n	402652 <__cvt+0x5a>
  40264c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40264e:	07db      	lsls	r3, r3, #31
  402650:	d528      	bpl.n	4026a4 <__cvt+0xac>
  402652:	2f46      	cmp	r7, #70	; 0x46
  402654:	eb08 0905 	add.w	r9, r8, r5
  402658:	d111      	bne.n	40267e <__cvt+0x86>
  40265a:	f898 3000 	ldrb.w	r3, [r8]
  40265e:	2b30      	cmp	r3, #48	; 0x30
  402660:	d10a      	bne.n	402678 <__cvt+0x80>
  402662:	2200      	movs	r2, #0
  402664:	2300      	movs	r3, #0
  402666:	4620      	mov	r0, r4
  402668:	4631      	mov	r1, r6
  40266a:	f003 f87f 	bl	40576c <__aeabi_dcmpeq>
  40266e:	b918      	cbnz	r0, 402678 <__cvt+0x80>
  402670:	f1c5 0501 	rsb	r5, r5, #1
  402674:	f8ca 5000 	str.w	r5, [sl]
  402678:	f8da 3000 	ldr.w	r3, [sl]
  40267c:	4499      	add	r9, r3
  40267e:	2200      	movs	r2, #0
  402680:	2300      	movs	r3, #0
  402682:	4620      	mov	r0, r4
  402684:	4631      	mov	r1, r6
  402686:	f003 f871 	bl	40576c <__aeabi_dcmpeq>
  40268a:	b908      	cbnz	r0, 402690 <__cvt+0x98>
  40268c:	2230      	movs	r2, #48	; 0x30
  40268e:	e002      	b.n	402696 <__cvt+0x9e>
  402690:	f8cd 901c 	str.w	r9, [sp, #28]
  402694:	e006      	b.n	4026a4 <__cvt+0xac>
  402696:	9b07      	ldr	r3, [sp, #28]
  402698:	4599      	cmp	r9, r3
  40269a:	d903      	bls.n	4026a4 <__cvt+0xac>
  40269c:	1c59      	adds	r1, r3, #1
  40269e:	9107      	str	r1, [sp, #28]
  4026a0:	701a      	strb	r2, [r3, #0]
  4026a2:	e7f8      	b.n	402696 <__cvt+0x9e>
  4026a4:	9b07      	ldr	r3, [sp, #28]
  4026a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4026a8:	ebc8 0303 	rsb	r3, r8, r3
  4026ac:	4640      	mov	r0, r8
  4026ae:	6013      	str	r3, [r2, #0]
  4026b0:	b008      	add	sp, #32
  4026b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004026b6 <__exponent>:
  4026b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4026b8:	4603      	mov	r3, r0
  4026ba:	2900      	cmp	r1, #0
  4026bc:	bfb8      	it	lt
  4026be:	4249      	neglt	r1, r1
  4026c0:	f803 2b02 	strb.w	r2, [r3], #2
  4026c4:	bfb4      	ite	lt
  4026c6:	222d      	movlt	r2, #45	; 0x2d
  4026c8:	222b      	movge	r2, #43	; 0x2b
  4026ca:	2909      	cmp	r1, #9
  4026cc:	7042      	strb	r2, [r0, #1]
  4026ce:	dd19      	ble.n	402704 <__exponent+0x4e>
  4026d0:	f10d 0207 	add.w	r2, sp, #7
  4026d4:	4616      	mov	r6, r2
  4026d6:	250a      	movs	r5, #10
  4026d8:	fb91 f4f5 	sdiv	r4, r1, r5
  4026dc:	fb05 1114 	mls	r1, r5, r4, r1
  4026e0:	3130      	adds	r1, #48	; 0x30
  4026e2:	2c09      	cmp	r4, #9
  4026e4:	f802 1d01 	strb.w	r1, [r2, #-1]!
  4026e8:	4621      	mov	r1, r4
  4026ea:	dcf5      	bgt.n	4026d8 <__exponent+0x22>
  4026ec:	3130      	adds	r1, #48	; 0x30
  4026ee:	1e54      	subs	r4, r2, #1
  4026f0:	f802 1c01 	strb.w	r1, [r2, #-1]
  4026f4:	42b4      	cmp	r4, r6
  4026f6:	461a      	mov	r2, r3
  4026f8:	d20a      	bcs.n	402710 <__exponent+0x5a>
  4026fa:	f814 2b01 	ldrb.w	r2, [r4], #1
  4026fe:	f803 2b01 	strb.w	r2, [r3], #1
  402702:	e7f7      	b.n	4026f4 <__exponent+0x3e>
  402704:	2430      	movs	r4, #48	; 0x30
  402706:	461a      	mov	r2, r3
  402708:	4421      	add	r1, r4
  40270a:	f802 4b02 	strb.w	r4, [r2], #2
  40270e:	7059      	strb	r1, [r3, #1]
  402710:	1a10      	subs	r0, r2, r0
  402712:	b002      	add	sp, #8
  402714:	bd70      	pop	{r4, r5, r6, pc}
	...

00402718 <_printf_float>:
  402718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40271c:	b091      	sub	sp, #68	; 0x44
  40271e:	460c      	mov	r4, r1
  402720:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  402724:	4616      	mov	r6, r2
  402726:	461f      	mov	r7, r3
  402728:	4605      	mov	r5, r0
  40272a:	f001 fd75 	bl	404218 <_localeconv_r>
  40272e:	6803      	ldr	r3, [r0, #0]
  402730:	9309      	str	r3, [sp, #36]	; 0x24
  402732:	4618      	mov	r0, r3
  402734:	f000 fcfc 	bl	403130 <strlen>
  402738:	2300      	movs	r3, #0
  40273a:	930e      	str	r3, [sp, #56]	; 0x38
  40273c:	f8d8 3000 	ldr.w	r3, [r8]
  402740:	900a      	str	r0, [sp, #40]	; 0x28
  402742:	3307      	adds	r3, #7
  402744:	f023 0307 	bic.w	r3, r3, #7
  402748:	f103 0208 	add.w	r2, r3, #8
  40274c:	f894 9018 	ldrb.w	r9, [r4, #24]
  402750:	f8d4 b000 	ldr.w	fp, [r4]
  402754:	f8c8 2000 	str.w	r2, [r8]
  402758:	e9d3 2300 	ldrd	r2, r3, [r3]
  40275c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402760:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  402764:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402768:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  40276c:	930b      	str	r3, [sp, #44]	; 0x2c
  40276e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402772:	4ba7      	ldr	r3, [pc, #668]	; (402a10 <_printf_float+0x2f8>)
  402774:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402776:	4640      	mov	r0, r8
  402778:	f003 f82a 	bl	4057d0 <__aeabi_dcmpun>
  40277c:	b9a0      	cbnz	r0, 4027a8 <_printf_float+0x90>
  40277e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402782:	4ba3      	ldr	r3, [pc, #652]	; (402a10 <_printf_float+0x2f8>)
  402784:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402786:	4640      	mov	r0, r8
  402788:	f003 f804 	bl	405794 <__aeabi_dcmple>
  40278c:	b960      	cbnz	r0, 4027a8 <_printf_float+0x90>
  40278e:	2200      	movs	r2, #0
  402790:	2300      	movs	r3, #0
  402792:	4640      	mov	r0, r8
  402794:	4651      	mov	r1, sl
  402796:	f002 fff3 	bl	405780 <__aeabi_dcmplt>
  40279a:	b110      	cbz	r0, 4027a2 <_printf_float+0x8a>
  40279c:	232d      	movs	r3, #45	; 0x2d
  40279e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4027a2:	4b9c      	ldr	r3, [pc, #624]	; (402a14 <_printf_float+0x2fc>)
  4027a4:	4a9c      	ldr	r2, [pc, #624]	; (402a18 <_printf_float+0x300>)
  4027a6:	e00a      	b.n	4027be <_printf_float+0xa6>
  4027a8:	4642      	mov	r2, r8
  4027aa:	4653      	mov	r3, sl
  4027ac:	4640      	mov	r0, r8
  4027ae:	4651      	mov	r1, sl
  4027b0:	f003 f80e 	bl	4057d0 <__aeabi_dcmpun>
  4027b4:	2800      	cmp	r0, #0
  4027b6:	f000 8192 	beq.w	402ade <_printf_float+0x3c6>
  4027ba:	4b98      	ldr	r3, [pc, #608]	; (402a1c <_printf_float+0x304>)
  4027bc:	4a98      	ldr	r2, [pc, #608]	; (402a20 <_printf_float+0x308>)
  4027be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  4027c2:	bf8c      	ite	hi
  4027c4:	4690      	movhi	r8, r2
  4027c6:	4698      	movls	r8, r3
  4027c8:	2303      	movs	r3, #3
  4027ca:	6123      	str	r3, [r4, #16]
  4027cc:	f02b 0304 	bic.w	r3, fp, #4
  4027d0:	6023      	str	r3, [r4, #0]
  4027d2:	f04f 0a00 	mov.w	sl, #0
  4027d6:	e03d      	b.n	402854 <_printf_float+0x13c>
  4027d8:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  4027dc:	f000 818a 	beq.w	402af4 <_printf_float+0x3dc>
  4027e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  4027e4:	f000 8186 	beq.w	402af4 <_printf_float+0x3dc>
  4027e8:	6023      	str	r3, [r4, #0]
  4027ea:	2100      	movs	r1, #0
  4027ec:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  4027f0:	9301      	str	r3, [sp, #4]
  4027f2:	6863      	ldr	r3, [r4, #4]
  4027f4:	9005      	str	r0, [sp, #20]
  4027f6:	9202      	str	r2, [sp, #8]
  4027f8:	9300      	str	r3, [sp, #0]
  4027fa:	4642      	mov	r2, r8
  4027fc:	4653      	mov	r3, sl
  4027fe:	9106      	str	r1, [sp, #24]
  402800:	f8cd 9010 	str.w	r9, [sp, #16]
  402804:	f8cd e00c 	str.w	lr, [sp, #12]
  402808:	4628      	mov	r0, r5
  40280a:	f7ff fef5 	bl	4025f8 <__cvt>
  40280e:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  402812:	2b47      	cmp	r3, #71	; 0x47
  402814:	4680      	mov	r8, r0
  402816:	f000 8184 	beq.w	402b22 <_printf_float+0x40a>
  40281a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  40281e:	990d      	ldr	r1, [sp, #52]	; 0x34
  402820:	f200 818d 	bhi.w	402b3e <_printf_float+0x426>
  402824:	3901      	subs	r1, #1
  402826:	464a      	mov	r2, r9
  402828:	f104 0050 	add.w	r0, r4, #80	; 0x50
  40282c:	910d      	str	r1, [sp, #52]	; 0x34
  40282e:	f7ff ff42 	bl	4026b6 <__exponent>
  402832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402834:	1883      	adds	r3, r0, r2
  402836:	2a01      	cmp	r2, #1
  402838:	4682      	mov	sl, r0
  40283a:	6123      	str	r3, [r4, #16]
  40283c:	f300 817c 	bgt.w	402b38 <_printf_float+0x420>
  402840:	6822      	ldr	r2, [r4, #0]
  402842:	07d1      	lsls	r1, r2, #31
  402844:	f100 8178 	bmi.w	402b38 <_printf_float+0x420>
  402848:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  40284c:	b113      	cbz	r3, 402854 <_printf_float+0x13c>
  40284e:	232d      	movs	r3, #45	; 0x2d
  402850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402854:	9700      	str	r7, [sp, #0]
  402856:	4633      	mov	r3, r6
  402858:	aa0f      	add	r2, sp, #60	; 0x3c
  40285a:	4621      	mov	r1, r4
  40285c:	4628      	mov	r0, r5
  40285e:	f000 f99f 	bl	402ba0 <_printf_common>
  402862:	3001      	adds	r0, #1
  402864:	d102      	bne.n	40286c <_printf_float+0x154>
  402866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40286a:	e196      	b.n	402b9a <_printf_float+0x482>
  40286c:	6823      	ldr	r3, [r4, #0]
  40286e:	055a      	lsls	r2, r3, #21
  402870:	d401      	bmi.n	402876 <_printf_float+0x15e>
  402872:	6923      	ldr	r3, [r4, #16]
  402874:	e065      	b.n	402942 <_printf_float+0x22a>
  402876:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  40287a:	f240 80d5 	bls.w	402a28 <_printf_float+0x310>
  40287e:	2200      	movs	r2, #0
  402880:	2300      	movs	r3, #0
  402882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402886:	f002 ff71 	bl	40576c <__aeabi_dcmpeq>
  40288a:	b378      	cbz	r0, 4028ec <_printf_float+0x1d4>
  40288c:	2301      	movs	r3, #1
  40288e:	4a65      	ldr	r2, [pc, #404]	; (402a24 <_printf_float+0x30c>)
  402890:	4631      	mov	r1, r6
  402892:	4628      	mov	r0, r5
  402894:	47b8      	blx	r7
  402896:	3001      	adds	r0, #1
  402898:	d0e5      	beq.n	402866 <_printf_float+0x14e>
  40289a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40289c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40289e:	429a      	cmp	r2, r3
  4028a0:	db0b      	blt.n	4028ba <_printf_float+0x1a2>
  4028a2:	6823      	ldr	r3, [r4, #0]
  4028a4:	07d8      	lsls	r0, r3, #31
  4028a6:	d408      	bmi.n	4028ba <_printf_float+0x1a2>
  4028a8:	6823      	ldr	r3, [r4, #0]
  4028aa:	079b      	lsls	r3, r3, #30
  4028ac:	f140 8111 	bpl.w	402ad2 <_printf_float+0x3ba>
  4028b0:	f04f 0800 	mov.w	r8, #0
  4028b4:	f104 0919 	add.w	r9, r4, #25
  4028b8:	e106      	b.n	402ac8 <_printf_float+0x3b0>
  4028ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4028bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4028be:	4631      	mov	r1, r6
  4028c0:	4628      	mov	r0, r5
  4028c2:	47b8      	blx	r7
  4028c4:	3001      	adds	r0, #1
  4028c6:	d0ce      	beq.n	402866 <_printf_float+0x14e>
  4028c8:	f04f 0800 	mov.w	r8, #0
  4028cc:	f104 091a 	add.w	r9, r4, #26
  4028d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4028d2:	3b01      	subs	r3, #1
  4028d4:	4598      	cmp	r8, r3
  4028d6:	dae7      	bge.n	4028a8 <_printf_float+0x190>
  4028d8:	2301      	movs	r3, #1
  4028da:	464a      	mov	r2, r9
  4028dc:	4631      	mov	r1, r6
  4028de:	4628      	mov	r0, r5
  4028e0:	47b8      	blx	r7
  4028e2:	3001      	adds	r0, #1
  4028e4:	d0bf      	beq.n	402866 <_printf_float+0x14e>
  4028e6:	f108 0801 	add.w	r8, r8, #1
  4028ea:	e7f1      	b.n	4028d0 <_printf_float+0x1b8>
  4028ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4028ee:	2b00      	cmp	r3, #0
  4028f0:	dc29      	bgt.n	402946 <_printf_float+0x22e>
  4028f2:	2301      	movs	r3, #1
  4028f4:	4a4b      	ldr	r2, [pc, #300]	; (402a24 <_printf_float+0x30c>)
  4028f6:	4631      	mov	r1, r6
  4028f8:	4628      	mov	r0, r5
  4028fa:	47b8      	blx	r7
  4028fc:	3001      	adds	r0, #1
  4028fe:	d0b2      	beq.n	402866 <_printf_float+0x14e>
  402900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402902:	b923      	cbnz	r3, 40290e <_printf_float+0x1f6>
  402904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402906:	b913      	cbnz	r3, 40290e <_printf_float+0x1f6>
  402908:	6823      	ldr	r3, [r4, #0]
  40290a:	07d9      	lsls	r1, r3, #31
  40290c:	d5cc      	bpl.n	4028a8 <_printf_float+0x190>
  40290e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402910:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402912:	4631      	mov	r1, r6
  402914:	4628      	mov	r0, r5
  402916:	47b8      	blx	r7
  402918:	3001      	adds	r0, #1
  40291a:	d0a4      	beq.n	402866 <_printf_float+0x14e>
  40291c:	f04f 0900 	mov.w	r9, #0
  402920:	f104 0a1a 	add.w	sl, r4, #26
  402924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402926:	425b      	negs	r3, r3
  402928:	4599      	cmp	r9, r3
  40292a:	da09      	bge.n	402940 <_printf_float+0x228>
  40292c:	2301      	movs	r3, #1
  40292e:	4652      	mov	r2, sl
  402930:	4631      	mov	r1, r6
  402932:	4628      	mov	r0, r5
  402934:	47b8      	blx	r7
  402936:	3001      	adds	r0, #1
  402938:	d095      	beq.n	402866 <_printf_float+0x14e>
  40293a:	f109 0901 	add.w	r9, r9, #1
  40293e:	e7f1      	b.n	402924 <_printf_float+0x20c>
  402940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402942:	4642      	mov	r2, r8
  402944:	e0a7      	b.n	402a96 <_printf_float+0x37e>
  402946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402948:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40294a:	429a      	cmp	r2, r3
  40294c:	bfa8      	it	ge
  40294e:	461a      	movge	r2, r3
  402950:	2a00      	cmp	r2, #0
  402952:	4691      	mov	r9, r2
  402954:	dc06      	bgt.n	402964 <_printf_float+0x24c>
  402956:	f04f 0a00 	mov.w	sl, #0
  40295a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  40295e:	f104 0b1a 	add.w	fp, r4, #26
  402962:	e011      	b.n	402988 <_printf_float+0x270>
  402964:	4613      	mov	r3, r2
  402966:	4631      	mov	r1, r6
  402968:	4642      	mov	r2, r8
  40296a:	4628      	mov	r0, r5
  40296c:	47b8      	blx	r7
  40296e:	3001      	adds	r0, #1
  402970:	d1f1      	bne.n	402956 <_printf_float+0x23e>
  402972:	e778      	b.n	402866 <_printf_float+0x14e>
  402974:	2301      	movs	r3, #1
  402976:	465a      	mov	r2, fp
  402978:	4631      	mov	r1, r6
  40297a:	4628      	mov	r0, r5
  40297c:	47b8      	blx	r7
  40297e:	3001      	adds	r0, #1
  402980:	f43f af71 	beq.w	402866 <_printf_float+0x14e>
  402984:	f10a 0a01 	add.w	sl, sl, #1
  402988:	6da3      	ldr	r3, [r4, #88]	; 0x58
  40298a:	ebc9 0203 	rsb	r2, r9, r3
  40298e:	4592      	cmp	sl, r2
  402990:	dbf0      	blt.n	402974 <_printf_float+0x25c>
  402992:	eb08 0903 	add.w	r9, r8, r3
  402996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40299a:	429a      	cmp	r2, r3
  40299c:	db0f      	blt.n	4029be <_printf_float+0x2a6>
  40299e:	6823      	ldr	r3, [r4, #0]
  4029a0:	07da      	lsls	r2, r3, #31
  4029a2:	d40c      	bmi.n	4029be <_printf_float+0x2a6>
  4029a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4029a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4029a8:	4498      	add	r8, r3
  4029aa:	ebc9 0808 	rsb	r8, r9, r8
  4029ae:	1a9b      	subs	r3, r3, r2
  4029b0:	4598      	cmp	r8, r3
  4029b2:	bfa8      	it	ge
  4029b4:	4698      	movge	r8, r3
  4029b6:	f1b8 0f00 	cmp.w	r8, #0
  4029ba:	dc08      	bgt.n	4029ce <_printf_float+0x2b6>
  4029bc:	e00f      	b.n	4029de <_printf_float+0x2c6>
  4029be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4029c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4029c2:	4631      	mov	r1, r6
  4029c4:	4628      	mov	r0, r5
  4029c6:	47b8      	blx	r7
  4029c8:	3001      	adds	r0, #1
  4029ca:	d1eb      	bne.n	4029a4 <_printf_float+0x28c>
  4029cc:	e74b      	b.n	402866 <_printf_float+0x14e>
  4029ce:	4643      	mov	r3, r8
  4029d0:	464a      	mov	r2, r9
  4029d2:	4631      	mov	r1, r6
  4029d4:	4628      	mov	r0, r5
  4029d6:	47b8      	blx	r7
  4029d8:	3001      	adds	r0, #1
  4029da:	f43f af44 	beq.w	402866 <_printf_float+0x14e>
  4029de:	f04f 0900 	mov.w	r9, #0
  4029e2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4029e6:	f104 0a1a 	add.w	sl, r4, #26
  4029ea:	e009      	b.n	402a00 <_printf_float+0x2e8>
  4029ec:	2301      	movs	r3, #1
  4029ee:	4652      	mov	r2, sl
  4029f0:	4631      	mov	r1, r6
  4029f2:	4628      	mov	r0, r5
  4029f4:	47b8      	blx	r7
  4029f6:	3001      	adds	r0, #1
  4029f8:	f43f af35 	beq.w	402866 <_printf_float+0x14e>
  4029fc:	f109 0901 	add.w	r9, r9, #1
  402a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a04:	1a9b      	subs	r3, r3, r2
  402a06:	ebc8 0303 	rsb	r3, r8, r3
  402a0a:	4599      	cmp	r9, r3
  402a0c:	dbee      	blt.n	4029ec <_printf_float+0x2d4>
  402a0e:	e74b      	b.n	4028a8 <_printf_float+0x190>
  402a10:	7fefffff 	.word	0x7fefffff
  402a14:	00406194 	.word	0x00406194
  402a18:	00406198 	.word	0x00406198
  402a1c:	0040619c 	.word	0x0040619c
  402a20:	004061a0 	.word	0x004061a0
  402a24:	004061a4 	.word	0x004061a4
  402a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402a2a:	2a01      	cmp	r2, #1
  402a2c:	dc01      	bgt.n	402a32 <_printf_float+0x31a>
  402a2e:	07db      	lsls	r3, r3, #31
  402a30:	d538      	bpl.n	402aa4 <_printf_float+0x38c>
  402a32:	2301      	movs	r3, #1
  402a34:	4642      	mov	r2, r8
  402a36:	4631      	mov	r1, r6
  402a38:	4628      	mov	r0, r5
  402a3a:	47b8      	blx	r7
  402a3c:	3001      	adds	r0, #1
  402a3e:	f43f af12 	beq.w	402866 <_printf_float+0x14e>
  402a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402a46:	4631      	mov	r1, r6
  402a48:	4628      	mov	r0, r5
  402a4a:	47b8      	blx	r7
  402a4c:	3001      	adds	r0, #1
  402a4e:	f43f af0a 	beq.w	402866 <_printf_float+0x14e>
  402a52:	2200      	movs	r2, #0
  402a54:	2300      	movs	r3, #0
  402a56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402a5a:	f002 fe87 	bl	40576c <__aeabi_dcmpeq>
  402a5e:	b120      	cbz	r0, 402a6a <_printf_float+0x352>
  402a60:	f04f 0800 	mov.w	r8, #0
  402a64:	f104 091a 	add.w	r9, r4, #26
  402a68:	e00e      	b.n	402a88 <_printf_float+0x370>
  402a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a6c:	f108 0201 	add.w	r2, r8, #1
  402a70:	3b01      	subs	r3, #1
  402a72:	e019      	b.n	402aa8 <_printf_float+0x390>
  402a74:	2301      	movs	r3, #1
  402a76:	464a      	mov	r2, r9
  402a78:	4631      	mov	r1, r6
  402a7a:	4628      	mov	r0, r5
  402a7c:	47b8      	blx	r7
  402a7e:	3001      	adds	r0, #1
  402a80:	f43f aef1 	beq.w	402866 <_printf_float+0x14e>
  402a84:	f108 0801 	add.w	r8, r8, #1
  402a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a8a:	3b01      	subs	r3, #1
  402a8c:	4598      	cmp	r8, r3
  402a8e:	dbf1      	blt.n	402a74 <_printf_float+0x35c>
  402a90:	4653      	mov	r3, sl
  402a92:	f104 0250 	add.w	r2, r4, #80	; 0x50
  402a96:	4631      	mov	r1, r6
  402a98:	4628      	mov	r0, r5
  402a9a:	47b8      	blx	r7
  402a9c:	3001      	adds	r0, #1
  402a9e:	f47f af03 	bne.w	4028a8 <_printf_float+0x190>
  402aa2:	e6e0      	b.n	402866 <_printf_float+0x14e>
  402aa4:	2301      	movs	r3, #1
  402aa6:	4642      	mov	r2, r8
  402aa8:	4631      	mov	r1, r6
  402aaa:	4628      	mov	r0, r5
  402aac:	47b8      	blx	r7
  402aae:	3001      	adds	r0, #1
  402ab0:	d1ee      	bne.n	402a90 <_printf_float+0x378>
  402ab2:	e6d8      	b.n	402866 <_printf_float+0x14e>
  402ab4:	2301      	movs	r3, #1
  402ab6:	464a      	mov	r2, r9
  402ab8:	4631      	mov	r1, r6
  402aba:	4628      	mov	r0, r5
  402abc:	47b8      	blx	r7
  402abe:	3001      	adds	r0, #1
  402ac0:	f43f aed1 	beq.w	402866 <_printf_float+0x14e>
  402ac4:	f108 0801 	add.w	r8, r8, #1
  402ac8:	68e3      	ldr	r3, [r4, #12]
  402aca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402acc:	1a9b      	subs	r3, r3, r2
  402ace:	4598      	cmp	r8, r3
  402ad0:	dbf0      	blt.n	402ab4 <_printf_float+0x39c>
  402ad2:	68e0      	ldr	r0, [r4, #12]
  402ad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402ad6:	4298      	cmp	r0, r3
  402ad8:	bfb8      	it	lt
  402ada:	4618      	movlt	r0, r3
  402adc:	e05d      	b.n	402b9a <_printf_float+0x482>
  402ade:	6862      	ldr	r2, [r4, #4]
  402ae0:	1c53      	adds	r3, r2, #1
  402ae2:	a80e      	add	r0, sp, #56	; 0x38
  402ae4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  402ae8:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402aec:	f47f ae74 	bne.w	4027d8 <_printf_float+0xc0>
  402af0:	2206      	movs	r2, #6
  402af2:	e001      	b.n	402af8 <_printf_float+0x3e0>
  402af4:	b912      	cbnz	r2, 402afc <_printf_float+0x3e4>
  402af6:	2201      	movs	r2, #1
  402af8:	6062      	str	r2, [r4, #4]
  402afa:	e675      	b.n	4027e8 <_printf_float+0xd0>
  402afc:	2100      	movs	r1, #0
  402afe:	9106      	str	r1, [sp, #24]
  402b00:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  402b04:	e88d 000c 	stmia.w	sp, {r2, r3}
  402b08:	6023      	str	r3, [r4, #0]
  402b0a:	9005      	str	r0, [sp, #20]
  402b0c:	4642      	mov	r2, r8
  402b0e:	f8cd 9010 	str.w	r9, [sp, #16]
  402b12:	f8cd e00c 	str.w	lr, [sp, #12]
  402b16:	9102      	str	r1, [sp, #8]
  402b18:	4653      	mov	r3, sl
  402b1a:	4628      	mov	r0, r5
  402b1c:	f7ff fd6c 	bl	4025f8 <__cvt>
  402b20:	4680      	mov	r8, r0
  402b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402b24:	1cd8      	adds	r0, r3, #3
  402b26:	db02      	blt.n	402b2e <_printf_float+0x416>
  402b28:	6862      	ldr	r2, [r4, #4]
  402b2a:	4293      	cmp	r3, r2
  402b2c:	dd1d      	ble.n	402b6a <_printf_float+0x452>
  402b2e:	f1a9 0902 	sub.w	r9, r9, #2
  402b32:	fa5f f989 	uxtb.w	r9, r9
  402b36:	e670      	b.n	40281a <_printf_float+0x102>
  402b38:	3301      	adds	r3, #1
  402b3a:	6123      	str	r3, [r4, #16]
  402b3c:	e684      	b.n	402848 <_printf_float+0x130>
  402b3e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  402b42:	d114      	bne.n	402b6e <_printf_float+0x456>
  402b44:	2900      	cmp	r1, #0
  402b46:	6863      	ldr	r3, [r4, #4]
  402b48:	dd07      	ble.n	402b5a <_printf_float+0x442>
  402b4a:	6121      	str	r1, [r4, #16]
  402b4c:	b913      	cbnz	r3, 402b54 <_printf_float+0x43c>
  402b4e:	6822      	ldr	r2, [r4, #0]
  402b50:	07d2      	lsls	r2, r2, #31
  402b52:	d51d      	bpl.n	402b90 <_printf_float+0x478>
  402b54:	3301      	adds	r3, #1
  402b56:	440b      	add	r3, r1
  402b58:	e019      	b.n	402b8e <_printf_float+0x476>
  402b5a:	b913      	cbnz	r3, 402b62 <_printf_float+0x44a>
  402b5c:	6822      	ldr	r2, [r4, #0]
  402b5e:	07d0      	lsls	r0, r2, #31
  402b60:	d501      	bpl.n	402b66 <_printf_float+0x44e>
  402b62:	3302      	adds	r3, #2
  402b64:	e013      	b.n	402b8e <_printf_float+0x476>
  402b66:	2301      	movs	r3, #1
  402b68:	e011      	b.n	402b8e <_printf_float+0x476>
  402b6a:	f04f 0967 	mov.w	r9, #103	; 0x67
  402b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402b72:	4293      	cmp	r3, r2
  402b74:	db05      	blt.n	402b82 <_printf_float+0x46a>
  402b76:	6822      	ldr	r2, [r4, #0]
  402b78:	6123      	str	r3, [r4, #16]
  402b7a:	07d1      	lsls	r1, r2, #31
  402b7c:	d508      	bpl.n	402b90 <_printf_float+0x478>
  402b7e:	3301      	adds	r3, #1
  402b80:	e005      	b.n	402b8e <_printf_float+0x476>
  402b82:	2b00      	cmp	r3, #0
  402b84:	bfd4      	ite	le
  402b86:	f1c3 0302 	rsble	r3, r3, #2
  402b8a:	2301      	movgt	r3, #1
  402b8c:	4413      	add	r3, r2
  402b8e:	6123      	str	r3, [r4, #16]
  402b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402b92:	65a3      	str	r3, [r4, #88]	; 0x58
  402b94:	f04f 0a00 	mov.w	sl, #0
  402b98:	e656      	b.n	402848 <_printf_float+0x130>
  402b9a:	b011      	add	sp, #68	; 0x44
  402b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402ba0 <_printf_common>:
  402ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ba4:	4691      	mov	r9, r2
  402ba6:	461f      	mov	r7, r3
  402ba8:	690a      	ldr	r2, [r1, #16]
  402baa:	688b      	ldr	r3, [r1, #8]
  402bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402bb0:	4293      	cmp	r3, r2
  402bb2:	bfb8      	it	lt
  402bb4:	4613      	movlt	r3, r2
  402bb6:	f8c9 3000 	str.w	r3, [r9]
  402bba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  402bbe:	4606      	mov	r6, r0
  402bc0:	460c      	mov	r4, r1
  402bc2:	b112      	cbz	r2, 402bca <_printf_common+0x2a>
  402bc4:	3301      	adds	r3, #1
  402bc6:	f8c9 3000 	str.w	r3, [r9]
  402bca:	6823      	ldr	r3, [r4, #0]
  402bcc:	0699      	lsls	r1, r3, #26
  402bce:	bf42      	ittt	mi
  402bd0:	f8d9 3000 	ldrmi.w	r3, [r9]
  402bd4:	3302      	addmi	r3, #2
  402bd6:	f8c9 3000 	strmi.w	r3, [r9]
  402bda:	6825      	ldr	r5, [r4, #0]
  402bdc:	f015 0506 	ands.w	r5, r5, #6
  402be0:	d110      	bne.n	402c04 <_printf_common+0x64>
  402be2:	f104 0a19 	add.w	sl, r4, #25
  402be6:	e007      	b.n	402bf8 <_printf_common+0x58>
  402be8:	2301      	movs	r3, #1
  402bea:	4652      	mov	r2, sl
  402bec:	4639      	mov	r1, r7
  402bee:	4630      	mov	r0, r6
  402bf0:	47c0      	blx	r8
  402bf2:	3001      	adds	r0, #1
  402bf4:	d01a      	beq.n	402c2c <_printf_common+0x8c>
  402bf6:	3501      	adds	r5, #1
  402bf8:	68e3      	ldr	r3, [r4, #12]
  402bfa:	f8d9 2000 	ldr.w	r2, [r9]
  402bfe:	1a9b      	subs	r3, r3, r2
  402c00:	429d      	cmp	r5, r3
  402c02:	dbf1      	blt.n	402be8 <_printf_common+0x48>
  402c04:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402c08:	6822      	ldr	r2, [r4, #0]
  402c0a:	3300      	adds	r3, #0
  402c0c:	bf18      	it	ne
  402c0e:	2301      	movne	r3, #1
  402c10:	0692      	lsls	r2, r2, #26
  402c12:	d50f      	bpl.n	402c34 <_printf_common+0x94>
  402c14:	18e1      	adds	r1, r4, r3
  402c16:	1c5a      	adds	r2, r3, #1
  402c18:	2030      	movs	r0, #48	; 0x30
  402c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402c1e:	4422      	add	r2, r4
  402c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402c28:	3302      	adds	r3, #2
  402c2a:	e003      	b.n	402c34 <_printf_common+0x94>
  402c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402c38:	4639      	mov	r1, r7
  402c3a:	4630      	mov	r0, r6
  402c3c:	47c0      	blx	r8
  402c3e:	3001      	adds	r0, #1
  402c40:	d0f4      	beq.n	402c2c <_printf_common+0x8c>
  402c42:	6822      	ldr	r2, [r4, #0]
  402c44:	f8d9 5000 	ldr.w	r5, [r9]
  402c48:	68e3      	ldr	r3, [r4, #12]
  402c4a:	f002 0206 	and.w	r2, r2, #6
  402c4e:	2a04      	cmp	r2, #4
  402c50:	bf08      	it	eq
  402c52:	1b5d      	subeq	r5, r3, r5
  402c54:	6922      	ldr	r2, [r4, #16]
  402c56:	68a3      	ldr	r3, [r4, #8]
  402c58:	bf0c      	ite	eq
  402c5a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402c5e:	2500      	movne	r5, #0
  402c60:	4293      	cmp	r3, r2
  402c62:	bfc4      	itt	gt
  402c64:	1a9b      	subgt	r3, r3, r2
  402c66:	18ed      	addgt	r5, r5, r3
  402c68:	f04f 0900 	mov.w	r9, #0
  402c6c:	341a      	adds	r4, #26
  402c6e:	454d      	cmp	r5, r9
  402c70:	d009      	beq.n	402c86 <_printf_common+0xe6>
  402c72:	2301      	movs	r3, #1
  402c74:	4622      	mov	r2, r4
  402c76:	4639      	mov	r1, r7
  402c78:	4630      	mov	r0, r6
  402c7a:	47c0      	blx	r8
  402c7c:	3001      	adds	r0, #1
  402c7e:	d0d5      	beq.n	402c2c <_printf_common+0x8c>
  402c80:	f109 0901 	add.w	r9, r9, #1
  402c84:	e7f3      	b.n	402c6e <_printf_common+0xce>
  402c86:	2000      	movs	r0, #0
  402c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402c8c <_printf_i>:
  402c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402c90:	4617      	mov	r7, r2
  402c92:	7e0a      	ldrb	r2, [r1, #24]
  402c94:	b085      	sub	sp, #20
  402c96:	2a6e      	cmp	r2, #110	; 0x6e
  402c98:	4698      	mov	r8, r3
  402c9a:	4606      	mov	r6, r0
  402c9c:	460c      	mov	r4, r1
  402c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402ca0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402ca4:	f000 80ae 	beq.w	402e04 <_printf_i+0x178>
  402ca8:	d811      	bhi.n	402cce <_printf_i+0x42>
  402caa:	2a63      	cmp	r2, #99	; 0x63
  402cac:	d022      	beq.n	402cf4 <_printf_i+0x68>
  402cae:	d809      	bhi.n	402cc4 <_printf_i+0x38>
  402cb0:	2a00      	cmp	r2, #0
  402cb2:	f000 80bb 	beq.w	402e2c <_printf_i+0x1a0>
  402cb6:	2a58      	cmp	r2, #88	; 0x58
  402cb8:	f040 80ca 	bne.w	402e50 <_printf_i+0x1c4>
  402cbc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402cc0:	4983      	ldr	r1, [pc, #524]	; (402ed0 <_printf_i+0x244>)
  402cc2:	e055      	b.n	402d70 <_printf_i+0xe4>
  402cc4:	2a64      	cmp	r2, #100	; 0x64
  402cc6:	d01e      	beq.n	402d06 <_printf_i+0x7a>
  402cc8:	2a69      	cmp	r2, #105	; 0x69
  402cca:	d01c      	beq.n	402d06 <_printf_i+0x7a>
  402ccc:	e0c0      	b.n	402e50 <_printf_i+0x1c4>
  402cce:	2a73      	cmp	r2, #115	; 0x73
  402cd0:	f000 80b0 	beq.w	402e34 <_printf_i+0x1a8>
  402cd4:	d809      	bhi.n	402cea <_printf_i+0x5e>
  402cd6:	2a6f      	cmp	r2, #111	; 0x6f
  402cd8:	d02e      	beq.n	402d38 <_printf_i+0xac>
  402cda:	2a70      	cmp	r2, #112	; 0x70
  402cdc:	f040 80b8 	bne.w	402e50 <_printf_i+0x1c4>
  402ce0:	680a      	ldr	r2, [r1, #0]
  402ce2:	f042 0220 	orr.w	r2, r2, #32
  402ce6:	600a      	str	r2, [r1, #0]
  402ce8:	e03e      	b.n	402d68 <_printf_i+0xdc>
  402cea:	2a75      	cmp	r2, #117	; 0x75
  402cec:	d024      	beq.n	402d38 <_printf_i+0xac>
  402cee:	2a78      	cmp	r2, #120	; 0x78
  402cf0:	d03a      	beq.n	402d68 <_printf_i+0xdc>
  402cf2:	e0ad      	b.n	402e50 <_printf_i+0x1c4>
  402cf4:	681a      	ldr	r2, [r3, #0]
  402cf6:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402cfa:	1d11      	adds	r1, r2, #4
  402cfc:	6019      	str	r1, [r3, #0]
  402cfe:	6813      	ldr	r3, [r2, #0]
  402d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402d04:	e0a8      	b.n	402e58 <_printf_i+0x1cc>
  402d06:	6821      	ldr	r1, [r4, #0]
  402d08:	681a      	ldr	r2, [r3, #0]
  402d0a:	f011 0f80 	tst.w	r1, #128	; 0x80
  402d0e:	d002      	beq.n	402d16 <_printf_i+0x8a>
  402d10:	1d11      	adds	r1, r2, #4
  402d12:	6019      	str	r1, [r3, #0]
  402d14:	e008      	b.n	402d28 <_printf_i+0x9c>
  402d16:	f011 0f40 	tst.w	r1, #64	; 0x40
  402d1a:	f102 0104 	add.w	r1, r2, #4
  402d1e:	6019      	str	r1, [r3, #0]
  402d20:	d002      	beq.n	402d28 <_printf_i+0x9c>
  402d22:	f9b2 3000 	ldrsh.w	r3, [r2]
  402d26:	e000      	b.n	402d2a <_printf_i+0x9e>
  402d28:	6813      	ldr	r3, [r2, #0]
  402d2a:	2b00      	cmp	r3, #0
  402d2c:	da3c      	bge.n	402da8 <_printf_i+0x11c>
  402d2e:	222d      	movs	r2, #45	; 0x2d
  402d30:	425b      	negs	r3, r3
  402d32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402d36:	e037      	b.n	402da8 <_printf_i+0x11c>
  402d38:	6821      	ldr	r1, [r4, #0]
  402d3a:	681a      	ldr	r2, [r3, #0]
  402d3c:	f011 0f80 	tst.w	r1, #128	; 0x80
  402d40:	d002      	beq.n	402d48 <_printf_i+0xbc>
  402d42:	1d11      	adds	r1, r2, #4
  402d44:	6019      	str	r1, [r3, #0]
  402d46:	e007      	b.n	402d58 <_printf_i+0xcc>
  402d48:	f011 0f40 	tst.w	r1, #64	; 0x40
  402d4c:	f102 0104 	add.w	r1, r2, #4
  402d50:	6019      	str	r1, [r3, #0]
  402d52:	d001      	beq.n	402d58 <_printf_i+0xcc>
  402d54:	8813      	ldrh	r3, [r2, #0]
  402d56:	e000      	b.n	402d5a <_printf_i+0xce>
  402d58:	6813      	ldr	r3, [r2, #0]
  402d5a:	7e22      	ldrb	r2, [r4, #24]
  402d5c:	495c      	ldr	r1, [pc, #368]	; (402ed0 <_printf_i+0x244>)
  402d5e:	2a6f      	cmp	r2, #111	; 0x6f
  402d60:	bf14      	ite	ne
  402d62:	220a      	movne	r2, #10
  402d64:	2208      	moveq	r2, #8
  402d66:	e01b      	b.n	402da0 <_printf_i+0x114>
  402d68:	2278      	movs	r2, #120	; 0x78
  402d6a:	495a      	ldr	r1, [pc, #360]	; (402ed4 <_printf_i+0x248>)
  402d6c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402d70:	6822      	ldr	r2, [r4, #0]
  402d72:	6818      	ldr	r0, [r3, #0]
  402d74:	f012 0f80 	tst.w	r2, #128	; 0x80
  402d78:	f100 0504 	add.w	r5, r0, #4
  402d7c:	601d      	str	r5, [r3, #0]
  402d7e:	d103      	bne.n	402d88 <_printf_i+0xfc>
  402d80:	0655      	lsls	r5, r2, #25
  402d82:	d501      	bpl.n	402d88 <_printf_i+0xfc>
  402d84:	8803      	ldrh	r3, [r0, #0]
  402d86:	e000      	b.n	402d8a <_printf_i+0xfe>
  402d88:	6803      	ldr	r3, [r0, #0]
  402d8a:	07d0      	lsls	r0, r2, #31
  402d8c:	bf44      	itt	mi
  402d8e:	f042 0220 	orrmi.w	r2, r2, #32
  402d92:	6022      	strmi	r2, [r4, #0]
  402d94:	b91b      	cbnz	r3, 402d9e <_printf_i+0x112>
  402d96:	6822      	ldr	r2, [r4, #0]
  402d98:	f022 0220 	bic.w	r2, r2, #32
  402d9c:	6022      	str	r2, [r4, #0]
  402d9e:	2210      	movs	r2, #16
  402da0:	2000      	movs	r0, #0
  402da2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402da6:	e001      	b.n	402dac <_printf_i+0x120>
  402da8:	4949      	ldr	r1, [pc, #292]	; (402ed0 <_printf_i+0x244>)
  402daa:	220a      	movs	r2, #10
  402dac:	6865      	ldr	r5, [r4, #4]
  402dae:	60a5      	str	r5, [r4, #8]
  402db0:	2d00      	cmp	r5, #0
  402db2:	db08      	blt.n	402dc6 <_printf_i+0x13a>
  402db4:	6820      	ldr	r0, [r4, #0]
  402db6:	f020 0004 	bic.w	r0, r0, #4
  402dba:	6020      	str	r0, [r4, #0]
  402dbc:	b92b      	cbnz	r3, 402dca <_printf_i+0x13e>
  402dbe:	2d00      	cmp	r5, #0
  402dc0:	d17d      	bne.n	402ebe <_printf_i+0x232>
  402dc2:	4675      	mov	r5, lr
  402dc4:	e00c      	b.n	402de0 <_printf_i+0x154>
  402dc6:	2b00      	cmp	r3, #0
  402dc8:	d079      	beq.n	402ebe <_printf_i+0x232>
  402dca:	4675      	mov	r5, lr
  402dcc:	fbb3 f0f2 	udiv	r0, r3, r2
  402dd0:	fb02 3310 	mls	r3, r2, r0, r3
  402dd4:	5ccb      	ldrb	r3, [r1, r3]
  402dd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402dda:	4603      	mov	r3, r0
  402ddc:	2800      	cmp	r0, #0
  402dde:	d1f5      	bne.n	402dcc <_printf_i+0x140>
  402de0:	2a08      	cmp	r2, #8
  402de2:	d10b      	bne.n	402dfc <_printf_i+0x170>
  402de4:	6823      	ldr	r3, [r4, #0]
  402de6:	07da      	lsls	r2, r3, #31
  402de8:	d508      	bpl.n	402dfc <_printf_i+0x170>
  402dea:	6923      	ldr	r3, [r4, #16]
  402dec:	6862      	ldr	r2, [r4, #4]
  402dee:	429a      	cmp	r2, r3
  402df0:	bfde      	ittt	le
  402df2:	2330      	movle	r3, #48	; 0x30
  402df4:	f805 3c01 	strble.w	r3, [r5, #-1]
  402df8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  402dfc:	ebc5 030e 	rsb	r3, r5, lr
  402e00:	6123      	str	r3, [r4, #16]
  402e02:	e02e      	b.n	402e62 <_printf_i+0x1d6>
  402e04:	6808      	ldr	r0, [r1, #0]
  402e06:	681a      	ldr	r2, [r3, #0]
  402e08:	6949      	ldr	r1, [r1, #20]
  402e0a:	f010 0f80 	tst.w	r0, #128	; 0x80
  402e0e:	d003      	beq.n	402e18 <_printf_i+0x18c>
  402e10:	1d10      	adds	r0, r2, #4
  402e12:	6018      	str	r0, [r3, #0]
  402e14:	6813      	ldr	r3, [r2, #0]
  402e16:	e008      	b.n	402e2a <_printf_i+0x19e>
  402e18:	f010 0f40 	tst.w	r0, #64	; 0x40
  402e1c:	f102 0004 	add.w	r0, r2, #4
  402e20:	6018      	str	r0, [r3, #0]
  402e22:	6813      	ldr	r3, [r2, #0]
  402e24:	d001      	beq.n	402e2a <_printf_i+0x19e>
  402e26:	8019      	strh	r1, [r3, #0]
  402e28:	e000      	b.n	402e2c <_printf_i+0x1a0>
  402e2a:	6019      	str	r1, [r3, #0]
  402e2c:	2300      	movs	r3, #0
  402e2e:	6123      	str	r3, [r4, #16]
  402e30:	4675      	mov	r5, lr
  402e32:	e016      	b.n	402e62 <_printf_i+0x1d6>
  402e34:	681a      	ldr	r2, [r3, #0]
  402e36:	1d11      	adds	r1, r2, #4
  402e38:	6019      	str	r1, [r3, #0]
  402e3a:	6815      	ldr	r5, [r2, #0]
  402e3c:	6862      	ldr	r2, [r4, #4]
  402e3e:	2100      	movs	r1, #0
  402e40:	4628      	mov	r0, r5
  402e42:	f001 fa65 	bl	404310 <memchr>
  402e46:	b108      	cbz	r0, 402e4c <_printf_i+0x1c0>
  402e48:	1b40      	subs	r0, r0, r5
  402e4a:	6060      	str	r0, [r4, #4]
  402e4c:	6863      	ldr	r3, [r4, #4]
  402e4e:	e004      	b.n	402e5a <_printf_i+0x1ce>
  402e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402e54:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402e58:	2301      	movs	r3, #1
  402e5a:	6123      	str	r3, [r4, #16]
  402e5c:	2300      	movs	r3, #0
  402e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402e62:	f8cd 8000 	str.w	r8, [sp]
  402e66:	463b      	mov	r3, r7
  402e68:	aa03      	add	r2, sp, #12
  402e6a:	4621      	mov	r1, r4
  402e6c:	4630      	mov	r0, r6
  402e6e:	f7ff fe97 	bl	402ba0 <_printf_common>
  402e72:	3001      	adds	r0, #1
  402e74:	d102      	bne.n	402e7c <_printf_i+0x1f0>
  402e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402e7a:	e026      	b.n	402eca <_printf_i+0x23e>
  402e7c:	6923      	ldr	r3, [r4, #16]
  402e7e:	462a      	mov	r2, r5
  402e80:	4639      	mov	r1, r7
  402e82:	4630      	mov	r0, r6
  402e84:	47c0      	blx	r8
  402e86:	3001      	adds	r0, #1
  402e88:	d0f5      	beq.n	402e76 <_printf_i+0x1ea>
  402e8a:	6823      	ldr	r3, [r4, #0]
  402e8c:	079b      	lsls	r3, r3, #30
  402e8e:	d510      	bpl.n	402eb2 <_printf_i+0x226>
  402e90:	2500      	movs	r5, #0
  402e92:	f104 0919 	add.w	r9, r4, #25
  402e96:	e007      	b.n	402ea8 <_printf_i+0x21c>
  402e98:	2301      	movs	r3, #1
  402e9a:	464a      	mov	r2, r9
  402e9c:	4639      	mov	r1, r7
  402e9e:	4630      	mov	r0, r6
  402ea0:	47c0      	blx	r8
  402ea2:	3001      	adds	r0, #1
  402ea4:	d0e7      	beq.n	402e76 <_printf_i+0x1ea>
  402ea6:	3501      	adds	r5, #1
  402ea8:	68e3      	ldr	r3, [r4, #12]
  402eaa:	9a03      	ldr	r2, [sp, #12]
  402eac:	1a9b      	subs	r3, r3, r2
  402eae:	429d      	cmp	r5, r3
  402eb0:	dbf2      	blt.n	402e98 <_printf_i+0x20c>
  402eb2:	68e0      	ldr	r0, [r4, #12]
  402eb4:	9b03      	ldr	r3, [sp, #12]
  402eb6:	4298      	cmp	r0, r3
  402eb8:	bfb8      	it	lt
  402eba:	4618      	movlt	r0, r3
  402ebc:	e005      	b.n	402eca <_printf_i+0x23e>
  402ebe:	780b      	ldrb	r3, [r1, #0]
  402ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402ec8:	e78a      	b.n	402de0 <_printf_i+0x154>
  402eca:	b005      	add	sp, #20
  402ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402ed0:	004061a6 	.word	0x004061a6
  402ed4:	004061b7 	.word	0x004061b7

00402ed8 <iprintf>:
  402ed8:	b40f      	push	{r0, r1, r2, r3}
  402eda:	4b0a      	ldr	r3, [pc, #40]	; (402f04 <iprintf+0x2c>)
  402edc:	b513      	push	{r0, r1, r4, lr}
  402ede:	681c      	ldr	r4, [r3, #0]
  402ee0:	b124      	cbz	r4, 402eec <iprintf+0x14>
  402ee2:	69a3      	ldr	r3, [r4, #24]
  402ee4:	b913      	cbnz	r3, 402eec <iprintf+0x14>
  402ee6:	4620      	mov	r0, r4
  402ee8:	f001 f90c 	bl	404104 <__sinit>
  402eec:	ab05      	add	r3, sp, #20
  402eee:	9a04      	ldr	r2, [sp, #16]
  402ef0:	68a1      	ldr	r1, [r4, #8]
  402ef2:	9301      	str	r3, [sp, #4]
  402ef4:	4620      	mov	r0, r4
  402ef6:	f001 fe1f 	bl	404b38 <_vfiprintf_r>
  402efa:	b002      	add	sp, #8
  402efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402f00:	b004      	add	sp, #16
  402f02:	4770      	bx	lr
  402f04:	20000078 	.word	0x20000078

00402f08 <_puts_r>:
  402f08:	b570      	push	{r4, r5, r6, lr}
  402f0a:	460e      	mov	r6, r1
  402f0c:	4605      	mov	r5, r0
  402f0e:	b118      	cbz	r0, 402f18 <_puts_r+0x10>
  402f10:	6983      	ldr	r3, [r0, #24]
  402f12:	b90b      	cbnz	r3, 402f18 <_puts_r+0x10>
  402f14:	f001 f8f6 	bl	404104 <__sinit>
  402f18:	69ab      	ldr	r3, [r5, #24]
  402f1a:	68ac      	ldr	r4, [r5, #8]
  402f1c:	b913      	cbnz	r3, 402f24 <_puts_r+0x1c>
  402f1e:	4628      	mov	r0, r5
  402f20:	f001 f8f0 	bl	404104 <__sinit>
  402f24:	4b22      	ldr	r3, [pc, #136]	; (402fb0 <_puts_r+0xa8>)
  402f26:	429c      	cmp	r4, r3
  402f28:	d101      	bne.n	402f2e <_puts_r+0x26>
  402f2a:	686c      	ldr	r4, [r5, #4]
  402f2c:	e008      	b.n	402f40 <_puts_r+0x38>
  402f2e:	4b21      	ldr	r3, [pc, #132]	; (402fb4 <_puts_r+0xac>)
  402f30:	429c      	cmp	r4, r3
  402f32:	d101      	bne.n	402f38 <_puts_r+0x30>
  402f34:	68ac      	ldr	r4, [r5, #8]
  402f36:	e003      	b.n	402f40 <_puts_r+0x38>
  402f38:	4b1f      	ldr	r3, [pc, #124]	; (402fb8 <_puts_r+0xb0>)
  402f3a:	429c      	cmp	r4, r3
  402f3c:	bf08      	it	eq
  402f3e:	68ec      	ldreq	r4, [r5, #12]
  402f40:	89a3      	ldrh	r3, [r4, #12]
  402f42:	071b      	lsls	r3, r3, #28
  402f44:	d501      	bpl.n	402f4a <_puts_r+0x42>
  402f46:	6923      	ldr	r3, [r4, #16]
  402f48:	b93b      	cbnz	r3, 402f5a <_puts_r+0x52>
  402f4a:	4621      	mov	r1, r4
  402f4c:	4628      	mov	r0, r5
  402f4e:	f000 f94b 	bl	4031e8 <__swsetup_r>
  402f52:	b110      	cbz	r0, 402f5a <_puts_r+0x52>
  402f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402f58:	bd70      	pop	{r4, r5, r6, pc}
  402f5a:	3e01      	subs	r6, #1
  402f5c:	68a3      	ldr	r3, [r4, #8]
  402f5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  402f62:	3b01      	subs	r3, #1
  402f64:	60a3      	str	r3, [r4, #8]
  402f66:	b191      	cbz	r1, 402f8e <_puts_r+0x86>
  402f68:	2b00      	cmp	r3, #0
  402f6a:	da04      	bge.n	402f76 <_puts_r+0x6e>
  402f6c:	69a2      	ldr	r2, [r4, #24]
  402f6e:	4293      	cmp	r3, r2
  402f70:	db06      	blt.n	402f80 <_puts_r+0x78>
  402f72:	290a      	cmp	r1, #10
  402f74:	d004      	beq.n	402f80 <_puts_r+0x78>
  402f76:	6823      	ldr	r3, [r4, #0]
  402f78:	1c5a      	adds	r2, r3, #1
  402f7a:	6022      	str	r2, [r4, #0]
  402f7c:	7019      	strb	r1, [r3, #0]
  402f7e:	e7ed      	b.n	402f5c <_puts_r+0x54>
  402f80:	4622      	mov	r2, r4
  402f82:	4628      	mov	r0, r5
  402f84:	f000 f8dc 	bl	403140 <__swbuf_r>
  402f88:	3001      	adds	r0, #1
  402f8a:	d1e7      	bne.n	402f5c <_puts_r+0x54>
  402f8c:	e7e2      	b.n	402f54 <_puts_r+0x4c>
  402f8e:	2b00      	cmp	r3, #0
  402f90:	da08      	bge.n	402fa4 <_puts_r+0x9c>
  402f92:	4622      	mov	r2, r4
  402f94:	210a      	movs	r1, #10
  402f96:	4628      	mov	r0, r5
  402f98:	f000 f8d2 	bl	403140 <__swbuf_r>
  402f9c:	3001      	adds	r0, #1
  402f9e:	d0d9      	beq.n	402f54 <_puts_r+0x4c>
  402fa0:	200a      	movs	r0, #10
  402fa2:	bd70      	pop	{r4, r5, r6, pc}
  402fa4:	6823      	ldr	r3, [r4, #0]
  402fa6:	200a      	movs	r0, #10
  402fa8:	1c5a      	adds	r2, r3, #1
  402faa:	6022      	str	r2, [r4, #0]
  402fac:	7018      	strb	r0, [r3, #0]
  402fae:	bd70      	pop	{r4, r5, r6, pc}
  402fb0:	004061d8 	.word	0x004061d8
  402fb4:	004061f8 	.word	0x004061f8
  402fb8:	00406218 	.word	0x00406218

00402fbc <puts>:
  402fbc:	4b02      	ldr	r3, [pc, #8]	; (402fc8 <puts+0xc>)
  402fbe:	4601      	mov	r1, r0
  402fc0:	6818      	ldr	r0, [r3, #0]
  402fc2:	f7ff bfa1 	b.w	402f08 <_puts_r>
  402fc6:	bf00      	nop
  402fc8:	20000078 	.word	0x20000078

00402fcc <setbuf>:
  402fcc:	2900      	cmp	r1, #0
  402fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402fd2:	bf0c      	ite	eq
  402fd4:	2202      	moveq	r2, #2
  402fd6:	2200      	movne	r2, #0
  402fd8:	f000 b800 	b.w	402fdc <setvbuf>

00402fdc <setvbuf>:
  402fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  402fe0:	461d      	mov	r5, r3
  402fe2:	4b4f      	ldr	r3, [pc, #316]	; (403120 <setvbuf+0x144>)
  402fe4:	681e      	ldr	r6, [r3, #0]
  402fe6:	4604      	mov	r4, r0
  402fe8:	460f      	mov	r7, r1
  402fea:	4690      	mov	r8, r2
  402fec:	b126      	cbz	r6, 402ff8 <setvbuf+0x1c>
  402fee:	69b3      	ldr	r3, [r6, #24]
  402ff0:	b913      	cbnz	r3, 402ff8 <setvbuf+0x1c>
  402ff2:	4630      	mov	r0, r6
  402ff4:	f001 f886 	bl	404104 <__sinit>
  402ff8:	4b4a      	ldr	r3, [pc, #296]	; (403124 <setvbuf+0x148>)
  402ffa:	429c      	cmp	r4, r3
  402ffc:	d101      	bne.n	403002 <setvbuf+0x26>
  402ffe:	6874      	ldr	r4, [r6, #4]
  403000:	e008      	b.n	403014 <setvbuf+0x38>
  403002:	4b49      	ldr	r3, [pc, #292]	; (403128 <setvbuf+0x14c>)
  403004:	429c      	cmp	r4, r3
  403006:	d101      	bne.n	40300c <setvbuf+0x30>
  403008:	68b4      	ldr	r4, [r6, #8]
  40300a:	e003      	b.n	403014 <setvbuf+0x38>
  40300c:	4b47      	ldr	r3, [pc, #284]	; (40312c <setvbuf+0x150>)
  40300e:	429c      	cmp	r4, r3
  403010:	bf08      	it	eq
  403012:	68f4      	ldreq	r4, [r6, #12]
  403014:	f1b8 0f02 	cmp.w	r8, #2
  403018:	d004      	beq.n	403024 <setvbuf+0x48>
  40301a:	f1b8 0f01 	cmp.w	r8, #1
  40301e:	d879      	bhi.n	403114 <setvbuf+0x138>
  403020:	2d00      	cmp	r5, #0
  403022:	db77      	blt.n	403114 <setvbuf+0x138>
  403024:	4621      	mov	r1, r4
  403026:	4630      	mov	r0, r6
  403028:	f001 f802 	bl	404030 <_fflush_r>
  40302c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40302e:	b141      	cbz	r1, 403042 <setvbuf+0x66>
  403030:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403034:	4299      	cmp	r1, r3
  403036:	d002      	beq.n	40303e <setvbuf+0x62>
  403038:	4630      	mov	r0, r6
  40303a:	f001 fca9 	bl	404990 <_free_r>
  40303e:	2300      	movs	r3, #0
  403040:	6363      	str	r3, [r4, #52]	; 0x34
  403042:	2300      	movs	r3, #0
  403044:	61a3      	str	r3, [r4, #24]
  403046:	6063      	str	r3, [r4, #4]
  403048:	89a3      	ldrh	r3, [r4, #12]
  40304a:	061b      	lsls	r3, r3, #24
  40304c:	d503      	bpl.n	403056 <setvbuf+0x7a>
  40304e:	6921      	ldr	r1, [r4, #16]
  403050:	4630      	mov	r0, r6
  403052:	f001 fc9d 	bl	404990 <_free_r>
  403056:	89a3      	ldrh	r3, [r4, #12]
  403058:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40305c:	f023 0303 	bic.w	r3, r3, #3
  403060:	f1b8 0f02 	cmp.w	r8, #2
  403064:	81a3      	strh	r3, [r4, #12]
  403066:	d01e      	beq.n	4030a6 <setvbuf+0xca>
  403068:	ab01      	add	r3, sp, #4
  40306a:	466a      	mov	r2, sp
  40306c:	4621      	mov	r1, r4
  40306e:	4630      	mov	r0, r6
  403070:	f001 f8e0 	bl	404234 <__swhatbuf_r>
  403074:	89a3      	ldrh	r3, [r4, #12]
  403076:	4318      	orrs	r0, r3
  403078:	81a0      	strh	r0, [r4, #12]
  40307a:	b90d      	cbnz	r5, 403080 <setvbuf+0xa4>
  40307c:	9d00      	ldr	r5, [sp, #0]
  40307e:	e000      	b.n	403082 <setvbuf+0xa6>
  403080:	bb2f      	cbnz	r7, 4030ce <setvbuf+0xf2>
  403082:	4628      	mov	r0, r5
  403084:	f001 f936 	bl	4042f4 <malloc>
  403088:	4607      	mov	r7, r0
  40308a:	b9d0      	cbnz	r0, 4030c2 <setvbuf+0xe6>
  40308c:	f8dd 9000 	ldr.w	r9, [sp]
  403090:	45a9      	cmp	r9, r5
  403092:	d102      	bne.n	40309a <setvbuf+0xbe>
  403094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403098:	e006      	b.n	4030a8 <setvbuf+0xcc>
  40309a:	4648      	mov	r0, r9
  40309c:	f001 f92a 	bl	4042f4 <malloc>
  4030a0:	4607      	mov	r7, r0
  4030a2:	b978      	cbnz	r0, 4030c4 <setvbuf+0xe8>
  4030a4:	e7f6      	b.n	403094 <setvbuf+0xb8>
  4030a6:	2000      	movs	r0, #0
  4030a8:	89a3      	ldrh	r3, [r4, #12]
  4030aa:	f043 0302 	orr.w	r3, r3, #2
  4030ae:	81a3      	strh	r3, [r4, #12]
  4030b0:	2300      	movs	r3, #0
  4030b2:	60a3      	str	r3, [r4, #8]
  4030b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4030b8:	6023      	str	r3, [r4, #0]
  4030ba:	6123      	str	r3, [r4, #16]
  4030bc:	2301      	movs	r3, #1
  4030be:	6163      	str	r3, [r4, #20]
  4030c0:	e02a      	b.n	403118 <setvbuf+0x13c>
  4030c2:	46a9      	mov	r9, r5
  4030c4:	89a3      	ldrh	r3, [r4, #12]
  4030c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4030ca:	81a3      	strh	r3, [r4, #12]
  4030cc:	464d      	mov	r5, r9
  4030ce:	69b3      	ldr	r3, [r6, #24]
  4030d0:	b913      	cbnz	r3, 4030d8 <setvbuf+0xfc>
  4030d2:	4630      	mov	r0, r6
  4030d4:	f001 f816 	bl	404104 <__sinit>
  4030d8:	f1b8 0f01 	cmp.w	r8, #1
  4030dc:	bf08      	it	eq
  4030de:	89a3      	ldrheq	r3, [r4, #12]
  4030e0:	6027      	str	r7, [r4, #0]
  4030e2:	bf04      	itt	eq
  4030e4:	f043 0301 	orreq.w	r3, r3, #1
  4030e8:	81a3      	strheq	r3, [r4, #12]
  4030ea:	89a3      	ldrh	r3, [r4, #12]
  4030ec:	6127      	str	r7, [r4, #16]
  4030ee:	f003 0008 	and.w	r0, r3, #8
  4030f2:	b280      	uxth	r0, r0
  4030f4:	6165      	str	r5, [r4, #20]
  4030f6:	b158      	cbz	r0, 403110 <setvbuf+0x134>
  4030f8:	f013 0301 	ands.w	r3, r3, #1
  4030fc:	f04f 0000 	mov.w	r0, #0
  403100:	bf1d      	ittte	ne
  403102:	426d      	negne	r5, r5
  403104:	60a0      	strne	r0, [r4, #8]
  403106:	61a5      	strne	r5, [r4, #24]
  403108:	60a5      	streq	r5, [r4, #8]
  40310a:	bf08      	it	eq
  40310c:	4618      	moveq	r0, r3
  40310e:	e003      	b.n	403118 <setvbuf+0x13c>
  403110:	60a0      	str	r0, [r4, #8]
  403112:	e001      	b.n	403118 <setvbuf+0x13c>
  403114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403118:	b003      	add	sp, #12
  40311a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40311e:	bf00      	nop
  403120:	20000078 	.word	0x20000078
  403124:	004061d8 	.word	0x004061d8
  403128:	004061f8 	.word	0x004061f8
  40312c:	00406218 	.word	0x00406218

00403130 <strlen>:
  403130:	4603      	mov	r3, r0
  403132:	f813 2b01 	ldrb.w	r2, [r3], #1
  403136:	2a00      	cmp	r2, #0
  403138:	d1fb      	bne.n	403132 <strlen+0x2>
  40313a:	1a18      	subs	r0, r3, r0
  40313c:	3801      	subs	r0, #1
  40313e:	4770      	bx	lr

00403140 <__swbuf_r>:
  403140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403142:	460f      	mov	r7, r1
  403144:	4614      	mov	r4, r2
  403146:	4605      	mov	r5, r0
  403148:	b118      	cbz	r0, 403152 <__swbuf_r+0x12>
  40314a:	6983      	ldr	r3, [r0, #24]
  40314c:	b90b      	cbnz	r3, 403152 <__swbuf_r+0x12>
  40314e:	f000 ffd9 	bl	404104 <__sinit>
  403152:	4b22      	ldr	r3, [pc, #136]	; (4031dc <__swbuf_r+0x9c>)
  403154:	429c      	cmp	r4, r3
  403156:	d101      	bne.n	40315c <__swbuf_r+0x1c>
  403158:	686c      	ldr	r4, [r5, #4]
  40315a:	e008      	b.n	40316e <__swbuf_r+0x2e>
  40315c:	4b20      	ldr	r3, [pc, #128]	; (4031e0 <__swbuf_r+0xa0>)
  40315e:	429c      	cmp	r4, r3
  403160:	d101      	bne.n	403166 <__swbuf_r+0x26>
  403162:	68ac      	ldr	r4, [r5, #8]
  403164:	e003      	b.n	40316e <__swbuf_r+0x2e>
  403166:	4b1f      	ldr	r3, [pc, #124]	; (4031e4 <__swbuf_r+0xa4>)
  403168:	429c      	cmp	r4, r3
  40316a:	bf08      	it	eq
  40316c:	68ec      	ldreq	r4, [r5, #12]
  40316e:	69a3      	ldr	r3, [r4, #24]
  403170:	60a3      	str	r3, [r4, #8]
  403172:	89a3      	ldrh	r3, [r4, #12]
  403174:	071a      	lsls	r2, r3, #28
  403176:	d509      	bpl.n	40318c <__swbuf_r+0x4c>
  403178:	6923      	ldr	r3, [r4, #16]
  40317a:	b13b      	cbz	r3, 40318c <__swbuf_r+0x4c>
  40317c:	6823      	ldr	r3, [r4, #0]
  40317e:	6920      	ldr	r0, [r4, #16]
  403180:	1a18      	subs	r0, r3, r0
  403182:	6963      	ldr	r3, [r4, #20]
  403184:	4298      	cmp	r0, r3
  403186:	b2fe      	uxtb	r6, r7
  403188:	db0f      	blt.n	4031aa <__swbuf_r+0x6a>
  40318a:	e008      	b.n	40319e <__swbuf_r+0x5e>
  40318c:	4621      	mov	r1, r4
  40318e:	4628      	mov	r0, r5
  403190:	f000 f82a 	bl	4031e8 <__swsetup_r>
  403194:	2800      	cmp	r0, #0
  403196:	d0f1      	beq.n	40317c <__swbuf_r+0x3c>
  403198:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  40319c:	e01b      	b.n	4031d6 <__swbuf_r+0x96>
  40319e:	4621      	mov	r1, r4
  4031a0:	4628      	mov	r0, r5
  4031a2:	f000 ff45 	bl	404030 <_fflush_r>
  4031a6:	2800      	cmp	r0, #0
  4031a8:	d1f6      	bne.n	403198 <__swbuf_r+0x58>
  4031aa:	68a3      	ldr	r3, [r4, #8]
  4031ac:	3b01      	subs	r3, #1
  4031ae:	60a3      	str	r3, [r4, #8]
  4031b0:	6823      	ldr	r3, [r4, #0]
  4031b2:	1c5a      	adds	r2, r3, #1
  4031b4:	6022      	str	r2, [r4, #0]
  4031b6:	701f      	strb	r7, [r3, #0]
  4031b8:	6963      	ldr	r3, [r4, #20]
  4031ba:	3001      	adds	r0, #1
  4031bc:	4298      	cmp	r0, r3
  4031be:	d004      	beq.n	4031ca <__swbuf_r+0x8a>
  4031c0:	89a3      	ldrh	r3, [r4, #12]
  4031c2:	07db      	lsls	r3, r3, #31
  4031c4:	d507      	bpl.n	4031d6 <__swbuf_r+0x96>
  4031c6:	2e0a      	cmp	r6, #10
  4031c8:	d105      	bne.n	4031d6 <__swbuf_r+0x96>
  4031ca:	4621      	mov	r1, r4
  4031cc:	4628      	mov	r0, r5
  4031ce:	f000 ff2f 	bl	404030 <_fflush_r>
  4031d2:	2800      	cmp	r0, #0
  4031d4:	d1e0      	bne.n	403198 <__swbuf_r+0x58>
  4031d6:	4630      	mov	r0, r6
  4031d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4031da:	bf00      	nop
  4031dc:	004061d8 	.word	0x004061d8
  4031e0:	004061f8 	.word	0x004061f8
  4031e4:	00406218 	.word	0x00406218

004031e8 <__swsetup_r>:
  4031e8:	4b32      	ldr	r3, [pc, #200]	; (4032b4 <__swsetup_r+0xcc>)
  4031ea:	b570      	push	{r4, r5, r6, lr}
  4031ec:	681d      	ldr	r5, [r3, #0]
  4031ee:	4606      	mov	r6, r0
  4031f0:	460c      	mov	r4, r1
  4031f2:	b125      	cbz	r5, 4031fe <__swsetup_r+0x16>
  4031f4:	69ab      	ldr	r3, [r5, #24]
  4031f6:	b913      	cbnz	r3, 4031fe <__swsetup_r+0x16>
  4031f8:	4628      	mov	r0, r5
  4031fa:	f000 ff83 	bl	404104 <__sinit>
  4031fe:	4b2e      	ldr	r3, [pc, #184]	; (4032b8 <__swsetup_r+0xd0>)
  403200:	429c      	cmp	r4, r3
  403202:	d101      	bne.n	403208 <__swsetup_r+0x20>
  403204:	686c      	ldr	r4, [r5, #4]
  403206:	e008      	b.n	40321a <__swsetup_r+0x32>
  403208:	4b2c      	ldr	r3, [pc, #176]	; (4032bc <__swsetup_r+0xd4>)
  40320a:	429c      	cmp	r4, r3
  40320c:	d101      	bne.n	403212 <__swsetup_r+0x2a>
  40320e:	68ac      	ldr	r4, [r5, #8]
  403210:	e003      	b.n	40321a <__swsetup_r+0x32>
  403212:	4b2b      	ldr	r3, [pc, #172]	; (4032c0 <__swsetup_r+0xd8>)
  403214:	429c      	cmp	r4, r3
  403216:	bf08      	it	eq
  403218:	68ec      	ldreq	r4, [r5, #12]
  40321a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40321e:	b29a      	uxth	r2, r3
  403220:	0715      	lsls	r5, r2, #28
  403222:	d41d      	bmi.n	403260 <__swsetup_r+0x78>
  403224:	06d0      	lsls	r0, r2, #27
  403226:	d402      	bmi.n	40322e <__swsetup_r+0x46>
  403228:	2209      	movs	r2, #9
  40322a:	6032      	str	r2, [r6, #0]
  40322c:	e03a      	b.n	4032a4 <__swsetup_r+0xbc>
  40322e:	0751      	lsls	r1, r2, #29
  403230:	d512      	bpl.n	403258 <__swsetup_r+0x70>
  403232:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403234:	b141      	cbz	r1, 403248 <__swsetup_r+0x60>
  403236:	f104 0344 	add.w	r3, r4, #68	; 0x44
  40323a:	4299      	cmp	r1, r3
  40323c:	d002      	beq.n	403244 <__swsetup_r+0x5c>
  40323e:	4630      	mov	r0, r6
  403240:	f001 fba6 	bl	404990 <_free_r>
  403244:	2300      	movs	r3, #0
  403246:	6363      	str	r3, [r4, #52]	; 0x34
  403248:	89a3      	ldrh	r3, [r4, #12]
  40324a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  40324e:	81a3      	strh	r3, [r4, #12]
  403250:	2300      	movs	r3, #0
  403252:	6063      	str	r3, [r4, #4]
  403254:	6923      	ldr	r3, [r4, #16]
  403256:	6023      	str	r3, [r4, #0]
  403258:	89a3      	ldrh	r3, [r4, #12]
  40325a:	f043 0308 	orr.w	r3, r3, #8
  40325e:	81a3      	strh	r3, [r4, #12]
  403260:	6923      	ldr	r3, [r4, #16]
  403262:	b94b      	cbnz	r3, 403278 <__swsetup_r+0x90>
  403264:	89a3      	ldrh	r3, [r4, #12]
  403266:	f403 7320 	and.w	r3, r3, #640	; 0x280
  40326a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40326e:	d003      	beq.n	403278 <__swsetup_r+0x90>
  403270:	4621      	mov	r1, r4
  403272:	4630      	mov	r0, r6
  403274:	f001 f802 	bl	40427c <__smakebuf_r>
  403278:	89a2      	ldrh	r2, [r4, #12]
  40327a:	f012 0301 	ands.w	r3, r2, #1
  40327e:	d005      	beq.n	40328c <__swsetup_r+0xa4>
  403280:	2300      	movs	r3, #0
  403282:	60a3      	str	r3, [r4, #8]
  403284:	6963      	ldr	r3, [r4, #20]
  403286:	425b      	negs	r3, r3
  403288:	61a3      	str	r3, [r4, #24]
  40328a:	e003      	b.n	403294 <__swsetup_r+0xac>
  40328c:	0792      	lsls	r2, r2, #30
  40328e:	bf58      	it	pl
  403290:	6963      	ldrpl	r3, [r4, #20]
  403292:	60a3      	str	r3, [r4, #8]
  403294:	6923      	ldr	r3, [r4, #16]
  403296:	b95b      	cbnz	r3, 4032b0 <__swsetup_r+0xc8>
  403298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40329c:	f003 0080 	and.w	r0, r3, #128	; 0x80
  4032a0:	b280      	uxth	r0, r0
  4032a2:	b130      	cbz	r0, 4032b2 <__swsetup_r+0xca>
  4032a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4032a8:	81a3      	strh	r3, [r4, #12]
  4032aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4032ae:	bd70      	pop	{r4, r5, r6, pc}
  4032b0:	2000      	movs	r0, #0
  4032b2:	bd70      	pop	{r4, r5, r6, pc}
  4032b4:	20000078 	.word	0x20000078
  4032b8:	004061d8 	.word	0x004061d8
  4032bc:	004061f8 	.word	0x004061f8
  4032c0:	00406218 	.word	0x00406218

004032c4 <quorem>:
  4032c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032c8:	6903      	ldr	r3, [r0, #16]
  4032ca:	690c      	ldr	r4, [r1, #16]
  4032cc:	429c      	cmp	r4, r3
  4032ce:	4680      	mov	r8, r0
  4032d0:	f300 8083 	bgt.w	4033da <quorem+0x116>
  4032d4:	3c01      	subs	r4, #1
  4032d6:	f101 0714 	add.w	r7, r1, #20
  4032da:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4032de:	f100 0614 	add.w	r6, r0, #20
  4032e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4032e6:	eb06 030e 	add.w	r3, r6, lr
  4032ea:	9301      	str	r3, [sp, #4]
  4032ec:	3501      	adds	r5, #1
  4032ee:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  4032f2:	fbb3 f5f5 	udiv	r5, r3, r5
  4032f6:	eb07 090e 	add.w	r9, r7, lr
  4032fa:	2d00      	cmp	r5, #0
  4032fc:	d039      	beq.n	403372 <quorem+0xae>
  4032fe:	f04f 0a00 	mov.w	sl, #0
  403302:	4638      	mov	r0, r7
  403304:	46b4      	mov	ip, r6
  403306:	46d3      	mov	fp, sl
  403308:	f850 2b04 	ldr.w	r2, [r0], #4
  40330c:	b293      	uxth	r3, r2
  40330e:	fb05 a303 	mla	r3, r5, r3, sl
  403312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403316:	b29b      	uxth	r3, r3
  403318:	ebc3 030b 	rsb	r3, r3, fp
  40331c:	0c12      	lsrs	r2, r2, #16
  40331e:	f8bc b000 	ldrh.w	fp, [ip]
  403322:	fb05 a202 	mla	r2, r5, r2, sl
  403326:	fa13 f38b 	uxtah	r3, r3, fp
  40332a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  40332e:	fa1f fb82 	uxth.w	fp, r2
  403332:	f8dc 2000 	ldr.w	r2, [ip]
  403336:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  40333a:	eb02 4223 	add.w	r2, r2, r3, asr #16
  40333e:	b29b      	uxth	r3, r3
  403340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403344:	4581      	cmp	r9, r0
  403346:	ea4f 4b22 	mov.w	fp, r2, asr #16
  40334a:	f84c 3b04 	str.w	r3, [ip], #4
  40334e:	d2db      	bcs.n	403308 <quorem+0x44>
  403350:	f856 300e 	ldr.w	r3, [r6, lr]
  403354:	b96b      	cbnz	r3, 403372 <quorem+0xae>
  403356:	9b01      	ldr	r3, [sp, #4]
  403358:	3b04      	subs	r3, #4
  40335a:	429e      	cmp	r6, r3
  40335c:	461a      	mov	r2, r3
  40335e:	d302      	bcc.n	403366 <quorem+0xa2>
  403360:	f8c8 4010 	str.w	r4, [r8, #16]
  403364:	e005      	b.n	403372 <quorem+0xae>
  403366:	6812      	ldr	r2, [r2, #0]
  403368:	3b04      	subs	r3, #4
  40336a:	2a00      	cmp	r2, #0
  40336c:	d1f8      	bne.n	403360 <quorem+0x9c>
  40336e:	3c01      	subs	r4, #1
  403370:	e7f3      	b.n	40335a <quorem+0x96>
  403372:	4640      	mov	r0, r8
  403374:	f001 fa35 	bl	4047e2 <__mcmp>
  403378:	2800      	cmp	r0, #0
  40337a:	db2c      	blt.n	4033d6 <quorem+0x112>
  40337c:	3501      	adds	r5, #1
  40337e:	4630      	mov	r0, r6
  403380:	f04f 0e00 	mov.w	lr, #0
  403384:	f857 1b04 	ldr.w	r1, [r7], #4
  403388:	f8d0 c000 	ldr.w	ip, [r0]
  40338c:	b28a      	uxth	r2, r1
  40338e:	ebc2 030e 	rsb	r3, r2, lr
  403392:	0c09      	lsrs	r1, r1, #16
  403394:	fa13 f38c 	uxtah	r3, r3, ip
  403398:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  40339c:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4033a0:	b29b      	uxth	r3, r3
  4033a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4033a6:	45b9      	cmp	r9, r7
  4033a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
  4033ac:	f840 3b04 	str.w	r3, [r0], #4
  4033b0:	d2e8      	bcs.n	403384 <quorem+0xc0>
  4033b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  4033b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  4033ba:	b962      	cbnz	r2, 4033d6 <quorem+0x112>
  4033bc:	3b04      	subs	r3, #4
  4033be:	429e      	cmp	r6, r3
  4033c0:	461a      	mov	r2, r3
  4033c2:	d302      	bcc.n	4033ca <quorem+0x106>
  4033c4:	f8c8 4010 	str.w	r4, [r8, #16]
  4033c8:	e005      	b.n	4033d6 <quorem+0x112>
  4033ca:	6812      	ldr	r2, [r2, #0]
  4033cc:	3b04      	subs	r3, #4
  4033ce:	2a00      	cmp	r2, #0
  4033d0:	d1f8      	bne.n	4033c4 <quorem+0x100>
  4033d2:	3c01      	subs	r4, #1
  4033d4:	e7f3      	b.n	4033be <quorem+0xfa>
  4033d6:	4628      	mov	r0, r5
  4033d8:	e000      	b.n	4033dc <quorem+0x118>
  4033da:	2000      	movs	r0, #0
  4033dc:	b003      	add	sp, #12
  4033de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033e2:	0000      	movs	r0, r0
  4033e4:	0000      	movs	r0, r0
	...

004033e8 <_dtoa_r>:
  4033e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4033ee:	b095      	sub	sp, #84	; 0x54
  4033f0:	4682      	mov	sl, r0
  4033f2:	9c21      	ldr	r4, [sp, #132]	; 0x84
  4033f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4033f8:	b945      	cbnz	r5, 40340c <_dtoa_r+0x24>
  4033fa:	2010      	movs	r0, #16
  4033fc:	f000 ff7a 	bl	4042f4 <malloc>
  403400:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  403404:	6045      	str	r5, [r0, #4]
  403406:	6085      	str	r5, [r0, #8]
  403408:	6005      	str	r5, [r0, #0]
  40340a:	60c5      	str	r5, [r0, #12]
  40340c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403410:	6819      	ldr	r1, [r3, #0]
  403412:	b159      	cbz	r1, 40342c <_dtoa_r+0x44>
  403414:	685a      	ldr	r2, [r3, #4]
  403416:	604a      	str	r2, [r1, #4]
  403418:	2301      	movs	r3, #1
  40341a:	4093      	lsls	r3, r2
  40341c:	608b      	str	r3, [r1, #8]
  40341e:	4650      	mov	r0, sl
  403420:	f001 f806 	bl	404430 <_Bfree>
  403424:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403428:	2200      	movs	r2, #0
  40342a:	601a      	str	r2, [r3, #0]
  40342c:	9b03      	ldr	r3, [sp, #12]
  40342e:	4aa0      	ldr	r2, [pc, #640]	; (4036b0 <_dtoa_r+0x2c8>)
  403430:	2b00      	cmp	r3, #0
  403432:	bfbf      	itttt	lt
  403434:	2301      	movlt	r3, #1
  403436:	6023      	strlt	r3, [r4, #0]
  403438:	9b03      	ldrlt	r3, [sp, #12]
  40343a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  40343e:	bfb8      	it	lt
  403440:	9303      	strlt	r3, [sp, #12]
  403442:	f8dd 800c 	ldr.w	r8, [sp, #12]
  403446:	bfa4      	itt	ge
  403448:	2300      	movge	r3, #0
  40344a:	6023      	strge	r3, [r4, #0]
  40344c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  403450:	0d1b      	lsrs	r3, r3, #20
  403452:	051b      	lsls	r3, r3, #20
  403454:	4293      	cmp	r3, r2
  403456:	d11d      	bne.n	403494 <_dtoa_r+0xac>
  403458:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40345a:	f242 730f 	movw	r3, #9999	; 0x270f
  40345e:	6013      	str	r3, [r2, #0]
  403460:	9b02      	ldr	r3, [sp, #8]
  403462:	b943      	cbnz	r3, 403476 <_dtoa_r+0x8e>
  403464:	4a93      	ldr	r2, [pc, #588]	; (4036b4 <_dtoa_r+0x2cc>)
  403466:	4b94      	ldr	r3, [pc, #592]	; (4036b8 <_dtoa_r+0x2d0>)
  403468:	f3c8 0013 	ubfx	r0, r8, #0, #20
  40346c:	2800      	cmp	r0, #0
  40346e:	bf14      	ite	ne
  403470:	4618      	movne	r0, r3
  403472:	4610      	moveq	r0, r2
  403474:	e000      	b.n	403478 <_dtoa_r+0x90>
  403476:	4890      	ldr	r0, [pc, #576]	; (4036b8 <_dtoa_r+0x2d0>)
  403478:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40347a:	2b00      	cmp	r3, #0
  40347c:	f000 854a 	beq.w	403f14 <_dtoa_r+0xb2c>
  403480:	78c3      	ldrb	r3, [r0, #3]
  403482:	b113      	cbz	r3, 40348a <_dtoa_r+0xa2>
  403484:	f100 0308 	add.w	r3, r0, #8
  403488:	e000      	b.n	40348c <_dtoa_r+0xa4>
  40348a:	1cc3      	adds	r3, r0, #3
  40348c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40348e:	6013      	str	r3, [r2, #0]
  403490:	f000 bd40 	b.w	403f14 <_dtoa_r+0xb2c>
  403494:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  403498:	2200      	movs	r2, #0
  40349a:	2300      	movs	r3, #0
  40349c:	4620      	mov	r0, r4
  40349e:	4629      	mov	r1, r5
  4034a0:	f002 f964 	bl	40576c <__aeabi_dcmpeq>
  4034a4:	4607      	mov	r7, r0
  4034a6:	b158      	cbz	r0, 4034c0 <_dtoa_r+0xd8>
  4034a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4034aa:	2301      	movs	r3, #1
  4034ac:	6013      	str	r3, [r2, #0]
  4034ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4034b0:	2b00      	cmp	r3, #0
  4034b2:	f000 8522 	beq.w	403efa <_dtoa_r+0xb12>
  4034b6:	4881      	ldr	r0, [pc, #516]	; (4036bc <_dtoa_r+0x2d4>)
  4034b8:	6018      	str	r0, [r3, #0]
  4034ba:	3801      	subs	r0, #1
  4034bc:	f000 bd2a 	b.w	403f14 <_dtoa_r+0xb2c>
  4034c0:	ab12      	add	r3, sp, #72	; 0x48
  4034c2:	9301      	str	r3, [sp, #4]
  4034c4:	ab13      	add	r3, sp, #76	; 0x4c
  4034c6:	9300      	str	r3, [sp, #0]
  4034c8:	4622      	mov	r2, r4
  4034ca:	462b      	mov	r3, r5
  4034cc:	4650      	mov	r0, sl
  4034ce:	f001 fa03 	bl	4048d8 <__d2b>
  4034d2:	f3c8 560a 	ubfx	r6, r8, #20, #11
  4034d6:	9004      	str	r0, [sp, #16]
  4034d8:	b156      	cbz	r6, 4034f0 <_dtoa_r+0x108>
  4034da:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4034de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4034e2:	4620      	mov	r0, r4
  4034e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4034e8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  4034ec:	9711      	str	r7, [sp, #68]	; 0x44
  4034ee:	e01d      	b.n	40352c <_dtoa_r+0x144>
  4034f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4034f2:	9e12      	ldr	r6, [sp, #72]	; 0x48
  4034f4:	441e      	add	r6, r3
  4034f6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4034fa:	2b20      	cmp	r3, #32
  4034fc:	dd0a      	ble.n	403514 <_dtoa_r+0x12c>
  4034fe:	9a02      	ldr	r2, [sp, #8]
  403500:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403504:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403508:	fa22 f000 	lsr.w	r0, r2, r0
  40350c:	fa08 f303 	lsl.w	r3, r8, r3
  403510:	4318      	orrs	r0, r3
  403512:	e004      	b.n	40351e <_dtoa_r+0x136>
  403514:	f1c3 0020 	rsb	r0, r3, #32
  403518:	9b02      	ldr	r3, [sp, #8]
  40351a:	fa03 f000 	lsl.w	r0, r3, r0
  40351e:	f001 fe47 	bl	4051b0 <__aeabi_ui2d>
  403522:	2301      	movs	r3, #1
  403524:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403528:	3e01      	subs	r6, #1
  40352a:	9311      	str	r3, [sp, #68]	; 0x44
  40352c:	2200      	movs	r2, #0
  40352e:	4b64      	ldr	r3, [pc, #400]	; (4036c0 <_dtoa_r+0x2d8>)
  403530:	f001 fd00 	bl	404f34 <__aeabi_dsub>
  403534:	a358      	add	r3, pc, #352	; (adr r3, 403698 <_dtoa_r+0x2b0>)
  403536:	e9d3 2300 	ldrd	r2, r3, [r3]
  40353a:	f001 feaf 	bl	40529c <__aeabi_dmul>
  40353e:	a358      	add	r3, pc, #352	; (adr r3, 4036a0 <_dtoa_r+0x2b8>)
  403540:	e9d3 2300 	ldrd	r2, r3, [r3]
  403544:	f001 fcf8 	bl	404f38 <__adddf3>
  403548:	4604      	mov	r4, r0
  40354a:	4630      	mov	r0, r6
  40354c:	460d      	mov	r5, r1
  40354e:	f001 fe3f 	bl	4051d0 <__aeabi_i2d>
  403552:	a355      	add	r3, pc, #340	; (adr r3, 4036a8 <_dtoa_r+0x2c0>)
  403554:	e9d3 2300 	ldrd	r2, r3, [r3]
  403558:	f001 fea0 	bl	40529c <__aeabi_dmul>
  40355c:	4602      	mov	r2, r0
  40355e:	460b      	mov	r3, r1
  403560:	4620      	mov	r0, r4
  403562:	4629      	mov	r1, r5
  403564:	f001 fce8 	bl	404f38 <__adddf3>
  403568:	4604      	mov	r4, r0
  40356a:	460d      	mov	r5, r1
  40356c:	f002 f946 	bl	4057fc <__aeabi_d2iz>
  403570:	2200      	movs	r2, #0
  403572:	4683      	mov	fp, r0
  403574:	2300      	movs	r3, #0
  403576:	4620      	mov	r0, r4
  403578:	4629      	mov	r1, r5
  40357a:	f002 f901 	bl	405780 <__aeabi_dcmplt>
  40357e:	b158      	cbz	r0, 403598 <_dtoa_r+0x1b0>
  403580:	4658      	mov	r0, fp
  403582:	f001 fe25 	bl	4051d0 <__aeabi_i2d>
  403586:	4602      	mov	r2, r0
  403588:	460b      	mov	r3, r1
  40358a:	4620      	mov	r0, r4
  40358c:	4629      	mov	r1, r5
  40358e:	f002 f8ed 	bl	40576c <__aeabi_dcmpeq>
  403592:	b908      	cbnz	r0, 403598 <_dtoa_r+0x1b0>
  403594:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403598:	f1bb 0f16 	cmp.w	fp, #22
  40359c:	d80d      	bhi.n	4035ba <_dtoa_r+0x1d2>
  40359e:	4949      	ldr	r1, [pc, #292]	; (4036c4 <_dtoa_r+0x2dc>)
  4035a0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4035a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4035a8:	e9d1 0100 	ldrd	r0, r1, [r1]
  4035ac:	f002 f906 	bl	4057bc <__aeabi_dcmpgt>
  4035b0:	b130      	cbz	r0, 4035c0 <_dtoa_r+0x1d8>
  4035b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4035b6:	2300      	movs	r3, #0
  4035b8:	e000      	b.n	4035bc <_dtoa_r+0x1d4>
  4035ba:	2301      	movs	r3, #1
  4035bc:	9310      	str	r3, [sp, #64]	; 0x40
  4035be:	e000      	b.n	4035c2 <_dtoa_r+0x1da>
  4035c0:	9010      	str	r0, [sp, #64]	; 0x40
  4035c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4035c4:	1b9e      	subs	r6, r3, r6
  4035c6:	1e73      	subs	r3, r6, #1
  4035c8:	9307      	str	r3, [sp, #28]
  4035ca:	bf43      	ittte	mi
  4035cc:	f1c3 0800 	rsbmi	r8, r3, #0
  4035d0:	2300      	movmi	r3, #0
  4035d2:	9307      	strmi	r3, [sp, #28]
  4035d4:	f04f 0800 	movpl.w	r8, #0
  4035d8:	f1bb 0f00 	cmp.w	fp, #0
  4035dc:	db06      	blt.n	4035ec <_dtoa_r+0x204>
  4035de:	9b07      	ldr	r3, [sp, #28]
  4035e0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  4035e4:	445b      	add	r3, fp
  4035e6:	9307      	str	r3, [sp, #28]
  4035e8:	2700      	movs	r7, #0
  4035ea:	e005      	b.n	4035f8 <_dtoa_r+0x210>
  4035ec:	2300      	movs	r3, #0
  4035ee:	ebcb 0808 	rsb	r8, fp, r8
  4035f2:	f1cb 0700 	rsb	r7, fp, #0
  4035f6:	930b      	str	r3, [sp, #44]	; 0x2c
  4035f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4035fa:	2b09      	cmp	r3, #9
  4035fc:	d827      	bhi.n	40364e <_dtoa_r+0x266>
  4035fe:	2b05      	cmp	r3, #5
  403600:	bfc4      	itt	gt
  403602:	3b04      	subgt	r3, #4
  403604:	931e      	strgt	r3, [sp, #120]	; 0x78
  403606:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403608:	f1a3 0302 	sub.w	r3, r3, #2
  40360c:	bfcc      	ite	gt
  40360e:	2500      	movgt	r5, #0
  403610:	2501      	movle	r5, #1
  403612:	2b03      	cmp	r3, #3
  403614:	d820      	bhi.n	403658 <_dtoa_r+0x270>
  403616:	e8df f003 	tbb	[pc, r3]
  40361a:	0e06      	.short	0x0e06
  40361c:	0402      	.short	0x0402
  40361e:	2301      	movs	r3, #1
  403620:	e002      	b.n	403628 <_dtoa_r+0x240>
  403622:	2301      	movs	r3, #1
  403624:	e008      	b.n	403638 <_dtoa_r+0x250>
  403626:	2300      	movs	r3, #0
  403628:	930a      	str	r3, [sp, #40]	; 0x28
  40362a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40362c:	2b00      	cmp	r3, #0
  40362e:	dd1d      	ble.n	40366c <_dtoa_r+0x284>
  403630:	4699      	mov	r9, r3
  403632:	9305      	str	r3, [sp, #20]
  403634:	e021      	b.n	40367a <_dtoa_r+0x292>
  403636:	2300      	movs	r3, #0
  403638:	930a      	str	r3, [sp, #40]	; 0x28
  40363a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40363c:	eb0b 0903 	add.w	r9, fp, r3
  403640:	f109 0301 	add.w	r3, r9, #1
  403644:	2b01      	cmp	r3, #1
  403646:	9305      	str	r3, [sp, #20]
  403648:	bfb8      	it	lt
  40364a:	2301      	movlt	r3, #1
  40364c:	e015      	b.n	40367a <_dtoa_r+0x292>
  40364e:	2501      	movs	r5, #1
  403650:	2300      	movs	r3, #0
  403652:	931e      	str	r3, [sp, #120]	; 0x78
  403654:	950a      	str	r5, [sp, #40]	; 0x28
  403656:	e001      	b.n	40365c <_dtoa_r+0x274>
  403658:	2301      	movs	r3, #1
  40365a:	930a      	str	r3, [sp, #40]	; 0x28
  40365c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  403660:	2200      	movs	r2, #0
  403662:	f8cd 9014 	str.w	r9, [sp, #20]
  403666:	2312      	movs	r3, #18
  403668:	921f      	str	r2, [sp, #124]	; 0x7c
  40366a:	e006      	b.n	40367a <_dtoa_r+0x292>
  40366c:	f04f 0901 	mov.w	r9, #1
  403670:	f8cd 9014 	str.w	r9, [sp, #20]
  403674:	464b      	mov	r3, r9
  403676:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  40367a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  40367e:	2200      	movs	r2, #0
  403680:	6062      	str	r2, [r4, #4]
  403682:	2104      	movs	r1, #4
  403684:	f101 0214 	add.w	r2, r1, #20
  403688:	429a      	cmp	r2, r3
  40368a:	d81d      	bhi.n	4036c8 <_dtoa_r+0x2e0>
  40368c:	6862      	ldr	r2, [r4, #4]
  40368e:	3201      	adds	r2, #1
  403690:	6062      	str	r2, [r4, #4]
  403692:	0049      	lsls	r1, r1, #1
  403694:	e7f6      	b.n	403684 <_dtoa_r+0x29c>
  403696:	bf00      	nop
  403698:	636f4361 	.word	0x636f4361
  40369c:	3fd287a7 	.word	0x3fd287a7
  4036a0:	8b60c8b3 	.word	0x8b60c8b3
  4036a4:	3fc68a28 	.word	0x3fc68a28
  4036a8:	509f79fb 	.word	0x509f79fb
  4036ac:	3fd34413 	.word	0x3fd34413
  4036b0:	7ff00000 	.word	0x7ff00000
  4036b4:	004061c8 	.word	0x004061c8
  4036b8:	004061d1 	.word	0x004061d1
  4036bc:	004061a5 	.word	0x004061a5
  4036c0:	3ff80000 	.word	0x3ff80000
  4036c4:	00406238 	.word	0x00406238
  4036c8:	6861      	ldr	r1, [r4, #4]
  4036ca:	4650      	mov	r0, sl
  4036cc:	f000 fe7b 	bl	4043c6 <_Balloc>
  4036d0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4036d4:	6020      	str	r0, [r4, #0]
  4036d6:	681b      	ldr	r3, [r3, #0]
  4036d8:	9306      	str	r3, [sp, #24]
  4036da:	9b05      	ldr	r3, [sp, #20]
  4036dc:	2b0e      	cmp	r3, #14
  4036de:	f200 815d 	bhi.w	40399c <_dtoa_r+0x5b4>
  4036e2:	2d00      	cmp	r5, #0
  4036e4:	f000 815a 	beq.w	40399c <_dtoa_r+0x5b4>
  4036e8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  4036ec:	f1bb 0f00 	cmp.w	fp, #0
  4036f0:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  4036f4:	dd31      	ble.n	40375a <_dtoa_r+0x372>
  4036f6:	4aa0      	ldr	r2, [pc, #640]	; (403978 <_dtoa_r+0x590>)
  4036f8:	f00b 030f 	and.w	r3, fp, #15
  4036fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403700:	e9d3 3400 	ldrd	r3, r4, [r3]
  403704:	ea4f 152b 	mov.w	r5, fp, asr #4
  403708:	06e8      	lsls	r0, r5, #27
  40370a:	e9cd 3408 	strd	r3, r4, [sp, #32]
  40370e:	d50c      	bpl.n	40372a <_dtoa_r+0x342>
  403710:	4b9a      	ldr	r3, [pc, #616]	; (40397c <_dtoa_r+0x594>)
  403712:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403716:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40371a:	f001 fee9 	bl	4054f0 <__aeabi_ddiv>
  40371e:	f005 050f 	and.w	r5, r5, #15
  403722:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403726:	2403      	movs	r4, #3
  403728:	e000      	b.n	40372c <_dtoa_r+0x344>
  40372a:	2402      	movs	r4, #2
  40372c:	4e93      	ldr	r6, [pc, #588]	; (40397c <_dtoa_r+0x594>)
  40372e:	b16d      	cbz	r5, 40374c <_dtoa_r+0x364>
  403730:	07e9      	lsls	r1, r5, #31
  403732:	d508      	bpl.n	403746 <_dtoa_r+0x35e>
  403734:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403738:	e9d6 2300 	ldrd	r2, r3, [r6]
  40373c:	f001 fdae 	bl	40529c <__aeabi_dmul>
  403740:	e9cd 0108 	strd	r0, r1, [sp, #32]
  403744:	3401      	adds	r4, #1
  403746:	106d      	asrs	r5, r5, #1
  403748:	3608      	adds	r6, #8
  40374a:	e7f0      	b.n	40372e <_dtoa_r+0x346>
  40374c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  403750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403754:	f001 fecc 	bl	4054f0 <__aeabi_ddiv>
  403758:	e020      	b.n	40379c <_dtoa_r+0x3b4>
  40375a:	f1cb 0500 	rsb	r5, fp, #0
  40375e:	b305      	cbz	r5, 4037a2 <_dtoa_r+0x3ba>
  403760:	4b85      	ldr	r3, [pc, #532]	; (403978 <_dtoa_r+0x590>)
  403762:	4e86      	ldr	r6, [pc, #536]	; (40397c <_dtoa_r+0x594>)
  403764:	f005 020f 	and.w	r2, r5, #15
  403768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40376c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403770:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403774:	f001 fd92 	bl	40529c <__aeabi_dmul>
  403778:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40377c:	112d      	asrs	r5, r5, #4
  40377e:	2300      	movs	r3, #0
  403780:	2402      	movs	r4, #2
  403782:	b155      	cbz	r5, 40379a <_dtoa_r+0x3b2>
  403784:	07ea      	lsls	r2, r5, #31
  403786:	d505      	bpl.n	403794 <_dtoa_r+0x3ac>
  403788:	e9d6 2300 	ldrd	r2, r3, [r6]
  40378c:	f001 fd86 	bl	40529c <__aeabi_dmul>
  403790:	3401      	adds	r4, #1
  403792:	2301      	movs	r3, #1
  403794:	106d      	asrs	r5, r5, #1
  403796:	3608      	adds	r6, #8
  403798:	e7f3      	b.n	403782 <_dtoa_r+0x39a>
  40379a:	b11b      	cbz	r3, 4037a4 <_dtoa_r+0x3bc>
  40379c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4037a0:	e000      	b.n	4037a4 <_dtoa_r+0x3bc>
  4037a2:	2402      	movs	r4, #2
  4037a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4037a6:	b1e3      	cbz	r3, 4037e2 <_dtoa_r+0x3fa>
  4037a8:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  4037ac:	2200      	movs	r2, #0
  4037ae:	4b74      	ldr	r3, [pc, #464]	; (403980 <_dtoa_r+0x598>)
  4037b0:	4628      	mov	r0, r5
  4037b2:	4631      	mov	r1, r6
  4037b4:	f001 ffe4 	bl	405780 <__aeabi_dcmplt>
  4037b8:	b198      	cbz	r0, 4037e2 <_dtoa_r+0x3fa>
  4037ba:	9b05      	ldr	r3, [sp, #20]
  4037bc:	b18b      	cbz	r3, 4037e2 <_dtoa_r+0x3fa>
  4037be:	f1b9 0f00 	cmp.w	r9, #0
  4037c2:	f340 80e7 	ble.w	403994 <_dtoa_r+0x5ac>
  4037c6:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  4037ca:	9308      	str	r3, [sp, #32]
  4037cc:	4631      	mov	r1, r6
  4037ce:	2200      	movs	r2, #0
  4037d0:	4b6c      	ldr	r3, [pc, #432]	; (403984 <_dtoa_r+0x59c>)
  4037d2:	4628      	mov	r0, r5
  4037d4:	f001 fd62 	bl	40529c <__aeabi_dmul>
  4037d8:	3401      	adds	r4, #1
  4037da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4037de:	464e      	mov	r6, r9
  4037e0:	e002      	b.n	4037e8 <_dtoa_r+0x400>
  4037e2:	9e05      	ldr	r6, [sp, #20]
  4037e4:	f8cd b020 	str.w	fp, [sp, #32]
  4037e8:	4620      	mov	r0, r4
  4037ea:	f001 fcf1 	bl	4051d0 <__aeabi_i2d>
  4037ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4037f2:	f001 fd53 	bl	40529c <__aeabi_dmul>
  4037f6:	4b64      	ldr	r3, [pc, #400]	; (403988 <_dtoa_r+0x5a0>)
  4037f8:	2200      	movs	r2, #0
  4037fa:	f001 fb9d 	bl	404f38 <__adddf3>
  4037fe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  403802:	4604      	mov	r4, r0
  403804:	930c      	str	r3, [sp, #48]	; 0x30
  403806:	461d      	mov	r5, r3
  403808:	b9d6      	cbnz	r6, 403840 <_dtoa_r+0x458>
  40380a:	2200      	movs	r2, #0
  40380c:	4b5f      	ldr	r3, [pc, #380]	; (40398c <_dtoa_r+0x5a4>)
  40380e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403812:	f001 fb8f 	bl	404f34 <__aeabi_dsub>
  403816:	4622      	mov	r2, r4
  403818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40381a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40381e:	f001 ffcd 	bl	4057bc <__aeabi_dcmpgt>
  403822:	2800      	cmp	r0, #0
  403824:	f040 8240 	bne.w	403ca8 <_dtoa_r+0x8c0>
  403828:	990c      	ldr	r1, [sp, #48]	; 0x30
  40382a:	4622      	mov	r2, r4
  40382c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  403830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403834:	f001 ffa4 	bl	405780 <__aeabi_dcmplt>
  403838:	2800      	cmp	r0, #0
  40383a:	f040 822c 	bne.w	403c96 <_dtoa_r+0x8ae>
  40383e:	e0a9      	b.n	403994 <_dtoa_r+0x5ac>
  403840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403842:	4b4d      	ldr	r3, [pc, #308]	; (403978 <_dtoa_r+0x590>)
  403844:	1e71      	subs	r1, r6, #1
  403846:	2a00      	cmp	r2, #0
  403848:	d049      	beq.n	4038de <_dtoa_r+0x4f6>
  40384a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40384e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403852:	2000      	movs	r0, #0
  403854:	494e      	ldr	r1, [pc, #312]	; (403990 <_dtoa_r+0x5a8>)
  403856:	f001 fe4b 	bl	4054f0 <__aeabi_ddiv>
  40385a:	4622      	mov	r2, r4
  40385c:	462b      	mov	r3, r5
  40385e:	f001 fb69 	bl	404f34 <__aeabi_dsub>
  403862:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403866:	9c06      	ldr	r4, [sp, #24]
  403868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40386c:	f001 ffc6 	bl	4057fc <__aeabi_d2iz>
  403870:	4605      	mov	r5, r0
  403872:	f001 fcad 	bl	4051d0 <__aeabi_i2d>
  403876:	4602      	mov	r2, r0
  403878:	460b      	mov	r3, r1
  40387a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40387e:	f001 fb59 	bl	404f34 <__aeabi_dsub>
  403882:	3530      	adds	r5, #48	; 0x30
  403884:	f804 5b01 	strb.w	r5, [r4], #1
  403888:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40388c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403890:	f001 ff76 	bl	405780 <__aeabi_dcmplt>
  403894:	2800      	cmp	r0, #0
  403896:	f040 8320 	bne.w	403eda <_dtoa_r+0xaf2>
  40389a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40389e:	2000      	movs	r0, #0
  4038a0:	4937      	ldr	r1, [pc, #220]	; (403980 <_dtoa_r+0x598>)
  4038a2:	f001 fb47 	bl	404f34 <__aeabi_dsub>
  4038a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4038aa:	f001 ff69 	bl	405780 <__aeabi_dcmplt>
  4038ae:	2800      	cmp	r0, #0
  4038b0:	f040 80d2 	bne.w	403a58 <_dtoa_r+0x670>
  4038b4:	9b06      	ldr	r3, [sp, #24]
  4038b6:	1ae3      	subs	r3, r4, r3
  4038b8:	42b3      	cmp	r3, r6
  4038ba:	da6b      	bge.n	403994 <_dtoa_r+0x5ac>
  4038bc:	2200      	movs	r2, #0
  4038be:	4b31      	ldr	r3, [pc, #196]	; (403984 <_dtoa_r+0x59c>)
  4038c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4038c4:	f001 fcea 	bl	40529c <__aeabi_dmul>
  4038c8:	2200      	movs	r2, #0
  4038ca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4038ce:	4b2d      	ldr	r3, [pc, #180]	; (403984 <_dtoa_r+0x59c>)
  4038d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4038d4:	f001 fce2 	bl	40529c <__aeabi_dmul>
  4038d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4038dc:	e7c4      	b.n	403868 <_dtoa_r+0x480>
  4038de:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4038e2:	4622      	mov	r2, r4
  4038e4:	462b      	mov	r3, r5
  4038e6:	e9d1 0100 	ldrd	r0, r1, [r1]
  4038ea:	f001 fcd7 	bl	40529c <__aeabi_dmul>
  4038ee:	9b06      	ldr	r3, [sp, #24]
  4038f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4038f4:	199c      	adds	r4, r3, r6
  4038f6:	461d      	mov	r5, r3
  4038f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4038fc:	f001 ff7e 	bl	4057fc <__aeabi_d2iz>
  403900:	4606      	mov	r6, r0
  403902:	f001 fc65 	bl	4051d0 <__aeabi_i2d>
  403906:	3630      	adds	r6, #48	; 0x30
  403908:	4602      	mov	r2, r0
  40390a:	460b      	mov	r3, r1
  40390c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403910:	f001 fb10 	bl	404f34 <__aeabi_dsub>
  403914:	f805 6b01 	strb.w	r6, [r5], #1
  403918:	42ac      	cmp	r4, r5
  40391a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40391e:	f04f 0200 	mov.w	r2, #0
  403922:	d123      	bne.n	40396c <_dtoa_r+0x584>
  403924:	4b1a      	ldr	r3, [pc, #104]	; (403990 <_dtoa_r+0x5a8>)
  403926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40392a:	f001 fb05 	bl	404f38 <__adddf3>
  40392e:	4602      	mov	r2, r0
  403930:	460b      	mov	r3, r1
  403932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403936:	f001 ff41 	bl	4057bc <__aeabi_dcmpgt>
  40393a:	2800      	cmp	r0, #0
  40393c:	f040 808c 	bne.w	403a58 <_dtoa_r+0x670>
  403940:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403944:	2000      	movs	r0, #0
  403946:	4912      	ldr	r1, [pc, #72]	; (403990 <_dtoa_r+0x5a8>)
  403948:	f001 faf4 	bl	404f34 <__aeabi_dsub>
  40394c:	4602      	mov	r2, r0
  40394e:	460b      	mov	r3, r1
  403950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403954:	f001 ff14 	bl	405780 <__aeabi_dcmplt>
  403958:	b1e0      	cbz	r0, 403994 <_dtoa_r+0x5ac>
  40395a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40395e:	2b30      	cmp	r3, #48	; 0x30
  403960:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403964:	f040 82b9 	bne.w	403eda <_dtoa_r+0xaf2>
  403968:	4614      	mov	r4, r2
  40396a:	e7f6      	b.n	40395a <_dtoa_r+0x572>
  40396c:	4b05      	ldr	r3, [pc, #20]	; (403984 <_dtoa_r+0x59c>)
  40396e:	f001 fc95 	bl	40529c <__aeabi_dmul>
  403972:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403976:	e7bf      	b.n	4038f8 <_dtoa_r+0x510>
  403978:	00406238 	.word	0x00406238
  40397c:	00406300 	.word	0x00406300
  403980:	3ff00000 	.word	0x3ff00000
  403984:	40240000 	.word	0x40240000
  403988:	401c0000 	.word	0x401c0000
  40398c:	40140000 	.word	0x40140000
  403990:	3fe00000 	.word	0x3fe00000
  403994:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  403998:	e9cd 3402 	strd	r3, r4, [sp, #8]
  40399c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40399e:	2b00      	cmp	r3, #0
  4039a0:	db7d      	blt.n	403a9e <_dtoa_r+0x6b6>
  4039a2:	f1bb 0f0e 	cmp.w	fp, #14
  4039a6:	dc7a      	bgt.n	403a9e <_dtoa_r+0x6b6>
  4039a8:	4bab      	ldr	r3, [pc, #684]	; (403c58 <_dtoa_r+0x870>)
  4039aa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  4039ae:	e9d3 6700 	ldrd	r6, r7, [r3]
  4039b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4039b4:	2b00      	cmp	r3, #0
  4039b6:	da14      	bge.n	4039e2 <_dtoa_r+0x5fa>
  4039b8:	9b05      	ldr	r3, [sp, #20]
  4039ba:	2b00      	cmp	r3, #0
  4039bc:	dc11      	bgt.n	4039e2 <_dtoa_r+0x5fa>
  4039be:	f040 816c 	bne.w	403c9a <_dtoa_r+0x8b2>
  4039c2:	2200      	movs	r2, #0
  4039c4:	4ba5      	ldr	r3, [pc, #660]	; (403c5c <_dtoa_r+0x874>)
  4039c6:	4630      	mov	r0, r6
  4039c8:	4639      	mov	r1, r7
  4039ca:	f001 fc67 	bl	40529c <__aeabi_dmul>
  4039ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4039d2:	f001 fee9 	bl	4057a8 <__aeabi_dcmpge>
  4039d6:	9d05      	ldr	r5, [sp, #20]
  4039d8:	462e      	mov	r6, r5
  4039da:	2800      	cmp	r0, #0
  4039dc:	f040 815f 	bne.w	403c9e <_dtoa_r+0x8b6>
  4039e0:	e165      	b.n	403cae <_dtoa_r+0x8c6>
  4039e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4039e6:	9c06      	ldr	r4, [sp, #24]
  4039e8:	4632      	mov	r2, r6
  4039ea:	463b      	mov	r3, r7
  4039ec:	4640      	mov	r0, r8
  4039ee:	4649      	mov	r1, r9
  4039f0:	f001 fd7e 	bl	4054f0 <__aeabi_ddiv>
  4039f4:	f001 ff02 	bl	4057fc <__aeabi_d2iz>
  4039f8:	4605      	mov	r5, r0
  4039fa:	f001 fbe9 	bl	4051d0 <__aeabi_i2d>
  4039fe:	4632      	mov	r2, r6
  403a00:	463b      	mov	r3, r7
  403a02:	f001 fc4b 	bl	40529c <__aeabi_dmul>
  403a06:	460b      	mov	r3, r1
  403a08:	4602      	mov	r2, r0
  403a0a:	4649      	mov	r1, r9
  403a0c:	4640      	mov	r0, r8
  403a0e:	f001 fa91 	bl	404f34 <__aeabi_dsub>
  403a12:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  403a16:	9b06      	ldr	r3, [sp, #24]
  403a18:	f804 eb01 	strb.w	lr, [r4], #1
  403a1c:	ebc3 0e04 	rsb	lr, r3, r4
  403a20:	9b05      	ldr	r3, [sp, #20]
  403a22:	4573      	cmp	r3, lr
  403a24:	d12e      	bne.n	403a84 <_dtoa_r+0x69c>
  403a26:	4602      	mov	r2, r0
  403a28:	460b      	mov	r3, r1
  403a2a:	f001 fa85 	bl	404f38 <__adddf3>
  403a2e:	4680      	mov	r8, r0
  403a30:	4689      	mov	r9, r1
  403a32:	4602      	mov	r2, r0
  403a34:	460b      	mov	r3, r1
  403a36:	4630      	mov	r0, r6
  403a38:	4639      	mov	r1, r7
  403a3a:	f001 fea1 	bl	405780 <__aeabi_dcmplt>
  403a3e:	b978      	cbnz	r0, 403a60 <_dtoa_r+0x678>
  403a40:	4642      	mov	r2, r8
  403a42:	464b      	mov	r3, r9
  403a44:	4630      	mov	r0, r6
  403a46:	4639      	mov	r1, r7
  403a48:	f001 fe90 	bl	40576c <__aeabi_dcmpeq>
  403a4c:	2800      	cmp	r0, #0
  403a4e:	f000 8246 	beq.w	403ede <_dtoa_r+0xaf6>
  403a52:	07eb      	lsls	r3, r5, #31
  403a54:	d404      	bmi.n	403a60 <_dtoa_r+0x678>
  403a56:	e242      	b.n	403ede <_dtoa_r+0xaf6>
  403a58:	f8dd b020 	ldr.w	fp, [sp, #32]
  403a5c:	e000      	b.n	403a60 <_dtoa_r+0x678>
  403a5e:	461c      	mov	r4, r3
  403a60:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  403a64:	2a39      	cmp	r2, #57	; 0x39
  403a66:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  403a6a:	d107      	bne.n	403a7c <_dtoa_r+0x694>
  403a6c:	9a06      	ldr	r2, [sp, #24]
  403a6e:	429a      	cmp	r2, r3
  403a70:	d1f5      	bne.n	403a5e <_dtoa_r+0x676>
  403a72:	9906      	ldr	r1, [sp, #24]
  403a74:	2230      	movs	r2, #48	; 0x30
  403a76:	f10b 0b01 	add.w	fp, fp, #1
  403a7a:	700a      	strb	r2, [r1, #0]
  403a7c:	781a      	ldrb	r2, [r3, #0]
  403a7e:	3201      	adds	r2, #1
  403a80:	701a      	strb	r2, [r3, #0]
  403a82:	e22c      	b.n	403ede <_dtoa_r+0xaf6>
  403a84:	2200      	movs	r2, #0
  403a86:	4b76      	ldr	r3, [pc, #472]	; (403c60 <_dtoa_r+0x878>)
  403a88:	f001 fc08 	bl	40529c <__aeabi_dmul>
  403a8c:	2200      	movs	r2, #0
  403a8e:	2300      	movs	r3, #0
  403a90:	4680      	mov	r8, r0
  403a92:	4689      	mov	r9, r1
  403a94:	f001 fe6a 	bl	40576c <__aeabi_dcmpeq>
  403a98:	2800      	cmp	r0, #0
  403a9a:	d0a5      	beq.n	4039e8 <_dtoa_r+0x600>
  403a9c:	e21f      	b.n	403ede <_dtoa_r+0xaf6>
  403a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403aa0:	2a00      	cmp	r2, #0
  403aa2:	d02b      	beq.n	403afc <_dtoa_r+0x714>
  403aa4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403aa6:	2a01      	cmp	r2, #1
  403aa8:	dc0a      	bgt.n	403ac0 <_dtoa_r+0x6d8>
  403aaa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403aac:	b112      	cbz	r2, 403ab4 <_dtoa_r+0x6cc>
  403aae:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403ab2:	e002      	b.n	403aba <_dtoa_r+0x6d2>
  403ab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403ab6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403aba:	463d      	mov	r5, r7
  403abc:	4644      	mov	r4, r8
  403abe:	e013      	b.n	403ae8 <_dtoa_r+0x700>
  403ac0:	9b05      	ldr	r3, [sp, #20]
  403ac2:	1e5d      	subs	r5, r3, #1
  403ac4:	42af      	cmp	r7, r5
  403ac6:	bfbf      	itttt	lt
  403ac8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  403aca:	1bea      	sublt	r2, r5, r7
  403acc:	189b      	addlt	r3, r3, r2
  403ace:	930b      	strlt	r3, [sp, #44]	; 0x2c
  403ad0:	9b05      	ldr	r3, [sp, #20]
  403ad2:	bfb6      	itet	lt
  403ad4:	462f      	movlt	r7, r5
  403ad6:	1b7d      	subge	r5, r7, r5
  403ad8:	2500      	movlt	r5, #0
  403ada:	2b00      	cmp	r3, #0
  403adc:	bfab      	itete	ge
  403ade:	9b05      	ldrge	r3, [sp, #20]
  403ae0:	ebc3 0408 	rsblt	r4, r3, r8
  403ae4:	4644      	movge	r4, r8
  403ae6:	2300      	movlt	r3, #0
  403ae8:	9a07      	ldr	r2, [sp, #28]
  403aea:	2101      	movs	r1, #1
  403aec:	441a      	add	r2, r3
  403aee:	4650      	mov	r0, sl
  403af0:	4498      	add	r8, r3
  403af2:	9207      	str	r2, [sp, #28]
  403af4:	f000 fd3b 	bl	40456e <__i2b>
  403af8:	4606      	mov	r6, r0
  403afa:	e002      	b.n	403b02 <_dtoa_r+0x71a>
  403afc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403afe:	463d      	mov	r5, r7
  403b00:	4644      	mov	r4, r8
  403b02:	b15c      	cbz	r4, 403b1c <_dtoa_r+0x734>
  403b04:	9b07      	ldr	r3, [sp, #28]
  403b06:	2b00      	cmp	r3, #0
  403b08:	dd08      	ble.n	403b1c <_dtoa_r+0x734>
  403b0a:	42a3      	cmp	r3, r4
  403b0c:	9a07      	ldr	r2, [sp, #28]
  403b0e:	bfa8      	it	ge
  403b10:	4623      	movge	r3, r4
  403b12:	ebc3 0808 	rsb	r8, r3, r8
  403b16:	1ae4      	subs	r4, r4, r3
  403b18:	1ad3      	subs	r3, r2, r3
  403b1a:	9307      	str	r3, [sp, #28]
  403b1c:	2f00      	cmp	r7, #0
  403b1e:	dd1d      	ble.n	403b5c <_dtoa_r+0x774>
  403b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b22:	b1ab      	cbz	r3, 403b50 <_dtoa_r+0x768>
  403b24:	b18d      	cbz	r5, 403b4a <_dtoa_r+0x762>
  403b26:	4631      	mov	r1, r6
  403b28:	462a      	mov	r2, r5
  403b2a:	4650      	mov	r0, sl
  403b2c:	f000 fdba 	bl	4046a4 <__pow5mult>
  403b30:	9a04      	ldr	r2, [sp, #16]
  403b32:	4601      	mov	r1, r0
  403b34:	4606      	mov	r6, r0
  403b36:	4650      	mov	r0, sl
  403b38:	f000 fd22 	bl	404580 <__multiply>
  403b3c:	9904      	ldr	r1, [sp, #16]
  403b3e:	9008      	str	r0, [sp, #32]
  403b40:	4650      	mov	r0, sl
  403b42:	f000 fc75 	bl	404430 <_Bfree>
  403b46:	9b08      	ldr	r3, [sp, #32]
  403b48:	9304      	str	r3, [sp, #16]
  403b4a:	1b7a      	subs	r2, r7, r5
  403b4c:	d006      	beq.n	403b5c <_dtoa_r+0x774>
  403b4e:	e000      	b.n	403b52 <_dtoa_r+0x76a>
  403b50:	463a      	mov	r2, r7
  403b52:	9904      	ldr	r1, [sp, #16]
  403b54:	4650      	mov	r0, sl
  403b56:	f000 fda5 	bl	4046a4 <__pow5mult>
  403b5a:	9004      	str	r0, [sp, #16]
  403b5c:	2101      	movs	r1, #1
  403b5e:	4650      	mov	r0, sl
  403b60:	f000 fd05 	bl	40456e <__i2b>
  403b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403b66:	4605      	mov	r5, r0
  403b68:	b35b      	cbz	r3, 403bc2 <_dtoa_r+0x7da>
  403b6a:	461a      	mov	r2, r3
  403b6c:	4601      	mov	r1, r0
  403b6e:	4650      	mov	r0, sl
  403b70:	f000 fd98 	bl	4046a4 <__pow5mult>
  403b74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403b76:	2b01      	cmp	r3, #1
  403b78:	4605      	mov	r5, r0
  403b7a:	dc18      	bgt.n	403bae <_dtoa_r+0x7c6>
  403b7c:	9b02      	ldr	r3, [sp, #8]
  403b7e:	b983      	cbnz	r3, 403ba2 <_dtoa_r+0x7ba>
  403b80:	9b03      	ldr	r3, [sp, #12]
  403b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403b86:	b973      	cbnz	r3, 403ba6 <_dtoa_r+0x7be>
  403b88:	9b03      	ldr	r3, [sp, #12]
  403b8a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  403b8e:	0d3f      	lsrs	r7, r7, #20
  403b90:	053f      	lsls	r7, r7, #20
  403b92:	b14f      	cbz	r7, 403ba8 <_dtoa_r+0x7c0>
  403b94:	9b07      	ldr	r3, [sp, #28]
  403b96:	3301      	adds	r3, #1
  403b98:	f108 0801 	add.w	r8, r8, #1
  403b9c:	9307      	str	r3, [sp, #28]
  403b9e:	2701      	movs	r7, #1
  403ba0:	e002      	b.n	403ba8 <_dtoa_r+0x7c0>
  403ba2:	2700      	movs	r7, #0
  403ba4:	e000      	b.n	403ba8 <_dtoa_r+0x7c0>
  403ba6:	9f02      	ldr	r7, [sp, #8]
  403ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403baa:	b173      	cbz	r3, 403bca <_dtoa_r+0x7e2>
  403bac:	e000      	b.n	403bb0 <_dtoa_r+0x7c8>
  403bae:	2700      	movs	r7, #0
  403bb0:	692b      	ldr	r3, [r5, #16]
  403bb2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  403bb6:	6918      	ldr	r0, [r3, #16]
  403bb8:	f000 fc8c 	bl	4044d4 <__hi0bits>
  403bbc:	f1c0 0020 	rsb	r0, r0, #32
  403bc0:	e004      	b.n	403bcc <_dtoa_r+0x7e4>
  403bc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403bc4:	2b01      	cmp	r3, #1
  403bc6:	ddd9      	ble.n	403b7c <_dtoa_r+0x794>
  403bc8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  403bca:	2001      	movs	r0, #1
  403bcc:	9b07      	ldr	r3, [sp, #28]
  403bce:	4418      	add	r0, r3
  403bd0:	f010 001f 	ands.w	r0, r0, #31
  403bd4:	d008      	beq.n	403be8 <_dtoa_r+0x800>
  403bd6:	f1c0 0320 	rsb	r3, r0, #32
  403bda:	2b04      	cmp	r3, #4
  403bdc:	dd02      	ble.n	403be4 <_dtoa_r+0x7fc>
  403bde:	f1c0 001c 	rsb	r0, r0, #28
  403be2:	e002      	b.n	403bea <_dtoa_r+0x802>
  403be4:	d006      	beq.n	403bf4 <_dtoa_r+0x80c>
  403be6:	4618      	mov	r0, r3
  403be8:	301c      	adds	r0, #28
  403bea:	9b07      	ldr	r3, [sp, #28]
  403bec:	4403      	add	r3, r0
  403bee:	4480      	add	r8, r0
  403bf0:	4404      	add	r4, r0
  403bf2:	9307      	str	r3, [sp, #28]
  403bf4:	f1b8 0f00 	cmp.w	r8, #0
  403bf8:	dd05      	ble.n	403c06 <_dtoa_r+0x81e>
  403bfa:	4642      	mov	r2, r8
  403bfc:	9904      	ldr	r1, [sp, #16]
  403bfe:	4650      	mov	r0, sl
  403c00:	f000 fd9e 	bl	404740 <__lshift>
  403c04:	9004      	str	r0, [sp, #16]
  403c06:	9b07      	ldr	r3, [sp, #28]
  403c08:	2b00      	cmp	r3, #0
  403c0a:	dd05      	ble.n	403c18 <_dtoa_r+0x830>
  403c0c:	4629      	mov	r1, r5
  403c0e:	461a      	mov	r2, r3
  403c10:	4650      	mov	r0, sl
  403c12:	f000 fd95 	bl	404740 <__lshift>
  403c16:	4605      	mov	r5, r0
  403c18:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403c1a:	b31b      	cbz	r3, 403c64 <_dtoa_r+0x87c>
  403c1c:	4629      	mov	r1, r5
  403c1e:	9804      	ldr	r0, [sp, #16]
  403c20:	f000 fddf 	bl	4047e2 <__mcmp>
  403c24:	2800      	cmp	r0, #0
  403c26:	da1d      	bge.n	403c64 <_dtoa_r+0x87c>
  403c28:	2300      	movs	r3, #0
  403c2a:	220a      	movs	r2, #10
  403c2c:	9904      	ldr	r1, [sp, #16]
  403c2e:	4650      	mov	r0, sl
  403c30:	f000 fc15 	bl	40445e <__multadd>
  403c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c36:	9004      	str	r0, [sp, #16]
  403c38:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403c3c:	2b00      	cmp	r3, #0
  403c3e:	f000 8160 	beq.w	403f02 <_dtoa_r+0xb1a>
  403c42:	4631      	mov	r1, r6
  403c44:	2300      	movs	r3, #0
  403c46:	220a      	movs	r2, #10
  403c48:	4650      	mov	r0, sl
  403c4a:	f000 fc08 	bl	40445e <__multadd>
  403c4e:	f1b9 0f00 	cmp.w	r9, #0
  403c52:	4606      	mov	r6, r0
  403c54:	dc3e      	bgt.n	403cd4 <_dtoa_r+0x8ec>
  403c56:	e03a      	b.n	403cce <_dtoa_r+0x8e6>
  403c58:	00406238 	.word	0x00406238
  403c5c:	40140000 	.word	0x40140000
  403c60:	40240000 	.word	0x40240000
  403c64:	9b05      	ldr	r3, [sp, #20]
  403c66:	2b00      	cmp	r3, #0
  403c68:	dc2b      	bgt.n	403cc2 <_dtoa_r+0x8da>
  403c6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403c6c:	2b02      	cmp	r3, #2
  403c6e:	dd28      	ble.n	403cc2 <_dtoa_r+0x8da>
  403c70:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403c74:	f1b9 0f00 	cmp.w	r9, #0
  403c78:	d111      	bne.n	403c9e <_dtoa_r+0x8b6>
  403c7a:	4629      	mov	r1, r5
  403c7c:	464b      	mov	r3, r9
  403c7e:	2205      	movs	r2, #5
  403c80:	4650      	mov	r0, sl
  403c82:	f000 fbec 	bl	40445e <__multadd>
  403c86:	4601      	mov	r1, r0
  403c88:	4605      	mov	r5, r0
  403c8a:	9804      	ldr	r0, [sp, #16]
  403c8c:	f000 fda9 	bl	4047e2 <__mcmp>
  403c90:	2800      	cmp	r0, #0
  403c92:	dc0c      	bgt.n	403cae <_dtoa_r+0x8c6>
  403c94:	e003      	b.n	403c9e <_dtoa_r+0x8b6>
  403c96:	4635      	mov	r5, r6
  403c98:	e000      	b.n	403c9c <_dtoa_r+0x8b4>
  403c9a:	2500      	movs	r5, #0
  403c9c:	462e      	mov	r6, r5
  403c9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403ca0:	9c06      	ldr	r4, [sp, #24]
  403ca2:	ea6f 0b03 	mvn.w	fp, r3
  403ca6:	e009      	b.n	403cbc <_dtoa_r+0x8d4>
  403ca8:	f8dd b020 	ldr.w	fp, [sp, #32]
  403cac:	4635      	mov	r5, r6
  403cae:	9b06      	ldr	r3, [sp, #24]
  403cb0:	9a06      	ldr	r2, [sp, #24]
  403cb2:	1c5c      	adds	r4, r3, #1
  403cb4:	2331      	movs	r3, #49	; 0x31
  403cb6:	7013      	strb	r3, [r2, #0]
  403cb8:	f10b 0b01 	add.w	fp, fp, #1
  403cbc:	9605      	str	r6, [sp, #20]
  403cbe:	2600      	movs	r6, #0
  403cc0:	e0f9      	b.n	403eb6 <_dtoa_r+0xace>
  403cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cc4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403cc8:	b923      	cbnz	r3, 403cd4 <_dtoa_r+0x8ec>
  403cca:	9c06      	ldr	r4, [sp, #24]
  403ccc:	e0b2      	b.n	403e34 <_dtoa_r+0xa4c>
  403cce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403cd0:	2b02      	cmp	r3, #2
  403cd2:	dccf      	bgt.n	403c74 <_dtoa_r+0x88c>
  403cd4:	2c00      	cmp	r4, #0
  403cd6:	dd05      	ble.n	403ce4 <_dtoa_r+0x8fc>
  403cd8:	4631      	mov	r1, r6
  403cda:	4622      	mov	r2, r4
  403cdc:	4650      	mov	r0, sl
  403cde:	f000 fd2f 	bl	404740 <__lshift>
  403ce2:	4606      	mov	r6, r0
  403ce4:	b19f      	cbz	r7, 403d0e <_dtoa_r+0x926>
  403ce6:	6871      	ldr	r1, [r6, #4]
  403ce8:	4650      	mov	r0, sl
  403cea:	f000 fb6c 	bl	4043c6 <_Balloc>
  403cee:	6932      	ldr	r2, [r6, #16]
  403cf0:	3202      	adds	r2, #2
  403cf2:	4604      	mov	r4, r0
  403cf4:	0092      	lsls	r2, r2, #2
  403cf6:	f106 010c 	add.w	r1, r6, #12
  403cfa:	300c      	adds	r0, #12
  403cfc:	f000 fb58 	bl	4043b0 <memcpy>
  403d00:	2201      	movs	r2, #1
  403d02:	4621      	mov	r1, r4
  403d04:	4650      	mov	r0, sl
  403d06:	f000 fd1b 	bl	404740 <__lshift>
  403d0a:	9005      	str	r0, [sp, #20]
  403d0c:	e000      	b.n	403d10 <_dtoa_r+0x928>
  403d0e:	9605      	str	r6, [sp, #20]
  403d10:	9b02      	ldr	r3, [sp, #8]
  403d12:	9f06      	ldr	r7, [sp, #24]
  403d14:	f003 0301 	and.w	r3, r3, #1
  403d18:	9307      	str	r3, [sp, #28]
  403d1a:	4629      	mov	r1, r5
  403d1c:	9804      	ldr	r0, [sp, #16]
  403d1e:	f7ff fad1 	bl	4032c4 <quorem>
  403d22:	4631      	mov	r1, r6
  403d24:	4604      	mov	r4, r0
  403d26:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403d2a:	9804      	ldr	r0, [sp, #16]
  403d2c:	f000 fd59 	bl	4047e2 <__mcmp>
  403d30:	9a05      	ldr	r2, [sp, #20]
  403d32:	9002      	str	r0, [sp, #8]
  403d34:	4629      	mov	r1, r5
  403d36:	4650      	mov	r0, sl
  403d38:	f000 fd6f 	bl	40481a <__mdiff>
  403d3c:	68c3      	ldr	r3, [r0, #12]
  403d3e:	4602      	mov	r2, r0
  403d40:	b93b      	cbnz	r3, 403d52 <_dtoa_r+0x96a>
  403d42:	4601      	mov	r1, r0
  403d44:	900a      	str	r0, [sp, #40]	; 0x28
  403d46:	9804      	ldr	r0, [sp, #16]
  403d48:	f000 fd4b 	bl	4047e2 <__mcmp>
  403d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403d4e:	4603      	mov	r3, r0
  403d50:	e000      	b.n	403d54 <_dtoa_r+0x96c>
  403d52:	2301      	movs	r3, #1
  403d54:	4611      	mov	r1, r2
  403d56:	4650      	mov	r0, sl
  403d58:	930a      	str	r3, [sp, #40]	; 0x28
  403d5a:	f000 fb69 	bl	404430 <_Bfree>
  403d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d60:	b953      	cbnz	r3, 403d78 <_dtoa_r+0x990>
  403d62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403d64:	b942      	cbnz	r2, 403d78 <_dtoa_r+0x990>
  403d66:	9a07      	ldr	r2, [sp, #28]
  403d68:	b932      	cbnz	r2, 403d78 <_dtoa_r+0x990>
  403d6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403d6e:	d02a      	beq.n	403dc6 <_dtoa_r+0x9de>
  403d70:	9b02      	ldr	r3, [sp, #8]
  403d72:	2b00      	cmp	r3, #0
  403d74:	dc1c      	bgt.n	403db0 <_dtoa_r+0x9c8>
  403d76:	e01d      	b.n	403db4 <_dtoa_r+0x9cc>
  403d78:	9a02      	ldr	r2, [sp, #8]
  403d7a:	2a00      	cmp	r2, #0
  403d7c:	db04      	blt.n	403d88 <_dtoa_r+0x9a0>
  403d7e:	d11b      	bne.n	403db8 <_dtoa_r+0x9d0>
  403d80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403d82:	b9ca      	cbnz	r2, 403db8 <_dtoa_r+0x9d0>
  403d84:	9a07      	ldr	r2, [sp, #28]
  403d86:	b9ba      	cbnz	r2, 403db8 <_dtoa_r+0x9d0>
  403d88:	2b00      	cmp	r3, #0
  403d8a:	dd13      	ble.n	403db4 <_dtoa_r+0x9cc>
  403d8c:	2201      	movs	r2, #1
  403d8e:	9904      	ldr	r1, [sp, #16]
  403d90:	4650      	mov	r0, sl
  403d92:	f000 fcd5 	bl	404740 <__lshift>
  403d96:	4629      	mov	r1, r5
  403d98:	9004      	str	r0, [sp, #16]
  403d9a:	f000 fd22 	bl	4047e2 <__mcmp>
  403d9e:	2800      	cmp	r0, #0
  403da0:	dc03      	bgt.n	403daa <_dtoa_r+0x9c2>
  403da2:	d107      	bne.n	403db4 <_dtoa_r+0x9cc>
  403da4:	f018 0f01 	tst.w	r8, #1
  403da8:	d004      	beq.n	403db4 <_dtoa_r+0x9cc>
  403daa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403dae:	d00a      	beq.n	403dc6 <_dtoa_r+0x9de>
  403db0:	f104 0831 	add.w	r8, r4, #49	; 0x31
  403db4:	1c7c      	adds	r4, r7, #1
  403db6:	e00c      	b.n	403dd2 <_dtoa_r+0x9ea>
  403db8:	2b00      	cmp	r3, #0
  403dba:	f107 0401 	add.w	r4, r7, #1
  403dbe:	dd0b      	ble.n	403dd8 <_dtoa_r+0x9f0>
  403dc0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403dc4:	d103      	bne.n	403dce <_dtoa_r+0x9e6>
  403dc6:	2339      	movs	r3, #57	; 0x39
  403dc8:	703b      	strb	r3, [r7, #0]
  403dca:	3701      	adds	r7, #1
  403dcc:	e056      	b.n	403e7c <_dtoa_r+0xa94>
  403dce:	f108 0801 	add.w	r8, r8, #1
  403dd2:	f887 8000 	strb.w	r8, [r7]
  403dd6:	e06e      	b.n	403eb6 <_dtoa_r+0xace>
  403dd8:	9b06      	ldr	r3, [sp, #24]
  403dda:	f804 8c01 	strb.w	r8, [r4, #-1]
  403dde:	1ae3      	subs	r3, r4, r3
  403de0:	454b      	cmp	r3, r9
  403de2:	4627      	mov	r7, r4
  403de4:	d03b      	beq.n	403e5e <_dtoa_r+0xa76>
  403de6:	2300      	movs	r3, #0
  403de8:	220a      	movs	r2, #10
  403dea:	9904      	ldr	r1, [sp, #16]
  403dec:	4650      	mov	r0, sl
  403dee:	f000 fb36 	bl	40445e <__multadd>
  403df2:	9b05      	ldr	r3, [sp, #20]
  403df4:	9004      	str	r0, [sp, #16]
  403df6:	429e      	cmp	r6, r3
  403df8:	f04f 020a 	mov.w	r2, #10
  403dfc:	f04f 0300 	mov.w	r3, #0
  403e00:	4631      	mov	r1, r6
  403e02:	4650      	mov	r0, sl
  403e04:	d104      	bne.n	403e10 <_dtoa_r+0xa28>
  403e06:	f000 fb2a 	bl	40445e <__multadd>
  403e0a:	4606      	mov	r6, r0
  403e0c:	9005      	str	r0, [sp, #20]
  403e0e:	e784      	b.n	403d1a <_dtoa_r+0x932>
  403e10:	f000 fb25 	bl	40445e <__multadd>
  403e14:	2300      	movs	r3, #0
  403e16:	4606      	mov	r6, r0
  403e18:	220a      	movs	r2, #10
  403e1a:	9905      	ldr	r1, [sp, #20]
  403e1c:	4650      	mov	r0, sl
  403e1e:	f000 fb1e 	bl	40445e <__multadd>
  403e22:	9005      	str	r0, [sp, #20]
  403e24:	e779      	b.n	403d1a <_dtoa_r+0x932>
  403e26:	2300      	movs	r3, #0
  403e28:	220a      	movs	r2, #10
  403e2a:	9904      	ldr	r1, [sp, #16]
  403e2c:	4650      	mov	r0, sl
  403e2e:	f000 fb16 	bl	40445e <__multadd>
  403e32:	9004      	str	r0, [sp, #16]
  403e34:	4629      	mov	r1, r5
  403e36:	9804      	ldr	r0, [sp, #16]
  403e38:	f7ff fa44 	bl	4032c4 <quorem>
  403e3c:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403e40:	f804 8b01 	strb.w	r8, [r4], #1
  403e44:	9b06      	ldr	r3, [sp, #24]
  403e46:	1ae3      	subs	r3, r4, r3
  403e48:	454b      	cmp	r3, r9
  403e4a:	dbec      	blt.n	403e26 <_dtoa_r+0xa3e>
  403e4c:	9b06      	ldr	r3, [sp, #24]
  403e4e:	9605      	str	r6, [sp, #20]
  403e50:	f1b9 0f01 	cmp.w	r9, #1
  403e54:	bfac      	ite	ge
  403e56:	444b      	addge	r3, r9
  403e58:	3301      	addlt	r3, #1
  403e5a:	461f      	mov	r7, r3
  403e5c:	2600      	movs	r6, #0
  403e5e:	2201      	movs	r2, #1
  403e60:	9904      	ldr	r1, [sp, #16]
  403e62:	4650      	mov	r0, sl
  403e64:	f000 fc6c 	bl	404740 <__lshift>
  403e68:	4629      	mov	r1, r5
  403e6a:	9004      	str	r0, [sp, #16]
  403e6c:	f000 fcb9 	bl	4047e2 <__mcmp>
  403e70:	2800      	cmp	r0, #0
  403e72:	dc03      	bgt.n	403e7c <_dtoa_r+0xa94>
  403e74:	d116      	bne.n	403ea4 <_dtoa_r+0xabc>
  403e76:	f018 0f01 	tst.w	r8, #1
  403e7a:	d013      	beq.n	403ea4 <_dtoa_r+0xabc>
  403e7c:	463c      	mov	r4, r7
  403e7e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403e82:	2b39      	cmp	r3, #57	; 0x39
  403e84:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403e88:	d109      	bne.n	403e9e <_dtoa_r+0xab6>
  403e8a:	9b06      	ldr	r3, [sp, #24]
  403e8c:	4293      	cmp	r3, r2
  403e8e:	d104      	bne.n	403e9a <_dtoa_r+0xab2>
  403e90:	f10b 0b01 	add.w	fp, fp, #1
  403e94:	2331      	movs	r3, #49	; 0x31
  403e96:	9a06      	ldr	r2, [sp, #24]
  403e98:	e002      	b.n	403ea0 <_dtoa_r+0xab8>
  403e9a:	4614      	mov	r4, r2
  403e9c:	e7ef      	b.n	403e7e <_dtoa_r+0xa96>
  403e9e:	3301      	adds	r3, #1
  403ea0:	7013      	strb	r3, [r2, #0]
  403ea2:	e008      	b.n	403eb6 <_dtoa_r+0xace>
  403ea4:	463c      	mov	r4, r7
  403ea6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403eaa:	2b30      	cmp	r3, #48	; 0x30
  403eac:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403eb0:	d101      	bne.n	403eb6 <_dtoa_r+0xace>
  403eb2:	4614      	mov	r4, r2
  403eb4:	e7f7      	b.n	403ea6 <_dtoa_r+0xabe>
  403eb6:	4629      	mov	r1, r5
  403eb8:	4650      	mov	r0, sl
  403eba:	f000 fab9 	bl	404430 <_Bfree>
  403ebe:	9b05      	ldr	r3, [sp, #20]
  403ec0:	b16b      	cbz	r3, 403ede <_dtoa_r+0xaf6>
  403ec2:	b12e      	cbz	r6, 403ed0 <_dtoa_r+0xae8>
  403ec4:	429e      	cmp	r6, r3
  403ec6:	d003      	beq.n	403ed0 <_dtoa_r+0xae8>
  403ec8:	4631      	mov	r1, r6
  403eca:	4650      	mov	r0, sl
  403ecc:	f000 fab0 	bl	404430 <_Bfree>
  403ed0:	9905      	ldr	r1, [sp, #20]
  403ed2:	4650      	mov	r0, sl
  403ed4:	f000 faac 	bl	404430 <_Bfree>
  403ed8:	e001      	b.n	403ede <_dtoa_r+0xaf6>
  403eda:	f8dd b020 	ldr.w	fp, [sp, #32]
  403ede:	9904      	ldr	r1, [sp, #16]
  403ee0:	4650      	mov	r0, sl
  403ee2:	f000 faa5 	bl	404430 <_Bfree>
  403ee6:	2300      	movs	r3, #0
  403ee8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403eea:	7023      	strb	r3, [r4, #0]
  403eec:	f10b 0301 	add.w	r3, fp, #1
  403ef0:	6013      	str	r3, [r2, #0]
  403ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403ef4:	b11b      	cbz	r3, 403efe <_dtoa_r+0xb16>
  403ef6:	601c      	str	r4, [r3, #0]
  403ef8:	e001      	b.n	403efe <_dtoa_r+0xb16>
  403efa:	4808      	ldr	r0, [pc, #32]	; (403f1c <_dtoa_r+0xb34>)
  403efc:	e00a      	b.n	403f14 <_dtoa_r+0xb2c>
  403efe:	9806      	ldr	r0, [sp, #24]
  403f00:	e008      	b.n	403f14 <_dtoa_r+0xb2c>
  403f02:	f1b9 0f00 	cmp.w	r9, #0
  403f06:	f73f aee0 	bgt.w	403cca <_dtoa_r+0x8e2>
  403f0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403f0c:	2b02      	cmp	r3, #2
  403f0e:	f77f aedc 	ble.w	403cca <_dtoa_r+0x8e2>
  403f12:	e6af      	b.n	403c74 <_dtoa_r+0x88c>
  403f14:	b015      	add	sp, #84	; 0x54
  403f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f1a:	bf00      	nop
  403f1c:	004061a4 	.word	0x004061a4

00403f20 <__sflush_r>:
  403f20:	898a      	ldrh	r2, [r1, #12]
  403f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f26:	4605      	mov	r5, r0
  403f28:	0710      	lsls	r0, r2, #28
  403f2a:	460c      	mov	r4, r1
  403f2c:	d459      	bmi.n	403fe2 <__sflush_r+0xc2>
  403f2e:	684b      	ldr	r3, [r1, #4]
  403f30:	2b00      	cmp	r3, #0
  403f32:	dc02      	bgt.n	403f3a <__sflush_r+0x1a>
  403f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  403f36:	2b00      	cmp	r3, #0
  403f38:	dd17      	ble.n	403f6a <__sflush_r+0x4a>
  403f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403f3c:	b1ae      	cbz	r6, 403f6a <__sflush_r+0x4a>
  403f3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  403f42:	2300      	movs	r3, #0
  403f44:	b292      	uxth	r2, r2
  403f46:	682f      	ldr	r7, [r5, #0]
  403f48:	602b      	str	r3, [r5, #0]
  403f4a:	b10a      	cbz	r2, 403f50 <__sflush_r+0x30>
  403f4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
  403f4e:	e015      	b.n	403f7c <__sflush_r+0x5c>
  403f50:	6a21      	ldr	r1, [r4, #32]
  403f52:	2301      	movs	r3, #1
  403f54:	4628      	mov	r0, r5
  403f56:	47b0      	blx	r6
  403f58:	1c41      	adds	r1, r0, #1
  403f5a:	d10f      	bne.n	403f7c <__sflush_r+0x5c>
  403f5c:	682b      	ldr	r3, [r5, #0]
  403f5e:	b16b      	cbz	r3, 403f7c <__sflush_r+0x5c>
  403f60:	2b1d      	cmp	r3, #29
  403f62:	d001      	beq.n	403f68 <__sflush_r+0x48>
  403f64:	2b16      	cmp	r3, #22
  403f66:	d103      	bne.n	403f70 <__sflush_r+0x50>
  403f68:	602f      	str	r7, [r5, #0]
  403f6a:	2000      	movs	r0, #0
  403f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f70:	89a3      	ldrh	r3, [r4, #12]
  403f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403f76:	81a3      	strh	r3, [r4, #12]
  403f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f7c:	89a3      	ldrh	r3, [r4, #12]
  403f7e:	075a      	lsls	r2, r3, #29
  403f80:	d505      	bpl.n	403f8e <__sflush_r+0x6e>
  403f82:	6863      	ldr	r3, [r4, #4]
  403f84:	1ac0      	subs	r0, r0, r3
  403f86:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403f88:	b10b      	cbz	r3, 403f8e <__sflush_r+0x6e>
  403f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403f8c:	1ac0      	subs	r0, r0, r3
  403f8e:	2300      	movs	r3, #0
  403f90:	4602      	mov	r2, r0
  403f92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403f94:	6a21      	ldr	r1, [r4, #32]
  403f96:	4628      	mov	r0, r5
  403f98:	47b0      	blx	r6
  403f9a:	1c43      	adds	r3, r0, #1
  403f9c:	89a3      	ldrh	r3, [r4, #12]
  403f9e:	d106      	bne.n	403fae <__sflush_r+0x8e>
  403fa0:	6829      	ldr	r1, [r5, #0]
  403fa2:	291d      	cmp	r1, #29
  403fa4:	d83a      	bhi.n	40401c <__sflush_r+0xfc>
  403fa6:	4a21      	ldr	r2, [pc, #132]	; (40402c <__sflush_r+0x10c>)
  403fa8:	40ca      	lsrs	r2, r1
  403faa:	07d6      	lsls	r6, r2, #31
  403fac:	d536      	bpl.n	40401c <__sflush_r+0xfc>
  403fae:	2200      	movs	r2, #0
  403fb0:	6062      	str	r2, [r4, #4]
  403fb2:	04d9      	lsls	r1, r3, #19
  403fb4:	6922      	ldr	r2, [r4, #16]
  403fb6:	6022      	str	r2, [r4, #0]
  403fb8:	d504      	bpl.n	403fc4 <__sflush_r+0xa4>
  403fba:	1c42      	adds	r2, r0, #1
  403fbc:	d101      	bne.n	403fc2 <__sflush_r+0xa2>
  403fbe:	682b      	ldr	r3, [r5, #0]
  403fc0:	b903      	cbnz	r3, 403fc4 <__sflush_r+0xa4>
  403fc2:	6560      	str	r0, [r4, #84]	; 0x54
  403fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403fc6:	602f      	str	r7, [r5, #0]
  403fc8:	2900      	cmp	r1, #0
  403fca:	d0ce      	beq.n	403f6a <__sflush_r+0x4a>
  403fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403fd0:	4299      	cmp	r1, r3
  403fd2:	d002      	beq.n	403fda <__sflush_r+0xba>
  403fd4:	4628      	mov	r0, r5
  403fd6:	f000 fcdb 	bl	404990 <_free_r>
  403fda:	2000      	movs	r0, #0
  403fdc:	6360      	str	r0, [r4, #52]	; 0x34
  403fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fe2:	690f      	ldr	r7, [r1, #16]
  403fe4:	2f00      	cmp	r7, #0
  403fe6:	d0c0      	beq.n	403f6a <__sflush_r+0x4a>
  403fe8:	0793      	lsls	r3, r2, #30
  403fea:	680e      	ldr	r6, [r1, #0]
  403fec:	bf08      	it	eq
  403fee:	694b      	ldreq	r3, [r1, #20]
  403ff0:	600f      	str	r7, [r1, #0]
  403ff2:	bf18      	it	ne
  403ff4:	2300      	movne	r3, #0
  403ff6:	ebc7 0806 	rsb	r8, r7, r6
  403ffa:	608b      	str	r3, [r1, #8]
  403ffc:	e002      	b.n	404004 <__sflush_r+0xe4>
  403ffe:	4407      	add	r7, r0
  404000:	ebc0 0808 	rsb	r8, r0, r8
  404004:	f1b8 0f00 	cmp.w	r8, #0
  404008:	ddaf      	ble.n	403f6a <__sflush_r+0x4a>
  40400a:	4643      	mov	r3, r8
  40400c:	463a      	mov	r2, r7
  40400e:	6a21      	ldr	r1, [r4, #32]
  404010:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  404012:	4628      	mov	r0, r5
  404014:	47b0      	blx	r6
  404016:	2800      	cmp	r0, #0
  404018:	dcf1      	bgt.n	403ffe <__sflush_r+0xde>
  40401a:	89a3      	ldrh	r3, [r4, #12]
  40401c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404020:	81a3      	strh	r3, [r4, #12]
  404022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40402a:	bf00      	nop
  40402c:	20400001 	.word	0x20400001

00404030 <_fflush_r>:
  404030:	b538      	push	{r3, r4, r5, lr}
  404032:	690b      	ldr	r3, [r1, #16]
  404034:	4605      	mov	r5, r0
  404036:	460c      	mov	r4, r1
  404038:	b1db      	cbz	r3, 404072 <_fflush_r+0x42>
  40403a:	b118      	cbz	r0, 404044 <_fflush_r+0x14>
  40403c:	6983      	ldr	r3, [r0, #24]
  40403e:	b90b      	cbnz	r3, 404044 <_fflush_r+0x14>
  404040:	f000 f860 	bl	404104 <__sinit>
  404044:	4b0c      	ldr	r3, [pc, #48]	; (404078 <_fflush_r+0x48>)
  404046:	429c      	cmp	r4, r3
  404048:	d101      	bne.n	40404e <_fflush_r+0x1e>
  40404a:	686c      	ldr	r4, [r5, #4]
  40404c:	e008      	b.n	404060 <_fflush_r+0x30>
  40404e:	4b0b      	ldr	r3, [pc, #44]	; (40407c <_fflush_r+0x4c>)
  404050:	429c      	cmp	r4, r3
  404052:	d101      	bne.n	404058 <_fflush_r+0x28>
  404054:	68ac      	ldr	r4, [r5, #8]
  404056:	e003      	b.n	404060 <_fflush_r+0x30>
  404058:	4b09      	ldr	r3, [pc, #36]	; (404080 <_fflush_r+0x50>)
  40405a:	429c      	cmp	r4, r3
  40405c:	bf08      	it	eq
  40405e:	68ec      	ldreq	r4, [r5, #12]
  404060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404064:	b12b      	cbz	r3, 404072 <_fflush_r+0x42>
  404066:	4621      	mov	r1, r4
  404068:	4628      	mov	r0, r5
  40406a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40406e:	f7ff bf57 	b.w	403f20 <__sflush_r>
  404072:	2000      	movs	r0, #0
  404074:	bd38      	pop	{r3, r4, r5, pc}
  404076:	bf00      	nop
  404078:	004061d8 	.word	0x004061d8
  40407c:	004061f8 	.word	0x004061f8
  404080:	00406218 	.word	0x00406218

00404084 <_cleanup_r>:
  404084:	4901      	ldr	r1, [pc, #4]	; (40408c <_cleanup_r+0x8>)
  404086:	f000 b8a9 	b.w	4041dc <_fwalk_reent>
  40408a:	bf00      	nop
  40408c:	00404031 	.word	0x00404031

00404090 <std.isra.0>:
  404090:	2300      	movs	r3, #0
  404092:	b510      	push	{r4, lr}
  404094:	4604      	mov	r4, r0
  404096:	6003      	str	r3, [r0, #0]
  404098:	6043      	str	r3, [r0, #4]
  40409a:	6083      	str	r3, [r0, #8]
  40409c:	8181      	strh	r1, [r0, #12]
  40409e:	6643      	str	r3, [r0, #100]	; 0x64
  4040a0:	81c2      	strh	r2, [r0, #14]
  4040a2:	6103      	str	r3, [r0, #16]
  4040a4:	6143      	str	r3, [r0, #20]
  4040a6:	6183      	str	r3, [r0, #24]
  4040a8:	4619      	mov	r1, r3
  4040aa:	2208      	movs	r2, #8
  4040ac:	305c      	adds	r0, #92	; 0x5c
  4040ae:	f7fe fa9b 	bl	4025e8 <memset>
  4040b2:	4b05      	ldr	r3, [pc, #20]	; (4040c8 <std.isra.0+0x38>)
  4040b4:	6263      	str	r3, [r4, #36]	; 0x24
  4040b6:	4b05      	ldr	r3, [pc, #20]	; (4040cc <std.isra.0+0x3c>)
  4040b8:	62a3      	str	r3, [r4, #40]	; 0x28
  4040ba:	4b05      	ldr	r3, [pc, #20]	; (4040d0 <std.isra.0+0x40>)
  4040bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  4040be:	4b05      	ldr	r3, [pc, #20]	; (4040d4 <std.isra.0+0x44>)
  4040c0:	6224      	str	r4, [r4, #32]
  4040c2:	6323      	str	r3, [r4, #48]	; 0x30
  4040c4:	bd10      	pop	{r4, pc}
  4040c6:	bf00      	nop
  4040c8:	00404d91 	.word	0x00404d91
  4040cc:	00404db3 	.word	0x00404db3
  4040d0:	00404deb 	.word	0x00404deb
  4040d4:	00404e0f 	.word	0x00404e0f

004040d8 <__sfmoreglue>:
  4040d8:	b570      	push	{r4, r5, r6, lr}
  4040da:	2368      	movs	r3, #104	; 0x68
  4040dc:	1e4d      	subs	r5, r1, #1
  4040de:	435d      	muls	r5, r3
  4040e0:	460e      	mov	r6, r1
  4040e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4040e6:	f000 fca1 	bl	404a2c <_malloc_r>
  4040ea:	4604      	mov	r4, r0
  4040ec:	b140      	cbz	r0, 404100 <__sfmoreglue+0x28>
  4040ee:	2100      	movs	r1, #0
  4040f0:	e880 0042 	stmia.w	r0, {r1, r6}
  4040f4:	300c      	adds	r0, #12
  4040f6:	60a0      	str	r0, [r4, #8]
  4040f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
  4040fc:	f7fe fa74 	bl	4025e8 <memset>
  404100:	4620      	mov	r0, r4
  404102:	bd70      	pop	{r4, r5, r6, pc}

00404104 <__sinit>:
  404104:	6983      	ldr	r3, [r0, #24]
  404106:	b510      	push	{r4, lr}
  404108:	4604      	mov	r4, r0
  40410a:	bb33      	cbnz	r3, 40415a <__sinit+0x56>
  40410c:	6483      	str	r3, [r0, #72]	; 0x48
  40410e:	64c3      	str	r3, [r0, #76]	; 0x4c
  404110:	6503      	str	r3, [r0, #80]	; 0x50
  404112:	4b12      	ldr	r3, [pc, #72]	; (40415c <__sinit+0x58>)
  404114:	4a12      	ldr	r2, [pc, #72]	; (404160 <__sinit+0x5c>)
  404116:	681b      	ldr	r3, [r3, #0]
  404118:	6282      	str	r2, [r0, #40]	; 0x28
  40411a:	4298      	cmp	r0, r3
  40411c:	bf04      	itt	eq
  40411e:	2301      	moveq	r3, #1
  404120:	6183      	streq	r3, [r0, #24]
  404122:	f000 f81f 	bl	404164 <__sfp>
  404126:	6060      	str	r0, [r4, #4]
  404128:	4620      	mov	r0, r4
  40412a:	f000 f81b 	bl	404164 <__sfp>
  40412e:	60a0      	str	r0, [r4, #8]
  404130:	4620      	mov	r0, r4
  404132:	f000 f817 	bl	404164 <__sfp>
  404136:	2200      	movs	r2, #0
  404138:	60e0      	str	r0, [r4, #12]
  40413a:	2104      	movs	r1, #4
  40413c:	6860      	ldr	r0, [r4, #4]
  40413e:	f7ff ffa7 	bl	404090 <std.isra.0>
  404142:	2201      	movs	r2, #1
  404144:	2109      	movs	r1, #9
  404146:	68a0      	ldr	r0, [r4, #8]
  404148:	f7ff ffa2 	bl	404090 <std.isra.0>
  40414c:	2202      	movs	r2, #2
  40414e:	2112      	movs	r1, #18
  404150:	68e0      	ldr	r0, [r4, #12]
  404152:	f7ff ff9d 	bl	404090 <std.isra.0>
  404156:	2301      	movs	r3, #1
  404158:	61a3      	str	r3, [r4, #24]
  40415a:	bd10      	pop	{r4, pc}
  40415c:	00406190 	.word	0x00406190
  404160:	00404085 	.word	0x00404085

00404164 <__sfp>:
  404164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404166:	4b1c      	ldr	r3, [pc, #112]	; (4041d8 <__sfp+0x74>)
  404168:	681e      	ldr	r6, [r3, #0]
  40416a:	69b3      	ldr	r3, [r6, #24]
  40416c:	4607      	mov	r7, r0
  40416e:	b913      	cbnz	r3, 404176 <__sfp+0x12>
  404170:	4630      	mov	r0, r6
  404172:	f7ff ffc7 	bl	404104 <__sinit>
  404176:	3648      	adds	r6, #72	; 0x48
  404178:	68b4      	ldr	r4, [r6, #8]
  40417a:	6873      	ldr	r3, [r6, #4]
  40417c:	3b01      	subs	r3, #1
  40417e:	d404      	bmi.n	40418a <__sfp+0x26>
  404180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  404184:	b17d      	cbz	r5, 4041a6 <__sfp+0x42>
  404186:	3468      	adds	r4, #104	; 0x68
  404188:	e7f8      	b.n	40417c <__sfp+0x18>
  40418a:	6833      	ldr	r3, [r6, #0]
  40418c:	b10b      	cbz	r3, 404192 <__sfp+0x2e>
  40418e:	6836      	ldr	r6, [r6, #0]
  404190:	e7f2      	b.n	404178 <__sfp+0x14>
  404192:	2104      	movs	r1, #4
  404194:	4638      	mov	r0, r7
  404196:	f7ff ff9f 	bl	4040d8 <__sfmoreglue>
  40419a:	6030      	str	r0, [r6, #0]
  40419c:	2800      	cmp	r0, #0
  40419e:	d1f6      	bne.n	40418e <__sfp+0x2a>
  4041a0:	230c      	movs	r3, #12
  4041a2:	603b      	str	r3, [r7, #0]
  4041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4041aa:	81e3      	strh	r3, [r4, #14]
  4041ac:	2301      	movs	r3, #1
  4041ae:	81a3      	strh	r3, [r4, #12]
  4041b0:	6665      	str	r5, [r4, #100]	; 0x64
  4041b2:	6025      	str	r5, [r4, #0]
  4041b4:	60a5      	str	r5, [r4, #8]
  4041b6:	6065      	str	r5, [r4, #4]
  4041b8:	6125      	str	r5, [r4, #16]
  4041ba:	6165      	str	r5, [r4, #20]
  4041bc:	61a5      	str	r5, [r4, #24]
  4041be:	2208      	movs	r2, #8
  4041c0:	4629      	mov	r1, r5
  4041c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4041c6:	f7fe fa0f 	bl	4025e8 <memset>
  4041ca:	6365      	str	r5, [r4, #52]	; 0x34
  4041cc:	63a5      	str	r5, [r4, #56]	; 0x38
  4041ce:	64a5      	str	r5, [r4, #72]	; 0x48
  4041d0:	64e5      	str	r5, [r4, #76]	; 0x4c
  4041d2:	4620      	mov	r0, r4
  4041d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041d6:	bf00      	nop
  4041d8:	00406190 	.word	0x00406190

004041dc <_fwalk_reent>:
  4041dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4041e0:	4680      	mov	r8, r0
  4041e2:	4689      	mov	r9, r1
  4041e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
  4041e8:	2600      	movs	r6, #0
  4041ea:	b194      	cbz	r4, 404212 <_fwalk_reent+0x36>
  4041ec:	68a5      	ldr	r5, [r4, #8]
  4041ee:	6867      	ldr	r7, [r4, #4]
  4041f0:	3f01      	subs	r7, #1
  4041f2:	d40c      	bmi.n	40420e <_fwalk_reent+0x32>
  4041f4:	89ab      	ldrh	r3, [r5, #12]
  4041f6:	2b01      	cmp	r3, #1
  4041f8:	d907      	bls.n	40420a <_fwalk_reent+0x2e>
  4041fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  4041fe:	3301      	adds	r3, #1
  404200:	d003      	beq.n	40420a <_fwalk_reent+0x2e>
  404202:	4629      	mov	r1, r5
  404204:	4640      	mov	r0, r8
  404206:	47c8      	blx	r9
  404208:	4306      	orrs	r6, r0
  40420a:	3568      	adds	r5, #104	; 0x68
  40420c:	e7f0      	b.n	4041f0 <_fwalk_reent+0x14>
  40420e:	6824      	ldr	r4, [r4, #0]
  404210:	e7eb      	b.n	4041ea <_fwalk_reent+0xe>
  404212:	4630      	mov	r0, r6
  404214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00404218 <_localeconv_r>:
  404218:	4b04      	ldr	r3, [pc, #16]	; (40422c <_localeconv_r+0x14>)
  40421a:	681b      	ldr	r3, [r3, #0]
  40421c:	6a18      	ldr	r0, [r3, #32]
  40421e:	4b04      	ldr	r3, [pc, #16]	; (404230 <_localeconv_r+0x18>)
  404220:	2800      	cmp	r0, #0
  404222:	bf08      	it	eq
  404224:	4618      	moveq	r0, r3
  404226:	30f0      	adds	r0, #240	; 0xf0
  404228:	4770      	bx	lr
  40422a:	bf00      	nop
  40422c:	20000078 	.word	0x20000078
  404230:	2000007c 	.word	0x2000007c

00404234 <__swhatbuf_r>:
  404234:	b570      	push	{r4, r5, r6, lr}
  404236:	460e      	mov	r6, r1
  404238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40423c:	2900      	cmp	r1, #0
  40423e:	b090      	sub	sp, #64	; 0x40
  404240:	4614      	mov	r4, r2
  404242:	461d      	mov	r5, r3
  404244:	da06      	bge.n	404254 <__swhatbuf_r+0x20>
  404246:	2300      	movs	r3, #0
  404248:	602b      	str	r3, [r5, #0]
  40424a:	89b3      	ldrh	r3, [r6, #12]
  40424c:	061a      	lsls	r2, r3, #24
  40424e:	d50e      	bpl.n	40426e <__swhatbuf_r+0x3a>
  404250:	2340      	movs	r3, #64	; 0x40
  404252:	e00e      	b.n	404272 <__swhatbuf_r+0x3e>
  404254:	aa01      	add	r2, sp, #4
  404256:	f000 fe01 	bl	404e5c <_fstat_r>
  40425a:	2800      	cmp	r0, #0
  40425c:	dbf3      	blt.n	404246 <__swhatbuf_r+0x12>
  40425e:	9a02      	ldr	r2, [sp, #8]
  404260:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404264:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404268:	425a      	negs	r2, r3
  40426a:	415a      	adcs	r2, r3
  40426c:	602a      	str	r2, [r5, #0]
  40426e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404272:	2000      	movs	r0, #0
  404274:	6023      	str	r3, [r4, #0]
  404276:	b010      	add	sp, #64	; 0x40
  404278:	bd70      	pop	{r4, r5, r6, pc}
	...

0040427c <__smakebuf_r>:
  40427c:	898b      	ldrh	r3, [r1, #12]
  40427e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404280:	079e      	lsls	r6, r3, #30
  404282:	4605      	mov	r5, r0
  404284:	460c      	mov	r4, r1
  404286:	d410      	bmi.n	4042aa <__smakebuf_r+0x2e>
  404288:	ab01      	add	r3, sp, #4
  40428a:	466a      	mov	r2, sp
  40428c:	f7ff ffd2 	bl	404234 <__swhatbuf_r>
  404290:	9900      	ldr	r1, [sp, #0]
  404292:	4606      	mov	r6, r0
  404294:	4628      	mov	r0, r5
  404296:	f000 fbc9 	bl	404a2c <_malloc_r>
  40429a:	b968      	cbnz	r0, 4042b8 <__smakebuf_r+0x3c>
  40429c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042a0:	059a      	lsls	r2, r3, #22
  4042a2:	d422      	bmi.n	4042ea <__smakebuf_r+0x6e>
  4042a4:	f043 0302 	orr.w	r3, r3, #2
  4042a8:	81a3      	strh	r3, [r4, #12]
  4042aa:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4042ae:	6023      	str	r3, [r4, #0]
  4042b0:	6123      	str	r3, [r4, #16]
  4042b2:	2301      	movs	r3, #1
  4042b4:	6163      	str	r3, [r4, #20]
  4042b6:	e018      	b.n	4042ea <__smakebuf_r+0x6e>
  4042b8:	4b0d      	ldr	r3, [pc, #52]	; (4042f0 <__smakebuf_r+0x74>)
  4042ba:	62ab      	str	r3, [r5, #40]	; 0x28
  4042bc:	89a3      	ldrh	r3, [r4, #12]
  4042be:	6020      	str	r0, [r4, #0]
  4042c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4042c4:	81a3      	strh	r3, [r4, #12]
  4042c6:	9b00      	ldr	r3, [sp, #0]
  4042c8:	6163      	str	r3, [r4, #20]
  4042ca:	9b01      	ldr	r3, [sp, #4]
  4042cc:	6120      	str	r0, [r4, #16]
  4042ce:	b14b      	cbz	r3, 4042e4 <__smakebuf_r+0x68>
  4042d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4042d4:	4628      	mov	r0, r5
  4042d6:	f000 fdd3 	bl	404e80 <_isatty_r>
  4042da:	b118      	cbz	r0, 4042e4 <__smakebuf_r+0x68>
  4042dc:	89a3      	ldrh	r3, [r4, #12]
  4042de:	f043 0301 	orr.w	r3, r3, #1
  4042e2:	81a3      	strh	r3, [r4, #12]
  4042e4:	89a0      	ldrh	r0, [r4, #12]
  4042e6:	4330      	orrs	r0, r6
  4042e8:	81a0      	strh	r0, [r4, #12]
  4042ea:	b002      	add	sp, #8
  4042ec:	bd70      	pop	{r4, r5, r6, pc}
  4042ee:	bf00      	nop
  4042f0:	00404085 	.word	0x00404085

004042f4 <malloc>:
  4042f4:	4b02      	ldr	r3, [pc, #8]	; (404300 <malloc+0xc>)
  4042f6:	4601      	mov	r1, r0
  4042f8:	6818      	ldr	r0, [r3, #0]
  4042fa:	f000 bb97 	b.w	404a2c <_malloc_r>
  4042fe:	bf00      	nop
  404300:	20000078 	.word	0x20000078
	...

00404310 <memchr>:
  404310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404314:	2a10      	cmp	r2, #16
  404316:	db2b      	blt.n	404370 <memchr+0x60>
  404318:	f010 0f07 	tst.w	r0, #7
  40431c:	d008      	beq.n	404330 <memchr+0x20>
  40431e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404322:	3a01      	subs	r2, #1
  404324:	428b      	cmp	r3, r1
  404326:	d02d      	beq.n	404384 <memchr+0x74>
  404328:	f010 0f07 	tst.w	r0, #7
  40432c:	b342      	cbz	r2, 404380 <memchr+0x70>
  40432e:	d1f6      	bne.n	40431e <memchr+0xe>
  404330:	b4f0      	push	{r4, r5, r6, r7}
  404332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40433a:	f022 0407 	bic.w	r4, r2, #7
  40433e:	f07f 0700 	mvns.w	r7, #0
  404342:	2300      	movs	r3, #0
  404344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404348:	3c08      	subs	r4, #8
  40434a:	ea85 0501 	eor.w	r5, r5, r1
  40434e:	ea86 0601 	eor.w	r6, r6, r1
  404352:	fa85 f547 	uadd8	r5, r5, r7
  404356:	faa3 f587 	sel	r5, r3, r7
  40435a:	fa86 f647 	uadd8	r6, r6, r7
  40435e:	faa5 f687 	sel	r6, r5, r7
  404362:	b98e      	cbnz	r6, 404388 <memchr+0x78>
  404364:	d1ee      	bne.n	404344 <memchr+0x34>
  404366:	bcf0      	pop	{r4, r5, r6, r7}
  404368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40436c:	f002 0207 	and.w	r2, r2, #7
  404370:	b132      	cbz	r2, 404380 <memchr+0x70>
  404372:	f810 3b01 	ldrb.w	r3, [r0], #1
  404376:	3a01      	subs	r2, #1
  404378:	ea83 0301 	eor.w	r3, r3, r1
  40437c:	b113      	cbz	r3, 404384 <memchr+0x74>
  40437e:	d1f8      	bne.n	404372 <memchr+0x62>
  404380:	2000      	movs	r0, #0
  404382:	4770      	bx	lr
  404384:	3801      	subs	r0, #1
  404386:	4770      	bx	lr
  404388:	2d00      	cmp	r5, #0
  40438a:	bf06      	itte	eq
  40438c:	4635      	moveq	r5, r6
  40438e:	3803      	subeq	r0, #3
  404390:	3807      	subne	r0, #7
  404392:	f015 0f01 	tst.w	r5, #1
  404396:	d107      	bne.n	4043a8 <memchr+0x98>
  404398:	3001      	adds	r0, #1
  40439a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40439e:	bf02      	ittt	eq
  4043a0:	3001      	addeq	r0, #1
  4043a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4043a6:	3001      	addeq	r0, #1
  4043a8:	bcf0      	pop	{r4, r5, r6, r7}
  4043aa:	3801      	subs	r0, #1
  4043ac:	4770      	bx	lr
  4043ae:	bf00      	nop

004043b0 <memcpy>:
  4043b0:	b510      	push	{r4, lr}
  4043b2:	1e43      	subs	r3, r0, #1
  4043b4:	440a      	add	r2, r1
  4043b6:	4291      	cmp	r1, r2
  4043b8:	d004      	beq.n	4043c4 <memcpy+0x14>
  4043ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4043be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4043c2:	e7f8      	b.n	4043b6 <memcpy+0x6>
  4043c4:	bd10      	pop	{r4, pc}

004043c6 <_Balloc>:
  4043c6:	b570      	push	{r4, r5, r6, lr}
  4043c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
  4043ca:	4604      	mov	r4, r0
  4043cc:	460e      	mov	r6, r1
  4043ce:	b93d      	cbnz	r5, 4043e0 <_Balloc+0x1a>
  4043d0:	2010      	movs	r0, #16
  4043d2:	f7ff ff8f 	bl	4042f4 <malloc>
  4043d6:	6260      	str	r0, [r4, #36]	; 0x24
  4043d8:	6045      	str	r5, [r0, #4]
  4043da:	6085      	str	r5, [r0, #8]
  4043dc:	6005      	str	r5, [r0, #0]
  4043de:	60c5      	str	r5, [r0, #12]
  4043e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4043e2:	68eb      	ldr	r3, [r5, #12]
  4043e4:	b143      	cbz	r3, 4043f8 <_Balloc+0x32>
  4043e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4043e8:	68db      	ldr	r3, [r3, #12]
  4043ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  4043ee:	b178      	cbz	r0, 404410 <_Balloc+0x4a>
  4043f0:	6802      	ldr	r2, [r0, #0]
  4043f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  4043f6:	e017      	b.n	404428 <_Balloc+0x62>
  4043f8:	2221      	movs	r2, #33	; 0x21
  4043fa:	2104      	movs	r1, #4
  4043fc:	4620      	mov	r0, r4
  4043fe:	f000 fab9 	bl	404974 <_calloc_r>
  404402:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404404:	60e8      	str	r0, [r5, #12]
  404406:	68db      	ldr	r3, [r3, #12]
  404408:	2b00      	cmp	r3, #0
  40440a:	d1ec      	bne.n	4043e6 <_Balloc+0x20>
  40440c:	2000      	movs	r0, #0
  40440e:	bd70      	pop	{r4, r5, r6, pc}
  404410:	2101      	movs	r1, #1
  404412:	fa01 f506 	lsl.w	r5, r1, r6
  404416:	1d6a      	adds	r2, r5, #5
  404418:	0092      	lsls	r2, r2, #2
  40441a:	4620      	mov	r0, r4
  40441c:	f000 faaa 	bl	404974 <_calloc_r>
  404420:	2800      	cmp	r0, #0
  404422:	d0f3      	beq.n	40440c <_Balloc+0x46>
  404424:	6046      	str	r6, [r0, #4]
  404426:	6085      	str	r5, [r0, #8]
  404428:	2300      	movs	r3, #0
  40442a:	6103      	str	r3, [r0, #16]
  40442c:	60c3      	str	r3, [r0, #12]
  40442e:	bd70      	pop	{r4, r5, r6, pc}

00404430 <_Bfree>:
  404430:	b570      	push	{r4, r5, r6, lr}
  404432:	6a44      	ldr	r4, [r0, #36]	; 0x24
  404434:	4606      	mov	r6, r0
  404436:	460d      	mov	r5, r1
  404438:	b93c      	cbnz	r4, 40444a <_Bfree+0x1a>
  40443a:	2010      	movs	r0, #16
  40443c:	f7ff ff5a 	bl	4042f4 <malloc>
  404440:	6270      	str	r0, [r6, #36]	; 0x24
  404442:	6044      	str	r4, [r0, #4]
  404444:	6084      	str	r4, [r0, #8]
  404446:	6004      	str	r4, [r0, #0]
  404448:	60c4      	str	r4, [r0, #12]
  40444a:	b13d      	cbz	r5, 40445c <_Bfree+0x2c>
  40444c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40444e:	686a      	ldr	r2, [r5, #4]
  404450:	68db      	ldr	r3, [r3, #12]
  404452:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404456:	6029      	str	r1, [r5, #0]
  404458:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40445c:	bd70      	pop	{r4, r5, r6, pc}

0040445e <__multadd>:
  40445e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404462:	690d      	ldr	r5, [r1, #16]
  404464:	461f      	mov	r7, r3
  404466:	4606      	mov	r6, r0
  404468:	460c      	mov	r4, r1
  40446a:	f101 0e14 	add.w	lr, r1, #20
  40446e:	2300      	movs	r3, #0
  404470:	f8de 0000 	ldr.w	r0, [lr]
  404474:	b281      	uxth	r1, r0
  404476:	fb02 7101 	mla	r1, r2, r1, r7
  40447a:	0c0f      	lsrs	r7, r1, #16
  40447c:	0c00      	lsrs	r0, r0, #16
  40447e:	fb02 7000 	mla	r0, r2, r0, r7
  404482:	b289      	uxth	r1, r1
  404484:	3301      	adds	r3, #1
  404486:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40448a:	429d      	cmp	r5, r3
  40448c:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404490:	f84e 1b04 	str.w	r1, [lr], #4
  404494:	dcec      	bgt.n	404470 <__multadd+0x12>
  404496:	b1d7      	cbz	r7, 4044ce <__multadd+0x70>
  404498:	68a3      	ldr	r3, [r4, #8]
  40449a:	429d      	cmp	r5, r3
  40449c:	db12      	blt.n	4044c4 <__multadd+0x66>
  40449e:	6861      	ldr	r1, [r4, #4]
  4044a0:	4630      	mov	r0, r6
  4044a2:	3101      	adds	r1, #1
  4044a4:	f7ff ff8f 	bl	4043c6 <_Balloc>
  4044a8:	6922      	ldr	r2, [r4, #16]
  4044aa:	3202      	adds	r2, #2
  4044ac:	f104 010c 	add.w	r1, r4, #12
  4044b0:	4680      	mov	r8, r0
  4044b2:	0092      	lsls	r2, r2, #2
  4044b4:	300c      	adds	r0, #12
  4044b6:	f7ff ff7b 	bl	4043b0 <memcpy>
  4044ba:	4621      	mov	r1, r4
  4044bc:	4630      	mov	r0, r6
  4044be:	f7ff ffb7 	bl	404430 <_Bfree>
  4044c2:	4644      	mov	r4, r8
  4044c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4044c8:	3501      	adds	r5, #1
  4044ca:	615f      	str	r7, [r3, #20]
  4044cc:	6125      	str	r5, [r4, #16]
  4044ce:	4620      	mov	r0, r4
  4044d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004044d4 <__hi0bits>:
  4044d4:	0c03      	lsrs	r3, r0, #16
  4044d6:	041b      	lsls	r3, r3, #16
  4044d8:	b913      	cbnz	r3, 4044e0 <__hi0bits+0xc>
  4044da:	0400      	lsls	r0, r0, #16
  4044dc:	2310      	movs	r3, #16
  4044de:	e000      	b.n	4044e2 <__hi0bits+0xe>
  4044e0:	2300      	movs	r3, #0
  4044e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4044e6:	bf04      	itt	eq
  4044e8:	0200      	lsleq	r0, r0, #8
  4044ea:	3308      	addeq	r3, #8
  4044ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4044f0:	bf04      	itt	eq
  4044f2:	0100      	lsleq	r0, r0, #4
  4044f4:	3304      	addeq	r3, #4
  4044f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4044fa:	bf04      	itt	eq
  4044fc:	0080      	lsleq	r0, r0, #2
  4044fe:	3302      	addeq	r3, #2
  404500:	2800      	cmp	r0, #0
  404502:	db03      	blt.n	40450c <__hi0bits+0x38>
  404504:	0042      	lsls	r2, r0, #1
  404506:	d503      	bpl.n	404510 <__hi0bits+0x3c>
  404508:	1c58      	adds	r0, r3, #1
  40450a:	4770      	bx	lr
  40450c:	4618      	mov	r0, r3
  40450e:	4770      	bx	lr
  404510:	2020      	movs	r0, #32
  404512:	4770      	bx	lr

00404514 <__lo0bits>:
  404514:	6803      	ldr	r3, [r0, #0]
  404516:	f013 0207 	ands.w	r2, r3, #7
  40451a:	d00b      	beq.n	404534 <__lo0bits+0x20>
  40451c:	07d9      	lsls	r1, r3, #31
  40451e:	d422      	bmi.n	404566 <__lo0bits+0x52>
  404520:	079a      	lsls	r2, r3, #30
  404522:	bf4b      	itete	mi
  404524:	085b      	lsrmi	r3, r3, #1
  404526:	089b      	lsrpl	r3, r3, #2
  404528:	6003      	strmi	r3, [r0, #0]
  40452a:	6003      	strpl	r3, [r0, #0]
  40452c:	bf4c      	ite	mi
  40452e:	2001      	movmi	r0, #1
  404530:	2002      	movpl	r0, #2
  404532:	4770      	bx	lr
  404534:	b299      	uxth	r1, r3
  404536:	b909      	cbnz	r1, 40453c <__lo0bits+0x28>
  404538:	0c1b      	lsrs	r3, r3, #16
  40453a:	2210      	movs	r2, #16
  40453c:	f013 0fff 	tst.w	r3, #255	; 0xff
  404540:	bf04      	itt	eq
  404542:	0a1b      	lsreq	r3, r3, #8
  404544:	3208      	addeq	r2, #8
  404546:	0719      	lsls	r1, r3, #28
  404548:	bf04      	itt	eq
  40454a:	091b      	lsreq	r3, r3, #4
  40454c:	3204      	addeq	r2, #4
  40454e:	0799      	lsls	r1, r3, #30
  404550:	bf04      	itt	eq
  404552:	089b      	lsreq	r3, r3, #2
  404554:	3202      	addeq	r2, #2
  404556:	07d9      	lsls	r1, r3, #31
  404558:	d402      	bmi.n	404560 <__lo0bits+0x4c>
  40455a:	085b      	lsrs	r3, r3, #1
  40455c:	d005      	beq.n	40456a <__lo0bits+0x56>
  40455e:	3201      	adds	r2, #1
  404560:	6003      	str	r3, [r0, #0]
  404562:	4610      	mov	r0, r2
  404564:	4770      	bx	lr
  404566:	2000      	movs	r0, #0
  404568:	4770      	bx	lr
  40456a:	2020      	movs	r0, #32
  40456c:	4770      	bx	lr

0040456e <__i2b>:
  40456e:	b510      	push	{r4, lr}
  404570:	460c      	mov	r4, r1
  404572:	2101      	movs	r1, #1
  404574:	f7ff ff27 	bl	4043c6 <_Balloc>
  404578:	2201      	movs	r2, #1
  40457a:	6144      	str	r4, [r0, #20]
  40457c:	6102      	str	r2, [r0, #16]
  40457e:	bd10      	pop	{r4, pc}

00404580 <__multiply>:
  404580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404584:	4614      	mov	r4, r2
  404586:	690a      	ldr	r2, [r1, #16]
  404588:	6923      	ldr	r3, [r4, #16]
  40458a:	429a      	cmp	r2, r3
  40458c:	bfb8      	it	lt
  40458e:	460b      	movlt	r3, r1
  404590:	4688      	mov	r8, r1
  404592:	bfbc      	itt	lt
  404594:	46a0      	movlt	r8, r4
  404596:	461c      	movlt	r4, r3
  404598:	f8d8 7010 	ldr.w	r7, [r8, #16]
  40459c:	f8d4 9010 	ldr.w	r9, [r4, #16]
  4045a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4045a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
  4045a8:	eb07 0609 	add.w	r6, r7, r9
  4045ac:	429e      	cmp	r6, r3
  4045ae:	bfc8      	it	gt
  4045b0:	3101      	addgt	r1, #1
  4045b2:	f7ff ff08 	bl	4043c6 <_Balloc>
  4045b6:	f100 0514 	add.w	r5, r0, #20
  4045ba:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  4045be:	462b      	mov	r3, r5
  4045c0:	2200      	movs	r2, #0
  4045c2:	4563      	cmp	r3, ip
  4045c4:	d202      	bcs.n	4045cc <__multiply+0x4c>
  4045c6:	f843 2b04 	str.w	r2, [r3], #4
  4045ca:	e7fa      	b.n	4045c2 <__multiply+0x42>
  4045cc:	f104 0214 	add.w	r2, r4, #20
  4045d0:	f108 0114 	add.w	r1, r8, #20
  4045d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  4045d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4045dc:	9300      	str	r3, [sp, #0]
  4045de:	9b00      	ldr	r3, [sp, #0]
  4045e0:	9201      	str	r2, [sp, #4]
  4045e2:	4293      	cmp	r3, r2
  4045e4:	d957      	bls.n	404696 <__multiply+0x116>
  4045e6:	f8b2 b000 	ldrh.w	fp, [r2]
  4045ea:	f1bb 0f00 	cmp.w	fp, #0
  4045ee:	d023      	beq.n	404638 <__multiply+0xb8>
  4045f0:	4689      	mov	r9, r1
  4045f2:	46ae      	mov	lr, r5
  4045f4:	f04f 0800 	mov.w	r8, #0
  4045f8:	f859 4b04 	ldr.w	r4, [r9], #4
  4045fc:	f8be a000 	ldrh.w	sl, [lr]
  404600:	b2a3      	uxth	r3, r4
  404602:	fb0b a303 	mla	r3, fp, r3, sl
  404606:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  40460a:	f8de 4000 	ldr.w	r4, [lr]
  40460e:	4443      	add	r3, r8
  404610:	ea4f 4814 	mov.w	r8, r4, lsr #16
  404614:	fb0b 840a 	mla	r4, fp, sl, r8
  404618:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40461c:	46f2      	mov	sl, lr
  40461e:	b29b      	uxth	r3, r3
  404620:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404624:	454f      	cmp	r7, r9
  404626:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40462a:	f84a 3b04 	str.w	r3, [sl], #4
  40462e:	d901      	bls.n	404634 <__multiply+0xb4>
  404630:	46d6      	mov	lr, sl
  404632:	e7e1      	b.n	4045f8 <__multiply+0x78>
  404634:	f8ce 8004 	str.w	r8, [lr, #4]
  404638:	9b01      	ldr	r3, [sp, #4]
  40463a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  40463e:	3204      	adds	r2, #4
  404640:	f1ba 0f00 	cmp.w	sl, #0
  404644:	d021      	beq.n	40468a <__multiply+0x10a>
  404646:	682b      	ldr	r3, [r5, #0]
  404648:	462c      	mov	r4, r5
  40464a:	4689      	mov	r9, r1
  40464c:	f04f 0800 	mov.w	r8, #0
  404650:	f8b9 e000 	ldrh.w	lr, [r9]
  404654:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  404658:	fb0a be0e 	mla	lr, sl, lr, fp
  40465c:	44f0      	add	r8, lr
  40465e:	46a3      	mov	fp, r4
  404660:	b29b      	uxth	r3, r3
  404662:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404666:	f84b 3b04 	str.w	r3, [fp], #4
  40466a:	f859 3b04 	ldr.w	r3, [r9], #4
  40466e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  404672:	0c1b      	lsrs	r3, r3, #16
  404674:	fb0a e303 	mla	r3, sl, r3, lr
  404678:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  40467c:	454f      	cmp	r7, r9
  40467e:	ea4f 4813 	mov.w	r8, r3, lsr #16
  404682:	d901      	bls.n	404688 <__multiply+0x108>
  404684:	465c      	mov	r4, fp
  404686:	e7e3      	b.n	404650 <__multiply+0xd0>
  404688:	6063      	str	r3, [r4, #4]
  40468a:	3504      	adds	r5, #4
  40468c:	e7a7      	b.n	4045de <__multiply+0x5e>
  40468e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  404692:	b913      	cbnz	r3, 40469a <__multiply+0x11a>
  404694:	3e01      	subs	r6, #1
  404696:	2e00      	cmp	r6, #0
  404698:	dcf9      	bgt.n	40468e <__multiply+0x10e>
  40469a:	6106      	str	r6, [r0, #16]
  40469c:	b003      	add	sp, #12
  40469e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

004046a4 <__pow5mult>:
  4046a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4046a8:	4615      	mov	r5, r2
  4046aa:	f012 0203 	ands.w	r2, r2, #3
  4046ae:	4606      	mov	r6, r0
  4046b0:	460f      	mov	r7, r1
  4046b2:	d007      	beq.n	4046c4 <__pow5mult+0x20>
  4046b4:	3a01      	subs	r2, #1
  4046b6:	4c21      	ldr	r4, [pc, #132]	; (40473c <__pow5mult+0x98>)
  4046b8:	2300      	movs	r3, #0
  4046ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4046be:	f7ff fece 	bl	40445e <__multadd>
  4046c2:	4607      	mov	r7, r0
  4046c4:	10ad      	asrs	r5, r5, #2
  4046c6:	d036      	beq.n	404736 <__pow5mult+0x92>
  4046c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4046ca:	b93c      	cbnz	r4, 4046dc <__pow5mult+0x38>
  4046cc:	2010      	movs	r0, #16
  4046ce:	f7ff fe11 	bl	4042f4 <malloc>
  4046d2:	6270      	str	r0, [r6, #36]	; 0x24
  4046d4:	6044      	str	r4, [r0, #4]
  4046d6:	6084      	str	r4, [r0, #8]
  4046d8:	6004      	str	r4, [r0, #0]
  4046da:	60c4      	str	r4, [r0, #12]
  4046dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  4046e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  4046e4:	b94c      	cbnz	r4, 4046fa <__pow5mult+0x56>
  4046e6:	f240 2171 	movw	r1, #625	; 0x271
  4046ea:	4630      	mov	r0, r6
  4046ec:	f7ff ff3f 	bl	40456e <__i2b>
  4046f0:	2300      	movs	r3, #0
  4046f2:	f8c8 0008 	str.w	r0, [r8, #8]
  4046f6:	4604      	mov	r4, r0
  4046f8:	6003      	str	r3, [r0, #0]
  4046fa:	f04f 0800 	mov.w	r8, #0
  4046fe:	07eb      	lsls	r3, r5, #31
  404700:	d50a      	bpl.n	404718 <__pow5mult+0x74>
  404702:	4639      	mov	r1, r7
  404704:	4622      	mov	r2, r4
  404706:	4630      	mov	r0, r6
  404708:	f7ff ff3a 	bl	404580 <__multiply>
  40470c:	4639      	mov	r1, r7
  40470e:	4681      	mov	r9, r0
  404710:	4630      	mov	r0, r6
  404712:	f7ff fe8d 	bl	404430 <_Bfree>
  404716:	464f      	mov	r7, r9
  404718:	106d      	asrs	r5, r5, #1
  40471a:	d00c      	beq.n	404736 <__pow5mult+0x92>
  40471c:	6820      	ldr	r0, [r4, #0]
  40471e:	b108      	cbz	r0, 404724 <__pow5mult+0x80>
  404720:	4604      	mov	r4, r0
  404722:	e7ec      	b.n	4046fe <__pow5mult+0x5a>
  404724:	4622      	mov	r2, r4
  404726:	4621      	mov	r1, r4
  404728:	4630      	mov	r0, r6
  40472a:	f7ff ff29 	bl	404580 <__multiply>
  40472e:	6020      	str	r0, [r4, #0]
  404730:	f8c0 8000 	str.w	r8, [r0]
  404734:	e7f4      	b.n	404720 <__pow5mult+0x7c>
  404736:	4638      	mov	r0, r7
  404738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40473c:	00406328 	.word	0x00406328

00404740 <__lshift>:
  404740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404744:	460c      	mov	r4, r1
  404746:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40474a:	6926      	ldr	r6, [r4, #16]
  40474c:	6849      	ldr	r1, [r1, #4]
  40474e:	68a3      	ldr	r3, [r4, #8]
  404750:	4456      	add	r6, sl
  404752:	4607      	mov	r7, r0
  404754:	4691      	mov	r9, r2
  404756:	1c75      	adds	r5, r6, #1
  404758:	42ab      	cmp	r3, r5
  40475a:	da02      	bge.n	404762 <__lshift+0x22>
  40475c:	3101      	adds	r1, #1
  40475e:	005b      	lsls	r3, r3, #1
  404760:	e7fa      	b.n	404758 <__lshift+0x18>
  404762:	4638      	mov	r0, r7
  404764:	f7ff fe2f 	bl	4043c6 <_Balloc>
  404768:	2300      	movs	r3, #0
  40476a:	4680      	mov	r8, r0
  40476c:	f100 0114 	add.w	r1, r0, #20
  404770:	461a      	mov	r2, r3
  404772:	4553      	cmp	r3, sl
  404774:	da03      	bge.n	40477e <__lshift+0x3e>
  404776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40477a:	3301      	adds	r3, #1
  40477c:	e7f9      	b.n	404772 <__lshift+0x32>
  40477e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  404782:	6920      	ldr	r0, [r4, #16]
  404784:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404788:	f019 091f 	ands.w	r9, r9, #31
  40478c:	f104 0114 	add.w	r1, r4, #20
  404790:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404794:	d014      	beq.n	4047c0 <__lshift+0x80>
  404796:	f1c9 0c20 	rsb	ip, r9, #32
  40479a:	2200      	movs	r2, #0
  40479c:	6808      	ldr	r0, [r1, #0]
  40479e:	fa00 f009 	lsl.w	r0, r0, r9
  4047a2:	4302      	orrs	r2, r0
  4047a4:	469a      	mov	sl, r3
  4047a6:	f843 2b04 	str.w	r2, [r3], #4
  4047aa:	f851 2b04 	ldr.w	r2, [r1], #4
  4047ae:	458e      	cmp	lr, r1
  4047b0:	fa22 f20c 	lsr.w	r2, r2, ip
  4047b4:	d8f2      	bhi.n	40479c <__lshift+0x5c>
  4047b6:	f8ca 2004 	str.w	r2, [sl, #4]
  4047ba:	b142      	cbz	r2, 4047ce <__lshift+0x8e>
  4047bc:	1cb5      	adds	r5, r6, #2
  4047be:	e006      	b.n	4047ce <__lshift+0x8e>
  4047c0:	3b04      	subs	r3, #4
  4047c2:	f851 2b04 	ldr.w	r2, [r1], #4
  4047c6:	f843 2f04 	str.w	r2, [r3, #4]!
  4047ca:	458e      	cmp	lr, r1
  4047cc:	d8f9      	bhi.n	4047c2 <__lshift+0x82>
  4047ce:	3d01      	subs	r5, #1
  4047d0:	4638      	mov	r0, r7
  4047d2:	f8c8 5010 	str.w	r5, [r8, #16]
  4047d6:	4621      	mov	r1, r4
  4047d8:	f7ff fe2a 	bl	404430 <_Bfree>
  4047dc:	4640      	mov	r0, r8
  4047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004047e2 <__mcmp>:
  4047e2:	6903      	ldr	r3, [r0, #16]
  4047e4:	690a      	ldr	r2, [r1, #16]
  4047e6:	1a9b      	subs	r3, r3, r2
  4047e8:	b510      	push	{r4, lr}
  4047ea:	d111      	bne.n	404810 <__mcmp+0x2e>
  4047ec:	0092      	lsls	r2, r2, #2
  4047ee:	3014      	adds	r0, #20
  4047f0:	3114      	adds	r1, #20
  4047f2:	1883      	adds	r3, r0, r2
  4047f4:	440a      	add	r2, r1
  4047f6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4047fa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  4047fe:	428c      	cmp	r4, r1
  404800:	d002      	beq.n	404808 <__mcmp+0x26>
  404802:	d307      	bcc.n	404814 <__mcmp+0x32>
  404804:	2001      	movs	r0, #1
  404806:	bd10      	pop	{r4, pc}
  404808:	4298      	cmp	r0, r3
  40480a:	d3f4      	bcc.n	4047f6 <__mcmp+0x14>
  40480c:	2000      	movs	r0, #0
  40480e:	bd10      	pop	{r4, pc}
  404810:	4618      	mov	r0, r3
  404812:	bd10      	pop	{r4, pc}
  404814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404818:	bd10      	pop	{r4, pc}

0040481a <__mdiff>:
  40481a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40481e:	460c      	mov	r4, r1
  404820:	4607      	mov	r7, r0
  404822:	4611      	mov	r1, r2
  404824:	4620      	mov	r0, r4
  404826:	4615      	mov	r5, r2
  404828:	f7ff ffdb 	bl	4047e2 <__mcmp>
  40482c:	1e06      	subs	r6, r0, #0
  40482e:	d108      	bne.n	404842 <__mdiff+0x28>
  404830:	4631      	mov	r1, r6
  404832:	4638      	mov	r0, r7
  404834:	f7ff fdc7 	bl	4043c6 <_Balloc>
  404838:	2301      	movs	r3, #1
  40483a:	6103      	str	r3, [r0, #16]
  40483c:	6146      	str	r6, [r0, #20]
  40483e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404842:	bfbc      	itt	lt
  404844:	4623      	movlt	r3, r4
  404846:	462c      	movlt	r4, r5
  404848:	4638      	mov	r0, r7
  40484a:	6861      	ldr	r1, [r4, #4]
  40484c:	bfba      	itte	lt
  40484e:	461d      	movlt	r5, r3
  404850:	2601      	movlt	r6, #1
  404852:	2600      	movge	r6, #0
  404854:	f7ff fdb7 	bl	4043c6 <_Balloc>
  404858:	692b      	ldr	r3, [r5, #16]
  40485a:	60c6      	str	r6, [r0, #12]
  40485c:	6926      	ldr	r6, [r4, #16]
  40485e:	f105 0914 	add.w	r9, r5, #20
  404862:	3414      	adds	r4, #20
  404864:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  404868:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40486c:	f100 0514 	add.w	r5, r0, #20
  404870:	f04f 0c00 	mov.w	ip, #0
  404874:	f854 3b04 	ldr.w	r3, [r4], #4
  404878:	f859 2b04 	ldr.w	r2, [r9], #4
  40487c:	fa1c f183 	uxtah	r1, ip, r3
  404880:	fa1f fe82 	uxth.w	lr, r2
  404884:	0c12      	lsrs	r2, r2, #16
  404886:	ebce 0101 	rsb	r1, lr, r1
  40488a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  40488e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404892:	b289      	uxth	r1, r1
  404894:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404898:	45c8      	cmp	r8, r9
  40489a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  40489e:	46a6      	mov	lr, r4
  4048a0:	f845 3b04 	str.w	r3, [r5], #4
  4048a4:	d8e6      	bhi.n	404874 <__mdiff+0x5a>
  4048a6:	45be      	cmp	lr, r7
  4048a8:	d20e      	bcs.n	4048c8 <__mdiff+0xae>
  4048aa:	f85e 1b04 	ldr.w	r1, [lr], #4
  4048ae:	fa1c f281 	uxtah	r2, ip, r1
  4048b2:	1413      	asrs	r3, r2, #16
  4048b4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  4048b8:	b292      	uxth	r2, r2
  4048ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4048be:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4048c2:	f845 2b04 	str.w	r2, [r5], #4
  4048c6:	e7ee      	b.n	4048a6 <__mdiff+0x8c>
  4048c8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4048cc:	b90b      	cbnz	r3, 4048d2 <__mdiff+0xb8>
  4048ce:	3e01      	subs	r6, #1
  4048d0:	e7fa      	b.n	4048c8 <__mdiff+0xae>
  4048d2:	6106      	str	r6, [r0, #16]
  4048d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004048d8 <__d2b>:
  4048d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4048dc:	2101      	movs	r1, #1
  4048de:	461c      	mov	r4, r3
  4048e0:	4690      	mov	r8, r2
  4048e2:	9e08      	ldr	r6, [sp, #32]
  4048e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4048e6:	f7ff fd6e 	bl	4043c6 <_Balloc>
  4048ea:	f3c4 0213 	ubfx	r2, r4, #0, #20
  4048ee:	f3c4 540a 	ubfx	r4, r4, #20, #11
  4048f2:	4607      	mov	r7, r0
  4048f4:	b10c      	cbz	r4, 4048fa <__d2b+0x22>
  4048f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4048fa:	9201      	str	r2, [sp, #4]
  4048fc:	f1b8 0f00 	cmp.w	r8, #0
  404900:	d019      	beq.n	404936 <__d2b+0x5e>
  404902:	a802      	add	r0, sp, #8
  404904:	f840 8d08 	str.w	r8, [r0, #-8]!
  404908:	f7ff fe04 	bl	404514 <__lo0bits>
  40490c:	9b00      	ldr	r3, [sp, #0]
  40490e:	b148      	cbz	r0, 404924 <__d2b+0x4c>
  404910:	9a01      	ldr	r2, [sp, #4]
  404912:	f1c0 0120 	rsb	r1, r0, #32
  404916:	fa02 f101 	lsl.w	r1, r2, r1
  40491a:	430b      	orrs	r3, r1
  40491c:	40c2      	lsrs	r2, r0
  40491e:	617b      	str	r3, [r7, #20]
  404920:	9201      	str	r2, [sp, #4]
  404922:	e000      	b.n	404926 <__d2b+0x4e>
  404924:	617b      	str	r3, [r7, #20]
  404926:	9b01      	ldr	r3, [sp, #4]
  404928:	61bb      	str	r3, [r7, #24]
  40492a:	2b00      	cmp	r3, #0
  40492c:	bf14      	ite	ne
  40492e:	2102      	movne	r1, #2
  404930:	2101      	moveq	r1, #1
  404932:	6139      	str	r1, [r7, #16]
  404934:	e007      	b.n	404946 <__d2b+0x6e>
  404936:	a801      	add	r0, sp, #4
  404938:	f7ff fdec 	bl	404514 <__lo0bits>
  40493c:	9b01      	ldr	r3, [sp, #4]
  40493e:	617b      	str	r3, [r7, #20]
  404940:	2101      	movs	r1, #1
  404942:	6139      	str	r1, [r7, #16]
  404944:	3020      	adds	r0, #32
  404946:	b134      	cbz	r4, 404956 <__d2b+0x7e>
  404948:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40494c:	4404      	add	r4, r0
  40494e:	6034      	str	r4, [r6, #0]
  404950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404954:	e009      	b.n	40496a <__d2b+0x92>
  404956:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40495a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40495e:	6030      	str	r0, [r6, #0]
  404960:	6918      	ldr	r0, [r3, #16]
  404962:	f7ff fdb7 	bl	4044d4 <__hi0bits>
  404966:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40496a:	6028      	str	r0, [r5, #0]
  40496c:	4638      	mov	r0, r7
  40496e:	b002      	add	sp, #8
  404970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404974 <_calloc_r>:
  404974:	b538      	push	{r3, r4, r5, lr}
  404976:	fb02 f401 	mul.w	r4, r2, r1
  40497a:	4621      	mov	r1, r4
  40497c:	f000 f856 	bl	404a2c <_malloc_r>
  404980:	4605      	mov	r5, r0
  404982:	b118      	cbz	r0, 40498c <_calloc_r+0x18>
  404984:	4622      	mov	r2, r4
  404986:	2100      	movs	r1, #0
  404988:	f7fd fe2e 	bl	4025e8 <memset>
  40498c:	4628      	mov	r0, r5
  40498e:	bd38      	pop	{r3, r4, r5, pc}

00404990 <_free_r>:
  404990:	b538      	push	{r3, r4, r5, lr}
  404992:	4605      	mov	r5, r0
  404994:	2900      	cmp	r1, #0
  404996:	d046      	beq.n	404a26 <_free_r+0x96>
  404998:	f851 3c04 	ldr.w	r3, [r1, #-4]
  40499c:	1f0c      	subs	r4, r1, #4
  40499e:	2b00      	cmp	r3, #0
  4049a0:	bfb8      	it	lt
  4049a2:	18e4      	addlt	r4, r4, r3
  4049a4:	f000 faa0 	bl	404ee8 <__malloc_lock>
  4049a8:	4a1f      	ldr	r2, [pc, #124]	; (404a28 <_free_r+0x98>)
  4049aa:	6813      	ldr	r3, [r2, #0]
  4049ac:	4611      	mov	r1, r2
  4049ae:	b913      	cbnz	r3, 4049b6 <_free_r+0x26>
  4049b0:	6063      	str	r3, [r4, #4]
  4049b2:	6014      	str	r4, [r2, #0]
  4049b4:	e032      	b.n	404a1c <_free_r+0x8c>
  4049b6:	42a3      	cmp	r3, r4
  4049b8:	d90e      	bls.n	4049d8 <_free_r+0x48>
  4049ba:	6822      	ldr	r2, [r4, #0]
  4049bc:	18a0      	adds	r0, r4, r2
  4049be:	4283      	cmp	r3, r0
  4049c0:	bf04      	itt	eq
  4049c2:	6818      	ldreq	r0, [r3, #0]
  4049c4:	685b      	ldreq	r3, [r3, #4]
  4049c6:	6063      	str	r3, [r4, #4]
  4049c8:	bf04      	itt	eq
  4049ca:	1812      	addeq	r2, r2, r0
  4049cc:	6022      	streq	r2, [r4, #0]
  4049ce:	600c      	str	r4, [r1, #0]
  4049d0:	e024      	b.n	404a1c <_free_r+0x8c>
  4049d2:	42a2      	cmp	r2, r4
  4049d4:	d803      	bhi.n	4049de <_free_r+0x4e>
  4049d6:	4613      	mov	r3, r2
  4049d8:	685a      	ldr	r2, [r3, #4]
  4049da:	2a00      	cmp	r2, #0
  4049dc:	d1f9      	bne.n	4049d2 <_free_r+0x42>
  4049de:	6818      	ldr	r0, [r3, #0]
  4049e0:	1819      	adds	r1, r3, r0
  4049e2:	42a1      	cmp	r1, r4
  4049e4:	d10b      	bne.n	4049fe <_free_r+0x6e>
  4049e6:	6821      	ldr	r1, [r4, #0]
  4049e8:	4401      	add	r1, r0
  4049ea:	1858      	adds	r0, r3, r1
  4049ec:	4282      	cmp	r2, r0
  4049ee:	6019      	str	r1, [r3, #0]
  4049f0:	d114      	bne.n	404a1c <_free_r+0x8c>
  4049f2:	6810      	ldr	r0, [r2, #0]
  4049f4:	6852      	ldr	r2, [r2, #4]
  4049f6:	605a      	str	r2, [r3, #4]
  4049f8:	4401      	add	r1, r0
  4049fa:	6019      	str	r1, [r3, #0]
  4049fc:	e00e      	b.n	404a1c <_free_r+0x8c>
  4049fe:	d902      	bls.n	404a06 <_free_r+0x76>
  404a00:	230c      	movs	r3, #12
  404a02:	602b      	str	r3, [r5, #0]
  404a04:	e00a      	b.n	404a1c <_free_r+0x8c>
  404a06:	6821      	ldr	r1, [r4, #0]
  404a08:	1860      	adds	r0, r4, r1
  404a0a:	4282      	cmp	r2, r0
  404a0c:	bf04      	itt	eq
  404a0e:	6810      	ldreq	r0, [r2, #0]
  404a10:	6852      	ldreq	r2, [r2, #4]
  404a12:	6062      	str	r2, [r4, #4]
  404a14:	bf04      	itt	eq
  404a16:	1809      	addeq	r1, r1, r0
  404a18:	6021      	streq	r1, [r4, #0]
  404a1a:	605c      	str	r4, [r3, #4]
  404a1c:	4628      	mov	r0, r5
  404a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404a22:	f000 ba62 	b.w	404eea <__malloc_unlock>
  404a26:	bd38      	pop	{r3, r4, r5, pc}
  404a28:	200002ec 	.word	0x200002ec

00404a2c <_malloc_r>:
  404a2c:	b570      	push	{r4, r5, r6, lr}
  404a2e:	1ccd      	adds	r5, r1, #3
  404a30:	f025 0503 	bic.w	r5, r5, #3
  404a34:	3508      	adds	r5, #8
  404a36:	2d0c      	cmp	r5, #12
  404a38:	bf38      	it	cc
  404a3a:	250c      	movcc	r5, #12
  404a3c:	2d00      	cmp	r5, #0
  404a3e:	4606      	mov	r6, r0
  404a40:	db01      	blt.n	404a46 <_malloc_r+0x1a>
  404a42:	42a9      	cmp	r1, r5
  404a44:	d902      	bls.n	404a4c <_malloc_r+0x20>
  404a46:	230c      	movs	r3, #12
  404a48:	6033      	str	r3, [r6, #0]
  404a4a:	e046      	b.n	404ada <_malloc_r+0xae>
  404a4c:	f000 fa4c 	bl	404ee8 <__malloc_lock>
  404a50:	4b23      	ldr	r3, [pc, #140]	; (404ae0 <_malloc_r+0xb4>)
  404a52:	681c      	ldr	r4, [r3, #0]
  404a54:	461a      	mov	r2, r3
  404a56:	4621      	mov	r1, r4
  404a58:	b1a1      	cbz	r1, 404a84 <_malloc_r+0x58>
  404a5a:	680b      	ldr	r3, [r1, #0]
  404a5c:	1b5b      	subs	r3, r3, r5
  404a5e:	d40e      	bmi.n	404a7e <_malloc_r+0x52>
  404a60:	2b0b      	cmp	r3, #11
  404a62:	d903      	bls.n	404a6c <_malloc_r+0x40>
  404a64:	600b      	str	r3, [r1, #0]
  404a66:	18cc      	adds	r4, r1, r3
  404a68:	50cd      	str	r5, [r1, r3]
  404a6a:	e01e      	b.n	404aaa <_malloc_r+0x7e>
  404a6c:	428c      	cmp	r4, r1
  404a6e:	bf0d      	iteet	eq
  404a70:	6863      	ldreq	r3, [r4, #4]
  404a72:	684b      	ldrne	r3, [r1, #4]
  404a74:	6063      	strne	r3, [r4, #4]
  404a76:	6013      	streq	r3, [r2, #0]
  404a78:	bf18      	it	ne
  404a7a:	460c      	movne	r4, r1
  404a7c:	e015      	b.n	404aaa <_malloc_r+0x7e>
  404a7e:	460c      	mov	r4, r1
  404a80:	6849      	ldr	r1, [r1, #4]
  404a82:	e7e9      	b.n	404a58 <_malloc_r+0x2c>
  404a84:	4c17      	ldr	r4, [pc, #92]	; (404ae4 <_malloc_r+0xb8>)
  404a86:	6823      	ldr	r3, [r4, #0]
  404a88:	b91b      	cbnz	r3, 404a92 <_malloc_r+0x66>
  404a8a:	4630      	mov	r0, r6
  404a8c:	f000 f970 	bl	404d70 <_sbrk_r>
  404a90:	6020      	str	r0, [r4, #0]
  404a92:	4629      	mov	r1, r5
  404a94:	4630      	mov	r0, r6
  404a96:	f000 f96b 	bl	404d70 <_sbrk_r>
  404a9a:	1c43      	adds	r3, r0, #1
  404a9c:	d018      	beq.n	404ad0 <_malloc_r+0xa4>
  404a9e:	1cc4      	adds	r4, r0, #3
  404aa0:	f024 0403 	bic.w	r4, r4, #3
  404aa4:	42a0      	cmp	r0, r4
  404aa6:	d10d      	bne.n	404ac4 <_malloc_r+0x98>
  404aa8:	6025      	str	r5, [r4, #0]
  404aaa:	4630      	mov	r0, r6
  404aac:	f000 fa1d 	bl	404eea <__malloc_unlock>
  404ab0:	f104 000b 	add.w	r0, r4, #11
  404ab4:	1d23      	adds	r3, r4, #4
  404ab6:	f020 0007 	bic.w	r0, r0, #7
  404aba:	1ac3      	subs	r3, r0, r3
  404abc:	d00e      	beq.n	404adc <_malloc_r+0xb0>
  404abe:	425a      	negs	r2, r3
  404ac0:	50e2      	str	r2, [r4, r3]
  404ac2:	bd70      	pop	{r4, r5, r6, pc}
  404ac4:	1a21      	subs	r1, r4, r0
  404ac6:	4630      	mov	r0, r6
  404ac8:	f000 f952 	bl	404d70 <_sbrk_r>
  404acc:	3001      	adds	r0, #1
  404ace:	d1eb      	bne.n	404aa8 <_malloc_r+0x7c>
  404ad0:	230c      	movs	r3, #12
  404ad2:	6033      	str	r3, [r6, #0]
  404ad4:	4630      	mov	r0, r6
  404ad6:	f000 fa08 	bl	404eea <__malloc_unlock>
  404ada:	2000      	movs	r0, #0
  404adc:	bd70      	pop	{r4, r5, r6, pc}
  404ade:	bf00      	nop
  404ae0:	200002ec 	.word	0x200002ec
  404ae4:	200002e8 	.word	0x200002e8

00404ae8 <__sfputc_r>:
  404ae8:	6893      	ldr	r3, [r2, #8]
  404aea:	3b01      	subs	r3, #1
  404aec:	2b00      	cmp	r3, #0
  404aee:	b410      	push	{r4}
  404af0:	6093      	str	r3, [r2, #8]
  404af2:	da08      	bge.n	404b06 <__sfputc_r+0x1e>
  404af4:	6994      	ldr	r4, [r2, #24]
  404af6:	42a3      	cmp	r3, r4
  404af8:	db02      	blt.n	404b00 <__sfputc_r+0x18>
  404afa:	b2cb      	uxtb	r3, r1
  404afc:	2b0a      	cmp	r3, #10
  404afe:	d102      	bne.n	404b06 <__sfputc_r+0x1e>
  404b00:	bc10      	pop	{r4}
  404b02:	f7fe bb1d 	b.w	403140 <__swbuf_r>
  404b06:	6813      	ldr	r3, [r2, #0]
  404b08:	1c58      	adds	r0, r3, #1
  404b0a:	6010      	str	r0, [r2, #0]
  404b0c:	7019      	strb	r1, [r3, #0]
  404b0e:	b2c8      	uxtb	r0, r1
  404b10:	bc10      	pop	{r4}
  404b12:	4770      	bx	lr

00404b14 <__sfputs_r>:
  404b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404b16:	4606      	mov	r6, r0
  404b18:	460f      	mov	r7, r1
  404b1a:	4614      	mov	r4, r2
  404b1c:	18d5      	adds	r5, r2, r3
  404b1e:	42ac      	cmp	r4, r5
  404b20:	d008      	beq.n	404b34 <__sfputs_r+0x20>
  404b22:	463a      	mov	r2, r7
  404b24:	f814 1b01 	ldrb.w	r1, [r4], #1
  404b28:	4630      	mov	r0, r6
  404b2a:	f7ff ffdd 	bl	404ae8 <__sfputc_r>
  404b2e:	1c43      	adds	r3, r0, #1
  404b30:	d1f5      	bne.n	404b1e <__sfputs_r+0xa>
  404b32:	e000      	b.n	404b36 <__sfputs_r+0x22>
  404b34:	2000      	movs	r0, #0
  404b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404b38 <_vfiprintf_r>:
  404b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b3c:	b09d      	sub	sp, #116	; 0x74
  404b3e:	460c      	mov	r4, r1
  404b40:	4617      	mov	r7, r2
  404b42:	9303      	str	r3, [sp, #12]
  404b44:	4606      	mov	r6, r0
  404b46:	b118      	cbz	r0, 404b50 <_vfiprintf_r+0x18>
  404b48:	6983      	ldr	r3, [r0, #24]
  404b4a:	b90b      	cbnz	r3, 404b50 <_vfiprintf_r+0x18>
  404b4c:	f7ff fada 	bl	404104 <__sinit>
  404b50:	4b7f      	ldr	r3, [pc, #508]	; (404d50 <_vfiprintf_r+0x218>)
  404b52:	429c      	cmp	r4, r3
  404b54:	d101      	bne.n	404b5a <_vfiprintf_r+0x22>
  404b56:	6874      	ldr	r4, [r6, #4]
  404b58:	e008      	b.n	404b6c <_vfiprintf_r+0x34>
  404b5a:	4b7e      	ldr	r3, [pc, #504]	; (404d54 <_vfiprintf_r+0x21c>)
  404b5c:	429c      	cmp	r4, r3
  404b5e:	d101      	bne.n	404b64 <_vfiprintf_r+0x2c>
  404b60:	68b4      	ldr	r4, [r6, #8]
  404b62:	e003      	b.n	404b6c <_vfiprintf_r+0x34>
  404b64:	4b7c      	ldr	r3, [pc, #496]	; (404d58 <_vfiprintf_r+0x220>)
  404b66:	429c      	cmp	r4, r3
  404b68:	bf08      	it	eq
  404b6a:	68f4      	ldreq	r4, [r6, #12]
  404b6c:	89a3      	ldrh	r3, [r4, #12]
  404b6e:	0718      	lsls	r0, r3, #28
  404b70:	d50c      	bpl.n	404b8c <_vfiprintf_r+0x54>
  404b72:	6923      	ldr	r3, [r4, #16]
  404b74:	b153      	cbz	r3, 404b8c <_vfiprintf_r+0x54>
  404b76:	2300      	movs	r3, #0
  404b78:	9309      	str	r3, [sp, #36]	; 0x24
  404b7a:	2320      	movs	r3, #32
  404b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404b80:	2330      	movs	r3, #48	; 0x30
  404b82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404b86:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 404d5c <_vfiprintf_r+0x224>
  404b8a:	e044      	b.n	404c16 <_vfiprintf_r+0xde>
  404b8c:	4621      	mov	r1, r4
  404b8e:	4630      	mov	r0, r6
  404b90:	f7fe fb2a 	bl	4031e8 <__swsetup_r>
  404b94:	2800      	cmp	r0, #0
  404b96:	d0ee      	beq.n	404b76 <_vfiprintf_r+0x3e>
  404b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404b9c:	e0d5      	b.n	404d4a <_vfiprintf_r+0x212>
  404b9e:	9a03      	ldr	r2, [sp, #12]
  404ba0:	1d11      	adds	r1, r2, #4
  404ba2:	6812      	ldr	r2, [r2, #0]
  404ba4:	9103      	str	r1, [sp, #12]
  404ba6:	2a00      	cmp	r2, #0
  404ba8:	f280 808c 	bge.w	404cc4 <_vfiprintf_r+0x18c>
  404bac:	4252      	negs	r2, r2
  404bae:	f043 0002 	orr.w	r0, r3, #2
  404bb2:	9207      	str	r2, [sp, #28]
  404bb4:	9004      	str	r0, [sp, #16]
  404bb6:	f898 3000 	ldrb.w	r3, [r8]
  404bba:	2b2e      	cmp	r3, #46	; 0x2e
  404bbc:	f000 8084 	beq.w	404cc8 <_vfiprintf_r+0x190>
  404bc0:	2203      	movs	r2, #3
  404bc2:	f898 1000 	ldrb.w	r1, [r8]
  404bc6:	4865      	ldr	r0, [pc, #404]	; (404d5c <_vfiprintf_r+0x224>)
  404bc8:	f7ff fba2 	bl	404310 <memchr>
  404bcc:	b148      	cbz	r0, 404be2 <_vfiprintf_r+0xaa>
  404bce:	2340      	movs	r3, #64	; 0x40
  404bd0:	ebcb 0000 	rsb	r0, fp, r0
  404bd4:	fa03 f000 	lsl.w	r0, r3, r0
  404bd8:	9b04      	ldr	r3, [sp, #16]
  404bda:	4318      	orrs	r0, r3
  404bdc:	9004      	str	r0, [sp, #16]
  404bde:	f108 0801 	add.w	r8, r8, #1
  404be2:	f898 1000 	ldrb.w	r1, [r8]
  404be6:	485e      	ldr	r0, [pc, #376]	; (404d60 <_vfiprintf_r+0x228>)
  404be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  404bec:	2206      	movs	r2, #6
  404bee:	f108 0701 	add.w	r7, r8, #1
  404bf2:	f7ff fb8d 	bl	404310 <memchr>
  404bf6:	2800      	cmp	r0, #0
  404bf8:	f000 8095 	beq.w	404d26 <_vfiprintf_r+0x1ee>
  404bfc:	4b59      	ldr	r3, [pc, #356]	; (404d64 <_vfiprintf_r+0x22c>)
  404bfe:	2b00      	cmp	r3, #0
  404c00:	f040 8088 	bne.w	404d14 <_vfiprintf_r+0x1dc>
  404c04:	9b03      	ldr	r3, [sp, #12]
  404c06:	3307      	adds	r3, #7
  404c08:	f023 0307 	bic.w	r3, r3, #7
  404c0c:	3308      	adds	r3, #8
  404c0e:	9303      	str	r3, [sp, #12]
  404c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c12:	4453      	add	r3, sl
  404c14:	9309      	str	r3, [sp, #36]	; 0x24
  404c16:	46b8      	mov	r8, r7
  404c18:	4645      	mov	r5, r8
  404c1a:	f815 3b01 	ldrb.w	r3, [r5], #1
  404c1e:	b91b      	cbnz	r3, 404c28 <_vfiprintf_r+0xf0>
  404c20:	ebb8 0907 	subs.w	r9, r8, r7
  404c24:	d00f      	beq.n	404c46 <_vfiprintf_r+0x10e>
  404c26:	e003      	b.n	404c30 <_vfiprintf_r+0xf8>
  404c28:	2b25      	cmp	r3, #37	; 0x25
  404c2a:	d0f9      	beq.n	404c20 <_vfiprintf_r+0xe8>
  404c2c:	46a8      	mov	r8, r5
  404c2e:	e7f3      	b.n	404c18 <_vfiprintf_r+0xe0>
  404c30:	464b      	mov	r3, r9
  404c32:	463a      	mov	r2, r7
  404c34:	4621      	mov	r1, r4
  404c36:	4630      	mov	r0, r6
  404c38:	f7ff ff6c 	bl	404b14 <__sfputs_r>
  404c3c:	3001      	adds	r0, #1
  404c3e:	d07f      	beq.n	404d40 <_vfiprintf_r+0x208>
  404c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c42:	444b      	add	r3, r9
  404c44:	9309      	str	r3, [sp, #36]	; 0x24
  404c46:	f898 3000 	ldrb.w	r3, [r8]
  404c4a:	2b00      	cmp	r3, #0
  404c4c:	d078      	beq.n	404d40 <_vfiprintf_r+0x208>
  404c4e:	2300      	movs	r3, #0
  404c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  404c54:	9304      	str	r3, [sp, #16]
  404c56:	9307      	str	r3, [sp, #28]
  404c58:	9205      	str	r2, [sp, #20]
  404c5a:	9306      	str	r3, [sp, #24]
  404c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404c60:	931a      	str	r3, [sp, #104]	; 0x68
  404c62:	2701      	movs	r7, #1
  404c64:	2205      	movs	r2, #5
  404c66:	7829      	ldrb	r1, [r5, #0]
  404c68:	483f      	ldr	r0, [pc, #252]	; (404d68 <_vfiprintf_r+0x230>)
  404c6a:	f7ff fb51 	bl	404310 <memchr>
  404c6e:	f105 0801 	add.w	r8, r5, #1
  404c72:	9b04      	ldr	r3, [sp, #16]
  404c74:	b138      	cbz	r0, 404c86 <_vfiprintf_r+0x14e>
  404c76:	4a3c      	ldr	r2, [pc, #240]	; (404d68 <_vfiprintf_r+0x230>)
  404c78:	1a80      	subs	r0, r0, r2
  404c7a:	fa07 f000 	lsl.w	r0, r7, r0
  404c7e:	4318      	orrs	r0, r3
  404c80:	9004      	str	r0, [sp, #16]
  404c82:	4645      	mov	r5, r8
  404c84:	e7ee      	b.n	404c64 <_vfiprintf_r+0x12c>
  404c86:	06d9      	lsls	r1, r3, #27
  404c88:	bf44      	itt	mi
  404c8a:	2220      	movmi	r2, #32
  404c8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404c90:	071a      	lsls	r2, r3, #28
  404c92:	bf44      	itt	mi
  404c94:	222b      	movmi	r2, #43	; 0x2b
  404c96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404c9a:	782a      	ldrb	r2, [r5, #0]
  404c9c:	2a2a      	cmp	r2, #42	; 0x2a
  404c9e:	f43f af7e 	beq.w	404b9e <_vfiprintf_r+0x66>
  404ca2:	9a07      	ldr	r2, [sp, #28]
  404ca4:	2100      	movs	r1, #0
  404ca6:	200a      	movs	r0, #10
  404ca8:	46a8      	mov	r8, r5
  404caa:	3501      	adds	r5, #1
  404cac:	f898 3000 	ldrb.w	r3, [r8]
  404cb0:	3b30      	subs	r3, #48	; 0x30
  404cb2:	2b09      	cmp	r3, #9
  404cb4:	d803      	bhi.n	404cbe <_vfiprintf_r+0x186>
  404cb6:	fb00 3202 	mla	r2, r0, r2, r3
  404cba:	2101      	movs	r1, #1
  404cbc:	e7f4      	b.n	404ca8 <_vfiprintf_r+0x170>
  404cbe:	2900      	cmp	r1, #0
  404cc0:	f43f af79 	beq.w	404bb6 <_vfiprintf_r+0x7e>
  404cc4:	9207      	str	r2, [sp, #28]
  404cc6:	e776      	b.n	404bb6 <_vfiprintf_r+0x7e>
  404cc8:	f898 3001 	ldrb.w	r3, [r8, #1]
  404ccc:	2b2a      	cmp	r3, #42	; 0x2a
  404cce:	d10b      	bne.n	404ce8 <_vfiprintf_r+0x1b0>
  404cd0:	9b03      	ldr	r3, [sp, #12]
  404cd2:	1d1a      	adds	r2, r3, #4
  404cd4:	681b      	ldr	r3, [r3, #0]
  404cd6:	9203      	str	r2, [sp, #12]
  404cd8:	2b00      	cmp	r3, #0
  404cda:	bfb8      	it	lt
  404cdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  404ce0:	f108 0802 	add.w	r8, r8, #2
  404ce4:	9305      	str	r3, [sp, #20]
  404ce6:	e76b      	b.n	404bc0 <_vfiprintf_r+0x88>
  404ce8:	2300      	movs	r3, #0
  404cea:	9305      	str	r3, [sp, #20]
  404cec:	f108 0001 	add.w	r0, r8, #1
  404cf0:	4619      	mov	r1, r3
  404cf2:	250a      	movs	r5, #10
  404cf4:	4680      	mov	r8, r0
  404cf6:	3001      	adds	r0, #1
  404cf8:	f898 2000 	ldrb.w	r2, [r8]
  404cfc:	3a30      	subs	r2, #48	; 0x30
  404cfe:	2a09      	cmp	r2, #9
  404d00:	d803      	bhi.n	404d0a <_vfiprintf_r+0x1d2>
  404d02:	fb05 2101 	mla	r1, r5, r1, r2
  404d06:	2301      	movs	r3, #1
  404d08:	e7f4      	b.n	404cf4 <_vfiprintf_r+0x1bc>
  404d0a:	2b00      	cmp	r3, #0
  404d0c:	f43f af58 	beq.w	404bc0 <_vfiprintf_r+0x88>
  404d10:	9105      	str	r1, [sp, #20]
  404d12:	e755      	b.n	404bc0 <_vfiprintf_r+0x88>
  404d14:	ab03      	add	r3, sp, #12
  404d16:	9300      	str	r3, [sp, #0]
  404d18:	4622      	mov	r2, r4
  404d1a:	4b14      	ldr	r3, [pc, #80]	; (404d6c <_vfiprintf_r+0x234>)
  404d1c:	a904      	add	r1, sp, #16
  404d1e:	4630      	mov	r0, r6
  404d20:	f7fd fcfa 	bl	402718 <_printf_float>
  404d24:	e007      	b.n	404d36 <_vfiprintf_r+0x1fe>
  404d26:	ab03      	add	r3, sp, #12
  404d28:	9300      	str	r3, [sp, #0]
  404d2a:	4622      	mov	r2, r4
  404d2c:	4b0f      	ldr	r3, [pc, #60]	; (404d6c <_vfiprintf_r+0x234>)
  404d2e:	a904      	add	r1, sp, #16
  404d30:	4630      	mov	r0, r6
  404d32:	f7fd ffab 	bl	402c8c <_printf_i>
  404d36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  404d3a:	4682      	mov	sl, r0
  404d3c:	f47f af68 	bne.w	404c10 <_vfiprintf_r+0xd8>
  404d40:	89a3      	ldrh	r3, [r4, #12]
  404d42:	065b      	lsls	r3, r3, #25
  404d44:	f53f af28 	bmi.w	404b98 <_vfiprintf_r+0x60>
  404d48:	9809      	ldr	r0, [sp, #36]	; 0x24
  404d4a:	b01d      	add	sp, #116	; 0x74
  404d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d50:	004061d8 	.word	0x004061d8
  404d54:	004061f8 	.word	0x004061f8
  404d58:	00406218 	.word	0x00406218
  404d5c:	0040633a 	.word	0x0040633a
  404d60:	0040633e 	.word	0x0040633e
  404d64:	00402719 	.word	0x00402719
  404d68:	00406334 	.word	0x00406334
  404d6c:	00404b15 	.word	0x00404b15

00404d70 <_sbrk_r>:
  404d70:	b538      	push	{r3, r4, r5, lr}
  404d72:	4c06      	ldr	r4, [pc, #24]	; (404d8c <_sbrk_r+0x1c>)
  404d74:	2300      	movs	r3, #0
  404d76:	4605      	mov	r5, r0
  404d78:	4608      	mov	r0, r1
  404d7a:	6023      	str	r3, [r4, #0]
  404d7c:	f7fd f850 	bl	401e20 <_sbrk>
  404d80:	1c43      	adds	r3, r0, #1
  404d82:	d102      	bne.n	404d8a <_sbrk_r+0x1a>
  404d84:	6823      	ldr	r3, [r4, #0]
  404d86:	b103      	cbz	r3, 404d8a <_sbrk_r+0x1a>
  404d88:	602b      	str	r3, [r5, #0]
  404d8a:	bd38      	pop	{r3, r4, r5, pc}
  404d8c:	200003c8 	.word	0x200003c8

00404d90 <__sread>:
  404d90:	b510      	push	{r4, lr}
  404d92:	460c      	mov	r4, r1
  404d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d98:	f000 f8a8 	bl	404eec <_read_r>
  404d9c:	2800      	cmp	r0, #0
  404d9e:	bfab      	itete	ge
  404da0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  404da2:	89a3      	ldrhlt	r3, [r4, #12]
  404da4:	181b      	addge	r3, r3, r0
  404da6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  404daa:	bfac      	ite	ge
  404dac:	6563      	strge	r3, [r4, #84]	; 0x54
  404dae:	81a3      	strhlt	r3, [r4, #12]
  404db0:	bd10      	pop	{r4, pc}

00404db2 <__swrite>:
  404db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404db6:	461f      	mov	r7, r3
  404db8:	898b      	ldrh	r3, [r1, #12]
  404dba:	05db      	lsls	r3, r3, #23
  404dbc:	4605      	mov	r5, r0
  404dbe:	460c      	mov	r4, r1
  404dc0:	4616      	mov	r6, r2
  404dc2:	d505      	bpl.n	404dd0 <__swrite+0x1e>
  404dc4:	2302      	movs	r3, #2
  404dc6:	2200      	movs	r2, #0
  404dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404dcc:	f000 f868 	bl	404ea0 <_lseek_r>
  404dd0:	89a3      	ldrh	r3, [r4, #12]
  404dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404dda:	81a3      	strh	r3, [r4, #12]
  404ddc:	4632      	mov	r2, r6
  404dde:	463b      	mov	r3, r7
  404de0:	4628      	mov	r0, r5
  404de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404de6:	f000 b817 	b.w	404e18 <_write_r>

00404dea <__sseek>:
  404dea:	b510      	push	{r4, lr}
  404dec:	460c      	mov	r4, r1
  404dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404df2:	f000 f855 	bl	404ea0 <_lseek_r>
  404df6:	1c43      	adds	r3, r0, #1
  404df8:	89a3      	ldrh	r3, [r4, #12]
  404dfa:	bf15      	itete	ne
  404dfc:	6560      	strne	r0, [r4, #84]	; 0x54
  404dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404e06:	81a3      	strheq	r3, [r4, #12]
  404e08:	bf18      	it	ne
  404e0a:	81a3      	strhne	r3, [r4, #12]
  404e0c:	bd10      	pop	{r4, pc}

00404e0e <__sclose>:
  404e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404e12:	f000 b813 	b.w	404e3c <_close_r>
	...

00404e18 <_write_r>:
  404e18:	b538      	push	{r3, r4, r5, lr}
  404e1a:	4c07      	ldr	r4, [pc, #28]	; (404e38 <_write_r+0x20>)
  404e1c:	4605      	mov	r5, r0
  404e1e:	4608      	mov	r0, r1
  404e20:	4611      	mov	r1, r2
  404e22:	2200      	movs	r2, #0
  404e24:	6022      	str	r2, [r4, #0]
  404e26:	461a      	mov	r2, r3
  404e28:	f7fb f9c0 	bl	4001ac <_write>
  404e2c:	1c43      	adds	r3, r0, #1
  404e2e:	d102      	bne.n	404e36 <_write_r+0x1e>
  404e30:	6823      	ldr	r3, [r4, #0]
  404e32:	b103      	cbz	r3, 404e36 <_write_r+0x1e>
  404e34:	602b      	str	r3, [r5, #0]
  404e36:	bd38      	pop	{r3, r4, r5, pc}
  404e38:	200003c8 	.word	0x200003c8

00404e3c <_close_r>:
  404e3c:	b538      	push	{r3, r4, r5, lr}
  404e3e:	4c06      	ldr	r4, [pc, #24]	; (404e58 <_close_r+0x1c>)
  404e40:	2300      	movs	r3, #0
  404e42:	4605      	mov	r5, r0
  404e44:	4608      	mov	r0, r1
  404e46:	6023      	str	r3, [r4, #0]
  404e48:	f7fd f804 	bl	401e54 <_close>
  404e4c:	1c43      	adds	r3, r0, #1
  404e4e:	d102      	bne.n	404e56 <_close_r+0x1a>
  404e50:	6823      	ldr	r3, [r4, #0]
  404e52:	b103      	cbz	r3, 404e56 <_close_r+0x1a>
  404e54:	602b      	str	r3, [r5, #0]
  404e56:	bd38      	pop	{r3, r4, r5, pc}
  404e58:	200003c8 	.word	0x200003c8

00404e5c <_fstat_r>:
  404e5c:	b538      	push	{r3, r4, r5, lr}
  404e5e:	4c07      	ldr	r4, [pc, #28]	; (404e7c <_fstat_r+0x20>)
  404e60:	2300      	movs	r3, #0
  404e62:	4605      	mov	r5, r0
  404e64:	4608      	mov	r0, r1
  404e66:	4611      	mov	r1, r2
  404e68:	6023      	str	r3, [r4, #0]
  404e6a:	f7fc fff7 	bl	401e5c <_fstat>
  404e6e:	1c43      	adds	r3, r0, #1
  404e70:	d102      	bne.n	404e78 <_fstat_r+0x1c>
  404e72:	6823      	ldr	r3, [r4, #0]
  404e74:	b103      	cbz	r3, 404e78 <_fstat_r+0x1c>
  404e76:	602b      	str	r3, [r5, #0]
  404e78:	bd38      	pop	{r3, r4, r5, pc}
  404e7a:	bf00      	nop
  404e7c:	200003c8 	.word	0x200003c8

00404e80 <_isatty_r>:
  404e80:	b538      	push	{r3, r4, r5, lr}
  404e82:	4c06      	ldr	r4, [pc, #24]	; (404e9c <_isatty_r+0x1c>)
  404e84:	2300      	movs	r3, #0
  404e86:	4605      	mov	r5, r0
  404e88:	4608      	mov	r0, r1
  404e8a:	6023      	str	r3, [r4, #0]
  404e8c:	f7fc ffec 	bl	401e68 <_isatty>
  404e90:	1c43      	adds	r3, r0, #1
  404e92:	d102      	bne.n	404e9a <_isatty_r+0x1a>
  404e94:	6823      	ldr	r3, [r4, #0]
  404e96:	b103      	cbz	r3, 404e9a <_isatty_r+0x1a>
  404e98:	602b      	str	r3, [r5, #0]
  404e9a:	bd38      	pop	{r3, r4, r5, pc}
  404e9c:	200003c8 	.word	0x200003c8

00404ea0 <_lseek_r>:
  404ea0:	b538      	push	{r3, r4, r5, lr}
  404ea2:	4c07      	ldr	r4, [pc, #28]	; (404ec0 <_lseek_r+0x20>)
  404ea4:	4605      	mov	r5, r0
  404ea6:	4608      	mov	r0, r1
  404ea8:	4611      	mov	r1, r2
  404eaa:	2200      	movs	r2, #0
  404eac:	6022      	str	r2, [r4, #0]
  404eae:	461a      	mov	r2, r3
  404eb0:	f7fc ffdc 	bl	401e6c <_lseek>
  404eb4:	1c43      	adds	r3, r0, #1
  404eb6:	d102      	bne.n	404ebe <_lseek_r+0x1e>
  404eb8:	6823      	ldr	r3, [r4, #0]
  404eba:	b103      	cbz	r3, 404ebe <_lseek_r+0x1e>
  404ebc:	602b      	str	r3, [r5, #0]
  404ebe:	bd38      	pop	{r3, r4, r5, pc}
  404ec0:	200003c8 	.word	0x200003c8

00404ec4 <__ascii_mbtowc>:
  404ec4:	b082      	sub	sp, #8
  404ec6:	b901      	cbnz	r1, 404eca <__ascii_mbtowc+0x6>
  404ec8:	a901      	add	r1, sp, #4
  404eca:	b13a      	cbz	r2, 404edc <__ascii_mbtowc+0x18>
  404ecc:	b143      	cbz	r3, 404ee0 <__ascii_mbtowc+0x1c>
  404ece:	7813      	ldrb	r3, [r2, #0]
  404ed0:	600b      	str	r3, [r1, #0]
  404ed2:	7812      	ldrb	r2, [r2, #0]
  404ed4:	1c10      	adds	r0, r2, #0
  404ed6:	bf18      	it	ne
  404ed8:	2001      	movne	r0, #1
  404eda:	e003      	b.n	404ee4 <__ascii_mbtowc+0x20>
  404edc:	4610      	mov	r0, r2
  404ede:	e001      	b.n	404ee4 <__ascii_mbtowc+0x20>
  404ee0:	f06f 0001 	mvn.w	r0, #1
  404ee4:	b002      	add	sp, #8
  404ee6:	4770      	bx	lr

00404ee8 <__malloc_lock>:
  404ee8:	4770      	bx	lr

00404eea <__malloc_unlock>:
  404eea:	4770      	bx	lr

00404eec <_read_r>:
  404eec:	b538      	push	{r3, r4, r5, lr}
  404eee:	4c07      	ldr	r4, [pc, #28]	; (404f0c <_read_r+0x20>)
  404ef0:	4605      	mov	r5, r0
  404ef2:	4608      	mov	r0, r1
  404ef4:	4611      	mov	r1, r2
  404ef6:	2200      	movs	r2, #0
  404ef8:	6022      	str	r2, [r4, #0]
  404efa:	461a      	mov	r2, r3
  404efc:	f7fb f938 	bl	400170 <_read>
  404f00:	1c43      	adds	r3, r0, #1
  404f02:	d102      	bne.n	404f0a <_read_r+0x1e>
  404f04:	6823      	ldr	r3, [r4, #0]
  404f06:	b103      	cbz	r3, 404f0a <_read_r+0x1e>
  404f08:	602b      	str	r3, [r5, #0]
  404f0a:	bd38      	pop	{r3, r4, r5, pc}
  404f0c:	200003c8 	.word	0x200003c8

00404f10 <__ascii_wctomb>:
  404f10:	b149      	cbz	r1, 404f26 <__ascii_wctomb+0x16>
  404f12:	2aff      	cmp	r2, #255	; 0xff
  404f14:	bf85      	ittet	hi
  404f16:	238a      	movhi	r3, #138	; 0x8a
  404f18:	6003      	strhi	r3, [r0, #0]
  404f1a:	700a      	strbls	r2, [r1, #0]
  404f1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  404f20:	bf98      	it	ls
  404f22:	2001      	movls	r0, #1
  404f24:	4770      	bx	lr
  404f26:	4608      	mov	r0, r1
  404f28:	4770      	bx	lr
	...

00404f2c <__aeabi_drsub>:
  404f2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404f30:	e002      	b.n	404f38 <__adddf3>
  404f32:	bf00      	nop

00404f34 <__aeabi_dsub>:
  404f34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00404f38 <__adddf3>:
  404f38:	b530      	push	{r4, r5, lr}
  404f3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  404f3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  404f42:	ea94 0f05 	teq	r4, r5
  404f46:	bf08      	it	eq
  404f48:	ea90 0f02 	teqeq	r0, r2
  404f4c:	bf1f      	itttt	ne
  404f4e:	ea54 0c00 	orrsne.w	ip, r4, r0
  404f52:	ea55 0c02 	orrsne.w	ip, r5, r2
  404f56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404f5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404f5e:	f000 80e2 	beq.w	405126 <__adddf3+0x1ee>
  404f62:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404f66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404f6a:	bfb8      	it	lt
  404f6c:	426d      	neglt	r5, r5
  404f6e:	dd0c      	ble.n	404f8a <__adddf3+0x52>
  404f70:	442c      	add	r4, r5
  404f72:	ea80 0202 	eor.w	r2, r0, r2
  404f76:	ea81 0303 	eor.w	r3, r1, r3
  404f7a:	ea82 0000 	eor.w	r0, r2, r0
  404f7e:	ea83 0101 	eor.w	r1, r3, r1
  404f82:	ea80 0202 	eor.w	r2, r0, r2
  404f86:	ea81 0303 	eor.w	r3, r1, r3
  404f8a:	2d36      	cmp	r5, #54	; 0x36
  404f8c:	bf88      	it	hi
  404f8e:	bd30      	pophi	{r4, r5, pc}
  404f90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404f94:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404f98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404f9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404fa0:	d002      	beq.n	404fa8 <__adddf3+0x70>
  404fa2:	4240      	negs	r0, r0
  404fa4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404fa8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404fac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404fb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404fb4:	d002      	beq.n	404fbc <__adddf3+0x84>
  404fb6:	4252      	negs	r2, r2
  404fb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404fbc:	ea94 0f05 	teq	r4, r5
  404fc0:	f000 80a7 	beq.w	405112 <__adddf3+0x1da>
  404fc4:	f1a4 0401 	sub.w	r4, r4, #1
  404fc8:	f1d5 0e20 	rsbs	lr, r5, #32
  404fcc:	db0d      	blt.n	404fea <__adddf3+0xb2>
  404fce:	fa02 fc0e 	lsl.w	ip, r2, lr
  404fd2:	fa22 f205 	lsr.w	r2, r2, r5
  404fd6:	1880      	adds	r0, r0, r2
  404fd8:	f141 0100 	adc.w	r1, r1, #0
  404fdc:	fa03 f20e 	lsl.w	r2, r3, lr
  404fe0:	1880      	adds	r0, r0, r2
  404fe2:	fa43 f305 	asr.w	r3, r3, r5
  404fe6:	4159      	adcs	r1, r3
  404fe8:	e00e      	b.n	405008 <__adddf3+0xd0>
  404fea:	f1a5 0520 	sub.w	r5, r5, #32
  404fee:	f10e 0e20 	add.w	lr, lr, #32
  404ff2:	2a01      	cmp	r2, #1
  404ff4:	fa03 fc0e 	lsl.w	ip, r3, lr
  404ff8:	bf28      	it	cs
  404ffa:	f04c 0c02 	orrcs.w	ip, ip, #2
  404ffe:	fa43 f305 	asr.w	r3, r3, r5
  405002:	18c0      	adds	r0, r0, r3
  405004:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405008:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40500c:	d507      	bpl.n	40501e <__adddf3+0xe6>
  40500e:	f04f 0e00 	mov.w	lr, #0
  405012:	f1dc 0c00 	rsbs	ip, ip, #0
  405016:	eb7e 0000 	sbcs.w	r0, lr, r0
  40501a:	eb6e 0101 	sbc.w	r1, lr, r1
  40501e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405022:	d31b      	bcc.n	40505c <__adddf3+0x124>
  405024:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405028:	d30c      	bcc.n	405044 <__adddf3+0x10c>
  40502a:	0849      	lsrs	r1, r1, #1
  40502c:	ea5f 0030 	movs.w	r0, r0, rrx
  405030:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405034:	f104 0401 	add.w	r4, r4, #1
  405038:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40503c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405040:	f080 809a 	bcs.w	405178 <__adddf3+0x240>
  405044:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405048:	bf08      	it	eq
  40504a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40504e:	f150 0000 	adcs.w	r0, r0, #0
  405052:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405056:	ea41 0105 	orr.w	r1, r1, r5
  40505a:	bd30      	pop	{r4, r5, pc}
  40505c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405060:	4140      	adcs	r0, r0
  405062:	eb41 0101 	adc.w	r1, r1, r1
  405066:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40506a:	f1a4 0401 	sub.w	r4, r4, #1
  40506e:	d1e9      	bne.n	405044 <__adddf3+0x10c>
  405070:	f091 0f00 	teq	r1, #0
  405074:	bf04      	itt	eq
  405076:	4601      	moveq	r1, r0
  405078:	2000      	moveq	r0, #0
  40507a:	fab1 f381 	clz	r3, r1
  40507e:	bf08      	it	eq
  405080:	3320      	addeq	r3, #32
  405082:	f1a3 030b 	sub.w	r3, r3, #11
  405086:	f1b3 0220 	subs.w	r2, r3, #32
  40508a:	da0c      	bge.n	4050a6 <__adddf3+0x16e>
  40508c:	320c      	adds	r2, #12
  40508e:	dd08      	ble.n	4050a2 <__adddf3+0x16a>
  405090:	f102 0c14 	add.w	ip, r2, #20
  405094:	f1c2 020c 	rsb	r2, r2, #12
  405098:	fa01 f00c 	lsl.w	r0, r1, ip
  40509c:	fa21 f102 	lsr.w	r1, r1, r2
  4050a0:	e00c      	b.n	4050bc <__adddf3+0x184>
  4050a2:	f102 0214 	add.w	r2, r2, #20
  4050a6:	bfd8      	it	le
  4050a8:	f1c2 0c20 	rsble	ip, r2, #32
  4050ac:	fa01 f102 	lsl.w	r1, r1, r2
  4050b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4050b4:	bfdc      	itt	le
  4050b6:	ea41 010c 	orrle.w	r1, r1, ip
  4050ba:	4090      	lslle	r0, r2
  4050bc:	1ae4      	subs	r4, r4, r3
  4050be:	bfa2      	ittt	ge
  4050c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4050c4:	4329      	orrge	r1, r5
  4050c6:	bd30      	popge	{r4, r5, pc}
  4050c8:	ea6f 0404 	mvn.w	r4, r4
  4050cc:	3c1f      	subs	r4, #31
  4050ce:	da1c      	bge.n	40510a <__adddf3+0x1d2>
  4050d0:	340c      	adds	r4, #12
  4050d2:	dc0e      	bgt.n	4050f2 <__adddf3+0x1ba>
  4050d4:	f104 0414 	add.w	r4, r4, #20
  4050d8:	f1c4 0220 	rsb	r2, r4, #32
  4050dc:	fa20 f004 	lsr.w	r0, r0, r4
  4050e0:	fa01 f302 	lsl.w	r3, r1, r2
  4050e4:	ea40 0003 	orr.w	r0, r0, r3
  4050e8:	fa21 f304 	lsr.w	r3, r1, r4
  4050ec:	ea45 0103 	orr.w	r1, r5, r3
  4050f0:	bd30      	pop	{r4, r5, pc}
  4050f2:	f1c4 040c 	rsb	r4, r4, #12
  4050f6:	f1c4 0220 	rsb	r2, r4, #32
  4050fa:	fa20 f002 	lsr.w	r0, r0, r2
  4050fe:	fa01 f304 	lsl.w	r3, r1, r4
  405102:	ea40 0003 	orr.w	r0, r0, r3
  405106:	4629      	mov	r1, r5
  405108:	bd30      	pop	{r4, r5, pc}
  40510a:	fa21 f004 	lsr.w	r0, r1, r4
  40510e:	4629      	mov	r1, r5
  405110:	bd30      	pop	{r4, r5, pc}
  405112:	f094 0f00 	teq	r4, #0
  405116:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40511a:	bf06      	itte	eq
  40511c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405120:	3401      	addeq	r4, #1
  405122:	3d01      	subne	r5, #1
  405124:	e74e      	b.n	404fc4 <__adddf3+0x8c>
  405126:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40512a:	bf18      	it	ne
  40512c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405130:	d029      	beq.n	405186 <__adddf3+0x24e>
  405132:	ea94 0f05 	teq	r4, r5
  405136:	bf08      	it	eq
  405138:	ea90 0f02 	teqeq	r0, r2
  40513c:	d005      	beq.n	40514a <__adddf3+0x212>
  40513e:	ea54 0c00 	orrs.w	ip, r4, r0
  405142:	bf04      	itt	eq
  405144:	4619      	moveq	r1, r3
  405146:	4610      	moveq	r0, r2
  405148:	bd30      	pop	{r4, r5, pc}
  40514a:	ea91 0f03 	teq	r1, r3
  40514e:	bf1e      	ittt	ne
  405150:	2100      	movne	r1, #0
  405152:	2000      	movne	r0, #0
  405154:	bd30      	popne	{r4, r5, pc}
  405156:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40515a:	d105      	bne.n	405168 <__adddf3+0x230>
  40515c:	0040      	lsls	r0, r0, #1
  40515e:	4149      	adcs	r1, r1
  405160:	bf28      	it	cs
  405162:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405166:	bd30      	pop	{r4, r5, pc}
  405168:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40516c:	bf3c      	itt	cc
  40516e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405172:	bd30      	popcc	{r4, r5, pc}
  405174:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405178:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40517c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405180:	f04f 0000 	mov.w	r0, #0
  405184:	bd30      	pop	{r4, r5, pc}
  405186:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40518a:	bf1a      	itte	ne
  40518c:	4619      	movne	r1, r3
  40518e:	4610      	movne	r0, r2
  405190:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405194:	bf1c      	itt	ne
  405196:	460b      	movne	r3, r1
  405198:	4602      	movne	r2, r0
  40519a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40519e:	bf06      	itte	eq
  4051a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4051a4:	ea91 0f03 	teqeq	r1, r3
  4051a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4051ac:	bd30      	pop	{r4, r5, pc}
  4051ae:	bf00      	nop

004051b0 <__aeabi_ui2d>:
  4051b0:	f090 0f00 	teq	r0, #0
  4051b4:	bf04      	itt	eq
  4051b6:	2100      	moveq	r1, #0
  4051b8:	4770      	bxeq	lr
  4051ba:	b530      	push	{r4, r5, lr}
  4051bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4051c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4051c4:	f04f 0500 	mov.w	r5, #0
  4051c8:	f04f 0100 	mov.w	r1, #0
  4051cc:	e750      	b.n	405070 <__adddf3+0x138>
  4051ce:	bf00      	nop

004051d0 <__aeabi_i2d>:
  4051d0:	f090 0f00 	teq	r0, #0
  4051d4:	bf04      	itt	eq
  4051d6:	2100      	moveq	r1, #0
  4051d8:	4770      	bxeq	lr
  4051da:	b530      	push	{r4, r5, lr}
  4051dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4051e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4051e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4051e8:	bf48      	it	mi
  4051ea:	4240      	negmi	r0, r0
  4051ec:	f04f 0100 	mov.w	r1, #0
  4051f0:	e73e      	b.n	405070 <__adddf3+0x138>
  4051f2:	bf00      	nop

004051f4 <__aeabi_f2d>:
  4051f4:	0042      	lsls	r2, r0, #1
  4051f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4051fa:	ea4f 0131 	mov.w	r1, r1, rrx
  4051fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405202:	bf1f      	itttt	ne
  405204:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405208:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40520c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405210:	4770      	bxne	lr
  405212:	f092 0f00 	teq	r2, #0
  405216:	bf14      	ite	ne
  405218:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40521c:	4770      	bxeq	lr
  40521e:	b530      	push	{r4, r5, lr}
  405220:	f44f 7460 	mov.w	r4, #896	; 0x380
  405224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405228:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40522c:	e720      	b.n	405070 <__adddf3+0x138>
  40522e:	bf00      	nop

00405230 <__aeabi_ul2d>:
  405230:	ea50 0201 	orrs.w	r2, r0, r1
  405234:	bf08      	it	eq
  405236:	4770      	bxeq	lr
  405238:	b530      	push	{r4, r5, lr}
  40523a:	f04f 0500 	mov.w	r5, #0
  40523e:	e00a      	b.n	405256 <__aeabi_l2d+0x16>

00405240 <__aeabi_l2d>:
  405240:	ea50 0201 	orrs.w	r2, r0, r1
  405244:	bf08      	it	eq
  405246:	4770      	bxeq	lr
  405248:	b530      	push	{r4, r5, lr}
  40524a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40524e:	d502      	bpl.n	405256 <__aeabi_l2d+0x16>
  405250:	4240      	negs	r0, r0
  405252:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405256:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40525a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40525e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405262:	f43f aedc 	beq.w	40501e <__adddf3+0xe6>
  405266:	f04f 0203 	mov.w	r2, #3
  40526a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40526e:	bf18      	it	ne
  405270:	3203      	addne	r2, #3
  405272:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405276:	bf18      	it	ne
  405278:	3203      	addne	r2, #3
  40527a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40527e:	f1c2 0320 	rsb	r3, r2, #32
  405282:	fa00 fc03 	lsl.w	ip, r0, r3
  405286:	fa20 f002 	lsr.w	r0, r0, r2
  40528a:	fa01 fe03 	lsl.w	lr, r1, r3
  40528e:	ea40 000e 	orr.w	r0, r0, lr
  405292:	fa21 f102 	lsr.w	r1, r1, r2
  405296:	4414      	add	r4, r2
  405298:	e6c1      	b.n	40501e <__adddf3+0xe6>
  40529a:	bf00      	nop

0040529c <__aeabi_dmul>:
  40529c:	b570      	push	{r4, r5, r6, lr}
  40529e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4052a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4052a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4052aa:	bf1d      	ittte	ne
  4052ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4052b0:	ea94 0f0c 	teqne	r4, ip
  4052b4:	ea95 0f0c 	teqne	r5, ip
  4052b8:	f000 f8de 	bleq	405478 <__aeabi_dmul+0x1dc>
  4052bc:	442c      	add	r4, r5
  4052be:	ea81 0603 	eor.w	r6, r1, r3
  4052c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4052c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4052ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4052ce:	bf18      	it	ne
  4052d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4052d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4052d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4052dc:	d038      	beq.n	405350 <__aeabi_dmul+0xb4>
  4052de:	fba0 ce02 	umull	ip, lr, r0, r2
  4052e2:	f04f 0500 	mov.w	r5, #0
  4052e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4052ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4052ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  4052f2:	f04f 0600 	mov.w	r6, #0
  4052f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4052fa:	f09c 0f00 	teq	ip, #0
  4052fe:	bf18      	it	ne
  405300:	f04e 0e01 	orrne.w	lr, lr, #1
  405304:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405308:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40530c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405310:	d204      	bcs.n	40531c <__aeabi_dmul+0x80>
  405312:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405316:	416d      	adcs	r5, r5
  405318:	eb46 0606 	adc.w	r6, r6, r6
  40531c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405320:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405324:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405328:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40532c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405330:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405334:	bf88      	it	hi
  405336:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40533a:	d81e      	bhi.n	40537a <__aeabi_dmul+0xde>
  40533c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405340:	bf08      	it	eq
  405342:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405346:	f150 0000 	adcs.w	r0, r0, #0
  40534a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40534e:	bd70      	pop	{r4, r5, r6, pc}
  405350:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405354:	ea46 0101 	orr.w	r1, r6, r1
  405358:	ea40 0002 	orr.w	r0, r0, r2
  40535c:	ea81 0103 	eor.w	r1, r1, r3
  405360:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405364:	bfc2      	ittt	gt
  405366:	ebd4 050c 	rsbsgt	r5, r4, ip
  40536a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40536e:	bd70      	popgt	{r4, r5, r6, pc}
  405370:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405374:	f04f 0e00 	mov.w	lr, #0
  405378:	3c01      	subs	r4, #1
  40537a:	f300 80ab 	bgt.w	4054d4 <__aeabi_dmul+0x238>
  40537e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405382:	bfde      	ittt	le
  405384:	2000      	movle	r0, #0
  405386:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40538a:	bd70      	pople	{r4, r5, r6, pc}
  40538c:	f1c4 0400 	rsb	r4, r4, #0
  405390:	3c20      	subs	r4, #32
  405392:	da35      	bge.n	405400 <__aeabi_dmul+0x164>
  405394:	340c      	adds	r4, #12
  405396:	dc1b      	bgt.n	4053d0 <__aeabi_dmul+0x134>
  405398:	f104 0414 	add.w	r4, r4, #20
  40539c:	f1c4 0520 	rsb	r5, r4, #32
  4053a0:	fa00 f305 	lsl.w	r3, r0, r5
  4053a4:	fa20 f004 	lsr.w	r0, r0, r4
  4053a8:	fa01 f205 	lsl.w	r2, r1, r5
  4053ac:	ea40 0002 	orr.w	r0, r0, r2
  4053b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4053b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4053b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4053bc:	fa21 f604 	lsr.w	r6, r1, r4
  4053c0:	eb42 0106 	adc.w	r1, r2, r6
  4053c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4053c8:	bf08      	it	eq
  4053ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4053ce:	bd70      	pop	{r4, r5, r6, pc}
  4053d0:	f1c4 040c 	rsb	r4, r4, #12
  4053d4:	f1c4 0520 	rsb	r5, r4, #32
  4053d8:	fa00 f304 	lsl.w	r3, r0, r4
  4053dc:	fa20 f005 	lsr.w	r0, r0, r5
  4053e0:	fa01 f204 	lsl.w	r2, r1, r4
  4053e4:	ea40 0002 	orr.w	r0, r0, r2
  4053e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4053ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4053f0:	f141 0100 	adc.w	r1, r1, #0
  4053f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4053f8:	bf08      	it	eq
  4053fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4053fe:	bd70      	pop	{r4, r5, r6, pc}
  405400:	f1c4 0520 	rsb	r5, r4, #32
  405404:	fa00 f205 	lsl.w	r2, r0, r5
  405408:	ea4e 0e02 	orr.w	lr, lr, r2
  40540c:	fa20 f304 	lsr.w	r3, r0, r4
  405410:	fa01 f205 	lsl.w	r2, r1, r5
  405414:	ea43 0302 	orr.w	r3, r3, r2
  405418:	fa21 f004 	lsr.w	r0, r1, r4
  40541c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405420:	fa21 f204 	lsr.w	r2, r1, r4
  405424:	ea20 0002 	bic.w	r0, r0, r2
  405428:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40542c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405430:	bf08      	it	eq
  405432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405436:	bd70      	pop	{r4, r5, r6, pc}
  405438:	f094 0f00 	teq	r4, #0
  40543c:	d10f      	bne.n	40545e <__aeabi_dmul+0x1c2>
  40543e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405442:	0040      	lsls	r0, r0, #1
  405444:	eb41 0101 	adc.w	r1, r1, r1
  405448:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40544c:	bf08      	it	eq
  40544e:	3c01      	subeq	r4, #1
  405450:	d0f7      	beq.n	405442 <__aeabi_dmul+0x1a6>
  405452:	ea41 0106 	orr.w	r1, r1, r6
  405456:	f095 0f00 	teq	r5, #0
  40545a:	bf18      	it	ne
  40545c:	4770      	bxne	lr
  40545e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405462:	0052      	lsls	r2, r2, #1
  405464:	eb43 0303 	adc.w	r3, r3, r3
  405468:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40546c:	bf08      	it	eq
  40546e:	3d01      	subeq	r5, #1
  405470:	d0f7      	beq.n	405462 <__aeabi_dmul+0x1c6>
  405472:	ea43 0306 	orr.w	r3, r3, r6
  405476:	4770      	bx	lr
  405478:	ea94 0f0c 	teq	r4, ip
  40547c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405480:	bf18      	it	ne
  405482:	ea95 0f0c 	teqne	r5, ip
  405486:	d00c      	beq.n	4054a2 <__aeabi_dmul+0x206>
  405488:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40548c:	bf18      	it	ne
  40548e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405492:	d1d1      	bne.n	405438 <__aeabi_dmul+0x19c>
  405494:	ea81 0103 	eor.w	r1, r1, r3
  405498:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40549c:	f04f 0000 	mov.w	r0, #0
  4054a0:	bd70      	pop	{r4, r5, r6, pc}
  4054a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4054a6:	bf06      	itte	eq
  4054a8:	4610      	moveq	r0, r2
  4054aa:	4619      	moveq	r1, r3
  4054ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4054b0:	d019      	beq.n	4054e6 <__aeabi_dmul+0x24a>
  4054b2:	ea94 0f0c 	teq	r4, ip
  4054b6:	d102      	bne.n	4054be <__aeabi_dmul+0x222>
  4054b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4054bc:	d113      	bne.n	4054e6 <__aeabi_dmul+0x24a>
  4054be:	ea95 0f0c 	teq	r5, ip
  4054c2:	d105      	bne.n	4054d0 <__aeabi_dmul+0x234>
  4054c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4054c8:	bf1c      	itt	ne
  4054ca:	4610      	movne	r0, r2
  4054cc:	4619      	movne	r1, r3
  4054ce:	d10a      	bne.n	4054e6 <__aeabi_dmul+0x24a>
  4054d0:	ea81 0103 	eor.w	r1, r1, r3
  4054d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4054d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4054dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4054e0:	f04f 0000 	mov.w	r0, #0
  4054e4:	bd70      	pop	{r4, r5, r6, pc}
  4054e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4054ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4054ee:	bd70      	pop	{r4, r5, r6, pc}

004054f0 <__aeabi_ddiv>:
  4054f0:	b570      	push	{r4, r5, r6, lr}
  4054f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4054f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4054fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4054fe:	bf1d      	ittte	ne
  405500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405504:	ea94 0f0c 	teqne	r4, ip
  405508:	ea95 0f0c 	teqne	r5, ip
  40550c:	f000 f8a7 	bleq	40565e <__aeabi_ddiv+0x16e>
  405510:	eba4 0405 	sub.w	r4, r4, r5
  405514:	ea81 0e03 	eor.w	lr, r1, r3
  405518:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40551c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405520:	f000 8088 	beq.w	405634 <__aeabi_ddiv+0x144>
  405524:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405528:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40552c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405530:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405534:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405538:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40553c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405540:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405544:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405548:	429d      	cmp	r5, r3
  40554a:	bf08      	it	eq
  40554c:	4296      	cmpeq	r6, r2
  40554e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405552:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405556:	d202      	bcs.n	40555e <__aeabi_ddiv+0x6e>
  405558:	085b      	lsrs	r3, r3, #1
  40555a:	ea4f 0232 	mov.w	r2, r2, rrx
  40555e:	1ab6      	subs	r6, r6, r2
  405560:	eb65 0503 	sbc.w	r5, r5, r3
  405564:	085b      	lsrs	r3, r3, #1
  405566:	ea4f 0232 	mov.w	r2, r2, rrx
  40556a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40556e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405572:	ebb6 0e02 	subs.w	lr, r6, r2
  405576:	eb75 0e03 	sbcs.w	lr, r5, r3
  40557a:	bf22      	ittt	cs
  40557c:	1ab6      	subcs	r6, r6, r2
  40557e:	4675      	movcs	r5, lr
  405580:	ea40 000c 	orrcs.w	r0, r0, ip
  405584:	085b      	lsrs	r3, r3, #1
  405586:	ea4f 0232 	mov.w	r2, r2, rrx
  40558a:	ebb6 0e02 	subs.w	lr, r6, r2
  40558e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405592:	bf22      	ittt	cs
  405594:	1ab6      	subcs	r6, r6, r2
  405596:	4675      	movcs	r5, lr
  405598:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40559c:	085b      	lsrs	r3, r3, #1
  40559e:	ea4f 0232 	mov.w	r2, r2, rrx
  4055a2:	ebb6 0e02 	subs.w	lr, r6, r2
  4055a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4055aa:	bf22      	ittt	cs
  4055ac:	1ab6      	subcs	r6, r6, r2
  4055ae:	4675      	movcs	r5, lr
  4055b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4055b4:	085b      	lsrs	r3, r3, #1
  4055b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4055ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4055be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4055c2:	bf22      	ittt	cs
  4055c4:	1ab6      	subcs	r6, r6, r2
  4055c6:	4675      	movcs	r5, lr
  4055c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4055cc:	ea55 0e06 	orrs.w	lr, r5, r6
  4055d0:	d018      	beq.n	405604 <__aeabi_ddiv+0x114>
  4055d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4055d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4055da:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4055de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4055e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4055e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4055ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4055ee:	d1c0      	bne.n	405572 <__aeabi_ddiv+0x82>
  4055f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4055f4:	d10b      	bne.n	40560e <__aeabi_ddiv+0x11e>
  4055f6:	ea41 0100 	orr.w	r1, r1, r0
  4055fa:	f04f 0000 	mov.w	r0, #0
  4055fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405602:	e7b6      	b.n	405572 <__aeabi_ddiv+0x82>
  405604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405608:	bf04      	itt	eq
  40560a:	4301      	orreq	r1, r0
  40560c:	2000      	moveq	r0, #0
  40560e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405612:	bf88      	it	hi
  405614:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405618:	f63f aeaf 	bhi.w	40537a <__aeabi_dmul+0xde>
  40561c:	ebb5 0c03 	subs.w	ip, r5, r3
  405620:	bf04      	itt	eq
  405622:	ebb6 0c02 	subseq.w	ip, r6, r2
  405626:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40562a:	f150 0000 	adcs.w	r0, r0, #0
  40562e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405632:	bd70      	pop	{r4, r5, r6, pc}
  405634:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405638:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40563c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405640:	bfc2      	ittt	gt
  405642:	ebd4 050c 	rsbsgt	r5, r4, ip
  405646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40564a:	bd70      	popgt	{r4, r5, r6, pc}
  40564c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405650:	f04f 0e00 	mov.w	lr, #0
  405654:	3c01      	subs	r4, #1
  405656:	e690      	b.n	40537a <__aeabi_dmul+0xde>
  405658:	ea45 0e06 	orr.w	lr, r5, r6
  40565c:	e68d      	b.n	40537a <__aeabi_dmul+0xde>
  40565e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405662:	ea94 0f0c 	teq	r4, ip
  405666:	bf08      	it	eq
  405668:	ea95 0f0c 	teqeq	r5, ip
  40566c:	f43f af3b 	beq.w	4054e6 <__aeabi_dmul+0x24a>
  405670:	ea94 0f0c 	teq	r4, ip
  405674:	d10a      	bne.n	40568c <__aeabi_ddiv+0x19c>
  405676:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40567a:	f47f af34 	bne.w	4054e6 <__aeabi_dmul+0x24a>
  40567e:	ea95 0f0c 	teq	r5, ip
  405682:	f47f af25 	bne.w	4054d0 <__aeabi_dmul+0x234>
  405686:	4610      	mov	r0, r2
  405688:	4619      	mov	r1, r3
  40568a:	e72c      	b.n	4054e6 <__aeabi_dmul+0x24a>
  40568c:	ea95 0f0c 	teq	r5, ip
  405690:	d106      	bne.n	4056a0 <__aeabi_ddiv+0x1b0>
  405692:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405696:	f43f aefd 	beq.w	405494 <__aeabi_dmul+0x1f8>
  40569a:	4610      	mov	r0, r2
  40569c:	4619      	mov	r1, r3
  40569e:	e722      	b.n	4054e6 <__aeabi_dmul+0x24a>
  4056a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4056a4:	bf18      	it	ne
  4056a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4056aa:	f47f aec5 	bne.w	405438 <__aeabi_dmul+0x19c>
  4056ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4056b2:	f47f af0d 	bne.w	4054d0 <__aeabi_dmul+0x234>
  4056b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4056ba:	f47f aeeb 	bne.w	405494 <__aeabi_dmul+0x1f8>
  4056be:	e712      	b.n	4054e6 <__aeabi_dmul+0x24a>

004056c0 <__gedf2>:
  4056c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4056c4:	e006      	b.n	4056d4 <__cmpdf2+0x4>
  4056c6:	bf00      	nop

004056c8 <__ledf2>:
  4056c8:	f04f 0c01 	mov.w	ip, #1
  4056cc:	e002      	b.n	4056d4 <__cmpdf2+0x4>
  4056ce:	bf00      	nop

004056d0 <__cmpdf2>:
  4056d0:	f04f 0c01 	mov.w	ip, #1
  4056d4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4056d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4056dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4056e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4056e4:	bf18      	it	ne
  4056e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4056ea:	d01b      	beq.n	405724 <__cmpdf2+0x54>
  4056ec:	b001      	add	sp, #4
  4056ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4056f2:	bf0c      	ite	eq
  4056f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4056f8:	ea91 0f03 	teqne	r1, r3
  4056fc:	bf02      	ittt	eq
  4056fe:	ea90 0f02 	teqeq	r0, r2
  405702:	2000      	moveq	r0, #0
  405704:	4770      	bxeq	lr
  405706:	f110 0f00 	cmn.w	r0, #0
  40570a:	ea91 0f03 	teq	r1, r3
  40570e:	bf58      	it	pl
  405710:	4299      	cmppl	r1, r3
  405712:	bf08      	it	eq
  405714:	4290      	cmpeq	r0, r2
  405716:	bf2c      	ite	cs
  405718:	17d8      	asrcs	r0, r3, #31
  40571a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40571e:	f040 0001 	orr.w	r0, r0, #1
  405722:	4770      	bx	lr
  405724:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405728:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40572c:	d102      	bne.n	405734 <__cmpdf2+0x64>
  40572e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405732:	d107      	bne.n	405744 <__cmpdf2+0x74>
  405734:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40573c:	d1d6      	bne.n	4056ec <__cmpdf2+0x1c>
  40573e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405742:	d0d3      	beq.n	4056ec <__cmpdf2+0x1c>
  405744:	f85d 0b04 	ldr.w	r0, [sp], #4
  405748:	4770      	bx	lr
  40574a:	bf00      	nop

0040574c <__aeabi_cdrcmple>:
  40574c:	4684      	mov	ip, r0
  40574e:	4610      	mov	r0, r2
  405750:	4662      	mov	r2, ip
  405752:	468c      	mov	ip, r1
  405754:	4619      	mov	r1, r3
  405756:	4663      	mov	r3, ip
  405758:	e000      	b.n	40575c <__aeabi_cdcmpeq>
  40575a:	bf00      	nop

0040575c <__aeabi_cdcmpeq>:
  40575c:	b501      	push	{r0, lr}
  40575e:	f7ff ffb7 	bl	4056d0 <__cmpdf2>
  405762:	2800      	cmp	r0, #0
  405764:	bf48      	it	mi
  405766:	f110 0f00 	cmnmi.w	r0, #0
  40576a:	bd01      	pop	{r0, pc}

0040576c <__aeabi_dcmpeq>:
  40576c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405770:	f7ff fff4 	bl	40575c <__aeabi_cdcmpeq>
  405774:	bf0c      	ite	eq
  405776:	2001      	moveq	r0, #1
  405778:	2000      	movne	r0, #0
  40577a:	f85d fb08 	ldr.w	pc, [sp], #8
  40577e:	bf00      	nop

00405780 <__aeabi_dcmplt>:
  405780:	f84d ed08 	str.w	lr, [sp, #-8]!
  405784:	f7ff ffea 	bl	40575c <__aeabi_cdcmpeq>
  405788:	bf34      	ite	cc
  40578a:	2001      	movcc	r0, #1
  40578c:	2000      	movcs	r0, #0
  40578e:	f85d fb08 	ldr.w	pc, [sp], #8
  405792:	bf00      	nop

00405794 <__aeabi_dcmple>:
  405794:	f84d ed08 	str.w	lr, [sp, #-8]!
  405798:	f7ff ffe0 	bl	40575c <__aeabi_cdcmpeq>
  40579c:	bf94      	ite	ls
  40579e:	2001      	movls	r0, #1
  4057a0:	2000      	movhi	r0, #0
  4057a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4057a6:	bf00      	nop

004057a8 <__aeabi_dcmpge>:
  4057a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4057ac:	f7ff ffce 	bl	40574c <__aeabi_cdrcmple>
  4057b0:	bf94      	ite	ls
  4057b2:	2001      	movls	r0, #1
  4057b4:	2000      	movhi	r0, #0
  4057b6:	f85d fb08 	ldr.w	pc, [sp], #8
  4057ba:	bf00      	nop

004057bc <__aeabi_dcmpgt>:
  4057bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4057c0:	f7ff ffc4 	bl	40574c <__aeabi_cdrcmple>
  4057c4:	bf34      	ite	cc
  4057c6:	2001      	movcc	r0, #1
  4057c8:	2000      	movcs	r0, #0
  4057ca:	f85d fb08 	ldr.w	pc, [sp], #8
  4057ce:	bf00      	nop

004057d0 <__aeabi_dcmpun>:
  4057d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4057d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4057d8:	d102      	bne.n	4057e0 <__aeabi_dcmpun+0x10>
  4057da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4057de:	d10a      	bne.n	4057f6 <__aeabi_dcmpun+0x26>
  4057e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4057e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4057e8:	d102      	bne.n	4057f0 <__aeabi_dcmpun+0x20>
  4057ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4057ee:	d102      	bne.n	4057f6 <__aeabi_dcmpun+0x26>
  4057f0:	f04f 0000 	mov.w	r0, #0
  4057f4:	4770      	bx	lr
  4057f6:	f04f 0001 	mov.w	r0, #1
  4057fa:	4770      	bx	lr

004057fc <__aeabi_d2iz>:
  4057fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405800:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405804:	d215      	bcs.n	405832 <__aeabi_d2iz+0x36>
  405806:	d511      	bpl.n	40582c <__aeabi_d2iz+0x30>
  405808:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40580c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405810:	d912      	bls.n	405838 <__aeabi_d2iz+0x3c>
  405812:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40581a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40581e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405822:	fa23 f002 	lsr.w	r0, r3, r2
  405826:	bf18      	it	ne
  405828:	4240      	negne	r0, r0
  40582a:	4770      	bx	lr
  40582c:	f04f 0000 	mov.w	r0, #0
  405830:	4770      	bx	lr
  405832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405836:	d105      	bne.n	405844 <__aeabi_d2iz+0x48>
  405838:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40583c:	bf08      	it	eq
  40583e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405842:	4770      	bx	lr
  405844:	f04f 0000 	mov.w	r0, #0
  405848:	4770      	bx	lr
  40584a:	bf00      	nop

0040584c <__aeabi_d2f>:
  40584c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405854:	bf24      	itt	cs
  405856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40585a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40585e:	d90d      	bls.n	40587c <__aeabi_d2f+0x30>
  405860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40586c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405874:	bf08      	it	eq
  405876:	f020 0001 	biceq.w	r0, r0, #1
  40587a:	4770      	bx	lr
  40587c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405880:	d121      	bne.n	4058c6 <__aeabi_d2f+0x7a>
  405882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405886:	bfbc      	itt	lt
  405888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40588c:	4770      	bxlt	lr
  40588e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405892:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405896:	f1c2 0218 	rsb	r2, r2, #24
  40589a:	f1c2 0c20 	rsb	ip, r2, #32
  40589e:	fa10 f30c 	lsls.w	r3, r0, ip
  4058a2:	fa20 f002 	lsr.w	r0, r0, r2
  4058a6:	bf18      	it	ne
  4058a8:	f040 0001 	orrne.w	r0, r0, #1
  4058ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4058b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4058b4:	fa03 fc0c 	lsl.w	ip, r3, ip
  4058b8:	ea40 000c 	orr.w	r0, r0, ip
  4058bc:	fa23 f302 	lsr.w	r3, r3, r2
  4058c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4058c4:	e7cc      	b.n	405860 <__aeabi_d2f+0x14>
  4058c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4058ca:	d107      	bne.n	4058dc <__aeabi_d2f+0x90>
  4058cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4058d0:	bf1e      	ittt	ne
  4058d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4058d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4058da:	4770      	bxne	lr
  4058dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4058e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4058e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4058e8:	4770      	bx	lr
  4058ea:	bf00      	nop

004058ec <__aeabi_frsub>:
  4058ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4058f0:	e002      	b.n	4058f8 <__addsf3>
  4058f2:	bf00      	nop

004058f4 <__aeabi_fsub>:
  4058f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004058f8 <__addsf3>:
  4058f8:	0042      	lsls	r2, r0, #1
  4058fa:	bf1f      	itttt	ne
  4058fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  405900:	ea92 0f03 	teqne	r2, r3
  405904:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405908:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40590c:	d06a      	beq.n	4059e4 <__addsf3+0xec>
  40590e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  405912:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405916:	bfc1      	itttt	gt
  405918:	18d2      	addgt	r2, r2, r3
  40591a:	4041      	eorgt	r1, r0
  40591c:	4048      	eorgt	r0, r1
  40591e:	4041      	eorgt	r1, r0
  405920:	bfb8      	it	lt
  405922:	425b      	neglt	r3, r3
  405924:	2b19      	cmp	r3, #25
  405926:	bf88      	it	hi
  405928:	4770      	bxhi	lr
  40592a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40592e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405932:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405936:	bf18      	it	ne
  405938:	4240      	negne	r0, r0
  40593a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40593e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405942:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405946:	bf18      	it	ne
  405948:	4249      	negne	r1, r1
  40594a:	ea92 0f03 	teq	r2, r3
  40594e:	d03f      	beq.n	4059d0 <__addsf3+0xd8>
  405950:	f1a2 0201 	sub.w	r2, r2, #1
  405954:	fa41 fc03 	asr.w	ip, r1, r3
  405958:	eb10 000c 	adds.w	r0, r0, ip
  40595c:	f1c3 0320 	rsb	r3, r3, #32
  405960:	fa01 f103 	lsl.w	r1, r1, r3
  405964:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405968:	d502      	bpl.n	405970 <__addsf3+0x78>
  40596a:	4249      	negs	r1, r1
  40596c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405970:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405974:	d313      	bcc.n	40599e <__addsf3+0xa6>
  405976:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40597a:	d306      	bcc.n	40598a <__addsf3+0x92>
  40597c:	0840      	lsrs	r0, r0, #1
  40597e:	ea4f 0131 	mov.w	r1, r1, rrx
  405982:	f102 0201 	add.w	r2, r2, #1
  405986:	2afe      	cmp	r2, #254	; 0xfe
  405988:	d251      	bcs.n	405a2e <__addsf3+0x136>
  40598a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40598e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405992:	bf08      	it	eq
  405994:	f020 0001 	biceq.w	r0, r0, #1
  405998:	ea40 0003 	orr.w	r0, r0, r3
  40599c:	4770      	bx	lr
  40599e:	0049      	lsls	r1, r1, #1
  4059a0:	eb40 0000 	adc.w	r0, r0, r0
  4059a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4059a8:	f1a2 0201 	sub.w	r2, r2, #1
  4059ac:	d1ed      	bne.n	40598a <__addsf3+0x92>
  4059ae:	fab0 fc80 	clz	ip, r0
  4059b2:	f1ac 0c08 	sub.w	ip, ip, #8
  4059b6:	ebb2 020c 	subs.w	r2, r2, ip
  4059ba:	fa00 f00c 	lsl.w	r0, r0, ip
  4059be:	bfaa      	itet	ge
  4059c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4059c4:	4252      	neglt	r2, r2
  4059c6:	4318      	orrge	r0, r3
  4059c8:	bfbc      	itt	lt
  4059ca:	40d0      	lsrlt	r0, r2
  4059cc:	4318      	orrlt	r0, r3
  4059ce:	4770      	bx	lr
  4059d0:	f092 0f00 	teq	r2, #0
  4059d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4059d8:	bf06      	itte	eq
  4059da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4059de:	3201      	addeq	r2, #1
  4059e0:	3b01      	subne	r3, #1
  4059e2:	e7b5      	b.n	405950 <__addsf3+0x58>
  4059e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4059e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4059ec:	bf18      	it	ne
  4059ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4059f2:	d021      	beq.n	405a38 <__addsf3+0x140>
  4059f4:	ea92 0f03 	teq	r2, r3
  4059f8:	d004      	beq.n	405a04 <__addsf3+0x10c>
  4059fa:	f092 0f00 	teq	r2, #0
  4059fe:	bf08      	it	eq
  405a00:	4608      	moveq	r0, r1
  405a02:	4770      	bx	lr
  405a04:	ea90 0f01 	teq	r0, r1
  405a08:	bf1c      	itt	ne
  405a0a:	2000      	movne	r0, #0
  405a0c:	4770      	bxne	lr
  405a0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  405a12:	d104      	bne.n	405a1e <__addsf3+0x126>
  405a14:	0040      	lsls	r0, r0, #1
  405a16:	bf28      	it	cs
  405a18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405a1c:	4770      	bx	lr
  405a1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405a22:	bf3c      	itt	cc
  405a24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  405a28:	4770      	bxcc	lr
  405a2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405a2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405a32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405a36:	4770      	bx	lr
  405a38:	ea7f 6222 	mvns.w	r2, r2, asr #24
  405a3c:	bf16      	itet	ne
  405a3e:	4608      	movne	r0, r1
  405a40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405a44:	4601      	movne	r1, r0
  405a46:	0242      	lsls	r2, r0, #9
  405a48:	bf06      	itte	eq
  405a4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  405a4e:	ea90 0f01 	teqeq	r0, r1
  405a52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405a56:	4770      	bx	lr

00405a58 <__aeabi_ui2f>:
  405a58:	f04f 0300 	mov.w	r3, #0
  405a5c:	e004      	b.n	405a68 <__aeabi_i2f+0x8>
  405a5e:	bf00      	nop

00405a60 <__aeabi_i2f>:
  405a60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405a64:	bf48      	it	mi
  405a66:	4240      	negmi	r0, r0
  405a68:	ea5f 0c00 	movs.w	ip, r0
  405a6c:	bf08      	it	eq
  405a6e:	4770      	bxeq	lr
  405a70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405a74:	4601      	mov	r1, r0
  405a76:	f04f 0000 	mov.w	r0, #0
  405a7a:	e01c      	b.n	405ab6 <__aeabi_l2f+0x2a>

00405a7c <__aeabi_ul2f>:
  405a7c:	ea50 0201 	orrs.w	r2, r0, r1
  405a80:	bf08      	it	eq
  405a82:	4770      	bxeq	lr
  405a84:	f04f 0300 	mov.w	r3, #0
  405a88:	e00a      	b.n	405aa0 <__aeabi_l2f+0x14>
  405a8a:	bf00      	nop

00405a8c <__aeabi_l2f>:
  405a8c:	ea50 0201 	orrs.w	r2, r0, r1
  405a90:	bf08      	it	eq
  405a92:	4770      	bxeq	lr
  405a94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405a98:	d502      	bpl.n	405aa0 <__aeabi_l2f+0x14>
  405a9a:	4240      	negs	r0, r0
  405a9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405aa0:	ea5f 0c01 	movs.w	ip, r1
  405aa4:	bf02      	ittt	eq
  405aa6:	4684      	moveq	ip, r0
  405aa8:	4601      	moveq	r1, r0
  405aaa:	2000      	moveq	r0, #0
  405aac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405ab0:	bf08      	it	eq
  405ab2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405ab6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  405aba:	fabc f28c 	clz	r2, ip
  405abe:	3a08      	subs	r2, #8
  405ac0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405ac4:	db10      	blt.n	405ae8 <__aeabi_l2f+0x5c>
  405ac6:	fa01 fc02 	lsl.w	ip, r1, r2
  405aca:	4463      	add	r3, ip
  405acc:	fa00 fc02 	lsl.w	ip, r0, r2
  405ad0:	f1c2 0220 	rsb	r2, r2, #32
  405ad4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405ad8:	fa20 f202 	lsr.w	r2, r0, r2
  405adc:	eb43 0002 	adc.w	r0, r3, r2
  405ae0:	bf08      	it	eq
  405ae2:	f020 0001 	biceq.w	r0, r0, #1
  405ae6:	4770      	bx	lr
  405ae8:	f102 0220 	add.w	r2, r2, #32
  405aec:	fa01 fc02 	lsl.w	ip, r1, r2
  405af0:	f1c2 0220 	rsb	r2, r2, #32
  405af4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  405af8:	fa21 f202 	lsr.w	r2, r1, r2
  405afc:	eb43 0002 	adc.w	r0, r3, r2
  405b00:	bf08      	it	eq
  405b02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405b06:	4770      	bx	lr

00405b08 <__aeabi_fmul>:
  405b08:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405b0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405b10:	bf1e      	ittt	ne
  405b12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405b16:	ea92 0f0c 	teqne	r2, ip
  405b1a:	ea93 0f0c 	teqne	r3, ip
  405b1e:	d06f      	beq.n	405c00 <__aeabi_fmul+0xf8>
  405b20:	441a      	add	r2, r3
  405b22:	ea80 0c01 	eor.w	ip, r0, r1
  405b26:	0240      	lsls	r0, r0, #9
  405b28:	bf18      	it	ne
  405b2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  405b2e:	d01e      	beq.n	405b6e <__aeabi_fmul+0x66>
  405b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405b34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  405b38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  405b3c:	fba0 3101 	umull	r3, r1, r0, r1
  405b40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405b44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405b48:	bf3e      	ittt	cc
  405b4a:	0049      	lslcc	r1, r1, #1
  405b4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405b50:	005b      	lslcc	r3, r3, #1
  405b52:	ea40 0001 	orr.w	r0, r0, r1
  405b56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  405b5a:	2afd      	cmp	r2, #253	; 0xfd
  405b5c:	d81d      	bhi.n	405b9a <__aeabi_fmul+0x92>
  405b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405b62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405b66:	bf08      	it	eq
  405b68:	f020 0001 	biceq.w	r0, r0, #1
  405b6c:	4770      	bx	lr
  405b6e:	f090 0f00 	teq	r0, #0
  405b72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405b76:	bf08      	it	eq
  405b78:	0249      	lsleq	r1, r1, #9
  405b7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405b7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405b82:	3a7f      	subs	r2, #127	; 0x7f
  405b84:	bfc2      	ittt	gt
  405b86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405b8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405b8e:	4770      	bxgt	lr
  405b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405b94:	f04f 0300 	mov.w	r3, #0
  405b98:	3a01      	subs	r2, #1
  405b9a:	dc5d      	bgt.n	405c58 <__aeabi_fmul+0x150>
  405b9c:	f112 0f19 	cmn.w	r2, #25
  405ba0:	bfdc      	itt	le
  405ba2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405ba6:	4770      	bxle	lr
  405ba8:	f1c2 0200 	rsb	r2, r2, #0
  405bac:	0041      	lsls	r1, r0, #1
  405bae:	fa21 f102 	lsr.w	r1, r1, r2
  405bb2:	f1c2 0220 	rsb	r2, r2, #32
  405bb6:	fa00 fc02 	lsl.w	ip, r0, r2
  405bba:	ea5f 0031 	movs.w	r0, r1, rrx
  405bbe:	f140 0000 	adc.w	r0, r0, #0
  405bc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405bc6:	bf08      	it	eq
  405bc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405bcc:	4770      	bx	lr
  405bce:	f092 0f00 	teq	r2, #0
  405bd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405bd6:	bf02      	ittt	eq
  405bd8:	0040      	lsleq	r0, r0, #1
  405bda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405bde:	3a01      	subeq	r2, #1
  405be0:	d0f9      	beq.n	405bd6 <__aeabi_fmul+0xce>
  405be2:	ea40 000c 	orr.w	r0, r0, ip
  405be6:	f093 0f00 	teq	r3, #0
  405bea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405bee:	bf02      	ittt	eq
  405bf0:	0049      	lsleq	r1, r1, #1
  405bf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405bf6:	3b01      	subeq	r3, #1
  405bf8:	d0f9      	beq.n	405bee <__aeabi_fmul+0xe6>
  405bfa:	ea41 010c 	orr.w	r1, r1, ip
  405bfe:	e78f      	b.n	405b20 <__aeabi_fmul+0x18>
  405c00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405c04:	ea92 0f0c 	teq	r2, ip
  405c08:	bf18      	it	ne
  405c0a:	ea93 0f0c 	teqne	r3, ip
  405c0e:	d00a      	beq.n	405c26 <__aeabi_fmul+0x11e>
  405c10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405c14:	bf18      	it	ne
  405c16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405c1a:	d1d8      	bne.n	405bce <__aeabi_fmul+0xc6>
  405c1c:	ea80 0001 	eor.w	r0, r0, r1
  405c20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405c24:	4770      	bx	lr
  405c26:	f090 0f00 	teq	r0, #0
  405c2a:	bf17      	itett	ne
  405c2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405c30:	4608      	moveq	r0, r1
  405c32:	f091 0f00 	teqne	r1, #0
  405c36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405c3a:	d014      	beq.n	405c66 <__aeabi_fmul+0x15e>
  405c3c:	ea92 0f0c 	teq	r2, ip
  405c40:	d101      	bne.n	405c46 <__aeabi_fmul+0x13e>
  405c42:	0242      	lsls	r2, r0, #9
  405c44:	d10f      	bne.n	405c66 <__aeabi_fmul+0x15e>
  405c46:	ea93 0f0c 	teq	r3, ip
  405c4a:	d103      	bne.n	405c54 <__aeabi_fmul+0x14c>
  405c4c:	024b      	lsls	r3, r1, #9
  405c4e:	bf18      	it	ne
  405c50:	4608      	movne	r0, r1
  405c52:	d108      	bne.n	405c66 <__aeabi_fmul+0x15e>
  405c54:	ea80 0001 	eor.w	r0, r0, r1
  405c58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405c64:	4770      	bx	lr
  405c66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405c6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405c6e:	4770      	bx	lr

00405c70 <__aeabi_fdiv>:
  405c70:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405c74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405c78:	bf1e      	ittt	ne
  405c7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405c7e:	ea92 0f0c 	teqne	r2, ip
  405c82:	ea93 0f0c 	teqne	r3, ip
  405c86:	d069      	beq.n	405d5c <__aeabi_fdiv+0xec>
  405c88:	eba2 0203 	sub.w	r2, r2, r3
  405c8c:	ea80 0c01 	eor.w	ip, r0, r1
  405c90:	0249      	lsls	r1, r1, #9
  405c92:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405c96:	d037      	beq.n	405d08 <__aeabi_fdiv+0x98>
  405c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405c9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405ca0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405ca4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405ca8:	428b      	cmp	r3, r1
  405caa:	bf38      	it	cc
  405cac:	005b      	lslcc	r3, r3, #1
  405cae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405cb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405cb6:	428b      	cmp	r3, r1
  405cb8:	bf24      	itt	cs
  405cba:	1a5b      	subcs	r3, r3, r1
  405cbc:	ea40 000c 	orrcs.w	r0, r0, ip
  405cc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405cc4:	bf24      	itt	cs
  405cc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405cca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405cce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405cd2:	bf24      	itt	cs
  405cd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405cd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405cdc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405ce0:	bf24      	itt	cs
  405ce2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405ce6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405cea:	011b      	lsls	r3, r3, #4
  405cec:	bf18      	it	ne
  405cee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405cf2:	d1e0      	bne.n	405cb6 <__aeabi_fdiv+0x46>
  405cf4:	2afd      	cmp	r2, #253	; 0xfd
  405cf6:	f63f af50 	bhi.w	405b9a <__aeabi_fmul+0x92>
  405cfa:	428b      	cmp	r3, r1
  405cfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405d00:	bf08      	it	eq
  405d02:	f020 0001 	biceq.w	r0, r0, #1
  405d06:	4770      	bx	lr
  405d08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405d0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405d10:	327f      	adds	r2, #127	; 0x7f
  405d12:	bfc2      	ittt	gt
  405d14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405d18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405d1c:	4770      	bxgt	lr
  405d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405d22:	f04f 0300 	mov.w	r3, #0
  405d26:	3a01      	subs	r2, #1
  405d28:	e737      	b.n	405b9a <__aeabi_fmul+0x92>
  405d2a:	f092 0f00 	teq	r2, #0
  405d2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405d32:	bf02      	ittt	eq
  405d34:	0040      	lsleq	r0, r0, #1
  405d36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405d3a:	3a01      	subeq	r2, #1
  405d3c:	d0f9      	beq.n	405d32 <__aeabi_fdiv+0xc2>
  405d3e:	ea40 000c 	orr.w	r0, r0, ip
  405d42:	f093 0f00 	teq	r3, #0
  405d46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405d4a:	bf02      	ittt	eq
  405d4c:	0049      	lsleq	r1, r1, #1
  405d4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405d52:	3b01      	subeq	r3, #1
  405d54:	d0f9      	beq.n	405d4a <__aeabi_fdiv+0xda>
  405d56:	ea41 010c 	orr.w	r1, r1, ip
  405d5a:	e795      	b.n	405c88 <__aeabi_fdiv+0x18>
  405d5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405d60:	ea92 0f0c 	teq	r2, ip
  405d64:	d108      	bne.n	405d78 <__aeabi_fdiv+0x108>
  405d66:	0242      	lsls	r2, r0, #9
  405d68:	f47f af7d 	bne.w	405c66 <__aeabi_fmul+0x15e>
  405d6c:	ea93 0f0c 	teq	r3, ip
  405d70:	f47f af70 	bne.w	405c54 <__aeabi_fmul+0x14c>
  405d74:	4608      	mov	r0, r1
  405d76:	e776      	b.n	405c66 <__aeabi_fmul+0x15e>
  405d78:	ea93 0f0c 	teq	r3, ip
  405d7c:	d104      	bne.n	405d88 <__aeabi_fdiv+0x118>
  405d7e:	024b      	lsls	r3, r1, #9
  405d80:	f43f af4c 	beq.w	405c1c <__aeabi_fmul+0x114>
  405d84:	4608      	mov	r0, r1
  405d86:	e76e      	b.n	405c66 <__aeabi_fmul+0x15e>
  405d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405d8c:	bf18      	it	ne
  405d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405d92:	d1ca      	bne.n	405d2a <__aeabi_fdiv+0xba>
  405d94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405d98:	f47f af5c 	bne.w	405c54 <__aeabi_fmul+0x14c>
  405d9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405da0:	f47f af3c 	bne.w	405c1c <__aeabi_fmul+0x114>
  405da4:	e75f      	b.n	405c66 <__aeabi_fmul+0x15e>
  405da6:	bf00      	nop

00405da8 <__gesf2>:
  405da8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  405dac:	e006      	b.n	405dbc <__cmpsf2+0x4>
  405dae:	bf00      	nop

00405db0 <__lesf2>:
  405db0:	f04f 0c01 	mov.w	ip, #1
  405db4:	e002      	b.n	405dbc <__cmpsf2+0x4>
  405db6:	bf00      	nop

00405db8 <__cmpsf2>:
  405db8:	f04f 0c01 	mov.w	ip, #1
  405dbc:	f84d cd04 	str.w	ip, [sp, #-4]!
  405dc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405dc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405dc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405dcc:	bf18      	it	ne
  405dce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405dd2:	d011      	beq.n	405df8 <__cmpsf2+0x40>
  405dd4:	b001      	add	sp, #4
  405dd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  405dda:	bf18      	it	ne
  405ddc:	ea90 0f01 	teqne	r0, r1
  405de0:	bf58      	it	pl
  405de2:	ebb2 0003 	subspl.w	r0, r2, r3
  405de6:	bf88      	it	hi
  405de8:	17c8      	asrhi	r0, r1, #31
  405dea:	bf38      	it	cc
  405dec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  405df0:	bf18      	it	ne
  405df2:	f040 0001 	orrne.w	r0, r0, #1
  405df6:	4770      	bx	lr
  405df8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405dfc:	d102      	bne.n	405e04 <__cmpsf2+0x4c>
  405dfe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405e02:	d105      	bne.n	405e10 <__cmpsf2+0x58>
  405e04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405e08:	d1e4      	bne.n	405dd4 <__cmpsf2+0x1c>
  405e0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405e0e:	d0e1      	beq.n	405dd4 <__cmpsf2+0x1c>
  405e10:	f85d 0b04 	ldr.w	r0, [sp], #4
  405e14:	4770      	bx	lr
  405e16:	bf00      	nop

00405e18 <__aeabi_cfrcmple>:
  405e18:	4684      	mov	ip, r0
  405e1a:	4608      	mov	r0, r1
  405e1c:	4661      	mov	r1, ip
  405e1e:	e7ff      	b.n	405e20 <__aeabi_cfcmpeq>

00405e20 <__aeabi_cfcmpeq>:
  405e20:	b50f      	push	{r0, r1, r2, r3, lr}
  405e22:	f7ff ffc9 	bl	405db8 <__cmpsf2>
  405e26:	2800      	cmp	r0, #0
  405e28:	bf48      	it	mi
  405e2a:	f110 0f00 	cmnmi.w	r0, #0
  405e2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00405e30 <__aeabi_fcmpeq>:
  405e30:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e34:	f7ff fff4 	bl	405e20 <__aeabi_cfcmpeq>
  405e38:	bf0c      	ite	eq
  405e3a:	2001      	moveq	r0, #1
  405e3c:	2000      	movne	r0, #0
  405e3e:	f85d fb08 	ldr.w	pc, [sp], #8
  405e42:	bf00      	nop

00405e44 <__aeabi_fcmplt>:
  405e44:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e48:	f7ff ffea 	bl	405e20 <__aeabi_cfcmpeq>
  405e4c:	bf34      	ite	cc
  405e4e:	2001      	movcc	r0, #1
  405e50:	2000      	movcs	r0, #0
  405e52:	f85d fb08 	ldr.w	pc, [sp], #8
  405e56:	bf00      	nop

00405e58 <__aeabi_fcmple>:
  405e58:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e5c:	f7ff ffe0 	bl	405e20 <__aeabi_cfcmpeq>
  405e60:	bf94      	ite	ls
  405e62:	2001      	movls	r0, #1
  405e64:	2000      	movhi	r0, #0
  405e66:	f85d fb08 	ldr.w	pc, [sp], #8
  405e6a:	bf00      	nop

00405e6c <__aeabi_fcmpge>:
  405e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e70:	f7ff ffd2 	bl	405e18 <__aeabi_cfrcmple>
  405e74:	bf94      	ite	ls
  405e76:	2001      	movls	r0, #1
  405e78:	2000      	movhi	r0, #0
  405e7a:	f85d fb08 	ldr.w	pc, [sp], #8
  405e7e:	bf00      	nop

00405e80 <__aeabi_fcmpgt>:
  405e80:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e84:	f7ff ffc8 	bl	405e18 <__aeabi_cfrcmple>
  405e88:	bf34      	ite	cc
  405e8a:	2001      	movcc	r0, #1
  405e8c:	2000      	movcs	r0, #0
  405e8e:	f85d fb08 	ldr.w	pc, [sp], #8
  405e92:	bf00      	nop

00405e94 <__aeabi_f2iz>:
  405e94:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405e98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405e9c:	d30f      	bcc.n	405ebe <__aeabi_f2iz+0x2a>
  405e9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405ea2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405ea6:	d90d      	bls.n	405ec4 <__aeabi_f2iz+0x30>
  405ea8:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405eb0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405eb4:	fa23 f002 	lsr.w	r0, r3, r2
  405eb8:	bf18      	it	ne
  405eba:	4240      	negne	r0, r0
  405ebc:	4770      	bx	lr
  405ebe:	f04f 0000 	mov.w	r0, #0
  405ec2:	4770      	bx	lr
  405ec4:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405ec8:	d101      	bne.n	405ece <__aeabi_f2iz+0x3a>
  405eca:	0242      	lsls	r2, r0, #9
  405ecc:	d105      	bne.n	405eda <__aeabi_f2iz+0x46>
  405ece:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  405ed2:	bf08      	it	eq
  405ed4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405ed8:	4770      	bx	lr
  405eda:	f04f 0000 	mov.w	r0, #0
  405ede:	4770      	bx	lr

00405ee0 <__aeabi_f2uiz>:
  405ee0:	0042      	lsls	r2, r0, #1
  405ee2:	d20e      	bcs.n	405f02 <__aeabi_f2uiz+0x22>
  405ee4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405ee8:	d30b      	bcc.n	405f02 <__aeabi_f2uiz+0x22>
  405eea:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405eee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405ef2:	d409      	bmi.n	405f08 <__aeabi_f2uiz+0x28>
  405ef4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405efc:	fa23 f002 	lsr.w	r0, r3, r2
  405f00:	4770      	bx	lr
  405f02:	f04f 0000 	mov.w	r0, #0
  405f06:	4770      	bx	lr
  405f08:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405f0c:	d101      	bne.n	405f12 <__aeabi_f2uiz+0x32>
  405f0e:	0242      	lsls	r2, r0, #9
  405f10:	d102      	bne.n	405f18 <__aeabi_f2uiz+0x38>
  405f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  405f16:	4770      	bx	lr
  405f18:	f04f 0000 	mov.w	r0, #0
  405f1c:	4770      	bx	lr
  405f1e:	bf00      	nop
  405f20:	0a0d0a0d 	.word	0x0a0d0a0d
  405f24:	346d6173 	.word	0x346d6173
  405f28:	63323364 	.word	0x63323364
  405f2c:	756d6920 	.word	0x756d6920
  405f30:	6d656420 	.word	0x6d656420
  405f34:	2e2e2e6f 	.word	0x2e2e2e6f
  405f38:	00000a0d 	.word	0x00000a0d
  405f3c:	0000002e 	.word	0x0000002e
  405f40:	6c6c6f72 	.word	0x6c6c6f72
  405f44:	7469702f 	.word	0x7469702f
  405f48:	792f6863 	.word	0x792f6863
  405f4c:	65207761 	.word	0x65207761
  405f50:	726f7272 	.word	0x726f7272
  405f54:	6469702f 	.word	0x6469702f
  405f58:	6625203a 	.word	0x6625203a
  405f5c:	20662520 	.word	0x20662520
  405f60:	25206625 	.word	0x25206625
  405f64:	66252066 	.word	0x66252066
  405f68:	00000a0d 	.word	0x00000a0d
  405f6c:	74697277 	.word	0x74697277
  405f70:	65725f65 	.word	0x65725f65
  405f74:	74736967 	.word	0x74736967
  405f78:	203a7265 	.word	0x203a7265
  405f7c:	63637573 	.word	0x63637573
  405f80:	0d737365 	.word	0x0d737365
  405f84:	0000000a 	.word	0x0000000a
  405f88:	5f697774 	.word	0x5f697774
  405f8c:	7473616d 	.word	0x7473616d
  405f90:	695f7265 	.word	0x695f7265
  405f94:	3a74696e 	.word	0x3a74696e
  405f98:	69616620 	.word	0x69616620
  405f9c:	0d64656c 	.word	0x0d64656c
  405fa0:	0000000a 	.word	0x0000000a
  405fa4:	5f697774 	.word	0x5f697774
  405fa8:	7473616d 	.word	0x7473616d
  405fac:	695f7265 	.word	0x695f7265
  405fb0:	3a74696e 	.word	0x3a74696e
  405fb4:	63757320 	.word	0x63757320
  405fb8:	73736563 	.word	0x73736563
  405fbc:	00000a0d 	.word	0x00000a0d
  405fc0:	5f697774 	.word	0x5f697774
  405fc4:	626f7270 	.word	0x626f7270
  405fc8:	66203a65 	.word	0x66203a65
  405fcc:	656c6961 	.word	0x656c6961
  405fd0:	000a0d64 	.word	0x000a0d64
  405fd4:	5f697774 	.word	0x5f697774
  405fd8:	626f7270 	.word	0x626f7270
  405fdc:	73203a65 	.word	0x73203a65
  405fe0:	65636375 	.word	0x65636375
  405fe4:	0a0d7373 	.word	0x0a0d7373
  405fe8:	00000000 	.word	0x00000000
  405fec:	62616e45 	.word	0x62616e45
  405ff0:	0064656c 	.word	0x0064656c
  405ff4:	61736944 	.word	0x61736944
  405ff8:	64656c62 	.word	0x64656c62
  405ffc:	00000000 	.word	0x00000000
  406000:	69766544 	.word	0x69766544
  406004:	203a6563 	.word	0x203a6563
  406008:	31257830 	.word	0x31257830
  40600c:	000a0d78 	.word	0x000a0d78
  406010:	65656c53 	.word	0x65656c53
  406014:	6f4d2070 	.word	0x6f4d2070
  406018:	203a6564 	.word	0x203a6564
  40601c:	0a0d7325 	.word	0x0a0d7325
  406020:	00000000 	.word	0x00000000
  406024:	636f6c43 	.word	0x636f6c43
  406028:	6f53206b 	.word	0x6f53206b
  40602c:	65637275 	.word	0x65637275
  406030:	0000203a 	.word	0x0000203a
  406034:	65746e49 	.word	0x65746e49
  406038:	6c616e72 	.word	0x6c616e72
  40603c:	484d3820 	.word	0x484d3820
  406040:	736f207a 	.word	0x736f207a
  406044:	6c6c6963 	.word	0x6c6c6963
  406048:	726f7461 	.word	0x726f7461
  40604c:	00000a0d 	.word	0x00000a0d
  406050:	204c4c50 	.word	0x204c4c50
  406054:	68746977 	.word	0x68746977
  406058:	61205820 	.word	0x61205820
  40605c:	20736978 	.word	0x20736978
  406060:	6f727967 	.word	0x6f727967
  406064:	706f6373 	.word	0x706f6373
  406068:	65722065 	.word	0x65722065
  40606c:	65726566 	.word	0x65726566
  406070:	0d65636e 	.word	0x0d65636e
  406074:	0000000a 	.word	0x0000000a
  406078:	6f727947 	.word	0x6f727947
  40607c:	706f6373 	.word	0x706f6373
  406080:	00203a65 	.word	0x00203a65
  406084:	20303532 	.word	0x20303532
  406088:	0d737064 	.word	0x0d737064
  40608c:	0000000a 	.word	0x0000000a
  406090:	20303035 	.word	0x20303035
  406094:	0d737064 	.word	0x0d737064
  406098:	0000000a 	.word	0x0000000a
  40609c:	30303031 	.word	0x30303031
  4060a0:	73706420 	.word	0x73706420
  4060a4:	00000a0d 	.word	0x00000a0d
  4060a8:	30303032 	.word	0x30303032
  4060ac:	73706420 	.word	0x73706420
  4060b0:	00000a0d 	.word	0x00000a0d
  4060b4:	5f657375 	.word	0x5f657375
  4060b8:	696c6163 	.word	0x696c6163
  4060bc:	74617262 	.word	0x74617262
  4060c0:	25203a65 	.word	0x25203a65
  4060c4:	000a0d64 	.word	0x000a0d64
  4060c8:	75746361 	.word	0x75746361
  4060cc:	745f6c61 	.word	0x745f6c61
  4060d0:	73657268 	.word	0x73657268
  4060d4:	646c6f68 	.word	0x646c6f68
  4060d8:	6625203a 	.word	0x6625203a
  4060dc:	00000a0d 	.word	0x00000a0d
  4060e0:	5f737064 	.word	0x5f737064
  4060e4:	5f726570 	.word	0x5f726570
  4060e8:	69676964 	.word	0x69676964
  4060ec:	25203a74 	.word	0x25203a74
  4060f0:	000a0d66 	.word	0x000a0d66
  4060f4:	676e6172 	.word	0x676e6172
  4060f8:	65705f65 	.word	0x65705f65
  4060fc:	69645f72 	.word	0x69645f72
  406100:	3a746967 	.word	0x3a746967
  406104:	0d662520 	.word	0x0d662520
  406108:	0000000a 	.word	0x0000000a
  40610c:	76726573 	.word	0x76726573
  406110:	6e695f6f 	.word	0x6e695f6f
  406114:	0a0d7469 	.word	0x0a0d7469
  406118:	00000000 	.word	0x00000000
  40611c:	00000001 	.word	0x00000001
  406120:	00000002 	.word	0x00000002
  406124:	00000004 	.word	0x00000004
  406128:	00000008 	.word	0x00000008
  40612c:	00000010 	.word	0x00000010
  406130:	00000020 	.word	0x00000020
  406134:	00000040 	.word	0x00000040
  406138:	00000080 	.word	0x00000080
  40613c:	00000100 	.word	0x00000100
  406140:	00000200 	.word	0x00000200
  406144:	00000400 	.word	0x00000400
  406148:	74727173 	.word	0x74727173
  40614c:	00000000 	.word	0x00000000

00406150 <atanlo>:
  406150:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  406160:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00406170 <atanhi>:
  406170:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  406180:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00406190 <_global_impure_ptr>:
  406190:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  4061a0:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4061b0:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4061c0:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4061d0:	4e614e00 00000000                       .NaN....

004061d8 <__sf_fake_stdin>:
	...

004061f8 <__sf_fake_stdout>:
	...

00406218 <__sf_fake_stderr>:
	...

00406238 <__mprec_tens>:
  406238:	00000000 3ff00000 00000000 40240000     .......?......$@
  406248:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406258:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406268:	00000000 412e8480 00000000 416312d0     .......A......cA
  406278:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406288:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406298:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4062a8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4062b8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4062c8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4062d8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4062e8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4062f8:	79d99db4 44ea7843                       ...yCx.D

00406300 <__mprec_bigtens>:
  406300:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406310:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406320:	7f73bf3c 75154fdd                       <.s..O.u

00406328 <p05.6097>:
  406328:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406338:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  406348:	5849534f 00002e00                                OSIX...

0040634f <_ctype_>:
  40634f:	20202000 20202020 28282020 20282828     .         ((((( 
  40635f:	20202020 20202020 20202020 20202020                     
  40636f:	10108820 10101010 10101010 10101010      ...............
  40637f:	04040410 04040404 10040404 10101010     ................
  40638f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40639f:	01010101 01010101 01010101 10101010     ................
  4063af:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4063bf:	02020202 02020202 02020202 10101010     ................
  4063cf:	00000020 00000000 00000000 00000000      ...............
	...

00406450 <_init>:
  406450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406452:	bf00      	nop
  406454:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406456:	bc08      	pop	{r3}
  406458:	469e      	mov	lr, r3
  40645a:	4770      	bx	lr

0040645c <__init_array_start>:
  40645c:	004000f1 	.word	0x004000f1

00406460 <_fini>:
  406460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406462:	bf00      	nop
  406464:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406466:	bc08      	pop	{r3}
  406468:	469e      	mov	lr, r3
  40646a:	4770      	bx	lr
  40646c:	0000      	movs	r0, r0
	...

00406470 <__portable_delay_cycles_veneer>:
  406470:	f85f f000 	ldr.w	pc, [pc]	; 406474 <__portable_delay_cycles_veneer+0x4>
  406474:	20000001 	.word	0x20000001

00406478 <__fini_array_start>:
  406478:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <kp>:
2000000c:	0000 3f80                                   ...?

20000010 <SystemCoreClock>:
20000010:	0900 003d                                   ..=.

20000014 <__fdlib_version>:
20000014:	0001 0000                                   ....

20000018 <impure_data>:
20000018:	0000 0000 61d8 0040 61f8 0040 6218 0040     .....a@..a@..b@.
	...

20000078 <_impure_ptr>:
20000078:	0018 2000                                   ... 

2000007c <__global_locale>:
2000007c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000009c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000011c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000013c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000015c:	4f11 0040 4ec5 0040 0000 0000 634f 0040     .O@..N@.....Oc@.
2000016c:	634d 0040 6339 0040 6339 0040 6339 0040     Mc@.9c@.9c@.9c@.
2000017c:	6339 0040 6339 0040 6339 0040 6339 0040     9c@.9c@.9c@.9c@.
2000018c:	6339 0040 6339 0040 ffff ffff ffff ffff     9c@.9c@.........
2000019c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
