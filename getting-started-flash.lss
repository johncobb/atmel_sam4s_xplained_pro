
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c9c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e8  20000000  00406c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000063c  200001e8  00406e84  000201e8  2**2
                  ALLOC
  3 .stack        00003004  20000824  004074c0  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014825  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003582  00000000  00000000  00034aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005c80  00000000  00000000  00038027  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ea0  00000000  00000000  0003dca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d10  00000000  00000000  0003eb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017cdc  00000000  00000000  0003f857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012f5d  00000000  00000000  00057533  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005571b  00000000  00000000  0006a490  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000030c8  00000000  00000000  000bfbac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003828 	.word	0x20003828
  400004:	00402115 	.word	0x00402115
  400008:	00402111 	.word	0x00402111
  40000c:	00402111 	.word	0x00402111
  400010:	00402111 	.word	0x00402111
  400014:	00402111 	.word	0x00402111
  400018:	00402111 	.word	0x00402111
	...
  40002c:	00402111 	.word	0x00402111
  400030:	00402111 	.word	0x00402111
  400034:	00000000 	.word	0x00000000
  400038:	00402111 	.word	0x00402111
  40003c:	004004ed 	.word	0x004004ed
  400040:	00402111 	.word	0x00402111
  400044:	00402111 	.word	0x00402111
  400048:	00402111 	.word	0x00402111
  40004c:	00402111 	.word	0x00402111
  400050:	00402111 	.word	0x00402111
  400054:	00402111 	.word	0x00402111
  400058:	00402111 	.word	0x00402111
  40005c:	00402111 	.word	0x00402111
  400060:	00402111 	.word	0x00402111
  400064:	00402111 	.word	0x00402111
  400068:	00000000 	.word	0x00000000
  40006c:	00401d51 	.word	0x00401d51
  400070:	00401d61 	.word	0x00401d61
  400074:	00401d71 	.word	0x00401d71
  400078:	00402111 	.word	0x00402111
  40007c:	00402111 	.word	0x00402111
	...
  400088:	00402111 	.word	0x00402111
  40008c:	00402111 	.word	0x00402111
  400090:	00402111 	.word	0x00402111
  400094:	00402111 	.word	0x00402111
  400098:	00402111 	.word	0x00402111
  40009c:	00402111 	.word	0x00402111
  4000a0:	00402111 	.word	0x00402111
  4000a4:	00402111 	.word	0x00402111
  4000a8:	00402111 	.word	0x00402111
  4000ac:	00402111 	.word	0x00402111
  4000b0:	00402111 	.word	0x00402111
  4000b4:	00402111 	.word	0x00402111
  4000b8:	00402111 	.word	0x00402111
  4000bc:	00402111 	.word	0x00402111
  4000c0:	00402111 	.word	0x00402111
  4000c4:	00402111 	.word	0x00402111
  4000c8:	00402111 	.word	0x00402111

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e8 	.word	0x200001e8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00406c9c 	.word	0x00406c9c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001ec 	.word	0x200001ec
  40011c:	00406c9c 	.word	0x00406c9c
  400120:	00406c9c 	.word	0x00406c9c
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f002 f8d0 	bl	4022d0 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 fe58 	bl	401de8 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 fe80 	bl	401e3c <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 fe84 	bl	401e4c <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 fe87 	bl	401e5c <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 fe14 	bl	401d80 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f002 f830 	bl	4021bc <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f002 f8b7 	bl	4022d0 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	20000504 	.word	0x20000504
  4001a8:	200004fc 	.word	0x200004fc

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	20000500 	.word	0x20000500
  4001f8:	20000504 	.word	0x20000504

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 fe80 	bl	401f18 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 fe75 	bl	401f18 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 fe7e 	bl	401f40 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 fe71 	bl	401f40 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 fe3c 	bl	401f08 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 fe30 	bl	401f08 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 fe36 	bl	401f2c <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 fe2a 	bl	401f2c <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
        break;               
    }
}

int main(void)
{
  4002f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002f8:	b097      	sub	sp, #92	; 0x5c
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f001 f9d9 	bl	4016b4 <board_init>

    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 fdb2 	bl	401e6c <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 fdaf 	bl	401e6c <pmc_enable_periph_clk>
    config_init();
  40030e:	f000 f8e3 	bl	4004d8 <config_init>
    cph_millis_init();
  400312:	f000 f8f3 	bl	4004fc <cph_millis_init>
    cli_init();
  400316:	f000 f927 	bl	400568 <cli_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40031a:	2009      	movs	r0, #9
  40031c:	f001 fda6 	bl	401e6c <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400320:	4c57      	ldr	r4, [pc, #348]	; (400480 <main+0x18c>)
  400322:	4b58      	ldr	r3, [pc, #352]	; (400484 <main+0x190>)
  400324:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400326:	4a58      	ldr	r2, [pc, #352]	; (400488 <main+0x194>)
  400328:	4b58      	ldr	r3, [pc, #352]	; (40048c <main+0x198>)
  40032a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40032c:	4a58      	ldr	r2, [pc, #352]	; (400490 <main+0x19c>)
  40032e:	4b59      	ldr	r3, [pc, #356]	; (400494 <main+0x1a0>)
  400330:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400332:	4b59      	ldr	r3, [pc, #356]	; (400498 <main+0x1a4>)
  400334:	9313      	str	r3, [sp, #76]	; 0x4c
	uart_settings.ul_baudrate = opt->baudrate;
  400336:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40033a:	9314      	str	r3, [sp, #80]	; 0x50
	uart_settings.ul_mode = opt->paritytype;
  40033c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400340:	9315      	str	r3, [sp, #84]	; 0x54
  400342:	2009      	movs	r0, #9
  400344:	f001 fd92 	bl	401e6c <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400348:	a913      	add	r1, sp, #76	; 0x4c
  40034a:	4620      	mov	r0, r4
  40034c:	f001 fdbc 	bl	401ec8 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400350:	4c52      	ldr	r4, [pc, #328]	; (40049c <main+0x1a8>)
  400352:	6823      	ldr	r3, [r4, #0]
  400354:	2100      	movs	r1, #0
  400356:	6898      	ldr	r0, [r3, #8]
  400358:	f003 f8e6 	bl	403528 <setbuf>
	setbuf(stdin, NULL);
  40035c:	6823      	ldr	r3, [r4, #0]
  40035e:	2100      	movs	r1, #0
  400360:	6858      	ldr	r0, [r3, #4]
  400362:	f003 f8e1 	bl	403528 <setbuf>
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  400366:	484e      	ldr	r0, [pc, #312]	; (4004a0 <main+0x1ac>)
  400368:	f003 f8d6 	bl	403518 <puts>
  40036c:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        printf(".");
  40036e:	4e4d      	ldr	r6, [pc, #308]	; (4004a4 <main+0x1b0>)
        delay_ms(250);
  400370:	4d4d      	ldr	r5, [pc, #308]	; (4004a8 <main+0x1b4>)
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        printf(".");
  400372:	4630      	mov	r0, r6
  400374:	f003 f85e 	bl	403434 <iprintf>
        delay_ms(250);
  400378:	4628      	mov	r0, r5
  40037a:	f006 fc89 	bl	406c90 <__portable_delay_cycles_veneer>
    cli_init();
    configure_console();

    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  40037e:	3c01      	subs	r4, #1
  400380:	d1f7      	bne.n	400372 <main+0x7e>
        printf(".");
        delay_ms(250);
    }
    printf("\r\n");
  400382:	484a      	ldr	r0, [pc, #296]	; (4004ac <main+0x1b8>)
  400384:	f003 f856 	bl	403434 <iprintf>

    
    if (imu_init()) {
  400388:	f000 fe7e 	bl	401088 <imu_init>
  40038c:	2800      	cmp	r0, #0
  40038e:	d072      	beq.n	400476 <main+0x182>

        // servo_init();
        motor_init();
  400390:	f000 ffe8 	bl	401364 <motor_init>
        // }
        
        

        // Calibrate the imu
        printf("calibrating imu...\r\n");
  400394:	4846      	ldr	r0, [pc, #280]	; (4004b0 <main+0x1bc>)
  400396:	f003 f84d 	bl	403434 <iprintf>
        imu_calibrate();
  40039a:	f000 fe91 	bl	4010c0 <imu_calibrate>
        printf("calibration complete.\r\n");
  40039e:	4845      	ldr	r0, [pc, #276]	; (4004b4 <main+0x1c0>)
  4003a0:	f003 f848 	bl	403434 <iprintf>
            motor_tick();

            


            long y = (long) ap.imu.y_axis;
  4003a4:	4f44      	ldr	r7, [pc, #272]	; (4004b8 <main+0x1c4>)

            // long duty = map(x, ANGLE_MIN, ANGLE_MAX, PWM_MIN, PWM_MAX);
            long power_left = map(y, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
            motor_set_power(motors[0], power_left);
  4003a6:	4c45      	ldr	r4, [pc, #276]	; (4004bc <main+0x1c8>)
  4003a8:	f104 0810 	add.w	r8, r4, #16
        printf("calibrating imu...\r\n");
        imu_calibrate();
        printf("calibration complete.\r\n");

        while(true) {
            cli_tick();
  4003ac:	f000 f9e6 	bl	40077c <cli_tick>
            imu_tick();
  4003b0:	f000 fe92 	bl	4010d8 <imu_tick>
            pid_tick();
  4003b4:	f001 f90c 	bl	4015d0 <pid_tick>
            motor_tick();
  4003b8:	f001 f898 	bl	4014ec <motor_tick>

            


            long y = (long) ap.imu.y_axis;
  4003bc:	6878      	ldr	r0, [r7, #4]
  4003be:	f006 f8e9 	bl	406594 <__aeabi_f2iz>
  4003c2:	4681      	mov	r9, r0

            // long duty = map(x, ANGLE_MIN, ANGLE_MAX, PWM_MIN, PWM_MAX);
            long power_left = map(y, ANGLE_MID, ANGLE_MAX, PWM_MIN, PWM_MAX);
  4003c4:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
  4003c8:	9600      	str	r6, [sp, #0]
  4003ca:	f240 437e 	movw	r3, #1150	; 0x47e
  4003ce:	225a      	movs	r2, #90	; 0x5a
  4003d0:	2100      	movs	r1, #0
  4003d2:	f000 f8a5 	bl	400520 <map>
            motor_set_power(motors[0], power_left);
  4003d6:	9011      	str	r0, [sp, #68]	; 0x44
  4003d8:	2544      	movs	r5, #68	; 0x44
  4003da:	462a      	mov	r2, r5
  4003dc:	4641      	mov	r1, r8
  4003de:	4668      	mov	r0, sp
  4003e0:	f002 fba6 	bl	402b30 <memcpy>
  4003e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  4003e8:	f001 f882 	bl	4014f0 <motor_set_power>

            long power_right = map(y, ANGLE_MID, ANGLE_MIN, PWM_MIN, PWM_MAX);
  4003ec:	9600      	str	r6, [sp, #0]
  4003ee:	f240 437e 	movw	r3, #1150	; 0x47e
  4003f2:	f06f 0259 	mvn.w	r2, #89	; 0x59
  4003f6:	2100      	movs	r1, #0
  4003f8:	4648      	mov	r0, r9
  4003fa:	f000 f891 	bl	400520 <map>
            motor_set_power(motors[1], power_right);
  4003fe:	9011      	str	r0, [sp, #68]	; 0x44
  400400:	462a      	mov	r2, r5
  400402:	f104 0164 	add.w	r1, r4, #100	; 0x64
  400406:	4668      	mov	r0, sp
  400408:	f002 fb92 	bl	402b30 <memcpy>
  40040c:	f104 0354 	add.w	r3, r4, #84	; 0x54
  400410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  400412:	f001 f86d 	bl	4014f0 <motor_set_power>


            if (config.log_imu) {
  400416:	4b2a      	ldr	r3, [pc, #168]	; (4004c0 <main+0x1cc>)
  400418:	7bdb      	ldrb	r3, [r3, #15]
  40041a:	2b00      	cmp	r3, #0
  40041c:	d0c6      	beq.n	4003ac <main+0xb8>
                if (cph_get_millis() >= f_log_timeout) {
  40041e:	4b29      	ldr	r3, [pc, #164]	; (4004c4 <main+0x1d0>)
  400420:	681a      	ldr	r2, [r3, #0]
  400422:	4b29      	ldr	r3, [pc, #164]	; (4004c8 <main+0x1d4>)
  400424:	681b      	ldr	r3, [r3, #0]
  400426:	429a      	cmp	r2, r3
  400428:	d3c0      	bcc.n	4003ac <main+0xb8>
                    f_log_timeout = cph_get_millis() + 50;
  40042a:	4b26      	ldr	r3, [pc, #152]	; (4004c4 <main+0x1d0>)
  40042c:	681b      	ldr	r3, [r3, #0]
  40042e:	3332      	adds	r3, #50	; 0x32
  400430:	4a25      	ldr	r2, [pc, #148]	; (4004c8 <main+0x1d4>)
  400432:	6013      	str	r3, [r2, #0]
                    printf("roll/pitch/yaw error/pid: %f %f %f %f %f\r\n", ap.imu.x_axis, ap.imu.y_axis, ap.imu.z_axis, error, pid);
  400434:	6838      	ldr	r0, [r7, #0]
  400436:	f005 fa5d 	bl	4058f4 <__aeabi_f2d>
  40043a:	4682      	mov	sl, r0
  40043c:	468b      	mov	fp, r1
  40043e:	4b23      	ldr	r3, [pc, #140]	; (4004cc <main+0x1d8>)
  400440:	6818      	ldr	r0, [r3, #0]
  400442:	f005 fa57 	bl	4058f4 <__aeabi_f2d>
  400446:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40044a:	4b21      	ldr	r3, [pc, #132]	; (4004d0 <main+0x1dc>)
  40044c:	6818      	ldr	r0, [r3, #0]
  40044e:	f005 fa51 	bl	4058f4 <__aeabi_f2d>
  400452:	e9cd 0104 	strd	r0, r1, [sp, #16]
  400456:	68b8      	ldr	r0, [r7, #8]
  400458:	f005 fa4c 	bl	4058f4 <__aeabi_f2d>
  40045c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400460:	6878      	ldr	r0, [r7, #4]
  400462:	f005 fa47 	bl	4058f4 <__aeabi_f2d>
  400466:	e9cd 0100 	strd	r0, r1, [sp]
  40046a:	4652      	mov	r2, sl
  40046c:	465b      	mov	r3, fp
  40046e:	4819      	ldr	r0, [pc, #100]	; (4004d4 <main+0x1e0>)
  400470:	f002 ffe0 	bl	403434 <iprintf>
  400474:	e79a      	b.n	4003ac <main+0xb8>
    //         delay_ms(500); 
    //     }


    // }
}
  400476:	2000      	movs	r0, #0
  400478:	b017      	add	sp, #92	; 0x5c
  40047a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40047e:	bf00      	nop
  400480:	400e0800 	.word	0x400e0800
  400484:	20000504 	.word	0x20000504
  400488:	0040027d 	.word	0x0040027d
  40048c:	20000500 	.word	0x20000500
  400490:	004001fd 	.word	0x004001fd
  400494:	200004fc 	.word	0x200004fc
  400498:	07270e00 	.word	0x07270e00
  40049c:	20000078 	.word	0x20000078
  4004a0:	00406620 	.word	0x00406620
  4004a4:	0040663c 	.word	0x0040663c
  4004a8:	0020b28a 	.word	0x0020b28a
  4004ac:	00406638 	.word	0x00406638
  4004b0:	00406640 	.word	0x00406640
  4004b4:	00406658 	.word	0x00406658
  4004b8:	200007ec 	.word	0x200007ec
  4004bc:	20000534 	.word	0x20000534
  4004c0:	200006d4 	.word	0x200006d4
  4004c4:	20000208 	.word	0x20000208
  4004c8:	20000204 	.word	0x20000204
  4004cc:	20000454 	.word	0x20000454
  4004d0:	20000460 	.word	0x20000460
  4004d4:	00406670 	.word	0x00406670

004004d8 <config_init>:
	// config.axis_swap_xy = false;
	// config.fpv_freeze_pitch = false;
	// config.fpv_freeze_roll = false;
	// config.max_pwm_fpv_pitch = 80;
	// config.max_pwm_fpv_roll = 80;
    config.gyro_calibrate = true;
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <config_init+0x10>)
  4004da:	2201      	movs	r2, #1
  4004dc:	701a      	strb	r2, [r3, #0]
	config.accel_calibrate = false;
  4004de:	2200      	movs	r2, #0
  4004e0:	705a      	strb	r2, [r3, #1]
	config.log_motor = false;
  4004e2:	739a      	strb	r2, [r3, #14]
	config.log_imu = false;
  4004e4:	73da      	strb	r2, [r3, #15]
  4004e6:	4770      	bx	lr
  4004e8:	200006d4 	.word	0x200006d4

004004ec <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  4004ec:	4a02      	ldr	r2, [pc, #8]	; (4004f8 <SysTick_Handler+0xc>)
  4004ee:	6813      	ldr	r3, [r2, #0]
  4004f0:	3301      	adds	r3, #1
  4004f2:	6013      	str	r3, [r2, #0]
  4004f4:	4770      	bx	lr
  4004f6:	bf00      	nop
  4004f8:	20000208 	.word	0x20000208

004004fc <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  4004fc:	4b05      	ldr	r3, [pc, #20]	; (400514 <cph_millis_init+0x18>)
  4004fe:	4a06      	ldr	r2, [pc, #24]	; (400518 <cph_millis_init+0x1c>)
  400500:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400502:	21f0      	movs	r1, #240	; 0xf0
  400504:	4a05      	ldr	r2, [pc, #20]	; (40051c <cph_millis_init+0x20>)
  400506:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40050a:	2200      	movs	r2, #0
  40050c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40050e:	2207      	movs	r2, #7
  400510:	601a      	str	r2, [r3, #0]
  400512:	4770      	bx	lr
  400514:	e000e010 	.word	0xe000e010
  400518:	0001d4bf 	.word	0x0001d4bf
  40051c:	e000ed00 	.word	0xe000ed00

00400520 <map>:
#include "cph_util.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  400520:	b410      	push	{r4}
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  400522:	1a40      	subs	r0, r0, r1
  400524:	9c01      	ldr	r4, [sp, #4]
  400526:	1ae4      	subs	r4, r4, r3
  400528:	fb04 f000 	mul.w	r0, r4, r0
  40052c:	1a52      	subs	r2, r2, r1
  40052e:	fb90 f0f2 	sdiv	r0, r0, r2
  400532:	4418      	add	r0, r3
  400534:	bc10      	pop	{r4}
  400536:	4770      	bx	lr

00400538 <init_buffer>:
	init_buffer();
	init_lines();
}

void init_buffer()
{
  400538:	b508      	push	{r3, lr}
	cli_line_index = 0;
  40053a:	2100      	movs	r1, #0
  40053c:	4b03      	ldr	r3, [pc, #12]	; (40054c <init_buffer+0x14>)
  40053e:	6019      	str	r1, [r3, #0]
	memset(cli_line_buffer, '\0', sizeof(cli_line_buffer));
  400540:	2281      	movs	r2, #129	; 0x81
  400542:	4803      	ldr	r0, [pc, #12]	; (400550 <init_buffer+0x18>)
  400544:	f002 faff 	bl	402b46 <memset>
  400548:	bd08      	pop	{r3, pc}
  40054a:	bf00      	nop
  40054c:	20000414 	.word	0x20000414
  400550:	200006e4 	.word	0x200006e4

00400554 <init_lines>:
}

void init_lines()
{
  400554:	b508      	push	{r3, lr}
	memset(cli_lines, '\0', sizeof(cli_lines));
  400556:	2281      	movs	r2, #129	; 0x81
  400558:	2100      	movs	r1, #0
  40055a:	4802      	ldr	r0, [pc, #8]	; (400564 <init_lines+0x10>)
  40055c:	f002 faf3 	bl	402b46 <memset>
  400560:	bd08      	pop	{r3, pc}
  400562:	bf00      	nop
  400564:	20000768 	.word	0x20000768

00400568 <cli_init>:
char cli_line_buffer[CLI_MAX_CHARS+1];
int cli_line_index = 0;


void cli_init()
{
  400568:	b508      	push	{r3, lr}
	init_buffer();
  40056a:	f7ff ffe5 	bl	400538 <init_buffer>
	init_lines();
  40056e:	f7ff fff1 	bl	400554 <init_lines>
  400572:	bd08      	pop	{r3, pc}

00400574 <cli_handle_command>:

}

//printf("motor0: %d\r\n", atoi(parm));
void cli_handle_command(char *cmd, char *parm)
{
  400574:	b570      	push	{r4, r5, r6, lr}
  400576:	b092      	sub	sp, #72	; 0x48
  400578:	4604      	mov	r4, r0
  40057a:	460d      	mov	r5, r1

	if (strcmp(cmd, "log_motor") == 0) {
  40057c:	493e      	ldr	r1, [pc, #248]	; (400678 <cli_handle_command+0x104>)
  40057e:	f003 f885 	bl	40368c <strcmp>
  400582:	b950      	cbnz	r0, 40059a <cli_handle_command+0x26>
		config.log_motor = atoi(parm);
  400584:	4628      	mov	r0, r5
  400586:	f002 faa3 	bl	402ad0 <atoi>
  40058a:	1c01      	adds	r1, r0, #0
  40058c:	bf18      	it	ne
  40058e:	2101      	movne	r1, #1
  400590:	4b3a      	ldr	r3, [pc, #232]	; (40067c <cli_handle_command+0x108>)
  400592:	7399      	strb	r1, [r3, #14]
		printf("log_motor_power: %d\r\n", config.log_motor);
  400594:	483a      	ldr	r0, [pc, #232]	; (400680 <cli_handle_command+0x10c>)
  400596:	f002 ff4d 	bl	403434 <iprintf>
	}

	if (strcmp(cmd, "log_imu") == 0) {
  40059a:	493a      	ldr	r1, [pc, #232]	; (400684 <cli_handle_command+0x110>)
  40059c:	4620      	mov	r0, r4
  40059e:	f003 f875 	bl	40368c <strcmp>
  4005a2:	b950      	cbnz	r0, 4005ba <cli_handle_command+0x46>
		config.log_imu = atoi(parm);
  4005a4:	4628      	mov	r0, r5
  4005a6:	f002 fa93 	bl	402ad0 <atoi>
  4005aa:	1c01      	adds	r1, r0, #0
  4005ac:	bf18      	it	ne
  4005ae:	2101      	movne	r1, #1
  4005b0:	4b32      	ldr	r3, [pc, #200]	; (40067c <cli_handle_command+0x108>)
  4005b2:	73d9      	strb	r1, [r3, #15]
		printf("log_imu: %d\r\n", config.log_imu);
  4005b4:	4834      	ldr	r0, [pc, #208]	; (400688 <cli_handle_command+0x114>)
  4005b6:	f002 ff3d 	bl	403434 <iprintf>
	}	

	if (strcmp(cmd, "motor_min") == 0) {
  4005ba:	4934      	ldr	r1, [pc, #208]	; (40068c <cli_handle_command+0x118>)
  4005bc:	4620      	mov	r0, r4
  4005be:	f003 f865 	bl	40368c <strcmp>
  4005c2:	b9c8      	cbnz	r0, 4005f8 <cli_handle_command+0x84>
		printf("motor min command issued\r\n");
  4005c4:	4832      	ldr	r0, [pc, #200]	; (400690 <cli_handle_command+0x11c>)
  4005c6:	f002 ff35 	bl	403434 <iprintf>
		motor_min(motors[0]);
  4005ca:	4d32      	ldr	r5, [pc, #200]	; (400694 <cli_handle_command+0x120>)
  4005cc:	2644      	movs	r6, #68	; 0x44
  4005ce:	4632      	mov	r2, r6
  4005d0:	f105 0110 	add.w	r1, r5, #16
  4005d4:	4668      	mov	r0, sp
  4005d6:	f002 faab 	bl	402b30 <memcpy>
  4005da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4005de:	f000 ffa3 	bl	401528 <motor_min>
		motor_min(motors[1]);
  4005e2:	4632      	mov	r2, r6
  4005e4:	f105 0164 	add.w	r1, r5, #100	; 0x64
  4005e8:	4668      	mov	r0, sp
  4005ea:	f002 faa1 	bl	402b30 <memcpy>
  4005ee:	3554      	adds	r5, #84	; 0x54
  4005f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  4005f4:	f000 ff98 	bl	401528 <motor_min>
	}

	if (strcmp(cmd, "motor_mid") == 0) {
  4005f8:	4927      	ldr	r1, [pc, #156]	; (400698 <cli_handle_command+0x124>)
  4005fa:	4620      	mov	r0, r4
  4005fc:	f003 f846 	bl	40368c <strcmp>
  400600:	b9c8      	cbnz	r0, 400636 <cli_handle_command+0xc2>
		printf("motor mid command issued\r\n");
  400602:	4826      	ldr	r0, [pc, #152]	; (40069c <cli_handle_command+0x128>)
  400604:	f002 ff16 	bl	403434 <iprintf>
		motor_mid(motors[0]);
  400608:	4d22      	ldr	r5, [pc, #136]	; (400694 <cli_handle_command+0x120>)
  40060a:	2644      	movs	r6, #68	; 0x44
  40060c:	4632      	mov	r2, r6
  40060e:	f105 0110 	add.w	r1, r5, #16
  400612:	4668      	mov	r0, sp
  400614:	f002 fa8c 	bl	402b30 <memcpy>
  400618:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  40061c:	f000 ffa0 	bl	401560 <motor_mid>
		motor_mid(motors[1]);
  400620:	4632      	mov	r2, r6
  400622:	f105 0164 	add.w	r1, r5, #100	; 0x64
  400626:	4668      	mov	r0, sp
  400628:	f002 fa82 	bl	402b30 <memcpy>
  40062c:	3554      	adds	r5, #84	; 0x54
  40062e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400632:	f000 ff95 	bl	401560 <motor_mid>
	}

	if (strcmp(cmd, "motor_max") == 0) {
  400636:	491a      	ldr	r1, [pc, #104]	; (4006a0 <cli_handle_command+0x12c>)
  400638:	4620      	mov	r0, r4
  40063a:	f003 f827 	bl	40368c <strcmp>
  40063e:	b9c8      	cbnz	r0, 400674 <cli_handle_command+0x100>
		printf("motor max command issued\r\n");
  400640:	4818      	ldr	r0, [pc, #96]	; (4006a4 <cli_handle_command+0x130>)
  400642:	f002 fef7 	bl	403434 <iprintf>
		motor_max(motors[0]);
  400646:	4c13      	ldr	r4, [pc, #76]	; (400694 <cli_handle_command+0x120>)
  400648:	2544      	movs	r5, #68	; 0x44
  40064a:	462a      	mov	r2, r5
  40064c:	f104 0110 	add.w	r1, r4, #16
  400650:	4668      	mov	r0, sp
  400652:	f002 fa6d 	bl	402b30 <memcpy>
  400656:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  40065a:	f000 ff9d 	bl	401598 <motor_max>
		motor_max(motors[1]);
  40065e:	462a      	mov	r2, r5
  400660:	f104 0164 	add.w	r1, r4, #100	; 0x64
  400664:	4668      	mov	r0, sp
  400666:	f002 fa63 	bl	402b30 <memcpy>
  40066a:	3454      	adds	r4, #84	; 0x54
  40066c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  400670:	f000 ff92 	bl	401598 <motor_max>
	} 
}
  400674:	b012      	add	sp, #72	; 0x48
  400676:	bd70      	pop	{r4, r5, r6, pc}
  400678:	0040669c 	.word	0x0040669c
  40067c:	200006d4 	.word	0x200006d4
  400680:	004066a8 	.word	0x004066a8
  400684:	004066c0 	.word	0x004066c0
  400688:	004066c8 	.word	0x004066c8
  40068c:	004066d8 	.word	0x004066d8
  400690:	004066e4 	.word	0x004066e4
  400694:	20000534 	.word	0x20000534
  400698:	00406700 	.word	0x00406700
  40069c:	0040670c 	.word	0x0040670c
  4006a0:	00406728 	.word	0x00406728
  4006a4:	00406734 	.word	0x00406734

004006a8 <cli_put_char>:
	return false;
}

void cli_put_char(unsigned char c)
{
	int i = (unsigned int)(cli_buffer.head + 1) % CLI_RX_BUFFER_SIZE;
  4006a8:	4a07      	ldr	r2, [pc, #28]	; (4006c8 <cli_put_char+0x20>)
  4006aa:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  4006ae:	1c4b      	adds	r3, r1, #1
  4006b0:	f3c3 0308 	ubfx	r3, r3, #0, #9

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != cli_buffer.tail) {
  4006b4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  4006b8:	4293      	cmp	r3, r2
  4006ba:	d003      	beq.n	4006c4 <cli_put_char+0x1c>
		cli_buffer.buffer[cli_buffer.head] = c;
  4006bc:	4a02      	ldr	r2, [pc, #8]	; (4006c8 <cli_put_char+0x20>)
  4006be:	5450      	strb	r0, [r2, r1]
		cli_buffer.head = i;
  4006c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  4006c4:	4770      	bx	lr
  4006c6:	bf00      	nop
  4006c8:	2000020c 	.word	0x2000020c

004006cc <cli_read_device>:
{
	memset(cli_lines, '\0', sizeof(cli_lines));
}

void cli_read_device(void)
{
  4006cc:	b500      	push	{lr}
  4006ce:	b083      	sub	sp, #12
    uint8_t uc_char;
	uint8_t uc_flag;

	if (uart_is_rx_ready(CONSOLE_UART)) {
  4006d0:	4808      	ldr	r0, [pc, #32]	; (4006f4 <cli_read_device+0x28>)
  4006d2:	f001 fc15 	bl	401f00 <uart_is_rx_ready>
  4006d6:	b150      	cbz	r0, 4006ee <cli_read_device+0x22>
		uc_flag = uart_read(CONSOLE_UART, &uc_char);
  4006d8:	f10d 0107 	add.w	r1, sp, #7
  4006dc:	4805      	ldr	r0, [pc, #20]	; (4006f4 <cli_read_device+0x28>)
  4006de:	f001 fc1b 	bl	401f18 <uart_read>
		if (!uc_flag) {
  4006e2:	b2c0      	uxtb	r0, r0
  4006e4:	b918      	cbnz	r0, 4006ee <cli_read_device+0x22>
			cli_put_char(uc_char);
  4006e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  4006ea:	f7ff ffdd 	bl	4006a8 <cli_put_char>
		}
	}
}
  4006ee:	b003      	add	sp, #12
  4006f0:	f85d fb04 	ldr.w	pc, [sp], #4
  4006f4:	400e0800 	.word	0x400e0800

004006f8 <cli_data_available>:
}

uint8_t cli_data_available()
{

	return (uint8_t)(CLI_RX_BUFFER_SIZE + cli_buffer.head - cli_buffer.tail) % CLI_RX_BUFFER_SIZE;
  4006f8:	4a03      	ldr	r2, [pc, #12]	; (400708 <cli_data_available+0x10>)
  4006fa:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
  4006fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
  400702:	1a18      	subs	r0, r3, r0
}
  400704:	b2c0      	uxtb	r0, r0
  400706:	4770      	bx	lr
  400708:	2000020c 	.word	0x2000020c

0040070c <cli_data_read>:

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
  40070c:	4a08      	ldr	r2, [pc, #32]	; (400730 <cli_data_read+0x24>)
  40070e:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
  400712:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
  400716:	429a      	cmp	r2, r3
  400718:	d007      	beq.n	40072a <cli_data_read+0x1e>
		return -1;
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
  40071a:	4a05      	ldr	r2, [pc, #20]	; (400730 <cli_data_read+0x24>)
  40071c:	5cd0      	ldrb	r0, [r2, r3]
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
  40071e:	3301      	adds	r3, #1
  400720:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400724:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		return c;
  400728:	4770      	bx	lr

uint8_t cli_data_read(void)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (cli_buffer.head == cli_buffer.tail) {
		return -1;
  40072a:	20ff      	movs	r0, #255	; 0xff
	} else {
		uint8_t c = cli_buffer.buffer[cli_buffer.tail];
		cli_buffer.tail = (unsigned int)(cli_buffer.tail + 1) % CLI_RX_BUFFER_SIZE;
		return c;
	}
  40072c:	4770      	bx	lr
  40072e:	bf00      	nop
  400730:	2000020c 	.word	0x2000020c

00400734 <handle_data>:
	} 
}

// check to see if we have a new line
bool handle_data()
{
  400734:	b508      	push	{r3, lr}

	char c = cli_data_read();
  400736:	f7ff ffe9 	bl	40070c <cli_data_read>

	// ignore null terminated strings
	if(c == '\0') return false;
  40073a:	b190      	cbz	r0, 400762 <handle_data+0x2e>
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  40073c:	4b0c      	ldr	r3, [pc, #48]	; (400770 <handle_data+0x3c>)
  40073e:	681b      	ldr	r3, [r3, #0]
  400740:	2b7f      	cmp	r3, #127	; 0x7f
  400742:	dc10      	bgt.n	400766 <handle_data+0x32>

	// store character in cli_line_buffer
	cli_line_buffer[cli_line_index] = c;
  400744:	490b      	ldr	r1, [pc, #44]	; (400774 <handle_data+0x40>)
  400746:	54c8      	strb	r0, [r1, r3]
	cli_line_index++;
  400748:	3301      	adds	r3, #1
  40074a:	4909      	ldr	r1, [pc, #36]	; (400770 <handle_data+0x3c>)
  40074c:	600b      	str	r3, [r1, #0]

	// check for end of line
	if(c == CLI_TKEND) {
  40074e:	280d      	cmp	r0, #13
  400750:	d10b      	bne.n	40076a <handle_data+0x36>
		// copy new message into buffer
		strcpy(cli_lines, cli_line_buffer);
  400752:	4908      	ldr	r1, [pc, #32]	; (400774 <handle_data+0x40>)
  400754:	4808      	ldr	r0, [pc, #32]	; (400778 <handle_data+0x44>)
  400756:	f002 ffa3 	bl	4036a0 <strcpy>
		init_buffer();
  40075a:	f7ff feed 	bl	400538 <init_buffer>
		return true;
  40075e:	2001      	movs	r0, #1
  400760:	bd08      	pop	{r3, pc}
{

	char c = cli_data_read();

	// ignore null terminated strings
	if(c == '\0') return false;
  400762:	2000      	movs	r0, #0
  400764:	bd08      	pop	{r3, pc}
	// prevent buffer overrun
	if(cli_line_index >= CLI_MAX_CHARS) return false;
  400766:	2000      	movs	r0, #0
  400768:	bd08      	pop	{r3, pc}
		strcpy(cli_lines, cli_line_buffer);
		init_buffer();
		return true;
	}

	return false;
  40076a:	2000      	movs	r0, #0
}
  40076c:	bd08      	pop	{r3, pc}
  40076e:	bf00      	nop
  400770:	20000414 	.word	0x20000414
  400774:	200006e4 	.word	0x200006e4
  400778:	20000768 	.word	0x20000768

0040077c <cli_tick>:
}



void cli_tick()
{
  40077c:	b530      	push	{r4, r5, lr}
  40077e:	b083      	sub	sp, #12
	// read the serial port
	cli_read_device();
  400780:	f7ff ffa4 	bl	4006cc <cli_read_device>

	if (cli_data_available()) {
  400784:	f7ff ffb8 	bl	4006f8 <cli_data_available>
  400788:	b1e8      	cbz	r0, 4007c6 <cli_tick+0x4a>
		if (handle_data()) {
  40078a:	f7ff ffd3 	bl	400734 <handle_data>
  40078e:	b1d0      	cbz	r0, 4007c6 <cli_tick+0x4a>
			//config_test();

			char *saveptr;
			char *cmd, *parm;

			cmd = strtok_r(cli_lines, CLI_DELIM, &saveptr);
  400790:	4d0e      	ldr	r5, [pc, #56]	; (4007cc <cli_tick+0x50>)
  400792:	aa01      	add	r2, sp, #4
  400794:	4629      	mov	r1, r5
  400796:	480e      	ldr	r0, [pc, #56]	; (4007d0 <cli_tick+0x54>)
  400798:	f002 ffbd 	bl	403716 <strtok_r>
  40079c:	4604      	mov	r4, r0
			parm = strtok_r(NULL, CLI_DELIM, &saveptr);
  40079e:	aa01      	add	r2, sp, #4
  4007a0:	4629      	mov	r1, r5
  4007a2:	2000      	movs	r0, #0
  4007a4:	f002 ffb7 	bl	403716 <strtok_r>
  4007a8:	4605      	mov	r5, r0

			printf("cmd=%s\r\n", cmd);
  4007aa:	4621      	mov	r1, r4
  4007ac:	4809      	ldr	r0, [pc, #36]	; (4007d4 <cli_tick+0x58>)
  4007ae:	f002 fe41 	bl	403434 <iprintf>
			printf("parm=%s\r\n", parm);
  4007b2:	4629      	mov	r1, r5
  4007b4:	4808      	ldr	r0, [pc, #32]	; (4007d8 <cli_tick+0x5c>)
  4007b6:	f002 fe3d 	bl	403434 <iprintf>
			cli_handle_command(cmd, parm);
  4007ba:	4629      	mov	r1, r5
  4007bc:	4620      	mov	r0, r4
  4007be:	f7ff fed9 	bl	400574 <cli_handle_command>
			// if(parm != NULL)
			// 	config_set(cmd, parm);


			// reset cli_lines
			init_lines();
  4007c2:	f7ff fec7 	bl	400554 <init_lines>

		}
	}

}
  4007c6:	b003      	add	sp, #12
  4007c8:	bd30      	pop	{r4, r5, pc}
  4007ca:	bf00      	nop
  4007cc:	00406750 	.word	0x00406750
  4007d0:	20000768 	.word	0x20000768
  4007d4:	00406754 	.word	0x00406754
  4007d8:	00406760 	.word	0x00406760

004007dc <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  4007dc:	b500      	push	{lr}
  4007de:	b089      	sub	sp, #36	; 0x24
  4007e0:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  4007e4:	2368      	movs	r3, #104	; 0x68
  4007e6:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  4007ea:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  4007ee:	2301      	movs	r3, #1
  4007f0:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  4007f2:	f10d 0207 	add.w	r2, sp, #7
  4007f6:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  4007f8:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4007fa:	a903      	add	r1, sp, #12
  4007fc:	4806      	ldr	r0, [pc, #24]	; (400818 <write_register8+0x3c>)
  4007fe:	f001 f8b3 	bl	401968 <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  400802:	b910      	cbnz	r0, 40080a <write_register8+0x2e>
        puts("write_register: success\r\n");
  400804:	4805      	ldr	r0, [pc, #20]	; (40081c <write_register8+0x40>)
  400806:	f002 fe87 	bl	403518 <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  40080a:	4805      	ldr	r0, [pc, #20]	; (400820 <write_register8+0x44>)
  40080c:	f006 fa40 	bl	406c90 <__portable_delay_cycles_veneer>
}
  400810:	b009      	add	sp, #36	; 0x24
  400812:	f85d fb04 	ldr.w	pc, [sp], #4
  400816:	bf00      	nop
  400818:	40018000 	.word	0x40018000
  40081c:	0040676c 	.word	0x0040676c
  400820:	00014ed3 	.word	0x00014ed3

00400824 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  400824:	b510      	push	{r4, lr}
  400826:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400828:	4b0e      	ldr	r3, [pc, #56]	; (400864 <read_register8+0x40>)
  40082a:	2200      	movs	r2, #0
  40082c:	601a      	str	r2, [r3, #0]
  40082e:	605a      	str	r2, [r3, #4]
  400830:	609a      	str	r2, [r3, #8]
  400832:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  400834:	2268      	movs	r2, #104	; 0x68
  400836:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  40083a:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  40083e:	2201      	movs	r2, #1
  400840:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  400842:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  400844:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400846:	a901      	add	r1, sp, #4
  400848:	4807      	ldr	r0, [pc, #28]	; (400868 <read_register8+0x44>)
  40084a:	f001 f825 	bl	401898 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  40084e:	b910      	cbnz	r0, 400856 <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  400850:	4b04      	ldr	r3, [pc, #16]	; (400864 <read_register8+0x40>)
  400852:	781c      	ldrb	r4, [r3, #0]
  400854:	e000      	b.n	400858 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  400856:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400858:	4804      	ldr	r0, [pc, #16]	; (40086c <read_register8+0x48>)
  40085a:	f006 fa19 	bl	406c90 <__portable_delay_cycles_veneer>

    return value;
}
  40085e:	4620      	mov	r0, r4
  400860:	b006      	add	sp, #24
  400862:	bd10      	pop	{r4, pc}
  400864:	20000418 	.word	0x20000418
  400868:	40018000 	.word	0x40018000
  40086c:	00014ed3 	.word	0x00014ed3

00400870 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  400870:	b510      	push	{r4, lr}
  400872:	b086      	sub	sp, #24
  400874:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  400876:	4b0c      	ldr	r3, [pc, #48]	; (4008a8 <read_bytes+0x38>)
  400878:	2100      	movs	r1, #0
  40087a:	6019      	str	r1, [r3, #0]
  40087c:	6059      	str	r1, [r3, #4]
  40087e:	6099      	str	r1, [r3, #8]
  400880:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  400882:	2368      	movs	r3, #104	; 0x68
  400884:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  400888:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  40088c:	2301      	movs	r3, #1
  40088e:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  400890:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  400892:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400894:	a901      	add	r1, sp, #4
  400896:	4805      	ldr	r0, [pc, #20]	; (4008ac <read_bytes+0x3c>)
  400898:	f000 fffe 	bl	401898 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  40089c:	4804      	ldr	r0, [pc, #16]	; (4008b0 <read_bytes+0x40>)
  40089e:	f006 f9f7 	bl	406c90 <__portable_delay_cycles_veneer>

    return length;
}
  4008a2:	b2e0      	uxtb	r0, r4
  4008a4:	b006      	add	sp, #24
  4008a6:	bd10      	pop	{r4, pc}
  4008a8:	20000418 	.word	0x20000418
  4008ac:	40018000 	.word	0x40018000
  4008b0:	00014ed3 	.word	0x00014ed3

004008b4 <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  4008b4:	b570      	push	{r4, r5, r6, lr}
  4008b6:	4604      	mov	r4, r0
  4008b8:	460d      	mov	r5, r1
  4008ba:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  4008bc:	f7ff ffb2 	bl	400824 <read_register8>

    if (state) {
  4008c0:	b126      	cbz	r6, 4008cc <write_register_bit+0x18>
        value |= (1 << pos);
  4008c2:	2101      	movs	r1, #1
  4008c4:	40a9      	lsls	r1, r5
  4008c6:	4301      	orrs	r1, r0
  4008c8:	b2c9      	uxtb	r1, r1
  4008ca:	e004      	b.n	4008d6 <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  4008cc:	2101      	movs	r1, #1
  4008ce:	40a9      	lsls	r1, r5
  4008d0:	ea20 0101 	bic.w	r1, r0, r1
  4008d4:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  4008d6:	4620      	mov	r0, r4
  4008d8:	f7ff ff80 	bl	4007dc <write_register8>
  4008dc:	bd70      	pop	{r4, r5, r6, pc}
  4008de:	bf00      	nop

004008e0 <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  4008e0:	b510      	push	{r4, lr}
  4008e2:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  4008e4:	f7ff ff9e 	bl	400824 <read_register8>
    return ((value >> pos) & 1);
  4008e8:	4120      	asrs	r0, r4
}
  4008ea:	f000 0001 	and.w	r0, r0, #1
  4008ee:	bd10      	pop	{r4, pc}

004008f0 <mpu_init>:

bool mpu_init(void)
{
  4008f0:	b500      	push	{lr}
  4008f2:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  4008f4:	4b0d      	ldr	r3, [pc, #52]	; (40092c <mpu_init+0x3c>)
  4008f6:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  4008f8:	4b0d      	ldr	r3, [pc, #52]	; (400930 <mpu_init+0x40>)
  4008fa:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  4008fc:	a901      	add	r1, sp, #4
  4008fe:	480d      	ldr	r0, [pc, #52]	; (400934 <mpu_init+0x44>)
  400900:	f000 ff9a 	bl	401838 <twi_master_init>
  400904:	b138      	cbz	r0, 400916 <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  400906:	480c      	ldr	r0, [pc, #48]	; (400938 <mpu_init+0x48>)
  400908:	f002 fe06 	bl	403518 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  40090c:	480b      	ldr	r0, [pc, #44]	; (40093c <mpu_init+0x4c>)
  40090e:	f006 f9bf 	bl	406c90 <__portable_delay_cycles_veneer>
        return false;
  400912:	2000      	movs	r0, #0
  400914:	e006      	b.n	400924 <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  400916:	480a      	ldr	r0, [pc, #40]	; (400940 <mpu_init+0x50>)
  400918:	f002 fdfe 	bl	403518 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  40091c:	4807      	ldr	r0, [pc, #28]	; (40093c <mpu_init+0x4c>)
  40091e:	f006 f9b7 	bl	406c90 <__portable_delay_cycles_veneer>
        return true;
  400922:	2001      	movs	r0, #1
    }
    
}
  400924:	b005      	add	sp, #20
  400926:	f85d fb04 	ldr.w	pc, [sp], #4
  40092a:	bf00      	nop
  40092c:	07270e00 	.word	0x07270e00
  400930:	00061a80 	.word	0x00061a80
  400934:	40018000 	.word	0x40018000
  400938:	00406788 	.word	0x00406788
  40093c:	00014ed3 	.word	0x00014ed3
  400940:	004067a4 	.word	0x004067a4

00400944 <mpu_probe>:

bool mpu_probe(void)
{
  400944:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  400946:	2168      	movs	r1, #104	; 0x68
  400948:	4809      	ldr	r0, [pc, #36]	; (400970 <mpu_probe+0x2c>)
  40094a:	f001 f84f 	bl	4019ec <twi_probe>
  40094e:	b138      	cbz	r0, 400960 <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  400950:	4808      	ldr	r0, [pc, #32]	; (400974 <mpu_probe+0x30>)
  400952:	f002 fde1 	bl	403518 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400956:	4808      	ldr	r0, [pc, #32]	; (400978 <mpu_probe+0x34>)
  400958:	f006 f99a 	bl	406c90 <__portable_delay_cycles_veneer>
        return false;
  40095c:	2000      	movs	r0, #0
  40095e:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400960:	4806      	ldr	r0, [pc, #24]	; (40097c <mpu_probe+0x38>)
  400962:	f002 fdd9 	bl	403518 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  400966:	4804      	ldr	r0, [pc, #16]	; (400978 <mpu_probe+0x34>)
  400968:	f006 f992 	bl	406c90 <__portable_delay_cycles_veneer>
        return true;
  40096c:	2001      	movs	r0, #1
    }
}
  40096e:	bd08      	pop	{r3, pc}
  400970:	40018000 	.word	0x40018000
  400974:	004067c0 	.word	0x004067c0
  400978:	00014ed3 	.word	0x00014ed3
  40097c:	004067d4 	.word	0x004067d4

00400980 <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  400980:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  400982:	2075      	movs	r0, #117	; 0x75
  400984:	f7ff ff4e 	bl	400824 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400988:	bd08      	pop	{r3, pc}
  40098a:	bf00      	nop

0040098c <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  40098c:	b510      	push	{r4, lr}
  40098e:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400990:	206b      	movs	r0, #107	; 0x6b
  400992:	f7ff ff47 	bl	400824 <read_register8>
    value &= 0b11111000; // mask
  400996:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  40099a:	4321      	orrs	r1, r4
  40099c:	206b      	movs	r0, #107	; 0x6b
  40099e:	f7ff ff1d 	bl	4007dc <write_register8>
  4009a2:	bd10      	pop	{r4, pc}

004009a4 <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  4009a4:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  4009a6:	206b      	movs	r0, #107	; 0x6b
  4009a8:	f7ff ff3c 	bl	400824 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  4009ac:	f000 0007 	and.w	r0, r0, #7
  4009b0:	bd08      	pop	{r3, pc}
  4009b2:	bf00      	nop

004009b4 <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  4009b4:	b510      	push	{r4, lr}
  4009b6:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  4009b8:	2803      	cmp	r0, #3
  4009ba:	d812      	bhi.n	4009e2 <mpu_set_gyro_scale+0x2e>
  4009bc:	e8df f000 	tbb	[pc, r0]
  4009c0:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  4009c4:	4a0d      	ldr	r2, [pc, #52]	; (4009fc <mpu_set_gyro_scale+0x48>)
  4009c6:	4b0e      	ldr	r3, [pc, #56]	; (400a00 <mpu_set_gyro_scale+0x4c>)
  4009c8:	601a      	str	r2, [r3, #0]
            break;
  4009ca:	e00a      	b.n	4009e2 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  4009cc:	4a0d      	ldr	r2, [pc, #52]	; (400a04 <mpu_set_gyro_scale+0x50>)
  4009ce:	4b0c      	ldr	r3, [pc, #48]	; (400a00 <mpu_set_gyro_scale+0x4c>)
  4009d0:	601a      	str	r2, [r3, #0]
            break;
  4009d2:	e006      	b.n	4009e2 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  4009d4:	4a0c      	ldr	r2, [pc, #48]	; (400a08 <mpu_set_gyro_scale+0x54>)
  4009d6:	4b0a      	ldr	r3, [pc, #40]	; (400a00 <mpu_set_gyro_scale+0x4c>)
  4009d8:	601a      	str	r2, [r3, #0]
            break;
  4009da:	e002      	b.n	4009e2 <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  4009dc:	4a0b      	ldr	r2, [pc, #44]	; (400a0c <mpu_set_gyro_scale+0x58>)
  4009de:	4b08      	ldr	r3, [pc, #32]	; (400a00 <mpu_set_gyro_scale+0x4c>)
  4009e0:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  4009e2:	201b      	movs	r0, #27
  4009e4:	f7ff ff1e 	bl	400824 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  4009e8:	f020 0018 	bic.w	r0, r0, #24
  4009ec:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  4009f0:	b2c9      	uxtb	r1, r1
  4009f2:	201b      	movs	r0, #27
  4009f4:	f7ff fef2 	bl	4007dc <write_register8>
  4009f8:	bd10      	pop	{r4, pc}
  4009fa:	bf00      	nop
  4009fc:	3bfa1e3f 	.word	0x3bfa1e3f
  400a00:	2000043c 	.word	0x2000043c
  400a04:	3c7a2270 	.word	0x3c7a2270
  400a08:	3cf9bfdf 	.word	0x3cf9bfdf
  400a0c:	3d79c0ec 	.word	0x3d79c0ec

00400a10 <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  400a10:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  400a12:	201b      	movs	r0, #27
  400a14:	f7ff ff06 	bl	400824 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  400a18:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  400a1c:	bd08      	pop	{r3, pc}
  400a1e:	bf00      	nop

00400a20 <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  400a20:	b510      	push	{r4, lr}
  400a22:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  400a24:	2803      	cmp	r0, #3
  400a26:	d812      	bhi.n	400a4e <mpu_set_accel_range+0x2e>
  400a28:	e8df f000 	tbb	[pc, r0]
  400a2c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  400a30:	4a0d      	ldr	r2, [pc, #52]	; (400a68 <mpu_set_accel_range+0x48>)
  400a32:	4b0e      	ldr	r3, [pc, #56]	; (400a6c <mpu_set_accel_range+0x4c>)
  400a34:	601a      	str	r2, [r3, #0]
            break;
  400a36:	e00a      	b.n	400a4e <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  400a38:	4a0d      	ldr	r2, [pc, #52]	; (400a70 <mpu_set_accel_range+0x50>)
  400a3a:	4b0c      	ldr	r3, [pc, #48]	; (400a6c <mpu_set_accel_range+0x4c>)
  400a3c:	601a      	str	r2, [r3, #0]
            break;   
  400a3e:	e006      	b.n	400a4e <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  400a40:	4a0c      	ldr	r2, [pc, #48]	; (400a74 <mpu_set_accel_range+0x54>)
  400a42:	4b0a      	ldr	r3, [pc, #40]	; (400a6c <mpu_set_accel_range+0x4c>)
  400a44:	601a      	str	r2, [r3, #0]
            break;   
  400a46:	e002      	b.n	400a4e <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400a48:	4a0b      	ldr	r2, [pc, #44]	; (400a78 <mpu_set_accel_range+0x58>)
  400a4a:	4b08      	ldr	r3, [pc, #32]	; (400a6c <mpu_set_accel_range+0x4c>)
  400a4c:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  400a4e:	201c      	movs	r0, #28
  400a50:	f7ff fee8 	bl	400824 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400a54:	f020 0018 	bic.w	r0, r0, #24
  400a58:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  400a5c:	b2c9      	uxtb	r1, r1
  400a5e:	201c      	movs	r0, #28
  400a60:	f7ff febc 	bl	4007dc <write_register8>
  400a64:	bd10      	pop	{r4, pc}
  400a66:	bf00      	nop
  400a68:	387fda40 	.word	0x387fda40
  400a6c:	20000428 	.word	0x20000428
  400a70:	38ffda40 	.word	0x38ffda40
  400a74:	397fda40 	.word	0x397fda40
  400a78:	39fff518 	.word	0x39fff518

00400a7c <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400a7c:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  400a7e:	4602      	mov	r2, r0
  400a80:	2106      	movs	r1, #6
  400a82:	206b      	movs	r0, #107	; 0x6b
  400a84:	f7ff ff16 	bl	4008b4 <write_register_bit>
  400a88:	bd08      	pop	{r3, pc}
  400a8a:	bf00      	nop

00400a8c <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400a8c:	b538      	push	{r3, r4, r5, lr}
  400a8e:	4605      	mov	r5, r0
  400a90:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  400a92:	4a11      	ldr	r2, [pc, #68]	; (400ad8 <mpu_begin+0x4c>)
  400a94:	2300      	movs	r3, #0
  400a96:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400a98:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400a9a:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400a9c:	2100      	movs	r1, #0
  400a9e:	4a0f      	ldr	r2, [pc, #60]	; (400adc <mpu_begin+0x50>)
  400aa0:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  400aa2:	4a0f      	ldr	r2, [pc, #60]	; (400ae0 <mpu_begin+0x54>)
  400aa4:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400aa6:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400aa8:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400aaa:	4a0e      	ldr	r2, [pc, #56]	; (400ae4 <mpu_begin+0x58>)
  400aac:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  400aae:	f7ff ff67 	bl	400980 <mpu_who_am_i>
  400ab2:	2868      	cmp	r0, #104	; 0x68
  400ab4:	d10d      	bne.n	400ad2 <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400ab6:	2001      	movs	r0, #1
  400ab8:	f7ff ff68 	bl	40098c <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400abc:	4628      	mov	r0, r5
  400abe:	f7ff ff79 	bl	4009b4 <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  400ac2:	4620      	mov	r0, r4
  400ac4:	f7ff ffac 	bl	400a20 <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400ac8:	2000      	movs	r0, #0
  400aca:	f7ff ffd7 	bl	400a7c <mpu_set_sleep_enabled>

    return true;
  400ace:	2001      	movs	r0, #1
  400ad0:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  400ad2:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  400ad4:	bd38      	pop	{r3, r4, r5, pc}
  400ad6:	bf00      	nop
  400ad8:	200006b8 	.word	0x200006b8
  400adc:	20000440 	.word	0x20000440
  400ae0:	20000684 	.word	0x20000684
  400ae4:	20000444 	.word	0x20000444

00400ae8 <mpu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  400ae8:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  400aea:	2106      	movs	r1, #6
  400aec:	206b      	movs	r0, #107	; 0x6b
  400aee:	f7ff fef7 	bl	4008e0 <read_register_bit>
}
  400af2:	bd08      	pop	{r3, pc}

00400af4 <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  400af4:	b570      	push	{r4, r5, r6, lr}
  400af6:	b082      	sub	sp, #8
  400af8:	4606      	mov	r6, r0
  400afa:	460d      	mov	r5, r1
  400afc:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400afe:	2300      	movs	r3, #0
  400b00:	9300      	str	r3, [sp, #0]
  400b02:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  400b06:	466a      	mov	r2, sp
  400b08:	2106      	movs	r1, #6
  400b0a:	2043      	movs	r0, #67	; 0x43
  400b0c:	f7ff feb0 	bl	400870 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400b10:	f89d 2000 	ldrb.w	r2, [sp]
  400b14:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400b18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400b1c:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400b1e:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400b22:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400b2a:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400b2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400b30:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400b34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400b38:	8023      	strh	r3, [r4, #0]

}
  400b3a:	b002      	add	sp, #8
  400b3c:	bd70      	pop	{r4, r5, r6, pc}
  400b3e:	bf00      	nop

00400b40 <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  400b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  400b42:	4d0c      	ldr	r5, [pc, #48]	; (400b74 <mpu_read_raw_gyro+0x34>)
  400b44:	4e0c      	ldr	r6, [pc, #48]	; (400b78 <mpu_read_raw_gyro+0x38>)
  400b46:	4f0d      	ldr	r7, [pc, #52]	; (400b7c <mpu_read_raw_gyro+0x3c>)
  400b48:	462a      	mov	r2, r5
  400b4a:	4631      	mov	r1, r6
  400b4c:	4638      	mov	r0, r7
  400b4e:	f7ff ffd1 	bl	400af4 <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  400b52:	4c0b      	ldr	r4, [pc, #44]	; (400b80 <mpu_read_raw_gyro+0x40>)
  400b54:	f9b7 0000 	ldrsh.w	r0, [r7]
  400b58:	f005 fb02 	bl	406160 <__aeabi_i2f>
  400b5c:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  400b5e:	f9b6 0000 	ldrsh.w	r0, [r6]
  400b62:	f005 fafd 	bl	406160 <__aeabi_i2f>
  400b66:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400b68:	f9b5 0000 	ldrsh.w	r0, [r5]
  400b6c:	f005 faf8 	bl	406160 <__aeabi_i2f>
  400b70:	60a0      	str	r0, [r4, #8]
  400b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b74:	200006a8 	.word	0x200006a8
  400b78:	20000520 	.word	0x20000520
  400b7c:	200006c4 	.word	0x200006c4
  400b80:	20000514 	.word	0x20000514

00400b84 <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  400b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b88:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400b8a:	f7ff ffd9 	bl	400b40 <mpu_read_raw_gyro>

    if (use_calibrate) {
  400b8e:	4b3d      	ldr	r3, [pc, #244]	; (400c84 <mpu_read_normalized_gyro+0x100>)
  400b90:	781b      	ldrb	r3, [r3, #0]
  400b92:	b30b      	cbz	r3, 400bd8 <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400b94:	4b3c      	ldr	r3, [pc, #240]	; (400c88 <mpu_read_normalized_gyro+0x104>)
  400b96:	681e      	ldr	r6, [r3, #0]
  400b98:	4d3c      	ldr	r5, [pc, #240]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400b9a:	4f3d      	ldr	r7, [pc, #244]	; (400c90 <mpu_read_normalized_gyro+0x10c>)
  400b9c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400c9c <mpu_read_normalized_gyro+0x118>
  400ba0:	f8d8 1000 	ldr.w	r1, [r8]
  400ba4:	6838      	ldr	r0, [r7, #0]
  400ba6:	f005 fa25 	bl	405ff4 <__aeabi_fsub>
  400baa:	4631      	mov	r1, r6
  400bac:	f005 fb2c 	bl	406208 <__aeabi_fmul>
  400bb0:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  400bb2:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400bb6:	6878      	ldr	r0, [r7, #4]
  400bb8:	f005 fa1c 	bl	405ff4 <__aeabi_fsub>
  400bbc:	4631      	mov	r1, r6
  400bbe:	f005 fb23 	bl	406208 <__aeabi_fmul>
  400bc2:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400bc4:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400bc8:	68b8      	ldr	r0, [r7, #8]
  400bca:	f005 fa13 	bl	405ff4 <__aeabi_fsub>
  400bce:	4631      	mov	r1, r6
  400bd0:	f005 fb1a 	bl	406208 <__aeabi_fmul>
  400bd4:	60a8      	str	r0, [r5, #8]
  400bd6:	e012      	b.n	400bfe <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400bd8:	4b2b      	ldr	r3, [pc, #172]	; (400c88 <mpu_read_normalized_gyro+0x104>)
  400bda:	681f      	ldr	r7, [r3, #0]
  400bdc:	4d2b      	ldr	r5, [pc, #172]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400bde:	4e2c      	ldr	r6, [pc, #176]	; (400c90 <mpu_read_normalized_gyro+0x10c>)
  400be0:	4639      	mov	r1, r7
  400be2:	6830      	ldr	r0, [r6, #0]
  400be4:	f005 fb10 	bl	406208 <__aeabi_fmul>
  400be8:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400bea:	4639      	mov	r1, r7
  400bec:	6870      	ldr	r0, [r6, #4]
  400bee:	f005 fb0b 	bl	406208 <__aeabi_fmul>
  400bf2:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400bf4:	4639      	mov	r1, r7
  400bf6:	68b0      	ldr	r0, [r6, #8]
  400bf8:	f005 fb06 	bl	406208 <__aeabi_fmul>
  400bfc:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  400bfe:	2100      	movs	r1, #0
  400c00:	4b24      	ldr	r3, [pc, #144]	; (400c94 <mpu_read_normalized_gyro+0x110>)
  400c02:	6818      	ldr	r0, [r3, #0]
  400c04:	f005 fc94 	bl	406530 <__aeabi_fcmpeq>
  400c08:	2800      	cmp	r0, #0
  400c0a:	d132      	bne.n	400c72 <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  400c0c:	4b1f      	ldr	r3, [pc, #124]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400c0e:	6818      	ldr	r0, [r3, #0]
  400c10:	f005 fcc0 	bl	406594 <__aeabi_f2iz>
  400c14:	2800      	cmp	r0, #0
  400c16:	bfb8      	it	lt
  400c18:	4240      	neglt	r0, r0
  400c1a:	f005 faa1 	bl	406160 <__aeabi_i2f>
  400c1e:	4b1e      	ldr	r3, [pc, #120]	; (400c98 <mpu_read_normalized_gyro+0x114>)
  400c20:	6819      	ldr	r1, [r3, #0]
  400c22:	f005 fc8f 	bl	406544 <__aeabi_fcmplt>
  400c26:	b110      	cbz	r0, 400c2e <mpu_read_normalized_gyro+0xaa>
  400c28:	2200      	movs	r2, #0
  400c2a:	4b18      	ldr	r3, [pc, #96]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400c2c:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  400c2e:	4b17      	ldr	r3, [pc, #92]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400c30:	6858      	ldr	r0, [r3, #4]
  400c32:	f005 fcaf 	bl	406594 <__aeabi_f2iz>
  400c36:	2800      	cmp	r0, #0
  400c38:	bfb8      	it	lt
  400c3a:	4240      	neglt	r0, r0
  400c3c:	f005 fa90 	bl	406160 <__aeabi_i2f>
  400c40:	4b15      	ldr	r3, [pc, #84]	; (400c98 <mpu_read_normalized_gyro+0x114>)
  400c42:	6859      	ldr	r1, [r3, #4]
  400c44:	f005 fc7e 	bl	406544 <__aeabi_fcmplt>
  400c48:	b110      	cbz	r0, 400c50 <mpu_read_normalized_gyro+0xcc>
  400c4a:	2200      	movs	r2, #0
  400c4c:	4b0f      	ldr	r3, [pc, #60]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400c4e:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400c50:	4b0e      	ldr	r3, [pc, #56]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400c52:	6898      	ldr	r0, [r3, #8]
  400c54:	f005 fc9e 	bl	406594 <__aeabi_f2iz>
  400c58:	2800      	cmp	r0, #0
  400c5a:	bfb8      	it	lt
  400c5c:	4240      	neglt	r0, r0
  400c5e:	f005 fa7f 	bl	406160 <__aeabi_i2f>
  400c62:	4b0d      	ldr	r3, [pc, #52]	; (400c98 <mpu_read_normalized_gyro+0x114>)
  400c64:	6899      	ldr	r1, [r3, #8]
  400c66:	f005 fc6d 	bl	406544 <__aeabi_fcmplt>
  400c6a:	b110      	cbz	r0, 400c72 <mpu_read_normalized_gyro+0xee>
  400c6c:	2200      	movs	r2, #0
  400c6e:	4b07      	ldr	r3, [pc, #28]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400c70:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  400c72:	4b06      	ldr	r3, [pc, #24]	; (400c8c <mpu_read_normalized_gyro+0x108>)
  400c74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400c7c:	4620      	mov	r0, r4
  400c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c82:	bf00      	nop
  400c84:	20000440 	.word	0x20000440
  400c88:	2000043c 	.word	0x2000043c
  400c8c:	200006c8 	.word	0x200006c8
  400c90:	20000514 	.word	0x20000514
  400c94:	20000444 	.word	0x20000444
  400c98:	20000684 	.word	0x20000684
  400c9c:	200006b8 	.word	0x200006b8

00400ca0 <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400ca0:	b570      	push	{r4, r5, r6, lr}
  400ca2:	b082      	sub	sp, #8
  400ca4:	4606      	mov	r6, r0
  400ca6:	460d      	mov	r5, r1
  400ca8:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400caa:	2300      	movs	r3, #0
  400cac:	9300      	str	r3, [sp, #0]
  400cae:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  400cb2:	466a      	mov	r2, sp
  400cb4:	2106      	movs	r1, #6
  400cb6:	203b      	movs	r0, #59	; 0x3b
  400cb8:	f7ff fdda 	bl	400870 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400cbc:	f89d 2000 	ldrb.w	r2, [sp]
  400cc0:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cc8:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400cca:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400cce:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400cd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400cd6:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400cd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400cdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400ce0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400ce4:	8023      	strh	r3, [r4, #0]
}
  400ce6:	b002      	add	sp, #8
  400ce8:	bd70      	pop	{r4, r5, r6, pc}
  400cea:	bf00      	nop

00400cec <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  400cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  400cee:	4d0c      	ldr	r5, [pc, #48]	; (400d20 <mpu_read_raw_acceleration+0x34>)
  400cf0:	4e0c      	ldr	r6, [pc, #48]	; (400d24 <mpu_read_raw_acceleration+0x38>)
  400cf2:	4f0d      	ldr	r7, [pc, #52]	; (400d28 <mpu_read_raw_acceleration+0x3c>)
  400cf4:	462a      	mov	r2, r5
  400cf6:	4631      	mov	r1, r6
  400cf8:	4638      	mov	r0, r7
  400cfa:	f7ff ffd1 	bl	400ca0 <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  400cfe:	4c0b      	ldr	r4, [pc, #44]	; (400d2c <mpu_read_raw_acceleration+0x40>)
  400d00:	f9b7 0000 	ldrsh.w	r0, [r7]
  400d04:	f005 fa2c 	bl	406160 <__aeabi_i2f>
  400d08:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  400d0a:	f9b6 0000 	ldrsh.w	r0, [r6]
  400d0e:	f005 fa27 	bl	406160 <__aeabi_i2f>
  400d12:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  400d14:	f9b5 0000 	ldrsh.w	r0, [r5]
  400d18:	f005 fa22 	bl	406160 <__aeabi_i2f>
  400d1c:	60a0      	str	r0, [r4, #8]
  400d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d20:	20000522 	.word	0x20000522
  400d24:	200006c6 	.word	0x200006c6
  400d28:	20000530 	.word	0x20000530
  400d2c:	200006ac 	.word	0x200006ac

00400d30 <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  400d30:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  400d32:	f7ff ffdb 	bl	400cec <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  400d36:	4b0e      	ldr	r3, [pc, #56]	; (400d70 <mpu_read_normalized_acceleration+0x40>)
  400d38:	681d      	ldr	r5, [r3, #0]
  400d3a:	4c0e      	ldr	r4, [pc, #56]	; (400d74 <mpu_read_normalized_acceleration+0x44>)
  400d3c:	4e0e      	ldr	r6, [pc, #56]	; (400d78 <mpu_read_normalized_acceleration+0x48>)
  400d3e:	6831      	ldr	r1, [r6, #0]
  400d40:	4628      	mov	r0, r5
  400d42:	f005 fa61 	bl	406208 <__aeabi_fmul>
  400d46:	490d      	ldr	r1, [pc, #52]	; (400d7c <mpu_read_normalized_acceleration+0x4c>)
  400d48:	f005 fa5e 	bl	406208 <__aeabi_fmul>
  400d4c:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  400d4e:	6871      	ldr	r1, [r6, #4]
  400d50:	4628      	mov	r0, r5
  400d52:	f005 fa59 	bl	406208 <__aeabi_fmul>
  400d56:	4909      	ldr	r1, [pc, #36]	; (400d7c <mpu_read_normalized_acceleration+0x4c>)
  400d58:	f005 fa56 	bl	406208 <__aeabi_fmul>
  400d5c:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400d5e:	68b1      	ldr	r1, [r6, #8]
  400d60:	4628      	mov	r0, r5
  400d62:	f005 fa51 	bl	406208 <__aeabi_fmul>
  400d66:	4905      	ldr	r1, [pc, #20]	; (400d7c <mpu_read_normalized_acceleration+0x4c>)
  400d68:	f005 fa4e 	bl	406208 <__aeabi_fmul>
  400d6c:	60a0      	str	r0, [r4, #8]
  400d6e:	bd70      	pop	{r4, r5, r6, pc}
  400d70:	20000428 	.word	0x20000428
  400d74:	2000069c 	.word	0x2000069c
  400d78:	200006ac 	.word	0x200006ac
  400d7c:	411ce80a 	.word	0x411ce80a

00400d80 <mpu_log_settings>:

    return norm_accel;
}

void mpu_log_settings(void)
{
  400d80:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400d82:	f7ff fdfd 	bl	400980 <mpu_who_am_i>
  400d86:	4601      	mov	r1, r0
  400d88:	482b      	ldr	r0, [pc, #172]	; (400e38 <mpu_log_settings+0xb8>)
  400d8a:	f002 fb53 	bl	403434 <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400d8e:	f7ff feab 	bl	400ae8 <mpu_get_sleep_enabled>
  400d92:	492a      	ldr	r1, [pc, #168]	; (400e3c <mpu_log_settings+0xbc>)
  400d94:	4a2a      	ldr	r2, [pc, #168]	; (400e40 <mpu_log_settings+0xc0>)
  400d96:	2800      	cmp	r0, #0
  400d98:	bf18      	it	ne
  400d9a:	4611      	movne	r1, r2
  400d9c:	4829      	ldr	r0, [pc, #164]	; (400e44 <mpu_log_settings+0xc4>)
  400d9e:	f002 fb49 	bl	403434 <iprintf>
    printf("Clock Source: ");
  400da2:	4829      	ldr	r0, [pc, #164]	; (400e48 <mpu_log_settings+0xc8>)
  400da4:	f002 fb46 	bl	403434 <iprintf>
    switch (mpu_get_clock_source()) {
  400da8:	f7ff fdfc 	bl	4009a4 <mpu_get_clock_source>
  400dac:	b110      	cbz	r0, 400db4 <mpu_log_settings+0x34>
  400dae:	2801      	cmp	r0, #1
  400db0:	d004      	beq.n	400dbc <mpu_log_settings+0x3c>
  400db2:	e006      	b.n	400dc2 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400db4:	4825      	ldr	r0, [pc, #148]	; (400e4c <mpu_log_settings+0xcc>)
  400db6:	f002 fb3d 	bl	403434 <iprintf>
        break;
  400dba:	e002      	b.n	400dc2 <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400dbc:	4824      	ldr	r0, [pc, #144]	; (400e50 <mpu_log_settings+0xd0>)
  400dbe:	f002 fb39 	bl	403434 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400dc2:	4824      	ldr	r0, [pc, #144]	; (400e54 <mpu_log_settings+0xd4>)
  400dc4:	f002 fb36 	bl	403434 <iprintf>
        switch (mpu_get_gyro_scale()) {
  400dc8:	f7ff fe22 	bl	400a10 <mpu_get_gyro_scale>
  400dcc:	2803      	cmp	r0, #3
  400dce:	d812      	bhi.n	400df6 <mpu_log_settings+0x76>
  400dd0:	e8df f000 	tbb	[pc, r0]
  400dd4:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400dd8:	481f      	ldr	r0, [pc, #124]	; (400e58 <mpu_log_settings+0xd8>)
  400dda:	f002 fb2b 	bl	403434 <iprintf>
        break;
  400dde:	e00a      	b.n	400df6 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400de0:	481e      	ldr	r0, [pc, #120]	; (400e5c <mpu_log_settings+0xdc>)
  400de2:	f002 fb27 	bl	403434 <iprintf>
        break;
  400de6:	e006      	b.n	400df6 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400de8:	481d      	ldr	r0, [pc, #116]	; (400e60 <mpu_log_settings+0xe0>)
  400dea:	f002 fb23 	bl	403434 <iprintf>
        break;
  400dee:	e002      	b.n	400df6 <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400df0:	481c      	ldr	r0, [pc, #112]	; (400e64 <mpu_log_settings+0xe4>)
  400df2:	f002 fb1f 	bl	403434 <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400df6:	4b1c      	ldr	r3, [pc, #112]	; (400e68 <mpu_log_settings+0xe8>)
  400df8:	7819      	ldrb	r1, [r3, #0]
  400dfa:	481c      	ldr	r0, [pc, #112]	; (400e6c <mpu_log_settings+0xec>)
  400dfc:	f002 fb1a 	bl	403434 <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400e00:	4b1b      	ldr	r3, [pc, #108]	; (400e70 <mpu_log_settings+0xf0>)
  400e02:	6818      	ldr	r0, [r3, #0]
  400e04:	f004 fd76 	bl	4058f4 <__aeabi_f2d>
  400e08:	4602      	mov	r2, r0
  400e0a:	460b      	mov	r3, r1
  400e0c:	4819      	ldr	r0, [pc, #100]	; (400e74 <mpu_log_settings+0xf4>)
  400e0e:	f002 fb11 	bl	403434 <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400e12:	4b19      	ldr	r3, [pc, #100]	; (400e78 <mpu_log_settings+0xf8>)
  400e14:	6818      	ldr	r0, [r3, #0]
  400e16:	f004 fd6d 	bl	4058f4 <__aeabi_f2d>
  400e1a:	4602      	mov	r2, r0
  400e1c:	460b      	mov	r3, r1
  400e1e:	4817      	ldr	r0, [pc, #92]	; (400e7c <mpu_log_settings+0xfc>)
  400e20:	f002 fb08 	bl	403434 <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400e24:	4b16      	ldr	r3, [pc, #88]	; (400e80 <mpu_log_settings+0x100>)
  400e26:	6818      	ldr	r0, [r3, #0]
  400e28:	f004 fd64 	bl	4058f4 <__aeabi_f2d>
  400e2c:	4602      	mov	r2, r0
  400e2e:	460b      	mov	r3, r1
  400e30:	4814      	ldr	r0, [pc, #80]	; (400e84 <mpu_log_settings+0x104>)
  400e32:	f002 faff 	bl	403434 <iprintf>
  400e36:	bd08      	pop	{r3, pc}
  400e38:	00406800 	.word	0x00406800
  400e3c:	004067f4 	.word	0x004067f4
  400e40:	004067ec 	.word	0x004067ec
  400e44:	00406810 	.word	0x00406810
  400e48:	00406824 	.word	0x00406824
  400e4c:	00406834 	.word	0x00406834
  400e50:	00406850 	.word	0x00406850
  400e54:	00406878 	.word	0x00406878
  400e58:	00406884 	.word	0x00406884
  400e5c:	00406890 	.word	0x00406890
  400e60:	0040689c 	.word	0x0040689c
  400e64:	004068a8 	.word	0x004068a8
  400e68:	20000440 	.word	0x20000440
  400e6c:	004068b4 	.word	0x004068b4
  400e70:	20000444 	.word	0x20000444
  400e74:	004068c8 	.word	0x004068c8
  400e78:	2000043c 	.word	0x2000043c
  400e7c:	004068e0 	.word	0x004068e0
  400e80:	20000428 	.word	0x20000428
  400e84:	004068f4 	.word	0x004068f4

00400e88 <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  400e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  400e8a:	4604      	mov	r4, r0
  400e8c:	b1d8      	cbz	r0, 400ec6 <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  400e8e:	4b13      	ldr	r3, [pc, #76]	; (400edc <mpu_set_threshold+0x54>)
  400e90:	781b      	ldrb	r3, [r3, #0]
  400e92:	b913      	cbnz	r3, 400e9a <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  400e94:	2032      	movs	r0, #50	; 0x32
  400e96:	f000 f829 	bl	400eec <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  400e9a:	4620      	mov	r0, r4
  400e9c:	f005 f960 	bl	406160 <__aeabi_i2f>
  400ea0:	4607      	mov	r7, r0
  400ea2:	4d0f      	ldr	r5, [pc, #60]	; (400ee0 <mpu_set_threshold+0x58>)
  400ea4:	4e0f      	ldr	r6, [pc, #60]	; (400ee4 <mpu_set_threshold+0x5c>)
  400ea6:	4601      	mov	r1, r0
  400ea8:	6830      	ldr	r0, [r6, #0]
  400eaa:	f005 f9ad 	bl	406208 <__aeabi_fmul>
  400eae:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  400eb0:	4639      	mov	r1, r7
  400eb2:	6870      	ldr	r0, [r6, #4]
  400eb4:	f005 f9a8 	bl	406208 <__aeabi_fmul>
  400eb8:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  400eba:	4639      	mov	r1, r7
  400ebc:	68b0      	ldr	r0, [r6, #8]
  400ebe:	f005 f9a3 	bl	406208 <__aeabi_fmul>
  400ec2:	60a8      	str	r0, [r5, #8]
  400ec4:	e004      	b.n	400ed0 <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  400ec6:	4b06      	ldr	r3, [pc, #24]	; (400ee0 <mpu_set_threshold+0x58>)
  400ec8:	2200      	movs	r2, #0
  400eca:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  400ecc:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  400ece:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  400ed0:	4620      	mov	r0, r4
  400ed2:	f005 f941 	bl	406158 <__aeabi_ui2f>
  400ed6:	4b04      	ldr	r3, [pc, #16]	; (400ee8 <mpu_set_threshold+0x60>)
  400ed8:	6018      	str	r0, [r3, #0]
  400eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400edc:	20000440 	.word	0x20000440
  400ee0:	20000684 	.word	0x20000684
  400ee4:	20000508 	.word	0x20000508
  400ee8:	20000444 	.word	0x20000444

00400eec <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  400eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ef0:	b085      	sub	sp, #20
	use_calibrate = true;
  400ef2:	2201      	movs	r2, #1
  400ef4:	4b5e      	ldr	r3, [pc, #376]	; (401070 <mpu_calibrate_gyro+0x184>)
  400ef6:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400ef8:	4681      	mov	r9, r0
  400efa:	2800      	cmp	r0, #0
  400efc:	d048      	beq.n	400f90 <mpu_calibrate_gyro+0xa4>
  400efe:	2400      	movs	r4, #0
  400f00:	f04f 0a00 	mov.w	sl, #0
  400f04:	46d3      	mov	fp, sl
  400f06:	f8cd a00c 	str.w	sl, [sp, #12]
  400f0a:	f8cd a008 	str.w	sl, [sp, #8]
  400f0e:	f8cd a004 	str.w	sl, [sp, #4]
  400f12:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  400f16:	f8df 816c 	ldr.w	r8, [pc, #364]	; 401084 <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  400f1a:	f7ff fe11 	bl	400b40 <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  400f1e:	f8d8 7000 	ldr.w	r7, [r8]
  400f22:	4639      	mov	r1, r7
  400f24:	9800      	ldr	r0, [sp, #0]
  400f26:	f005 f867 	bl	405ff8 <__addsf3>
  400f2a:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  400f2c:	f8d8 6004 	ldr.w	r6, [r8, #4]
  400f30:	4631      	mov	r1, r6
  400f32:	9801      	ldr	r0, [sp, #4]
  400f34:	f005 f860 	bl	405ff8 <__addsf3>
  400f38:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  400f3a:	f8d8 5008 	ldr.w	r5, [r8, #8]
  400f3e:	4629      	mov	r1, r5
  400f40:	9802      	ldr	r0, [sp, #8]
  400f42:	f005 f859 	bl	405ff8 <__addsf3>
  400f46:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  400f48:	4639      	mov	r1, r7
  400f4a:	4638      	mov	r0, r7
  400f4c:	f005 f95c 	bl	406208 <__aeabi_fmul>
  400f50:	4601      	mov	r1, r0
  400f52:	9803      	ldr	r0, [sp, #12]
  400f54:	f005 f850 	bl	405ff8 <__addsf3>
  400f58:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  400f5a:	4631      	mov	r1, r6
  400f5c:	4630      	mov	r0, r6
  400f5e:	f005 f953 	bl	406208 <__aeabi_fmul>
  400f62:	4601      	mov	r1, r0
  400f64:	4658      	mov	r0, fp
  400f66:	f005 f847 	bl	405ff8 <__addsf3>
  400f6a:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  400f6c:	4629      	mov	r1, r5
  400f6e:	4628      	mov	r0, r5
  400f70:	f005 f94a 	bl	406208 <__aeabi_fmul>
  400f74:	4601      	mov	r1, r0
  400f76:	4650      	mov	r0, sl
  400f78:	f005 f83e 	bl	405ff8 <__addsf3>
  400f7c:	4682      	mov	sl, r0

		delay_ms(5);
  400f7e:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400f82:	f005 fe85 	bl	406c90 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400f86:	3401      	adds	r4, #1
  400f88:	b2e4      	uxtb	r4, r4
  400f8a:	45a1      	cmp	r9, r4
  400f8c:	d1c5      	bne.n	400f1a <mpu_calibrate_gyro+0x2e>
  400f8e:	e00a      	b.n	400fa6 <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  400f90:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  400f94:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  400f96:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  400f9a:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  400f9e:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  400fa2:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  400fa6:	4648      	mov	r0, r9
  400fa8:	f005 f8da 	bl	406160 <__aeabi_i2f>
  400fac:	4605      	mov	r5, r0
  400fae:	4601      	mov	r1, r0
  400fb0:	9800      	ldr	r0, [sp, #0]
  400fb2:	f005 f9dd 	bl	406370 <__aeabi_fdiv>
  400fb6:	4606      	mov	r6, r0
  400fb8:	4c2e      	ldr	r4, [pc, #184]	; (401074 <mpu_calibrate_gyro+0x188>)
  400fba:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  400fbc:	4629      	mov	r1, r5
  400fbe:	9801      	ldr	r0, [sp, #4]
  400fc0:	f005 f9d6 	bl	406370 <__aeabi_fdiv>
  400fc4:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  400fc6:	4629      	mov	r1, r5
  400fc8:	9802      	ldr	r0, [sp, #8]
  400fca:	f005 f9d1 	bl	406370 <__aeabi_fdiv>
  400fce:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  400fd0:	9f03      	ldr	r7, [sp, #12]
  400fd2:	4929      	ldr	r1, [pc, #164]	; (401078 <mpu_calibrate_gyro+0x18c>)
  400fd4:	4638      	mov	r0, r7
  400fd6:	f005 f9cb 	bl	406370 <__aeabi_fdiv>
  400fda:	4605      	mov	r5, r0
  400fdc:	4631      	mov	r1, r6
  400fde:	4630      	mov	r0, r6
  400fe0:	f005 f912 	bl	406208 <__aeabi_fmul>
  400fe4:	4601      	mov	r1, r0
  400fe6:	4628      	mov	r0, r5
  400fe8:	f005 f804 	bl	405ff4 <__aeabi_fsub>
  400fec:	f004 fc82 	bl	4058f4 <__aeabi_f2d>
  400ff0:	f001 f9e2 	bl	4023b8 <sqrt>
  400ff4:	4e21      	ldr	r6, [pc, #132]	; (40107c <mpu_calibrate_gyro+0x190>)
  400ff6:	f004 ffa9 	bl	405f4c <__aeabi_d2f>
  400ffa:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  400ffc:	6865      	ldr	r5, [r4, #4]
  400ffe:	491e      	ldr	r1, [pc, #120]	; (401078 <mpu_calibrate_gyro+0x18c>)
  401000:	4658      	mov	r0, fp
  401002:	f005 f9b5 	bl	406370 <__aeabi_fdiv>
  401006:	4607      	mov	r7, r0
  401008:	4629      	mov	r1, r5
  40100a:	4628      	mov	r0, r5
  40100c:	f005 f8fc 	bl	406208 <__aeabi_fmul>
  401010:	4601      	mov	r1, r0
  401012:	4638      	mov	r0, r7
  401014:	f004 ffee 	bl	405ff4 <__aeabi_fsub>
  401018:	f004 fc6c 	bl	4058f4 <__aeabi_f2d>
  40101c:	f001 f9cc 	bl	4023b8 <sqrt>
  401020:	f004 ff94 	bl	405f4c <__aeabi_d2f>
  401024:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  401026:	68a4      	ldr	r4, [r4, #8]
  401028:	4913      	ldr	r1, [pc, #76]	; (401078 <mpu_calibrate_gyro+0x18c>)
  40102a:	4650      	mov	r0, sl
  40102c:	f005 f9a0 	bl	406370 <__aeabi_fdiv>
  401030:	4605      	mov	r5, r0
  401032:	4621      	mov	r1, r4
  401034:	4620      	mov	r0, r4
  401036:	f005 f8e7 	bl	406208 <__aeabi_fmul>
  40103a:	4601      	mov	r1, r0
  40103c:	4628      	mov	r0, r5
  40103e:	f004 ffd9 	bl	405ff4 <__aeabi_fsub>
  401042:	f004 fc57 	bl	4058f4 <__aeabi_f2d>
  401046:	f001 f9b7 	bl	4023b8 <sqrt>
  40104a:	f004 ff7f 	bl	405f4c <__aeabi_d2f>
  40104e:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  401050:	4b0b      	ldr	r3, [pc, #44]	; (401080 <mpu_calibrate_gyro+0x194>)
  401052:	681c      	ldr	r4, [r3, #0]
  401054:	2100      	movs	r1, #0
  401056:	4620      	mov	r0, r4
  401058:	f005 fa92 	bl	406580 <__aeabi_fcmpgt>
  40105c:	b128      	cbz	r0, 40106a <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  40105e:	4620      	mov	r0, r4
  401060:	f005 fabe 	bl	4065e0 <__aeabi_f2uiz>
  401064:	b2c0      	uxtb	r0, r0
  401066:	f7ff ff0f 	bl	400e88 <mpu_set_threshold>
	}

}
  40106a:	b005      	add	sp, #20
  40106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401070:	20000440 	.word	0x20000440
  401074:	200006b8 	.word	0x200006b8
  401078:	42480000 	.word	0x42480000
  40107c:	20000508 	.word	0x20000508
  401080:	20000444 	.word	0x20000444
  401084:	20000514 	.word	0x20000514

00401088 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  401088:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  40108a:	4b0c      	ldr	r3, [pc, #48]	; (4010bc <imu_init+0x34>)
  40108c:	2200      	movs	r2, #0
  40108e:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  401090:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  401092:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  401094:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  401096:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  401098:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  40109a:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  40109c:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  40109e:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  4010a0:	f7ff fc26 	bl	4008f0 <mpu_init>
  4010a4:	4604      	mov	r4, r0
  4010a6:	f7ff fc4d 	bl	400944 <mpu_probe>
  4010aa:	4020      	ands	r0, r4
  4010ac:	b2c4      	uxtb	r4, r0
  4010ae:	2100      	movs	r1, #0
  4010b0:	4608      	mov	r0, r1
  4010b2:	f7ff fceb 	bl	400a8c <mpu_begin>
}
  4010b6:	4020      	ands	r0, r4
  4010b8:	bd10      	pop	{r4, pc}
  4010ba:	bf00      	nop
  4010bc:	200007ec 	.word	0x200007ec

004010c0 <imu_calibrate>:

void imu_calibrate(void)
{
  4010c0:	b508      	push	{r3, lr}
    mpu_calibrate_gyro(GYRO_SAMPLES);
  4010c2:	2032      	movs	r0, #50	; 0x32
  4010c4:	f7ff ff12 	bl	400eec <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  4010c8:	2000      	movs	r0, #0
  4010ca:	f7ff fedd 	bl	400e88 <mpu_set_threshold>
    mpu_log_settings();
  4010ce:	f7ff fe57 	bl	400d80 <mpu_log_settings>
  4010d2:	bd08      	pop	{r3, pc}
  4010d4:	0000      	movs	r0, r0
	...

004010d8 <imu_tick>:
}

void imu_tick(void)
{
  4010d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010dc:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  4010de:	4b82      	ldr	r3, [pc, #520]	; (4012e8 <imu_tick+0x210>)
  4010e0:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  4010e2:	a808      	add	r0, sp, #32
  4010e4:	f7ff fd4e 	bl	400b84 <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  4010e8:	f7ff fe22 	bl	400d30 <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  4010ec:	4c7f      	ldr	r4, [pc, #508]	; (4012ec <imu_tick+0x214>)
  4010ee:	6820      	ldr	r0, [r4, #0]
  4010f0:	f004 fc00 	bl	4058f4 <__aeabi_f2d>
  4010f4:	a37a      	add	r3, pc, #488	; (adr r3, 4012e0 <imu_tick+0x208>)
  4010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4010fa:	f004 fc4f 	bl	40599c <__aeabi_dmul>
  4010fe:	2200      	movs	r2, #0
  401100:	4b7b      	ldr	r3, [pc, #492]	; (4012f0 <imu_tick+0x218>)
  401102:	f004 fd75 	bl	405bf0 <__aeabi_ddiv>
  401106:	f004 ff21 	bl	405f4c <__aeabi_d2f>
  40110a:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  40110c:	6860      	ldr	r0, [r4, #4]
  40110e:	f004 fbf1 	bl	4058f4 <__aeabi_f2d>
  401112:	a373      	add	r3, pc, #460	; (adr r3, 4012e0 <imu_tick+0x208>)
  401114:	e9d3 2300 	ldrd	r2, r3, [r3]
  401118:	f004 fc40 	bl	40599c <__aeabi_dmul>
  40111c:	2200      	movs	r2, #0
  40111e:	4b74      	ldr	r3, [pc, #464]	; (4012f0 <imu_tick+0x218>)
  401120:	f004 fd66 	bl	405bf0 <__aeabi_ddiv>
  401124:	f004 ff12 	bl	405f4c <__aeabi_d2f>
  401128:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  40112a:	68a0      	ldr	r0, [r4, #8]
  40112c:	f004 fbe2 	bl	4058f4 <__aeabi_f2d>
  401130:	a36b      	add	r3, pc, #428	; (adr r3, 4012e0 <imu_tick+0x208>)
  401132:	e9d3 2300 	ldrd	r2, r3, [r3]
  401136:	f004 fc31 	bl	40599c <__aeabi_dmul>
  40113a:	2200      	movs	r2, #0
  40113c:	4b6c      	ldr	r3, [pc, #432]	; (4012f0 <imu_tick+0x218>)
  40113e:	f004 fd57 	bl	405bf0 <__aeabi_ddiv>
  401142:	f004 ff03 	bl	405f4c <__aeabi_d2f>
  401146:	9007      	str	r0, [sp, #28]



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  401148:	4c6a      	ldr	r4, [pc, #424]	; (4012f4 <imu_tick+0x21c>)
  40114a:	6820      	ldr	r0, [r4, #0]
  40114c:	f004 fbd2 	bl	4058f4 <__aeabi_f2d>
  401150:	e9cd 0100 	strd	r0, r1, [sp]
  401154:	6860      	ldr	r0, [r4, #4]
  401156:	f004 fbcd 	bl	4058f4 <__aeabi_f2d>
  40115a:	4682      	mov	sl, r0
  40115c:	468b      	mov	fp, r1
  40115e:	68a0      	ldr	r0, [r4, #8]
  401160:	f004 fbc8 	bl	4058f4 <__aeabi_f2d>
  401164:	4606      	mov	r6, r0
  401166:	460f      	mov	r7, r1
  401168:	4632      	mov	r2, r6
  40116a:	463b      	mov	r3, r7
  40116c:	4630      	mov	r0, r6
  40116e:	4639      	mov	r1, r7
  401170:	f004 fc14 	bl	40599c <__aeabi_dmul>
  401174:	4680      	mov	r8, r0
  401176:	4689      	mov	r9, r1
  401178:	4652      	mov	r2, sl
  40117a:	465b      	mov	r3, fp
  40117c:	4650      	mov	r0, sl
  40117e:	4659      	mov	r1, fp
  401180:	f004 fc0c 	bl	40599c <__aeabi_dmul>
  401184:	4602      	mov	r2, r0
  401186:	460b      	mov	r3, r1
  401188:	4640      	mov	r0, r8
  40118a:	4649      	mov	r1, r9
  40118c:	f004 fa54 	bl	405638 <__adddf3>
  401190:	f001 f912 	bl	4023b8 <sqrt>
  401194:	4602      	mov	r2, r0
  401196:	460b      	mov	r3, r1
  401198:	e9dd 0100 	ldrd	r0, r1, [sp]
  40119c:	f001 f90a 	bl	4023b4 <atan2>
  4011a0:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  4011a4:	6860      	ldr	r0, [r4, #4]
  4011a6:	f004 fba5 	bl	4058f4 <__aeabi_f2d>
  4011aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4011ae:	6820      	ldr	r0, [r4, #0]
  4011b0:	f004 fba0 	bl	4058f4 <__aeabi_f2d>
  4011b4:	4682      	mov	sl, r0
  4011b6:	468b      	mov	fp, r1
  4011b8:	68a0      	ldr	r0, [r4, #8]
  4011ba:	f004 fb9b 	bl	4058f4 <__aeabi_f2d>
  4011be:	4606      	mov	r6, r0
  4011c0:	460f      	mov	r7, r1
  4011c2:	4652      	mov	r2, sl
  4011c4:	465b      	mov	r3, fp
  4011c6:	4650      	mov	r0, sl
  4011c8:	4659      	mov	r1, fp
  4011ca:	f004 fbe7 	bl	40599c <__aeabi_dmul>
  4011ce:	4680      	mov	r8, r0
  4011d0:	4689      	mov	r9, r1
  4011d2:	4632      	mov	r2, r6
  4011d4:	463b      	mov	r3, r7
  4011d6:	4630      	mov	r0, r6
  4011d8:	4639      	mov	r1, r7
  4011da:	f004 fbdf 	bl	40599c <__aeabi_dmul>
  4011de:	4602      	mov	r2, r0
  4011e0:	460b      	mov	r3, r1
  4011e2:	4640      	mov	r0, r8
  4011e4:	4649      	mov	r1, r9
  4011e6:	f004 fa27 	bl	405638 <__adddf3>
  4011ea:	f001 f8e5 	bl	4023b8 <sqrt>
  4011ee:	4602      	mov	r2, r0
  4011f0:	460b      	mov	r3, r1
  4011f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4011f6:	f001 f8dd 	bl	4023b4 <atan2>
  4011fa:	4680      	mov	r8, r0
  4011fc:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  4011fe:	f8df a118 	ldr.w	sl, [pc, #280]	; 401318 <imu_tick+0x240>
    float dt = ((float)delta_t/1000.0f);
  401202:	f8da 0000 	ldr.w	r0, [sl]
  401206:	1a28      	subs	r0, r5, r0
  401208:	f004 ffa6 	bl	406158 <__aeabi_ui2f>
  40120c:	493a      	ldr	r1, [pc, #232]	; (4012f8 <imu_tick+0x220>)
  40120e:	f005 f8af 	bl	406370 <__aeabi_fdiv>
  401212:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  401214:	4601      	mov	r1, r0
  401216:	9805      	ldr	r0, [sp, #20]
  401218:	f004 fff6 	bl	406208 <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  40121c:	4f37      	ldr	r7, [pc, #220]	; (4012fc <imu_tick+0x224>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  40121e:	6839      	ldr	r1, [r7, #0]
  401220:	f004 feea 	bl	405ff8 <__addsf3>
  401224:	4936      	ldr	r1, [pc, #216]	; (401300 <imu_tick+0x228>)
  401226:	f004 ffef 	bl	406208 <__aeabi_fmul>
  40122a:	4683      	mov	fp, r0
  40122c:	2200      	movs	r2, #0
  40122e:	4b30      	ldr	r3, [pc, #192]	; (4012f0 <imu_tick+0x218>)
  401230:	4640      	mov	r0, r8
  401232:	4649      	mov	r1, r9
  401234:	f004 fbb2 	bl	40599c <__aeabi_dmul>
  401238:	a329      	add	r3, pc, #164	; (adr r3, 4012e0 <imu_tick+0x208>)
  40123a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40123e:	f004 fcd7 	bl	405bf0 <__aeabi_ddiv>
  401242:	f004 fe83 	bl	405f4c <__aeabi_d2f>
  401246:	492f      	ldr	r1, [pc, #188]	; (401304 <imu_tick+0x22c>)
  401248:	f004 ffde 	bl	406208 <__aeabi_fmul>
  40124c:	4601      	mov	r1, r0
  40124e:	4658      	mov	r0, fp
  401250:	f004 fed2 	bl	405ff8 <__addsf3>
  401254:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  401256:	4621      	mov	r1, r4
  401258:	9806      	ldr	r0, [sp, #24]
  40125a:	f004 ffd5 	bl	406208 <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  40125e:	4e2a      	ldr	r6, [pc, #168]	; (401308 <imu_tick+0x230>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  401260:	6831      	ldr	r1, [r6, #0]
  401262:	f004 fec9 	bl	405ff8 <__addsf3>
  401266:	4926      	ldr	r1, [pc, #152]	; (401300 <imu_tick+0x228>)
  401268:	f004 ffce 	bl	406208 <__aeabi_fmul>
  40126c:	4681      	mov	r9, r0
  40126e:	2200      	movs	r2, #0
  401270:	4b1f      	ldr	r3, [pc, #124]	; (4012f0 <imu_tick+0x218>)
  401272:	e9dd 0100 	ldrd	r0, r1, [sp]
  401276:	f004 fb91 	bl	40599c <__aeabi_dmul>
  40127a:	a319      	add	r3, pc, #100	; (adr r3, 4012e0 <imu_tick+0x208>)
  40127c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401280:	f004 fcb6 	bl	405bf0 <__aeabi_ddiv>
  401284:	f004 fe62 	bl	405f4c <__aeabi_d2f>
  401288:	491e      	ldr	r1, [pc, #120]	; (401304 <imu_tick+0x22c>)
  40128a:	f004 ffbd 	bl	406208 <__aeabi_fmul>
  40128e:	4601      	mov	r1, r0
  401290:	4648      	mov	r0, r9
  401292:	f004 feb1 	bl	405ff8 <__addsf3>
  401296:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  401298:	4621      	mov	r1, r4
  40129a:	9807      	ldr	r0, [sp, #28]
  40129c:	f004 ffb4 	bl	406208 <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  4012a0:	4c1a      	ldr	r4, [pc, #104]	; (40130c <imu_tick+0x234>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  4012a2:	6821      	ldr	r1, [r4, #0]
  4012a4:	f004 fea8 	bl	405ff8 <__addsf3>
  4012a8:	4915      	ldr	r1, [pc, #84]	; (401300 <imu_tick+0x228>)
  4012aa:	f004 ffad 	bl	406208 <__aeabi_fmul>
  4012ae:	2100      	movs	r1, #0
  4012b0:	f004 fea2 	bl	405ff8 <__addsf3>


    last_time_read = t_now;
  4012b4:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  4012b8:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  4012bc:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  4012c0:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  4012c2:	4b13      	ldr	r3, [pc, #76]	; (401310 <imu_tick+0x238>)
  4012c4:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  4012c8:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  4012cc:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  4012ce:	4b11      	ldr	r3, [pc, #68]	; (401314 <imu_tick+0x23c>)
  4012d0:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  4012d4:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  4012d8:	6098      	str	r0, [r3, #8]


  4012da:	b00d      	add	sp, #52	; 0x34
  4012dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012e0:	54442d18 	.word	0x54442d18
  4012e4:	400921fb 	.word	0x400921fb
  4012e8:	20000208 	.word	0x20000208
  4012ec:	200006c8 	.word	0x200006c8
  4012f0:	40668000 	.word	0x40668000
  4012f4:	2000069c 	.word	0x2000069c
  4012f8:	447a0000 	.word	0x447a0000
  4012fc:	20000430 	.word	0x20000430
  401300:	3f75c28f 	.word	0x3f75c28f
  401304:	3d23d710 	.word	0x3d23d710
  401308:	20000434 	.word	0x20000434
  40130c:	20000438 	.word	0x20000438
  401310:	20000810 	.word	0x20000810
  401314:	200007ec 	.word	0x200007ec
  401318:	2000042c 	.word	0x2000042c

0040131c <motor_config_pins>:
	motors[1].angle_max = AP_ANGLE_MAX;
	motors[1].timeout = 1000;
}

void motor_config_pins(t_motor_config motor_cfg)
{
  40131c:	b084      	sub	sp, #16
  40131e:	b538      	push	{r3, r4, r5, lr}
  401320:	ac04      	add	r4, sp, #16
  401322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_configure_pin(motor_cfg.ul_pin, motor_cfg.ul_flag);
  401326:	9906      	ldr	r1, [sp, #24]
  401328:	9805      	ldr	r0, [sp, #20]
  40132a:	f000 fbed 	bl	401b08 <pio_configure_pin>

	pmc_enable_periph_clk(motor_cfg.ul_periph_clkid);
  40132e:	9807      	ldr	r0, [sp, #28]
  401330:	f000 fd9c 	bl	401e6c <pmc_enable_periph_clk>

	pwm_channel_disable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  401334:	ad04      	add	r5, sp, #16
  401336:	9908      	ldr	r1, [sp, #32]
  401338:	f855 0b14 	ldr.w	r0, [r5], #20
  40133c:	f000 fee2 	bl	402104 <pwm_channel_disable>
	pwm_init(motor_cfg.p_pwm, &motor_cfg.clock_setting);
  401340:	ac04      	add	r4, sp, #16
  401342:	4629      	mov	r1, r5
  401344:	f854 0b20 	ldr.w	r0, [r4], #32
  401348:	f000 fe30 	bl	401fac <pwm_init>

	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
  40134c:	4621      	mov	r1, r4
  40134e:	9804      	ldr	r0, [sp, #16]
  401350:	f000 fe50 	bl	401ff4 <pwm_channel_init>
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
  401354:	9908      	ldr	r1, [sp, #32]
  401356:	9804      	ldr	r0, [sp, #16]
  401358:	f000 fece 	bl	4020f8 <pwm_channel_enable>
}
  40135c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401360:	b004      	add	sp, #16
  401362:	4770      	bx	lr

00401364 <motor_init>:
uint32_t motor_current_duty = 0;
void motor_config_pins(t_motor_config motor_cfg);


void motor_init(void)
{
  401364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401368:	b0b3      	sub	sp, #204	; 0xcc
	printf("motor_init\r\n");
  40136a:	485b      	ldr	r0, [pc, #364]	; (4014d8 <motor_init+0x174>)
  40136c:	f002 f862 	bl	403434 <iprintf>
        .ul_clka = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = MOTOR_PWM_CLOCKSOURCE_FREQ,
		.ul_mck = sysclk_get_cpu_hz()
	};

	t_motor_config motor_cfg0 = {
  401370:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  401374:	2248      	movs	r2, #72	; 0x48
  401376:	2100      	movs	r1, #0
  401378:	4648      	mov	r0, r9
  40137a:	f001 fbe4 	bl	402b46 <memset>
		.pwm_channel.ul_period = MOTOR_PWM_PERIOD_TICKS,
		.pwm_channel.ul_duty = MOTOR_PWM_MIN,
		.pwm_channel.channel = EXT1_PWM_CHANNEL
	};

		t_motor_config motor_cfg1 = {
  40137e:	2248      	movs	r2, #72	; 0x48
  401380:	2100      	movs	r1, #0
  401382:	a80e      	add	r0, sp, #56	; 0x38
  401384:	f001 fbdf 	bl	402b46 <memset>
	};

	


	motor_config_pins(motor_cfg0);
  401388:	4b54      	ldr	r3, [pc, #336]	; (4014dc <motor_init+0x178>)
  40138a:	9320      	str	r3, [sp, #128]	; 0x80
  40138c:	2417      	movs	r4, #23
  40138e:	9421      	str	r4, [sp, #132]	; 0x84
  401390:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  401394:	9722      	str	r7, [sp, #136]	; 0x88
  401396:	231f      	movs	r3, #31
  401398:	9323      	str	r3, [sp, #140]	; 0x8c
  40139a:	4e51      	ldr	r6, [pc, #324]	; (4014e0 <motor_init+0x17c>)
  40139c:	9625      	str	r6, [sp, #148]	; 0x94
  40139e:	9626      	str	r6, [sp, #152]	; 0x98
  4013a0:	4b50      	ldr	r3, [pc, #320]	; (4014e4 <motor_init+0x180>)
  4013a2:	9327      	str	r3, [sp, #156]	; 0x9c
  4013a4:	f04f 080b 	mov.w	r8, #11
  4013a8:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  4013ac:	2501      	movs	r5, #1
  4013ae:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  4013b2:	f240 4a7e 	movw	sl, #1150	; 0x47e
  4013b6:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  4013ba:	f644 6b20 	movw	fp, #20000	; 0x4e20
  4013be:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  4013c2:	46ee      	mov	lr, sp
  4013c4:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
  4013c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4013cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4013d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4013d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4013d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  4013dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  4013e0:	e89c 0003 	ldmia.w	ip, {r0, r1}
  4013e4:	e88e 0003 	stmia.w	lr, {r0, r1}
  4013e8:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
  4013ec:	f7ff ff96 	bl	40131c <motor_config_pins>
	motor_config_pins(motor_cfg1);
  4013f0:	4b3a      	ldr	r3, [pc, #232]	; (4014dc <motor_init+0x178>)
  4013f2:	930e      	str	r3, [sp, #56]	; 0x38
  4013f4:	2353      	movs	r3, #83	; 0x53
  4013f6:	930f      	str	r3, [sp, #60]	; 0x3c
  4013f8:	9710      	str	r7, [sp, #64]	; 0x40
  4013fa:	231f      	movs	r3, #31
  4013fc:	9311      	str	r3, [sp, #68]	; 0x44
  4013fe:	9512      	str	r5, [sp, #72]	; 0x48
  401400:	9613      	str	r6, [sp, #76]	; 0x4c
  401402:	9614      	str	r6, [sp, #80]	; 0x50
  401404:	4b37      	ldr	r3, [pc, #220]	; (4014e4 <motor_init+0x180>)
  401406:	9315      	str	r3, [sp, #84]	; 0x54
  401408:	9516      	str	r5, [sp, #88]	; 0x58
  40140a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  40140e:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  401412:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  401416:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  40141a:	46ee      	mov	lr, sp
  40141c:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
  401420:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401424:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401428:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  40142c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401430:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  401434:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  401438:	e89c 0003 	ldmia.w	ip, {r0, r1}
  40143c:	e88e 0003 	stmia.w	lr, {r0, r1}
  401440:	ab0e      	add	r3, sp, #56	; 0x38
  401442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401444:	f7ff ff6a 	bl	40131c <motor_config_pins>

	motors[0].config = motor_cfg0;
  401448:	4b24      	ldr	r3, [pc, #144]	; (4014dc <motor_init+0x178>)
  40144a:	9320      	str	r3, [sp, #128]	; 0x80
  40144c:	9421      	str	r4, [sp, #132]	; 0x84
  40144e:	9722      	str	r7, [sp, #136]	; 0x88
  401450:	231f      	movs	r3, #31
  401452:	9323      	str	r3, [sp, #140]	; 0x8c
  401454:	9625      	str	r6, [sp, #148]	; 0x94
  401456:	9626      	str	r6, [sp, #152]	; 0x98
  401458:	4b22      	ldr	r3, [pc, #136]	; (4014e4 <motor_init+0x180>)
  40145a:	9327      	str	r3, [sp, #156]	; 0x9c
  40145c:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
  401460:	f88d 50aa 	strb.w	r5, [sp, #170]	; 0xaa
  401464:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
  401468:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
  40146c:	4c1e      	ldr	r4, [pc, #120]	; (4014e8 <motor_init+0x184>)
  40146e:	2248      	movs	r2, #72	; 0x48
  401470:	4649      	mov	r1, r9
  401472:	4620      	mov	r0, r4
  401474:	f001 fb5c 	bl	402b30 <memcpy>
	motors[0].angle_min = AP_ANGLE_MIN;
  401478:	f06f 0359 	mvn.w	r3, #89	; 0x59
  40147c:	64a3      	str	r3, [r4, #72]	; 0x48
	motors[0].angle_max = AP_ANGLE_MAX;
  40147e:	235a      	movs	r3, #90	; 0x5a
  401480:	64e3      	str	r3, [r4, #76]	; 0x4c
	motors[0].timeout = 1000;
  401482:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
  401486:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50

	motors[1].config = motor_cfg1;
  40148a:	4b14      	ldr	r3, [pc, #80]	; (4014dc <motor_init+0x178>)
  40148c:	930e      	str	r3, [sp, #56]	; 0x38
  40148e:	2353      	movs	r3, #83	; 0x53
  401490:	930f      	str	r3, [sp, #60]	; 0x3c
  401492:	9710      	str	r7, [sp, #64]	; 0x40
  401494:	231f      	movs	r3, #31
  401496:	9311      	str	r3, [sp, #68]	; 0x44
  401498:	9512      	str	r5, [sp, #72]	; 0x48
  40149a:	9613      	str	r6, [sp, #76]	; 0x4c
  40149c:	9614      	str	r6, [sp, #80]	; 0x50
  40149e:	4b11      	ldr	r3, [pc, #68]	; (4014e4 <motor_init+0x180>)
  4014a0:	9315      	str	r3, [sp, #84]	; 0x54
  4014a2:	9516      	str	r5, [sp, #88]	; 0x58
  4014a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  4014a8:	f88d 5062 	strb.w	r5, [sp, #98]	; 0x62
  4014ac:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  4014b0:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  4014b4:	2248      	movs	r2, #72	; 0x48
  4014b6:	a90e      	add	r1, sp, #56	; 0x38
  4014b8:	f104 0054 	add.w	r0, r4, #84	; 0x54
  4014bc:	f001 fb38 	bl	402b30 <memcpy>
	motors[1].angle_min = AP_ANGLE_MIN;
  4014c0:	f06f 0359 	mvn.w	r3, #89	; 0x59
  4014c4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	motors[1].angle_max = AP_ANGLE_MAX;
  4014c8:	235a      	movs	r3, #90	; 0x5a
  4014ca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	motors[1].timeout = 1000;
  4014ce:	f8c4 90a4 	str.w	r9, [r4, #164]	; 0xa4
}
  4014d2:	b033      	add	sp, #204	; 0xcc
  4014d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014d8:	0040690c 	.word	0x0040690c
  4014dc:	40020000 	.word	0x40020000
  4014e0:	000f4240 	.word	0x000f4240
  4014e4:	07270e00 	.word	0x07270e00
  4014e8:	20000534 	.word	0x20000534

004014ec <motor_tick>:
	pwm_channel_init(motor_cfg.p_pwm, &motor_cfg.pwm_channel.channel);
	pwm_channel_enable(motor_cfg.p_pwm, motor_cfg.ul_channel);
}

void motor_tick(void)
{
  4014ec:	4770      	bx	lr
  4014ee:	bf00      	nop

004014f0 <motor_set_power>:

}

void motor_set_power(t_motor motor, uint32_t power)
{
  4014f0:	b084      	sub	sp, #16
  4014f2:	b508      	push	{r3, lr}
  4014f4:	f10d 0e08 	add.w	lr, sp, #8
  4014f8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  4014fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
	motor.config.pwm_channel.ul_duty = power;
  4014fe:	910d      	str	r1, [sp, #52]	; 0x34
	// printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
	if (config.log_motor) {
  401500:	4b07      	ldr	r3, [pc, #28]	; (401520 <motor_set_power+0x30>)
  401502:	7b9b      	ldrb	r3, [r3, #14]
  401504:	b113      	cbz	r3, 40150c <motor_set_power+0x1c>
		printf("motor_output: %d\r\n", motor.config.pwm_channel.ul_duty);
  401506:	4807      	ldr	r0, [pc, #28]	; (401524 <motor_set_power+0x34>)
  401508:	f001 ff94 	bl	403434 <iprintf>
	}
	pwm_channel_update_duty(motor.config.p_pwm, &motor.config.pwm_channel, motor.config.pwm_channel.ul_duty);
  40150c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40150e:	a90a      	add	r1, sp, #40	; 0x28
  401510:	9802      	ldr	r0, [sp, #8]
  401512:	f000 fde3 	bl	4020dc <pwm_channel_update_duty>
}
  401516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40151a:	b004      	add	sp, #16
  40151c:	4770      	bx	lr
  40151e:	bf00      	nop
  401520:	200006d4 	.word	0x200006d4
  401524:	0040691c 	.word	0x0040691c

00401528 <motor_min>:

void motor_min(t_motor motor)
{
  401528:	b084      	sub	sp, #16
  40152a:	b500      	push	{lr}
  40152c:	b093      	sub	sp, #76	; 0x4c
  40152e:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  401532:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MIN;
  401536:	f240 437e 	movw	r3, #1150	; 0x47e
  40153a:	4a08      	ldr	r2, [pc, #32]	; (40155c <motor_min+0x34>)
  40153c:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, MOTOR_PWM_MIN);
  40153e:	9311      	str	r3, [sp, #68]	; 0x44
  401540:	2244      	movs	r2, #68	; 0x44
  401542:	a918      	add	r1, sp, #96	; 0x60
  401544:	4668      	mov	r0, sp
  401546:	f001 faf3 	bl	402b30 <memcpy>
  40154a:	ab14      	add	r3, sp, #80	; 0x50
  40154c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40154e:	f7ff ffcf 	bl	4014f0 <motor_set_power>
}
  401552:	b013      	add	sp, #76	; 0x4c
  401554:	f85d eb04 	ldr.w	lr, [sp], #4
  401558:	b004      	add	sp, #16
  40155a:	4770      	bx	lr
  40155c:	20000448 	.word	0x20000448

00401560 <motor_mid>:

void motor_mid(t_motor motor)
{
  401560:	b084      	sub	sp, #16
  401562:	b500      	push	{lr}
  401564:	b093      	sub	sp, #76	; 0x4c
  401566:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  40156a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MID;
  40156e:	f240 5346 	movw	r3, #1350	; 0x546
  401572:	4a08      	ldr	r2, [pc, #32]	; (401594 <motor_mid+0x34>)
  401574:	6013      	str	r3, [r2, #0]
	motor_set_power(motor, motor_current_duty);
  401576:	9311      	str	r3, [sp, #68]	; 0x44
  401578:	2244      	movs	r2, #68	; 0x44
  40157a:	a918      	add	r1, sp, #96	; 0x60
  40157c:	4668      	mov	r0, sp
  40157e:	f001 fad7 	bl	402b30 <memcpy>
  401582:	ab14      	add	r3, sp, #80	; 0x50
  401584:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  401586:	f7ff ffb3 	bl	4014f0 <motor_set_power>
}
  40158a:	b013      	add	sp, #76	; 0x4c
  40158c:	f85d eb04 	ldr.w	lr, [sp], #4
  401590:	b004      	add	sp, #16
  401592:	4770      	bx	lr
  401594:	20000448 	.word	0x20000448

00401598 <motor_max>:

void motor_max(t_motor motor)
{
  401598:	b084      	sub	sp, #16
  40159a:	b500      	push	{lr}
  40159c:	b093      	sub	sp, #76	; 0x4c
  40159e:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
  4015a2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    motor_current_duty = MOTOR_PWM_MAX;
  4015a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  4015aa:	4a08      	ldr	r2, [pc, #32]	; (4015cc <motor_max+0x34>)
  4015ac:	6013      	str	r3, [r2, #0]
    motor_set_power(motor, motor_current_duty);
  4015ae:	9311      	str	r3, [sp, #68]	; 0x44
  4015b0:	2244      	movs	r2, #68	; 0x44
  4015b2:	a918      	add	r1, sp, #96	; 0x60
  4015b4:	4668      	mov	r0, sp
  4015b6:	f001 fabb 	bl	402b30 <memcpy>
  4015ba:	ab14      	add	r3, sp, #80	; 0x50
  4015bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4015be:	f7ff ff97 	bl	4014f0 <motor_set_power>
}
  4015c2:	b013      	add	sp, #76	; 0x4c
  4015c4:	f85d eb04 	ldr.w	lr, [sp], #4
  4015c8:	b004      	add	sp, #16
  4015ca:	4770      	bx	lr
  4015cc:	20000448 	.word	0x20000448

004015d0 <pid_tick>:
float kd = 0.0;
float desired_angle = 0.0f;


void pid_tick(void)
{
  4015d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    previous_error = time;
  4015d4:	4c27      	ldr	r4, [pc, #156]	; (401674 <pid_tick+0xa4>)
  4015d6:	6820      	ldr	r0, [r4, #0]
  4015d8:	f004 fdbe 	bl	406158 <__aeabi_ui2f>
  4015dc:	4680      	mov	r8, r0
    time = cph_get_millis();
  4015de:	4b26      	ldr	r3, [pc, #152]	; (401678 <pid_tick+0xa8>)
  4015e0:	681b      	ldr	r3, [r3, #0]
  4015e2:	6023      	str	r3, [r4, #0]
    elapsed_time = (time - previous_time)/1000;
  4015e4:	4a25      	ldr	r2, [pc, #148]	; (40167c <pid_tick+0xac>)
  4015e6:	6814      	ldr	r4, [r2, #0]
  4015e8:	1b1b      	subs	r3, r3, r4
  4015ea:	4c25      	ldr	r4, [pc, #148]	; (401680 <pid_tick+0xb0>)
  4015ec:	fba4 3403 	umull	r3, r4, r4, r3
  4015f0:	09a4      	lsrs	r4, r4, #6
  4015f2:	4b24      	ldr	r3, [pc, #144]	; (401684 <pid_tick+0xb4>)
  4015f4:	601c      	str	r4, [r3, #0]

    error = ap.imu.y_axis - desired_angle;
  4015f6:	4b24      	ldr	r3, [pc, #144]	; (401688 <pid_tick+0xb8>)
  4015f8:	6819      	ldr	r1, [r3, #0]
  4015fa:	4b24      	ldr	r3, [pc, #144]	; (40168c <pid_tick+0xbc>)
  4015fc:	6858      	ldr	r0, [r3, #4]
  4015fe:	f004 fcf9 	bl	405ff4 <__aeabi_fsub>
  401602:	4605      	mov	r5, r0
  401604:	4b22      	ldr	r3, [pc, #136]	; (401690 <pid_tick+0xc0>)
  401606:	6018      	str	r0, [r3, #0]
    pid_p = kp*error;
  401608:	4b22      	ldr	r3, [pc, #136]	; (401694 <pid_tick+0xc4>)
  40160a:	6819      	ldr	r1, [r3, #0]
  40160c:	f004 fdfc 	bl	406208 <__aeabi_fmul>
  401610:	4606      	mov	r6, r0
  401612:	4b21      	ldr	r3, [pc, #132]	; (401698 <pid_tick+0xc8>)
  401614:	6018      	str	r0, [r3, #0]

    // if (-3.0f < error < 3.0f) {
    //     pid_i = pid_i +(ki*error);
    // }

    pid_i = pid_i +(ki*error);
  401616:	4b21      	ldr	r3, [pc, #132]	; (40169c <pid_tick+0xcc>)
  401618:	6819      	ldr	r1, [r3, #0]
  40161a:	4628      	mov	r0, r5
  40161c:	f004 fdf4 	bl	406208 <__aeabi_fmul>
  401620:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4016b0 <pid_tick+0xe0>
  401624:	f8d9 1000 	ldr.w	r1, [r9]
  401628:	f004 fce6 	bl	405ff8 <__addsf3>
  40162c:	4607      	mov	r7, r0
  40162e:	f8c9 0000 	str.w	r0, [r9]

    pid_d = kd * ((error-previous_error)/elapsed_time);
  401632:	4641      	mov	r1, r8
  401634:	4628      	mov	r0, r5
  401636:	f004 fcdd 	bl	405ff4 <__aeabi_fsub>
  40163a:	4680      	mov	r8, r0
  40163c:	4620      	mov	r0, r4
  40163e:	f004 fd8b 	bl	406158 <__aeabi_ui2f>
  401642:	4601      	mov	r1, r0
  401644:	4640      	mov	r0, r8
  401646:	f004 fe93 	bl	406370 <__aeabi_fdiv>
  40164a:	4b15      	ldr	r3, [pc, #84]	; (4016a0 <pid_tick+0xd0>)
  40164c:	6819      	ldr	r1, [r3, #0]
  40164e:	f004 fddb 	bl	406208 <__aeabi_fmul>
  401652:	4604      	mov	r4, r0
  401654:	4b13      	ldr	r3, [pc, #76]	; (4016a4 <pid_tick+0xd4>)
  401656:	6018      	str	r0, [r3, #0]

    pid = pid_p + pid_i + pid_d;
  401658:	4639      	mov	r1, r7
  40165a:	4630      	mov	r0, r6
  40165c:	f004 fccc 	bl	405ff8 <__addsf3>
  401660:	4621      	mov	r1, r4
  401662:	f004 fcc9 	bl	405ff8 <__addsf3>
  401666:	4b10      	ldr	r3, [pc, #64]	; (4016a8 <pid_tick+0xd8>)
  401668:	6018      	str	r0, [r3, #0]

    previous_error = error;
  40166a:	4b10      	ldr	r3, [pc, #64]	; (4016ac <pid_tick+0xdc>)
  40166c:	601d      	str	r5, [r3, #0]
  40166e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401672:	bf00      	nop
  401674:	2000046c 	.word	0x2000046c
  401678:	20000208 	.word	0x20000208
  40167c:	20000470 	.word	0x20000470
  401680:	10624dd3 	.word	0x10624dd3
  401684:	20000474 	.word	0x20000474
  401688:	20000458 	.word	0x20000458
  40168c:	200007ec 	.word	0x200007ec
  401690:	20000460 	.word	0x20000460
  401694:	2000000c 	.word	0x2000000c
  401698:	20000478 	.word	0x20000478
  40169c:	20000468 	.word	0x20000468
  4016a0:	20000464 	.word	0x20000464
  4016a4:	2000044c 	.word	0x2000044c
  4016a8:	20000454 	.word	0x20000454
  4016ac:	20000450 	.word	0x20000450
  4016b0:	2000045c 	.word	0x2000045c

004016b4 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  4016b4:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  4016b6:	482c      	ldr	r0, [pc, #176]	; (401768 <board_init+0xb4>)
  4016b8:	f000 fc02 	bl	401ec0 <wdt_disable>
  4016bc:	200b      	movs	r0, #11
  4016be:	f000 fbd5 	bl	401e6c <pmc_enable_periph_clk>
  4016c2:	200c      	movs	r0, #12
  4016c4:	f000 fbd2 	bl	401e6c <pmc_enable_periph_clk>
  4016c8:	200d      	movs	r0, #13
  4016ca:	f000 fbcf 	bl	401e6c <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4016ce:	4b27      	ldr	r3, [pc, #156]	; (40176c <board_init+0xb8>)
  4016d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4016d4:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4016d6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4016dc:	4c24      	ldr	r4, [pc, #144]	; (401770 <board_init+0xbc>)
  4016de:	2504      	movs	r5, #4
  4016e0:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4016e2:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4016e6:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4016e8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4016ec:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4016ee:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4016f0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4016f4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4016f6:	f022 0204 	bic.w	r2, r2, #4
  4016fa:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4016fc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4016fe:	f022 0204 	bic.w	r2, r2, #4
  401702:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401704:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401708:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40170a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40170c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401710:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401714:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401716:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401718:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40171c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401720:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401722:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401724:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401728:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40172c:	210c      	movs	r1, #12
  40172e:	4811      	ldr	r0, [pc, #68]	; (401774 <board_init+0xc0>)
  401730:	f000 fa76 	bl	401c20 <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401734:	4e10      	ldr	r6, [pc, #64]	; (401778 <board_init+0xc4>)
  401736:	4631      	mov	r1, r6
  401738:	2003      	movs	r0, #3
  40173a:	f000 f9e5 	bl	401b08 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40173e:	4631      	mov	r1, r6
  401740:	4628      	mov	r0, r5
  401742:	f000 f9e1 	bl	401b08 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401746:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401748:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40174c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40174e:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401750:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401754:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401756:	f023 0304 	bic.w	r3, r3, #4
  40175a:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40175c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40175e:	f023 0304 	bic.w	r3, r3, #4
  401762:	6763      	str	r3, [r4, #116]	; 0x74
  401764:	bd70      	pop	{r4, r5, r6, pc}
  401766:	bf00      	nop
  401768:	400e1450 	.word	0x400e1450
  40176c:	400e1200 	.word	0x400e1200
  401770:	400e0e00 	.word	0x400e0e00
  401774:	400e1000 	.word	0x400e1000
  401778:	08000001 	.word	0x08000001

0040177c <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40177c:	4b2b      	ldr	r3, [pc, #172]	; (40182c <twi_set_speed+0xb0>)
  40177e:	4299      	cmp	r1, r3
  401780:	d849      	bhi.n	401816 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401782:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401786:	4299      	cmp	r1, r3
  401788:	d92b      	bls.n	4017e2 <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40178a:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40178c:	4c28      	ldr	r4, [pc, #160]	; (401830 <twi_set_speed+0xb4>)
  40178e:	fba4 3402 	umull	r3, r4, r4, r2
  401792:	0ba4      	lsrs	r4, r4, #14
  401794:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401796:	4b27      	ldr	r3, [pc, #156]	; (401834 <twi_set_speed+0xb8>)
  401798:	440b      	add	r3, r1
  40179a:	009b      	lsls	r3, r3, #2
  40179c:	fbb2 f2f3 	udiv	r2, r2, r3
  4017a0:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017a2:	2cff      	cmp	r4, #255	; 0xff
  4017a4:	d939      	bls.n	40181a <twi_set_speed+0x9e>
  4017a6:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4017a8:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4017aa:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017ac:	2cff      	cmp	r4, #255	; 0xff
  4017ae:	d902      	bls.n	4017b6 <twi_set_speed+0x3a>
  4017b0:	2b07      	cmp	r3, #7
  4017b2:	d1f9      	bne.n	4017a8 <twi_set_speed+0x2c>
  4017b4:	e00a      	b.n	4017cc <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017b6:	2aff      	cmp	r2, #255	; 0xff
  4017b8:	d908      	bls.n	4017cc <twi_set_speed+0x50>
  4017ba:	2b06      	cmp	r3, #6
  4017bc:	d900      	bls.n	4017c0 <twi_set_speed+0x44>
  4017be:	e005      	b.n	4017cc <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  4017c0:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4017c2:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017c4:	2aff      	cmp	r2, #255	; 0xff
  4017c6:	d901      	bls.n	4017cc <twi_set_speed+0x50>
  4017c8:	2b06      	cmp	r3, #6
  4017ca:	d9f9      	bls.n	4017c0 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4017cc:	0212      	lsls	r2, r2, #8
  4017ce:	b292      	uxth	r2, r2
  4017d0:	041b      	lsls	r3, r3, #16
  4017d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  4017d6:	431a      	orrs	r2, r3
  4017d8:	b2e4      	uxtb	r4, r4
  4017da:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4017dc:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4017de:	2000      	movs	r0, #0
  4017e0:	e021      	b.n	401826 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4017e2:	0049      	lsls	r1, r1, #1
  4017e4:	fbb2 f2f1 	udiv	r2, r2, r1
  4017e8:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017ea:	2aff      	cmp	r2, #255	; 0xff
  4017ec:	d907      	bls.n	4017fe <twi_set_speed+0x82>
  4017ee:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  4017f0:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  4017f2:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4017f4:	2aff      	cmp	r2, #255	; 0xff
  4017f6:	d903      	bls.n	401800 <twi_set_speed+0x84>
  4017f8:	2b07      	cmp	r3, #7
  4017fa:	d1f9      	bne.n	4017f0 <twi_set_speed+0x74>
  4017fc:	e000      	b.n	401800 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4017fe:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401800:	0211      	lsls	r1, r2, #8
  401802:	b289      	uxth	r1, r1
  401804:	041b      	lsls	r3, r3, #16
  401806:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40180a:	430b      	orrs	r3, r1
  40180c:	b2d2      	uxtb	r2, r2
  40180e:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401810:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401812:	2000      	movs	r0, #0
}
  401814:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401816:	2001      	movs	r0, #1
  401818:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40181a:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40181c:	bf88      	it	hi
  40181e:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401820:	d8ce      	bhi.n	4017c0 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401822:	2300      	movs	r3, #0
  401824:	e7d2      	b.n	4017cc <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  401826:	bc10      	pop	{r4}
  401828:	4770      	bx	lr
  40182a:	bf00      	nop
  40182c:	00061a80 	.word	0x00061a80
  401830:	057619f1 	.word	0x057619f1
  401834:	3ffd1200 	.word	0x3ffd1200

00401838 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401838:	b538      	push	{r3, r4, r5, lr}
  40183a:	4604      	mov	r4, r0
  40183c:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40183e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  401842:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  401844:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401846:	2380      	movs	r3, #128	; 0x80
  401848:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  40184a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40184c:	2308      	movs	r3, #8
  40184e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401850:	2320      	movs	r3, #32
  401852:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401854:	2304      	movs	r3, #4
  401856:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401858:	680a      	ldr	r2, [r1, #0]
  40185a:	6849      	ldr	r1, [r1, #4]
  40185c:	f7ff ff8e 	bl	40177c <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  401860:	2801      	cmp	r0, #1
  401862:	bf14      	ite	ne
  401864:	2000      	movne	r0, #0
  401866:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  401868:	7a6b      	ldrb	r3, [r5, #9]
  40186a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  40186c:	bf04      	itt	eq
  40186e:	2340      	moveq	r3, #64	; 0x40
  401870:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401872:	bd38      	pop	{r3, r4, r5, pc}

00401874 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401874:	460a      	mov	r2, r1
  401876:	b159      	cbz	r1, 401890 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  401878:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  40187a:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  40187c:	bfc4      	itt	gt
  40187e:	7841      	ldrbgt	r1, [r0, #1]
  401880:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401884:	2a02      	cmp	r2, #2
  401886:	dd05      	ble.n	401894 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  401888:	7880      	ldrb	r0, [r0, #2]
  40188a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40188e:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401890:	2000      	movs	r0, #0
  401892:	4770      	bx	lr
  401894:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  401896:	4770      	bx	lr

00401898 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40189c:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  40189e:	2c00      	cmp	r4, #0
  4018a0:	d045      	beq.n	40192e <twi_master_read+0x96>
  4018a2:	460b      	mov	r3, r1
  4018a4:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4018a6:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4018a8:	2000      	movs	r0, #0
  4018aa:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4018ac:	684a      	ldr	r2, [r1, #4]
  4018ae:	0212      	lsls	r2, r2, #8
  4018b0:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4018b4:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  4018b8:	7c1a      	ldrb	r2, [r3, #16]
  4018ba:	0412      	lsls	r2, r2, #16
  4018bc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  4018c0:	430a      	orrs	r2, r1
  4018c2:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4018c4:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4018c6:	6859      	ldr	r1, [r3, #4]
  4018c8:	4618      	mov	r0, r3
  4018ca:	f7ff ffd3 	bl	401874 <twi_mk_addr>
  4018ce:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  4018d0:	2c01      	cmp	r4, #1
  4018d2:	d104      	bne.n	4018de <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4018d4:	2303      	movs	r3, #3
  4018d6:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  4018d8:	f04f 0e01 	mov.w	lr, #1
  4018dc:	e033      	b.n	401946 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4018de:	2301      	movs	r3, #1
  4018e0:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  4018e2:	f04f 0e00 	mov.w	lr, #0
  4018e6:	e02e      	b.n	401946 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  4018e8:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4018ea:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4018ec:	f413 7f80 	tst.w	r3, #256	; 0x100
  4018f0:	d120      	bne.n	401934 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  4018f2:	1e51      	subs	r1, r2, #1
  4018f4:	b30a      	cbz	r2, 40193a <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4018f6:	2c01      	cmp	r4, #1
  4018f8:	d106      	bne.n	401908 <twi_master_read+0x70>
  4018fa:	f1be 0f00 	cmp.w	lr, #0
  4018fe:	d12f      	bne.n	401960 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  401900:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401904:	46e6      	mov	lr, ip
  401906:	e02b      	b.n	401960 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401908:	f013 0f02 	tst.w	r3, #2
  40190c:	d005      	beq.n	40191a <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  40190e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401910:	7033      	strb	r3, [r6, #0]

		cnt--;
  401912:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401914:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401916:	463a      	mov	r2, r7
  401918:	e000      	b.n	40191c <twi_master_read+0x84>
  40191a:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  40191c:	2c00      	cmp	r4, #0
  40191e:	d1e4      	bne.n	4018ea <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401920:	6a2b      	ldr	r3, [r5, #32]
  401922:	f013 0f01 	tst.w	r3, #1
  401926:	d0fb      	beq.n	401920 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  401928:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  40192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40192e:	2001      	movs	r0, #1
  401930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401934:	2005      	movs	r0, #5
  401936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  40193a:	2009      	movs	r0, #9
  40193c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401940:	2005      	movs	r0, #5
  401942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401946:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401948:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  40194c:	d1f8      	bne.n	401940 <twi_master_read+0xa8>
  40194e:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  401952:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  401956:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  40195a:	f04f 0c01 	mov.w	ip, #1
  40195e:	e7ca      	b.n	4018f6 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401960:	f013 0f02 	tst.w	r3, #2
  401964:	d0c0      	beq.n	4018e8 <twi_master_read+0x50>
  401966:	e7d2      	b.n	40190e <twi_master_read+0x76>

00401968 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401968:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40196a:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  40196c:	2d00      	cmp	r5, #0
  40196e:	d034      	beq.n	4019da <twi_master_write+0x72>
  401970:	460b      	mov	r3, r1
  401972:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401974:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401976:	2000      	movs	r0, #0
  401978:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40197a:	7c0a      	ldrb	r2, [r1, #16]
  40197c:	0412      	lsls	r2, r2, #16
  40197e:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401982:	685a      	ldr	r2, [r3, #4]
  401984:	0212      	lsls	r2, r2, #8
  401986:	f402 7240 	and.w	r2, r2, #768	; 0x300
  40198a:	430a      	orrs	r2, r1
  40198c:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  40198e:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401990:	6859      	ldr	r1, [r3, #4]
  401992:	4618      	mov	r0, r3
  401994:	f7ff ff6e 	bl	401874 <twi_mk_addr>
  401998:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40199a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40199c:	f413 7f80 	tst.w	r3, #256	; 0x100
  4019a0:	d004      	beq.n	4019ac <twi_master_write+0x44>
  4019a2:	e01c      	b.n	4019de <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4019a4:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4019a6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4019aa:	d11a      	bne.n	4019e2 <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  4019ac:	f013 0f04 	tst.w	r3, #4
  4019b0:	d003      	beq.n	4019ba <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4019b2:	7833      	ldrb	r3, [r6, #0]
  4019b4:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  4019b6:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4019b8:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  4019ba:	2d00      	cmp	r5, #0
  4019bc:	d1f2      	bne.n	4019a4 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  4019be:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4019c0:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4019c4:	d10f      	bne.n	4019e6 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  4019c6:	f013 0f04 	tst.w	r3, #4
  4019ca:	d0f8      	beq.n	4019be <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4019cc:	2302      	movs	r3, #2
  4019ce:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4019d0:	6a23      	ldr	r3, [r4, #32]
  4019d2:	f013 0f01 	tst.w	r3, #1
  4019d6:	d0fb      	beq.n	4019d0 <twi_master_write+0x68>
  4019d8:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4019da:	2001      	movs	r0, #1
  4019dc:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4019de:	2005      	movs	r0, #5
  4019e0:	bd70      	pop	{r4, r5, r6, pc}
  4019e2:	2005      	movs	r0, #5
  4019e4:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4019e6:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  4019e8:	bd70      	pop	{r4, r5, r6, pc}
  4019ea:	bf00      	nop

004019ec <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  4019ec:	b500      	push	{lr}
  4019ee:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  4019f0:	2300      	movs	r3, #0
  4019f2:	aa06      	add	r2, sp, #24
  4019f4:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  4019f8:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  4019fa:	2201      	movs	r2, #1
  4019fc:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  4019fe:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  401a02:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  401a06:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  401a08:	a901      	add	r1, sp, #4
  401a0a:	f7ff ffad 	bl	401968 <twi_master_write>
}
  401a0e:	b007      	add	sp, #28
  401a10:	f85d fb04 	ldr.w	pc, [sp], #4

00401a14 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401a14:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401a16:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401a1a:	d02f      	beq.n	401a7c <pio_set_peripheral+0x68>
  401a1c:	d807      	bhi.n	401a2e <pio_set_peripheral+0x1a>
  401a1e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401a22:	d014      	beq.n	401a4e <pio_set_peripheral+0x3a>
  401a24:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401a28:	d01e      	beq.n	401a68 <pio_set_peripheral+0x54>
  401a2a:	b939      	cbnz	r1, 401a3c <pio_set_peripheral+0x28>
  401a2c:	4770      	bx	lr
  401a2e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401a32:	d036      	beq.n	401aa2 <pio_set_peripheral+0x8e>
  401a34:	d804      	bhi.n	401a40 <pio_set_peripheral+0x2c>
  401a36:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401a3a:	d029      	beq.n	401a90 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401a3c:	6042      	str	r2, [r0, #4]
  401a3e:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401a40:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401a44:	d02d      	beq.n	401aa2 <pio_set_peripheral+0x8e>
  401a46:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401a4a:	d02a      	beq.n	401aa2 <pio_set_peripheral+0x8e>
  401a4c:	e7f6      	b.n	401a3c <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401a4e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401a50:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401a52:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401a54:	43d3      	mvns	r3, r2
  401a56:	4021      	ands	r1, r4
  401a58:	4019      	ands	r1, r3
  401a5a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401a5c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401a5e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401a60:	4021      	ands	r1, r4
  401a62:	400b      	ands	r3, r1
  401a64:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401a66:	e01a      	b.n	401a9e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401a68:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401a6a:	4313      	orrs	r3, r2
  401a6c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401a6e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401a70:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401a72:	400b      	ands	r3, r1
  401a74:	ea23 0302 	bic.w	r3, r3, r2
  401a78:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401a7a:	e7df      	b.n	401a3c <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401a7c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401a7e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401a80:	400b      	ands	r3, r1
  401a82:	ea23 0302 	bic.w	r3, r3, r2
  401a86:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401a88:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401a8a:	4313      	orrs	r3, r2
  401a8c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401a8e:	e7d5      	b.n	401a3c <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401a90:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401a92:	4313      	orrs	r3, r2
  401a94:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401a96:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401a98:	4313      	orrs	r3, r2
  401a9a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401a9c:	e7ce      	b.n	401a3c <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401a9e:	6042      	str	r2, [r0, #4]
}
  401aa0:	bc10      	pop	{r4}
  401aa2:	4770      	bx	lr

00401aa4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401aa4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401aa6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401aaa:	bf14      	ite	ne
  401aac:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401aae:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ab0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401ab4:	bf14      	ite	ne
  401ab6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401ab8:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401aba:	f012 0f02 	tst.w	r2, #2
  401abe:	d002      	beq.n	401ac6 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401ac0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401ac4:	e004      	b.n	401ad0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401ac6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401aca:	bf18      	it	ne
  401acc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401ad0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401ad2:	6001      	str	r1, [r0, #0]
  401ad4:	4770      	bx	lr
  401ad6:	bf00      	nop

00401ad8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401ad8:	b410      	push	{r4}
  401ada:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401adc:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ade:	b10c      	cbz	r4, 401ae4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401ae0:	6641      	str	r1, [r0, #100]	; 0x64
  401ae2:	e000      	b.n	401ae6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ae4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401ae6:	b10b      	cbz	r3, 401aec <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401ae8:	6501      	str	r1, [r0, #80]	; 0x50
  401aea:	e000      	b.n	401aee <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401aec:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401aee:	b10a      	cbz	r2, 401af4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401af0:	6301      	str	r1, [r0, #48]	; 0x30
  401af2:	e000      	b.n	401af6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401af4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401af6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401af8:	6001      	str	r1, [r0, #0]
}
  401afa:	bc10      	pop	{r4}
  401afc:	4770      	bx	lr
  401afe:	bf00      	nop

00401b00 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401b00:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401b02:	4770      	bx	lr

00401b04 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401b04:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401b06:	4770      	bx	lr

00401b08 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401b08:	b570      	push	{r4, r5, r6, lr}
  401b0a:	b082      	sub	sp, #8
  401b0c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401b0e:	0943      	lsrs	r3, r0, #5
  401b10:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401b14:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401b18:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401b1a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401b22:	d047      	beq.n	401bb4 <pio_configure_pin+0xac>
  401b24:	d809      	bhi.n	401b3a <pio_configure_pin+0x32>
  401b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401b2a:	d021      	beq.n	401b70 <pio_configure_pin+0x68>
  401b2c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401b30:	d02f      	beq.n	401b92 <pio_configure_pin+0x8a>
  401b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401b36:	d16f      	bne.n	401c18 <pio_configure_pin+0x110>
  401b38:	e009      	b.n	401b4e <pio_configure_pin+0x46>
  401b3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401b3e:	d055      	beq.n	401bec <pio_configure_pin+0xe4>
  401b40:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401b44:	d052      	beq.n	401bec <pio_configure_pin+0xe4>
  401b46:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401b4a:	d044      	beq.n	401bd6 <pio_configure_pin+0xce>
  401b4c:	e064      	b.n	401c18 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401b4e:	f000 001f 	and.w	r0, r0, #31
  401b52:	2601      	movs	r6, #1
  401b54:	4086      	lsls	r6, r0
  401b56:	4632      	mov	r2, r6
  401b58:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401b5c:	4620      	mov	r0, r4
  401b5e:	f7ff ff59 	bl	401a14 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b62:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401b66:	bf14      	ite	ne
  401b68:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401b6a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401b6c:	2001      	movs	r0, #1
  401b6e:	e054      	b.n	401c1a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401b70:	f000 001f 	and.w	r0, r0, #31
  401b74:	2601      	movs	r6, #1
  401b76:	4086      	lsls	r6, r0
  401b78:	4632      	mov	r2, r6
  401b7a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401b7e:	4620      	mov	r0, r4
  401b80:	f7ff ff48 	bl	401a14 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b84:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401b88:	bf14      	ite	ne
  401b8a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401b8c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401b8e:	2001      	movs	r0, #1
  401b90:	e043      	b.n	401c1a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401b92:	f000 001f 	and.w	r0, r0, #31
  401b96:	2601      	movs	r6, #1
  401b98:	4086      	lsls	r6, r0
  401b9a:	4632      	mov	r2, r6
  401b9c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401ba0:	4620      	mov	r0, r4
  401ba2:	f7ff ff37 	bl	401a14 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401ba6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401baa:	bf14      	ite	ne
  401bac:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401bae:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401bb0:	2001      	movs	r0, #1
  401bb2:	e032      	b.n	401c1a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401bb4:	f000 001f 	and.w	r0, r0, #31
  401bb8:	2601      	movs	r6, #1
  401bba:	4086      	lsls	r6, r0
  401bbc:	4632      	mov	r2, r6
  401bbe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401bc2:	4620      	mov	r0, r4
  401bc4:	f7ff ff26 	bl	401a14 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401bc8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401bcc:	bf14      	ite	ne
  401bce:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401bd0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401bd2:	2001      	movs	r0, #1
  401bd4:	e021      	b.n	401c1a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401bd6:	f000 011f 	and.w	r1, r0, #31
  401bda:	2601      	movs	r6, #1
  401bdc:	462a      	mov	r2, r5
  401bde:	fa06 f101 	lsl.w	r1, r6, r1
  401be2:	4620      	mov	r0, r4
  401be4:	f7ff ff5e 	bl	401aa4 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401be8:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401bea:	e016      	b.n	401c1a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401bec:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  401bf0:	f000 011f 	and.w	r1, r0, #31
  401bf4:	2601      	movs	r6, #1
  401bf6:	ea05 0306 	and.w	r3, r5, r6
  401bfa:	9300      	str	r3, [sp, #0]
  401bfc:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401c00:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401c04:	bf14      	ite	ne
  401c06:	2200      	movne	r2, #0
  401c08:	2201      	moveq	r2, #1
  401c0a:	fa06 f101 	lsl.w	r1, r6, r1
  401c0e:	4620      	mov	r0, r4
  401c10:	f7ff ff62 	bl	401ad8 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401c14:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401c16:	e000      	b.n	401c1a <pio_configure_pin+0x112>

	default:
		return 0;
  401c18:	2000      	movs	r0, #0
	}

	return 1;
}
  401c1a:	b002      	add	sp, #8
  401c1c:	bd70      	pop	{r4, r5, r6, pc}
  401c1e:	bf00      	nop

00401c20 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  401c20:	b570      	push	{r4, r5, r6, lr}
  401c22:	b082      	sub	sp, #8
  401c24:	4605      	mov	r5, r0
  401c26:	460e      	mov	r6, r1
  401c28:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401c2a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  401c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401c32:	d038      	beq.n	401ca6 <pio_configure_pin_group+0x86>
  401c34:	d809      	bhi.n	401c4a <pio_configure_pin_group+0x2a>
  401c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401c3a:	d01c      	beq.n	401c76 <pio_configure_pin_group+0x56>
  401c3c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401c40:	d025      	beq.n	401c8e <pio_configure_pin_group+0x6e>
  401c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401c46:	d150      	bne.n	401cea <pio_configure_pin_group+0xca>
  401c48:	e009      	b.n	401c5e <pio_configure_pin_group+0x3e>
  401c4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401c4e:	d03a      	beq.n	401cc6 <pio_configure_pin_group+0xa6>
  401c50:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401c54:	d037      	beq.n	401cc6 <pio_configure_pin_group+0xa6>
  401c56:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401c5a:	d030      	beq.n	401cbe <pio_configure_pin_group+0x9e>
  401c5c:	e045      	b.n	401cea <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  401c5e:	460a      	mov	r2, r1
  401c60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401c64:	f7ff fed6 	bl	401a14 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401c68:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401c6c:	bf14      	ite	ne
  401c6e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401c70:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401c72:	2001      	movs	r0, #1
  401c74:	e03a      	b.n	401cec <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  401c76:	460a      	mov	r2, r1
  401c78:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401c7c:	f7ff feca 	bl	401a14 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401c80:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401c84:	bf14      	ite	ne
  401c86:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401c88:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401c8a:	2001      	movs	r0, #1
  401c8c:	e02e      	b.n	401cec <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401c8e:	460a      	mov	r2, r1
  401c90:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401c94:	f7ff febe 	bl	401a14 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401c98:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401c9c:	bf14      	ite	ne
  401c9e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401ca0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401ca2:	2001      	movs	r0, #1
  401ca4:	e022      	b.n	401cec <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401ca6:	460a      	mov	r2, r1
  401ca8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401cac:	f7ff feb2 	bl	401a14 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cb0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401cb4:	bf14      	ite	ne
  401cb6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401cb8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401cba:	2001      	movs	r0, #1
  401cbc:	e016      	b.n	401cec <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401cbe:	f7ff fef1 	bl	401aa4 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401cc2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401cc4:	e012      	b.n	401cec <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401cc6:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401cca:	f004 0301 	and.w	r3, r4, #1
  401cce:	9300      	str	r3, [sp, #0]
  401cd0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401cd4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401cd8:	bf14      	ite	ne
  401cda:	2200      	movne	r2, #0
  401cdc:	2201      	moveq	r2, #1
  401cde:	4631      	mov	r1, r6
  401ce0:	4628      	mov	r0, r5
  401ce2:	f7ff fef9 	bl	401ad8 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401ce6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401ce8:	e000      	b.n	401cec <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401cea:	2000      	movs	r0, #0
	}

	return 1;
}
  401cec:	b002      	add	sp, #8
  401cee:	bd70      	pop	{r4, r5, r6, pc}

00401cf0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401cf4:	4681      	mov	r9, r0
  401cf6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401cf8:	f7ff ff02 	bl	401b00 <pio_get_interrupt_status>
  401cfc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401cfe:	4648      	mov	r0, r9
  401d00:	f7ff ff00 	bl	401b04 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401d04:	4005      	ands	r5, r0
  401d06:	d013      	beq.n	401d30 <pio_handler_process+0x40>
  401d08:	4c0e      	ldr	r4, [pc, #56]	; (401d44 <pio_handler_process+0x54>)
  401d0a:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401d0e:	6823      	ldr	r3, [r4, #0]
  401d10:	4543      	cmp	r3, r8
  401d12:	d108      	bne.n	401d26 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401d14:	6861      	ldr	r1, [r4, #4]
  401d16:	4229      	tst	r1, r5
  401d18:	d005      	beq.n	401d26 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401d1a:	68e3      	ldr	r3, [r4, #12]
  401d1c:	4640      	mov	r0, r8
  401d1e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401d20:	6863      	ldr	r3, [r4, #4]
  401d22:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401d26:	42b4      	cmp	r4, r6
  401d28:	d002      	beq.n	401d30 <pio_handler_process+0x40>
  401d2a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401d2c:	2d00      	cmp	r5, #0
  401d2e:	d1ee      	bne.n	401d0e <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401d30:	4b05      	ldr	r3, [pc, #20]	; (401d48 <pio_handler_process+0x58>)
  401d32:	681b      	ldr	r3, [r3, #0]
  401d34:	b123      	cbz	r3, 401d40 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401d36:	4b05      	ldr	r3, [pc, #20]	; (401d4c <pio_handler_process+0x5c>)
  401d38:	681b      	ldr	r3, [r3, #0]
  401d3a:	b10b      	cbz	r3, 401d40 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401d3c:	4648      	mov	r0, r9
  401d3e:	4798      	blx	r3
  401d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d44:	20000480 	.word	0x20000480
  401d48:	2000081c 	.word	0x2000081c
  401d4c:	2000047c 	.word	0x2000047c

00401d50 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401d50:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401d52:	210b      	movs	r1, #11
  401d54:	4801      	ldr	r0, [pc, #4]	; (401d5c <PIOA_Handler+0xc>)
  401d56:	f7ff ffcb 	bl	401cf0 <pio_handler_process>
  401d5a:	bd08      	pop	{r3, pc}
  401d5c:	400e0e00 	.word	0x400e0e00

00401d60 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401d60:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401d62:	210c      	movs	r1, #12
  401d64:	4801      	ldr	r0, [pc, #4]	; (401d6c <PIOB_Handler+0xc>)
  401d66:	f7ff ffc3 	bl	401cf0 <pio_handler_process>
  401d6a:	bd08      	pop	{r3, pc}
  401d6c:	400e1000 	.word	0x400e1000

00401d70 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401d70:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401d72:	210d      	movs	r1, #13
  401d74:	4801      	ldr	r0, [pc, #4]	; (401d7c <PIOC_Handler+0xc>)
  401d76:	f7ff ffbb 	bl	401cf0 <pio_handler_process>
  401d7a:	bd08      	pop	{r3, pc}
  401d7c:	400e1200 	.word	0x400e1200

00401d80 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401d80:	4a18      	ldr	r2, [pc, #96]	; (401de4 <pmc_switch_mck_to_pllack+0x64>)
  401d82:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401d88:	4318      	orrs	r0, r3
  401d8a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401d8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401d8e:	f013 0f08 	tst.w	r3, #8
  401d92:	d003      	beq.n	401d9c <pmc_switch_mck_to_pllack+0x1c>
  401d94:	e009      	b.n	401daa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401d96:	3b01      	subs	r3, #1
  401d98:	d103      	bne.n	401da2 <pmc_switch_mck_to_pllack+0x22>
  401d9a:	e01e      	b.n	401dda <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401da0:	4910      	ldr	r1, [pc, #64]	; (401de4 <pmc_switch_mck_to_pllack+0x64>)
  401da2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401da4:	f012 0f08 	tst.w	r2, #8
  401da8:	d0f5      	beq.n	401d96 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401daa:	4a0e      	ldr	r2, [pc, #56]	; (401de4 <pmc_switch_mck_to_pllack+0x64>)
  401dac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dae:	f023 0303 	bic.w	r3, r3, #3
  401db2:	f043 0302 	orr.w	r3, r3, #2
  401db6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401db8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401dba:	f010 0008 	ands.w	r0, r0, #8
  401dbe:	d004      	beq.n	401dca <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401dc0:	2000      	movs	r0, #0
  401dc2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401dc4:	3b01      	subs	r3, #1
  401dc6:	d103      	bne.n	401dd0 <pmc_switch_mck_to_pllack+0x50>
  401dc8:	e009      	b.n	401dde <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401dca:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401dce:	4905      	ldr	r1, [pc, #20]	; (401de4 <pmc_switch_mck_to_pllack+0x64>)
  401dd0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401dd2:	f012 0f08 	tst.w	r2, #8
  401dd6:	d0f5      	beq.n	401dc4 <pmc_switch_mck_to_pllack+0x44>
  401dd8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401dda:	2001      	movs	r0, #1
  401ddc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401dde:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401de0:	4770      	bx	lr
  401de2:	bf00      	nop
  401de4:	400e0400 	.word	0x400e0400

00401de8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401de8:	b138      	cbz	r0, 401dfa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401dea:	4911      	ldr	r1, [pc, #68]	; (401e30 <pmc_switch_mainck_to_xtal+0x48>)
  401dec:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401dee:	4a11      	ldr	r2, [pc, #68]	; (401e34 <pmc_switch_mainck_to_xtal+0x4c>)
  401df0:	401a      	ands	r2, r3
  401df2:	4b11      	ldr	r3, [pc, #68]	; (401e38 <pmc_switch_mainck_to_xtal+0x50>)
  401df4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401df6:	620b      	str	r3, [r1, #32]
  401df8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401dfa:	480d      	ldr	r0, [pc, #52]	; (401e30 <pmc_switch_mainck_to_xtal+0x48>)
  401dfc:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401dfe:	0209      	lsls	r1, r1, #8
  401e00:	b289      	uxth	r1, r1
  401e02:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  401e06:	f023 0303 	bic.w	r3, r3, #3
  401e0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401e0e:	f043 0301 	orr.w	r3, r3, #1
  401e12:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401e14:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401e16:	4602      	mov	r2, r0
  401e18:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e1a:	f013 0f01 	tst.w	r3, #1
  401e1e:	d0fb      	beq.n	401e18 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401e20:	4a03      	ldr	r2, [pc, #12]	; (401e30 <pmc_switch_mainck_to_xtal+0x48>)
  401e22:	6a13      	ldr	r3, [r2, #32]
  401e24:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401e2c:	6213      	str	r3, [r2, #32]
  401e2e:	4770      	bx	lr
  401e30:	400e0400 	.word	0x400e0400
  401e34:	fec8fffc 	.word	0xfec8fffc
  401e38:	01370002 	.word	0x01370002

00401e3c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401e3c:	4b02      	ldr	r3, [pc, #8]	; (401e48 <pmc_osc_is_ready_mainck+0xc>)
  401e3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401e40:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401e44:	4770      	bx	lr
  401e46:	bf00      	nop
  401e48:	400e0400 	.word	0x400e0400

00401e4c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401e4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401e50:	4b01      	ldr	r3, [pc, #4]	; (401e58 <pmc_disable_pllack+0xc>)
  401e52:	629a      	str	r2, [r3, #40]	; 0x28
  401e54:	4770      	bx	lr
  401e56:	bf00      	nop
  401e58:	400e0400 	.word	0x400e0400

00401e5c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401e5c:	4b02      	ldr	r3, [pc, #8]	; (401e68 <pmc_is_locked_pllack+0xc>)
  401e5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401e60:	f000 0002 	and.w	r0, r0, #2
  401e64:	4770      	bx	lr
  401e66:	bf00      	nop
  401e68:	400e0400 	.word	0x400e0400

00401e6c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401e6c:	2822      	cmp	r0, #34	; 0x22
  401e6e:	d81e      	bhi.n	401eae <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401e70:	281f      	cmp	r0, #31
  401e72:	d80c      	bhi.n	401e8e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401e74:	4b11      	ldr	r3, [pc, #68]	; (401ebc <pmc_enable_periph_clk+0x50>)
  401e76:	699a      	ldr	r2, [r3, #24]
  401e78:	2301      	movs	r3, #1
  401e7a:	4083      	lsls	r3, r0
  401e7c:	4393      	bics	r3, r2
  401e7e:	d018      	beq.n	401eb2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401e80:	2301      	movs	r3, #1
  401e82:	fa03 f000 	lsl.w	r0, r3, r0
  401e86:	4b0d      	ldr	r3, [pc, #52]	; (401ebc <pmc_enable_periph_clk+0x50>)
  401e88:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401e8a:	2000      	movs	r0, #0
  401e8c:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401e8e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401e90:	4b0a      	ldr	r3, [pc, #40]	; (401ebc <pmc_enable_periph_clk+0x50>)
  401e92:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401e96:	2301      	movs	r3, #1
  401e98:	4083      	lsls	r3, r0
  401e9a:	4393      	bics	r3, r2
  401e9c:	d00b      	beq.n	401eb6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401e9e:	2301      	movs	r3, #1
  401ea0:	fa03 f000 	lsl.w	r0, r3, r0
  401ea4:	4b05      	ldr	r3, [pc, #20]	; (401ebc <pmc_enable_periph_clk+0x50>)
  401ea6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401eaa:	2000      	movs	r0, #0
  401eac:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401eae:	2001      	movs	r0, #1
  401eb0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401eb2:	2000      	movs	r0, #0
  401eb4:	4770      	bx	lr
  401eb6:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401eb8:	4770      	bx	lr
  401eba:	bf00      	nop
  401ebc:	400e0400 	.word	0x400e0400

00401ec0 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401ec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401ec4:	6043      	str	r3, [r0, #4]
  401ec6:	4770      	bx	lr

00401ec8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401ec8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401eca:	23ac      	movs	r3, #172	; 0xac
  401ecc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401ece:	680b      	ldr	r3, [r1, #0]
  401ed0:	684a      	ldr	r2, [r1, #4]
  401ed2:	fbb3 f3f2 	udiv	r3, r3, r2
  401ed6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401ed8:	1e5c      	subs	r4, r3, #1
  401eda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401ede:	4294      	cmp	r4, r2
  401ee0:	d80a      	bhi.n	401ef8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  401ee2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401ee4:	688b      	ldr	r3, [r1, #8]
  401ee6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401ee8:	f240 2302 	movw	r3, #514	; 0x202
  401eec:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401ef0:	2350      	movs	r3, #80	; 0x50
  401ef2:	6003      	str	r3, [r0, #0]

	return 0;
  401ef4:	2000      	movs	r0, #0
  401ef6:	e000      	b.n	401efa <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  401ef8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  401efa:	bc10      	pop	{r4}
  401efc:	4770      	bx	lr
  401efe:	bf00      	nop

00401f00 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  401f00:	6940      	ldr	r0, [r0, #20]
}
  401f02:	f000 0001 	and.w	r0, r0, #1
  401f06:	4770      	bx	lr

00401f08 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401f08:	6943      	ldr	r3, [r0, #20]
  401f0a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401f0e:	bf1a      	itte	ne
  401f10:	61c1      	strne	r1, [r0, #28]
	return 0;
  401f12:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401f14:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  401f16:	4770      	bx	lr

00401f18 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401f18:	6943      	ldr	r3, [r0, #20]
  401f1a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401f1e:	bf1d      	ittte	ne
  401f20:	6983      	ldrne	r3, [r0, #24]
  401f22:	700b      	strbne	r3, [r1, #0]
	return 0;
  401f24:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  401f26:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  401f28:	4770      	bx	lr
  401f2a:	bf00      	nop

00401f2c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401f2c:	6943      	ldr	r3, [r0, #20]
  401f2e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401f32:	bf1d      	ittte	ne
  401f34:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401f38:	61c1      	strne	r1, [r0, #28]
	return 0;
  401f3a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  401f3c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  401f3e:	4770      	bx	lr

00401f40 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f40:	6943      	ldr	r3, [r0, #20]
  401f42:	f013 0f01 	tst.w	r3, #1
  401f46:	d005      	beq.n	401f54 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401f48:	6983      	ldr	r3, [r0, #24]
  401f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401f4e:	600b      	str	r3, [r1, #0]

	return 0;
  401f50:	2000      	movs	r0, #0
  401f52:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  401f54:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  401f56:	4770      	bx	lr

00401f58 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401f58:	b4f0      	push	{r4, r5, r6, r7}
  401f5a:	b08c      	sub	sp, #48	; 0x30
  401f5c:	4607      	mov	r7, r0
  401f5e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  401f60:	ac01      	add	r4, sp, #4
  401f62:	4d11      	ldr	r5, [pc, #68]	; (401fa8 <pwm_clocks_generate+0x50>)
  401f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401f6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401f70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  401f74:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401f76:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  401f78:	f852 3b04 	ldr.w	r3, [r2], #4
  401f7c:	fbb6 f3f3 	udiv	r3, r6, r3
  401f80:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401f88:	d905      	bls.n	401f96 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  401f8a:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401f8c:	280b      	cmp	r0, #11
  401f8e:	d1f3      	bne.n	401f78 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401f90:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401f94:	e005      	b.n	401fa2 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  401f96:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  401f98:	bf94      	ite	ls
  401f9a:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  401f9e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  401fa2:	b00c      	add	sp, #48	; 0x30
  401fa4:	bcf0      	pop	{r4, r5, r6, r7}
  401fa6:	4770      	bx	lr
  401fa8:	00406930 	.word	0x00406930

00401fac <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401fac:	b570      	push	{r4, r5, r6, lr}
  401fae:	4606      	mov	r6, r0
  401fb0:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  401fb2:	6808      	ldr	r0, [r1, #0]
  401fb4:	b140      	cbz	r0, 401fc8 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  401fb6:	6889      	ldr	r1, [r1, #8]
  401fb8:	f7ff ffce 	bl	401f58 <pwm_clocks_generate>
  401fbc:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  401fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401fc2:	4298      	cmp	r0, r3
  401fc4:	d101      	bne.n	401fca <pwm_init+0x1e>
  401fc6:	e00e      	b.n	401fe6 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  401fc8:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401fca:	6860      	ldr	r0, [r4, #4]
  401fcc:	b140      	cbz	r0, 401fe0 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401fce:	68a1      	ldr	r1, [r4, #8]
  401fd0:	f7ff ffc2 	bl	401f58 <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  401fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401fd8:	4298      	cmp	r0, r3
  401fda:	d007      	beq.n	401fec <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  401fdc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  401fe0:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  401fe2:	2000      	movs	r0, #0
  401fe4:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401fe6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401fea:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401fec:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  401ff0:	bd70      	pop	{r4, r5, r6, pc}
  401ff2:	bf00      	nop

00401ff4 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401ff4:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  401ff6:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401ff8:	684a      	ldr	r2, [r1, #4]
  401ffa:	f002 020f 	and.w	r2, r2, #15
  401ffe:	8a8c      	ldrh	r4, [r1, #20]
  402000:	4322      	orrs	r2, r4
  402002:	890c      	ldrh	r4, [r1, #8]
  402004:	4322      	orrs	r2, r4
  402006:	7a8c      	ldrb	r4, [r1, #10]
  402008:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  40200c:	7d8c      	ldrb	r4, [r1, #22]
  40200e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  402012:	7dcc      	ldrb	r4, [r1, #23]
  402014:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  402018:	7e0c      	ldrb	r4, [r1, #24]
  40201a:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  40201e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  402022:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  402026:	68ca      	ldr	r2, [r1, #12]
  402028:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  40202c:	690a      	ldr	r2, [r1, #16]
  40202e:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  402032:	7d8a      	ldrb	r2, [r1, #22]
  402034:	b13a      	cbz	r2, 402046 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  402036:	8b8c      	ldrh	r4, [r1, #28]
  402038:	8b4a      	ldrh	r2, [r1, #26]
  40203a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40203e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  402042:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  402046:	6c84      	ldr	r4, [r0, #72]	; 0x48
  402048:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  40204c:	409a      	lsls	r2, r3
  40204e:	43d2      	mvns	r2, r2
  402050:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  402054:	7fcc      	ldrb	r4, [r1, #31]
  402056:	fa04 f603 	lsl.w	r6, r4, r3
  40205a:	7f8c      	ldrb	r4, [r1, #30]
  40205c:	409c      	lsls	r4, r3
  40205e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  402062:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  402064:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  402066:	6c44      	ldr	r4, [r0, #68]	; 0x44
  402068:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40206a:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  40206e:	fa04 f503 	lsl.w	r5, r4, r3
  402072:	f891 4020 	ldrb.w	r4, [r1, #32]
  402076:	409c      	lsls	r4, r3
  402078:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40207c:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  40207e:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  402080:	2201      	movs	r2, #1
  402082:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  402084:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  402088:	b11c      	cbz	r4, 402092 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  40208a:	6a04      	ldr	r4, [r0, #32]
  40208c:	4314      	orrs	r4, r2
  40208e:	6204      	str	r4, [r0, #32]
  402090:	e003      	b.n	40209a <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  402092:	6a04      	ldr	r4, [r0, #32]
  402094:	ea24 0402 	bic.w	r4, r4, r2
  402098:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40209a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  40209e:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  4020a0:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4020a2:	bf0c      	ite	eq
  4020a4:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4020a6:	4394      	bicne	r4, r2
  4020a8:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4020aa:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4020ae:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  4020b0:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4020b2:	bf0c      	ite	eq
  4020b4:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  4020b8:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  4020bc:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4020be:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4020c0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4020c2:	22ff      	movs	r2, #255	; 0xff
  4020c4:	409a      	lsls	r2, r3
  4020c6:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4020ca:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  4020ce:	fa01 f303 	lsl.w	r3, r1, r3
  4020d2:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  4020d4:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  4020d6:	2000      	movs	r0, #0
  4020d8:	bc70      	pop	{r4, r5, r6}
  4020da:	4770      	bx	lr

004020dc <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4020dc:	690b      	ldr	r3, [r1, #16]
  4020de:	4293      	cmp	r3, r2
  4020e0:	d307      	bcc.n	4020f2 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  4020e2:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  4020e4:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4020e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4020ea:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  4020ee:	2000      	movs	r0, #0
  4020f0:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  4020f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4020f6:	4770      	bx	lr

004020f8 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4020f8:	2301      	movs	r3, #1
  4020fa:	fa03 f101 	lsl.w	r1, r3, r1
  4020fe:	6041      	str	r1, [r0, #4]
  402100:	4770      	bx	lr
  402102:	bf00      	nop

00402104 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  402104:	2301      	movs	r3, #1
  402106:	fa03 f101 	lsl.w	r1, r3, r1
  40210a:	6081      	str	r1, [r0, #8]
  40210c:	4770      	bx	lr
  40210e:	bf00      	nop

00402110 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402110:	e7fe      	b.n	402110 <Dummy_Handler>
  402112:	bf00      	nop

00402114 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402114:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  402116:	4b20      	ldr	r3, [pc, #128]	; (402198 <Reset_Handler+0x84>)
  402118:	4a20      	ldr	r2, [pc, #128]	; (40219c <Reset_Handler+0x88>)
  40211a:	429a      	cmp	r2, r3
  40211c:	d912      	bls.n	402144 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  40211e:	4b20      	ldr	r3, [pc, #128]	; (4021a0 <Reset_Handler+0x8c>)
  402120:	4a1d      	ldr	r2, [pc, #116]	; (402198 <Reset_Handler+0x84>)
  402122:	429a      	cmp	r2, r3
  402124:	d21e      	bcs.n	402164 <Reset_Handler+0x50>
  402126:	4611      	mov	r1, r2
  402128:	3b01      	subs	r3, #1
  40212a:	1a9b      	subs	r3, r3, r2
  40212c:	f023 0303 	bic.w	r3, r3, #3
  402130:	3304      	adds	r3, #4
  402132:	4a1a      	ldr	r2, [pc, #104]	; (40219c <Reset_Handler+0x88>)
  402134:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  402136:	f852 0b04 	ldr.w	r0, [r2], #4
  40213a:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40213e:	429a      	cmp	r2, r3
  402140:	d1f9      	bne.n	402136 <Reset_Handler+0x22>
  402142:	e00f      	b.n	402164 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  402144:	4b14      	ldr	r3, [pc, #80]	; (402198 <Reset_Handler+0x84>)
  402146:	4a15      	ldr	r2, [pc, #84]	; (40219c <Reset_Handler+0x88>)
  402148:	429a      	cmp	r2, r3
  40214a:	d20b      	bcs.n	402164 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40214c:	4b14      	ldr	r3, [pc, #80]	; (4021a0 <Reset_Handler+0x8c>)
  40214e:	4a12      	ldr	r2, [pc, #72]	; (402198 <Reset_Handler+0x84>)
  402150:	1a9a      	subs	r2, r3, r2
  402152:	4814      	ldr	r0, [pc, #80]	; (4021a4 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  402154:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402156:	b12a      	cbz	r2, 402164 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  402158:	f851 2904 	ldr.w	r2, [r1], #-4
  40215c:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  402160:	4281      	cmp	r1, r0
  402162:	d1f9      	bne.n	402158 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402164:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402166:	4b10      	ldr	r3, [pc, #64]	; (4021a8 <Reset_Handler+0x94>)
  402168:	4a10      	ldr	r2, [pc, #64]	; (4021ac <Reset_Handler+0x98>)
  40216a:	429a      	cmp	r2, r3
  40216c:	d20b      	bcs.n	402186 <Reset_Handler+0x72>
  40216e:	1d13      	adds	r3, r2, #4
  402170:	4a0f      	ldr	r2, [pc, #60]	; (4021b0 <Reset_Handler+0x9c>)
  402172:	1ad2      	subs	r2, r2, r3
  402174:	f022 0203 	bic.w	r2, r2, #3
  402178:	441a      	add	r2, r3
  40217a:	3b04      	subs	r3, #4
		*pDest++ = 0;
  40217c:	2100      	movs	r1, #0
  40217e:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402182:	429a      	cmp	r2, r3
  402184:	d1fb      	bne.n	40217e <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  402186:	4b0b      	ldr	r3, [pc, #44]	; (4021b4 <Reset_Handler+0xa0>)
  402188:	4a0b      	ldr	r2, [pc, #44]	; (4021b8 <Reset_Handler+0xa4>)
  40218a:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40218c:	f000 fcaa 	bl	402ae4 <__libc_init_array>

	/* Branch to main function */
	main();
  402190:	f7fe f8b0 	bl	4002f4 <main>
  402194:	e7fe      	b.n	402194 <Reset_Handler+0x80>
  402196:	bf00      	nop
  402198:	20000000 	.word	0x20000000
  40219c:	00406c9c 	.word	0x00406c9c
  4021a0:	200001e8 	.word	0x200001e8
  4021a4:	00406c98 	.word	0x00406c98
  4021a8:	20000824 	.word	0x20000824
  4021ac:	200001e8 	.word	0x200001e8
  4021b0:	20000827 	.word	0x20000827
  4021b4:	e000ed00 	.word	0xe000ed00
  4021b8:	00400000 	.word	0x00400000

004021bc <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4021bc:	4b3d      	ldr	r3, [pc, #244]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  4021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021c0:	f003 0303 	and.w	r3, r3, #3
  4021c4:	2b03      	cmp	r3, #3
  4021c6:	d85d      	bhi.n	402284 <SystemCoreClockUpdate+0xc8>
  4021c8:	e8df f003 	tbb	[pc, r3]
  4021cc:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4021d0:	4b39      	ldr	r3, [pc, #228]	; (4022b8 <SystemCoreClockUpdate+0xfc>)
  4021d2:	695b      	ldr	r3, [r3, #20]
  4021d4:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4021d8:	bf14      	ite	ne
  4021da:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4021de:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4021e2:	4b36      	ldr	r3, [pc, #216]	; (4022bc <SystemCoreClockUpdate+0x100>)
  4021e4:	601a      	str	r2, [r3, #0]
  4021e6:	e04d      	b.n	402284 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4021e8:	4b32      	ldr	r3, [pc, #200]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  4021ea:	6a1b      	ldr	r3, [r3, #32]
  4021ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4021f0:	d003      	beq.n	4021fa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4021f2:	4a33      	ldr	r2, [pc, #204]	; (4022c0 <SystemCoreClockUpdate+0x104>)
  4021f4:	4b31      	ldr	r3, [pc, #196]	; (4022bc <SystemCoreClockUpdate+0x100>)
  4021f6:	601a      	str	r2, [r3, #0]
  4021f8:	e044      	b.n	402284 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4021fa:	4a32      	ldr	r2, [pc, #200]	; (4022c4 <SystemCoreClockUpdate+0x108>)
  4021fc:	4b2f      	ldr	r3, [pc, #188]	; (4022bc <SystemCoreClockUpdate+0x100>)
  4021fe:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402200:	4b2c      	ldr	r3, [pc, #176]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  402202:	6a1b      	ldr	r3, [r3, #32]
  402204:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402208:	2b10      	cmp	r3, #16
  40220a:	d002      	beq.n	402212 <SystemCoreClockUpdate+0x56>
  40220c:	2b20      	cmp	r3, #32
  40220e:	d004      	beq.n	40221a <SystemCoreClockUpdate+0x5e>
  402210:	e038      	b.n	402284 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402212:	4a2d      	ldr	r2, [pc, #180]	; (4022c8 <SystemCoreClockUpdate+0x10c>)
  402214:	4b29      	ldr	r3, [pc, #164]	; (4022bc <SystemCoreClockUpdate+0x100>)
  402216:	601a      	str	r2, [r3, #0]
			break;
  402218:	e034      	b.n	402284 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40221a:	4a29      	ldr	r2, [pc, #164]	; (4022c0 <SystemCoreClockUpdate+0x104>)
  40221c:	4b27      	ldr	r3, [pc, #156]	; (4022bc <SystemCoreClockUpdate+0x100>)
  40221e:	601a      	str	r2, [r3, #0]
			break;
  402220:	e030      	b.n	402284 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402222:	4b24      	ldr	r3, [pc, #144]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  402224:	6a1b      	ldr	r3, [r3, #32]
  402226:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40222a:	d003      	beq.n	402234 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40222c:	4a24      	ldr	r2, [pc, #144]	; (4022c0 <SystemCoreClockUpdate+0x104>)
  40222e:	4b23      	ldr	r3, [pc, #140]	; (4022bc <SystemCoreClockUpdate+0x100>)
  402230:	601a      	str	r2, [r3, #0]
  402232:	e012      	b.n	40225a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402234:	4a23      	ldr	r2, [pc, #140]	; (4022c4 <SystemCoreClockUpdate+0x108>)
  402236:	4b21      	ldr	r3, [pc, #132]	; (4022bc <SystemCoreClockUpdate+0x100>)
  402238:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40223a:	4b1e      	ldr	r3, [pc, #120]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  40223c:	6a1b      	ldr	r3, [r3, #32]
  40223e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402242:	2b10      	cmp	r3, #16
  402244:	d002      	beq.n	40224c <SystemCoreClockUpdate+0x90>
  402246:	2b20      	cmp	r3, #32
  402248:	d004      	beq.n	402254 <SystemCoreClockUpdate+0x98>
  40224a:	e006      	b.n	40225a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40224c:	4a1e      	ldr	r2, [pc, #120]	; (4022c8 <SystemCoreClockUpdate+0x10c>)
  40224e:	4b1b      	ldr	r3, [pc, #108]	; (4022bc <SystemCoreClockUpdate+0x100>)
  402250:	601a      	str	r2, [r3, #0]
					break;
  402252:	e002      	b.n	40225a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402254:	4a1a      	ldr	r2, [pc, #104]	; (4022c0 <SystemCoreClockUpdate+0x104>)
  402256:	4b19      	ldr	r3, [pc, #100]	; (4022bc <SystemCoreClockUpdate+0x100>)
  402258:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40225a:	4b16      	ldr	r3, [pc, #88]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  40225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40225e:	f003 0303 	and.w	r3, r3, #3
  402262:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402264:	4a13      	ldr	r2, [pc, #76]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  402266:	bf07      	ittee	eq
  402268:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40226a:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40226c:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40226e:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402270:	4812      	ldr	r0, [pc, #72]	; (4022bc <SystemCoreClockUpdate+0x100>)
  402272:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402276:	6803      	ldr	r3, [r0, #0]
  402278:	fb01 3303 	mla	r3, r1, r3, r3
  40227c:	b2d2      	uxtb	r2, r2
  40227e:	fbb3 f3f2 	udiv	r3, r3, r2
  402282:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402284:	4b0b      	ldr	r3, [pc, #44]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  402286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402288:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40228c:	2b70      	cmp	r3, #112	; 0x70
  40228e:	d107      	bne.n	4022a0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  402290:	4a0a      	ldr	r2, [pc, #40]	; (4022bc <SystemCoreClockUpdate+0x100>)
  402292:	6813      	ldr	r3, [r2, #0]
  402294:	490d      	ldr	r1, [pc, #52]	; (4022cc <SystemCoreClockUpdate+0x110>)
  402296:	fba1 1303 	umull	r1, r3, r1, r3
  40229a:	085b      	lsrs	r3, r3, #1
  40229c:	6013      	str	r3, [r2, #0]
  40229e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4022a0:	4b04      	ldr	r3, [pc, #16]	; (4022b4 <SystemCoreClockUpdate+0xf8>)
  4022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4022a4:	4905      	ldr	r1, [pc, #20]	; (4022bc <SystemCoreClockUpdate+0x100>)
  4022a6:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4022aa:	680b      	ldr	r3, [r1, #0]
  4022ac:	40d3      	lsrs	r3, r2
  4022ae:	600b      	str	r3, [r1, #0]
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop
  4022b4:	400e0400 	.word	0x400e0400
  4022b8:	400e1410 	.word	0x400e1410
  4022bc:	20000010 	.word	0x20000010
  4022c0:	00b71b00 	.word	0x00b71b00
  4022c4:	003d0900 	.word	0x003d0900
  4022c8:	007a1200 	.word	0x007a1200
  4022cc:	aaaaaaab 	.word	0xaaaaaaab

004022d0 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4022d0:	4b1a      	ldr	r3, [pc, #104]	; (40233c <system_init_flash+0x6c>)
  4022d2:	4298      	cmp	r0, r3
  4022d4:	d807      	bhi.n	4022e6 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4022d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4022da:	4a19      	ldr	r2, [pc, #100]	; (402340 <system_init_flash+0x70>)
  4022dc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4022de:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4022e2:	6013      	str	r3, [r2, #0]
  4022e4:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4022e6:	4b17      	ldr	r3, [pc, #92]	; (402344 <system_init_flash+0x74>)
  4022e8:	4298      	cmp	r0, r3
  4022ea:	d806      	bhi.n	4022fa <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4022ec:	4b16      	ldr	r3, [pc, #88]	; (402348 <system_init_flash+0x78>)
  4022ee:	4a14      	ldr	r2, [pc, #80]	; (402340 <system_init_flash+0x70>)
  4022f0:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4022f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4022f6:	6013      	str	r3, [r2, #0]
  4022f8:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4022fa:	4b14      	ldr	r3, [pc, #80]	; (40234c <system_init_flash+0x7c>)
  4022fc:	4298      	cmp	r0, r3
  4022fe:	d806      	bhi.n	40230e <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402300:	4b13      	ldr	r3, [pc, #76]	; (402350 <system_init_flash+0x80>)
  402302:	4a0f      	ldr	r2, [pc, #60]	; (402340 <system_init_flash+0x70>)
  402304:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402306:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40230a:	6013      	str	r3, [r2, #0]
  40230c:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40230e:	4b11      	ldr	r3, [pc, #68]	; (402354 <system_init_flash+0x84>)
  402310:	4298      	cmp	r0, r3
  402312:	d806      	bhi.n	402322 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402314:	4b10      	ldr	r3, [pc, #64]	; (402358 <system_init_flash+0x88>)
  402316:	4a0a      	ldr	r2, [pc, #40]	; (402340 <system_init_flash+0x70>)
  402318:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40231a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40231e:	6013      	str	r3, [r2, #0]
  402320:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402322:	4b0e      	ldr	r3, [pc, #56]	; (40235c <system_init_flash+0x8c>)
  402324:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402326:	bf94      	ite	ls
  402328:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40232c:	4b0c      	ldrhi	r3, [pc, #48]	; (402360 <system_init_flash+0x90>)
  40232e:	4a04      	ldr	r2, [pc, #16]	; (402340 <system_init_flash+0x70>)
  402330:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402332:	f502 7200 	add.w	r2, r2, #512	; 0x200
  402336:	6013      	str	r3, [r2, #0]
  402338:	4770      	bx	lr
  40233a:	bf00      	nop
  40233c:	01312cff 	.word	0x01312cff
  402340:	400e0a00 	.word	0x400e0a00
  402344:	026259ff 	.word	0x026259ff
  402348:	04000100 	.word	0x04000100
  40234c:	039386ff 	.word	0x039386ff
  402350:	04000200 	.word	0x04000200
  402354:	04c4b3ff 	.word	0x04c4b3ff
  402358:	04000300 	.word	0x04000300
  40235c:	05f5e0ff 	.word	0x05f5e0ff
  402360:	04000500 	.word	0x04000500

00402364 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402364:	4b09      	ldr	r3, [pc, #36]	; (40238c <_sbrk+0x28>)
  402366:	681b      	ldr	r3, [r3, #0]
  402368:	b913      	cbnz	r3, 402370 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40236a:	4a09      	ldr	r2, [pc, #36]	; (402390 <_sbrk+0x2c>)
  40236c:	4b07      	ldr	r3, [pc, #28]	; (40238c <_sbrk+0x28>)
  40236e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402370:	4b06      	ldr	r3, [pc, #24]	; (40238c <_sbrk+0x28>)
  402372:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402374:	181a      	adds	r2, r3, r0
  402376:	4907      	ldr	r1, [pc, #28]	; (402394 <_sbrk+0x30>)
  402378:	4291      	cmp	r1, r2
  40237a:	db04      	blt.n	402386 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  40237c:	4610      	mov	r0, r2
  40237e:	4a03      	ldr	r2, [pc, #12]	; (40238c <_sbrk+0x28>)
  402380:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402382:	4618      	mov	r0, r3
  402384:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  402386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40238a:	4770      	bx	lr
  40238c:	200004f0 	.word	0x200004f0
  402390:	20003828 	.word	0x20003828
  402394:	20027ffc 	.word	0x20027ffc

00402398 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40239c:	4770      	bx	lr
  40239e:	bf00      	nop

004023a0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4023a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4023a4:	604b      	str	r3, [r1, #4]

	return 0;
}
  4023a6:	2000      	movs	r0, #0
  4023a8:	4770      	bx	lr
  4023aa:	bf00      	nop

004023ac <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4023ac:	2001      	movs	r0, #1
  4023ae:	4770      	bx	lr

004023b0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4023b0:	2000      	movs	r0, #0
  4023b2:	4770      	bx	lr

004023b4 <atan2>:
  4023b4:	f000 b85c 	b.w	402470 <__ieee754_atan2>

004023b8 <sqrt>:
  4023b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023bc:	b08b      	sub	sp, #44	; 0x2c
  4023be:	4604      	mov	r4, r0
  4023c0:	460d      	mov	r5, r1
  4023c2:	f000 f91f 	bl	402604 <__ieee754_sqrt>
  4023c6:	4b28      	ldr	r3, [pc, #160]	; (402468 <sqrt+0xb0>)
  4023c8:	f993 a000 	ldrsb.w	sl, [r3]
  4023cc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  4023d0:	4606      	mov	r6, r0
  4023d2:	460f      	mov	r7, r1
  4023d4:	d012      	beq.n	4023fc <sqrt+0x44>
  4023d6:	4622      	mov	r2, r4
  4023d8:	462b      	mov	r3, r5
  4023da:	4620      	mov	r0, r4
  4023dc:	4629      	mov	r1, r5
  4023de:	f003 fd77 	bl	405ed0 <__aeabi_dcmpun>
  4023e2:	4683      	mov	fp, r0
  4023e4:	b950      	cbnz	r0, 4023fc <sqrt+0x44>
  4023e6:	f04f 0800 	mov.w	r8, #0
  4023ea:	f04f 0900 	mov.w	r9, #0
  4023ee:	4642      	mov	r2, r8
  4023f0:	464b      	mov	r3, r9
  4023f2:	4620      	mov	r0, r4
  4023f4:	4629      	mov	r1, r5
  4023f6:	f003 fd43 	bl	405e80 <__aeabi_dcmplt>
  4023fa:	b920      	cbnz	r0, 402406 <sqrt+0x4e>
  4023fc:	4630      	mov	r0, r6
  4023fe:	4639      	mov	r1, r7
  402400:	b00b      	add	sp, #44	; 0x2c
  402402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402406:	4b19      	ldr	r3, [pc, #100]	; (40246c <sqrt+0xb4>)
  402408:	f8cd b020 	str.w	fp, [sp, #32]
  40240c:	2201      	movs	r2, #1
  40240e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  402412:	e9cd 4502 	strd	r4, r5, [sp, #8]
  402416:	e88d 000c 	stmia.w	sp, {r2, r3}
  40241a:	f1ba 0f00 	cmp.w	sl, #0
  40241e:	d015      	beq.n	40244c <sqrt+0x94>
  402420:	4642      	mov	r2, r8
  402422:	464b      	mov	r3, r9
  402424:	4640      	mov	r0, r8
  402426:	4649      	mov	r1, r9
  402428:	f003 fbe2 	bl	405bf0 <__aeabi_ddiv>
  40242c:	f1ba 0f02 	cmp.w	sl, #2
  402430:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402434:	d10c      	bne.n	402450 <sqrt+0x98>
  402436:	f000 fb4f 	bl	402ad8 <__errno>
  40243a:	2321      	movs	r3, #33	; 0x21
  40243c:	6003      	str	r3, [r0, #0]
  40243e:	9b08      	ldr	r3, [sp, #32]
  402440:	b963      	cbnz	r3, 40245c <sqrt+0xa4>
  402442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  402446:	b00b      	add	sp, #44	; 0x2c
  402448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40244c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  402450:	4668      	mov	r0, sp
  402452:	f000 fb3b 	bl	402acc <matherr>
  402456:	2800      	cmp	r0, #0
  402458:	d1f1      	bne.n	40243e <sqrt+0x86>
  40245a:	e7ec      	b.n	402436 <sqrt+0x7e>
  40245c:	f000 fb3c 	bl	402ad8 <__errno>
  402460:	9b08      	ldr	r3, [sp, #32]
  402462:	6003      	str	r3, [r0, #0]
  402464:	e7ed      	b.n	402442 <sqrt+0x8a>
  402466:	bf00      	nop
  402468:	20000014 	.word	0x20000014
  40246c:	0040695c 	.word	0x0040695c

00402470 <__ieee754_atan2>:
  402470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402474:	4254      	negs	r4, r2
  402476:	4314      	orrs	r4, r2
  402478:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  40247c:	f8df e180 	ldr.w	lr, [pc, #384]	; 402600 <__ieee754_atan2+0x190>
  402480:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  402484:	4574      	cmp	r4, lr
  402486:	4606      	mov	r6, r0
  402488:	460d      	mov	r5, r1
  40248a:	d83e      	bhi.n	40250a <__ieee754_atan2+0x9a>
  40248c:	4244      	negs	r4, r0
  40248e:	4304      	orrs	r4, r0
  402490:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  402494:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  402498:	4574      	cmp	r4, lr
  40249a:	468a      	mov	sl, r1
  40249c:	d835      	bhi.n	40250a <__ieee754_atan2+0x9a>
  40249e:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  4024a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  4024a6:	4314      	orrs	r4, r2
  4024a8:	d044      	beq.n	402534 <__ieee754_atan2+0xc4>
  4024aa:	179c      	asrs	r4, r3, #30
  4024ac:	f004 0402 	and.w	r4, r4, #2
  4024b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  4024b4:	ea50 010b 	orrs.w	r1, r0, fp
  4024b8:	d02f      	beq.n	40251a <__ieee754_atan2+0xaa>
  4024ba:	ea52 0109 	orrs.w	r1, r2, r9
  4024be:	d033      	beq.n	402528 <__ieee754_atan2+0xb8>
  4024c0:	45f1      	cmp	r9, lr
  4024c2:	d046      	beq.n	402552 <__ieee754_atan2+0xe2>
  4024c4:	45f3      	cmp	fp, lr
  4024c6:	d02f      	beq.n	402528 <__ieee754_atan2+0xb8>
  4024c8:	ebc9 090b 	rsb	r9, r9, fp
  4024cc:	ea4f 5929 	mov.w	r9, r9, asr #20
  4024d0:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  4024d4:	dc34      	bgt.n	402540 <__ieee754_atan2+0xd0>
  4024d6:	2b00      	cmp	r3, #0
  4024d8:	db57      	blt.n	40258a <__ieee754_atan2+0x11a>
  4024da:	4630      	mov	r0, r6
  4024dc:	4629      	mov	r1, r5
  4024de:	f003 fb87 	bl	405bf0 <__aeabi_ddiv>
  4024e2:	f000 faef 	bl	402ac4 <fabs>
  4024e6:	f000 f94f 	bl	402788 <atan>
  4024ea:	2c01      	cmp	r4, #1
  4024ec:	d04a      	beq.n	402584 <__ieee754_atan2+0x114>
  4024ee:	2c02      	cmp	r4, #2
  4024f0:	d03b      	beq.n	40256a <__ieee754_atan2+0xfa>
  4024f2:	b184      	cbz	r4, 402516 <__ieee754_atan2+0xa6>
  4024f4:	a332      	add	r3, pc, #200	; (adr r3, 4025c0 <__ieee754_atan2+0x150>)
  4024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024fa:	f003 f89b 	bl	405634 <__aeabi_dsub>
  4024fe:	a332      	add	r3, pc, #200	; (adr r3, 4025c8 <__ieee754_atan2+0x158>)
  402500:	e9d3 2300 	ldrd	r2, r3, [r3]
  402504:	f003 f896 	bl	405634 <__aeabi_dsub>
  402508:	e005      	b.n	402516 <__ieee754_atan2+0xa6>
  40250a:	4610      	mov	r0, r2
  40250c:	4619      	mov	r1, r3
  40250e:	4632      	mov	r2, r6
  402510:	462b      	mov	r3, r5
  402512:	f003 f891 	bl	405638 <__adddf3>
  402516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40251a:	2c02      	cmp	r4, #2
  40251c:	d014      	beq.n	402548 <__ieee754_atan2+0xd8>
  40251e:	2c03      	cmp	r4, #3
  402520:	d10c      	bne.n	40253c <__ieee754_atan2+0xcc>
  402522:	482d      	ldr	r0, [pc, #180]	; (4025d8 <__ieee754_atan2+0x168>)
  402524:	492d      	ldr	r1, [pc, #180]	; (4025dc <__ieee754_atan2+0x16c>)
  402526:	e7f6      	b.n	402516 <__ieee754_atan2+0xa6>
  402528:	f1ba 0f00 	cmp.w	sl, #0
  40252c:	482a      	ldr	r0, [pc, #168]	; (4025d8 <__ieee754_atan2+0x168>)
  40252e:	db0e      	blt.n	40254e <__ieee754_atan2+0xde>
  402530:	492b      	ldr	r1, [pc, #172]	; (4025e0 <__ieee754_atan2+0x170>)
  402532:	e7f0      	b.n	402516 <__ieee754_atan2+0xa6>
  402534:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402538:	f000 b926 	b.w	402788 <atan>
  40253c:	4629      	mov	r1, r5
  40253e:	e7ea      	b.n	402516 <__ieee754_atan2+0xa6>
  402540:	a123      	add	r1, pc, #140	; (adr r1, 4025d0 <__ieee754_atan2+0x160>)
  402542:	e9d1 0100 	ldrd	r0, r1, [r1]
  402546:	e7d0      	b.n	4024ea <__ieee754_atan2+0x7a>
  402548:	4823      	ldr	r0, [pc, #140]	; (4025d8 <__ieee754_atan2+0x168>)
  40254a:	4926      	ldr	r1, [pc, #152]	; (4025e4 <__ieee754_atan2+0x174>)
  40254c:	e7e3      	b.n	402516 <__ieee754_atan2+0xa6>
  40254e:	4926      	ldr	r1, [pc, #152]	; (4025e8 <__ieee754_atan2+0x178>)
  402550:	e7e1      	b.n	402516 <__ieee754_atan2+0xa6>
  402552:	45cb      	cmp	fp, r9
  402554:	d01f      	beq.n	402596 <__ieee754_atan2+0x126>
  402556:	2c02      	cmp	r4, #2
  402558:	d0f6      	beq.n	402548 <__ieee754_atan2+0xd8>
  40255a:	2c03      	cmp	r4, #3
  40255c:	d0e1      	beq.n	402522 <__ieee754_atan2+0xb2>
  40255e:	2c01      	cmp	r4, #1
  402560:	f04f 0000 	mov.w	r0, #0
  402564:	d020      	beq.n	4025a8 <__ieee754_atan2+0x138>
  402566:	4601      	mov	r1, r0
  402568:	e7d5      	b.n	402516 <__ieee754_atan2+0xa6>
  40256a:	a315      	add	r3, pc, #84	; (adr r3, 4025c0 <__ieee754_atan2+0x150>)
  40256c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402570:	f003 f860 	bl	405634 <__aeabi_dsub>
  402574:	4602      	mov	r2, r0
  402576:	460b      	mov	r3, r1
  402578:	a113      	add	r1, pc, #76	; (adr r1, 4025c8 <__ieee754_atan2+0x158>)
  40257a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40257e:	f003 f859 	bl	405634 <__aeabi_dsub>
  402582:	e7c8      	b.n	402516 <__ieee754_atan2+0xa6>
  402584:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402588:	e7c5      	b.n	402516 <__ieee754_atan2+0xa6>
  40258a:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  40258e:	daa4      	bge.n	4024da <__ieee754_atan2+0x6a>
  402590:	2000      	movs	r0, #0
  402592:	2100      	movs	r1, #0
  402594:	e7a9      	b.n	4024ea <__ieee754_atan2+0x7a>
  402596:	2c02      	cmp	r4, #2
  402598:	d00e      	beq.n	4025b8 <__ieee754_atan2+0x148>
  40259a:	2c03      	cmp	r4, #3
  40259c:	d009      	beq.n	4025b2 <__ieee754_atan2+0x142>
  40259e:	2c01      	cmp	r4, #1
  4025a0:	480d      	ldr	r0, [pc, #52]	; (4025d8 <__ieee754_atan2+0x168>)
  4025a2:	d004      	beq.n	4025ae <__ieee754_atan2+0x13e>
  4025a4:	4911      	ldr	r1, [pc, #68]	; (4025ec <__ieee754_atan2+0x17c>)
  4025a6:	e7b6      	b.n	402516 <__ieee754_atan2+0xa6>
  4025a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4025ac:	e7b3      	b.n	402516 <__ieee754_atan2+0xa6>
  4025ae:	4910      	ldr	r1, [pc, #64]	; (4025f0 <__ieee754_atan2+0x180>)
  4025b0:	e7b1      	b.n	402516 <__ieee754_atan2+0xa6>
  4025b2:	4810      	ldr	r0, [pc, #64]	; (4025f4 <__ieee754_atan2+0x184>)
  4025b4:	4910      	ldr	r1, [pc, #64]	; (4025f8 <__ieee754_atan2+0x188>)
  4025b6:	e7ae      	b.n	402516 <__ieee754_atan2+0xa6>
  4025b8:	480e      	ldr	r0, [pc, #56]	; (4025f4 <__ieee754_atan2+0x184>)
  4025ba:	4910      	ldr	r1, [pc, #64]	; (4025fc <__ieee754_atan2+0x18c>)
  4025bc:	e7ab      	b.n	402516 <__ieee754_atan2+0xa6>
  4025be:	bf00      	nop
  4025c0:	33145c07 	.word	0x33145c07
  4025c4:	3ca1a626 	.word	0x3ca1a626
  4025c8:	54442d18 	.word	0x54442d18
  4025cc:	400921fb 	.word	0x400921fb
  4025d0:	54442d18 	.word	0x54442d18
  4025d4:	3ff921fb 	.word	0x3ff921fb
  4025d8:	54442d18 	.word	0x54442d18
  4025dc:	c00921fb 	.word	0xc00921fb
  4025e0:	3ff921fb 	.word	0x3ff921fb
  4025e4:	400921fb 	.word	0x400921fb
  4025e8:	bff921fb 	.word	0xbff921fb
  4025ec:	3fe921fb 	.word	0x3fe921fb
  4025f0:	bfe921fb 	.word	0xbfe921fb
  4025f4:	7f3321d2 	.word	0x7f3321d2
  4025f8:	c002d97c 	.word	0xc002d97c
  4025fc:	4002d97c 	.word	0x4002d97c
  402600:	7ff00000 	.word	0x7ff00000

00402604 <__ieee754_sqrt>:
  402604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402608:	4e5d      	ldr	r6, [pc, #372]	; (402780 <__ieee754_sqrt+0x17c>)
  40260a:	46b6      	mov	lr, r6
  40260c:	400e      	ands	r6, r1
  40260e:	4576      	cmp	r6, lr
  402610:	460c      	mov	r4, r1
  402612:	4605      	mov	r5, r0
  402614:	f000 8095 	beq.w	402742 <__ieee754_sqrt+0x13e>
  402618:	2900      	cmp	r1, #0
  40261a:	460b      	mov	r3, r1
  40261c:	4602      	mov	r2, r0
  40261e:	dd73      	ble.n	402708 <__ieee754_sqrt+0x104>
  402620:	150f      	asrs	r7, r1, #20
  402622:	d07e      	beq.n	402722 <__ieee754_sqrt+0x11e>
  402624:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402628:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40262c:	07f8      	lsls	r0, r7, #31
  40262e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402632:	d464      	bmi.n	4026fe <__ieee754_sqrt+0xfa>
  402634:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402638:	2600      	movs	r6, #0
  40263a:	440b      	add	r3, r1
  40263c:	107f      	asrs	r7, r7, #1
  40263e:	0052      	lsls	r2, r2, #1
  402640:	46b6      	mov	lr, r6
  402642:	2016      	movs	r0, #22
  402644:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402648:	eb0e 0401 	add.w	r4, lr, r1
  40264c:	429c      	cmp	r4, r3
  40264e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  402652:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402656:	dc03      	bgt.n	402660 <__ieee754_sqrt+0x5c>
  402658:	1b1b      	subs	r3, r3, r4
  40265a:	eb04 0e01 	add.w	lr, r4, r1
  40265e:	440e      	add	r6, r1
  402660:	3801      	subs	r0, #1
  402662:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  402666:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40266a:	d1ed      	bne.n	402648 <__ieee754_sqrt+0x44>
  40266c:	4684      	mov	ip, r0
  40266e:	2420      	movs	r4, #32
  402670:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402674:	e009      	b.n	40268a <__ieee754_sqrt+0x86>
  402676:	d020      	beq.n	4026ba <__ieee754_sqrt+0xb6>
  402678:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40267c:	3c01      	subs	r4, #1
  40267e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  402682:	442b      	add	r3, r5
  402684:	ea4f 0242 	mov.w	r2, r2, lsl #1
  402688:	d020      	beq.n	4026cc <__ieee754_sqrt+0xc8>
  40268a:	459e      	cmp	lr, r3
  40268c:	eb01 050c 	add.w	r5, r1, ip
  402690:	daf1      	bge.n	402676 <__ieee754_sqrt+0x72>
  402692:	2d00      	cmp	r5, #0
  402694:	eb05 0c01 	add.w	ip, r5, r1
  402698:	db09      	blt.n	4026ae <__ieee754_sqrt+0xaa>
  40269a:	46f0      	mov	r8, lr
  40269c:	4295      	cmp	r5, r2
  40269e:	ebce 0303 	rsb	r3, lr, r3
  4026a2:	d900      	bls.n	4026a6 <__ieee754_sqrt+0xa2>
  4026a4:	3b01      	subs	r3, #1
  4026a6:	1b52      	subs	r2, r2, r5
  4026a8:	4408      	add	r0, r1
  4026aa:	46c6      	mov	lr, r8
  4026ac:	e7e4      	b.n	402678 <__ieee754_sqrt+0x74>
  4026ae:	f1bc 0f00 	cmp.w	ip, #0
  4026b2:	dbf2      	blt.n	40269a <__ieee754_sqrt+0x96>
  4026b4:	f10e 0801 	add.w	r8, lr, #1
  4026b8:	e7f0      	b.n	40269c <__ieee754_sqrt+0x98>
  4026ba:	4295      	cmp	r5, r2
  4026bc:	d817      	bhi.n	4026ee <__ieee754_sqrt+0xea>
  4026be:	2d00      	cmp	r5, #0
  4026c0:	eb05 0c01 	add.w	ip, r5, r1
  4026c4:	db47      	blt.n	402756 <__ieee754_sqrt+0x152>
  4026c6:	4698      	mov	r8, r3
  4026c8:	2300      	movs	r3, #0
  4026ca:	e7ec      	b.n	4026a6 <__ieee754_sqrt+0xa2>
  4026cc:	4313      	orrs	r3, r2
  4026ce:	d110      	bne.n	4026f2 <__ieee754_sqrt+0xee>
  4026d0:	0840      	lsrs	r0, r0, #1
  4026d2:	1073      	asrs	r3, r6, #1
  4026d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  4026d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4026dc:	07f2      	lsls	r2, r6, #31
  4026de:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  4026e2:	bf48      	it	mi
  4026e4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  4026e8:	4649      	mov	r1, r9
  4026ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4026ee:	4673      	mov	r3, lr
  4026f0:	e7c2      	b.n	402678 <__ieee754_sqrt+0x74>
  4026f2:	1c41      	adds	r1, r0, #1
  4026f4:	d033      	beq.n	40275e <__ieee754_sqrt+0x15a>
  4026f6:	f000 0301 	and.w	r3, r0, #1
  4026fa:	4418      	add	r0, r3
  4026fc:	e7e8      	b.n	4026d0 <__ieee754_sqrt+0xcc>
  4026fe:	005b      	lsls	r3, r3, #1
  402700:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  402704:	0052      	lsls	r2, r2, #1
  402706:	e795      	b.n	402634 <__ieee754_sqrt+0x30>
  402708:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40270c:	4306      	orrs	r6, r0
  40270e:	d0ec      	beq.n	4026ea <__ieee754_sqrt+0xe6>
  402710:	bb69      	cbnz	r1, 40276e <__ieee754_sqrt+0x16a>
  402712:	460f      	mov	r7, r1
  402714:	0ad3      	lsrs	r3, r2, #11
  402716:	3f15      	subs	r7, #21
  402718:	0552      	lsls	r2, r2, #21
  40271a:	2b00      	cmp	r3, #0
  40271c:	d0fa      	beq.n	402714 <__ieee754_sqrt+0x110>
  40271e:	02dd      	lsls	r5, r3, #11
  402720:	d420      	bmi.n	402764 <__ieee754_sqrt+0x160>
  402722:	2100      	movs	r1, #0
  402724:	e000      	b.n	402728 <__ieee754_sqrt+0x124>
  402726:	4601      	mov	r1, r0
  402728:	005b      	lsls	r3, r3, #1
  40272a:	02dc      	lsls	r4, r3, #11
  40272c:	f101 0001 	add.w	r0, r1, #1
  402730:	d5f9      	bpl.n	402726 <__ieee754_sqrt+0x122>
  402732:	f1c0 0420 	rsb	r4, r0, #32
  402736:	fa22 f404 	lsr.w	r4, r2, r4
  40273a:	4323      	orrs	r3, r4
  40273c:	1a7f      	subs	r7, r7, r1
  40273e:	4082      	lsls	r2, r0
  402740:	e770      	b.n	402624 <__ieee754_sqrt+0x20>
  402742:	4602      	mov	r2, r0
  402744:	460b      	mov	r3, r1
  402746:	f003 f929 	bl	40599c <__aeabi_dmul>
  40274a:	462a      	mov	r2, r5
  40274c:	4623      	mov	r3, r4
  40274e:	f002 ff73 	bl	405638 <__adddf3>
  402752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402756:	f1bc 0f00 	cmp.w	ip, #0
  40275a:	daab      	bge.n	4026b4 <__ieee754_sqrt+0xb0>
  40275c:	e7b3      	b.n	4026c6 <__ieee754_sqrt+0xc2>
  40275e:	3601      	adds	r6, #1
  402760:	4620      	mov	r0, r4
  402762:	e7b6      	b.n	4026d2 <__ieee754_sqrt+0xce>
  402764:	2420      	movs	r4, #32
  402766:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  40276a:	2000      	movs	r0, #0
  40276c:	e7e3      	b.n	402736 <__ieee754_sqrt+0x132>
  40276e:	4602      	mov	r2, r0
  402770:	460b      	mov	r3, r1
  402772:	f002 ff5f 	bl	405634 <__aeabi_dsub>
  402776:	4602      	mov	r2, r0
  402778:	460b      	mov	r3, r1
  40277a:	f003 fa39 	bl	405bf0 <__aeabi_ddiv>
  40277e:	e7b4      	b.n	4026ea <__ieee754_sqrt+0xe6>
  402780:	7ff00000 	.word	0x7ff00000
  402784:	00000000 	.word	0x00000000

00402788 <atan>:
  402788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40278c:	4bc0      	ldr	r3, [pc, #768]	; (402a90 <atan+0x308>)
  40278e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  402792:	429e      	cmp	r6, r3
  402794:	460d      	mov	r5, r1
  402796:	468a      	mov	sl, r1
  402798:	4604      	mov	r4, r0
  40279a:	dd0f      	ble.n	4027bc <atan+0x34>
  40279c:	4bbd      	ldr	r3, [pc, #756]	; (402a94 <atan+0x30c>)
  40279e:	429e      	cmp	r6, r3
  4027a0:	f300 80b2 	bgt.w	402908 <atan+0x180>
  4027a4:	f000 80ad 	beq.w	402902 <atan+0x17a>
  4027a8:	4bbb      	ldr	r3, [pc, #748]	; (402a98 <atan+0x310>)
  4027aa:	49bc      	ldr	r1, [pc, #752]	; (402a9c <atan+0x314>)
  4027ac:	4cbc      	ldr	r4, [pc, #752]	; (402aa0 <atan+0x318>)
  4027ae:	f1ba 0f00 	cmp.w	sl, #0
  4027b2:	bfc8      	it	gt
  4027b4:	4619      	movgt	r1, r3
  4027b6:	4620      	mov	r0, r4
  4027b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027bc:	4bb9      	ldr	r3, [pc, #740]	; (402aa4 <atan+0x31c>)
  4027be:	429e      	cmp	r6, r3
  4027c0:	f300 80bc 	bgt.w	40293c <atan+0x1b4>
  4027c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  4027c8:	429e      	cmp	r6, r3
  4027ca:	f340 80a7 	ble.w	40291c <atan+0x194>
  4027ce:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  4027d2:	4622      	mov	r2, r4
  4027d4:	462b      	mov	r3, r5
  4027d6:	4620      	mov	r0, r4
  4027d8:	4629      	mov	r1, r5
  4027da:	f003 f8df 	bl	40599c <__aeabi_dmul>
  4027de:	4602      	mov	r2, r0
  4027e0:	460b      	mov	r3, r1
  4027e2:	4680      	mov	r8, r0
  4027e4:	4689      	mov	r9, r1
  4027e6:	f003 f8d9 	bl	40599c <__aeabi_dmul>
  4027ea:	a391      	add	r3, pc, #580	; (adr r3, 402a30 <atan+0x2a8>)
  4027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027f0:	4606      	mov	r6, r0
  4027f2:	460f      	mov	r7, r1
  4027f4:	f003 f8d2 	bl	40599c <__aeabi_dmul>
  4027f8:	a38f      	add	r3, pc, #572	; (adr r3, 402a38 <atan+0x2b0>)
  4027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4027fe:	f002 ff1b 	bl	405638 <__adddf3>
  402802:	4632      	mov	r2, r6
  402804:	463b      	mov	r3, r7
  402806:	f003 f8c9 	bl	40599c <__aeabi_dmul>
  40280a:	a38d      	add	r3, pc, #564	; (adr r3, 402a40 <atan+0x2b8>)
  40280c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402810:	f002 ff12 	bl	405638 <__adddf3>
  402814:	4632      	mov	r2, r6
  402816:	463b      	mov	r3, r7
  402818:	f003 f8c0 	bl	40599c <__aeabi_dmul>
  40281c:	a38a      	add	r3, pc, #552	; (adr r3, 402a48 <atan+0x2c0>)
  40281e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402822:	f002 ff09 	bl	405638 <__adddf3>
  402826:	4632      	mov	r2, r6
  402828:	463b      	mov	r3, r7
  40282a:	f003 f8b7 	bl	40599c <__aeabi_dmul>
  40282e:	a388      	add	r3, pc, #544	; (adr r3, 402a50 <atan+0x2c8>)
  402830:	e9d3 2300 	ldrd	r2, r3, [r3]
  402834:	f002 ff00 	bl	405638 <__adddf3>
  402838:	4632      	mov	r2, r6
  40283a:	463b      	mov	r3, r7
  40283c:	f003 f8ae 	bl	40599c <__aeabi_dmul>
  402840:	a385      	add	r3, pc, #532	; (adr r3, 402a58 <atan+0x2d0>)
  402842:	e9d3 2300 	ldrd	r2, r3, [r3]
  402846:	f002 fef7 	bl	405638 <__adddf3>
  40284a:	4642      	mov	r2, r8
  40284c:	464b      	mov	r3, r9
  40284e:	f003 f8a5 	bl	40599c <__aeabi_dmul>
  402852:	a383      	add	r3, pc, #524	; (adr r3, 402a60 <atan+0x2d8>)
  402854:	e9d3 2300 	ldrd	r2, r3, [r3]
  402858:	4680      	mov	r8, r0
  40285a:	4689      	mov	r9, r1
  40285c:	4630      	mov	r0, r6
  40285e:	4639      	mov	r1, r7
  402860:	f003 f89c 	bl	40599c <__aeabi_dmul>
  402864:	a380      	add	r3, pc, #512	; (adr r3, 402a68 <atan+0x2e0>)
  402866:	e9d3 2300 	ldrd	r2, r3, [r3]
  40286a:	f002 fee3 	bl	405634 <__aeabi_dsub>
  40286e:	4632      	mov	r2, r6
  402870:	463b      	mov	r3, r7
  402872:	f003 f893 	bl	40599c <__aeabi_dmul>
  402876:	a37e      	add	r3, pc, #504	; (adr r3, 402a70 <atan+0x2e8>)
  402878:	e9d3 2300 	ldrd	r2, r3, [r3]
  40287c:	f002 feda 	bl	405634 <__aeabi_dsub>
  402880:	4632      	mov	r2, r6
  402882:	463b      	mov	r3, r7
  402884:	f003 f88a 	bl	40599c <__aeabi_dmul>
  402888:	a37b      	add	r3, pc, #492	; (adr r3, 402a78 <atan+0x2f0>)
  40288a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40288e:	f002 fed1 	bl	405634 <__aeabi_dsub>
  402892:	4632      	mov	r2, r6
  402894:	463b      	mov	r3, r7
  402896:	f003 f881 	bl	40599c <__aeabi_dmul>
  40289a:	a379      	add	r3, pc, #484	; (adr r3, 402a80 <atan+0x2f8>)
  40289c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4028a0:	f002 fec8 	bl	405634 <__aeabi_dsub>
  4028a4:	4632      	mov	r2, r6
  4028a6:	463b      	mov	r3, r7
  4028a8:	f003 f878 	bl	40599c <__aeabi_dmul>
  4028ac:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  4028b0:	4602      	mov	r2, r0
  4028b2:	460b      	mov	r3, r1
  4028b4:	d069      	beq.n	40298a <atan+0x202>
  4028b6:	4640      	mov	r0, r8
  4028b8:	4649      	mov	r1, r9
  4028ba:	f002 febd 	bl	405638 <__adddf3>
  4028be:	4622      	mov	r2, r4
  4028c0:	462b      	mov	r3, r5
  4028c2:	f003 f86b 	bl	40599c <__aeabi_dmul>
  4028c6:	4e78      	ldr	r6, [pc, #480]	; (402aa8 <atan+0x320>)
  4028c8:	4b78      	ldr	r3, [pc, #480]	; (402aac <atan+0x324>)
  4028ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  4028ce:	445e      	add	r6, fp
  4028d0:	449b      	add	fp, r3
  4028d2:	e9db 2300 	ldrd	r2, r3, [fp]
  4028d6:	f002 fead 	bl	405634 <__aeabi_dsub>
  4028da:	4622      	mov	r2, r4
  4028dc:	462b      	mov	r3, r5
  4028de:	f002 fea9 	bl	405634 <__aeabi_dsub>
  4028e2:	4602      	mov	r2, r0
  4028e4:	460b      	mov	r3, r1
  4028e6:	e9d6 0100 	ldrd	r0, r1, [r6]
  4028ea:	f002 fea3 	bl	405634 <__aeabi_dsub>
  4028ee:	f1ba 0f00 	cmp.w	sl, #0
  4028f2:	4604      	mov	r4, r0
  4028f4:	f6bf af5f 	bge.w	4027b6 <atan+0x2e>
  4028f8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4028fc:	4620      	mov	r0, r4
  4028fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402902:	2800      	cmp	r0, #0
  402904:	f43f af50 	beq.w	4027a8 <atan+0x20>
  402908:	4622      	mov	r2, r4
  40290a:	4620      	mov	r0, r4
  40290c:	462b      	mov	r3, r5
  40290e:	4629      	mov	r1, r5
  402910:	f002 fe92 	bl	405638 <__adddf3>
  402914:	4604      	mov	r4, r0
  402916:	4620      	mov	r0, r4
  402918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40291c:	a35a      	add	r3, pc, #360	; (adr r3, 402a88 <atan+0x300>)
  40291e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402922:	f002 fe89 	bl	405638 <__adddf3>
  402926:	2200      	movs	r2, #0
  402928:	4b61      	ldr	r3, [pc, #388]	; (402ab0 <atan+0x328>)
  40292a:	f003 fac7 	bl	405ebc <__aeabi_dcmpgt>
  40292e:	2800      	cmp	r0, #0
  402930:	f43f af4d 	beq.w	4027ce <atan+0x46>
  402934:	4629      	mov	r1, r5
  402936:	4620      	mov	r0, r4
  402938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40293c:	f000 f8c2 	bl	402ac4 <fabs>
  402940:	4b5c      	ldr	r3, [pc, #368]	; (402ab4 <atan+0x32c>)
  402942:	429e      	cmp	r6, r3
  402944:	4604      	mov	r4, r0
  402946:	460d      	mov	r5, r1
  402948:	dc2f      	bgt.n	4029aa <atan+0x222>
  40294a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  40294e:	429e      	cmp	r6, r3
  402950:	dc54      	bgt.n	4029fc <atan+0x274>
  402952:	4602      	mov	r2, r0
  402954:	460b      	mov	r3, r1
  402956:	f002 fe6f 	bl	405638 <__adddf3>
  40295a:	2200      	movs	r2, #0
  40295c:	4b54      	ldr	r3, [pc, #336]	; (402ab0 <atan+0x328>)
  40295e:	f002 fe69 	bl	405634 <__aeabi_dsub>
  402962:	2200      	movs	r2, #0
  402964:	4606      	mov	r6, r0
  402966:	460f      	mov	r7, r1
  402968:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40296c:	4620      	mov	r0, r4
  40296e:	4629      	mov	r1, r5
  402970:	f002 fe62 	bl	405638 <__adddf3>
  402974:	4602      	mov	r2, r0
  402976:	460b      	mov	r3, r1
  402978:	4630      	mov	r0, r6
  40297a:	4639      	mov	r1, r7
  40297c:	f003 f938 	bl	405bf0 <__aeabi_ddiv>
  402980:	f04f 0b00 	mov.w	fp, #0
  402984:	4604      	mov	r4, r0
  402986:	460d      	mov	r5, r1
  402988:	e723      	b.n	4027d2 <atan+0x4a>
  40298a:	4640      	mov	r0, r8
  40298c:	4649      	mov	r1, r9
  40298e:	f002 fe53 	bl	405638 <__adddf3>
  402992:	4622      	mov	r2, r4
  402994:	462b      	mov	r3, r5
  402996:	f003 f801 	bl	40599c <__aeabi_dmul>
  40299a:	4602      	mov	r2, r0
  40299c:	460b      	mov	r3, r1
  40299e:	4620      	mov	r0, r4
  4029a0:	4629      	mov	r1, r5
  4029a2:	f002 fe47 	bl	405634 <__aeabi_dsub>
  4029a6:	4604      	mov	r4, r0
  4029a8:	e705      	b.n	4027b6 <atan+0x2e>
  4029aa:	4b43      	ldr	r3, [pc, #268]	; (402ab8 <atan+0x330>)
  4029ac:	429e      	cmp	r6, r3
  4029ae:	dc1a      	bgt.n	4029e6 <atan+0x25e>
  4029b0:	2200      	movs	r2, #0
  4029b2:	4b42      	ldr	r3, [pc, #264]	; (402abc <atan+0x334>)
  4029b4:	f002 fe3e 	bl	405634 <__aeabi_dsub>
  4029b8:	2200      	movs	r2, #0
  4029ba:	4606      	mov	r6, r0
  4029bc:	460f      	mov	r7, r1
  4029be:	4b3f      	ldr	r3, [pc, #252]	; (402abc <atan+0x334>)
  4029c0:	4620      	mov	r0, r4
  4029c2:	4629      	mov	r1, r5
  4029c4:	f002 ffea 	bl	40599c <__aeabi_dmul>
  4029c8:	2200      	movs	r2, #0
  4029ca:	4b39      	ldr	r3, [pc, #228]	; (402ab0 <atan+0x328>)
  4029cc:	f002 fe34 	bl	405638 <__adddf3>
  4029d0:	4602      	mov	r2, r0
  4029d2:	460b      	mov	r3, r1
  4029d4:	4630      	mov	r0, r6
  4029d6:	4639      	mov	r1, r7
  4029d8:	f003 f90a 	bl	405bf0 <__aeabi_ddiv>
  4029dc:	f04f 0b02 	mov.w	fp, #2
  4029e0:	4604      	mov	r4, r0
  4029e2:	460d      	mov	r5, r1
  4029e4:	e6f5      	b.n	4027d2 <atan+0x4a>
  4029e6:	4602      	mov	r2, r0
  4029e8:	460b      	mov	r3, r1
  4029ea:	2000      	movs	r0, #0
  4029ec:	4934      	ldr	r1, [pc, #208]	; (402ac0 <atan+0x338>)
  4029ee:	f003 f8ff 	bl	405bf0 <__aeabi_ddiv>
  4029f2:	f04f 0b03 	mov.w	fp, #3
  4029f6:	4604      	mov	r4, r0
  4029f8:	460d      	mov	r5, r1
  4029fa:	e6ea      	b.n	4027d2 <atan+0x4a>
  4029fc:	2200      	movs	r2, #0
  4029fe:	4b2c      	ldr	r3, [pc, #176]	; (402ab0 <atan+0x328>)
  402a00:	f002 fe18 	bl	405634 <__aeabi_dsub>
  402a04:	2200      	movs	r2, #0
  402a06:	4606      	mov	r6, r0
  402a08:	460f      	mov	r7, r1
  402a0a:	4b29      	ldr	r3, [pc, #164]	; (402ab0 <atan+0x328>)
  402a0c:	4620      	mov	r0, r4
  402a0e:	4629      	mov	r1, r5
  402a10:	f002 fe12 	bl	405638 <__adddf3>
  402a14:	4602      	mov	r2, r0
  402a16:	460b      	mov	r3, r1
  402a18:	4630      	mov	r0, r6
  402a1a:	4639      	mov	r1, r7
  402a1c:	f003 f8e8 	bl	405bf0 <__aeabi_ddiv>
  402a20:	f04f 0b01 	mov.w	fp, #1
  402a24:	4604      	mov	r4, r0
  402a26:	460d      	mov	r5, r1
  402a28:	e6d3      	b.n	4027d2 <atan+0x4a>
  402a2a:	bf00      	nop
  402a2c:	f3af 8000 	nop.w
  402a30:	e322da11 	.word	0xe322da11
  402a34:	3f90ad3a 	.word	0x3f90ad3a
  402a38:	24760deb 	.word	0x24760deb
  402a3c:	3fa97b4b 	.word	0x3fa97b4b
  402a40:	a0d03d51 	.word	0xa0d03d51
  402a44:	3fb10d66 	.word	0x3fb10d66
  402a48:	c54c206e 	.word	0xc54c206e
  402a4c:	3fb745cd 	.word	0x3fb745cd
  402a50:	920083ff 	.word	0x920083ff
  402a54:	3fc24924 	.word	0x3fc24924
  402a58:	5555550d 	.word	0x5555550d
  402a5c:	3fd55555 	.word	0x3fd55555
  402a60:	2c6a6c2f 	.word	0x2c6a6c2f
  402a64:	bfa2b444 	.word	0xbfa2b444
  402a68:	52defd9a 	.word	0x52defd9a
  402a6c:	3fadde2d 	.word	0x3fadde2d
  402a70:	af749a6d 	.word	0xaf749a6d
  402a74:	3fb3b0f2 	.word	0x3fb3b0f2
  402a78:	fe231671 	.word	0xfe231671
  402a7c:	3fbc71c6 	.word	0x3fbc71c6
  402a80:	9998ebc4 	.word	0x9998ebc4
  402a84:	3fc99999 	.word	0x3fc99999
  402a88:	8800759c 	.word	0x8800759c
  402a8c:	7e37e43c 	.word	0x7e37e43c
  402a90:	440fffff 	.word	0x440fffff
  402a94:	7ff00000 	.word	0x7ff00000
  402a98:	3ff921fb 	.word	0x3ff921fb
  402a9c:	bff921fb 	.word	0xbff921fb
  402aa0:	54442d18 	.word	0x54442d18
  402aa4:	3fdbffff 	.word	0x3fdbffff
  402aa8:	00406988 	.word	0x00406988
  402aac:	00406968 	.word	0x00406968
  402ab0:	3ff00000 	.word	0x3ff00000
  402ab4:	3ff2ffff 	.word	0x3ff2ffff
  402ab8:	40037fff 	.word	0x40037fff
  402abc:	3ff80000 	.word	0x3ff80000
  402ac0:	bff00000 	.word	0xbff00000

00402ac4 <fabs>:
  402ac4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402ac8:	4770      	bx	lr
  402aca:	bf00      	nop

00402acc <matherr>:
  402acc:	2000      	movs	r0, #0
  402ace:	4770      	bx	lr

00402ad0 <atoi>:
  402ad0:	220a      	movs	r2, #10
  402ad2:	2100      	movs	r1, #0
  402ad4:	f000 beaa 	b.w	40382c <strtol>

00402ad8 <__errno>:
  402ad8:	4b01      	ldr	r3, [pc, #4]	; (402ae0 <__errno+0x8>)
  402ada:	6818      	ldr	r0, [r3, #0]
  402adc:	4770      	bx	lr
  402ade:	bf00      	nop
  402ae0:	20000078 	.word	0x20000078

00402ae4 <__libc_init_array>:
  402ae4:	b570      	push	{r4, r5, r6, lr}
  402ae6:	4b0e      	ldr	r3, [pc, #56]	; (402b20 <__libc_init_array+0x3c>)
  402ae8:	4c0e      	ldr	r4, [pc, #56]	; (402b24 <__libc_init_array+0x40>)
  402aea:	1ae4      	subs	r4, r4, r3
  402aec:	10a4      	asrs	r4, r4, #2
  402aee:	2500      	movs	r5, #0
  402af0:	461e      	mov	r6, r3
  402af2:	42a5      	cmp	r5, r4
  402af4:	d004      	beq.n	402b00 <__libc_init_array+0x1c>
  402af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402afa:	4798      	blx	r3
  402afc:	3501      	adds	r5, #1
  402afe:	e7f8      	b.n	402af2 <__libc_init_array+0xe>
  402b00:	f004 f8b6 	bl	406c70 <_init>
  402b04:	4c08      	ldr	r4, [pc, #32]	; (402b28 <__libc_init_array+0x44>)
  402b06:	4b09      	ldr	r3, [pc, #36]	; (402b2c <__libc_init_array+0x48>)
  402b08:	1ae4      	subs	r4, r4, r3
  402b0a:	10a4      	asrs	r4, r4, #2
  402b0c:	2500      	movs	r5, #0
  402b0e:	461e      	mov	r6, r3
  402b10:	42a5      	cmp	r5, r4
  402b12:	d004      	beq.n	402b1e <__libc_init_array+0x3a>
  402b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402b18:	4798      	blx	r3
  402b1a:	3501      	adds	r5, #1
  402b1c:	e7f8      	b.n	402b10 <__libc_init_array+0x2c>
  402b1e:	bd70      	pop	{r4, r5, r6, pc}
  402b20:	00406c7c 	.word	0x00406c7c
  402b24:	00406c7c 	.word	0x00406c7c
  402b28:	00406c80 	.word	0x00406c80
  402b2c:	00406c7c 	.word	0x00406c7c

00402b30 <memcpy>:
  402b30:	b510      	push	{r4, lr}
  402b32:	1e43      	subs	r3, r0, #1
  402b34:	440a      	add	r2, r1
  402b36:	4291      	cmp	r1, r2
  402b38:	d004      	beq.n	402b44 <memcpy+0x14>
  402b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
  402b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
  402b42:	e7f8      	b.n	402b36 <memcpy+0x6>
  402b44:	bd10      	pop	{r4, pc}

00402b46 <memset>:
  402b46:	4402      	add	r2, r0
  402b48:	4603      	mov	r3, r0
  402b4a:	4293      	cmp	r3, r2
  402b4c:	d002      	beq.n	402b54 <memset+0xe>
  402b4e:	f803 1b01 	strb.w	r1, [r3], #1
  402b52:	e7fa      	b.n	402b4a <memset+0x4>
  402b54:	4770      	bx	lr

00402b56 <__cvt>:
  402b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b5a:	b088      	sub	sp, #32
  402b5c:	2b00      	cmp	r3, #0
  402b5e:	9f14      	ldr	r7, [sp, #80]	; 0x50
  402b60:	9912      	ldr	r1, [sp, #72]	; 0x48
  402b62:	9d10      	ldr	r5, [sp, #64]	; 0x40
  402b64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402b68:	461e      	mov	r6, r3
  402b6a:	f027 0720 	bic.w	r7, r7, #32
  402b6e:	bfbb      	ittet	lt
  402b70:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  402b74:	461e      	movlt	r6, r3
  402b76:	2300      	movge	r3, #0
  402b78:	232d      	movlt	r3, #45	; 0x2d
  402b7a:	2f46      	cmp	r7, #70	; 0x46
  402b7c:	4614      	mov	r4, r2
  402b7e:	700b      	strb	r3, [r1, #0]
  402b80:	d003      	beq.n	402b8a <__cvt+0x34>
  402b82:	2f45      	cmp	r7, #69	; 0x45
  402b84:	d103      	bne.n	402b8e <__cvt+0x38>
  402b86:	3501      	adds	r5, #1
  402b88:	e001      	b.n	402b8e <__cvt+0x38>
  402b8a:	2303      	movs	r3, #3
  402b8c:	e000      	b.n	402b90 <__cvt+0x3a>
  402b8e:	2302      	movs	r3, #2
  402b90:	aa07      	add	r2, sp, #28
  402b92:	9204      	str	r2, [sp, #16]
  402b94:	aa06      	add	r2, sp, #24
  402b96:	9203      	str	r2, [sp, #12]
  402b98:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402b9c:	4622      	mov	r2, r4
  402b9e:	4633      	mov	r3, r6
  402ba0:	f000 ffae 	bl	403b00 <_dtoa_r>
  402ba4:	2f47      	cmp	r7, #71	; 0x47
  402ba6:	4680      	mov	r8, r0
  402ba8:	d102      	bne.n	402bb0 <__cvt+0x5a>
  402baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402bac:	07db      	lsls	r3, r3, #31
  402bae:	d528      	bpl.n	402c02 <__cvt+0xac>
  402bb0:	2f46      	cmp	r7, #70	; 0x46
  402bb2:	eb08 0905 	add.w	r9, r8, r5
  402bb6:	d111      	bne.n	402bdc <__cvt+0x86>
  402bb8:	f898 3000 	ldrb.w	r3, [r8]
  402bbc:	2b30      	cmp	r3, #48	; 0x30
  402bbe:	d10a      	bne.n	402bd6 <__cvt+0x80>
  402bc0:	2200      	movs	r2, #0
  402bc2:	2300      	movs	r3, #0
  402bc4:	4620      	mov	r0, r4
  402bc6:	4631      	mov	r1, r6
  402bc8:	f003 f950 	bl	405e6c <__aeabi_dcmpeq>
  402bcc:	b918      	cbnz	r0, 402bd6 <__cvt+0x80>
  402bce:	f1c5 0501 	rsb	r5, r5, #1
  402bd2:	f8ca 5000 	str.w	r5, [sl]
  402bd6:	f8da 3000 	ldr.w	r3, [sl]
  402bda:	4499      	add	r9, r3
  402bdc:	2200      	movs	r2, #0
  402bde:	2300      	movs	r3, #0
  402be0:	4620      	mov	r0, r4
  402be2:	4631      	mov	r1, r6
  402be4:	f003 f942 	bl	405e6c <__aeabi_dcmpeq>
  402be8:	b908      	cbnz	r0, 402bee <__cvt+0x98>
  402bea:	2230      	movs	r2, #48	; 0x30
  402bec:	e002      	b.n	402bf4 <__cvt+0x9e>
  402bee:	f8cd 901c 	str.w	r9, [sp, #28]
  402bf2:	e006      	b.n	402c02 <__cvt+0xac>
  402bf4:	9b07      	ldr	r3, [sp, #28]
  402bf6:	4599      	cmp	r9, r3
  402bf8:	d903      	bls.n	402c02 <__cvt+0xac>
  402bfa:	1c59      	adds	r1, r3, #1
  402bfc:	9107      	str	r1, [sp, #28]
  402bfe:	701a      	strb	r2, [r3, #0]
  402c00:	e7f8      	b.n	402bf4 <__cvt+0x9e>
  402c02:	9b07      	ldr	r3, [sp, #28]
  402c04:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402c06:	ebc8 0303 	rsb	r3, r8, r3
  402c0a:	4640      	mov	r0, r8
  402c0c:	6013      	str	r3, [r2, #0]
  402c0e:	b008      	add	sp, #32
  402c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402c14 <__exponent>:
  402c14:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402c16:	4603      	mov	r3, r0
  402c18:	2900      	cmp	r1, #0
  402c1a:	bfb8      	it	lt
  402c1c:	4249      	neglt	r1, r1
  402c1e:	f803 2b02 	strb.w	r2, [r3], #2
  402c22:	bfb4      	ite	lt
  402c24:	222d      	movlt	r2, #45	; 0x2d
  402c26:	222b      	movge	r2, #43	; 0x2b
  402c28:	2909      	cmp	r1, #9
  402c2a:	7042      	strb	r2, [r0, #1]
  402c2c:	dd19      	ble.n	402c62 <__exponent+0x4e>
  402c2e:	f10d 0207 	add.w	r2, sp, #7
  402c32:	4616      	mov	r6, r2
  402c34:	250a      	movs	r5, #10
  402c36:	fb91 f4f5 	sdiv	r4, r1, r5
  402c3a:	fb05 1114 	mls	r1, r5, r4, r1
  402c3e:	3130      	adds	r1, #48	; 0x30
  402c40:	2c09      	cmp	r4, #9
  402c42:	f802 1d01 	strb.w	r1, [r2, #-1]!
  402c46:	4621      	mov	r1, r4
  402c48:	dcf5      	bgt.n	402c36 <__exponent+0x22>
  402c4a:	3130      	adds	r1, #48	; 0x30
  402c4c:	1e54      	subs	r4, r2, #1
  402c4e:	f802 1c01 	strb.w	r1, [r2, #-1]
  402c52:	42b4      	cmp	r4, r6
  402c54:	461a      	mov	r2, r3
  402c56:	d20a      	bcs.n	402c6e <__exponent+0x5a>
  402c58:	f814 2b01 	ldrb.w	r2, [r4], #1
  402c5c:	f803 2b01 	strb.w	r2, [r3], #1
  402c60:	e7f7      	b.n	402c52 <__exponent+0x3e>
  402c62:	2430      	movs	r4, #48	; 0x30
  402c64:	461a      	mov	r2, r3
  402c66:	4421      	add	r1, r4
  402c68:	f802 4b02 	strb.w	r4, [r2], #2
  402c6c:	7059      	strb	r1, [r3, #1]
  402c6e:	1a10      	subs	r0, r2, r0
  402c70:	b002      	add	sp, #8
  402c72:	bd70      	pop	{r4, r5, r6, pc}

00402c74 <_printf_float>:
  402c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c78:	b091      	sub	sp, #68	; 0x44
  402c7a:	460c      	mov	r4, r1
  402c7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  402c80:	4616      	mov	r6, r2
  402c82:	461f      	mov	r7, r3
  402c84:	4605      	mov	r5, r0
  402c86:	f001 fe57 	bl	404938 <_localeconv_r>
  402c8a:	6803      	ldr	r3, [r0, #0]
  402c8c:	9309      	str	r3, [sp, #36]	; 0x24
  402c8e:	4618      	mov	r0, r3
  402c90:	f000 fd0e 	bl	4036b0 <strlen>
  402c94:	2300      	movs	r3, #0
  402c96:	930e      	str	r3, [sp, #56]	; 0x38
  402c98:	f8d8 3000 	ldr.w	r3, [r8]
  402c9c:	900a      	str	r0, [sp, #40]	; 0x28
  402c9e:	3307      	adds	r3, #7
  402ca0:	f023 0307 	bic.w	r3, r3, #7
  402ca4:	f103 0208 	add.w	r2, r3, #8
  402ca8:	f894 9018 	ldrb.w	r9, [r4, #24]
  402cac:	f8d4 b000 	ldr.w	fp, [r4]
  402cb0:	f8c8 2000 	str.w	r2, [r8]
  402cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
  402cb8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402cbc:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  402cc0:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402cc4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402cc8:	930b      	str	r3, [sp, #44]	; 0x2c
  402cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402cce:	4ba7      	ldr	r3, [pc, #668]	; (402f6c <_printf_float+0x2f8>)
  402cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402cd2:	4640      	mov	r0, r8
  402cd4:	f003 f8fc 	bl	405ed0 <__aeabi_dcmpun>
  402cd8:	b9a0      	cbnz	r0, 402d04 <_printf_float+0x90>
  402cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  402cde:	4ba3      	ldr	r3, [pc, #652]	; (402f6c <_printf_float+0x2f8>)
  402ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ce2:	4640      	mov	r0, r8
  402ce4:	f003 f8d6 	bl	405e94 <__aeabi_dcmple>
  402ce8:	b960      	cbnz	r0, 402d04 <_printf_float+0x90>
  402cea:	2200      	movs	r2, #0
  402cec:	2300      	movs	r3, #0
  402cee:	4640      	mov	r0, r8
  402cf0:	4651      	mov	r1, sl
  402cf2:	f003 f8c5 	bl	405e80 <__aeabi_dcmplt>
  402cf6:	b110      	cbz	r0, 402cfe <_printf_float+0x8a>
  402cf8:	232d      	movs	r3, #45	; 0x2d
  402cfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402cfe:	4b9c      	ldr	r3, [pc, #624]	; (402f70 <_printf_float+0x2fc>)
  402d00:	4a9c      	ldr	r2, [pc, #624]	; (402f74 <_printf_float+0x300>)
  402d02:	e00a      	b.n	402d1a <_printf_float+0xa6>
  402d04:	4642      	mov	r2, r8
  402d06:	4653      	mov	r3, sl
  402d08:	4640      	mov	r0, r8
  402d0a:	4651      	mov	r1, sl
  402d0c:	f003 f8e0 	bl	405ed0 <__aeabi_dcmpun>
  402d10:	2800      	cmp	r0, #0
  402d12:	f000 8192 	beq.w	40303a <_printf_float+0x3c6>
  402d16:	4b98      	ldr	r3, [pc, #608]	; (402f78 <_printf_float+0x304>)
  402d18:	4a98      	ldr	r2, [pc, #608]	; (402f7c <_printf_float+0x308>)
  402d1a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402d1e:	bf8c      	ite	hi
  402d20:	4690      	movhi	r8, r2
  402d22:	4698      	movls	r8, r3
  402d24:	2303      	movs	r3, #3
  402d26:	6123      	str	r3, [r4, #16]
  402d28:	f02b 0304 	bic.w	r3, fp, #4
  402d2c:	6023      	str	r3, [r4, #0]
  402d2e:	f04f 0a00 	mov.w	sl, #0
  402d32:	e03d      	b.n	402db0 <_printf_float+0x13c>
  402d34:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  402d38:	f000 818a 	beq.w	403050 <_printf_float+0x3dc>
  402d3c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  402d40:	f000 8186 	beq.w	403050 <_printf_float+0x3dc>
  402d44:	6023      	str	r3, [r4, #0]
  402d46:	2100      	movs	r1, #0
  402d48:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402d4c:	9301      	str	r3, [sp, #4]
  402d4e:	6863      	ldr	r3, [r4, #4]
  402d50:	9005      	str	r0, [sp, #20]
  402d52:	9202      	str	r2, [sp, #8]
  402d54:	9300      	str	r3, [sp, #0]
  402d56:	4642      	mov	r2, r8
  402d58:	4653      	mov	r3, sl
  402d5a:	9106      	str	r1, [sp, #24]
  402d5c:	f8cd 9010 	str.w	r9, [sp, #16]
  402d60:	f8cd e00c 	str.w	lr, [sp, #12]
  402d64:	4628      	mov	r0, r5
  402d66:	f7ff fef6 	bl	402b56 <__cvt>
  402d6a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  402d6e:	2b47      	cmp	r3, #71	; 0x47
  402d70:	4680      	mov	r8, r0
  402d72:	f000 8184 	beq.w	40307e <_printf_float+0x40a>
  402d76:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402d7a:	990d      	ldr	r1, [sp, #52]	; 0x34
  402d7c:	f200 818d 	bhi.w	40309a <_printf_float+0x426>
  402d80:	3901      	subs	r1, #1
  402d82:	464a      	mov	r2, r9
  402d84:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402d88:	910d      	str	r1, [sp, #52]	; 0x34
  402d8a:	f7ff ff43 	bl	402c14 <__exponent>
  402d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d90:	1883      	adds	r3, r0, r2
  402d92:	2a01      	cmp	r2, #1
  402d94:	4682      	mov	sl, r0
  402d96:	6123      	str	r3, [r4, #16]
  402d98:	f300 817c 	bgt.w	403094 <_printf_float+0x420>
  402d9c:	6822      	ldr	r2, [r4, #0]
  402d9e:	07d1      	lsls	r1, r2, #31
  402da0:	f100 8178 	bmi.w	403094 <_printf_float+0x420>
  402da4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402da8:	b113      	cbz	r3, 402db0 <_printf_float+0x13c>
  402daa:	232d      	movs	r3, #45	; 0x2d
  402dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402db0:	9700      	str	r7, [sp, #0]
  402db2:	4633      	mov	r3, r6
  402db4:	aa0f      	add	r2, sp, #60	; 0x3c
  402db6:	4621      	mov	r1, r4
  402db8:	4628      	mov	r0, r5
  402dba:	f000 f99f 	bl	4030fc <_printf_common>
  402dbe:	3001      	adds	r0, #1
  402dc0:	d102      	bne.n	402dc8 <_printf_float+0x154>
  402dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402dc6:	e196      	b.n	4030f6 <_printf_float+0x482>
  402dc8:	6823      	ldr	r3, [r4, #0]
  402dca:	055a      	lsls	r2, r3, #21
  402dcc:	d401      	bmi.n	402dd2 <_printf_float+0x15e>
  402dce:	6923      	ldr	r3, [r4, #16]
  402dd0:	e065      	b.n	402e9e <_printf_float+0x22a>
  402dd2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402dd6:	f240 80d5 	bls.w	402f84 <_printf_float+0x310>
  402dda:	2200      	movs	r2, #0
  402ddc:	2300      	movs	r3, #0
  402dde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402de2:	f003 f843 	bl	405e6c <__aeabi_dcmpeq>
  402de6:	b378      	cbz	r0, 402e48 <_printf_float+0x1d4>
  402de8:	2301      	movs	r3, #1
  402dea:	4a65      	ldr	r2, [pc, #404]	; (402f80 <_printf_float+0x30c>)
  402dec:	4631      	mov	r1, r6
  402dee:	4628      	mov	r0, r5
  402df0:	47b8      	blx	r7
  402df2:	3001      	adds	r0, #1
  402df4:	d0e5      	beq.n	402dc2 <_printf_float+0x14e>
  402df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402dfa:	429a      	cmp	r2, r3
  402dfc:	db0b      	blt.n	402e16 <_printf_float+0x1a2>
  402dfe:	6823      	ldr	r3, [r4, #0]
  402e00:	07d8      	lsls	r0, r3, #31
  402e02:	d408      	bmi.n	402e16 <_printf_float+0x1a2>
  402e04:	6823      	ldr	r3, [r4, #0]
  402e06:	079b      	lsls	r3, r3, #30
  402e08:	f140 8111 	bpl.w	40302e <_printf_float+0x3ba>
  402e0c:	f04f 0800 	mov.w	r8, #0
  402e10:	f104 0919 	add.w	r9, r4, #25
  402e14:	e106      	b.n	403024 <_printf_float+0x3b0>
  402e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402e1a:	4631      	mov	r1, r6
  402e1c:	4628      	mov	r0, r5
  402e1e:	47b8      	blx	r7
  402e20:	3001      	adds	r0, #1
  402e22:	d0ce      	beq.n	402dc2 <_printf_float+0x14e>
  402e24:	f04f 0800 	mov.w	r8, #0
  402e28:	f104 091a 	add.w	r9, r4, #26
  402e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e2e:	3b01      	subs	r3, #1
  402e30:	4598      	cmp	r8, r3
  402e32:	dae7      	bge.n	402e04 <_printf_float+0x190>
  402e34:	2301      	movs	r3, #1
  402e36:	464a      	mov	r2, r9
  402e38:	4631      	mov	r1, r6
  402e3a:	4628      	mov	r0, r5
  402e3c:	47b8      	blx	r7
  402e3e:	3001      	adds	r0, #1
  402e40:	d0bf      	beq.n	402dc2 <_printf_float+0x14e>
  402e42:	f108 0801 	add.w	r8, r8, #1
  402e46:	e7f1      	b.n	402e2c <_printf_float+0x1b8>
  402e48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402e4a:	2b00      	cmp	r3, #0
  402e4c:	dc29      	bgt.n	402ea2 <_printf_float+0x22e>
  402e4e:	2301      	movs	r3, #1
  402e50:	4a4b      	ldr	r2, [pc, #300]	; (402f80 <_printf_float+0x30c>)
  402e52:	4631      	mov	r1, r6
  402e54:	4628      	mov	r0, r5
  402e56:	47b8      	blx	r7
  402e58:	3001      	adds	r0, #1
  402e5a:	d0b2      	beq.n	402dc2 <_printf_float+0x14e>
  402e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402e5e:	b923      	cbnz	r3, 402e6a <_printf_float+0x1f6>
  402e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e62:	b913      	cbnz	r3, 402e6a <_printf_float+0x1f6>
  402e64:	6823      	ldr	r3, [r4, #0]
  402e66:	07d9      	lsls	r1, r3, #31
  402e68:	d5cc      	bpl.n	402e04 <_printf_float+0x190>
  402e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402e6e:	4631      	mov	r1, r6
  402e70:	4628      	mov	r0, r5
  402e72:	47b8      	blx	r7
  402e74:	3001      	adds	r0, #1
  402e76:	d0a4      	beq.n	402dc2 <_printf_float+0x14e>
  402e78:	f04f 0900 	mov.w	r9, #0
  402e7c:	f104 0a1a 	add.w	sl, r4, #26
  402e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402e82:	425b      	negs	r3, r3
  402e84:	4599      	cmp	r9, r3
  402e86:	da09      	bge.n	402e9c <_printf_float+0x228>
  402e88:	2301      	movs	r3, #1
  402e8a:	4652      	mov	r2, sl
  402e8c:	4631      	mov	r1, r6
  402e8e:	4628      	mov	r0, r5
  402e90:	47b8      	blx	r7
  402e92:	3001      	adds	r0, #1
  402e94:	d095      	beq.n	402dc2 <_printf_float+0x14e>
  402e96:	f109 0901 	add.w	r9, r9, #1
  402e9a:	e7f1      	b.n	402e80 <_printf_float+0x20c>
  402e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e9e:	4642      	mov	r2, r8
  402ea0:	e0a7      	b.n	402ff2 <_printf_float+0x37e>
  402ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402ea6:	429a      	cmp	r2, r3
  402ea8:	bfa8      	it	ge
  402eaa:	461a      	movge	r2, r3
  402eac:	2a00      	cmp	r2, #0
  402eae:	4691      	mov	r9, r2
  402eb0:	dc06      	bgt.n	402ec0 <_printf_float+0x24c>
  402eb2:	f04f 0a00 	mov.w	sl, #0
  402eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  402eba:	f104 0b1a 	add.w	fp, r4, #26
  402ebe:	e011      	b.n	402ee4 <_printf_float+0x270>
  402ec0:	4613      	mov	r3, r2
  402ec2:	4631      	mov	r1, r6
  402ec4:	4642      	mov	r2, r8
  402ec6:	4628      	mov	r0, r5
  402ec8:	47b8      	blx	r7
  402eca:	3001      	adds	r0, #1
  402ecc:	d1f1      	bne.n	402eb2 <_printf_float+0x23e>
  402ece:	e778      	b.n	402dc2 <_printf_float+0x14e>
  402ed0:	2301      	movs	r3, #1
  402ed2:	465a      	mov	r2, fp
  402ed4:	4631      	mov	r1, r6
  402ed6:	4628      	mov	r0, r5
  402ed8:	47b8      	blx	r7
  402eda:	3001      	adds	r0, #1
  402edc:	f43f af71 	beq.w	402dc2 <_printf_float+0x14e>
  402ee0:	f10a 0a01 	add.w	sl, sl, #1
  402ee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402ee6:	ebc9 0203 	rsb	r2, r9, r3
  402eea:	4592      	cmp	sl, r2
  402eec:	dbf0      	blt.n	402ed0 <_printf_float+0x25c>
  402eee:	eb08 0903 	add.w	r9, r8, r3
  402ef2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402ef6:	429a      	cmp	r2, r3
  402ef8:	db0f      	blt.n	402f1a <_printf_float+0x2a6>
  402efa:	6823      	ldr	r3, [r4, #0]
  402efc:	07da      	lsls	r2, r3, #31
  402efe:	d40c      	bmi.n	402f1a <_printf_float+0x2a6>
  402f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402f04:	4498      	add	r8, r3
  402f06:	ebc9 0808 	rsb	r8, r9, r8
  402f0a:	1a9b      	subs	r3, r3, r2
  402f0c:	4598      	cmp	r8, r3
  402f0e:	bfa8      	it	ge
  402f10:	4698      	movge	r8, r3
  402f12:	f1b8 0f00 	cmp.w	r8, #0
  402f16:	dc08      	bgt.n	402f2a <_printf_float+0x2b6>
  402f18:	e00f      	b.n	402f3a <_printf_float+0x2c6>
  402f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402f1e:	4631      	mov	r1, r6
  402f20:	4628      	mov	r0, r5
  402f22:	47b8      	blx	r7
  402f24:	3001      	adds	r0, #1
  402f26:	d1eb      	bne.n	402f00 <_printf_float+0x28c>
  402f28:	e74b      	b.n	402dc2 <_printf_float+0x14e>
  402f2a:	4643      	mov	r3, r8
  402f2c:	464a      	mov	r2, r9
  402f2e:	4631      	mov	r1, r6
  402f30:	4628      	mov	r0, r5
  402f32:	47b8      	blx	r7
  402f34:	3001      	adds	r0, #1
  402f36:	f43f af44 	beq.w	402dc2 <_printf_float+0x14e>
  402f3a:	f04f 0900 	mov.w	r9, #0
  402f3e:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402f42:	f104 0a1a 	add.w	sl, r4, #26
  402f46:	e009      	b.n	402f5c <_printf_float+0x2e8>
  402f48:	2301      	movs	r3, #1
  402f4a:	4652      	mov	r2, sl
  402f4c:	4631      	mov	r1, r6
  402f4e:	4628      	mov	r0, r5
  402f50:	47b8      	blx	r7
  402f52:	3001      	adds	r0, #1
  402f54:	f43f af35 	beq.w	402dc2 <_printf_float+0x14e>
  402f58:	f109 0901 	add.w	r9, r9, #1
  402f5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402f60:	1a9b      	subs	r3, r3, r2
  402f62:	ebc8 0303 	rsb	r3, r8, r3
  402f66:	4599      	cmp	r9, r3
  402f68:	dbee      	blt.n	402f48 <_printf_float+0x2d4>
  402f6a:	e74b      	b.n	402e04 <_printf_float+0x190>
  402f6c:	7fefffff 	.word	0x7fefffff
  402f70:	004069ac 	.word	0x004069ac
  402f74:	004069b0 	.word	0x004069b0
  402f78:	004069b4 	.word	0x004069b4
  402f7c:	004069b8 	.word	0x004069b8
  402f80:	004069bc 	.word	0x004069bc
  402f84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402f86:	2a01      	cmp	r2, #1
  402f88:	dc01      	bgt.n	402f8e <_printf_float+0x31a>
  402f8a:	07db      	lsls	r3, r3, #31
  402f8c:	d538      	bpl.n	403000 <_printf_float+0x38c>
  402f8e:	2301      	movs	r3, #1
  402f90:	4642      	mov	r2, r8
  402f92:	4631      	mov	r1, r6
  402f94:	4628      	mov	r0, r5
  402f96:	47b8      	blx	r7
  402f98:	3001      	adds	r0, #1
  402f9a:	f43f af12 	beq.w	402dc2 <_printf_float+0x14e>
  402f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402fa2:	4631      	mov	r1, r6
  402fa4:	4628      	mov	r0, r5
  402fa6:	47b8      	blx	r7
  402fa8:	3001      	adds	r0, #1
  402faa:	f43f af0a 	beq.w	402dc2 <_printf_float+0x14e>
  402fae:	2200      	movs	r2, #0
  402fb0:	2300      	movs	r3, #0
  402fb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402fb6:	f002 ff59 	bl	405e6c <__aeabi_dcmpeq>
  402fba:	b120      	cbz	r0, 402fc6 <_printf_float+0x352>
  402fbc:	f04f 0800 	mov.w	r8, #0
  402fc0:	f104 091a 	add.w	r9, r4, #26
  402fc4:	e00e      	b.n	402fe4 <_printf_float+0x370>
  402fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402fc8:	f108 0201 	add.w	r2, r8, #1
  402fcc:	3b01      	subs	r3, #1
  402fce:	e019      	b.n	403004 <_printf_float+0x390>
  402fd0:	2301      	movs	r3, #1
  402fd2:	464a      	mov	r2, r9
  402fd4:	4631      	mov	r1, r6
  402fd6:	4628      	mov	r0, r5
  402fd8:	47b8      	blx	r7
  402fda:	3001      	adds	r0, #1
  402fdc:	f43f aef1 	beq.w	402dc2 <_printf_float+0x14e>
  402fe0:	f108 0801 	add.w	r8, r8, #1
  402fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402fe6:	3b01      	subs	r3, #1
  402fe8:	4598      	cmp	r8, r3
  402fea:	dbf1      	blt.n	402fd0 <_printf_float+0x35c>
  402fec:	4653      	mov	r3, sl
  402fee:	f104 0250 	add.w	r2, r4, #80	; 0x50
  402ff2:	4631      	mov	r1, r6
  402ff4:	4628      	mov	r0, r5
  402ff6:	47b8      	blx	r7
  402ff8:	3001      	adds	r0, #1
  402ffa:	f47f af03 	bne.w	402e04 <_printf_float+0x190>
  402ffe:	e6e0      	b.n	402dc2 <_printf_float+0x14e>
  403000:	2301      	movs	r3, #1
  403002:	4642      	mov	r2, r8
  403004:	4631      	mov	r1, r6
  403006:	4628      	mov	r0, r5
  403008:	47b8      	blx	r7
  40300a:	3001      	adds	r0, #1
  40300c:	d1ee      	bne.n	402fec <_printf_float+0x378>
  40300e:	e6d8      	b.n	402dc2 <_printf_float+0x14e>
  403010:	2301      	movs	r3, #1
  403012:	464a      	mov	r2, r9
  403014:	4631      	mov	r1, r6
  403016:	4628      	mov	r0, r5
  403018:	47b8      	blx	r7
  40301a:	3001      	adds	r0, #1
  40301c:	f43f aed1 	beq.w	402dc2 <_printf_float+0x14e>
  403020:	f108 0801 	add.w	r8, r8, #1
  403024:	68e3      	ldr	r3, [r4, #12]
  403026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403028:	1a9b      	subs	r3, r3, r2
  40302a:	4598      	cmp	r8, r3
  40302c:	dbf0      	blt.n	403010 <_printf_float+0x39c>
  40302e:	68e0      	ldr	r0, [r4, #12]
  403030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403032:	4298      	cmp	r0, r3
  403034:	bfb8      	it	lt
  403036:	4618      	movlt	r0, r3
  403038:	e05d      	b.n	4030f6 <_printf_float+0x482>
  40303a:	6862      	ldr	r2, [r4, #4]
  40303c:	1c53      	adds	r3, r2, #1
  40303e:	a80e      	add	r0, sp, #56	; 0x38
  403040:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  403044:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  403048:	f47f ae74 	bne.w	402d34 <_printf_float+0xc0>
  40304c:	2206      	movs	r2, #6
  40304e:	e001      	b.n	403054 <_printf_float+0x3e0>
  403050:	b912      	cbnz	r2, 403058 <_printf_float+0x3e4>
  403052:	2201      	movs	r2, #1
  403054:	6062      	str	r2, [r4, #4]
  403056:	e675      	b.n	402d44 <_printf_float+0xd0>
  403058:	2100      	movs	r1, #0
  40305a:	9106      	str	r1, [sp, #24]
  40305c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  403060:	e88d 000c 	stmia.w	sp, {r2, r3}
  403064:	6023      	str	r3, [r4, #0]
  403066:	9005      	str	r0, [sp, #20]
  403068:	4642      	mov	r2, r8
  40306a:	f8cd 9010 	str.w	r9, [sp, #16]
  40306e:	f8cd e00c 	str.w	lr, [sp, #12]
  403072:	9102      	str	r1, [sp, #8]
  403074:	4653      	mov	r3, sl
  403076:	4628      	mov	r0, r5
  403078:	f7ff fd6d 	bl	402b56 <__cvt>
  40307c:	4680      	mov	r8, r0
  40307e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403080:	1cd8      	adds	r0, r3, #3
  403082:	db02      	blt.n	40308a <_printf_float+0x416>
  403084:	6862      	ldr	r2, [r4, #4]
  403086:	4293      	cmp	r3, r2
  403088:	dd1d      	ble.n	4030c6 <_printf_float+0x452>
  40308a:	f1a9 0902 	sub.w	r9, r9, #2
  40308e:	fa5f f989 	uxtb.w	r9, r9
  403092:	e670      	b.n	402d76 <_printf_float+0x102>
  403094:	3301      	adds	r3, #1
  403096:	6123      	str	r3, [r4, #16]
  403098:	e684      	b.n	402da4 <_printf_float+0x130>
  40309a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  40309e:	d114      	bne.n	4030ca <_printf_float+0x456>
  4030a0:	2900      	cmp	r1, #0
  4030a2:	6863      	ldr	r3, [r4, #4]
  4030a4:	dd07      	ble.n	4030b6 <_printf_float+0x442>
  4030a6:	6121      	str	r1, [r4, #16]
  4030a8:	b913      	cbnz	r3, 4030b0 <_printf_float+0x43c>
  4030aa:	6822      	ldr	r2, [r4, #0]
  4030ac:	07d2      	lsls	r2, r2, #31
  4030ae:	d51d      	bpl.n	4030ec <_printf_float+0x478>
  4030b0:	3301      	adds	r3, #1
  4030b2:	440b      	add	r3, r1
  4030b4:	e019      	b.n	4030ea <_printf_float+0x476>
  4030b6:	b913      	cbnz	r3, 4030be <_printf_float+0x44a>
  4030b8:	6822      	ldr	r2, [r4, #0]
  4030ba:	07d0      	lsls	r0, r2, #31
  4030bc:	d501      	bpl.n	4030c2 <_printf_float+0x44e>
  4030be:	3302      	adds	r3, #2
  4030c0:	e013      	b.n	4030ea <_printf_float+0x476>
  4030c2:	2301      	movs	r3, #1
  4030c4:	e011      	b.n	4030ea <_printf_float+0x476>
  4030c6:	f04f 0967 	mov.w	r9, #103	; 0x67
  4030ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4030ce:	4293      	cmp	r3, r2
  4030d0:	db05      	blt.n	4030de <_printf_float+0x46a>
  4030d2:	6822      	ldr	r2, [r4, #0]
  4030d4:	6123      	str	r3, [r4, #16]
  4030d6:	07d1      	lsls	r1, r2, #31
  4030d8:	d508      	bpl.n	4030ec <_printf_float+0x478>
  4030da:	3301      	adds	r3, #1
  4030dc:	e005      	b.n	4030ea <_printf_float+0x476>
  4030de:	2b00      	cmp	r3, #0
  4030e0:	bfd4      	ite	le
  4030e2:	f1c3 0302 	rsble	r3, r3, #2
  4030e6:	2301      	movgt	r3, #1
  4030e8:	4413      	add	r3, r2
  4030ea:	6123      	str	r3, [r4, #16]
  4030ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4030ee:	65a3      	str	r3, [r4, #88]	; 0x58
  4030f0:	f04f 0a00 	mov.w	sl, #0
  4030f4:	e656      	b.n	402da4 <_printf_float+0x130>
  4030f6:	b011      	add	sp, #68	; 0x44
  4030f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004030fc <_printf_common>:
  4030fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403100:	4691      	mov	r9, r2
  403102:	461f      	mov	r7, r3
  403104:	690a      	ldr	r2, [r1, #16]
  403106:	688b      	ldr	r3, [r1, #8]
  403108:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40310c:	4293      	cmp	r3, r2
  40310e:	bfb8      	it	lt
  403110:	4613      	movlt	r3, r2
  403112:	f8c9 3000 	str.w	r3, [r9]
  403116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  40311a:	4606      	mov	r6, r0
  40311c:	460c      	mov	r4, r1
  40311e:	b112      	cbz	r2, 403126 <_printf_common+0x2a>
  403120:	3301      	adds	r3, #1
  403122:	f8c9 3000 	str.w	r3, [r9]
  403126:	6823      	ldr	r3, [r4, #0]
  403128:	0699      	lsls	r1, r3, #26
  40312a:	bf42      	ittt	mi
  40312c:	f8d9 3000 	ldrmi.w	r3, [r9]
  403130:	3302      	addmi	r3, #2
  403132:	f8c9 3000 	strmi.w	r3, [r9]
  403136:	6825      	ldr	r5, [r4, #0]
  403138:	f015 0506 	ands.w	r5, r5, #6
  40313c:	d110      	bne.n	403160 <_printf_common+0x64>
  40313e:	f104 0a19 	add.w	sl, r4, #25
  403142:	e007      	b.n	403154 <_printf_common+0x58>
  403144:	2301      	movs	r3, #1
  403146:	4652      	mov	r2, sl
  403148:	4639      	mov	r1, r7
  40314a:	4630      	mov	r0, r6
  40314c:	47c0      	blx	r8
  40314e:	3001      	adds	r0, #1
  403150:	d01a      	beq.n	403188 <_printf_common+0x8c>
  403152:	3501      	adds	r5, #1
  403154:	68e3      	ldr	r3, [r4, #12]
  403156:	f8d9 2000 	ldr.w	r2, [r9]
  40315a:	1a9b      	subs	r3, r3, r2
  40315c:	429d      	cmp	r5, r3
  40315e:	dbf1      	blt.n	403144 <_printf_common+0x48>
  403160:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  403164:	6822      	ldr	r2, [r4, #0]
  403166:	3300      	adds	r3, #0
  403168:	bf18      	it	ne
  40316a:	2301      	movne	r3, #1
  40316c:	0692      	lsls	r2, r2, #26
  40316e:	d50f      	bpl.n	403190 <_printf_common+0x94>
  403170:	18e1      	adds	r1, r4, r3
  403172:	1c5a      	adds	r2, r3, #1
  403174:	2030      	movs	r0, #48	; 0x30
  403176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  40317a:	4422      	add	r2, r4
  40317c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  403180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  403184:	3302      	adds	r3, #2
  403186:	e003      	b.n	403190 <_printf_common+0x94>
  403188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403190:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403194:	4639      	mov	r1, r7
  403196:	4630      	mov	r0, r6
  403198:	47c0      	blx	r8
  40319a:	3001      	adds	r0, #1
  40319c:	d0f4      	beq.n	403188 <_printf_common+0x8c>
  40319e:	6822      	ldr	r2, [r4, #0]
  4031a0:	f8d9 5000 	ldr.w	r5, [r9]
  4031a4:	68e3      	ldr	r3, [r4, #12]
  4031a6:	f002 0206 	and.w	r2, r2, #6
  4031aa:	2a04      	cmp	r2, #4
  4031ac:	bf08      	it	eq
  4031ae:	1b5d      	subeq	r5, r3, r5
  4031b0:	6922      	ldr	r2, [r4, #16]
  4031b2:	68a3      	ldr	r3, [r4, #8]
  4031b4:	bf0c      	ite	eq
  4031b6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  4031ba:	2500      	movne	r5, #0
  4031bc:	4293      	cmp	r3, r2
  4031be:	bfc4      	itt	gt
  4031c0:	1a9b      	subgt	r3, r3, r2
  4031c2:	18ed      	addgt	r5, r5, r3
  4031c4:	f04f 0900 	mov.w	r9, #0
  4031c8:	341a      	adds	r4, #26
  4031ca:	454d      	cmp	r5, r9
  4031cc:	d009      	beq.n	4031e2 <_printf_common+0xe6>
  4031ce:	2301      	movs	r3, #1
  4031d0:	4622      	mov	r2, r4
  4031d2:	4639      	mov	r1, r7
  4031d4:	4630      	mov	r0, r6
  4031d6:	47c0      	blx	r8
  4031d8:	3001      	adds	r0, #1
  4031da:	d0d5      	beq.n	403188 <_printf_common+0x8c>
  4031dc:	f109 0901 	add.w	r9, r9, #1
  4031e0:	e7f3      	b.n	4031ca <_printf_common+0xce>
  4031e2:	2000      	movs	r0, #0
  4031e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004031e8 <_printf_i>:
  4031e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4031ec:	4617      	mov	r7, r2
  4031ee:	7e0a      	ldrb	r2, [r1, #24]
  4031f0:	b085      	sub	sp, #20
  4031f2:	2a6e      	cmp	r2, #110	; 0x6e
  4031f4:	4698      	mov	r8, r3
  4031f6:	4606      	mov	r6, r0
  4031f8:	460c      	mov	r4, r1
  4031fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4031fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  403200:	f000 80ae 	beq.w	403360 <_printf_i+0x178>
  403204:	d811      	bhi.n	40322a <_printf_i+0x42>
  403206:	2a63      	cmp	r2, #99	; 0x63
  403208:	d022      	beq.n	403250 <_printf_i+0x68>
  40320a:	d809      	bhi.n	403220 <_printf_i+0x38>
  40320c:	2a00      	cmp	r2, #0
  40320e:	f000 80bb 	beq.w	403388 <_printf_i+0x1a0>
  403212:	2a58      	cmp	r2, #88	; 0x58
  403214:	f040 80ca 	bne.w	4033ac <_printf_i+0x1c4>
  403218:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  40321c:	4983      	ldr	r1, [pc, #524]	; (40342c <_printf_i+0x244>)
  40321e:	e055      	b.n	4032cc <_printf_i+0xe4>
  403220:	2a64      	cmp	r2, #100	; 0x64
  403222:	d01e      	beq.n	403262 <_printf_i+0x7a>
  403224:	2a69      	cmp	r2, #105	; 0x69
  403226:	d01c      	beq.n	403262 <_printf_i+0x7a>
  403228:	e0c0      	b.n	4033ac <_printf_i+0x1c4>
  40322a:	2a73      	cmp	r2, #115	; 0x73
  40322c:	f000 80b0 	beq.w	403390 <_printf_i+0x1a8>
  403230:	d809      	bhi.n	403246 <_printf_i+0x5e>
  403232:	2a6f      	cmp	r2, #111	; 0x6f
  403234:	d02e      	beq.n	403294 <_printf_i+0xac>
  403236:	2a70      	cmp	r2, #112	; 0x70
  403238:	f040 80b8 	bne.w	4033ac <_printf_i+0x1c4>
  40323c:	680a      	ldr	r2, [r1, #0]
  40323e:	f042 0220 	orr.w	r2, r2, #32
  403242:	600a      	str	r2, [r1, #0]
  403244:	e03e      	b.n	4032c4 <_printf_i+0xdc>
  403246:	2a75      	cmp	r2, #117	; 0x75
  403248:	d024      	beq.n	403294 <_printf_i+0xac>
  40324a:	2a78      	cmp	r2, #120	; 0x78
  40324c:	d03a      	beq.n	4032c4 <_printf_i+0xdc>
  40324e:	e0ad      	b.n	4033ac <_printf_i+0x1c4>
  403250:	681a      	ldr	r2, [r3, #0]
  403252:	f101 0542 	add.w	r5, r1, #66	; 0x42
  403256:	1d11      	adds	r1, r2, #4
  403258:	6019      	str	r1, [r3, #0]
  40325a:	6813      	ldr	r3, [r2, #0]
  40325c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403260:	e0a8      	b.n	4033b4 <_printf_i+0x1cc>
  403262:	6821      	ldr	r1, [r4, #0]
  403264:	681a      	ldr	r2, [r3, #0]
  403266:	f011 0f80 	tst.w	r1, #128	; 0x80
  40326a:	d002      	beq.n	403272 <_printf_i+0x8a>
  40326c:	1d11      	adds	r1, r2, #4
  40326e:	6019      	str	r1, [r3, #0]
  403270:	e008      	b.n	403284 <_printf_i+0x9c>
  403272:	f011 0f40 	tst.w	r1, #64	; 0x40
  403276:	f102 0104 	add.w	r1, r2, #4
  40327a:	6019      	str	r1, [r3, #0]
  40327c:	d002      	beq.n	403284 <_printf_i+0x9c>
  40327e:	f9b2 3000 	ldrsh.w	r3, [r2]
  403282:	e000      	b.n	403286 <_printf_i+0x9e>
  403284:	6813      	ldr	r3, [r2, #0]
  403286:	2b00      	cmp	r3, #0
  403288:	da3c      	bge.n	403304 <_printf_i+0x11c>
  40328a:	222d      	movs	r2, #45	; 0x2d
  40328c:	425b      	negs	r3, r3
  40328e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  403292:	e037      	b.n	403304 <_printf_i+0x11c>
  403294:	6821      	ldr	r1, [r4, #0]
  403296:	681a      	ldr	r2, [r3, #0]
  403298:	f011 0f80 	tst.w	r1, #128	; 0x80
  40329c:	d002      	beq.n	4032a4 <_printf_i+0xbc>
  40329e:	1d11      	adds	r1, r2, #4
  4032a0:	6019      	str	r1, [r3, #0]
  4032a2:	e007      	b.n	4032b4 <_printf_i+0xcc>
  4032a4:	f011 0f40 	tst.w	r1, #64	; 0x40
  4032a8:	f102 0104 	add.w	r1, r2, #4
  4032ac:	6019      	str	r1, [r3, #0]
  4032ae:	d001      	beq.n	4032b4 <_printf_i+0xcc>
  4032b0:	8813      	ldrh	r3, [r2, #0]
  4032b2:	e000      	b.n	4032b6 <_printf_i+0xce>
  4032b4:	6813      	ldr	r3, [r2, #0]
  4032b6:	7e22      	ldrb	r2, [r4, #24]
  4032b8:	495c      	ldr	r1, [pc, #368]	; (40342c <_printf_i+0x244>)
  4032ba:	2a6f      	cmp	r2, #111	; 0x6f
  4032bc:	bf14      	ite	ne
  4032be:	220a      	movne	r2, #10
  4032c0:	2208      	moveq	r2, #8
  4032c2:	e01b      	b.n	4032fc <_printf_i+0x114>
  4032c4:	2278      	movs	r2, #120	; 0x78
  4032c6:	495a      	ldr	r1, [pc, #360]	; (403430 <_printf_i+0x248>)
  4032c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  4032cc:	6822      	ldr	r2, [r4, #0]
  4032ce:	6818      	ldr	r0, [r3, #0]
  4032d0:	f012 0f80 	tst.w	r2, #128	; 0x80
  4032d4:	f100 0504 	add.w	r5, r0, #4
  4032d8:	601d      	str	r5, [r3, #0]
  4032da:	d103      	bne.n	4032e4 <_printf_i+0xfc>
  4032dc:	0655      	lsls	r5, r2, #25
  4032de:	d501      	bpl.n	4032e4 <_printf_i+0xfc>
  4032e0:	8803      	ldrh	r3, [r0, #0]
  4032e2:	e000      	b.n	4032e6 <_printf_i+0xfe>
  4032e4:	6803      	ldr	r3, [r0, #0]
  4032e6:	07d0      	lsls	r0, r2, #31
  4032e8:	bf44      	itt	mi
  4032ea:	f042 0220 	orrmi.w	r2, r2, #32
  4032ee:	6022      	strmi	r2, [r4, #0]
  4032f0:	b91b      	cbnz	r3, 4032fa <_printf_i+0x112>
  4032f2:	6822      	ldr	r2, [r4, #0]
  4032f4:	f022 0220 	bic.w	r2, r2, #32
  4032f8:	6022      	str	r2, [r4, #0]
  4032fa:	2210      	movs	r2, #16
  4032fc:	2000      	movs	r0, #0
  4032fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  403302:	e001      	b.n	403308 <_printf_i+0x120>
  403304:	4949      	ldr	r1, [pc, #292]	; (40342c <_printf_i+0x244>)
  403306:	220a      	movs	r2, #10
  403308:	6865      	ldr	r5, [r4, #4]
  40330a:	60a5      	str	r5, [r4, #8]
  40330c:	2d00      	cmp	r5, #0
  40330e:	db08      	blt.n	403322 <_printf_i+0x13a>
  403310:	6820      	ldr	r0, [r4, #0]
  403312:	f020 0004 	bic.w	r0, r0, #4
  403316:	6020      	str	r0, [r4, #0]
  403318:	b92b      	cbnz	r3, 403326 <_printf_i+0x13e>
  40331a:	2d00      	cmp	r5, #0
  40331c:	d17d      	bne.n	40341a <_printf_i+0x232>
  40331e:	4675      	mov	r5, lr
  403320:	e00c      	b.n	40333c <_printf_i+0x154>
  403322:	2b00      	cmp	r3, #0
  403324:	d079      	beq.n	40341a <_printf_i+0x232>
  403326:	4675      	mov	r5, lr
  403328:	fbb3 f0f2 	udiv	r0, r3, r2
  40332c:	fb02 3310 	mls	r3, r2, r0, r3
  403330:	5ccb      	ldrb	r3, [r1, r3]
  403332:	f805 3d01 	strb.w	r3, [r5, #-1]!
  403336:	4603      	mov	r3, r0
  403338:	2800      	cmp	r0, #0
  40333a:	d1f5      	bne.n	403328 <_printf_i+0x140>
  40333c:	2a08      	cmp	r2, #8
  40333e:	d10b      	bne.n	403358 <_printf_i+0x170>
  403340:	6823      	ldr	r3, [r4, #0]
  403342:	07da      	lsls	r2, r3, #31
  403344:	d508      	bpl.n	403358 <_printf_i+0x170>
  403346:	6923      	ldr	r3, [r4, #16]
  403348:	6862      	ldr	r2, [r4, #4]
  40334a:	429a      	cmp	r2, r3
  40334c:	bfde      	ittt	le
  40334e:	2330      	movle	r3, #48	; 0x30
  403350:	f805 3c01 	strble.w	r3, [r5, #-1]
  403354:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  403358:	ebc5 030e 	rsb	r3, r5, lr
  40335c:	6123      	str	r3, [r4, #16]
  40335e:	e02e      	b.n	4033be <_printf_i+0x1d6>
  403360:	6808      	ldr	r0, [r1, #0]
  403362:	681a      	ldr	r2, [r3, #0]
  403364:	6949      	ldr	r1, [r1, #20]
  403366:	f010 0f80 	tst.w	r0, #128	; 0x80
  40336a:	d003      	beq.n	403374 <_printf_i+0x18c>
  40336c:	1d10      	adds	r0, r2, #4
  40336e:	6018      	str	r0, [r3, #0]
  403370:	6813      	ldr	r3, [r2, #0]
  403372:	e008      	b.n	403386 <_printf_i+0x19e>
  403374:	f010 0f40 	tst.w	r0, #64	; 0x40
  403378:	f102 0004 	add.w	r0, r2, #4
  40337c:	6018      	str	r0, [r3, #0]
  40337e:	6813      	ldr	r3, [r2, #0]
  403380:	d001      	beq.n	403386 <_printf_i+0x19e>
  403382:	8019      	strh	r1, [r3, #0]
  403384:	e000      	b.n	403388 <_printf_i+0x1a0>
  403386:	6019      	str	r1, [r3, #0]
  403388:	2300      	movs	r3, #0
  40338a:	6123      	str	r3, [r4, #16]
  40338c:	4675      	mov	r5, lr
  40338e:	e016      	b.n	4033be <_printf_i+0x1d6>
  403390:	681a      	ldr	r2, [r3, #0]
  403392:	1d11      	adds	r1, r2, #4
  403394:	6019      	str	r1, [r3, #0]
  403396:	6815      	ldr	r5, [r2, #0]
  403398:	6862      	ldr	r2, [r4, #4]
  40339a:	2100      	movs	r1, #0
  40339c:	4628      	mov	r0, r5
  40339e:	f001 fb57 	bl	404a50 <memchr>
  4033a2:	b108      	cbz	r0, 4033a8 <_printf_i+0x1c0>
  4033a4:	1b40      	subs	r0, r0, r5
  4033a6:	6060      	str	r0, [r4, #4]
  4033a8:	6863      	ldr	r3, [r4, #4]
  4033aa:	e004      	b.n	4033b6 <_printf_i+0x1ce>
  4033ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
  4033b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  4033b4:	2301      	movs	r3, #1
  4033b6:	6123      	str	r3, [r4, #16]
  4033b8:	2300      	movs	r3, #0
  4033ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4033be:	f8cd 8000 	str.w	r8, [sp]
  4033c2:	463b      	mov	r3, r7
  4033c4:	aa03      	add	r2, sp, #12
  4033c6:	4621      	mov	r1, r4
  4033c8:	4630      	mov	r0, r6
  4033ca:	f7ff fe97 	bl	4030fc <_printf_common>
  4033ce:	3001      	adds	r0, #1
  4033d0:	d102      	bne.n	4033d8 <_printf_i+0x1f0>
  4033d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4033d6:	e026      	b.n	403426 <_printf_i+0x23e>
  4033d8:	6923      	ldr	r3, [r4, #16]
  4033da:	462a      	mov	r2, r5
  4033dc:	4639      	mov	r1, r7
  4033de:	4630      	mov	r0, r6
  4033e0:	47c0      	blx	r8
  4033e2:	3001      	adds	r0, #1
  4033e4:	d0f5      	beq.n	4033d2 <_printf_i+0x1ea>
  4033e6:	6823      	ldr	r3, [r4, #0]
  4033e8:	079b      	lsls	r3, r3, #30
  4033ea:	d510      	bpl.n	40340e <_printf_i+0x226>
  4033ec:	2500      	movs	r5, #0
  4033ee:	f104 0919 	add.w	r9, r4, #25
  4033f2:	e007      	b.n	403404 <_printf_i+0x21c>
  4033f4:	2301      	movs	r3, #1
  4033f6:	464a      	mov	r2, r9
  4033f8:	4639      	mov	r1, r7
  4033fa:	4630      	mov	r0, r6
  4033fc:	47c0      	blx	r8
  4033fe:	3001      	adds	r0, #1
  403400:	d0e7      	beq.n	4033d2 <_printf_i+0x1ea>
  403402:	3501      	adds	r5, #1
  403404:	68e3      	ldr	r3, [r4, #12]
  403406:	9a03      	ldr	r2, [sp, #12]
  403408:	1a9b      	subs	r3, r3, r2
  40340a:	429d      	cmp	r5, r3
  40340c:	dbf2      	blt.n	4033f4 <_printf_i+0x20c>
  40340e:	68e0      	ldr	r0, [r4, #12]
  403410:	9b03      	ldr	r3, [sp, #12]
  403412:	4298      	cmp	r0, r3
  403414:	bfb8      	it	lt
  403416:	4618      	movlt	r0, r3
  403418:	e005      	b.n	403426 <_printf_i+0x23e>
  40341a:	780b      	ldrb	r3, [r1, #0]
  40341c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  403420:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403424:	e78a      	b.n	40333c <_printf_i+0x154>
  403426:	b005      	add	sp, #20
  403428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40342c:	004069be 	.word	0x004069be
  403430:	004069cf 	.word	0x004069cf

00403434 <iprintf>:
  403434:	b40f      	push	{r0, r1, r2, r3}
  403436:	4b0a      	ldr	r3, [pc, #40]	; (403460 <iprintf+0x2c>)
  403438:	b513      	push	{r0, r1, r4, lr}
  40343a:	681c      	ldr	r4, [r3, #0]
  40343c:	b124      	cbz	r4, 403448 <iprintf+0x14>
  40343e:	69a3      	ldr	r3, [r4, #24]
  403440:	b913      	cbnz	r3, 403448 <iprintf+0x14>
  403442:	4620      	mov	r0, r4
  403444:	f001 f9ea 	bl	40481c <__sinit>
  403448:	ab05      	add	r3, sp, #20
  40344a:	9a04      	ldr	r2, [sp, #16]
  40344c:	68a1      	ldr	r1, [r4, #8]
  40344e:	9301      	str	r3, [sp, #4]
  403450:	4620      	mov	r0, r4
  403452:	f001 ff05 	bl	405260 <_vfiprintf_r>
  403456:	b002      	add	sp, #8
  403458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40345c:	b004      	add	sp, #16
  40345e:	4770      	bx	lr
  403460:	20000078 	.word	0x20000078

00403464 <_puts_r>:
  403464:	b570      	push	{r4, r5, r6, lr}
  403466:	460e      	mov	r6, r1
  403468:	4605      	mov	r5, r0
  40346a:	b118      	cbz	r0, 403474 <_puts_r+0x10>
  40346c:	6983      	ldr	r3, [r0, #24]
  40346e:	b90b      	cbnz	r3, 403474 <_puts_r+0x10>
  403470:	f001 f9d4 	bl	40481c <__sinit>
  403474:	69ab      	ldr	r3, [r5, #24]
  403476:	68ac      	ldr	r4, [r5, #8]
  403478:	b913      	cbnz	r3, 403480 <_puts_r+0x1c>
  40347a:	4628      	mov	r0, r5
  40347c:	f001 f9ce 	bl	40481c <__sinit>
  403480:	4b22      	ldr	r3, [pc, #136]	; (40350c <_puts_r+0xa8>)
  403482:	429c      	cmp	r4, r3
  403484:	d101      	bne.n	40348a <_puts_r+0x26>
  403486:	686c      	ldr	r4, [r5, #4]
  403488:	e008      	b.n	40349c <_puts_r+0x38>
  40348a:	4b21      	ldr	r3, [pc, #132]	; (403510 <_puts_r+0xac>)
  40348c:	429c      	cmp	r4, r3
  40348e:	d101      	bne.n	403494 <_puts_r+0x30>
  403490:	68ac      	ldr	r4, [r5, #8]
  403492:	e003      	b.n	40349c <_puts_r+0x38>
  403494:	4b1f      	ldr	r3, [pc, #124]	; (403514 <_puts_r+0xb0>)
  403496:	429c      	cmp	r4, r3
  403498:	bf08      	it	eq
  40349a:	68ec      	ldreq	r4, [r5, #12]
  40349c:	89a3      	ldrh	r3, [r4, #12]
  40349e:	071b      	lsls	r3, r3, #28
  4034a0:	d501      	bpl.n	4034a6 <_puts_r+0x42>
  4034a2:	6923      	ldr	r3, [r4, #16]
  4034a4:	b93b      	cbnz	r3, 4034b6 <_puts_r+0x52>
  4034a6:	4621      	mov	r1, r4
  4034a8:	4628      	mov	r0, r5
  4034aa:	f000 fa29 	bl	403900 <__swsetup_r>
  4034ae:	b110      	cbz	r0, 4034b6 <_puts_r+0x52>
  4034b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4034b4:	bd70      	pop	{r4, r5, r6, pc}
  4034b6:	3e01      	subs	r6, #1
  4034b8:	68a3      	ldr	r3, [r4, #8]
  4034ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  4034be:	3b01      	subs	r3, #1
  4034c0:	60a3      	str	r3, [r4, #8]
  4034c2:	b191      	cbz	r1, 4034ea <_puts_r+0x86>
  4034c4:	2b00      	cmp	r3, #0
  4034c6:	da04      	bge.n	4034d2 <_puts_r+0x6e>
  4034c8:	69a2      	ldr	r2, [r4, #24]
  4034ca:	4293      	cmp	r3, r2
  4034cc:	db06      	blt.n	4034dc <_puts_r+0x78>
  4034ce:	290a      	cmp	r1, #10
  4034d0:	d004      	beq.n	4034dc <_puts_r+0x78>
  4034d2:	6823      	ldr	r3, [r4, #0]
  4034d4:	1c5a      	adds	r2, r3, #1
  4034d6:	6022      	str	r2, [r4, #0]
  4034d8:	7019      	strb	r1, [r3, #0]
  4034da:	e7ed      	b.n	4034b8 <_puts_r+0x54>
  4034dc:	4622      	mov	r2, r4
  4034de:	4628      	mov	r0, r5
  4034e0:	f000 f9ba 	bl	403858 <__swbuf_r>
  4034e4:	3001      	adds	r0, #1
  4034e6:	d1e7      	bne.n	4034b8 <_puts_r+0x54>
  4034e8:	e7e2      	b.n	4034b0 <_puts_r+0x4c>
  4034ea:	2b00      	cmp	r3, #0
  4034ec:	da08      	bge.n	403500 <_puts_r+0x9c>
  4034ee:	4622      	mov	r2, r4
  4034f0:	210a      	movs	r1, #10
  4034f2:	4628      	mov	r0, r5
  4034f4:	f000 f9b0 	bl	403858 <__swbuf_r>
  4034f8:	3001      	adds	r0, #1
  4034fa:	d0d9      	beq.n	4034b0 <_puts_r+0x4c>
  4034fc:	200a      	movs	r0, #10
  4034fe:	bd70      	pop	{r4, r5, r6, pc}
  403500:	6823      	ldr	r3, [r4, #0]
  403502:	200a      	movs	r0, #10
  403504:	1c5a      	adds	r2, r3, #1
  403506:	6022      	str	r2, [r4, #0]
  403508:	7018      	strb	r0, [r3, #0]
  40350a:	bd70      	pop	{r4, r5, r6, pc}
  40350c:	004069f0 	.word	0x004069f0
  403510:	00406a10 	.word	0x00406a10
  403514:	00406a30 	.word	0x00406a30

00403518 <puts>:
  403518:	4b02      	ldr	r3, [pc, #8]	; (403524 <puts+0xc>)
  40351a:	4601      	mov	r1, r0
  40351c:	6818      	ldr	r0, [r3, #0]
  40351e:	f7ff bfa1 	b.w	403464 <_puts_r>
  403522:	bf00      	nop
  403524:	20000078 	.word	0x20000078

00403528 <setbuf>:
  403528:	2900      	cmp	r1, #0
  40352a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40352e:	bf0c      	ite	eq
  403530:	2202      	moveq	r2, #2
  403532:	2200      	movne	r2, #0
  403534:	f000 b800 	b.w	403538 <setvbuf>

00403538 <setvbuf>:
  403538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  40353c:	461d      	mov	r5, r3
  40353e:	4b4f      	ldr	r3, [pc, #316]	; (40367c <setvbuf+0x144>)
  403540:	681e      	ldr	r6, [r3, #0]
  403542:	4604      	mov	r4, r0
  403544:	460f      	mov	r7, r1
  403546:	4690      	mov	r8, r2
  403548:	b126      	cbz	r6, 403554 <setvbuf+0x1c>
  40354a:	69b3      	ldr	r3, [r6, #24]
  40354c:	b913      	cbnz	r3, 403554 <setvbuf+0x1c>
  40354e:	4630      	mov	r0, r6
  403550:	f001 f964 	bl	40481c <__sinit>
  403554:	4b4a      	ldr	r3, [pc, #296]	; (403680 <setvbuf+0x148>)
  403556:	429c      	cmp	r4, r3
  403558:	d101      	bne.n	40355e <setvbuf+0x26>
  40355a:	6874      	ldr	r4, [r6, #4]
  40355c:	e008      	b.n	403570 <setvbuf+0x38>
  40355e:	4b49      	ldr	r3, [pc, #292]	; (403684 <setvbuf+0x14c>)
  403560:	429c      	cmp	r4, r3
  403562:	d101      	bne.n	403568 <setvbuf+0x30>
  403564:	68b4      	ldr	r4, [r6, #8]
  403566:	e003      	b.n	403570 <setvbuf+0x38>
  403568:	4b47      	ldr	r3, [pc, #284]	; (403688 <setvbuf+0x150>)
  40356a:	429c      	cmp	r4, r3
  40356c:	bf08      	it	eq
  40356e:	68f4      	ldreq	r4, [r6, #12]
  403570:	f1b8 0f02 	cmp.w	r8, #2
  403574:	d004      	beq.n	403580 <setvbuf+0x48>
  403576:	f1b8 0f01 	cmp.w	r8, #1
  40357a:	d879      	bhi.n	403670 <setvbuf+0x138>
  40357c:	2d00      	cmp	r5, #0
  40357e:	db77      	blt.n	403670 <setvbuf+0x138>
  403580:	4621      	mov	r1, r4
  403582:	4630      	mov	r0, r6
  403584:	f001 f8e0 	bl	404748 <_fflush_r>
  403588:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40358a:	b141      	cbz	r1, 40359e <setvbuf+0x66>
  40358c:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403590:	4299      	cmp	r1, r3
  403592:	d002      	beq.n	40359a <setvbuf+0x62>
  403594:	4630      	mov	r0, r6
  403596:	f001 fd8f 	bl	4050b8 <_free_r>
  40359a:	2300      	movs	r3, #0
  40359c:	6363      	str	r3, [r4, #52]	; 0x34
  40359e:	2300      	movs	r3, #0
  4035a0:	61a3      	str	r3, [r4, #24]
  4035a2:	6063      	str	r3, [r4, #4]
  4035a4:	89a3      	ldrh	r3, [r4, #12]
  4035a6:	061b      	lsls	r3, r3, #24
  4035a8:	d503      	bpl.n	4035b2 <setvbuf+0x7a>
  4035aa:	6921      	ldr	r1, [r4, #16]
  4035ac:	4630      	mov	r0, r6
  4035ae:	f001 fd83 	bl	4050b8 <_free_r>
  4035b2:	89a3      	ldrh	r3, [r4, #12]
  4035b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4035b8:	f023 0303 	bic.w	r3, r3, #3
  4035bc:	f1b8 0f02 	cmp.w	r8, #2
  4035c0:	81a3      	strh	r3, [r4, #12]
  4035c2:	d01e      	beq.n	403602 <setvbuf+0xca>
  4035c4:	ab01      	add	r3, sp, #4
  4035c6:	466a      	mov	r2, sp
  4035c8:	4621      	mov	r1, r4
  4035ca:	4630      	mov	r0, r6
  4035cc:	f001 f9c2 	bl	404954 <__swhatbuf_r>
  4035d0:	89a3      	ldrh	r3, [r4, #12]
  4035d2:	4318      	orrs	r0, r3
  4035d4:	81a0      	strh	r0, [r4, #12]
  4035d6:	b90d      	cbnz	r5, 4035dc <setvbuf+0xa4>
  4035d8:	9d00      	ldr	r5, [sp, #0]
  4035da:	e000      	b.n	4035de <setvbuf+0xa6>
  4035dc:	bb2f      	cbnz	r7, 40362a <setvbuf+0xf2>
  4035de:	4628      	mov	r0, r5
  4035e0:	f001 fa18 	bl	404a14 <malloc>
  4035e4:	4607      	mov	r7, r0
  4035e6:	b9d0      	cbnz	r0, 40361e <setvbuf+0xe6>
  4035e8:	f8dd 9000 	ldr.w	r9, [sp]
  4035ec:	45a9      	cmp	r9, r5
  4035ee:	d102      	bne.n	4035f6 <setvbuf+0xbe>
  4035f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4035f4:	e006      	b.n	403604 <setvbuf+0xcc>
  4035f6:	4648      	mov	r0, r9
  4035f8:	f001 fa0c 	bl	404a14 <malloc>
  4035fc:	4607      	mov	r7, r0
  4035fe:	b978      	cbnz	r0, 403620 <setvbuf+0xe8>
  403600:	e7f6      	b.n	4035f0 <setvbuf+0xb8>
  403602:	2000      	movs	r0, #0
  403604:	89a3      	ldrh	r3, [r4, #12]
  403606:	f043 0302 	orr.w	r3, r3, #2
  40360a:	81a3      	strh	r3, [r4, #12]
  40360c:	2300      	movs	r3, #0
  40360e:	60a3      	str	r3, [r4, #8]
  403610:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403614:	6023      	str	r3, [r4, #0]
  403616:	6123      	str	r3, [r4, #16]
  403618:	2301      	movs	r3, #1
  40361a:	6163      	str	r3, [r4, #20]
  40361c:	e02a      	b.n	403674 <setvbuf+0x13c>
  40361e:	46a9      	mov	r9, r5
  403620:	89a3      	ldrh	r3, [r4, #12]
  403622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403626:	81a3      	strh	r3, [r4, #12]
  403628:	464d      	mov	r5, r9
  40362a:	69b3      	ldr	r3, [r6, #24]
  40362c:	b913      	cbnz	r3, 403634 <setvbuf+0xfc>
  40362e:	4630      	mov	r0, r6
  403630:	f001 f8f4 	bl	40481c <__sinit>
  403634:	f1b8 0f01 	cmp.w	r8, #1
  403638:	bf08      	it	eq
  40363a:	89a3      	ldrheq	r3, [r4, #12]
  40363c:	6027      	str	r7, [r4, #0]
  40363e:	bf04      	itt	eq
  403640:	f043 0301 	orreq.w	r3, r3, #1
  403644:	81a3      	strheq	r3, [r4, #12]
  403646:	89a3      	ldrh	r3, [r4, #12]
  403648:	6127      	str	r7, [r4, #16]
  40364a:	f003 0008 	and.w	r0, r3, #8
  40364e:	b280      	uxth	r0, r0
  403650:	6165      	str	r5, [r4, #20]
  403652:	b158      	cbz	r0, 40366c <setvbuf+0x134>
  403654:	f013 0301 	ands.w	r3, r3, #1
  403658:	f04f 0000 	mov.w	r0, #0
  40365c:	bf1d      	ittte	ne
  40365e:	426d      	negne	r5, r5
  403660:	60a0      	strne	r0, [r4, #8]
  403662:	61a5      	strne	r5, [r4, #24]
  403664:	60a5      	streq	r5, [r4, #8]
  403666:	bf08      	it	eq
  403668:	4618      	moveq	r0, r3
  40366a:	e003      	b.n	403674 <setvbuf+0x13c>
  40366c:	60a0      	str	r0, [r4, #8]
  40366e:	e001      	b.n	403674 <setvbuf+0x13c>
  403670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403674:	b003      	add	sp, #12
  403676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40367a:	bf00      	nop
  40367c:	20000078 	.word	0x20000078
  403680:	004069f0 	.word	0x004069f0
  403684:	00406a10 	.word	0x00406a10
  403688:	00406a30 	.word	0x00406a30

0040368c <strcmp>:
  40368c:	f810 2b01 	ldrb.w	r2, [r0], #1
  403690:	f811 3b01 	ldrb.w	r3, [r1], #1
  403694:	2a01      	cmp	r2, #1
  403696:	bf28      	it	cs
  403698:	429a      	cmpcs	r2, r3
  40369a:	d0f7      	beq.n	40368c <strcmp>
  40369c:	1ad0      	subs	r0, r2, r3
  40369e:	4770      	bx	lr

004036a0 <strcpy>:
  4036a0:	4603      	mov	r3, r0
  4036a2:	f811 2b01 	ldrb.w	r2, [r1], #1
  4036a6:	f803 2b01 	strb.w	r2, [r3], #1
  4036aa:	2a00      	cmp	r2, #0
  4036ac:	d1f9      	bne.n	4036a2 <strcpy+0x2>
  4036ae:	4770      	bx	lr

004036b0 <strlen>:
  4036b0:	4603      	mov	r3, r0
  4036b2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4036b6:	2a00      	cmp	r2, #0
  4036b8:	d1fb      	bne.n	4036b2 <strlen+0x2>
  4036ba:	1a18      	subs	r0, r3, r0
  4036bc:	3801      	subs	r0, #1
  4036be:	4770      	bx	lr

004036c0 <__strtok_r>:
  4036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4036c2:	b948      	cbnz	r0, 4036d8 <__strtok_r+0x18>
  4036c4:	6810      	ldr	r0, [r2, #0]
  4036c6:	b938      	cbnz	r0, 4036d8 <__strtok_r+0x18>
  4036c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036ca:	f817 6b01 	ldrb.w	r6, [r7], #1
  4036ce:	b15e      	cbz	r6, 4036e8 <__strtok_r+0x28>
  4036d0:	42b5      	cmp	r5, r6
  4036d2:	d1fa      	bne.n	4036ca <__strtok_r+0xa>
  4036d4:	b12b      	cbz	r3, 4036e2 <__strtok_r+0x22>
  4036d6:	4620      	mov	r0, r4
  4036d8:	4604      	mov	r4, r0
  4036da:	460f      	mov	r7, r1
  4036dc:	f814 5b01 	ldrb.w	r5, [r4], #1
  4036e0:	e7f3      	b.n	4036ca <__strtok_r+0xa>
  4036e2:	6014      	str	r4, [r2, #0]
  4036e4:	7003      	strb	r3, [r0, #0]
  4036e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036e8:	b94d      	cbnz	r5, 4036fe <__strtok_r+0x3e>
  4036ea:	6015      	str	r5, [r2, #0]
  4036ec:	4628      	mov	r0, r5
  4036ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4036f0:	f817 6b01 	ldrb.w	r6, [r7], #1
  4036f4:	42b5      	cmp	r5, r6
  4036f6:	d007      	beq.n	403708 <__strtok_r+0x48>
  4036f8:	2e00      	cmp	r6, #0
  4036fa:	d1f9      	bne.n	4036f0 <__strtok_r+0x30>
  4036fc:	461c      	mov	r4, r3
  4036fe:	4623      	mov	r3, r4
  403700:	460f      	mov	r7, r1
  403702:	f813 5b01 	ldrb.w	r5, [r3], #1
  403706:	e7f3      	b.n	4036f0 <__strtok_r+0x30>
  403708:	b115      	cbz	r5, 403710 <__strtok_r+0x50>
  40370a:	2100      	movs	r1, #0
  40370c:	7021      	strb	r1, [r4, #0]
  40370e:	e000      	b.n	403712 <__strtok_r+0x52>
  403710:	462b      	mov	r3, r5
  403712:	6013      	str	r3, [r2, #0]
  403714:	bdf0      	pop	{r4, r5, r6, r7, pc}

00403716 <strtok_r>:
  403716:	2301      	movs	r3, #1
  403718:	f7ff bfd2 	b.w	4036c0 <__strtok_r>

0040371c <_strtol_l.isra.0>:
  40371c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403720:	4680      	mov	r8, r0
  403722:	4689      	mov	r9, r1
  403724:	4692      	mov	sl, r2
  403726:	461e      	mov	r6, r3
  403728:	460f      	mov	r7, r1
  40372a:	463d      	mov	r5, r7
  40372c:	9808      	ldr	r0, [sp, #32]
  40372e:	f815 4b01 	ldrb.w	r4, [r5], #1
  403732:	f001 f8fd 	bl	404930 <__locale_ctype_ptr_l>
  403736:	4420      	add	r0, r4
  403738:	7842      	ldrb	r2, [r0, #1]
  40373a:	f002 0208 	and.w	r2, r2, #8
  40373e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
  403742:	b10a      	cbz	r2, 403748 <_strtol_l.isra.0+0x2c>
  403744:	462f      	mov	r7, r5
  403746:	e7f0      	b.n	40372a <_strtol_l.isra.0+0xe>
  403748:	2c2d      	cmp	r4, #45	; 0x2d
  40374a:	d103      	bne.n	403754 <_strtol_l.isra.0+0x38>
  40374c:	1cbd      	adds	r5, r7, #2
  40374e:	787c      	ldrb	r4, [r7, #1]
  403750:	2301      	movs	r3, #1
  403752:	e003      	b.n	40375c <_strtol_l.isra.0+0x40>
  403754:	2c2b      	cmp	r4, #43	; 0x2b
  403756:	bf04      	itt	eq
  403758:	787c      	ldrbeq	r4, [r7, #1]
  40375a:	1cbd      	addeq	r5, r7, #2
  40375c:	b116      	cbz	r6, 403764 <_strtol_l.isra.0+0x48>
  40375e:	2e10      	cmp	r6, #16
  403760:	d10a      	bne.n	403778 <_strtol_l.isra.0+0x5c>
  403762:	e05e      	b.n	403822 <_strtol_l.isra.0+0x106>
  403764:	2c30      	cmp	r4, #48	; 0x30
  403766:	d15a      	bne.n	40381e <_strtol_l.isra.0+0x102>
  403768:	782a      	ldrb	r2, [r5, #0]
  40376a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
  40376e:	2a58      	cmp	r2, #88	; 0x58
  403770:	d150      	bne.n	403814 <_strtol_l.isra.0+0xf8>
  403772:	786c      	ldrb	r4, [r5, #1]
  403774:	2610      	movs	r6, #16
  403776:	3502      	adds	r5, #2
  403778:	2b00      	cmp	r3, #0
  40377a:	bf14      	ite	ne
  40377c:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
  403780:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
  403784:	fbb2 fef6 	udiv	lr, r2, r6
  403788:	fb06 211e 	mls	r1, r6, lr, r2
  40378c:	2200      	movs	r2, #0
  40378e:	4610      	mov	r0, r2
  403790:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
  403794:	2f09      	cmp	r7, #9
  403796:	d801      	bhi.n	40379c <_strtol_l.isra.0+0x80>
  403798:	463c      	mov	r4, r7
  40379a:	e00a      	b.n	4037b2 <_strtol_l.isra.0+0x96>
  40379c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
  4037a0:	2f19      	cmp	r7, #25
  4037a2:	d801      	bhi.n	4037a8 <_strtol_l.isra.0+0x8c>
  4037a4:	3c37      	subs	r4, #55	; 0x37
  4037a6:	e004      	b.n	4037b2 <_strtol_l.isra.0+0x96>
  4037a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
  4037ac:	2f19      	cmp	r7, #25
  4037ae:	d813      	bhi.n	4037d8 <_strtol_l.isra.0+0xbc>
  4037b0:	3c57      	subs	r4, #87	; 0x57
  4037b2:	42a6      	cmp	r6, r4
  4037b4:	dd10      	ble.n	4037d8 <_strtol_l.isra.0+0xbc>
  4037b6:	1c57      	adds	r7, r2, #1
  4037b8:	d00b      	beq.n	4037d2 <_strtol_l.isra.0+0xb6>
  4037ba:	4586      	cmp	lr, r0
  4037bc:	d307      	bcc.n	4037ce <_strtol_l.isra.0+0xb2>
  4037be:	d101      	bne.n	4037c4 <_strtol_l.isra.0+0xa8>
  4037c0:	42a1      	cmp	r1, r4
  4037c2:	db03      	blt.n	4037cc <_strtol_l.isra.0+0xb0>
  4037c4:	fb00 4006 	mla	r0, r0, r6, r4
  4037c8:	2201      	movs	r2, #1
  4037ca:	e002      	b.n	4037d2 <_strtol_l.isra.0+0xb6>
  4037cc:	4670      	mov	r0, lr
  4037ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  4037d2:	f815 4b01 	ldrb.w	r4, [r5], #1
  4037d6:	e7db      	b.n	403790 <_strtol_l.isra.0+0x74>
  4037d8:	1c51      	adds	r1, r2, #1
  4037da:	d10e      	bne.n	4037fa <_strtol_l.isra.0+0xde>
  4037dc:	2b00      	cmp	r3, #0
  4037de:	f04f 0322 	mov.w	r3, #34	; 0x22
  4037e2:	bf14      	ite	ne
  4037e4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4037e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4037ec:	f8c8 3000 	str.w	r3, [r8]
  4037f0:	f1ba 0f00 	cmp.w	sl, #0
  4037f4:	d107      	bne.n	403806 <_strtol_l.isra.0+0xea>
  4037f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4037fa:	b103      	cbz	r3, 4037fe <_strtol_l.isra.0+0xe2>
  4037fc:	4240      	negs	r0, r0
  4037fe:	f1ba 0f00 	cmp.w	sl, #0
  403802:	d011      	beq.n	403828 <_strtol_l.isra.0+0x10c>
  403804:	b10a      	cbz	r2, 40380a <_strtol_l.isra.0+0xee>
  403806:	3d01      	subs	r5, #1
  403808:	e000      	b.n	40380c <_strtol_l.isra.0+0xf0>
  40380a:	464d      	mov	r5, r9
  40380c:	f8ca 5000 	str.w	r5, [sl]
  403810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403814:	2430      	movs	r4, #48	; 0x30
  403816:	2e00      	cmp	r6, #0
  403818:	d1ae      	bne.n	403778 <_strtol_l.isra.0+0x5c>
  40381a:	2608      	movs	r6, #8
  40381c:	e7ac      	b.n	403778 <_strtol_l.isra.0+0x5c>
  40381e:	260a      	movs	r6, #10
  403820:	e7aa      	b.n	403778 <_strtol_l.isra.0+0x5c>
  403822:	2c30      	cmp	r4, #48	; 0x30
  403824:	d0a0      	beq.n	403768 <_strtol_l.isra.0+0x4c>
  403826:	e7a7      	b.n	403778 <_strtol_l.isra.0+0x5c>
  403828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040382c <strtol>:
  40382c:	4b08      	ldr	r3, [pc, #32]	; (403850 <strtol+0x24>)
  40382e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  403830:	681c      	ldr	r4, [r3, #0]
  403832:	4d08      	ldr	r5, [pc, #32]	; (403854 <strtol+0x28>)
  403834:	6a23      	ldr	r3, [r4, #32]
  403836:	2b00      	cmp	r3, #0
  403838:	bf08      	it	eq
  40383a:	462b      	moveq	r3, r5
  40383c:	9300      	str	r3, [sp, #0]
  40383e:	4613      	mov	r3, r2
  403840:	460a      	mov	r2, r1
  403842:	4601      	mov	r1, r0
  403844:	4620      	mov	r0, r4
  403846:	f7ff ff69 	bl	40371c <_strtol_l.isra.0>
  40384a:	b003      	add	sp, #12
  40384c:	bd30      	pop	{r4, r5, pc}
  40384e:	bf00      	nop
  403850:	20000078 	.word	0x20000078
  403854:	2000007c 	.word	0x2000007c

00403858 <__swbuf_r>:
  403858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40385a:	460f      	mov	r7, r1
  40385c:	4614      	mov	r4, r2
  40385e:	4605      	mov	r5, r0
  403860:	b118      	cbz	r0, 40386a <__swbuf_r+0x12>
  403862:	6983      	ldr	r3, [r0, #24]
  403864:	b90b      	cbnz	r3, 40386a <__swbuf_r+0x12>
  403866:	f000 ffd9 	bl	40481c <__sinit>
  40386a:	4b22      	ldr	r3, [pc, #136]	; (4038f4 <__swbuf_r+0x9c>)
  40386c:	429c      	cmp	r4, r3
  40386e:	d101      	bne.n	403874 <__swbuf_r+0x1c>
  403870:	686c      	ldr	r4, [r5, #4]
  403872:	e008      	b.n	403886 <__swbuf_r+0x2e>
  403874:	4b20      	ldr	r3, [pc, #128]	; (4038f8 <__swbuf_r+0xa0>)
  403876:	429c      	cmp	r4, r3
  403878:	d101      	bne.n	40387e <__swbuf_r+0x26>
  40387a:	68ac      	ldr	r4, [r5, #8]
  40387c:	e003      	b.n	403886 <__swbuf_r+0x2e>
  40387e:	4b1f      	ldr	r3, [pc, #124]	; (4038fc <__swbuf_r+0xa4>)
  403880:	429c      	cmp	r4, r3
  403882:	bf08      	it	eq
  403884:	68ec      	ldreq	r4, [r5, #12]
  403886:	69a3      	ldr	r3, [r4, #24]
  403888:	60a3      	str	r3, [r4, #8]
  40388a:	89a3      	ldrh	r3, [r4, #12]
  40388c:	071a      	lsls	r2, r3, #28
  40388e:	d509      	bpl.n	4038a4 <__swbuf_r+0x4c>
  403890:	6923      	ldr	r3, [r4, #16]
  403892:	b13b      	cbz	r3, 4038a4 <__swbuf_r+0x4c>
  403894:	6823      	ldr	r3, [r4, #0]
  403896:	6920      	ldr	r0, [r4, #16]
  403898:	1a18      	subs	r0, r3, r0
  40389a:	6963      	ldr	r3, [r4, #20]
  40389c:	4298      	cmp	r0, r3
  40389e:	b2fe      	uxtb	r6, r7
  4038a0:	db0f      	blt.n	4038c2 <__swbuf_r+0x6a>
  4038a2:	e008      	b.n	4038b6 <__swbuf_r+0x5e>
  4038a4:	4621      	mov	r1, r4
  4038a6:	4628      	mov	r0, r5
  4038a8:	f000 f82a 	bl	403900 <__swsetup_r>
  4038ac:	2800      	cmp	r0, #0
  4038ae:	d0f1      	beq.n	403894 <__swbuf_r+0x3c>
  4038b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  4038b4:	e01b      	b.n	4038ee <__swbuf_r+0x96>
  4038b6:	4621      	mov	r1, r4
  4038b8:	4628      	mov	r0, r5
  4038ba:	f000 ff45 	bl	404748 <_fflush_r>
  4038be:	2800      	cmp	r0, #0
  4038c0:	d1f6      	bne.n	4038b0 <__swbuf_r+0x58>
  4038c2:	68a3      	ldr	r3, [r4, #8]
  4038c4:	3b01      	subs	r3, #1
  4038c6:	60a3      	str	r3, [r4, #8]
  4038c8:	6823      	ldr	r3, [r4, #0]
  4038ca:	1c5a      	adds	r2, r3, #1
  4038cc:	6022      	str	r2, [r4, #0]
  4038ce:	701f      	strb	r7, [r3, #0]
  4038d0:	6963      	ldr	r3, [r4, #20]
  4038d2:	3001      	adds	r0, #1
  4038d4:	4298      	cmp	r0, r3
  4038d6:	d004      	beq.n	4038e2 <__swbuf_r+0x8a>
  4038d8:	89a3      	ldrh	r3, [r4, #12]
  4038da:	07db      	lsls	r3, r3, #31
  4038dc:	d507      	bpl.n	4038ee <__swbuf_r+0x96>
  4038de:	2e0a      	cmp	r6, #10
  4038e0:	d105      	bne.n	4038ee <__swbuf_r+0x96>
  4038e2:	4621      	mov	r1, r4
  4038e4:	4628      	mov	r0, r5
  4038e6:	f000 ff2f 	bl	404748 <_fflush_r>
  4038ea:	2800      	cmp	r0, #0
  4038ec:	d1e0      	bne.n	4038b0 <__swbuf_r+0x58>
  4038ee:	4630      	mov	r0, r6
  4038f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4038f2:	bf00      	nop
  4038f4:	004069f0 	.word	0x004069f0
  4038f8:	00406a10 	.word	0x00406a10
  4038fc:	00406a30 	.word	0x00406a30

00403900 <__swsetup_r>:
  403900:	4b32      	ldr	r3, [pc, #200]	; (4039cc <__swsetup_r+0xcc>)
  403902:	b570      	push	{r4, r5, r6, lr}
  403904:	681d      	ldr	r5, [r3, #0]
  403906:	4606      	mov	r6, r0
  403908:	460c      	mov	r4, r1
  40390a:	b125      	cbz	r5, 403916 <__swsetup_r+0x16>
  40390c:	69ab      	ldr	r3, [r5, #24]
  40390e:	b913      	cbnz	r3, 403916 <__swsetup_r+0x16>
  403910:	4628      	mov	r0, r5
  403912:	f000 ff83 	bl	40481c <__sinit>
  403916:	4b2e      	ldr	r3, [pc, #184]	; (4039d0 <__swsetup_r+0xd0>)
  403918:	429c      	cmp	r4, r3
  40391a:	d101      	bne.n	403920 <__swsetup_r+0x20>
  40391c:	686c      	ldr	r4, [r5, #4]
  40391e:	e008      	b.n	403932 <__swsetup_r+0x32>
  403920:	4b2c      	ldr	r3, [pc, #176]	; (4039d4 <__swsetup_r+0xd4>)
  403922:	429c      	cmp	r4, r3
  403924:	d101      	bne.n	40392a <__swsetup_r+0x2a>
  403926:	68ac      	ldr	r4, [r5, #8]
  403928:	e003      	b.n	403932 <__swsetup_r+0x32>
  40392a:	4b2b      	ldr	r3, [pc, #172]	; (4039d8 <__swsetup_r+0xd8>)
  40392c:	429c      	cmp	r4, r3
  40392e:	bf08      	it	eq
  403930:	68ec      	ldreq	r4, [r5, #12]
  403932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403936:	b29a      	uxth	r2, r3
  403938:	0715      	lsls	r5, r2, #28
  40393a:	d41d      	bmi.n	403978 <__swsetup_r+0x78>
  40393c:	06d0      	lsls	r0, r2, #27
  40393e:	d402      	bmi.n	403946 <__swsetup_r+0x46>
  403940:	2209      	movs	r2, #9
  403942:	6032      	str	r2, [r6, #0]
  403944:	e03a      	b.n	4039bc <__swsetup_r+0xbc>
  403946:	0751      	lsls	r1, r2, #29
  403948:	d512      	bpl.n	403970 <__swsetup_r+0x70>
  40394a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40394c:	b141      	cbz	r1, 403960 <__swsetup_r+0x60>
  40394e:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403952:	4299      	cmp	r1, r3
  403954:	d002      	beq.n	40395c <__swsetup_r+0x5c>
  403956:	4630      	mov	r0, r6
  403958:	f001 fbae 	bl	4050b8 <_free_r>
  40395c:	2300      	movs	r3, #0
  40395e:	6363      	str	r3, [r4, #52]	; 0x34
  403960:	89a3      	ldrh	r3, [r4, #12]
  403962:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  403966:	81a3      	strh	r3, [r4, #12]
  403968:	2300      	movs	r3, #0
  40396a:	6063      	str	r3, [r4, #4]
  40396c:	6923      	ldr	r3, [r4, #16]
  40396e:	6023      	str	r3, [r4, #0]
  403970:	89a3      	ldrh	r3, [r4, #12]
  403972:	f043 0308 	orr.w	r3, r3, #8
  403976:	81a3      	strh	r3, [r4, #12]
  403978:	6923      	ldr	r3, [r4, #16]
  40397a:	b94b      	cbnz	r3, 403990 <__swsetup_r+0x90>
  40397c:	89a3      	ldrh	r3, [r4, #12]
  40397e:	f403 7320 	and.w	r3, r3, #640	; 0x280
  403982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403986:	d003      	beq.n	403990 <__swsetup_r+0x90>
  403988:	4621      	mov	r1, r4
  40398a:	4630      	mov	r0, r6
  40398c:	f001 f806 	bl	40499c <__smakebuf_r>
  403990:	89a2      	ldrh	r2, [r4, #12]
  403992:	f012 0301 	ands.w	r3, r2, #1
  403996:	d005      	beq.n	4039a4 <__swsetup_r+0xa4>
  403998:	2300      	movs	r3, #0
  40399a:	60a3      	str	r3, [r4, #8]
  40399c:	6963      	ldr	r3, [r4, #20]
  40399e:	425b      	negs	r3, r3
  4039a0:	61a3      	str	r3, [r4, #24]
  4039a2:	e003      	b.n	4039ac <__swsetup_r+0xac>
  4039a4:	0792      	lsls	r2, r2, #30
  4039a6:	bf58      	it	pl
  4039a8:	6963      	ldrpl	r3, [r4, #20]
  4039aa:	60a3      	str	r3, [r4, #8]
  4039ac:	6923      	ldr	r3, [r4, #16]
  4039ae:	b95b      	cbnz	r3, 4039c8 <__swsetup_r+0xc8>
  4039b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4039b4:	f003 0080 	and.w	r0, r3, #128	; 0x80
  4039b8:	b280      	uxth	r0, r0
  4039ba:	b130      	cbz	r0, 4039ca <__swsetup_r+0xca>
  4039bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4039c0:	81a3      	strh	r3, [r4, #12]
  4039c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4039c6:	bd70      	pop	{r4, r5, r6, pc}
  4039c8:	2000      	movs	r0, #0
  4039ca:	bd70      	pop	{r4, r5, r6, pc}
  4039cc:	20000078 	.word	0x20000078
  4039d0:	004069f0 	.word	0x004069f0
  4039d4:	00406a10 	.word	0x00406a10
  4039d8:	00406a30 	.word	0x00406a30

004039dc <quorem>:
  4039dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4039e0:	6903      	ldr	r3, [r0, #16]
  4039e2:	690c      	ldr	r4, [r1, #16]
  4039e4:	429c      	cmp	r4, r3
  4039e6:	4680      	mov	r8, r0
  4039e8:	f300 8083 	bgt.w	403af2 <quorem+0x116>
  4039ec:	3c01      	subs	r4, #1
  4039ee:	f101 0714 	add.w	r7, r1, #20
  4039f2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  4039f6:	f100 0614 	add.w	r6, r0, #20
  4039fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  4039fe:	eb06 030e 	add.w	r3, r6, lr
  403a02:	9301      	str	r3, [sp, #4]
  403a04:	3501      	adds	r5, #1
  403a06:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  403a0a:	fbb3 f5f5 	udiv	r5, r3, r5
  403a0e:	eb07 090e 	add.w	r9, r7, lr
  403a12:	2d00      	cmp	r5, #0
  403a14:	d039      	beq.n	403a8a <quorem+0xae>
  403a16:	f04f 0a00 	mov.w	sl, #0
  403a1a:	4638      	mov	r0, r7
  403a1c:	46b4      	mov	ip, r6
  403a1e:	46d3      	mov	fp, sl
  403a20:	f850 2b04 	ldr.w	r2, [r0], #4
  403a24:	b293      	uxth	r3, r2
  403a26:	fb05 a303 	mla	r3, r5, r3, sl
  403a2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  403a2e:	b29b      	uxth	r3, r3
  403a30:	ebc3 030b 	rsb	r3, r3, fp
  403a34:	0c12      	lsrs	r2, r2, #16
  403a36:	f8bc b000 	ldrh.w	fp, [ip]
  403a3a:	fb05 a202 	mla	r2, r5, r2, sl
  403a3e:	fa13 f38b 	uxtah	r3, r3, fp
  403a42:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  403a46:	fa1f fb82 	uxth.w	fp, r2
  403a4a:	f8dc 2000 	ldr.w	r2, [ip]
  403a4e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  403a52:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403a56:	b29b      	uxth	r3, r3
  403a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403a5c:	4581      	cmp	r9, r0
  403a5e:	ea4f 4b22 	mov.w	fp, r2, asr #16
  403a62:	f84c 3b04 	str.w	r3, [ip], #4
  403a66:	d2db      	bcs.n	403a20 <quorem+0x44>
  403a68:	f856 300e 	ldr.w	r3, [r6, lr]
  403a6c:	b96b      	cbnz	r3, 403a8a <quorem+0xae>
  403a6e:	9b01      	ldr	r3, [sp, #4]
  403a70:	3b04      	subs	r3, #4
  403a72:	429e      	cmp	r6, r3
  403a74:	461a      	mov	r2, r3
  403a76:	d302      	bcc.n	403a7e <quorem+0xa2>
  403a78:	f8c8 4010 	str.w	r4, [r8, #16]
  403a7c:	e005      	b.n	403a8a <quorem+0xae>
  403a7e:	6812      	ldr	r2, [r2, #0]
  403a80:	3b04      	subs	r3, #4
  403a82:	2a00      	cmp	r2, #0
  403a84:	d1f8      	bne.n	403a78 <quorem+0x9c>
  403a86:	3c01      	subs	r4, #1
  403a88:	e7f3      	b.n	403a72 <quorem+0x96>
  403a8a:	4640      	mov	r0, r8
  403a8c:	f001 fa3d 	bl	404f0a <__mcmp>
  403a90:	2800      	cmp	r0, #0
  403a92:	db2c      	blt.n	403aee <quorem+0x112>
  403a94:	3501      	adds	r5, #1
  403a96:	4630      	mov	r0, r6
  403a98:	f04f 0e00 	mov.w	lr, #0
  403a9c:	f857 1b04 	ldr.w	r1, [r7], #4
  403aa0:	f8d0 c000 	ldr.w	ip, [r0]
  403aa4:	b28a      	uxth	r2, r1
  403aa6:	ebc2 030e 	rsb	r3, r2, lr
  403aaa:	0c09      	lsrs	r1, r1, #16
  403aac:	fa13 f38c 	uxtah	r3, r3, ip
  403ab0:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  403ab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403ab8:	b29b      	uxth	r3, r3
  403aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  403abe:	45b9      	cmp	r9, r7
  403ac0:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403ac4:	f840 3b04 	str.w	r3, [r0], #4
  403ac8:	d2e8      	bcs.n	403a9c <quorem+0xc0>
  403aca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403ace:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403ad2:	b962      	cbnz	r2, 403aee <quorem+0x112>
  403ad4:	3b04      	subs	r3, #4
  403ad6:	429e      	cmp	r6, r3
  403ad8:	461a      	mov	r2, r3
  403ada:	d302      	bcc.n	403ae2 <quorem+0x106>
  403adc:	f8c8 4010 	str.w	r4, [r8, #16]
  403ae0:	e005      	b.n	403aee <quorem+0x112>
  403ae2:	6812      	ldr	r2, [r2, #0]
  403ae4:	3b04      	subs	r3, #4
  403ae6:	2a00      	cmp	r2, #0
  403ae8:	d1f8      	bne.n	403adc <quorem+0x100>
  403aea:	3c01      	subs	r4, #1
  403aec:	e7f3      	b.n	403ad6 <quorem+0xfa>
  403aee:	4628      	mov	r0, r5
  403af0:	e000      	b.n	403af4 <quorem+0x118>
  403af2:	2000      	movs	r0, #0
  403af4:	b003      	add	sp, #12
  403af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403afa:	0000      	movs	r0, r0
  403afc:	0000      	movs	r0, r0
	...

00403b00 <_dtoa_r>:
  403b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b04:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403b06:	b095      	sub	sp, #84	; 0x54
  403b08:	4682      	mov	sl, r0
  403b0a:	9c21      	ldr	r4, [sp, #132]	; 0x84
  403b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403b10:	b945      	cbnz	r5, 403b24 <_dtoa_r+0x24>
  403b12:	2010      	movs	r0, #16
  403b14:	f000 ff7e 	bl	404a14 <malloc>
  403b18:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  403b1c:	6045      	str	r5, [r0, #4]
  403b1e:	6085      	str	r5, [r0, #8]
  403b20:	6005      	str	r5, [r0, #0]
  403b22:	60c5      	str	r5, [r0, #12]
  403b24:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403b28:	6819      	ldr	r1, [r3, #0]
  403b2a:	b159      	cbz	r1, 403b44 <_dtoa_r+0x44>
  403b2c:	685a      	ldr	r2, [r3, #4]
  403b2e:	604a      	str	r2, [r1, #4]
  403b30:	2301      	movs	r3, #1
  403b32:	4093      	lsls	r3, r2
  403b34:	608b      	str	r3, [r1, #8]
  403b36:	4650      	mov	r0, sl
  403b38:	f001 f80f 	bl	404b5a <_Bfree>
  403b3c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403b40:	2200      	movs	r2, #0
  403b42:	601a      	str	r2, [r3, #0]
  403b44:	9b03      	ldr	r3, [sp, #12]
  403b46:	4aa0      	ldr	r2, [pc, #640]	; (403dc8 <_dtoa_r+0x2c8>)
  403b48:	2b00      	cmp	r3, #0
  403b4a:	bfbf      	itttt	lt
  403b4c:	2301      	movlt	r3, #1
  403b4e:	6023      	strlt	r3, [r4, #0]
  403b50:	9b03      	ldrlt	r3, [sp, #12]
  403b52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  403b56:	bfb8      	it	lt
  403b58:	9303      	strlt	r3, [sp, #12]
  403b5a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  403b5e:	bfa4      	itt	ge
  403b60:	2300      	movge	r3, #0
  403b62:	6023      	strge	r3, [r4, #0]
  403b64:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  403b68:	0d1b      	lsrs	r3, r3, #20
  403b6a:	051b      	lsls	r3, r3, #20
  403b6c:	4293      	cmp	r3, r2
  403b6e:	d11d      	bne.n	403bac <_dtoa_r+0xac>
  403b70:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403b72:	f242 730f 	movw	r3, #9999	; 0x270f
  403b76:	6013      	str	r3, [r2, #0]
  403b78:	9b02      	ldr	r3, [sp, #8]
  403b7a:	b943      	cbnz	r3, 403b8e <_dtoa_r+0x8e>
  403b7c:	4a93      	ldr	r2, [pc, #588]	; (403dcc <_dtoa_r+0x2cc>)
  403b7e:	4b94      	ldr	r3, [pc, #592]	; (403dd0 <_dtoa_r+0x2d0>)
  403b80:	f3c8 0013 	ubfx	r0, r8, #0, #20
  403b84:	2800      	cmp	r0, #0
  403b86:	bf14      	ite	ne
  403b88:	4618      	movne	r0, r3
  403b8a:	4610      	moveq	r0, r2
  403b8c:	e000      	b.n	403b90 <_dtoa_r+0x90>
  403b8e:	4890      	ldr	r0, [pc, #576]	; (403dd0 <_dtoa_r+0x2d0>)
  403b90:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403b92:	2b00      	cmp	r3, #0
  403b94:	f000 854a 	beq.w	40462c <_dtoa_r+0xb2c>
  403b98:	78c3      	ldrb	r3, [r0, #3]
  403b9a:	b113      	cbz	r3, 403ba2 <_dtoa_r+0xa2>
  403b9c:	f100 0308 	add.w	r3, r0, #8
  403ba0:	e000      	b.n	403ba4 <_dtoa_r+0xa4>
  403ba2:	1cc3      	adds	r3, r0, #3
  403ba4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403ba6:	6013      	str	r3, [r2, #0]
  403ba8:	f000 bd40 	b.w	40462c <_dtoa_r+0xb2c>
  403bac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  403bb0:	2200      	movs	r2, #0
  403bb2:	2300      	movs	r3, #0
  403bb4:	4620      	mov	r0, r4
  403bb6:	4629      	mov	r1, r5
  403bb8:	f002 f958 	bl	405e6c <__aeabi_dcmpeq>
  403bbc:	4607      	mov	r7, r0
  403bbe:	b158      	cbz	r0, 403bd8 <_dtoa_r+0xd8>
  403bc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403bc2:	2301      	movs	r3, #1
  403bc4:	6013      	str	r3, [r2, #0]
  403bc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403bc8:	2b00      	cmp	r3, #0
  403bca:	f000 8522 	beq.w	404612 <_dtoa_r+0xb12>
  403bce:	4881      	ldr	r0, [pc, #516]	; (403dd4 <_dtoa_r+0x2d4>)
  403bd0:	6018      	str	r0, [r3, #0]
  403bd2:	3801      	subs	r0, #1
  403bd4:	f000 bd2a 	b.w	40462c <_dtoa_r+0xb2c>
  403bd8:	ab12      	add	r3, sp, #72	; 0x48
  403bda:	9301      	str	r3, [sp, #4]
  403bdc:	ab13      	add	r3, sp, #76	; 0x4c
  403bde:	9300      	str	r3, [sp, #0]
  403be0:	4622      	mov	r2, r4
  403be2:	462b      	mov	r3, r5
  403be4:	4650      	mov	r0, sl
  403be6:	f001 fa0b 	bl	405000 <__d2b>
  403bea:	f3c8 560a 	ubfx	r6, r8, #20, #11
  403bee:	9004      	str	r0, [sp, #16]
  403bf0:	b156      	cbz	r6, 403c08 <_dtoa_r+0x108>
  403bf2:	f3c5 0313 	ubfx	r3, r5, #0, #20
  403bf6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  403bfa:	4620      	mov	r0, r4
  403bfc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403c00:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  403c04:	9711      	str	r7, [sp, #68]	; 0x44
  403c06:	e01d      	b.n	403c44 <_dtoa_r+0x144>
  403c08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403c0a:	9e12      	ldr	r6, [sp, #72]	; 0x48
  403c0c:	441e      	add	r6, r3
  403c0e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403c12:	2b20      	cmp	r3, #32
  403c14:	dd0a      	ble.n	403c2c <_dtoa_r+0x12c>
  403c16:	9a02      	ldr	r2, [sp, #8]
  403c18:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403c1c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403c20:	fa22 f000 	lsr.w	r0, r2, r0
  403c24:	fa08 f303 	lsl.w	r3, r8, r3
  403c28:	4318      	orrs	r0, r3
  403c2a:	e004      	b.n	403c36 <_dtoa_r+0x136>
  403c2c:	f1c3 0020 	rsb	r0, r3, #32
  403c30:	9b02      	ldr	r3, [sp, #8]
  403c32:	fa03 f000 	lsl.w	r0, r3, r0
  403c36:	f001 fe3b 	bl	4058b0 <__aeabi_ui2d>
  403c3a:	2301      	movs	r3, #1
  403c3c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403c40:	3e01      	subs	r6, #1
  403c42:	9311      	str	r3, [sp, #68]	; 0x44
  403c44:	2200      	movs	r2, #0
  403c46:	4b64      	ldr	r3, [pc, #400]	; (403dd8 <_dtoa_r+0x2d8>)
  403c48:	f001 fcf4 	bl	405634 <__aeabi_dsub>
  403c4c:	a358      	add	r3, pc, #352	; (adr r3, 403db0 <_dtoa_r+0x2b0>)
  403c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c52:	f001 fea3 	bl	40599c <__aeabi_dmul>
  403c56:	a358      	add	r3, pc, #352	; (adr r3, 403db8 <_dtoa_r+0x2b8>)
  403c58:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c5c:	f001 fcec 	bl	405638 <__adddf3>
  403c60:	4604      	mov	r4, r0
  403c62:	4630      	mov	r0, r6
  403c64:	460d      	mov	r5, r1
  403c66:	f001 fe33 	bl	4058d0 <__aeabi_i2d>
  403c6a:	a355      	add	r3, pc, #340	; (adr r3, 403dc0 <_dtoa_r+0x2c0>)
  403c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c70:	f001 fe94 	bl	40599c <__aeabi_dmul>
  403c74:	4602      	mov	r2, r0
  403c76:	460b      	mov	r3, r1
  403c78:	4620      	mov	r0, r4
  403c7a:	4629      	mov	r1, r5
  403c7c:	f001 fcdc 	bl	405638 <__adddf3>
  403c80:	4604      	mov	r4, r0
  403c82:	460d      	mov	r5, r1
  403c84:	f002 f93a 	bl	405efc <__aeabi_d2iz>
  403c88:	2200      	movs	r2, #0
  403c8a:	4683      	mov	fp, r0
  403c8c:	2300      	movs	r3, #0
  403c8e:	4620      	mov	r0, r4
  403c90:	4629      	mov	r1, r5
  403c92:	f002 f8f5 	bl	405e80 <__aeabi_dcmplt>
  403c96:	b158      	cbz	r0, 403cb0 <_dtoa_r+0x1b0>
  403c98:	4658      	mov	r0, fp
  403c9a:	f001 fe19 	bl	4058d0 <__aeabi_i2d>
  403c9e:	4602      	mov	r2, r0
  403ca0:	460b      	mov	r3, r1
  403ca2:	4620      	mov	r0, r4
  403ca4:	4629      	mov	r1, r5
  403ca6:	f002 f8e1 	bl	405e6c <__aeabi_dcmpeq>
  403caa:	b908      	cbnz	r0, 403cb0 <_dtoa_r+0x1b0>
  403cac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403cb0:	f1bb 0f16 	cmp.w	fp, #22
  403cb4:	d80d      	bhi.n	403cd2 <_dtoa_r+0x1d2>
  403cb6:	4949      	ldr	r1, [pc, #292]	; (403ddc <_dtoa_r+0x2dc>)
  403cb8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  403cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
  403cc4:	f002 f8fa 	bl	405ebc <__aeabi_dcmpgt>
  403cc8:	b130      	cbz	r0, 403cd8 <_dtoa_r+0x1d8>
  403cca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403cce:	2300      	movs	r3, #0
  403cd0:	e000      	b.n	403cd4 <_dtoa_r+0x1d4>
  403cd2:	2301      	movs	r3, #1
  403cd4:	9310      	str	r3, [sp, #64]	; 0x40
  403cd6:	e000      	b.n	403cda <_dtoa_r+0x1da>
  403cd8:	9010      	str	r0, [sp, #64]	; 0x40
  403cda:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403cdc:	1b9e      	subs	r6, r3, r6
  403cde:	1e73      	subs	r3, r6, #1
  403ce0:	9307      	str	r3, [sp, #28]
  403ce2:	bf43      	ittte	mi
  403ce4:	f1c3 0800 	rsbmi	r8, r3, #0
  403ce8:	2300      	movmi	r3, #0
  403cea:	9307      	strmi	r3, [sp, #28]
  403cec:	f04f 0800 	movpl.w	r8, #0
  403cf0:	f1bb 0f00 	cmp.w	fp, #0
  403cf4:	db06      	blt.n	403d04 <_dtoa_r+0x204>
  403cf6:	9b07      	ldr	r3, [sp, #28]
  403cf8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  403cfc:	445b      	add	r3, fp
  403cfe:	9307      	str	r3, [sp, #28]
  403d00:	2700      	movs	r7, #0
  403d02:	e005      	b.n	403d10 <_dtoa_r+0x210>
  403d04:	2300      	movs	r3, #0
  403d06:	ebcb 0808 	rsb	r8, fp, r8
  403d0a:	f1cb 0700 	rsb	r7, fp, #0
  403d0e:	930b      	str	r3, [sp, #44]	; 0x2c
  403d10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403d12:	2b09      	cmp	r3, #9
  403d14:	d827      	bhi.n	403d66 <_dtoa_r+0x266>
  403d16:	2b05      	cmp	r3, #5
  403d18:	bfc4      	itt	gt
  403d1a:	3b04      	subgt	r3, #4
  403d1c:	931e      	strgt	r3, [sp, #120]	; 0x78
  403d1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403d20:	f1a3 0302 	sub.w	r3, r3, #2
  403d24:	bfcc      	ite	gt
  403d26:	2500      	movgt	r5, #0
  403d28:	2501      	movle	r5, #1
  403d2a:	2b03      	cmp	r3, #3
  403d2c:	d820      	bhi.n	403d70 <_dtoa_r+0x270>
  403d2e:	e8df f003 	tbb	[pc, r3]
  403d32:	0e06      	.short	0x0e06
  403d34:	0402      	.short	0x0402
  403d36:	2301      	movs	r3, #1
  403d38:	e002      	b.n	403d40 <_dtoa_r+0x240>
  403d3a:	2301      	movs	r3, #1
  403d3c:	e008      	b.n	403d50 <_dtoa_r+0x250>
  403d3e:	2300      	movs	r3, #0
  403d40:	930a      	str	r3, [sp, #40]	; 0x28
  403d42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403d44:	2b00      	cmp	r3, #0
  403d46:	dd1d      	ble.n	403d84 <_dtoa_r+0x284>
  403d48:	4699      	mov	r9, r3
  403d4a:	9305      	str	r3, [sp, #20]
  403d4c:	e021      	b.n	403d92 <_dtoa_r+0x292>
  403d4e:	2300      	movs	r3, #0
  403d50:	930a      	str	r3, [sp, #40]	; 0x28
  403d52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403d54:	eb0b 0903 	add.w	r9, fp, r3
  403d58:	f109 0301 	add.w	r3, r9, #1
  403d5c:	2b01      	cmp	r3, #1
  403d5e:	9305      	str	r3, [sp, #20]
  403d60:	bfb8      	it	lt
  403d62:	2301      	movlt	r3, #1
  403d64:	e015      	b.n	403d92 <_dtoa_r+0x292>
  403d66:	2501      	movs	r5, #1
  403d68:	2300      	movs	r3, #0
  403d6a:	931e      	str	r3, [sp, #120]	; 0x78
  403d6c:	950a      	str	r5, [sp, #40]	; 0x28
  403d6e:	e001      	b.n	403d74 <_dtoa_r+0x274>
  403d70:	2301      	movs	r3, #1
  403d72:	930a      	str	r3, [sp, #40]	; 0x28
  403d74:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  403d78:	2200      	movs	r2, #0
  403d7a:	f8cd 9014 	str.w	r9, [sp, #20]
  403d7e:	2312      	movs	r3, #18
  403d80:	921f      	str	r2, [sp, #124]	; 0x7c
  403d82:	e006      	b.n	403d92 <_dtoa_r+0x292>
  403d84:	f04f 0901 	mov.w	r9, #1
  403d88:	f8cd 9014 	str.w	r9, [sp, #20]
  403d8c:	464b      	mov	r3, r9
  403d8e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  403d92:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  403d96:	2200      	movs	r2, #0
  403d98:	6062      	str	r2, [r4, #4]
  403d9a:	2104      	movs	r1, #4
  403d9c:	f101 0214 	add.w	r2, r1, #20
  403da0:	429a      	cmp	r2, r3
  403da2:	d81d      	bhi.n	403de0 <_dtoa_r+0x2e0>
  403da4:	6862      	ldr	r2, [r4, #4]
  403da6:	3201      	adds	r2, #1
  403da8:	6062      	str	r2, [r4, #4]
  403daa:	0049      	lsls	r1, r1, #1
  403dac:	e7f6      	b.n	403d9c <_dtoa_r+0x29c>
  403dae:	bf00      	nop
  403db0:	636f4361 	.word	0x636f4361
  403db4:	3fd287a7 	.word	0x3fd287a7
  403db8:	8b60c8b3 	.word	0x8b60c8b3
  403dbc:	3fc68a28 	.word	0x3fc68a28
  403dc0:	509f79fb 	.word	0x509f79fb
  403dc4:	3fd34413 	.word	0x3fd34413
  403dc8:	7ff00000 	.word	0x7ff00000
  403dcc:	004069e0 	.word	0x004069e0
  403dd0:	004069e9 	.word	0x004069e9
  403dd4:	004069bd 	.word	0x004069bd
  403dd8:	3ff80000 	.word	0x3ff80000
  403ddc:	00406a60 	.word	0x00406a60
  403de0:	6861      	ldr	r1, [r4, #4]
  403de2:	4650      	mov	r0, sl
  403de4:	f000 fe84 	bl	404af0 <_Balloc>
  403de8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403dec:	6020      	str	r0, [r4, #0]
  403dee:	681b      	ldr	r3, [r3, #0]
  403df0:	9306      	str	r3, [sp, #24]
  403df2:	9b05      	ldr	r3, [sp, #20]
  403df4:	2b0e      	cmp	r3, #14
  403df6:	f200 815d 	bhi.w	4040b4 <_dtoa_r+0x5b4>
  403dfa:	2d00      	cmp	r5, #0
  403dfc:	f000 815a 	beq.w	4040b4 <_dtoa_r+0x5b4>
  403e00:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  403e04:	f1bb 0f00 	cmp.w	fp, #0
  403e08:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  403e0c:	dd31      	ble.n	403e72 <_dtoa_r+0x372>
  403e0e:	4aa0      	ldr	r2, [pc, #640]	; (404090 <_dtoa_r+0x590>)
  403e10:	f00b 030f 	and.w	r3, fp, #15
  403e14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403e18:	e9d3 3400 	ldrd	r3, r4, [r3]
  403e1c:	ea4f 152b 	mov.w	r5, fp, asr #4
  403e20:	06e8      	lsls	r0, r5, #27
  403e22:	e9cd 3408 	strd	r3, r4, [sp, #32]
  403e26:	d50c      	bpl.n	403e42 <_dtoa_r+0x342>
  403e28:	4b9a      	ldr	r3, [pc, #616]	; (404094 <_dtoa_r+0x594>)
  403e2a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403e2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403e32:	f001 fedd 	bl	405bf0 <__aeabi_ddiv>
  403e36:	f005 050f 	and.w	r5, r5, #15
  403e3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403e3e:	2403      	movs	r4, #3
  403e40:	e000      	b.n	403e44 <_dtoa_r+0x344>
  403e42:	2402      	movs	r4, #2
  403e44:	4e93      	ldr	r6, [pc, #588]	; (404094 <_dtoa_r+0x594>)
  403e46:	b16d      	cbz	r5, 403e64 <_dtoa_r+0x364>
  403e48:	07e9      	lsls	r1, r5, #31
  403e4a:	d508      	bpl.n	403e5e <_dtoa_r+0x35e>
  403e4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403e50:	e9d6 2300 	ldrd	r2, r3, [r6]
  403e54:	f001 fda2 	bl	40599c <__aeabi_dmul>
  403e58:	e9cd 0108 	strd	r0, r1, [sp, #32]
  403e5c:	3401      	adds	r4, #1
  403e5e:	106d      	asrs	r5, r5, #1
  403e60:	3608      	adds	r6, #8
  403e62:	e7f0      	b.n	403e46 <_dtoa_r+0x346>
  403e64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  403e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403e6c:	f001 fec0 	bl	405bf0 <__aeabi_ddiv>
  403e70:	e020      	b.n	403eb4 <_dtoa_r+0x3b4>
  403e72:	f1cb 0500 	rsb	r5, fp, #0
  403e76:	b305      	cbz	r5, 403eba <_dtoa_r+0x3ba>
  403e78:	4b85      	ldr	r3, [pc, #532]	; (404090 <_dtoa_r+0x590>)
  403e7a:	4e86      	ldr	r6, [pc, #536]	; (404094 <_dtoa_r+0x594>)
  403e7c:	f005 020f 	and.w	r2, r5, #15
  403e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403e84:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  403e8c:	f001 fd86 	bl	40599c <__aeabi_dmul>
  403e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403e94:	112d      	asrs	r5, r5, #4
  403e96:	2300      	movs	r3, #0
  403e98:	2402      	movs	r4, #2
  403e9a:	b155      	cbz	r5, 403eb2 <_dtoa_r+0x3b2>
  403e9c:	07ea      	lsls	r2, r5, #31
  403e9e:	d505      	bpl.n	403eac <_dtoa_r+0x3ac>
  403ea0:	e9d6 2300 	ldrd	r2, r3, [r6]
  403ea4:	f001 fd7a 	bl	40599c <__aeabi_dmul>
  403ea8:	3401      	adds	r4, #1
  403eaa:	2301      	movs	r3, #1
  403eac:	106d      	asrs	r5, r5, #1
  403eae:	3608      	adds	r6, #8
  403eb0:	e7f3      	b.n	403e9a <_dtoa_r+0x39a>
  403eb2:	b11b      	cbz	r3, 403ebc <_dtoa_r+0x3bc>
  403eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403eb8:	e000      	b.n	403ebc <_dtoa_r+0x3bc>
  403eba:	2402      	movs	r4, #2
  403ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403ebe:	b1e3      	cbz	r3, 403efa <_dtoa_r+0x3fa>
  403ec0:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  403ec4:	2200      	movs	r2, #0
  403ec6:	4b74      	ldr	r3, [pc, #464]	; (404098 <_dtoa_r+0x598>)
  403ec8:	4628      	mov	r0, r5
  403eca:	4631      	mov	r1, r6
  403ecc:	f001 ffd8 	bl	405e80 <__aeabi_dcmplt>
  403ed0:	b198      	cbz	r0, 403efa <_dtoa_r+0x3fa>
  403ed2:	9b05      	ldr	r3, [sp, #20]
  403ed4:	b18b      	cbz	r3, 403efa <_dtoa_r+0x3fa>
  403ed6:	f1b9 0f00 	cmp.w	r9, #0
  403eda:	f340 80e7 	ble.w	4040ac <_dtoa_r+0x5ac>
  403ede:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  403ee2:	9308      	str	r3, [sp, #32]
  403ee4:	4631      	mov	r1, r6
  403ee6:	2200      	movs	r2, #0
  403ee8:	4b6c      	ldr	r3, [pc, #432]	; (40409c <_dtoa_r+0x59c>)
  403eea:	4628      	mov	r0, r5
  403eec:	f001 fd56 	bl	40599c <__aeabi_dmul>
  403ef0:	3401      	adds	r4, #1
  403ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ef6:	464e      	mov	r6, r9
  403ef8:	e002      	b.n	403f00 <_dtoa_r+0x400>
  403efa:	9e05      	ldr	r6, [sp, #20]
  403efc:	f8cd b020 	str.w	fp, [sp, #32]
  403f00:	4620      	mov	r0, r4
  403f02:	f001 fce5 	bl	4058d0 <__aeabi_i2d>
  403f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403f0a:	f001 fd47 	bl	40599c <__aeabi_dmul>
  403f0e:	4b64      	ldr	r3, [pc, #400]	; (4040a0 <_dtoa_r+0x5a0>)
  403f10:	2200      	movs	r2, #0
  403f12:	f001 fb91 	bl	405638 <__adddf3>
  403f16:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  403f1a:	4604      	mov	r4, r0
  403f1c:	930c      	str	r3, [sp, #48]	; 0x30
  403f1e:	461d      	mov	r5, r3
  403f20:	b9d6      	cbnz	r6, 403f58 <_dtoa_r+0x458>
  403f22:	2200      	movs	r2, #0
  403f24:	4b5f      	ldr	r3, [pc, #380]	; (4040a4 <_dtoa_r+0x5a4>)
  403f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403f2a:	f001 fb83 	bl	405634 <__aeabi_dsub>
  403f2e:	4622      	mov	r2, r4
  403f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403f36:	f001 ffc1 	bl	405ebc <__aeabi_dcmpgt>
  403f3a:	2800      	cmp	r0, #0
  403f3c:	f040 8240 	bne.w	4043c0 <_dtoa_r+0x8c0>
  403f40:	990c      	ldr	r1, [sp, #48]	; 0x30
  403f42:	4622      	mov	r2, r4
  403f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  403f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403f4c:	f001 ff98 	bl	405e80 <__aeabi_dcmplt>
  403f50:	2800      	cmp	r0, #0
  403f52:	f040 822c 	bne.w	4043ae <_dtoa_r+0x8ae>
  403f56:	e0a9      	b.n	4040ac <_dtoa_r+0x5ac>
  403f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403f5a:	4b4d      	ldr	r3, [pc, #308]	; (404090 <_dtoa_r+0x590>)
  403f5c:	1e71      	subs	r1, r6, #1
  403f5e:	2a00      	cmp	r2, #0
  403f60:	d049      	beq.n	403ff6 <_dtoa_r+0x4f6>
  403f62:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403f66:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f6a:	2000      	movs	r0, #0
  403f6c:	494e      	ldr	r1, [pc, #312]	; (4040a8 <_dtoa_r+0x5a8>)
  403f6e:	f001 fe3f 	bl	405bf0 <__aeabi_ddiv>
  403f72:	4622      	mov	r2, r4
  403f74:	462b      	mov	r3, r5
  403f76:	f001 fb5d 	bl	405634 <__aeabi_dsub>
  403f7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403f7e:	9c06      	ldr	r4, [sp, #24]
  403f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403f84:	f001 ffba 	bl	405efc <__aeabi_d2iz>
  403f88:	4605      	mov	r5, r0
  403f8a:	f001 fca1 	bl	4058d0 <__aeabi_i2d>
  403f8e:	4602      	mov	r2, r0
  403f90:	460b      	mov	r3, r1
  403f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403f96:	f001 fb4d 	bl	405634 <__aeabi_dsub>
  403f9a:	3530      	adds	r5, #48	; 0x30
  403f9c:	f804 5b01 	strb.w	r5, [r4], #1
  403fa0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403fa8:	f001 ff6a 	bl	405e80 <__aeabi_dcmplt>
  403fac:	2800      	cmp	r0, #0
  403fae:	f040 8320 	bne.w	4045f2 <_dtoa_r+0xaf2>
  403fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403fb6:	2000      	movs	r0, #0
  403fb8:	4937      	ldr	r1, [pc, #220]	; (404098 <_dtoa_r+0x598>)
  403fba:	f001 fb3b 	bl	405634 <__aeabi_dsub>
  403fbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403fc2:	f001 ff5d 	bl	405e80 <__aeabi_dcmplt>
  403fc6:	2800      	cmp	r0, #0
  403fc8:	f040 80d2 	bne.w	404170 <_dtoa_r+0x670>
  403fcc:	9b06      	ldr	r3, [sp, #24]
  403fce:	1ae3      	subs	r3, r4, r3
  403fd0:	42b3      	cmp	r3, r6
  403fd2:	da6b      	bge.n	4040ac <_dtoa_r+0x5ac>
  403fd4:	2200      	movs	r2, #0
  403fd6:	4b31      	ldr	r3, [pc, #196]	; (40409c <_dtoa_r+0x59c>)
  403fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403fdc:	f001 fcde 	bl	40599c <__aeabi_dmul>
  403fe0:	2200      	movs	r2, #0
  403fe2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403fe6:	4b2d      	ldr	r3, [pc, #180]	; (40409c <_dtoa_r+0x59c>)
  403fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403fec:	f001 fcd6 	bl	40599c <__aeabi_dmul>
  403ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ff4:	e7c4      	b.n	403f80 <_dtoa_r+0x480>
  403ff6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403ffa:	4622      	mov	r2, r4
  403ffc:	462b      	mov	r3, r5
  403ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
  404002:	f001 fccb 	bl	40599c <__aeabi_dmul>
  404006:	9b06      	ldr	r3, [sp, #24]
  404008:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40400c:	199c      	adds	r4, r3, r6
  40400e:	461d      	mov	r5, r3
  404010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404014:	f001 ff72 	bl	405efc <__aeabi_d2iz>
  404018:	4606      	mov	r6, r0
  40401a:	f001 fc59 	bl	4058d0 <__aeabi_i2d>
  40401e:	3630      	adds	r6, #48	; 0x30
  404020:	4602      	mov	r2, r0
  404022:	460b      	mov	r3, r1
  404024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404028:	f001 fb04 	bl	405634 <__aeabi_dsub>
  40402c:	f805 6b01 	strb.w	r6, [r5], #1
  404030:	42ac      	cmp	r4, r5
  404032:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404036:	f04f 0200 	mov.w	r2, #0
  40403a:	d123      	bne.n	404084 <_dtoa_r+0x584>
  40403c:	4b1a      	ldr	r3, [pc, #104]	; (4040a8 <_dtoa_r+0x5a8>)
  40403e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404042:	f001 faf9 	bl	405638 <__adddf3>
  404046:	4602      	mov	r2, r0
  404048:	460b      	mov	r3, r1
  40404a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40404e:	f001 ff35 	bl	405ebc <__aeabi_dcmpgt>
  404052:	2800      	cmp	r0, #0
  404054:	f040 808c 	bne.w	404170 <_dtoa_r+0x670>
  404058:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40405c:	2000      	movs	r0, #0
  40405e:	4912      	ldr	r1, [pc, #72]	; (4040a8 <_dtoa_r+0x5a8>)
  404060:	f001 fae8 	bl	405634 <__aeabi_dsub>
  404064:	4602      	mov	r2, r0
  404066:	460b      	mov	r3, r1
  404068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40406c:	f001 ff08 	bl	405e80 <__aeabi_dcmplt>
  404070:	b1e0      	cbz	r0, 4040ac <_dtoa_r+0x5ac>
  404072:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  404076:	2b30      	cmp	r3, #48	; 0x30
  404078:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  40407c:	f040 82b9 	bne.w	4045f2 <_dtoa_r+0xaf2>
  404080:	4614      	mov	r4, r2
  404082:	e7f6      	b.n	404072 <_dtoa_r+0x572>
  404084:	4b05      	ldr	r3, [pc, #20]	; (40409c <_dtoa_r+0x59c>)
  404086:	f001 fc89 	bl	40599c <__aeabi_dmul>
  40408a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40408e:	e7bf      	b.n	404010 <_dtoa_r+0x510>
  404090:	00406a60 	.word	0x00406a60
  404094:	00406b28 	.word	0x00406b28
  404098:	3ff00000 	.word	0x3ff00000
  40409c:	40240000 	.word	0x40240000
  4040a0:	401c0000 	.word	0x401c0000
  4040a4:	40140000 	.word	0x40140000
  4040a8:	3fe00000 	.word	0x3fe00000
  4040ac:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  4040b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4040b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4040b6:	2b00      	cmp	r3, #0
  4040b8:	db7d      	blt.n	4041b6 <_dtoa_r+0x6b6>
  4040ba:	f1bb 0f0e 	cmp.w	fp, #14
  4040be:	dc7a      	bgt.n	4041b6 <_dtoa_r+0x6b6>
  4040c0:	4bab      	ldr	r3, [pc, #684]	; (404370 <_dtoa_r+0x870>)
  4040c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  4040c6:	e9d3 6700 	ldrd	r6, r7, [r3]
  4040ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4040cc:	2b00      	cmp	r3, #0
  4040ce:	da14      	bge.n	4040fa <_dtoa_r+0x5fa>
  4040d0:	9b05      	ldr	r3, [sp, #20]
  4040d2:	2b00      	cmp	r3, #0
  4040d4:	dc11      	bgt.n	4040fa <_dtoa_r+0x5fa>
  4040d6:	f040 816c 	bne.w	4043b2 <_dtoa_r+0x8b2>
  4040da:	2200      	movs	r2, #0
  4040dc:	4ba5      	ldr	r3, [pc, #660]	; (404374 <_dtoa_r+0x874>)
  4040de:	4630      	mov	r0, r6
  4040e0:	4639      	mov	r1, r7
  4040e2:	f001 fc5b 	bl	40599c <__aeabi_dmul>
  4040e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4040ea:	f001 fedd 	bl	405ea8 <__aeabi_dcmpge>
  4040ee:	9d05      	ldr	r5, [sp, #20]
  4040f0:	462e      	mov	r6, r5
  4040f2:	2800      	cmp	r0, #0
  4040f4:	f040 815f 	bne.w	4043b6 <_dtoa_r+0x8b6>
  4040f8:	e165      	b.n	4043c6 <_dtoa_r+0x8c6>
  4040fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4040fe:	9c06      	ldr	r4, [sp, #24]
  404100:	4632      	mov	r2, r6
  404102:	463b      	mov	r3, r7
  404104:	4640      	mov	r0, r8
  404106:	4649      	mov	r1, r9
  404108:	f001 fd72 	bl	405bf0 <__aeabi_ddiv>
  40410c:	f001 fef6 	bl	405efc <__aeabi_d2iz>
  404110:	4605      	mov	r5, r0
  404112:	f001 fbdd 	bl	4058d0 <__aeabi_i2d>
  404116:	4632      	mov	r2, r6
  404118:	463b      	mov	r3, r7
  40411a:	f001 fc3f 	bl	40599c <__aeabi_dmul>
  40411e:	460b      	mov	r3, r1
  404120:	4602      	mov	r2, r0
  404122:	4649      	mov	r1, r9
  404124:	4640      	mov	r0, r8
  404126:	f001 fa85 	bl	405634 <__aeabi_dsub>
  40412a:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  40412e:	9b06      	ldr	r3, [sp, #24]
  404130:	f804 eb01 	strb.w	lr, [r4], #1
  404134:	ebc3 0e04 	rsb	lr, r3, r4
  404138:	9b05      	ldr	r3, [sp, #20]
  40413a:	4573      	cmp	r3, lr
  40413c:	d12e      	bne.n	40419c <_dtoa_r+0x69c>
  40413e:	4602      	mov	r2, r0
  404140:	460b      	mov	r3, r1
  404142:	f001 fa79 	bl	405638 <__adddf3>
  404146:	4680      	mov	r8, r0
  404148:	4689      	mov	r9, r1
  40414a:	4602      	mov	r2, r0
  40414c:	460b      	mov	r3, r1
  40414e:	4630      	mov	r0, r6
  404150:	4639      	mov	r1, r7
  404152:	f001 fe95 	bl	405e80 <__aeabi_dcmplt>
  404156:	b978      	cbnz	r0, 404178 <_dtoa_r+0x678>
  404158:	4642      	mov	r2, r8
  40415a:	464b      	mov	r3, r9
  40415c:	4630      	mov	r0, r6
  40415e:	4639      	mov	r1, r7
  404160:	f001 fe84 	bl	405e6c <__aeabi_dcmpeq>
  404164:	2800      	cmp	r0, #0
  404166:	f000 8246 	beq.w	4045f6 <_dtoa_r+0xaf6>
  40416a:	07eb      	lsls	r3, r5, #31
  40416c:	d404      	bmi.n	404178 <_dtoa_r+0x678>
  40416e:	e242      	b.n	4045f6 <_dtoa_r+0xaf6>
  404170:	f8dd b020 	ldr.w	fp, [sp, #32]
  404174:	e000      	b.n	404178 <_dtoa_r+0x678>
  404176:	461c      	mov	r4, r3
  404178:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  40417c:	2a39      	cmp	r2, #57	; 0x39
  40417e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  404182:	d107      	bne.n	404194 <_dtoa_r+0x694>
  404184:	9a06      	ldr	r2, [sp, #24]
  404186:	429a      	cmp	r2, r3
  404188:	d1f5      	bne.n	404176 <_dtoa_r+0x676>
  40418a:	9906      	ldr	r1, [sp, #24]
  40418c:	2230      	movs	r2, #48	; 0x30
  40418e:	f10b 0b01 	add.w	fp, fp, #1
  404192:	700a      	strb	r2, [r1, #0]
  404194:	781a      	ldrb	r2, [r3, #0]
  404196:	3201      	adds	r2, #1
  404198:	701a      	strb	r2, [r3, #0]
  40419a:	e22c      	b.n	4045f6 <_dtoa_r+0xaf6>
  40419c:	2200      	movs	r2, #0
  40419e:	4b76      	ldr	r3, [pc, #472]	; (404378 <_dtoa_r+0x878>)
  4041a0:	f001 fbfc 	bl	40599c <__aeabi_dmul>
  4041a4:	2200      	movs	r2, #0
  4041a6:	2300      	movs	r3, #0
  4041a8:	4680      	mov	r8, r0
  4041aa:	4689      	mov	r9, r1
  4041ac:	f001 fe5e 	bl	405e6c <__aeabi_dcmpeq>
  4041b0:	2800      	cmp	r0, #0
  4041b2:	d0a5      	beq.n	404100 <_dtoa_r+0x600>
  4041b4:	e21f      	b.n	4045f6 <_dtoa_r+0xaf6>
  4041b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4041b8:	2a00      	cmp	r2, #0
  4041ba:	d02b      	beq.n	404214 <_dtoa_r+0x714>
  4041bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4041be:	2a01      	cmp	r2, #1
  4041c0:	dc0a      	bgt.n	4041d8 <_dtoa_r+0x6d8>
  4041c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041c4:	b112      	cbz	r2, 4041cc <_dtoa_r+0x6cc>
  4041c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4041ca:	e002      	b.n	4041d2 <_dtoa_r+0x6d2>
  4041cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4041ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4041d2:	463d      	mov	r5, r7
  4041d4:	4644      	mov	r4, r8
  4041d6:	e013      	b.n	404200 <_dtoa_r+0x700>
  4041d8:	9b05      	ldr	r3, [sp, #20]
  4041da:	1e5d      	subs	r5, r3, #1
  4041dc:	42af      	cmp	r7, r5
  4041de:	bfbf      	itttt	lt
  4041e0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  4041e2:	1bea      	sublt	r2, r5, r7
  4041e4:	189b      	addlt	r3, r3, r2
  4041e6:	930b      	strlt	r3, [sp, #44]	; 0x2c
  4041e8:	9b05      	ldr	r3, [sp, #20]
  4041ea:	bfb6      	itet	lt
  4041ec:	462f      	movlt	r7, r5
  4041ee:	1b7d      	subge	r5, r7, r5
  4041f0:	2500      	movlt	r5, #0
  4041f2:	2b00      	cmp	r3, #0
  4041f4:	bfab      	itete	ge
  4041f6:	9b05      	ldrge	r3, [sp, #20]
  4041f8:	ebc3 0408 	rsblt	r4, r3, r8
  4041fc:	4644      	movge	r4, r8
  4041fe:	2300      	movlt	r3, #0
  404200:	9a07      	ldr	r2, [sp, #28]
  404202:	2101      	movs	r1, #1
  404204:	441a      	add	r2, r3
  404206:	4650      	mov	r0, sl
  404208:	4498      	add	r8, r3
  40420a:	9207      	str	r2, [sp, #28]
  40420c:	f000 fd44 	bl	404c98 <__i2b>
  404210:	4606      	mov	r6, r0
  404212:	e002      	b.n	40421a <_dtoa_r+0x71a>
  404214:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404216:	463d      	mov	r5, r7
  404218:	4644      	mov	r4, r8
  40421a:	b15c      	cbz	r4, 404234 <_dtoa_r+0x734>
  40421c:	9b07      	ldr	r3, [sp, #28]
  40421e:	2b00      	cmp	r3, #0
  404220:	dd08      	ble.n	404234 <_dtoa_r+0x734>
  404222:	42a3      	cmp	r3, r4
  404224:	9a07      	ldr	r2, [sp, #28]
  404226:	bfa8      	it	ge
  404228:	4623      	movge	r3, r4
  40422a:	ebc3 0808 	rsb	r8, r3, r8
  40422e:	1ae4      	subs	r4, r4, r3
  404230:	1ad3      	subs	r3, r2, r3
  404232:	9307      	str	r3, [sp, #28]
  404234:	2f00      	cmp	r7, #0
  404236:	dd1d      	ble.n	404274 <_dtoa_r+0x774>
  404238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40423a:	b1ab      	cbz	r3, 404268 <_dtoa_r+0x768>
  40423c:	b18d      	cbz	r5, 404262 <_dtoa_r+0x762>
  40423e:	4631      	mov	r1, r6
  404240:	462a      	mov	r2, r5
  404242:	4650      	mov	r0, sl
  404244:	f000 fdc2 	bl	404dcc <__pow5mult>
  404248:	9a04      	ldr	r2, [sp, #16]
  40424a:	4601      	mov	r1, r0
  40424c:	4606      	mov	r6, r0
  40424e:	4650      	mov	r0, sl
  404250:	f000 fd2b 	bl	404caa <__multiply>
  404254:	9904      	ldr	r1, [sp, #16]
  404256:	9008      	str	r0, [sp, #32]
  404258:	4650      	mov	r0, sl
  40425a:	f000 fc7e 	bl	404b5a <_Bfree>
  40425e:	9b08      	ldr	r3, [sp, #32]
  404260:	9304      	str	r3, [sp, #16]
  404262:	1b7a      	subs	r2, r7, r5
  404264:	d006      	beq.n	404274 <_dtoa_r+0x774>
  404266:	e000      	b.n	40426a <_dtoa_r+0x76a>
  404268:	463a      	mov	r2, r7
  40426a:	9904      	ldr	r1, [sp, #16]
  40426c:	4650      	mov	r0, sl
  40426e:	f000 fdad 	bl	404dcc <__pow5mult>
  404272:	9004      	str	r0, [sp, #16]
  404274:	2101      	movs	r1, #1
  404276:	4650      	mov	r0, sl
  404278:	f000 fd0e 	bl	404c98 <__i2b>
  40427c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40427e:	4605      	mov	r5, r0
  404280:	b35b      	cbz	r3, 4042da <_dtoa_r+0x7da>
  404282:	461a      	mov	r2, r3
  404284:	4601      	mov	r1, r0
  404286:	4650      	mov	r0, sl
  404288:	f000 fda0 	bl	404dcc <__pow5mult>
  40428c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40428e:	2b01      	cmp	r3, #1
  404290:	4605      	mov	r5, r0
  404292:	dc18      	bgt.n	4042c6 <_dtoa_r+0x7c6>
  404294:	9b02      	ldr	r3, [sp, #8]
  404296:	b983      	cbnz	r3, 4042ba <_dtoa_r+0x7ba>
  404298:	9b03      	ldr	r3, [sp, #12]
  40429a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40429e:	b973      	cbnz	r3, 4042be <_dtoa_r+0x7be>
  4042a0:	9b03      	ldr	r3, [sp, #12]
  4042a2:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  4042a6:	0d3f      	lsrs	r7, r7, #20
  4042a8:	053f      	lsls	r7, r7, #20
  4042aa:	b14f      	cbz	r7, 4042c0 <_dtoa_r+0x7c0>
  4042ac:	9b07      	ldr	r3, [sp, #28]
  4042ae:	3301      	adds	r3, #1
  4042b0:	f108 0801 	add.w	r8, r8, #1
  4042b4:	9307      	str	r3, [sp, #28]
  4042b6:	2701      	movs	r7, #1
  4042b8:	e002      	b.n	4042c0 <_dtoa_r+0x7c0>
  4042ba:	2700      	movs	r7, #0
  4042bc:	e000      	b.n	4042c0 <_dtoa_r+0x7c0>
  4042be:	9f02      	ldr	r7, [sp, #8]
  4042c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4042c2:	b173      	cbz	r3, 4042e2 <_dtoa_r+0x7e2>
  4042c4:	e000      	b.n	4042c8 <_dtoa_r+0x7c8>
  4042c6:	2700      	movs	r7, #0
  4042c8:	692b      	ldr	r3, [r5, #16]
  4042ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4042ce:	6918      	ldr	r0, [r3, #16]
  4042d0:	f000 fc95 	bl	404bfe <__hi0bits>
  4042d4:	f1c0 0020 	rsb	r0, r0, #32
  4042d8:	e004      	b.n	4042e4 <_dtoa_r+0x7e4>
  4042da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4042dc:	2b01      	cmp	r3, #1
  4042de:	ddd9      	ble.n	404294 <_dtoa_r+0x794>
  4042e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  4042e2:	2001      	movs	r0, #1
  4042e4:	9b07      	ldr	r3, [sp, #28]
  4042e6:	4418      	add	r0, r3
  4042e8:	f010 001f 	ands.w	r0, r0, #31
  4042ec:	d008      	beq.n	404300 <_dtoa_r+0x800>
  4042ee:	f1c0 0320 	rsb	r3, r0, #32
  4042f2:	2b04      	cmp	r3, #4
  4042f4:	dd02      	ble.n	4042fc <_dtoa_r+0x7fc>
  4042f6:	f1c0 001c 	rsb	r0, r0, #28
  4042fa:	e002      	b.n	404302 <_dtoa_r+0x802>
  4042fc:	d006      	beq.n	40430c <_dtoa_r+0x80c>
  4042fe:	4618      	mov	r0, r3
  404300:	301c      	adds	r0, #28
  404302:	9b07      	ldr	r3, [sp, #28]
  404304:	4403      	add	r3, r0
  404306:	4480      	add	r8, r0
  404308:	4404      	add	r4, r0
  40430a:	9307      	str	r3, [sp, #28]
  40430c:	f1b8 0f00 	cmp.w	r8, #0
  404310:	dd05      	ble.n	40431e <_dtoa_r+0x81e>
  404312:	4642      	mov	r2, r8
  404314:	9904      	ldr	r1, [sp, #16]
  404316:	4650      	mov	r0, sl
  404318:	f000 fda6 	bl	404e68 <__lshift>
  40431c:	9004      	str	r0, [sp, #16]
  40431e:	9b07      	ldr	r3, [sp, #28]
  404320:	2b00      	cmp	r3, #0
  404322:	dd05      	ble.n	404330 <_dtoa_r+0x830>
  404324:	4629      	mov	r1, r5
  404326:	461a      	mov	r2, r3
  404328:	4650      	mov	r0, sl
  40432a:	f000 fd9d 	bl	404e68 <__lshift>
  40432e:	4605      	mov	r5, r0
  404330:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404332:	b31b      	cbz	r3, 40437c <_dtoa_r+0x87c>
  404334:	4629      	mov	r1, r5
  404336:	9804      	ldr	r0, [sp, #16]
  404338:	f000 fde7 	bl	404f0a <__mcmp>
  40433c:	2800      	cmp	r0, #0
  40433e:	da1d      	bge.n	40437c <_dtoa_r+0x87c>
  404340:	2300      	movs	r3, #0
  404342:	220a      	movs	r2, #10
  404344:	9904      	ldr	r1, [sp, #16]
  404346:	4650      	mov	r0, sl
  404348:	f000 fc1e 	bl	404b88 <__multadd>
  40434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40434e:	9004      	str	r0, [sp, #16]
  404350:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  404354:	2b00      	cmp	r3, #0
  404356:	f000 8160 	beq.w	40461a <_dtoa_r+0xb1a>
  40435a:	4631      	mov	r1, r6
  40435c:	2300      	movs	r3, #0
  40435e:	220a      	movs	r2, #10
  404360:	4650      	mov	r0, sl
  404362:	f000 fc11 	bl	404b88 <__multadd>
  404366:	f1b9 0f00 	cmp.w	r9, #0
  40436a:	4606      	mov	r6, r0
  40436c:	dc3e      	bgt.n	4043ec <_dtoa_r+0x8ec>
  40436e:	e03a      	b.n	4043e6 <_dtoa_r+0x8e6>
  404370:	00406a60 	.word	0x00406a60
  404374:	40140000 	.word	0x40140000
  404378:	40240000 	.word	0x40240000
  40437c:	9b05      	ldr	r3, [sp, #20]
  40437e:	2b00      	cmp	r3, #0
  404380:	dc2b      	bgt.n	4043da <_dtoa_r+0x8da>
  404382:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404384:	2b02      	cmp	r3, #2
  404386:	dd28      	ble.n	4043da <_dtoa_r+0x8da>
  404388:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40438c:	f1b9 0f00 	cmp.w	r9, #0
  404390:	d111      	bne.n	4043b6 <_dtoa_r+0x8b6>
  404392:	4629      	mov	r1, r5
  404394:	464b      	mov	r3, r9
  404396:	2205      	movs	r2, #5
  404398:	4650      	mov	r0, sl
  40439a:	f000 fbf5 	bl	404b88 <__multadd>
  40439e:	4601      	mov	r1, r0
  4043a0:	4605      	mov	r5, r0
  4043a2:	9804      	ldr	r0, [sp, #16]
  4043a4:	f000 fdb1 	bl	404f0a <__mcmp>
  4043a8:	2800      	cmp	r0, #0
  4043aa:	dc0c      	bgt.n	4043c6 <_dtoa_r+0x8c6>
  4043ac:	e003      	b.n	4043b6 <_dtoa_r+0x8b6>
  4043ae:	4635      	mov	r5, r6
  4043b0:	e000      	b.n	4043b4 <_dtoa_r+0x8b4>
  4043b2:	2500      	movs	r5, #0
  4043b4:	462e      	mov	r6, r5
  4043b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4043b8:	9c06      	ldr	r4, [sp, #24]
  4043ba:	ea6f 0b03 	mvn.w	fp, r3
  4043be:	e009      	b.n	4043d4 <_dtoa_r+0x8d4>
  4043c0:	f8dd b020 	ldr.w	fp, [sp, #32]
  4043c4:	4635      	mov	r5, r6
  4043c6:	9b06      	ldr	r3, [sp, #24]
  4043c8:	9a06      	ldr	r2, [sp, #24]
  4043ca:	1c5c      	adds	r4, r3, #1
  4043cc:	2331      	movs	r3, #49	; 0x31
  4043ce:	7013      	strb	r3, [r2, #0]
  4043d0:	f10b 0b01 	add.w	fp, fp, #1
  4043d4:	9605      	str	r6, [sp, #20]
  4043d6:	2600      	movs	r6, #0
  4043d8:	e0f9      	b.n	4045ce <_dtoa_r+0xace>
  4043da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043dc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4043e0:	b923      	cbnz	r3, 4043ec <_dtoa_r+0x8ec>
  4043e2:	9c06      	ldr	r4, [sp, #24]
  4043e4:	e0b2      	b.n	40454c <_dtoa_r+0xa4c>
  4043e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4043e8:	2b02      	cmp	r3, #2
  4043ea:	dccf      	bgt.n	40438c <_dtoa_r+0x88c>
  4043ec:	2c00      	cmp	r4, #0
  4043ee:	dd05      	ble.n	4043fc <_dtoa_r+0x8fc>
  4043f0:	4631      	mov	r1, r6
  4043f2:	4622      	mov	r2, r4
  4043f4:	4650      	mov	r0, sl
  4043f6:	f000 fd37 	bl	404e68 <__lshift>
  4043fa:	4606      	mov	r6, r0
  4043fc:	b19f      	cbz	r7, 404426 <_dtoa_r+0x926>
  4043fe:	6871      	ldr	r1, [r6, #4]
  404400:	4650      	mov	r0, sl
  404402:	f000 fb75 	bl	404af0 <_Balloc>
  404406:	6932      	ldr	r2, [r6, #16]
  404408:	3202      	adds	r2, #2
  40440a:	4604      	mov	r4, r0
  40440c:	0092      	lsls	r2, r2, #2
  40440e:	f106 010c 	add.w	r1, r6, #12
  404412:	300c      	adds	r0, #12
  404414:	f7fe fb8c 	bl	402b30 <memcpy>
  404418:	2201      	movs	r2, #1
  40441a:	4621      	mov	r1, r4
  40441c:	4650      	mov	r0, sl
  40441e:	f000 fd23 	bl	404e68 <__lshift>
  404422:	9005      	str	r0, [sp, #20]
  404424:	e000      	b.n	404428 <_dtoa_r+0x928>
  404426:	9605      	str	r6, [sp, #20]
  404428:	9b02      	ldr	r3, [sp, #8]
  40442a:	9f06      	ldr	r7, [sp, #24]
  40442c:	f003 0301 	and.w	r3, r3, #1
  404430:	9307      	str	r3, [sp, #28]
  404432:	4629      	mov	r1, r5
  404434:	9804      	ldr	r0, [sp, #16]
  404436:	f7ff fad1 	bl	4039dc <quorem>
  40443a:	4631      	mov	r1, r6
  40443c:	4604      	mov	r4, r0
  40443e:	f100 0830 	add.w	r8, r0, #48	; 0x30
  404442:	9804      	ldr	r0, [sp, #16]
  404444:	f000 fd61 	bl	404f0a <__mcmp>
  404448:	9a05      	ldr	r2, [sp, #20]
  40444a:	9002      	str	r0, [sp, #8]
  40444c:	4629      	mov	r1, r5
  40444e:	4650      	mov	r0, sl
  404450:	f000 fd77 	bl	404f42 <__mdiff>
  404454:	68c3      	ldr	r3, [r0, #12]
  404456:	4602      	mov	r2, r0
  404458:	b93b      	cbnz	r3, 40446a <_dtoa_r+0x96a>
  40445a:	4601      	mov	r1, r0
  40445c:	900a      	str	r0, [sp, #40]	; 0x28
  40445e:	9804      	ldr	r0, [sp, #16]
  404460:	f000 fd53 	bl	404f0a <__mcmp>
  404464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404466:	4603      	mov	r3, r0
  404468:	e000      	b.n	40446c <_dtoa_r+0x96c>
  40446a:	2301      	movs	r3, #1
  40446c:	4611      	mov	r1, r2
  40446e:	4650      	mov	r0, sl
  404470:	930a      	str	r3, [sp, #40]	; 0x28
  404472:	f000 fb72 	bl	404b5a <_Bfree>
  404476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404478:	b953      	cbnz	r3, 404490 <_dtoa_r+0x990>
  40447a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40447c:	b942      	cbnz	r2, 404490 <_dtoa_r+0x990>
  40447e:	9a07      	ldr	r2, [sp, #28]
  404480:	b932      	cbnz	r2, 404490 <_dtoa_r+0x990>
  404482:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404486:	d02a      	beq.n	4044de <_dtoa_r+0x9de>
  404488:	9b02      	ldr	r3, [sp, #8]
  40448a:	2b00      	cmp	r3, #0
  40448c:	dc1c      	bgt.n	4044c8 <_dtoa_r+0x9c8>
  40448e:	e01d      	b.n	4044cc <_dtoa_r+0x9cc>
  404490:	9a02      	ldr	r2, [sp, #8]
  404492:	2a00      	cmp	r2, #0
  404494:	db04      	blt.n	4044a0 <_dtoa_r+0x9a0>
  404496:	d11b      	bne.n	4044d0 <_dtoa_r+0x9d0>
  404498:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40449a:	b9ca      	cbnz	r2, 4044d0 <_dtoa_r+0x9d0>
  40449c:	9a07      	ldr	r2, [sp, #28]
  40449e:	b9ba      	cbnz	r2, 4044d0 <_dtoa_r+0x9d0>
  4044a0:	2b00      	cmp	r3, #0
  4044a2:	dd13      	ble.n	4044cc <_dtoa_r+0x9cc>
  4044a4:	2201      	movs	r2, #1
  4044a6:	9904      	ldr	r1, [sp, #16]
  4044a8:	4650      	mov	r0, sl
  4044aa:	f000 fcdd 	bl	404e68 <__lshift>
  4044ae:	4629      	mov	r1, r5
  4044b0:	9004      	str	r0, [sp, #16]
  4044b2:	f000 fd2a 	bl	404f0a <__mcmp>
  4044b6:	2800      	cmp	r0, #0
  4044b8:	dc03      	bgt.n	4044c2 <_dtoa_r+0x9c2>
  4044ba:	d107      	bne.n	4044cc <_dtoa_r+0x9cc>
  4044bc:	f018 0f01 	tst.w	r8, #1
  4044c0:	d004      	beq.n	4044cc <_dtoa_r+0x9cc>
  4044c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4044c6:	d00a      	beq.n	4044de <_dtoa_r+0x9de>
  4044c8:	f104 0831 	add.w	r8, r4, #49	; 0x31
  4044cc:	1c7c      	adds	r4, r7, #1
  4044ce:	e00c      	b.n	4044ea <_dtoa_r+0x9ea>
  4044d0:	2b00      	cmp	r3, #0
  4044d2:	f107 0401 	add.w	r4, r7, #1
  4044d6:	dd0b      	ble.n	4044f0 <_dtoa_r+0x9f0>
  4044d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4044dc:	d103      	bne.n	4044e6 <_dtoa_r+0x9e6>
  4044de:	2339      	movs	r3, #57	; 0x39
  4044e0:	703b      	strb	r3, [r7, #0]
  4044e2:	3701      	adds	r7, #1
  4044e4:	e056      	b.n	404594 <_dtoa_r+0xa94>
  4044e6:	f108 0801 	add.w	r8, r8, #1
  4044ea:	f887 8000 	strb.w	r8, [r7]
  4044ee:	e06e      	b.n	4045ce <_dtoa_r+0xace>
  4044f0:	9b06      	ldr	r3, [sp, #24]
  4044f2:	f804 8c01 	strb.w	r8, [r4, #-1]
  4044f6:	1ae3      	subs	r3, r4, r3
  4044f8:	454b      	cmp	r3, r9
  4044fa:	4627      	mov	r7, r4
  4044fc:	d03b      	beq.n	404576 <_dtoa_r+0xa76>
  4044fe:	2300      	movs	r3, #0
  404500:	220a      	movs	r2, #10
  404502:	9904      	ldr	r1, [sp, #16]
  404504:	4650      	mov	r0, sl
  404506:	f000 fb3f 	bl	404b88 <__multadd>
  40450a:	9b05      	ldr	r3, [sp, #20]
  40450c:	9004      	str	r0, [sp, #16]
  40450e:	429e      	cmp	r6, r3
  404510:	f04f 020a 	mov.w	r2, #10
  404514:	f04f 0300 	mov.w	r3, #0
  404518:	4631      	mov	r1, r6
  40451a:	4650      	mov	r0, sl
  40451c:	d104      	bne.n	404528 <_dtoa_r+0xa28>
  40451e:	f000 fb33 	bl	404b88 <__multadd>
  404522:	4606      	mov	r6, r0
  404524:	9005      	str	r0, [sp, #20]
  404526:	e784      	b.n	404432 <_dtoa_r+0x932>
  404528:	f000 fb2e 	bl	404b88 <__multadd>
  40452c:	2300      	movs	r3, #0
  40452e:	4606      	mov	r6, r0
  404530:	220a      	movs	r2, #10
  404532:	9905      	ldr	r1, [sp, #20]
  404534:	4650      	mov	r0, sl
  404536:	f000 fb27 	bl	404b88 <__multadd>
  40453a:	9005      	str	r0, [sp, #20]
  40453c:	e779      	b.n	404432 <_dtoa_r+0x932>
  40453e:	2300      	movs	r3, #0
  404540:	220a      	movs	r2, #10
  404542:	9904      	ldr	r1, [sp, #16]
  404544:	4650      	mov	r0, sl
  404546:	f000 fb1f 	bl	404b88 <__multadd>
  40454a:	9004      	str	r0, [sp, #16]
  40454c:	4629      	mov	r1, r5
  40454e:	9804      	ldr	r0, [sp, #16]
  404550:	f7ff fa44 	bl	4039dc <quorem>
  404554:	f100 0830 	add.w	r8, r0, #48	; 0x30
  404558:	f804 8b01 	strb.w	r8, [r4], #1
  40455c:	9b06      	ldr	r3, [sp, #24]
  40455e:	1ae3      	subs	r3, r4, r3
  404560:	454b      	cmp	r3, r9
  404562:	dbec      	blt.n	40453e <_dtoa_r+0xa3e>
  404564:	9b06      	ldr	r3, [sp, #24]
  404566:	9605      	str	r6, [sp, #20]
  404568:	f1b9 0f01 	cmp.w	r9, #1
  40456c:	bfac      	ite	ge
  40456e:	444b      	addge	r3, r9
  404570:	3301      	addlt	r3, #1
  404572:	461f      	mov	r7, r3
  404574:	2600      	movs	r6, #0
  404576:	2201      	movs	r2, #1
  404578:	9904      	ldr	r1, [sp, #16]
  40457a:	4650      	mov	r0, sl
  40457c:	f000 fc74 	bl	404e68 <__lshift>
  404580:	4629      	mov	r1, r5
  404582:	9004      	str	r0, [sp, #16]
  404584:	f000 fcc1 	bl	404f0a <__mcmp>
  404588:	2800      	cmp	r0, #0
  40458a:	dc03      	bgt.n	404594 <_dtoa_r+0xa94>
  40458c:	d116      	bne.n	4045bc <_dtoa_r+0xabc>
  40458e:	f018 0f01 	tst.w	r8, #1
  404592:	d013      	beq.n	4045bc <_dtoa_r+0xabc>
  404594:	463c      	mov	r4, r7
  404596:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40459a:	2b39      	cmp	r3, #57	; 0x39
  40459c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  4045a0:	d109      	bne.n	4045b6 <_dtoa_r+0xab6>
  4045a2:	9b06      	ldr	r3, [sp, #24]
  4045a4:	4293      	cmp	r3, r2
  4045a6:	d104      	bne.n	4045b2 <_dtoa_r+0xab2>
  4045a8:	f10b 0b01 	add.w	fp, fp, #1
  4045ac:	2331      	movs	r3, #49	; 0x31
  4045ae:	9a06      	ldr	r2, [sp, #24]
  4045b0:	e002      	b.n	4045b8 <_dtoa_r+0xab8>
  4045b2:	4614      	mov	r4, r2
  4045b4:	e7ef      	b.n	404596 <_dtoa_r+0xa96>
  4045b6:	3301      	adds	r3, #1
  4045b8:	7013      	strb	r3, [r2, #0]
  4045ba:	e008      	b.n	4045ce <_dtoa_r+0xace>
  4045bc:	463c      	mov	r4, r7
  4045be:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  4045c2:	2b30      	cmp	r3, #48	; 0x30
  4045c4:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  4045c8:	d101      	bne.n	4045ce <_dtoa_r+0xace>
  4045ca:	4614      	mov	r4, r2
  4045cc:	e7f7      	b.n	4045be <_dtoa_r+0xabe>
  4045ce:	4629      	mov	r1, r5
  4045d0:	4650      	mov	r0, sl
  4045d2:	f000 fac2 	bl	404b5a <_Bfree>
  4045d6:	9b05      	ldr	r3, [sp, #20]
  4045d8:	b16b      	cbz	r3, 4045f6 <_dtoa_r+0xaf6>
  4045da:	b12e      	cbz	r6, 4045e8 <_dtoa_r+0xae8>
  4045dc:	429e      	cmp	r6, r3
  4045de:	d003      	beq.n	4045e8 <_dtoa_r+0xae8>
  4045e0:	4631      	mov	r1, r6
  4045e2:	4650      	mov	r0, sl
  4045e4:	f000 fab9 	bl	404b5a <_Bfree>
  4045e8:	9905      	ldr	r1, [sp, #20]
  4045ea:	4650      	mov	r0, sl
  4045ec:	f000 fab5 	bl	404b5a <_Bfree>
  4045f0:	e001      	b.n	4045f6 <_dtoa_r+0xaf6>
  4045f2:	f8dd b020 	ldr.w	fp, [sp, #32]
  4045f6:	9904      	ldr	r1, [sp, #16]
  4045f8:	4650      	mov	r0, sl
  4045fa:	f000 faae 	bl	404b5a <_Bfree>
  4045fe:	2300      	movs	r3, #0
  404600:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404602:	7023      	strb	r3, [r4, #0]
  404604:	f10b 0301 	add.w	r3, fp, #1
  404608:	6013      	str	r3, [r2, #0]
  40460a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40460c:	b11b      	cbz	r3, 404616 <_dtoa_r+0xb16>
  40460e:	601c      	str	r4, [r3, #0]
  404610:	e001      	b.n	404616 <_dtoa_r+0xb16>
  404612:	4808      	ldr	r0, [pc, #32]	; (404634 <_dtoa_r+0xb34>)
  404614:	e00a      	b.n	40462c <_dtoa_r+0xb2c>
  404616:	9806      	ldr	r0, [sp, #24]
  404618:	e008      	b.n	40462c <_dtoa_r+0xb2c>
  40461a:	f1b9 0f00 	cmp.w	r9, #0
  40461e:	f73f aee0 	bgt.w	4043e2 <_dtoa_r+0x8e2>
  404622:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  404624:	2b02      	cmp	r3, #2
  404626:	f77f aedc 	ble.w	4043e2 <_dtoa_r+0x8e2>
  40462a:	e6af      	b.n	40438c <_dtoa_r+0x88c>
  40462c:	b015      	add	sp, #84	; 0x54
  40462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404632:	bf00      	nop
  404634:	004069bc 	.word	0x004069bc

00404638 <__sflush_r>:
  404638:	898a      	ldrh	r2, [r1, #12]
  40463a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40463e:	4605      	mov	r5, r0
  404640:	0710      	lsls	r0, r2, #28
  404642:	460c      	mov	r4, r1
  404644:	d459      	bmi.n	4046fa <__sflush_r+0xc2>
  404646:	684b      	ldr	r3, [r1, #4]
  404648:	2b00      	cmp	r3, #0
  40464a:	dc02      	bgt.n	404652 <__sflush_r+0x1a>
  40464c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40464e:	2b00      	cmp	r3, #0
  404650:	dd17      	ble.n	404682 <__sflush_r+0x4a>
  404652:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  404654:	b1ae      	cbz	r6, 404682 <__sflush_r+0x4a>
  404656:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  40465a:	2300      	movs	r3, #0
  40465c:	b292      	uxth	r2, r2
  40465e:	682f      	ldr	r7, [r5, #0]
  404660:	602b      	str	r3, [r5, #0]
  404662:	b10a      	cbz	r2, 404668 <__sflush_r+0x30>
  404664:	6d60      	ldr	r0, [r4, #84]	; 0x54
  404666:	e015      	b.n	404694 <__sflush_r+0x5c>
  404668:	6a21      	ldr	r1, [r4, #32]
  40466a:	2301      	movs	r3, #1
  40466c:	4628      	mov	r0, r5
  40466e:	47b0      	blx	r6
  404670:	1c41      	adds	r1, r0, #1
  404672:	d10f      	bne.n	404694 <__sflush_r+0x5c>
  404674:	682b      	ldr	r3, [r5, #0]
  404676:	b16b      	cbz	r3, 404694 <__sflush_r+0x5c>
  404678:	2b1d      	cmp	r3, #29
  40467a:	d001      	beq.n	404680 <__sflush_r+0x48>
  40467c:	2b16      	cmp	r3, #22
  40467e:	d103      	bne.n	404688 <__sflush_r+0x50>
  404680:	602f      	str	r7, [r5, #0]
  404682:	2000      	movs	r0, #0
  404684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404688:	89a3      	ldrh	r3, [r4, #12]
  40468a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40468e:	81a3      	strh	r3, [r4, #12]
  404690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404694:	89a3      	ldrh	r3, [r4, #12]
  404696:	075a      	lsls	r2, r3, #29
  404698:	d505      	bpl.n	4046a6 <__sflush_r+0x6e>
  40469a:	6863      	ldr	r3, [r4, #4]
  40469c:	1ac0      	subs	r0, r0, r3
  40469e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4046a0:	b10b      	cbz	r3, 4046a6 <__sflush_r+0x6e>
  4046a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4046a4:	1ac0      	subs	r0, r0, r3
  4046a6:	2300      	movs	r3, #0
  4046a8:	4602      	mov	r2, r0
  4046aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4046ac:	6a21      	ldr	r1, [r4, #32]
  4046ae:	4628      	mov	r0, r5
  4046b0:	47b0      	blx	r6
  4046b2:	1c43      	adds	r3, r0, #1
  4046b4:	89a3      	ldrh	r3, [r4, #12]
  4046b6:	d106      	bne.n	4046c6 <__sflush_r+0x8e>
  4046b8:	6829      	ldr	r1, [r5, #0]
  4046ba:	291d      	cmp	r1, #29
  4046bc:	d83a      	bhi.n	404734 <__sflush_r+0xfc>
  4046be:	4a21      	ldr	r2, [pc, #132]	; (404744 <__sflush_r+0x10c>)
  4046c0:	40ca      	lsrs	r2, r1
  4046c2:	07d6      	lsls	r6, r2, #31
  4046c4:	d536      	bpl.n	404734 <__sflush_r+0xfc>
  4046c6:	2200      	movs	r2, #0
  4046c8:	6062      	str	r2, [r4, #4]
  4046ca:	04d9      	lsls	r1, r3, #19
  4046cc:	6922      	ldr	r2, [r4, #16]
  4046ce:	6022      	str	r2, [r4, #0]
  4046d0:	d504      	bpl.n	4046dc <__sflush_r+0xa4>
  4046d2:	1c42      	adds	r2, r0, #1
  4046d4:	d101      	bne.n	4046da <__sflush_r+0xa2>
  4046d6:	682b      	ldr	r3, [r5, #0]
  4046d8:	b903      	cbnz	r3, 4046dc <__sflush_r+0xa4>
  4046da:	6560      	str	r0, [r4, #84]	; 0x54
  4046dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4046de:	602f      	str	r7, [r5, #0]
  4046e0:	2900      	cmp	r1, #0
  4046e2:	d0ce      	beq.n	404682 <__sflush_r+0x4a>
  4046e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4046e8:	4299      	cmp	r1, r3
  4046ea:	d002      	beq.n	4046f2 <__sflush_r+0xba>
  4046ec:	4628      	mov	r0, r5
  4046ee:	f000 fce3 	bl	4050b8 <_free_r>
  4046f2:	2000      	movs	r0, #0
  4046f4:	6360      	str	r0, [r4, #52]	; 0x34
  4046f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4046fa:	690f      	ldr	r7, [r1, #16]
  4046fc:	2f00      	cmp	r7, #0
  4046fe:	d0c0      	beq.n	404682 <__sflush_r+0x4a>
  404700:	0793      	lsls	r3, r2, #30
  404702:	680e      	ldr	r6, [r1, #0]
  404704:	bf08      	it	eq
  404706:	694b      	ldreq	r3, [r1, #20]
  404708:	600f      	str	r7, [r1, #0]
  40470a:	bf18      	it	ne
  40470c:	2300      	movne	r3, #0
  40470e:	ebc7 0806 	rsb	r8, r7, r6
  404712:	608b      	str	r3, [r1, #8]
  404714:	e002      	b.n	40471c <__sflush_r+0xe4>
  404716:	4407      	add	r7, r0
  404718:	ebc0 0808 	rsb	r8, r0, r8
  40471c:	f1b8 0f00 	cmp.w	r8, #0
  404720:	ddaf      	ble.n	404682 <__sflush_r+0x4a>
  404722:	4643      	mov	r3, r8
  404724:	463a      	mov	r2, r7
  404726:	6a21      	ldr	r1, [r4, #32]
  404728:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  40472a:	4628      	mov	r0, r5
  40472c:	47b0      	blx	r6
  40472e:	2800      	cmp	r0, #0
  404730:	dcf1      	bgt.n	404716 <__sflush_r+0xde>
  404732:	89a3      	ldrh	r3, [r4, #12]
  404734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404738:	81a3      	strh	r3, [r4, #12]
  40473a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  40473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404742:	bf00      	nop
  404744:	20400001 	.word	0x20400001

00404748 <_fflush_r>:
  404748:	b538      	push	{r3, r4, r5, lr}
  40474a:	690b      	ldr	r3, [r1, #16]
  40474c:	4605      	mov	r5, r0
  40474e:	460c      	mov	r4, r1
  404750:	b1db      	cbz	r3, 40478a <_fflush_r+0x42>
  404752:	b118      	cbz	r0, 40475c <_fflush_r+0x14>
  404754:	6983      	ldr	r3, [r0, #24]
  404756:	b90b      	cbnz	r3, 40475c <_fflush_r+0x14>
  404758:	f000 f860 	bl	40481c <__sinit>
  40475c:	4b0c      	ldr	r3, [pc, #48]	; (404790 <_fflush_r+0x48>)
  40475e:	429c      	cmp	r4, r3
  404760:	d101      	bne.n	404766 <_fflush_r+0x1e>
  404762:	686c      	ldr	r4, [r5, #4]
  404764:	e008      	b.n	404778 <_fflush_r+0x30>
  404766:	4b0b      	ldr	r3, [pc, #44]	; (404794 <_fflush_r+0x4c>)
  404768:	429c      	cmp	r4, r3
  40476a:	d101      	bne.n	404770 <_fflush_r+0x28>
  40476c:	68ac      	ldr	r4, [r5, #8]
  40476e:	e003      	b.n	404778 <_fflush_r+0x30>
  404770:	4b09      	ldr	r3, [pc, #36]	; (404798 <_fflush_r+0x50>)
  404772:	429c      	cmp	r4, r3
  404774:	bf08      	it	eq
  404776:	68ec      	ldreq	r4, [r5, #12]
  404778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40477c:	b12b      	cbz	r3, 40478a <_fflush_r+0x42>
  40477e:	4621      	mov	r1, r4
  404780:	4628      	mov	r0, r5
  404782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404786:	f7ff bf57 	b.w	404638 <__sflush_r>
  40478a:	2000      	movs	r0, #0
  40478c:	bd38      	pop	{r3, r4, r5, pc}
  40478e:	bf00      	nop
  404790:	004069f0 	.word	0x004069f0
  404794:	00406a10 	.word	0x00406a10
  404798:	00406a30 	.word	0x00406a30

0040479c <_cleanup_r>:
  40479c:	4901      	ldr	r1, [pc, #4]	; (4047a4 <_cleanup_r+0x8>)
  40479e:	f000 b8a9 	b.w	4048f4 <_fwalk_reent>
  4047a2:	bf00      	nop
  4047a4:	00404749 	.word	0x00404749

004047a8 <std.isra.0>:
  4047a8:	2300      	movs	r3, #0
  4047aa:	b510      	push	{r4, lr}
  4047ac:	4604      	mov	r4, r0
  4047ae:	6003      	str	r3, [r0, #0]
  4047b0:	6043      	str	r3, [r0, #4]
  4047b2:	6083      	str	r3, [r0, #8]
  4047b4:	8181      	strh	r1, [r0, #12]
  4047b6:	6643      	str	r3, [r0, #100]	; 0x64
  4047b8:	81c2      	strh	r2, [r0, #14]
  4047ba:	6103      	str	r3, [r0, #16]
  4047bc:	6143      	str	r3, [r0, #20]
  4047be:	6183      	str	r3, [r0, #24]
  4047c0:	4619      	mov	r1, r3
  4047c2:	2208      	movs	r2, #8
  4047c4:	305c      	adds	r0, #92	; 0x5c
  4047c6:	f7fe f9be 	bl	402b46 <memset>
  4047ca:	4b05      	ldr	r3, [pc, #20]	; (4047e0 <std.isra.0+0x38>)
  4047cc:	6263      	str	r3, [r4, #36]	; 0x24
  4047ce:	4b05      	ldr	r3, [pc, #20]	; (4047e4 <std.isra.0+0x3c>)
  4047d0:	62a3      	str	r3, [r4, #40]	; 0x28
  4047d2:	4b05      	ldr	r3, [pc, #20]	; (4047e8 <std.isra.0+0x40>)
  4047d4:	62e3      	str	r3, [r4, #44]	; 0x2c
  4047d6:	4b05      	ldr	r3, [pc, #20]	; (4047ec <std.isra.0+0x44>)
  4047d8:	6224      	str	r4, [r4, #32]
  4047da:	6323      	str	r3, [r4, #48]	; 0x30
  4047dc:	bd10      	pop	{r4, pc}
  4047de:	bf00      	nop
  4047e0:	004054b9 	.word	0x004054b9
  4047e4:	004054db 	.word	0x004054db
  4047e8:	00405513 	.word	0x00405513
  4047ec:	00405537 	.word	0x00405537

004047f0 <__sfmoreglue>:
  4047f0:	b570      	push	{r4, r5, r6, lr}
  4047f2:	2368      	movs	r3, #104	; 0x68
  4047f4:	1e4d      	subs	r5, r1, #1
  4047f6:	435d      	muls	r5, r3
  4047f8:	460e      	mov	r6, r1
  4047fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
  4047fe:	f000 fca9 	bl	405154 <_malloc_r>
  404802:	4604      	mov	r4, r0
  404804:	b140      	cbz	r0, 404818 <__sfmoreglue+0x28>
  404806:	2100      	movs	r1, #0
  404808:	e880 0042 	stmia.w	r0, {r1, r6}
  40480c:	300c      	adds	r0, #12
  40480e:	60a0      	str	r0, [r4, #8]
  404810:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404814:	f7fe f997 	bl	402b46 <memset>
  404818:	4620      	mov	r0, r4
  40481a:	bd70      	pop	{r4, r5, r6, pc}

0040481c <__sinit>:
  40481c:	6983      	ldr	r3, [r0, #24]
  40481e:	b510      	push	{r4, lr}
  404820:	4604      	mov	r4, r0
  404822:	bb33      	cbnz	r3, 404872 <__sinit+0x56>
  404824:	6483      	str	r3, [r0, #72]	; 0x48
  404826:	64c3      	str	r3, [r0, #76]	; 0x4c
  404828:	6503      	str	r3, [r0, #80]	; 0x50
  40482a:	4b12      	ldr	r3, [pc, #72]	; (404874 <__sinit+0x58>)
  40482c:	4a12      	ldr	r2, [pc, #72]	; (404878 <__sinit+0x5c>)
  40482e:	681b      	ldr	r3, [r3, #0]
  404830:	6282      	str	r2, [r0, #40]	; 0x28
  404832:	4298      	cmp	r0, r3
  404834:	bf04      	itt	eq
  404836:	2301      	moveq	r3, #1
  404838:	6183      	streq	r3, [r0, #24]
  40483a:	f000 f81f 	bl	40487c <__sfp>
  40483e:	6060      	str	r0, [r4, #4]
  404840:	4620      	mov	r0, r4
  404842:	f000 f81b 	bl	40487c <__sfp>
  404846:	60a0      	str	r0, [r4, #8]
  404848:	4620      	mov	r0, r4
  40484a:	f000 f817 	bl	40487c <__sfp>
  40484e:	2200      	movs	r2, #0
  404850:	60e0      	str	r0, [r4, #12]
  404852:	2104      	movs	r1, #4
  404854:	6860      	ldr	r0, [r4, #4]
  404856:	f7ff ffa7 	bl	4047a8 <std.isra.0>
  40485a:	2201      	movs	r2, #1
  40485c:	2109      	movs	r1, #9
  40485e:	68a0      	ldr	r0, [r4, #8]
  404860:	f7ff ffa2 	bl	4047a8 <std.isra.0>
  404864:	2202      	movs	r2, #2
  404866:	2112      	movs	r1, #18
  404868:	68e0      	ldr	r0, [r4, #12]
  40486a:	f7ff ff9d 	bl	4047a8 <std.isra.0>
  40486e:	2301      	movs	r3, #1
  404870:	61a3      	str	r3, [r4, #24]
  404872:	bd10      	pop	{r4, pc}
  404874:	004069a8 	.word	0x004069a8
  404878:	0040479d 	.word	0x0040479d

0040487c <__sfp>:
  40487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40487e:	4b1c      	ldr	r3, [pc, #112]	; (4048f0 <__sfp+0x74>)
  404880:	681e      	ldr	r6, [r3, #0]
  404882:	69b3      	ldr	r3, [r6, #24]
  404884:	4607      	mov	r7, r0
  404886:	b913      	cbnz	r3, 40488e <__sfp+0x12>
  404888:	4630      	mov	r0, r6
  40488a:	f7ff ffc7 	bl	40481c <__sinit>
  40488e:	3648      	adds	r6, #72	; 0x48
  404890:	68b4      	ldr	r4, [r6, #8]
  404892:	6873      	ldr	r3, [r6, #4]
  404894:	3b01      	subs	r3, #1
  404896:	d404      	bmi.n	4048a2 <__sfp+0x26>
  404898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40489c:	b17d      	cbz	r5, 4048be <__sfp+0x42>
  40489e:	3468      	adds	r4, #104	; 0x68
  4048a0:	e7f8      	b.n	404894 <__sfp+0x18>
  4048a2:	6833      	ldr	r3, [r6, #0]
  4048a4:	b10b      	cbz	r3, 4048aa <__sfp+0x2e>
  4048a6:	6836      	ldr	r6, [r6, #0]
  4048a8:	e7f2      	b.n	404890 <__sfp+0x14>
  4048aa:	2104      	movs	r1, #4
  4048ac:	4638      	mov	r0, r7
  4048ae:	f7ff ff9f 	bl	4047f0 <__sfmoreglue>
  4048b2:	6030      	str	r0, [r6, #0]
  4048b4:	2800      	cmp	r0, #0
  4048b6:	d1f6      	bne.n	4048a6 <__sfp+0x2a>
  4048b8:	230c      	movs	r3, #12
  4048ba:	603b      	str	r3, [r7, #0]
  4048bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4048be:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4048c2:	81e3      	strh	r3, [r4, #14]
  4048c4:	2301      	movs	r3, #1
  4048c6:	81a3      	strh	r3, [r4, #12]
  4048c8:	6665      	str	r5, [r4, #100]	; 0x64
  4048ca:	6025      	str	r5, [r4, #0]
  4048cc:	60a5      	str	r5, [r4, #8]
  4048ce:	6065      	str	r5, [r4, #4]
  4048d0:	6125      	str	r5, [r4, #16]
  4048d2:	6165      	str	r5, [r4, #20]
  4048d4:	61a5      	str	r5, [r4, #24]
  4048d6:	2208      	movs	r2, #8
  4048d8:	4629      	mov	r1, r5
  4048da:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  4048de:	f7fe f932 	bl	402b46 <memset>
  4048e2:	6365      	str	r5, [r4, #52]	; 0x34
  4048e4:	63a5      	str	r5, [r4, #56]	; 0x38
  4048e6:	64a5      	str	r5, [r4, #72]	; 0x48
  4048e8:	64e5      	str	r5, [r4, #76]	; 0x4c
  4048ea:	4620      	mov	r0, r4
  4048ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4048ee:	bf00      	nop
  4048f0:	004069a8 	.word	0x004069a8

004048f4 <_fwalk_reent>:
  4048f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4048f8:	4680      	mov	r8, r0
  4048fa:	4689      	mov	r9, r1
  4048fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404900:	2600      	movs	r6, #0
  404902:	b194      	cbz	r4, 40492a <_fwalk_reent+0x36>
  404904:	68a5      	ldr	r5, [r4, #8]
  404906:	6867      	ldr	r7, [r4, #4]
  404908:	3f01      	subs	r7, #1
  40490a:	d40c      	bmi.n	404926 <_fwalk_reent+0x32>
  40490c:	89ab      	ldrh	r3, [r5, #12]
  40490e:	2b01      	cmp	r3, #1
  404910:	d907      	bls.n	404922 <_fwalk_reent+0x2e>
  404912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404916:	3301      	adds	r3, #1
  404918:	d003      	beq.n	404922 <_fwalk_reent+0x2e>
  40491a:	4629      	mov	r1, r5
  40491c:	4640      	mov	r0, r8
  40491e:	47c8      	blx	r9
  404920:	4306      	orrs	r6, r0
  404922:	3568      	adds	r5, #104	; 0x68
  404924:	e7f0      	b.n	404908 <_fwalk_reent+0x14>
  404926:	6824      	ldr	r4, [r4, #0]
  404928:	e7eb      	b.n	404902 <_fwalk_reent+0xe>
  40492a:	4630      	mov	r0, r6
  40492c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00404930 <__locale_ctype_ptr_l>:
  404930:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
  404934:	4770      	bx	lr
	...

00404938 <_localeconv_r>:
  404938:	4b04      	ldr	r3, [pc, #16]	; (40494c <_localeconv_r+0x14>)
  40493a:	681b      	ldr	r3, [r3, #0]
  40493c:	6a18      	ldr	r0, [r3, #32]
  40493e:	4b04      	ldr	r3, [pc, #16]	; (404950 <_localeconv_r+0x18>)
  404940:	2800      	cmp	r0, #0
  404942:	bf08      	it	eq
  404944:	4618      	moveq	r0, r3
  404946:	30f0      	adds	r0, #240	; 0xf0
  404948:	4770      	bx	lr
  40494a:	bf00      	nop
  40494c:	20000078 	.word	0x20000078
  404950:	2000007c 	.word	0x2000007c

00404954 <__swhatbuf_r>:
  404954:	b570      	push	{r4, r5, r6, lr}
  404956:	460e      	mov	r6, r1
  404958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40495c:	2900      	cmp	r1, #0
  40495e:	b090      	sub	sp, #64	; 0x40
  404960:	4614      	mov	r4, r2
  404962:	461d      	mov	r5, r3
  404964:	da06      	bge.n	404974 <__swhatbuf_r+0x20>
  404966:	2300      	movs	r3, #0
  404968:	602b      	str	r3, [r5, #0]
  40496a:	89b3      	ldrh	r3, [r6, #12]
  40496c:	061a      	lsls	r2, r3, #24
  40496e:	d50e      	bpl.n	40498e <__swhatbuf_r+0x3a>
  404970:	2340      	movs	r3, #64	; 0x40
  404972:	e00e      	b.n	404992 <__swhatbuf_r+0x3e>
  404974:	aa01      	add	r2, sp, #4
  404976:	f000 fe11 	bl	40559c <_fstat_r>
  40497a:	2800      	cmp	r0, #0
  40497c:	dbf3      	blt.n	404966 <__swhatbuf_r+0x12>
  40497e:	9a02      	ldr	r2, [sp, #8]
  404980:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404984:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404988:	425a      	negs	r2, r3
  40498a:	415a      	adcs	r2, r3
  40498c:	602a      	str	r2, [r5, #0]
  40498e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404992:	2000      	movs	r0, #0
  404994:	6023      	str	r3, [r4, #0]
  404996:	b010      	add	sp, #64	; 0x40
  404998:	bd70      	pop	{r4, r5, r6, pc}
	...

0040499c <__smakebuf_r>:
  40499c:	898b      	ldrh	r3, [r1, #12]
  40499e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4049a0:	079e      	lsls	r6, r3, #30
  4049a2:	4605      	mov	r5, r0
  4049a4:	460c      	mov	r4, r1
  4049a6:	d410      	bmi.n	4049ca <__smakebuf_r+0x2e>
  4049a8:	ab01      	add	r3, sp, #4
  4049aa:	466a      	mov	r2, sp
  4049ac:	f7ff ffd2 	bl	404954 <__swhatbuf_r>
  4049b0:	9900      	ldr	r1, [sp, #0]
  4049b2:	4606      	mov	r6, r0
  4049b4:	4628      	mov	r0, r5
  4049b6:	f000 fbcd 	bl	405154 <_malloc_r>
  4049ba:	b968      	cbnz	r0, 4049d8 <__smakebuf_r+0x3c>
  4049bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049c0:	059a      	lsls	r2, r3, #22
  4049c2:	d422      	bmi.n	404a0a <__smakebuf_r+0x6e>
  4049c4:	f043 0302 	orr.w	r3, r3, #2
  4049c8:	81a3      	strh	r3, [r4, #12]
  4049ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
  4049ce:	6023      	str	r3, [r4, #0]
  4049d0:	6123      	str	r3, [r4, #16]
  4049d2:	2301      	movs	r3, #1
  4049d4:	6163      	str	r3, [r4, #20]
  4049d6:	e018      	b.n	404a0a <__smakebuf_r+0x6e>
  4049d8:	4b0d      	ldr	r3, [pc, #52]	; (404a10 <__smakebuf_r+0x74>)
  4049da:	62ab      	str	r3, [r5, #40]	; 0x28
  4049dc:	89a3      	ldrh	r3, [r4, #12]
  4049de:	6020      	str	r0, [r4, #0]
  4049e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4049e4:	81a3      	strh	r3, [r4, #12]
  4049e6:	9b00      	ldr	r3, [sp, #0]
  4049e8:	6163      	str	r3, [r4, #20]
  4049ea:	9b01      	ldr	r3, [sp, #4]
  4049ec:	6120      	str	r0, [r4, #16]
  4049ee:	b14b      	cbz	r3, 404a04 <__smakebuf_r+0x68>
  4049f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4049f4:	4628      	mov	r0, r5
  4049f6:	f000 fde3 	bl	4055c0 <_isatty_r>
  4049fa:	b118      	cbz	r0, 404a04 <__smakebuf_r+0x68>
  4049fc:	89a3      	ldrh	r3, [r4, #12]
  4049fe:	f043 0301 	orr.w	r3, r3, #1
  404a02:	81a3      	strh	r3, [r4, #12]
  404a04:	89a0      	ldrh	r0, [r4, #12]
  404a06:	4330      	orrs	r0, r6
  404a08:	81a0      	strh	r0, [r4, #12]
  404a0a:	b002      	add	sp, #8
  404a0c:	bd70      	pop	{r4, r5, r6, pc}
  404a0e:	bf00      	nop
  404a10:	0040479d 	.word	0x0040479d

00404a14 <malloc>:
  404a14:	4b02      	ldr	r3, [pc, #8]	; (404a20 <malloc+0xc>)
  404a16:	4601      	mov	r1, r0
  404a18:	6818      	ldr	r0, [r3, #0]
  404a1a:	f000 bb9b 	b.w	405154 <_malloc_r>
  404a1e:	bf00      	nop
  404a20:	20000078 	.word	0x20000078

00404a24 <__ascii_mbtowc>:
  404a24:	b082      	sub	sp, #8
  404a26:	b901      	cbnz	r1, 404a2a <__ascii_mbtowc+0x6>
  404a28:	a901      	add	r1, sp, #4
  404a2a:	b13a      	cbz	r2, 404a3c <__ascii_mbtowc+0x18>
  404a2c:	b143      	cbz	r3, 404a40 <__ascii_mbtowc+0x1c>
  404a2e:	7813      	ldrb	r3, [r2, #0]
  404a30:	600b      	str	r3, [r1, #0]
  404a32:	7812      	ldrb	r2, [r2, #0]
  404a34:	1c10      	adds	r0, r2, #0
  404a36:	bf18      	it	ne
  404a38:	2001      	movne	r0, #1
  404a3a:	e003      	b.n	404a44 <__ascii_mbtowc+0x20>
  404a3c:	4610      	mov	r0, r2
  404a3e:	e001      	b.n	404a44 <__ascii_mbtowc+0x20>
  404a40:	f06f 0001 	mvn.w	r0, #1
  404a44:	b002      	add	sp, #8
  404a46:	4770      	bx	lr
	...

00404a50 <memchr>:
  404a50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404a54:	2a10      	cmp	r2, #16
  404a56:	db2b      	blt.n	404ab0 <memchr+0x60>
  404a58:	f010 0f07 	tst.w	r0, #7
  404a5c:	d008      	beq.n	404a70 <memchr+0x20>
  404a5e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404a62:	3a01      	subs	r2, #1
  404a64:	428b      	cmp	r3, r1
  404a66:	d02d      	beq.n	404ac4 <memchr+0x74>
  404a68:	f010 0f07 	tst.w	r0, #7
  404a6c:	b342      	cbz	r2, 404ac0 <memchr+0x70>
  404a6e:	d1f6      	bne.n	404a5e <memchr+0xe>
  404a70:	b4f0      	push	{r4, r5, r6, r7}
  404a72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404a76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404a7a:	f022 0407 	bic.w	r4, r2, #7
  404a7e:	f07f 0700 	mvns.w	r7, #0
  404a82:	2300      	movs	r3, #0
  404a84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404a88:	3c08      	subs	r4, #8
  404a8a:	ea85 0501 	eor.w	r5, r5, r1
  404a8e:	ea86 0601 	eor.w	r6, r6, r1
  404a92:	fa85 f547 	uadd8	r5, r5, r7
  404a96:	faa3 f587 	sel	r5, r3, r7
  404a9a:	fa86 f647 	uadd8	r6, r6, r7
  404a9e:	faa5 f687 	sel	r6, r5, r7
  404aa2:	b98e      	cbnz	r6, 404ac8 <memchr+0x78>
  404aa4:	d1ee      	bne.n	404a84 <memchr+0x34>
  404aa6:	bcf0      	pop	{r4, r5, r6, r7}
  404aa8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404aac:	f002 0207 	and.w	r2, r2, #7
  404ab0:	b132      	cbz	r2, 404ac0 <memchr+0x70>
  404ab2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ab6:	3a01      	subs	r2, #1
  404ab8:	ea83 0301 	eor.w	r3, r3, r1
  404abc:	b113      	cbz	r3, 404ac4 <memchr+0x74>
  404abe:	d1f8      	bne.n	404ab2 <memchr+0x62>
  404ac0:	2000      	movs	r0, #0
  404ac2:	4770      	bx	lr
  404ac4:	3801      	subs	r0, #1
  404ac6:	4770      	bx	lr
  404ac8:	2d00      	cmp	r5, #0
  404aca:	bf06      	itte	eq
  404acc:	4635      	moveq	r5, r6
  404ace:	3803      	subeq	r0, #3
  404ad0:	3807      	subne	r0, #7
  404ad2:	f015 0f01 	tst.w	r5, #1
  404ad6:	d107      	bne.n	404ae8 <memchr+0x98>
  404ad8:	3001      	adds	r0, #1
  404ada:	f415 7f80 	tst.w	r5, #256	; 0x100
  404ade:	bf02      	ittt	eq
  404ae0:	3001      	addeq	r0, #1
  404ae2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404ae6:	3001      	addeq	r0, #1
  404ae8:	bcf0      	pop	{r4, r5, r6, r7}
  404aea:	3801      	subs	r0, #1
  404aec:	4770      	bx	lr
  404aee:	bf00      	nop

00404af0 <_Balloc>:
  404af0:	b570      	push	{r4, r5, r6, lr}
  404af2:	6a45      	ldr	r5, [r0, #36]	; 0x24
  404af4:	4604      	mov	r4, r0
  404af6:	460e      	mov	r6, r1
  404af8:	b93d      	cbnz	r5, 404b0a <_Balloc+0x1a>
  404afa:	2010      	movs	r0, #16
  404afc:	f7ff ff8a 	bl	404a14 <malloc>
  404b00:	6260      	str	r0, [r4, #36]	; 0x24
  404b02:	6045      	str	r5, [r0, #4]
  404b04:	6085      	str	r5, [r0, #8]
  404b06:	6005      	str	r5, [r0, #0]
  404b08:	60c5      	str	r5, [r0, #12]
  404b0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404b0c:	68eb      	ldr	r3, [r5, #12]
  404b0e:	b143      	cbz	r3, 404b22 <_Balloc+0x32>
  404b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404b12:	68db      	ldr	r3, [r3, #12]
  404b14:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  404b18:	b178      	cbz	r0, 404b3a <_Balloc+0x4a>
  404b1a:	6802      	ldr	r2, [r0, #0]
  404b1c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404b20:	e017      	b.n	404b52 <_Balloc+0x62>
  404b22:	2221      	movs	r2, #33	; 0x21
  404b24:	2104      	movs	r1, #4
  404b26:	4620      	mov	r0, r4
  404b28:	f000 fab8 	bl	40509c <_calloc_r>
  404b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404b2e:	60e8      	str	r0, [r5, #12]
  404b30:	68db      	ldr	r3, [r3, #12]
  404b32:	2b00      	cmp	r3, #0
  404b34:	d1ec      	bne.n	404b10 <_Balloc+0x20>
  404b36:	2000      	movs	r0, #0
  404b38:	bd70      	pop	{r4, r5, r6, pc}
  404b3a:	2101      	movs	r1, #1
  404b3c:	fa01 f506 	lsl.w	r5, r1, r6
  404b40:	1d6a      	adds	r2, r5, #5
  404b42:	0092      	lsls	r2, r2, #2
  404b44:	4620      	mov	r0, r4
  404b46:	f000 faa9 	bl	40509c <_calloc_r>
  404b4a:	2800      	cmp	r0, #0
  404b4c:	d0f3      	beq.n	404b36 <_Balloc+0x46>
  404b4e:	6046      	str	r6, [r0, #4]
  404b50:	6085      	str	r5, [r0, #8]
  404b52:	2300      	movs	r3, #0
  404b54:	6103      	str	r3, [r0, #16]
  404b56:	60c3      	str	r3, [r0, #12]
  404b58:	bd70      	pop	{r4, r5, r6, pc}

00404b5a <_Bfree>:
  404b5a:	b570      	push	{r4, r5, r6, lr}
  404b5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  404b5e:	4606      	mov	r6, r0
  404b60:	460d      	mov	r5, r1
  404b62:	b93c      	cbnz	r4, 404b74 <_Bfree+0x1a>
  404b64:	2010      	movs	r0, #16
  404b66:	f7ff ff55 	bl	404a14 <malloc>
  404b6a:	6270      	str	r0, [r6, #36]	; 0x24
  404b6c:	6044      	str	r4, [r0, #4]
  404b6e:	6084      	str	r4, [r0, #8]
  404b70:	6004      	str	r4, [r0, #0]
  404b72:	60c4      	str	r4, [r0, #12]
  404b74:	b13d      	cbz	r5, 404b86 <_Bfree+0x2c>
  404b76:	6a73      	ldr	r3, [r6, #36]	; 0x24
  404b78:	686a      	ldr	r2, [r5, #4]
  404b7a:	68db      	ldr	r3, [r3, #12]
  404b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404b80:	6029      	str	r1, [r5, #0]
  404b82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404b86:	bd70      	pop	{r4, r5, r6, pc}

00404b88 <__multadd>:
  404b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b8c:	690d      	ldr	r5, [r1, #16]
  404b8e:	461f      	mov	r7, r3
  404b90:	4606      	mov	r6, r0
  404b92:	460c      	mov	r4, r1
  404b94:	f101 0e14 	add.w	lr, r1, #20
  404b98:	2300      	movs	r3, #0
  404b9a:	f8de 0000 	ldr.w	r0, [lr]
  404b9e:	b281      	uxth	r1, r0
  404ba0:	fb02 7101 	mla	r1, r2, r1, r7
  404ba4:	0c0f      	lsrs	r7, r1, #16
  404ba6:	0c00      	lsrs	r0, r0, #16
  404ba8:	fb02 7000 	mla	r0, r2, r0, r7
  404bac:	b289      	uxth	r1, r1
  404bae:	3301      	adds	r3, #1
  404bb0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  404bb4:	429d      	cmp	r5, r3
  404bb6:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404bba:	f84e 1b04 	str.w	r1, [lr], #4
  404bbe:	dcec      	bgt.n	404b9a <__multadd+0x12>
  404bc0:	b1d7      	cbz	r7, 404bf8 <__multadd+0x70>
  404bc2:	68a3      	ldr	r3, [r4, #8]
  404bc4:	429d      	cmp	r5, r3
  404bc6:	db12      	blt.n	404bee <__multadd+0x66>
  404bc8:	6861      	ldr	r1, [r4, #4]
  404bca:	4630      	mov	r0, r6
  404bcc:	3101      	adds	r1, #1
  404bce:	f7ff ff8f 	bl	404af0 <_Balloc>
  404bd2:	6922      	ldr	r2, [r4, #16]
  404bd4:	3202      	adds	r2, #2
  404bd6:	f104 010c 	add.w	r1, r4, #12
  404bda:	4680      	mov	r8, r0
  404bdc:	0092      	lsls	r2, r2, #2
  404bde:	300c      	adds	r0, #12
  404be0:	f7fd ffa6 	bl	402b30 <memcpy>
  404be4:	4621      	mov	r1, r4
  404be6:	4630      	mov	r0, r6
  404be8:	f7ff ffb7 	bl	404b5a <_Bfree>
  404bec:	4644      	mov	r4, r8
  404bee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404bf2:	3501      	adds	r5, #1
  404bf4:	615f      	str	r7, [r3, #20]
  404bf6:	6125      	str	r5, [r4, #16]
  404bf8:	4620      	mov	r0, r4
  404bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404bfe <__hi0bits>:
  404bfe:	0c03      	lsrs	r3, r0, #16
  404c00:	041b      	lsls	r3, r3, #16
  404c02:	b913      	cbnz	r3, 404c0a <__hi0bits+0xc>
  404c04:	0400      	lsls	r0, r0, #16
  404c06:	2310      	movs	r3, #16
  404c08:	e000      	b.n	404c0c <__hi0bits+0xe>
  404c0a:	2300      	movs	r3, #0
  404c0c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  404c10:	bf04      	itt	eq
  404c12:	0200      	lsleq	r0, r0, #8
  404c14:	3308      	addeq	r3, #8
  404c16:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  404c1a:	bf04      	itt	eq
  404c1c:	0100      	lsleq	r0, r0, #4
  404c1e:	3304      	addeq	r3, #4
  404c20:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  404c24:	bf04      	itt	eq
  404c26:	0080      	lsleq	r0, r0, #2
  404c28:	3302      	addeq	r3, #2
  404c2a:	2800      	cmp	r0, #0
  404c2c:	db03      	blt.n	404c36 <__hi0bits+0x38>
  404c2e:	0042      	lsls	r2, r0, #1
  404c30:	d503      	bpl.n	404c3a <__hi0bits+0x3c>
  404c32:	1c58      	adds	r0, r3, #1
  404c34:	4770      	bx	lr
  404c36:	4618      	mov	r0, r3
  404c38:	4770      	bx	lr
  404c3a:	2020      	movs	r0, #32
  404c3c:	4770      	bx	lr

00404c3e <__lo0bits>:
  404c3e:	6803      	ldr	r3, [r0, #0]
  404c40:	f013 0207 	ands.w	r2, r3, #7
  404c44:	d00b      	beq.n	404c5e <__lo0bits+0x20>
  404c46:	07d9      	lsls	r1, r3, #31
  404c48:	d422      	bmi.n	404c90 <__lo0bits+0x52>
  404c4a:	079a      	lsls	r2, r3, #30
  404c4c:	bf4b      	itete	mi
  404c4e:	085b      	lsrmi	r3, r3, #1
  404c50:	089b      	lsrpl	r3, r3, #2
  404c52:	6003      	strmi	r3, [r0, #0]
  404c54:	6003      	strpl	r3, [r0, #0]
  404c56:	bf4c      	ite	mi
  404c58:	2001      	movmi	r0, #1
  404c5a:	2002      	movpl	r0, #2
  404c5c:	4770      	bx	lr
  404c5e:	b299      	uxth	r1, r3
  404c60:	b909      	cbnz	r1, 404c66 <__lo0bits+0x28>
  404c62:	0c1b      	lsrs	r3, r3, #16
  404c64:	2210      	movs	r2, #16
  404c66:	f013 0fff 	tst.w	r3, #255	; 0xff
  404c6a:	bf04      	itt	eq
  404c6c:	0a1b      	lsreq	r3, r3, #8
  404c6e:	3208      	addeq	r2, #8
  404c70:	0719      	lsls	r1, r3, #28
  404c72:	bf04      	itt	eq
  404c74:	091b      	lsreq	r3, r3, #4
  404c76:	3204      	addeq	r2, #4
  404c78:	0799      	lsls	r1, r3, #30
  404c7a:	bf04      	itt	eq
  404c7c:	089b      	lsreq	r3, r3, #2
  404c7e:	3202      	addeq	r2, #2
  404c80:	07d9      	lsls	r1, r3, #31
  404c82:	d402      	bmi.n	404c8a <__lo0bits+0x4c>
  404c84:	085b      	lsrs	r3, r3, #1
  404c86:	d005      	beq.n	404c94 <__lo0bits+0x56>
  404c88:	3201      	adds	r2, #1
  404c8a:	6003      	str	r3, [r0, #0]
  404c8c:	4610      	mov	r0, r2
  404c8e:	4770      	bx	lr
  404c90:	2000      	movs	r0, #0
  404c92:	4770      	bx	lr
  404c94:	2020      	movs	r0, #32
  404c96:	4770      	bx	lr

00404c98 <__i2b>:
  404c98:	b510      	push	{r4, lr}
  404c9a:	460c      	mov	r4, r1
  404c9c:	2101      	movs	r1, #1
  404c9e:	f7ff ff27 	bl	404af0 <_Balloc>
  404ca2:	2201      	movs	r2, #1
  404ca4:	6144      	str	r4, [r0, #20]
  404ca6:	6102      	str	r2, [r0, #16]
  404ca8:	bd10      	pop	{r4, pc}

00404caa <__multiply>:
  404caa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404cae:	4614      	mov	r4, r2
  404cb0:	690a      	ldr	r2, [r1, #16]
  404cb2:	6923      	ldr	r3, [r4, #16]
  404cb4:	429a      	cmp	r2, r3
  404cb6:	bfb8      	it	lt
  404cb8:	460b      	movlt	r3, r1
  404cba:	4688      	mov	r8, r1
  404cbc:	bfbc      	itt	lt
  404cbe:	46a0      	movlt	r8, r4
  404cc0:	461c      	movlt	r4, r3
  404cc2:	f8d8 7010 	ldr.w	r7, [r8, #16]
  404cc6:	f8d4 9010 	ldr.w	r9, [r4, #16]
  404cca:	f8d8 3008 	ldr.w	r3, [r8, #8]
  404cce:	f8d8 1004 	ldr.w	r1, [r8, #4]
  404cd2:	eb07 0609 	add.w	r6, r7, r9
  404cd6:	429e      	cmp	r6, r3
  404cd8:	bfc8      	it	gt
  404cda:	3101      	addgt	r1, #1
  404cdc:	f7ff ff08 	bl	404af0 <_Balloc>
  404ce0:	f100 0514 	add.w	r5, r0, #20
  404ce4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  404ce8:	462b      	mov	r3, r5
  404cea:	2200      	movs	r2, #0
  404cec:	4563      	cmp	r3, ip
  404cee:	d202      	bcs.n	404cf6 <__multiply+0x4c>
  404cf0:	f843 2b04 	str.w	r2, [r3], #4
  404cf4:	e7fa      	b.n	404cec <__multiply+0x42>
  404cf6:	f104 0214 	add.w	r2, r4, #20
  404cfa:	f108 0114 	add.w	r1, r8, #20
  404cfe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  404d02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  404d06:	9300      	str	r3, [sp, #0]
  404d08:	9b00      	ldr	r3, [sp, #0]
  404d0a:	9201      	str	r2, [sp, #4]
  404d0c:	4293      	cmp	r3, r2
  404d0e:	d957      	bls.n	404dc0 <__multiply+0x116>
  404d10:	f8b2 b000 	ldrh.w	fp, [r2]
  404d14:	f1bb 0f00 	cmp.w	fp, #0
  404d18:	d023      	beq.n	404d62 <__multiply+0xb8>
  404d1a:	4689      	mov	r9, r1
  404d1c:	46ae      	mov	lr, r5
  404d1e:	f04f 0800 	mov.w	r8, #0
  404d22:	f859 4b04 	ldr.w	r4, [r9], #4
  404d26:	f8be a000 	ldrh.w	sl, [lr]
  404d2a:	b2a3      	uxth	r3, r4
  404d2c:	fb0b a303 	mla	r3, fp, r3, sl
  404d30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  404d34:	f8de 4000 	ldr.w	r4, [lr]
  404d38:	4443      	add	r3, r8
  404d3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
  404d3e:	fb0b 840a 	mla	r4, fp, sl, r8
  404d42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  404d46:	46f2      	mov	sl, lr
  404d48:	b29b      	uxth	r3, r3
  404d4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404d4e:	454f      	cmp	r7, r9
  404d50:	ea4f 4814 	mov.w	r8, r4, lsr #16
  404d54:	f84a 3b04 	str.w	r3, [sl], #4
  404d58:	d901      	bls.n	404d5e <__multiply+0xb4>
  404d5a:	46d6      	mov	lr, sl
  404d5c:	e7e1      	b.n	404d22 <__multiply+0x78>
  404d5e:	f8ce 8004 	str.w	r8, [lr, #4]
  404d62:	9b01      	ldr	r3, [sp, #4]
  404d64:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  404d68:	3204      	adds	r2, #4
  404d6a:	f1ba 0f00 	cmp.w	sl, #0
  404d6e:	d021      	beq.n	404db4 <__multiply+0x10a>
  404d70:	682b      	ldr	r3, [r5, #0]
  404d72:	462c      	mov	r4, r5
  404d74:	4689      	mov	r9, r1
  404d76:	f04f 0800 	mov.w	r8, #0
  404d7a:	f8b9 e000 	ldrh.w	lr, [r9]
  404d7e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  404d82:	fb0a be0e 	mla	lr, sl, lr, fp
  404d86:	44f0      	add	r8, lr
  404d88:	46a3      	mov	fp, r4
  404d8a:	b29b      	uxth	r3, r3
  404d8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404d90:	f84b 3b04 	str.w	r3, [fp], #4
  404d94:	f859 3b04 	ldr.w	r3, [r9], #4
  404d98:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  404d9c:	0c1b      	lsrs	r3, r3, #16
  404d9e:	fb0a e303 	mla	r3, sl, r3, lr
  404da2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  404da6:	454f      	cmp	r7, r9
  404da8:	ea4f 4813 	mov.w	r8, r3, lsr #16
  404dac:	d901      	bls.n	404db2 <__multiply+0x108>
  404dae:	465c      	mov	r4, fp
  404db0:	e7e3      	b.n	404d7a <__multiply+0xd0>
  404db2:	6063      	str	r3, [r4, #4]
  404db4:	3504      	adds	r5, #4
  404db6:	e7a7      	b.n	404d08 <__multiply+0x5e>
  404db8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  404dbc:	b913      	cbnz	r3, 404dc4 <__multiply+0x11a>
  404dbe:	3e01      	subs	r6, #1
  404dc0:	2e00      	cmp	r6, #0
  404dc2:	dcf9      	bgt.n	404db8 <__multiply+0x10e>
  404dc4:	6106      	str	r6, [r0, #16]
  404dc6:	b003      	add	sp, #12
  404dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404dcc <__pow5mult>:
  404dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404dd0:	4615      	mov	r5, r2
  404dd2:	f012 0203 	ands.w	r2, r2, #3
  404dd6:	4606      	mov	r6, r0
  404dd8:	460f      	mov	r7, r1
  404dda:	d007      	beq.n	404dec <__pow5mult+0x20>
  404ddc:	3a01      	subs	r2, #1
  404dde:	4c21      	ldr	r4, [pc, #132]	; (404e64 <__pow5mult+0x98>)
  404de0:	2300      	movs	r3, #0
  404de2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  404de6:	f7ff fecf 	bl	404b88 <__multadd>
  404dea:	4607      	mov	r7, r0
  404dec:	10ad      	asrs	r5, r5, #2
  404dee:	d036      	beq.n	404e5e <__pow5mult+0x92>
  404df0:	6a74      	ldr	r4, [r6, #36]	; 0x24
  404df2:	b93c      	cbnz	r4, 404e04 <__pow5mult+0x38>
  404df4:	2010      	movs	r0, #16
  404df6:	f7ff fe0d 	bl	404a14 <malloc>
  404dfa:	6270      	str	r0, [r6, #36]	; 0x24
  404dfc:	6044      	str	r4, [r0, #4]
  404dfe:	6084      	str	r4, [r0, #8]
  404e00:	6004      	str	r4, [r0, #0]
  404e02:	60c4      	str	r4, [r0, #12]
  404e04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  404e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
  404e0c:	b94c      	cbnz	r4, 404e22 <__pow5mult+0x56>
  404e0e:	f240 2171 	movw	r1, #625	; 0x271
  404e12:	4630      	mov	r0, r6
  404e14:	f7ff ff40 	bl	404c98 <__i2b>
  404e18:	2300      	movs	r3, #0
  404e1a:	f8c8 0008 	str.w	r0, [r8, #8]
  404e1e:	4604      	mov	r4, r0
  404e20:	6003      	str	r3, [r0, #0]
  404e22:	f04f 0800 	mov.w	r8, #0
  404e26:	07eb      	lsls	r3, r5, #31
  404e28:	d50a      	bpl.n	404e40 <__pow5mult+0x74>
  404e2a:	4639      	mov	r1, r7
  404e2c:	4622      	mov	r2, r4
  404e2e:	4630      	mov	r0, r6
  404e30:	f7ff ff3b 	bl	404caa <__multiply>
  404e34:	4639      	mov	r1, r7
  404e36:	4681      	mov	r9, r0
  404e38:	4630      	mov	r0, r6
  404e3a:	f7ff fe8e 	bl	404b5a <_Bfree>
  404e3e:	464f      	mov	r7, r9
  404e40:	106d      	asrs	r5, r5, #1
  404e42:	d00c      	beq.n	404e5e <__pow5mult+0x92>
  404e44:	6820      	ldr	r0, [r4, #0]
  404e46:	b108      	cbz	r0, 404e4c <__pow5mult+0x80>
  404e48:	4604      	mov	r4, r0
  404e4a:	e7ec      	b.n	404e26 <__pow5mult+0x5a>
  404e4c:	4622      	mov	r2, r4
  404e4e:	4621      	mov	r1, r4
  404e50:	4630      	mov	r0, r6
  404e52:	f7ff ff2a 	bl	404caa <__multiply>
  404e56:	6020      	str	r0, [r4, #0]
  404e58:	f8c0 8000 	str.w	r8, [r0]
  404e5c:	e7f4      	b.n	404e48 <__pow5mult+0x7c>
  404e5e:	4638      	mov	r0, r7
  404e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404e64:	00406b50 	.word	0x00406b50

00404e68 <__lshift>:
  404e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404e6c:	460c      	mov	r4, r1
  404e6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
  404e72:	6926      	ldr	r6, [r4, #16]
  404e74:	6849      	ldr	r1, [r1, #4]
  404e76:	68a3      	ldr	r3, [r4, #8]
  404e78:	4456      	add	r6, sl
  404e7a:	4607      	mov	r7, r0
  404e7c:	4691      	mov	r9, r2
  404e7e:	1c75      	adds	r5, r6, #1
  404e80:	42ab      	cmp	r3, r5
  404e82:	da02      	bge.n	404e8a <__lshift+0x22>
  404e84:	3101      	adds	r1, #1
  404e86:	005b      	lsls	r3, r3, #1
  404e88:	e7fa      	b.n	404e80 <__lshift+0x18>
  404e8a:	4638      	mov	r0, r7
  404e8c:	f7ff fe30 	bl	404af0 <_Balloc>
  404e90:	2300      	movs	r3, #0
  404e92:	4680      	mov	r8, r0
  404e94:	f100 0114 	add.w	r1, r0, #20
  404e98:	461a      	mov	r2, r3
  404e9a:	4553      	cmp	r3, sl
  404e9c:	da03      	bge.n	404ea6 <__lshift+0x3e>
  404e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404ea2:	3301      	adds	r3, #1
  404ea4:	e7f9      	b.n	404e9a <__lshift+0x32>
  404ea6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  404eaa:	6920      	ldr	r0, [r4, #16]
  404eac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404eb0:	f019 091f 	ands.w	r9, r9, #31
  404eb4:	f104 0114 	add.w	r1, r4, #20
  404eb8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404ebc:	d014      	beq.n	404ee8 <__lshift+0x80>
  404ebe:	f1c9 0c20 	rsb	ip, r9, #32
  404ec2:	2200      	movs	r2, #0
  404ec4:	6808      	ldr	r0, [r1, #0]
  404ec6:	fa00 f009 	lsl.w	r0, r0, r9
  404eca:	4302      	orrs	r2, r0
  404ecc:	469a      	mov	sl, r3
  404ece:	f843 2b04 	str.w	r2, [r3], #4
  404ed2:	f851 2b04 	ldr.w	r2, [r1], #4
  404ed6:	458e      	cmp	lr, r1
  404ed8:	fa22 f20c 	lsr.w	r2, r2, ip
  404edc:	d8f2      	bhi.n	404ec4 <__lshift+0x5c>
  404ede:	f8ca 2004 	str.w	r2, [sl, #4]
  404ee2:	b142      	cbz	r2, 404ef6 <__lshift+0x8e>
  404ee4:	1cb5      	adds	r5, r6, #2
  404ee6:	e006      	b.n	404ef6 <__lshift+0x8e>
  404ee8:	3b04      	subs	r3, #4
  404eea:	f851 2b04 	ldr.w	r2, [r1], #4
  404eee:	f843 2f04 	str.w	r2, [r3, #4]!
  404ef2:	458e      	cmp	lr, r1
  404ef4:	d8f9      	bhi.n	404eea <__lshift+0x82>
  404ef6:	3d01      	subs	r5, #1
  404ef8:	4638      	mov	r0, r7
  404efa:	f8c8 5010 	str.w	r5, [r8, #16]
  404efe:	4621      	mov	r1, r4
  404f00:	f7ff fe2b 	bl	404b5a <_Bfree>
  404f04:	4640      	mov	r0, r8
  404f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404f0a <__mcmp>:
  404f0a:	6903      	ldr	r3, [r0, #16]
  404f0c:	690a      	ldr	r2, [r1, #16]
  404f0e:	1a9b      	subs	r3, r3, r2
  404f10:	b510      	push	{r4, lr}
  404f12:	d111      	bne.n	404f38 <__mcmp+0x2e>
  404f14:	0092      	lsls	r2, r2, #2
  404f16:	3014      	adds	r0, #20
  404f18:	3114      	adds	r1, #20
  404f1a:	1883      	adds	r3, r0, r2
  404f1c:	440a      	add	r2, r1
  404f1e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  404f22:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  404f26:	428c      	cmp	r4, r1
  404f28:	d002      	beq.n	404f30 <__mcmp+0x26>
  404f2a:	d307      	bcc.n	404f3c <__mcmp+0x32>
  404f2c:	2001      	movs	r0, #1
  404f2e:	bd10      	pop	{r4, pc}
  404f30:	4298      	cmp	r0, r3
  404f32:	d3f4      	bcc.n	404f1e <__mcmp+0x14>
  404f34:	2000      	movs	r0, #0
  404f36:	bd10      	pop	{r4, pc}
  404f38:	4618      	mov	r0, r3
  404f3a:	bd10      	pop	{r4, pc}
  404f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404f40:	bd10      	pop	{r4, pc}

00404f42 <__mdiff>:
  404f42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404f46:	460c      	mov	r4, r1
  404f48:	4607      	mov	r7, r0
  404f4a:	4611      	mov	r1, r2
  404f4c:	4620      	mov	r0, r4
  404f4e:	4615      	mov	r5, r2
  404f50:	f7ff ffdb 	bl	404f0a <__mcmp>
  404f54:	1e06      	subs	r6, r0, #0
  404f56:	d108      	bne.n	404f6a <__mdiff+0x28>
  404f58:	4631      	mov	r1, r6
  404f5a:	4638      	mov	r0, r7
  404f5c:	f7ff fdc8 	bl	404af0 <_Balloc>
  404f60:	2301      	movs	r3, #1
  404f62:	6103      	str	r3, [r0, #16]
  404f64:	6146      	str	r6, [r0, #20]
  404f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404f6a:	bfbc      	itt	lt
  404f6c:	4623      	movlt	r3, r4
  404f6e:	462c      	movlt	r4, r5
  404f70:	4638      	mov	r0, r7
  404f72:	6861      	ldr	r1, [r4, #4]
  404f74:	bfba      	itte	lt
  404f76:	461d      	movlt	r5, r3
  404f78:	2601      	movlt	r6, #1
  404f7a:	2600      	movge	r6, #0
  404f7c:	f7ff fdb8 	bl	404af0 <_Balloc>
  404f80:	692b      	ldr	r3, [r5, #16]
  404f82:	60c6      	str	r6, [r0, #12]
  404f84:	6926      	ldr	r6, [r4, #16]
  404f86:	f105 0914 	add.w	r9, r5, #20
  404f8a:	3414      	adds	r4, #20
  404f8c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  404f90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  404f94:	f100 0514 	add.w	r5, r0, #20
  404f98:	f04f 0c00 	mov.w	ip, #0
  404f9c:	f854 3b04 	ldr.w	r3, [r4], #4
  404fa0:	f859 2b04 	ldr.w	r2, [r9], #4
  404fa4:	fa1c f183 	uxtah	r1, ip, r3
  404fa8:	fa1f fe82 	uxth.w	lr, r2
  404fac:	0c12      	lsrs	r2, r2, #16
  404fae:	ebce 0101 	rsb	r1, lr, r1
  404fb2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  404fb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404fba:	b289      	uxth	r1, r1
  404fbc:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404fc0:	45c8      	cmp	r8, r9
  404fc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  404fc6:	46a6      	mov	lr, r4
  404fc8:	f845 3b04 	str.w	r3, [r5], #4
  404fcc:	d8e6      	bhi.n	404f9c <__mdiff+0x5a>
  404fce:	45be      	cmp	lr, r7
  404fd0:	d20e      	bcs.n	404ff0 <__mdiff+0xae>
  404fd2:	f85e 1b04 	ldr.w	r1, [lr], #4
  404fd6:	fa1c f281 	uxtah	r2, ip, r1
  404fda:	1413      	asrs	r3, r2, #16
  404fdc:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  404fe0:	b292      	uxth	r2, r2
  404fe2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404fe6:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404fea:	f845 2b04 	str.w	r2, [r5], #4
  404fee:	e7ee      	b.n	404fce <__mdiff+0x8c>
  404ff0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404ff4:	b90b      	cbnz	r3, 404ffa <__mdiff+0xb8>
  404ff6:	3e01      	subs	r6, #1
  404ff8:	e7fa      	b.n	404ff0 <__mdiff+0xae>
  404ffa:	6106      	str	r6, [r0, #16]
  404ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00405000 <__d2b>:
  405000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405004:	2101      	movs	r1, #1
  405006:	461c      	mov	r4, r3
  405008:	4690      	mov	r8, r2
  40500a:	9e08      	ldr	r6, [sp, #32]
  40500c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40500e:	f7ff fd6f 	bl	404af0 <_Balloc>
  405012:	f3c4 0213 	ubfx	r2, r4, #0, #20
  405016:	f3c4 540a 	ubfx	r4, r4, #20, #11
  40501a:	4607      	mov	r7, r0
  40501c:	b10c      	cbz	r4, 405022 <__d2b+0x22>
  40501e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  405022:	9201      	str	r2, [sp, #4]
  405024:	f1b8 0f00 	cmp.w	r8, #0
  405028:	d019      	beq.n	40505e <__d2b+0x5e>
  40502a:	a802      	add	r0, sp, #8
  40502c:	f840 8d08 	str.w	r8, [r0, #-8]!
  405030:	f7ff fe05 	bl	404c3e <__lo0bits>
  405034:	9b00      	ldr	r3, [sp, #0]
  405036:	b148      	cbz	r0, 40504c <__d2b+0x4c>
  405038:	9a01      	ldr	r2, [sp, #4]
  40503a:	f1c0 0120 	rsb	r1, r0, #32
  40503e:	fa02 f101 	lsl.w	r1, r2, r1
  405042:	430b      	orrs	r3, r1
  405044:	40c2      	lsrs	r2, r0
  405046:	617b      	str	r3, [r7, #20]
  405048:	9201      	str	r2, [sp, #4]
  40504a:	e000      	b.n	40504e <__d2b+0x4e>
  40504c:	617b      	str	r3, [r7, #20]
  40504e:	9b01      	ldr	r3, [sp, #4]
  405050:	61bb      	str	r3, [r7, #24]
  405052:	2b00      	cmp	r3, #0
  405054:	bf14      	ite	ne
  405056:	2102      	movne	r1, #2
  405058:	2101      	moveq	r1, #1
  40505a:	6139      	str	r1, [r7, #16]
  40505c:	e007      	b.n	40506e <__d2b+0x6e>
  40505e:	a801      	add	r0, sp, #4
  405060:	f7ff fded 	bl	404c3e <__lo0bits>
  405064:	9b01      	ldr	r3, [sp, #4]
  405066:	617b      	str	r3, [r7, #20]
  405068:	2101      	movs	r1, #1
  40506a:	6139      	str	r1, [r7, #16]
  40506c:	3020      	adds	r0, #32
  40506e:	b134      	cbz	r4, 40507e <__d2b+0x7e>
  405070:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  405074:	4404      	add	r4, r0
  405076:	6034      	str	r4, [r6, #0]
  405078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40507c:	e009      	b.n	405092 <__d2b+0x92>
  40507e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  405082:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405086:	6030      	str	r0, [r6, #0]
  405088:	6918      	ldr	r0, [r3, #16]
  40508a:	f7ff fdb8 	bl	404bfe <__hi0bits>
  40508e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  405092:	6028      	str	r0, [r5, #0]
  405094:	4638      	mov	r0, r7
  405096:	b002      	add	sp, #8
  405098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040509c <_calloc_r>:
  40509c:	b538      	push	{r3, r4, r5, lr}
  40509e:	fb02 f401 	mul.w	r4, r2, r1
  4050a2:	4621      	mov	r1, r4
  4050a4:	f000 f856 	bl	405154 <_malloc_r>
  4050a8:	4605      	mov	r5, r0
  4050aa:	b118      	cbz	r0, 4050b4 <_calloc_r+0x18>
  4050ac:	4622      	mov	r2, r4
  4050ae:	2100      	movs	r1, #0
  4050b0:	f7fd fd49 	bl	402b46 <memset>
  4050b4:	4628      	mov	r0, r5
  4050b6:	bd38      	pop	{r3, r4, r5, pc}

004050b8 <_free_r>:
  4050b8:	b538      	push	{r3, r4, r5, lr}
  4050ba:	4605      	mov	r5, r0
  4050bc:	2900      	cmp	r1, #0
  4050be:	d046      	beq.n	40514e <_free_r+0x96>
  4050c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4050c4:	1f0c      	subs	r4, r1, #4
  4050c6:	2b00      	cmp	r3, #0
  4050c8:	bfb8      	it	lt
  4050ca:	18e4      	addlt	r4, r4, r3
  4050cc:	f000 fa9a 	bl	405604 <__malloc_lock>
  4050d0:	4a1f      	ldr	r2, [pc, #124]	; (405150 <_free_r+0x98>)
  4050d2:	6813      	ldr	r3, [r2, #0]
  4050d4:	4611      	mov	r1, r2
  4050d6:	b913      	cbnz	r3, 4050de <_free_r+0x26>
  4050d8:	6063      	str	r3, [r4, #4]
  4050da:	6014      	str	r4, [r2, #0]
  4050dc:	e032      	b.n	405144 <_free_r+0x8c>
  4050de:	42a3      	cmp	r3, r4
  4050e0:	d90e      	bls.n	405100 <_free_r+0x48>
  4050e2:	6822      	ldr	r2, [r4, #0]
  4050e4:	18a0      	adds	r0, r4, r2
  4050e6:	4283      	cmp	r3, r0
  4050e8:	bf04      	itt	eq
  4050ea:	6818      	ldreq	r0, [r3, #0]
  4050ec:	685b      	ldreq	r3, [r3, #4]
  4050ee:	6063      	str	r3, [r4, #4]
  4050f0:	bf04      	itt	eq
  4050f2:	1812      	addeq	r2, r2, r0
  4050f4:	6022      	streq	r2, [r4, #0]
  4050f6:	600c      	str	r4, [r1, #0]
  4050f8:	e024      	b.n	405144 <_free_r+0x8c>
  4050fa:	42a2      	cmp	r2, r4
  4050fc:	d803      	bhi.n	405106 <_free_r+0x4e>
  4050fe:	4613      	mov	r3, r2
  405100:	685a      	ldr	r2, [r3, #4]
  405102:	2a00      	cmp	r2, #0
  405104:	d1f9      	bne.n	4050fa <_free_r+0x42>
  405106:	6818      	ldr	r0, [r3, #0]
  405108:	1819      	adds	r1, r3, r0
  40510a:	42a1      	cmp	r1, r4
  40510c:	d10b      	bne.n	405126 <_free_r+0x6e>
  40510e:	6821      	ldr	r1, [r4, #0]
  405110:	4401      	add	r1, r0
  405112:	1858      	adds	r0, r3, r1
  405114:	4282      	cmp	r2, r0
  405116:	6019      	str	r1, [r3, #0]
  405118:	d114      	bne.n	405144 <_free_r+0x8c>
  40511a:	6810      	ldr	r0, [r2, #0]
  40511c:	6852      	ldr	r2, [r2, #4]
  40511e:	605a      	str	r2, [r3, #4]
  405120:	4401      	add	r1, r0
  405122:	6019      	str	r1, [r3, #0]
  405124:	e00e      	b.n	405144 <_free_r+0x8c>
  405126:	d902      	bls.n	40512e <_free_r+0x76>
  405128:	230c      	movs	r3, #12
  40512a:	602b      	str	r3, [r5, #0]
  40512c:	e00a      	b.n	405144 <_free_r+0x8c>
  40512e:	6821      	ldr	r1, [r4, #0]
  405130:	1860      	adds	r0, r4, r1
  405132:	4282      	cmp	r2, r0
  405134:	bf04      	itt	eq
  405136:	6810      	ldreq	r0, [r2, #0]
  405138:	6852      	ldreq	r2, [r2, #4]
  40513a:	6062      	str	r2, [r4, #4]
  40513c:	bf04      	itt	eq
  40513e:	1809      	addeq	r1, r1, r0
  405140:	6021      	streq	r1, [r4, #0]
  405142:	605c      	str	r4, [r3, #4]
  405144:	4628      	mov	r0, r5
  405146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40514a:	f000 ba5c 	b.w	405606 <__malloc_unlock>
  40514e:	bd38      	pop	{r3, r4, r5, pc}
  405150:	200004f8 	.word	0x200004f8

00405154 <_malloc_r>:
  405154:	b570      	push	{r4, r5, r6, lr}
  405156:	1ccd      	adds	r5, r1, #3
  405158:	f025 0503 	bic.w	r5, r5, #3
  40515c:	3508      	adds	r5, #8
  40515e:	2d0c      	cmp	r5, #12
  405160:	bf38      	it	cc
  405162:	250c      	movcc	r5, #12
  405164:	2d00      	cmp	r5, #0
  405166:	4606      	mov	r6, r0
  405168:	db01      	blt.n	40516e <_malloc_r+0x1a>
  40516a:	42a9      	cmp	r1, r5
  40516c:	d902      	bls.n	405174 <_malloc_r+0x20>
  40516e:	230c      	movs	r3, #12
  405170:	6033      	str	r3, [r6, #0]
  405172:	e046      	b.n	405202 <_malloc_r+0xae>
  405174:	f000 fa46 	bl	405604 <__malloc_lock>
  405178:	4b23      	ldr	r3, [pc, #140]	; (405208 <_malloc_r+0xb4>)
  40517a:	681c      	ldr	r4, [r3, #0]
  40517c:	461a      	mov	r2, r3
  40517e:	4621      	mov	r1, r4
  405180:	b1a1      	cbz	r1, 4051ac <_malloc_r+0x58>
  405182:	680b      	ldr	r3, [r1, #0]
  405184:	1b5b      	subs	r3, r3, r5
  405186:	d40e      	bmi.n	4051a6 <_malloc_r+0x52>
  405188:	2b0b      	cmp	r3, #11
  40518a:	d903      	bls.n	405194 <_malloc_r+0x40>
  40518c:	600b      	str	r3, [r1, #0]
  40518e:	18cc      	adds	r4, r1, r3
  405190:	50cd      	str	r5, [r1, r3]
  405192:	e01e      	b.n	4051d2 <_malloc_r+0x7e>
  405194:	428c      	cmp	r4, r1
  405196:	bf0d      	iteet	eq
  405198:	6863      	ldreq	r3, [r4, #4]
  40519a:	684b      	ldrne	r3, [r1, #4]
  40519c:	6063      	strne	r3, [r4, #4]
  40519e:	6013      	streq	r3, [r2, #0]
  4051a0:	bf18      	it	ne
  4051a2:	460c      	movne	r4, r1
  4051a4:	e015      	b.n	4051d2 <_malloc_r+0x7e>
  4051a6:	460c      	mov	r4, r1
  4051a8:	6849      	ldr	r1, [r1, #4]
  4051aa:	e7e9      	b.n	405180 <_malloc_r+0x2c>
  4051ac:	4c17      	ldr	r4, [pc, #92]	; (40520c <_malloc_r+0xb8>)
  4051ae:	6823      	ldr	r3, [r4, #0]
  4051b0:	b91b      	cbnz	r3, 4051ba <_malloc_r+0x66>
  4051b2:	4630      	mov	r0, r6
  4051b4:	f000 f970 	bl	405498 <_sbrk_r>
  4051b8:	6020      	str	r0, [r4, #0]
  4051ba:	4629      	mov	r1, r5
  4051bc:	4630      	mov	r0, r6
  4051be:	f000 f96b 	bl	405498 <_sbrk_r>
  4051c2:	1c43      	adds	r3, r0, #1
  4051c4:	d018      	beq.n	4051f8 <_malloc_r+0xa4>
  4051c6:	1cc4      	adds	r4, r0, #3
  4051c8:	f024 0403 	bic.w	r4, r4, #3
  4051cc:	42a0      	cmp	r0, r4
  4051ce:	d10d      	bne.n	4051ec <_malloc_r+0x98>
  4051d0:	6025      	str	r5, [r4, #0]
  4051d2:	4630      	mov	r0, r6
  4051d4:	f000 fa17 	bl	405606 <__malloc_unlock>
  4051d8:	f104 000b 	add.w	r0, r4, #11
  4051dc:	1d23      	adds	r3, r4, #4
  4051de:	f020 0007 	bic.w	r0, r0, #7
  4051e2:	1ac3      	subs	r3, r0, r3
  4051e4:	d00e      	beq.n	405204 <_malloc_r+0xb0>
  4051e6:	425a      	negs	r2, r3
  4051e8:	50e2      	str	r2, [r4, r3]
  4051ea:	bd70      	pop	{r4, r5, r6, pc}
  4051ec:	1a21      	subs	r1, r4, r0
  4051ee:	4630      	mov	r0, r6
  4051f0:	f000 f952 	bl	405498 <_sbrk_r>
  4051f4:	3001      	adds	r0, #1
  4051f6:	d1eb      	bne.n	4051d0 <_malloc_r+0x7c>
  4051f8:	230c      	movs	r3, #12
  4051fa:	6033      	str	r3, [r6, #0]
  4051fc:	4630      	mov	r0, r6
  4051fe:	f000 fa02 	bl	405606 <__malloc_unlock>
  405202:	2000      	movs	r0, #0
  405204:	bd70      	pop	{r4, r5, r6, pc}
  405206:	bf00      	nop
  405208:	200004f8 	.word	0x200004f8
  40520c:	200004f4 	.word	0x200004f4

00405210 <__sfputc_r>:
  405210:	6893      	ldr	r3, [r2, #8]
  405212:	3b01      	subs	r3, #1
  405214:	2b00      	cmp	r3, #0
  405216:	b410      	push	{r4}
  405218:	6093      	str	r3, [r2, #8]
  40521a:	da08      	bge.n	40522e <__sfputc_r+0x1e>
  40521c:	6994      	ldr	r4, [r2, #24]
  40521e:	42a3      	cmp	r3, r4
  405220:	db02      	blt.n	405228 <__sfputc_r+0x18>
  405222:	b2cb      	uxtb	r3, r1
  405224:	2b0a      	cmp	r3, #10
  405226:	d102      	bne.n	40522e <__sfputc_r+0x1e>
  405228:	bc10      	pop	{r4}
  40522a:	f7fe bb15 	b.w	403858 <__swbuf_r>
  40522e:	6813      	ldr	r3, [r2, #0]
  405230:	1c58      	adds	r0, r3, #1
  405232:	6010      	str	r0, [r2, #0]
  405234:	7019      	strb	r1, [r3, #0]
  405236:	b2c8      	uxtb	r0, r1
  405238:	bc10      	pop	{r4}
  40523a:	4770      	bx	lr

0040523c <__sfputs_r>:
  40523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40523e:	4606      	mov	r6, r0
  405240:	460f      	mov	r7, r1
  405242:	4614      	mov	r4, r2
  405244:	18d5      	adds	r5, r2, r3
  405246:	42ac      	cmp	r4, r5
  405248:	d008      	beq.n	40525c <__sfputs_r+0x20>
  40524a:	463a      	mov	r2, r7
  40524c:	f814 1b01 	ldrb.w	r1, [r4], #1
  405250:	4630      	mov	r0, r6
  405252:	f7ff ffdd 	bl	405210 <__sfputc_r>
  405256:	1c43      	adds	r3, r0, #1
  405258:	d1f5      	bne.n	405246 <__sfputs_r+0xa>
  40525a:	e000      	b.n	40525e <__sfputs_r+0x22>
  40525c:	2000      	movs	r0, #0
  40525e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00405260 <_vfiprintf_r>:
  405260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405264:	b09d      	sub	sp, #116	; 0x74
  405266:	460c      	mov	r4, r1
  405268:	4617      	mov	r7, r2
  40526a:	9303      	str	r3, [sp, #12]
  40526c:	4606      	mov	r6, r0
  40526e:	b118      	cbz	r0, 405278 <_vfiprintf_r+0x18>
  405270:	6983      	ldr	r3, [r0, #24]
  405272:	b90b      	cbnz	r3, 405278 <_vfiprintf_r+0x18>
  405274:	f7ff fad2 	bl	40481c <__sinit>
  405278:	4b7f      	ldr	r3, [pc, #508]	; (405478 <_vfiprintf_r+0x218>)
  40527a:	429c      	cmp	r4, r3
  40527c:	d101      	bne.n	405282 <_vfiprintf_r+0x22>
  40527e:	6874      	ldr	r4, [r6, #4]
  405280:	e008      	b.n	405294 <_vfiprintf_r+0x34>
  405282:	4b7e      	ldr	r3, [pc, #504]	; (40547c <_vfiprintf_r+0x21c>)
  405284:	429c      	cmp	r4, r3
  405286:	d101      	bne.n	40528c <_vfiprintf_r+0x2c>
  405288:	68b4      	ldr	r4, [r6, #8]
  40528a:	e003      	b.n	405294 <_vfiprintf_r+0x34>
  40528c:	4b7c      	ldr	r3, [pc, #496]	; (405480 <_vfiprintf_r+0x220>)
  40528e:	429c      	cmp	r4, r3
  405290:	bf08      	it	eq
  405292:	68f4      	ldreq	r4, [r6, #12]
  405294:	89a3      	ldrh	r3, [r4, #12]
  405296:	0718      	lsls	r0, r3, #28
  405298:	d50c      	bpl.n	4052b4 <_vfiprintf_r+0x54>
  40529a:	6923      	ldr	r3, [r4, #16]
  40529c:	b153      	cbz	r3, 4052b4 <_vfiprintf_r+0x54>
  40529e:	2300      	movs	r3, #0
  4052a0:	9309      	str	r3, [sp, #36]	; 0x24
  4052a2:	2320      	movs	r3, #32
  4052a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4052a8:	2330      	movs	r3, #48	; 0x30
  4052aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  4052ae:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 405484 <_vfiprintf_r+0x224>
  4052b2:	e044      	b.n	40533e <_vfiprintf_r+0xde>
  4052b4:	4621      	mov	r1, r4
  4052b6:	4630      	mov	r0, r6
  4052b8:	f7fe fb22 	bl	403900 <__swsetup_r>
  4052bc:	2800      	cmp	r0, #0
  4052be:	d0ee      	beq.n	40529e <_vfiprintf_r+0x3e>
  4052c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4052c4:	e0d5      	b.n	405472 <_vfiprintf_r+0x212>
  4052c6:	9a03      	ldr	r2, [sp, #12]
  4052c8:	1d11      	adds	r1, r2, #4
  4052ca:	6812      	ldr	r2, [r2, #0]
  4052cc:	9103      	str	r1, [sp, #12]
  4052ce:	2a00      	cmp	r2, #0
  4052d0:	f280 808c 	bge.w	4053ec <_vfiprintf_r+0x18c>
  4052d4:	4252      	negs	r2, r2
  4052d6:	f043 0002 	orr.w	r0, r3, #2
  4052da:	9207      	str	r2, [sp, #28]
  4052dc:	9004      	str	r0, [sp, #16]
  4052de:	f898 3000 	ldrb.w	r3, [r8]
  4052e2:	2b2e      	cmp	r3, #46	; 0x2e
  4052e4:	f000 8084 	beq.w	4053f0 <_vfiprintf_r+0x190>
  4052e8:	2203      	movs	r2, #3
  4052ea:	f898 1000 	ldrb.w	r1, [r8]
  4052ee:	4865      	ldr	r0, [pc, #404]	; (405484 <_vfiprintf_r+0x224>)
  4052f0:	f7ff fbae 	bl	404a50 <memchr>
  4052f4:	b148      	cbz	r0, 40530a <_vfiprintf_r+0xaa>
  4052f6:	2340      	movs	r3, #64	; 0x40
  4052f8:	ebcb 0000 	rsb	r0, fp, r0
  4052fc:	fa03 f000 	lsl.w	r0, r3, r0
  405300:	9b04      	ldr	r3, [sp, #16]
  405302:	4318      	orrs	r0, r3
  405304:	9004      	str	r0, [sp, #16]
  405306:	f108 0801 	add.w	r8, r8, #1
  40530a:	f898 1000 	ldrb.w	r1, [r8]
  40530e:	485e      	ldr	r0, [pc, #376]	; (405488 <_vfiprintf_r+0x228>)
  405310:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  405314:	2206      	movs	r2, #6
  405316:	f108 0701 	add.w	r7, r8, #1
  40531a:	f7ff fb99 	bl	404a50 <memchr>
  40531e:	2800      	cmp	r0, #0
  405320:	f000 8095 	beq.w	40544e <_vfiprintf_r+0x1ee>
  405324:	4b59      	ldr	r3, [pc, #356]	; (40548c <_vfiprintf_r+0x22c>)
  405326:	2b00      	cmp	r3, #0
  405328:	f040 8088 	bne.w	40543c <_vfiprintf_r+0x1dc>
  40532c:	9b03      	ldr	r3, [sp, #12]
  40532e:	3307      	adds	r3, #7
  405330:	f023 0307 	bic.w	r3, r3, #7
  405334:	3308      	adds	r3, #8
  405336:	9303      	str	r3, [sp, #12]
  405338:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40533a:	4453      	add	r3, sl
  40533c:	9309      	str	r3, [sp, #36]	; 0x24
  40533e:	46b8      	mov	r8, r7
  405340:	4645      	mov	r5, r8
  405342:	f815 3b01 	ldrb.w	r3, [r5], #1
  405346:	b91b      	cbnz	r3, 405350 <_vfiprintf_r+0xf0>
  405348:	ebb8 0907 	subs.w	r9, r8, r7
  40534c:	d00f      	beq.n	40536e <_vfiprintf_r+0x10e>
  40534e:	e003      	b.n	405358 <_vfiprintf_r+0xf8>
  405350:	2b25      	cmp	r3, #37	; 0x25
  405352:	d0f9      	beq.n	405348 <_vfiprintf_r+0xe8>
  405354:	46a8      	mov	r8, r5
  405356:	e7f3      	b.n	405340 <_vfiprintf_r+0xe0>
  405358:	464b      	mov	r3, r9
  40535a:	463a      	mov	r2, r7
  40535c:	4621      	mov	r1, r4
  40535e:	4630      	mov	r0, r6
  405360:	f7ff ff6c 	bl	40523c <__sfputs_r>
  405364:	3001      	adds	r0, #1
  405366:	d07f      	beq.n	405468 <_vfiprintf_r+0x208>
  405368:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40536a:	444b      	add	r3, r9
  40536c:	9309      	str	r3, [sp, #36]	; 0x24
  40536e:	f898 3000 	ldrb.w	r3, [r8]
  405372:	2b00      	cmp	r3, #0
  405374:	d078      	beq.n	405468 <_vfiprintf_r+0x208>
  405376:	2300      	movs	r3, #0
  405378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40537c:	9304      	str	r3, [sp, #16]
  40537e:	9307      	str	r3, [sp, #28]
  405380:	9205      	str	r2, [sp, #20]
  405382:	9306      	str	r3, [sp, #24]
  405384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  405388:	931a      	str	r3, [sp, #104]	; 0x68
  40538a:	2701      	movs	r7, #1
  40538c:	2205      	movs	r2, #5
  40538e:	7829      	ldrb	r1, [r5, #0]
  405390:	483f      	ldr	r0, [pc, #252]	; (405490 <_vfiprintf_r+0x230>)
  405392:	f7ff fb5d 	bl	404a50 <memchr>
  405396:	f105 0801 	add.w	r8, r5, #1
  40539a:	9b04      	ldr	r3, [sp, #16]
  40539c:	b138      	cbz	r0, 4053ae <_vfiprintf_r+0x14e>
  40539e:	4a3c      	ldr	r2, [pc, #240]	; (405490 <_vfiprintf_r+0x230>)
  4053a0:	1a80      	subs	r0, r0, r2
  4053a2:	fa07 f000 	lsl.w	r0, r7, r0
  4053a6:	4318      	orrs	r0, r3
  4053a8:	9004      	str	r0, [sp, #16]
  4053aa:	4645      	mov	r5, r8
  4053ac:	e7ee      	b.n	40538c <_vfiprintf_r+0x12c>
  4053ae:	06d9      	lsls	r1, r3, #27
  4053b0:	bf44      	itt	mi
  4053b2:	2220      	movmi	r2, #32
  4053b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4053b8:	071a      	lsls	r2, r3, #28
  4053ba:	bf44      	itt	mi
  4053bc:	222b      	movmi	r2, #43	; 0x2b
  4053be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4053c2:	782a      	ldrb	r2, [r5, #0]
  4053c4:	2a2a      	cmp	r2, #42	; 0x2a
  4053c6:	f43f af7e 	beq.w	4052c6 <_vfiprintf_r+0x66>
  4053ca:	9a07      	ldr	r2, [sp, #28]
  4053cc:	2100      	movs	r1, #0
  4053ce:	200a      	movs	r0, #10
  4053d0:	46a8      	mov	r8, r5
  4053d2:	3501      	adds	r5, #1
  4053d4:	f898 3000 	ldrb.w	r3, [r8]
  4053d8:	3b30      	subs	r3, #48	; 0x30
  4053da:	2b09      	cmp	r3, #9
  4053dc:	d803      	bhi.n	4053e6 <_vfiprintf_r+0x186>
  4053de:	fb00 3202 	mla	r2, r0, r2, r3
  4053e2:	2101      	movs	r1, #1
  4053e4:	e7f4      	b.n	4053d0 <_vfiprintf_r+0x170>
  4053e6:	2900      	cmp	r1, #0
  4053e8:	f43f af79 	beq.w	4052de <_vfiprintf_r+0x7e>
  4053ec:	9207      	str	r2, [sp, #28]
  4053ee:	e776      	b.n	4052de <_vfiprintf_r+0x7e>
  4053f0:	f898 3001 	ldrb.w	r3, [r8, #1]
  4053f4:	2b2a      	cmp	r3, #42	; 0x2a
  4053f6:	d10b      	bne.n	405410 <_vfiprintf_r+0x1b0>
  4053f8:	9b03      	ldr	r3, [sp, #12]
  4053fa:	1d1a      	adds	r2, r3, #4
  4053fc:	681b      	ldr	r3, [r3, #0]
  4053fe:	9203      	str	r2, [sp, #12]
  405400:	2b00      	cmp	r3, #0
  405402:	bfb8      	it	lt
  405404:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  405408:	f108 0802 	add.w	r8, r8, #2
  40540c:	9305      	str	r3, [sp, #20]
  40540e:	e76b      	b.n	4052e8 <_vfiprintf_r+0x88>
  405410:	2300      	movs	r3, #0
  405412:	9305      	str	r3, [sp, #20]
  405414:	f108 0001 	add.w	r0, r8, #1
  405418:	4619      	mov	r1, r3
  40541a:	250a      	movs	r5, #10
  40541c:	4680      	mov	r8, r0
  40541e:	3001      	adds	r0, #1
  405420:	f898 2000 	ldrb.w	r2, [r8]
  405424:	3a30      	subs	r2, #48	; 0x30
  405426:	2a09      	cmp	r2, #9
  405428:	d803      	bhi.n	405432 <_vfiprintf_r+0x1d2>
  40542a:	fb05 2101 	mla	r1, r5, r1, r2
  40542e:	2301      	movs	r3, #1
  405430:	e7f4      	b.n	40541c <_vfiprintf_r+0x1bc>
  405432:	2b00      	cmp	r3, #0
  405434:	f43f af58 	beq.w	4052e8 <_vfiprintf_r+0x88>
  405438:	9105      	str	r1, [sp, #20]
  40543a:	e755      	b.n	4052e8 <_vfiprintf_r+0x88>
  40543c:	ab03      	add	r3, sp, #12
  40543e:	9300      	str	r3, [sp, #0]
  405440:	4622      	mov	r2, r4
  405442:	4b14      	ldr	r3, [pc, #80]	; (405494 <_vfiprintf_r+0x234>)
  405444:	a904      	add	r1, sp, #16
  405446:	4630      	mov	r0, r6
  405448:	f7fd fc14 	bl	402c74 <_printf_float>
  40544c:	e007      	b.n	40545e <_vfiprintf_r+0x1fe>
  40544e:	ab03      	add	r3, sp, #12
  405450:	9300      	str	r3, [sp, #0]
  405452:	4622      	mov	r2, r4
  405454:	4b0f      	ldr	r3, [pc, #60]	; (405494 <_vfiprintf_r+0x234>)
  405456:	a904      	add	r1, sp, #16
  405458:	4630      	mov	r0, r6
  40545a:	f7fd fec5 	bl	4031e8 <_printf_i>
  40545e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  405462:	4682      	mov	sl, r0
  405464:	f47f af68 	bne.w	405338 <_vfiprintf_r+0xd8>
  405468:	89a3      	ldrh	r3, [r4, #12]
  40546a:	065b      	lsls	r3, r3, #25
  40546c:	f53f af28 	bmi.w	4052c0 <_vfiprintf_r+0x60>
  405470:	9809      	ldr	r0, [sp, #36]	; 0x24
  405472:	b01d      	add	sp, #116	; 0x74
  405474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405478:	004069f0 	.word	0x004069f0
  40547c:	00406a10 	.word	0x00406a10
  405480:	00406a30 	.word	0x00406a30
  405484:	00406b62 	.word	0x00406b62
  405488:	00406b66 	.word	0x00406b66
  40548c:	00402c75 	.word	0x00402c75
  405490:	00406b5c 	.word	0x00406b5c
  405494:	0040523d 	.word	0x0040523d

00405498 <_sbrk_r>:
  405498:	b538      	push	{r3, r4, r5, lr}
  40549a:	4c06      	ldr	r4, [pc, #24]	; (4054b4 <_sbrk_r+0x1c>)
  40549c:	2300      	movs	r3, #0
  40549e:	4605      	mov	r5, r0
  4054a0:	4608      	mov	r0, r1
  4054a2:	6023      	str	r3, [r4, #0]
  4054a4:	f7fc ff5e 	bl	402364 <_sbrk>
  4054a8:	1c43      	adds	r3, r0, #1
  4054aa:	d102      	bne.n	4054b2 <_sbrk_r+0x1a>
  4054ac:	6823      	ldr	r3, [r4, #0]
  4054ae:	b103      	cbz	r3, 4054b2 <_sbrk_r+0x1a>
  4054b0:	602b      	str	r3, [r5, #0]
  4054b2:	bd38      	pop	{r3, r4, r5, pc}
  4054b4:	20000820 	.word	0x20000820

004054b8 <__sread>:
  4054b8:	b510      	push	{r4, lr}
  4054ba:	460c      	mov	r4, r1
  4054bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4054c0:	f000 f8a2 	bl	405608 <_read_r>
  4054c4:	2800      	cmp	r0, #0
  4054c6:	bfab      	itete	ge
  4054c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4054ca:	89a3      	ldrhlt	r3, [r4, #12]
  4054cc:	181b      	addge	r3, r3, r0
  4054ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4054d2:	bfac      	ite	ge
  4054d4:	6563      	strge	r3, [r4, #84]	; 0x54
  4054d6:	81a3      	strhlt	r3, [r4, #12]
  4054d8:	bd10      	pop	{r4, pc}

004054da <__swrite>:
  4054da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054de:	461f      	mov	r7, r3
  4054e0:	898b      	ldrh	r3, [r1, #12]
  4054e2:	05db      	lsls	r3, r3, #23
  4054e4:	4605      	mov	r5, r0
  4054e6:	460c      	mov	r4, r1
  4054e8:	4616      	mov	r6, r2
  4054ea:	d505      	bpl.n	4054f8 <__swrite+0x1e>
  4054ec:	2302      	movs	r3, #2
  4054ee:	2200      	movs	r2, #0
  4054f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4054f4:	f000 f874 	bl	4055e0 <_lseek_r>
  4054f8:	89a3      	ldrh	r3, [r4, #12]
  4054fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4054fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  405502:	81a3      	strh	r3, [r4, #12]
  405504:	4632      	mov	r2, r6
  405506:	463b      	mov	r3, r7
  405508:	4628      	mov	r0, r5
  40550a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40550e:	f000 b823 	b.w	405558 <_write_r>

00405512 <__sseek>:
  405512:	b510      	push	{r4, lr}
  405514:	460c      	mov	r4, r1
  405516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40551a:	f000 f861 	bl	4055e0 <_lseek_r>
  40551e:	1c43      	adds	r3, r0, #1
  405520:	89a3      	ldrh	r3, [r4, #12]
  405522:	bf15      	itete	ne
  405524:	6560      	strne	r0, [r4, #84]	; 0x54
  405526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40552a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40552e:	81a3      	strheq	r3, [r4, #12]
  405530:	bf18      	it	ne
  405532:	81a3      	strhne	r3, [r4, #12]
  405534:	bd10      	pop	{r4, pc}

00405536 <__sclose>:
  405536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40553a:	f000 b81f 	b.w	40557c <_close_r>

0040553e <__ascii_wctomb>:
  40553e:	b149      	cbz	r1, 405554 <__ascii_wctomb+0x16>
  405540:	2aff      	cmp	r2, #255	; 0xff
  405542:	bf85      	ittet	hi
  405544:	238a      	movhi	r3, #138	; 0x8a
  405546:	6003      	strhi	r3, [r0, #0]
  405548:	700a      	strbls	r2, [r1, #0]
  40554a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  40554e:	bf98      	it	ls
  405550:	2001      	movls	r0, #1
  405552:	4770      	bx	lr
  405554:	4608      	mov	r0, r1
  405556:	4770      	bx	lr

00405558 <_write_r>:
  405558:	b538      	push	{r3, r4, r5, lr}
  40555a:	4c07      	ldr	r4, [pc, #28]	; (405578 <_write_r+0x20>)
  40555c:	4605      	mov	r5, r0
  40555e:	4608      	mov	r0, r1
  405560:	4611      	mov	r1, r2
  405562:	2200      	movs	r2, #0
  405564:	6022      	str	r2, [r4, #0]
  405566:	461a      	mov	r2, r3
  405568:	f7fa fe20 	bl	4001ac <_write>
  40556c:	1c43      	adds	r3, r0, #1
  40556e:	d102      	bne.n	405576 <_write_r+0x1e>
  405570:	6823      	ldr	r3, [r4, #0]
  405572:	b103      	cbz	r3, 405576 <_write_r+0x1e>
  405574:	602b      	str	r3, [r5, #0]
  405576:	bd38      	pop	{r3, r4, r5, pc}
  405578:	20000820 	.word	0x20000820

0040557c <_close_r>:
  40557c:	b538      	push	{r3, r4, r5, lr}
  40557e:	4c06      	ldr	r4, [pc, #24]	; (405598 <_close_r+0x1c>)
  405580:	2300      	movs	r3, #0
  405582:	4605      	mov	r5, r0
  405584:	4608      	mov	r0, r1
  405586:	6023      	str	r3, [r4, #0]
  405588:	f7fc ff06 	bl	402398 <_close>
  40558c:	1c43      	adds	r3, r0, #1
  40558e:	d102      	bne.n	405596 <_close_r+0x1a>
  405590:	6823      	ldr	r3, [r4, #0]
  405592:	b103      	cbz	r3, 405596 <_close_r+0x1a>
  405594:	602b      	str	r3, [r5, #0]
  405596:	bd38      	pop	{r3, r4, r5, pc}
  405598:	20000820 	.word	0x20000820

0040559c <_fstat_r>:
  40559c:	b538      	push	{r3, r4, r5, lr}
  40559e:	4c07      	ldr	r4, [pc, #28]	; (4055bc <_fstat_r+0x20>)
  4055a0:	2300      	movs	r3, #0
  4055a2:	4605      	mov	r5, r0
  4055a4:	4608      	mov	r0, r1
  4055a6:	4611      	mov	r1, r2
  4055a8:	6023      	str	r3, [r4, #0]
  4055aa:	f7fc fef9 	bl	4023a0 <_fstat>
  4055ae:	1c43      	adds	r3, r0, #1
  4055b0:	d102      	bne.n	4055b8 <_fstat_r+0x1c>
  4055b2:	6823      	ldr	r3, [r4, #0]
  4055b4:	b103      	cbz	r3, 4055b8 <_fstat_r+0x1c>
  4055b6:	602b      	str	r3, [r5, #0]
  4055b8:	bd38      	pop	{r3, r4, r5, pc}
  4055ba:	bf00      	nop
  4055bc:	20000820 	.word	0x20000820

004055c0 <_isatty_r>:
  4055c0:	b538      	push	{r3, r4, r5, lr}
  4055c2:	4c06      	ldr	r4, [pc, #24]	; (4055dc <_isatty_r+0x1c>)
  4055c4:	2300      	movs	r3, #0
  4055c6:	4605      	mov	r5, r0
  4055c8:	4608      	mov	r0, r1
  4055ca:	6023      	str	r3, [r4, #0]
  4055cc:	f7fc feee 	bl	4023ac <_isatty>
  4055d0:	1c43      	adds	r3, r0, #1
  4055d2:	d102      	bne.n	4055da <_isatty_r+0x1a>
  4055d4:	6823      	ldr	r3, [r4, #0]
  4055d6:	b103      	cbz	r3, 4055da <_isatty_r+0x1a>
  4055d8:	602b      	str	r3, [r5, #0]
  4055da:	bd38      	pop	{r3, r4, r5, pc}
  4055dc:	20000820 	.word	0x20000820

004055e0 <_lseek_r>:
  4055e0:	b538      	push	{r3, r4, r5, lr}
  4055e2:	4c07      	ldr	r4, [pc, #28]	; (405600 <_lseek_r+0x20>)
  4055e4:	4605      	mov	r5, r0
  4055e6:	4608      	mov	r0, r1
  4055e8:	4611      	mov	r1, r2
  4055ea:	2200      	movs	r2, #0
  4055ec:	6022      	str	r2, [r4, #0]
  4055ee:	461a      	mov	r2, r3
  4055f0:	f7fc fede 	bl	4023b0 <_lseek>
  4055f4:	1c43      	adds	r3, r0, #1
  4055f6:	d102      	bne.n	4055fe <_lseek_r+0x1e>
  4055f8:	6823      	ldr	r3, [r4, #0]
  4055fa:	b103      	cbz	r3, 4055fe <_lseek_r+0x1e>
  4055fc:	602b      	str	r3, [r5, #0]
  4055fe:	bd38      	pop	{r3, r4, r5, pc}
  405600:	20000820 	.word	0x20000820

00405604 <__malloc_lock>:
  405604:	4770      	bx	lr

00405606 <__malloc_unlock>:
  405606:	4770      	bx	lr

00405608 <_read_r>:
  405608:	b538      	push	{r3, r4, r5, lr}
  40560a:	4c07      	ldr	r4, [pc, #28]	; (405628 <_read_r+0x20>)
  40560c:	4605      	mov	r5, r0
  40560e:	4608      	mov	r0, r1
  405610:	4611      	mov	r1, r2
  405612:	2200      	movs	r2, #0
  405614:	6022      	str	r2, [r4, #0]
  405616:	461a      	mov	r2, r3
  405618:	f7fa fdaa 	bl	400170 <_read>
  40561c:	1c43      	adds	r3, r0, #1
  40561e:	d102      	bne.n	405626 <_read_r+0x1e>
  405620:	6823      	ldr	r3, [r4, #0]
  405622:	b103      	cbz	r3, 405626 <_read_r+0x1e>
  405624:	602b      	str	r3, [r5, #0]
  405626:	bd38      	pop	{r3, r4, r5, pc}
  405628:	20000820 	.word	0x20000820

0040562c <__aeabi_drsub>:
  40562c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405630:	e002      	b.n	405638 <__adddf3>
  405632:	bf00      	nop

00405634 <__aeabi_dsub>:
  405634:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405638 <__adddf3>:
  405638:	b530      	push	{r4, r5, lr}
  40563a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40563e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405642:	ea94 0f05 	teq	r4, r5
  405646:	bf08      	it	eq
  405648:	ea90 0f02 	teqeq	r0, r2
  40564c:	bf1f      	itttt	ne
  40564e:	ea54 0c00 	orrsne.w	ip, r4, r0
  405652:	ea55 0c02 	orrsne.w	ip, r5, r2
  405656:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40565a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40565e:	f000 80e2 	beq.w	405826 <__adddf3+0x1ee>
  405662:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405666:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40566a:	bfb8      	it	lt
  40566c:	426d      	neglt	r5, r5
  40566e:	dd0c      	ble.n	40568a <__adddf3+0x52>
  405670:	442c      	add	r4, r5
  405672:	ea80 0202 	eor.w	r2, r0, r2
  405676:	ea81 0303 	eor.w	r3, r1, r3
  40567a:	ea82 0000 	eor.w	r0, r2, r0
  40567e:	ea83 0101 	eor.w	r1, r3, r1
  405682:	ea80 0202 	eor.w	r2, r0, r2
  405686:	ea81 0303 	eor.w	r3, r1, r3
  40568a:	2d36      	cmp	r5, #54	; 0x36
  40568c:	bf88      	it	hi
  40568e:	bd30      	pophi	{r4, r5, pc}
  405690:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405694:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405698:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40569c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4056a0:	d002      	beq.n	4056a8 <__adddf3+0x70>
  4056a2:	4240      	negs	r0, r0
  4056a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4056a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4056ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4056b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4056b4:	d002      	beq.n	4056bc <__adddf3+0x84>
  4056b6:	4252      	negs	r2, r2
  4056b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4056bc:	ea94 0f05 	teq	r4, r5
  4056c0:	f000 80a7 	beq.w	405812 <__adddf3+0x1da>
  4056c4:	f1a4 0401 	sub.w	r4, r4, #1
  4056c8:	f1d5 0e20 	rsbs	lr, r5, #32
  4056cc:	db0d      	blt.n	4056ea <__adddf3+0xb2>
  4056ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  4056d2:	fa22 f205 	lsr.w	r2, r2, r5
  4056d6:	1880      	adds	r0, r0, r2
  4056d8:	f141 0100 	adc.w	r1, r1, #0
  4056dc:	fa03 f20e 	lsl.w	r2, r3, lr
  4056e0:	1880      	adds	r0, r0, r2
  4056e2:	fa43 f305 	asr.w	r3, r3, r5
  4056e6:	4159      	adcs	r1, r3
  4056e8:	e00e      	b.n	405708 <__adddf3+0xd0>
  4056ea:	f1a5 0520 	sub.w	r5, r5, #32
  4056ee:	f10e 0e20 	add.w	lr, lr, #32
  4056f2:	2a01      	cmp	r2, #1
  4056f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4056f8:	bf28      	it	cs
  4056fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  4056fe:	fa43 f305 	asr.w	r3, r3, r5
  405702:	18c0      	adds	r0, r0, r3
  405704:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40570c:	d507      	bpl.n	40571e <__adddf3+0xe6>
  40570e:	f04f 0e00 	mov.w	lr, #0
  405712:	f1dc 0c00 	rsbs	ip, ip, #0
  405716:	eb7e 0000 	sbcs.w	r0, lr, r0
  40571a:	eb6e 0101 	sbc.w	r1, lr, r1
  40571e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405722:	d31b      	bcc.n	40575c <__adddf3+0x124>
  405724:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405728:	d30c      	bcc.n	405744 <__adddf3+0x10c>
  40572a:	0849      	lsrs	r1, r1, #1
  40572c:	ea5f 0030 	movs.w	r0, r0, rrx
  405730:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405734:	f104 0401 	add.w	r4, r4, #1
  405738:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40573c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405740:	f080 809a 	bcs.w	405878 <__adddf3+0x240>
  405744:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405748:	bf08      	it	eq
  40574a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40574e:	f150 0000 	adcs.w	r0, r0, #0
  405752:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405756:	ea41 0105 	orr.w	r1, r1, r5
  40575a:	bd30      	pop	{r4, r5, pc}
  40575c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405760:	4140      	adcs	r0, r0
  405762:	eb41 0101 	adc.w	r1, r1, r1
  405766:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40576a:	f1a4 0401 	sub.w	r4, r4, #1
  40576e:	d1e9      	bne.n	405744 <__adddf3+0x10c>
  405770:	f091 0f00 	teq	r1, #0
  405774:	bf04      	itt	eq
  405776:	4601      	moveq	r1, r0
  405778:	2000      	moveq	r0, #0
  40577a:	fab1 f381 	clz	r3, r1
  40577e:	bf08      	it	eq
  405780:	3320      	addeq	r3, #32
  405782:	f1a3 030b 	sub.w	r3, r3, #11
  405786:	f1b3 0220 	subs.w	r2, r3, #32
  40578a:	da0c      	bge.n	4057a6 <__adddf3+0x16e>
  40578c:	320c      	adds	r2, #12
  40578e:	dd08      	ble.n	4057a2 <__adddf3+0x16a>
  405790:	f102 0c14 	add.w	ip, r2, #20
  405794:	f1c2 020c 	rsb	r2, r2, #12
  405798:	fa01 f00c 	lsl.w	r0, r1, ip
  40579c:	fa21 f102 	lsr.w	r1, r1, r2
  4057a0:	e00c      	b.n	4057bc <__adddf3+0x184>
  4057a2:	f102 0214 	add.w	r2, r2, #20
  4057a6:	bfd8      	it	le
  4057a8:	f1c2 0c20 	rsble	ip, r2, #32
  4057ac:	fa01 f102 	lsl.w	r1, r1, r2
  4057b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4057b4:	bfdc      	itt	le
  4057b6:	ea41 010c 	orrle.w	r1, r1, ip
  4057ba:	4090      	lslle	r0, r2
  4057bc:	1ae4      	subs	r4, r4, r3
  4057be:	bfa2      	ittt	ge
  4057c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4057c4:	4329      	orrge	r1, r5
  4057c6:	bd30      	popge	{r4, r5, pc}
  4057c8:	ea6f 0404 	mvn.w	r4, r4
  4057cc:	3c1f      	subs	r4, #31
  4057ce:	da1c      	bge.n	40580a <__adddf3+0x1d2>
  4057d0:	340c      	adds	r4, #12
  4057d2:	dc0e      	bgt.n	4057f2 <__adddf3+0x1ba>
  4057d4:	f104 0414 	add.w	r4, r4, #20
  4057d8:	f1c4 0220 	rsb	r2, r4, #32
  4057dc:	fa20 f004 	lsr.w	r0, r0, r4
  4057e0:	fa01 f302 	lsl.w	r3, r1, r2
  4057e4:	ea40 0003 	orr.w	r0, r0, r3
  4057e8:	fa21 f304 	lsr.w	r3, r1, r4
  4057ec:	ea45 0103 	orr.w	r1, r5, r3
  4057f0:	bd30      	pop	{r4, r5, pc}
  4057f2:	f1c4 040c 	rsb	r4, r4, #12
  4057f6:	f1c4 0220 	rsb	r2, r4, #32
  4057fa:	fa20 f002 	lsr.w	r0, r0, r2
  4057fe:	fa01 f304 	lsl.w	r3, r1, r4
  405802:	ea40 0003 	orr.w	r0, r0, r3
  405806:	4629      	mov	r1, r5
  405808:	bd30      	pop	{r4, r5, pc}
  40580a:	fa21 f004 	lsr.w	r0, r1, r4
  40580e:	4629      	mov	r1, r5
  405810:	bd30      	pop	{r4, r5, pc}
  405812:	f094 0f00 	teq	r4, #0
  405816:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40581a:	bf06      	itte	eq
  40581c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405820:	3401      	addeq	r4, #1
  405822:	3d01      	subne	r5, #1
  405824:	e74e      	b.n	4056c4 <__adddf3+0x8c>
  405826:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40582a:	bf18      	it	ne
  40582c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405830:	d029      	beq.n	405886 <__adddf3+0x24e>
  405832:	ea94 0f05 	teq	r4, r5
  405836:	bf08      	it	eq
  405838:	ea90 0f02 	teqeq	r0, r2
  40583c:	d005      	beq.n	40584a <__adddf3+0x212>
  40583e:	ea54 0c00 	orrs.w	ip, r4, r0
  405842:	bf04      	itt	eq
  405844:	4619      	moveq	r1, r3
  405846:	4610      	moveq	r0, r2
  405848:	bd30      	pop	{r4, r5, pc}
  40584a:	ea91 0f03 	teq	r1, r3
  40584e:	bf1e      	ittt	ne
  405850:	2100      	movne	r1, #0
  405852:	2000      	movne	r0, #0
  405854:	bd30      	popne	{r4, r5, pc}
  405856:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40585a:	d105      	bne.n	405868 <__adddf3+0x230>
  40585c:	0040      	lsls	r0, r0, #1
  40585e:	4149      	adcs	r1, r1
  405860:	bf28      	it	cs
  405862:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405866:	bd30      	pop	{r4, r5, pc}
  405868:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40586c:	bf3c      	itt	cc
  40586e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405872:	bd30      	popcc	{r4, r5, pc}
  405874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405878:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40587c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405880:	f04f 0000 	mov.w	r0, #0
  405884:	bd30      	pop	{r4, r5, pc}
  405886:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40588a:	bf1a      	itte	ne
  40588c:	4619      	movne	r1, r3
  40588e:	4610      	movne	r0, r2
  405890:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405894:	bf1c      	itt	ne
  405896:	460b      	movne	r3, r1
  405898:	4602      	movne	r2, r0
  40589a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40589e:	bf06      	itte	eq
  4058a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4058a4:	ea91 0f03 	teqeq	r1, r3
  4058a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4058ac:	bd30      	pop	{r4, r5, pc}
  4058ae:	bf00      	nop

004058b0 <__aeabi_ui2d>:
  4058b0:	f090 0f00 	teq	r0, #0
  4058b4:	bf04      	itt	eq
  4058b6:	2100      	moveq	r1, #0
  4058b8:	4770      	bxeq	lr
  4058ba:	b530      	push	{r4, r5, lr}
  4058bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4058c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4058c4:	f04f 0500 	mov.w	r5, #0
  4058c8:	f04f 0100 	mov.w	r1, #0
  4058cc:	e750      	b.n	405770 <__adddf3+0x138>
  4058ce:	bf00      	nop

004058d0 <__aeabi_i2d>:
  4058d0:	f090 0f00 	teq	r0, #0
  4058d4:	bf04      	itt	eq
  4058d6:	2100      	moveq	r1, #0
  4058d8:	4770      	bxeq	lr
  4058da:	b530      	push	{r4, r5, lr}
  4058dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4058e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4058e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4058e8:	bf48      	it	mi
  4058ea:	4240      	negmi	r0, r0
  4058ec:	f04f 0100 	mov.w	r1, #0
  4058f0:	e73e      	b.n	405770 <__adddf3+0x138>
  4058f2:	bf00      	nop

004058f4 <__aeabi_f2d>:
  4058f4:	0042      	lsls	r2, r0, #1
  4058f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4058fa:	ea4f 0131 	mov.w	r1, r1, rrx
  4058fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405902:	bf1f      	itttt	ne
  405904:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405908:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40590c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405910:	4770      	bxne	lr
  405912:	f092 0f00 	teq	r2, #0
  405916:	bf14      	ite	ne
  405918:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40591c:	4770      	bxeq	lr
  40591e:	b530      	push	{r4, r5, lr}
  405920:	f44f 7460 	mov.w	r4, #896	; 0x380
  405924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40592c:	e720      	b.n	405770 <__adddf3+0x138>
  40592e:	bf00      	nop

00405930 <__aeabi_ul2d>:
  405930:	ea50 0201 	orrs.w	r2, r0, r1
  405934:	bf08      	it	eq
  405936:	4770      	bxeq	lr
  405938:	b530      	push	{r4, r5, lr}
  40593a:	f04f 0500 	mov.w	r5, #0
  40593e:	e00a      	b.n	405956 <__aeabi_l2d+0x16>

00405940 <__aeabi_l2d>:
  405940:	ea50 0201 	orrs.w	r2, r0, r1
  405944:	bf08      	it	eq
  405946:	4770      	bxeq	lr
  405948:	b530      	push	{r4, r5, lr}
  40594a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40594e:	d502      	bpl.n	405956 <__aeabi_l2d+0x16>
  405950:	4240      	negs	r0, r0
  405952:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405956:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40595a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40595e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405962:	f43f aedc 	beq.w	40571e <__adddf3+0xe6>
  405966:	f04f 0203 	mov.w	r2, #3
  40596a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40596e:	bf18      	it	ne
  405970:	3203      	addne	r2, #3
  405972:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405976:	bf18      	it	ne
  405978:	3203      	addne	r2, #3
  40597a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40597e:	f1c2 0320 	rsb	r3, r2, #32
  405982:	fa00 fc03 	lsl.w	ip, r0, r3
  405986:	fa20 f002 	lsr.w	r0, r0, r2
  40598a:	fa01 fe03 	lsl.w	lr, r1, r3
  40598e:	ea40 000e 	orr.w	r0, r0, lr
  405992:	fa21 f102 	lsr.w	r1, r1, r2
  405996:	4414      	add	r4, r2
  405998:	e6c1      	b.n	40571e <__adddf3+0xe6>
  40599a:	bf00      	nop

0040599c <__aeabi_dmul>:
  40599c:	b570      	push	{r4, r5, r6, lr}
  40599e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4059a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4059a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4059aa:	bf1d      	ittte	ne
  4059ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4059b0:	ea94 0f0c 	teqne	r4, ip
  4059b4:	ea95 0f0c 	teqne	r5, ip
  4059b8:	f000 f8de 	bleq	405b78 <__aeabi_dmul+0x1dc>
  4059bc:	442c      	add	r4, r5
  4059be:	ea81 0603 	eor.w	r6, r1, r3
  4059c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4059c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4059ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4059ce:	bf18      	it	ne
  4059d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4059d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4059d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4059dc:	d038      	beq.n	405a50 <__aeabi_dmul+0xb4>
  4059de:	fba0 ce02 	umull	ip, lr, r0, r2
  4059e2:	f04f 0500 	mov.w	r5, #0
  4059e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4059ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4059ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  4059f2:	f04f 0600 	mov.w	r6, #0
  4059f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4059fa:	f09c 0f00 	teq	ip, #0
  4059fe:	bf18      	it	ne
  405a00:	f04e 0e01 	orrne.w	lr, lr, #1
  405a04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405a08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405a0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405a10:	d204      	bcs.n	405a1c <__aeabi_dmul+0x80>
  405a12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405a16:	416d      	adcs	r5, r5
  405a18:	eb46 0606 	adc.w	r6, r6, r6
  405a1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405a20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405a24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405a28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405a2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405a30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405a34:	bf88      	it	hi
  405a36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405a3a:	d81e      	bhi.n	405a7a <__aeabi_dmul+0xde>
  405a3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405a40:	bf08      	it	eq
  405a42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405a46:	f150 0000 	adcs.w	r0, r0, #0
  405a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405a4e:	bd70      	pop	{r4, r5, r6, pc}
  405a50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405a54:	ea46 0101 	orr.w	r1, r6, r1
  405a58:	ea40 0002 	orr.w	r0, r0, r2
  405a5c:	ea81 0103 	eor.w	r1, r1, r3
  405a60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405a64:	bfc2      	ittt	gt
  405a66:	ebd4 050c 	rsbsgt	r5, r4, ip
  405a6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405a6e:	bd70      	popgt	{r4, r5, r6, pc}
  405a70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405a74:	f04f 0e00 	mov.w	lr, #0
  405a78:	3c01      	subs	r4, #1
  405a7a:	f300 80ab 	bgt.w	405bd4 <__aeabi_dmul+0x238>
  405a7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405a82:	bfde      	ittt	le
  405a84:	2000      	movle	r0, #0
  405a86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405a8a:	bd70      	pople	{r4, r5, r6, pc}
  405a8c:	f1c4 0400 	rsb	r4, r4, #0
  405a90:	3c20      	subs	r4, #32
  405a92:	da35      	bge.n	405b00 <__aeabi_dmul+0x164>
  405a94:	340c      	adds	r4, #12
  405a96:	dc1b      	bgt.n	405ad0 <__aeabi_dmul+0x134>
  405a98:	f104 0414 	add.w	r4, r4, #20
  405a9c:	f1c4 0520 	rsb	r5, r4, #32
  405aa0:	fa00 f305 	lsl.w	r3, r0, r5
  405aa4:	fa20 f004 	lsr.w	r0, r0, r4
  405aa8:	fa01 f205 	lsl.w	r2, r1, r5
  405aac:	ea40 0002 	orr.w	r0, r0, r2
  405ab0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405ab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405ab8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405abc:	fa21 f604 	lsr.w	r6, r1, r4
  405ac0:	eb42 0106 	adc.w	r1, r2, r6
  405ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405ac8:	bf08      	it	eq
  405aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405ace:	bd70      	pop	{r4, r5, r6, pc}
  405ad0:	f1c4 040c 	rsb	r4, r4, #12
  405ad4:	f1c4 0520 	rsb	r5, r4, #32
  405ad8:	fa00 f304 	lsl.w	r3, r0, r4
  405adc:	fa20 f005 	lsr.w	r0, r0, r5
  405ae0:	fa01 f204 	lsl.w	r2, r1, r4
  405ae4:	ea40 0002 	orr.w	r0, r0, r2
  405ae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405aec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405af0:	f141 0100 	adc.w	r1, r1, #0
  405af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405af8:	bf08      	it	eq
  405afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405afe:	bd70      	pop	{r4, r5, r6, pc}
  405b00:	f1c4 0520 	rsb	r5, r4, #32
  405b04:	fa00 f205 	lsl.w	r2, r0, r5
  405b08:	ea4e 0e02 	orr.w	lr, lr, r2
  405b0c:	fa20 f304 	lsr.w	r3, r0, r4
  405b10:	fa01 f205 	lsl.w	r2, r1, r5
  405b14:	ea43 0302 	orr.w	r3, r3, r2
  405b18:	fa21 f004 	lsr.w	r0, r1, r4
  405b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405b20:	fa21 f204 	lsr.w	r2, r1, r4
  405b24:	ea20 0002 	bic.w	r0, r0, r2
  405b28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405b2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405b30:	bf08      	it	eq
  405b32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405b36:	bd70      	pop	{r4, r5, r6, pc}
  405b38:	f094 0f00 	teq	r4, #0
  405b3c:	d10f      	bne.n	405b5e <__aeabi_dmul+0x1c2>
  405b3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405b42:	0040      	lsls	r0, r0, #1
  405b44:	eb41 0101 	adc.w	r1, r1, r1
  405b48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405b4c:	bf08      	it	eq
  405b4e:	3c01      	subeq	r4, #1
  405b50:	d0f7      	beq.n	405b42 <__aeabi_dmul+0x1a6>
  405b52:	ea41 0106 	orr.w	r1, r1, r6
  405b56:	f095 0f00 	teq	r5, #0
  405b5a:	bf18      	it	ne
  405b5c:	4770      	bxne	lr
  405b5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405b62:	0052      	lsls	r2, r2, #1
  405b64:	eb43 0303 	adc.w	r3, r3, r3
  405b68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405b6c:	bf08      	it	eq
  405b6e:	3d01      	subeq	r5, #1
  405b70:	d0f7      	beq.n	405b62 <__aeabi_dmul+0x1c6>
  405b72:	ea43 0306 	orr.w	r3, r3, r6
  405b76:	4770      	bx	lr
  405b78:	ea94 0f0c 	teq	r4, ip
  405b7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405b80:	bf18      	it	ne
  405b82:	ea95 0f0c 	teqne	r5, ip
  405b86:	d00c      	beq.n	405ba2 <__aeabi_dmul+0x206>
  405b88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405b8c:	bf18      	it	ne
  405b8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405b92:	d1d1      	bne.n	405b38 <__aeabi_dmul+0x19c>
  405b94:	ea81 0103 	eor.w	r1, r1, r3
  405b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405b9c:	f04f 0000 	mov.w	r0, #0
  405ba0:	bd70      	pop	{r4, r5, r6, pc}
  405ba2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405ba6:	bf06      	itte	eq
  405ba8:	4610      	moveq	r0, r2
  405baa:	4619      	moveq	r1, r3
  405bac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405bb0:	d019      	beq.n	405be6 <__aeabi_dmul+0x24a>
  405bb2:	ea94 0f0c 	teq	r4, ip
  405bb6:	d102      	bne.n	405bbe <__aeabi_dmul+0x222>
  405bb8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405bbc:	d113      	bne.n	405be6 <__aeabi_dmul+0x24a>
  405bbe:	ea95 0f0c 	teq	r5, ip
  405bc2:	d105      	bne.n	405bd0 <__aeabi_dmul+0x234>
  405bc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405bc8:	bf1c      	itt	ne
  405bca:	4610      	movne	r0, r2
  405bcc:	4619      	movne	r1, r3
  405bce:	d10a      	bne.n	405be6 <__aeabi_dmul+0x24a>
  405bd0:	ea81 0103 	eor.w	r1, r1, r3
  405bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405bd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405bdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405be0:	f04f 0000 	mov.w	r0, #0
  405be4:	bd70      	pop	{r4, r5, r6, pc}
  405be6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405bea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405bee:	bd70      	pop	{r4, r5, r6, pc}

00405bf0 <__aeabi_ddiv>:
  405bf0:	b570      	push	{r4, r5, r6, lr}
  405bf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405bf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405bfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405bfe:	bf1d      	ittte	ne
  405c00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405c04:	ea94 0f0c 	teqne	r4, ip
  405c08:	ea95 0f0c 	teqne	r5, ip
  405c0c:	f000 f8a7 	bleq	405d5e <__aeabi_ddiv+0x16e>
  405c10:	eba4 0405 	sub.w	r4, r4, r5
  405c14:	ea81 0e03 	eor.w	lr, r1, r3
  405c18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405c1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405c20:	f000 8088 	beq.w	405d34 <__aeabi_ddiv+0x144>
  405c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405c28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405c2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405c30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405c34:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405c38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405c3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405c40:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405c44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405c48:	429d      	cmp	r5, r3
  405c4a:	bf08      	it	eq
  405c4c:	4296      	cmpeq	r6, r2
  405c4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405c52:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405c56:	d202      	bcs.n	405c5e <__aeabi_ddiv+0x6e>
  405c58:	085b      	lsrs	r3, r3, #1
  405c5a:	ea4f 0232 	mov.w	r2, r2, rrx
  405c5e:	1ab6      	subs	r6, r6, r2
  405c60:	eb65 0503 	sbc.w	r5, r5, r3
  405c64:	085b      	lsrs	r3, r3, #1
  405c66:	ea4f 0232 	mov.w	r2, r2, rrx
  405c6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405c6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405c72:	ebb6 0e02 	subs.w	lr, r6, r2
  405c76:	eb75 0e03 	sbcs.w	lr, r5, r3
  405c7a:	bf22      	ittt	cs
  405c7c:	1ab6      	subcs	r6, r6, r2
  405c7e:	4675      	movcs	r5, lr
  405c80:	ea40 000c 	orrcs.w	r0, r0, ip
  405c84:	085b      	lsrs	r3, r3, #1
  405c86:	ea4f 0232 	mov.w	r2, r2, rrx
  405c8a:	ebb6 0e02 	subs.w	lr, r6, r2
  405c8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405c92:	bf22      	ittt	cs
  405c94:	1ab6      	subcs	r6, r6, r2
  405c96:	4675      	movcs	r5, lr
  405c98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405c9c:	085b      	lsrs	r3, r3, #1
  405c9e:	ea4f 0232 	mov.w	r2, r2, rrx
  405ca2:	ebb6 0e02 	subs.w	lr, r6, r2
  405ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
  405caa:	bf22      	ittt	cs
  405cac:	1ab6      	subcs	r6, r6, r2
  405cae:	4675      	movcs	r5, lr
  405cb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405cb4:	085b      	lsrs	r3, r3, #1
  405cb6:	ea4f 0232 	mov.w	r2, r2, rrx
  405cba:	ebb6 0e02 	subs.w	lr, r6, r2
  405cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
  405cc2:	bf22      	ittt	cs
  405cc4:	1ab6      	subcs	r6, r6, r2
  405cc6:	4675      	movcs	r5, lr
  405cc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405ccc:	ea55 0e06 	orrs.w	lr, r5, r6
  405cd0:	d018      	beq.n	405d04 <__aeabi_ddiv+0x114>
  405cd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405cd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405cda:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405cde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405ce2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405ce6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405cea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405cee:	d1c0      	bne.n	405c72 <__aeabi_ddiv+0x82>
  405cf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405cf4:	d10b      	bne.n	405d0e <__aeabi_ddiv+0x11e>
  405cf6:	ea41 0100 	orr.w	r1, r1, r0
  405cfa:	f04f 0000 	mov.w	r0, #0
  405cfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405d02:	e7b6      	b.n	405c72 <__aeabi_ddiv+0x82>
  405d04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405d08:	bf04      	itt	eq
  405d0a:	4301      	orreq	r1, r0
  405d0c:	2000      	moveq	r0, #0
  405d0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405d12:	bf88      	it	hi
  405d14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405d18:	f63f aeaf 	bhi.w	405a7a <__aeabi_dmul+0xde>
  405d1c:	ebb5 0c03 	subs.w	ip, r5, r3
  405d20:	bf04      	itt	eq
  405d22:	ebb6 0c02 	subseq.w	ip, r6, r2
  405d26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405d2a:	f150 0000 	adcs.w	r0, r0, #0
  405d2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405d32:	bd70      	pop	{r4, r5, r6, pc}
  405d34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405d38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405d3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405d40:	bfc2      	ittt	gt
  405d42:	ebd4 050c 	rsbsgt	r5, r4, ip
  405d46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405d4a:	bd70      	popgt	{r4, r5, r6, pc}
  405d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405d50:	f04f 0e00 	mov.w	lr, #0
  405d54:	3c01      	subs	r4, #1
  405d56:	e690      	b.n	405a7a <__aeabi_dmul+0xde>
  405d58:	ea45 0e06 	orr.w	lr, r5, r6
  405d5c:	e68d      	b.n	405a7a <__aeabi_dmul+0xde>
  405d5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405d62:	ea94 0f0c 	teq	r4, ip
  405d66:	bf08      	it	eq
  405d68:	ea95 0f0c 	teqeq	r5, ip
  405d6c:	f43f af3b 	beq.w	405be6 <__aeabi_dmul+0x24a>
  405d70:	ea94 0f0c 	teq	r4, ip
  405d74:	d10a      	bne.n	405d8c <__aeabi_ddiv+0x19c>
  405d76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405d7a:	f47f af34 	bne.w	405be6 <__aeabi_dmul+0x24a>
  405d7e:	ea95 0f0c 	teq	r5, ip
  405d82:	f47f af25 	bne.w	405bd0 <__aeabi_dmul+0x234>
  405d86:	4610      	mov	r0, r2
  405d88:	4619      	mov	r1, r3
  405d8a:	e72c      	b.n	405be6 <__aeabi_dmul+0x24a>
  405d8c:	ea95 0f0c 	teq	r5, ip
  405d90:	d106      	bne.n	405da0 <__aeabi_ddiv+0x1b0>
  405d92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405d96:	f43f aefd 	beq.w	405b94 <__aeabi_dmul+0x1f8>
  405d9a:	4610      	mov	r0, r2
  405d9c:	4619      	mov	r1, r3
  405d9e:	e722      	b.n	405be6 <__aeabi_dmul+0x24a>
  405da0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405da4:	bf18      	it	ne
  405da6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405daa:	f47f aec5 	bne.w	405b38 <__aeabi_dmul+0x19c>
  405dae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405db2:	f47f af0d 	bne.w	405bd0 <__aeabi_dmul+0x234>
  405db6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405dba:	f47f aeeb 	bne.w	405b94 <__aeabi_dmul+0x1f8>
  405dbe:	e712      	b.n	405be6 <__aeabi_dmul+0x24a>

00405dc0 <__gedf2>:
  405dc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  405dc4:	e006      	b.n	405dd4 <__cmpdf2+0x4>
  405dc6:	bf00      	nop

00405dc8 <__ledf2>:
  405dc8:	f04f 0c01 	mov.w	ip, #1
  405dcc:	e002      	b.n	405dd4 <__cmpdf2+0x4>
  405dce:	bf00      	nop

00405dd0 <__cmpdf2>:
  405dd0:	f04f 0c01 	mov.w	ip, #1
  405dd4:	f84d cd04 	str.w	ip, [sp, #-4]!
  405dd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405ddc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405de0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405de4:	bf18      	it	ne
  405de6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  405dea:	d01b      	beq.n	405e24 <__cmpdf2+0x54>
  405dec:	b001      	add	sp, #4
  405dee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405df2:	bf0c      	ite	eq
  405df4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405df8:	ea91 0f03 	teqne	r1, r3
  405dfc:	bf02      	ittt	eq
  405dfe:	ea90 0f02 	teqeq	r0, r2
  405e02:	2000      	moveq	r0, #0
  405e04:	4770      	bxeq	lr
  405e06:	f110 0f00 	cmn.w	r0, #0
  405e0a:	ea91 0f03 	teq	r1, r3
  405e0e:	bf58      	it	pl
  405e10:	4299      	cmppl	r1, r3
  405e12:	bf08      	it	eq
  405e14:	4290      	cmpeq	r0, r2
  405e16:	bf2c      	ite	cs
  405e18:	17d8      	asrcs	r0, r3, #31
  405e1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  405e1e:	f040 0001 	orr.w	r0, r0, #1
  405e22:	4770      	bx	lr
  405e24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405e28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405e2c:	d102      	bne.n	405e34 <__cmpdf2+0x64>
  405e2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405e32:	d107      	bne.n	405e44 <__cmpdf2+0x74>
  405e34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405e3c:	d1d6      	bne.n	405dec <__cmpdf2+0x1c>
  405e3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405e42:	d0d3      	beq.n	405dec <__cmpdf2+0x1c>
  405e44:	f85d 0b04 	ldr.w	r0, [sp], #4
  405e48:	4770      	bx	lr
  405e4a:	bf00      	nop

00405e4c <__aeabi_cdrcmple>:
  405e4c:	4684      	mov	ip, r0
  405e4e:	4610      	mov	r0, r2
  405e50:	4662      	mov	r2, ip
  405e52:	468c      	mov	ip, r1
  405e54:	4619      	mov	r1, r3
  405e56:	4663      	mov	r3, ip
  405e58:	e000      	b.n	405e5c <__aeabi_cdcmpeq>
  405e5a:	bf00      	nop

00405e5c <__aeabi_cdcmpeq>:
  405e5c:	b501      	push	{r0, lr}
  405e5e:	f7ff ffb7 	bl	405dd0 <__cmpdf2>
  405e62:	2800      	cmp	r0, #0
  405e64:	bf48      	it	mi
  405e66:	f110 0f00 	cmnmi.w	r0, #0
  405e6a:	bd01      	pop	{r0, pc}

00405e6c <__aeabi_dcmpeq>:
  405e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e70:	f7ff fff4 	bl	405e5c <__aeabi_cdcmpeq>
  405e74:	bf0c      	ite	eq
  405e76:	2001      	moveq	r0, #1
  405e78:	2000      	movne	r0, #0
  405e7a:	f85d fb08 	ldr.w	pc, [sp], #8
  405e7e:	bf00      	nop

00405e80 <__aeabi_dcmplt>:
  405e80:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e84:	f7ff ffea 	bl	405e5c <__aeabi_cdcmpeq>
  405e88:	bf34      	ite	cc
  405e8a:	2001      	movcc	r0, #1
  405e8c:	2000      	movcs	r0, #0
  405e8e:	f85d fb08 	ldr.w	pc, [sp], #8
  405e92:	bf00      	nop

00405e94 <__aeabi_dcmple>:
  405e94:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e98:	f7ff ffe0 	bl	405e5c <__aeabi_cdcmpeq>
  405e9c:	bf94      	ite	ls
  405e9e:	2001      	movls	r0, #1
  405ea0:	2000      	movhi	r0, #0
  405ea2:	f85d fb08 	ldr.w	pc, [sp], #8
  405ea6:	bf00      	nop

00405ea8 <__aeabi_dcmpge>:
  405ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
  405eac:	f7ff ffce 	bl	405e4c <__aeabi_cdrcmple>
  405eb0:	bf94      	ite	ls
  405eb2:	2001      	movls	r0, #1
  405eb4:	2000      	movhi	r0, #0
  405eb6:	f85d fb08 	ldr.w	pc, [sp], #8
  405eba:	bf00      	nop

00405ebc <__aeabi_dcmpgt>:
  405ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
  405ec0:	f7ff ffc4 	bl	405e4c <__aeabi_cdrcmple>
  405ec4:	bf34      	ite	cc
  405ec6:	2001      	movcc	r0, #1
  405ec8:	2000      	movcs	r0, #0
  405eca:	f85d fb08 	ldr.w	pc, [sp], #8
  405ece:	bf00      	nop

00405ed0 <__aeabi_dcmpun>:
  405ed0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405ed4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405ed8:	d102      	bne.n	405ee0 <__aeabi_dcmpun+0x10>
  405eda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405ede:	d10a      	bne.n	405ef6 <__aeabi_dcmpun+0x26>
  405ee0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405ee8:	d102      	bne.n	405ef0 <__aeabi_dcmpun+0x20>
  405eea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405eee:	d102      	bne.n	405ef6 <__aeabi_dcmpun+0x26>
  405ef0:	f04f 0000 	mov.w	r0, #0
  405ef4:	4770      	bx	lr
  405ef6:	f04f 0001 	mov.w	r0, #1
  405efa:	4770      	bx	lr

00405efc <__aeabi_d2iz>:
  405efc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405f00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405f04:	d215      	bcs.n	405f32 <__aeabi_d2iz+0x36>
  405f06:	d511      	bpl.n	405f2c <__aeabi_d2iz+0x30>
  405f08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405f0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405f10:	d912      	bls.n	405f38 <__aeabi_d2iz+0x3c>
  405f12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405f1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405f1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405f22:	fa23 f002 	lsr.w	r0, r3, r2
  405f26:	bf18      	it	ne
  405f28:	4240      	negne	r0, r0
  405f2a:	4770      	bx	lr
  405f2c:	f04f 0000 	mov.w	r0, #0
  405f30:	4770      	bx	lr
  405f32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405f36:	d105      	bne.n	405f44 <__aeabi_d2iz+0x48>
  405f38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405f3c:	bf08      	it	eq
  405f3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405f42:	4770      	bx	lr
  405f44:	f04f 0000 	mov.w	r0, #0
  405f48:	4770      	bx	lr
  405f4a:	bf00      	nop

00405f4c <__aeabi_d2f>:
  405f4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405f50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405f54:	bf24      	itt	cs
  405f56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  405f5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  405f5e:	d90d      	bls.n	405f7c <__aeabi_d2f+0x30>
  405f60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405f64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405f68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  405f6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405f70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405f74:	bf08      	it	eq
  405f76:	f020 0001 	biceq.w	r0, r0, #1
  405f7a:	4770      	bx	lr
  405f7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405f80:	d121      	bne.n	405fc6 <__aeabi_d2f+0x7a>
  405f82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405f86:	bfbc      	itt	lt
  405f88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405f8c:	4770      	bxlt	lr
  405f8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405f92:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405f96:	f1c2 0218 	rsb	r2, r2, #24
  405f9a:	f1c2 0c20 	rsb	ip, r2, #32
  405f9e:	fa10 f30c 	lsls.w	r3, r0, ip
  405fa2:	fa20 f002 	lsr.w	r0, r0, r2
  405fa6:	bf18      	it	ne
  405fa8:	f040 0001 	orrne.w	r0, r0, #1
  405fac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405fb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405fb4:	fa03 fc0c 	lsl.w	ip, r3, ip
  405fb8:	ea40 000c 	orr.w	r0, r0, ip
  405fbc:	fa23 f302 	lsr.w	r3, r3, r2
  405fc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405fc4:	e7cc      	b.n	405f60 <__aeabi_d2f+0x14>
  405fc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405fca:	d107      	bne.n	405fdc <__aeabi_d2f+0x90>
  405fcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405fd0:	bf1e      	ittt	ne
  405fd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405fd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405fda:	4770      	bxne	lr
  405fdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405fe0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405fe4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405fe8:	4770      	bx	lr
  405fea:	bf00      	nop

00405fec <__aeabi_frsub>:
  405fec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  405ff0:	e002      	b.n	405ff8 <__addsf3>
  405ff2:	bf00      	nop

00405ff4 <__aeabi_fsub>:
  405ff4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405ff8 <__addsf3>:
  405ff8:	0042      	lsls	r2, r0, #1
  405ffa:	bf1f      	itttt	ne
  405ffc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  406000:	ea92 0f03 	teqne	r2, r3
  406004:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  406008:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40600c:	d06a      	beq.n	4060e4 <__addsf3+0xec>
  40600e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  406012:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  406016:	bfc1      	itttt	gt
  406018:	18d2      	addgt	r2, r2, r3
  40601a:	4041      	eorgt	r1, r0
  40601c:	4048      	eorgt	r0, r1
  40601e:	4041      	eorgt	r1, r0
  406020:	bfb8      	it	lt
  406022:	425b      	neglt	r3, r3
  406024:	2b19      	cmp	r3, #25
  406026:	bf88      	it	hi
  406028:	4770      	bxhi	lr
  40602a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40602e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406032:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  406036:	bf18      	it	ne
  406038:	4240      	negne	r0, r0
  40603a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40603e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  406042:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  406046:	bf18      	it	ne
  406048:	4249      	negne	r1, r1
  40604a:	ea92 0f03 	teq	r2, r3
  40604e:	d03f      	beq.n	4060d0 <__addsf3+0xd8>
  406050:	f1a2 0201 	sub.w	r2, r2, #1
  406054:	fa41 fc03 	asr.w	ip, r1, r3
  406058:	eb10 000c 	adds.w	r0, r0, ip
  40605c:	f1c3 0320 	rsb	r3, r3, #32
  406060:	fa01 f103 	lsl.w	r1, r1, r3
  406064:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  406068:	d502      	bpl.n	406070 <__addsf3+0x78>
  40606a:	4249      	negs	r1, r1
  40606c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  406070:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  406074:	d313      	bcc.n	40609e <__addsf3+0xa6>
  406076:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40607a:	d306      	bcc.n	40608a <__addsf3+0x92>
  40607c:	0840      	lsrs	r0, r0, #1
  40607e:	ea4f 0131 	mov.w	r1, r1, rrx
  406082:	f102 0201 	add.w	r2, r2, #1
  406086:	2afe      	cmp	r2, #254	; 0xfe
  406088:	d251      	bcs.n	40612e <__addsf3+0x136>
  40608a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40608e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406092:	bf08      	it	eq
  406094:	f020 0001 	biceq.w	r0, r0, #1
  406098:	ea40 0003 	orr.w	r0, r0, r3
  40609c:	4770      	bx	lr
  40609e:	0049      	lsls	r1, r1, #1
  4060a0:	eb40 0000 	adc.w	r0, r0, r0
  4060a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4060a8:	f1a2 0201 	sub.w	r2, r2, #1
  4060ac:	d1ed      	bne.n	40608a <__addsf3+0x92>
  4060ae:	fab0 fc80 	clz	ip, r0
  4060b2:	f1ac 0c08 	sub.w	ip, ip, #8
  4060b6:	ebb2 020c 	subs.w	r2, r2, ip
  4060ba:	fa00 f00c 	lsl.w	r0, r0, ip
  4060be:	bfaa      	itet	ge
  4060c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4060c4:	4252      	neglt	r2, r2
  4060c6:	4318      	orrge	r0, r3
  4060c8:	bfbc      	itt	lt
  4060ca:	40d0      	lsrlt	r0, r2
  4060cc:	4318      	orrlt	r0, r3
  4060ce:	4770      	bx	lr
  4060d0:	f092 0f00 	teq	r2, #0
  4060d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4060d8:	bf06      	itte	eq
  4060da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4060de:	3201      	addeq	r2, #1
  4060e0:	3b01      	subne	r3, #1
  4060e2:	e7b5      	b.n	406050 <__addsf3+0x58>
  4060e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4060e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4060ec:	bf18      	it	ne
  4060ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4060f2:	d021      	beq.n	406138 <__addsf3+0x140>
  4060f4:	ea92 0f03 	teq	r2, r3
  4060f8:	d004      	beq.n	406104 <__addsf3+0x10c>
  4060fa:	f092 0f00 	teq	r2, #0
  4060fe:	bf08      	it	eq
  406100:	4608      	moveq	r0, r1
  406102:	4770      	bx	lr
  406104:	ea90 0f01 	teq	r0, r1
  406108:	bf1c      	itt	ne
  40610a:	2000      	movne	r0, #0
  40610c:	4770      	bxne	lr
  40610e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  406112:	d104      	bne.n	40611e <__addsf3+0x126>
  406114:	0040      	lsls	r0, r0, #1
  406116:	bf28      	it	cs
  406118:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40611c:	4770      	bx	lr
  40611e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  406122:	bf3c      	itt	cc
  406124:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  406128:	4770      	bxcc	lr
  40612a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40612e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  406132:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406136:	4770      	bx	lr
  406138:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40613c:	bf16      	itet	ne
  40613e:	4608      	movne	r0, r1
  406140:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  406144:	4601      	movne	r1, r0
  406146:	0242      	lsls	r2, r0, #9
  406148:	bf06      	itte	eq
  40614a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40614e:	ea90 0f01 	teqeq	r0, r1
  406152:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  406156:	4770      	bx	lr

00406158 <__aeabi_ui2f>:
  406158:	f04f 0300 	mov.w	r3, #0
  40615c:	e004      	b.n	406168 <__aeabi_i2f+0x8>
  40615e:	bf00      	nop

00406160 <__aeabi_i2f>:
  406160:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  406164:	bf48      	it	mi
  406166:	4240      	negmi	r0, r0
  406168:	ea5f 0c00 	movs.w	ip, r0
  40616c:	bf08      	it	eq
  40616e:	4770      	bxeq	lr
  406170:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  406174:	4601      	mov	r1, r0
  406176:	f04f 0000 	mov.w	r0, #0
  40617a:	e01c      	b.n	4061b6 <__aeabi_l2f+0x2a>

0040617c <__aeabi_ul2f>:
  40617c:	ea50 0201 	orrs.w	r2, r0, r1
  406180:	bf08      	it	eq
  406182:	4770      	bxeq	lr
  406184:	f04f 0300 	mov.w	r3, #0
  406188:	e00a      	b.n	4061a0 <__aeabi_l2f+0x14>
  40618a:	bf00      	nop

0040618c <__aeabi_l2f>:
  40618c:	ea50 0201 	orrs.w	r2, r0, r1
  406190:	bf08      	it	eq
  406192:	4770      	bxeq	lr
  406194:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  406198:	d502      	bpl.n	4061a0 <__aeabi_l2f+0x14>
  40619a:	4240      	negs	r0, r0
  40619c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4061a0:	ea5f 0c01 	movs.w	ip, r1
  4061a4:	bf02      	ittt	eq
  4061a6:	4684      	moveq	ip, r0
  4061a8:	4601      	moveq	r1, r0
  4061aa:	2000      	moveq	r0, #0
  4061ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4061b0:	bf08      	it	eq
  4061b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  4061b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4061ba:	fabc f28c 	clz	r2, ip
  4061be:	3a08      	subs	r2, #8
  4061c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4061c4:	db10      	blt.n	4061e8 <__aeabi_l2f+0x5c>
  4061c6:	fa01 fc02 	lsl.w	ip, r1, r2
  4061ca:	4463      	add	r3, ip
  4061cc:	fa00 fc02 	lsl.w	ip, r0, r2
  4061d0:	f1c2 0220 	rsb	r2, r2, #32
  4061d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4061d8:	fa20 f202 	lsr.w	r2, r0, r2
  4061dc:	eb43 0002 	adc.w	r0, r3, r2
  4061e0:	bf08      	it	eq
  4061e2:	f020 0001 	biceq.w	r0, r0, #1
  4061e6:	4770      	bx	lr
  4061e8:	f102 0220 	add.w	r2, r2, #32
  4061ec:	fa01 fc02 	lsl.w	ip, r1, r2
  4061f0:	f1c2 0220 	rsb	r2, r2, #32
  4061f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4061f8:	fa21 f202 	lsr.w	r2, r1, r2
  4061fc:	eb43 0002 	adc.w	r0, r3, r2
  406200:	bf08      	it	eq
  406202:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406206:	4770      	bx	lr

00406208 <__aeabi_fmul>:
  406208:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40620c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406210:	bf1e      	ittt	ne
  406212:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406216:	ea92 0f0c 	teqne	r2, ip
  40621a:	ea93 0f0c 	teqne	r3, ip
  40621e:	d06f      	beq.n	406300 <__aeabi_fmul+0xf8>
  406220:	441a      	add	r2, r3
  406222:	ea80 0c01 	eor.w	ip, r0, r1
  406226:	0240      	lsls	r0, r0, #9
  406228:	bf18      	it	ne
  40622a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40622e:	d01e      	beq.n	40626e <__aeabi_fmul+0x66>
  406230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406234:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  406238:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40623c:	fba0 3101 	umull	r3, r1, r0, r1
  406240:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406244:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  406248:	bf3e      	ittt	cc
  40624a:	0049      	lslcc	r1, r1, #1
  40624c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  406250:	005b      	lslcc	r3, r3, #1
  406252:	ea40 0001 	orr.w	r0, r0, r1
  406256:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40625a:	2afd      	cmp	r2, #253	; 0xfd
  40625c:	d81d      	bhi.n	40629a <__aeabi_fmul+0x92>
  40625e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  406262:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406266:	bf08      	it	eq
  406268:	f020 0001 	biceq.w	r0, r0, #1
  40626c:	4770      	bx	lr
  40626e:	f090 0f00 	teq	r0, #0
  406272:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406276:	bf08      	it	eq
  406278:	0249      	lsleq	r1, r1, #9
  40627a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40627e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  406282:	3a7f      	subs	r2, #127	; 0x7f
  406284:	bfc2      	ittt	gt
  406286:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40628a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40628e:	4770      	bxgt	lr
  406290:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406294:	f04f 0300 	mov.w	r3, #0
  406298:	3a01      	subs	r2, #1
  40629a:	dc5d      	bgt.n	406358 <__aeabi_fmul+0x150>
  40629c:	f112 0f19 	cmn.w	r2, #25
  4062a0:	bfdc      	itt	le
  4062a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4062a6:	4770      	bxle	lr
  4062a8:	f1c2 0200 	rsb	r2, r2, #0
  4062ac:	0041      	lsls	r1, r0, #1
  4062ae:	fa21 f102 	lsr.w	r1, r1, r2
  4062b2:	f1c2 0220 	rsb	r2, r2, #32
  4062b6:	fa00 fc02 	lsl.w	ip, r0, r2
  4062ba:	ea5f 0031 	movs.w	r0, r1, rrx
  4062be:	f140 0000 	adc.w	r0, r0, #0
  4062c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4062c6:	bf08      	it	eq
  4062c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4062cc:	4770      	bx	lr
  4062ce:	f092 0f00 	teq	r2, #0
  4062d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4062d6:	bf02      	ittt	eq
  4062d8:	0040      	lsleq	r0, r0, #1
  4062da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4062de:	3a01      	subeq	r2, #1
  4062e0:	d0f9      	beq.n	4062d6 <__aeabi_fmul+0xce>
  4062e2:	ea40 000c 	orr.w	r0, r0, ip
  4062e6:	f093 0f00 	teq	r3, #0
  4062ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4062ee:	bf02      	ittt	eq
  4062f0:	0049      	lsleq	r1, r1, #1
  4062f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4062f6:	3b01      	subeq	r3, #1
  4062f8:	d0f9      	beq.n	4062ee <__aeabi_fmul+0xe6>
  4062fa:	ea41 010c 	orr.w	r1, r1, ip
  4062fe:	e78f      	b.n	406220 <__aeabi_fmul+0x18>
  406300:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406304:	ea92 0f0c 	teq	r2, ip
  406308:	bf18      	it	ne
  40630a:	ea93 0f0c 	teqne	r3, ip
  40630e:	d00a      	beq.n	406326 <__aeabi_fmul+0x11e>
  406310:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406314:	bf18      	it	ne
  406316:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40631a:	d1d8      	bne.n	4062ce <__aeabi_fmul+0xc6>
  40631c:	ea80 0001 	eor.w	r0, r0, r1
  406320:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406324:	4770      	bx	lr
  406326:	f090 0f00 	teq	r0, #0
  40632a:	bf17      	itett	ne
  40632c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  406330:	4608      	moveq	r0, r1
  406332:	f091 0f00 	teqne	r1, #0
  406336:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40633a:	d014      	beq.n	406366 <__aeabi_fmul+0x15e>
  40633c:	ea92 0f0c 	teq	r2, ip
  406340:	d101      	bne.n	406346 <__aeabi_fmul+0x13e>
  406342:	0242      	lsls	r2, r0, #9
  406344:	d10f      	bne.n	406366 <__aeabi_fmul+0x15e>
  406346:	ea93 0f0c 	teq	r3, ip
  40634a:	d103      	bne.n	406354 <__aeabi_fmul+0x14c>
  40634c:	024b      	lsls	r3, r1, #9
  40634e:	bf18      	it	ne
  406350:	4608      	movne	r0, r1
  406352:	d108      	bne.n	406366 <__aeabi_fmul+0x15e>
  406354:	ea80 0001 	eor.w	r0, r0, r1
  406358:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40635c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406360:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406364:	4770      	bx	lr
  406366:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40636a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40636e:	4770      	bx	lr

00406370 <__aeabi_fdiv>:
  406370:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406374:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406378:	bf1e      	ittt	ne
  40637a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40637e:	ea92 0f0c 	teqne	r2, ip
  406382:	ea93 0f0c 	teqne	r3, ip
  406386:	d069      	beq.n	40645c <__aeabi_fdiv+0xec>
  406388:	eba2 0203 	sub.w	r2, r2, r3
  40638c:	ea80 0c01 	eor.w	ip, r0, r1
  406390:	0249      	lsls	r1, r1, #9
  406392:	ea4f 2040 	mov.w	r0, r0, lsl #9
  406396:	d037      	beq.n	406408 <__aeabi_fdiv+0x98>
  406398:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40639c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4063a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4063a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4063a8:	428b      	cmp	r3, r1
  4063aa:	bf38      	it	cc
  4063ac:	005b      	lslcc	r3, r3, #1
  4063ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4063b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  4063b6:	428b      	cmp	r3, r1
  4063b8:	bf24      	itt	cs
  4063ba:	1a5b      	subcs	r3, r3, r1
  4063bc:	ea40 000c 	orrcs.w	r0, r0, ip
  4063c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4063c4:	bf24      	itt	cs
  4063c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4063ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4063ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4063d2:	bf24      	itt	cs
  4063d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4063d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4063dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4063e0:	bf24      	itt	cs
  4063e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4063e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4063ea:	011b      	lsls	r3, r3, #4
  4063ec:	bf18      	it	ne
  4063ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4063f2:	d1e0      	bne.n	4063b6 <__aeabi_fdiv+0x46>
  4063f4:	2afd      	cmp	r2, #253	; 0xfd
  4063f6:	f63f af50 	bhi.w	40629a <__aeabi_fmul+0x92>
  4063fa:	428b      	cmp	r3, r1
  4063fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  406400:	bf08      	it	eq
  406402:	f020 0001 	biceq.w	r0, r0, #1
  406406:	4770      	bx	lr
  406408:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40640c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406410:	327f      	adds	r2, #127	; 0x7f
  406412:	bfc2      	ittt	gt
  406414:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406418:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40641c:	4770      	bxgt	lr
  40641e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406422:	f04f 0300 	mov.w	r3, #0
  406426:	3a01      	subs	r2, #1
  406428:	e737      	b.n	40629a <__aeabi_fmul+0x92>
  40642a:	f092 0f00 	teq	r2, #0
  40642e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406432:	bf02      	ittt	eq
  406434:	0040      	lsleq	r0, r0, #1
  406436:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40643a:	3a01      	subeq	r2, #1
  40643c:	d0f9      	beq.n	406432 <__aeabi_fdiv+0xc2>
  40643e:	ea40 000c 	orr.w	r0, r0, ip
  406442:	f093 0f00 	teq	r3, #0
  406446:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40644a:	bf02      	ittt	eq
  40644c:	0049      	lsleq	r1, r1, #1
  40644e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406452:	3b01      	subeq	r3, #1
  406454:	d0f9      	beq.n	40644a <__aeabi_fdiv+0xda>
  406456:	ea41 010c 	orr.w	r1, r1, ip
  40645a:	e795      	b.n	406388 <__aeabi_fdiv+0x18>
  40645c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406460:	ea92 0f0c 	teq	r2, ip
  406464:	d108      	bne.n	406478 <__aeabi_fdiv+0x108>
  406466:	0242      	lsls	r2, r0, #9
  406468:	f47f af7d 	bne.w	406366 <__aeabi_fmul+0x15e>
  40646c:	ea93 0f0c 	teq	r3, ip
  406470:	f47f af70 	bne.w	406354 <__aeabi_fmul+0x14c>
  406474:	4608      	mov	r0, r1
  406476:	e776      	b.n	406366 <__aeabi_fmul+0x15e>
  406478:	ea93 0f0c 	teq	r3, ip
  40647c:	d104      	bne.n	406488 <__aeabi_fdiv+0x118>
  40647e:	024b      	lsls	r3, r1, #9
  406480:	f43f af4c 	beq.w	40631c <__aeabi_fmul+0x114>
  406484:	4608      	mov	r0, r1
  406486:	e76e      	b.n	406366 <__aeabi_fmul+0x15e>
  406488:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40648c:	bf18      	it	ne
  40648e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406492:	d1ca      	bne.n	40642a <__aeabi_fdiv+0xba>
  406494:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406498:	f47f af5c 	bne.w	406354 <__aeabi_fmul+0x14c>
  40649c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4064a0:	f47f af3c 	bne.w	40631c <__aeabi_fmul+0x114>
  4064a4:	e75f      	b.n	406366 <__aeabi_fmul+0x15e>
  4064a6:	bf00      	nop

004064a8 <__gesf2>:
  4064a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4064ac:	e006      	b.n	4064bc <__cmpsf2+0x4>
  4064ae:	bf00      	nop

004064b0 <__lesf2>:
  4064b0:	f04f 0c01 	mov.w	ip, #1
  4064b4:	e002      	b.n	4064bc <__cmpsf2+0x4>
  4064b6:	bf00      	nop

004064b8 <__cmpsf2>:
  4064b8:	f04f 0c01 	mov.w	ip, #1
  4064bc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4064c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4064c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4064c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4064cc:	bf18      	it	ne
  4064ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4064d2:	d011      	beq.n	4064f8 <__cmpsf2+0x40>
  4064d4:	b001      	add	sp, #4
  4064d6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4064da:	bf18      	it	ne
  4064dc:	ea90 0f01 	teqne	r0, r1
  4064e0:	bf58      	it	pl
  4064e2:	ebb2 0003 	subspl.w	r0, r2, r3
  4064e6:	bf88      	it	hi
  4064e8:	17c8      	asrhi	r0, r1, #31
  4064ea:	bf38      	it	cc
  4064ec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4064f0:	bf18      	it	ne
  4064f2:	f040 0001 	orrne.w	r0, r0, #1
  4064f6:	4770      	bx	lr
  4064f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4064fc:	d102      	bne.n	406504 <__cmpsf2+0x4c>
  4064fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  406502:	d105      	bne.n	406510 <__cmpsf2+0x58>
  406504:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406508:	d1e4      	bne.n	4064d4 <__cmpsf2+0x1c>
  40650a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40650e:	d0e1      	beq.n	4064d4 <__cmpsf2+0x1c>
  406510:	f85d 0b04 	ldr.w	r0, [sp], #4
  406514:	4770      	bx	lr
  406516:	bf00      	nop

00406518 <__aeabi_cfrcmple>:
  406518:	4684      	mov	ip, r0
  40651a:	4608      	mov	r0, r1
  40651c:	4661      	mov	r1, ip
  40651e:	e7ff      	b.n	406520 <__aeabi_cfcmpeq>

00406520 <__aeabi_cfcmpeq>:
  406520:	b50f      	push	{r0, r1, r2, r3, lr}
  406522:	f7ff ffc9 	bl	4064b8 <__cmpsf2>
  406526:	2800      	cmp	r0, #0
  406528:	bf48      	it	mi
  40652a:	f110 0f00 	cmnmi.w	r0, #0
  40652e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00406530 <__aeabi_fcmpeq>:
  406530:	f84d ed08 	str.w	lr, [sp, #-8]!
  406534:	f7ff fff4 	bl	406520 <__aeabi_cfcmpeq>
  406538:	bf0c      	ite	eq
  40653a:	2001      	moveq	r0, #1
  40653c:	2000      	movne	r0, #0
  40653e:	f85d fb08 	ldr.w	pc, [sp], #8
  406542:	bf00      	nop

00406544 <__aeabi_fcmplt>:
  406544:	f84d ed08 	str.w	lr, [sp, #-8]!
  406548:	f7ff ffea 	bl	406520 <__aeabi_cfcmpeq>
  40654c:	bf34      	ite	cc
  40654e:	2001      	movcc	r0, #1
  406550:	2000      	movcs	r0, #0
  406552:	f85d fb08 	ldr.w	pc, [sp], #8
  406556:	bf00      	nop

00406558 <__aeabi_fcmple>:
  406558:	f84d ed08 	str.w	lr, [sp, #-8]!
  40655c:	f7ff ffe0 	bl	406520 <__aeabi_cfcmpeq>
  406560:	bf94      	ite	ls
  406562:	2001      	movls	r0, #1
  406564:	2000      	movhi	r0, #0
  406566:	f85d fb08 	ldr.w	pc, [sp], #8
  40656a:	bf00      	nop

0040656c <__aeabi_fcmpge>:
  40656c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406570:	f7ff ffd2 	bl	406518 <__aeabi_cfrcmple>
  406574:	bf94      	ite	ls
  406576:	2001      	movls	r0, #1
  406578:	2000      	movhi	r0, #0
  40657a:	f85d fb08 	ldr.w	pc, [sp], #8
  40657e:	bf00      	nop

00406580 <__aeabi_fcmpgt>:
  406580:	f84d ed08 	str.w	lr, [sp, #-8]!
  406584:	f7ff ffc8 	bl	406518 <__aeabi_cfrcmple>
  406588:	bf34      	ite	cc
  40658a:	2001      	movcc	r0, #1
  40658c:	2000      	movcs	r0, #0
  40658e:	f85d fb08 	ldr.w	pc, [sp], #8
  406592:	bf00      	nop

00406594 <__aeabi_f2iz>:
  406594:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406598:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40659c:	d30f      	bcc.n	4065be <__aeabi_f2iz+0x2a>
  40659e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  4065a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  4065a6:	d90d      	bls.n	4065c4 <__aeabi_f2iz+0x30>
  4065a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
  4065ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4065b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4065b4:	fa23 f002 	lsr.w	r0, r3, r2
  4065b8:	bf18      	it	ne
  4065ba:	4240      	negne	r0, r0
  4065bc:	4770      	bx	lr
  4065be:	f04f 0000 	mov.w	r0, #0
  4065c2:	4770      	bx	lr
  4065c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
  4065c8:	d101      	bne.n	4065ce <__aeabi_f2iz+0x3a>
  4065ca:	0242      	lsls	r2, r0, #9
  4065cc:	d105      	bne.n	4065da <__aeabi_f2iz+0x46>
  4065ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  4065d2:	bf08      	it	eq
  4065d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4065d8:	4770      	bx	lr
  4065da:	f04f 0000 	mov.w	r0, #0
  4065de:	4770      	bx	lr

004065e0 <__aeabi_f2uiz>:
  4065e0:	0042      	lsls	r2, r0, #1
  4065e2:	d20e      	bcs.n	406602 <__aeabi_f2uiz+0x22>
  4065e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  4065e8:	d30b      	bcc.n	406602 <__aeabi_f2uiz+0x22>
  4065ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
  4065ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  4065f2:	d409      	bmi.n	406608 <__aeabi_f2uiz+0x28>
  4065f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  4065f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4065fc:	fa23 f002 	lsr.w	r0, r3, r2
  406600:	4770      	bx	lr
  406602:	f04f 0000 	mov.w	r0, #0
  406606:	4770      	bx	lr
  406608:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40660c:	d101      	bne.n	406612 <__aeabi_f2uiz+0x32>
  40660e:	0242      	lsls	r2, r0, #9
  406610:	d102      	bne.n	406618 <__aeabi_f2uiz+0x38>
  406612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  406616:	4770      	bx	lr
  406618:	f04f 0000 	mov.w	r0, #0
  40661c:	4770      	bx	lr
  40661e:	bf00      	nop
  406620:	0a0d0a0d 	.word	0x0a0d0a0d
  406624:	346d6173 	.word	0x346d6173
  406628:	63323364 	.word	0x63323364
  40662c:	756d6920 	.word	0x756d6920
  406630:	6d656420 	.word	0x6d656420
  406634:	2e2e2e6f 	.word	0x2e2e2e6f
  406638:	00000a0d 	.word	0x00000a0d
  40663c:	0000002e 	.word	0x0000002e
  406640:	696c6163 	.word	0x696c6163
  406644:	74617262 	.word	0x74617262
  406648:	20676e69 	.word	0x20676e69
  40664c:	2e756d69 	.word	0x2e756d69
  406650:	0a0d2e2e 	.word	0x0a0d2e2e
  406654:	00000000 	.word	0x00000000
  406658:	696c6163 	.word	0x696c6163
  40665c:	74617262 	.word	0x74617262
  406660:	206e6f69 	.word	0x206e6f69
  406664:	706d6f63 	.word	0x706d6f63
  406668:	6574656c 	.word	0x6574656c
  40666c:	000a0d2e 	.word	0x000a0d2e
  406670:	6c6c6f72 	.word	0x6c6c6f72
  406674:	7469702f 	.word	0x7469702f
  406678:	792f6863 	.word	0x792f6863
  40667c:	65207761 	.word	0x65207761
  406680:	726f7272 	.word	0x726f7272
  406684:	6469702f 	.word	0x6469702f
  406688:	6625203a 	.word	0x6625203a
  40668c:	20662520 	.word	0x20662520
  406690:	25206625 	.word	0x25206625
  406694:	66252066 	.word	0x66252066
  406698:	00000a0d 	.word	0x00000a0d
  40669c:	5f676f6c 	.word	0x5f676f6c
  4066a0:	6f746f6d 	.word	0x6f746f6d
  4066a4:	00000072 	.word	0x00000072
  4066a8:	5f676f6c 	.word	0x5f676f6c
  4066ac:	6f746f6d 	.word	0x6f746f6d
  4066b0:	6f705f72 	.word	0x6f705f72
  4066b4:	3a726577 	.word	0x3a726577
  4066b8:	0d642520 	.word	0x0d642520
  4066bc:	0000000a 	.word	0x0000000a
  4066c0:	5f676f6c 	.word	0x5f676f6c
  4066c4:	00756d69 	.word	0x00756d69
  4066c8:	5f676f6c 	.word	0x5f676f6c
  4066cc:	3a756d69 	.word	0x3a756d69
  4066d0:	0d642520 	.word	0x0d642520
  4066d4:	0000000a 	.word	0x0000000a
  4066d8:	6f746f6d 	.word	0x6f746f6d
  4066dc:	696d5f72 	.word	0x696d5f72
  4066e0:	0000006e 	.word	0x0000006e
  4066e4:	6f746f6d 	.word	0x6f746f6d
  4066e8:	696d2072 	.word	0x696d2072
  4066ec:	6f63206e 	.word	0x6f63206e
  4066f0:	6e616d6d 	.word	0x6e616d6d
  4066f4:	73692064 	.word	0x73692064
  4066f8:	64657573 	.word	0x64657573
  4066fc:	00000a0d 	.word	0x00000a0d
  406700:	6f746f6d 	.word	0x6f746f6d
  406704:	696d5f72 	.word	0x696d5f72
  406708:	00000064 	.word	0x00000064
  40670c:	6f746f6d 	.word	0x6f746f6d
  406710:	696d2072 	.word	0x696d2072
  406714:	6f632064 	.word	0x6f632064
  406718:	6e616d6d 	.word	0x6e616d6d
  40671c:	73692064 	.word	0x73692064
  406720:	64657573 	.word	0x64657573
  406724:	00000a0d 	.word	0x00000a0d
  406728:	6f746f6d 	.word	0x6f746f6d
  40672c:	616d5f72 	.word	0x616d5f72
  406730:	00000078 	.word	0x00000078
  406734:	6f746f6d 	.word	0x6f746f6d
  406738:	616d2072 	.word	0x616d2072
  40673c:	6f632078 	.word	0x6f632078
  406740:	6e616d6d 	.word	0x6e616d6d
  406744:	73692064 	.word	0x73692064
  406748:	64657573 	.word	0x64657573
  40674c:	00000a0d 	.word	0x00000a0d
  406750:	00000020 	.word	0x00000020
  406754:	3d646d63 	.word	0x3d646d63
  406758:	0a0d7325 	.word	0x0a0d7325
  40675c:	00000000 	.word	0x00000000
  406760:	6d726170 	.word	0x6d726170
  406764:	0d73253d 	.word	0x0d73253d
  406768:	0000000a 	.word	0x0000000a
  40676c:	74697277 	.word	0x74697277
  406770:	65725f65 	.word	0x65725f65
  406774:	74736967 	.word	0x74736967
  406778:	203a7265 	.word	0x203a7265
  40677c:	63637573 	.word	0x63637573
  406780:	0d737365 	.word	0x0d737365
  406784:	0000000a 	.word	0x0000000a
  406788:	5f697774 	.word	0x5f697774
  40678c:	7473616d 	.word	0x7473616d
  406790:	695f7265 	.word	0x695f7265
  406794:	3a74696e 	.word	0x3a74696e
  406798:	69616620 	.word	0x69616620
  40679c:	0d64656c 	.word	0x0d64656c
  4067a0:	0000000a 	.word	0x0000000a
  4067a4:	5f697774 	.word	0x5f697774
  4067a8:	7473616d 	.word	0x7473616d
  4067ac:	695f7265 	.word	0x695f7265
  4067b0:	3a74696e 	.word	0x3a74696e
  4067b4:	63757320 	.word	0x63757320
  4067b8:	73736563 	.word	0x73736563
  4067bc:	00000a0d 	.word	0x00000a0d
  4067c0:	5f697774 	.word	0x5f697774
  4067c4:	626f7270 	.word	0x626f7270
  4067c8:	66203a65 	.word	0x66203a65
  4067cc:	656c6961 	.word	0x656c6961
  4067d0:	000a0d64 	.word	0x000a0d64
  4067d4:	5f697774 	.word	0x5f697774
  4067d8:	626f7270 	.word	0x626f7270
  4067dc:	73203a65 	.word	0x73203a65
  4067e0:	65636375 	.word	0x65636375
  4067e4:	0a0d7373 	.word	0x0a0d7373
  4067e8:	00000000 	.word	0x00000000
  4067ec:	62616e45 	.word	0x62616e45
  4067f0:	0064656c 	.word	0x0064656c
  4067f4:	61736944 	.word	0x61736944
  4067f8:	64656c62 	.word	0x64656c62
  4067fc:	00000000 	.word	0x00000000
  406800:	69766544 	.word	0x69766544
  406804:	203a6563 	.word	0x203a6563
  406808:	31257830 	.word	0x31257830
  40680c:	000a0d78 	.word	0x000a0d78
  406810:	65656c53 	.word	0x65656c53
  406814:	6f4d2070 	.word	0x6f4d2070
  406818:	203a6564 	.word	0x203a6564
  40681c:	0a0d7325 	.word	0x0a0d7325
  406820:	00000000 	.word	0x00000000
  406824:	636f6c43 	.word	0x636f6c43
  406828:	6f53206b 	.word	0x6f53206b
  40682c:	65637275 	.word	0x65637275
  406830:	0000203a 	.word	0x0000203a
  406834:	65746e49 	.word	0x65746e49
  406838:	6c616e72 	.word	0x6c616e72
  40683c:	484d3820 	.word	0x484d3820
  406840:	736f207a 	.word	0x736f207a
  406844:	6c6c6963 	.word	0x6c6c6963
  406848:	726f7461 	.word	0x726f7461
  40684c:	00000a0d 	.word	0x00000a0d
  406850:	204c4c50 	.word	0x204c4c50
  406854:	68746977 	.word	0x68746977
  406858:	61205820 	.word	0x61205820
  40685c:	20736978 	.word	0x20736978
  406860:	6f727967 	.word	0x6f727967
  406864:	706f6373 	.word	0x706f6373
  406868:	65722065 	.word	0x65722065
  40686c:	65726566 	.word	0x65726566
  406870:	0d65636e 	.word	0x0d65636e
  406874:	0000000a 	.word	0x0000000a
  406878:	6f727947 	.word	0x6f727947
  40687c:	706f6373 	.word	0x706f6373
  406880:	00203a65 	.word	0x00203a65
  406884:	20303532 	.word	0x20303532
  406888:	0d737064 	.word	0x0d737064
  40688c:	0000000a 	.word	0x0000000a
  406890:	20303035 	.word	0x20303035
  406894:	0d737064 	.word	0x0d737064
  406898:	0000000a 	.word	0x0000000a
  40689c:	30303031 	.word	0x30303031
  4068a0:	73706420 	.word	0x73706420
  4068a4:	00000a0d 	.word	0x00000a0d
  4068a8:	30303032 	.word	0x30303032
  4068ac:	73706420 	.word	0x73706420
  4068b0:	00000a0d 	.word	0x00000a0d
  4068b4:	5f657375 	.word	0x5f657375
  4068b8:	696c6163 	.word	0x696c6163
  4068bc:	74617262 	.word	0x74617262
  4068c0:	25203a65 	.word	0x25203a65
  4068c4:	000a0d64 	.word	0x000a0d64
  4068c8:	75746361 	.word	0x75746361
  4068cc:	745f6c61 	.word	0x745f6c61
  4068d0:	73657268 	.word	0x73657268
  4068d4:	646c6f68 	.word	0x646c6f68
  4068d8:	6625203a 	.word	0x6625203a
  4068dc:	00000a0d 	.word	0x00000a0d
  4068e0:	5f737064 	.word	0x5f737064
  4068e4:	5f726570 	.word	0x5f726570
  4068e8:	69676964 	.word	0x69676964
  4068ec:	25203a74 	.word	0x25203a74
  4068f0:	000a0d66 	.word	0x000a0d66
  4068f4:	676e6172 	.word	0x676e6172
  4068f8:	65705f65 	.word	0x65705f65
  4068fc:	69645f72 	.word	0x69645f72
  406900:	3a746967 	.word	0x3a746967
  406904:	0d662520 	.word	0x0d662520
  406908:	0000000a 	.word	0x0000000a
  40690c:	6f746f6d 	.word	0x6f746f6d
  406910:	6e695f72 	.word	0x6e695f72
  406914:	0a0d7469 	.word	0x0a0d7469
  406918:	00000000 	.word	0x00000000
  40691c:	6f746f6d 	.word	0x6f746f6d
  406920:	756f5f72 	.word	0x756f5f72
  406924:	74757074 	.word	0x74757074
  406928:	6425203a 	.word	0x6425203a
  40692c:	00000a0d 	.word	0x00000a0d
  406930:	00000001 	.word	0x00000001
  406934:	00000002 	.word	0x00000002
  406938:	00000004 	.word	0x00000004
  40693c:	00000008 	.word	0x00000008
  406940:	00000010 	.word	0x00000010
  406944:	00000020 	.word	0x00000020
  406948:	00000040 	.word	0x00000040
  40694c:	00000080 	.word	0x00000080
  406950:	00000100 	.word	0x00000100
  406954:	00000200 	.word	0x00000200
  406958:	00000400 	.word	0x00000400
  40695c:	74727173 	.word	0x74727173
	...

00406968 <atanlo>:
  406968:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  406978:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00406988 <atanhi>:
  406988:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  406998:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

004069a8 <_global_impure_ptr>:
  4069a8:	20000018 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  4069b8:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  4069c8:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  4069d8:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  4069e8:	4e614e00 00000000                       .NaN....

004069f0 <__sf_fake_stdin>:
	...

00406a10 <__sf_fake_stdout>:
	...

00406a30 <__sf_fake_stderr>:
	...
  406a50:	4f500043 00584953 0000002e 00000000     C.POSIX.........

00406a60 <__mprec_tens>:
  406a60:	00000000 3ff00000 00000000 40240000     .......?......$@
  406a70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  406a80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  406a90:	00000000 412e8480 00000000 416312d0     .......A......cA
  406aa0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406ab0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406ac0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406ad0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406ae0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406af0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406b00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406b10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406b20:	79d99db4 44ea7843                       ...yCx.D

00406b28 <__mprec_bigtens>:
  406b28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406b38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  406b48:	7f73bf3c 75154fdd                       <.s..O.u

00406b50 <p05.6097>:
  406b50:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  406b60:	6c680020 6665004c 47464567 20200000               .hlL.efgEFG.

00406b6d <_ctype_>:
  406b6d:	20202000 20202020 28282020 20282828     .         ((((( 
  406b7d:	20202020 20202020 20202020 20202020                     
  406b8d:	10108820 10101010 10101010 10101010      ...............
  406b9d:	04040410 04040404 10040404 10101010     ................
  406bad:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406bbd:	01010101 01010101 01010101 10101010     ................
  406bcd:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406bdd:	02020202 02020202 02020202 10101010     ................
  406bed:	00000020 00000000 00000000 00000000      ...............
	...

00406c70 <_init>:
  406c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c72:	bf00      	nop
  406c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406c76:	bc08      	pop	{r3}
  406c78:	469e      	mov	lr, r3
  406c7a:	4770      	bx	lr

00406c7c <__init_array_start>:
  406c7c:	004000f1 	.word	0x004000f1

00406c80 <_fini>:
  406c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c82:	bf00      	nop
  406c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406c86:	bc08      	pop	{r3}
  406c88:	469e      	mov	lr, r3
  406c8a:	4770      	bx	lr
  406c8c:	0000      	movs	r0, r0
	...

00406c90 <__portable_delay_cycles_veneer>:
  406c90:	f85f f000 	ldr.w	pc, [pc]	; 406c94 <__portable_delay_cycles_veneer+0x4>
  406c94:	20000001 	.word	0x20000001

00406c98 <__fini_array_start>:
  406c98:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <kp>:
2000000c:	0000 3f80                                   ...?

20000010 <SystemCoreClock>:
20000010:	0900 003d                                   ..=.

20000014 <__fdlib_version>:
20000014:	0001 0000                                   ....

20000018 <impure_data>:
20000018:	0000 0000 69f0 0040 6a10 0040 6a30 0040     .....i@..j@.0j@.
	...

20000078 <_impure_ptr>:
20000078:	0018 2000                                   ... 

2000007c <__global_locale>:
2000007c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000009c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000011c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000013c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000015c:	553f 0040 4a25 0040 0000 0000 6b6d 0040     ?U@.%J@.....mk@.
2000016c:	6a58 0040 6b61 0040 6b61 0040 6b61 0040     Xj@.ak@.ak@.ak@.
2000017c:	6b61 0040 6b61 0040 6b61 0040 6b61 0040     ak@.ak@.ak@.ak@.
2000018c:	6b61 0040 6b61 0040 ffff ffff ffff ffff     ak@.ak@.........
2000019c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
