
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065fc  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  004065fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000022c  200001e8  004067e8  000201e8  2**3
                  ALLOC
  3 .stack        00003004  20000414  00406a14  000201e8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011622  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ffc  00000000  00000000  0003189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005cab  00000000  00000000  0003489a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000dd8  00000000  00000000  0003a545  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c78  00000000  00000000  0003b31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016db9  00000000  00000000  0003bf95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010f56  00000000  00000000  00052d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000553a1  00000000  00000000  00063ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d8c  00000000  00000000  000b9048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003418 	.word	0x20003418
  400004:	00401d69 	.word	0x00401d69
  400008:	00401d65 	.word	0x00401d65
  40000c:	00401d65 	.word	0x00401d65
  400010:	00401d65 	.word	0x00401d65
  400014:	00401d65 	.word	0x00401d65
  400018:	00401d65 	.word	0x00401d65
	...
  40002c:	00401d65 	.word	0x00401d65
  400030:	00401d65 	.word	0x00401d65
  400034:	00000000 	.word	0x00000000
  400038:	00401d65 	.word	0x00401d65
  40003c:	00400471 	.word	0x00400471
  400040:	00401d65 	.word	0x00401d65
  400044:	00401d65 	.word	0x00401d65
  400048:	00401d65 	.word	0x00401d65
  40004c:	00401d65 	.word	0x00401d65
  400050:	00401d65 	.word	0x00401d65
  400054:	00401d65 	.word	0x00401d65
  400058:	00401d65 	.word	0x00401d65
  40005c:	00401d65 	.word	0x00401d65
  400060:	00401d65 	.word	0x00401d65
  400064:	00401d65 	.word	0x00401d65
  400068:	00000000 	.word	0x00000000
  40006c:	004019ad 	.word	0x004019ad
  400070:	004019bd 	.word	0x004019bd
  400074:	004019cd 	.word	0x004019cd
  400078:	00401d65 	.word	0x00401d65
  40007c:	00401d65 	.word	0x00401d65
	...
  400088:	00401d65 	.word	0x00401d65
  40008c:	00401d65 	.word	0x00401d65
  400090:	00401d65 	.word	0x00401d65
  400094:	00401d65 	.word	0x00401d65
  400098:	00401d65 	.word	0x00401d65
  40009c:	00401d65 	.word	0x00401d65
  4000a0:	00401d65 	.word	0x00401d65
  4000a4:	00401d65 	.word	0x00401d65
  4000a8:	00401d65 	.word	0x00401d65
  4000ac:	00401d65 	.word	0x00401d65
  4000b0:	00401d65 	.word	0x00401d65
  4000b4:	00401d65 	.word	0x00401d65
  4000b8:	00401d65 	.word	0x00401d65
  4000bc:	00401d65 	.word	0x00401d65
  4000c0:	00401d65 	.word	0x00401d65
  4000c4:	00401d65 	.word	0x00401d65
  4000c8:	00401d65 	.word	0x00401d65

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e8 	.word	0x200001e8
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004065fc 	.word	0x004065fc

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001ec 	.word	0x200001ec
  40011c:	004065fc 	.word	0x004065fc
  400120:	004065fc 	.word	0x004065fc
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 fefa 	bl	401f24 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 fc86 	bl	401a44 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 fcae 	bl	401a98 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 fcb2 	bl	401aa8 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 fcb5 	bl	401ab8 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 fc42 	bl	4019dc <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f001 fe5a 	bl	401e10 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f001 fee1 	bl	401f24 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	200002e4 	.word	0x200002e4
  4001a8:	200002dc 	.word	0x200002dc

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200002e0 	.word	0x200002e0
  4001f8:	200002e4 	.word	0x200002e4

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 fcaa 	bl	401b6c <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 fc9f 	bl	401b6c <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 fca8 	bl	401b94 <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 fc9b 	bl	401b94 <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 fc66 	bl	401b5c <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 fc5a 	bl	401b5c <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 fc60 	bl	401b80 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 fc54 	bl	401b80 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <main>:
double setpoint = 0;
double input;
double output;

int main(void)
{
  4002f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  4002f8:	b08a      	sub	sp, #40	; 0x28
    sysclk_init();
  4002fa:	f7ff ff15 	bl	400128 <sysclk_init>
    board_init();
  4002fe:	f001 f807 	bl	401310 <board_init>

   

    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400302:	2013      	movs	r0, #19
  400304:	f001 fbe0 	bl	401ac8 <pmc_enable_periph_clk>
    pmc_enable_periph_clk(ID_PWM);
  400308:	201f      	movs	r0, #31
  40030a:	f001 fbdd 	bl	401ac8 <pmc_enable_periph_clk>
    cph_millis_init();
  40030e:	f000 f8b7 	bl	400480 <cph_millis_init>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400312:	2009      	movs	r0, #9
  400314:	f001 fbd8 	bl	401ac8 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400318:	4c40      	ldr	r4, [pc, #256]	; (40041c <main+0x128>)
  40031a:	4b41      	ldr	r3, [pc, #260]	; (400420 <main+0x12c>)
  40031c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40031e:	4a41      	ldr	r2, [pc, #260]	; (400424 <main+0x130>)
  400320:	4b41      	ldr	r3, [pc, #260]	; (400428 <main+0x134>)
  400322:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400324:	4a41      	ldr	r2, [pc, #260]	; (40042c <main+0x138>)
  400326:	4b42      	ldr	r3, [pc, #264]	; (400430 <main+0x13c>)
  400328:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40032a:	4b42      	ldr	r3, [pc, #264]	; (400434 <main+0x140>)
  40032c:	9307      	str	r3, [sp, #28]
	uart_settings.ul_baudrate = opt->baudrate;
  40032e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400332:	9308      	str	r3, [sp, #32]
	uart_settings.ul_mode = opt->paritytype;
  400334:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400338:	9309      	str	r3, [sp, #36]	; 0x24
  40033a:	2009      	movs	r0, #9
  40033c:	f001 fbc4 	bl	401ac8 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400340:	a907      	add	r1, sp, #28
  400342:	4620      	mov	r0, r4
  400344:	f001 fbee 	bl	401b24 <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400348:	4c3b      	ldr	r4, [pc, #236]	; (400438 <main+0x144>)
  40034a:	6823      	ldr	r3, [r4, #0]
  40034c:	2100      	movs	r1, #0
  40034e:	6898      	ldr	r0, [r3, #8]
  400350:	f002 ff08 	bl	403164 <setbuf>
	setbuf(stdin, NULL);
  400354:	6823      	ldr	r3, [r4, #0]
  400356:	2100      	movs	r1, #0
  400358:	6858      	ldr	r0, [r3, #4]
  40035a:	f002 ff03 	bl	403164 <setbuf>
    configure_console();



    
    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  40035e:	4837      	ldr	r0, [pc, #220]	; (40043c <main+0x148>)
  400360:	f002 fef8 	bl	403154 <puts>
  400364:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        printf(".");
  400366:	4e36      	ldr	r6, [pc, #216]	; (400440 <main+0x14c>)
        delay_ms(250);
  400368:	4d36      	ldr	r5, [pc, #216]	; (400444 <main+0x150>)

    
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        printf(".");
  40036a:	4630      	mov	r0, r6
  40036c:	f002 fe80 	bl	403070 <iprintf>
        delay_ms(250);
  400370:	4628      	mov	r0, r5
  400372:	f006 f93d 	bl	4065f0 <__portable_delay_cycles_veneer>


    
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  400376:	3c01      	subs	r4, #1
  400378:	d1f7      	bne.n	40036a <main+0x76>
        printf(".");
        delay_ms(250);
    }
    printf("\r\n");
  40037a:	4833      	ldr	r0, [pc, #204]	; (400448 <main+0x154>)
  40037c:	f002 fe78 	bl	403070 <iprintf>

    
    if (imu_init()) {
  400380:	f000 fce6 	bl	400d50 <imu_init>
  400384:	2800      	cmp	r0, #0
  400386:	d045      	beq.n	400414 <main+0x120>

        pid_init(&ap.imu.y_axis, &ap.command.y_axis, &ap.setpoint.y_axis, 2, 5, 1);
  400388:	4830      	ldr	r0, [pc, #192]	; (40044c <main+0x158>)
  40038a:	2200      	movs	r2, #0
  40038c:	4b30      	ldr	r3, [pc, #192]	; (400450 <main+0x15c>)
  40038e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  400392:	2200      	movs	r2, #0
  400394:	4b2f      	ldr	r3, [pc, #188]	; (400454 <main+0x160>)
  400396:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40039a:	2200      	movs	r2, #0
  40039c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4003a0:	e9cd 2300 	strd	r2, r3, [sp]
  4003a4:	4602      	mov	r2, r0
  4003a6:	f100 010c 	add.w	r1, r0, #12
  4003aa:	380c      	subs	r0, #12
  4003ac:	f000 fe8a 	bl	4010c4 <pid_init>
        pid_set_output_limits(-90, 90);
  4003b0:	2200      	movs	r2, #0
  4003b2:	4b29      	ldr	r3, [pc, #164]	; (400458 <main+0x164>)
  4003b4:	2000      	movs	r0, #0
  4003b6:	4929      	ldr	r1, [pc, #164]	; (40045c <main+0x168>)
  4003b8:	f000 fef4 	bl	4011a4 <pid_set_output_limits>
        pid_set_mode(AUTOMATIC);
  4003bc:	2001      	movs	r0, #1
  4003be:	f000 febd 	bl	40113c <pid_set_mode>
        servo_init();
  4003c2:	f000 fe0f 	bl	400fe4 <servo_init>

        // Calibrate the imu
        imu_calibrate();
  4003c6:	f000 fcdf 	bl	400d88 <imu_calibrate>
            pid_tick();
            servo_tick();



            if (cph_get_millis() >= f_log_timeout) {
  4003ca:	4d25      	ldr	r5, [pc, #148]	; (400460 <main+0x16c>)
  4003cc:	4c25      	ldr	r4, [pc, #148]	; (400464 <main+0x170>)

        // Calibrate the imu
        imu_calibrate();

        while(true) {
            imu_tick();
  4003ce:	f000 fce7 	bl	400da0 <imu_tick>
            pid_tick();
  4003d2:	f000 ff99 	bl	401308 <pid_tick>
            servo_tick();
  4003d6:	f000 fe5d 	bl	401094 <servo_tick>



            if (cph_get_millis() >= f_log_timeout) {
  4003da:	682a      	ldr	r2, [r5, #0]
  4003dc:	6823      	ldr	r3, [r4, #0]
  4003de:	429a      	cmp	r2, r3
  4003e0:	d3f5      	bcc.n	4003ce <main+0xda>
                f_log_timeout = cph_get_millis() + 50;
  4003e2:	682b      	ldr	r3, [r5, #0]
  4003e4:	3332      	adds	r3, #50	; 0x32
  4003e6:	6023      	str	r3, [r4, #0]
                // printf("roll/pitch/yaw: %f %f %f\r\n", imu_complementary.x_axis, imu_complementary.y_axis, imu_complementary.z_axis);
                printf("roll/pitch/yaw: %f %f %f\r\n", ap.imu.x_axis, ap.imu.y_axis, ap.imu.z_axis);
  4003e8:	4e1f      	ldr	r6, [pc, #124]	; (400468 <main+0x174>)
  4003ea:	6830      	ldr	r0, [r6, #0]
  4003ec:	f004 ffca 	bl	405384 <__aeabi_f2d>
  4003f0:	4680      	mov	r8, r0
  4003f2:	4689      	mov	r9, r1
  4003f4:	68b0      	ldr	r0, [r6, #8]
  4003f6:	f004 ffc5 	bl	405384 <__aeabi_f2d>
  4003fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4003fe:	6870      	ldr	r0, [r6, #4]
  400400:	f004 ffc0 	bl	405384 <__aeabi_f2d>
  400404:	e9cd 0100 	strd	r0, r1, [sp]
  400408:	4642      	mov	r2, r8
  40040a:	464b      	mov	r3, r9
  40040c:	4817      	ldr	r0, [pc, #92]	; (40046c <main+0x178>)
  40040e:	f002 fe2f 	bl	403070 <iprintf>
  400412:	e7dc      	b.n	4003ce <main+0xda>
    //         delay_ms(500); 
    //     }


    // }
}
  400414:	2000      	movs	r0, #0
  400416:	b00a      	add	sp, #40	; 0x28
  400418:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  40041c:	400e0800 	.word	0x400e0800
  400420:	200002e4 	.word	0x200002e4
  400424:	0040027d 	.word	0x0040027d
  400428:	200002e0 	.word	0x200002e0
  40042c:	004001fd 	.word	0x004001fd
  400430:	200002dc 	.word	0x200002dc
  400434:	07270e00 	.word	0x07270e00
  400438:	20000074 	.word	0x20000074
  40043c:	004060b0 	.word	0x004060b0
  400440:	004060cc 	.word	0x004060cc
  400444:	0020b28a 	.word	0x0020b28a
  400448:	004060c8 	.word	0x004060c8
  40044c:	200003c4 	.word	0x200003c4
  400450:	3ff00000 	.word	0x3ff00000
  400454:	40140000 	.word	0x40140000
  400458:	40568000 	.word	0x40568000
  40045c:	c0568000 	.word	0xc0568000
  400460:	20000208 	.word	0x20000208
  400464:	20000204 	.word	0x20000204
  400468:	200003b4 	.word	0x200003b4
  40046c:	004060d0 	.word	0x004060d0

00400470 <SysTick_Handler>:


volatile uint32_t g_cph_millis = 0;

void SysTick_Handler(void) {
	g_cph_millis++;
  400470:	4a02      	ldr	r2, [pc, #8]	; (40047c <SysTick_Handler+0xc>)
  400472:	6813      	ldr	r3, [r2, #0]
  400474:	3301      	adds	r3, #1
  400476:	6013      	str	r3, [r2, #0]
  400478:	4770      	bx	lr
  40047a:	bf00      	nop
  40047c:	20000208 	.word	0x20000208

00400480 <cph_millis_init>:
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400480:	4b05      	ldr	r3, [pc, #20]	; (400498 <cph_millis_init+0x18>)
  400482:	4a06      	ldr	r2, [pc, #24]	; (40049c <cph_millis_init+0x1c>)
  400484:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400486:	21f0      	movs	r1, #240	; 0xf0
  400488:	4a05      	ldr	r2, [pc, #20]	; (4004a0 <cph_millis_init+0x20>)
  40048a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40048e:	2200      	movs	r2, #0
  400490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400492:	2207      	movs	r2, #7
  400494:	601a      	str	r2, [r3, #0]
  400496:	4770      	bx	lr
  400498:	e000e010 	.word	0xe000e010
  40049c:	0001d4bf 	.word	0x0001d4bf
  4004a0:	e000ed00 	.word	0xe000ed00

004004a4 <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  4004a4:	b500      	push	{lr}
  4004a6:	b089      	sub	sp, #36	; 0x24
  4004a8:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  4004ac:	2368      	movs	r3, #104	; 0x68
  4004ae:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  4004b2:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  4004b6:	2301      	movs	r3, #1
  4004b8:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  4004ba:	f10d 0207 	add.w	r2, sp, #7
  4004be:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  4004c0:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4004c2:	a903      	add	r1, sp, #12
  4004c4:	4806      	ldr	r0, [pc, #24]	; (4004e0 <write_register8+0x3c>)
  4004c6:	f001 f87d 	bl	4015c4 <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4004ca:	b910      	cbnz	r0, 4004d2 <write_register8+0x2e>
        puts("write_register: success\r\n");
  4004cc:	4805      	ldr	r0, [pc, #20]	; (4004e4 <write_register8+0x40>)
  4004ce:	f002 fe41 	bl	403154 <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  4004d2:	4805      	ldr	r0, [pc, #20]	; (4004e8 <write_register8+0x44>)
  4004d4:	f006 f88c 	bl	4065f0 <__portable_delay_cycles_veneer>
}
  4004d8:	b009      	add	sp, #36	; 0x24
  4004da:	f85d fb04 	ldr.w	pc, [sp], #4
  4004de:	bf00      	nop
  4004e0:	40018000 	.word	0x40018000
  4004e4:	004060ec 	.word	0x004060ec
  4004e8:	00014ed3 	.word	0x00014ed3

004004ec <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  4004ec:	b510      	push	{r4, lr}
  4004ee:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  4004f0:	4b0e      	ldr	r3, [pc, #56]	; (40052c <read_register8+0x40>)
  4004f2:	2200      	movs	r2, #0
  4004f4:	601a      	str	r2, [r3, #0]
  4004f6:	605a      	str	r2, [r3, #4]
  4004f8:	609a      	str	r2, [r3, #8]
  4004fa:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  4004fc:	2268      	movs	r2, #104	; 0x68
  4004fe:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  400502:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400506:	2201      	movs	r2, #1
  400508:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &mpu_buffer;
  40050a:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  40050c:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  40050e:	a901      	add	r1, sp, #4
  400510:	4807      	ldr	r0, [pc, #28]	; (400530 <read_register8+0x44>)
  400512:	f000 ffef 	bl	4014f4 <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  400516:	b910      	cbnz	r0, 40051e <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
  400518:	4b04      	ldr	r3, [pc, #16]	; (40052c <read_register8+0x40>)
  40051a:	781c      	ldrb	r4, [r3, #0]
  40051c:	e000      	b.n	400520 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  40051e:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400520:	4804      	ldr	r0, [pc, #16]	; (400534 <read_register8+0x48>)
  400522:	f006 f865 	bl	4065f0 <__portable_delay_cycles_veneer>

    return value;
}
  400526:	4620      	mov	r0, r4
  400528:	b006      	add	sp, #24
  40052a:	bd10      	pop	{r4, pc}
  40052c:	2000020c 	.word	0x2000020c
  400530:	40018000 	.word	0x40018000
  400534:	00014ed3 	.word	0x00014ed3

00400538 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  400538:	b510      	push	{r4, lr}
  40053a:	b086      	sub	sp, #24
  40053c:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(mpu_buffer, 0, sizeof(mpu_buffer));
  40053e:	4b0c      	ldr	r3, [pc, #48]	; (400570 <read_bytes+0x38>)
  400540:	2100      	movs	r1, #0
  400542:	6019      	str	r1, [r3, #0]
  400544:	6059      	str	r1, [r3, #4]
  400546:	6099      	str	r1, [r3, #8]
  400548:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  40054a:	2368      	movs	r3, #104	; 0x68
  40054c:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  400550:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  400554:	2301      	movs	r3, #1
  400556:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  400558:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  40055a:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  40055c:	a901      	add	r1, sp, #4
  40055e:	4805      	ldr	r0, [pc, #20]	; (400574 <read_bytes+0x3c>)
  400560:	f000 ffc8 	bl	4014f4 <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = mpu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400564:	4804      	ldr	r0, [pc, #16]	; (400578 <read_bytes+0x40>)
  400566:	f006 f843 	bl	4065f0 <__portable_delay_cycles_veneer>

    return length;
}
  40056a:	b2e0      	uxtb	r0, r4
  40056c:	b006      	add	sp, #24
  40056e:	bd10      	pop	{r4, pc}
  400570:	2000020c 	.word	0x2000020c
  400574:	40018000 	.word	0x40018000
  400578:	00014ed3 	.word	0x00014ed3

0040057c <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  40057c:	b570      	push	{r4, r5, r6, lr}
  40057e:	4604      	mov	r4, r0
  400580:	460d      	mov	r5, r1
  400582:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  400584:	f7ff ffb2 	bl	4004ec <read_register8>

    if (state) {
  400588:	b126      	cbz	r6, 400594 <write_register_bit+0x18>
        value |= (1 << pos);
  40058a:	2101      	movs	r1, #1
  40058c:	40a9      	lsls	r1, r5
  40058e:	4301      	orrs	r1, r0
  400590:	b2c9      	uxtb	r1, r1
  400592:	e004      	b.n	40059e <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  400594:	2101      	movs	r1, #1
  400596:	40a9      	lsls	r1, r5
  400598:	ea20 0101 	bic.w	r1, r0, r1
  40059c:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  40059e:	4620      	mov	r0, r4
  4005a0:	f7ff ff80 	bl	4004a4 <write_register8>
  4005a4:	bd70      	pop	{r4, r5, r6, pc}
  4005a6:	bf00      	nop

004005a8 <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  4005a8:	b510      	push	{r4, lr}
  4005aa:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  4005ac:	f7ff ff9e 	bl	4004ec <read_register8>
    return ((value >> pos) & 1);
  4005b0:	4120      	asrs	r0, r4
}
  4005b2:	f000 0001 	and.w	r0, r0, #1
  4005b6:	bd10      	pop	{r4, pc}

004005b8 <mpu_init>:

bool mpu_init(void)
{
  4005b8:	b500      	push	{lr}
  4005ba:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  4005bc:	4b0d      	ldr	r3, [pc, #52]	; (4005f4 <mpu_init+0x3c>)
  4005be:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  4005c0:	4b0d      	ldr	r3, [pc, #52]	; (4005f8 <mpu_init+0x40>)
  4005c2:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  4005c4:	a901      	add	r1, sp, #4
  4005c6:	480d      	ldr	r0, [pc, #52]	; (4005fc <mpu_init+0x44>)
  4005c8:	f000 ff64 	bl	401494 <twi_master_init>
  4005cc:	b138      	cbz	r0, 4005de <mpu_init+0x26>
        
        puts("twi_master_init: failed\r\n");
  4005ce:	480c      	ldr	r0, [pc, #48]	; (400600 <mpu_init+0x48>)
  4005d0:	f002 fdc0 	bl	403154 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005d4:	480b      	ldr	r0, [pc, #44]	; (400604 <mpu_init+0x4c>)
  4005d6:	f006 f80b 	bl	4065f0 <__portable_delay_cycles_veneer>
        return false;
  4005da:	2000      	movs	r0, #0
  4005dc:	e006      	b.n	4005ec <mpu_init+0x34>
        
    } else {
        puts("twi_master_init: success\r\n");
  4005de:	480a      	ldr	r0, [pc, #40]	; (400608 <mpu_init+0x50>)
  4005e0:	f002 fdb8 	bl	403154 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  4005e4:	4807      	ldr	r0, [pc, #28]	; (400604 <mpu_init+0x4c>)
  4005e6:	f006 f803 	bl	4065f0 <__portable_delay_cycles_veneer>
        return true;
  4005ea:	2001      	movs	r0, #1
    }
    
}
  4005ec:	b005      	add	sp, #20
  4005ee:	f85d fb04 	ldr.w	pc, [sp], #4
  4005f2:	bf00      	nop
  4005f4:	07270e00 	.word	0x07270e00
  4005f8:	00061a80 	.word	0x00061a80
  4005fc:	40018000 	.word	0x40018000
  400600:	00406108 	.word	0x00406108
  400604:	00014ed3 	.word	0x00014ed3
  400608:	00406124 	.word	0x00406124

0040060c <mpu_probe>:

bool mpu_probe(void)
{
  40060c:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  40060e:	2168      	movs	r1, #104	; 0x68
  400610:	4809      	ldr	r0, [pc, #36]	; (400638 <mpu_probe+0x2c>)
  400612:	f001 f819 	bl	401648 <twi_probe>
  400616:	b138      	cbz	r0, 400628 <mpu_probe+0x1c>
        puts("twi_probe: failed\r\n");
  400618:	4808      	ldr	r0, [pc, #32]	; (40063c <mpu_probe+0x30>)
  40061a:	f002 fd9b 	bl	403154 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  40061e:	4808      	ldr	r0, [pc, #32]	; (400640 <mpu_probe+0x34>)
  400620:	f005 ffe6 	bl	4065f0 <__portable_delay_cycles_veneer>
        return false;
  400624:	2000      	movs	r0, #0
  400626:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  400628:	4806      	ldr	r0, [pc, #24]	; (400644 <mpu_probe+0x38>)
  40062a:	f002 fd93 	bl	403154 <puts>
        // Give I2C time to settle
        delay_ms(TWI_WAIT_TIME);
  40062e:	4804      	ldr	r0, [pc, #16]	; (400640 <mpu_probe+0x34>)
  400630:	f005 ffde 	bl	4065f0 <__portable_delay_cycles_veneer>
        return true;
  400634:	2001      	movs	r0, #1
    }
}
  400636:	bd08      	pop	{r3, pc}
  400638:	40018000 	.word	0x40018000
  40063c:	00406140 	.word	0x00406140
  400640:	00014ed3 	.word	0x00014ed3
  400644:	00406154 	.word	0x00406154

00400648 <mpu_who_am_i>:

    return true;
}

uint8_t mpu_who_am_i(void)
{
  400648:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  40064a:	2075      	movs	r0, #117	; 0x75
  40064c:	f7ff ff4e 	bl	4004ec <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400650:	bd08      	pop	{r3, pc}
  400652:	bf00      	nop

00400654 <mpu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void mpu_set_clock_source(uint8_t source)
{
  400654:	b510      	push	{r4, lr}
  400656:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400658:	206b      	movs	r0, #107	; 0x6b
  40065a:	f7ff ff47 	bl	4004ec <read_register8>
    value &= 0b11111000; // mask
  40065e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  400662:	4321      	orrs	r1, r4
  400664:	206b      	movs	r0, #107	; 0x6b
  400666:	f7ff ff1d 	bl	4004a4 <write_register8>
  40066a:	bd10      	pop	{r4, pc}

0040066c <mpu_get_clock_source>:
}

uint8_t mpu_get_clock_source(void)
{
  40066c:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  40066e:	206b      	movs	r0, #107	; 0x6b
  400670:	f7ff ff3c 	bl	4004ec <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  400674:	f000 0007 	and.w	r0, r0, #7
  400678:	bd08      	pop	{r3, pc}
  40067a:	bf00      	nop

0040067c <mpu_set_gyro_scale>:

void mpu_set_gyro_scale(uint8_t scale)
{
  40067c:	b510      	push	{r4, lr}
  40067e:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400680:	2803      	cmp	r0, #3
  400682:	d812      	bhi.n	4006aa <mpu_set_gyro_scale+0x2e>
  400684:	e8df f000 	tbb	[pc, r0]
  400688:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  40068c:	4a0d      	ldr	r2, [pc, #52]	; (4006c4 <mpu_set_gyro_scale+0x48>)
  40068e:	4b0e      	ldr	r3, [pc, #56]	; (4006c8 <mpu_set_gyro_scale+0x4c>)
  400690:	601a      	str	r2, [r3, #0]
            break;
  400692:	e00a      	b.n	4006aa <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  400694:	4a0d      	ldr	r2, [pc, #52]	; (4006cc <mpu_set_gyro_scale+0x50>)
  400696:	4b0c      	ldr	r3, [pc, #48]	; (4006c8 <mpu_set_gyro_scale+0x4c>)
  400698:	601a      	str	r2, [r3, #0]
            break;
  40069a:	e006      	b.n	4006aa <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  40069c:	4a0c      	ldr	r2, [pc, #48]	; (4006d0 <mpu_set_gyro_scale+0x54>)
  40069e:	4b0a      	ldr	r3, [pc, #40]	; (4006c8 <mpu_set_gyro_scale+0x4c>)
  4006a0:	601a      	str	r2, [r3, #0]
            break;
  4006a2:	e002      	b.n	4006aa <mpu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  4006a4:	4a0b      	ldr	r2, [pc, #44]	; (4006d4 <mpu_set_gyro_scale+0x58>)
  4006a6:	4b08      	ldr	r3, [pc, #32]	; (4006c8 <mpu_set_gyro_scale+0x4c>)
  4006a8:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  4006aa:	201b      	movs	r0, #27
  4006ac:	f7ff ff1e 	bl	4004ec <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  4006b0:	f020 0018 	bic.w	r0, r0, #24
  4006b4:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  4006b8:	b2c9      	uxtb	r1, r1
  4006ba:	201b      	movs	r0, #27
  4006bc:	f7ff fef2 	bl	4004a4 <write_register8>
  4006c0:	bd10      	pop	{r4, pc}
  4006c2:	bf00      	nop
  4006c4:	3bfa1e3f 	.word	0x3bfa1e3f
  4006c8:	20000230 	.word	0x20000230
  4006cc:	3c7a2270 	.word	0x3c7a2270
  4006d0:	3cf9bfdf 	.word	0x3cf9bfdf
  4006d4:	3d79c0ec 	.word	0x3d79c0ec

004006d8 <mpu_get_gyro_scale>:
}

uint8_t mpu_get_gyro_scale(void)
{
  4006d8:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  4006da:	201b      	movs	r0, #27
  4006dc:	f7ff ff06 	bl	4004ec <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  4006e0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  4006e4:	bd08      	pop	{r3, pc}
  4006e6:	bf00      	nop

004006e8 <mpu_set_accel_range>:

void mpu_set_accel_range(uint8_t range)
{
  4006e8:	b510      	push	{r4, lr}
  4006ea:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  4006ec:	2803      	cmp	r0, #3
  4006ee:	d812      	bhi.n	400716 <mpu_set_accel_range+0x2e>
  4006f0:	e8df f000 	tbb	[pc, r0]
  4006f4:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  4006f8:	4a0d      	ldr	r2, [pc, #52]	; (400730 <mpu_set_accel_range+0x48>)
  4006fa:	4b0e      	ldr	r3, [pc, #56]	; (400734 <mpu_set_accel_range+0x4c>)
  4006fc:	601a      	str	r2, [r3, #0]
            break;
  4006fe:	e00a      	b.n	400716 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  400700:	4a0d      	ldr	r2, [pc, #52]	; (400738 <mpu_set_accel_range+0x50>)
  400702:	4b0c      	ldr	r3, [pc, #48]	; (400734 <mpu_set_accel_range+0x4c>)
  400704:	601a      	str	r2, [r3, #0]
            break;   
  400706:	e006      	b.n	400716 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  400708:	4a0c      	ldr	r2, [pc, #48]	; (40073c <mpu_set_accel_range+0x54>)
  40070a:	4b0a      	ldr	r3, [pc, #40]	; (400734 <mpu_set_accel_range+0x4c>)
  40070c:	601a      	str	r2, [r3, #0]
            break;   
  40070e:	e002      	b.n	400716 <mpu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400710:	4a0b      	ldr	r2, [pc, #44]	; (400740 <mpu_set_accel_range+0x58>)
  400712:	4b08      	ldr	r3, [pc, #32]	; (400734 <mpu_set_accel_range+0x4c>)
  400714:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  400716:	201c      	movs	r0, #28
  400718:	f7ff fee8 	bl	4004ec <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  40071c:	f020 0018 	bic.w	r0, r0, #24
  400720:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  400724:	b2c9      	uxtb	r1, r1
  400726:	201c      	movs	r0, #28
  400728:	f7ff febc 	bl	4004a4 <write_register8>
  40072c:	bd10      	pop	{r4, pc}
  40072e:	bf00      	nop
  400730:	387fda40 	.word	0x387fda40
  400734:	2000021c 	.word	0x2000021c
  400738:	38ffda40 	.word	0x38ffda40
  40073c:	397fda40 	.word	0x397fda40
  400740:	39fff518 	.word	0x39fff518

00400744 <mpu_set_sleep_enabled>:

    return (uint8_t)value;
}

void mpu_set_sleep_enabled(bool state)
{
  400744:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  400746:	4602      	mov	r2, r0
  400748:	2106      	movs	r1, #6
  40074a:	206b      	movs	r0, #107	; 0x6b
  40074c:	f7ff ff16 	bl	40057c <write_register_bit>
  400750:	bd08      	pop	{r3, pc}
  400752:	bf00      	nop

00400754 <mpu_begin>:
        return true;
    }
}

bool mpu_begin(uint8_t scale, uint8_t range)
{
  400754:	b538      	push	{r3, r4, r5, lr}
  400756:	4605      	mov	r5, r0
  400758:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  40075a:	4a11      	ldr	r2, [pc, #68]	; (4007a0 <mpu_begin+0x4c>)
  40075c:	2300      	movs	r3, #0
  40075e:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400760:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  400762:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  400764:	2100      	movs	r1, #0
  400766:	4a0f      	ldr	r2, [pc, #60]	; (4007a4 <mpu_begin+0x50>)
  400768:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  40076a:	4a0f      	ldr	r2, [pc, #60]	; (4007a8 <mpu_begin+0x54>)
  40076c:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  40076e:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400770:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  400772:	4a0e      	ldr	r2, [pc, #56]	; (4007ac <mpu_begin+0x58>)
  400774:	6013      	str	r3, [r2, #0]

    if (mpu_who_am_i() != 0x68) {
  400776:	f7ff ff67 	bl	400648 <mpu_who_am_i>
  40077a:	2868      	cmp	r0, #104	; 0x68
  40077c:	d10d      	bne.n	40079a <mpu_begin+0x46>
        return false;
    }

    // Set clock source
    mpu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  40077e:	2001      	movs	r0, #1
  400780:	f7ff ff68 	bl	400654 <mpu_set_clock_source>

    // Set scale and range
    mpu_set_gyro_scale(scale);
  400784:	4628      	mov	r0, r5
  400786:	f7ff ff79 	bl	40067c <mpu_set_gyro_scale>
    mpu_set_accel_range(range);
  40078a:	4620      	mov	r0, r4
  40078c:	f7ff ffac 	bl	4006e8 <mpu_set_accel_range>

    // Disable sleep mode
    mpu_set_sleep_enabled(false);
  400790:	2000      	movs	r0, #0
  400792:	f7ff ffd7 	bl	400744 <mpu_set_sleep_enabled>

    return true;
  400796:	2001      	movs	r0, #1
  400798:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (mpu_who_am_i() != 0x68) {
        return false;
  40079a:	2000      	movs	r0, #0

    // Disable sleep mode
    mpu_set_sleep_enabled(false);

    return true;
}
  40079c:	bd38      	pop	{r3, r4, r5, pc}
  40079e:	bf00      	nop
  4007a0:	20000390 	.word	0x20000390
  4007a4:	20000234 	.word	0x20000234
  4007a8:	20000330 	.word	0x20000330
  4007ac:	20000238 	.word	0x20000238

004007b0 <mpu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool mpu_get_sleep_enabled(void)
{
  4007b0:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  4007b2:	2106      	movs	r1, #6
  4007b4:	206b      	movs	r0, #107	; 0x6b
  4007b6:	f7ff fef7 	bl	4005a8 <read_register_bit>
}
  4007ba:	bd08      	pop	{r3, pc}

004007bc <mpu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void mpu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  4007bc:	b570      	push	{r4, r5, r6, lr}
  4007be:	b082      	sub	sp, #8
  4007c0:	4606      	mov	r6, r0
  4007c2:	460d      	mov	r5, r1
  4007c4:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  4007c6:	2300      	movs	r3, #0
  4007c8:	9300      	str	r3, [sp, #0]
  4007ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  4007ce:	466a      	mov	r2, sp
  4007d0:	2106      	movs	r1, #6
  4007d2:	2043      	movs	r0, #67	; 0x43
  4007d4:	f7ff feb0 	bl	400538 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  4007d8:	f89d 2000 	ldrb.w	r2, [sp]
  4007dc:	f89d 3001 	ldrb.w	r3, [sp, #1]
  4007e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007e4:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  4007e6:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4007ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4007ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007f2:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  4007f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4007f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4007fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400800:	8023      	strh	r3, [r4, #0]

}
  400802:	b002      	add	sp, #8
  400804:	bd70      	pop	{r4, r5, r6, pc}
  400806:	bf00      	nop

00400808 <mpu_read_raw_gyro>:

void mpu_read_raw_gyro(void)
{
  400808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_gyro(&gx, &gy, &gz);
  40080a:	4d0c      	ldr	r5, [pc, #48]	; (40083c <mpu_read_raw_gyro+0x34>)
  40080c:	4e0c      	ldr	r6, [pc, #48]	; (400840 <mpu_read_raw_gyro+0x38>)
  40080e:	4f0d      	ldr	r7, [pc, #52]	; (400844 <mpu_read_raw_gyro+0x3c>)
  400810:	462a      	mov	r2, r5
  400812:	4631      	mov	r1, r6
  400814:	4638      	mov	r0, r7
  400816:	f7ff ffd1 	bl	4007bc <mpu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  40081a:	4c0b      	ldr	r4, [pc, #44]	; (400848 <mpu_read_raw_gyro+0x40>)
  40081c:	f9b7 0000 	ldrsh.w	r0, [r7]
  400820:	f005 f9e6 	bl	405bf0 <__aeabi_i2f>
  400824:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  400826:	f9b6 0000 	ldrsh.w	r0, [r6]
  40082a:	f005 f9e1 	bl	405bf0 <__aeabi_i2f>
  40082e:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400830:	f9b5 0000 	ldrsh.w	r0, [r5]
  400834:	f005 f9dc 	bl	405bf0 <__aeabi_i2f>
  400838:	60a0      	str	r0, [r4, #8]
  40083a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40083c:	20000370 	.word	0x20000370
  400840:	20000328 	.word	0x20000328
  400844:	2000039c 	.word	0x2000039c
  400848:	20000300 	.word	0x20000300

0040084c <mpu_read_normalized_gyro>:

}

t_fp_vector mpu_read_normalized_gyro(void)
{
  40084c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400850:	4604      	mov	r4, r0
    mpu_read_raw_gyro();
  400852:	f7ff ffd9 	bl	400808 <mpu_read_raw_gyro>

    if (use_calibrate) {
  400856:	4b3d      	ldr	r3, [pc, #244]	; (40094c <mpu_read_normalized_gyro+0x100>)
  400858:	781b      	ldrb	r3, [r3, #0]
  40085a:	b30b      	cbz	r3, 4008a0 <mpu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  40085c:	4b3c      	ldr	r3, [pc, #240]	; (400950 <mpu_read_normalized_gyro+0x104>)
  40085e:	681e      	ldr	r6, [r3, #0]
  400860:	4d3c      	ldr	r5, [pc, #240]	; (400954 <mpu_read_normalized_gyro+0x108>)
  400862:	4f3d      	ldr	r7, [pc, #244]	; (400958 <mpu_read_normalized_gyro+0x10c>)
  400864:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400964 <mpu_read_normalized_gyro+0x118>
  400868:	f8d8 1000 	ldr.w	r1, [r8]
  40086c:	6838      	ldr	r0, [r7, #0]
  40086e:	f005 f909 	bl	405a84 <__aeabi_fsub>
  400872:	4631      	mov	r1, r6
  400874:	f005 fa10 	bl	405c98 <__aeabi_fmul>
  400878:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  40087a:	f8d8 1004 	ldr.w	r1, [r8, #4]
  40087e:	6878      	ldr	r0, [r7, #4]
  400880:	f005 f900 	bl	405a84 <__aeabi_fsub>
  400884:	4631      	mov	r1, r6
  400886:	f005 fa07 	bl	405c98 <__aeabi_fmul>
  40088a:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  40088c:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400890:	68b8      	ldr	r0, [r7, #8]
  400892:	f005 f8f7 	bl	405a84 <__aeabi_fsub>
  400896:	4631      	mov	r1, r6
  400898:	f005 f9fe 	bl	405c98 <__aeabi_fmul>
  40089c:	60a8      	str	r0, [r5, #8]
  40089e:	e012      	b.n	4008c6 <mpu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  4008a0:	4b2b      	ldr	r3, [pc, #172]	; (400950 <mpu_read_normalized_gyro+0x104>)
  4008a2:	681f      	ldr	r7, [r3, #0]
  4008a4:	4d2b      	ldr	r5, [pc, #172]	; (400954 <mpu_read_normalized_gyro+0x108>)
  4008a6:	4e2c      	ldr	r6, [pc, #176]	; (400958 <mpu_read_normalized_gyro+0x10c>)
  4008a8:	4639      	mov	r1, r7
  4008aa:	6830      	ldr	r0, [r6, #0]
  4008ac:	f005 f9f4 	bl	405c98 <__aeabi_fmul>
  4008b0:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  4008b2:	4639      	mov	r1, r7
  4008b4:	6870      	ldr	r0, [r6, #4]
  4008b6:	f005 f9ef 	bl	405c98 <__aeabi_fmul>
  4008ba:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  4008bc:	4639      	mov	r1, r7
  4008be:	68b0      	ldr	r0, [r6, #8]
  4008c0:	f005 f9ea 	bl	405c98 <__aeabi_fmul>
  4008c4:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  4008c6:	2100      	movs	r1, #0
  4008c8:	4b24      	ldr	r3, [pc, #144]	; (40095c <mpu_read_normalized_gyro+0x110>)
  4008ca:	6818      	ldr	r0, [r3, #0]
  4008cc:	f005 fb78 	bl	405fc0 <__aeabi_fcmpeq>
  4008d0:	2800      	cmp	r0, #0
  4008d2:	d132      	bne.n	40093a <mpu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  4008d4:	4b1f      	ldr	r3, [pc, #124]	; (400954 <mpu_read_normalized_gyro+0x108>)
  4008d6:	6818      	ldr	r0, [r3, #0]
  4008d8:	f005 fba4 	bl	406024 <__aeabi_f2iz>
  4008dc:	2800      	cmp	r0, #0
  4008de:	bfb8      	it	lt
  4008e0:	4240      	neglt	r0, r0
  4008e2:	f005 f985 	bl	405bf0 <__aeabi_i2f>
  4008e6:	4b1e      	ldr	r3, [pc, #120]	; (400960 <mpu_read_normalized_gyro+0x114>)
  4008e8:	6819      	ldr	r1, [r3, #0]
  4008ea:	f005 fb73 	bl	405fd4 <__aeabi_fcmplt>
  4008ee:	b110      	cbz	r0, 4008f6 <mpu_read_normalized_gyro+0xaa>
  4008f0:	2200      	movs	r2, #0
  4008f2:	4b18      	ldr	r3, [pc, #96]	; (400954 <mpu_read_normalized_gyro+0x108>)
  4008f4:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  4008f6:	4b17      	ldr	r3, [pc, #92]	; (400954 <mpu_read_normalized_gyro+0x108>)
  4008f8:	6858      	ldr	r0, [r3, #4]
  4008fa:	f005 fb93 	bl	406024 <__aeabi_f2iz>
  4008fe:	2800      	cmp	r0, #0
  400900:	bfb8      	it	lt
  400902:	4240      	neglt	r0, r0
  400904:	f005 f974 	bl	405bf0 <__aeabi_i2f>
  400908:	4b15      	ldr	r3, [pc, #84]	; (400960 <mpu_read_normalized_gyro+0x114>)
  40090a:	6859      	ldr	r1, [r3, #4]
  40090c:	f005 fb62 	bl	405fd4 <__aeabi_fcmplt>
  400910:	b110      	cbz	r0, 400918 <mpu_read_normalized_gyro+0xcc>
  400912:	2200      	movs	r2, #0
  400914:	4b0f      	ldr	r3, [pc, #60]	; (400954 <mpu_read_normalized_gyro+0x108>)
  400916:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400918:	4b0e      	ldr	r3, [pc, #56]	; (400954 <mpu_read_normalized_gyro+0x108>)
  40091a:	6898      	ldr	r0, [r3, #8]
  40091c:	f005 fb82 	bl	406024 <__aeabi_f2iz>
  400920:	2800      	cmp	r0, #0
  400922:	bfb8      	it	lt
  400924:	4240      	neglt	r0, r0
  400926:	f005 f963 	bl	405bf0 <__aeabi_i2f>
  40092a:	4b0d      	ldr	r3, [pc, #52]	; (400960 <mpu_read_normalized_gyro+0x114>)
  40092c:	6899      	ldr	r1, [r3, #8]
  40092e:	f005 fb51 	bl	405fd4 <__aeabi_fcmplt>
  400932:	b110      	cbz	r0, 40093a <mpu_read_normalized_gyro+0xee>
  400934:	2200      	movs	r2, #0
  400936:	4b07      	ldr	r3, [pc, #28]	; (400954 <mpu_read_normalized_gyro+0x108>)
  400938:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  40093a:	4b06      	ldr	r3, [pc, #24]	; (400954 <mpu_read_normalized_gyro+0x108>)
  40093c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400944:	4620      	mov	r0, r4
  400946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40094a:	bf00      	nop
  40094c:	20000234 	.word	0x20000234
  400950:	20000230 	.word	0x20000230
  400954:	200003a8 	.word	0x200003a8
  400958:	20000300 	.word	0x20000300
  40095c:	20000238 	.word	0x20000238
  400960:	20000330 	.word	0x20000330
  400964:	20000390 	.word	0x20000390

00400968 <mpu_read_acceleration>:



void mpu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400968:	b570      	push	{r4, r5, r6, lr}
  40096a:	b082      	sub	sp, #8
  40096c:	4606      	mov	r6, r0
  40096e:	460d      	mov	r5, r1
  400970:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400972:	2300      	movs	r3, #0
  400974:	9300      	str	r3, [sp, #0]
  400976:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  40097a:	466a      	mov	r2, sp
  40097c:	2106      	movs	r1, #6
  40097e:	203b      	movs	r0, #59	; 0x3b
  400980:	f7ff fdda 	bl	400538 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400984:	f89d 2000 	ldrb.w	r2, [sp]
  400988:	f89d 3001 	ldrb.w	r3, [sp, #1]
  40098c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400990:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400992:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400996:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40099a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40099e:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  4009a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4009a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4009a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4009ac:	8023      	strh	r3, [r4, #0]
}
  4009ae:	b002      	add	sp, #8
  4009b0:	bd70      	pop	{r4, r5, r6, pc}
  4009b2:	bf00      	nop

004009b4 <mpu_read_raw_acceleration>:

void mpu_read_raw_acceleration(void)
{
  4009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpu_read_acceleration(&ax, &ay, &az);
  4009b6:	4d0c      	ldr	r5, [pc, #48]	; (4009e8 <mpu_read_raw_acceleration+0x34>)
  4009b8:	4e0c      	ldr	r6, [pc, #48]	; (4009ec <mpu_read_raw_acceleration+0x38>)
  4009ba:	4f0d      	ldr	r7, [pc, #52]	; (4009f0 <mpu_read_raw_acceleration+0x3c>)
  4009bc:	462a      	mov	r2, r5
  4009be:	4631      	mov	r1, r6
  4009c0:	4638      	mov	r0, r7
  4009c2:	f7ff ffd1 	bl	400968 <mpu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  4009c6:	4c0b      	ldr	r4, [pc, #44]	; (4009f4 <mpu_read_raw_acceleration+0x40>)
  4009c8:	f9b7 0000 	ldrsh.w	r0, [r7]
  4009cc:	f005 f910 	bl	405bf0 <__aeabi_i2f>
  4009d0:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  4009d2:	f9b6 0000 	ldrsh.w	r0, [r6]
  4009d6:	f005 f90b 	bl	405bf0 <__aeabi_i2f>
  4009da:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  4009dc:	f9b5 0000 	ldrsh.w	r0, [r5]
  4009e0:	f005 f906 	bl	405bf0 <__aeabi_i2f>
  4009e4:	60a0      	str	r0, [r4, #8]
  4009e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4009e8:	2000032a 	.word	0x2000032a
  4009ec:	2000039e 	.word	0x2000039e
  4009f0:	2000032c 	.word	0x2000032c
  4009f4:	20000384 	.word	0x20000384

004009f8 <mpu_read_normalized_acceleration>:
}

void mpu_read_normalized_acceleration(void)
{
  4009f8:	b570      	push	{r4, r5, r6, lr}
    mpu_read_raw_acceleration();
  4009fa:	f7ff ffdb 	bl	4009b4 <mpu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  4009fe:	4b0e      	ldr	r3, [pc, #56]	; (400a38 <mpu_read_normalized_acceleration+0x40>)
  400a00:	681d      	ldr	r5, [r3, #0]
  400a02:	4c0e      	ldr	r4, [pc, #56]	; (400a3c <mpu_read_normalized_acceleration+0x44>)
  400a04:	4e0e      	ldr	r6, [pc, #56]	; (400a40 <mpu_read_normalized_acceleration+0x48>)
  400a06:	6831      	ldr	r1, [r6, #0]
  400a08:	4628      	mov	r0, r5
  400a0a:	f005 f945 	bl	405c98 <__aeabi_fmul>
  400a0e:	490d      	ldr	r1, [pc, #52]	; (400a44 <mpu_read_normalized_acceleration+0x4c>)
  400a10:	f005 f942 	bl	405c98 <__aeabi_fmul>
  400a14:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  400a16:	6871      	ldr	r1, [r6, #4]
  400a18:	4628      	mov	r0, r5
  400a1a:	f005 f93d 	bl	405c98 <__aeabi_fmul>
  400a1e:	4909      	ldr	r1, [pc, #36]	; (400a44 <mpu_read_normalized_acceleration+0x4c>)
  400a20:	f005 f93a 	bl	405c98 <__aeabi_fmul>
  400a24:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400a26:	68b1      	ldr	r1, [r6, #8]
  400a28:	4628      	mov	r0, r5
  400a2a:	f005 f935 	bl	405c98 <__aeabi_fmul>
  400a2e:	4905      	ldr	r1, [pc, #20]	; (400a44 <mpu_read_normalized_acceleration+0x4c>)
  400a30:	f005 f932 	bl	405c98 <__aeabi_fmul>
  400a34:	60a0      	str	r0, [r4, #8]
  400a36:	bd70      	pop	{r4, r5, r6, pc}
  400a38:	2000021c 	.word	0x2000021c
  400a3c:	20000358 	.word	0x20000358
  400a40:	20000384 	.word	0x20000384
  400a44:	411ce80a 	.word	0x411ce80a

00400a48 <mpu_log_settings>:

    return norm_accel;
}

void mpu_log_settings(void)
{
  400a48:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", mpu_who_am_i());
  400a4a:	f7ff fdfd 	bl	400648 <mpu_who_am_i>
  400a4e:	4601      	mov	r1, r0
  400a50:	482b      	ldr	r0, [pc, #172]	; (400b00 <mpu_log_settings+0xb8>)
  400a52:	f002 fb0d 	bl	403070 <iprintf>
    printf("Sleep Mode: %s\r\n", mpu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400a56:	f7ff feab 	bl	4007b0 <mpu_get_sleep_enabled>
  400a5a:	492a      	ldr	r1, [pc, #168]	; (400b04 <mpu_log_settings+0xbc>)
  400a5c:	4a2a      	ldr	r2, [pc, #168]	; (400b08 <mpu_log_settings+0xc0>)
  400a5e:	2800      	cmp	r0, #0
  400a60:	bf18      	it	ne
  400a62:	4611      	movne	r1, r2
  400a64:	4829      	ldr	r0, [pc, #164]	; (400b0c <mpu_log_settings+0xc4>)
  400a66:	f002 fb03 	bl	403070 <iprintf>
    printf("Clock Source: ");
  400a6a:	4829      	ldr	r0, [pc, #164]	; (400b10 <mpu_log_settings+0xc8>)
  400a6c:	f002 fb00 	bl	403070 <iprintf>
    switch (mpu_get_clock_source()) {
  400a70:	f7ff fdfc 	bl	40066c <mpu_get_clock_source>
  400a74:	b110      	cbz	r0, 400a7c <mpu_log_settings+0x34>
  400a76:	2801      	cmp	r0, #1
  400a78:	d004      	beq.n	400a84 <mpu_log_settings+0x3c>
  400a7a:	e006      	b.n	400a8a <mpu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400a7c:	4825      	ldr	r0, [pc, #148]	; (400b14 <mpu_log_settings+0xcc>)
  400a7e:	f002 faf7 	bl	403070 <iprintf>
        break;
  400a82:	e002      	b.n	400a8a <mpu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400a84:	4824      	ldr	r0, [pc, #144]	; (400b18 <mpu_log_settings+0xd0>)
  400a86:	f002 faf3 	bl	403070 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400a8a:	4824      	ldr	r0, [pc, #144]	; (400b1c <mpu_log_settings+0xd4>)
  400a8c:	f002 faf0 	bl	403070 <iprintf>
        switch (mpu_get_gyro_scale()) {
  400a90:	f7ff fe22 	bl	4006d8 <mpu_get_gyro_scale>
  400a94:	2803      	cmp	r0, #3
  400a96:	d812      	bhi.n	400abe <mpu_log_settings+0x76>
  400a98:	e8df f000 	tbb	[pc, r0]
  400a9c:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400aa0:	481f      	ldr	r0, [pc, #124]	; (400b20 <mpu_log_settings+0xd8>)
  400aa2:	f002 fae5 	bl	403070 <iprintf>
        break;
  400aa6:	e00a      	b.n	400abe <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400aa8:	481e      	ldr	r0, [pc, #120]	; (400b24 <mpu_log_settings+0xdc>)
  400aaa:	f002 fae1 	bl	403070 <iprintf>
        break;
  400aae:	e006      	b.n	400abe <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400ab0:	481d      	ldr	r0, [pc, #116]	; (400b28 <mpu_log_settings+0xe0>)
  400ab2:	f002 fadd 	bl	403070 <iprintf>
        break;
  400ab6:	e002      	b.n	400abe <mpu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400ab8:	481c      	ldr	r0, [pc, #112]	; (400b2c <mpu_log_settings+0xe4>)
  400aba:	f002 fad9 	bl	403070 <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400abe:	4b1c      	ldr	r3, [pc, #112]	; (400b30 <mpu_log_settings+0xe8>)
  400ac0:	7819      	ldrb	r1, [r3, #0]
  400ac2:	481c      	ldr	r0, [pc, #112]	; (400b34 <mpu_log_settings+0xec>)
  400ac4:	f002 fad4 	bl	403070 <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400ac8:	4b1b      	ldr	r3, [pc, #108]	; (400b38 <mpu_log_settings+0xf0>)
  400aca:	6818      	ldr	r0, [r3, #0]
  400acc:	f004 fc5a 	bl	405384 <__aeabi_f2d>
  400ad0:	4602      	mov	r2, r0
  400ad2:	460b      	mov	r3, r1
  400ad4:	4819      	ldr	r0, [pc, #100]	; (400b3c <mpu_log_settings+0xf4>)
  400ad6:	f002 facb 	bl	403070 <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400ada:	4b19      	ldr	r3, [pc, #100]	; (400b40 <mpu_log_settings+0xf8>)
  400adc:	6818      	ldr	r0, [r3, #0]
  400ade:	f004 fc51 	bl	405384 <__aeabi_f2d>
  400ae2:	4602      	mov	r2, r0
  400ae4:	460b      	mov	r3, r1
  400ae6:	4817      	ldr	r0, [pc, #92]	; (400b44 <mpu_log_settings+0xfc>)
  400ae8:	f002 fac2 	bl	403070 <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400aec:	4b16      	ldr	r3, [pc, #88]	; (400b48 <mpu_log_settings+0x100>)
  400aee:	6818      	ldr	r0, [r3, #0]
  400af0:	f004 fc48 	bl	405384 <__aeabi_f2d>
  400af4:	4602      	mov	r2, r0
  400af6:	460b      	mov	r3, r1
  400af8:	4814      	ldr	r0, [pc, #80]	; (400b4c <mpu_log_settings+0x104>)
  400afa:	f002 fab9 	bl	403070 <iprintf>
  400afe:	bd08      	pop	{r3, pc}
  400b00:	00406180 	.word	0x00406180
  400b04:	00406174 	.word	0x00406174
  400b08:	0040616c 	.word	0x0040616c
  400b0c:	00406190 	.word	0x00406190
  400b10:	004061a4 	.word	0x004061a4
  400b14:	004061b4 	.word	0x004061b4
  400b18:	004061d0 	.word	0x004061d0
  400b1c:	004061f8 	.word	0x004061f8
  400b20:	00406204 	.word	0x00406204
  400b24:	00406210 	.word	0x00406210
  400b28:	0040621c 	.word	0x0040621c
  400b2c:	00406228 	.word	0x00406228
  400b30:	20000234 	.word	0x20000234
  400b34:	00406234 	.word	0x00406234
  400b38:	20000238 	.word	0x20000238
  400b3c:	00406248 	.word	0x00406248
  400b40:	20000230 	.word	0x20000230
  400b44:	00406260 	.word	0x00406260
  400b48:	2000021c 	.word	0x2000021c
  400b4c:	00406274 	.word	0x00406274

00400b50 <mpu_set_threshold>:
{
	return actual_threshold;
}

void mpu_set_threshold(uint8_t multiple)
{
  400b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  400b52:	4604      	mov	r4, r0
  400b54:	b1d8      	cbz	r0, 400b8e <mpu_set_threshold+0x3e>
		if (!use_calibrate) {
  400b56:	4b13      	ldr	r3, [pc, #76]	; (400ba4 <mpu_set_threshold+0x54>)
  400b58:	781b      	ldrb	r3, [r3, #0]
  400b5a:	b913      	cbnz	r3, 400b62 <mpu_set_threshold+0x12>
			mpu_calibrate_gyro(GYRO_SAMPLES);
  400b5c:	2032      	movs	r0, #50	; 0x32
  400b5e:	f000 f829 	bl	400bb4 <mpu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  400b62:	4620      	mov	r0, r4
  400b64:	f005 f844 	bl	405bf0 <__aeabi_i2f>
  400b68:	4607      	mov	r7, r0
  400b6a:	4d0f      	ldr	r5, [pc, #60]	; (400ba8 <mpu_set_threshold+0x58>)
  400b6c:	4e0f      	ldr	r6, [pc, #60]	; (400bac <mpu_set_threshold+0x5c>)
  400b6e:	4601      	mov	r1, r0
  400b70:	6830      	ldr	r0, [r6, #0]
  400b72:	f005 f891 	bl	405c98 <__aeabi_fmul>
  400b76:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  400b78:	4639      	mov	r1, r7
  400b7a:	6870      	ldr	r0, [r6, #4]
  400b7c:	f005 f88c 	bl	405c98 <__aeabi_fmul>
  400b80:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  400b82:	4639      	mov	r1, r7
  400b84:	68b0      	ldr	r0, [r6, #8]
  400b86:	f005 f887 	bl	405c98 <__aeabi_fmul>
  400b8a:	60a8      	str	r0, [r5, #8]
  400b8c:	e004      	b.n	400b98 <mpu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  400b8e:	4b06      	ldr	r3, [pc, #24]	; (400ba8 <mpu_set_threshold+0x58>)
  400b90:	2200      	movs	r2, #0
  400b92:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  400b94:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  400b96:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  400b98:	4620      	mov	r0, r4
  400b9a:	f005 f825 	bl	405be8 <__aeabi_ui2f>
  400b9e:	4b04      	ldr	r3, [pc, #16]	; (400bb0 <mpu_set_threshold+0x60>)
  400ba0:	6018      	str	r0, [r3, #0]
  400ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ba4:	20000234 	.word	0x20000234
  400ba8:	20000330 	.word	0x20000330
  400bac:	200002f0 	.word	0x200002f0
  400bb0:	20000238 	.word	0x20000238

00400bb4 <mpu_calibrate_gyro>:

}


void mpu_calibrate_gyro(uint8_t samples)
{
  400bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400bb8:	b085      	sub	sp, #20
	use_calibrate = true;
  400bba:	2201      	movs	r2, #1
  400bbc:	4b5e      	ldr	r3, [pc, #376]	; (400d38 <mpu_calibrate_gyro+0x184>)
  400bbe:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400bc0:	4681      	mov	r9, r0
  400bc2:	2800      	cmp	r0, #0
  400bc4:	d048      	beq.n	400c58 <mpu_calibrate_gyro+0xa4>
  400bc6:	2400      	movs	r4, #0
  400bc8:	f04f 0a00 	mov.w	sl, #0
  400bcc:	46d3      	mov	fp, sl
  400bce:	f8cd a00c 	str.w	sl, [sp, #12]
  400bd2:	f8cd a008 	str.w	sl, [sp, #8]
  400bd6:	f8cd a004 	str.w	sl, [sp, #4]
  400bda:	f8cd a000 	str.w	sl, [sp]

        mpu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  400bde:	f8df 816c 	ldr.w	r8, [pc, #364]	; 400d4c <mpu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        mpu_read_raw_gyro();
  400be2:	f7ff fe11 	bl	400808 <mpu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  400be6:	f8d8 7000 	ldr.w	r7, [r8]
  400bea:	4639      	mov	r1, r7
  400bec:	9800      	ldr	r0, [sp, #0]
  400bee:	f004 ff4b 	bl	405a88 <__addsf3>
  400bf2:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  400bf4:	f8d8 6004 	ldr.w	r6, [r8, #4]
  400bf8:	4631      	mov	r1, r6
  400bfa:	9801      	ldr	r0, [sp, #4]
  400bfc:	f004 ff44 	bl	405a88 <__addsf3>
  400c00:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  400c02:	f8d8 5008 	ldr.w	r5, [r8, #8]
  400c06:	4629      	mov	r1, r5
  400c08:	9802      	ldr	r0, [sp, #8]
  400c0a:	f004 ff3d 	bl	405a88 <__addsf3>
  400c0e:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  400c10:	4639      	mov	r1, r7
  400c12:	4638      	mov	r0, r7
  400c14:	f005 f840 	bl	405c98 <__aeabi_fmul>
  400c18:	4601      	mov	r1, r0
  400c1a:	9803      	ldr	r0, [sp, #12]
  400c1c:	f004 ff34 	bl	405a88 <__addsf3>
  400c20:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  400c22:	4631      	mov	r1, r6
  400c24:	4630      	mov	r0, r6
  400c26:	f005 f837 	bl	405c98 <__aeabi_fmul>
  400c2a:	4601      	mov	r1, r0
  400c2c:	4658      	mov	r0, fp
  400c2e:	f004 ff2b 	bl	405a88 <__addsf3>
  400c32:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  400c34:	4629      	mov	r1, r5
  400c36:	4628      	mov	r0, r5
  400c38:	f005 f82e 	bl	405c98 <__aeabi_fmul>
  400c3c:	4601      	mov	r1, r0
  400c3e:	4650      	mov	r0, sl
  400c40:	f004 ff22 	bl	405a88 <__addsf3>
  400c44:	4682      	mov	sl, r0

		delay_ms(5);
  400c46:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400c4a:	f005 fcd1 	bl	4065f0 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400c4e:	3401      	adds	r4, #1
  400c50:	b2e4      	uxtb	r4, r4
  400c52:	45a1      	cmp	r9, r4
  400c54:	d1c5      	bne.n	400be2 <mpu_calibrate_gyro+0x2e>
  400c56:	e00a      	b.n	400c6e <mpu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  400c58:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  400c5c:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  400c5e:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  400c62:	f8cd a008 	str.w	sl, [sp, #8]
void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  400c66:	f8cd a004 	str.w	sl, [sp, #4]

void mpu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  400c6a:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  400c6e:	4648      	mov	r0, r9
  400c70:	f004 ffbe 	bl	405bf0 <__aeabi_i2f>
  400c74:	4605      	mov	r5, r0
  400c76:	4601      	mov	r1, r0
  400c78:	9800      	ldr	r0, [sp, #0]
  400c7a:	f005 f8c1 	bl	405e00 <__aeabi_fdiv>
  400c7e:	4606      	mov	r6, r0
  400c80:	4c2e      	ldr	r4, [pc, #184]	; (400d3c <mpu_calibrate_gyro+0x188>)
  400c82:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  400c84:	4629      	mov	r1, r5
  400c86:	9801      	ldr	r0, [sp, #4]
  400c88:	f005 f8ba 	bl	405e00 <__aeabi_fdiv>
  400c8c:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  400c8e:	4629      	mov	r1, r5
  400c90:	9802      	ldr	r0, [sp, #8]
  400c92:	f005 f8b5 	bl	405e00 <__aeabi_fdiv>
  400c96:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  400c98:	9f03      	ldr	r7, [sp, #12]
  400c9a:	4929      	ldr	r1, [pc, #164]	; (400d40 <mpu_calibrate_gyro+0x18c>)
  400c9c:	4638      	mov	r0, r7
  400c9e:	f005 f8af 	bl	405e00 <__aeabi_fdiv>
  400ca2:	4605      	mov	r5, r0
  400ca4:	4631      	mov	r1, r6
  400ca6:	4630      	mov	r0, r6
  400ca8:	f004 fff6 	bl	405c98 <__aeabi_fmul>
  400cac:	4601      	mov	r1, r0
  400cae:	4628      	mov	r0, r5
  400cb0:	f004 fee8 	bl	405a84 <__aeabi_fsub>
  400cb4:	f004 fb66 	bl	405384 <__aeabi_f2d>
  400cb8:	f001 f9a8 	bl	40200c <sqrt>
  400cbc:	4e21      	ldr	r6, [pc, #132]	; (400d44 <mpu_calibrate_gyro+0x190>)
  400cbe:	f004 fe8d 	bl	4059dc <__aeabi_d2f>
  400cc2:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  400cc4:	6865      	ldr	r5, [r4, #4]
  400cc6:	491e      	ldr	r1, [pc, #120]	; (400d40 <mpu_calibrate_gyro+0x18c>)
  400cc8:	4658      	mov	r0, fp
  400cca:	f005 f899 	bl	405e00 <__aeabi_fdiv>
  400cce:	4607      	mov	r7, r0
  400cd0:	4629      	mov	r1, r5
  400cd2:	4628      	mov	r0, r5
  400cd4:	f004 ffe0 	bl	405c98 <__aeabi_fmul>
  400cd8:	4601      	mov	r1, r0
  400cda:	4638      	mov	r0, r7
  400cdc:	f004 fed2 	bl	405a84 <__aeabi_fsub>
  400ce0:	f004 fb50 	bl	405384 <__aeabi_f2d>
  400ce4:	f001 f992 	bl	40200c <sqrt>
  400ce8:	f004 fe78 	bl	4059dc <__aeabi_d2f>
  400cec:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  400cee:	68a4      	ldr	r4, [r4, #8]
  400cf0:	4913      	ldr	r1, [pc, #76]	; (400d40 <mpu_calibrate_gyro+0x18c>)
  400cf2:	4650      	mov	r0, sl
  400cf4:	f005 f884 	bl	405e00 <__aeabi_fdiv>
  400cf8:	4605      	mov	r5, r0
  400cfa:	4621      	mov	r1, r4
  400cfc:	4620      	mov	r0, r4
  400cfe:	f004 ffcb 	bl	405c98 <__aeabi_fmul>
  400d02:	4601      	mov	r1, r0
  400d04:	4628      	mov	r0, r5
  400d06:	f004 febd 	bl	405a84 <__aeabi_fsub>
  400d0a:	f004 fb3b 	bl	405384 <__aeabi_f2d>
  400d0e:	f001 f97d 	bl	40200c <sqrt>
  400d12:	f004 fe63 	bl	4059dc <__aeabi_d2f>
  400d16:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  400d18:	4b0b      	ldr	r3, [pc, #44]	; (400d48 <mpu_calibrate_gyro+0x194>)
  400d1a:	681c      	ldr	r4, [r3, #0]
  400d1c:	2100      	movs	r1, #0
  400d1e:	4620      	mov	r0, r4
  400d20:	f005 f976 	bl	406010 <__aeabi_fcmpgt>
  400d24:	b128      	cbz	r0, 400d32 <mpu_calibrate_gyro+0x17e>
		mpu_set_threshold(actual_threshold);
  400d26:	4620      	mov	r0, r4
  400d28:	f005 f9a2 	bl	406070 <__aeabi_f2uiz>
  400d2c:	b2c0      	uxtb	r0, r0
  400d2e:	f7ff ff0f 	bl	400b50 <mpu_set_threshold>
	}

}
  400d32:	b005      	add	sp, #20
  400d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d38:	20000234 	.word	0x20000234
  400d3c:	20000390 	.word	0x20000390
  400d40:	42480000 	.word	0x42480000
  400d44:	200002f0 	.word	0x200002f0
  400d48:	20000238 	.word	0x20000238
  400d4c:	20000300 	.word	0x20000300

00400d50 <imu_init>:
float last_gyro_angle_x = 0.0f;
float last_gyro_angle_y = 0.0f;
float last_gyro_angle_z = 0.0f;

bool imu_init(void)
{
  400d50:	b510      	push	{r4, lr}
    ap.imu.x_axis = 0.0f;
  400d52:	4b0c      	ldr	r3, [pc, #48]	; (400d84 <imu_init+0x34>)
  400d54:	2200      	movs	r2, #0
  400d56:	601a      	str	r2, [r3, #0]
    ap.imu.y_axis = 0.0f;
  400d58:	605a      	str	r2, [r3, #4]
    ap.imu.z_axis = 0.0f;
  400d5a:	609a      	str	r2, [r3, #8]

    ap.setpoint.x_axis = 0.0f;
  400d5c:	60da      	str	r2, [r3, #12]
    ap.setpoint.y_axis = 0.0f;
  400d5e:	611a      	str	r2, [r3, #16]
    ap.setpoint.z_axis = 0.0f;
  400d60:	615a      	str	r2, [r3, #20]

    ap.command.x_axis = 0.0f;
  400d62:	619a      	str	r2, [r3, #24]
    ap.command.y_axis = 0.0f;
  400d64:	61da      	str	r2, [r3, #28]
    ap.command.z_axis = 0.0f;
  400d66:	621a      	str	r2, [r3, #32]

    return (mpu_init() & mpu_probe() & mpu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2));
  400d68:	f7ff fc26 	bl	4005b8 <mpu_init>
  400d6c:	4604      	mov	r4, r0
  400d6e:	f7ff fc4d 	bl	40060c <mpu_probe>
  400d72:	4020      	ands	r0, r4
  400d74:	b2c4      	uxtb	r4, r0
  400d76:	2100      	movs	r1, #0
  400d78:	4608      	mov	r0, r1
  400d7a:	f7ff fceb 	bl	400754 <mpu_begin>
}
  400d7e:	4020      	ands	r0, r4
  400d80:	bd10      	pop	{r4, pc}
  400d82:	bf00      	nop
  400d84:	200003b4 	.word	0x200003b4

00400d88 <imu_calibrate>:

void imu_calibrate(void)
{
  400d88:	b508      	push	{r3, lr}
    mpu_calibrate_gyro(GYRO_SAMPLES);
  400d8a:	2032      	movs	r0, #50	; 0x32
  400d8c:	f7ff ff12 	bl	400bb4 <mpu_calibrate_gyro>
    mpu_set_threshold(0);
  400d90:	2000      	movs	r0, #0
  400d92:	f7ff fedd 	bl	400b50 <mpu_set_threshold>
    mpu_log_settings();
  400d96:	f7ff fe57 	bl	400a48 <mpu_log_settings>
  400d9a:	bd08      	pop	{r3, pc}
  400d9c:	0000      	movs	r0, r0
	...

00400da0 <imu_tick>:
}

void imu_tick(void)
{
  400da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400da4:	b08d      	sub	sp, #52	; 0x34
    clock_time_t t_now = cph_get_millis();
  400da6:	4b82      	ldr	r3, [pc, #520]	; (400fb0 <imu_tick+0x210>)
  400da8:	681d      	ldr	r5, [r3, #0]

    mpu_read_normalized_gyro();
  400daa:	a808      	add	r0, sp, #32
  400dac:	f7ff fd4e 	bl	40084c <mpu_read_normalized_gyro>
    mpu_read_normalized_acceleration();
  400db0:	f7ff fe22 	bl	4009f8 <mpu_read_normalized_acceleration>

    float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  400db4:	4c7f      	ldr	r4, [pc, #508]	; (400fb4 <imu_tick+0x214>)
  400db6:	6820      	ldr	r0, [r4, #0]
  400db8:	f004 fae4 	bl	405384 <__aeabi_f2d>
  400dbc:	a37a      	add	r3, pc, #488	; (adr r3, 400fa8 <imu_tick+0x208>)
  400dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  400dc2:	f004 fb33 	bl	40542c <__aeabi_dmul>
  400dc6:	2200      	movs	r2, #0
  400dc8:	4b7b      	ldr	r3, [pc, #492]	; (400fb8 <imu_tick+0x218>)
  400dca:	f004 fc59 	bl	405680 <__aeabi_ddiv>
  400dce:	f004 fe05 	bl	4059dc <__aeabi_d2f>
  400dd2:	9005      	str	r0, [sp, #20]
    float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  400dd4:	6860      	ldr	r0, [r4, #4]
  400dd6:	f004 fad5 	bl	405384 <__aeabi_f2d>
  400dda:	a373      	add	r3, pc, #460	; (adr r3, 400fa8 <imu_tick+0x208>)
  400ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400de0:	f004 fb24 	bl	40542c <__aeabi_dmul>
  400de4:	2200      	movs	r2, #0
  400de6:	4b74      	ldr	r3, [pc, #464]	; (400fb8 <imu_tick+0x218>)
  400de8:	f004 fc4a 	bl	405680 <__aeabi_ddiv>
  400dec:	f004 fdf6 	bl	4059dc <__aeabi_d2f>
  400df0:	9006      	str	r0, [sp, #24]
    float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  400df2:	68a0      	ldr	r0, [r4, #8]
  400df4:	f004 fac6 	bl	405384 <__aeabi_f2d>
  400df8:	a36b      	add	r3, pc, #428	; (adr r3, 400fa8 <imu_tick+0x208>)
  400dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  400dfe:	f004 fb15 	bl	40542c <__aeabi_dmul>
  400e02:	2200      	movs	r2, #0
  400e04:	4b6c      	ldr	r3, [pc, #432]	; (400fb8 <imu_tick+0x218>)
  400e06:	f004 fc3b 	bl	405680 <__aeabi_ddiv>
  400e0a:	f004 fde7 	bl	4059dc <__aeabi_d2f>
  400e0e:	9007      	str	r0, [sp, #28]



    float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  400e10:	4c6a      	ldr	r4, [pc, #424]	; (400fbc <imu_tick+0x21c>)
  400e12:	6820      	ldr	r0, [r4, #0]
  400e14:	f004 fab6 	bl	405384 <__aeabi_f2d>
  400e18:	e9cd 0100 	strd	r0, r1, [sp]
  400e1c:	6860      	ldr	r0, [r4, #4]
  400e1e:	f004 fab1 	bl	405384 <__aeabi_f2d>
  400e22:	4682      	mov	sl, r0
  400e24:	468b      	mov	fp, r1
  400e26:	68a0      	ldr	r0, [r4, #8]
  400e28:	f004 faac 	bl	405384 <__aeabi_f2d>
  400e2c:	4606      	mov	r6, r0
  400e2e:	460f      	mov	r7, r1
  400e30:	4632      	mov	r2, r6
  400e32:	463b      	mov	r3, r7
  400e34:	4630      	mov	r0, r6
  400e36:	4639      	mov	r1, r7
  400e38:	f004 faf8 	bl	40542c <__aeabi_dmul>
  400e3c:	4680      	mov	r8, r0
  400e3e:	4689      	mov	r9, r1
  400e40:	4652      	mov	r2, sl
  400e42:	465b      	mov	r3, fp
  400e44:	4650      	mov	r0, sl
  400e46:	4659      	mov	r1, fp
  400e48:	f004 faf0 	bl	40542c <__aeabi_dmul>
  400e4c:	4602      	mov	r2, r0
  400e4e:	460b      	mov	r3, r1
  400e50:	4640      	mov	r0, r8
  400e52:	4649      	mov	r1, r9
  400e54:	f004 f938 	bl	4050c8 <__adddf3>
  400e58:	f001 f8d8 	bl	40200c <sqrt>
  400e5c:	4602      	mov	r2, r0
  400e5e:	460b      	mov	r3, r1
  400e60:	e9dd 0100 	ldrd	r0, r1, [sp]
  400e64:	f001 f8d0 	bl	402008 <atan2>
  400e68:	e9cd 0100 	strd	r0, r1, [sp]
    float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  400e6c:	6860      	ldr	r0, [r4, #4]
  400e6e:	f004 fa89 	bl	405384 <__aeabi_f2d>
  400e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400e76:	6820      	ldr	r0, [r4, #0]
  400e78:	f004 fa84 	bl	405384 <__aeabi_f2d>
  400e7c:	4682      	mov	sl, r0
  400e7e:	468b      	mov	fp, r1
  400e80:	68a0      	ldr	r0, [r4, #8]
  400e82:	f004 fa7f 	bl	405384 <__aeabi_f2d>
  400e86:	4606      	mov	r6, r0
  400e88:	460f      	mov	r7, r1
  400e8a:	4652      	mov	r2, sl
  400e8c:	465b      	mov	r3, fp
  400e8e:	4650      	mov	r0, sl
  400e90:	4659      	mov	r1, fp
  400e92:	f004 facb 	bl	40542c <__aeabi_dmul>
  400e96:	4680      	mov	r8, r0
  400e98:	4689      	mov	r9, r1
  400e9a:	4632      	mov	r2, r6
  400e9c:	463b      	mov	r3, r7
  400e9e:	4630      	mov	r0, r6
  400ea0:	4639      	mov	r1, r7
  400ea2:	f004 fac3 	bl	40542c <__aeabi_dmul>
  400ea6:	4602      	mov	r2, r0
  400ea8:	460b      	mov	r3, r1
  400eaa:	4640      	mov	r0, r8
  400eac:	4649      	mov	r1, r9
  400eae:	f004 f90b 	bl	4050c8 <__adddf3>
  400eb2:	f001 f8ab 	bl	40200c <sqrt>
  400eb6:	4602      	mov	r2, r0
  400eb8:	460b      	mov	r3, r1
  400eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  400ebe:	f001 f8a3 	bl	402008 <atan2>
  400ec2:	4680      	mov	r8, r0
  400ec4:	4689      	mov	r9, r1
    float accel_angle_z = 0;

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
  400ec6:	f8df a118 	ldr.w	sl, [pc, #280]	; 400fe0 <imu_tick+0x240>
    float dt = ((float)delta_t/1000.0f);
  400eca:	f8da 0000 	ldr.w	r0, [sl]
  400ece:	1a28      	subs	r0, r5, r0
  400ed0:	f004 fe8a 	bl	405be8 <__aeabi_ui2f>
  400ed4:	493a      	ldr	r1, [pc, #232]	; (400fc0 <imu_tick+0x220>)
  400ed6:	f004 ff93 	bl	405e00 <__aeabi_fdiv>
  400eda:	4604      	mov	r4, r0
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400edc:	4601      	mov	r1, r0
  400ede:	9805      	ldr	r0, [sp, #20]
  400ee0:	f004 feda 	bl	405c98 <__aeabi_fmul>

    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
  400ee4:	4f37      	ldr	r7, [pc, #220]	; (400fc4 <imu_tick+0x224>)
    // Compute drifting gyro angles
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400ee6:	6839      	ldr	r1, [r7, #0]
  400ee8:	f004 fdce 	bl	405a88 <__addsf3>
  400eec:	4936      	ldr	r1, [pc, #216]	; (400fc8 <imu_tick+0x228>)
  400eee:	f004 fed3 	bl	405c98 <__aeabi_fmul>
  400ef2:	4683      	mov	fp, r0
  400ef4:	2200      	movs	r2, #0
  400ef6:	4b30      	ldr	r3, [pc, #192]	; (400fb8 <imu_tick+0x218>)
  400ef8:	4640      	mov	r0, r8
  400efa:	4649      	mov	r1, r9
  400efc:	f004 fa96 	bl	40542c <__aeabi_dmul>
  400f00:	a329      	add	r3, pc, #164	; (adr r3, 400fa8 <imu_tick+0x208>)
  400f02:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f06:	f004 fbbb 	bl	405680 <__aeabi_ddiv>
  400f0a:	f004 fd67 	bl	4059dc <__aeabi_d2f>
  400f0e:	492f      	ldr	r1, [pc, #188]	; (400fcc <imu_tick+0x22c>)
  400f10:	f004 fec2 	bl	405c98 <__aeabi_fmul>
  400f14:	4601      	mov	r1, r0
  400f16:	4658      	mov	r0, fp
  400f18:	f004 fdb6 	bl	405a88 <__addsf3>
  400f1c:	4680      	mov	r8, r0
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400f1e:	4621      	mov	r1, r4
  400f20:	9806      	ldr	r0, [sp, #24]
  400f22:	f004 feb9 	bl	405c98 <__aeabi_fmul>
    // Compute filtered angles
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
  400f26:	4e2a      	ldr	r6, [pc, #168]	; (400fd0 <imu_tick+0x230>)
    float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400f28:	6831      	ldr	r1, [r6, #0]
  400f2a:	f004 fdad 	bl	405a88 <__addsf3>
  400f2e:	4926      	ldr	r1, [pc, #152]	; (400fc8 <imu_tick+0x228>)
  400f30:	f004 feb2 	bl	405c98 <__aeabi_fmul>
  400f34:	4681      	mov	r9, r0
  400f36:	2200      	movs	r2, #0
  400f38:	4b1f      	ldr	r3, [pc, #124]	; (400fb8 <imu_tick+0x218>)
  400f3a:	e9dd 0100 	ldrd	r0, r1, [sp]
  400f3e:	f004 fa75 	bl	40542c <__aeabi_dmul>
  400f42:	a319      	add	r3, pc, #100	; (adr r3, 400fa8 <imu_tick+0x208>)
  400f44:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f48:	f004 fb9a 	bl	405680 <__aeabi_ddiv>
  400f4c:	f004 fd46 	bl	4059dc <__aeabi_d2f>
  400f50:	491e      	ldr	r1, [pc, #120]	; (400fcc <imu_tick+0x22c>)
  400f52:	f004 fea1 	bl	405c98 <__aeabi_fmul>
  400f56:	4601      	mov	r1, r0
  400f58:	4648      	mov	r0, r9
  400f5a:	f004 fd95 	bl	405a88 <__addsf3>
  400f5e:	4681      	mov	r9, r0
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  400f60:	4621      	mov	r1, r4
  400f62:	9807      	ldr	r0, [sp, #28]
  400f64:	f004 fe98 	bl	405c98 <__aeabi_fmul>
    clock_time_t delta_t = (t_now-last_time_read);
    float dt = ((float)delta_t/1000.0f);

    float gyro_angle_x = gyro_x * dt + last_angle_x;
    float gyro_angle_y = gyro_y * dt + last_angle_y;
    float gyro_angle_z = gyro_z * dt + last_angle_z;
  400f68:	4c1a      	ldr	r4, [pc, #104]	; (400fd4 <imu_tick+0x234>)
    float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
    float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

    float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
    float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
    float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  400f6a:	6821      	ldr	r1, [r4, #0]
  400f6c:	f004 fd8c 	bl	405a88 <__addsf3>
  400f70:	4915      	ldr	r1, [pc, #84]	; (400fc8 <imu_tick+0x228>)
  400f72:	f004 fe91 	bl	405c98 <__aeabi_fmul>
  400f76:	2100      	movs	r1, #0
  400f78:	f004 fd86 	bl	405a88 <__addsf3>


    last_time_read = t_now;
  400f7c:	f8ca 5000 	str.w	r5, [sl]
    last_angle_x = angle_x;
  400f80:	f8c7 8000 	str.w	r8, [r7]
    last_angle_y = angle_y;
  400f84:	f8c6 9000 	str.w	r9, [r6]
    last_angle_z = angle_z;
  400f88:	6020      	str	r0, [r4, #0]

    imu_complementary.x_axis = angle_x;
  400f8a:	4b13      	ldr	r3, [pc, #76]	; (400fd8 <imu_tick+0x238>)
  400f8c:	f8c3 8000 	str.w	r8, [r3]
    imu_complementary.y_axis = angle_y;
  400f90:	f8c3 9004 	str.w	r9, [r3, #4]
    imu_complementary.z_axis = angle_z;
  400f94:	6098      	str	r0, [r3, #8]

    ap.imu.x_axis = angle_x;
  400f96:	4b11      	ldr	r3, [pc, #68]	; (400fdc <imu_tick+0x23c>)
  400f98:	f8c3 8000 	str.w	r8, [r3]
    ap.imu.y_axis = angle_y;
  400f9c:	f8c3 9004 	str.w	r9, [r3, #4]
    ap.imu.z_axis = angle_z;
  400fa0:	6098      	str	r0, [r3, #8]


  400fa2:	b00d      	add	sp, #52	; 0x34
  400fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400fa8:	54442d18 	.word	0x54442d18
  400fac:	400921fb 	.word	0x400921fb
  400fb0:	20000208 	.word	0x20000208
  400fb4:	200003a8 	.word	0x200003a8
  400fb8:	40668000 	.word	0x40668000
  400fbc:	20000358 	.word	0x20000358
  400fc0:	447a0000 	.word	0x447a0000
  400fc4:	20000224 	.word	0x20000224
  400fc8:	3f75c28f 	.word	0x3f75c28f
  400fcc:	3d23d710 	.word	0x3d23d710
  400fd0:	20000228 	.word	0x20000228
  400fd4:	2000022c 	.word	0x2000022c
  400fd8:	200003d8 	.word	0x200003d8
  400fdc:	200003b4 	.word	0x200003b4
  400fe0:	20000220 	.word	0x20000220

00400fe4 <servo_init>:
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}


void servo_init(void)
{
  400fe4:	b530      	push	{r4, r5, lr}
  400fe6:	b085      	sub	sp, #20
    
    printf("servo_init\r\n");
  400fe8:	4817      	ldr	r0, [pc, #92]	; (401048 <servo_init+0x64>)
  400fea:	f002 f841 	bl	403070 <iprintf>
    pio_configure_pin(EXT1_PIN_PWM_0, PIO_TYPE_PIO_PERIPH_B);
  400fee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ff2:	2017      	movs	r0, #23
  400ff4:	f000 fbb6 	bl	401764 <pio_configure_pin>

	/* Enable PWM peripheral clock */

	pmc_enable_periph_clk(ID_PWM);
  400ff8:	201f      	movs	r0, #31
  400ffa:	f000 fd65 	bl	401ac8 <pmc_enable_periph_clk>


	/* Disable PWM channels for LEDs */

	pwm_channel_disable(PWM, EXT1_PWM_CHANNEL);
  400ffe:	4c13      	ldr	r4, [pc, #76]	; (40104c <servo_init+0x68>)
  401000:	2100      	movs	r1, #0
  401002:	4620      	mov	r0, r4
  401004:	f000 fea8 	bl	401d58 <pwm_channel_disable>

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  401008:	4b11      	ldr	r3, [pc, #68]	; (401050 <servo_init+0x6c>)
  40100a:	9301      	str	r3, [sp, #4]
  40100c:	2500      	movs	r5, #0
  40100e:	9502      	str	r5, [sp, #8]
  401010:	4b10      	ldr	r3, [pc, #64]	; (401054 <servo_init+0x70>)
  401012:	9303      	str	r3, [sp, #12]
        .ul_clka = PWM_CLOCKSOURCE_FREQ,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	pwm_init(PWM, &clock_setting);
  401014:	a901      	add	r1, sp, #4
  401016:	4620      	mov	r0, r4
  401018:	f000 fdf2 	bl	401c00 <pwm_init>


	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_servo.alignment = PWM_ALIGN_LEFT;
  40101c:	490e      	ldr	r1, [pc, #56]	; (401058 <servo_init+0x74>)
  40101e:	810d      	strh	r5, [r1, #8]
	/* Output waveform starts at a low level */
	// g_pwm_channel_servo.polarity = PWM_LOW;
	g_pwm_channel_servo.polarity = PWM_HIGH;
  401020:	2301      	movs	r3, #1
  401022:	728b      	strb	r3, [r1, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_servo.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401024:	230b      	movs	r3, #11
  401026:	604b      	str	r3, [r1, #4]
	/* Period value of output waveform */
	g_pwm_channel_servo.ul_period = PWM_PERIOD_TICKS;
  401028:	f644 6320 	movw	r3, #20000	; 0x4e20
  40102c:	610b      	str	r3, [r1, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_servo.ul_duty = PULSE_WIDTH_CENTER_TICKS;
  40102e:	f240 53dc 	movw	r3, #1500	; 0x5dc
  401032:	60cb      	str	r3, [r1, #12]
	g_pwm_channel_servo.channel = EXT1_PWM_CHANNEL;
  401034:	600d      	str	r5, [r1, #0]

	pwm_channel_init(PWM, &g_pwm_channel_servo);
  401036:	4620      	mov	r0, r4
  401038:	f000 fe06 	bl	401c48 <pwm_channel_init>

    pwm_channel_enable(PWM, EXT1_PWM_CHANNEL);
  40103c:	4629      	mov	r1, r5
  40103e:	4620      	mov	r0, r4
  401040:	f000 fe84 	bl	401d4c <pwm_channel_enable>
	
}
  401044:	b005      	add	sp, #20
  401046:	bd30      	pop	{r4, r5, pc}
  401048:	0040628c 	.word	0x0040628c
  40104c:	40020000 	.word	0x40020000
  401050:	000f4240 	.word	0x000f4240
  401054:	07270e00 	.word	0x07270e00
  401058:	200003e4 	.word	0x200003e4

0040105c <servo_set_angle>:
		servo_set_angle(ap.imu.y_axis);
	}
}

void servo_set_angle(float angle)
{
  40105c:	b508      	push	{r3, lr}

	long duty = map(x, ANGLE_MIN, ANGLE_MAX, PWM_MIN, PWM_MAX);

	// printf("servo_duty: %d\r\n", duty);

	pwm_channel_update_duty(PWM, &g_pwm_channel_servo, duty);
  40105e:	f004 ffe1 	bl	406024 <__aeabi_f2iz>
  401062:	305a      	adds	r0, #90	; 0x5a
  401064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401068:	fb03 f000 	mul.w	r0, r3, r0
  40106c:	4a06      	ldr	r2, [pc, #24]	; (401088 <servo_set_angle+0x2c>)
  40106e:	fb82 3200 	smull	r3, r2, r2, r0
  401072:	4402      	add	r2, r0
  401074:	17c0      	asrs	r0, r0, #31
  401076:	ebc0 12e2 	rsb	r2, r0, r2, asr #7
  40107a:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
  40107e:	4903      	ldr	r1, [pc, #12]	; (40108c <servo_set_angle+0x30>)
  401080:	4803      	ldr	r0, [pc, #12]	; (401090 <servo_set_angle+0x34>)
  401082:	f000 fe55 	bl	401d30 <pwm_channel_update_duty>
  401086:	bd08      	pop	{r3, pc}
  401088:	b60b60b7 	.word	0xb60b60b7
  40108c:	200003e4 	.word	0x200003e4
  401090:	40020000 	.word	0x40020000

00401094 <servo_tick>:
    pwm_channel_enable(PWM, EXT1_PWM_CHANNEL);
	
}

void servo_tick(void)
{
  401094:	b508      	push	{r3, lr}
	/* Stay within update range of servo */
	if (cph_get_millis() >= f_servo_timeout) {
  401096:	4b08      	ldr	r3, [pc, #32]	; (4010b8 <servo_tick+0x24>)
  401098:	681a      	ldr	r2, [r3, #0]
  40109a:	4b08      	ldr	r3, [pc, #32]	; (4010bc <servo_tick+0x28>)
  40109c:	681b      	ldr	r3, [r3, #0]
  40109e:	429a      	cmp	r2, r3
  4010a0:	d308      	bcc.n	4010b4 <servo_tick+0x20>
		f_servo_timeout = cph_get_millis() + 50;
  4010a2:	4b05      	ldr	r3, [pc, #20]	; (4010b8 <servo_tick+0x24>)
  4010a4:	681b      	ldr	r3, [r3, #0]
  4010a6:	3332      	adds	r3, #50	; 0x32
  4010a8:	4a04      	ldr	r2, [pc, #16]	; (4010bc <servo_tick+0x28>)
  4010aa:	6013      	str	r3, [r2, #0]
		// servo_set_angle(imu_complementary.y_axis);
		servo_set_angle(ap.imu.y_axis);
  4010ac:	4b04      	ldr	r3, [pc, #16]	; (4010c0 <servo_tick+0x2c>)
  4010ae:	6858      	ldr	r0, [r3, #4]
  4010b0:	f7ff ffd4 	bl	40105c <servo_set_angle>
  4010b4:	bd08      	pop	{r3, pc}
  4010b6:	bf00      	nop
  4010b8:	20000208 	.word	0x20000208
  4010bc:	2000023c 	.word	0x2000023c
  4010c0:	200003b4 	.word	0x200003b4

004010c4 <pid_init>:
double output_max;
bool in_auto = false;


void pid_init(double *input, double *output, double *setpoint, double kp, double ki, double kd)
{
  4010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pid_input = input;
  4010c6:	4b16      	ldr	r3, [pc, #88]	; (401120 <pid_init+0x5c>)
  4010c8:	6018      	str	r0, [r3, #0]
    pid_output = output;
  4010ca:	4b16      	ldr	r3, [pc, #88]	; (401124 <pid_init+0x60>)
  4010cc:	6019      	str	r1, [r3, #0]
    pid_setpoint = setpoint;
  4010ce:	4b16      	ldr	r3, [pc, #88]	; (401128 <pid_init+0x64>)
  4010d0:	601a      	str	r2, [r3, #0]
    kp = kp;
    ki = ki;
    kd = kd;

    output_sum = *pid_output;
  4010d2:	e9d1 4500 	ldrd	r4, r5, [r1]
  4010d6:	4b15      	ldr	r3, [pc, #84]	; (40112c <pid_init+0x68>)
  4010d8:	e9c3 4500 	strd	r4, r5, [r3]
    last_input = *pid_input;
  4010dc:	e9d0 0100 	ldrd	r0, r1, [r0]
  4010e0:	4b13      	ldr	r3, [pc, #76]	; (401130 <pid_init+0x6c>)
  4010e2:	e9c3 0100 	strd	r0, r1, [r3]
    if (output_sum > output_max) output_sum = output_max;
  4010e6:	4b13      	ldr	r3, [pc, #76]	; (401134 <pid_init+0x70>)
  4010e8:	e9d3 6700 	ldrd	r6, r7, [r3]
  4010ec:	4632      	mov	r2, r6
  4010ee:	463b      	mov	r3, r7
  4010f0:	4620      	mov	r0, r4
  4010f2:	4629      	mov	r1, r5
  4010f4:	f004 fc2a 	bl	40594c <__aeabi_dcmpgt>
  4010f8:	b118      	cbz	r0, 401102 <pid_init+0x3e>
  4010fa:	4b0c      	ldr	r3, [pc, #48]	; (40112c <pid_init+0x68>)
  4010fc:	e9c3 6700 	strd	r6, r7, [r3]
  401100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (output_sum < output_max) output_sum = output_min;
  401102:	4632      	mov	r2, r6
  401104:	463b      	mov	r3, r7
  401106:	4620      	mov	r0, r4
  401108:	4629      	mov	r1, r5
  40110a:	f004 fc01 	bl	405910 <__aeabi_dcmplt>
  40110e:	b128      	cbz	r0, 40111c <pid_init+0x58>
  401110:	4b09      	ldr	r3, [pc, #36]	; (401138 <pid_init+0x74>)
  401112:	e9d3 0100 	ldrd	r0, r1, [r3]
  401116:	4b05      	ldr	r3, [pc, #20]	; (40112c <pid_init+0x68>)
  401118:	e9c3 0100 	strd	r0, r1, [r3]
  40111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40111e:	bf00      	nop
  401120:	20000318 	.word	0x20000318
  401124:	20000380 	.word	0x20000380
  401128:	2000033c 	.word	0x2000033c
  40112c:	20000250 	.word	0x20000250
  401130:	20000248 	.word	0x20000248
  401134:	20000368 	.word	0x20000368
  401138:	20000378 	.word	0x20000378

0040113c <pid_set_mode>:
{
    pid_compute();
}

void pid_set_mode(int mode)
{
  40113c:	b5d0      	push	{r4, r6, r7, lr}
  40113e:	b086      	sub	sp, #24
    bool new_auto = (mode == AUTOMATIC);
  401140:	2801      	cmp	r0, #1
  401142:	bf0c      	ite	eq
  401144:	2401      	moveq	r4, #1
  401146:	2400      	movne	r4, #0

    if (new_auto && !in_auto) {
  401148:	d119      	bne.n	40117e <pid_set_mode+0x42>
  40114a:	4b0f      	ldr	r3, [pc, #60]	; (401188 <pid_set_mode+0x4c>)
  40114c:	781b      	ldrb	r3, [r3, #0]
  40114e:	b9b3      	cbnz	r3, 40117e <pid_set_mode+0x42>
        pid_init(pid_input, pid_output, pid_setpoint, kp, ki, kd);
  401150:	4b0e      	ldr	r3, [pc, #56]	; (40118c <pid_set_mode+0x50>)
  401152:	681a      	ldr	r2, [r3, #0]
  401154:	4b0e      	ldr	r3, [pc, #56]	; (401190 <pid_set_mode+0x54>)
  401156:	6819      	ldr	r1, [r3, #0]
  401158:	4b0e      	ldr	r3, [pc, #56]	; (401194 <pid_set_mode+0x58>)
  40115a:	6818      	ldr	r0, [r3, #0]
  40115c:	4b0e      	ldr	r3, [pc, #56]	; (401198 <pid_set_mode+0x5c>)
  40115e:	e9d3 6700 	ldrd	r6, r7, [r3]
  401162:	e9cd 6704 	strd	r6, r7, [sp, #16]
  401166:	4b0d      	ldr	r3, [pc, #52]	; (40119c <pid_set_mode+0x60>)
  401168:	e9d3 6700 	ldrd	r6, r7, [r3]
  40116c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  401170:	4b0b      	ldr	r3, [pc, #44]	; (4011a0 <pid_set_mode+0x64>)
  401172:	e9d3 6700 	ldrd	r6, r7, [r3]
  401176:	e9cd 6700 	strd	r6, r7, [sp]
  40117a:	f7ff ffa3 	bl	4010c4 <pid_init>
    }
    in_auto = new_auto;
  40117e:	4b02      	ldr	r3, [pc, #8]	; (401188 <pid_set_mode+0x4c>)
  401180:	701c      	strb	r4, [r3, #0]
}
  401182:	b006      	add	sp, #24
  401184:	bdd0      	pop	{r4, r6, r7, pc}
  401186:	bf00      	nop
  401188:	20000244 	.word	0x20000244
  40118c:	2000033c 	.word	0x2000033c
  401190:	20000380 	.word	0x20000380
  401194:	20000318 	.word	0x20000318
  401198:	200002e8 	.word	0x200002e8
  40119c:	20000350 	.word	0x20000350
  4011a0:	200003a0 	.word	0x200003a0

004011a4 <pid_set_output_limits>:

void pid_set_output_limits(double min, double max)
{
  4011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4011a6:	4606      	mov	r6, r0
  4011a8:	460f      	mov	r7, r1
  4011aa:	4614      	mov	r4, r2
  4011ac:	461d      	mov	r5, r3
    if (min >= max) return;
  4011ae:	f004 fbc3 	bl	405938 <__aeabi_dcmpge>
  4011b2:	b928      	cbnz	r0, 4011c0 <pid_set_output_limits+0x1c>

    output_min = min;
  4011b4:	4b03      	ldr	r3, [pc, #12]	; (4011c4 <pid_set_output_limits+0x20>)
  4011b6:	e9c3 6700 	strd	r6, r7, [r3]
    output_max = max;
  4011ba:	4b03      	ldr	r3, [pc, #12]	; (4011c8 <pid_set_output_limits+0x24>)
  4011bc:	e9c3 4500 	strd	r4, r5, [r3]
  4011c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011c2:	bf00      	nop
  4011c4:	20000378 	.word	0x20000378
  4011c8:	20000368 	.word	0x20000368

004011cc <pid_compute>:

}

bool pid_compute(void)
{
  4011cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011d0:	b085      	sub	sp, #20
    if (!in_auto) return false;
  4011d2:	4b40      	ldr	r3, [pc, #256]	; (4012d4 <pid_compute+0x108>)
  4011d4:	781c      	ldrb	r4, [r3, #0]
  4011d6:	2c00      	cmp	r4, #0
  4011d8:	d078      	beq.n	4012cc <pid_compute+0x100>

    clock_time_t now = cph_get_millis();
  4011da:	4b3f      	ldr	r3, [pc, #252]	; (4012d8 <pid_compute+0x10c>)
  4011dc:	681d      	ldr	r5, [r3, #0]
    clock_time_t time_change = (now - last_time);
  4011de:	4b3f      	ldr	r3, [pc, #252]	; (4012dc <pid_compute+0x110>)

    if (time_change >= sample_time) {
  4011e0:	681b      	ldr	r3, [r3, #0]
  4011e2:	1aeb      	subs	r3, r5, r3
  4011e4:	4a3e      	ldr	r2, [pc, #248]	; (4012e0 <pid_compute+0x114>)
  4011e6:	6812      	ldr	r2, [r2, #0]
  4011e8:	4293      	cmp	r3, r2
  4011ea:	d36e      	bcc.n	4012ca <pid_compute+0xfe>
        double input = *pid_input;
  4011ec:	4b3d      	ldr	r3, [pc, #244]	; (4012e4 <pid_compute+0x118>)
  4011ee:	681b      	ldr	r3, [r3, #0]
  4011f0:	e9d3 ab00 	ldrd	sl, fp, [r3]
        double error = *pid_setpoint - input;
        double d_input = (input - last_input);
  4011f4:	4b3c      	ldr	r3, [pc, #240]	; (4012e8 <pid_compute+0x11c>)
  4011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4011fa:	4650      	mov	r0, sl
  4011fc:	4659      	mov	r1, fp
  4011fe:	f003 ff61 	bl	4050c4 <__aeabi_dsub>
  401202:	e9cd 0100 	strd	r0, r1, [sp]
    clock_time_t now = cph_get_millis();
    clock_time_t time_change = (now - last_time);

    if (time_change >= sample_time) {
        double input = *pid_input;
        double error = *pid_setpoint - input;
  401206:	4b39      	ldr	r3, [pc, #228]	; (4012ec <pid_compute+0x120>)
  401208:	6819      	ldr	r1, [r3, #0]
        double d_input = (input - last_input);
        output_sum += (ki * error);
  40120a:	4652      	mov	r2, sl
  40120c:	465b      	mov	r3, fp
  40120e:	e9d1 0100 	ldrd	r0, r1, [r1]
  401212:	f003 ff57 	bl	4050c4 <__aeabi_dsub>
  401216:	4b36      	ldr	r3, [pc, #216]	; (4012f0 <pid_compute+0x124>)
  401218:	e9d3 2300 	ldrd	r2, r3, [r3]
  40121c:	f004 f906 	bl	40542c <__aeabi_dmul>
  401220:	4e34      	ldr	r6, [pc, #208]	; (4012f4 <pid_compute+0x128>)
  401222:	e9d6 2300 	ldrd	r2, r3, [r6]
  401226:	f003 ff4f 	bl	4050c8 <__adddf3>
  40122a:	4680      	mov	r8, r0
  40122c:	4689      	mov	r9, r1
  40122e:	e9c6 8900 	strd	r8, r9, [r6]

        /*Add Proportional on Measurement, if P_ON_M is specified*/
        //if(!pOnE) outputSum-= kp * dInput;


        if (output_sum > output_max) output_sum = output_max;
  401232:	4b31      	ldr	r3, [pc, #196]	; (4012f8 <pid_compute+0x12c>)
  401234:	e9d3 6700 	ldrd	r6, r7, [r3]
  401238:	4632      	mov	r2, r6
  40123a:	463b      	mov	r3, r7
  40123c:	f004 fb86 	bl	40594c <__aeabi_dcmpgt>
  401240:	b118      	cbz	r0, 40124a <pid_compute+0x7e>
  401242:	4b2c      	ldr	r3, [pc, #176]	; (4012f4 <pid_compute+0x128>)
  401244:	e9c3 6700 	strd	r6, r7, [r3]
  401248:	e00e      	b.n	401268 <pid_compute+0x9c>
        else if (output_sum < output_min) output_sum = output_min;
  40124a:	4b2c      	ldr	r3, [pc, #176]	; (4012fc <pid_compute+0x130>)
  40124c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401250:	e9cd 2302 	strd	r2, r3, [sp, #8]
  401254:	4640      	mov	r0, r8
  401256:	4649      	mov	r1, r9
  401258:	f004 fb5a 	bl	405910 <__aeabi_dcmplt>
  40125c:	b120      	cbz	r0, 401268 <pid_compute+0x9c>
  40125e:	4b25      	ldr	r3, [pc, #148]	; (4012f4 <pid_compute+0x128>)
  401260:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
  401264:	e9c3 1200 	strd	r1, r2, [r3]

        double output = 0;
        /*Add Proportional on Error, if P_ON_E is specified*/
        // if(pOnE) output = kp * error;

        output += output_sum - kd * d_input;
  401268:	4b25      	ldr	r3, [pc, #148]	; (401300 <pid_compute+0x134>)
  40126a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40126e:	e9dd 0100 	ldrd	r0, r1, [sp]
  401272:	f004 f8db 	bl	40542c <__aeabi_dmul>
  401276:	4602      	mov	r2, r0
  401278:	460b      	mov	r3, r1
  40127a:	491e      	ldr	r1, [pc, #120]	; (4012f4 <pid_compute+0x128>)
  40127c:	e9d1 0100 	ldrd	r0, r1, [r1]
  401280:	f003 ff20 	bl	4050c4 <__aeabi_dsub>
  401284:	2200      	movs	r2, #0
  401286:	2300      	movs	r3, #0
  401288:	f003 ff1e 	bl	4050c8 <__adddf3>
  40128c:	4680      	mov	r8, r0
  40128e:	4689      	mov	r9, r1

        if (output > output_max) output = output_max;
  401290:	4602      	mov	r2, r0
  401292:	460b      	mov	r3, r1
  401294:	4630      	mov	r0, r6
  401296:	4639      	mov	r1, r7
  401298:	f004 fb3a 	bl	405910 <__aeabi_dcmplt>
  40129c:	b958      	cbnz	r0, 4012b6 <pid_compute+0xea>
        else if (output < output_min) output = output_min;
  40129e:	4b17      	ldr	r3, [pc, #92]	; (4012fc <pid_compute+0x130>)
  4012a0:	e9d3 6700 	ldrd	r6, r7, [r3]
  4012a4:	4632      	mov	r2, r6
  4012a6:	463b      	mov	r3, r7
  4012a8:	4640      	mov	r0, r8
  4012aa:	4649      	mov	r1, r9
  4012ac:	f004 fb30 	bl	405910 <__aeabi_dcmplt>
  4012b0:	b908      	cbnz	r0, 4012b6 <pid_compute+0xea>

        double output = 0;
        /*Add Proportional on Error, if P_ON_E is specified*/
        // if(pOnE) output = kp * error;

        output += output_sum - kd * d_input;
  4012b2:	4646      	mov	r6, r8
  4012b4:	464f      	mov	r7, r9

        if (output > output_max) output = output_max;
        else if (output < output_min) output = output_min;

        *pid_output = output;
  4012b6:	4b13      	ldr	r3, [pc, #76]	; (401304 <pid_compute+0x138>)
  4012b8:	681b      	ldr	r3, [r3, #0]
  4012ba:	e9c3 6700 	strd	r6, r7, [r3]

        last_input = input;
  4012be:	4b0a      	ldr	r3, [pc, #40]	; (4012e8 <pid_compute+0x11c>)
  4012c0:	e9c3 ab00 	strd	sl, fp, [r3]
        last_time = now;
  4012c4:	4b05      	ldr	r3, [pc, #20]	; (4012dc <pid_compute+0x110>)
  4012c6:	601d      	str	r5, [r3, #0]
        return true;
  4012c8:	e000      	b.n	4012cc <pid_compute+0x100>
    }
    else return false;
  4012ca:	2400      	movs	r4, #0
  4012cc:	4620      	mov	r0, r4
  4012ce:	b005      	add	sp, #20
  4012d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4012d4:	20000244 	.word	0x20000244
  4012d8:	20000208 	.word	0x20000208
  4012dc:	20000240 	.word	0x20000240
  4012e0:	20000258 	.word	0x20000258
  4012e4:	20000318 	.word	0x20000318
  4012e8:	20000248 	.word	0x20000248
  4012ec:	2000033c 	.word	0x2000033c
  4012f0:	20000350 	.word	0x20000350
  4012f4:	20000250 	.word	0x20000250
  4012f8:	20000368 	.word	0x20000368
  4012fc:	20000378 	.word	0x20000378
  401300:	200002e8 	.word	0x200002e8
  401304:	20000380 	.word	0x20000380

00401308 <pid_tick>:


}

void pid_tick(void)
{
  401308:	b508      	push	{r3, lr}
    pid_compute();
  40130a:	f7ff ff5f 	bl	4011cc <pid_compute>
  40130e:	bd08      	pop	{r3, pc}

00401310 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401310:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  401312:	482c      	ldr	r0, [pc, #176]	; (4013c4 <board_init+0xb4>)
  401314:	f000 fc02 	bl	401b1c <wdt_disable>
  401318:	200b      	movs	r0, #11
  40131a:	f000 fbd5 	bl	401ac8 <pmc_enable_periph_clk>
  40131e:	200c      	movs	r0, #12
  401320:	f000 fbd2 	bl	401ac8 <pmc_enable_periph_clk>
  401324:	200d      	movs	r0, #13
  401326:	f000 fbcf 	bl	401ac8 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40132a:	4b27      	ldr	r3, [pc, #156]	; (4013c8 <board_init+0xb8>)
  40132c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401330:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401332:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401334:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401338:	4c24      	ldr	r4, [pc, #144]	; (4013cc <board_init+0xbc>)
  40133a:	2504      	movs	r5, #4
  40133c:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40133e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  401342:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401344:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401348:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40134a:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40134c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401350:	6f22      	ldr	r2, [r4, #112]	; 0x70
  401352:	f022 0204 	bic.w	r2, r2, #4
  401356:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401358:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40135a:	f022 0204 	bic.w	r2, r2, #4
  40135e:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401360:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  401364:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401366:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401368:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40136c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401370:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401372:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401374:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401378:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40137c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40137e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401380:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  401384:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401388:	210c      	movs	r1, #12
  40138a:	4811      	ldr	r0, [pc, #68]	; (4013d0 <board_init+0xc0>)
  40138c:	f000 fa76 	bl	40187c <pio_configure_pin_group>
#endif


#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401390:	4e10      	ldr	r6, [pc, #64]	; (4013d4 <board_init+0xc4>)
  401392:	4631      	mov	r1, r6
  401394:	2003      	movs	r0, #3
  401396:	f000 f9e5 	bl	401764 <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40139a:	4631      	mov	r1, r6
  40139c:	4628      	mov	r0, r5
  40139e:	f000 f9e1 	bl	401764 <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4013a2:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4013a4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4013a8:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4013aa:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4013ac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4013b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4013b2:	f023 0304 	bic.w	r3, r3, #4
  4013b6:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4013b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4013ba:	f023 0304 	bic.w	r3, r3, #4
  4013be:	6763      	str	r3, [r4, #116]	; 0x74
  4013c0:	bd70      	pop	{r4, r5, r6, pc}
  4013c2:	bf00      	nop
  4013c4:	400e1450 	.word	0x400e1450
  4013c8:	400e1200 	.word	0x400e1200
  4013cc:	400e0e00 	.word	0x400e0e00
  4013d0:	400e1000 	.word	0x400e1000
  4013d4:	08000001 	.word	0x08000001

004013d8 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4013d8:	4b2b      	ldr	r3, [pc, #172]	; (401488 <twi_set_speed+0xb0>)
  4013da:	4299      	cmp	r1, r3
  4013dc:	d849      	bhi.n	401472 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4013de:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4013e2:	4299      	cmp	r1, r3
  4013e4:	d92b      	bls.n	40143e <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4013e6:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4013e8:	4c28      	ldr	r4, [pc, #160]	; (40148c <twi_set_speed+0xb4>)
  4013ea:	fba4 3402 	umull	r3, r4, r4, r2
  4013ee:	0ba4      	lsrs	r4, r4, #14
  4013f0:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4013f2:	4b27      	ldr	r3, [pc, #156]	; (401490 <twi_set_speed+0xb8>)
  4013f4:	440b      	add	r3, r1
  4013f6:	009b      	lsls	r3, r3, #2
  4013f8:	fbb2 f2f3 	udiv	r2, r2, r3
  4013fc:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4013fe:	2cff      	cmp	r4, #255	; 0xff
  401400:	d939      	bls.n	401476 <twi_set_speed+0x9e>
  401402:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401404:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  401406:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401408:	2cff      	cmp	r4, #255	; 0xff
  40140a:	d902      	bls.n	401412 <twi_set_speed+0x3a>
  40140c:	2b07      	cmp	r3, #7
  40140e:	d1f9      	bne.n	401404 <twi_set_speed+0x2c>
  401410:	e00a      	b.n	401428 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401412:	2aff      	cmp	r2, #255	; 0xff
  401414:	d908      	bls.n	401428 <twi_set_speed+0x50>
  401416:	2b06      	cmp	r3, #6
  401418:	d900      	bls.n	40141c <twi_set_speed+0x44>
  40141a:	e005      	b.n	401428 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  40141c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40141e:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401420:	2aff      	cmp	r2, #255	; 0xff
  401422:	d901      	bls.n	401428 <twi_set_speed+0x50>
  401424:	2b06      	cmp	r3, #6
  401426:	d9f9      	bls.n	40141c <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401428:	0212      	lsls	r2, r2, #8
  40142a:	b292      	uxth	r2, r2
  40142c:	041b      	lsls	r3, r3, #16
  40142e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401432:	431a      	orrs	r2, r3
  401434:	b2e4      	uxtb	r4, r4
  401436:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401438:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40143a:	2000      	movs	r0, #0
  40143c:	e021      	b.n	401482 <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40143e:	0049      	lsls	r1, r1, #1
  401440:	fbb2 f2f1 	udiv	r2, r2, r1
  401444:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401446:	2aff      	cmp	r2, #255	; 0xff
  401448:	d907      	bls.n	40145a <twi_set_speed+0x82>
  40144a:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  40144c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40144e:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401450:	2aff      	cmp	r2, #255	; 0xff
  401452:	d903      	bls.n	40145c <twi_set_speed+0x84>
  401454:	2b07      	cmp	r3, #7
  401456:	d1f9      	bne.n	40144c <twi_set_speed+0x74>
  401458:	e000      	b.n	40145c <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40145a:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40145c:	0211      	lsls	r1, r2, #8
  40145e:	b289      	uxth	r1, r1
  401460:	041b      	lsls	r3, r3, #16
  401462:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401466:	430b      	orrs	r3, r1
  401468:	b2d2      	uxtb	r2, r2
  40146a:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  40146c:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40146e:	2000      	movs	r0, #0
}
  401470:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401472:	2001      	movs	r0, #1
  401474:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401476:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401478:	bf88      	it	hi
  40147a:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40147c:	d8ce      	bhi.n	40141c <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40147e:	2300      	movs	r3, #0
  401480:	e7d2      	b.n	401428 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  401482:	bc10      	pop	{r4}
  401484:	4770      	bx	lr
  401486:	bf00      	nop
  401488:	00061a80 	.word	0x00061a80
  40148c:	057619f1 	.word	0x057619f1
  401490:	3ffd1200 	.word	0x3ffd1200

00401494 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401494:	b538      	push	{r3, r4, r5, lr}
  401496:	4604      	mov	r4, r0
  401498:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40149a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  40149e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4014a0:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4014a2:	2380      	movs	r3, #128	; 0x80
  4014a4:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4014a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4014a8:	2308      	movs	r3, #8
  4014aa:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4014ac:	2320      	movs	r3, #32
  4014ae:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4014b0:	2304      	movs	r3, #4
  4014b2:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4014b4:	680a      	ldr	r2, [r1, #0]
  4014b6:	6849      	ldr	r1, [r1, #4]
  4014b8:	f7ff ff8e 	bl	4013d8 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  4014bc:	2801      	cmp	r0, #1
  4014be:	bf14      	ite	ne
  4014c0:	2000      	movne	r0, #0
  4014c2:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  4014c4:	7a6b      	ldrb	r3, [r5, #9]
  4014c6:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4014c8:	bf04      	itt	eq
  4014ca:	2340      	moveq	r3, #64	; 0x40
  4014cc:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  4014ce:	bd38      	pop	{r3, r4, r5, pc}

004014d0 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4014d0:	460a      	mov	r2, r1
  4014d2:	b159      	cbz	r1, 4014ec <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  4014d4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  4014d6:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  4014d8:	bfc4      	itt	gt
  4014da:	7841      	ldrbgt	r1, [r0, #1]
  4014dc:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  4014e0:	2a02      	cmp	r2, #2
  4014e2:	dd05      	ble.n	4014f0 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  4014e4:	7880      	ldrb	r0, [r0, #2]
  4014e6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4014ea:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  4014ec:	2000      	movs	r0, #0
  4014ee:	4770      	bx	lr
  4014f0:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  4014f2:	4770      	bx	lr

004014f4 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4014f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4014f8:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4014fa:	2c00      	cmp	r4, #0
  4014fc:	d045      	beq.n	40158a <twi_master_read+0x96>
  4014fe:	460b      	mov	r3, r1
  401500:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401502:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401504:	2000      	movs	r0, #0
  401506:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401508:	684a      	ldr	r2, [r1, #4]
  40150a:	0212      	lsls	r2, r2, #8
  40150c:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401510:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  401514:	7c1a      	ldrb	r2, [r3, #16]
  401516:	0412      	lsls	r2, r2, #16
  401518:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  40151c:	430a      	orrs	r2, r1
  40151e:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401520:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401522:	6859      	ldr	r1, [r3, #4]
  401524:	4618      	mov	r0, r3
  401526:	f7ff ffd3 	bl	4014d0 <twi_mk_addr>
  40152a:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40152c:	2c01      	cmp	r4, #1
  40152e:	d104      	bne.n	40153a <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401530:	2303      	movs	r3, #3
  401532:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  401534:	f04f 0e01 	mov.w	lr, #1
  401538:	e033      	b.n	4015a2 <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40153a:	2301      	movs	r3, #1
  40153c:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  40153e:	f04f 0e00 	mov.w	lr, #0
  401542:	e02e      	b.n	4015a2 <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  401544:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401546:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401548:	f413 7f80 	tst.w	r3, #256	; 0x100
  40154c:	d120      	bne.n	401590 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  40154e:	1e51      	subs	r1, r2, #1
  401550:	b30a      	cbz	r2, 401596 <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401552:	2c01      	cmp	r4, #1
  401554:	d106      	bne.n	401564 <twi_master_read+0x70>
  401556:	f1be 0f00 	cmp.w	lr, #0
  40155a:	d12f      	bne.n	4015bc <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  40155c:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401560:	46e6      	mov	lr, ip
  401562:	e02b      	b.n	4015bc <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  401564:	f013 0f02 	tst.w	r3, #2
  401568:	d005      	beq.n	401576 <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  40156a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40156c:	7033      	strb	r3, [r6, #0]

		cnt--;
  40156e:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  401570:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  401572:	463a      	mov	r2, r7
  401574:	e000      	b.n	401578 <twi_master_read+0x84>
  401576:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401578:	2c00      	cmp	r4, #0
  40157a:	d1e4      	bne.n	401546 <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40157c:	6a2b      	ldr	r3, [r5, #32]
  40157e:	f013 0f01 	tst.w	r3, #1
  401582:	d0fb      	beq.n	40157c <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  401584:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  401586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40158a:	2001      	movs	r0, #1
  40158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401590:	2005      	movs	r0, #5
  401592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  401596:	2009      	movs	r0, #9
  401598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40159c:	2005      	movs	r0, #5
  40159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4015a2:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4015a4:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4015a8:	d1f8      	bne.n	40159c <twi_master_read+0xa8>
  4015aa:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4015ae:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4015b2:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4015b6:	f04f 0c01 	mov.w	ip, #1
  4015ba:	e7ca      	b.n	401552 <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4015bc:	f013 0f02 	tst.w	r3, #2
  4015c0:	d0c0      	beq.n	401544 <twi_master_read+0x50>
  4015c2:	e7d2      	b.n	40156a <twi_master_read+0x76>

004015c4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4015c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4015c6:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4015c8:	2d00      	cmp	r5, #0
  4015ca:	d034      	beq.n	401636 <twi_master_write+0x72>
  4015cc:	460b      	mov	r3, r1
  4015ce:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4015d0:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4015d2:	2000      	movs	r0, #0
  4015d4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4015d6:	7c0a      	ldrb	r2, [r1, #16]
  4015d8:	0412      	lsls	r2, r2, #16
  4015da:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  4015de:	685a      	ldr	r2, [r3, #4]
  4015e0:	0212      	lsls	r2, r2, #8
  4015e2:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4015e6:	430a      	orrs	r2, r1
  4015e8:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4015ea:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4015ec:	6859      	ldr	r1, [r3, #4]
  4015ee:	4618      	mov	r0, r3
  4015f0:	f7ff ff6e 	bl	4014d0 <twi_mk_addr>
  4015f4:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4015f6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4015f8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4015fc:	d004      	beq.n	401608 <twi_master_write+0x44>
  4015fe:	e01c      	b.n	40163a <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401600:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401602:	f413 7f80 	tst.w	r3, #256	; 0x100
  401606:	d11a      	bne.n	40163e <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401608:	f013 0f04 	tst.w	r3, #4
  40160c:	d003      	beq.n	401616 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40160e:	7833      	ldrb	r3, [r6, #0]
  401610:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  401612:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401614:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401616:	2d00      	cmp	r5, #0
  401618:	d1f2      	bne.n	401600 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  40161a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40161c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401620:	d10f      	bne.n	401642 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  401622:	f013 0f04 	tst.w	r3, #4
  401626:	d0f8      	beq.n	40161a <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401628:	2302      	movs	r3, #2
  40162a:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40162c:	6a23      	ldr	r3, [r4, #32]
  40162e:	f013 0f01 	tst.w	r3, #1
  401632:	d0fb      	beq.n	40162c <twi_master_write+0x68>
  401634:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  401636:	2001      	movs	r0, #1
  401638:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40163a:	2005      	movs	r0, #5
  40163c:	bd70      	pop	{r4, r5, r6, pc}
  40163e:	2005      	movs	r0, #5
  401640:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401642:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  401644:	bd70      	pop	{r4, r5, r6, pc}
  401646:	bf00      	nop

00401648 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  401648:	b500      	push	{lr}
  40164a:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  40164c:	2300      	movs	r3, #0
  40164e:	aa06      	add	r2, sp, #24
  401650:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  401654:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  401656:	2201      	movs	r2, #1
  401658:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  40165a:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  40165e:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  401662:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  401664:	a901      	add	r1, sp, #4
  401666:	f7ff ffad 	bl	4015c4 <twi_master_write>
}
  40166a:	b007      	add	sp, #28
  40166c:	f85d fb04 	ldr.w	pc, [sp], #4

00401670 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401670:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401672:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401676:	d02f      	beq.n	4016d8 <pio_set_peripheral+0x68>
  401678:	d807      	bhi.n	40168a <pio_set_peripheral+0x1a>
  40167a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40167e:	d014      	beq.n	4016aa <pio_set_peripheral+0x3a>
  401680:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401684:	d01e      	beq.n	4016c4 <pio_set_peripheral+0x54>
  401686:	b939      	cbnz	r1, 401698 <pio_set_peripheral+0x28>
  401688:	4770      	bx	lr
  40168a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40168e:	d036      	beq.n	4016fe <pio_set_peripheral+0x8e>
  401690:	d804      	bhi.n	40169c <pio_set_peripheral+0x2c>
  401692:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401696:	d029      	beq.n	4016ec <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401698:	6042      	str	r2, [r0, #4]
  40169a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40169c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4016a0:	d02d      	beq.n	4016fe <pio_set_peripheral+0x8e>
  4016a2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4016a6:	d02a      	beq.n	4016fe <pio_set_peripheral+0x8e>
  4016a8:	e7f6      	b.n	401698 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4016aa:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016ac:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016ae:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4016b0:	43d3      	mvns	r3, r2
  4016b2:	4021      	ands	r1, r4
  4016b4:	4019      	ands	r1, r3
  4016b6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016b8:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4016ba:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4016bc:	4021      	ands	r1, r4
  4016be:	400b      	ands	r3, r1
  4016c0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016c2:	e01a      	b.n	4016fa <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4016c6:	4313      	orrs	r3, r2
  4016c8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016ca:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4016cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4016ce:	400b      	ands	r3, r1
  4016d0:	ea23 0302 	bic.w	r3, r3, r2
  4016d4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016d6:	e7df      	b.n	401698 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016d8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016da:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4016dc:	400b      	ands	r3, r1
  4016de:	ea23 0302 	bic.w	r3, r3, r2
  4016e2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4016e6:	4313      	orrs	r3, r2
  4016e8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016ea:	e7d5      	b.n	401698 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4016ee:	4313      	orrs	r3, r2
  4016f0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4016f4:	4313      	orrs	r3, r2
  4016f6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016f8:	e7ce      	b.n	401698 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4016fa:	6042      	str	r2, [r0, #4]
}
  4016fc:	bc10      	pop	{r4}
  4016fe:	4770      	bx	lr

00401700 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401700:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401702:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  401706:	bf14      	ite	ne
  401708:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40170a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40170c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401710:	bf14      	ite	ne
  401712:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401714:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401716:	f012 0f02 	tst.w	r2, #2
  40171a:	d002      	beq.n	401722 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  40171c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401720:	e004      	b.n	40172c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401722:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401726:	bf18      	it	ne
  401728:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40172c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40172e:	6001      	str	r1, [r0, #0]
  401730:	4770      	bx	lr
  401732:	bf00      	nop

00401734 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401734:	b410      	push	{r4}
  401736:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401738:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40173a:	b10c      	cbz	r4, 401740 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  40173c:	6641      	str	r1, [r0, #100]	; 0x64
  40173e:	e000      	b.n	401742 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401740:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401742:	b10b      	cbz	r3, 401748 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401744:	6501      	str	r1, [r0, #80]	; 0x50
  401746:	e000      	b.n	40174a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401748:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40174a:	b10a      	cbz	r2, 401750 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  40174c:	6301      	str	r1, [r0, #48]	; 0x30
  40174e:	e000      	b.n	401752 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401750:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401752:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401754:	6001      	str	r1, [r0, #0]
}
  401756:	bc10      	pop	{r4}
  401758:	4770      	bx	lr
  40175a:	bf00      	nop

0040175c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40175c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40175e:	4770      	bx	lr

00401760 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401760:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401762:	4770      	bx	lr

00401764 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401764:	b570      	push	{r4, r5, r6, lr}
  401766:	b082      	sub	sp, #8
  401768:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40176a:	0943      	lsrs	r3, r0, #5
  40176c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401770:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401774:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401776:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40177a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40177e:	d047      	beq.n	401810 <pio_configure_pin+0xac>
  401780:	d809      	bhi.n	401796 <pio_configure_pin+0x32>
  401782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401786:	d021      	beq.n	4017cc <pio_configure_pin+0x68>
  401788:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40178c:	d02f      	beq.n	4017ee <pio_configure_pin+0x8a>
  40178e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401792:	d16f      	bne.n	401874 <pio_configure_pin+0x110>
  401794:	e009      	b.n	4017aa <pio_configure_pin+0x46>
  401796:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40179a:	d055      	beq.n	401848 <pio_configure_pin+0xe4>
  40179c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4017a0:	d052      	beq.n	401848 <pio_configure_pin+0xe4>
  4017a2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4017a6:	d044      	beq.n	401832 <pio_configure_pin+0xce>
  4017a8:	e064      	b.n	401874 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4017aa:	f000 001f 	and.w	r0, r0, #31
  4017ae:	2601      	movs	r6, #1
  4017b0:	4086      	lsls	r6, r0
  4017b2:	4632      	mov	r2, r6
  4017b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4017b8:	4620      	mov	r0, r4
  4017ba:	f7ff ff59 	bl	401670 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4017be:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4017c2:	bf14      	ite	ne
  4017c4:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4017c6:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4017c8:	2001      	movs	r0, #1
  4017ca:	e054      	b.n	401876 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4017cc:	f000 001f 	and.w	r0, r0, #31
  4017d0:	2601      	movs	r6, #1
  4017d2:	4086      	lsls	r6, r0
  4017d4:	4632      	mov	r2, r6
  4017d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4017da:	4620      	mov	r0, r4
  4017dc:	f7ff ff48 	bl	401670 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4017e0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4017e4:	bf14      	ite	ne
  4017e6:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4017e8:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4017ea:	2001      	movs	r0, #1
  4017ec:	e043      	b.n	401876 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4017ee:	f000 001f 	and.w	r0, r0, #31
  4017f2:	2601      	movs	r6, #1
  4017f4:	4086      	lsls	r6, r0
  4017f6:	4632      	mov	r2, r6
  4017f8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4017fc:	4620      	mov	r0, r4
  4017fe:	f7ff ff37 	bl	401670 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401802:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401806:	bf14      	ite	ne
  401808:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40180a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40180c:	2001      	movs	r0, #1
  40180e:	e032      	b.n	401876 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401810:	f000 001f 	and.w	r0, r0, #31
  401814:	2601      	movs	r6, #1
  401816:	4086      	lsls	r6, r0
  401818:	4632      	mov	r2, r6
  40181a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40181e:	4620      	mov	r0, r4
  401820:	f7ff ff26 	bl	401670 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401824:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401828:	bf14      	ite	ne
  40182a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40182c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40182e:	2001      	movs	r0, #1
  401830:	e021      	b.n	401876 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401832:	f000 011f 	and.w	r1, r0, #31
  401836:	2601      	movs	r6, #1
  401838:	462a      	mov	r2, r5
  40183a:	fa06 f101 	lsl.w	r1, r6, r1
  40183e:	4620      	mov	r0, r4
  401840:	f7ff ff5e 	bl	401700 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401844:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  401846:	e016      	b.n	401876 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401848:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  40184c:	f000 011f 	and.w	r1, r0, #31
  401850:	2601      	movs	r6, #1
  401852:	ea05 0306 	and.w	r3, r5, r6
  401856:	9300      	str	r3, [sp, #0]
  401858:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40185c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401860:	bf14      	ite	ne
  401862:	2200      	movne	r2, #0
  401864:	2201      	moveq	r2, #1
  401866:	fa06 f101 	lsl.w	r1, r6, r1
  40186a:	4620      	mov	r0, r4
  40186c:	f7ff ff62 	bl	401734 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401870:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401872:	e000      	b.n	401876 <pio_configure_pin+0x112>

	default:
		return 0;
  401874:	2000      	movs	r0, #0
	}

	return 1;
}
  401876:	b002      	add	sp, #8
  401878:	bd70      	pop	{r4, r5, r6, pc}
  40187a:	bf00      	nop

0040187c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40187c:	b570      	push	{r4, r5, r6, lr}
  40187e:	b082      	sub	sp, #8
  401880:	4605      	mov	r5, r0
  401882:	460e      	mov	r6, r1
  401884:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401886:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40188a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40188e:	d038      	beq.n	401902 <pio_configure_pin_group+0x86>
  401890:	d809      	bhi.n	4018a6 <pio_configure_pin_group+0x2a>
  401892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401896:	d01c      	beq.n	4018d2 <pio_configure_pin_group+0x56>
  401898:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40189c:	d025      	beq.n	4018ea <pio_configure_pin_group+0x6e>
  40189e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4018a2:	d150      	bne.n	401946 <pio_configure_pin_group+0xca>
  4018a4:	e009      	b.n	4018ba <pio_configure_pin_group+0x3e>
  4018a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4018aa:	d03a      	beq.n	401922 <pio_configure_pin_group+0xa6>
  4018ac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4018b0:	d037      	beq.n	401922 <pio_configure_pin_group+0xa6>
  4018b2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4018b6:	d030      	beq.n	40191a <pio_configure_pin_group+0x9e>
  4018b8:	e045      	b.n	401946 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4018ba:	460a      	mov	r2, r1
  4018bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4018c0:	f7ff fed6 	bl	401670 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4018c4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4018c8:	bf14      	ite	ne
  4018ca:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4018cc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4018ce:	2001      	movs	r0, #1
  4018d0:	e03a      	b.n	401948 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4018d2:	460a      	mov	r2, r1
  4018d4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4018d8:	f7ff feca 	bl	401670 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4018dc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4018e0:	bf14      	ite	ne
  4018e2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4018e4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4018e6:	2001      	movs	r0, #1
  4018e8:	e02e      	b.n	401948 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4018ea:	460a      	mov	r2, r1
  4018ec:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4018f0:	f7ff febe 	bl	401670 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4018f4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4018f8:	bf14      	ite	ne
  4018fa:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4018fc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4018fe:	2001      	movs	r0, #1
  401900:	e022      	b.n	401948 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  401902:	460a      	mov	r2, r1
  401904:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401908:	f7ff feb2 	bl	401670 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40190c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401910:	bf14      	ite	ne
  401912:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401914:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401916:	2001      	movs	r0, #1
  401918:	e016      	b.n	401948 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40191a:	f7ff fef1 	bl	401700 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  40191e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401920:	e012      	b.n	401948 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  401922:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  401926:	f004 0301 	and.w	r3, r4, #1
  40192a:	9300      	str	r3, [sp, #0]
  40192c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401930:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401934:	bf14      	ite	ne
  401936:	2200      	movne	r2, #0
  401938:	2201      	moveq	r2, #1
  40193a:	4631      	mov	r1, r6
  40193c:	4628      	mov	r0, r5
  40193e:	f7ff fef9 	bl	401734 <pio_set_output>

	default:
		return 0;
	}

	return 1;
  401942:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  401944:	e000      	b.n	401948 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  401946:	2000      	movs	r0, #0
	}

	return 1;
}
  401948:	b002      	add	sp, #8
  40194a:	bd70      	pop	{r4, r5, r6, pc}

0040194c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40194c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401950:	4681      	mov	r9, r0
  401952:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401954:	f7ff ff02 	bl	40175c <pio_get_interrupt_status>
  401958:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40195a:	4648      	mov	r0, r9
  40195c:	f7ff ff00 	bl	401760 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401960:	4005      	ands	r5, r0
  401962:	d013      	beq.n	40198c <pio_handler_process+0x40>
  401964:	4c0e      	ldr	r4, [pc, #56]	; (4019a0 <pio_handler_process+0x54>)
  401966:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40196a:	6823      	ldr	r3, [r4, #0]
  40196c:	4543      	cmp	r3, r8
  40196e:	d108      	bne.n	401982 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401970:	6861      	ldr	r1, [r4, #4]
  401972:	4229      	tst	r1, r5
  401974:	d005      	beq.n	401982 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401976:	68e3      	ldr	r3, [r4, #12]
  401978:	4640      	mov	r0, r8
  40197a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40197c:	6863      	ldr	r3, [r4, #4]
  40197e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401982:	42b4      	cmp	r4, r6
  401984:	d002      	beq.n	40198c <pio_handler_process+0x40>
  401986:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401988:	2d00      	cmp	r5, #0
  40198a:	d1ee      	bne.n	40196a <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40198c:	4b05      	ldr	r3, [pc, #20]	; (4019a4 <pio_handler_process+0x58>)
  40198e:	681b      	ldr	r3, [r3, #0]
  401990:	b123      	cbz	r3, 40199c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401992:	4b05      	ldr	r3, [pc, #20]	; (4019a8 <pio_handler_process+0x5c>)
  401994:	681b      	ldr	r3, [r3, #0]
  401996:	b10b      	cbz	r3, 40199c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401998:	4648      	mov	r0, r9
  40199a:	4798      	blx	r3
  40199c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4019a0:	20000260 	.word	0x20000260
  4019a4:	2000040c 	.word	0x2000040c
  4019a8:	2000025c 	.word	0x2000025c

004019ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4019ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4019ae:	210b      	movs	r1, #11
  4019b0:	4801      	ldr	r0, [pc, #4]	; (4019b8 <PIOA_Handler+0xc>)
  4019b2:	f7ff ffcb 	bl	40194c <pio_handler_process>
  4019b6:	bd08      	pop	{r3, pc}
  4019b8:	400e0e00 	.word	0x400e0e00

004019bc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4019bc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4019be:	210c      	movs	r1, #12
  4019c0:	4801      	ldr	r0, [pc, #4]	; (4019c8 <PIOB_Handler+0xc>)
  4019c2:	f7ff ffc3 	bl	40194c <pio_handler_process>
  4019c6:	bd08      	pop	{r3, pc}
  4019c8:	400e1000 	.word	0x400e1000

004019cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4019cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4019ce:	210d      	movs	r1, #13
  4019d0:	4801      	ldr	r0, [pc, #4]	; (4019d8 <PIOC_Handler+0xc>)
  4019d2:	f7ff ffbb 	bl	40194c <pio_handler_process>
  4019d6:	bd08      	pop	{r3, pc}
  4019d8:	400e1200 	.word	0x400e1200

004019dc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4019dc:	4a18      	ldr	r2, [pc, #96]	; (401a40 <pmc_switch_mck_to_pllack+0x64>)
  4019de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4019e4:	4318      	orrs	r0, r3
  4019e6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019ea:	f013 0f08 	tst.w	r3, #8
  4019ee:	d003      	beq.n	4019f8 <pmc_switch_mck_to_pllack+0x1c>
  4019f0:	e009      	b.n	401a06 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019f2:	3b01      	subs	r3, #1
  4019f4:	d103      	bne.n	4019fe <pmc_switch_mck_to_pllack+0x22>
  4019f6:	e01e      	b.n	401a36 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019fc:	4910      	ldr	r1, [pc, #64]	; (401a40 <pmc_switch_mck_to_pllack+0x64>)
  4019fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401a00:	f012 0f08 	tst.w	r2, #8
  401a04:	d0f5      	beq.n	4019f2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401a06:	4a0e      	ldr	r2, [pc, #56]	; (401a40 <pmc_switch_mck_to_pllack+0x64>)
  401a08:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a0a:	f023 0303 	bic.w	r3, r3, #3
  401a0e:	f043 0302 	orr.w	r3, r3, #2
  401a12:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a14:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401a16:	f010 0008 	ands.w	r0, r0, #8
  401a1a:	d004      	beq.n	401a26 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401a1c:	2000      	movs	r0, #0
  401a1e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401a20:	3b01      	subs	r3, #1
  401a22:	d103      	bne.n	401a2c <pmc_switch_mck_to_pllack+0x50>
  401a24:	e009      	b.n	401a3a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a26:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401a2a:	4905      	ldr	r1, [pc, #20]	; (401a40 <pmc_switch_mck_to_pllack+0x64>)
  401a2c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401a2e:	f012 0f08 	tst.w	r2, #8
  401a32:	d0f5      	beq.n	401a20 <pmc_switch_mck_to_pllack+0x44>
  401a34:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401a36:	2001      	movs	r0, #1
  401a38:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401a3a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401a3c:	4770      	bx	lr
  401a3e:	bf00      	nop
  401a40:	400e0400 	.word	0x400e0400

00401a44 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401a44:	b138      	cbz	r0, 401a56 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401a46:	4911      	ldr	r1, [pc, #68]	; (401a8c <pmc_switch_mainck_to_xtal+0x48>)
  401a48:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401a4a:	4a11      	ldr	r2, [pc, #68]	; (401a90 <pmc_switch_mainck_to_xtal+0x4c>)
  401a4c:	401a      	ands	r2, r3
  401a4e:	4b11      	ldr	r3, [pc, #68]	; (401a94 <pmc_switch_mainck_to_xtal+0x50>)
  401a50:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401a52:	620b      	str	r3, [r1, #32]
  401a54:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401a56:	480d      	ldr	r0, [pc, #52]	; (401a8c <pmc_switch_mainck_to_xtal+0x48>)
  401a58:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401a5a:	0209      	lsls	r1, r1, #8
  401a5c:	b289      	uxth	r1, r1
  401a5e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  401a62:	f023 0303 	bic.w	r3, r3, #3
  401a66:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401a6a:	f043 0301 	orr.w	r3, r3, #1
  401a6e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401a70:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401a72:	4602      	mov	r2, r0
  401a74:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a76:	f013 0f01 	tst.w	r3, #1
  401a7a:	d0fb      	beq.n	401a74 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401a7c:	4a03      	ldr	r2, [pc, #12]	; (401a8c <pmc_switch_mainck_to_xtal+0x48>)
  401a7e:	6a13      	ldr	r3, [r2, #32]
  401a80:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401a88:	6213      	str	r3, [r2, #32]
  401a8a:	4770      	bx	lr
  401a8c:	400e0400 	.word	0x400e0400
  401a90:	fec8fffc 	.word	0xfec8fffc
  401a94:	01370002 	.word	0x01370002

00401a98 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a98:	4b02      	ldr	r3, [pc, #8]	; (401aa4 <pmc_osc_is_ready_mainck+0xc>)
  401a9a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a9c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401aa0:	4770      	bx	lr
  401aa2:	bf00      	nop
  401aa4:	400e0400 	.word	0x400e0400

00401aa8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401aa8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401aac:	4b01      	ldr	r3, [pc, #4]	; (401ab4 <pmc_disable_pllack+0xc>)
  401aae:	629a      	str	r2, [r3, #40]	; 0x28
  401ab0:	4770      	bx	lr
  401ab2:	bf00      	nop
  401ab4:	400e0400 	.word	0x400e0400

00401ab8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401ab8:	4b02      	ldr	r3, [pc, #8]	; (401ac4 <pmc_is_locked_pllack+0xc>)
  401aba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401abc:	f000 0002 	and.w	r0, r0, #2
  401ac0:	4770      	bx	lr
  401ac2:	bf00      	nop
  401ac4:	400e0400 	.word	0x400e0400

00401ac8 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401ac8:	2822      	cmp	r0, #34	; 0x22
  401aca:	d81e      	bhi.n	401b0a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401acc:	281f      	cmp	r0, #31
  401ace:	d80c      	bhi.n	401aea <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401ad0:	4b11      	ldr	r3, [pc, #68]	; (401b18 <pmc_enable_periph_clk+0x50>)
  401ad2:	699a      	ldr	r2, [r3, #24]
  401ad4:	2301      	movs	r3, #1
  401ad6:	4083      	lsls	r3, r0
  401ad8:	4393      	bics	r3, r2
  401ada:	d018      	beq.n	401b0e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401adc:	2301      	movs	r3, #1
  401ade:	fa03 f000 	lsl.w	r0, r3, r0
  401ae2:	4b0d      	ldr	r3, [pc, #52]	; (401b18 <pmc_enable_periph_clk+0x50>)
  401ae4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401ae6:	2000      	movs	r0, #0
  401ae8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401aea:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401aec:	4b0a      	ldr	r3, [pc, #40]	; (401b18 <pmc_enable_periph_clk+0x50>)
  401aee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401af2:	2301      	movs	r3, #1
  401af4:	4083      	lsls	r3, r0
  401af6:	4393      	bics	r3, r2
  401af8:	d00b      	beq.n	401b12 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401afa:	2301      	movs	r3, #1
  401afc:	fa03 f000 	lsl.w	r0, r3, r0
  401b00:	4b05      	ldr	r3, [pc, #20]	; (401b18 <pmc_enable_periph_clk+0x50>)
  401b02:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401b06:	2000      	movs	r0, #0
  401b08:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401b0a:	2001      	movs	r0, #1
  401b0c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401b0e:	2000      	movs	r0, #0
  401b10:	4770      	bx	lr
  401b12:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401b14:	4770      	bx	lr
  401b16:	bf00      	nop
  401b18:	400e0400 	.word	0x400e0400

00401b1c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401b20:	6043      	str	r3, [r0, #4]
  401b22:	4770      	bx	lr

00401b24 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401b24:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401b26:	23ac      	movs	r3, #172	; 0xac
  401b28:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401b2a:	680b      	ldr	r3, [r1, #0]
  401b2c:	684a      	ldr	r2, [r1, #4]
  401b2e:	fbb3 f3f2 	udiv	r3, r3, r2
  401b32:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401b34:	1e5c      	subs	r4, r3, #1
  401b36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401b3a:	4294      	cmp	r4, r2
  401b3c:	d80a      	bhi.n	401b54 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  401b3e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401b40:	688b      	ldr	r3, [r1, #8]
  401b42:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401b44:	f240 2302 	movw	r3, #514	; 0x202
  401b48:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401b4c:	2350      	movs	r3, #80	; 0x50
  401b4e:	6003      	str	r3, [r0, #0]

	return 0;
  401b50:	2000      	movs	r0, #0
  401b52:	e000      	b.n	401b56 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  401b54:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  401b56:	bc10      	pop	{r4}
  401b58:	4770      	bx	lr
  401b5a:	bf00      	nop

00401b5c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401b5c:	6943      	ldr	r3, [r0, #20]
  401b5e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401b62:	bf1a      	itte	ne
  401b64:	61c1      	strne	r1, [r0, #28]
	return 0;
  401b66:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401b68:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  401b6a:	4770      	bx	lr

00401b6c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401b6c:	6943      	ldr	r3, [r0, #20]
  401b6e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401b72:	bf1d      	ittte	ne
  401b74:	6983      	ldrne	r3, [r0, #24]
  401b76:	700b      	strbne	r3, [r1, #0]
	return 0;
  401b78:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  401b7a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop

00401b80 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401b80:	6943      	ldr	r3, [r0, #20]
  401b82:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  401b86:	bf1d      	ittte	ne
  401b88:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401b8c:	61c1      	strne	r1, [r0, #28]
	return 0;
  401b8e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  401b90:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  401b92:	4770      	bx	lr

00401b94 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401b94:	6943      	ldr	r3, [r0, #20]
  401b96:	f013 0f01 	tst.w	r3, #1
  401b9a:	d005      	beq.n	401ba8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401b9c:	6983      	ldr	r3, [r0, #24]
  401b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401ba2:	600b      	str	r3, [r1, #0]

	return 0;
  401ba4:	2000      	movs	r0, #0
  401ba6:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  401ba8:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  401baa:	4770      	bx	lr

00401bac <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  401bac:	b4f0      	push	{r4, r5, r6, r7}
  401bae:	b08c      	sub	sp, #48	; 0x30
  401bb0:	4607      	mov	r7, r0
  401bb2:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  401bb4:	ac01      	add	r4, sp, #4
  401bb6:	4d11      	ldr	r5, [pc, #68]	; (401bfc <pwm_clocks_generate+0x50>)
  401bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401bc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  401bc8:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  401bca:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  401bcc:	f852 3b04 	ldr.w	r3, [r2], #4
  401bd0:	fbb6 f3f3 	udiv	r3, r6, r3
  401bd4:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  401bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401bdc:	d905      	bls.n	401bea <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  401bde:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  401be0:	280b      	cmp	r0, #11
  401be2:	d1f3      	bne.n	401bcc <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  401be4:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401be8:	e005      	b.n	401bf6 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  401bea:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  401bec:	bf94      	ite	ls
  401bee:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  401bf2:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  401bf6:	b00c      	add	sp, #48	; 0x30
  401bf8:	bcf0      	pop	{r4, r5, r6, r7}
  401bfa:	4770      	bx	lr
  401bfc:	0040629c 	.word	0x0040629c

00401c00 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  401c00:	b570      	push	{r4, r5, r6, lr}
  401c02:	4606      	mov	r6, r0
  401c04:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  401c06:	6808      	ldr	r0, [r1, #0]
  401c08:	b140      	cbz	r0, 401c1c <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  401c0a:	6889      	ldr	r1, [r1, #8]
  401c0c:	f7ff ffce 	bl	401bac <pwm_clocks_generate>
  401c10:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  401c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401c16:	4298      	cmp	r0, r3
  401c18:	d101      	bne.n	401c1e <pwm_init+0x1e>
  401c1a:	e00e      	b.n	401c3a <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  401c1c:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  401c1e:	6860      	ldr	r0, [r4, #4]
  401c20:	b140      	cbz	r0, 401c34 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  401c22:	68a1      	ldr	r1, [r4, #8]
  401c24:	f7ff ffc2 	bl	401bac <pwm_clocks_generate>

		if (result == PWM_INVALID_ARGUMENT) {
  401c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401c2c:	4298      	cmp	r0, r3
  401c2e:	d007      	beq.n	401c40 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  401c30:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  401c34:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  401c36:	2000      	movs	r0, #0
  401c38:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401c3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  401c3e:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  401c40:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  401c44:	bd70      	pop	{r4, r5, r6, pc}
  401c46:	bf00      	nop

00401c48 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401c48:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  401c4a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401c4c:	684a      	ldr	r2, [r1, #4]
  401c4e:	f002 020f 	and.w	r2, r2, #15
  401c52:	8a8c      	ldrh	r4, [r1, #20]
  401c54:	4322      	orrs	r2, r4
  401c56:	890c      	ldrh	r4, [r1, #8]
  401c58:	4322      	orrs	r2, r4
  401c5a:	7a8c      	ldrb	r4, [r1, #10]
  401c5c:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  401c60:	7d8c      	ldrb	r4, [r1, #22]
  401c62:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  401c66:	7dcc      	ldrb	r4, [r1, #23]
  401c68:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  401c6c:	7e0c      	ldrb	r4, [r1, #24]
  401c6e:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  401c72:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401c76:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  401c7a:	68ca      	ldr	r2, [r1, #12]
  401c7c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  401c80:	690a      	ldr	r2, [r1, #16]
  401c82:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  401c86:	7d8a      	ldrb	r2, [r1, #22]
  401c88:	b13a      	cbz	r2, 401c9a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  401c8a:	8b8c      	ldrh	r4, [r1, #28]
  401c8c:	8b4a      	ldrh	r2, [r1, #26]
  401c8e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  401c92:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  401c96:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  401c9a:	6c84      	ldr	r4, [r0, #72]	; 0x48
  401c9c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  401ca0:	409a      	lsls	r2, r3
  401ca2:	43d2      	mvns	r2, r2
  401ca4:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401ca8:	7fcc      	ldrb	r4, [r1, #31]
  401caa:	fa04 f603 	lsl.w	r6, r4, r3
  401cae:	7f8c      	ldrb	r4, [r1, #30]
  401cb0:	409c      	lsls	r4, r3
  401cb2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  401cb6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401cb8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  401cba:	6c44      	ldr	r4, [r0, #68]	; 0x44
  401cbc:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  401cbe:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  401cc2:	fa04 f503 	lsl.w	r5, r4, r3
  401cc6:	f891 4020 	ldrb.w	r4, [r1, #32]
  401cca:	409c      	lsls	r4, r3
  401ccc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401cd0:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  401cd2:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  401cd4:	2201      	movs	r2, #1
  401cd6:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  401cd8:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  401cdc:	b11c      	cbz	r4, 401ce6 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  401cde:	6a04      	ldr	r4, [r0, #32]
  401ce0:	4314      	orrs	r4, r2
  401ce2:	6204      	str	r4, [r0, #32]
  401ce4:	e003      	b.n	401cee <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  401ce6:	6a04      	ldr	r4, [r0, #32]
  401ce8:	ea24 0402 	bic.w	r4, r4, r2
  401cec:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  401cee:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  401cf2:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  401cf4:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401cf6:	bf0c      	ite	eq
  401cf8:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  401cfa:	4394      	bicne	r4, r2
  401cfc:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  401cfe:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  401d02:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  401d04:	6e84      	ldr	r4, [r0, #104]	; 0x68
  401d06:	bf0c      	ite	eq
  401d08:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  401d0c:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
  401d10:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  401d12:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  401d14:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  401d16:	22ff      	movs	r2, #255	; 0xff
  401d18:	409a      	lsls	r2, r3
  401d1a:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  401d1e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  401d22:	fa01 f303 	lsl.w	r3, r1, r3
  401d26:	4313      	orrs	r3, r2
	p_pwm->PWM_FPE = fault_enable_reg;
  401d28:	66c3      	str	r3, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  401d2a:	2000      	movs	r0, #0
  401d2c:	bc70      	pop	{r4, r5, r6}
  401d2e:	4770      	bx	lr

00401d30 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  401d30:	690b      	ldr	r3, [r1, #16]
  401d32:	4293      	cmp	r3, r2
  401d34:	d307      	bcc.n	401d46 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
  401d36:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  401d38:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  401d3a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401d3e:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  401d42:	2000      	movs	r0, #0
  401d44:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  401d46:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  401d4a:	4770      	bx	lr

00401d4c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  401d4c:	2301      	movs	r3, #1
  401d4e:	fa03 f101 	lsl.w	r1, r3, r1
  401d52:	6041      	str	r1, [r0, #4]
  401d54:	4770      	bx	lr
  401d56:	bf00      	nop

00401d58 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  401d58:	2301      	movs	r3, #1
  401d5a:	fa03 f101 	lsl.w	r1, r3, r1
  401d5e:	6081      	str	r1, [r0, #8]
  401d60:	4770      	bx	lr
  401d62:	bf00      	nop

00401d64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401d64:	e7fe      	b.n	401d64 <Dummy_Handler>
  401d66:	bf00      	nop

00401d68 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401d68:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  401d6a:	4b20      	ldr	r3, [pc, #128]	; (401dec <Reset_Handler+0x84>)
  401d6c:	4a20      	ldr	r2, [pc, #128]	; (401df0 <Reset_Handler+0x88>)
  401d6e:	429a      	cmp	r2, r3
  401d70:	d912      	bls.n	401d98 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  401d72:	4b20      	ldr	r3, [pc, #128]	; (401df4 <Reset_Handler+0x8c>)
  401d74:	4a1d      	ldr	r2, [pc, #116]	; (401dec <Reset_Handler+0x84>)
  401d76:	429a      	cmp	r2, r3
  401d78:	d21e      	bcs.n	401db8 <Reset_Handler+0x50>
  401d7a:	4611      	mov	r1, r2
  401d7c:	3b01      	subs	r3, #1
  401d7e:	1a9b      	subs	r3, r3, r2
  401d80:	f023 0303 	bic.w	r3, r3, #3
  401d84:	3304      	adds	r3, #4
  401d86:	4a1a      	ldr	r2, [pc, #104]	; (401df0 <Reset_Handler+0x88>)
  401d88:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  401d8a:	f852 0b04 	ldr.w	r0, [r2], #4
  401d8e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401d92:	429a      	cmp	r2, r3
  401d94:	d1f9      	bne.n	401d8a <Reset_Handler+0x22>
  401d96:	e00f      	b.n	401db8 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401d98:	4b14      	ldr	r3, [pc, #80]	; (401dec <Reset_Handler+0x84>)
  401d9a:	4a15      	ldr	r2, [pc, #84]	; (401df0 <Reset_Handler+0x88>)
  401d9c:	429a      	cmp	r2, r3
  401d9e:	d20b      	bcs.n	401db8 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401da0:	4b14      	ldr	r3, [pc, #80]	; (401df4 <Reset_Handler+0x8c>)
  401da2:	4a12      	ldr	r2, [pc, #72]	; (401dec <Reset_Handler+0x84>)
  401da4:	1a9a      	subs	r2, r3, r2
  401da6:	4814      	ldr	r0, [pc, #80]	; (401df8 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401da8:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401daa:	b12a      	cbz	r2, 401db8 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  401dac:	f851 2904 	ldr.w	r2, [r1], #-4
  401db0:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401db4:	4281      	cmp	r1, r0
  401db6:	d1f9      	bne.n	401dac <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401db8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401dba:	4b10      	ldr	r3, [pc, #64]	; (401dfc <Reset_Handler+0x94>)
  401dbc:	4a10      	ldr	r2, [pc, #64]	; (401e00 <Reset_Handler+0x98>)
  401dbe:	429a      	cmp	r2, r3
  401dc0:	d20b      	bcs.n	401dda <Reset_Handler+0x72>
  401dc2:	1d13      	adds	r3, r2, #4
  401dc4:	4a0f      	ldr	r2, [pc, #60]	; (401e04 <Reset_Handler+0x9c>)
  401dc6:	1ad2      	subs	r2, r2, r3
  401dc8:	f022 0203 	bic.w	r2, r2, #3
  401dcc:	441a      	add	r2, r3
  401dce:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401dd0:	2100      	movs	r1, #0
  401dd2:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401dd6:	429a      	cmp	r2, r3
  401dd8:	d1fb      	bne.n	401dd2 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  401dda:	4b0b      	ldr	r3, [pc, #44]	; (401e08 <Reset_Handler+0xa0>)
  401ddc:	4a0b      	ldr	r2, [pc, #44]	; (401e0c <Reset_Handler+0xa4>)
  401dde:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401de0:	f000 fca8 	bl	402734 <__libc_init_array>

	/* Branch to main function */
	main();
  401de4:	f7fe fa86 	bl	4002f4 <main>
  401de8:	e7fe      	b.n	401de8 <Reset_Handler+0x80>
  401dea:	bf00      	nop
  401dec:	20000000 	.word	0x20000000
  401df0:	004065fc 	.word	0x004065fc
  401df4:	200001e4 	.word	0x200001e4
  401df8:	004065f8 	.word	0x004065f8
  401dfc:	20000414 	.word	0x20000414
  401e00:	200001e8 	.word	0x200001e8
  401e04:	20000417 	.word	0x20000417
  401e08:	e000ed00 	.word	0xe000ed00
  401e0c:	00400000 	.word	0x00400000

00401e10 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401e10:	4b3d      	ldr	r3, [pc, #244]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401e14:	f003 0303 	and.w	r3, r3, #3
  401e18:	2b03      	cmp	r3, #3
  401e1a:	d85d      	bhi.n	401ed8 <SystemCoreClockUpdate+0xc8>
  401e1c:	e8df f003 	tbb	[pc, r3]
  401e20:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401e24:	4b39      	ldr	r3, [pc, #228]	; (401f0c <SystemCoreClockUpdate+0xfc>)
  401e26:	695b      	ldr	r3, [r3, #20]
  401e28:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401e2c:	bf14      	ite	ne
  401e2e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401e32:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401e36:	4b36      	ldr	r3, [pc, #216]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401e38:	601a      	str	r2, [r3, #0]
  401e3a:	e04d      	b.n	401ed8 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401e3c:	4b32      	ldr	r3, [pc, #200]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401e3e:	6a1b      	ldr	r3, [r3, #32]
  401e40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401e44:	d003      	beq.n	401e4e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401e46:	4a33      	ldr	r2, [pc, #204]	; (401f14 <SystemCoreClockUpdate+0x104>)
  401e48:	4b31      	ldr	r3, [pc, #196]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401e4a:	601a      	str	r2, [r3, #0]
  401e4c:	e044      	b.n	401ed8 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401e4e:	4a32      	ldr	r2, [pc, #200]	; (401f18 <SystemCoreClockUpdate+0x108>)
  401e50:	4b2f      	ldr	r3, [pc, #188]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401e52:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401e54:	4b2c      	ldr	r3, [pc, #176]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401e56:	6a1b      	ldr	r3, [r3, #32]
  401e58:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e5c:	2b10      	cmp	r3, #16
  401e5e:	d002      	beq.n	401e66 <SystemCoreClockUpdate+0x56>
  401e60:	2b20      	cmp	r3, #32
  401e62:	d004      	beq.n	401e6e <SystemCoreClockUpdate+0x5e>
  401e64:	e038      	b.n	401ed8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401e66:	4a2d      	ldr	r2, [pc, #180]	; (401f1c <SystemCoreClockUpdate+0x10c>)
  401e68:	4b29      	ldr	r3, [pc, #164]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401e6a:	601a      	str	r2, [r3, #0]
			break;
  401e6c:	e034      	b.n	401ed8 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401e6e:	4a29      	ldr	r2, [pc, #164]	; (401f14 <SystemCoreClockUpdate+0x104>)
  401e70:	4b27      	ldr	r3, [pc, #156]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401e72:	601a      	str	r2, [r3, #0]
			break;
  401e74:	e030      	b.n	401ed8 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401e76:	4b24      	ldr	r3, [pc, #144]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401e78:	6a1b      	ldr	r3, [r3, #32]
  401e7a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401e7e:	d003      	beq.n	401e88 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401e80:	4a24      	ldr	r2, [pc, #144]	; (401f14 <SystemCoreClockUpdate+0x104>)
  401e82:	4b23      	ldr	r3, [pc, #140]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401e84:	601a      	str	r2, [r3, #0]
  401e86:	e012      	b.n	401eae <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401e88:	4a23      	ldr	r2, [pc, #140]	; (401f18 <SystemCoreClockUpdate+0x108>)
  401e8a:	4b21      	ldr	r3, [pc, #132]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401e8c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401e8e:	4b1e      	ldr	r3, [pc, #120]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401e90:	6a1b      	ldr	r3, [r3, #32]
  401e92:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401e96:	2b10      	cmp	r3, #16
  401e98:	d002      	beq.n	401ea0 <SystemCoreClockUpdate+0x90>
  401e9a:	2b20      	cmp	r3, #32
  401e9c:	d004      	beq.n	401ea8 <SystemCoreClockUpdate+0x98>
  401e9e:	e006      	b.n	401eae <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401ea0:	4a1e      	ldr	r2, [pc, #120]	; (401f1c <SystemCoreClockUpdate+0x10c>)
  401ea2:	4b1b      	ldr	r3, [pc, #108]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401ea4:	601a      	str	r2, [r3, #0]
					break;
  401ea6:	e002      	b.n	401eae <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401ea8:	4a1a      	ldr	r2, [pc, #104]	; (401f14 <SystemCoreClockUpdate+0x104>)
  401eaa:	4b19      	ldr	r3, [pc, #100]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401eac:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401eae:	4b16      	ldr	r3, [pc, #88]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401eb2:	f003 0303 	and.w	r3, r3, #3
  401eb6:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401eb8:	4a13      	ldr	r2, [pc, #76]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401eba:	bf07      	ittee	eq
  401ebc:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401ebe:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401ec0:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401ec2:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401ec4:	4812      	ldr	r0, [pc, #72]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401ec6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  401eca:	6803      	ldr	r3, [r0, #0]
  401ecc:	fb01 3303 	mla	r3, r1, r3, r3
  401ed0:	b2d2      	uxtb	r2, r2
  401ed2:	fbb3 f3f2 	udiv	r3, r3, r2
  401ed6:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401ed8:	4b0b      	ldr	r3, [pc, #44]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ee0:	2b70      	cmp	r3, #112	; 0x70
  401ee2:	d107      	bne.n	401ef4 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401ee4:	4a0a      	ldr	r2, [pc, #40]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401ee6:	6813      	ldr	r3, [r2, #0]
  401ee8:	490d      	ldr	r1, [pc, #52]	; (401f20 <SystemCoreClockUpdate+0x110>)
  401eea:	fba1 1303 	umull	r1, r3, r1, r3
  401eee:	085b      	lsrs	r3, r3, #1
  401ef0:	6013      	str	r3, [r2, #0]
  401ef2:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401ef4:	4b04      	ldr	r3, [pc, #16]	; (401f08 <SystemCoreClockUpdate+0xf8>)
  401ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401ef8:	4905      	ldr	r1, [pc, #20]	; (401f10 <SystemCoreClockUpdate+0x100>)
  401efa:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401efe:	680b      	ldr	r3, [r1, #0]
  401f00:	40d3      	lsrs	r3, r2
  401f02:	600b      	str	r3, [r1, #0]
  401f04:	4770      	bx	lr
  401f06:	bf00      	nop
  401f08:	400e0400 	.word	0x400e0400
  401f0c:	400e1410 	.word	0x400e1410
  401f10:	2000000c 	.word	0x2000000c
  401f14:	00b71b00 	.word	0x00b71b00
  401f18:	003d0900 	.word	0x003d0900
  401f1c:	007a1200 	.word	0x007a1200
  401f20:	aaaaaaab 	.word	0xaaaaaaab

00401f24 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401f24:	4b1a      	ldr	r3, [pc, #104]	; (401f90 <system_init_flash+0x6c>)
  401f26:	4298      	cmp	r0, r3
  401f28:	d807      	bhi.n	401f3a <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401f2e:	4a19      	ldr	r2, [pc, #100]	; (401f94 <system_init_flash+0x70>)
  401f30:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401f32:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401f36:	6013      	str	r3, [r2, #0]
  401f38:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401f3a:	4b17      	ldr	r3, [pc, #92]	; (401f98 <system_init_flash+0x74>)
  401f3c:	4298      	cmp	r0, r3
  401f3e:	d806      	bhi.n	401f4e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401f40:	4b16      	ldr	r3, [pc, #88]	; (401f9c <system_init_flash+0x78>)
  401f42:	4a14      	ldr	r2, [pc, #80]	; (401f94 <system_init_flash+0x70>)
  401f44:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401f46:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401f4a:	6013      	str	r3, [r2, #0]
  401f4c:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401f4e:	4b14      	ldr	r3, [pc, #80]	; (401fa0 <system_init_flash+0x7c>)
  401f50:	4298      	cmp	r0, r3
  401f52:	d806      	bhi.n	401f62 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401f54:	4b13      	ldr	r3, [pc, #76]	; (401fa4 <system_init_flash+0x80>)
  401f56:	4a0f      	ldr	r2, [pc, #60]	; (401f94 <system_init_flash+0x70>)
  401f58:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401f5a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401f5e:	6013      	str	r3, [r2, #0]
  401f60:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401f62:	4b11      	ldr	r3, [pc, #68]	; (401fa8 <system_init_flash+0x84>)
  401f64:	4298      	cmp	r0, r3
  401f66:	d806      	bhi.n	401f76 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401f68:	4b10      	ldr	r3, [pc, #64]	; (401fac <system_init_flash+0x88>)
  401f6a:	4a0a      	ldr	r2, [pc, #40]	; (401f94 <system_init_flash+0x70>)
  401f6c:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401f6e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401f72:	6013      	str	r3, [r2, #0]
  401f74:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401f76:	4b0e      	ldr	r3, [pc, #56]	; (401fb0 <system_init_flash+0x8c>)
  401f78:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401f7a:	bf94      	ite	ls
  401f7c:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401f80:	4b0c      	ldrhi	r3, [pc, #48]	; (401fb4 <system_init_flash+0x90>)
  401f82:	4a04      	ldr	r2, [pc, #16]	; (401f94 <system_init_flash+0x70>)
  401f84:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401f86:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401f8a:	6013      	str	r3, [r2, #0]
  401f8c:	4770      	bx	lr
  401f8e:	bf00      	nop
  401f90:	01312cff 	.word	0x01312cff
  401f94:	400e0a00 	.word	0x400e0a00
  401f98:	026259ff 	.word	0x026259ff
  401f9c:	04000100 	.word	0x04000100
  401fa0:	039386ff 	.word	0x039386ff
  401fa4:	04000200 	.word	0x04000200
  401fa8:	04c4b3ff 	.word	0x04c4b3ff
  401fac:	04000300 	.word	0x04000300
  401fb0:	05f5e0ff 	.word	0x05f5e0ff
  401fb4:	04000500 	.word	0x04000500

00401fb8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401fb8:	4b09      	ldr	r3, [pc, #36]	; (401fe0 <_sbrk+0x28>)
  401fba:	681b      	ldr	r3, [r3, #0]
  401fbc:	b913      	cbnz	r3, 401fc4 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401fbe:	4a09      	ldr	r2, [pc, #36]	; (401fe4 <_sbrk+0x2c>)
  401fc0:	4b07      	ldr	r3, [pc, #28]	; (401fe0 <_sbrk+0x28>)
  401fc2:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401fc4:	4b06      	ldr	r3, [pc, #24]	; (401fe0 <_sbrk+0x28>)
  401fc6:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401fc8:	181a      	adds	r2, r3, r0
  401fca:	4907      	ldr	r1, [pc, #28]	; (401fe8 <_sbrk+0x30>)
  401fcc:	4291      	cmp	r1, r2
  401fce:	db04      	blt.n	401fda <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401fd0:	4610      	mov	r0, r2
  401fd2:	4a03      	ldr	r2, [pc, #12]	; (401fe0 <_sbrk+0x28>)
  401fd4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401fd6:	4618      	mov	r0, r3
  401fd8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401fde:	4770      	bx	lr
  401fe0:	200002d0 	.word	0x200002d0
  401fe4:	20003418 	.word	0x20003418
  401fe8:	20027ffc 	.word	0x20027ffc

00401fec <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401ff0:	4770      	bx	lr
  401ff2:	bf00      	nop

00401ff4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401ff8:	604b      	str	r3, [r1, #4]

	return 0;
}
  401ffa:	2000      	movs	r0, #0
  401ffc:	4770      	bx	lr
  401ffe:	bf00      	nop

00402000 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402000:	2001      	movs	r0, #1
  402002:	4770      	bx	lr

00402004 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402004:	2000      	movs	r0, #0
  402006:	4770      	bx	lr

00402008 <atan2>:
  402008:	f000 b85e 	b.w	4020c8 <__ieee754_atan2>

0040200c <sqrt>:
  40200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402010:	b08b      	sub	sp, #44	; 0x2c
  402012:	4604      	mov	r4, r0
  402014:	460d      	mov	r5, r1
  402016:	f000 f921 	bl	40225c <__ieee754_sqrt>
  40201a:	4b28      	ldr	r3, [pc, #160]	; (4020bc <sqrt+0xb0>)
  40201c:	f993 a000 	ldrsb.w	sl, [r3]
  402020:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  402024:	4606      	mov	r6, r0
  402026:	460f      	mov	r7, r1
  402028:	d012      	beq.n	402050 <sqrt+0x44>
  40202a:	4622      	mov	r2, r4
  40202c:	462b      	mov	r3, r5
  40202e:	4620      	mov	r0, r4
  402030:	4629      	mov	r1, r5
  402032:	f003 fc95 	bl	405960 <__aeabi_dcmpun>
  402036:	4683      	mov	fp, r0
  402038:	b950      	cbnz	r0, 402050 <sqrt+0x44>
  40203a:	f04f 0800 	mov.w	r8, #0
  40203e:	f04f 0900 	mov.w	r9, #0
  402042:	4642      	mov	r2, r8
  402044:	464b      	mov	r3, r9
  402046:	4620      	mov	r0, r4
  402048:	4629      	mov	r1, r5
  40204a:	f003 fc61 	bl	405910 <__aeabi_dcmplt>
  40204e:	b920      	cbnz	r0, 40205a <sqrt+0x4e>
  402050:	4630      	mov	r0, r6
  402052:	4639      	mov	r1, r7
  402054:	b00b      	add	sp, #44	; 0x2c
  402056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40205a:	4b19      	ldr	r3, [pc, #100]	; (4020c0 <sqrt+0xb4>)
  40205c:	f8cd b020 	str.w	fp, [sp, #32]
  402060:	2201      	movs	r2, #1
  402062:	e9cd 4504 	strd	r4, r5, [sp, #16]
  402066:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40206a:	e88d 000c 	stmia.w	sp, {r2, r3}
  40206e:	f1ba 0f00 	cmp.w	sl, #0
  402072:	d015      	beq.n	4020a0 <sqrt+0x94>
  402074:	4642      	mov	r2, r8
  402076:	464b      	mov	r3, r9
  402078:	4640      	mov	r0, r8
  40207a:	4649      	mov	r1, r9
  40207c:	f003 fb00 	bl	405680 <__aeabi_ddiv>
  402080:	f1ba 0f02 	cmp.w	sl, #2
  402084:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402088:	d10c      	bne.n	4020a4 <sqrt+0x98>
  40208a:	f000 fb4d 	bl	402728 <__errno>
  40208e:	2321      	movs	r3, #33	; 0x21
  402090:	6003      	str	r3, [r0, #0]
  402092:	9b08      	ldr	r3, [sp, #32]
  402094:	b963      	cbnz	r3, 4020b0 <sqrt+0xa4>
  402096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40209a:	b00b      	add	sp, #44	; 0x2c
  40209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020a0:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4020a4:	4668      	mov	r0, sp
  4020a6:	f000 fb3d 	bl	402724 <matherr>
  4020aa:	2800      	cmp	r0, #0
  4020ac:	d1f1      	bne.n	402092 <sqrt+0x86>
  4020ae:	e7ec      	b.n	40208a <sqrt+0x7e>
  4020b0:	f000 fb3a 	bl	402728 <__errno>
  4020b4:	9b08      	ldr	r3, [sp, #32]
  4020b6:	6003      	str	r3, [r0, #0]
  4020b8:	e7ed      	b.n	402096 <sqrt+0x8a>
  4020ba:	bf00      	nop
  4020bc:	20000010 	.word	0x20000010
  4020c0:	004062c8 	.word	0x004062c8
  4020c4:	00000000 	.word	0x00000000

004020c8 <__ieee754_atan2>:
  4020c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020cc:	4254      	negs	r4, r2
  4020ce:	4314      	orrs	r4, r2
  4020d0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  4020d4:	f8df e180 	ldr.w	lr, [pc, #384]	; 402258 <__ieee754_atan2+0x190>
  4020d8:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  4020dc:	4574      	cmp	r4, lr
  4020de:	4606      	mov	r6, r0
  4020e0:	460d      	mov	r5, r1
  4020e2:	d83e      	bhi.n	402162 <__ieee754_atan2+0x9a>
  4020e4:	4244      	negs	r4, r0
  4020e6:	4304      	orrs	r4, r0
  4020e8:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  4020ec:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  4020f0:	4574      	cmp	r4, lr
  4020f2:	468a      	mov	sl, r1
  4020f4:	d835      	bhi.n	402162 <__ieee754_atan2+0x9a>
  4020f6:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  4020fa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  4020fe:	4314      	orrs	r4, r2
  402100:	d044      	beq.n	40218c <__ieee754_atan2+0xc4>
  402102:	179c      	asrs	r4, r3, #30
  402104:	f004 0402 	and.w	r4, r4, #2
  402108:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  40210c:	ea50 010b 	orrs.w	r1, r0, fp
  402110:	d02f      	beq.n	402172 <__ieee754_atan2+0xaa>
  402112:	ea52 0109 	orrs.w	r1, r2, r9
  402116:	d033      	beq.n	402180 <__ieee754_atan2+0xb8>
  402118:	45f1      	cmp	r9, lr
  40211a:	d046      	beq.n	4021aa <__ieee754_atan2+0xe2>
  40211c:	45f3      	cmp	fp, lr
  40211e:	d02f      	beq.n	402180 <__ieee754_atan2+0xb8>
  402120:	ebc9 090b 	rsb	r9, r9, fp
  402124:	ea4f 5929 	mov.w	r9, r9, asr #20
  402128:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  40212c:	dc34      	bgt.n	402198 <__ieee754_atan2+0xd0>
  40212e:	2b00      	cmp	r3, #0
  402130:	db57      	blt.n	4021e2 <__ieee754_atan2+0x11a>
  402132:	4630      	mov	r0, r6
  402134:	4629      	mov	r1, r5
  402136:	f003 faa3 	bl	405680 <__aeabi_ddiv>
  40213a:	f000 faef 	bl	40271c <fabs>
  40213e:	f000 f94f 	bl	4023e0 <atan>
  402142:	2c01      	cmp	r4, #1
  402144:	d04a      	beq.n	4021dc <__ieee754_atan2+0x114>
  402146:	2c02      	cmp	r4, #2
  402148:	d03b      	beq.n	4021c2 <__ieee754_atan2+0xfa>
  40214a:	b184      	cbz	r4, 40216e <__ieee754_atan2+0xa6>
  40214c:	a332      	add	r3, pc, #200	; (adr r3, 402218 <__ieee754_atan2+0x150>)
  40214e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402152:	f002 ffb7 	bl	4050c4 <__aeabi_dsub>
  402156:	a332      	add	r3, pc, #200	; (adr r3, 402220 <__ieee754_atan2+0x158>)
  402158:	e9d3 2300 	ldrd	r2, r3, [r3]
  40215c:	f002 ffb2 	bl	4050c4 <__aeabi_dsub>
  402160:	e005      	b.n	40216e <__ieee754_atan2+0xa6>
  402162:	4610      	mov	r0, r2
  402164:	4619      	mov	r1, r3
  402166:	4632      	mov	r2, r6
  402168:	462b      	mov	r3, r5
  40216a:	f002 ffad 	bl	4050c8 <__adddf3>
  40216e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402172:	2c02      	cmp	r4, #2
  402174:	d014      	beq.n	4021a0 <__ieee754_atan2+0xd8>
  402176:	2c03      	cmp	r4, #3
  402178:	d10c      	bne.n	402194 <__ieee754_atan2+0xcc>
  40217a:	482d      	ldr	r0, [pc, #180]	; (402230 <__ieee754_atan2+0x168>)
  40217c:	492d      	ldr	r1, [pc, #180]	; (402234 <__ieee754_atan2+0x16c>)
  40217e:	e7f6      	b.n	40216e <__ieee754_atan2+0xa6>
  402180:	f1ba 0f00 	cmp.w	sl, #0
  402184:	482a      	ldr	r0, [pc, #168]	; (402230 <__ieee754_atan2+0x168>)
  402186:	db0e      	blt.n	4021a6 <__ieee754_atan2+0xde>
  402188:	492b      	ldr	r1, [pc, #172]	; (402238 <__ieee754_atan2+0x170>)
  40218a:	e7f0      	b.n	40216e <__ieee754_atan2+0xa6>
  40218c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402190:	f000 b926 	b.w	4023e0 <atan>
  402194:	4629      	mov	r1, r5
  402196:	e7ea      	b.n	40216e <__ieee754_atan2+0xa6>
  402198:	a123      	add	r1, pc, #140	; (adr r1, 402228 <__ieee754_atan2+0x160>)
  40219a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40219e:	e7d0      	b.n	402142 <__ieee754_atan2+0x7a>
  4021a0:	4823      	ldr	r0, [pc, #140]	; (402230 <__ieee754_atan2+0x168>)
  4021a2:	4926      	ldr	r1, [pc, #152]	; (40223c <__ieee754_atan2+0x174>)
  4021a4:	e7e3      	b.n	40216e <__ieee754_atan2+0xa6>
  4021a6:	4926      	ldr	r1, [pc, #152]	; (402240 <__ieee754_atan2+0x178>)
  4021a8:	e7e1      	b.n	40216e <__ieee754_atan2+0xa6>
  4021aa:	45cb      	cmp	fp, r9
  4021ac:	d01f      	beq.n	4021ee <__ieee754_atan2+0x126>
  4021ae:	2c02      	cmp	r4, #2
  4021b0:	d0f6      	beq.n	4021a0 <__ieee754_atan2+0xd8>
  4021b2:	2c03      	cmp	r4, #3
  4021b4:	d0e1      	beq.n	40217a <__ieee754_atan2+0xb2>
  4021b6:	2c01      	cmp	r4, #1
  4021b8:	f04f 0000 	mov.w	r0, #0
  4021bc:	d020      	beq.n	402200 <__ieee754_atan2+0x138>
  4021be:	4601      	mov	r1, r0
  4021c0:	e7d5      	b.n	40216e <__ieee754_atan2+0xa6>
  4021c2:	a315      	add	r3, pc, #84	; (adr r3, 402218 <__ieee754_atan2+0x150>)
  4021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4021c8:	f002 ff7c 	bl	4050c4 <__aeabi_dsub>
  4021cc:	4602      	mov	r2, r0
  4021ce:	460b      	mov	r3, r1
  4021d0:	a113      	add	r1, pc, #76	; (adr r1, 402220 <__ieee754_atan2+0x158>)
  4021d2:	e9d1 0100 	ldrd	r0, r1, [r1]
  4021d6:	f002 ff75 	bl	4050c4 <__aeabi_dsub>
  4021da:	e7c8      	b.n	40216e <__ieee754_atan2+0xa6>
  4021dc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4021e0:	e7c5      	b.n	40216e <__ieee754_atan2+0xa6>
  4021e2:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  4021e6:	daa4      	bge.n	402132 <__ieee754_atan2+0x6a>
  4021e8:	2000      	movs	r0, #0
  4021ea:	2100      	movs	r1, #0
  4021ec:	e7a9      	b.n	402142 <__ieee754_atan2+0x7a>
  4021ee:	2c02      	cmp	r4, #2
  4021f0:	d00e      	beq.n	402210 <__ieee754_atan2+0x148>
  4021f2:	2c03      	cmp	r4, #3
  4021f4:	d009      	beq.n	40220a <__ieee754_atan2+0x142>
  4021f6:	2c01      	cmp	r4, #1
  4021f8:	480d      	ldr	r0, [pc, #52]	; (402230 <__ieee754_atan2+0x168>)
  4021fa:	d004      	beq.n	402206 <__ieee754_atan2+0x13e>
  4021fc:	4911      	ldr	r1, [pc, #68]	; (402244 <__ieee754_atan2+0x17c>)
  4021fe:	e7b6      	b.n	40216e <__ieee754_atan2+0xa6>
  402200:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402204:	e7b3      	b.n	40216e <__ieee754_atan2+0xa6>
  402206:	4910      	ldr	r1, [pc, #64]	; (402248 <__ieee754_atan2+0x180>)
  402208:	e7b1      	b.n	40216e <__ieee754_atan2+0xa6>
  40220a:	4810      	ldr	r0, [pc, #64]	; (40224c <__ieee754_atan2+0x184>)
  40220c:	4910      	ldr	r1, [pc, #64]	; (402250 <__ieee754_atan2+0x188>)
  40220e:	e7ae      	b.n	40216e <__ieee754_atan2+0xa6>
  402210:	480e      	ldr	r0, [pc, #56]	; (40224c <__ieee754_atan2+0x184>)
  402212:	4910      	ldr	r1, [pc, #64]	; (402254 <__ieee754_atan2+0x18c>)
  402214:	e7ab      	b.n	40216e <__ieee754_atan2+0xa6>
  402216:	bf00      	nop
  402218:	33145c07 	.word	0x33145c07
  40221c:	3ca1a626 	.word	0x3ca1a626
  402220:	54442d18 	.word	0x54442d18
  402224:	400921fb 	.word	0x400921fb
  402228:	54442d18 	.word	0x54442d18
  40222c:	3ff921fb 	.word	0x3ff921fb
  402230:	54442d18 	.word	0x54442d18
  402234:	c00921fb 	.word	0xc00921fb
  402238:	3ff921fb 	.word	0x3ff921fb
  40223c:	400921fb 	.word	0x400921fb
  402240:	bff921fb 	.word	0xbff921fb
  402244:	3fe921fb 	.word	0x3fe921fb
  402248:	bfe921fb 	.word	0xbfe921fb
  40224c:	7f3321d2 	.word	0x7f3321d2
  402250:	c002d97c 	.word	0xc002d97c
  402254:	4002d97c 	.word	0x4002d97c
  402258:	7ff00000 	.word	0x7ff00000

0040225c <__ieee754_sqrt>:
  40225c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402260:	4e5d      	ldr	r6, [pc, #372]	; (4023d8 <__ieee754_sqrt+0x17c>)
  402262:	46b6      	mov	lr, r6
  402264:	400e      	ands	r6, r1
  402266:	4576      	cmp	r6, lr
  402268:	460c      	mov	r4, r1
  40226a:	4605      	mov	r5, r0
  40226c:	f000 8095 	beq.w	40239a <__ieee754_sqrt+0x13e>
  402270:	2900      	cmp	r1, #0
  402272:	460b      	mov	r3, r1
  402274:	4602      	mov	r2, r0
  402276:	dd73      	ble.n	402360 <__ieee754_sqrt+0x104>
  402278:	150f      	asrs	r7, r1, #20
  40227a:	d07e      	beq.n	40237a <__ieee754_sqrt+0x11e>
  40227c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  402280:	f3c3 0313 	ubfx	r3, r3, #0, #20
  402284:	07f8      	lsls	r0, r7, #31
  402286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40228a:	d464      	bmi.n	402356 <__ieee754_sqrt+0xfa>
  40228c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  402290:	2600      	movs	r6, #0
  402292:	440b      	add	r3, r1
  402294:	107f      	asrs	r7, r7, #1
  402296:	0052      	lsls	r2, r2, #1
  402298:	46b6      	mov	lr, r6
  40229a:	2016      	movs	r0, #22
  40229c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4022a0:	eb0e 0401 	add.w	r4, lr, r1
  4022a4:	429c      	cmp	r4, r3
  4022a6:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  4022aa:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4022ae:	dc03      	bgt.n	4022b8 <__ieee754_sqrt+0x5c>
  4022b0:	1b1b      	subs	r3, r3, r4
  4022b2:	eb04 0e01 	add.w	lr, r4, r1
  4022b6:	440e      	add	r6, r1
  4022b8:	3801      	subs	r0, #1
  4022ba:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  4022be:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4022c2:	d1ed      	bne.n	4022a0 <__ieee754_sqrt+0x44>
  4022c4:	4684      	mov	ip, r0
  4022c6:	2420      	movs	r4, #32
  4022c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4022cc:	e009      	b.n	4022e2 <__ieee754_sqrt+0x86>
  4022ce:	d020      	beq.n	402312 <__ieee754_sqrt+0xb6>
  4022d0:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  4022d4:	3c01      	subs	r4, #1
  4022d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
  4022da:	442b      	add	r3, r5
  4022dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4022e0:	d020      	beq.n	402324 <__ieee754_sqrt+0xc8>
  4022e2:	459e      	cmp	lr, r3
  4022e4:	eb01 050c 	add.w	r5, r1, ip
  4022e8:	daf1      	bge.n	4022ce <__ieee754_sqrt+0x72>
  4022ea:	2d00      	cmp	r5, #0
  4022ec:	eb05 0c01 	add.w	ip, r5, r1
  4022f0:	db09      	blt.n	402306 <__ieee754_sqrt+0xaa>
  4022f2:	46f0      	mov	r8, lr
  4022f4:	4295      	cmp	r5, r2
  4022f6:	ebce 0303 	rsb	r3, lr, r3
  4022fa:	d900      	bls.n	4022fe <__ieee754_sqrt+0xa2>
  4022fc:	3b01      	subs	r3, #1
  4022fe:	1b52      	subs	r2, r2, r5
  402300:	4408      	add	r0, r1
  402302:	46c6      	mov	lr, r8
  402304:	e7e4      	b.n	4022d0 <__ieee754_sqrt+0x74>
  402306:	f1bc 0f00 	cmp.w	ip, #0
  40230a:	dbf2      	blt.n	4022f2 <__ieee754_sqrt+0x96>
  40230c:	f10e 0801 	add.w	r8, lr, #1
  402310:	e7f0      	b.n	4022f4 <__ieee754_sqrt+0x98>
  402312:	4295      	cmp	r5, r2
  402314:	d817      	bhi.n	402346 <__ieee754_sqrt+0xea>
  402316:	2d00      	cmp	r5, #0
  402318:	eb05 0c01 	add.w	ip, r5, r1
  40231c:	db47      	blt.n	4023ae <__ieee754_sqrt+0x152>
  40231e:	4698      	mov	r8, r3
  402320:	2300      	movs	r3, #0
  402322:	e7ec      	b.n	4022fe <__ieee754_sqrt+0xa2>
  402324:	4313      	orrs	r3, r2
  402326:	d110      	bne.n	40234a <__ieee754_sqrt+0xee>
  402328:	0840      	lsrs	r0, r0, #1
  40232a:	1073      	asrs	r3, r6, #1
  40232c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  402330:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402334:	07f2      	lsls	r2, r6, #31
  402336:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40233a:	bf48      	it	mi
  40233c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  402340:	4649      	mov	r1, r9
  402342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402346:	4673      	mov	r3, lr
  402348:	e7c2      	b.n	4022d0 <__ieee754_sqrt+0x74>
  40234a:	1c41      	adds	r1, r0, #1
  40234c:	d033      	beq.n	4023b6 <__ieee754_sqrt+0x15a>
  40234e:	f000 0301 	and.w	r3, r0, #1
  402352:	4418      	add	r0, r3
  402354:	e7e8      	b.n	402328 <__ieee754_sqrt+0xcc>
  402356:	005b      	lsls	r3, r3, #1
  402358:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  40235c:	0052      	lsls	r2, r2, #1
  40235e:	e795      	b.n	40228c <__ieee754_sqrt+0x30>
  402360:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  402364:	4306      	orrs	r6, r0
  402366:	d0ec      	beq.n	402342 <__ieee754_sqrt+0xe6>
  402368:	bb69      	cbnz	r1, 4023c6 <__ieee754_sqrt+0x16a>
  40236a:	460f      	mov	r7, r1
  40236c:	0ad3      	lsrs	r3, r2, #11
  40236e:	3f15      	subs	r7, #21
  402370:	0552      	lsls	r2, r2, #21
  402372:	2b00      	cmp	r3, #0
  402374:	d0fa      	beq.n	40236c <__ieee754_sqrt+0x110>
  402376:	02dd      	lsls	r5, r3, #11
  402378:	d420      	bmi.n	4023bc <__ieee754_sqrt+0x160>
  40237a:	2100      	movs	r1, #0
  40237c:	e000      	b.n	402380 <__ieee754_sqrt+0x124>
  40237e:	4601      	mov	r1, r0
  402380:	005b      	lsls	r3, r3, #1
  402382:	02dc      	lsls	r4, r3, #11
  402384:	f101 0001 	add.w	r0, r1, #1
  402388:	d5f9      	bpl.n	40237e <__ieee754_sqrt+0x122>
  40238a:	f1c0 0420 	rsb	r4, r0, #32
  40238e:	fa22 f404 	lsr.w	r4, r2, r4
  402392:	4323      	orrs	r3, r4
  402394:	1a7f      	subs	r7, r7, r1
  402396:	4082      	lsls	r2, r0
  402398:	e770      	b.n	40227c <__ieee754_sqrt+0x20>
  40239a:	4602      	mov	r2, r0
  40239c:	460b      	mov	r3, r1
  40239e:	f003 f845 	bl	40542c <__aeabi_dmul>
  4023a2:	462a      	mov	r2, r5
  4023a4:	4623      	mov	r3, r4
  4023a6:	f002 fe8f 	bl	4050c8 <__adddf3>
  4023aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4023ae:	f1bc 0f00 	cmp.w	ip, #0
  4023b2:	daab      	bge.n	40230c <__ieee754_sqrt+0xb0>
  4023b4:	e7b3      	b.n	40231e <__ieee754_sqrt+0xc2>
  4023b6:	3601      	adds	r6, #1
  4023b8:	4620      	mov	r0, r4
  4023ba:	e7b6      	b.n	40232a <__ieee754_sqrt+0xce>
  4023bc:	2420      	movs	r4, #32
  4023be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  4023c2:	2000      	movs	r0, #0
  4023c4:	e7e3      	b.n	40238e <__ieee754_sqrt+0x132>
  4023c6:	4602      	mov	r2, r0
  4023c8:	460b      	mov	r3, r1
  4023ca:	f002 fe7b 	bl	4050c4 <__aeabi_dsub>
  4023ce:	4602      	mov	r2, r0
  4023d0:	460b      	mov	r3, r1
  4023d2:	f003 f955 	bl	405680 <__aeabi_ddiv>
  4023d6:	e7b4      	b.n	402342 <__ieee754_sqrt+0xe6>
  4023d8:	7ff00000 	.word	0x7ff00000
  4023dc:	00000000 	.word	0x00000000

004023e0 <atan>:
  4023e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023e4:	4bc0      	ldr	r3, [pc, #768]	; (4026e8 <atan+0x308>)
  4023e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4023ea:	429e      	cmp	r6, r3
  4023ec:	460d      	mov	r5, r1
  4023ee:	468a      	mov	sl, r1
  4023f0:	4604      	mov	r4, r0
  4023f2:	dd0f      	ble.n	402414 <atan+0x34>
  4023f4:	4bbd      	ldr	r3, [pc, #756]	; (4026ec <atan+0x30c>)
  4023f6:	429e      	cmp	r6, r3
  4023f8:	f300 80b2 	bgt.w	402560 <atan+0x180>
  4023fc:	f000 80ad 	beq.w	40255a <atan+0x17a>
  402400:	4bbb      	ldr	r3, [pc, #748]	; (4026f0 <atan+0x310>)
  402402:	49bc      	ldr	r1, [pc, #752]	; (4026f4 <atan+0x314>)
  402404:	4cbc      	ldr	r4, [pc, #752]	; (4026f8 <atan+0x318>)
  402406:	f1ba 0f00 	cmp.w	sl, #0
  40240a:	bfc8      	it	gt
  40240c:	4619      	movgt	r1, r3
  40240e:	4620      	mov	r0, r4
  402410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402414:	4bb9      	ldr	r3, [pc, #740]	; (4026fc <atan+0x31c>)
  402416:	429e      	cmp	r6, r3
  402418:	f300 80bc 	bgt.w	402594 <atan+0x1b4>
  40241c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  402420:	429e      	cmp	r6, r3
  402422:	f340 80a7 	ble.w	402574 <atan+0x194>
  402426:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  40242a:	4622      	mov	r2, r4
  40242c:	462b      	mov	r3, r5
  40242e:	4620      	mov	r0, r4
  402430:	4629      	mov	r1, r5
  402432:	f002 fffb 	bl	40542c <__aeabi_dmul>
  402436:	4602      	mov	r2, r0
  402438:	460b      	mov	r3, r1
  40243a:	4680      	mov	r8, r0
  40243c:	4689      	mov	r9, r1
  40243e:	f002 fff5 	bl	40542c <__aeabi_dmul>
  402442:	a391      	add	r3, pc, #580	; (adr r3, 402688 <atan+0x2a8>)
  402444:	e9d3 2300 	ldrd	r2, r3, [r3]
  402448:	4606      	mov	r6, r0
  40244a:	460f      	mov	r7, r1
  40244c:	f002 ffee 	bl	40542c <__aeabi_dmul>
  402450:	a38f      	add	r3, pc, #572	; (adr r3, 402690 <atan+0x2b0>)
  402452:	e9d3 2300 	ldrd	r2, r3, [r3]
  402456:	f002 fe37 	bl	4050c8 <__adddf3>
  40245a:	4632      	mov	r2, r6
  40245c:	463b      	mov	r3, r7
  40245e:	f002 ffe5 	bl	40542c <__aeabi_dmul>
  402462:	a38d      	add	r3, pc, #564	; (adr r3, 402698 <atan+0x2b8>)
  402464:	e9d3 2300 	ldrd	r2, r3, [r3]
  402468:	f002 fe2e 	bl	4050c8 <__adddf3>
  40246c:	4632      	mov	r2, r6
  40246e:	463b      	mov	r3, r7
  402470:	f002 ffdc 	bl	40542c <__aeabi_dmul>
  402474:	a38a      	add	r3, pc, #552	; (adr r3, 4026a0 <atan+0x2c0>)
  402476:	e9d3 2300 	ldrd	r2, r3, [r3]
  40247a:	f002 fe25 	bl	4050c8 <__adddf3>
  40247e:	4632      	mov	r2, r6
  402480:	463b      	mov	r3, r7
  402482:	f002 ffd3 	bl	40542c <__aeabi_dmul>
  402486:	a388      	add	r3, pc, #544	; (adr r3, 4026a8 <atan+0x2c8>)
  402488:	e9d3 2300 	ldrd	r2, r3, [r3]
  40248c:	f002 fe1c 	bl	4050c8 <__adddf3>
  402490:	4632      	mov	r2, r6
  402492:	463b      	mov	r3, r7
  402494:	f002 ffca 	bl	40542c <__aeabi_dmul>
  402498:	a385      	add	r3, pc, #532	; (adr r3, 4026b0 <atan+0x2d0>)
  40249a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40249e:	f002 fe13 	bl	4050c8 <__adddf3>
  4024a2:	4642      	mov	r2, r8
  4024a4:	464b      	mov	r3, r9
  4024a6:	f002 ffc1 	bl	40542c <__aeabi_dmul>
  4024aa:	a383      	add	r3, pc, #524	; (adr r3, 4026b8 <atan+0x2d8>)
  4024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024b0:	4680      	mov	r8, r0
  4024b2:	4689      	mov	r9, r1
  4024b4:	4630      	mov	r0, r6
  4024b6:	4639      	mov	r1, r7
  4024b8:	f002 ffb8 	bl	40542c <__aeabi_dmul>
  4024bc:	a380      	add	r3, pc, #512	; (adr r3, 4026c0 <atan+0x2e0>)
  4024be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024c2:	f002 fdff 	bl	4050c4 <__aeabi_dsub>
  4024c6:	4632      	mov	r2, r6
  4024c8:	463b      	mov	r3, r7
  4024ca:	f002 ffaf 	bl	40542c <__aeabi_dmul>
  4024ce:	a37e      	add	r3, pc, #504	; (adr r3, 4026c8 <atan+0x2e8>)
  4024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024d4:	f002 fdf6 	bl	4050c4 <__aeabi_dsub>
  4024d8:	4632      	mov	r2, r6
  4024da:	463b      	mov	r3, r7
  4024dc:	f002 ffa6 	bl	40542c <__aeabi_dmul>
  4024e0:	a37b      	add	r3, pc, #492	; (adr r3, 4026d0 <atan+0x2f0>)
  4024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024e6:	f002 fded 	bl	4050c4 <__aeabi_dsub>
  4024ea:	4632      	mov	r2, r6
  4024ec:	463b      	mov	r3, r7
  4024ee:	f002 ff9d 	bl	40542c <__aeabi_dmul>
  4024f2:	a379      	add	r3, pc, #484	; (adr r3, 4026d8 <atan+0x2f8>)
  4024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4024f8:	f002 fde4 	bl	4050c4 <__aeabi_dsub>
  4024fc:	4632      	mov	r2, r6
  4024fe:	463b      	mov	r3, r7
  402500:	f002 ff94 	bl	40542c <__aeabi_dmul>
  402504:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  402508:	4602      	mov	r2, r0
  40250a:	460b      	mov	r3, r1
  40250c:	d069      	beq.n	4025e2 <atan+0x202>
  40250e:	4640      	mov	r0, r8
  402510:	4649      	mov	r1, r9
  402512:	f002 fdd9 	bl	4050c8 <__adddf3>
  402516:	4622      	mov	r2, r4
  402518:	462b      	mov	r3, r5
  40251a:	f002 ff87 	bl	40542c <__aeabi_dmul>
  40251e:	4e78      	ldr	r6, [pc, #480]	; (402700 <atan+0x320>)
  402520:	4b78      	ldr	r3, [pc, #480]	; (402704 <atan+0x324>)
  402522:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402526:	445e      	add	r6, fp
  402528:	449b      	add	fp, r3
  40252a:	e9db 2300 	ldrd	r2, r3, [fp]
  40252e:	f002 fdc9 	bl	4050c4 <__aeabi_dsub>
  402532:	4622      	mov	r2, r4
  402534:	462b      	mov	r3, r5
  402536:	f002 fdc5 	bl	4050c4 <__aeabi_dsub>
  40253a:	4602      	mov	r2, r0
  40253c:	460b      	mov	r3, r1
  40253e:	e9d6 0100 	ldrd	r0, r1, [r6]
  402542:	f002 fdbf 	bl	4050c4 <__aeabi_dsub>
  402546:	f1ba 0f00 	cmp.w	sl, #0
  40254a:	4604      	mov	r4, r0
  40254c:	f6bf af5f 	bge.w	40240e <atan+0x2e>
  402550:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402554:	4620      	mov	r0, r4
  402556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40255a:	2800      	cmp	r0, #0
  40255c:	f43f af50 	beq.w	402400 <atan+0x20>
  402560:	4622      	mov	r2, r4
  402562:	4620      	mov	r0, r4
  402564:	462b      	mov	r3, r5
  402566:	4629      	mov	r1, r5
  402568:	f002 fdae 	bl	4050c8 <__adddf3>
  40256c:	4604      	mov	r4, r0
  40256e:	4620      	mov	r0, r4
  402570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402574:	a35a      	add	r3, pc, #360	; (adr r3, 4026e0 <atan+0x300>)
  402576:	e9d3 2300 	ldrd	r2, r3, [r3]
  40257a:	f002 fda5 	bl	4050c8 <__adddf3>
  40257e:	2200      	movs	r2, #0
  402580:	4b61      	ldr	r3, [pc, #388]	; (402708 <atan+0x328>)
  402582:	f003 f9e3 	bl	40594c <__aeabi_dcmpgt>
  402586:	2800      	cmp	r0, #0
  402588:	f43f af4d 	beq.w	402426 <atan+0x46>
  40258c:	4629      	mov	r1, r5
  40258e:	4620      	mov	r0, r4
  402590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402594:	f000 f8c2 	bl	40271c <fabs>
  402598:	4b5c      	ldr	r3, [pc, #368]	; (40270c <atan+0x32c>)
  40259a:	429e      	cmp	r6, r3
  40259c:	4604      	mov	r4, r0
  40259e:	460d      	mov	r5, r1
  4025a0:	dc2f      	bgt.n	402602 <atan+0x222>
  4025a2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  4025a6:	429e      	cmp	r6, r3
  4025a8:	dc54      	bgt.n	402654 <atan+0x274>
  4025aa:	4602      	mov	r2, r0
  4025ac:	460b      	mov	r3, r1
  4025ae:	f002 fd8b 	bl	4050c8 <__adddf3>
  4025b2:	2200      	movs	r2, #0
  4025b4:	4b54      	ldr	r3, [pc, #336]	; (402708 <atan+0x328>)
  4025b6:	f002 fd85 	bl	4050c4 <__aeabi_dsub>
  4025ba:	2200      	movs	r2, #0
  4025bc:	4606      	mov	r6, r0
  4025be:	460f      	mov	r7, r1
  4025c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4025c4:	4620      	mov	r0, r4
  4025c6:	4629      	mov	r1, r5
  4025c8:	f002 fd7e 	bl	4050c8 <__adddf3>
  4025cc:	4602      	mov	r2, r0
  4025ce:	460b      	mov	r3, r1
  4025d0:	4630      	mov	r0, r6
  4025d2:	4639      	mov	r1, r7
  4025d4:	f003 f854 	bl	405680 <__aeabi_ddiv>
  4025d8:	f04f 0b00 	mov.w	fp, #0
  4025dc:	4604      	mov	r4, r0
  4025de:	460d      	mov	r5, r1
  4025e0:	e723      	b.n	40242a <atan+0x4a>
  4025e2:	4640      	mov	r0, r8
  4025e4:	4649      	mov	r1, r9
  4025e6:	f002 fd6f 	bl	4050c8 <__adddf3>
  4025ea:	4622      	mov	r2, r4
  4025ec:	462b      	mov	r3, r5
  4025ee:	f002 ff1d 	bl	40542c <__aeabi_dmul>
  4025f2:	4602      	mov	r2, r0
  4025f4:	460b      	mov	r3, r1
  4025f6:	4620      	mov	r0, r4
  4025f8:	4629      	mov	r1, r5
  4025fa:	f002 fd63 	bl	4050c4 <__aeabi_dsub>
  4025fe:	4604      	mov	r4, r0
  402600:	e705      	b.n	40240e <atan+0x2e>
  402602:	4b43      	ldr	r3, [pc, #268]	; (402710 <atan+0x330>)
  402604:	429e      	cmp	r6, r3
  402606:	dc1a      	bgt.n	40263e <atan+0x25e>
  402608:	2200      	movs	r2, #0
  40260a:	4b42      	ldr	r3, [pc, #264]	; (402714 <atan+0x334>)
  40260c:	f002 fd5a 	bl	4050c4 <__aeabi_dsub>
  402610:	2200      	movs	r2, #0
  402612:	4606      	mov	r6, r0
  402614:	460f      	mov	r7, r1
  402616:	4b3f      	ldr	r3, [pc, #252]	; (402714 <atan+0x334>)
  402618:	4620      	mov	r0, r4
  40261a:	4629      	mov	r1, r5
  40261c:	f002 ff06 	bl	40542c <__aeabi_dmul>
  402620:	2200      	movs	r2, #0
  402622:	4b39      	ldr	r3, [pc, #228]	; (402708 <atan+0x328>)
  402624:	f002 fd50 	bl	4050c8 <__adddf3>
  402628:	4602      	mov	r2, r0
  40262a:	460b      	mov	r3, r1
  40262c:	4630      	mov	r0, r6
  40262e:	4639      	mov	r1, r7
  402630:	f003 f826 	bl	405680 <__aeabi_ddiv>
  402634:	f04f 0b02 	mov.w	fp, #2
  402638:	4604      	mov	r4, r0
  40263a:	460d      	mov	r5, r1
  40263c:	e6f5      	b.n	40242a <atan+0x4a>
  40263e:	4602      	mov	r2, r0
  402640:	460b      	mov	r3, r1
  402642:	2000      	movs	r0, #0
  402644:	4934      	ldr	r1, [pc, #208]	; (402718 <atan+0x338>)
  402646:	f003 f81b 	bl	405680 <__aeabi_ddiv>
  40264a:	f04f 0b03 	mov.w	fp, #3
  40264e:	4604      	mov	r4, r0
  402650:	460d      	mov	r5, r1
  402652:	e6ea      	b.n	40242a <atan+0x4a>
  402654:	2200      	movs	r2, #0
  402656:	4b2c      	ldr	r3, [pc, #176]	; (402708 <atan+0x328>)
  402658:	f002 fd34 	bl	4050c4 <__aeabi_dsub>
  40265c:	2200      	movs	r2, #0
  40265e:	4606      	mov	r6, r0
  402660:	460f      	mov	r7, r1
  402662:	4b29      	ldr	r3, [pc, #164]	; (402708 <atan+0x328>)
  402664:	4620      	mov	r0, r4
  402666:	4629      	mov	r1, r5
  402668:	f002 fd2e 	bl	4050c8 <__adddf3>
  40266c:	4602      	mov	r2, r0
  40266e:	460b      	mov	r3, r1
  402670:	4630      	mov	r0, r6
  402672:	4639      	mov	r1, r7
  402674:	f003 f804 	bl	405680 <__aeabi_ddiv>
  402678:	f04f 0b01 	mov.w	fp, #1
  40267c:	4604      	mov	r4, r0
  40267e:	460d      	mov	r5, r1
  402680:	e6d3      	b.n	40242a <atan+0x4a>
  402682:	bf00      	nop
  402684:	f3af 8000 	nop.w
  402688:	e322da11 	.word	0xe322da11
  40268c:	3f90ad3a 	.word	0x3f90ad3a
  402690:	24760deb 	.word	0x24760deb
  402694:	3fa97b4b 	.word	0x3fa97b4b
  402698:	a0d03d51 	.word	0xa0d03d51
  40269c:	3fb10d66 	.word	0x3fb10d66
  4026a0:	c54c206e 	.word	0xc54c206e
  4026a4:	3fb745cd 	.word	0x3fb745cd
  4026a8:	920083ff 	.word	0x920083ff
  4026ac:	3fc24924 	.word	0x3fc24924
  4026b0:	5555550d 	.word	0x5555550d
  4026b4:	3fd55555 	.word	0x3fd55555
  4026b8:	2c6a6c2f 	.word	0x2c6a6c2f
  4026bc:	bfa2b444 	.word	0xbfa2b444
  4026c0:	52defd9a 	.word	0x52defd9a
  4026c4:	3fadde2d 	.word	0x3fadde2d
  4026c8:	af749a6d 	.word	0xaf749a6d
  4026cc:	3fb3b0f2 	.word	0x3fb3b0f2
  4026d0:	fe231671 	.word	0xfe231671
  4026d4:	3fbc71c6 	.word	0x3fbc71c6
  4026d8:	9998ebc4 	.word	0x9998ebc4
  4026dc:	3fc99999 	.word	0x3fc99999
  4026e0:	8800759c 	.word	0x8800759c
  4026e4:	7e37e43c 	.word	0x7e37e43c
  4026e8:	440fffff 	.word	0x440fffff
  4026ec:	7ff00000 	.word	0x7ff00000
  4026f0:	3ff921fb 	.word	0x3ff921fb
  4026f4:	bff921fb 	.word	0xbff921fb
  4026f8:	54442d18 	.word	0x54442d18
  4026fc:	3fdbffff 	.word	0x3fdbffff
  402700:	004062f0 	.word	0x004062f0
  402704:	004062d0 	.word	0x004062d0
  402708:	3ff00000 	.word	0x3ff00000
  40270c:	3ff2ffff 	.word	0x3ff2ffff
  402710:	40037fff 	.word	0x40037fff
  402714:	3ff80000 	.word	0x3ff80000
  402718:	bff00000 	.word	0xbff00000

0040271c <fabs>:
  40271c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402720:	4770      	bx	lr
  402722:	bf00      	nop

00402724 <matherr>:
  402724:	2000      	movs	r0, #0
  402726:	4770      	bx	lr

00402728 <__errno>:
  402728:	4b01      	ldr	r3, [pc, #4]	; (402730 <__errno+0x8>)
  40272a:	6818      	ldr	r0, [r3, #0]
  40272c:	4770      	bx	lr
  40272e:	bf00      	nop
  402730:	20000074 	.word	0x20000074

00402734 <__libc_init_array>:
  402734:	b570      	push	{r4, r5, r6, lr}
  402736:	4b0e      	ldr	r3, [pc, #56]	; (402770 <__libc_init_array+0x3c>)
  402738:	4c0e      	ldr	r4, [pc, #56]	; (402774 <__libc_init_array+0x40>)
  40273a:	1ae4      	subs	r4, r4, r3
  40273c:	10a4      	asrs	r4, r4, #2
  40273e:	2500      	movs	r5, #0
  402740:	461e      	mov	r6, r3
  402742:	42a5      	cmp	r5, r4
  402744:	d004      	beq.n	402750 <__libc_init_array+0x1c>
  402746:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40274a:	4798      	blx	r3
  40274c:	3501      	adds	r5, #1
  40274e:	e7f8      	b.n	402742 <__libc_init_array+0xe>
  402750:	f003 ff3e 	bl	4065d0 <_init>
  402754:	4c08      	ldr	r4, [pc, #32]	; (402778 <__libc_init_array+0x44>)
  402756:	4b09      	ldr	r3, [pc, #36]	; (40277c <__libc_init_array+0x48>)
  402758:	1ae4      	subs	r4, r4, r3
  40275a:	10a4      	asrs	r4, r4, #2
  40275c:	2500      	movs	r5, #0
  40275e:	461e      	mov	r6, r3
  402760:	42a5      	cmp	r5, r4
  402762:	d004      	beq.n	40276e <__libc_init_array+0x3a>
  402764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402768:	4798      	blx	r3
  40276a:	3501      	adds	r5, #1
  40276c:	e7f8      	b.n	402760 <__libc_init_array+0x2c>
  40276e:	bd70      	pop	{r4, r5, r6, pc}
  402770:	004065dc 	.word	0x004065dc
  402774:	004065dc 	.word	0x004065dc
  402778:	004065e0 	.word	0x004065e0
  40277c:	004065dc 	.word	0x004065dc

00402780 <memset>:
  402780:	4402      	add	r2, r0
  402782:	4603      	mov	r3, r0
  402784:	4293      	cmp	r3, r2
  402786:	d002      	beq.n	40278e <memset+0xe>
  402788:	f803 1b01 	strb.w	r1, [r3], #1
  40278c:	e7fa      	b.n	402784 <memset+0x4>
  40278e:	4770      	bx	lr

00402790 <__cvt>:
  402790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402794:	b088      	sub	sp, #32
  402796:	2b00      	cmp	r3, #0
  402798:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40279a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40279c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40279e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  4027a2:	461e      	mov	r6, r3
  4027a4:	f027 0720 	bic.w	r7, r7, #32
  4027a8:	bfbb      	ittet	lt
  4027aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  4027ae:	461e      	movlt	r6, r3
  4027b0:	2300      	movge	r3, #0
  4027b2:	232d      	movlt	r3, #45	; 0x2d
  4027b4:	2f46      	cmp	r7, #70	; 0x46
  4027b6:	4614      	mov	r4, r2
  4027b8:	700b      	strb	r3, [r1, #0]
  4027ba:	d003      	beq.n	4027c4 <__cvt+0x34>
  4027bc:	2f45      	cmp	r7, #69	; 0x45
  4027be:	d103      	bne.n	4027c8 <__cvt+0x38>
  4027c0:	3501      	adds	r5, #1
  4027c2:	e001      	b.n	4027c8 <__cvt+0x38>
  4027c4:	2303      	movs	r3, #3
  4027c6:	e000      	b.n	4027ca <__cvt+0x3a>
  4027c8:	2302      	movs	r3, #2
  4027ca:	aa07      	add	r2, sp, #28
  4027cc:	9204      	str	r2, [sp, #16]
  4027ce:	aa06      	add	r2, sp, #24
  4027d0:	9203      	str	r2, [sp, #12]
  4027d2:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  4027d6:	4622      	mov	r2, r4
  4027d8:	4633      	mov	r3, r6
  4027da:	f000 fed1 	bl	403580 <_dtoa_r>
  4027de:	2f47      	cmp	r7, #71	; 0x47
  4027e0:	4680      	mov	r8, r0
  4027e2:	d102      	bne.n	4027ea <__cvt+0x5a>
  4027e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4027e6:	07db      	lsls	r3, r3, #31
  4027e8:	d528      	bpl.n	40283c <__cvt+0xac>
  4027ea:	2f46      	cmp	r7, #70	; 0x46
  4027ec:	eb08 0905 	add.w	r9, r8, r5
  4027f0:	d111      	bne.n	402816 <__cvt+0x86>
  4027f2:	f898 3000 	ldrb.w	r3, [r8]
  4027f6:	2b30      	cmp	r3, #48	; 0x30
  4027f8:	d10a      	bne.n	402810 <__cvt+0x80>
  4027fa:	2200      	movs	r2, #0
  4027fc:	2300      	movs	r3, #0
  4027fe:	4620      	mov	r0, r4
  402800:	4631      	mov	r1, r6
  402802:	f003 f87b 	bl	4058fc <__aeabi_dcmpeq>
  402806:	b918      	cbnz	r0, 402810 <__cvt+0x80>
  402808:	f1c5 0501 	rsb	r5, r5, #1
  40280c:	f8ca 5000 	str.w	r5, [sl]
  402810:	f8da 3000 	ldr.w	r3, [sl]
  402814:	4499      	add	r9, r3
  402816:	2200      	movs	r2, #0
  402818:	2300      	movs	r3, #0
  40281a:	4620      	mov	r0, r4
  40281c:	4631      	mov	r1, r6
  40281e:	f003 f86d 	bl	4058fc <__aeabi_dcmpeq>
  402822:	b908      	cbnz	r0, 402828 <__cvt+0x98>
  402824:	2230      	movs	r2, #48	; 0x30
  402826:	e002      	b.n	40282e <__cvt+0x9e>
  402828:	f8cd 901c 	str.w	r9, [sp, #28]
  40282c:	e006      	b.n	40283c <__cvt+0xac>
  40282e:	9b07      	ldr	r3, [sp, #28]
  402830:	4599      	cmp	r9, r3
  402832:	d903      	bls.n	40283c <__cvt+0xac>
  402834:	1c59      	adds	r1, r3, #1
  402836:	9107      	str	r1, [sp, #28]
  402838:	701a      	strb	r2, [r3, #0]
  40283a:	e7f8      	b.n	40282e <__cvt+0x9e>
  40283c:	9b07      	ldr	r3, [sp, #28]
  40283e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  402840:	ebc8 0303 	rsb	r3, r8, r3
  402844:	4640      	mov	r0, r8
  402846:	6013      	str	r3, [r2, #0]
  402848:	b008      	add	sp, #32
  40284a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040284e <__exponent>:
  40284e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  402850:	4603      	mov	r3, r0
  402852:	2900      	cmp	r1, #0
  402854:	bfb8      	it	lt
  402856:	4249      	neglt	r1, r1
  402858:	f803 2b02 	strb.w	r2, [r3], #2
  40285c:	bfb4      	ite	lt
  40285e:	222d      	movlt	r2, #45	; 0x2d
  402860:	222b      	movge	r2, #43	; 0x2b
  402862:	2909      	cmp	r1, #9
  402864:	7042      	strb	r2, [r0, #1]
  402866:	dd19      	ble.n	40289c <__exponent+0x4e>
  402868:	f10d 0207 	add.w	r2, sp, #7
  40286c:	4616      	mov	r6, r2
  40286e:	250a      	movs	r5, #10
  402870:	fb91 f4f5 	sdiv	r4, r1, r5
  402874:	fb05 1114 	mls	r1, r5, r4, r1
  402878:	3130      	adds	r1, #48	; 0x30
  40287a:	2c09      	cmp	r4, #9
  40287c:	f802 1d01 	strb.w	r1, [r2, #-1]!
  402880:	4621      	mov	r1, r4
  402882:	dcf5      	bgt.n	402870 <__exponent+0x22>
  402884:	3130      	adds	r1, #48	; 0x30
  402886:	1e54      	subs	r4, r2, #1
  402888:	f802 1c01 	strb.w	r1, [r2, #-1]
  40288c:	42b4      	cmp	r4, r6
  40288e:	461a      	mov	r2, r3
  402890:	d20a      	bcs.n	4028a8 <__exponent+0x5a>
  402892:	f814 2b01 	ldrb.w	r2, [r4], #1
  402896:	f803 2b01 	strb.w	r2, [r3], #1
  40289a:	e7f7      	b.n	40288c <__exponent+0x3e>
  40289c:	2430      	movs	r4, #48	; 0x30
  40289e:	461a      	mov	r2, r3
  4028a0:	4421      	add	r1, r4
  4028a2:	f802 4b02 	strb.w	r4, [r2], #2
  4028a6:	7059      	strb	r1, [r3, #1]
  4028a8:	1a10      	subs	r0, r2, r0
  4028aa:	b002      	add	sp, #8
  4028ac:	bd70      	pop	{r4, r5, r6, pc}
	...

004028b0 <_printf_float>:
  4028b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028b4:	b091      	sub	sp, #68	; 0x44
  4028b6:	460c      	mov	r4, r1
  4028b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  4028bc:	4616      	mov	r6, r2
  4028be:	461f      	mov	r7, r3
  4028c0:	4605      	mov	r5, r0
  4028c2:	f001 fd75 	bl	4043b0 <_localeconv_r>
  4028c6:	6803      	ldr	r3, [r0, #0]
  4028c8:	9309      	str	r3, [sp, #36]	; 0x24
  4028ca:	4618      	mov	r0, r3
  4028cc:	f000 fcfc 	bl	4032c8 <strlen>
  4028d0:	2300      	movs	r3, #0
  4028d2:	930e      	str	r3, [sp, #56]	; 0x38
  4028d4:	f8d8 3000 	ldr.w	r3, [r8]
  4028d8:	900a      	str	r0, [sp, #40]	; 0x28
  4028da:	3307      	adds	r3, #7
  4028dc:	f023 0307 	bic.w	r3, r3, #7
  4028e0:	f103 0208 	add.w	r2, r3, #8
  4028e4:	f894 9018 	ldrb.w	r9, [r4, #24]
  4028e8:	f8d4 b000 	ldr.w	fp, [r4]
  4028ec:	f8c8 2000 	str.w	r2, [r8]
  4028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4028f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  4028f8:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  4028fc:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402900:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402904:	930b      	str	r3, [sp, #44]	; 0x2c
  402906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40290a:	4ba7      	ldr	r3, [pc, #668]	; (402ba8 <_printf_float+0x2f8>)
  40290c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40290e:	4640      	mov	r0, r8
  402910:	f003 f826 	bl	405960 <__aeabi_dcmpun>
  402914:	b9a0      	cbnz	r0, 402940 <_printf_float+0x90>
  402916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40291a:	4ba3      	ldr	r3, [pc, #652]	; (402ba8 <_printf_float+0x2f8>)
  40291c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40291e:	4640      	mov	r0, r8
  402920:	f003 f800 	bl	405924 <__aeabi_dcmple>
  402924:	b960      	cbnz	r0, 402940 <_printf_float+0x90>
  402926:	2200      	movs	r2, #0
  402928:	2300      	movs	r3, #0
  40292a:	4640      	mov	r0, r8
  40292c:	4651      	mov	r1, sl
  40292e:	f002 ffef 	bl	405910 <__aeabi_dcmplt>
  402932:	b110      	cbz	r0, 40293a <_printf_float+0x8a>
  402934:	232d      	movs	r3, #45	; 0x2d
  402936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40293a:	4b9c      	ldr	r3, [pc, #624]	; (402bac <_printf_float+0x2fc>)
  40293c:	4a9c      	ldr	r2, [pc, #624]	; (402bb0 <_printf_float+0x300>)
  40293e:	e00a      	b.n	402956 <_printf_float+0xa6>
  402940:	4642      	mov	r2, r8
  402942:	4653      	mov	r3, sl
  402944:	4640      	mov	r0, r8
  402946:	4651      	mov	r1, sl
  402948:	f003 f80a 	bl	405960 <__aeabi_dcmpun>
  40294c:	2800      	cmp	r0, #0
  40294e:	f000 8192 	beq.w	402c76 <_printf_float+0x3c6>
  402952:	4b98      	ldr	r3, [pc, #608]	; (402bb4 <_printf_float+0x304>)
  402954:	4a98      	ldr	r2, [pc, #608]	; (402bb8 <_printf_float+0x308>)
  402956:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  40295a:	bf8c      	ite	hi
  40295c:	4690      	movhi	r8, r2
  40295e:	4698      	movls	r8, r3
  402960:	2303      	movs	r3, #3
  402962:	6123      	str	r3, [r4, #16]
  402964:	f02b 0304 	bic.w	r3, fp, #4
  402968:	6023      	str	r3, [r4, #0]
  40296a:	f04f 0a00 	mov.w	sl, #0
  40296e:	e03d      	b.n	4029ec <_printf_float+0x13c>
  402970:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  402974:	f000 818a 	beq.w	402c8c <_printf_float+0x3dc>
  402978:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  40297c:	f000 8186 	beq.w	402c8c <_printf_float+0x3dc>
  402980:	6023      	str	r3, [r4, #0]
  402982:	2100      	movs	r1, #0
  402984:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402988:	9301      	str	r3, [sp, #4]
  40298a:	6863      	ldr	r3, [r4, #4]
  40298c:	9005      	str	r0, [sp, #20]
  40298e:	9202      	str	r2, [sp, #8]
  402990:	9300      	str	r3, [sp, #0]
  402992:	4642      	mov	r2, r8
  402994:	4653      	mov	r3, sl
  402996:	9106      	str	r1, [sp, #24]
  402998:	f8cd 9010 	str.w	r9, [sp, #16]
  40299c:	f8cd e00c 	str.w	lr, [sp, #12]
  4029a0:	4628      	mov	r0, r5
  4029a2:	f7ff fef5 	bl	402790 <__cvt>
  4029a6:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  4029aa:	2b47      	cmp	r3, #71	; 0x47
  4029ac:	4680      	mov	r8, r0
  4029ae:	f000 8184 	beq.w	402cba <_printf_float+0x40a>
  4029b2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  4029b6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4029b8:	f200 818d 	bhi.w	402cd6 <_printf_float+0x426>
  4029bc:	3901      	subs	r1, #1
  4029be:	464a      	mov	r2, r9
  4029c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
  4029c4:	910d      	str	r1, [sp, #52]	; 0x34
  4029c6:	f7ff ff42 	bl	40284e <__exponent>
  4029ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4029cc:	1883      	adds	r3, r0, r2
  4029ce:	2a01      	cmp	r2, #1
  4029d0:	4682      	mov	sl, r0
  4029d2:	6123      	str	r3, [r4, #16]
  4029d4:	f300 817c 	bgt.w	402cd0 <_printf_float+0x420>
  4029d8:	6822      	ldr	r2, [r4, #0]
  4029da:	07d1      	lsls	r1, r2, #31
  4029dc:	f100 8178 	bmi.w	402cd0 <_printf_float+0x420>
  4029e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  4029e4:	b113      	cbz	r3, 4029ec <_printf_float+0x13c>
  4029e6:	232d      	movs	r3, #45	; 0x2d
  4029e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4029ec:	9700      	str	r7, [sp, #0]
  4029ee:	4633      	mov	r3, r6
  4029f0:	aa0f      	add	r2, sp, #60	; 0x3c
  4029f2:	4621      	mov	r1, r4
  4029f4:	4628      	mov	r0, r5
  4029f6:	f000 f99f 	bl	402d38 <_printf_common>
  4029fa:	3001      	adds	r0, #1
  4029fc:	d102      	bne.n	402a04 <_printf_float+0x154>
  4029fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402a02:	e196      	b.n	402d32 <_printf_float+0x482>
  402a04:	6823      	ldr	r3, [r4, #0]
  402a06:	055a      	lsls	r2, r3, #21
  402a08:	d401      	bmi.n	402a0e <_printf_float+0x15e>
  402a0a:	6923      	ldr	r3, [r4, #16]
  402a0c:	e065      	b.n	402ada <_printf_float+0x22a>
  402a0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402a12:	f240 80d5 	bls.w	402bc0 <_printf_float+0x310>
  402a16:	2200      	movs	r2, #0
  402a18:	2300      	movs	r3, #0
  402a1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402a1e:	f002 ff6d 	bl	4058fc <__aeabi_dcmpeq>
  402a22:	b378      	cbz	r0, 402a84 <_printf_float+0x1d4>
  402a24:	2301      	movs	r3, #1
  402a26:	4a65      	ldr	r2, [pc, #404]	; (402bbc <_printf_float+0x30c>)
  402a28:	4631      	mov	r1, r6
  402a2a:	4628      	mov	r0, r5
  402a2c:	47b8      	blx	r7
  402a2e:	3001      	adds	r0, #1
  402a30:	d0e5      	beq.n	4029fe <_printf_float+0x14e>
  402a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402a36:	429a      	cmp	r2, r3
  402a38:	db0b      	blt.n	402a52 <_printf_float+0x1a2>
  402a3a:	6823      	ldr	r3, [r4, #0]
  402a3c:	07d8      	lsls	r0, r3, #31
  402a3e:	d408      	bmi.n	402a52 <_printf_float+0x1a2>
  402a40:	6823      	ldr	r3, [r4, #0]
  402a42:	079b      	lsls	r3, r3, #30
  402a44:	f140 8111 	bpl.w	402c6a <_printf_float+0x3ba>
  402a48:	f04f 0800 	mov.w	r8, #0
  402a4c:	f104 0919 	add.w	r9, r4, #25
  402a50:	e106      	b.n	402c60 <_printf_float+0x3b0>
  402a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402a56:	4631      	mov	r1, r6
  402a58:	4628      	mov	r0, r5
  402a5a:	47b8      	blx	r7
  402a5c:	3001      	adds	r0, #1
  402a5e:	d0ce      	beq.n	4029fe <_printf_float+0x14e>
  402a60:	f04f 0800 	mov.w	r8, #0
  402a64:	f104 091a 	add.w	r9, r4, #26
  402a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a6a:	3b01      	subs	r3, #1
  402a6c:	4598      	cmp	r8, r3
  402a6e:	dae7      	bge.n	402a40 <_printf_float+0x190>
  402a70:	2301      	movs	r3, #1
  402a72:	464a      	mov	r2, r9
  402a74:	4631      	mov	r1, r6
  402a76:	4628      	mov	r0, r5
  402a78:	47b8      	blx	r7
  402a7a:	3001      	adds	r0, #1
  402a7c:	d0bf      	beq.n	4029fe <_printf_float+0x14e>
  402a7e:	f108 0801 	add.w	r8, r8, #1
  402a82:	e7f1      	b.n	402a68 <_printf_float+0x1b8>
  402a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402a86:	2b00      	cmp	r3, #0
  402a88:	dc29      	bgt.n	402ade <_printf_float+0x22e>
  402a8a:	2301      	movs	r3, #1
  402a8c:	4a4b      	ldr	r2, [pc, #300]	; (402bbc <_printf_float+0x30c>)
  402a8e:	4631      	mov	r1, r6
  402a90:	4628      	mov	r0, r5
  402a92:	47b8      	blx	r7
  402a94:	3001      	adds	r0, #1
  402a96:	d0b2      	beq.n	4029fe <_printf_float+0x14e>
  402a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402a9a:	b923      	cbnz	r3, 402aa6 <_printf_float+0x1f6>
  402a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402a9e:	b913      	cbnz	r3, 402aa6 <_printf_float+0x1f6>
  402aa0:	6823      	ldr	r3, [r4, #0]
  402aa2:	07d9      	lsls	r1, r3, #31
  402aa4:	d5cc      	bpl.n	402a40 <_printf_float+0x190>
  402aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402aaa:	4631      	mov	r1, r6
  402aac:	4628      	mov	r0, r5
  402aae:	47b8      	blx	r7
  402ab0:	3001      	adds	r0, #1
  402ab2:	d0a4      	beq.n	4029fe <_printf_float+0x14e>
  402ab4:	f04f 0900 	mov.w	r9, #0
  402ab8:	f104 0a1a 	add.w	sl, r4, #26
  402abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402abe:	425b      	negs	r3, r3
  402ac0:	4599      	cmp	r9, r3
  402ac2:	da09      	bge.n	402ad8 <_printf_float+0x228>
  402ac4:	2301      	movs	r3, #1
  402ac6:	4652      	mov	r2, sl
  402ac8:	4631      	mov	r1, r6
  402aca:	4628      	mov	r0, r5
  402acc:	47b8      	blx	r7
  402ace:	3001      	adds	r0, #1
  402ad0:	d095      	beq.n	4029fe <_printf_float+0x14e>
  402ad2:	f109 0901 	add.w	r9, r9, #1
  402ad6:	e7f1      	b.n	402abc <_printf_float+0x20c>
  402ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402ada:	4642      	mov	r2, r8
  402adc:	e0a7      	b.n	402c2e <_printf_float+0x37e>
  402ade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402ae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402ae2:	429a      	cmp	r2, r3
  402ae4:	bfa8      	it	ge
  402ae6:	461a      	movge	r2, r3
  402ae8:	2a00      	cmp	r2, #0
  402aea:	4691      	mov	r9, r2
  402aec:	dc06      	bgt.n	402afc <_printf_float+0x24c>
  402aee:	f04f 0a00 	mov.w	sl, #0
  402af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  402af6:	f104 0b1a 	add.w	fp, r4, #26
  402afa:	e011      	b.n	402b20 <_printf_float+0x270>
  402afc:	4613      	mov	r3, r2
  402afe:	4631      	mov	r1, r6
  402b00:	4642      	mov	r2, r8
  402b02:	4628      	mov	r0, r5
  402b04:	47b8      	blx	r7
  402b06:	3001      	adds	r0, #1
  402b08:	d1f1      	bne.n	402aee <_printf_float+0x23e>
  402b0a:	e778      	b.n	4029fe <_printf_float+0x14e>
  402b0c:	2301      	movs	r3, #1
  402b0e:	465a      	mov	r2, fp
  402b10:	4631      	mov	r1, r6
  402b12:	4628      	mov	r0, r5
  402b14:	47b8      	blx	r7
  402b16:	3001      	adds	r0, #1
  402b18:	f43f af71 	beq.w	4029fe <_printf_float+0x14e>
  402b1c:	f10a 0a01 	add.w	sl, sl, #1
  402b20:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402b22:	ebc9 0203 	rsb	r2, r9, r3
  402b26:	4592      	cmp	sl, r2
  402b28:	dbf0      	blt.n	402b0c <_printf_float+0x25c>
  402b2a:	eb08 0903 	add.w	r9, r8, r3
  402b2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b32:	429a      	cmp	r2, r3
  402b34:	db0f      	blt.n	402b56 <_printf_float+0x2a6>
  402b36:	6823      	ldr	r3, [r4, #0]
  402b38:	07da      	lsls	r2, r3, #31
  402b3a:	d40c      	bmi.n	402b56 <_printf_float+0x2a6>
  402b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402b40:	4498      	add	r8, r3
  402b42:	ebc9 0808 	rsb	r8, r9, r8
  402b46:	1a9b      	subs	r3, r3, r2
  402b48:	4598      	cmp	r8, r3
  402b4a:	bfa8      	it	ge
  402b4c:	4698      	movge	r8, r3
  402b4e:	f1b8 0f00 	cmp.w	r8, #0
  402b52:	dc08      	bgt.n	402b66 <_printf_float+0x2b6>
  402b54:	e00f      	b.n	402b76 <_printf_float+0x2c6>
  402b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402b5a:	4631      	mov	r1, r6
  402b5c:	4628      	mov	r0, r5
  402b5e:	47b8      	blx	r7
  402b60:	3001      	adds	r0, #1
  402b62:	d1eb      	bne.n	402b3c <_printf_float+0x28c>
  402b64:	e74b      	b.n	4029fe <_printf_float+0x14e>
  402b66:	4643      	mov	r3, r8
  402b68:	464a      	mov	r2, r9
  402b6a:	4631      	mov	r1, r6
  402b6c:	4628      	mov	r0, r5
  402b6e:	47b8      	blx	r7
  402b70:	3001      	adds	r0, #1
  402b72:	f43f af44 	beq.w	4029fe <_printf_float+0x14e>
  402b76:	f04f 0900 	mov.w	r9, #0
  402b7a:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  402b7e:	f104 0a1a 	add.w	sl, r4, #26
  402b82:	e009      	b.n	402b98 <_printf_float+0x2e8>
  402b84:	2301      	movs	r3, #1
  402b86:	4652      	mov	r2, sl
  402b88:	4631      	mov	r1, r6
  402b8a:	4628      	mov	r0, r5
  402b8c:	47b8      	blx	r7
  402b8e:	3001      	adds	r0, #1
  402b90:	f43f af35 	beq.w	4029fe <_printf_float+0x14e>
  402b94:	f109 0901 	add.w	r9, r9, #1
  402b98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402b9c:	1a9b      	subs	r3, r3, r2
  402b9e:	ebc8 0303 	rsb	r3, r8, r3
  402ba2:	4599      	cmp	r9, r3
  402ba4:	dbee      	blt.n	402b84 <_printf_float+0x2d4>
  402ba6:	e74b      	b.n	402a40 <_printf_float+0x190>
  402ba8:	7fefffff 	.word	0x7fefffff
  402bac:	00406314 	.word	0x00406314
  402bb0:	00406318 	.word	0x00406318
  402bb4:	0040631c 	.word	0x0040631c
  402bb8:	00406320 	.word	0x00406320
  402bbc:	00406324 	.word	0x00406324
  402bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402bc2:	2a01      	cmp	r2, #1
  402bc4:	dc01      	bgt.n	402bca <_printf_float+0x31a>
  402bc6:	07db      	lsls	r3, r3, #31
  402bc8:	d538      	bpl.n	402c3c <_printf_float+0x38c>
  402bca:	2301      	movs	r3, #1
  402bcc:	4642      	mov	r2, r8
  402bce:	4631      	mov	r1, r6
  402bd0:	4628      	mov	r0, r5
  402bd2:	47b8      	blx	r7
  402bd4:	3001      	adds	r0, #1
  402bd6:	f43f af12 	beq.w	4029fe <_printf_float+0x14e>
  402bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402bde:	4631      	mov	r1, r6
  402be0:	4628      	mov	r0, r5
  402be2:	47b8      	blx	r7
  402be4:	3001      	adds	r0, #1
  402be6:	f43f af0a 	beq.w	4029fe <_printf_float+0x14e>
  402bea:	2200      	movs	r2, #0
  402bec:	2300      	movs	r3, #0
  402bee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402bf2:	f002 fe83 	bl	4058fc <__aeabi_dcmpeq>
  402bf6:	b120      	cbz	r0, 402c02 <_printf_float+0x352>
  402bf8:	f04f 0800 	mov.w	r8, #0
  402bfc:	f104 091a 	add.w	r9, r4, #26
  402c00:	e00e      	b.n	402c20 <_printf_float+0x370>
  402c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402c04:	f108 0201 	add.w	r2, r8, #1
  402c08:	3b01      	subs	r3, #1
  402c0a:	e019      	b.n	402c40 <_printf_float+0x390>
  402c0c:	2301      	movs	r3, #1
  402c0e:	464a      	mov	r2, r9
  402c10:	4631      	mov	r1, r6
  402c12:	4628      	mov	r0, r5
  402c14:	47b8      	blx	r7
  402c16:	3001      	adds	r0, #1
  402c18:	f43f aef1 	beq.w	4029fe <_printf_float+0x14e>
  402c1c:	f108 0801 	add.w	r8, r8, #1
  402c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402c22:	3b01      	subs	r3, #1
  402c24:	4598      	cmp	r8, r3
  402c26:	dbf1      	blt.n	402c0c <_printf_float+0x35c>
  402c28:	4653      	mov	r3, sl
  402c2a:	f104 0250 	add.w	r2, r4, #80	; 0x50
  402c2e:	4631      	mov	r1, r6
  402c30:	4628      	mov	r0, r5
  402c32:	47b8      	blx	r7
  402c34:	3001      	adds	r0, #1
  402c36:	f47f af03 	bne.w	402a40 <_printf_float+0x190>
  402c3a:	e6e0      	b.n	4029fe <_printf_float+0x14e>
  402c3c:	2301      	movs	r3, #1
  402c3e:	4642      	mov	r2, r8
  402c40:	4631      	mov	r1, r6
  402c42:	4628      	mov	r0, r5
  402c44:	47b8      	blx	r7
  402c46:	3001      	adds	r0, #1
  402c48:	d1ee      	bne.n	402c28 <_printf_float+0x378>
  402c4a:	e6d8      	b.n	4029fe <_printf_float+0x14e>
  402c4c:	2301      	movs	r3, #1
  402c4e:	464a      	mov	r2, r9
  402c50:	4631      	mov	r1, r6
  402c52:	4628      	mov	r0, r5
  402c54:	47b8      	blx	r7
  402c56:	3001      	adds	r0, #1
  402c58:	f43f aed1 	beq.w	4029fe <_printf_float+0x14e>
  402c5c:	f108 0801 	add.w	r8, r8, #1
  402c60:	68e3      	ldr	r3, [r4, #12]
  402c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c64:	1a9b      	subs	r3, r3, r2
  402c66:	4598      	cmp	r8, r3
  402c68:	dbf0      	blt.n	402c4c <_printf_float+0x39c>
  402c6a:	68e0      	ldr	r0, [r4, #12]
  402c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402c6e:	4298      	cmp	r0, r3
  402c70:	bfb8      	it	lt
  402c72:	4618      	movlt	r0, r3
  402c74:	e05d      	b.n	402d32 <_printf_float+0x482>
  402c76:	6862      	ldr	r2, [r4, #4]
  402c78:	1c53      	adds	r3, r2, #1
  402c7a:	a80e      	add	r0, sp, #56	; 0x38
  402c7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  402c80:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402c84:	f47f ae74 	bne.w	402970 <_printf_float+0xc0>
  402c88:	2206      	movs	r2, #6
  402c8a:	e001      	b.n	402c90 <_printf_float+0x3e0>
  402c8c:	b912      	cbnz	r2, 402c94 <_printf_float+0x3e4>
  402c8e:	2201      	movs	r2, #1
  402c90:	6062      	str	r2, [r4, #4]
  402c92:	e675      	b.n	402980 <_printf_float+0xd0>
  402c94:	2100      	movs	r1, #0
  402c96:	9106      	str	r1, [sp, #24]
  402c98:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  402c9c:	e88d 000c 	stmia.w	sp, {r2, r3}
  402ca0:	6023      	str	r3, [r4, #0]
  402ca2:	9005      	str	r0, [sp, #20]
  402ca4:	4642      	mov	r2, r8
  402ca6:	f8cd 9010 	str.w	r9, [sp, #16]
  402caa:	f8cd e00c 	str.w	lr, [sp, #12]
  402cae:	9102      	str	r1, [sp, #8]
  402cb0:	4653      	mov	r3, sl
  402cb2:	4628      	mov	r0, r5
  402cb4:	f7ff fd6c 	bl	402790 <__cvt>
  402cb8:	4680      	mov	r8, r0
  402cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402cbc:	1cd8      	adds	r0, r3, #3
  402cbe:	db02      	blt.n	402cc6 <_printf_float+0x416>
  402cc0:	6862      	ldr	r2, [r4, #4]
  402cc2:	4293      	cmp	r3, r2
  402cc4:	dd1d      	ble.n	402d02 <_printf_float+0x452>
  402cc6:	f1a9 0902 	sub.w	r9, r9, #2
  402cca:	fa5f f989 	uxtb.w	r9, r9
  402cce:	e670      	b.n	4029b2 <_printf_float+0x102>
  402cd0:	3301      	adds	r3, #1
  402cd2:	6123      	str	r3, [r4, #16]
  402cd4:	e684      	b.n	4029e0 <_printf_float+0x130>
  402cd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  402cda:	d114      	bne.n	402d06 <_printf_float+0x456>
  402cdc:	2900      	cmp	r1, #0
  402cde:	6863      	ldr	r3, [r4, #4]
  402ce0:	dd07      	ble.n	402cf2 <_printf_float+0x442>
  402ce2:	6121      	str	r1, [r4, #16]
  402ce4:	b913      	cbnz	r3, 402cec <_printf_float+0x43c>
  402ce6:	6822      	ldr	r2, [r4, #0]
  402ce8:	07d2      	lsls	r2, r2, #31
  402cea:	d51d      	bpl.n	402d28 <_printf_float+0x478>
  402cec:	3301      	adds	r3, #1
  402cee:	440b      	add	r3, r1
  402cf0:	e019      	b.n	402d26 <_printf_float+0x476>
  402cf2:	b913      	cbnz	r3, 402cfa <_printf_float+0x44a>
  402cf4:	6822      	ldr	r2, [r4, #0]
  402cf6:	07d0      	lsls	r0, r2, #31
  402cf8:	d501      	bpl.n	402cfe <_printf_float+0x44e>
  402cfa:	3302      	adds	r3, #2
  402cfc:	e013      	b.n	402d26 <_printf_float+0x476>
  402cfe:	2301      	movs	r3, #1
  402d00:	e011      	b.n	402d26 <_printf_float+0x476>
  402d02:	f04f 0967 	mov.w	r9, #103	; 0x67
  402d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402d0a:	4293      	cmp	r3, r2
  402d0c:	db05      	blt.n	402d1a <_printf_float+0x46a>
  402d0e:	6822      	ldr	r2, [r4, #0]
  402d10:	6123      	str	r3, [r4, #16]
  402d12:	07d1      	lsls	r1, r2, #31
  402d14:	d508      	bpl.n	402d28 <_printf_float+0x478>
  402d16:	3301      	adds	r3, #1
  402d18:	e005      	b.n	402d26 <_printf_float+0x476>
  402d1a:	2b00      	cmp	r3, #0
  402d1c:	bfd4      	ite	le
  402d1e:	f1c3 0302 	rsble	r3, r3, #2
  402d22:	2301      	movgt	r3, #1
  402d24:	4413      	add	r3, r2
  402d26:	6123      	str	r3, [r4, #16]
  402d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402d2a:	65a3      	str	r3, [r4, #88]	; 0x58
  402d2c:	f04f 0a00 	mov.w	sl, #0
  402d30:	e656      	b.n	4029e0 <_printf_float+0x130>
  402d32:	b011      	add	sp, #68	; 0x44
  402d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402d38 <_printf_common>:
  402d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d3c:	4691      	mov	r9, r2
  402d3e:	461f      	mov	r7, r3
  402d40:	690a      	ldr	r2, [r1, #16]
  402d42:	688b      	ldr	r3, [r1, #8]
  402d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
  402d48:	4293      	cmp	r3, r2
  402d4a:	bfb8      	it	lt
  402d4c:	4613      	movlt	r3, r2
  402d4e:	f8c9 3000 	str.w	r3, [r9]
  402d52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  402d56:	4606      	mov	r6, r0
  402d58:	460c      	mov	r4, r1
  402d5a:	b112      	cbz	r2, 402d62 <_printf_common+0x2a>
  402d5c:	3301      	adds	r3, #1
  402d5e:	f8c9 3000 	str.w	r3, [r9]
  402d62:	6823      	ldr	r3, [r4, #0]
  402d64:	0699      	lsls	r1, r3, #26
  402d66:	bf42      	ittt	mi
  402d68:	f8d9 3000 	ldrmi.w	r3, [r9]
  402d6c:	3302      	addmi	r3, #2
  402d6e:	f8c9 3000 	strmi.w	r3, [r9]
  402d72:	6825      	ldr	r5, [r4, #0]
  402d74:	f015 0506 	ands.w	r5, r5, #6
  402d78:	d110      	bne.n	402d9c <_printf_common+0x64>
  402d7a:	f104 0a19 	add.w	sl, r4, #25
  402d7e:	e007      	b.n	402d90 <_printf_common+0x58>
  402d80:	2301      	movs	r3, #1
  402d82:	4652      	mov	r2, sl
  402d84:	4639      	mov	r1, r7
  402d86:	4630      	mov	r0, r6
  402d88:	47c0      	blx	r8
  402d8a:	3001      	adds	r0, #1
  402d8c:	d01a      	beq.n	402dc4 <_printf_common+0x8c>
  402d8e:	3501      	adds	r5, #1
  402d90:	68e3      	ldr	r3, [r4, #12]
  402d92:	f8d9 2000 	ldr.w	r2, [r9]
  402d96:	1a9b      	subs	r3, r3, r2
  402d98:	429d      	cmp	r5, r3
  402d9a:	dbf1      	blt.n	402d80 <_printf_common+0x48>
  402d9c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402da0:	6822      	ldr	r2, [r4, #0]
  402da2:	3300      	adds	r3, #0
  402da4:	bf18      	it	ne
  402da6:	2301      	movne	r3, #1
  402da8:	0692      	lsls	r2, r2, #26
  402daa:	d50f      	bpl.n	402dcc <_printf_common+0x94>
  402dac:	18e1      	adds	r1, r4, r3
  402dae:	1c5a      	adds	r2, r3, #1
  402db0:	2030      	movs	r0, #48	; 0x30
  402db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402db6:	4422      	add	r2, r4
  402db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  402dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402dc0:	3302      	adds	r3, #2
  402dc2:	e003      	b.n	402dcc <_printf_common+0x94>
  402dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402dd0:	4639      	mov	r1, r7
  402dd2:	4630      	mov	r0, r6
  402dd4:	47c0      	blx	r8
  402dd6:	3001      	adds	r0, #1
  402dd8:	d0f4      	beq.n	402dc4 <_printf_common+0x8c>
  402dda:	6822      	ldr	r2, [r4, #0]
  402ddc:	f8d9 5000 	ldr.w	r5, [r9]
  402de0:	68e3      	ldr	r3, [r4, #12]
  402de2:	f002 0206 	and.w	r2, r2, #6
  402de6:	2a04      	cmp	r2, #4
  402de8:	bf08      	it	eq
  402dea:	1b5d      	subeq	r5, r3, r5
  402dec:	6922      	ldr	r2, [r4, #16]
  402dee:	68a3      	ldr	r3, [r4, #8]
  402df0:	bf0c      	ite	eq
  402df2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402df6:	2500      	movne	r5, #0
  402df8:	4293      	cmp	r3, r2
  402dfa:	bfc4      	itt	gt
  402dfc:	1a9b      	subgt	r3, r3, r2
  402dfe:	18ed      	addgt	r5, r5, r3
  402e00:	f04f 0900 	mov.w	r9, #0
  402e04:	341a      	adds	r4, #26
  402e06:	454d      	cmp	r5, r9
  402e08:	d009      	beq.n	402e1e <_printf_common+0xe6>
  402e0a:	2301      	movs	r3, #1
  402e0c:	4622      	mov	r2, r4
  402e0e:	4639      	mov	r1, r7
  402e10:	4630      	mov	r0, r6
  402e12:	47c0      	blx	r8
  402e14:	3001      	adds	r0, #1
  402e16:	d0d5      	beq.n	402dc4 <_printf_common+0x8c>
  402e18:	f109 0901 	add.w	r9, r9, #1
  402e1c:	e7f3      	b.n	402e06 <_printf_common+0xce>
  402e1e:	2000      	movs	r0, #0
  402e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00402e24 <_printf_i>:
  402e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402e28:	4617      	mov	r7, r2
  402e2a:	7e0a      	ldrb	r2, [r1, #24]
  402e2c:	b085      	sub	sp, #20
  402e2e:	2a6e      	cmp	r2, #110	; 0x6e
  402e30:	4698      	mov	r8, r3
  402e32:	4606      	mov	r6, r0
  402e34:	460c      	mov	r4, r1
  402e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402e38:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  402e3c:	f000 80ae 	beq.w	402f9c <_printf_i+0x178>
  402e40:	d811      	bhi.n	402e66 <_printf_i+0x42>
  402e42:	2a63      	cmp	r2, #99	; 0x63
  402e44:	d022      	beq.n	402e8c <_printf_i+0x68>
  402e46:	d809      	bhi.n	402e5c <_printf_i+0x38>
  402e48:	2a00      	cmp	r2, #0
  402e4a:	f000 80bb 	beq.w	402fc4 <_printf_i+0x1a0>
  402e4e:	2a58      	cmp	r2, #88	; 0x58
  402e50:	f040 80ca 	bne.w	402fe8 <_printf_i+0x1c4>
  402e54:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  402e58:	4983      	ldr	r1, [pc, #524]	; (403068 <_printf_i+0x244>)
  402e5a:	e055      	b.n	402f08 <_printf_i+0xe4>
  402e5c:	2a64      	cmp	r2, #100	; 0x64
  402e5e:	d01e      	beq.n	402e9e <_printf_i+0x7a>
  402e60:	2a69      	cmp	r2, #105	; 0x69
  402e62:	d01c      	beq.n	402e9e <_printf_i+0x7a>
  402e64:	e0c0      	b.n	402fe8 <_printf_i+0x1c4>
  402e66:	2a73      	cmp	r2, #115	; 0x73
  402e68:	f000 80b0 	beq.w	402fcc <_printf_i+0x1a8>
  402e6c:	d809      	bhi.n	402e82 <_printf_i+0x5e>
  402e6e:	2a6f      	cmp	r2, #111	; 0x6f
  402e70:	d02e      	beq.n	402ed0 <_printf_i+0xac>
  402e72:	2a70      	cmp	r2, #112	; 0x70
  402e74:	f040 80b8 	bne.w	402fe8 <_printf_i+0x1c4>
  402e78:	680a      	ldr	r2, [r1, #0]
  402e7a:	f042 0220 	orr.w	r2, r2, #32
  402e7e:	600a      	str	r2, [r1, #0]
  402e80:	e03e      	b.n	402f00 <_printf_i+0xdc>
  402e82:	2a75      	cmp	r2, #117	; 0x75
  402e84:	d024      	beq.n	402ed0 <_printf_i+0xac>
  402e86:	2a78      	cmp	r2, #120	; 0x78
  402e88:	d03a      	beq.n	402f00 <_printf_i+0xdc>
  402e8a:	e0ad      	b.n	402fe8 <_printf_i+0x1c4>
  402e8c:	681a      	ldr	r2, [r3, #0]
  402e8e:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402e92:	1d11      	adds	r1, r2, #4
  402e94:	6019      	str	r1, [r3, #0]
  402e96:	6813      	ldr	r3, [r2, #0]
  402e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402e9c:	e0a8      	b.n	402ff0 <_printf_i+0x1cc>
  402e9e:	6821      	ldr	r1, [r4, #0]
  402ea0:	681a      	ldr	r2, [r3, #0]
  402ea2:	f011 0f80 	tst.w	r1, #128	; 0x80
  402ea6:	d002      	beq.n	402eae <_printf_i+0x8a>
  402ea8:	1d11      	adds	r1, r2, #4
  402eaa:	6019      	str	r1, [r3, #0]
  402eac:	e008      	b.n	402ec0 <_printf_i+0x9c>
  402eae:	f011 0f40 	tst.w	r1, #64	; 0x40
  402eb2:	f102 0104 	add.w	r1, r2, #4
  402eb6:	6019      	str	r1, [r3, #0]
  402eb8:	d002      	beq.n	402ec0 <_printf_i+0x9c>
  402eba:	f9b2 3000 	ldrsh.w	r3, [r2]
  402ebe:	e000      	b.n	402ec2 <_printf_i+0x9e>
  402ec0:	6813      	ldr	r3, [r2, #0]
  402ec2:	2b00      	cmp	r3, #0
  402ec4:	da3c      	bge.n	402f40 <_printf_i+0x11c>
  402ec6:	222d      	movs	r2, #45	; 0x2d
  402ec8:	425b      	negs	r3, r3
  402eca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  402ece:	e037      	b.n	402f40 <_printf_i+0x11c>
  402ed0:	6821      	ldr	r1, [r4, #0]
  402ed2:	681a      	ldr	r2, [r3, #0]
  402ed4:	f011 0f80 	tst.w	r1, #128	; 0x80
  402ed8:	d002      	beq.n	402ee0 <_printf_i+0xbc>
  402eda:	1d11      	adds	r1, r2, #4
  402edc:	6019      	str	r1, [r3, #0]
  402ede:	e007      	b.n	402ef0 <_printf_i+0xcc>
  402ee0:	f011 0f40 	tst.w	r1, #64	; 0x40
  402ee4:	f102 0104 	add.w	r1, r2, #4
  402ee8:	6019      	str	r1, [r3, #0]
  402eea:	d001      	beq.n	402ef0 <_printf_i+0xcc>
  402eec:	8813      	ldrh	r3, [r2, #0]
  402eee:	e000      	b.n	402ef2 <_printf_i+0xce>
  402ef0:	6813      	ldr	r3, [r2, #0]
  402ef2:	7e22      	ldrb	r2, [r4, #24]
  402ef4:	495c      	ldr	r1, [pc, #368]	; (403068 <_printf_i+0x244>)
  402ef6:	2a6f      	cmp	r2, #111	; 0x6f
  402ef8:	bf14      	ite	ne
  402efa:	220a      	movne	r2, #10
  402efc:	2208      	moveq	r2, #8
  402efe:	e01b      	b.n	402f38 <_printf_i+0x114>
  402f00:	2278      	movs	r2, #120	; 0x78
  402f02:	495a      	ldr	r1, [pc, #360]	; (40306c <_printf_i+0x248>)
  402f04:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402f08:	6822      	ldr	r2, [r4, #0]
  402f0a:	6818      	ldr	r0, [r3, #0]
  402f0c:	f012 0f80 	tst.w	r2, #128	; 0x80
  402f10:	f100 0504 	add.w	r5, r0, #4
  402f14:	601d      	str	r5, [r3, #0]
  402f16:	d103      	bne.n	402f20 <_printf_i+0xfc>
  402f18:	0655      	lsls	r5, r2, #25
  402f1a:	d501      	bpl.n	402f20 <_printf_i+0xfc>
  402f1c:	8803      	ldrh	r3, [r0, #0]
  402f1e:	e000      	b.n	402f22 <_printf_i+0xfe>
  402f20:	6803      	ldr	r3, [r0, #0]
  402f22:	07d0      	lsls	r0, r2, #31
  402f24:	bf44      	itt	mi
  402f26:	f042 0220 	orrmi.w	r2, r2, #32
  402f2a:	6022      	strmi	r2, [r4, #0]
  402f2c:	b91b      	cbnz	r3, 402f36 <_printf_i+0x112>
  402f2e:	6822      	ldr	r2, [r4, #0]
  402f30:	f022 0220 	bic.w	r2, r2, #32
  402f34:	6022      	str	r2, [r4, #0]
  402f36:	2210      	movs	r2, #16
  402f38:	2000      	movs	r0, #0
  402f3a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  402f3e:	e001      	b.n	402f44 <_printf_i+0x120>
  402f40:	4949      	ldr	r1, [pc, #292]	; (403068 <_printf_i+0x244>)
  402f42:	220a      	movs	r2, #10
  402f44:	6865      	ldr	r5, [r4, #4]
  402f46:	60a5      	str	r5, [r4, #8]
  402f48:	2d00      	cmp	r5, #0
  402f4a:	db08      	blt.n	402f5e <_printf_i+0x13a>
  402f4c:	6820      	ldr	r0, [r4, #0]
  402f4e:	f020 0004 	bic.w	r0, r0, #4
  402f52:	6020      	str	r0, [r4, #0]
  402f54:	b92b      	cbnz	r3, 402f62 <_printf_i+0x13e>
  402f56:	2d00      	cmp	r5, #0
  402f58:	d17d      	bne.n	403056 <_printf_i+0x232>
  402f5a:	4675      	mov	r5, lr
  402f5c:	e00c      	b.n	402f78 <_printf_i+0x154>
  402f5e:	2b00      	cmp	r3, #0
  402f60:	d079      	beq.n	403056 <_printf_i+0x232>
  402f62:	4675      	mov	r5, lr
  402f64:	fbb3 f0f2 	udiv	r0, r3, r2
  402f68:	fb02 3310 	mls	r3, r2, r0, r3
  402f6c:	5ccb      	ldrb	r3, [r1, r3]
  402f6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
  402f72:	4603      	mov	r3, r0
  402f74:	2800      	cmp	r0, #0
  402f76:	d1f5      	bne.n	402f64 <_printf_i+0x140>
  402f78:	2a08      	cmp	r2, #8
  402f7a:	d10b      	bne.n	402f94 <_printf_i+0x170>
  402f7c:	6823      	ldr	r3, [r4, #0]
  402f7e:	07da      	lsls	r2, r3, #31
  402f80:	d508      	bpl.n	402f94 <_printf_i+0x170>
  402f82:	6923      	ldr	r3, [r4, #16]
  402f84:	6862      	ldr	r2, [r4, #4]
  402f86:	429a      	cmp	r2, r3
  402f88:	bfde      	ittt	le
  402f8a:	2330      	movle	r3, #48	; 0x30
  402f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
  402f90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  402f94:	ebc5 030e 	rsb	r3, r5, lr
  402f98:	6123      	str	r3, [r4, #16]
  402f9a:	e02e      	b.n	402ffa <_printf_i+0x1d6>
  402f9c:	6808      	ldr	r0, [r1, #0]
  402f9e:	681a      	ldr	r2, [r3, #0]
  402fa0:	6949      	ldr	r1, [r1, #20]
  402fa2:	f010 0f80 	tst.w	r0, #128	; 0x80
  402fa6:	d003      	beq.n	402fb0 <_printf_i+0x18c>
  402fa8:	1d10      	adds	r0, r2, #4
  402faa:	6018      	str	r0, [r3, #0]
  402fac:	6813      	ldr	r3, [r2, #0]
  402fae:	e008      	b.n	402fc2 <_printf_i+0x19e>
  402fb0:	f010 0f40 	tst.w	r0, #64	; 0x40
  402fb4:	f102 0004 	add.w	r0, r2, #4
  402fb8:	6018      	str	r0, [r3, #0]
  402fba:	6813      	ldr	r3, [r2, #0]
  402fbc:	d001      	beq.n	402fc2 <_printf_i+0x19e>
  402fbe:	8019      	strh	r1, [r3, #0]
  402fc0:	e000      	b.n	402fc4 <_printf_i+0x1a0>
  402fc2:	6019      	str	r1, [r3, #0]
  402fc4:	2300      	movs	r3, #0
  402fc6:	6123      	str	r3, [r4, #16]
  402fc8:	4675      	mov	r5, lr
  402fca:	e016      	b.n	402ffa <_printf_i+0x1d6>
  402fcc:	681a      	ldr	r2, [r3, #0]
  402fce:	1d11      	adds	r1, r2, #4
  402fd0:	6019      	str	r1, [r3, #0]
  402fd2:	6815      	ldr	r5, [r2, #0]
  402fd4:	6862      	ldr	r2, [r4, #4]
  402fd6:	2100      	movs	r1, #0
  402fd8:	4628      	mov	r0, r5
  402fda:	f001 fa61 	bl	4044a0 <memchr>
  402fde:	b108      	cbz	r0, 402fe4 <_printf_i+0x1c0>
  402fe0:	1b40      	subs	r0, r0, r5
  402fe2:	6060      	str	r0, [r4, #4]
  402fe4:	6863      	ldr	r3, [r4, #4]
  402fe6:	e004      	b.n	402ff2 <_printf_i+0x1ce>
  402fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402fec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402ff0:	2301      	movs	r3, #1
  402ff2:	6123      	str	r3, [r4, #16]
  402ff4:	2300      	movs	r3, #0
  402ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402ffa:	f8cd 8000 	str.w	r8, [sp]
  402ffe:	463b      	mov	r3, r7
  403000:	aa03      	add	r2, sp, #12
  403002:	4621      	mov	r1, r4
  403004:	4630      	mov	r0, r6
  403006:	f7ff fe97 	bl	402d38 <_printf_common>
  40300a:	3001      	adds	r0, #1
  40300c:	d102      	bne.n	403014 <_printf_i+0x1f0>
  40300e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403012:	e026      	b.n	403062 <_printf_i+0x23e>
  403014:	6923      	ldr	r3, [r4, #16]
  403016:	462a      	mov	r2, r5
  403018:	4639      	mov	r1, r7
  40301a:	4630      	mov	r0, r6
  40301c:	47c0      	blx	r8
  40301e:	3001      	adds	r0, #1
  403020:	d0f5      	beq.n	40300e <_printf_i+0x1ea>
  403022:	6823      	ldr	r3, [r4, #0]
  403024:	079b      	lsls	r3, r3, #30
  403026:	d510      	bpl.n	40304a <_printf_i+0x226>
  403028:	2500      	movs	r5, #0
  40302a:	f104 0919 	add.w	r9, r4, #25
  40302e:	e007      	b.n	403040 <_printf_i+0x21c>
  403030:	2301      	movs	r3, #1
  403032:	464a      	mov	r2, r9
  403034:	4639      	mov	r1, r7
  403036:	4630      	mov	r0, r6
  403038:	47c0      	blx	r8
  40303a:	3001      	adds	r0, #1
  40303c:	d0e7      	beq.n	40300e <_printf_i+0x1ea>
  40303e:	3501      	adds	r5, #1
  403040:	68e3      	ldr	r3, [r4, #12]
  403042:	9a03      	ldr	r2, [sp, #12]
  403044:	1a9b      	subs	r3, r3, r2
  403046:	429d      	cmp	r5, r3
  403048:	dbf2      	blt.n	403030 <_printf_i+0x20c>
  40304a:	68e0      	ldr	r0, [r4, #12]
  40304c:	9b03      	ldr	r3, [sp, #12]
  40304e:	4298      	cmp	r0, r3
  403050:	bfb8      	it	lt
  403052:	4618      	movlt	r0, r3
  403054:	e005      	b.n	403062 <_printf_i+0x23e>
  403056:	780b      	ldrb	r3, [r1, #0]
  403058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  40305c:	f104 0542 	add.w	r5, r4, #66	; 0x42
  403060:	e78a      	b.n	402f78 <_printf_i+0x154>
  403062:	b005      	add	sp, #20
  403064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403068:	00406326 	.word	0x00406326
  40306c:	00406337 	.word	0x00406337

00403070 <iprintf>:
  403070:	b40f      	push	{r0, r1, r2, r3}
  403072:	4b0a      	ldr	r3, [pc, #40]	; (40309c <iprintf+0x2c>)
  403074:	b513      	push	{r0, r1, r4, lr}
  403076:	681c      	ldr	r4, [r3, #0]
  403078:	b124      	cbz	r4, 403084 <iprintf+0x14>
  40307a:	69a3      	ldr	r3, [r4, #24]
  40307c:	b913      	cbnz	r3, 403084 <iprintf+0x14>
  40307e:	4620      	mov	r0, r4
  403080:	f001 f90c 	bl	40429c <__sinit>
  403084:	ab05      	add	r3, sp, #20
  403086:	9a04      	ldr	r2, [sp, #16]
  403088:	68a1      	ldr	r1, [r4, #8]
  40308a:	9301      	str	r3, [sp, #4]
  40308c:	4620      	mov	r0, r4
  40308e:	f001 fe1b 	bl	404cc8 <_vfiprintf_r>
  403092:	b002      	add	sp, #8
  403094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403098:	b004      	add	sp, #16
  40309a:	4770      	bx	lr
  40309c:	20000074 	.word	0x20000074

004030a0 <_puts_r>:
  4030a0:	b570      	push	{r4, r5, r6, lr}
  4030a2:	460e      	mov	r6, r1
  4030a4:	4605      	mov	r5, r0
  4030a6:	b118      	cbz	r0, 4030b0 <_puts_r+0x10>
  4030a8:	6983      	ldr	r3, [r0, #24]
  4030aa:	b90b      	cbnz	r3, 4030b0 <_puts_r+0x10>
  4030ac:	f001 f8f6 	bl	40429c <__sinit>
  4030b0:	69ab      	ldr	r3, [r5, #24]
  4030b2:	68ac      	ldr	r4, [r5, #8]
  4030b4:	b913      	cbnz	r3, 4030bc <_puts_r+0x1c>
  4030b6:	4628      	mov	r0, r5
  4030b8:	f001 f8f0 	bl	40429c <__sinit>
  4030bc:	4b22      	ldr	r3, [pc, #136]	; (403148 <_puts_r+0xa8>)
  4030be:	429c      	cmp	r4, r3
  4030c0:	d101      	bne.n	4030c6 <_puts_r+0x26>
  4030c2:	686c      	ldr	r4, [r5, #4]
  4030c4:	e008      	b.n	4030d8 <_puts_r+0x38>
  4030c6:	4b21      	ldr	r3, [pc, #132]	; (40314c <_puts_r+0xac>)
  4030c8:	429c      	cmp	r4, r3
  4030ca:	d101      	bne.n	4030d0 <_puts_r+0x30>
  4030cc:	68ac      	ldr	r4, [r5, #8]
  4030ce:	e003      	b.n	4030d8 <_puts_r+0x38>
  4030d0:	4b1f      	ldr	r3, [pc, #124]	; (403150 <_puts_r+0xb0>)
  4030d2:	429c      	cmp	r4, r3
  4030d4:	bf08      	it	eq
  4030d6:	68ec      	ldreq	r4, [r5, #12]
  4030d8:	89a3      	ldrh	r3, [r4, #12]
  4030da:	071b      	lsls	r3, r3, #28
  4030dc:	d501      	bpl.n	4030e2 <_puts_r+0x42>
  4030de:	6923      	ldr	r3, [r4, #16]
  4030e0:	b93b      	cbnz	r3, 4030f2 <_puts_r+0x52>
  4030e2:	4621      	mov	r1, r4
  4030e4:	4628      	mov	r0, r5
  4030e6:	f000 f94b 	bl	403380 <__swsetup_r>
  4030ea:	b110      	cbz	r0, 4030f2 <_puts_r+0x52>
  4030ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4030f0:	bd70      	pop	{r4, r5, r6, pc}
  4030f2:	3e01      	subs	r6, #1
  4030f4:	68a3      	ldr	r3, [r4, #8]
  4030f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  4030fa:	3b01      	subs	r3, #1
  4030fc:	60a3      	str	r3, [r4, #8]
  4030fe:	b191      	cbz	r1, 403126 <_puts_r+0x86>
  403100:	2b00      	cmp	r3, #0
  403102:	da04      	bge.n	40310e <_puts_r+0x6e>
  403104:	69a2      	ldr	r2, [r4, #24]
  403106:	4293      	cmp	r3, r2
  403108:	db06      	blt.n	403118 <_puts_r+0x78>
  40310a:	290a      	cmp	r1, #10
  40310c:	d004      	beq.n	403118 <_puts_r+0x78>
  40310e:	6823      	ldr	r3, [r4, #0]
  403110:	1c5a      	adds	r2, r3, #1
  403112:	6022      	str	r2, [r4, #0]
  403114:	7019      	strb	r1, [r3, #0]
  403116:	e7ed      	b.n	4030f4 <_puts_r+0x54>
  403118:	4622      	mov	r2, r4
  40311a:	4628      	mov	r0, r5
  40311c:	f000 f8dc 	bl	4032d8 <__swbuf_r>
  403120:	3001      	adds	r0, #1
  403122:	d1e7      	bne.n	4030f4 <_puts_r+0x54>
  403124:	e7e2      	b.n	4030ec <_puts_r+0x4c>
  403126:	2b00      	cmp	r3, #0
  403128:	da08      	bge.n	40313c <_puts_r+0x9c>
  40312a:	4622      	mov	r2, r4
  40312c:	210a      	movs	r1, #10
  40312e:	4628      	mov	r0, r5
  403130:	f000 f8d2 	bl	4032d8 <__swbuf_r>
  403134:	3001      	adds	r0, #1
  403136:	d0d9      	beq.n	4030ec <_puts_r+0x4c>
  403138:	200a      	movs	r0, #10
  40313a:	bd70      	pop	{r4, r5, r6, pc}
  40313c:	6823      	ldr	r3, [r4, #0]
  40313e:	200a      	movs	r0, #10
  403140:	1c5a      	adds	r2, r3, #1
  403142:	6022      	str	r2, [r4, #0]
  403144:	7018      	strb	r0, [r3, #0]
  403146:	bd70      	pop	{r4, r5, r6, pc}
  403148:	00406358 	.word	0x00406358
  40314c:	00406378 	.word	0x00406378
  403150:	00406398 	.word	0x00406398

00403154 <puts>:
  403154:	4b02      	ldr	r3, [pc, #8]	; (403160 <puts+0xc>)
  403156:	4601      	mov	r1, r0
  403158:	6818      	ldr	r0, [r3, #0]
  40315a:	f7ff bfa1 	b.w	4030a0 <_puts_r>
  40315e:	bf00      	nop
  403160:	20000074 	.word	0x20000074

00403164 <setbuf>:
  403164:	2900      	cmp	r1, #0
  403166:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40316a:	bf0c      	ite	eq
  40316c:	2202      	moveq	r2, #2
  40316e:	2200      	movne	r2, #0
  403170:	f000 b800 	b.w	403174 <setvbuf>

00403174 <setvbuf>:
  403174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  403178:	461d      	mov	r5, r3
  40317a:	4b4f      	ldr	r3, [pc, #316]	; (4032b8 <setvbuf+0x144>)
  40317c:	681e      	ldr	r6, [r3, #0]
  40317e:	4604      	mov	r4, r0
  403180:	460f      	mov	r7, r1
  403182:	4690      	mov	r8, r2
  403184:	b126      	cbz	r6, 403190 <setvbuf+0x1c>
  403186:	69b3      	ldr	r3, [r6, #24]
  403188:	b913      	cbnz	r3, 403190 <setvbuf+0x1c>
  40318a:	4630      	mov	r0, r6
  40318c:	f001 f886 	bl	40429c <__sinit>
  403190:	4b4a      	ldr	r3, [pc, #296]	; (4032bc <setvbuf+0x148>)
  403192:	429c      	cmp	r4, r3
  403194:	d101      	bne.n	40319a <setvbuf+0x26>
  403196:	6874      	ldr	r4, [r6, #4]
  403198:	e008      	b.n	4031ac <setvbuf+0x38>
  40319a:	4b49      	ldr	r3, [pc, #292]	; (4032c0 <setvbuf+0x14c>)
  40319c:	429c      	cmp	r4, r3
  40319e:	d101      	bne.n	4031a4 <setvbuf+0x30>
  4031a0:	68b4      	ldr	r4, [r6, #8]
  4031a2:	e003      	b.n	4031ac <setvbuf+0x38>
  4031a4:	4b47      	ldr	r3, [pc, #284]	; (4032c4 <setvbuf+0x150>)
  4031a6:	429c      	cmp	r4, r3
  4031a8:	bf08      	it	eq
  4031aa:	68f4      	ldreq	r4, [r6, #12]
  4031ac:	f1b8 0f02 	cmp.w	r8, #2
  4031b0:	d004      	beq.n	4031bc <setvbuf+0x48>
  4031b2:	f1b8 0f01 	cmp.w	r8, #1
  4031b6:	d879      	bhi.n	4032ac <setvbuf+0x138>
  4031b8:	2d00      	cmp	r5, #0
  4031ba:	db77      	blt.n	4032ac <setvbuf+0x138>
  4031bc:	4621      	mov	r1, r4
  4031be:	4630      	mov	r0, r6
  4031c0:	f001 f802 	bl	4041c8 <_fflush_r>
  4031c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4031c6:	b141      	cbz	r1, 4031da <setvbuf+0x66>
  4031c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4031cc:	4299      	cmp	r1, r3
  4031ce:	d002      	beq.n	4031d6 <setvbuf+0x62>
  4031d0:	4630      	mov	r0, r6
  4031d2:	f001 fca5 	bl	404b20 <_free_r>
  4031d6:	2300      	movs	r3, #0
  4031d8:	6363      	str	r3, [r4, #52]	; 0x34
  4031da:	2300      	movs	r3, #0
  4031dc:	61a3      	str	r3, [r4, #24]
  4031de:	6063      	str	r3, [r4, #4]
  4031e0:	89a3      	ldrh	r3, [r4, #12]
  4031e2:	061b      	lsls	r3, r3, #24
  4031e4:	d503      	bpl.n	4031ee <setvbuf+0x7a>
  4031e6:	6921      	ldr	r1, [r4, #16]
  4031e8:	4630      	mov	r0, r6
  4031ea:	f001 fc99 	bl	404b20 <_free_r>
  4031ee:	89a3      	ldrh	r3, [r4, #12]
  4031f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4031f4:	f023 0303 	bic.w	r3, r3, #3
  4031f8:	f1b8 0f02 	cmp.w	r8, #2
  4031fc:	81a3      	strh	r3, [r4, #12]
  4031fe:	d01e      	beq.n	40323e <setvbuf+0xca>
  403200:	ab01      	add	r3, sp, #4
  403202:	466a      	mov	r2, sp
  403204:	4621      	mov	r1, r4
  403206:	4630      	mov	r0, r6
  403208:	f001 f8e0 	bl	4043cc <__swhatbuf_r>
  40320c:	89a3      	ldrh	r3, [r4, #12]
  40320e:	4318      	orrs	r0, r3
  403210:	81a0      	strh	r0, [r4, #12]
  403212:	b90d      	cbnz	r5, 403218 <setvbuf+0xa4>
  403214:	9d00      	ldr	r5, [sp, #0]
  403216:	e000      	b.n	40321a <setvbuf+0xa6>
  403218:	bb2f      	cbnz	r7, 403266 <setvbuf+0xf2>
  40321a:	4628      	mov	r0, r5
  40321c:	f001 f936 	bl	40448c <malloc>
  403220:	4607      	mov	r7, r0
  403222:	b9d0      	cbnz	r0, 40325a <setvbuf+0xe6>
  403224:	f8dd 9000 	ldr.w	r9, [sp]
  403228:	45a9      	cmp	r9, r5
  40322a:	d102      	bne.n	403232 <setvbuf+0xbe>
  40322c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403230:	e006      	b.n	403240 <setvbuf+0xcc>
  403232:	4648      	mov	r0, r9
  403234:	f001 f92a 	bl	40448c <malloc>
  403238:	4607      	mov	r7, r0
  40323a:	b978      	cbnz	r0, 40325c <setvbuf+0xe8>
  40323c:	e7f6      	b.n	40322c <setvbuf+0xb8>
  40323e:	2000      	movs	r0, #0
  403240:	89a3      	ldrh	r3, [r4, #12]
  403242:	f043 0302 	orr.w	r3, r3, #2
  403246:	81a3      	strh	r3, [r4, #12]
  403248:	2300      	movs	r3, #0
  40324a:	60a3      	str	r3, [r4, #8]
  40324c:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403250:	6023      	str	r3, [r4, #0]
  403252:	6123      	str	r3, [r4, #16]
  403254:	2301      	movs	r3, #1
  403256:	6163      	str	r3, [r4, #20]
  403258:	e02a      	b.n	4032b0 <setvbuf+0x13c>
  40325a:	46a9      	mov	r9, r5
  40325c:	89a3      	ldrh	r3, [r4, #12]
  40325e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403262:	81a3      	strh	r3, [r4, #12]
  403264:	464d      	mov	r5, r9
  403266:	69b3      	ldr	r3, [r6, #24]
  403268:	b913      	cbnz	r3, 403270 <setvbuf+0xfc>
  40326a:	4630      	mov	r0, r6
  40326c:	f001 f816 	bl	40429c <__sinit>
  403270:	f1b8 0f01 	cmp.w	r8, #1
  403274:	bf08      	it	eq
  403276:	89a3      	ldrheq	r3, [r4, #12]
  403278:	6027      	str	r7, [r4, #0]
  40327a:	bf04      	itt	eq
  40327c:	f043 0301 	orreq.w	r3, r3, #1
  403280:	81a3      	strheq	r3, [r4, #12]
  403282:	89a3      	ldrh	r3, [r4, #12]
  403284:	6127      	str	r7, [r4, #16]
  403286:	f003 0008 	and.w	r0, r3, #8
  40328a:	b280      	uxth	r0, r0
  40328c:	6165      	str	r5, [r4, #20]
  40328e:	b158      	cbz	r0, 4032a8 <setvbuf+0x134>
  403290:	f013 0301 	ands.w	r3, r3, #1
  403294:	f04f 0000 	mov.w	r0, #0
  403298:	bf1d      	ittte	ne
  40329a:	426d      	negne	r5, r5
  40329c:	60a0      	strne	r0, [r4, #8]
  40329e:	61a5      	strne	r5, [r4, #24]
  4032a0:	60a5      	streq	r5, [r4, #8]
  4032a2:	bf08      	it	eq
  4032a4:	4618      	moveq	r0, r3
  4032a6:	e003      	b.n	4032b0 <setvbuf+0x13c>
  4032a8:	60a0      	str	r0, [r4, #8]
  4032aa:	e001      	b.n	4032b0 <setvbuf+0x13c>
  4032ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4032b0:	b003      	add	sp, #12
  4032b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4032b6:	bf00      	nop
  4032b8:	20000074 	.word	0x20000074
  4032bc:	00406358 	.word	0x00406358
  4032c0:	00406378 	.word	0x00406378
  4032c4:	00406398 	.word	0x00406398

004032c8 <strlen>:
  4032c8:	4603      	mov	r3, r0
  4032ca:	f813 2b01 	ldrb.w	r2, [r3], #1
  4032ce:	2a00      	cmp	r2, #0
  4032d0:	d1fb      	bne.n	4032ca <strlen+0x2>
  4032d2:	1a18      	subs	r0, r3, r0
  4032d4:	3801      	subs	r0, #1
  4032d6:	4770      	bx	lr

004032d8 <__swbuf_r>:
  4032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032da:	460f      	mov	r7, r1
  4032dc:	4614      	mov	r4, r2
  4032de:	4605      	mov	r5, r0
  4032e0:	b118      	cbz	r0, 4032ea <__swbuf_r+0x12>
  4032e2:	6983      	ldr	r3, [r0, #24]
  4032e4:	b90b      	cbnz	r3, 4032ea <__swbuf_r+0x12>
  4032e6:	f000 ffd9 	bl	40429c <__sinit>
  4032ea:	4b22      	ldr	r3, [pc, #136]	; (403374 <__swbuf_r+0x9c>)
  4032ec:	429c      	cmp	r4, r3
  4032ee:	d101      	bne.n	4032f4 <__swbuf_r+0x1c>
  4032f0:	686c      	ldr	r4, [r5, #4]
  4032f2:	e008      	b.n	403306 <__swbuf_r+0x2e>
  4032f4:	4b20      	ldr	r3, [pc, #128]	; (403378 <__swbuf_r+0xa0>)
  4032f6:	429c      	cmp	r4, r3
  4032f8:	d101      	bne.n	4032fe <__swbuf_r+0x26>
  4032fa:	68ac      	ldr	r4, [r5, #8]
  4032fc:	e003      	b.n	403306 <__swbuf_r+0x2e>
  4032fe:	4b1f      	ldr	r3, [pc, #124]	; (40337c <__swbuf_r+0xa4>)
  403300:	429c      	cmp	r4, r3
  403302:	bf08      	it	eq
  403304:	68ec      	ldreq	r4, [r5, #12]
  403306:	69a3      	ldr	r3, [r4, #24]
  403308:	60a3      	str	r3, [r4, #8]
  40330a:	89a3      	ldrh	r3, [r4, #12]
  40330c:	071a      	lsls	r2, r3, #28
  40330e:	d509      	bpl.n	403324 <__swbuf_r+0x4c>
  403310:	6923      	ldr	r3, [r4, #16]
  403312:	b13b      	cbz	r3, 403324 <__swbuf_r+0x4c>
  403314:	6823      	ldr	r3, [r4, #0]
  403316:	6920      	ldr	r0, [r4, #16]
  403318:	1a18      	subs	r0, r3, r0
  40331a:	6963      	ldr	r3, [r4, #20]
  40331c:	4298      	cmp	r0, r3
  40331e:	b2fe      	uxtb	r6, r7
  403320:	db0f      	blt.n	403342 <__swbuf_r+0x6a>
  403322:	e008      	b.n	403336 <__swbuf_r+0x5e>
  403324:	4621      	mov	r1, r4
  403326:	4628      	mov	r0, r5
  403328:	f000 f82a 	bl	403380 <__swsetup_r>
  40332c:	2800      	cmp	r0, #0
  40332e:	d0f1      	beq.n	403314 <__swbuf_r+0x3c>
  403330:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  403334:	e01b      	b.n	40336e <__swbuf_r+0x96>
  403336:	4621      	mov	r1, r4
  403338:	4628      	mov	r0, r5
  40333a:	f000 ff45 	bl	4041c8 <_fflush_r>
  40333e:	2800      	cmp	r0, #0
  403340:	d1f6      	bne.n	403330 <__swbuf_r+0x58>
  403342:	68a3      	ldr	r3, [r4, #8]
  403344:	3b01      	subs	r3, #1
  403346:	60a3      	str	r3, [r4, #8]
  403348:	6823      	ldr	r3, [r4, #0]
  40334a:	1c5a      	adds	r2, r3, #1
  40334c:	6022      	str	r2, [r4, #0]
  40334e:	701f      	strb	r7, [r3, #0]
  403350:	6963      	ldr	r3, [r4, #20]
  403352:	3001      	adds	r0, #1
  403354:	4298      	cmp	r0, r3
  403356:	d004      	beq.n	403362 <__swbuf_r+0x8a>
  403358:	89a3      	ldrh	r3, [r4, #12]
  40335a:	07db      	lsls	r3, r3, #31
  40335c:	d507      	bpl.n	40336e <__swbuf_r+0x96>
  40335e:	2e0a      	cmp	r6, #10
  403360:	d105      	bne.n	40336e <__swbuf_r+0x96>
  403362:	4621      	mov	r1, r4
  403364:	4628      	mov	r0, r5
  403366:	f000 ff2f 	bl	4041c8 <_fflush_r>
  40336a:	2800      	cmp	r0, #0
  40336c:	d1e0      	bne.n	403330 <__swbuf_r+0x58>
  40336e:	4630      	mov	r0, r6
  403370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403372:	bf00      	nop
  403374:	00406358 	.word	0x00406358
  403378:	00406378 	.word	0x00406378
  40337c:	00406398 	.word	0x00406398

00403380 <__swsetup_r>:
  403380:	4b32      	ldr	r3, [pc, #200]	; (40344c <__swsetup_r+0xcc>)
  403382:	b570      	push	{r4, r5, r6, lr}
  403384:	681d      	ldr	r5, [r3, #0]
  403386:	4606      	mov	r6, r0
  403388:	460c      	mov	r4, r1
  40338a:	b125      	cbz	r5, 403396 <__swsetup_r+0x16>
  40338c:	69ab      	ldr	r3, [r5, #24]
  40338e:	b913      	cbnz	r3, 403396 <__swsetup_r+0x16>
  403390:	4628      	mov	r0, r5
  403392:	f000 ff83 	bl	40429c <__sinit>
  403396:	4b2e      	ldr	r3, [pc, #184]	; (403450 <__swsetup_r+0xd0>)
  403398:	429c      	cmp	r4, r3
  40339a:	d101      	bne.n	4033a0 <__swsetup_r+0x20>
  40339c:	686c      	ldr	r4, [r5, #4]
  40339e:	e008      	b.n	4033b2 <__swsetup_r+0x32>
  4033a0:	4b2c      	ldr	r3, [pc, #176]	; (403454 <__swsetup_r+0xd4>)
  4033a2:	429c      	cmp	r4, r3
  4033a4:	d101      	bne.n	4033aa <__swsetup_r+0x2a>
  4033a6:	68ac      	ldr	r4, [r5, #8]
  4033a8:	e003      	b.n	4033b2 <__swsetup_r+0x32>
  4033aa:	4b2b      	ldr	r3, [pc, #172]	; (403458 <__swsetup_r+0xd8>)
  4033ac:	429c      	cmp	r4, r3
  4033ae:	bf08      	it	eq
  4033b0:	68ec      	ldreq	r4, [r5, #12]
  4033b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033b6:	b29a      	uxth	r2, r3
  4033b8:	0715      	lsls	r5, r2, #28
  4033ba:	d41d      	bmi.n	4033f8 <__swsetup_r+0x78>
  4033bc:	06d0      	lsls	r0, r2, #27
  4033be:	d402      	bmi.n	4033c6 <__swsetup_r+0x46>
  4033c0:	2209      	movs	r2, #9
  4033c2:	6032      	str	r2, [r6, #0]
  4033c4:	e03a      	b.n	40343c <__swsetup_r+0xbc>
  4033c6:	0751      	lsls	r1, r2, #29
  4033c8:	d512      	bpl.n	4033f0 <__swsetup_r+0x70>
  4033ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
  4033cc:	b141      	cbz	r1, 4033e0 <__swsetup_r+0x60>
  4033ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
  4033d2:	4299      	cmp	r1, r3
  4033d4:	d002      	beq.n	4033dc <__swsetup_r+0x5c>
  4033d6:	4630      	mov	r0, r6
  4033d8:	f001 fba2 	bl	404b20 <_free_r>
  4033dc:	2300      	movs	r3, #0
  4033de:	6363      	str	r3, [r4, #52]	; 0x34
  4033e0:	89a3      	ldrh	r3, [r4, #12]
  4033e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  4033e6:	81a3      	strh	r3, [r4, #12]
  4033e8:	2300      	movs	r3, #0
  4033ea:	6063      	str	r3, [r4, #4]
  4033ec:	6923      	ldr	r3, [r4, #16]
  4033ee:	6023      	str	r3, [r4, #0]
  4033f0:	89a3      	ldrh	r3, [r4, #12]
  4033f2:	f043 0308 	orr.w	r3, r3, #8
  4033f6:	81a3      	strh	r3, [r4, #12]
  4033f8:	6923      	ldr	r3, [r4, #16]
  4033fa:	b94b      	cbnz	r3, 403410 <__swsetup_r+0x90>
  4033fc:	89a3      	ldrh	r3, [r4, #12]
  4033fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
  403402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403406:	d003      	beq.n	403410 <__swsetup_r+0x90>
  403408:	4621      	mov	r1, r4
  40340a:	4630      	mov	r0, r6
  40340c:	f001 f802 	bl	404414 <__smakebuf_r>
  403410:	89a2      	ldrh	r2, [r4, #12]
  403412:	f012 0301 	ands.w	r3, r2, #1
  403416:	d005      	beq.n	403424 <__swsetup_r+0xa4>
  403418:	2300      	movs	r3, #0
  40341a:	60a3      	str	r3, [r4, #8]
  40341c:	6963      	ldr	r3, [r4, #20]
  40341e:	425b      	negs	r3, r3
  403420:	61a3      	str	r3, [r4, #24]
  403422:	e003      	b.n	40342c <__swsetup_r+0xac>
  403424:	0792      	lsls	r2, r2, #30
  403426:	bf58      	it	pl
  403428:	6963      	ldrpl	r3, [r4, #20]
  40342a:	60a3      	str	r3, [r4, #8]
  40342c:	6923      	ldr	r3, [r4, #16]
  40342e:	b95b      	cbnz	r3, 403448 <__swsetup_r+0xc8>
  403430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403434:	f003 0080 	and.w	r0, r3, #128	; 0x80
  403438:	b280      	uxth	r0, r0
  40343a:	b130      	cbz	r0, 40344a <__swsetup_r+0xca>
  40343c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403440:	81a3      	strh	r3, [r4, #12]
  403442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403446:	bd70      	pop	{r4, r5, r6, pc}
  403448:	2000      	movs	r0, #0
  40344a:	bd70      	pop	{r4, r5, r6, pc}
  40344c:	20000074 	.word	0x20000074
  403450:	00406358 	.word	0x00406358
  403454:	00406378 	.word	0x00406378
  403458:	00406398 	.word	0x00406398

0040345c <quorem>:
  40345c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403460:	6903      	ldr	r3, [r0, #16]
  403462:	690c      	ldr	r4, [r1, #16]
  403464:	429c      	cmp	r4, r3
  403466:	4680      	mov	r8, r0
  403468:	f300 8083 	bgt.w	403572 <quorem+0x116>
  40346c:	3c01      	subs	r4, #1
  40346e:	f101 0714 	add.w	r7, r1, #20
  403472:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  403476:	f100 0614 	add.w	r6, r0, #20
  40347a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  40347e:	eb06 030e 	add.w	r3, r6, lr
  403482:	9301      	str	r3, [sp, #4]
  403484:	3501      	adds	r5, #1
  403486:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  40348a:	fbb3 f5f5 	udiv	r5, r3, r5
  40348e:	eb07 090e 	add.w	r9, r7, lr
  403492:	2d00      	cmp	r5, #0
  403494:	d039      	beq.n	40350a <quorem+0xae>
  403496:	f04f 0a00 	mov.w	sl, #0
  40349a:	4638      	mov	r0, r7
  40349c:	46b4      	mov	ip, r6
  40349e:	46d3      	mov	fp, sl
  4034a0:	f850 2b04 	ldr.w	r2, [r0], #4
  4034a4:	b293      	uxth	r3, r2
  4034a6:	fb05 a303 	mla	r3, r5, r3, sl
  4034aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  4034ae:	b29b      	uxth	r3, r3
  4034b0:	ebc3 030b 	rsb	r3, r3, fp
  4034b4:	0c12      	lsrs	r2, r2, #16
  4034b6:	f8bc b000 	ldrh.w	fp, [ip]
  4034ba:	fb05 a202 	mla	r2, r5, r2, sl
  4034be:	fa13 f38b 	uxtah	r3, r3, fp
  4034c2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  4034c6:	fa1f fb82 	uxth.w	fp, r2
  4034ca:	f8dc 2000 	ldr.w	r2, [ip]
  4034ce:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  4034d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
  4034d6:	b29b      	uxth	r3, r3
  4034d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4034dc:	4581      	cmp	r9, r0
  4034de:	ea4f 4b22 	mov.w	fp, r2, asr #16
  4034e2:	f84c 3b04 	str.w	r3, [ip], #4
  4034e6:	d2db      	bcs.n	4034a0 <quorem+0x44>
  4034e8:	f856 300e 	ldr.w	r3, [r6, lr]
  4034ec:	b96b      	cbnz	r3, 40350a <quorem+0xae>
  4034ee:	9b01      	ldr	r3, [sp, #4]
  4034f0:	3b04      	subs	r3, #4
  4034f2:	429e      	cmp	r6, r3
  4034f4:	461a      	mov	r2, r3
  4034f6:	d302      	bcc.n	4034fe <quorem+0xa2>
  4034f8:	f8c8 4010 	str.w	r4, [r8, #16]
  4034fc:	e005      	b.n	40350a <quorem+0xae>
  4034fe:	6812      	ldr	r2, [r2, #0]
  403500:	3b04      	subs	r3, #4
  403502:	2a00      	cmp	r2, #0
  403504:	d1f8      	bne.n	4034f8 <quorem+0x9c>
  403506:	3c01      	subs	r4, #1
  403508:	e7f3      	b.n	4034f2 <quorem+0x96>
  40350a:	4640      	mov	r0, r8
  40350c:	f001 fa31 	bl	404972 <__mcmp>
  403510:	2800      	cmp	r0, #0
  403512:	db2c      	blt.n	40356e <quorem+0x112>
  403514:	3501      	adds	r5, #1
  403516:	4630      	mov	r0, r6
  403518:	f04f 0e00 	mov.w	lr, #0
  40351c:	f857 1b04 	ldr.w	r1, [r7], #4
  403520:	f8d0 c000 	ldr.w	ip, [r0]
  403524:	b28a      	uxth	r2, r1
  403526:	ebc2 030e 	rsb	r3, r2, lr
  40352a:	0c09      	lsrs	r1, r1, #16
  40352c:	fa13 f38c 	uxtah	r3, r3, ip
  403530:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  403534:	eb02 4223 	add.w	r2, r2, r3, asr #16
  403538:	b29b      	uxth	r3, r3
  40353a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40353e:	45b9      	cmp	r9, r7
  403540:	ea4f 4e22 	mov.w	lr, r2, asr #16
  403544:	f840 3b04 	str.w	r3, [r0], #4
  403548:	d2e8      	bcs.n	40351c <quorem+0xc0>
  40354a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40354e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  403552:	b962      	cbnz	r2, 40356e <quorem+0x112>
  403554:	3b04      	subs	r3, #4
  403556:	429e      	cmp	r6, r3
  403558:	461a      	mov	r2, r3
  40355a:	d302      	bcc.n	403562 <quorem+0x106>
  40355c:	f8c8 4010 	str.w	r4, [r8, #16]
  403560:	e005      	b.n	40356e <quorem+0x112>
  403562:	6812      	ldr	r2, [r2, #0]
  403564:	3b04      	subs	r3, #4
  403566:	2a00      	cmp	r2, #0
  403568:	d1f8      	bne.n	40355c <quorem+0x100>
  40356a:	3c01      	subs	r4, #1
  40356c:	e7f3      	b.n	403556 <quorem+0xfa>
  40356e:	4628      	mov	r0, r5
  403570:	e000      	b.n	403574 <quorem+0x118>
  403572:	2000      	movs	r0, #0
  403574:	b003      	add	sp, #12
  403576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40357a:	0000      	movs	r0, r0
  40357c:	0000      	movs	r0, r0
	...

00403580 <_dtoa_r>:
  403580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403584:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403586:	b095      	sub	sp, #84	; 0x54
  403588:	4682      	mov	sl, r0
  40358a:	9c21      	ldr	r4, [sp, #132]	; 0x84
  40358c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403590:	b945      	cbnz	r5, 4035a4 <_dtoa_r+0x24>
  403592:	2010      	movs	r0, #16
  403594:	f000 ff7a 	bl	40448c <malloc>
  403598:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  40359c:	6045      	str	r5, [r0, #4]
  40359e:	6085      	str	r5, [r0, #8]
  4035a0:	6005      	str	r5, [r0, #0]
  4035a2:	60c5      	str	r5, [r0, #12]
  4035a4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4035a8:	6819      	ldr	r1, [r3, #0]
  4035aa:	b159      	cbz	r1, 4035c4 <_dtoa_r+0x44>
  4035ac:	685a      	ldr	r2, [r3, #4]
  4035ae:	604a      	str	r2, [r1, #4]
  4035b0:	2301      	movs	r3, #1
  4035b2:	4093      	lsls	r3, r2
  4035b4:	608b      	str	r3, [r1, #8]
  4035b6:	4650      	mov	r0, sl
  4035b8:	f001 f802 	bl	4045c0 <_Bfree>
  4035bc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4035c0:	2200      	movs	r2, #0
  4035c2:	601a      	str	r2, [r3, #0]
  4035c4:	9b03      	ldr	r3, [sp, #12]
  4035c6:	4aa0      	ldr	r2, [pc, #640]	; (403848 <_dtoa_r+0x2c8>)
  4035c8:	2b00      	cmp	r3, #0
  4035ca:	bfbf      	itttt	lt
  4035cc:	2301      	movlt	r3, #1
  4035ce:	6023      	strlt	r3, [r4, #0]
  4035d0:	9b03      	ldrlt	r3, [sp, #12]
  4035d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  4035d6:	bfb8      	it	lt
  4035d8:	9303      	strlt	r3, [sp, #12]
  4035da:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4035de:	bfa4      	itt	ge
  4035e0:	2300      	movge	r3, #0
  4035e2:	6023      	strge	r3, [r4, #0]
  4035e4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  4035e8:	0d1b      	lsrs	r3, r3, #20
  4035ea:	051b      	lsls	r3, r3, #20
  4035ec:	4293      	cmp	r3, r2
  4035ee:	d11d      	bne.n	40362c <_dtoa_r+0xac>
  4035f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4035f2:	f242 730f 	movw	r3, #9999	; 0x270f
  4035f6:	6013      	str	r3, [r2, #0]
  4035f8:	9b02      	ldr	r3, [sp, #8]
  4035fa:	b943      	cbnz	r3, 40360e <_dtoa_r+0x8e>
  4035fc:	4a93      	ldr	r2, [pc, #588]	; (40384c <_dtoa_r+0x2cc>)
  4035fe:	4b94      	ldr	r3, [pc, #592]	; (403850 <_dtoa_r+0x2d0>)
  403600:	f3c8 0013 	ubfx	r0, r8, #0, #20
  403604:	2800      	cmp	r0, #0
  403606:	bf14      	ite	ne
  403608:	4618      	movne	r0, r3
  40360a:	4610      	moveq	r0, r2
  40360c:	e000      	b.n	403610 <_dtoa_r+0x90>
  40360e:	4890      	ldr	r0, [pc, #576]	; (403850 <_dtoa_r+0x2d0>)
  403610:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403612:	2b00      	cmp	r3, #0
  403614:	f000 854a 	beq.w	4040ac <_dtoa_r+0xb2c>
  403618:	78c3      	ldrb	r3, [r0, #3]
  40361a:	b113      	cbz	r3, 403622 <_dtoa_r+0xa2>
  40361c:	f100 0308 	add.w	r3, r0, #8
  403620:	e000      	b.n	403624 <_dtoa_r+0xa4>
  403622:	1cc3      	adds	r3, r0, #3
  403624:	9a22      	ldr	r2, [sp, #136]	; 0x88
  403626:	6013      	str	r3, [r2, #0]
  403628:	f000 bd40 	b.w	4040ac <_dtoa_r+0xb2c>
  40362c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  403630:	2200      	movs	r2, #0
  403632:	2300      	movs	r3, #0
  403634:	4620      	mov	r0, r4
  403636:	4629      	mov	r1, r5
  403638:	f002 f960 	bl	4058fc <__aeabi_dcmpeq>
  40363c:	4607      	mov	r7, r0
  40363e:	b158      	cbz	r0, 403658 <_dtoa_r+0xd8>
  403640:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403642:	2301      	movs	r3, #1
  403644:	6013      	str	r3, [r2, #0]
  403646:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403648:	2b00      	cmp	r3, #0
  40364a:	f000 8522 	beq.w	404092 <_dtoa_r+0xb12>
  40364e:	4881      	ldr	r0, [pc, #516]	; (403854 <_dtoa_r+0x2d4>)
  403650:	6018      	str	r0, [r3, #0]
  403652:	3801      	subs	r0, #1
  403654:	f000 bd2a 	b.w	4040ac <_dtoa_r+0xb2c>
  403658:	ab12      	add	r3, sp, #72	; 0x48
  40365a:	9301      	str	r3, [sp, #4]
  40365c:	ab13      	add	r3, sp, #76	; 0x4c
  40365e:	9300      	str	r3, [sp, #0]
  403660:	4622      	mov	r2, r4
  403662:	462b      	mov	r3, r5
  403664:	4650      	mov	r0, sl
  403666:	f001 f9ff 	bl	404a68 <__d2b>
  40366a:	f3c8 560a 	ubfx	r6, r8, #20, #11
  40366e:	9004      	str	r0, [sp, #16]
  403670:	b156      	cbz	r6, 403688 <_dtoa_r+0x108>
  403672:	f3c5 0313 	ubfx	r3, r5, #0, #20
  403676:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40367a:	4620      	mov	r0, r4
  40367c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403680:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  403684:	9711      	str	r7, [sp, #68]	; 0x44
  403686:	e01d      	b.n	4036c4 <_dtoa_r+0x144>
  403688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40368a:	9e12      	ldr	r6, [sp, #72]	; 0x48
  40368c:	441e      	add	r6, r3
  40368e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403692:	2b20      	cmp	r3, #32
  403694:	dd0a      	ble.n	4036ac <_dtoa_r+0x12c>
  403696:	9a02      	ldr	r2, [sp, #8]
  403698:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40369c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4036a0:	fa22 f000 	lsr.w	r0, r2, r0
  4036a4:	fa08 f303 	lsl.w	r3, r8, r3
  4036a8:	4318      	orrs	r0, r3
  4036aa:	e004      	b.n	4036b6 <_dtoa_r+0x136>
  4036ac:	f1c3 0020 	rsb	r0, r3, #32
  4036b0:	9b02      	ldr	r3, [sp, #8]
  4036b2:	fa03 f000 	lsl.w	r0, r3, r0
  4036b6:	f001 fe43 	bl	405340 <__aeabi_ui2d>
  4036ba:	2301      	movs	r3, #1
  4036bc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4036c0:	3e01      	subs	r6, #1
  4036c2:	9311      	str	r3, [sp, #68]	; 0x44
  4036c4:	2200      	movs	r2, #0
  4036c6:	4b64      	ldr	r3, [pc, #400]	; (403858 <_dtoa_r+0x2d8>)
  4036c8:	f001 fcfc 	bl	4050c4 <__aeabi_dsub>
  4036cc:	a358      	add	r3, pc, #352	; (adr r3, 403830 <_dtoa_r+0x2b0>)
  4036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036d2:	f001 feab 	bl	40542c <__aeabi_dmul>
  4036d6:	a358      	add	r3, pc, #352	; (adr r3, 403838 <_dtoa_r+0x2b8>)
  4036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036dc:	f001 fcf4 	bl	4050c8 <__adddf3>
  4036e0:	4604      	mov	r4, r0
  4036e2:	4630      	mov	r0, r6
  4036e4:	460d      	mov	r5, r1
  4036e6:	f001 fe3b 	bl	405360 <__aeabi_i2d>
  4036ea:	a355      	add	r3, pc, #340	; (adr r3, 403840 <_dtoa_r+0x2c0>)
  4036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036f0:	f001 fe9c 	bl	40542c <__aeabi_dmul>
  4036f4:	4602      	mov	r2, r0
  4036f6:	460b      	mov	r3, r1
  4036f8:	4620      	mov	r0, r4
  4036fa:	4629      	mov	r1, r5
  4036fc:	f001 fce4 	bl	4050c8 <__adddf3>
  403700:	4604      	mov	r4, r0
  403702:	460d      	mov	r5, r1
  403704:	f002 f942 	bl	40598c <__aeabi_d2iz>
  403708:	2200      	movs	r2, #0
  40370a:	4683      	mov	fp, r0
  40370c:	2300      	movs	r3, #0
  40370e:	4620      	mov	r0, r4
  403710:	4629      	mov	r1, r5
  403712:	f002 f8fd 	bl	405910 <__aeabi_dcmplt>
  403716:	b158      	cbz	r0, 403730 <_dtoa_r+0x1b0>
  403718:	4658      	mov	r0, fp
  40371a:	f001 fe21 	bl	405360 <__aeabi_i2d>
  40371e:	4602      	mov	r2, r0
  403720:	460b      	mov	r3, r1
  403722:	4620      	mov	r0, r4
  403724:	4629      	mov	r1, r5
  403726:	f002 f8e9 	bl	4058fc <__aeabi_dcmpeq>
  40372a:	b908      	cbnz	r0, 403730 <_dtoa_r+0x1b0>
  40372c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403730:	f1bb 0f16 	cmp.w	fp, #22
  403734:	d80d      	bhi.n	403752 <_dtoa_r+0x1d2>
  403736:	4949      	ldr	r1, [pc, #292]	; (40385c <_dtoa_r+0x2dc>)
  403738:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  40373c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403740:	e9d1 0100 	ldrd	r0, r1, [r1]
  403744:	f002 f902 	bl	40594c <__aeabi_dcmpgt>
  403748:	b130      	cbz	r0, 403758 <_dtoa_r+0x1d8>
  40374a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  40374e:	2300      	movs	r3, #0
  403750:	e000      	b.n	403754 <_dtoa_r+0x1d4>
  403752:	2301      	movs	r3, #1
  403754:	9310      	str	r3, [sp, #64]	; 0x40
  403756:	e000      	b.n	40375a <_dtoa_r+0x1da>
  403758:	9010      	str	r0, [sp, #64]	; 0x40
  40375a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40375c:	1b9e      	subs	r6, r3, r6
  40375e:	1e73      	subs	r3, r6, #1
  403760:	9307      	str	r3, [sp, #28]
  403762:	bf43      	ittte	mi
  403764:	f1c3 0800 	rsbmi	r8, r3, #0
  403768:	2300      	movmi	r3, #0
  40376a:	9307      	strmi	r3, [sp, #28]
  40376c:	f04f 0800 	movpl.w	r8, #0
  403770:	f1bb 0f00 	cmp.w	fp, #0
  403774:	db06      	blt.n	403784 <_dtoa_r+0x204>
  403776:	9b07      	ldr	r3, [sp, #28]
  403778:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  40377c:	445b      	add	r3, fp
  40377e:	9307      	str	r3, [sp, #28]
  403780:	2700      	movs	r7, #0
  403782:	e005      	b.n	403790 <_dtoa_r+0x210>
  403784:	2300      	movs	r3, #0
  403786:	ebcb 0808 	rsb	r8, fp, r8
  40378a:	f1cb 0700 	rsb	r7, fp, #0
  40378e:	930b      	str	r3, [sp, #44]	; 0x2c
  403790:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403792:	2b09      	cmp	r3, #9
  403794:	d827      	bhi.n	4037e6 <_dtoa_r+0x266>
  403796:	2b05      	cmp	r3, #5
  403798:	bfc4      	itt	gt
  40379a:	3b04      	subgt	r3, #4
  40379c:	931e      	strgt	r3, [sp, #120]	; 0x78
  40379e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4037a0:	f1a3 0302 	sub.w	r3, r3, #2
  4037a4:	bfcc      	ite	gt
  4037a6:	2500      	movgt	r5, #0
  4037a8:	2501      	movle	r5, #1
  4037aa:	2b03      	cmp	r3, #3
  4037ac:	d820      	bhi.n	4037f0 <_dtoa_r+0x270>
  4037ae:	e8df f003 	tbb	[pc, r3]
  4037b2:	0e06      	.short	0x0e06
  4037b4:	0402      	.short	0x0402
  4037b6:	2301      	movs	r3, #1
  4037b8:	e002      	b.n	4037c0 <_dtoa_r+0x240>
  4037ba:	2301      	movs	r3, #1
  4037bc:	e008      	b.n	4037d0 <_dtoa_r+0x250>
  4037be:	2300      	movs	r3, #0
  4037c0:	930a      	str	r3, [sp, #40]	; 0x28
  4037c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4037c4:	2b00      	cmp	r3, #0
  4037c6:	dd1d      	ble.n	403804 <_dtoa_r+0x284>
  4037c8:	4699      	mov	r9, r3
  4037ca:	9305      	str	r3, [sp, #20]
  4037cc:	e021      	b.n	403812 <_dtoa_r+0x292>
  4037ce:	2300      	movs	r3, #0
  4037d0:	930a      	str	r3, [sp, #40]	; 0x28
  4037d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4037d4:	eb0b 0903 	add.w	r9, fp, r3
  4037d8:	f109 0301 	add.w	r3, r9, #1
  4037dc:	2b01      	cmp	r3, #1
  4037de:	9305      	str	r3, [sp, #20]
  4037e0:	bfb8      	it	lt
  4037e2:	2301      	movlt	r3, #1
  4037e4:	e015      	b.n	403812 <_dtoa_r+0x292>
  4037e6:	2501      	movs	r5, #1
  4037e8:	2300      	movs	r3, #0
  4037ea:	931e      	str	r3, [sp, #120]	; 0x78
  4037ec:	950a      	str	r5, [sp, #40]	; 0x28
  4037ee:	e001      	b.n	4037f4 <_dtoa_r+0x274>
  4037f0:	2301      	movs	r3, #1
  4037f2:	930a      	str	r3, [sp, #40]	; 0x28
  4037f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  4037f8:	2200      	movs	r2, #0
  4037fa:	f8cd 9014 	str.w	r9, [sp, #20]
  4037fe:	2312      	movs	r3, #18
  403800:	921f      	str	r2, [sp, #124]	; 0x7c
  403802:	e006      	b.n	403812 <_dtoa_r+0x292>
  403804:	f04f 0901 	mov.w	r9, #1
  403808:	f8cd 9014 	str.w	r9, [sp, #20]
  40380c:	464b      	mov	r3, r9
  40380e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  403812:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  403816:	2200      	movs	r2, #0
  403818:	6062      	str	r2, [r4, #4]
  40381a:	2104      	movs	r1, #4
  40381c:	f101 0214 	add.w	r2, r1, #20
  403820:	429a      	cmp	r2, r3
  403822:	d81d      	bhi.n	403860 <_dtoa_r+0x2e0>
  403824:	6862      	ldr	r2, [r4, #4]
  403826:	3201      	adds	r2, #1
  403828:	6062      	str	r2, [r4, #4]
  40382a:	0049      	lsls	r1, r1, #1
  40382c:	e7f6      	b.n	40381c <_dtoa_r+0x29c>
  40382e:	bf00      	nop
  403830:	636f4361 	.word	0x636f4361
  403834:	3fd287a7 	.word	0x3fd287a7
  403838:	8b60c8b3 	.word	0x8b60c8b3
  40383c:	3fc68a28 	.word	0x3fc68a28
  403840:	509f79fb 	.word	0x509f79fb
  403844:	3fd34413 	.word	0x3fd34413
  403848:	7ff00000 	.word	0x7ff00000
  40384c:	00406348 	.word	0x00406348
  403850:	00406351 	.word	0x00406351
  403854:	00406325 	.word	0x00406325
  403858:	3ff80000 	.word	0x3ff80000
  40385c:	004063b8 	.word	0x004063b8
  403860:	6861      	ldr	r1, [r4, #4]
  403862:	4650      	mov	r0, sl
  403864:	f000 fe77 	bl	404556 <_Balloc>
  403868:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40386c:	6020      	str	r0, [r4, #0]
  40386e:	681b      	ldr	r3, [r3, #0]
  403870:	9306      	str	r3, [sp, #24]
  403872:	9b05      	ldr	r3, [sp, #20]
  403874:	2b0e      	cmp	r3, #14
  403876:	f200 815d 	bhi.w	403b34 <_dtoa_r+0x5b4>
  40387a:	2d00      	cmp	r5, #0
  40387c:	f000 815a 	beq.w	403b34 <_dtoa_r+0x5b4>
  403880:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  403884:	f1bb 0f00 	cmp.w	fp, #0
  403888:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  40388c:	dd31      	ble.n	4038f2 <_dtoa_r+0x372>
  40388e:	4aa0      	ldr	r2, [pc, #640]	; (403b10 <_dtoa_r+0x590>)
  403890:	f00b 030f 	and.w	r3, fp, #15
  403894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403898:	e9d3 3400 	ldrd	r3, r4, [r3]
  40389c:	ea4f 152b 	mov.w	r5, fp, asr #4
  4038a0:	06e8      	lsls	r0, r5, #27
  4038a2:	e9cd 3408 	strd	r3, r4, [sp, #32]
  4038a6:	d50c      	bpl.n	4038c2 <_dtoa_r+0x342>
  4038a8:	4b9a      	ldr	r3, [pc, #616]	; (403b14 <_dtoa_r+0x594>)
  4038aa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4038ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4038b2:	f001 fee5 	bl	405680 <__aeabi_ddiv>
  4038b6:	f005 050f 	and.w	r5, r5, #15
  4038ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4038be:	2403      	movs	r4, #3
  4038c0:	e000      	b.n	4038c4 <_dtoa_r+0x344>
  4038c2:	2402      	movs	r4, #2
  4038c4:	4e93      	ldr	r6, [pc, #588]	; (403b14 <_dtoa_r+0x594>)
  4038c6:	b16d      	cbz	r5, 4038e4 <_dtoa_r+0x364>
  4038c8:	07e9      	lsls	r1, r5, #31
  4038ca:	d508      	bpl.n	4038de <_dtoa_r+0x35e>
  4038cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4038d0:	e9d6 2300 	ldrd	r2, r3, [r6]
  4038d4:	f001 fdaa 	bl	40542c <__aeabi_dmul>
  4038d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4038dc:	3401      	adds	r4, #1
  4038de:	106d      	asrs	r5, r5, #1
  4038e0:	3608      	adds	r6, #8
  4038e2:	e7f0      	b.n	4038c6 <_dtoa_r+0x346>
  4038e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4038e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4038ec:	f001 fec8 	bl	405680 <__aeabi_ddiv>
  4038f0:	e020      	b.n	403934 <_dtoa_r+0x3b4>
  4038f2:	f1cb 0500 	rsb	r5, fp, #0
  4038f6:	b305      	cbz	r5, 40393a <_dtoa_r+0x3ba>
  4038f8:	4b85      	ldr	r3, [pc, #532]	; (403b10 <_dtoa_r+0x590>)
  4038fa:	4e86      	ldr	r6, [pc, #536]	; (403b14 <_dtoa_r+0x594>)
  4038fc:	f005 020f 	and.w	r2, r5, #15
  403900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403904:	e9d3 2300 	ldrd	r2, r3, [r3]
  403908:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40390c:	f001 fd8e 	bl	40542c <__aeabi_dmul>
  403910:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403914:	112d      	asrs	r5, r5, #4
  403916:	2300      	movs	r3, #0
  403918:	2402      	movs	r4, #2
  40391a:	b155      	cbz	r5, 403932 <_dtoa_r+0x3b2>
  40391c:	07ea      	lsls	r2, r5, #31
  40391e:	d505      	bpl.n	40392c <_dtoa_r+0x3ac>
  403920:	e9d6 2300 	ldrd	r2, r3, [r6]
  403924:	f001 fd82 	bl	40542c <__aeabi_dmul>
  403928:	3401      	adds	r4, #1
  40392a:	2301      	movs	r3, #1
  40392c:	106d      	asrs	r5, r5, #1
  40392e:	3608      	adds	r6, #8
  403930:	e7f3      	b.n	40391a <_dtoa_r+0x39a>
  403932:	b11b      	cbz	r3, 40393c <_dtoa_r+0x3bc>
  403934:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403938:	e000      	b.n	40393c <_dtoa_r+0x3bc>
  40393a:	2402      	movs	r4, #2
  40393c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40393e:	b1e3      	cbz	r3, 40397a <_dtoa_r+0x3fa>
  403940:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  403944:	2200      	movs	r2, #0
  403946:	4b74      	ldr	r3, [pc, #464]	; (403b18 <_dtoa_r+0x598>)
  403948:	4628      	mov	r0, r5
  40394a:	4631      	mov	r1, r6
  40394c:	f001 ffe0 	bl	405910 <__aeabi_dcmplt>
  403950:	b198      	cbz	r0, 40397a <_dtoa_r+0x3fa>
  403952:	9b05      	ldr	r3, [sp, #20]
  403954:	b18b      	cbz	r3, 40397a <_dtoa_r+0x3fa>
  403956:	f1b9 0f00 	cmp.w	r9, #0
  40395a:	f340 80e7 	ble.w	403b2c <_dtoa_r+0x5ac>
  40395e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  403962:	9308      	str	r3, [sp, #32]
  403964:	4631      	mov	r1, r6
  403966:	2200      	movs	r2, #0
  403968:	4b6c      	ldr	r3, [pc, #432]	; (403b1c <_dtoa_r+0x59c>)
  40396a:	4628      	mov	r0, r5
  40396c:	f001 fd5e 	bl	40542c <__aeabi_dmul>
  403970:	3401      	adds	r4, #1
  403972:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403976:	464e      	mov	r6, r9
  403978:	e002      	b.n	403980 <_dtoa_r+0x400>
  40397a:	9e05      	ldr	r6, [sp, #20]
  40397c:	f8cd b020 	str.w	fp, [sp, #32]
  403980:	4620      	mov	r0, r4
  403982:	f001 fced 	bl	405360 <__aeabi_i2d>
  403986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40398a:	f001 fd4f 	bl	40542c <__aeabi_dmul>
  40398e:	4b64      	ldr	r3, [pc, #400]	; (403b20 <_dtoa_r+0x5a0>)
  403990:	2200      	movs	r2, #0
  403992:	f001 fb99 	bl	4050c8 <__adddf3>
  403996:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  40399a:	4604      	mov	r4, r0
  40399c:	930c      	str	r3, [sp, #48]	; 0x30
  40399e:	461d      	mov	r5, r3
  4039a0:	b9d6      	cbnz	r6, 4039d8 <_dtoa_r+0x458>
  4039a2:	2200      	movs	r2, #0
  4039a4:	4b5f      	ldr	r3, [pc, #380]	; (403b24 <_dtoa_r+0x5a4>)
  4039a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4039aa:	f001 fb8b 	bl	4050c4 <__aeabi_dsub>
  4039ae:	4622      	mov	r2, r4
  4039b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4039b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4039b6:	f001 ffc9 	bl	40594c <__aeabi_dcmpgt>
  4039ba:	2800      	cmp	r0, #0
  4039bc:	f040 8240 	bne.w	403e40 <_dtoa_r+0x8c0>
  4039c0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4039c2:	4622      	mov	r2, r4
  4039c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4039c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4039cc:	f001 ffa0 	bl	405910 <__aeabi_dcmplt>
  4039d0:	2800      	cmp	r0, #0
  4039d2:	f040 822c 	bne.w	403e2e <_dtoa_r+0x8ae>
  4039d6:	e0a9      	b.n	403b2c <_dtoa_r+0x5ac>
  4039d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4039da:	4b4d      	ldr	r3, [pc, #308]	; (403b10 <_dtoa_r+0x590>)
  4039dc:	1e71      	subs	r1, r6, #1
  4039de:	2a00      	cmp	r2, #0
  4039e0:	d049      	beq.n	403a76 <_dtoa_r+0x4f6>
  4039e2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  4039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039ea:	2000      	movs	r0, #0
  4039ec:	494e      	ldr	r1, [pc, #312]	; (403b28 <_dtoa_r+0x5a8>)
  4039ee:	f001 fe47 	bl	405680 <__aeabi_ddiv>
  4039f2:	4622      	mov	r2, r4
  4039f4:	462b      	mov	r3, r5
  4039f6:	f001 fb65 	bl	4050c4 <__aeabi_dsub>
  4039fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4039fe:	9c06      	ldr	r4, [sp, #24]
  403a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403a04:	f001 ffc2 	bl	40598c <__aeabi_d2iz>
  403a08:	4605      	mov	r5, r0
  403a0a:	f001 fca9 	bl	405360 <__aeabi_i2d>
  403a0e:	4602      	mov	r2, r0
  403a10:	460b      	mov	r3, r1
  403a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403a16:	f001 fb55 	bl	4050c4 <__aeabi_dsub>
  403a1a:	3530      	adds	r5, #48	; 0x30
  403a1c:	f804 5b01 	strb.w	r5, [r4], #1
  403a20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403a28:	f001 ff72 	bl	405910 <__aeabi_dcmplt>
  403a2c:	2800      	cmp	r0, #0
  403a2e:	f040 8320 	bne.w	404072 <_dtoa_r+0xaf2>
  403a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403a36:	2000      	movs	r0, #0
  403a38:	4937      	ldr	r1, [pc, #220]	; (403b18 <_dtoa_r+0x598>)
  403a3a:	f001 fb43 	bl	4050c4 <__aeabi_dsub>
  403a3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403a42:	f001 ff65 	bl	405910 <__aeabi_dcmplt>
  403a46:	2800      	cmp	r0, #0
  403a48:	f040 80d2 	bne.w	403bf0 <_dtoa_r+0x670>
  403a4c:	9b06      	ldr	r3, [sp, #24]
  403a4e:	1ae3      	subs	r3, r4, r3
  403a50:	42b3      	cmp	r3, r6
  403a52:	da6b      	bge.n	403b2c <_dtoa_r+0x5ac>
  403a54:	2200      	movs	r2, #0
  403a56:	4b31      	ldr	r3, [pc, #196]	; (403b1c <_dtoa_r+0x59c>)
  403a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403a5c:	f001 fce6 	bl	40542c <__aeabi_dmul>
  403a60:	2200      	movs	r2, #0
  403a62:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403a66:	4b2d      	ldr	r3, [pc, #180]	; (403b1c <_dtoa_r+0x59c>)
  403a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403a6c:	f001 fcde 	bl	40542c <__aeabi_dmul>
  403a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403a74:	e7c4      	b.n	403a00 <_dtoa_r+0x480>
  403a76:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  403a7a:	4622      	mov	r2, r4
  403a7c:	462b      	mov	r3, r5
  403a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
  403a82:	f001 fcd3 	bl	40542c <__aeabi_dmul>
  403a86:	9b06      	ldr	r3, [sp, #24]
  403a88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403a8c:	199c      	adds	r4, r3, r6
  403a8e:	461d      	mov	r5, r3
  403a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403a94:	f001 ff7a 	bl	40598c <__aeabi_d2iz>
  403a98:	4606      	mov	r6, r0
  403a9a:	f001 fc61 	bl	405360 <__aeabi_i2d>
  403a9e:	3630      	adds	r6, #48	; 0x30
  403aa0:	4602      	mov	r2, r0
  403aa2:	460b      	mov	r3, r1
  403aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403aa8:	f001 fb0c 	bl	4050c4 <__aeabi_dsub>
  403aac:	f805 6b01 	strb.w	r6, [r5], #1
  403ab0:	42ac      	cmp	r4, r5
  403ab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403ab6:	f04f 0200 	mov.w	r2, #0
  403aba:	d123      	bne.n	403b04 <_dtoa_r+0x584>
  403abc:	4b1a      	ldr	r3, [pc, #104]	; (403b28 <_dtoa_r+0x5a8>)
  403abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403ac2:	f001 fb01 	bl	4050c8 <__adddf3>
  403ac6:	4602      	mov	r2, r0
  403ac8:	460b      	mov	r3, r1
  403aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403ace:	f001 ff3d 	bl	40594c <__aeabi_dcmpgt>
  403ad2:	2800      	cmp	r0, #0
  403ad4:	f040 808c 	bne.w	403bf0 <_dtoa_r+0x670>
  403ad8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  403adc:	2000      	movs	r0, #0
  403ade:	4912      	ldr	r1, [pc, #72]	; (403b28 <_dtoa_r+0x5a8>)
  403ae0:	f001 faf0 	bl	4050c4 <__aeabi_dsub>
  403ae4:	4602      	mov	r2, r0
  403ae6:	460b      	mov	r3, r1
  403ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403aec:	f001 ff10 	bl	405910 <__aeabi_dcmplt>
  403af0:	b1e0      	cbz	r0, 403b2c <_dtoa_r+0x5ac>
  403af2:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403af6:	2b30      	cmp	r3, #48	; 0x30
  403af8:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403afc:	f040 82b9 	bne.w	404072 <_dtoa_r+0xaf2>
  403b00:	4614      	mov	r4, r2
  403b02:	e7f6      	b.n	403af2 <_dtoa_r+0x572>
  403b04:	4b05      	ldr	r3, [pc, #20]	; (403b1c <_dtoa_r+0x59c>)
  403b06:	f001 fc91 	bl	40542c <__aeabi_dmul>
  403b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403b0e:	e7bf      	b.n	403a90 <_dtoa_r+0x510>
  403b10:	004063b8 	.word	0x004063b8
  403b14:	00406480 	.word	0x00406480
  403b18:	3ff00000 	.word	0x3ff00000
  403b1c:	40240000 	.word	0x40240000
  403b20:	401c0000 	.word	0x401c0000
  403b24:	40140000 	.word	0x40140000
  403b28:	3fe00000 	.word	0x3fe00000
  403b2c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  403b30:	e9cd 3402 	strd	r3, r4, [sp, #8]
  403b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403b36:	2b00      	cmp	r3, #0
  403b38:	db7d      	blt.n	403c36 <_dtoa_r+0x6b6>
  403b3a:	f1bb 0f0e 	cmp.w	fp, #14
  403b3e:	dc7a      	bgt.n	403c36 <_dtoa_r+0x6b6>
  403b40:	4bab      	ldr	r3, [pc, #684]	; (403df0 <_dtoa_r+0x870>)
  403b42:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  403b46:	e9d3 6700 	ldrd	r6, r7, [r3]
  403b4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403b4c:	2b00      	cmp	r3, #0
  403b4e:	da14      	bge.n	403b7a <_dtoa_r+0x5fa>
  403b50:	9b05      	ldr	r3, [sp, #20]
  403b52:	2b00      	cmp	r3, #0
  403b54:	dc11      	bgt.n	403b7a <_dtoa_r+0x5fa>
  403b56:	f040 816c 	bne.w	403e32 <_dtoa_r+0x8b2>
  403b5a:	2200      	movs	r2, #0
  403b5c:	4ba5      	ldr	r3, [pc, #660]	; (403df4 <_dtoa_r+0x874>)
  403b5e:	4630      	mov	r0, r6
  403b60:	4639      	mov	r1, r7
  403b62:	f001 fc63 	bl	40542c <__aeabi_dmul>
  403b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403b6a:	f001 fee5 	bl	405938 <__aeabi_dcmpge>
  403b6e:	9d05      	ldr	r5, [sp, #20]
  403b70:	462e      	mov	r6, r5
  403b72:	2800      	cmp	r0, #0
  403b74:	f040 815f 	bne.w	403e36 <_dtoa_r+0x8b6>
  403b78:	e165      	b.n	403e46 <_dtoa_r+0x8c6>
  403b7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  403b7e:	9c06      	ldr	r4, [sp, #24]
  403b80:	4632      	mov	r2, r6
  403b82:	463b      	mov	r3, r7
  403b84:	4640      	mov	r0, r8
  403b86:	4649      	mov	r1, r9
  403b88:	f001 fd7a 	bl	405680 <__aeabi_ddiv>
  403b8c:	f001 fefe 	bl	40598c <__aeabi_d2iz>
  403b90:	4605      	mov	r5, r0
  403b92:	f001 fbe5 	bl	405360 <__aeabi_i2d>
  403b96:	4632      	mov	r2, r6
  403b98:	463b      	mov	r3, r7
  403b9a:	f001 fc47 	bl	40542c <__aeabi_dmul>
  403b9e:	460b      	mov	r3, r1
  403ba0:	4602      	mov	r2, r0
  403ba2:	4649      	mov	r1, r9
  403ba4:	4640      	mov	r0, r8
  403ba6:	f001 fa8d 	bl	4050c4 <__aeabi_dsub>
  403baa:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  403bae:	9b06      	ldr	r3, [sp, #24]
  403bb0:	f804 eb01 	strb.w	lr, [r4], #1
  403bb4:	ebc3 0e04 	rsb	lr, r3, r4
  403bb8:	9b05      	ldr	r3, [sp, #20]
  403bba:	4573      	cmp	r3, lr
  403bbc:	d12e      	bne.n	403c1c <_dtoa_r+0x69c>
  403bbe:	4602      	mov	r2, r0
  403bc0:	460b      	mov	r3, r1
  403bc2:	f001 fa81 	bl	4050c8 <__adddf3>
  403bc6:	4680      	mov	r8, r0
  403bc8:	4689      	mov	r9, r1
  403bca:	4602      	mov	r2, r0
  403bcc:	460b      	mov	r3, r1
  403bce:	4630      	mov	r0, r6
  403bd0:	4639      	mov	r1, r7
  403bd2:	f001 fe9d 	bl	405910 <__aeabi_dcmplt>
  403bd6:	b978      	cbnz	r0, 403bf8 <_dtoa_r+0x678>
  403bd8:	4642      	mov	r2, r8
  403bda:	464b      	mov	r3, r9
  403bdc:	4630      	mov	r0, r6
  403bde:	4639      	mov	r1, r7
  403be0:	f001 fe8c 	bl	4058fc <__aeabi_dcmpeq>
  403be4:	2800      	cmp	r0, #0
  403be6:	f000 8246 	beq.w	404076 <_dtoa_r+0xaf6>
  403bea:	07eb      	lsls	r3, r5, #31
  403bec:	d404      	bmi.n	403bf8 <_dtoa_r+0x678>
  403bee:	e242      	b.n	404076 <_dtoa_r+0xaf6>
  403bf0:	f8dd b020 	ldr.w	fp, [sp, #32]
  403bf4:	e000      	b.n	403bf8 <_dtoa_r+0x678>
  403bf6:	461c      	mov	r4, r3
  403bf8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  403bfc:	2a39      	cmp	r2, #57	; 0x39
  403bfe:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  403c02:	d107      	bne.n	403c14 <_dtoa_r+0x694>
  403c04:	9a06      	ldr	r2, [sp, #24]
  403c06:	429a      	cmp	r2, r3
  403c08:	d1f5      	bne.n	403bf6 <_dtoa_r+0x676>
  403c0a:	9906      	ldr	r1, [sp, #24]
  403c0c:	2230      	movs	r2, #48	; 0x30
  403c0e:	f10b 0b01 	add.w	fp, fp, #1
  403c12:	700a      	strb	r2, [r1, #0]
  403c14:	781a      	ldrb	r2, [r3, #0]
  403c16:	3201      	adds	r2, #1
  403c18:	701a      	strb	r2, [r3, #0]
  403c1a:	e22c      	b.n	404076 <_dtoa_r+0xaf6>
  403c1c:	2200      	movs	r2, #0
  403c1e:	4b76      	ldr	r3, [pc, #472]	; (403df8 <_dtoa_r+0x878>)
  403c20:	f001 fc04 	bl	40542c <__aeabi_dmul>
  403c24:	2200      	movs	r2, #0
  403c26:	2300      	movs	r3, #0
  403c28:	4680      	mov	r8, r0
  403c2a:	4689      	mov	r9, r1
  403c2c:	f001 fe66 	bl	4058fc <__aeabi_dcmpeq>
  403c30:	2800      	cmp	r0, #0
  403c32:	d0a5      	beq.n	403b80 <_dtoa_r+0x600>
  403c34:	e21f      	b.n	404076 <_dtoa_r+0xaf6>
  403c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403c38:	2a00      	cmp	r2, #0
  403c3a:	d02b      	beq.n	403c94 <_dtoa_r+0x714>
  403c3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403c3e:	2a01      	cmp	r2, #1
  403c40:	dc0a      	bgt.n	403c58 <_dtoa_r+0x6d8>
  403c42:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403c44:	b112      	cbz	r2, 403c4c <_dtoa_r+0x6cc>
  403c46:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403c4a:	e002      	b.n	403c52 <_dtoa_r+0x6d2>
  403c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403c4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  403c52:	463d      	mov	r5, r7
  403c54:	4644      	mov	r4, r8
  403c56:	e013      	b.n	403c80 <_dtoa_r+0x700>
  403c58:	9b05      	ldr	r3, [sp, #20]
  403c5a:	1e5d      	subs	r5, r3, #1
  403c5c:	42af      	cmp	r7, r5
  403c5e:	bfbf      	itttt	lt
  403c60:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  403c62:	1bea      	sublt	r2, r5, r7
  403c64:	189b      	addlt	r3, r3, r2
  403c66:	930b      	strlt	r3, [sp, #44]	; 0x2c
  403c68:	9b05      	ldr	r3, [sp, #20]
  403c6a:	bfb6      	itet	lt
  403c6c:	462f      	movlt	r7, r5
  403c6e:	1b7d      	subge	r5, r7, r5
  403c70:	2500      	movlt	r5, #0
  403c72:	2b00      	cmp	r3, #0
  403c74:	bfab      	itete	ge
  403c76:	9b05      	ldrge	r3, [sp, #20]
  403c78:	ebc3 0408 	rsblt	r4, r3, r8
  403c7c:	4644      	movge	r4, r8
  403c7e:	2300      	movlt	r3, #0
  403c80:	9a07      	ldr	r2, [sp, #28]
  403c82:	2101      	movs	r1, #1
  403c84:	441a      	add	r2, r3
  403c86:	4650      	mov	r0, sl
  403c88:	4498      	add	r8, r3
  403c8a:	9207      	str	r2, [sp, #28]
  403c8c:	f000 fd37 	bl	4046fe <__i2b>
  403c90:	4606      	mov	r6, r0
  403c92:	e002      	b.n	403c9a <_dtoa_r+0x71a>
  403c94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403c96:	463d      	mov	r5, r7
  403c98:	4644      	mov	r4, r8
  403c9a:	b15c      	cbz	r4, 403cb4 <_dtoa_r+0x734>
  403c9c:	9b07      	ldr	r3, [sp, #28]
  403c9e:	2b00      	cmp	r3, #0
  403ca0:	dd08      	ble.n	403cb4 <_dtoa_r+0x734>
  403ca2:	42a3      	cmp	r3, r4
  403ca4:	9a07      	ldr	r2, [sp, #28]
  403ca6:	bfa8      	it	ge
  403ca8:	4623      	movge	r3, r4
  403caa:	ebc3 0808 	rsb	r8, r3, r8
  403cae:	1ae4      	subs	r4, r4, r3
  403cb0:	1ad3      	subs	r3, r2, r3
  403cb2:	9307      	str	r3, [sp, #28]
  403cb4:	2f00      	cmp	r7, #0
  403cb6:	dd1d      	ble.n	403cf4 <_dtoa_r+0x774>
  403cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cba:	b1ab      	cbz	r3, 403ce8 <_dtoa_r+0x768>
  403cbc:	b18d      	cbz	r5, 403ce2 <_dtoa_r+0x762>
  403cbe:	4631      	mov	r1, r6
  403cc0:	462a      	mov	r2, r5
  403cc2:	4650      	mov	r0, sl
  403cc4:	f000 fdb6 	bl	404834 <__pow5mult>
  403cc8:	9a04      	ldr	r2, [sp, #16]
  403cca:	4601      	mov	r1, r0
  403ccc:	4606      	mov	r6, r0
  403cce:	4650      	mov	r0, sl
  403cd0:	f000 fd1e 	bl	404710 <__multiply>
  403cd4:	9904      	ldr	r1, [sp, #16]
  403cd6:	9008      	str	r0, [sp, #32]
  403cd8:	4650      	mov	r0, sl
  403cda:	f000 fc71 	bl	4045c0 <_Bfree>
  403cde:	9b08      	ldr	r3, [sp, #32]
  403ce0:	9304      	str	r3, [sp, #16]
  403ce2:	1b7a      	subs	r2, r7, r5
  403ce4:	d006      	beq.n	403cf4 <_dtoa_r+0x774>
  403ce6:	e000      	b.n	403cea <_dtoa_r+0x76a>
  403ce8:	463a      	mov	r2, r7
  403cea:	9904      	ldr	r1, [sp, #16]
  403cec:	4650      	mov	r0, sl
  403cee:	f000 fda1 	bl	404834 <__pow5mult>
  403cf2:	9004      	str	r0, [sp, #16]
  403cf4:	2101      	movs	r1, #1
  403cf6:	4650      	mov	r0, sl
  403cf8:	f000 fd01 	bl	4046fe <__i2b>
  403cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403cfe:	4605      	mov	r5, r0
  403d00:	b35b      	cbz	r3, 403d5a <_dtoa_r+0x7da>
  403d02:	461a      	mov	r2, r3
  403d04:	4601      	mov	r1, r0
  403d06:	4650      	mov	r0, sl
  403d08:	f000 fd94 	bl	404834 <__pow5mult>
  403d0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403d0e:	2b01      	cmp	r3, #1
  403d10:	4605      	mov	r5, r0
  403d12:	dc18      	bgt.n	403d46 <_dtoa_r+0x7c6>
  403d14:	9b02      	ldr	r3, [sp, #8]
  403d16:	b983      	cbnz	r3, 403d3a <_dtoa_r+0x7ba>
  403d18:	9b03      	ldr	r3, [sp, #12]
  403d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403d1e:	b973      	cbnz	r3, 403d3e <_dtoa_r+0x7be>
  403d20:	9b03      	ldr	r3, [sp, #12]
  403d22:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  403d26:	0d3f      	lsrs	r7, r7, #20
  403d28:	053f      	lsls	r7, r7, #20
  403d2a:	b14f      	cbz	r7, 403d40 <_dtoa_r+0x7c0>
  403d2c:	9b07      	ldr	r3, [sp, #28]
  403d2e:	3301      	adds	r3, #1
  403d30:	f108 0801 	add.w	r8, r8, #1
  403d34:	9307      	str	r3, [sp, #28]
  403d36:	2701      	movs	r7, #1
  403d38:	e002      	b.n	403d40 <_dtoa_r+0x7c0>
  403d3a:	2700      	movs	r7, #0
  403d3c:	e000      	b.n	403d40 <_dtoa_r+0x7c0>
  403d3e:	9f02      	ldr	r7, [sp, #8]
  403d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403d42:	b173      	cbz	r3, 403d62 <_dtoa_r+0x7e2>
  403d44:	e000      	b.n	403d48 <_dtoa_r+0x7c8>
  403d46:	2700      	movs	r7, #0
  403d48:	692b      	ldr	r3, [r5, #16]
  403d4a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  403d4e:	6918      	ldr	r0, [r3, #16]
  403d50:	f000 fc88 	bl	404664 <__hi0bits>
  403d54:	f1c0 0020 	rsb	r0, r0, #32
  403d58:	e004      	b.n	403d64 <_dtoa_r+0x7e4>
  403d5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403d5c:	2b01      	cmp	r3, #1
  403d5e:	ddd9      	ble.n	403d14 <_dtoa_r+0x794>
  403d60:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  403d62:	2001      	movs	r0, #1
  403d64:	9b07      	ldr	r3, [sp, #28]
  403d66:	4418      	add	r0, r3
  403d68:	f010 001f 	ands.w	r0, r0, #31
  403d6c:	d008      	beq.n	403d80 <_dtoa_r+0x800>
  403d6e:	f1c0 0320 	rsb	r3, r0, #32
  403d72:	2b04      	cmp	r3, #4
  403d74:	dd02      	ble.n	403d7c <_dtoa_r+0x7fc>
  403d76:	f1c0 001c 	rsb	r0, r0, #28
  403d7a:	e002      	b.n	403d82 <_dtoa_r+0x802>
  403d7c:	d006      	beq.n	403d8c <_dtoa_r+0x80c>
  403d7e:	4618      	mov	r0, r3
  403d80:	301c      	adds	r0, #28
  403d82:	9b07      	ldr	r3, [sp, #28]
  403d84:	4403      	add	r3, r0
  403d86:	4480      	add	r8, r0
  403d88:	4404      	add	r4, r0
  403d8a:	9307      	str	r3, [sp, #28]
  403d8c:	f1b8 0f00 	cmp.w	r8, #0
  403d90:	dd05      	ble.n	403d9e <_dtoa_r+0x81e>
  403d92:	4642      	mov	r2, r8
  403d94:	9904      	ldr	r1, [sp, #16]
  403d96:	4650      	mov	r0, sl
  403d98:	f000 fd9a 	bl	4048d0 <__lshift>
  403d9c:	9004      	str	r0, [sp, #16]
  403d9e:	9b07      	ldr	r3, [sp, #28]
  403da0:	2b00      	cmp	r3, #0
  403da2:	dd05      	ble.n	403db0 <_dtoa_r+0x830>
  403da4:	4629      	mov	r1, r5
  403da6:	461a      	mov	r2, r3
  403da8:	4650      	mov	r0, sl
  403daa:	f000 fd91 	bl	4048d0 <__lshift>
  403dae:	4605      	mov	r5, r0
  403db0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403db2:	b31b      	cbz	r3, 403dfc <_dtoa_r+0x87c>
  403db4:	4629      	mov	r1, r5
  403db6:	9804      	ldr	r0, [sp, #16]
  403db8:	f000 fddb 	bl	404972 <__mcmp>
  403dbc:	2800      	cmp	r0, #0
  403dbe:	da1d      	bge.n	403dfc <_dtoa_r+0x87c>
  403dc0:	2300      	movs	r3, #0
  403dc2:	220a      	movs	r2, #10
  403dc4:	9904      	ldr	r1, [sp, #16]
  403dc6:	4650      	mov	r0, sl
  403dc8:	f000 fc11 	bl	4045ee <__multadd>
  403dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dce:	9004      	str	r0, [sp, #16]
  403dd0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403dd4:	2b00      	cmp	r3, #0
  403dd6:	f000 8160 	beq.w	40409a <_dtoa_r+0xb1a>
  403dda:	4631      	mov	r1, r6
  403ddc:	2300      	movs	r3, #0
  403dde:	220a      	movs	r2, #10
  403de0:	4650      	mov	r0, sl
  403de2:	f000 fc04 	bl	4045ee <__multadd>
  403de6:	f1b9 0f00 	cmp.w	r9, #0
  403dea:	4606      	mov	r6, r0
  403dec:	dc3e      	bgt.n	403e6c <_dtoa_r+0x8ec>
  403dee:	e03a      	b.n	403e66 <_dtoa_r+0x8e6>
  403df0:	004063b8 	.word	0x004063b8
  403df4:	40140000 	.word	0x40140000
  403df8:	40240000 	.word	0x40240000
  403dfc:	9b05      	ldr	r3, [sp, #20]
  403dfe:	2b00      	cmp	r3, #0
  403e00:	dc2b      	bgt.n	403e5a <_dtoa_r+0x8da>
  403e02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403e04:	2b02      	cmp	r3, #2
  403e06:	dd28      	ble.n	403e5a <_dtoa_r+0x8da>
  403e08:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403e0c:	f1b9 0f00 	cmp.w	r9, #0
  403e10:	d111      	bne.n	403e36 <_dtoa_r+0x8b6>
  403e12:	4629      	mov	r1, r5
  403e14:	464b      	mov	r3, r9
  403e16:	2205      	movs	r2, #5
  403e18:	4650      	mov	r0, sl
  403e1a:	f000 fbe8 	bl	4045ee <__multadd>
  403e1e:	4601      	mov	r1, r0
  403e20:	4605      	mov	r5, r0
  403e22:	9804      	ldr	r0, [sp, #16]
  403e24:	f000 fda5 	bl	404972 <__mcmp>
  403e28:	2800      	cmp	r0, #0
  403e2a:	dc0c      	bgt.n	403e46 <_dtoa_r+0x8c6>
  403e2c:	e003      	b.n	403e36 <_dtoa_r+0x8b6>
  403e2e:	4635      	mov	r5, r6
  403e30:	e000      	b.n	403e34 <_dtoa_r+0x8b4>
  403e32:	2500      	movs	r5, #0
  403e34:	462e      	mov	r6, r5
  403e36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403e38:	9c06      	ldr	r4, [sp, #24]
  403e3a:	ea6f 0b03 	mvn.w	fp, r3
  403e3e:	e009      	b.n	403e54 <_dtoa_r+0x8d4>
  403e40:	f8dd b020 	ldr.w	fp, [sp, #32]
  403e44:	4635      	mov	r5, r6
  403e46:	9b06      	ldr	r3, [sp, #24]
  403e48:	9a06      	ldr	r2, [sp, #24]
  403e4a:	1c5c      	adds	r4, r3, #1
  403e4c:	2331      	movs	r3, #49	; 0x31
  403e4e:	7013      	strb	r3, [r2, #0]
  403e50:	f10b 0b01 	add.w	fp, fp, #1
  403e54:	9605      	str	r6, [sp, #20]
  403e56:	2600      	movs	r6, #0
  403e58:	e0f9      	b.n	40404e <_dtoa_r+0xace>
  403e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e5c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  403e60:	b923      	cbnz	r3, 403e6c <_dtoa_r+0x8ec>
  403e62:	9c06      	ldr	r4, [sp, #24]
  403e64:	e0b2      	b.n	403fcc <_dtoa_r+0xa4c>
  403e66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403e68:	2b02      	cmp	r3, #2
  403e6a:	dccf      	bgt.n	403e0c <_dtoa_r+0x88c>
  403e6c:	2c00      	cmp	r4, #0
  403e6e:	dd05      	ble.n	403e7c <_dtoa_r+0x8fc>
  403e70:	4631      	mov	r1, r6
  403e72:	4622      	mov	r2, r4
  403e74:	4650      	mov	r0, sl
  403e76:	f000 fd2b 	bl	4048d0 <__lshift>
  403e7a:	4606      	mov	r6, r0
  403e7c:	b19f      	cbz	r7, 403ea6 <_dtoa_r+0x926>
  403e7e:	6871      	ldr	r1, [r6, #4]
  403e80:	4650      	mov	r0, sl
  403e82:	f000 fb68 	bl	404556 <_Balloc>
  403e86:	6932      	ldr	r2, [r6, #16]
  403e88:	3202      	adds	r2, #2
  403e8a:	4604      	mov	r4, r0
  403e8c:	0092      	lsls	r2, r2, #2
  403e8e:	f106 010c 	add.w	r1, r6, #12
  403e92:	300c      	adds	r0, #12
  403e94:	f000 fb54 	bl	404540 <memcpy>
  403e98:	2201      	movs	r2, #1
  403e9a:	4621      	mov	r1, r4
  403e9c:	4650      	mov	r0, sl
  403e9e:	f000 fd17 	bl	4048d0 <__lshift>
  403ea2:	9005      	str	r0, [sp, #20]
  403ea4:	e000      	b.n	403ea8 <_dtoa_r+0x928>
  403ea6:	9605      	str	r6, [sp, #20]
  403ea8:	9b02      	ldr	r3, [sp, #8]
  403eaa:	9f06      	ldr	r7, [sp, #24]
  403eac:	f003 0301 	and.w	r3, r3, #1
  403eb0:	9307      	str	r3, [sp, #28]
  403eb2:	4629      	mov	r1, r5
  403eb4:	9804      	ldr	r0, [sp, #16]
  403eb6:	f7ff fad1 	bl	40345c <quorem>
  403eba:	4631      	mov	r1, r6
  403ebc:	4604      	mov	r4, r0
  403ebe:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403ec2:	9804      	ldr	r0, [sp, #16]
  403ec4:	f000 fd55 	bl	404972 <__mcmp>
  403ec8:	9a05      	ldr	r2, [sp, #20]
  403eca:	9002      	str	r0, [sp, #8]
  403ecc:	4629      	mov	r1, r5
  403ece:	4650      	mov	r0, sl
  403ed0:	f000 fd6b 	bl	4049aa <__mdiff>
  403ed4:	68c3      	ldr	r3, [r0, #12]
  403ed6:	4602      	mov	r2, r0
  403ed8:	b93b      	cbnz	r3, 403eea <_dtoa_r+0x96a>
  403eda:	4601      	mov	r1, r0
  403edc:	900a      	str	r0, [sp, #40]	; 0x28
  403ede:	9804      	ldr	r0, [sp, #16]
  403ee0:	f000 fd47 	bl	404972 <__mcmp>
  403ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403ee6:	4603      	mov	r3, r0
  403ee8:	e000      	b.n	403eec <_dtoa_r+0x96c>
  403eea:	2301      	movs	r3, #1
  403eec:	4611      	mov	r1, r2
  403eee:	4650      	mov	r0, sl
  403ef0:	930a      	str	r3, [sp, #40]	; 0x28
  403ef2:	f000 fb65 	bl	4045c0 <_Bfree>
  403ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ef8:	b953      	cbnz	r3, 403f10 <_dtoa_r+0x990>
  403efa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403efc:	b942      	cbnz	r2, 403f10 <_dtoa_r+0x990>
  403efe:	9a07      	ldr	r2, [sp, #28]
  403f00:	b932      	cbnz	r2, 403f10 <_dtoa_r+0x990>
  403f02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403f06:	d02a      	beq.n	403f5e <_dtoa_r+0x9de>
  403f08:	9b02      	ldr	r3, [sp, #8]
  403f0a:	2b00      	cmp	r3, #0
  403f0c:	dc1c      	bgt.n	403f48 <_dtoa_r+0x9c8>
  403f0e:	e01d      	b.n	403f4c <_dtoa_r+0x9cc>
  403f10:	9a02      	ldr	r2, [sp, #8]
  403f12:	2a00      	cmp	r2, #0
  403f14:	db04      	blt.n	403f20 <_dtoa_r+0x9a0>
  403f16:	d11b      	bne.n	403f50 <_dtoa_r+0x9d0>
  403f18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  403f1a:	b9ca      	cbnz	r2, 403f50 <_dtoa_r+0x9d0>
  403f1c:	9a07      	ldr	r2, [sp, #28]
  403f1e:	b9ba      	cbnz	r2, 403f50 <_dtoa_r+0x9d0>
  403f20:	2b00      	cmp	r3, #0
  403f22:	dd13      	ble.n	403f4c <_dtoa_r+0x9cc>
  403f24:	2201      	movs	r2, #1
  403f26:	9904      	ldr	r1, [sp, #16]
  403f28:	4650      	mov	r0, sl
  403f2a:	f000 fcd1 	bl	4048d0 <__lshift>
  403f2e:	4629      	mov	r1, r5
  403f30:	9004      	str	r0, [sp, #16]
  403f32:	f000 fd1e 	bl	404972 <__mcmp>
  403f36:	2800      	cmp	r0, #0
  403f38:	dc03      	bgt.n	403f42 <_dtoa_r+0x9c2>
  403f3a:	d107      	bne.n	403f4c <_dtoa_r+0x9cc>
  403f3c:	f018 0f01 	tst.w	r8, #1
  403f40:	d004      	beq.n	403f4c <_dtoa_r+0x9cc>
  403f42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403f46:	d00a      	beq.n	403f5e <_dtoa_r+0x9de>
  403f48:	f104 0831 	add.w	r8, r4, #49	; 0x31
  403f4c:	1c7c      	adds	r4, r7, #1
  403f4e:	e00c      	b.n	403f6a <_dtoa_r+0x9ea>
  403f50:	2b00      	cmp	r3, #0
  403f52:	f107 0401 	add.w	r4, r7, #1
  403f56:	dd0b      	ble.n	403f70 <_dtoa_r+0x9f0>
  403f58:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403f5c:	d103      	bne.n	403f66 <_dtoa_r+0x9e6>
  403f5e:	2339      	movs	r3, #57	; 0x39
  403f60:	703b      	strb	r3, [r7, #0]
  403f62:	3701      	adds	r7, #1
  403f64:	e056      	b.n	404014 <_dtoa_r+0xa94>
  403f66:	f108 0801 	add.w	r8, r8, #1
  403f6a:	f887 8000 	strb.w	r8, [r7]
  403f6e:	e06e      	b.n	40404e <_dtoa_r+0xace>
  403f70:	9b06      	ldr	r3, [sp, #24]
  403f72:	f804 8c01 	strb.w	r8, [r4, #-1]
  403f76:	1ae3      	subs	r3, r4, r3
  403f78:	454b      	cmp	r3, r9
  403f7a:	4627      	mov	r7, r4
  403f7c:	d03b      	beq.n	403ff6 <_dtoa_r+0xa76>
  403f7e:	2300      	movs	r3, #0
  403f80:	220a      	movs	r2, #10
  403f82:	9904      	ldr	r1, [sp, #16]
  403f84:	4650      	mov	r0, sl
  403f86:	f000 fb32 	bl	4045ee <__multadd>
  403f8a:	9b05      	ldr	r3, [sp, #20]
  403f8c:	9004      	str	r0, [sp, #16]
  403f8e:	429e      	cmp	r6, r3
  403f90:	f04f 020a 	mov.w	r2, #10
  403f94:	f04f 0300 	mov.w	r3, #0
  403f98:	4631      	mov	r1, r6
  403f9a:	4650      	mov	r0, sl
  403f9c:	d104      	bne.n	403fa8 <_dtoa_r+0xa28>
  403f9e:	f000 fb26 	bl	4045ee <__multadd>
  403fa2:	4606      	mov	r6, r0
  403fa4:	9005      	str	r0, [sp, #20]
  403fa6:	e784      	b.n	403eb2 <_dtoa_r+0x932>
  403fa8:	f000 fb21 	bl	4045ee <__multadd>
  403fac:	2300      	movs	r3, #0
  403fae:	4606      	mov	r6, r0
  403fb0:	220a      	movs	r2, #10
  403fb2:	9905      	ldr	r1, [sp, #20]
  403fb4:	4650      	mov	r0, sl
  403fb6:	f000 fb1a 	bl	4045ee <__multadd>
  403fba:	9005      	str	r0, [sp, #20]
  403fbc:	e779      	b.n	403eb2 <_dtoa_r+0x932>
  403fbe:	2300      	movs	r3, #0
  403fc0:	220a      	movs	r2, #10
  403fc2:	9904      	ldr	r1, [sp, #16]
  403fc4:	4650      	mov	r0, sl
  403fc6:	f000 fb12 	bl	4045ee <__multadd>
  403fca:	9004      	str	r0, [sp, #16]
  403fcc:	4629      	mov	r1, r5
  403fce:	9804      	ldr	r0, [sp, #16]
  403fd0:	f7ff fa44 	bl	40345c <quorem>
  403fd4:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403fd8:	f804 8b01 	strb.w	r8, [r4], #1
  403fdc:	9b06      	ldr	r3, [sp, #24]
  403fde:	1ae3      	subs	r3, r4, r3
  403fe0:	454b      	cmp	r3, r9
  403fe2:	dbec      	blt.n	403fbe <_dtoa_r+0xa3e>
  403fe4:	9b06      	ldr	r3, [sp, #24]
  403fe6:	9605      	str	r6, [sp, #20]
  403fe8:	f1b9 0f01 	cmp.w	r9, #1
  403fec:	bfac      	ite	ge
  403fee:	444b      	addge	r3, r9
  403ff0:	3301      	addlt	r3, #1
  403ff2:	461f      	mov	r7, r3
  403ff4:	2600      	movs	r6, #0
  403ff6:	2201      	movs	r2, #1
  403ff8:	9904      	ldr	r1, [sp, #16]
  403ffa:	4650      	mov	r0, sl
  403ffc:	f000 fc68 	bl	4048d0 <__lshift>
  404000:	4629      	mov	r1, r5
  404002:	9004      	str	r0, [sp, #16]
  404004:	f000 fcb5 	bl	404972 <__mcmp>
  404008:	2800      	cmp	r0, #0
  40400a:	dc03      	bgt.n	404014 <_dtoa_r+0xa94>
  40400c:	d116      	bne.n	40403c <_dtoa_r+0xabc>
  40400e:	f018 0f01 	tst.w	r8, #1
  404012:	d013      	beq.n	40403c <_dtoa_r+0xabc>
  404014:	463c      	mov	r4, r7
  404016:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40401a:	2b39      	cmp	r3, #57	; 0x39
  40401c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  404020:	d109      	bne.n	404036 <_dtoa_r+0xab6>
  404022:	9b06      	ldr	r3, [sp, #24]
  404024:	4293      	cmp	r3, r2
  404026:	d104      	bne.n	404032 <_dtoa_r+0xab2>
  404028:	f10b 0b01 	add.w	fp, fp, #1
  40402c:	2331      	movs	r3, #49	; 0x31
  40402e:	9a06      	ldr	r2, [sp, #24]
  404030:	e002      	b.n	404038 <_dtoa_r+0xab8>
  404032:	4614      	mov	r4, r2
  404034:	e7ef      	b.n	404016 <_dtoa_r+0xa96>
  404036:	3301      	adds	r3, #1
  404038:	7013      	strb	r3, [r2, #0]
  40403a:	e008      	b.n	40404e <_dtoa_r+0xace>
  40403c:	463c      	mov	r4, r7
  40403e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  404042:	2b30      	cmp	r3, #48	; 0x30
  404044:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  404048:	d101      	bne.n	40404e <_dtoa_r+0xace>
  40404a:	4614      	mov	r4, r2
  40404c:	e7f7      	b.n	40403e <_dtoa_r+0xabe>
  40404e:	4629      	mov	r1, r5
  404050:	4650      	mov	r0, sl
  404052:	f000 fab5 	bl	4045c0 <_Bfree>
  404056:	9b05      	ldr	r3, [sp, #20]
  404058:	b16b      	cbz	r3, 404076 <_dtoa_r+0xaf6>
  40405a:	b12e      	cbz	r6, 404068 <_dtoa_r+0xae8>
  40405c:	429e      	cmp	r6, r3
  40405e:	d003      	beq.n	404068 <_dtoa_r+0xae8>
  404060:	4631      	mov	r1, r6
  404062:	4650      	mov	r0, sl
  404064:	f000 faac 	bl	4045c0 <_Bfree>
  404068:	9905      	ldr	r1, [sp, #20]
  40406a:	4650      	mov	r0, sl
  40406c:	f000 faa8 	bl	4045c0 <_Bfree>
  404070:	e001      	b.n	404076 <_dtoa_r+0xaf6>
  404072:	f8dd b020 	ldr.w	fp, [sp, #32]
  404076:	9904      	ldr	r1, [sp, #16]
  404078:	4650      	mov	r0, sl
  40407a:	f000 faa1 	bl	4045c0 <_Bfree>
  40407e:	2300      	movs	r3, #0
  404080:	9a20      	ldr	r2, [sp, #128]	; 0x80
  404082:	7023      	strb	r3, [r4, #0]
  404084:	f10b 0301 	add.w	r3, fp, #1
  404088:	6013      	str	r3, [r2, #0]
  40408a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40408c:	b11b      	cbz	r3, 404096 <_dtoa_r+0xb16>
  40408e:	601c      	str	r4, [r3, #0]
  404090:	e001      	b.n	404096 <_dtoa_r+0xb16>
  404092:	4808      	ldr	r0, [pc, #32]	; (4040b4 <_dtoa_r+0xb34>)
  404094:	e00a      	b.n	4040ac <_dtoa_r+0xb2c>
  404096:	9806      	ldr	r0, [sp, #24]
  404098:	e008      	b.n	4040ac <_dtoa_r+0xb2c>
  40409a:	f1b9 0f00 	cmp.w	r9, #0
  40409e:	f73f aee0 	bgt.w	403e62 <_dtoa_r+0x8e2>
  4040a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4040a4:	2b02      	cmp	r3, #2
  4040a6:	f77f aedc 	ble.w	403e62 <_dtoa_r+0x8e2>
  4040aa:	e6af      	b.n	403e0c <_dtoa_r+0x88c>
  4040ac:	b015      	add	sp, #84	; 0x54
  4040ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4040b2:	bf00      	nop
  4040b4:	00406324 	.word	0x00406324

004040b8 <__sflush_r>:
  4040b8:	898a      	ldrh	r2, [r1, #12]
  4040ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4040be:	4605      	mov	r5, r0
  4040c0:	0710      	lsls	r0, r2, #28
  4040c2:	460c      	mov	r4, r1
  4040c4:	d459      	bmi.n	40417a <__sflush_r+0xc2>
  4040c6:	684b      	ldr	r3, [r1, #4]
  4040c8:	2b00      	cmp	r3, #0
  4040ca:	dc02      	bgt.n	4040d2 <__sflush_r+0x1a>
  4040cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4040ce:	2b00      	cmp	r3, #0
  4040d0:	dd17      	ble.n	404102 <__sflush_r+0x4a>
  4040d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  4040d4:	b1ae      	cbz	r6, 404102 <__sflush_r+0x4a>
  4040d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  4040da:	2300      	movs	r3, #0
  4040dc:	b292      	uxth	r2, r2
  4040de:	682f      	ldr	r7, [r5, #0]
  4040e0:	602b      	str	r3, [r5, #0]
  4040e2:	b10a      	cbz	r2, 4040e8 <__sflush_r+0x30>
  4040e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
  4040e6:	e015      	b.n	404114 <__sflush_r+0x5c>
  4040e8:	6a21      	ldr	r1, [r4, #32]
  4040ea:	2301      	movs	r3, #1
  4040ec:	4628      	mov	r0, r5
  4040ee:	47b0      	blx	r6
  4040f0:	1c41      	adds	r1, r0, #1
  4040f2:	d10f      	bne.n	404114 <__sflush_r+0x5c>
  4040f4:	682b      	ldr	r3, [r5, #0]
  4040f6:	b16b      	cbz	r3, 404114 <__sflush_r+0x5c>
  4040f8:	2b1d      	cmp	r3, #29
  4040fa:	d001      	beq.n	404100 <__sflush_r+0x48>
  4040fc:	2b16      	cmp	r3, #22
  4040fe:	d103      	bne.n	404108 <__sflush_r+0x50>
  404100:	602f      	str	r7, [r5, #0]
  404102:	2000      	movs	r0, #0
  404104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404108:	89a3      	ldrh	r3, [r4, #12]
  40410a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40410e:	81a3      	strh	r3, [r4, #12]
  404110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404114:	89a3      	ldrh	r3, [r4, #12]
  404116:	075a      	lsls	r2, r3, #29
  404118:	d505      	bpl.n	404126 <__sflush_r+0x6e>
  40411a:	6863      	ldr	r3, [r4, #4]
  40411c:	1ac0      	subs	r0, r0, r3
  40411e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  404120:	b10b      	cbz	r3, 404126 <__sflush_r+0x6e>
  404122:	6c23      	ldr	r3, [r4, #64]	; 0x40
  404124:	1ac0      	subs	r0, r0, r3
  404126:	2300      	movs	r3, #0
  404128:	4602      	mov	r2, r0
  40412a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  40412c:	6a21      	ldr	r1, [r4, #32]
  40412e:	4628      	mov	r0, r5
  404130:	47b0      	blx	r6
  404132:	1c43      	adds	r3, r0, #1
  404134:	89a3      	ldrh	r3, [r4, #12]
  404136:	d106      	bne.n	404146 <__sflush_r+0x8e>
  404138:	6829      	ldr	r1, [r5, #0]
  40413a:	291d      	cmp	r1, #29
  40413c:	d83a      	bhi.n	4041b4 <__sflush_r+0xfc>
  40413e:	4a21      	ldr	r2, [pc, #132]	; (4041c4 <__sflush_r+0x10c>)
  404140:	40ca      	lsrs	r2, r1
  404142:	07d6      	lsls	r6, r2, #31
  404144:	d536      	bpl.n	4041b4 <__sflush_r+0xfc>
  404146:	2200      	movs	r2, #0
  404148:	6062      	str	r2, [r4, #4]
  40414a:	04d9      	lsls	r1, r3, #19
  40414c:	6922      	ldr	r2, [r4, #16]
  40414e:	6022      	str	r2, [r4, #0]
  404150:	d504      	bpl.n	40415c <__sflush_r+0xa4>
  404152:	1c42      	adds	r2, r0, #1
  404154:	d101      	bne.n	40415a <__sflush_r+0xa2>
  404156:	682b      	ldr	r3, [r5, #0]
  404158:	b903      	cbnz	r3, 40415c <__sflush_r+0xa4>
  40415a:	6560      	str	r0, [r4, #84]	; 0x54
  40415c:	6b61      	ldr	r1, [r4, #52]	; 0x34
  40415e:	602f      	str	r7, [r5, #0]
  404160:	2900      	cmp	r1, #0
  404162:	d0ce      	beq.n	404102 <__sflush_r+0x4a>
  404164:	f104 0344 	add.w	r3, r4, #68	; 0x44
  404168:	4299      	cmp	r1, r3
  40416a:	d002      	beq.n	404172 <__sflush_r+0xba>
  40416c:	4628      	mov	r0, r5
  40416e:	f000 fcd7 	bl	404b20 <_free_r>
  404172:	2000      	movs	r0, #0
  404174:	6360      	str	r0, [r4, #52]	; 0x34
  404176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40417a:	690f      	ldr	r7, [r1, #16]
  40417c:	2f00      	cmp	r7, #0
  40417e:	d0c0      	beq.n	404102 <__sflush_r+0x4a>
  404180:	0793      	lsls	r3, r2, #30
  404182:	680e      	ldr	r6, [r1, #0]
  404184:	bf08      	it	eq
  404186:	694b      	ldreq	r3, [r1, #20]
  404188:	600f      	str	r7, [r1, #0]
  40418a:	bf18      	it	ne
  40418c:	2300      	movne	r3, #0
  40418e:	ebc7 0806 	rsb	r8, r7, r6
  404192:	608b      	str	r3, [r1, #8]
  404194:	e002      	b.n	40419c <__sflush_r+0xe4>
  404196:	4407      	add	r7, r0
  404198:	ebc0 0808 	rsb	r8, r0, r8
  40419c:	f1b8 0f00 	cmp.w	r8, #0
  4041a0:	ddaf      	ble.n	404102 <__sflush_r+0x4a>
  4041a2:	4643      	mov	r3, r8
  4041a4:	463a      	mov	r2, r7
  4041a6:	6a21      	ldr	r1, [r4, #32]
  4041a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4041aa:	4628      	mov	r0, r5
  4041ac:	47b0      	blx	r6
  4041ae:	2800      	cmp	r0, #0
  4041b0:	dcf1      	bgt.n	404196 <__sflush_r+0xde>
  4041b2:	89a3      	ldrh	r3, [r4, #12]
  4041b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4041b8:	81a3      	strh	r3, [r4, #12]
  4041ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4041be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4041c2:	bf00      	nop
  4041c4:	20400001 	.word	0x20400001

004041c8 <_fflush_r>:
  4041c8:	b538      	push	{r3, r4, r5, lr}
  4041ca:	690b      	ldr	r3, [r1, #16]
  4041cc:	4605      	mov	r5, r0
  4041ce:	460c      	mov	r4, r1
  4041d0:	b1db      	cbz	r3, 40420a <_fflush_r+0x42>
  4041d2:	b118      	cbz	r0, 4041dc <_fflush_r+0x14>
  4041d4:	6983      	ldr	r3, [r0, #24]
  4041d6:	b90b      	cbnz	r3, 4041dc <_fflush_r+0x14>
  4041d8:	f000 f860 	bl	40429c <__sinit>
  4041dc:	4b0c      	ldr	r3, [pc, #48]	; (404210 <_fflush_r+0x48>)
  4041de:	429c      	cmp	r4, r3
  4041e0:	d101      	bne.n	4041e6 <_fflush_r+0x1e>
  4041e2:	686c      	ldr	r4, [r5, #4]
  4041e4:	e008      	b.n	4041f8 <_fflush_r+0x30>
  4041e6:	4b0b      	ldr	r3, [pc, #44]	; (404214 <_fflush_r+0x4c>)
  4041e8:	429c      	cmp	r4, r3
  4041ea:	d101      	bne.n	4041f0 <_fflush_r+0x28>
  4041ec:	68ac      	ldr	r4, [r5, #8]
  4041ee:	e003      	b.n	4041f8 <_fflush_r+0x30>
  4041f0:	4b09      	ldr	r3, [pc, #36]	; (404218 <_fflush_r+0x50>)
  4041f2:	429c      	cmp	r4, r3
  4041f4:	bf08      	it	eq
  4041f6:	68ec      	ldreq	r4, [r5, #12]
  4041f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041fc:	b12b      	cbz	r3, 40420a <_fflush_r+0x42>
  4041fe:	4621      	mov	r1, r4
  404200:	4628      	mov	r0, r5
  404202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404206:	f7ff bf57 	b.w	4040b8 <__sflush_r>
  40420a:	2000      	movs	r0, #0
  40420c:	bd38      	pop	{r3, r4, r5, pc}
  40420e:	bf00      	nop
  404210:	00406358 	.word	0x00406358
  404214:	00406378 	.word	0x00406378
  404218:	00406398 	.word	0x00406398

0040421c <_cleanup_r>:
  40421c:	4901      	ldr	r1, [pc, #4]	; (404224 <_cleanup_r+0x8>)
  40421e:	f000 b8a9 	b.w	404374 <_fwalk_reent>
  404222:	bf00      	nop
  404224:	004041c9 	.word	0x004041c9

00404228 <std.isra.0>:
  404228:	2300      	movs	r3, #0
  40422a:	b510      	push	{r4, lr}
  40422c:	4604      	mov	r4, r0
  40422e:	6003      	str	r3, [r0, #0]
  404230:	6043      	str	r3, [r0, #4]
  404232:	6083      	str	r3, [r0, #8]
  404234:	8181      	strh	r1, [r0, #12]
  404236:	6643      	str	r3, [r0, #100]	; 0x64
  404238:	81c2      	strh	r2, [r0, #14]
  40423a:	6103      	str	r3, [r0, #16]
  40423c:	6143      	str	r3, [r0, #20]
  40423e:	6183      	str	r3, [r0, #24]
  404240:	4619      	mov	r1, r3
  404242:	2208      	movs	r2, #8
  404244:	305c      	adds	r0, #92	; 0x5c
  404246:	f7fe fa9b 	bl	402780 <memset>
  40424a:	4b05      	ldr	r3, [pc, #20]	; (404260 <std.isra.0+0x38>)
  40424c:	6263      	str	r3, [r4, #36]	; 0x24
  40424e:	4b05      	ldr	r3, [pc, #20]	; (404264 <std.isra.0+0x3c>)
  404250:	62a3      	str	r3, [r4, #40]	; 0x28
  404252:	4b05      	ldr	r3, [pc, #20]	; (404268 <std.isra.0+0x40>)
  404254:	62e3      	str	r3, [r4, #44]	; 0x2c
  404256:	4b05      	ldr	r3, [pc, #20]	; (40426c <std.isra.0+0x44>)
  404258:	6224      	str	r4, [r4, #32]
  40425a:	6323      	str	r3, [r4, #48]	; 0x30
  40425c:	bd10      	pop	{r4, pc}
  40425e:	bf00      	nop
  404260:	00404f21 	.word	0x00404f21
  404264:	00404f43 	.word	0x00404f43
  404268:	00404f7b 	.word	0x00404f7b
  40426c:	00404f9f 	.word	0x00404f9f

00404270 <__sfmoreglue>:
  404270:	b570      	push	{r4, r5, r6, lr}
  404272:	2368      	movs	r3, #104	; 0x68
  404274:	1e4d      	subs	r5, r1, #1
  404276:	435d      	muls	r5, r3
  404278:	460e      	mov	r6, r1
  40427a:	f105 0174 	add.w	r1, r5, #116	; 0x74
  40427e:	f000 fc9d 	bl	404bbc <_malloc_r>
  404282:	4604      	mov	r4, r0
  404284:	b140      	cbz	r0, 404298 <__sfmoreglue+0x28>
  404286:	2100      	movs	r1, #0
  404288:	e880 0042 	stmia.w	r0, {r1, r6}
  40428c:	300c      	adds	r0, #12
  40428e:	60a0      	str	r0, [r4, #8]
  404290:	f105 0268 	add.w	r2, r5, #104	; 0x68
  404294:	f7fe fa74 	bl	402780 <memset>
  404298:	4620      	mov	r0, r4
  40429a:	bd70      	pop	{r4, r5, r6, pc}

0040429c <__sinit>:
  40429c:	6983      	ldr	r3, [r0, #24]
  40429e:	b510      	push	{r4, lr}
  4042a0:	4604      	mov	r4, r0
  4042a2:	bb33      	cbnz	r3, 4042f2 <__sinit+0x56>
  4042a4:	6483      	str	r3, [r0, #72]	; 0x48
  4042a6:	64c3      	str	r3, [r0, #76]	; 0x4c
  4042a8:	6503      	str	r3, [r0, #80]	; 0x50
  4042aa:	4b12      	ldr	r3, [pc, #72]	; (4042f4 <__sinit+0x58>)
  4042ac:	4a12      	ldr	r2, [pc, #72]	; (4042f8 <__sinit+0x5c>)
  4042ae:	681b      	ldr	r3, [r3, #0]
  4042b0:	6282      	str	r2, [r0, #40]	; 0x28
  4042b2:	4298      	cmp	r0, r3
  4042b4:	bf04      	itt	eq
  4042b6:	2301      	moveq	r3, #1
  4042b8:	6183      	streq	r3, [r0, #24]
  4042ba:	f000 f81f 	bl	4042fc <__sfp>
  4042be:	6060      	str	r0, [r4, #4]
  4042c0:	4620      	mov	r0, r4
  4042c2:	f000 f81b 	bl	4042fc <__sfp>
  4042c6:	60a0      	str	r0, [r4, #8]
  4042c8:	4620      	mov	r0, r4
  4042ca:	f000 f817 	bl	4042fc <__sfp>
  4042ce:	2200      	movs	r2, #0
  4042d0:	60e0      	str	r0, [r4, #12]
  4042d2:	2104      	movs	r1, #4
  4042d4:	6860      	ldr	r0, [r4, #4]
  4042d6:	f7ff ffa7 	bl	404228 <std.isra.0>
  4042da:	2201      	movs	r2, #1
  4042dc:	2109      	movs	r1, #9
  4042de:	68a0      	ldr	r0, [r4, #8]
  4042e0:	f7ff ffa2 	bl	404228 <std.isra.0>
  4042e4:	2202      	movs	r2, #2
  4042e6:	2112      	movs	r1, #18
  4042e8:	68e0      	ldr	r0, [r4, #12]
  4042ea:	f7ff ff9d 	bl	404228 <std.isra.0>
  4042ee:	2301      	movs	r3, #1
  4042f0:	61a3      	str	r3, [r4, #24]
  4042f2:	bd10      	pop	{r4, pc}
  4042f4:	00406310 	.word	0x00406310
  4042f8:	0040421d 	.word	0x0040421d

004042fc <__sfp>:
  4042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4042fe:	4b1c      	ldr	r3, [pc, #112]	; (404370 <__sfp+0x74>)
  404300:	681e      	ldr	r6, [r3, #0]
  404302:	69b3      	ldr	r3, [r6, #24]
  404304:	4607      	mov	r7, r0
  404306:	b913      	cbnz	r3, 40430e <__sfp+0x12>
  404308:	4630      	mov	r0, r6
  40430a:	f7ff ffc7 	bl	40429c <__sinit>
  40430e:	3648      	adds	r6, #72	; 0x48
  404310:	68b4      	ldr	r4, [r6, #8]
  404312:	6873      	ldr	r3, [r6, #4]
  404314:	3b01      	subs	r3, #1
  404316:	d404      	bmi.n	404322 <__sfp+0x26>
  404318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  40431c:	b17d      	cbz	r5, 40433e <__sfp+0x42>
  40431e:	3468      	adds	r4, #104	; 0x68
  404320:	e7f8      	b.n	404314 <__sfp+0x18>
  404322:	6833      	ldr	r3, [r6, #0]
  404324:	b10b      	cbz	r3, 40432a <__sfp+0x2e>
  404326:	6836      	ldr	r6, [r6, #0]
  404328:	e7f2      	b.n	404310 <__sfp+0x14>
  40432a:	2104      	movs	r1, #4
  40432c:	4638      	mov	r0, r7
  40432e:	f7ff ff9f 	bl	404270 <__sfmoreglue>
  404332:	6030      	str	r0, [r6, #0]
  404334:	2800      	cmp	r0, #0
  404336:	d1f6      	bne.n	404326 <__sfp+0x2a>
  404338:	230c      	movs	r3, #12
  40433a:	603b      	str	r3, [r7, #0]
  40433c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40433e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404342:	81e3      	strh	r3, [r4, #14]
  404344:	2301      	movs	r3, #1
  404346:	81a3      	strh	r3, [r4, #12]
  404348:	6665      	str	r5, [r4, #100]	; 0x64
  40434a:	6025      	str	r5, [r4, #0]
  40434c:	60a5      	str	r5, [r4, #8]
  40434e:	6065      	str	r5, [r4, #4]
  404350:	6125      	str	r5, [r4, #16]
  404352:	6165      	str	r5, [r4, #20]
  404354:	61a5      	str	r5, [r4, #24]
  404356:	2208      	movs	r2, #8
  404358:	4629      	mov	r1, r5
  40435a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  40435e:	f7fe fa0f 	bl	402780 <memset>
  404362:	6365      	str	r5, [r4, #52]	; 0x34
  404364:	63a5      	str	r5, [r4, #56]	; 0x38
  404366:	64a5      	str	r5, [r4, #72]	; 0x48
  404368:	64e5      	str	r5, [r4, #76]	; 0x4c
  40436a:	4620      	mov	r0, r4
  40436c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40436e:	bf00      	nop
  404370:	00406310 	.word	0x00406310

00404374 <_fwalk_reent>:
  404374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404378:	4680      	mov	r8, r0
  40437a:	4689      	mov	r9, r1
  40437c:	f100 0448 	add.w	r4, r0, #72	; 0x48
  404380:	2600      	movs	r6, #0
  404382:	b194      	cbz	r4, 4043aa <_fwalk_reent+0x36>
  404384:	68a5      	ldr	r5, [r4, #8]
  404386:	6867      	ldr	r7, [r4, #4]
  404388:	3f01      	subs	r7, #1
  40438a:	d40c      	bmi.n	4043a6 <_fwalk_reent+0x32>
  40438c:	89ab      	ldrh	r3, [r5, #12]
  40438e:	2b01      	cmp	r3, #1
  404390:	d907      	bls.n	4043a2 <_fwalk_reent+0x2e>
  404392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  404396:	3301      	adds	r3, #1
  404398:	d003      	beq.n	4043a2 <_fwalk_reent+0x2e>
  40439a:	4629      	mov	r1, r5
  40439c:	4640      	mov	r0, r8
  40439e:	47c8      	blx	r9
  4043a0:	4306      	orrs	r6, r0
  4043a2:	3568      	adds	r5, #104	; 0x68
  4043a4:	e7f0      	b.n	404388 <_fwalk_reent+0x14>
  4043a6:	6824      	ldr	r4, [r4, #0]
  4043a8:	e7eb      	b.n	404382 <_fwalk_reent+0xe>
  4043aa:	4630      	mov	r0, r6
  4043ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004043b0 <_localeconv_r>:
  4043b0:	4b04      	ldr	r3, [pc, #16]	; (4043c4 <_localeconv_r+0x14>)
  4043b2:	681b      	ldr	r3, [r3, #0]
  4043b4:	6a18      	ldr	r0, [r3, #32]
  4043b6:	4b04      	ldr	r3, [pc, #16]	; (4043c8 <_localeconv_r+0x18>)
  4043b8:	2800      	cmp	r0, #0
  4043ba:	bf08      	it	eq
  4043bc:	4618      	moveq	r0, r3
  4043be:	30f0      	adds	r0, #240	; 0xf0
  4043c0:	4770      	bx	lr
  4043c2:	bf00      	nop
  4043c4:	20000074 	.word	0x20000074
  4043c8:	20000078 	.word	0x20000078

004043cc <__swhatbuf_r>:
  4043cc:	b570      	push	{r4, r5, r6, lr}
  4043ce:	460e      	mov	r6, r1
  4043d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4043d4:	2900      	cmp	r1, #0
  4043d6:	b090      	sub	sp, #64	; 0x40
  4043d8:	4614      	mov	r4, r2
  4043da:	461d      	mov	r5, r3
  4043dc:	da06      	bge.n	4043ec <__swhatbuf_r+0x20>
  4043de:	2300      	movs	r3, #0
  4043e0:	602b      	str	r3, [r5, #0]
  4043e2:	89b3      	ldrh	r3, [r6, #12]
  4043e4:	061a      	lsls	r2, r3, #24
  4043e6:	d50e      	bpl.n	404406 <__swhatbuf_r+0x3a>
  4043e8:	2340      	movs	r3, #64	; 0x40
  4043ea:	e00e      	b.n	40440a <__swhatbuf_r+0x3e>
  4043ec:	aa01      	add	r2, sp, #4
  4043ee:	f000 fdfd 	bl	404fec <_fstat_r>
  4043f2:	2800      	cmp	r0, #0
  4043f4:	dbf3      	blt.n	4043de <__swhatbuf_r+0x12>
  4043f6:	9a02      	ldr	r2, [sp, #8]
  4043f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4043fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  404400:	425a      	negs	r2, r3
  404402:	415a      	adcs	r2, r3
  404404:	602a      	str	r2, [r5, #0]
  404406:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40440a:	2000      	movs	r0, #0
  40440c:	6023      	str	r3, [r4, #0]
  40440e:	b010      	add	sp, #64	; 0x40
  404410:	bd70      	pop	{r4, r5, r6, pc}
	...

00404414 <__smakebuf_r>:
  404414:	898b      	ldrh	r3, [r1, #12]
  404416:	b573      	push	{r0, r1, r4, r5, r6, lr}
  404418:	079e      	lsls	r6, r3, #30
  40441a:	4605      	mov	r5, r0
  40441c:	460c      	mov	r4, r1
  40441e:	d410      	bmi.n	404442 <__smakebuf_r+0x2e>
  404420:	ab01      	add	r3, sp, #4
  404422:	466a      	mov	r2, sp
  404424:	f7ff ffd2 	bl	4043cc <__swhatbuf_r>
  404428:	9900      	ldr	r1, [sp, #0]
  40442a:	4606      	mov	r6, r0
  40442c:	4628      	mov	r0, r5
  40442e:	f000 fbc5 	bl	404bbc <_malloc_r>
  404432:	b968      	cbnz	r0, 404450 <__smakebuf_r+0x3c>
  404434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404438:	059a      	lsls	r2, r3, #22
  40443a:	d422      	bmi.n	404482 <__smakebuf_r+0x6e>
  40443c:	f043 0302 	orr.w	r3, r3, #2
  404440:	81a3      	strh	r3, [r4, #12]
  404442:	f104 0347 	add.w	r3, r4, #71	; 0x47
  404446:	6023      	str	r3, [r4, #0]
  404448:	6123      	str	r3, [r4, #16]
  40444a:	2301      	movs	r3, #1
  40444c:	6163      	str	r3, [r4, #20]
  40444e:	e018      	b.n	404482 <__smakebuf_r+0x6e>
  404450:	4b0d      	ldr	r3, [pc, #52]	; (404488 <__smakebuf_r+0x74>)
  404452:	62ab      	str	r3, [r5, #40]	; 0x28
  404454:	89a3      	ldrh	r3, [r4, #12]
  404456:	6020      	str	r0, [r4, #0]
  404458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40445c:	81a3      	strh	r3, [r4, #12]
  40445e:	9b00      	ldr	r3, [sp, #0]
  404460:	6163      	str	r3, [r4, #20]
  404462:	9b01      	ldr	r3, [sp, #4]
  404464:	6120      	str	r0, [r4, #16]
  404466:	b14b      	cbz	r3, 40447c <__smakebuf_r+0x68>
  404468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40446c:	4628      	mov	r0, r5
  40446e:	f000 fdcf 	bl	405010 <_isatty_r>
  404472:	b118      	cbz	r0, 40447c <__smakebuf_r+0x68>
  404474:	89a3      	ldrh	r3, [r4, #12]
  404476:	f043 0301 	orr.w	r3, r3, #1
  40447a:	81a3      	strh	r3, [r4, #12]
  40447c:	89a0      	ldrh	r0, [r4, #12]
  40447e:	4330      	orrs	r0, r6
  404480:	81a0      	strh	r0, [r4, #12]
  404482:	b002      	add	sp, #8
  404484:	bd70      	pop	{r4, r5, r6, pc}
  404486:	bf00      	nop
  404488:	0040421d 	.word	0x0040421d

0040448c <malloc>:
  40448c:	4b02      	ldr	r3, [pc, #8]	; (404498 <malloc+0xc>)
  40448e:	4601      	mov	r1, r0
  404490:	6818      	ldr	r0, [r3, #0]
  404492:	f000 bb93 	b.w	404bbc <_malloc_r>
  404496:	bf00      	nop
  404498:	20000074 	.word	0x20000074
  40449c:	00000000 	.word	0x00000000

004044a0 <memchr>:
  4044a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4044a4:	2a10      	cmp	r2, #16
  4044a6:	db2b      	blt.n	404500 <memchr+0x60>
  4044a8:	f010 0f07 	tst.w	r0, #7
  4044ac:	d008      	beq.n	4044c0 <memchr+0x20>
  4044ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  4044b2:	3a01      	subs	r2, #1
  4044b4:	428b      	cmp	r3, r1
  4044b6:	d02d      	beq.n	404514 <memchr+0x74>
  4044b8:	f010 0f07 	tst.w	r0, #7
  4044bc:	b342      	cbz	r2, 404510 <memchr+0x70>
  4044be:	d1f6      	bne.n	4044ae <memchr+0xe>
  4044c0:	b4f0      	push	{r4, r5, r6, r7}
  4044c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4044c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4044ca:	f022 0407 	bic.w	r4, r2, #7
  4044ce:	f07f 0700 	mvns.w	r7, #0
  4044d2:	2300      	movs	r3, #0
  4044d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4044d8:	3c08      	subs	r4, #8
  4044da:	ea85 0501 	eor.w	r5, r5, r1
  4044de:	ea86 0601 	eor.w	r6, r6, r1
  4044e2:	fa85 f547 	uadd8	r5, r5, r7
  4044e6:	faa3 f587 	sel	r5, r3, r7
  4044ea:	fa86 f647 	uadd8	r6, r6, r7
  4044ee:	faa5 f687 	sel	r6, r5, r7
  4044f2:	b98e      	cbnz	r6, 404518 <memchr+0x78>
  4044f4:	d1ee      	bne.n	4044d4 <memchr+0x34>
  4044f6:	bcf0      	pop	{r4, r5, r6, r7}
  4044f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4044fc:	f002 0207 	and.w	r2, r2, #7
  404500:	b132      	cbz	r2, 404510 <memchr+0x70>
  404502:	f810 3b01 	ldrb.w	r3, [r0], #1
  404506:	3a01      	subs	r2, #1
  404508:	ea83 0301 	eor.w	r3, r3, r1
  40450c:	b113      	cbz	r3, 404514 <memchr+0x74>
  40450e:	d1f8      	bne.n	404502 <memchr+0x62>
  404510:	2000      	movs	r0, #0
  404512:	4770      	bx	lr
  404514:	3801      	subs	r0, #1
  404516:	4770      	bx	lr
  404518:	2d00      	cmp	r5, #0
  40451a:	bf06      	itte	eq
  40451c:	4635      	moveq	r5, r6
  40451e:	3803      	subeq	r0, #3
  404520:	3807      	subne	r0, #7
  404522:	f015 0f01 	tst.w	r5, #1
  404526:	d107      	bne.n	404538 <memchr+0x98>
  404528:	3001      	adds	r0, #1
  40452a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40452e:	bf02      	ittt	eq
  404530:	3001      	addeq	r0, #1
  404532:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404536:	3001      	addeq	r0, #1
  404538:	bcf0      	pop	{r4, r5, r6, r7}
  40453a:	3801      	subs	r0, #1
  40453c:	4770      	bx	lr
  40453e:	bf00      	nop

00404540 <memcpy>:
  404540:	b510      	push	{r4, lr}
  404542:	1e43      	subs	r3, r0, #1
  404544:	440a      	add	r2, r1
  404546:	4291      	cmp	r1, r2
  404548:	d004      	beq.n	404554 <memcpy+0x14>
  40454a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40454e:	f803 4f01 	strb.w	r4, [r3, #1]!
  404552:	e7f8      	b.n	404546 <memcpy+0x6>
  404554:	bd10      	pop	{r4, pc}

00404556 <_Balloc>:
  404556:	b570      	push	{r4, r5, r6, lr}
  404558:	6a45      	ldr	r5, [r0, #36]	; 0x24
  40455a:	4604      	mov	r4, r0
  40455c:	460e      	mov	r6, r1
  40455e:	b93d      	cbnz	r5, 404570 <_Balloc+0x1a>
  404560:	2010      	movs	r0, #16
  404562:	f7ff ff93 	bl	40448c <malloc>
  404566:	6260      	str	r0, [r4, #36]	; 0x24
  404568:	6045      	str	r5, [r0, #4]
  40456a:	6085      	str	r5, [r0, #8]
  40456c:	6005      	str	r5, [r0, #0]
  40456e:	60c5      	str	r5, [r0, #12]
  404570:	6a65      	ldr	r5, [r4, #36]	; 0x24
  404572:	68eb      	ldr	r3, [r5, #12]
  404574:	b143      	cbz	r3, 404588 <_Balloc+0x32>
  404576:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404578:	68db      	ldr	r3, [r3, #12]
  40457a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  40457e:	b178      	cbz	r0, 4045a0 <_Balloc+0x4a>
  404580:	6802      	ldr	r2, [r0, #0]
  404582:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404586:	e017      	b.n	4045b8 <_Balloc+0x62>
  404588:	2221      	movs	r2, #33	; 0x21
  40458a:	2104      	movs	r1, #4
  40458c:	4620      	mov	r0, r4
  40458e:	f000 fab9 	bl	404b04 <_calloc_r>
  404592:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404594:	60e8      	str	r0, [r5, #12]
  404596:	68db      	ldr	r3, [r3, #12]
  404598:	2b00      	cmp	r3, #0
  40459a:	d1ec      	bne.n	404576 <_Balloc+0x20>
  40459c:	2000      	movs	r0, #0
  40459e:	bd70      	pop	{r4, r5, r6, pc}
  4045a0:	2101      	movs	r1, #1
  4045a2:	fa01 f506 	lsl.w	r5, r1, r6
  4045a6:	1d6a      	adds	r2, r5, #5
  4045a8:	0092      	lsls	r2, r2, #2
  4045aa:	4620      	mov	r0, r4
  4045ac:	f000 faaa 	bl	404b04 <_calloc_r>
  4045b0:	2800      	cmp	r0, #0
  4045b2:	d0f3      	beq.n	40459c <_Balloc+0x46>
  4045b4:	6046      	str	r6, [r0, #4]
  4045b6:	6085      	str	r5, [r0, #8]
  4045b8:	2300      	movs	r3, #0
  4045ba:	6103      	str	r3, [r0, #16]
  4045bc:	60c3      	str	r3, [r0, #12]
  4045be:	bd70      	pop	{r4, r5, r6, pc}

004045c0 <_Bfree>:
  4045c0:	b570      	push	{r4, r5, r6, lr}
  4045c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  4045c4:	4606      	mov	r6, r0
  4045c6:	460d      	mov	r5, r1
  4045c8:	b93c      	cbnz	r4, 4045da <_Bfree+0x1a>
  4045ca:	2010      	movs	r0, #16
  4045cc:	f7ff ff5e 	bl	40448c <malloc>
  4045d0:	6270      	str	r0, [r6, #36]	; 0x24
  4045d2:	6044      	str	r4, [r0, #4]
  4045d4:	6084      	str	r4, [r0, #8]
  4045d6:	6004      	str	r4, [r0, #0]
  4045d8:	60c4      	str	r4, [r0, #12]
  4045da:	b13d      	cbz	r5, 4045ec <_Bfree+0x2c>
  4045dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
  4045de:	686a      	ldr	r2, [r5, #4]
  4045e0:	68db      	ldr	r3, [r3, #12]
  4045e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4045e6:	6029      	str	r1, [r5, #0]
  4045e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4045ec:	bd70      	pop	{r4, r5, r6, pc}

004045ee <__multadd>:
  4045ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4045f2:	690d      	ldr	r5, [r1, #16]
  4045f4:	461f      	mov	r7, r3
  4045f6:	4606      	mov	r6, r0
  4045f8:	460c      	mov	r4, r1
  4045fa:	f101 0e14 	add.w	lr, r1, #20
  4045fe:	2300      	movs	r3, #0
  404600:	f8de 0000 	ldr.w	r0, [lr]
  404604:	b281      	uxth	r1, r0
  404606:	fb02 7101 	mla	r1, r2, r1, r7
  40460a:	0c0f      	lsrs	r7, r1, #16
  40460c:	0c00      	lsrs	r0, r0, #16
  40460e:	fb02 7000 	mla	r0, r2, r0, r7
  404612:	b289      	uxth	r1, r1
  404614:	3301      	adds	r3, #1
  404616:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40461a:	429d      	cmp	r5, r3
  40461c:	ea4f 4710 	mov.w	r7, r0, lsr #16
  404620:	f84e 1b04 	str.w	r1, [lr], #4
  404624:	dcec      	bgt.n	404600 <__multadd+0x12>
  404626:	b1d7      	cbz	r7, 40465e <__multadd+0x70>
  404628:	68a3      	ldr	r3, [r4, #8]
  40462a:	429d      	cmp	r5, r3
  40462c:	db12      	blt.n	404654 <__multadd+0x66>
  40462e:	6861      	ldr	r1, [r4, #4]
  404630:	4630      	mov	r0, r6
  404632:	3101      	adds	r1, #1
  404634:	f7ff ff8f 	bl	404556 <_Balloc>
  404638:	6922      	ldr	r2, [r4, #16]
  40463a:	3202      	adds	r2, #2
  40463c:	f104 010c 	add.w	r1, r4, #12
  404640:	4680      	mov	r8, r0
  404642:	0092      	lsls	r2, r2, #2
  404644:	300c      	adds	r0, #12
  404646:	f7ff ff7b 	bl	404540 <memcpy>
  40464a:	4621      	mov	r1, r4
  40464c:	4630      	mov	r0, r6
  40464e:	f7ff ffb7 	bl	4045c0 <_Bfree>
  404652:	4644      	mov	r4, r8
  404654:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  404658:	3501      	adds	r5, #1
  40465a:	615f      	str	r7, [r3, #20]
  40465c:	6125      	str	r5, [r4, #16]
  40465e:	4620      	mov	r0, r4
  404660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404664 <__hi0bits>:
  404664:	0c03      	lsrs	r3, r0, #16
  404666:	041b      	lsls	r3, r3, #16
  404668:	b913      	cbnz	r3, 404670 <__hi0bits+0xc>
  40466a:	0400      	lsls	r0, r0, #16
  40466c:	2310      	movs	r3, #16
  40466e:	e000      	b.n	404672 <__hi0bits+0xe>
  404670:	2300      	movs	r3, #0
  404672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  404676:	bf04      	itt	eq
  404678:	0200      	lsleq	r0, r0, #8
  40467a:	3308      	addeq	r3, #8
  40467c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  404680:	bf04      	itt	eq
  404682:	0100      	lsleq	r0, r0, #4
  404684:	3304      	addeq	r3, #4
  404686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40468a:	bf04      	itt	eq
  40468c:	0080      	lsleq	r0, r0, #2
  40468e:	3302      	addeq	r3, #2
  404690:	2800      	cmp	r0, #0
  404692:	db03      	blt.n	40469c <__hi0bits+0x38>
  404694:	0042      	lsls	r2, r0, #1
  404696:	d503      	bpl.n	4046a0 <__hi0bits+0x3c>
  404698:	1c58      	adds	r0, r3, #1
  40469a:	4770      	bx	lr
  40469c:	4618      	mov	r0, r3
  40469e:	4770      	bx	lr
  4046a0:	2020      	movs	r0, #32
  4046a2:	4770      	bx	lr

004046a4 <__lo0bits>:
  4046a4:	6803      	ldr	r3, [r0, #0]
  4046a6:	f013 0207 	ands.w	r2, r3, #7
  4046aa:	d00b      	beq.n	4046c4 <__lo0bits+0x20>
  4046ac:	07d9      	lsls	r1, r3, #31
  4046ae:	d422      	bmi.n	4046f6 <__lo0bits+0x52>
  4046b0:	079a      	lsls	r2, r3, #30
  4046b2:	bf4b      	itete	mi
  4046b4:	085b      	lsrmi	r3, r3, #1
  4046b6:	089b      	lsrpl	r3, r3, #2
  4046b8:	6003      	strmi	r3, [r0, #0]
  4046ba:	6003      	strpl	r3, [r0, #0]
  4046bc:	bf4c      	ite	mi
  4046be:	2001      	movmi	r0, #1
  4046c0:	2002      	movpl	r0, #2
  4046c2:	4770      	bx	lr
  4046c4:	b299      	uxth	r1, r3
  4046c6:	b909      	cbnz	r1, 4046cc <__lo0bits+0x28>
  4046c8:	0c1b      	lsrs	r3, r3, #16
  4046ca:	2210      	movs	r2, #16
  4046cc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4046d0:	bf04      	itt	eq
  4046d2:	0a1b      	lsreq	r3, r3, #8
  4046d4:	3208      	addeq	r2, #8
  4046d6:	0719      	lsls	r1, r3, #28
  4046d8:	bf04      	itt	eq
  4046da:	091b      	lsreq	r3, r3, #4
  4046dc:	3204      	addeq	r2, #4
  4046de:	0799      	lsls	r1, r3, #30
  4046e0:	bf04      	itt	eq
  4046e2:	089b      	lsreq	r3, r3, #2
  4046e4:	3202      	addeq	r2, #2
  4046e6:	07d9      	lsls	r1, r3, #31
  4046e8:	d402      	bmi.n	4046f0 <__lo0bits+0x4c>
  4046ea:	085b      	lsrs	r3, r3, #1
  4046ec:	d005      	beq.n	4046fa <__lo0bits+0x56>
  4046ee:	3201      	adds	r2, #1
  4046f0:	6003      	str	r3, [r0, #0]
  4046f2:	4610      	mov	r0, r2
  4046f4:	4770      	bx	lr
  4046f6:	2000      	movs	r0, #0
  4046f8:	4770      	bx	lr
  4046fa:	2020      	movs	r0, #32
  4046fc:	4770      	bx	lr

004046fe <__i2b>:
  4046fe:	b510      	push	{r4, lr}
  404700:	460c      	mov	r4, r1
  404702:	2101      	movs	r1, #1
  404704:	f7ff ff27 	bl	404556 <_Balloc>
  404708:	2201      	movs	r2, #1
  40470a:	6144      	str	r4, [r0, #20]
  40470c:	6102      	str	r2, [r0, #16]
  40470e:	bd10      	pop	{r4, pc}

00404710 <__multiply>:
  404710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404714:	4614      	mov	r4, r2
  404716:	690a      	ldr	r2, [r1, #16]
  404718:	6923      	ldr	r3, [r4, #16]
  40471a:	429a      	cmp	r2, r3
  40471c:	bfb8      	it	lt
  40471e:	460b      	movlt	r3, r1
  404720:	4688      	mov	r8, r1
  404722:	bfbc      	itt	lt
  404724:	46a0      	movlt	r8, r4
  404726:	461c      	movlt	r4, r3
  404728:	f8d8 7010 	ldr.w	r7, [r8, #16]
  40472c:	f8d4 9010 	ldr.w	r9, [r4, #16]
  404730:	f8d8 3008 	ldr.w	r3, [r8, #8]
  404734:	f8d8 1004 	ldr.w	r1, [r8, #4]
  404738:	eb07 0609 	add.w	r6, r7, r9
  40473c:	429e      	cmp	r6, r3
  40473e:	bfc8      	it	gt
  404740:	3101      	addgt	r1, #1
  404742:	f7ff ff08 	bl	404556 <_Balloc>
  404746:	f100 0514 	add.w	r5, r0, #20
  40474a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  40474e:	462b      	mov	r3, r5
  404750:	2200      	movs	r2, #0
  404752:	4563      	cmp	r3, ip
  404754:	d202      	bcs.n	40475c <__multiply+0x4c>
  404756:	f843 2b04 	str.w	r2, [r3], #4
  40475a:	e7fa      	b.n	404752 <__multiply+0x42>
  40475c:	f104 0214 	add.w	r2, r4, #20
  404760:	f108 0114 	add.w	r1, r8, #20
  404764:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  404768:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  40476c:	9300      	str	r3, [sp, #0]
  40476e:	9b00      	ldr	r3, [sp, #0]
  404770:	9201      	str	r2, [sp, #4]
  404772:	4293      	cmp	r3, r2
  404774:	d957      	bls.n	404826 <__multiply+0x116>
  404776:	f8b2 b000 	ldrh.w	fp, [r2]
  40477a:	f1bb 0f00 	cmp.w	fp, #0
  40477e:	d023      	beq.n	4047c8 <__multiply+0xb8>
  404780:	4689      	mov	r9, r1
  404782:	46ae      	mov	lr, r5
  404784:	f04f 0800 	mov.w	r8, #0
  404788:	f859 4b04 	ldr.w	r4, [r9], #4
  40478c:	f8be a000 	ldrh.w	sl, [lr]
  404790:	b2a3      	uxth	r3, r4
  404792:	fb0b a303 	mla	r3, fp, r3, sl
  404796:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  40479a:	f8de 4000 	ldr.w	r4, [lr]
  40479e:	4443      	add	r3, r8
  4047a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4047a4:	fb0b 840a 	mla	r4, fp, sl, r8
  4047a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  4047ac:	46f2      	mov	sl, lr
  4047ae:	b29b      	uxth	r3, r3
  4047b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  4047b4:	454f      	cmp	r7, r9
  4047b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4047ba:	f84a 3b04 	str.w	r3, [sl], #4
  4047be:	d901      	bls.n	4047c4 <__multiply+0xb4>
  4047c0:	46d6      	mov	lr, sl
  4047c2:	e7e1      	b.n	404788 <__multiply+0x78>
  4047c4:	f8ce 8004 	str.w	r8, [lr, #4]
  4047c8:	9b01      	ldr	r3, [sp, #4]
  4047ca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  4047ce:	3204      	adds	r2, #4
  4047d0:	f1ba 0f00 	cmp.w	sl, #0
  4047d4:	d021      	beq.n	40481a <__multiply+0x10a>
  4047d6:	682b      	ldr	r3, [r5, #0]
  4047d8:	462c      	mov	r4, r5
  4047da:	4689      	mov	r9, r1
  4047dc:	f04f 0800 	mov.w	r8, #0
  4047e0:	f8b9 e000 	ldrh.w	lr, [r9]
  4047e4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  4047e8:	fb0a be0e 	mla	lr, sl, lr, fp
  4047ec:	44f0      	add	r8, lr
  4047ee:	46a3      	mov	fp, r4
  4047f0:	b29b      	uxth	r3, r3
  4047f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4047f6:	f84b 3b04 	str.w	r3, [fp], #4
  4047fa:	f859 3b04 	ldr.w	r3, [r9], #4
  4047fe:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  404802:	0c1b      	lsrs	r3, r3, #16
  404804:	fb0a e303 	mla	r3, sl, r3, lr
  404808:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  40480c:	454f      	cmp	r7, r9
  40480e:	ea4f 4813 	mov.w	r8, r3, lsr #16
  404812:	d901      	bls.n	404818 <__multiply+0x108>
  404814:	465c      	mov	r4, fp
  404816:	e7e3      	b.n	4047e0 <__multiply+0xd0>
  404818:	6063      	str	r3, [r4, #4]
  40481a:	3504      	adds	r5, #4
  40481c:	e7a7      	b.n	40476e <__multiply+0x5e>
  40481e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  404822:	b913      	cbnz	r3, 40482a <__multiply+0x11a>
  404824:	3e01      	subs	r6, #1
  404826:	2e00      	cmp	r6, #0
  404828:	dcf9      	bgt.n	40481e <__multiply+0x10e>
  40482a:	6106      	str	r6, [r0, #16]
  40482c:	b003      	add	sp, #12
  40482e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00404834 <__pow5mult>:
  404834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404838:	4615      	mov	r5, r2
  40483a:	f012 0203 	ands.w	r2, r2, #3
  40483e:	4606      	mov	r6, r0
  404840:	460f      	mov	r7, r1
  404842:	d007      	beq.n	404854 <__pow5mult+0x20>
  404844:	3a01      	subs	r2, #1
  404846:	4c21      	ldr	r4, [pc, #132]	; (4048cc <__pow5mult+0x98>)
  404848:	2300      	movs	r3, #0
  40484a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  40484e:	f7ff fece 	bl	4045ee <__multadd>
  404852:	4607      	mov	r7, r0
  404854:	10ad      	asrs	r5, r5, #2
  404856:	d036      	beq.n	4048c6 <__pow5mult+0x92>
  404858:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40485a:	b93c      	cbnz	r4, 40486c <__pow5mult+0x38>
  40485c:	2010      	movs	r0, #16
  40485e:	f7ff fe15 	bl	40448c <malloc>
  404862:	6270      	str	r0, [r6, #36]	; 0x24
  404864:	6044      	str	r4, [r0, #4]
  404866:	6084      	str	r4, [r0, #8]
  404868:	6004      	str	r4, [r0, #0]
  40486a:	60c4      	str	r4, [r0, #12]
  40486c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  404870:	f8d8 4008 	ldr.w	r4, [r8, #8]
  404874:	b94c      	cbnz	r4, 40488a <__pow5mult+0x56>
  404876:	f240 2171 	movw	r1, #625	; 0x271
  40487a:	4630      	mov	r0, r6
  40487c:	f7ff ff3f 	bl	4046fe <__i2b>
  404880:	2300      	movs	r3, #0
  404882:	f8c8 0008 	str.w	r0, [r8, #8]
  404886:	4604      	mov	r4, r0
  404888:	6003      	str	r3, [r0, #0]
  40488a:	f04f 0800 	mov.w	r8, #0
  40488e:	07eb      	lsls	r3, r5, #31
  404890:	d50a      	bpl.n	4048a8 <__pow5mult+0x74>
  404892:	4639      	mov	r1, r7
  404894:	4622      	mov	r2, r4
  404896:	4630      	mov	r0, r6
  404898:	f7ff ff3a 	bl	404710 <__multiply>
  40489c:	4639      	mov	r1, r7
  40489e:	4681      	mov	r9, r0
  4048a0:	4630      	mov	r0, r6
  4048a2:	f7ff fe8d 	bl	4045c0 <_Bfree>
  4048a6:	464f      	mov	r7, r9
  4048a8:	106d      	asrs	r5, r5, #1
  4048aa:	d00c      	beq.n	4048c6 <__pow5mult+0x92>
  4048ac:	6820      	ldr	r0, [r4, #0]
  4048ae:	b108      	cbz	r0, 4048b4 <__pow5mult+0x80>
  4048b0:	4604      	mov	r4, r0
  4048b2:	e7ec      	b.n	40488e <__pow5mult+0x5a>
  4048b4:	4622      	mov	r2, r4
  4048b6:	4621      	mov	r1, r4
  4048b8:	4630      	mov	r0, r6
  4048ba:	f7ff ff29 	bl	404710 <__multiply>
  4048be:	6020      	str	r0, [r4, #0]
  4048c0:	f8c0 8000 	str.w	r8, [r0]
  4048c4:	e7f4      	b.n	4048b0 <__pow5mult+0x7c>
  4048c6:	4638      	mov	r0, r7
  4048c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4048cc:	004064a8 	.word	0x004064a8

004048d0 <__lshift>:
  4048d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4048d4:	460c      	mov	r4, r1
  4048d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
  4048da:	6926      	ldr	r6, [r4, #16]
  4048dc:	6849      	ldr	r1, [r1, #4]
  4048de:	68a3      	ldr	r3, [r4, #8]
  4048e0:	4456      	add	r6, sl
  4048e2:	4607      	mov	r7, r0
  4048e4:	4691      	mov	r9, r2
  4048e6:	1c75      	adds	r5, r6, #1
  4048e8:	42ab      	cmp	r3, r5
  4048ea:	da02      	bge.n	4048f2 <__lshift+0x22>
  4048ec:	3101      	adds	r1, #1
  4048ee:	005b      	lsls	r3, r3, #1
  4048f0:	e7fa      	b.n	4048e8 <__lshift+0x18>
  4048f2:	4638      	mov	r0, r7
  4048f4:	f7ff fe2f 	bl	404556 <_Balloc>
  4048f8:	2300      	movs	r3, #0
  4048fa:	4680      	mov	r8, r0
  4048fc:	f100 0114 	add.w	r1, r0, #20
  404900:	461a      	mov	r2, r3
  404902:	4553      	cmp	r3, sl
  404904:	da03      	bge.n	40490e <__lshift+0x3e>
  404906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40490a:	3301      	adds	r3, #1
  40490c:	e7f9      	b.n	404902 <__lshift+0x32>
  40490e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  404912:	6920      	ldr	r0, [r4, #16]
  404914:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404918:	f019 091f 	ands.w	r9, r9, #31
  40491c:	f104 0114 	add.w	r1, r4, #20
  404920:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  404924:	d014      	beq.n	404950 <__lshift+0x80>
  404926:	f1c9 0c20 	rsb	ip, r9, #32
  40492a:	2200      	movs	r2, #0
  40492c:	6808      	ldr	r0, [r1, #0]
  40492e:	fa00 f009 	lsl.w	r0, r0, r9
  404932:	4302      	orrs	r2, r0
  404934:	469a      	mov	sl, r3
  404936:	f843 2b04 	str.w	r2, [r3], #4
  40493a:	f851 2b04 	ldr.w	r2, [r1], #4
  40493e:	458e      	cmp	lr, r1
  404940:	fa22 f20c 	lsr.w	r2, r2, ip
  404944:	d8f2      	bhi.n	40492c <__lshift+0x5c>
  404946:	f8ca 2004 	str.w	r2, [sl, #4]
  40494a:	b142      	cbz	r2, 40495e <__lshift+0x8e>
  40494c:	1cb5      	adds	r5, r6, #2
  40494e:	e006      	b.n	40495e <__lshift+0x8e>
  404950:	3b04      	subs	r3, #4
  404952:	f851 2b04 	ldr.w	r2, [r1], #4
  404956:	f843 2f04 	str.w	r2, [r3, #4]!
  40495a:	458e      	cmp	lr, r1
  40495c:	d8f9      	bhi.n	404952 <__lshift+0x82>
  40495e:	3d01      	subs	r5, #1
  404960:	4638      	mov	r0, r7
  404962:	f8c8 5010 	str.w	r5, [r8, #16]
  404966:	4621      	mov	r1, r4
  404968:	f7ff fe2a 	bl	4045c0 <_Bfree>
  40496c:	4640      	mov	r0, r8
  40496e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404972 <__mcmp>:
  404972:	6903      	ldr	r3, [r0, #16]
  404974:	690a      	ldr	r2, [r1, #16]
  404976:	1a9b      	subs	r3, r3, r2
  404978:	b510      	push	{r4, lr}
  40497a:	d111      	bne.n	4049a0 <__mcmp+0x2e>
  40497c:	0092      	lsls	r2, r2, #2
  40497e:	3014      	adds	r0, #20
  404980:	3114      	adds	r1, #20
  404982:	1883      	adds	r3, r0, r2
  404984:	440a      	add	r2, r1
  404986:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40498a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  40498e:	428c      	cmp	r4, r1
  404990:	d002      	beq.n	404998 <__mcmp+0x26>
  404992:	d307      	bcc.n	4049a4 <__mcmp+0x32>
  404994:	2001      	movs	r0, #1
  404996:	bd10      	pop	{r4, pc}
  404998:	4298      	cmp	r0, r3
  40499a:	d3f4      	bcc.n	404986 <__mcmp+0x14>
  40499c:	2000      	movs	r0, #0
  40499e:	bd10      	pop	{r4, pc}
  4049a0:	4618      	mov	r0, r3
  4049a2:	bd10      	pop	{r4, pc}
  4049a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4049a8:	bd10      	pop	{r4, pc}

004049aa <__mdiff>:
  4049aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4049ae:	460c      	mov	r4, r1
  4049b0:	4607      	mov	r7, r0
  4049b2:	4611      	mov	r1, r2
  4049b4:	4620      	mov	r0, r4
  4049b6:	4615      	mov	r5, r2
  4049b8:	f7ff ffdb 	bl	404972 <__mcmp>
  4049bc:	1e06      	subs	r6, r0, #0
  4049be:	d108      	bne.n	4049d2 <__mdiff+0x28>
  4049c0:	4631      	mov	r1, r6
  4049c2:	4638      	mov	r0, r7
  4049c4:	f7ff fdc7 	bl	404556 <_Balloc>
  4049c8:	2301      	movs	r3, #1
  4049ca:	6103      	str	r3, [r0, #16]
  4049cc:	6146      	str	r6, [r0, #20]
  4049ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4049d2:	bfbc      	itt	lt
  4049d4:	4623      	movlt	r3, r4
  4049d6:	462c      	movlt	r4, r5
  4049d8:	4638      	mov	r0, r7
  4049da:	6861      	ldr	r1, [r4, #4]
  4049dc:	bfba      	itte	lt
  4049de:	461d      	movlt	r5, r3
  4049e0:	2601      	movlt	r6, #1
  4049e2:	2600      	movge	r6, #0
  4049e4:	f7ff fdb7 	bl	404556 <_Balloc>
  4049e8:	692b      	ldr	r3, [r5, #16]
  4049ea:	60c6      	str	r6, [r0, #12]
  4049ec:	6926      	ldr	r6, [r4, #16]
  4049ee:	f105 0914 	add.w	r9, r5, #20
  4049f2:	3414      	adds	r4, #20
  4049f4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  4049f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  4049fc:	f100 0514 	add.w	r5, r0, #20
  404a00:	f04f 0c00 	mov.w	ip, #0
  404a04:	f854 3b04 	ldr.w	r3, [r4], #4
  404a08:	f859 2b04 	ldr.w	r2, [r9], #4
  404a0c:	fa1c f183 	uxtah	r1, ip, r3
  404a10:	fa1f fe82 	uxth.w	lr, r2
  404a14:	0c12      	lsrs	r2, r2, #16
  404a16:	ebce 0101 	rsb	r1, lr, r1
  404a1a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  404a1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  404a22:	b289      	uxth	r1, r1
  404a24:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404a28:	45c8      	cmp	r8, r9
  404a2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  404a2e:	46a6      	mov	lr, r4
  404a30:	f845 3b04 	str.w	r3, [r5], #4
  404a34:	d8e6      	bhi.n	404a04 <__mdiff+0x5a>
  404a36:	45be      	cmp	lr, r7
  404a38:	d20e      	bcs.n	404a58 <__mdiff+0xae>
  404a3a:	f85e 1b04 	ldr.w	r1, [lr], #4
  404a3e:	fa1c f281 	uxtah	r2, ip, r1
  404a42:	1413      	asrs	r3, r2, #16
  404a44:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  404a48:	b292      	uxth	r2, r2
  404a4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404a4e:	ea4f 4c23 	mov.w	ip, r3, asr #16
  404a52:	f845 2b04 	str.w	r2, [r5], #4
  404a56:	e7ee      	b.n	404a36 <__mdiff+0x8c>
  404a58:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404a5c:	b90b      	cbnz	r3, 404a62 <__mdiff+0xb8>
  404a5e:	3e01      	subs	r6, #1
  404a60:	e7fa      	b.n	404a58 <__mdiff+0xae>
  404a62:	6106      	str	r6, [r0, #16]
  404a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00404a68 <__d2b>:
  404a68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  404a6c:	2101      	movs	r1, #1
  404a6e:	461c      	mov	r4, r3
  404a70:	4690      	mov	r8, r2
  404a72:	9e08      	ldr	r6, [sp, #32]
  404a74:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404a76:	f7ff fd6e 	bl	404556 <_Balloc>
  404a7a:	f3c4 0213 	ubfx	r2, r4, #0, #20
  404a7e:	f3c4 540a 	ubfx	r4, r4, #20, #11
  404a82:	4607      	mov	r7, r0
  404a84:	b10c      	cbz	r4, 404a8a <__d2b+0x22>
  404a86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  404a8a:	9201      	str	r2, [sp, #4]
  404a8c:	f1b8 0f00 	cmp.w	r8, #0
  404a90:	d019      	beq.n	404ac6 <__d2b+0x5e>
  404a92:	a802      	add	r0, sp, #8
  404a94:	f840 8d08 	str.w	r8, [r0, #-8]!
  404a98:	f7ff fe04 	bl	4046a4 <__lo0bits>
  404a9c:	9b00      	ldr	r3, [sp, #0]
  404a9e:	b148      	cbz	r0, 404ab4 <__d2b+0x4c>
  404aa0:	9a01      	ldr	r2, [sp, #4]
  404aa2:	f1c0 0120 	rsb	r1, r0, #32
  404aa6:	fa02 f101 	lsl.w	r1, r2, r1
  404aaa:	430b      	orrs	r3, r1
  404aac:	40c2      	lsrs	r2, r0
  404aae:	617b      	str	r3, [r7, #20]
  404ab0:	9201      	str	r2, [sp, #4]
  404ab2:	e000      	b.n	404ab6 <__d2b+0x4e>
  404ab4:	617b      	str	r3, [r7, #20]
  404ab6:	9b01      	ldr	r3, [sp, #4]
  404ab8:	61bb      	str	r3, [r7, #24]
  404aba:	2b00      	cmp	r3, #0
  404abc:	bf14      	ite	ne
  404abe:	2102      	movne	r1, #2
  404ac0:	2101      	moveq	r1, #1
  404ac2:	6139      	str	r1, [r7, #16]
  404ac4:	e007      	b.n	404ad6 <__d2b+0x6e>
  404ac6:	a801      	add	r0, sp, #4
  404ac8:	f7ff fdec 	bl	4046a4 <__lo0bits>
  404acc:	9b01      	ldr	r3, [sp, #4]
  404ace:	617b      	str	r3, [r7, #20]
  404ad0:	2101      	movs	r1, #1
  404ad2:	6139      	str	r1, [r7, #16]
  404ad4:	3020      	adds	r0, #32
  404ad6:	b134      	cbz	r4, 404ae6 <__d2b+0x7e>
  404ad8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  404adc:	4404      	add	r4, r0
  404ade:	6034      	str	r4, [r6, #0]
  404ae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404ae4:	e009      	b.n	404afa <__d2b+0x92>
  404ae6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  404aea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  404aee:	6030      	str	r0, [r6, #0]
  404af0:	6918      	ldr	r0, [r3, #16]
  404af2:	f7ff fdb7 	bl	404664 <__hi0bits>
  404af6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  404afa:	6028      	str	r0, [r5, #0]
  404afc:	4638      	mov	r0, r7
  404afe:	b002      	add	sp, #8
  404b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404b04 <_calloc_r>:
  404b04:	b538      	push	{r3, r4, r5, lr}
  404b06:	fb02 f401 	mul.w	r4, r2, r1
  404b0a:	4621      	mov	r1, r4
  404b0c:	f000 f856 	bl	404bbc <_malloc_r>
  404b10:	4605      	mov	r5, r0
  404b12:	b118      	cbz	r0, 404b1c <_calloc_r+0x18>
  404b14:	4622      	mov	r2, r4
  404b16:	2100      	movs	r1, #0
  404b18:	f7fd fe32 	bl	402780 <memset>
  404b1c:	4628      	mov	r0, r5
  404b1e:	bd38      	pop	{r3, r4, r5, pc}

00404b20 <_free_r>:
  404b20:	b538      	push	{r3, r4, r5, lr}
  404b22:	4605      	mov	r5, r0
  404b24:	2900      	cmp	r1, #0
  404b26:	d046      	beq.n	404bb6 <_free_r+0x96>
  404b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
  404b2c:	1f0c      	subs	r4, r1, #4
  404b2e:	2b00      	cmp	r3, #0
  404b30:	bfb8      	it	lt
  404b32:	18e4      	addlt	r4, r4, r3
  404b34:	f000 faa0 	bl	405078 <__malloc_lock>
  404b38:	4a1f      	ldr	r2, [pc, #124]	; (404bb8 <_free_r+0x98>)
  404b3a:	6813      	ldr	r3, [r2, #0]
  404b3c:	4611      	mov	r1, r2
  404b3e:	b913      	cbnz	r3, 404b46 <_free_r+0x26>
  404b40:	6063      	str	r3, [r4, #4]
  404b42:	6014      	str	r4, [r2, #0]
  404b44:	e032      	b.n	404bac <_free_r+0x8c>
  404b46:	42a3      	cmp	r3, r4
  404b48:	d90e      	bls.n	404b68 <_free_r+0x48>
  404b4a:	6822      	ldr	r2, [r4, #0]
  404b4c:	18a0      	adds	r0, r4, r2
  404b4e:	4283      	cmp	r3, r0
  404b50:	bf04      	itt	eq
  404b52:	6818      	ldreq	r0, [r3, #0]
  404b54:	685b      	ldreq	r3, [r3, #4]
  404b56:	6063      	str	r3, [r4, #4]
  404b58:	bf04      	itt	eq
  404b5a:	1812      	addeq	r2, r2, r0
  404b5c:	6022      	streq	r2, [r4, #0]
  404b5e:	600c      	str	r4, [r1, #0]
  404b60:	e024      	b.n	404bac <_free_r+0x8c>
  404b62:	42a2      	cmp	r2, r4
  404b64:	d803      	bhi.n	404b6e <_free_r+0x4e>
  404b66:	4613      	mov	r3, r2
  404b68:	685a      	ldr	r2, [r3, #4]
  404b6a:	2a00      	cmp	r2, #0
  404b6c:	d1f9      	bne.n	404b62 <_free_r+0x42>
  404b6e:	6818      	ldr	r0, [r3, #0]
  404b70:	1819      	adds	r1, r3, r0
  404b72:	42a1      	cmp	r1, r4
  404b74:	d10b      	bne.n	404b8e <_free_r+0x6e>
  404b76:	6821      	ldr	r1, [r4, #0]
  404b78:	4401      	add	r1, r0
  404b7a:	1858      	adds	r0, r3, r1
  404b7c:	4282      	cmp	r2, r0
  404b7e:	6019      	str	r1, [r3, #0]
  404b80:	d114      	bne.n	404bac <_free_r+0x8c>
  404b82:	6810      	ldr	r0, [r2, #0]
  404b84:	6852      	ldr	r2, [r2, #4]
  404b86:	605a      	str	r2, [r3, #4]
  404b88:	4401      	add	r1, r0
  404b8a:	6019      	str	r1, [r3, #0]
  404b8c:	e00e      	b.n	404bac <_free_r+0x8c>
  404b8e:	d902      	bls.n	404b96 <_free_r+0x76>
  404b90:	230c      	movs	r3, #12
  404b92:	602b      	str	r3, [r5, #0]
  404b94:	e00a      	b.n	404bac <_free_r+0x8c>
  404b96:	6821      	ldr	r1, [r4, #0]
  404b98:	1860      	adds	r0, r4, r1
  404b9a:	4282      	cmp	r2, r0
  404b9c:	bf04      	itt	eq
  404b9e:	6810      	ldreq	r0, [r2, #0]
  404ba0:	6852      	ldreq	r2, [r2, #4]
  404ba2:	6062      	str	r2, [r4, #4]
  404ba4:	bf04      	itt	eq
  404ba6:	1809      	addeq	r1, r1, r0
  404ba8:	6021      	streq	r1, [r4, #0]
  404baa:	605c      	str	r4, [r3, #4]
  404bac:	4628      	mov	r0, r5
  404bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404bb2:	f000 ba62 	b.w	40507a <__malloc_unlock>
  404bb6:	bd38      	pop	{r3, r4, r5, pc}
  404bb8:	200002d8 	.word	0x200002d8

00404bbc <_malloc_r>:
  404bbc:	b570      	push	{r4, r5, r6, lr}
  404bbe:	1ccd      	adds	r5, r1, #3
  404bc0:	f025 0503 	bic.w	r5, r5, #3
  404bc4:	3508      	adds	r5, #8
  404bc6:	2d0c      	cmp	r5, #12
  404bc8:	bf38      	it	cc
  404bca:	250c      	movcc	r5, #12
  404bcc:	2d00      	cmp	r5, #0
  404bce:	4606      	mov	r6, r0
  404bd0:	db01      	blt.n	404bd6 <_malloc_r+0x1a>
  404bd2:	42a9      	cmp	r1, r5
  404bd4:	d902      	bls.n	404bdc <_malloc_r+0x20>
  404bd6:	230c      	movs	r3, #12
  404bd8:	6033      	str	r3, [r6, #0]
  404bda:	e046      	b.n	404c6a <_malloc_r+0xae>
  404bdc:	f000 fa4c 	bl	405078 <__malloc_lock>
  404be0:	4b23      	ldr	r3, [pc, #140]	; (404c70 <_malloc_r+0xb4>)
  404be2:	681c      	ldr	r4, [r3, #0]
  404be4:	461a      	mov	r2, r3
  404be6:	4621      	mov	r1, r4
  404be8:	b1a1      	cbz	r1, 404c14 <_malloc_r+0x58>
  404bea:	680b      	ldr	r3, [r1, #0]
  404bec:	1b5b      	subs	r3, r3, r5
  404bee:	d40e      	bmi.n	404c0e <_malloc_r+0x52>
  404bf0:	2b0b      	cmp	r3, #11
  404bf2:	d903      	bls.n	404bfc <_malloc_r+0x40>
  404bf4:	600b      	str	r3, [r1, #0]
  404bf6:	18cc      	adds	r4, r1, r3
  404bf8:	50cd      	str	r5, [r1, r3]
  404bfa:	e01e      	b.n	404c3a <_malloc_r+0x7e>
  404bfc:	428c      	cmp	r4, r1
  404bfe:	bf0d      	iteet	eq
  404c00:	6863      	ldreq	r3, [r4, #4]
  404c02:	684b      	ldrne	r3, [r1, #4]
  404c04:	6063      	strne	r3, [r4, #4]
  404c06:	6013      	streq	r3, [r2, #0]
  404c08:	bf18      	it	ne
  404c0a:	460c      	movne	r4, r1
  404c0c:	e015      	b.n	404c3a <_malloc_r+0x7e>
  404c0e:	460c      	mov	r4, r1
  404c10:	6849      	ldr	r1, [r1, #4]
  404c12:	e7e9      	b.n	404be8 <_malloc_r+0x2c>
  404c14:	4c17      	ldr	r4, [pc, #92]	; (404c74 <_malloc_r+0xb8>)
  404c16:	6823      	ldr	r3, [r4, #0]
  404c18:	b91b      	cbnz	r3, 404c22 <_malloc_r+0x66>
  404c1a:	4630      	mov	r0, r6
  404c1c:	f000 f970 	bl	404f00 <_sbrk_r>
  404c20:	6020      	str	r0, [r4, #0]
  404c22:	4629      	mov	r1, r5
  404c24:	4630      	mov	r0, r6
  404c26:	f000 f96b 	bl	404f00 <_sbrk_r>
  404c2a:	1c43      	adds	r3, r0, #1
  404c2c:	d018      	beq.n	404c60 <_malloc_r+0xa4>
  404c2e:	1cc4      	adds	r4, r0, #3
  404c30:	f024 0403 	bic.w	r4, r4, #3
  404c34:	42a0      	cmp	r0, r4
  404c36:	d10d      	bne.n	404c54 <_malloc_r+0x98>
  404c38:	6025      	str	r5, [r4, #0]
  404c3a:	4630      	mov	r0, r6
  404c3c:	f000 fa1d 	bl	40507a <__malloc_unlock>
  404c40:	f104 000b 	add.w	r0, r4, #11
  404c44:	1d23      	adds	r3, r4, #4
  404c46:	f020 0007 	bic.w	r0, r0, #7
  404c4a:	1ac3      	subs	r3, r0, r3
  404c4c:	d00e      	beq.n	404c6c <_malloc_r+0xb0>
  404c4e:	425a      	negs	r2, r3
  404c50:	50e2      	str	r2, [r4, r3]
  404c52:	bd70      	pop	{r4, r5, r6, pc}
  404c54:	1a21      	subs	r1, r4, r0
  404c56:	4630      	mov	r0, r6
  404c58:	f000 f952 	bl	404f00 <_sbrk_r>
  404c5c:	3001      	adds	r0, #1
  404c5e:	d1eb      	bne.n	404c38 <_malloc_r+0x7c>
  404c60:	230c      	movs	r3, #12
  404c62:	6033      	str	r3, [r6, #0]
  404c64:	4630      	mov	r0, r6
  404c66:	f000 fa08 	bl	40507a <__malloc_unlock>
  404c6a:	2000      	movs	r0, #0
  404c6c:	bd70      	pop	{r4, r5, r6, pc}
  404c6e:	bf00      	nop
  404c70:	200002d8 	.word	0x200002d8
  404c74:	200002d4 	.word	0x200002d4

00404c78 <__sfputc_r>:
  404c78:	6893      	ldr	r3, [r2, #8]
  404c7a:	3b01      	subs	r3, #1
  404c7c:	2b00      	cmp	r3, #0
  404c7e:	b410      	push	{r4}
  404c80:	6093      	str	r3, [r2, #8]
  404c82:	da08      	bge.n	404c96 <__sfputc_r+0x1e>
  404c84:	6994      	ldr	r4, [r2, #24]
  404c86:	42a3      	cmp	r3, r4
  404c88:	db02      	blt.n	404c90 <__sfputc_r+0x18>
  404c8a:	b2cb      	uxtb	r3, r1
  404c8c:	2b0a      	cmp	r3, #10
  404c8e:	d102      	bne.n	404c96 <__sfputc_r+0x1e>
  404c90:	bc10      	pop	{r4}
  404c92:	f7fe bb21 	b.w	4032d8 <__swbuf_r>
  404c96:	6813      	ldr	r3, [r2, #0]
  404c98:	1c58      	adds	r0, r3, #1
  404c9a:	6010      	str	r0, [r2, #0]
  404c9c:	7019      	strb	r1, [r3, #0]
  404c9e:	b2c8      	uxtb	r0, r1
  404ca0:	bc10      	pop	{r4}
  404ca2:	4770      	bx	lr

00404ca4 <__sfputs_r>:
  404ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404ca6:	4606      	mov	r6, r0
  404ca8:	460f      	mov	r7, r1
  404caa:	4614      	mov	r4, r2
  404cac:	18d5      	adds	r5, r2, r3
  404cae:	42ac      	cmp	r4, r5
  404cb0:	d008      	beq.n	404cc4 <__sfputs_r+0x20>
  404cb2:	463a      	mov	r2, r7
  404cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
  404cb8:	4630      	mov	r0, r6
  404cba:	f7ff ffdd 	bl	404c78 <__sfputc_r>
  404cbe:	1c43      	adds	r3, r0, #1
  404cc0:	d1f5      	bne.n	404cae <__sfputs_r+0xa>
  404cc2:	e000      	b.n	404cc6 <__sfputs_r+0x22>
  404cc4:	2000      	movs	r0, #0
  404cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404cc8 <_vfiprintf_r>:
  404cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ccc:	b09d      	sub	sp, #116	; 0x74
  404cce:	460c      	mov	r4, r1
  404cd0:	4617      	mov	r7, r2
  404cd2:	9303      	str	r3, [sp, #12]
  404cd4:	4606      	mov	r6, r0
  404cd6:	b118      	cbz	r0, 404ce0 <_vfiprintf_r+0x18>
  404cd8:	6983      	ldr	r3, [r0, #24]
  404cda:	b90b      	cbnz	r3, 404ce0 <_vfiprintf_r+0x18>
  404cdc:	f7ff fade 	bl	40429c <__sinit>
  404ce0:	4b7f      	ldr	r3, [pc, #508]	; (404ee0 <_vfiprintf_r+0x218>)
  404ce2:	429c      	cmp	r4, r3
  404ce4:	d101      	bne.n	404cea <_vfiprintf_r+0x22>
  404ce6:	6874      	ldr	r4, [r6, #4]
  404ce8:	e008      	b.n	404cfc <_vfiprintf_r+0x34>
  404cea:	4b7e      	ldr	r3, [pc, #504]	; (404ee4 <_vfiprintf_r+0x21c>)
  404cec:	429c      	cmp	r4, r3
  404cee:	d101      	bne.n	404cf4 <_vfiprintf_r+0x2c>
  404cf0:	68b4      	ldr	r4, [r6, #8]
  404cf2:	e003      	b.n	404cfc <_vfiprintf_r+0x34>
  404cf4:	4b7c      	ldr	r3, [pc, #496]	; (404ee8 <_vfiprintf_r+0x220>)
  404cf6:	429c      	cmp	r4, r3
  404cf8:	bf08      	it	eq
  404cfa:	68f4      	ldreq	r4, [r6, #12]
  404cfc:	89a3      	ldrh	r3, [r4, #12]
  404cfe:	0718      	lsls	r0, r3, #28
  404d00:	d50c      	bpl.n	404d1c <_vfiprintf_r+0x54>
  404d02:	6923      	ldr	r3, [r4, #16]
  404d04:	b153      	cbz	r3, 404d1c <_vfiprintf_r+0x54>
  404d06:	2300      	movs	r3, #0
  404d08:	9309      	str	r3, [sp, #36]	; 0x24
  404d0a:	2320      	movs	r3, #32
  404d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404d10:	2330      	movs	r3, #48	; 0x30
  404d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404d16:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 404eec <_vfiprintf_r+0x224>
  404d1a:	e044      	b.n	404da6 <_vfiprintf_r+0xde>
  404d1c:	4621      	mov	r1, r4
  404d1e:	4630      	mov	r0, r6
  404d20:	f7fe fb2e 	bl	403380 <__swsetup_r>
  404d24:	2800      	cmp	r0, #0
  404d26:	d0ee      	beq.n	404d06 <_vfiprintf_r+0x3e>
  404d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404d2c:	e0d5      	b.n	404eda <_vfiprintf_r+0x212>
  404d2e:	9a03      	ldr	r2, [sp, #12]
  404d30:	1d11      	adds	r1, r2, #4
  404d32:	6812      	ldr	r2, [r2, #0]
  404d34:	9103      	str	r1, [sp, #12]
  404d36:	2a00      	cmp	r2, #0
  404d38:	f280 808c 	bge.w	404e54 <_vfiprintf_r+0x18c>
  404d3c:	4252      	negs	r2, r2
  404d3e:	f043 0002 	orr.w	r0, r3, #2
  404d42:	9207      	str	r2, [sp, #28]
  404d44:	9004      	str	r0, [sp, #16]
  404d46:	f898 3000 	ldrb.w	r3, [r8]
  404d4a:	2b2e      	cmp	r3, #46	; 0x2e
  404d4c:	f000 8084 	beq.w	404e58 <_vfiprintf_r+0x190>
  404d50:	2203      	movs	r2, #3
  404d52:	f898 1000 	ldrb.w	r1, [r8]
  404d56:	4865      	ldr	r0, [pc, #404]	; (404eec <_vfiprintf_r+0x224>)
  404d58:	f7ff fba2 	bl	4044a0 <memchr>
  404d5c:	b148      	cbz	r0, 404d72 <_vfiprintf_r+0xaa>
  404d5e:	2340      	movs	r3, #64	; 0x40
  404d60:	ebcb 0000 	rsb	r0, fp, r0
  404d64:	fa03 f000 	lsl.w	r0, r3, r0
  404d68:	9b04      	ldr	r3, [sp, #16]
  404d6a:	4318      	orrs	r0, r3
  404d6c:	9004      	str	r0, [sp, #16]
  404d6e:	f108 0801 	add.w	r8, r8, #1
  404d72:	f898 1000 	ldrb.w	r1, [r8]
  404d76:	485e      	ldr	r0, [pc, #376]	; (404ef0 <_vfiprintf_r+0x228>)
  404d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  404d7c:	2206      	movs	r2, #6
  404d7e:	f108 0701 	add.w	r7, r8, #1
  404d82:	f7ff fb8d 	bl	4044a0 <memchr>
  404d86:	2800      	cmp	r0, #0
  404d88:	f000 8095 	beq.w	404eb6 <_vfiprintf_r+0x1ee>
  404d8c:	4b59      	ldr	r3, [pc, #356]	; (404ef4 <_vfiprintf_r+0x22c>)
  404d8e:	2b00      	cmp	r3, #0
  404d90:	f040 8088 	bne.w	404ea4 <_vfiprintf_r+0x1dc>
  404d94:	9b03      	ldr	r3, [sp, #12]
  404d96:	3307      	adds	r3, #7
  404d98:	f023 0307 	bic.w	r3, r3, #7
  404d9c:	3308      	adds	r3, #8
  404d9e:	9303      	str	r3, [sp, #12]
  404da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404da2:	4453      	add	r3, sl
  404da4:	9309      	str	r3, [sp, #36]	; 0x24
  404da6:	46b8      	mov	r8, r7
  404da8:	4645      	mov	r5, r8
  404daa:	f815 3b01 	ldrb.w	r3, [r5], #1
  404dae:	b91b      	cbnz	r3, 404db8 <_vfiprintf_r+0xf0>
  404db0:	ebb8 0907 	subs.w	r9, r8, r7
  404db4:	d00f      	beq.n	404dd6 <_vfiprintf_r+0x10e>
  404db6:	e003      	b.n	404dc0 <_vfiprintf_r+0xf8>
  404db8:	2b25      	cmp	r3, #37	; 0x25
  404dba:	d0f9      	beq.n	404db0 <_vfiprintf_r+0xe8>
  404dbc:	46a8      	mov	r8, r5
  404dbe:	e7f3      	b.n	404da8 <_vfiprintf_r+0xe0>
  404dc0:	464b      	mov	r3, r9
  404dc2:	463a      	mov	r2, r7
  404dc4:	4621      	mov	r1, r4
  404dc6:	4630      	mov	r0, r6
  404dc8:	f7ff ff6c 	bl	404ca4 <__sfputs_r>
  404dcc:	3001      	adds	r0, #1
  404dce:	d07f      	beq.n	404ed0 <_vfiprintf_r+0x208>
  404dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404dd2:	444b      	add	r3, r9
  404dd4:	9309      	str	r3, [sp, #36]	; 0x24
  404dd6:	f898 3000 	ldrb.w	r3, [r8]
  404dda:	2b00      	cmp	r3, #0
  404ddc:	d078      	beq.n	404ed0 <_vfiprintf_r+0x208>
  404dde:	2300      	movs	r3, #0
  404de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  404de4:	9304      	str	r3, [sp, #16]
  404de6:	9307      	str	r3, [sp, #28]
  404de8:	9205      	str	r2, [sp, #20]
  404dea:	9306      	str	r3, [sp, #24]
  404dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404df0:	931a      	str	r3, [sp, #104]	; 0x68
  404df2:	2701      	movs	r7, #1
  404df4:	2205      	movs	r2, #5
  404df6:	7829      	ldrb	r1, [r5, #0]
  404df8:	483f      	ldr	r0, [pc, #252]	; (404ef8 <_vfiprintf_r+0x230>)
  404dfa:	f7ff fb51 	bl	4044a0 <memchr>
  404dfe:	f105 0801 	add.w	r8, r5, #1
  404e02:	9b04      	ldr	r3, [sp, #16]
  404e04:	b138      	cbz	r0, 404e16 <_vfiprintf_r+0x14e>
  404e06:	4a3c      	ldr	r2, [pc, #240]	; (404ef8 <_vfiprintf_r+0x230>)
  404e08:	1a80      	subs	r0, r0, r2
  404e0a:	fa07 f000 	lsl.w	r0, r7, r0
  404e0e:	4318      	orrs	r0, r3
  404e10:	9004      	str	r0, [sp, #16]
  404e12:	4645      	mov	r5, r8
  404e14:	e7ee      	b.n	404df4 <_vfiprintf_r+0x12c>
  404e16:	06d9      	lsls	r1, r3, #27
  404e18:	bf44      	itt	mi
  404e1a:	2220      	movmi	r2, #32
  404e1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404e20:	071a      	lsls	r2, r3, #28
  404e22:	bf44      	itt	mi
  404e24:	222b      	movmi	r2, #43	; 0x2b
  404e26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  404e2a:	782a      	ldrb	r2, [r5, #0]
  404e2c:	2a2a      	cmp	r2, #42	; 0x2a
  404e2e:	f43f af7e 	beq.w	404d2e <_vfiprintf_r+0x66>
  404e32:	9a07      	ldr	r2, [sp, #28]
  404e34:	2100      	movs	r1, #0
  404e36:	200a      	movs	r0, #10
  404e38:	46a8      	mov	r8, r5
  404e3a:	3501      	adds	r5, #1
  404e3c:	f898 3000 	ldrb.w	r3, [r8]
  404e40:	3b30      	subs	r3, #48	; 0x30
  404e42:	2b09      	cmp	r3, #9
  404e44:	d803      	bhi.n	404e4e <_vfiprintf_r+0x186>
  404e46:	fb00 3202 	mla	r2, r0, r2, r3
  404e4a:	2101      	movs	r1, #1
  404e4c:	e7f4      	b.n	404e38 <_vfiprintf_r+0x170>
  404e4e:	2900      	cmp	r1, #0
  404e50:	f43f af79 	beq.w	404d46 <_vfiprintf_r+0x7e>
  404e54:	9207      	str	r2, [sp, #28]
  404e56:	e776      	b.n	404d46 <_vfiprintf_r+0x7e>
  404e58:	f898 3001 	ldrb.w	r3, [r8, #1]
  404e5c:	2b2a      	cmp	r3, #42	; 0x2a
  404e5e:	d10b      	bne.n	404e78 <_vfiprintf_r+0x1b0>
  404e60:	9b03      	ldr	r3, [sp, #12]
  404e62:	1d1a      	adds	r2, r3, #4
  404e64:	681b      	ldr	r3, [r3, #0]
  404e66:	9203      	str	r2, [sp, #12]
  404e68:	2b00      	cmp	r3, #0
  404e6a:	bfb8      	it	lt
  404e6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  404e70:	f108 0802 	add.w	r8, r8, #2
  404e74:	9305      	str	r3, [sp, #20]
  404e76:	e76b      	b.n	404d50 <_vfiprintf_r+0x88>
  404e78:	2300      	movs	r3, #0
  404e7a:	9305      	str	r3, [sp, #20]
  404e7c:	f108 0001 	add.w	r0, r8, #1
  404e80:	4619      	mov	r1, r3
  404e82:	250a      	movs	r5, #10
  404e84:	4680      	mov	r8, r0
  404e86:	3001      	adds	r0, #1
  404e88:	f898 2000 	ldrb.w	r2, [r8]
  404e8c:	3a30      	subs	r2, #48	; 0x30
  404e8e:	2a09      	cmp	r2, #9
  404e90:	d803      	bhi.n	404e9a <_vfiprintf_r+0x1d2>
  404e92:	fb05 2101 	mla	r1, r5, r1, r2
  404e96:	2301      	movs	r3, #1
  404e98:	e7f4      	b.n	404e84 <_vfiprintf_r+0x1bc>
  404e9a:	2b00      	cmp	r3, #0
  404e9c:	f43f af58 	beq.w	404d50 <_vfiprintf_r+0x88>
  404ea0:	9105      	str	r1, [sp, #20]
  404ea2:	e755      	b.n	404d50 <_vfiprintf_r+0x88>
  404ea4:	ab03      	add	r3, sp, #12
  404ea6:	9300      	str	r3, [sp, #0]
  404ea8:	4622      	mov	r2, r4
  404eaa:	4b14      	ldr	r3, [pc, #80]	; (404efc <_vfiprintf_r+0x234>)
  404eac:	a904      	add	r1, sp, #16
  404eae:	4630      	mov	r0, r6
  404eb0:	f7fd fcfe 	bl	4028b0 <_printf_float>
  404eb4:	e007      	b.n	404ec6 <_vfiprintf_r+0x1fe>
  404eb6:	ab03      	add	r3, sp, #12
  404eb8:	9300      	str	r3, [sp, #0]
  404eba:	4622      	mov	r2, r4
  404ebc:	4b0f      	ldr	r3, [pc, #60]	; (404efc <_vfiprintf_r+0x234>)
  404ebe:	a904      	add	r1, sp, #16
  404ec0:	4630      	mov	r0, r6
  404ec2:	f7fd ffaf 	bl	402e24 <_printf_i>
  404ec6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  404eca:	4682      	mov	sl, r0
  404ecc:	f47f af68 	bne.w	404da0 <_vfiprintf_r+0xd8>
  404ed0:	89a3      	ldrh	r3, [r4, #12]
  404ed2:	065b      	lsls	r3, r3, #25
  404ed4:	f53f af28 	bmi.w	404d28 <_vfiprintf_r+0x60>
  404ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
  404eda:	b01d      	add	sp, #116	; 0x74
  404edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ee0:	00406358 	.word	0x00406358
  404ee4:	00406378 	.word	0x00406378
  404ee8:	00406398 	.word	0x00406398
  404eec:	004064ba 	.word	0x004064ba
  404ef0:	004064be 	.word	0x004064be
  404ef4:	004028b1 	.word	0x004028b1
  404ef8:	004064b4 	.word	0x004064b4
  404efc:	00404ca5 	.word	0x00404ca5

00404f00 <_sbrk_r>:
  404f00:	b538      	push	{r3, r4, r5, lr}
  404f02:	4c06      	ldr	r4, [pc, #24]	; (404f1c <_sbrk_r+0x1c>)
  404f04:	2300      	movs	r3, #0
  404f06:	4605      	mov	r5, r0
  404f08:	4608      	mov	r0, r1
  404f0a:	6023      	str	r3, [r4, #0]
  404f0c:	f7fd f854 	bl	401fb8 <_sbrk>
  404f10:	1c43      	adds	r3, r0, #1
  404f12:	d102      	bne.n	404f1a <_sbrk_r+0x1a>
  404f14:	6823      	ldr	r3, [r4, #0]
  404f16:	b103      	cbz	r3, 404f1a <_sbrk_r+0x1a>
  404f18:	602b      	str	r3, [r5, #0]
  404f1a:	bd38      	pop	{r3, r4, r5, pc}
  404f1c:	20000410 	.word	0x20000410

00404f20 <__sread>:
  404f20:	b510      	push	{r4, lr}
  404f22:	460c      	mov	r4, r1
  404f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f28:	f000 f8a8 	bl	40507c <_read_r>
  404f2c:	2800      	cmp	r0, #0
  404f2e:	bfab      	itete	ge
  404f30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  404f32:	89a3      	ldrhlt	r3, [r4, #12]
  404f34:	181b      	addge	r3, r3, r0
  404f36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  404f3a:	bfac      	ite	ge
  404f3c:	6563      	strge	r3, [r4, #84]	; 0x54
  404f3e:	81a3      	strhlt	r3, [r4, #12]
  404f40:	bd10      	pop	{r4, pc}

00404f42 <__swrite>:
  404f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f46:	461f      	mov	r7, r3
  404f48:	898b      	ldrh	r3, [r1, #12]
  404f4a:	05db      	lsls	r3, r3, #23
  404f4c:	4605      	mov	r5, r0
  404f4e:	460c      	mov	r4, r1
  404f50:	4616      	mov	r6, r2
  404f52:	d505      	bpl.n	404f60 <__swrite+0x1e>
  404f54:	2302      	movs	r3, #2
  404f56:	2200      	movs	r2, #0
  404f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f5c:	f000 f868 	bl	405030 <_lseek_r>
  404f60:	89a3      	ldrh	r3, [r4, #12]
  404f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404f6a:	81a3      	strh	r3, [r4, #12]
  404f6c:	4632      	mov	r2, r6
  404f6e:	463b      	mov	r3, r7
  404f70:	4628      	mov	r0, r5
  404f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404f76:	f000 b817 	b.w	404fa8 <_write_r>

00404f7a <__sseek>:
  404f7a:	b510      	push	{r4, lr}
  404f7c:	460c      	mov	r4, r1
  404f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404f82:	f000 f855 	bl	405030 <_lseek_r>
  404f86:	1c43      	adds	r3, r0, #1
  404f88:	89a3      	ldrh	r3, [r4, #12]
  404f8a:	bf15      	itete	ne
  404f8c:	6560      	strne	r0, [r4, #84]	; 0x54
  404f8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404f92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404f96:	81a3      	strheq	r3, [r4, #12]
  404f98:	bf18      	it	ne
  404f9a:	81a3      	strhne	r3, [r4, #12]
  404f9c:	bd10      	pop	{r4, pc}

00404f9e <__sclose>:
  404f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fa2:	f000 b813 	b.w	404fcc <_close_r>
	...

00404fa8 <_write_r>:
  404fa8:	b538      	push	{r3, r4, r5, lr}
  404faa:	4c07      	ldr	r4, [pc, #28]	; (404fc8 <_write_r+0x20>)
  404fac:	4605      	mov	r5, r0
  404fae:	4608      	mov	r0, r1
  404fb0:	4611      	mov	r1, r2
  404fb2:	2200      	movs	r2, #0
  404fb4:	6022      	str	r2, [r4, #0]
  404fb6:	461a      	mov	r2, r3
  404fb8:	f7fb f8f8 	bl	4001ac <_write>
  404fbc:	1c43      	adds	r3, r0, #1
  404fbe:	d102      	bne.n	404fc6 <_write_r+0x1e>
  404fc0:	6823      	ldr	r3, [r4, #0]
  404fc2:	b103      	cbz	r3, 404fc6 <_write_r+0x1e>
  404fc4:	602b      	str	r3, [r5, #0]
  404fc6:	bd38      	pop	{r3, r4, r5, pc}
  404fc8:	20000410 	.word	0x20000410

00404fcc <_close_r>:
  404fcc:	b538      	push	{r3, r4, r5, lr}
  404fce:	4c06      	ldr	r4, [pc, #24]	; (404fe8 <_close_r+0x1c>)
  404fd0:	2300      	movs	r3, #0
  404fd2:	4605      	mov	r5, r0
  404fd4:	4608      	mov	r0, r1
  404fd6:	6023      	str	r3, [r4, #0]
  404fd8:	f7fd f808 	bl	401fec <_close>
  404fdc:	1c43      	adds	r3, r0, #1
  404fde:	d102      	bne.n	404fe6 <_close_r+0x1a>
  404fe0:	6823      	ldr	r3, [r4, #0]
  404fe2:	b103      	cbz	r3, 404fe6 <_close_r+0x1a>
  404fe4:	602b      	str	r3, [r5, #0]
  404fe6:	bd38      	pop	{r3, r4, r5, pc}
  404fe8:	20000410 	.word	0x20000410

00404fec <_fstat_r>:
  404fec:	b538      	push	{r3, r4, r5, lr}
  404fee:	4c07      	ldr	r4, [pc, #28]	; (40500c <_fstat_r+0x20>)
  404ff0:	2300      	movs	r3, #0
  404ff2:	4605      	mov	r5, r0
  404ff4:	4608      	mov	r0, r1
  404ff6:	4611      	mov	r1, r2
  404ff8:	6023      	str	r3, [r4, #0]
  404ffa:	f7fc fffb 	bl	401ff4 <_fstat>
  404ffe:	1c43      	adds	r3, r0, #1
  405000:	d102      	bne.n	405008 <_fstat_r+0x1c>
  405002:	6823      	ldr	r3, [r4, #0]
  405004:	b103      	cbz	r3, 405008 <_fstat_r+0x1c>
  405006:	602b      	str	r3, [r5, #0]
  405008:	bd38      	pop	{r3, r4, r5, pc}
  40500a:	bf00      	nop
  40500c:	20000410 	.word	0x20000410

00405010 <_isatty_r>:
  405010:	b538      	push	{r3, r4, r5, lr}
  405012:	4c06      	ldr	r4, [pc, #24]	; (40502c <_isatty_r+0x1c>)
  405014:	2300      	movs	r3, #0
  405016:	4605      	mov	r5, r0
  405018:	4608      	mov	r0, r1
  40501a:	6023      	str	r3, [r4, #0]
  40501c:	f7fc fff0 	bl	402000 <_isatty>
  405020:	1c43      	adds	r3, r0, #1
  405022:	d102      	bne.n	40502a <_isatty_r+0x1a>
  405024:	6823      	ldr	r3, [r4, #0]
  405026:	b103      	cbz	r3, 40502a <_isatty_r+0x1a>
  405028:	602b      	str	r3, [r5, #0]
  40502a:	bd38      	pop	{r3, r4, r5, pc}
  40502c:	20000410 	.word	0x20000410

00405030 <_lseek_r>:
  405030:	b538      	push	{r3, r4, r5, lr}
  405032:	4c07      	ldr	r4, [pc, #28]	; (405050 <_lseek_r+0x20>)
  405034:	4605      	mov	r5, r0
  405036:	4608      	mov	r0, r1
  405038:	4611      	mov	r1, r2
  40503a:	2200      	movs	r2, #0
  40503c:	6022      	str	r2, [r4, #0]
  40503e:	461a      	mov	r2, r3
  405040:	f7fc ffe0 	bl	402004 <_lseek>
  405044:	1c43      	adds	r3, r0, #1
  405046:	d102      	bne.n	40504e <_lseek_r+0x1e>
  405048:	6823      	ldr	r3, [r4, #0]
  40504a:	b103      	cbz	r3, 40504e <_lseek_r+0x1e>
  40504c:	602b      	str	r3, [r5, #0]
  40504e:	bd38      	pop	{r3, r4, r5, pc}
  405050:	20000410 	.word	0x20000410

00405054 <__ascii_mbtowc>:
  405054:	b082      	sub	sp, #8
  405056:	b901      	cbnz	r1, 40505a <__ascii_mbtowc+0x6>
  405058:	a901      	add	r1, sp, #4
  40505a:	b13a      	cbz	r2, 40506c <__ascii_mbtowc+0x18>
  40505c:	b143      	cbz	r3, 405070 <__ascii_mbtowc+0x1c>
  40505e:	7813      	ldrb	r3, [r2, #0]
  405060:	600b      	str	r3, [r1, #0]
  405062:	7812      	ldrb	r2, [r2, #0]
  405064:	1c10      	adds	r0, r2, #0
  405066:	bf18      	it	ne
  405068:	2001      	movne	r0, #1
  40506a:	e003      	b.n	405074 <__ascii_mbtowc+0x20>
  40506c:	4610      	mov	r0, r2
  40506e:	e001      	b.n	405074 <__ascii_mbtowc+0x20>
  405070:	f06f 0001 	mvn.w	r0, #1
  405074:	b002      	add	sp, #8
  405076:	4770      	bx	lr

00405078 <__malloc_lock>:
  405078:	4770      	bx	lr

0040507a <__malloc_unlock>:
  40507a:	4770      	bx	lr

0040507c <_read_r>:
  40507c:	b538      	push	{r3, r4, r5, lr}
  40507e:	4c07      	ldr	r4, [pc, #28]	; (40509c <_read_r+0x20>)
  405080:	4605      	mov	r5, r0
  405082:	4608      	mov	r0, r1
  405084:	4611      	mov	r1, r2
  405086:	2200      	movs	r2, #0
  405088:	6022      	str	r2, [r4, #0]
  40508a:	461a      	mov	r2, r3
  40508c:	f7fb f870 	bl	400170 <_read>
  405090:	1c43      	adds	r3, r0, #1
  405092:	d102      	bne.n	40509a <_read_r+0x1e>
  405094:	6823      	ldr	r3, [r4, #0]
  405096:	b103      	cbz	r3, 40509a <_read_r+0x1e>
  405098:	602b      	str	r3, [r5, #0]
  40509a:	bd38      	pop	{r3, r4, r5, pc}
  40509c:	20000410 	.word	0x20000410

004050a0 <__ascii_wctomb>:
  4050a0:	b149      	cbz	r1, 4050b6 <__ascii_wctomb+0x16>
  4050a2:	2aff      	cmp	r2, #255	; 0xff
  4050a4:	bf85      	ittet	hi
  4050a6:	238a      	movhi	r3, #138	; 0x8a
  4050a8:	6003      	strhi	r3, [r0, #0]
  4050aa:	700a      	strbls	r2, [r1, #0]
  4050ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  4050b0:	bf98      	it	ls
  4050b2:	2001      	movls	r0, #1
  4050b4:	4770      	bx	lr
  4050b6:	4608      	mov	r0, r1
  4050b8:	4770      	bx	lr
	...

004050bc <__aeabi_drsub>:
  4050bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4050c0:	e002      	b.n	4050c8 <__adddf3>
  4050c2:	bf00      	nop

004050c4 <__aeabi_dsub>:
  4050c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004050c8 <__adddf3>:
  4050c8:	b530      	push	{r4, r5, lr}
  4050ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4050ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4050d2:	ea94 0f05 	teq	r4, r5
  4050d6:	bf08      	it	eq
  4050d8:	ea90 0f02 	teqeq	r0, r2
  4050dc:	bf1f      	itttt	ne
  4050de:	ea54 0c00 	orrsne.w	ip, r4, r0
  4050e2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4050e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4050ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4050ee:	f000 80e2 	beq.w	4052b6 <__adddf3+0x1ee>
  4050f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4050f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4050fa:	bfb8      	it	lt
  4050fc:	426d      	neglt	r5, r5
  4050fe:	dd0c      	ble.n	40511a <__adddf3+0x52>
  405100:	442c      	add	r4, r5
  405102:	ea80 0202 	eor.w	r2, r0, r2
  405106:	ea81 0303 	eor.w	r3, r1, r3
  40510a:	ea82 0000 	eor.w	r0, r2, r0
  40510e:	ea83 0101 	eor.w	r1, r3, r1
  405112:	ea80 0202 	eor.w	r2, r0, r2
  405116:	ea81 0303 	eor.w	r3, r1, r3
  40511a:	2d36      	cmp	r5, #54	; 0x36
  40511c:	bf88      	it	hi
  40511e:	bd30      	pophi	{r4, r5, pc}
  405120:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405124:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405128:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40512c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405130:	d002      	beq.n	405138 <__adddf3+0x70>
  405132:	4240      	negs	r0, r0
  405134:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405138:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40513c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405140:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405144:	d002      	beq.n	40514c <__adddf3+0x84>
  405146:	4252      	negs	r2, r2
  405148:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40514c:	ea94 0f05 	teq	r4, r5
  405150:	f000 80a7 	beq.w	4052a2 <__adddf3+0x1da>
  405154:	f1a4 0401 	sub.w	r4, r4, #1
  405158:	f1d5 0e20 	rsbs	lr, r5, #32
  40515c:	db0d      	blt.n	40517a <__adddf3+0xb2>
  40515e:	fa02 fc0e 	lsl.w	ip, r2, lr
  405162:	fa22 f205 	lsr.w	r2, r2, r5
  405166:	1880      	adds	r0, r0, r2
  405168:	f141 0100 	adc.w	r1, r1, #0
  40516c:	fa03 f20e 	lsl.w	r2, r3, lr
  405170:	1880      	adds	r0, r0, r2
  405172:	fa43 f305 	asr.w	r3, r3, r5
  405176:	4159      	adcs	r1, r3
  405178:	e00e      	b.n	405198 <__adddf3+0xd0>
  40517a:	f1a5 0520 	sub.w	r5, r5, #32
  40517e:	f10e 0e20 	add.w	lr, lr, #32
  405182:	2a01      	cmp	r2, #1
  405184:	fa03 fc0e 	lsl.w	ip, r3, lr
  405188:	bf28      	it	cs
  40518a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40518e:	fa43 f305 	asr.w	r3, r3, r5
  405192:	18c0      	adds	r0, r0, r3
  405194:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405198:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40519c:	d507      	bpl.n	4051ae <__adddf3+0xe6>
  40519e:	f04f 0e00 	mov.w	lr, #0
  4051a2:	f1dc 0c00 	rsbs	ip, ip, #0
  4051a6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4051aa:	eb6e 0101 	sbc.w	r1, lr, r1
  4051ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4051b2:	d31b      	bcc.n	4051ec <__adddf3+0x124>
  4051b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4051b8:	d30c      	bcc.n	4051d4 <__adddf3+0x10c>
  4051ba:	0849      	lsrs	r1, r1, #1
  4051bc:	ea5f 0030 	movs.w	r0, r0, rrx
  4051c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4051c4:	f104 0401 	add.w	r4, r4, #1
  4051c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4051cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4051d0:	f080 809a 	bcs.w	405308 <__adddf3+0x240>
  4051d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4051d8:	bf08      	it	eq
  4051da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4051de:	f150 0000 	adcs.w	r0, r0, #0
  4051e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4051e6:	ea41 0105 	orr.w	r1, r1, r5
  4051ea:	bd30      	pop	{r4, r5, pc}
  4051ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4051f0:	4140      	adcs	r0, r0
  4051f2:	eb41 0101 	adc.w	r1, r1, r1
  4051f6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4051fa:	f1a4 0401 	sub.w	r4, r4, #1
  4051fe:	d1e9      	bne.n	4051d4 <__adddf3+0x10c>
  405200:	f091 0f00 	teq	r1, #0
  405204:	bf04      	itt	eq
  405206:	4601      	moveq	r1, r0
  405208:	2000      	moveq	r0, #0
  40520a:	fab1 f381 	clz	r3, r1
  40520e:	bf08      	it	eq
  405210:	3320      	addeq	r3, #32
  405212:	f1a3 030b 	sub.w	r3, r3, #11
  405216:	f1b3 0220 	subs.w	r2, r3, #32
  40521a:	da0c      	bge.n	405236 <__adddf3+0x16e>
  40521c:	320c      	adds	r2, #12
  40521e:	dd08      	ble.n	405232 <__adddf3+0x16a>
  405220:	f102 0c14 	add.w	ip, r2, #20
  405224:	f1c2 020c 	rsb	r2, r2, #12
  405228:	fa01 f00c 	lsl.w	r0, r1, ip
  40522c:	fa21 f102 	lsr.w	r1, r1, r2
  405230:	e00c      	b.n	40524c <__adddf3+0x184>
  405232:	f102 0214 	add.w	r2, r2, #20
  405236:	bfd8      	it	le
  405238:	f1c2 0c20 	rsble	ip, r2, #32
  40523c:	fa01 f102 	lsl.w	r1, r1, r2
  405240:	fa20 fc0c 	lsr.w	ip, r0, ip
  405244:	bfdc      	itt	le
  405246:	ea41 010c 	orrle.w	r1, r1, ip
  40524a:	4090      	lslle	r0, r2
  40524c:	1ae4      	subs	r4, r4, r3
  40524e:	bfa2      	ittt	ge
  405250:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405254:	4329      	orrge	r1, r5
  405256:	bd30      	popge	{r4, r5, pc}
  405258:	ea6f 0404 	mvn.w	r4, r4
  40525c:	3c1f      	subs	r4, #31
  40525e:	da1c      	bge.n	40529a <__adddf3+0x1d2>
  405260:	340c      	adds	r4, #12
  405262:	dc0e      	bgt.n	405282 <__adddf3+0x1ba>
  405264:	f104 0414 	add.w	r4, r4, #20
  405268:	f1c4 0220 	rsb	r2, r4, #32
  40526c:	fa20 f004 	lsr.w	r0, r0, r4
  405270:	fa01 f302 	lsl.w	r3, r1, r2
  405274:	ea40 0003 	orr.w	r0, r0, r3
  405278:	fa21 f304 	lsr.w	r3, r1, r4
  40527c:	ea45 0103 	orr.w	r1, r5, r3
  405280:	bd30      	pop	{r4, r5, pc}
  405282:	f1c4 040c 	rsb	r4, r4, #12
  405286:	f1c4 0220 	rsb	r2, r4, #32
  40528a:	fa20 f002 	lsr.w	r0, r0, r2
  40528e:	fa01 f304 	lsl.w	r3, r1, r4
  405292:	ea40 0003 	orr.w	r0, r0, r3
  405296:	4629      	mov	r1, r5
  405298:	bd30      	pop	{r4, r5, pc}
  40529a:	fa21 f004 	lsr.w	r0, r1, r4
  40529e:	4629      	mov	r1, r5
  4052a0:	bd30      	pop	{r4, r5, pc}
  4052a2:	f094 0f00 	teq	r4, #0
  4052a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4052aa:	bf06      	itte	eq
  4052ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4052b0:	3401      	addeq	r4, #1
  4052b2:	3d01      	subne	r5, #1
  4052b4:	e74e      	b.n	405154 <__adddf3+0x8c>
  4052b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4052ba:	bf18      	it	ne
  4052bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4052c0:	d029      	beq.n	405316 <__adddf3+0x24e>
  4052c2:	ea94 0f05 	teq	r4, r5
  4052c6:	bf08      	it	eq
  4052c8:	ea90 0f02 	teqeq	r0, r2
  4052cc:	d005      	beq.n	4052da <__adddf3+0x212>
  4052ce:	ea54 0c00 	orrs.w	ip, r4, r0
  4052d2:	bf04      	itt	eq
  4052d4:	4619      	moveq	r1, r3
  4052d6:	4610      	moveq	r0, r2
  4052d8:	bd30      	pop	{r4, r5, pc}
  4052da:	ea91 0f03 	teq	r1, r3
  4052de:	bf1e      	ittt	ne
  4052e0:	2100      	movne	r1, #0
  4052e2:	2000      	movne	r0, #0
  4052e4:	bd30      	popne	{r4, r5, pc}
  4052e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4052ea:	d105      	bne.n	4052f8 <__adddf3+0x230>
  4052ec:	0040      	lsls	r0, r0, #1
  4052ee:	4149      	adcs	r1, r1
  4052f0:	bf28      	it	cs
  4052f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4052f6:	bd30      	pop	{r4, r5, pc}
  4052f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4052fc:	bf3c      	itt	cc
  4052fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405302:	bd30      	popcc	{r4, r5, pc}
  405304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405308:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40530c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405310:	f04f 0000 	mov.w	r0, #0
  405314:	bd30      	pop	{r4, r5, pc}
  405316:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40531a:	bf1a      	itte	ne
  40531c:	4619      	movne	r1, r3
  40531e:	4610      	movne	r0, r2
  405320:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405324:	bf1c      	itt	ne
  405326:	460b      	movne	r3, r1
  405328:	4602      	movne	r2, r0
  40532a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40532e:	bf06      	itte	eq
  405330:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405334:	ea91 0f03 	teqeq	r1, r3
  405338:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40533c:	bd30      	pop	{r4, r5, pc}
  40533e:	bf00      	nop

00405340 <__aeabi_ui2d>:
  405340:	f090 0f00 	teq	r0, #0
  405344:	bf04      	itt	eq
  405346:	2100      	moveq	r1, #0
  405348:	4770      	bxeq	lr
  40534a:	b530      	push	{r4, r5, lr}
  40534c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405350:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405354:	f04f 0500 	mov.w	r5, #0
  405358:	f04f 0100 	mov.w	r1, #0
  40535c:	e750      	b.n	405200 <__adddf3+0x138>
  40535e:	bf00      	nop

00405360 <__aeabi_i2d>:
  405360:	f090 0f00 	teq	r0, #0
  405364:	bf04      	itt	eq
  405366:	2100      	moveq	r1, #0
  405368:	4770      	bxeq	lr
  40536a:	b530      	push	{r4, r5, lr}
  40536c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405370:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405374:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405378:	bf48      	it	mi
  40537a:	4240      	negmi	r0, r0
  40537c:	f04f 0100 	mov.w	r1, #0
  405380:	e73e      	b.n	405200 <__adddf3+0x138>
  405382:	bf00      	nop

00405384 <__aeabi_f2d>:
  405384:	0042      	lsls	r2, r0, #1
  405386:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40538a:	ea4f 0131 	mov.w	r1, r1, rrx
  40538e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405392:	bf1f      	itttt	ne
  405394:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405398:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40539c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4053a0:	4770      	bxne	lr
  4053a2:	f092 0f00 	teq	r2, #0
  4053a6:	bf14      	ite	ne
  4053a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4053ac:	4770      	bxeq	lr
  4053ae:	b530      	push	{r4, r5, lr}
  4053b0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4053b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4053b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4053bc:	e720      	b.n	405200 <__adddf3+0x138>
  4053be:	bf00      	nop

004053c0 <__aeabi_ul2d>:
  4053c0:	ea50 0201 	orrs.w	r2, r0, r1
  4053c4:	bf08      	it	eq
  4053c6:	4770      	bxeq	lr
  4053c8:	b530      	push	{r4, r5, lr}
  4053ca:	f04f 0500 	mov.w	r5, #0
  4053ce:	e00a      	b.n	4053e6 <__aeabi_l2d+0x16>

004053d0 <__aeabi_l2d>:
  4053d0:	ea50 0201 	orrs.w	r2, r0, r1
  4053d4:	bf08      	it	eq
  4053d6:	4770      	bxeq	lr
  4053d8:	b530      	push	{r4, r5, lr}
  4053da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4053de:	d502      	bpl.n	4053e6 <__aeabi_l2d+0x16>
  4053e0:	4240      	negs	r0, r0
  4053e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4053e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4053ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4053ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4053f2:	f43f aedc 	beq.w	4051ae <__adddf3+0xe6>
  4053f6:	f04f 0203 	mov.w	r2, #3
  4053fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4053fe:	bf18      	it	ne
  405400:	3203      	addne	r2, #3
  405402:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405406:	bf18      	it	ne
  405408:	3203      	addne	r2, #3
  40540a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40540e:	f1c2 0320 	rsb	r3, r2, #32
  405412:	fa00 fc03 	lsl.w	ip, r0, r3
  405416:	fa20 f002 	lsr.w	r0, r0, r2
  40541a:	fa01 fe03 	lsl.w	lr, r1, r3
  40541e:	ea40 000e 	orr.w	r0, r0, lr
  405422:	fa21 f102 	lsr.w	r1, r1, r2
  405426:	4414      	add	r4, r2
  405428:	e6c1      	b.n	4051ae <__adddf3+0xe6>
  40542a:	bf00      	nop

0040542c <__aeabi_dmul>:
  40542c:	b570      	push	{r4, r5, r6, lr}
  40542e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405432:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405436:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40543a:	bf1d      	ittte	ne
  40543c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405440:	ea94 0f0c 	teqne	r4, ip
  405444:	ea95 0f0c 	teqne	r5, ip
  405448:	f000 f8de 	bleq	405608 <__aeabi_dmul+0x1dc>
  40544c:	442c      	add	r4, r5
  40544e:	ea81 0603 	eor.w	r6, r1, r3
  405452:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405456:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40545a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40545e:	bf18      	it	ne
  405460:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40546c:	d038      	beq.n	4054e0 <__aeabi_dmul+0xb4>
  40546e:	fba0 ce02 	umull	ip, lr, r0, r2
  405472:	f04f 0500 	mov.w	r5, #0
  405476:	fbe1 e502 	umlal	lr, r5, r1, r2
  40547a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40547e:	fbe0 e503 	umlal	lr, r5, r0, r3
  405482:	f04f 0600 	mov.w	r6, #0
  405486:	fbe1 5603 	umlal	r5, r6, r1, r3
  40548a:	f09c 0f00 	teq	ip, #0
  40548e:	bf18      	it	ne
  405490:	f04e 0e01 	orrne.w	lr, lr, #1
  405494:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405498:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40549c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4054a0:	d204      	bcs.n	4054ac <__aeabi_dmul+0x80>
  4054a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4054a6:	416d      	adcs	r5, r5
  4054a8:	eb46 0606 	adc.w	r6, r6, r6
  4054ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4054b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4054b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4054b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4054bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4054c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4054c4:	bf88      	it	hi
  4054c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4054ca:	d81e      	bhi.n	40550a <__aeabi_dmul+0xde>
  4054cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4054d0:	bf08      	it	eq
  4054d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4054d6:	f150 0000 	adcs.w	r0, r0, #0
  4054da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4054de:	bd70      	pop	{r4, r5, r6, pc}
  4054e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4054e4:	ea46 0101 	orr.w	r1, r6, r1
  4054e8:	ea40 0002 	orr.w	r0, r0, r2
  4054ec:	ea81 0103 	eor.w	r1, r1, r3
  4054f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4054f4:	bfc2      	ittt	gt
  4054f6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4054fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4054fe:	bd70      	popgt	{r4, r5, r6, pc}
  405500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405504:	f04f 0e00 	mov.w	lr, #0
  405508:	3c01      	subs	r4, #1
  40550a:	f300 80ab 	bgt.w	405664 <__aeabi_dmul+0x238>
  40550e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405512:	bfde      	ittt	le
  405514:	2000      	movle	r0, #0
  405516:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40551a:	bd70      	pople	{r4, r5, r6, pc}
  40551c:	f1c4 0400 	rsb	r4, r4, #0
  405520:	3c20      	subs	r4, #32
  405522:	da35      	bge.n	405590 <__aeabi_dmul+0x164>
  405524:	340c      	adds	r4, #12
  405526:	dc1b      	bgt.n	405560 <__aeabi_dmul+0x134>
  405528:	f104 0414 	add.w	r4, r4, #20
  40552c:	f1c4 0520 	rsb	r5, r4, #32
  405530:	fa00 f305 	lsl.w	r3, r0, r5
  405534:	fa20 f004 	lsr.w	r0, r0, r4
  405538:	fa01 f205 	lsl.w	r2, r1, r5
  40553c:	ea40 0002 	orr.w	r0, r0, r2
  405540:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405548:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40554c:	fa21 f604 	lsr.w	r6, r1, r4
  405550:	eb42 0106 	adc.w	r1, r2, r6
  405554:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405558:	bf08      	it	eq
  40555a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40555e:	bd70      	pop	{r4, r5, r6, pc}
  405560:	f1c4 040c 	rsb	r4, r4, #12
  405564:	f1c4 0520 	rsb	r5, r4, #32
  405568:	fa00 f304 	lsl.w	r3, r0, r4
  40556c:	fa20 f005 	lsr.w	r0, r0, r5
  405570:	fa01 f204 	lsl.w	r2, r1, r4
  405574:	ea40 0002 	orr.w	r0, r0, r2
  405578:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40557c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405580:	f141 0100 	adc.w	r1, r1, #0
  405584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405588:	bf08      	it	eq
  40558a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40558e:	bd70      	pop	{r4, r5, r6, pc}
  405590:	f1c4 0520 	rsb	r5, r4, #32
  405594:	fa00 f205 	lsl.w	r2, r0, r5
  405598:	ea4e 0e02 	orr.w	lr, lr, r2
  40559c:	fa20 f304 	lsr.w	r3, r0, r4
  4055a0:	fa01 f205 	lsl.w	r2, r1, r5
  4055a4:	ea43 0302 	orr.w	r3, r3, r2
  4055a8:	fa21 f004 	lsr.w	r0, r1, r4
  4055ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4055b0:	fa21 f204 	lsr.w	r2, r1, r4
  4055b4:	ea20 0002 	bic.w	r0, r0, r2
  4055b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4055bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4055c0:	bf08      	it	eq
  4055c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4055c6:	bd70      	pop	{r4, r5, r6, pc}
  4055c8:	f094 0f00 	teq	r4, #0
  4055cc:	d10f      	bne.n	4055ee <__aeabi_dmul+0x1c2>
  4055ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4055d2:	0040      	lsls	r0, r0, #1
  4055d4:	eb41 0101 	adc.w	r1, r1, r1
  4055d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4055dc:	bf08      	it	eq
  4055de:	3c01      	subeq	r4, #1
  4055e0:	d0f7      	beq.n	4055d2 <__aeabi_dmul+0x1a6>
  4055e2:	ea41 0106 	orr.w	r1, r1, r6
  4055e6:	f095 0f00 	teq	r5, #0
  4055ea:	bf18      	it	ne
  4055ec:	4770      	bxne	lr
  4055ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4055f2:	0052      	lsls	r2, r2, #1
  4055f4:	eb43 0303 	adc.w	r3, r3, r3
  4055f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4055fc:	bf08      	it	eq
  4055fe:	3d01      	subeq	r5, #1
  405600:	d0f7      	beq.n	4055f2 <__aeabi_dmul+0x1c6>
  405602:	ea43 0306 	orr.w	r3, r3, r6
  405606:	4770      	bx	lr
  405608:	ea94 0f0c 	teq	r4, ip
  40560c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405610:	bf18      	it	ne
  405612:	ea95 0f0c 	teqne	r5, ip
  405616:	d00c      	beq.n	405632 <__aeabi_dmul+0x206>
  405618:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40561c:	bf18      	it	ne
  40561e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405622:	d1d1      	bne.n	4055c8 <__aeabi_dmul+0x19c>
  405624:	ea81 0103 	eor.w	r1, r1, r3
  405628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40562c:	f04f 0000 	mov.w	r0, #0
  405630:	bd70      	pop	{r4, r5, r6, pc}
  405632:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405636:	bf06      	itte	eq
  405638:	4610      	moveq	r0, r2
  40563a:	4619      	moveq	r1, r3
  40563c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405640:	d019      	beq.n	405676 <__aeabi_dmul+0x24a>
  405642:	ea94 0f0c 	teq	r4, ip
  405646:	d102      	bne.n	40564e <__aeabi_dmul+0x222>
  405648:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40564c:	d113      	bne.n	405676 <__aeabi_dmul+0x24a>
  40564e:	ea95 0f0c 	teq	r5, ip
  405652:	d105      	bne.n	405660 <__aeabi_dmul+0x234>
  405654:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405658:	bf1c      	itt	ne
  40565a:	4610      	movne	r0, r2
  40565c:	4619      	movne	r1, r3
  40565e:	d10a      	bne.n	405676 <__aeabi_dmul+0x24a>
  405660:	ea81 0103 	eor.w	r1, r1, r3
  405664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405668:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40566c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405670:	f04f 0000 	mov.w	r0, #0
  405674:	bd70      	pop	{r4, r5, r6, pc}
  405676:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40567a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40567e:	bd70      	pop	{r4, r5, r6, pc}

00405680 <__aeabi_ddiv>:
  405680:	b570      	push	{r4, r5, r6, lr}
  405682:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405686:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40568a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40568e:	bf1d      	ittte	ne
  405690:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405694:	ea94 0f0c 	teqne	r4, ip
  405698:	ea95 0f0c 	teqne	r5, ip
  40569c:	f000 f8a7 	bleq	4057ee <__aeabi_ddiv+0x16e>
  4056a0:	eba4 0405 	sub.w	r4, r4, r5
  4056a4:	ea81 0e03 	eor.w	lr, r1, r3
  4056a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4056ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4056b0:	f000 8088 	beq.w	4057c4 <__aeabi_ddiv+0x144>
  4056b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4056b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4056bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4056c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4056c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4056c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4056cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4056d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4056d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4056d8:	429d      	cmp	r5, r3
  4056da:	bf08      	it	eq
  4056dc:	4296      	cmpeq	r6, r2
  4056de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4056e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4056e6:	d202      	bcs.n	4056ee <__aeabi_ddiv+0x6e>
  4056e8:	085b      	lsrs	r3, r3, #1
  4056ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4056ee:	1ab6      	subs	r6, r6, r2
  4056f0:	eb65 0503 	sbc.w	r5, r5, r3
  4056f4:	085b      	lsrs	r3, r3, #1
  4056f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4056fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4056fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405702:	ebb6 0e02 	subs.w	lr, r6, r2
  405706:	eb75 0e03 	sbcs.w	lr, r5, r3
  40570a:	bf22      	ittt	cs
  40570c:	1ab6      	subcs	r6, r6, r2
  40570e:	4675      	movcs	r5, lr
  405710:	ea40 000c 	orrcs.w	r0, r0, ip
  405714:	085b      	lsrs	r3, r3, #1
  405716:	ea4f 0232 	mov.w	r2, r2, rrx
  40571a:	ebb6 0e02 	subs.w	lr, r6, r2
  40571e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405722:	bf22      	ittt	cs
  405724:	1ab6      	subcs	r6, r6, r2
  405726:	4675      	movcs	r5, lr
  405728:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40572c:	085b      	lsrs	r3, r3, #1
  40572e:	ea4f 0232 	mov.w	r2, r2, rrx
  405732:	ebb6 0e02 	subs.w	lr, r6, r2
  405736:	eb75 0e03 	sbcs.w	lr, r5, r3
  40573a:	bf22      	ittt	cs
  40573c:	1ab6      	subcs	r6, r6, r2
  40573e:	4675      	movcs	r5, lr
  405740:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405744:	085b      	lsrs	r3, r3, #1
  405746:	ea4f 0232 	mov.w	r2, r2, rrx
  40574a:	ebb6 0e02 	subs.w	lr, r6, r2
  40574e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405752:	bf22      	ittt	cs
  405754:	1ab6      	subcs	r6, r6, r2
  405756:	4675      	movcs	r5, lr
  405758:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40575c:	ea55 0e06 	orrs.w	lr, r5, r6
  405760:	d018      	beq.n	405794 <__aeabi_ddiv+0x114>
  405762:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405766:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40576a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40576e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405772:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405776:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40577a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40577e:	d1c0      	bne.n	405702 <__aeabi_ddiv+0x82>
  405780:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405784:	d10b      	bne.n	40579e <__aeabi_ddiv+0x11e>
  405786:	ea41 0100 	orr.w	r1, r1, r0
  40578a:	f04f 0000 	mov.w	r0, #0
  40578e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405792:	e7b6      	b.n	405702 <__aeabi_ddiv+0x82>
  405794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405798:	bf04      	itt	eq
  40579a:	4301      	orreq	r1, r0
  40579c:	2000      	moveq	r0, #0
  40579e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4057a2:	bf88      	it	hi
  4057a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4057a8:	f63f aeaf 	bhi.w	40550a <__aeabi_dmul+0xde>
  4057ac:	ebb5 0c03 	subs.w	ip, r5, r3
  4057b0:	bf04      	itt	eq
  4057b2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4057b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4057ba:	f150 0000 	adcs.w	r0, r0, #0
  4057be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4057c2:	bd70      	pop	{r4, r5, r6, pc}
  4057c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4057c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4057cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4057d0:	bfc2      	ittt	gt
  4057d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4057d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4057da:	bd70      	popgt	{r4, r5, r6, pc}
  4057dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4057e0:	f04f 0e00 	mov.w	lr, #0
  4057e4:	3c01      	subs	r4, #1
  4057e6:	e690      	b.n	40550a <__aeabi_dmul+0xde>
  4057e8:	ea45 0e06 	orr.w	lr, r5, r6
  4057ec:	e68d      	b.n	40550a <__aeabi_dmul+0xde>
  4057ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4057f2:	ea94 0f0c 	teq	r4, ip
  4057f6:	bf08      	it	eq
  4057f8:	ea95 0f0c 	teqeq	r5, ip
  4057fc:	f43f af3b 	beq.w	405676 <__aeabi_dmul+0x24a>
  405800:	ea94 0f0c 	teq	r4, ip
  405804:	d10a      	bne.n	40581c <__aeabi_ddiv+0x19c>
  405806:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40580a:	f47f af34 	bne.w	405676 <__aeabi_dmul+0x24a>
  40580e:	ea95 0f0c 	teq	r5, ip
  405812:	f47f af25 	bne.w	405660 <__aeabi_dmul+0x234>
  405816:	4610      	mov	r0, r2
  405818:	4619      	mov	r1, r3
  40581a:	e72c      	b.n	405676 <__aeabi_dmul+0x24a>
  40581c:	ea95 0f0c 	teq	r5, ip
  405820:	d106      	bne.n	405830 <__aeabi_ddiv+0x1b0>
  405822:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405826:	f43f aefd 	beq.w	405624 <__aeabi_dmul+0x1f8>
  40582a:	4610      	mov	r0, r2
  40582c:	4619      	mov	r1, r3
  40582e:	e722      	b.n	405676 <__aeabi_dmul+0x24a>
  405830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405834:	bf18      	it	ne
  405836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40583a:	f47f aec5 	bne.w	4055c8 <__aeabi_dmul+0x19c>
  40583e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405842:	f47f af0d 	bne.w	405660 <__aeabi_dmul+0x234>
  405846:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40584a:	f47f aeeb 	bne.w	405624 <__aeabi_dmul+0x1f8>
  40584e:	e712      	b.n	405676 <__aeabi_dmul+0x24a>

00405850 <__gedf2>:
  405850:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  405854:	e006      	b.n	405864 <__cmpdf2+0x4>
  405856:	bf00      	nop

00405858 <__ledf2>:
  405858:	f04f 0c01 	mov.w	ip, #1
  40585c:	e002      	b.n	405864 <__cmpdf2+0x4>
  40585e:	bf00      	nop

00405860 <__cmpdf2>:
  405860:	f04f 0c01 	mov.w	ip, #1
  405864:	f84d cd04 	str.w	ip, [sp, #-4]!
  405868:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40586c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405874:	bf18      	it	ne
  405876:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40587a:	d01b      	beq.n	4058b4 <__cmpdf2+0x54>
  40587c:	b001      	add	sp, #4
  40587e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405882:	bf0c      	ite	eq
  405884:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405888:	ea91 0f03 	teqne	r1, r3
  40588c:	bf02      	ittt	eq
  40588e:	ea90 0f02 	teqeq	r0, r2
  405892:	2000      	moveq	r0, #0
  405894:	4770      	bxeq	lr
  405896:	f110 0f00 	cmn.w	r0, #0
  40589a:	ea91 0f03 	teq	r1, r3
  40589e:	bf58      	it	pl
  4058a0:	4299      	cmppl	r1, r3
  4058a2:	bf08      	it	eq
  4058a4:	4290      	cmpeq	r0, r2
  4058a6:	bf2c      	ite	cs
  4058a8:	17d8      	asrcs	r0, r3, #31
  4058aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4058ae:	f040 0001 	orr.w	r0, r0, #1
  4058b2:	4770      	bx	lr
  4058b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4058b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4058bc:	d102      	bne.n	4058c4 <__cmpdf2+0x64>
  4058be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4058c2:	d107      	bne.n	4058d4 <__cmpdf2+0x74>
  4058c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4058c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4058cc:	d1d6      	bne.n	40587c <__cmpdf2+0x1c>
  4058ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4058d2:	d0d3      	beq.n	40587c <__cmpdf2+0x1c>
  4058d4:	f85d 0b04 	ldr.w	r0, [sp], #4
  4058d8:	4770      	bx	lr
  4058da:	bf00      	nop

004058dc <__aeabi_cdrcmple>:
  4058dc:	4684      	mov	ip, r0
  4058de:	4610      	mov	r0, r2
  4058e0:	4662      	mov	r2, ip
  4058e2:	468c      	mov	ip, r1
  4058e4:	4619      	mov	r1, r3
  4058e6:	4663      	mov	r3, ip
  4058e8:	e000      	b.n	4058ec <__aeabi_cdcmpeq>
  4058ea:	bf00      	nop

004058ec <__aeabi_cdcmpeq>:
  4058ec:	b501      	push	{r0, lr}
  4058ee:	f7ff ffb7 	bl	405860 <__cmpdf2>
  4058f2:	2800      	cmp	r0, #0
  4058f4:	bf48      	it	mi
  4058f6:	f110 0f00 	cmnmi.w	r0, #0
  4058fa:	bd01      	pop	{r0, pc}

004058fc <__aeabi_dcmpeq>:
  4058fc:	f84d ed08 	str.w	lr, [sp, #-8]!
  405900:	f7ff fff4 	bl	4058ec <__aeabi_cdcmpeq>
  405904:	bf0c      	ite	eq
  405906:	2001      	moveq	r0, #1
  405908:	2000      	movne	r0, #0
  40590a:	f85d fb08 	ldr.w	pc, [sp], #8
  40590e:	bf00      	nop

00405910 <__aeabi_dcmplt>:
  405910:	f84d ed08 	str.w	lr, [sp, #-8]!
  405914:	f7ff ffea 	bl	4058ec <__aeabi_cdcmpeq>
  405918:	bf34      	ite	cc
  40591a:	2001      	movcc	r0, #1
  40591c:	2000      	movcs	r0, #0
  40591e:	f85d fb08 	ldr.w	pc, [sp], #8
  405922:	bf00      	nop

00405924 <__aeabi_dcmple>:
  405924:	f84d ed08 	str.w	lr, [sp, #-8]!
  405928:	f7ff ffe0 	bl	4058ec <__aeabi_cdcmpeq>
  40592c:	bf94      	ite	ls
  40592e:	2001      	movls	r0, #1
  405930:	2000      	movhi	r0, #0
  405932:	f85d fb08 	ldr.w	pc, [sp], #8
  405936:	bf00      	nop

00405938 <__aeabi_dcmpge>:
  405938:	f84d ed08 	str.w	lr, [sp, #-8]!
  40593c:	f7ff ffce 	bl	4058dc <__aeabi_cdrcmple>
  405940:	bf94      	ite	ls
  405942:	2001      	movls	r0, #1
  405944:	2000      	movhi	r0, #0
  405946:	f85d fb08 	ldr.w	pc, [sp], #8
  40594a:	bf00      	nop

0040594c <__aeabi_dcmpgt>:
  40594c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405950:	f7ff ffc4 	bl	4058dc <__aeabi_cdrcmple>
  405954:	bf34      	ite	cc
  405956:	2001      	movcc	r0, #1
  405958:	2000      	movcs	r0, #0
  40595a:	f85d fb08 	ldr.w	pc, [sp], #8
  40595e:	bf00      	nop

00405960 <__aeabi_dcmpun>:
  405960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405968:	d102      	bne.n	405970 <__aeabi_dcmpun+0x10>
  40596a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40596e:	d10a      	bne.n	405986 <__aeabi_dcmpun+0x26>
  405970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405978:	d102      	bne.n	405980 <__aeabi_dcmpun+0x20>
  40597a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40597e:	d102      	bne.n	405986 <__aeabi_dcmpun+0x26>
  405980:	f04f 0000 	mov.w	r0, #0
  405984:	4770      	bx	lr
  405986:	f04f 0001 	mov.w	r0, #1
  40598a:	4770      	bx	lr

0040598c <__aeabi_d2iz>:
  40598c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405994:	d215      	bcs.n	4059c2 <__aeabi_d2iz+0x36>
  405996:	d511      	bpl.n	4059bc <__aeabi_d2iz+0x30>
  405998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40599c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4059a0:	d912      	bls.n	4059c8 <__aeabi_d2iz+0x3c>
  4059a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4059a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4059aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4059ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4059b2:	fa23 f002 	lsr.w	r0, r3, r2
  4059b6:	bf18      	it	ne
  4059b8:	4240      	negne	r0, r0
  4059ba:	4770      	bx	lr
  4059bc:	f04f 0000 	mov.w	r0, #0
  4059c0:	4770      	bx	lr
  4059c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4059c6:	d105      	bne.n	4059d4 <__aeabi_d2iz+0x48>
  4059c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4059cc:	bf08      	it	eq
  4059ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4059d2:	4770      	bx	lr
  4059d4:	f04f 0000 	mov.w	r0, #0
  4059d8:	4770      	bx	lr
  4059da:	bf00      	nop

004059dc <__aeabi_d2f>:
  4059dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4059e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4059e4:	bf24      	itt	cs
  4059e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4059ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4059ee:	d90d      	bls.n	405a0c <__aeabi_d2f+0x30>
  4059f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4059f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4059f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4059fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405a04:	bf08      	it	eq
  405a06:	f020 0001 	biceq.w	r0, r0, #1
  405a0a:	4770      	bx	lr
  405a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405a10:	d121      	bne.n	405a56 <__aeabi_d2f+0x7a>
  405a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405a16:	bfbc      	itt	lt
  405a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405a1c:	4770      	bxlt	lr
  405a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405a26:	f1c2 0218 	rsb	r2, r2, #24
  405a2a:	f1c2 0c20 	rsb	ip, r2, #32
  405a2e:	fa10 f30c 	lsls.w	r3, r0, ip
  405a32:	fa20 f002 	lsr.w	r0, r0, r2
  405a36:	bf18      	it	ne
  405a38:	f040 0001 	orrne.w	r0, r0, #1
  405a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405a44:	fa03 fc0c 	lsl.w	ip, r3, ip
  405a48:	ea40 000c 	orr.w	r0, r0, ip
  405a4c:	fa23 f302 	lsr.w	r3, r3, r2
  405a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405a54:	e7cc      	b.n	4059f0 <__aeabi_d2f+0x14>
  405a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405a5a:	d107      	bne.n	405a6c <__aeabi_d2f+0x90>
  405a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405a60:	bf1e      	ittt	ne
  405a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405a6a:	4770      	bxne	lr
  405a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405a78:	4770      	bx	lr
  405a7a:	bf00      	nop

00405a7c <__aeabi_frsub>:
  405a7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  405a80:	e002      	b.n	405a88 <__addsf3>
  405a82:	bf00      	nop

00405a84 <__aeabi_fsub>:
  405a84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405a88 <__addsf3>:
  405a88:	0042      	lsls	r2, r0, #1
  405a8a:	bf1f      	itttt	ne
  405a8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  405a90:	ea92 0f03 	teqne	r2, r3
  405a94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405a98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405a9c:	d06a      	beq.n	405b74 <__addsf3+0xec>
  405a9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  405aa2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405aa6:	bfc1      	itttt	gt
  405aa8:	18d2      	addgt	r2, r2, r3
  405aaa:	4041      	eorgt	r1, r0
  405aac:	4048      	eorgt	r0, r1
  405aae:	4041      	eorgt	r1, r0
  405ab0:	bfb8      	it	lt
  405ab2:	425b      	neglt	r3, r3
  405ab4:	2b19      	cmp	r3, #25
  405ab6:	bf88      	it	hi
  405ab8:	4770      	bxhi	lr
  405aba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405abe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405ac2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405ac6:	bf18      	it	ne
  405ac8:	4240      	negne	r0, r0
  405aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405ace:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405ad2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405ad6:	bf18      	it	ne
  405ad8:	4249      	negne	r1, r1
  405ada:	ea92 0f03 	teq	r2, r3
  405ade:	d03f      	beq.n	405b60 <__addsf3+0xd8>
  405ae0:	f1a2 0201 	sub.w	r2, r2, #1
  405ae4:	fa41 fc03 	asr.w	ip, r1, r3
  405ae8:	eb10 000c 	adds.w	r0, r0, ip
  405aec:	f1c3 0320 	rsb	r3, r3, #32
  405af0:	fa01 f103 	lsl.w	r1, r1, r3
  405af4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405af8:	d502      	bpl.n	405b00 <__addsf3+0x78>
  405afa:	4249      	negs	r1, r1
  405afc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405b00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405b04:	d313      	bcc.n	405b2e <__addsf3+0xa6>
  405b06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  405b0a:	d306      	bcc.n	405b1a <__addsf3+0x92>
  405b0c:	0840      	lsrs	r0, r0, #1
  405b0e:	ea4f 0131 	mov.w	r1, r1, rrx
  405b12:	f102 0201 	add.w	r2, r2, #1
  405b16:	2afe      	cmp	r2, #254	; 0xfe
  405b18:	d251      	bcs.n	405bbe <__addsf3+0x136>
  405b1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  405b1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405b22:	bf08      	it	eq
  405b24:	f020 0001 	biceq.w	r0, r0, #1
  405b28:	ea40 0003 	orr.w	r0, r0, r3
  405b2c:	4770      	bx	lr
  405b2e:	0049      	lsls	r1, r1, #1
  405b30:	eb40 0000 	adc.w	r0, r0, r0
  405b34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405b38:	f1a2 0201 	sub.w	r2, r2, #1
  405b3c:	d1ed      	bne.n	405b1a <__addsf3+0x92>
  405b3e:	fab0 fc80 	clz	ip, r0
  405b42:	f1ac 0c08 	sub.w	ip, ip, #8
  405b46:	ebb2 020c 	subs.w	r2, r2, ip
  405b4a:	fa00 f00c 	lsl.w	r0, r0, ip
  405b4e:	bfaa      	itet	ge
  405b50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405b54:	4252      	neglt	r2, r2
  405b56:	4318      	orrge	r0, r3
  405b58:	bfbc      	itt	lt
  405b5a:	40d0      	lsrlt	r0, r2
  405b5c:	4318      	orrlt	r0, r3
  405b5e:	4770      	bx	lr
  405b60:	f092 0f00 	teq	r2, #0
  405b64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405b68:	bf06      	itte	eq
  405b6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  405b6e:	3201      	addeq	r2, #1
  405b70:	3b01      	subne	r3, #1
  405b72:	e7b5      	b.n	405ae0 <__addsf3+0x58>
  405b74:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405b7c:	bf18      	it	ne
  405b7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405b82:	d021      	beq.n	405bc8 <__addsf3+0x140>
  405b84:	ea92 0f03 	teq	r2, r3
  405b88:	d004      	beq.n	405b94 <__addsf3+0x10c>
  405b8a:	f092 0f00 	teq	r2, #0
  405b8e:	bf08      	it	eq
  405b90:	4608      	moveq	r0, r1
  405b92:	4770      	bx	lr
  405b94:	ea90 0f01 	teq	r0, r1
  405b98:	bf1c      	itt	ne
  405b9a:	2000      	movne	r0, #0
  405b9c:	4770      	bxne	lr
  405b9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  405ba2:	d104      	bne.n	405bae <__addsf3+0x126>
  405ba4:	0040      	lsls	r0, r0, #1
  405ba6:	bf28      	it	cs
  405ba8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405bac:	4770      	bx	lr
  405bae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405bb2:	bf3c      	itt	cc
  405bb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  405bb8:	4770      	bxcc	lr
  405bba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405bbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405bc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405bc6:	4770      	bx	lr
  405bc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
  405bcc:	bf16      	itet	ne
  405bce:	4608      	movne	r0, r1
  405bd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405bd4:	4601      	movne	r1, r0
  405bd6:	0242      	lsls	r2, r0, #9
  405bd8:	bf06      	itte	eq
  405bda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  405bde:	ea90 0f01 	teqeq	r0, r1
  405be2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405be6:	4770      	bx	lr

00405be8 <__aeabi_ui2f>:
  405be8:	f04f 0300 	mov.w	r3, #0
  405bec:	e004      	b.n	405bf8 <__aeabi_i2f+0x8>
  405bee:	bf00      	nop

00405bf0 <__aeabi_i2f>:
  405bf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405bf4:	bf48      	it	mi
  405bf6:	4240      	negmi	r0, r0
  405bf8:	ea5f 0c00 	movs.w	ip, r0
  405bfc:	bf08      	it	eq
  405bfe:	4770      	bxeq	lr
  405c00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405c04:	4601      	mov	r1, r0
  405c06:	f04f 0000 	mov.w	r0, #0
  405c0a:	e01c      	b.n	405c46 <__aeabi_l2f+0x2a>

00405c0c <__aeabi_ul2f>:
  405c0c:	ea50 0201 	orrs.w	r2, r0, r1
  405c10:	bf08      	it	eq
  405c12:	4770      	bxeq	lr
  405c14:	f04f 0300 	mov.w	r3, #0
  405c18:	e00a      	b.n	405c30 <__aeabi_l2f+0x14>
  405c1a:	bf00      	nop

00405c1c <__aeabi_l2f>:
  405c1c:	ea50 0201 	orrs.w	r2, r0, r1
  405c20:	bf08      	it	eq
  405c22:	4770      	bxeq	lr
  405c24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405c28:	d502      	bpl.n	405c30 <__aeabi_l2f+0x14>
  405c2a:	4240      	negs	r0, r0
  405c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405c30:	ea5f 0c01 	movs.w	ip, r1
  405c34:	bf02      	ittt	eq
  405c36:	4684      	moveq	ip, r0
  405c38:	4601      	moveq	r1, r0
  405c3a:	2000      	moveq	r0, #0
  405c3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405c40:	bf08      	it	eq
  405c42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405c46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  405c4a:	fabc f28c 	clz	r2, ip
  405c4e:	3a08      	subs	r2, #8
  405c50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405c54:	db10      	blt.n	405c78 <__aeabi_l2f+0x5c>
  405c56:	fa01 fc02 	lsl.w	ip, r1, r2
  405c5a:	4463      	add	r3, ip
  405c5c:	fa00 fc02 	lsl.w	ip, r0, r2
  405c60:	f1c2 0220 	rsb	r2, r2, #32
  405c64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405c68:	fa20 f202 	lsr.w	r2, r0, r2
  405c6c:	eb43 0002 	adc.w	r0, r3, r2
  405c70:	bf08      	it	eq
  405c72:	f020 0001 	biceq.w	r0, r0, #1
  405c76:	4770      	bx	lr
  405c78:	f102 0220 	add.w	r2, r2, #32
  405c7c:	fa01 fc02 	lsl.w	ip, r1, r2
  405c80:	f1c2 0220 	rsb	r2, r2, #32
  405c84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  405c88:	fa21 f202 	lsr.w	r2, r1, r2
  405c8c:	eb43 0002 	adc.w	r0, r3, r2
  405c90:	bf08      	it	eq
  405c92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405c96:	4770      	bx	lr

00405c98 <__aeabi_fmul>:
  405c98:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405c9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405ca0:	bf1e      	ittt	ne
  405ca2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405ca6:	ea92 0f0c 	teqne	r2, ip
  405caa:	ea93 0f0c 	teqne	r3, ip
  405cae:	d06f      	beq.n	405d90 <__aeabi_fmul+0xf8>
  405cb0:	441a      	add	r2, r3
  405cb2:	ea80 0c01 	eor.w	ip, r0, r1
  405cb6:	0240      	lsls	r0, r0, #9
  405cb8:	bf18      	it	ne
  405cba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  405cbe:	d01e      	beq.n	405cfe <__aeabi_fmul+0x66>
  405cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405cc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  405cc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  405ccc:	fba0 3101 	umull	r3, r1, r0, r1
  405cd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405cd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405cd8:	bf3e      	ittt	cc
  405cda:	0049      	lslcc	r1, r1, #1
  405cdc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405ce0:	005b      	lslcc	r3, r3, #1
  405ce2:	ea40 0001 	orr.w	r0, r0, r1
  405ce6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  405cea:	2afd      	cmp	r2, #253	; 0xfd
  405cec:	d81d      	bhi.n	405d2a <__aeabi_fmul+0x92>
  405cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405cf6:	bf08      	it	eq
  405cf8:	f020 0001 	biceq.w	r0, r0, #1
  405cfc:	4770      	bx	lr
  405cfe:	f090 0f00 	teq	r0, #0
  405d02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405d06:	bf08      	it	eq
  405d08:	0249      	lsleq	r1, r1, #9
  405d0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405d0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405d12:	3a7f      	subs	r2, #127	; 0x7f
  405d14:	bfc2      	ittt	gt
  405d16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405d1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405d1e:	4770      	bxgt	lr
  405d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405d24:	f04f 0300 	mov.w	r3, #0
  405d28:	3a01      	subs	r2, #1
  405d2a:	dc5d      	bgt.n	405de8 <__aeabi_fmul+0x150>
  405d2c:	f112 0f19 	cmn.w	r2, #25
  405d30:	bfdc      	itt	le
  405d32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405d36:	4770      	bxle	lr
  405d38:	f1c2 0200 	rsb	r2, r2, #0
  405d3c:	0041      	lsls	r1, r0, #1
  405d3e:	fa21 f102 	lsr.w	r1, r1, r2
  405d42:	f1c2 0220 	rsb	r2, r2, #32
  405d46:	fa00 fc02 	lsl.w	ip, r0, r2
  405d4a:	ea5f 0031 	movs.w	r0, r1, rrx
  405d4e:	f140 0000 	adc.w	r0, r0, #0
  405d52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405d56:	bf08      	it	eq
  405d58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405d5c:	4770      	bx	lr
  405d5e:	f092 0f00 	teq	r2, #0
  405d62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405d66:	bf02      	ittt	eq
  405d68:	0040      	lsleq	r0, r0, #1
  405d6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405d6e:	3a01      	subeq	r2, #1
  405d70:	d0f9      	beq.n	405d66 <__aeabi_fmul+0xce>
  405d72:	ea40 000c 	orr.w	r0, r0, ip
  405d76:	f093 0f00 	teq	r3, #0
  405d7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405d7e:	bf02      	ittt	eq
  405d80:	0049      	lsleq	r1, r1, #1
  405d82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405d86:	3b01      	subeq	r3, #1
  405d88:	d0f9      	beq.n	405d7e <__aeabi_fmul+0xe6>
  405d8a:	ea41 010c 	orr.w	r1, r1, ip
  405d8e:	e78f      	b.n	405cb0 <__aeabi_fmul+0x18>
  405d90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405d94:	ea92 0f0c 	teq	r2, ip
  405d98:	bf18      	it	ne
  405d9a:	ea93 0f0c 	teqne	r3, ip
  405d9e:	d00a      	beq.n	405db6 <__aeabi_fmul+0x11e>
  405da0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405da4:	bf18      	it	ne
  405da6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405daa:	d1d8      	bne.n	405d5e <__aeabi_fmul+0xc6>
  405dac:	ea80 0001 	eor.w	r0, r0, r1
  405db0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405db4:	4770      	bx	lr
  405db6:	f090 0f00 	teq	r0, #0
  405dba:	bf17      	itett	ne
  405dbc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405dc0:	4608      	moveq	r0, r1
  405dc2:	f091 0f00 	teqne	r1, #0
  405dc6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405dca:	d014      	beq.n	405df6 <__aeabi_fmul+0x15e>
  405dcc:	ea92 0f0c 	teq	r2, ip
  405dd0:	d101      	bne.n	405dd6 <__aeabi_fmul+0x13e>
  405dd2:	0242      	lsls	r2, r0, #9
  405dd4:	d10f      	bne.n	405df6 <__aeabi_fmul+0x15e>
  405dd6:	ea93 0f0c 	teq	r3, ip
  405dda:	d103      	bne.n	405de4 <__aeabi_fmul+0x14c>
  405ddc:	024b      	lsls	r3, r1, #9
  405dde:	bf18      	it	ne
  405de0:	4608      	movne	r0, r1
  405de2:	d108      	bne.n	405df6 <__aeabi_fmul+0x15e>
  405de4:	ea80 0001 	eor.w	r0, r0, r1
  405de8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405dec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405df0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405df4:	4770      	bx	lr
  405df6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405dfa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405dfe:	4770      	bx	lr

00405e00 <__aeabi_fdiv>:
  405e00:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405e04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405e08:	bf1e      	ittt	ne
  405e0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405e0e:	ea92 0f0c 	teqne	r2, ip
  405e12:	ea93 0f0c 	teqne	r3, ip
  405e16:	d069      	beq.n	405eec <__aeabi_fdiv+0xec>
  405e18:	eba2 0203 	sub.w	r2, r2, r3
  405e1c:	ea80 0c01 	eor.w	ip, r0, r1
  405e20:	0249      	lsls	r1, r1, #9
  405e22:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405e26:	d037      	beq.n	405e98 <__aeabi_fdiv+0x98>
  405e28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405e2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405e30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405e34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405e38:	428b      	cmp	r3, r1
  405e3a:	bf38      	it	cc
  405e3c:	005b      	lslcc	r3, r3, #1
  405e3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405e42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405e46:	428b      	cmp	r3, r1
  405e48:	bf24      	itt	cs
  405e4a:	1a5b      	subcs	r3, r3, r1
  405e4c:	ea40 000c 	orrcs.w	r0, r0, ip
  405e50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405e54:	bf24      	itt	cs
  405e56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405e5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405e5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405e62:	bf24      	itt	cs
  405e64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405e68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405e6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405e70:	bf24      	itt	cs
  405e72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405e76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405e7a:	011b      	lsls	r3, r3, #4
  405e7c:	bf18      	it	ne
  405e7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405e82:	d1e0      	bne.n	405e46 <__aeabi_fdiv+0x46>
  405e84:	2afd      	cmp	r2, #253	; 0xfd
  405e86:	f63f af50 	bhi.w	405d2a <__aeabi_fmul+0x92>
  405e8a:	428b      	cmp	r3, r1
  405e8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405e90:	bf08      	it	eq
  405e92:	f020 0001 	biceq.w	r0, r0, #1
  405e96:	4770      	bx	lr
  405e98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405e9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405ea0:	327f      	adds	r2, #127	; 0x7f
  405ea2:	bfc2      	ittt	gt
  405ea4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405ea8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405eac:	4770      	bxgt	lr
  405eae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405eb2:	f04f 0300 	mov.w	r3, #0
  405eb6:	3a01      	subs	r2, #1
  405eb8:	e737      	b.n	405d2a <__aeabi_fmul+0x92>
  405eba:	f092 0f00 	teq	r2, #0
  405ebe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405ec2:	bf02      	ittt	eq
  405ec4:	0040      	lsleq	r0, r0, #1
  405ec6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405eca:	3a01      	subeq	r2, #1
  405ecc:	d0f9      	beq.n	405ec2 <__aeabi_fdiv+0xc2>
  405ece:	ea40 000c 	orr.w	r0, r0, ip
  405ed2:	f093 0f00 	teq	r3, #0
  405ed6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405eda:	bf02      	ittt	eq
  405edc:	0049      	lsleq	r1, r1, #1
  405ede:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405ee2:	3b01      	subeq	r3, #1
  405ee4:	d0f9      	beq.n	405eda <__aeabi_fdiv+0xda>
  405ee6:	ea41 010c 	orr.w	r1, r1, ip
  405eea:	e795      	b.n	405e18 <__aeabi_fdiv+0x18>
  405eec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405ef0:	ea92 0f0c 	teq	r2, ip
  405ef4:	d108      	bne.n	405f08 <__aeabi_fdiv+0x108>
  405ef6:	0242      	lsls	r2, r0, #9
  405ef8:	f47f af7d 	bne.w	405df6 <__aeabi_fmul+0x15e>
  405efc:	ea93 0f0c 	teq	r3, ip
  405f00:	f47f af70 	bne.w	405de4 <__aeabi_fmul+0x14c>
  405f04:	4608      	mov	r0, r1
  405f06:	e776      	b.n	405df6 <__aeabi_fmul+0x15e>
  405f08:	ea93 0f0c 	teq	r3, ip
  405f0c:	d104      	bne.n	405f18 <__aeabi_fdiv+0x118>
  405f0e:	024b      	lsls	r3, r1, #9
  405f10:	f43f af4c 	beq.w	405dac <__aeabi_fmul+0x114>
  405f14:	4608      	mov	r0, r1
  405f16:	e76e      	b.n	405df6 <__aeabi_fmul+0x15e>
  405f18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405f1c:	bf18      	it	ne
  405f1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405f22:	d1ca      	bne.n	405eba <__aeabi_fdiv+0xba>
  405f24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405f28:	f47f af5c 	bne.w	405de4 <__aeabi_fmul+0x14c>
  405f2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405f30:	f47f af3c 	bne.w	405dac <__aeabi_fmul+0x114>
  405f34:	e75f      	b.n	405df6 <__aeabi_fmul+0x15e>
  405f36:	bf00      	nop

00405f38 <__gesf2>:
  405f38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  405f3c:	e006      	b.n	405f4c <__cmpsf2+0x4>
  405f3e:	bf00      	nop

00405f40 <__lesf2>:
  405f40:	f04f 0c01 	mov.w	ip, #1
  405f44:	e002      	b.n	405f4c <__cmpsf2+0x4>
  405f46:	bf00      	nop

00405f48 <__cmpsf2>:
  405f48:	f04f 0c01 	mov.w	ip, #1
  405f4c:	f84d cd04 	str.w	ip, [sp, #-4]!
  405f50:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405f54:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405f58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405f5c:	bf18      	it	ne
  405f5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405f62:	d011      	beq.n	405f88 <__cmpsf2+0x40>
  405f64:	b001      	add	sp, #4
  405f66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  405f6a:	bf18      	it	ne
  405f6c:	ea90 0f01 	teqne	r0, r1
  405f70:	bf58      	it	pl
  405f72:	ebb2 0003 	subspl.w	r0, r2, r3
  405f76:	bf88      	it	hi
  405f78:	17c8      	asrhi	r0, r1, #31
  405f7a:	bf38      	it	cc
  405f7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  405f80:	bf18      	it	ne
  405f82:	f040 0001 	orrne.w	r0, r0, #1
  405f86:	4770      	bx	lr
  405f88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405f8c:	d102      	bne.n	405f94 <__cmpsf2+0x4c>
  405f8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405f92:	d105      	bne.n	405fa0 <__cmpsf2+0x58>
  405f94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405f98:	d1e4      	bne.n	405f64 <__cmpsf2+0x1c>
  405f9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405f9e:	d0e1      	beq.n	405f64 <__cmpsf2+0x1c>
  405fa0:	f85d 0b04 	ldr.w	r0, [sp], #4
  405fa4:	4770      	bx	lr
  405fa6:	bf00      	nop

00405fa8 <__aeabi_cfrcmple>:
  405fa8:	4684      	mov	ip, r0
  405faa:	4608      	mov	r0, r1
  405fac:	4661      	mov	r1, ip
  405fae:	e7ff      	b.n	405fb0 <__aeabi_cfcmpeq>

00405fb0 <__aeabi_cfcmpeq>:
  405fb0:	b50f      	push	{r0, r1, r2, r3, lr}
  405fb2:	f7ff ffc9 	bl	405f48 <__cmpsf2>
  405fb6:	2800      	cmp	r0, #0
  405fb8:	bf48      	it	mi
  405fba:	f110 0f00 	cmnmi.w	r0, #0
  405fbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

00405fc0 <__aeabi_fcmpeq>:
  405fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
  405fc4:	f7ff fff4 	bl	405fb0 <__aeabi_cfcmpeq>
  405fc8:	bf0c      	ite	eq
  405fca:	2001      	moveq	r0, #1
  405fcc:	2000      	movne	r0, #0
  405fce:	f85d fb08 	ldr.w	pc, [sp], #8
  405fd2:	bf00      	nop

00405fd4 <__aeabi_fcmplt>:
  405fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  405fd8:	f7ff ffea 	bl	405fb0 <__aeabi_cfcmpeq>
  405fdc:	bf34      	ite	cc
  405fde:	2001      	movcc	r0, #1
  405fe0:	2000      	movcs	r0, #0
  405fe2:	f85d fb08 	ldr.w	pc, [sp], #8
  405fe6:	bf00      	nop

00405fe8 <__aeabi_fcmple>:
  405fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
  405fec:	f7ff ffe0 	bl	405fb0 <__aeabi_cfcmpeq>
  405ff0:	bf94      	ite	ls
  405ff2:	2001      	movls	r0, #1
  405ff4:	2000      	movhi	r0, #0
  405ff6:	f85d fb08 	ldr.w	pc, [sp], #8
  405ffa:	bf00      	nop

00405ffc <__aeabi_fcmpge>:
  405ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
  406000:	f7ff ffd2 	bl	405fa8 <__aeabi_cfrcmple>
  406004:	bf94      	ite	ls
  406006:	2001      	movls	r0, #1
  406008:	2000      	movhi	r0, #0
  40600a:	f85d fb08 	ldr.w	pc, [sp], #8
  40600e:	bf00      	nop

00406010 <__aeabi_fcmpgt>:
  406010:	f84d ed08 	str.w	lr, [sp, #-8]!
  406014:	f7ff ffc8 	bl	405fa8 <__aeabi_cfrcmple>
  406018:	bf34      	ite	cc
  40601a:	2001      	movcc	r0, #1
  40601c:	2000      	movcs	r0, #0
  40601e:	f85d fb08 	ldr.w	pc, [sp], #8
  406022:	bf00      	nop

00406024 <__aeabi_f2iz>:
  406024:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40602c:	d30f      	bcc.n	40604e <__aeabi_f2iz+0x2a>
  40602e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  406032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  406036:	d90d      	bls.n	406054 <__aeabi_f2iz+0x30>
  406038:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40603c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  406044:	fa23 f002 	lsr.w	r0, r3, r2
  406048:	bf18      	it	ne
  40604a:	4240      	negne	r0, r0
  40604c:	4770      	bx	lr
  40604e:	f04f 0000 	mov.w	r0, #0
  406052:	4770      	bx	lr
  406054:	f112 0f61 	cmn.w	r2, #97	; 0x61
  406058:	d101      	bne.n	40605e <__aeabi_f2iz+0x3a>
  40605a:	0242      	lsls	r2, r0, #9
  40605c:	d105      	bne.n	40606a <__aeabi_f2iz+0x46>
  40605e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  406062:	bf08      	it	eq
  406064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406068:	4770      	bx	lr
  40606a:	f04f 0000 	mov.w	r0, #0
  40606e:	4770      	bx	lr

00406070 <__aeabi_f2uiz>:
  406070:	0042      	lsls	r2, r0, #1
  406072:	d20e      	bcs.n	406092 <__aeabi_f2uiz+0x22>
  406074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  406078:	d30b      	bcc.n	406092 <__aeabi_f2uiz+0x22>
  40607a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40607e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  406082:	d409      	bmi.n	406098 <__aeabi_f2uiz+0x28>
  406084:	ea4f 2300 	mov.w	r3, r0, lsl #8
  406088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40608c:	fa23 f002 	lsr.w	r0, r3, r2
  406090:	4770      	bx	lr
  406092:	f04f 0000 	mov.w	r0, #0
  406096:	4770      	bx	lr
  406098:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40609c:	d101      	bne.n	4060a2 <__aeabi_f2uiz+0x32>
  40609e:	0242      	lsls	r2, r0, #9
  4060a0:	d102      	bne.n	4060a8 <__aeabi_f2uiz+0x38>
  4060a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4060a6:	4770      	bx	lr
  4060a8:	f04f 0000 	mov.w	r0, #0
  4060ac:	4770      	bx	lr
  4060ae:	bf00      	nop
  4060b0:	0a0d0a0d 	.word	0x0a0d0a0d
  4060b4:	346d6173 	.word	0x346d6173
  4060b8:	63323364 	.word	0x63323364
  4060bc:	756d6920 	.word	0x756d6920
  4060c0:	6d656420 	.word	0x6d656420
  4060c4:	2e2e2e6f 	.word	0x2e2e2e6f
  4060c8:	00000a0d 	.word	0x00000a0d
  4060cc:	0000002e 	.word	0x0000002e
  4060d0:	6c6c6f72 	.word	0x6c6c6f72
  4060d4:	7469702f 	.word	0x7469702f
  4060d8:	792f6863 	.word	0x792f6863
  4060dc:	203a7761 	.word	0x203a7761
  4060e0:	25206625 	.word	0x25206625
  4060e4:	66252066 	.word	0x66252066
  4060e8:	00000a0d 	.word	0x00000a0d
  4060ec:	74697277 	.word	0x74697277
  4060f0:	65725f65 	.word	0x65725f65
  4060f4:	74736967 	.word	0x74736967
  4060f8:	203a7265 	.word	0x203a7265
  4060fc:	63637573 	.word	0x63637573
  406100:	0d737365 	.word	0x0d737365
  406104:	0000000a 	.word	0x0000000a
  406108:	5f697774 	.word	0x5f697774
  40610c:	7473616d 	.word	0x7473616d
  406110:	695f7265 	.word	0x695f7265
  406114:	3a74696e 	.word	0x3a74696e
  406118:	69616620 	.word	0x69616620
  40611c:	0d64656c 	.word	0x0d64656c
  406120:	0000000a 	.word	0x0000000a
  406124:	5f697774 	.word	0x5f697774
  406128:	7473616d 	.word	0x7473616d
  40612c:	695f7265 	.word	0x695f7265
  406130:	3a74696e 	.word	0x3a74696e
  406134:	63757320 	.word	0x63757320
  406138:	73736563 	.word	0x73736563
  40613c:	00000a0d 	.word	0x00000a0d
  406140:	5f697774 	.word	0x5f697774
  406144:	626f7270 	.word	0x626f7270
  406148:	66203a65 	.word	0x66203a65
  40614c:	656c6961 	.word	0x656c6961
  406150:	000a0d64 	.word	0x000a0d64
  406154:	5f697774 	.word	0x5f697774
  406158:	626f7270 	.word	0x626f7270
  40615c:	73203a65 	.word	0x73203a65
  406160:	65636375 	.word	0x65636375
  406164:	0a0d7373 	.word	0x0a0d7373
  406168:	00000000 	.word	0x00000000
  40616c:	62616e45 	.word	0x62616e45
  406170:	0064656c 	.word	0x0064656c
  406174:	61736944 	.word	0x61736944
  406178:	64656c62 	.word	0x64656c62
  40617c:	00000000 	.word	0x00000000
  406180:	69766544 	.word	0x69766544
  406184:	203a6563 	.word	0x203a6563
  406188:	31257830 	.word	0x31257830
  40618c:	000a0d78 	.word	0x000a0d78
  406190:	65656c53 	.word	0x65656c53
  406194:	6f4d2070 	.word	0x6f4d2070
  406198:	203a6564 	.word	0x203a6564
  40619c:	0a0d7325 	.word	0x0a0d7325
  4061a0:	00000000 	.word	0x00000000
  4061a4:	636f6c43 	.word	0x636f6c43
  4061a8:	6f53206b 	.word	0x6f53206b
  4061ac:	65637275 	.word	0x65637275
  4061b0:	0000203a 	.word	0x0000203a
  4061b4:	65746e49 	.word	0x65746e49
  4061b8:	6c616e72 	.word	0x6c616e72
  4061bc:	484d3820 	.word	0x484d3820
  4061c0:	736f207a 	.word	0x736f207a
  4061c4:	6c6c6963 	.word	0x6c6c6963
  4061c8:	726f7461 	.word	0x726f7461
  4061cc:	00000a0d 	.word	0x00000a0d
  4061d0:	204c4c50 	.word	0x204c4c50
  4061d4:	68746977 	.word	0x68746977
  4061d8:	61205820 	.word	0x61205820
  4061dc:	20736978 	.word	0x20736978
  4061e0:	6f727967 	.word	0x6f727967
  4061e4:	706f6373 	.word	0x706f6373
  4061e8:	65722065 	.word	0x65722065
  4061ec:	65726566 	.word	0x65726566
  4061f0:	0d65636e 	.word	0x0d65636e
  4061f4:	0000000a 	.word	0x0000000a
  4061f8:	6f727947 	.word	0x6f727947
  4061fc:	706f6373 	.word	0x706f6373
  406200:	00203a65 	.word	0x00203a65
  406204:	20303532 	.word	0x20303532
  406208:	0d737064 	.word	0x0d737064
  40620c:	0000000a 	.word	0x0000000a
  406210:	20303035 	.word	0x20303035
  406214:	0d737064 	.word	0x0d737064
  406218:	0000000a 	.word	0x0000000a
  40621c:	30303031 	.word	0x30303031
  406220:	73706420 	.word	0x73706420
  406224:	00000a0d 	.word	0x00000a0d
  406228:	30303032 	.word	0x30303032
  40622c:	73706420 	.word	0x73706420
  406230:	00000a0d 	.word	0x00000a0d
  406234:	5f657375 	.word	0x5f657375
  406238:	696c6163 	.word	0x696c6163
  40623c:	74617262 	.word	0x74617262
  406240:	25203a65 	.word	0x25203a65
  406244:	000a0d64 	.word	0x000a0d64
  406248:	75746361 	.word	0x75746361
  40624c:	745f6c61 	.word	0x745f6c61
  406250:	73657268 	.word	0x73657268
  406254:	646c6f68 	.word	0x646c6f68
  406258:	6625203a 	.word	0x6625203a
  40625c:	00000a0d 	.word	0x00000a0d
  406260:	5f737064 	.word	0x5f737064
  406264:	5f726570 	.word	0x5f726570
  406268:	69676964 	.word	0x69676964
  40626c:	25203a74 	.word	0x25203a74
  406270:	000a0d66 	.word	0x000a0d66
  406274:	676e6172 	.word	0x676e6172
  406278:	65705f65 	.word	0x65705f65
  40627c:	69645f72 	.word	0x69645f72
  406280:	3a746967 	.word	0x3a746967
  406284:	0d662520 	.word	0x0d662520
  406288:	0000000a 	.word	0x0000000a
  40628c:	76726573 	.word	0x76726573
  406290:	6e695f6f 	.word	0x6e695f6f
  406294:	0a0d7469 	.word	0x0a0d7469
  406298:	00000000 	.word	0x00000000
  40629c:	00000001 	.word	0x00000001
  4062a0:	00000002 	.word	0x00000002
  4062a4:	00000004 	.word	0x00000004
  4062a8:	00000008 	.word	0x00000008
  4062ac:	00000010 	.word	0x00000010
  4062b0:	00000020 	.word	0x00000020
  4062b4:	00000040 	.word	0x00000040
  4062b8:	00000080 	.word	0x00000080
  4062bc:	00000100 	.word	0x00000100
  4062c0:	00000200 	.word	0x00000200
  4062c4:	00000400 	.word	0x00000400
  4062c8:	74727173 	.word	0x74727173
  4062cc:	00000000 	.word	0x00000000

004062d0 <atanlo>:
  4062d0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  4062e0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

004062f0 <atanhi>:
  4062f0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  406300:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00406310 <_global_impure_ptr>:
  406310:	20000014 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  406320:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  406330:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  406340:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  406350:	4e614e00 00000000                       .NaN....

00406358 <__sf_fake_stdin>:
	...

00406378 <__sf_fake_stdout>:
	...

00406398 <__sf_fake_stderr>:
	...

004063b8 <__mprec_tens>:
  4063b8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4063c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4063d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4063e8:	00000000 412e8480 00000000 416312d0     .......A......cA
  4063f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  406408:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  406418:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  406428:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  406438:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  406448:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  406458:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  406468:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  406478:	79d99db4 44ea7843                       ...yCx.D

00406480 <__mprec_bigtens>:
  406480:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  406490:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4064a0:	7f73bf3c 75154fdd                       <.s..O.u

004064a8 <p05.6097>:
  4064a8:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  4064b8:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  4064c8:	5849534f 00002e00                                OSIX...

004064cf <_ctype_>:
  4064cf:	20202000 20202020 28282020 20282828     .         ((((( 
  4064df:	20202020 20202020 20202020 20202020                     
  4064ef:	10108820 10101010 10101010 10101010      ...............
  4064ff:	04040410 04040404 10040404 10101010     ................
  40650f:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40651f:	01010101 01010101 01010101 10101010     ................
  40652f:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40653f:	02020202 02020202 02020202 10101010     ................
  40654f:	00000020 00000000 00000000 00000000      ...............
	...

004065d0 <_init>:
  4065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065d2:	bf00      	nop
  4065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4065d6:	bc08      	pop	{r3}
  4065d8:	469e      	mov	lr, r3
  4065da:	4770      	bx	lr

004065dc <__init_array_start>:
  4065dc:	004000f1 	.word	0x004000f1

004065e0 <_fini>:
  4065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4065e2:	bf00      	nop
  4065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4065e6:	bc08      	pop	{r3}
  4065e8:	469e      	mov	lr, r3
  4065ea:	4770      	bx	lr
  4065ec:	0000      	movs	r0, r0
	...

004065f0 <__portable_delay_cycles_veneer>:
  4065f0:	f85f f000 	ldr.w	pc, [pc]	; 4065f4 <__portable_delay_cycles_veneer+0x4>
  4065f4:	20000001 	.word	0x20000001

004065f8 <__fini_array_start>:
  4065f8:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <__fdlib_version>:
20000010:	0001 0000                                   ....

20000014 <impure_data>:
20000014:	0000 0000 6358 0040 6378 0040 6398 0040     ....Xc@.xc@..c@.
	...

20000074 <_impure_ptr>:
20000074:	0014 2000                                   ... 

20000078 <__global_locale>:
20000078:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	50a1 0040 5055 0040 0000 0000 64cf 0040     .P@.UP@......d@.
20000168:	64cd 0040 64b9 0040 64b9 0040 64b9 0040     .d@..d@..d@..d@.
20000178:	64b9 0040 64b9 0040 64b9 0040 64b9 0040     .d@..d@..d@..d@.
20000188:	64b9 0040 64b9 0040 ffff ffff ffff ffff     .d@..d@.........
20000198:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
