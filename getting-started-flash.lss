
getting-started-flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006044  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  00406044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000150  200001e4  00406228  000201e4  2**2
                  ALLOC
  3 .stack        00003004  20000334  00406378  000201e4  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  5 .comment      0000006e  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000cf5f  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000240b  00000000  00000000  0002d1db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005056  00000000  00000000  0002f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bd0  00000000  00000000  0003463c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ae0  00000000  00000000  0003520c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014d67  00000000  00000000  00035cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c99a  00000000  00000000  0004aa53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000545aa  00000000  00000000  000573ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000028d8  00000000  00000000  000ab998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003338 	.word	0x20003338
  400004:	004017e9 	.word	0x004017e9
  400008:	004017e5 	.word	0x004017e5
  40000c:	004017e5 	.word	0x004017e5
  400010:	004017e5 	.word	0x004017e5
  400014:	004017e5 	.word	0x004017e5
  400018:	004017e5 	.word	0x004017e5
	...
  40002c:	004017e5 	.word	0x004017e5
  400030:	004017e5 	.word	0x004017e5
  400034:	00000000 	.word	0x00000000
  400038:	004017e5 	.word	0x004017e5
  40003c:	004002f5 	.word	0x004002f5
  400040:	004017e5 	.word	0x004017e5
  400044:	004017e5 	.word	0x004017e5
  400048:	004017e5 	.word	0x004017e5
  40004c:	004017e5 	.word	0x004017e5
  400050:	004017e5 	.word	0x004017e5
  400054:	004017e5 	.word	0x004017e5
  400058:	004017e5 	.word	0x004017e5
  40005c:	004017e5 	.word	0x004017e5
  400060:	004017e5 	.word	0x004017e5
  400064:	004017e5 	.word	0x004017e5
  400068:	00000000 	.word	0x00000000
  40006c:	004015e5 	.word	0x004015e5
  400070:	004015f5 	.word	0x004015f5
  400074:	00401605 	.word	0x00401605
  400078:	004017e5 	.word	0x004017e5
  40007c:	004017e5 	.word	0x004017e5
	...
  400088:	004017e5 	.word	0x004017e5
  40008c:	004017e5 	.word	0x004017e5
  400090:	004017e5 	.word	0x004017e5
  400094:	004017e5 	.word	0x004017e5
  400098:	004017e5 	.word	0x004017e5
  40009c:	004017e5 	.word	0x004017e5
  4000a0:	004017e5 	.word	0x004017e5
  4000a4:	004017e5 	.word	0x004017e5
  4000a8:	004017e5 	.word	0x004017e5
  4000ac:	004017e5 	.word	0x004017e5
  4000b0:	004017e5 	.word	0x004017e5
  4000b4:	004017e5 	.word	0x004017e5
  4000b8:	004017e5 	.word	0x004017e5
  4000bc:	004017e5 	.word	0x004017e5
  4000c0:	004017e5 	.word	0x004017e5
  4000c4:	004017e5 	.word	0x004017e5
  4000c8:	004017e5 	.word	0x004017e5

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200001e4 	.word	0x200001e4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00406044 	.word	0x00406044

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	200001e8 	.word	0x200001e8
  40011c:	00406044 	.word	0x00406044
  400120:	00406044 	.word	0x00406044
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	f001 fc3a 	bl	4019a4 <system_init_flash>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	f001 faa2 	bl	40167c <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	f001 faca 	bl	4016d0 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fb      	beq.n	400138 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	f001 face 	bl	4016e0 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a08      	ldr	r2, [pc, #32]	; (400168 <sysclk_init+0x40>)
  400146:	4b09      	ldr	r3, [pc, #36]	; (40016c <sysclk_init+0x44>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	f001 fad1 	bl	4016f0 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fb      	beq.n	40014a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	f001 fa5e 	bl	401614 <pmc_switch_mck_to_pllack>
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	f001 fb9a 	bl	401890 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	f001 fc21 	bl	4019a4 <system_init_flash>
  400162:	bd08      	pop	{r3, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	20133f01 	.word	0x20133f01
  40016c:	400e0400 	.word	0x400e0400

00400170 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400170:	b990      	cbnz	r0, 400198 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400176:	460c      	mov	r4, r1
  400178:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40017a:	2a00      	cmp	r2, #0
  40017c:	dd0f      	ble.n	40019e <_read+0x2e>
  40017e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400180:	4e08      	ldr	r6, [pc, #32]	; (4001a4 <_read+0x34>)
  400182:	4d09      	ldr	r5, [pc, #36]	; (4001a8 <_read+0x38>)
  400184:	6830      	ldr	r0, [r6, #0]
  400186:	4621      	mov	r1, r4
  400188:	682b      	ldr	r3, [r5, #0]
  40018a:	4798      	blx	r3
		ptr++;
  40018c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018e:	42a7      	cmp	r7, r4
  400190:	d1f8      	bne.n	400184 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400192:	4640      	mov	r0, r8
  400194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40019c:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001a4:	200002a8 	.word	0x200002a8
  4001a8:	200002a0 	.word	0x200002a0

004001ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001ac:	3801      	subs	r0, #1
  4001ae:	2802      	cmp	r0, #2
  4001b0:	d815      	bhi.n	4001de <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001b6:	460e      	mov	r6, r1
  4001b8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	b19a      	cbz	r2, 4001e4 <_write+0x38>
  4001bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001f8 <_write+0x4c>
  4001c2:	4f0c      	ldr	r7, [pc, #48]	; (4001f4 <_write+0x48>)
  4001c4:	f8d8 0000 	ldr.w	r0, [r8]
  4001c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	4798      	blx	r3
  4001d0:	2800      	cmp	r0, #0
  4001d2:	db0a      	blt.n	4001ea <_write+0x3e>
  4001d4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	3c01      	subs	r4, #1
  4001d8:	d1f4      	bne.n	4001c4 <_write+0x18>
  4001da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001e2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e4:	2000      	movs	r0, #0
  4001e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		}
		++nChars;
	}
	return nChars;
}
  4001ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001f2:	bf00      	nop
  4001f4:	200002a4 	.word	0x200002a4
  4001f8:	200002a8 	.word	0x200002a8

004001fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001fc:	b570      	push	{r4, r5, r6, lr}
  4001fe:	b082      	sub	sp, #8
  400200:	4605      	mov	r5, r0
  400202:	460c      	mov	r4, r1
	uint32_t val = 0;
  400204:	2300      	movs	r3, #0
  400206:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400208:	4b18      	ldr	r3, [pc, #96]	; (40026c <usart_serial_getchar+0x70>)
  40020a:	4298      	cmp	r0, r3
  40020c:	d107      	bne.n	40021e <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  40020e:	461e      	mov	r6, r3
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	f001 fac6 	bl	4017a4 <uart_read>
  400218:	2800      	cmp	r0, #0
  40021a:	d1f9      	bne.n	400210 <usart_serial_getchar+0x14>
  40021c:	e017      	b.n	40024e <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40021e:	4b14      	ldr	r3, [pc, #80]	; (400270 <usart_serial_getchar+0x74>)
  400220:	4298      	cmp	r0, r3
  400222:	d107      	bne.n	400234 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400224:	461d      	mov	r5, r3
  400226:	4621      	mov	r1, r4
  400228:	4628      	mov	r0, r5
  40022a:	f001 fabb 	bl	4017a4 <uart_read>
  40022e:	2800      	cmp	r0, #0
  400230:	d1f9      	bne.n	400226 <usart_serial_getchar+0x2a>
  400232:	e018      	b.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400234:	4b0f      	ldr	r3, [pc, #60]	; (400274 <usart_serial_getchar+0x78>)
  400236:	4298      	cmp	r0, r3
  400238:	d109      	bne.n	40024e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40023a:	461d      	mov	r5, r3
  40023c:	a901      	add	r1, sp, #4
  40023e:	4628      	mov	r0, r5
  400240:	f001 fac4 	bl	4017cc <usart_read>
  400244:	2800      	cmp	r0, #0
  400246:	d1f9      	bne.n	40023c <usart_serial_getchar+0x40>
		*data = (uint8_t)(val & 0xFF);
  400248:	9b01      	ldr	r3, [sp, #4]
  40024a:	7023      	strb	r3, [r4, #0]
  40024c:	e00b      	b.n	400266 <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40024e:	4b0a      	ldr	r3, [pc, #40]	; (400278 <usart_serial_getchar+0x7c>)
  400250:	429d      	cmp	r5, r3
  400252:	d108      	bne.n	400266 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400254:	461d      	mov	r5, r3
  400256:	a901      	add	r1, sp, #4
  400258:	4628      	mov	r0, r5
  40025a:	f001 fab7 	bl	4017cc <usart_read>
  40025e:	2800      	cmp	r0, #0
  400260:	d1f9      	bne.n	400256 <usart_serial_getchar+0x5a>
		*data = (uint8_t)(val & 0xFF);
  400262:	9b01      	ldr	r3, [sp, #4]
  400264:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400266:	b002      	add	sp, #8
  400268:	bd70      	pop	{r4, r5, r6, pc}
  40026a:	bf00      	nop
  40026c:	400e0600 	.word	0x400e0600
  400270:	400e0800 	.word	0x400e0800
  400274:	40024000 	.word	0x40024000
  400278:	40028000 	.word	0x40028000

0040027c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40027c:	b538      	push	{r3, r4, r5, lr}
  40027e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400280:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <usart_serial_putchar+0x68>)
  400282:	4298      	cmp	r0, r3
  400284:	d108      	bne.n	400298 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400286:	461d      	mov	r5, r3
  400288:	4621      	mov	r1, r4
  40028a:	4628      	mov	r0, r5
  40028c:	f001 fa82 	bl	401794 <uart_write>
  400290:	2800      	cmp	r0, #0
  400292:	d1f9      	bne.n	400288 <usart_serial_putchar+0xc>
		return 1;
  400294:	2001      	movs	r0, #1
  400296:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400298:	4b13      	ldr	r3, [pc, #76]	; (4002e8 <usart_serial_putchar+0x6c>)
  40029a:	4298      	cmp	r0, r3
  40029c:	d108      	bne.n	4002b0 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461d      	mov	r5, r3
  4002a0:	4621      	mov	r1, r4
  4002a2:	4628      	mov	r0, r5
  4002a4:	f001 fa76 	bl	401794 <uart_write>
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1f9      	bne.n	4002a0 <usart_serial_putchar+0x24>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002b0:	4b0e      	ldr	r3, [pc, #56]	; (4002ec <usart_serial_putchar+0x70>)
  4002b2:	4298      	cmp	r0, r3
  4002b4:	d108      	bne.n	4002c8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4002b6:	461d      	mov	r5, r3
  4002b8:	4621      	mov	r1, r4
  4002ba:	4628      	mov	r0, r5
  4002bc:	f001 fa7c 	bl	4017b8 <usart_write>
  4002c0:	2800      	cmp	r0, #0
  4002c2:	d1f9      	bne.n	4002b8 <usart_serial_putchar+0x3c>
		return 1;
  4002c4:	2001      	movs	r0, #1
  4002c6:	bd38      	pop	{r3, r4, r5, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002c8:	4b09      	ldr	r3, [pc, #36]	; (4002f0 <usart_serial_putchar+0x74>)
  4002ca:	4298      	cmp	r0, r3
  4002cc:	d108      	bne.n	4002e0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4002ce:	461d      	mov	r5, r3
  4002d0:	4621      	mov	r1, r4
  4002d2:	4628      	mov	r0, r5
  4002d4:	f001 fa70 	bl	4017b8 <usart_write>
  4002d8:	2800      	cmp	r0, #0
  4002da:	d1f9      	bne.n	4002d0 <usart_serial_putchar+0x54>
		return 1;
  4002dc:	2001      	movs	r0, #1
  4002de:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bd38      	pop	{r3, r4, r5, pc}
  4002e4:	400e0600 	.word	0x400e0600
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	40024000 	.word	0x40024000
  4002f0:	40028000 	.word	0x40028000

004002f4 <SysTick_Handler>:

volatile clock_time_t clock_millis = 0;
#define clock_time()	clock_millis

void SysTick_Handler(void) {
    clock_millis++;
  4002f4:	4a02      	ldr	r2, [pc, #8]	; (400300 <SysTick_Handler+0xc>)
  4002f6:	6813      	ldr	r3, [r2, #0]
  4002f8:	3301      	adds	r3, #1
  4002fa:	6013      	str	r3, [r2, #0]
  4002fc:	4770      	bx	lr
  4002fe:	bf00      	nop
  400300:	20000200 	.word	0x20000200
  400304:	00000000 	.word	0x00000000

00400308 <main>:
}

int main(void)
{
  400308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40030c:	b09b      	sub	sp, #108	; 0x6c
    sysclk_init();
  40030e:	f7ff ff0b 	bl	400128 <sysclk_init>
    board_init();
  400312:	f000 fe19 	bl	400f48 <board_init>
    delay_init();
    pmc_enable_periph_clk(IMU_TWI_ID);
  400316:	2013      	movs	r0, #19
  400318:	f001 f9f2 	bl	401700 <pmc_enable_periph_clk>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40031c:	2009      	movs	r0, #9
  40031e:	f001 f9ef 	bl	401700 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400322:	4cc1      	ldr	r4, [pc, #772]	; (400628 <main+0x320>)
  400324:	4bc1      	ldr	r3, [pc, #772]	; (40062c <main+0x324>)
  400326:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400328:	4ac1      	ldr	r2, [pc, #772]	; (400630 <main+0x328>)
  40032a:	4bc2      	ldr	r3, [pc, #776]	; (400634 <main+0x32c>)
  40032c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40032e:	4ac2      	ldr	r2, [pc, #776]	; (400638 <main+0x330>)
  400330:	4bc2      	ldr	r3, [pc, #776]	; (40063c <main+0x334>)
  400332:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400334:	4bc2      	ldr	r3, [pc, #776]	; (400640 <main+0x338>)
  400336:	9317      	str	r3, [sp, #92]	; 0x5c
	uart_settings.ul_baudrate = opt->baudrate;
  400338:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40033c:	9318      	str	r3, [sp, #96]	; 0x60
	uart_settings.ul_mode = opt->paritytype;
  40033e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400342:	9319      	str	r3, [sp, #100]	; 0x64
  400344:	2009      	movs	r0, #9
  400346:	f001 f9db 	bl	401700 <pmc_enable_periph_clk>
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART1);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40034a:	a917      	add	r1, sp, #92	; 0x5c
  40034c:	4620      	mov	r0, r4
  40034e:	f001 fa05 	bl	40175c <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400352:	4cbc      	ldr	r4, [pc, #752]	; (400644 <main+0x33c>)
  400354:	6823      	ldr	r3, [r4, #0]
  400356:	2100      	movs	r1, #0
  400358:	6898      	ldr	r0, [r3, #8]
  40035a:	f002 fc43 	bl	402be4 <setbuf>
	setbuf(stdin, NULL);
  40035e:	6823      	ldr	r3, [r4, #0]
  400360:	2100      	movs	r1, #0
  400362:	6858      	ldr	r0, [r3, #4]
  400364:	f002 fc3e 	bl	402be4 <setbuf>

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");
  400368:	48b7      	ldr	r0, [pc, #732]	; (400648 <main+0x340>)
  40036a:	f002 fc33 	bl	402bd4 <puts>
  40036e:	2405      	movs	r4, #5

    for (int i=0; i<5; i++) {
        puts(".");
  400370:	4eb6      	ldr	r6, [pc, #728]	; (40064c <main+0x344>)
        delay_ms(250);
  400372:	4db7      	ldr	r5, [pc, #732]	; (400650 <main+0x348>)

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
        puts(".");
  400374:	4630      	mov	r0, r6
  400376:	f002 fc2d 	bl	402bd4 <puts>
        delay_ms(250);
  40037a:	4628      	mov	r0, r5
  40037c:	f005 fe5c 	bl	406038 <__portable_delay_cycles_veneer>
    pmc_enable_periph_clk(IMU_TWI_ID);

    configure_console();
    puts("\r\n\r\nsam4d32c imu demo...\r\n");

    for (int i=0; i<5; i++) {
  400380:	3c01      	subs	r4, #1
  400382:	d1f7      	bne.n	400374 <main+0x6c>
        puts(".");
        delay_ms(250);
    }
    puts("\r\n");
  400384:	48b3      	ldr	r0, [pc, #716]	; (400654 <main+0x34c>)
  400386:	f002 fc25 	bl	402bd4 <puts>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40038a:	4bb3      	ldr	r3, [pc, #716]	; (400658 <main+0x350>)
  40038c:	4ab3      	ldr	r2, [pc, #716]	; (40065c <main+0x354>)
  40038e:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400390:	21f0      	movs	r1, #240	; 0xf0
  400392:	4ab3      	ldr	r2, [pc, #716]	; (400660 <main+0x358>)
  400394:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400398:	2400      	movs	r4, #0
  40039a:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  40039c:	2207      	movs	r2, #7
  40039e:	601a      	str	r2, [r3, #0]

    SysTick_Config(sysclk_get_cpu_hz() / 1000);


    imu_init();
  4003a0:	f000 fa16 	bl	4007d0 <imu_init>
    imu_probe();
  4003a4:	f000 fa38 	bl	400818 <imu_probe>

    float pitch = 0.0f;
    float roll = 0.0f;
    float yaw = 0.0f;

    config.gyro_calibrate = true;
  4003a8:	2201      	movs	r2, #1
  4003aa:	4bae      	ldr	r3, [pc, #696]	; (400664 <main+0x35c>)
  4003ac:	701a      	strb	r2, [r3, #0]

    float last_gyro_angle_x = 0.0f;
    float last_gyro_angle_y = 0.0f;
    float last_gyro_angle_z = 0.0f;

    if (imu_begin(MPU6050_GYRO_FS_250, MPU6050_ACCEL_FS_2)) {
  4003ae:	4621      	mov	r1, r4
  4003b0:	4620      	mov	r0, r4
  4003b2:	f000 facb 	bl	40094c <imu_begin>
  4003b6:	2800      	cmp	r0, #0
  4003b8:	f000 8166 	beq.w	400688 <main+0x380>
        

    
        imu_calibrate_gyro(GYRO_SAMPLES);
  4003bc:	2032      	movs	r0, #50	; 0x32
  4003be:	f000 fcf5 	bl	400dac <imu_calibrate_gyro>

        imu_set_threshold(0);
  4003c2:	4620      	mov	r0, r4
  4003c4:	f000 fcc0 	bl	400d48 <imu_set_threshold>

        imu_log_settings();
  4003c8:	f000 fc3a 	bl	400c40 <imu_log_settings>
    clock_time_t f_log_timeout = 0;

    const float alpha = 0.96f;
    float last_angle_x = 0.0f;
    float last_angle_y = 0.0f;
    float last_angle_z = 0.0f;
  4003cc:	2300      	movs	r3, #0
  4003ce:	930c      	str	r3, [sp, #48]	; 0x30
    clock_time_t f_timeout = 0;
    clock_time_t f_log_timeout = 0;

    const float alpha = 0.96f;
    float last_angle_x = 0.0f;
    float last_angle_y = 0.0f;
  4003d0:	9307      	str	r3, [sp, #28]
    clock_time_t last_time_read = 0;
    clock_time_t f_timeout = 0;
    clock_time_t f_log_timeout = 0;

    const float alpha = 0.96f;
    float last_angle_x = 0.0f;
  4003d2:	9306      	str	r3, [sp, #24]
    float roll = 0.0f;
    float yaw = 0.0f;

    config.gyro_calibrate = true;

    clock_time_t last_time_read = 0;
  4003d4:	9405      	str	r4, [sp, #20]
  4003d6:	46a1      	mov	r9, r4
  4003d8:	e001      	b.n	4003de <main+0xd6>
  4003da:	f8cd 8014 	str.w	r8, [sp, #20]
        imu_log_settings();


        while(true) {

            clock_time_t t_now = clock_time();
  4003de:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 400680 <main+0x378>
  4003e2:	f8db 8000 	ldr.w	r8, [fp]

            imu_read_normalized_gyro();
  4003e6:	a812      	add	r0, sp, #72	; 0x48
  4003e8:	f000 fb2c 	bl	400a44 <imu_read_normalized_gyro>
            imu_read_normalized_acceleration();
  4003ec:	f000 fc00 	bl	400bf0 <imu_read_normalized_acceleration>



            float gyro_x = (norm_gyro.x_axis*M_PI)/180.0f;
  4003f0:	4c9d      	ldr	r4, [pc, #628]	; (400668 <main+0x360>)
  4003f2:	6820      	ldr	r0, [r4, #0]
  4003f4:	f004 fd06 	bl	404e04 <__aeabi_f2d>
  4003f8:	a389      	add	r3, pc, #548	; (adr r3, 400620 <main+0x318>)
  4003fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4003fe:	f004 fd55 	bl	404eac <__aeabi_dmul>
  400402:	2200      	movs	r2, #0
  400404:	4b99      	ldr	r3, [pc, #612]	; (40066c <main+0x364>)
  400406:	f004 fe7b 	bl	405100 <__aeabi_ddiv>
  40040a:	f005 f827 	bl	40545c <__aeabi_d2f>
  40040e:	900d      	str	r0, [sp, #52]	; 0x34
            float gyro_y = (norm_gyro.y_axis*M_PI)/180.0f;
  400410:	6860      	ldr	r0, [r4, #4]
  400412:	f004 fcf7 	bl	404e04 <__aeabi_f2d>
  400416:	a382      	add	r3, pc, #520	; (adr r3, 400620 <main+0x318>)
  400418:	e9d3 2300 	ldrd	r2, r3, [r3]
  40041c:	f004 fd46 	bl	404eac <__aeabi_dmul>
  400420:	2200      	movs	r2, #0
  400422:	4b92      	ldr	r3, [pc, #584]	; (40066c <main+0x364>)
  400424:	f004 fe6c 	bl	405100 <__aeabi_ddiv>
  400428:	f005 f818 	bl	40545c <__aeabi_d2f>
  40042c:	900e      	str	r0, [sp, #56]	; 0x38
            float gyro_z = (norm_gyro.z_axis*M_PI)/180.0f;
  40042e:	68a0      	ldr	r0, [r4, #8]
  400430:	f004 fce8 	bl	404e04 <__aeabi_f2d>
  400434:	a37a      	add	r3, pc, #488	; (adr r3, 400620 <main+0x318>)
  400436:	e9d3 2300 	ldrd	r2, r3, [r3]
  40043a:	f004 fd37 	bl	404eac <__aeabi_dmul>
  40043e:	2200      	movs	r2, #0
  400440:	4b8a      	ldr	r3, [pc, #552]	; (40066c <main+0x364>)
  400442:	f004 fe5d 	bl	405100 <__aeabi_ddiv>
  400446:	f005 f809 	bl	40545c <__aeabi_d2f>
  40044a:	900f      	str	r0, [sp, #60]	; 0x3c



            float accel_angle_y = atan2(norm_accel.x_axis, sqrt( pow(norm_accel.y_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  40044c:	f8df a234 	ldr.w	sl, [pc, #564]	; 400684 <main+0x37c>
  400450:	f8da 0000 	ldr.w	r0, [sl]
  400454:	f004 fcd6 	bl	404e04 <__aeabi_f2d>
  400458:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40045c:	f8da 0004 	ldr.w	r0, [sl, #4]
  400460:	f004 fcd0 	bl	404e04 <__aeabi_f2d>
  400464:	4606      	mov	r6, r0
  400466:	460f      	mov	r7, r1
  400468:	f8da 0008 	ldr.w	r0, [sl, #8]
  40046c:	f004 fcca 	bl	404e04 <__aeabi_f2d>
  400470:	4604      	mov	r4, r0
  400472:	460d      	mov	r5, r1
  400474:	4632      	mov	r2, r6
  400476:	463b      	mov	r3, r7
  400478:	4630      	mov	r0, r6
  40047a:	4639      	mov	r1, r7
  40047c:	f004 fd16 	bl	404eac <__aeabi_dmul>
  400480:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  400484:	4632      	mov	r2, r6
  400486:	463b      	mov	r3, r7
  400488:	4630      	mov	r0, r6
  40048a:	4639      	mov	r1, r7
  40048c:	f004 fd0e 	bl	404eac <__aeabi_dmul>
  400490:	4606      	mov	r6, r0
  400492:	460f      	mov	r7, r1
  400494:	4622      	mov	r2, r4
  400496:	462b      	mov	r3, r5
  400498:	4620      	mov	r0, r4
  40049a:	4629      	mov	r1, r5
  40049c:	f004 fd06 	bl	404eac <__aeabi_dmul>
  4004a0:	4602      	mov	r2, r0
  4004a2:	460b      	mov	r3, r1
  4004a4:	4630      	mov	r0, r6
  4004a6:	4639      	mov	r1, r7
  4004a8:	f004 fb4e 	bl	404b48 <__adddf3>
  4004ac:	f001 faee 	bl	401a8c <sqrt>
  4004b0:	4602      	mov	r2, r0
  4004b2:	460b      	mov	r3, r1
  4004b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4004b8:	f001 fae6 	bl	401a88 <atan2>
  4004bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
            float accel_angle_x = atan2(norm_accel.y_axis, sqrt( pow(norm_accel.x_axis, 2) + pow(norm_accel.z_axis, 2))) * 180.0f / M_PI;
  4004c0:	f8da 0004 	ldr.w	r0, [sl, #4]
  4004c4:	f004 fc9e 	bl	404e04 <__aeabi_f2d>
  4004c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  4004cc:	f8da 0000 	ldr.w	r0, [sl]
  4004d0:	f004 fc98 	bl	404e04 <__aeabi_f2d>
  4004d4:	4606      	mov	r6, r0
  4004d6:	460f      	mov	r7, r1
  4004d8:	f8da 0008 	ldr.w	r0, [sl, #8]
  4004dc:	f004 fc92 	bl	404e04 <__aeabi_f2d>
  4004e0:	4604      	mov	r4, r0
  4004e2:	460d      	mov	r5, r1
  4004e4:	4632      	mov	r2, r6
  4004e6:	463b      	mov	r3, r7
  4004e8:	4630      	mov	r0, r6
  4004ea:	4639      	mov	r1, r7
  4004ec:	f004 fcde 	bl	404eac <__aeabi_dmul>
  4004f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4004f4:	4632      	mov	r2, r6
  4004f6:	463b      	mov	r3, r7
  4004f8:	4630      	mov	r0, r6
  4004fa:	4639      	mov	r1, r7
  4004fc:	f004 fcd6 	bl	404eac <__aeabi_dmul>
  400500:	4606      	mov	r6, r0
  400502:	460f      	mov	r7, r1
  400504:	4622      	mov	r2, r4
  400506:	462b      	mov	r3, r5
  400508:	4620      	mov	r0, r4
  40050a:	4629      	mov	r1, r5
  40050c:	f004 fcce 	bl	404eac <__aeabi_dmul>
  400510:	4602      	mov	r2, r0
  400512:	460b      	mov	r3, r1
  400514:	4630      	mov	r0, r6
  400516:	4639      	mov	r1, r7
  400518:	f004 fb16 	bl	404b48 <__adddf3>
  40051c:	f001 fab6 	bl	401a8c <sqrt>
  400520:	4602      	mov	r2, r0
  400522:	460b      	mov	r3, r1
  400524:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400528:	f001 faae 	bl	401a88 <atan2>
  40052c:	4604      	mov	r4, r0
  40052e:	460d      	mov	r5, r1



            // Compute filtered angles
            clock_time_t delta_t = (t_now-last_time_read);
            float dt = ((float)delta_t/1000.0f);
  400530:	9b05      	ldr	r3, [sp, #20]
  400532:	ebc3 0008 	rsb	r0, r3, r8
  400536:	f005 f897 	bl	405668 <__aeabi_ui2f>
  40053a:	494d      	ldr	r1, [pc, #308]	; (400670 <main+0x368>)
  40053c:	f005 f9a0 	bl	405880 <__aeabi_fdiv>
  400540:	4606      	mov	r6, r0
            // Compute drifting gyro angles
            float unfiltered_gyro_angle_x = gyro_x * dt + last_gyro_angle_x;
            float unfiltered_gyro_angle_y = gyro_y * dt + last_gyro_angle_y;
            float unfiltered_gyro_angle_z = gyro_z * dt + last_gyro_angle_z;

            float angle_x = alpha * gyro_angle_x + (1.0f - alpha) * accel_angle_x;
  400542:	4601      	mov	r1, r0
  400544:	980d      	ldr	r0, [sp, #52]	; 0x34
  400546:	f005 f8e7 	bl	405718 <__aeabi_fmul>
  40054a:	9906      	ldr	r1, [sp, #24]
  40054c:	f004 ffdc 	bl	405508 <__addsf3>
  400550:	4948      	ldr	r1, [pc, #288]	; (400674 <main+0x36c>)
  400552:	f005 f8e1 	bl	405718 <__aeabi_fmul>
  400556:	4607      	mov	r7, r0
  400558:	2200      	movs	r2, #0
  40055a:	4b44      	ldr	r3, [pc, #272]	; (40066c <main+0x364>)
  40055c:	4620      	mov	r0, r4
  40055e:	4629      	mov	r1, r5
  400560:	f004 fca4 	bl	404eac <__aeabi_dmul>
  400564:	a32e      	add	r3, pc, #184	; (adr r3, 400620 <main+0x318>)
  400566:	e9d3 2300 	ldrd	r2, r3, [r3]
  40056a:	f004 fdc9 	bl	405100 <__aeabi_ddiv>
  40056e:	f004 ff75 	bl	40545c <__aeabi_d2f>
  400572:	4941      	ldr	r1, [pc, #260]	; (400678 <main+0x370>)
  400574:	f005 f8d0 	bl	405718 <__aeabi_fmul>
  400578:	4639      	mov	r1, r7
  40057a:	f004 ffc5 	bl	405508 <__addsf3>
  40057e:	4605      	mov	r5, r0
  400580:	9006      	str	r0, [sp, #24]
            float angle_y = alpha * gyro_angle_y + (1.0f - alpha) * accel_angle_y;
  400582:	4631      	mov	r1, r6
  400584:	980e      	ldr	r0, [sp, #56]	; 0x38
  400586:	f005 f8c7 	bl	405718 <__aeabi_fmul>
  40058a:	9907      	ldr	r1, [sp, #28]
  40058c:	f004 ffbc 	bl	405508 <__addsf3>
  400590:	4938      	ldr	r1, [pc, #224]	; (400674 <main+0x36c>)
  400592:	f005 f8c1 	bl	405718 <__aeabi_fmul>
  400596:	4604      	mov	r4, r0
  400598:	2200      	movs	r2, #0
  40059a:	4b34      	ldr	r3, [pc, #208]	; (40066c <main+0x364>)
  40059c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4005a0:	f004 fc84 	bl	404eac <__aeabi_dmul>
  4005a4:	a31e      	add	r3, pc, #120	; (adr r3, 400620 <main+0x318>)
  4005a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005aa:	f004 fda9 	bl	405100 <__aeabi_ddiv>
  4005ae:	f004 ff55 	bl	40545c <__aeabi_d2f>
  4005b2:	4931      	ldr	r1, [pc, #196]	; (400678 <main+0x370>)
  4005b4:	f005 f8b0 	bl	405718 <__aeabi_fmul>
  4005b8:	4621      	mov	r1, r4
  4005ba:	f004 ffa5 	bl	405508 <__addsf3>
  4005be:	4607      	mov	r7, r0
  4005c0:	9007      	str	r0, [sp, #28]
            float angle_z = alpha * gyro_angle_z + (1.0f - alpha) * accel_angle_z;
  4005c2:	4631      	mov	r1, r6
  4005c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4005c6:	f005 f8a7 	bl	405718 <__aeabi_fmul>
  4005ca:	990c      	ldr	r1, [sp, #48]	; 0x30
  4005cc:	f004 ff9c 	bl	405508 <__addsf3>
  4005d0:	4928      	ldr	r1, [pc, #160]	; (400674 <main+0x36c>)
  4005d2:	f005 f8a1 	bl	405718 <__aeabi_fmul>
  4005d6:	2100      	movs	r1, #0
  4005d8:	f004 ff96 	bl	405508 <__addsf3>
  4005dc:	4606      	mov	r6, r0
  4005de:	900c      	str	r0, [sp, #48]	; 0x30
            last_time_read = t_now;
            last_angle_x = angle_x;
            last_angle_y = angle_y;
            last_angle_z = angle_z;

            if (clock_time() >= f_log_timeout) {
  4005e0:	f8db 3000 	ldr.w	r3, [fp]
  4005e4:	4599      	cmp	r9, r3
  4005e6:	f63f aef8 	bhi.w	4003da <main+0xd2>
                f_log_timeout = clock_time() + 100;
  4005ea:	f8db 3000 	ldr.w	r3, [fp]
  4005ee:	f103 0964 	add.w	r9, r3, #100	; 0x64
                printf("roll/pitch/yaw: %f %f %f\r\n", angle_x, angle_y, angle_z);
  4005f2:	4628      	mov	r0, r5
  4005f4:	f004 fc06 	bl	404e04 <__aeabi_f2d>
  4005f8:	4604      	mov	r4, r0
  4005fa:	460d      	mov	r5, r1
  4005fc:	4630      	mov	r0, r6
  4005fe:	f004 fc01 	bl	404e04 <__aeabi_f2d>
  400602:	e9cd 0102 	strd	r0, r1, [sp, #8]
  400606:	4638      	mov	r0, r7
  400608:	f004 fbfc 	bl	404e04 <__aeabi_f2d>
  40060c:	e9cd 0100 	strd	r0, r1, [sp]
  400610:	4622      	mov	r2, r4
  400612:	462b      	mov	r3, r5
  400614:	4819      	ldr	r0, [pc, #100]	; (40067c <main+0x374>)
  400616:	f002 fa6b 	bl	402af0 <iprintf>
  40061a:	e6de      	b.n	4003da <main+0xd2>
  40061c:	f3af 8000 	nop.w
  400620:	54442d18 	.word	0x54442d18
  400624:	400921fb 	.word	0x400921fb
  400628:	400e0800 	.word	0x400e0800
  40062c:	200002a8 	.word	0x200002a8
  400630:	0040027d 	.word	0x0040027d
  400634:	200002a4 	.word	0x200002a4
  400638:	004001fd 	.word	0x004001fd
  40063c:	200002a0 	.word	0x200002a0
  400640:	07270e00 	.word	0x07270e00
  400644:	20000074 	.word	0x20000074
  400648:	00405b30 	.word	0x00405b30
  40064c:	00405b4c 	.word	0x00405b4c
  400650:	0020b28a 	.word	0x0020b28a
  400654:	00405b48 	.word	0x00405b48
  400658:	e000e010 	.word	0xe000e010
  40065c:	0001d4bf 	.word	0x0001d4bf
  400660:	e000ed00 	.word	0xe000ed00
  400664:	20000310 	.word	0x20000310
  400668:	20000304 	.word	0x20000304
  40066c:	40668000 	.word	0x40668000
  400670:	447a0000 	.word	0x447a0000
  400674:	3f75c28f 	.word	0x3f75c28f
  400678:	3d23d710 	.word	0x3d23d710
  40067c:	00405b50 	.word	0x00405b50
  400680:	20000200 	.word	0x20000200
  400684:	200002d4 	.word	0x200002d4
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400688:	4c09      	ldr	r4, [pc, #36]	; (4006b0 <main+0x3a8>)
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40068a:	4d0a      	ldr	r5, [pc, #40]	; (4006b4 <main+0x3ac>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  40068c:	f44f 0700 	mov.w	r7, #8388608	; 0x800000

    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  400690:	4e09      	ldr	r6, [pc, #36]	; (4006b8 <main+0x3b0>)
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    


    while(1) {

        if(ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
  400694:	f013 0f04 	tst.w	r3, #4
  400698:	d1fb      	bne.n	400692 <main+0x38a>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40069a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40069c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
		port->PIO_CODR = mask;
  4006a0:	bf14      	ite	ne
  4006a2:	636f      	strne	r7, [r5, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4006a4:	632f      	streq	r7, [r5, #48]	; 0x30
            ioport_toggle_pin_level(LED0_GPIO);
            delay_ms(500); 
  4006a6:	4630      	mov	r0, r6
  4006a8:	f005 fcc6 	bl	406038 <__portable_delay_cycles_veneer>
  4006ac:	e7f1      	b.n	400692 <main+0x38a>
  4006ae:	bf00      	nop
  4006b0:	400e0e00 	.word	0x400e0e00
  4006b4:	400e1200 	.word	0x400e1200
  4006b8:	00416513 	.word	0x00416513

004006bc <write_register8>:
int16_t read_register16(uint8_t reg);
uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data);


void write_register8(uint8_t reg, uint8_t value)
{
  4006bc:	b500      	push	{lr}
  4006be:	b089      	sub	sp, #36	; 0x24
  4006c0:	f88d 1007 	strb.w	r1, [sp, #7]
    twi_packet_t packet_tx;

    packet_tx.chip = IMU_ADDRESS;
  4006c4:	2368      	movs	r3, #104	; 0x68
  4006c6:	f88d 301c 	strb.w	r3, [sp, #28]
    packet_tx.addr[0] = reg;
  4006ca:	f88d 000c 	strb.w	r0, [sp, #12]
    packet_tx.addr_length = sizeof(uint8_t);
  4006ce:	2301      	movs	r3, #1
  4006d0:	9304      	str	r3, [sp, #16]
    packet_tx.buffer = &value;
  4006d2:	f10d 0207 	add.w	r2, sp, #7
  4006d6:	9205      	str	r2, [sp, #20]
    packet_tx.length = sizeof(uint8_t);
  4006d8:	9306      	str	r3, [sp, #24]

    uint32_t status = twi_master_write(IMU_TWI, &packet_tx);
  4006da:	a903      	add	r1, sp, #12
  4006dc:	4806      	ldr	r0, [pc, #24]	; (4006f8 <write_register8+0x3c>)
  4006de:	f000 fd8d 	bl	4011fc <twi_master_write>

    // printf("write_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  4006e2:	b910      	cbnz	r0, 4006ea <write_register8+0x2e>
        puts("write_register: success\r\n");
  4006e4:	4805      	ldr	r0, [pc, #20]	; (4006fc <write_register8+0x40>)
  4006e6:	f002 fa75 	bl	402bd4 <puts>
    }

    delay_ms(TWI_WAIT_TIME);
  4006ea:	4805      	ldr	r0, [pc, #20]	; (400700 <write_register8+0x44>)
  4006ec:	f005 fca4 	bl	406038 <__portable_delay_cycles_veneer>
}
  4006f0:	b009      	add	sp, #36	; 0x24
  4006f2:	f85d fb04 	ldr.w	pc, [sp], #4
  4006f6:	bf00      	nop
  4006f8:	40018000 	.word	0x40018000
  4006fc:	00405b6c 	.word	0x00405b6c
  400700:	00014ed3 	.word	0x00014ed3

00400704 <read_register8>:

    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
  400704:	b510      	push	{r4, lr}
  400706:	b086      	sub	sp, #24
    uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(imu_buffer, 0, sizeof(imu_buffer));
  400708:	4b0e      	ldr	r3, [pc, #56]	; (400744 <read_register8+0x40>)
  40070a:	2200      	movs	r2, #0
  40070c:	601a      	str	r2, [r3, #0]
  40070e:	605a      	str	r2, [r3, #4]
  400710:	609a      	str	r2, [r3, #8]
  400712:	60da      	str	r2, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  400714:	2268      	movs	r2, #104	; 0x68
  400716:	f88d 2014 	strb.w	r2, [sp, #20]
    packet_rx.addr[0] = reg;
  40071a:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  40071e:	2201      	movs	r2, #1
  400720:	9202      	str	r2, [sp, #8]
    packet_rx.buffer = &imu_buffer;
  400722:	9303      	str	r3, [sp, #12]
    packet_rx.length = sizeof(uint8_t);
  400724:	9204      	str	r2, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400726:	a901      	add	r1, sp, #4
  400728:	4807      	ldr	r0, [pc, #28]	; (400748 <read_register8+0x44>)
  40072a:	f000 fcff 	bl	40112c <twi_master_read>

    // printf("read_register status: %d\r\n", status);
    
    if (status == TWI_SUCCESS) {
  40072e:	b910      	cbnz	r0, 400736 <read_register8+0x32>
        // puts("read_register: success\r\n");
        value = imu_buffer[0];
  400730:	4b04      	ldr	r3, [pc, #16]	; (400744 <read_register8+0x40>)
  400732:	781c      	ldrb	r4, [r3, #0]
  400734:	e000      	b.n	400738 <read_register8+0x34>
    delay_ms(TWI_WAIT_TIME);
}

uint8_t read_register8(uint8_t reg)
{
    uint8_t value = 0;
  400736:	2400      	movs	r4, #0
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        value = imu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  400738:	4804      	ldr	r0, [pc, #16]	; (40074c <read_register8+0x48>)
  40073a:	f005 fc7d 	bl	406038 <__portable_delay_cycles_veneer>

    return value;
}
  40073e:	4620      	mov	r0, r4
  400740:	b006      	add	sp, #24
  400742:	bd10      	pop	{r4, pc}
  400744:	20000210 	.word	0x20000210
  400748:	40018000 	.word	0x40018000
  40074c:	00014ed3 	.word	0x00014ed3

00400750 <read_bytes>:

    return value;
}

uint8_t read_bytes(uint8_t reg, int8_t length, uint8_t *data)
{
  400750:	b510      	push	{r4, lr}
  400752:	b086      	sub	sp, #24
  400754:	460c      	mov	r4, r1
    // uint8_t value = 0;
    twi_packet_t packet_rx;

    memset(imu_buffer, 0, sizeof(imu_buffer));
  400756:	4b0c      	ldr	r3, [pc, #48]	; (400788 <read_bytes+0x38>)
  400758:	2100      	movs	r1, #0
  40075a:	6019      	str	r1, [r3, #0]
  40075c:	6059      	str	r1, [r3, #4]
  40075e:	6099      	str	r1, [r3, #8]
  400760:	60d9      	str	r1, [r3, #12]

    packet_rx.chip = IMU_ADDRESS;
  400762:	2368      	movs	r3, #104	; 0x68
  400764:	f88d 3014 	strb.w	r3, [sp, #20]
    packet_rx.addr[0] = reg;
  400768:	f88d 0004 	strb.w	r0, [sp, #4]
    packet_rx.addr_length = sizeof(uint8_t);
  40076c:	2301      	movs	r3, #1
  40076e:	9302      	str	r3, [sp, #8]
    packet_rx.buffer = data;
  400770:	9203      	str	r2, [sp, #12]
    packet_rx.length = length;
  400772:	9404      	str	r4, [sp, #16]

    uint32_t status = twi_master_read(IMU_TWI, &packet_rx);
  400774:	a901      	add	r1, sp, #4
  400776:	4805      	ldr	r0, [pc, #20]	; (40078c <read_bytes+0x3c>)
  400778:	f000 fcd8 	bl	40112c <twi_master_read>
    if (status == TWI_SUCCESS) {
        // puts("read_register: success\r\n");
        // value = imu_buffer[0];
    }

    delay_ms(TWI_WAIT_TIME);
  40077c:	4804      	ldr	r0, [pc, #16]	; (400790 <read_bytes+0x40>)
  40077e:	f005 fc5b 	bl	406038 <__portable_delay_cycles_veneer>

    return length;
}
  400782:	b2e0      	uxtb	r0, r4
  400784:	b006      	add	sp, #24
  400786:	bd10      	pop	{r4, pc}
  400788:	20000210 	.word	0x20000210
  40078c:	40018000 	.word	0x40018000
  400790:	00014ed3 	.word	0x00014ed3

00400794 <write_register_bit>:


void write_register_bit(uint8_t reg, uint8_t pos, bool state)
{
  400794:	b570      	push	{r4, r5, r6, lr}
  400796:	4604      	mov	r4, r0
  400798:	460d      	mov	r5, r1
  40079a:	4616      	mov	r6, r2
    uint8_t value;
    value = read_register8(reg);
  40079c:	f7ff ffb2 	bl	400704 <read_register8>

    if (state) {
  4007a0:	b126      	cbz	r6, 4007ac <write_register_bit+0x18>
        value |= (1 << pos);
  4007a2:	2101      	movs	r1, #1
  4007a4:	40a9      	lsls	r1, r5
  4007a6:	4301      	orrs	r1, r0
  4007a8:	b2c9      	uxtb	r1, r1
  4007aa:	e004      	b.n	4007b6 <write_register_bit+0x22>
    } else {
        value &= ~(1 << pos);
  4007ac:	2101      	movs	r1, #1
  4007ae:	40a9      	lsls	r1, r5
  4007b0:	ea20 0101 	bic.w	r1, r0, r1
  4007b4:	b2c9      	uxtb	r1, r1
    }

    write_register8(reg, value);
  4007b6:	4620      	mov	r0, r4
  4007b8:	f7ff ff80 	bl	4006bc <write_register8>
  4007bc:	bd70      	pop	{r4, r5, r6, pc}
  4007be:	bf00      	nop

004007c0 <read_register_bit>:
}

bool read_register_bit(uint8_t reg, uint8_t pos)
{
  4007c0:	b510      	push	{r4, lr}
  4007c2:	460c      	mov	r4, r1
    uint8_t value;
    value = read_register8(reg);
  4007c4:	f7ff ff9e 	bl	400704 <read_register8>
    return ((value >> pos) & 1);
  4007c8:	4120      	asrs	r0, r4
}
  4007ca:	f000 0001 	and.w	r0, r0, #1
  4007ce:	bd10      	pop	{r4, pc}

004007d0 <imu_init>:

void imu_init(void)
{
  4007d0:	b500      	push	{lr}
  4007d2:	b085      	sub	sp, #20
    twi_options_t opt;

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  4007d4:	4b0a      	ldr	r3, [pc, #40]	; (400800 <imu_init+0x30>)
  4007d6:	9301      	str	r3, [sp, #4]
    opt.speed      = TWI_CLK;
  4007d8:	4b0a      	ldr	r3, [pc, #40]	; (400804 <imu_init+0x34>)
  4007da:	9302      	str	r3, [sp, #8]

    if (twi_master_init(IMU_TWI, &opt) != TWI_SUCCESS) {
  4007dc:	a901      	add	r1, sp, #4
  4007de:	480a      	ldr	r0, [pc, #40]	; (400808 <imu_init+0x38>)
  4007e0:	f000 fc74 	bl	4010cc <twi_master_init>
  4007e4:	b118      	cbz	r0, 4007ee <imu_init+0x1e>
        puts("twi_master_init: failed\r\n");
  4007e6:	4809      	ldr	r0, [pc, #36]	; (40080c <imu_init+0x3c>)
  4007e8:	f002 f9f4 	bl	402bd4 <puts>
  4007ec:	e002      	b.n	4007f4 <imu_init+0x24>
        
    } else {
        puts("twi_master_init: success\r\n");
  4007ee:	4808      	ldr	r0, [pc, #32]	; (400810 <imu_init+0x40>)
  4007f0:	f002 f9f0 	bl	402bd4 <puts>
    }
    // Give I2C time to settle
    delay_ms(TWI_WAIT_TIME);
  4007f4:	4807      	ldr	r0, [pc, #28]	; (400814 <imu_init+0x44>)
  4007f6:	f005 fc1f 	bl	406038 <__portable_delay_cycles_veneer>
}
  4007fa:	b005      	add	sp, #20
  4007fc:	f85d fb04 	ldr.w	pc, [sp], #4
  400800:	07270e00 	.word	0x07270e00
  400804:	00061a80 	.word	0x00061a80
  400808:	40018000 	.word	0x40018000
  40080c:	00405b88 	.word	0x00405b88
  400810:	00405ba4 	.word	0x00405ba4
  400814:	00014ed3 	.word	0x00014ed3

00400818 <imu_probe>:

void imu_probe(void)
{
  400818:	b508      	push	{r3, lr}
    if (twi_probe(IMU_TWI, IMU_ADDRESS) != TWI_SUCCESS) {
  40081a:	2168      	movs	r1, #104	; 0x68
  40081c:	4805      	ldr	r0, [pc, #20]	; (400834 <imu_probe+0x1c>)
  40081e:	f000 fd2f 	bl	401280 <twi_probe>
  400822:	b118      	cbz	r0, 40082c <imu_probe+0x14>
        puts("twi_probe: failed\r\n");
  400824:	4804      	ldr	r0, [pc, #16]	; (400838 <imu_probe+0x20>)
  400826:	f002 f9d5 	bl	402bd4 <puts>
  40082a:	bd08      	pop	{r3, pc}
        
    } else {
        puts("twi_probe: success\r\n");
  40082c:	4803      	ldr	r0, [pc, #12]	; (40083c <imu_probe+0x24>)
  40082e:	f002 f9d1 	bl	402bd4 <puts>
  400832:	bd08      	pop	{r3, pc}
  400834:	40018000 	.word	0x40018000
  400838:	00405bc0 	.word	0x00405bc0
  40083c:	00405bd4 	.word	0x00405bd4

00400840 <imu_who_am_i>:

    return true;
}

uint8_t imu_who_am_i(void)
{
  400840:	b508      	push	{r3, lr}
    uint8_t value = read_register8(MPU6050_RA_WHO_AM_I);
  400842:	2075      	movs	r0, #117	; 0x75
  400844:	f7ff ff5e 	bl	400704 <read_register8>
    if (value == 0x68) {
        // puts("who_am_i: success\r\n");
    }

    return value;
}
  400848:	bd08      	pop	{r3, pc}
  40084a:	bf00      	nop

0040084c <imu_set_clock_source>:
    T = read_register16(MPU6050_RA_TEMP_OUT_H);
    return T;
}

void imu_set_clock_source(uint8_t source)
{
  40084c:	b510      	push	{r4, lr}
  40084e:	4604      	mov	r4, r0
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400850:	206b      	movs	r0, #107	; 0x6b
  400852:	f7ff ff57 	bl	400704 <read_register8>
    value &= 0b11111000; // mask
  400856:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
    value |= source;

    write_register8(MPU6050_RA_PWR_MGMT_1, value);
  40085a:	4321      	orrs	r1, r4
  40085c:	206b      	movs	r0, #107	; 0x6b
  40085e:	f7ff ff2d 	bl	4006bc <write_register8>
  400862:	bd10      	pop	{r4, pc}

00400864 <imu_get_clock_source>:
}

uint8_t imu_get_clock_source(void)
{
  400864:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_PWR_MGMT_1);
  400866:	206b      	movs	r0, #107	; 0x6b
  400868:	f7ff ff4c 	bl	400704 <read_register8>
    value &= 0b00000111; // mask

    return (uint8_t)value;
}
  40086c:	f000 0007 	and.w	r0, r0, #7
  400870:	bd08      	pop	{r3, pc}
  400872:	bf00      	nop

00400874 <imu_set_gyro_scale>:

void imu_set_gyro_scale(uint8_t scale)
{
  400874:	b510      	push	{r4, lr}
  400876:	4604      	mov	r4, r0
    uint8_t value;

    switch (scale) {
  400878:	2803      	cmp	r0, #3
  40087a:	d812      	bhi.n	4008a2 <imu_set_gyro_scale+0x2e>
  40087c:	e8df f000 	tbb	[pc, r0]
  400880:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
            dps_per_digit = .007633f;
  400884:	4a0d      	ldr	r2, [pc, #52]	; (4008bc <imu_set_gyro_scale+0x48>)
  400886:	4b0e      	ldr	r3, [pc, #56]	; (4008c0 <imu_set_gyro_scale+0x4c>)
  400888:	601a      	str	r2, [r3, #0]
            break;
  40088a:	e00a      	b.n	4008a2 <imu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_500:
            dps_per_digit = .015267f;
  40088c:	4a0d      	ldr	r2, [pc, #52]	; (4008c4 <imu_set_gyro_scale+0x50>)
  40088e:	4b0c      	ldr	r3, [pc, #48]	; (4008c0 <imu_set_gyro_scale+0x4c>)
  400890:	601a      	str	r2, [r3, #0]
            break;
  400892:	e006      	b.n	4008a2 <imu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_1000:
            dps_per_digit = .030487f;
  400894:	4a0c      	ldr	r2, [pc, #48]	; (4008c8 <imu_set_gyro_scale+0x54>)
  400896:	4b0a      	ldr	r3, [pc, #40]	; (4008c0 <imu_set_gyro_scale+0x4c>)
  400898:	601a      	str	r2, [r3, #0]
            break;
  40089a:	e002      	b.n	4008a2 <imu_set_gyro_scale+0x2e>
        case MPU6050_GYRO_FS_2000:
            dps_per_digit = .060975f;
  40089c:	4a0b      	ldr	r2, [pc, #44]	; (4008cc <imu_set_gyro_scale+0x58>)
  40089e:	4b08      	ldr	r3, [pc, #32]	; (4008c0 <imu_set_gyro_scale+0x4c>)
  4008a0:	601a      	str	r2, [r3, #0]
            break;
    }

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  4008a2:	201b      	movs	r0, #27
  4008a4:	f7ff ff2e 	bl	400704 <read_register8>
    value &= 0b11100111; // mask
    value |= (scale << 3);
  4008a8:	f020 0018 	bic.w	r0, r0, #24
  4008ac:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_GYRO_CONFIG, value);
  4008b0:	b2c9      	uxtb	r1, r1
  4008b2:	201b      	movs	r0, #27
  4008b4:	f7ff ff02 	bl	4006bc <write_register8>
  4008b8:	bd10      	pop	{r4, pc}
  4008ba:	bf00      	nop
  4008bc:	3bfa1e3f 	.word	0x3bfa1e3f
  4008c0:	20000204 	.word	0x20000204
  4008c4:	3c7a2270 	.word	0x3c7a2270
  4008c8:	3cf9bfdf 	.word	0x3cf9bfdf
  4008cc:	3d79c0ec 	.word	0x3d79c0ec

004008d0 <imu_get_gyro_scale>:
}

uint8_t imu_get_gyro_scale(void)
{
  4008d0:	b508      	push	{r3, lr}
    uint8_t value;

    value = read_register8(MPU6050_RA_GYRO_CONFIG);
  4008d2:	201b      	movs	r0, #27
  4008d4:	f7ff ff16 	bl	400704 <read_register8>
    value &= 0b00011000; // mask
    value >>= 3;

    return (uint8_t)value;
}
  4008d8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  4008dc:	bd08      	pop	{r3, pc}
  4008de:	bf00      	nop

004008e0 <imu_set_accel_range>:

void imu_set_accel_range(uint8_t range)
{
  4008e0:	b510      	push	{r4, lr}
  4008e2:	4604      	mov	r4, r0
    uint8_t value;

    switch (range) {
  4008e4:	2803      	cmp	r0, #3
  4008e6:	d812      	bhi.n	40090e <imu_set_accel_range+0x2e>
  4008e8:	e8df f000 	tbb	[pc, r0]
  4008ec:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_ACCEL_FS_2:
        	range_per_digit = .000061f;
  4008f0:	4a0d      	ldr	r2, [pc, #52]	; (400928 <imu_set_accel_range+0x48>)
  4008f2:	4b0e      	ldr	r3, [pc, #56]	; (40092c <imu_set_accel_range+0x4c>)
  4008f4:	601a      	str	r2, [r3, #0]
            break;
  4008f6:	e00a      	b.n	40090e <imu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_4:
        	range_per_digit = .000122f;
  4008f8:	4a0d      	ldr	r2, [pc, #52]	; (400930 <imu_set_accel_range+0x50>)
  4008fa:	4b0c      	ldr	r3, [pc, #48]	; (40092c <imu_set_accel_range+0x4c>)
  4008fc:	601a      	str	r2, [r3, #0]
            break;   
  4008fe:	e006      	b.n	40090e <imu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_8:
        	range_per_digit = .000244f;
  400900:	4a0c      	ldr	r2, [pc, #48]	; (400934 <imu_set_accel_range+0x54>)
  400902:	4b0a      	ldr	r3, [pc, #40]	; (40092c <imu_set_accel_range+0x4c>)
  400904:	601a      	str	r2, [r3, #0]
            break;   
  400906:	e002      	b.n	40090e <imu_set_accel_range+0x2e>
        case MPU6050_ACCEL_FS_16:
        	range_per_digit = .0004882f;
  400908:	4a0b      	ldr	r2, [pc, #44]	; (400938 <imu_set_accel_range+0x58>)
  40090a:	4b08      	ldr	r3, [pc, #32]	; (40092c <imu_set_accel_range+0x4c>)
  40090c:	601a      	str	r2, [r3, #0]
	        break;                                                           
    }

    value = read_register8(MPU6050_RA_ACCEL_CONFIG);
  40090e:	201c      	movs	r0, #28
  400910:	f7ff fef8 	bl	400704 <read_register8>
    value &= 0b11100111; // mask
    value |= (range << 3);
  400914:	f020 0018 	bic.w	r0, r0, #24
  400918:	ea40 01c4 	orr.w	r1, r0, r4, lsl #3

    write_register8(MPU6050_RA_ACCEL_CONFIG, value);
  40091c:	b2c9      	uxtb	r1, r1
  40091e:	201c      	movs	r0, #28
  400920:	f7ff fecc 	bl	4006bc <write_register8>
  400924:	bd10      	pop	{r4, pc}
  400926:	bf00      	nop
  400928:	387fda40 	.word	0x387fda40
  40092c:	200002c4 	.word	0x200002c4
  400930:	38ffda40 	.word	0x38ffda40
  400934:	397fda40 	.word	0x397fda40
  400938:	39fff518 	.word	0x39fff518

0040093c <imu_set_sleep_enabled>:

    return (uint8_t)value;
}

void imu_set_sleep_enabled(bool state)
{
  40093c:	b508      	push	{r3, lr}
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
  40093e:	4602      	mov	r2, r0
  400940:	2106      	movs	r1, #6
  400942:	206b      	movs	r0, #107	; 0x6b
  400944:	f7ff ff26 	bl	400794 <write_register_bit>
  400948:	bd08      	pop	{r3, pc}
  40094a:	bf00      	nop

0040094c <imu_begin>:
        puts("twi_probe: success\r\n");
    }
}

bool imu_begin(uint8_t scale, uint8_t range)
{
  40094c:	b538      	push	{r3, r4, r5, lr}
  40094e:	4605      	mov	r5, r0
  400950:	460c      	mov	r4, r1
    // Reset calibration values
    delta_gyro.x_axis = 0;
  400952:	4a11      	ldr	r2, [pc, #68]	; (400998 <imu_begin+0x4c>)
  400954:	2300      	movs	r3, #0
  400956:	6013      	str	r3, [r2, #0]
    delta_gyro.y_axis = 0;
  400958:	6053      	str	r3, [r2, #4]
    delta_gyro.z_axis = 0;
  40095a:	6093      	str	r3, [r2, #8]
    use_calibrate = false;
  40095c:	2100      	movs	r1, #0
  40095e:	4a0f      	ldr	r2, [pc, #60]	; (40099c <imu_begin+0x50>)
  400960:	7011      	strb	r1, [r2, #0]

    // Reset threshold values
    threshold_gyro.x_axis = 0;
  400962:	4a0f      	ldr	r2, [pc, #60]	; (4009a0 <imu_begin+0x54>)
  400964:	6013      	str	r3, [r2, #0]
    threshold_gyro.y_axis = 0;
  400966:	6053      	str	r3, [r2, #4]
    threshold_gyro.z_axis = 0;
  400968:	6093      	str	r3, [r2, #8]
    actual_threshold = 0;
  40096a:	4a0e      	ldr	r2, [pc, #56]	; (4009a4 <imu_begin+0x58>)
  40096c:	6013      	str	r3, [r2, #0]

    if (imu_who_am_i() != 0x68) {
  40096e:	f7ff ff67 	bl	400840 <imu_who_am_i>
  400972:	2868      	cmp	r0, #104	; 0x68
  400974:	d10d      	bne.n	400992 <imu_begin+0x46>
        return false;
    }

    // Set clock source
    imu_set_clock_source(MPU6050_CLOCK_PLL_XGYRO);
  400976:	2001      	movs	r0, #1
  400978:	f7ff ff68 	bl	40084c <imu_set_clock_source>

    // Set scale and range
    imu_set_gyro_scale(scale);
  40097c:	4628      	mov	r0, r5
  40097e:	f7ff ff79 	bl	400874 <imu_set_gyro_scale>
    imu_set_accel_range(range);
  400982:	4620      	mov	r0, r4
  400984:	f7ff ffac 	bl	4008e0 <imu_set_accel_range>

    // Disable sleep mode
    imu_set_sleep_enabled(false);
  400988:	2000      	movs	r0, #0
  40098a:	f7ff ffd7 	bl	40093c <imu_set_sleep_enabled>

    return true;
  40098e:	2001      	movs	r0, #1
  400990:	bd38      	pop	{r3, r4, r5, pc}
    threshold_gyro.y_axis = 0;
    threshold_gyro.z_axis = 0;
    actual_threshold = 0;

    if (imu_who_am_i() != 0x68) {
        return false;
  400992:	2000      	movs	r0, #0

    // Disable sleep mode
    imu_set_sleep_enabled(false);

    return true;
}
  400994:	bd38      	pop	{r3, r4, r5, pc}
  400996:	bf00      	nop
  400998:	200002f8 	.word	0x200002f8
  40099c:	20000208 	.word	0x20000208
  4009a0:	200002c8 	.word	0x200002c8
  4009a4:	2000020c 	.word	0x2000020c

004009a8 <imu_get_sleep_enabled>:
{
    write_register_bit(MPU6050_RA_PWR_MGMT_1, 6, state);
}

bool imu_get_sleep_enabled(void)
{
  4009a8:	b508      	push	{r3, lr}
    return read_register_bit(MPU6050_RA_PWR_MGMT_1, 6);
  4009aa:	2106      	movs	r1, #6
  4009ac:	206b      	movs	r0, #107	; 0x6b
  4009ae:	f7ff ff07 	bl	4007c0 <read_register_bit>
}
  4009b2:	bd08      	pop	{r3, pc}

004009b4 <imu_read_gyro>:
    a->is_pos_activity_on_z = ((data >> 2) & 1);

}

void imu_read_gyro(int16_t *x, int16_t *y, int16_t *z)
{
  4009b4:	b570      	push	{r4, r5, r6, lr}
  4009b6:	b082      	sub	sp, #8
  4009b8:	4606      	mov	r6, r0
  4009ba:	460d      	mov	r5, r1
  4009bc:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  4009be:	2300      	movs	r3, #0
  4009c0:	9300      	str	r3, [sp, #0]
  4009c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_GYRO_XOUT_H, 6, i2c_buffer);
  4009c6:	466a      	mov	r2, sp
  4009c8:	2106      	movs	r1, #6
  4009ca:	2043      	movs	r0, #67	; 0x43
  4009cc:	f7ff fec0 	bl	400750 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  4009d0:	f89d 2000 	ldrb.w	r2, [sp]
  4009d4:	f89d 3001 	ldrb.w	r3, [sp, #1]
  4009d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4009dc:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  4009de:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4009e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4009e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4009ea:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  4009ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4009f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4009f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4009f8:	8023      	strh	r3, [r4, #0]

}
  4009fa:	b002      	add	sp, #8
  4009fc:	bd70      	pop	{r4, r5, r6, pc}
  4009fe:	bf00      	nop

00400a00 <imu_read_raw_gyro>:

void imu_read_raw_gyro(void)
{
  400a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    imu_read_gyro(&gx, &gy, &gz);
  400a02:	4d0c      	ldr	r5, [pc, #48]	; (400a34 <imu_read_raw_gyro+0x34>)
  400a04:	4e0c      	ldr	r6, [pc, #48]	; (400a38 <imu_read_raw_gyro+0x38>)
  400a06:	4f0d      	ldr	r7, [pc, #52]	; (400a3c <imu_read_raw_gyro+0x3c>)
  400a08:	462a      	mov	r2, r5
  400a0a:	4631      	mov	r1, r6
  400a0c:	4638      	mov	r0, r7
  400a0e:	f7ff ffd1 	bl	4009b4 <imu_read_gyro>
    raw_gyro.x_axis = (float)gx;
  400a12:	4c0b      	ldr	r4, [pc, #44]	; (400a40 <imu_read_raw_gyro+0x40>)
  400a14:	f9b7 0000 	ldrsh.w	r0, [r7]
  400a18:	f004 fe2a 	bl	405670 <__aeabi_i2f>
  400a1c:	6020      	str	r0, [r4, #0]
    raw_gyro.y_axis = (float)gy;
  400a1e:	f9b6 0000 	ldrsh.w	r0, [r6]
  400a22:	f004 fe25 	bl	405670 <__aeabi_i2f>
  400a26:	6060      	str	r0, [r4, #4]
    raw_gyro.z_axis = (float)gz;
  400a28:	f9b5 0000 	ldrsh.w	r0, [r5]
  400a2c:	f004 fe20 	bl	405670 <__aeabi_i2f>
  400a30:	60a0      	str	r0, [r4, #8]
  400a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a34:	20000324 	.word	0x20000324
  400a38:	2000031e 	.word	0x2000031e
  400a3c:	20000326 	.word	0x20000326
  400a40:	200002b8 	.word	0x200002b8

00400a44 <imu_read_normalized_gyro>:

}

t_fp_vector imu_read_normalized_gyro(void)
{
  400a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a48:	4604      	mov	r4, r0
    imu_read_raw_gyro();
  400a4a:	f7ff ffd9 	bl	400a00 <imu_read_raw_gyro>

    if (use_calibrate) {
  400a4e:	4b3d      	ldr	r3, [pc, #244]	; (400b44 <imu_read_normalized_gyro+0x100>)
  400a50:	781b      	ldrb	r3, [r3, #0]
  400a52:	b30b      	cbz	r3, 400a98 <imu_read_normalized_gyro+0x54>
        norm_gyro.x_axis = (raw_gyro.x_axis - delta_gyro.x_axis) * dps_per_digit;
  400a54:	4b3c      	ldr	r3, [pc, #240]	; (400b48 <imu_read_normalized_gyro+0x104>)
  400a56:	681e      	ldr	r6, [r3, #0]
  400a58:	4d3c      	ldr	r5, [pc, #240]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400a5a:	4f3d      	ldr	r7, [pc, #244]	; (400b50 <imu_read_normalized_gyro+0x10c>)
  400a5c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 400b5c <imu_read_normalized_gyro+0x118>
  400a60:	f8d8 1000 	ldr.w	r1, [r8]
  400a64:	6838      	ldr	r0, [r7, #0]
  400a66:	f004 fd4d 	bl	405504 <__aeabi_fsub>
  400a6a:	4631      	mov	r1, r6
  400a6c:	f004 fe54 	bl	405718 <__aeabi_fmul>
  400a70:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = (raw_gyro.y_axis - delta_gyro.y_axis) * dps_per_digit;
  400a72:	f8d8 1004 	ldr.w	r1, [r8, #4]
  400a76:	6878      	ldr	r0, [r7, #4]
  400a78:	f004 fd44 	bl	405504 <__aeabi_fsub>
  400a7c:	4631      	mov	r1, r6
  400a7e:	f004 fe4b 	bl	405718 <__aeabi_fmul>
  400a82:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = (raw_gyro.z_axis - delta_gyro.z_axis) * dps_per_digit;
  400a84:	f8d8 1008 	ldr.w	r1, [r8, #8]
  400a88:	68b8      	ldr	r0, [r7, #8]
  400a8a:	f004 fd3b 	bl	405504 <__aeabi_fsub>
  400a8e:	4631      	mov	r1, r6
  400a90:	f004 fe42 	bl	405718 <__aeabi_fmul>
  400a94:	60a8      	str	r0, [r5, #8]
  400a96:	e012      	b.n	400abe <imu_read_normalized_gyro+0x7a>
    } else {
        norm_gyro.x_axis = raw_gyro.x_axis  * dps_per_digit;
  400a98:	4b2b      	ldr	r3, [pc, #172]	; (400b48 <imu_read_normalized_gyro+0x104>)
  400a9a:	681f      	ldr	r7, [r3, #0]
  400a9c:	4d2b      	ldr	r5, [pc, #172]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400a9e:	4e2c      	ldr	r6, [pc, #176]	; (400b50 <imu_read_normalized_gyro+0x10c>)
  400aa0:	4639      	mov	r1, r7
  400aa2:	6830      	ldr	r0, [r6, #0]
  400aa4:	f004 fe38 	bl	405718 <__aeabi_fmul>
  400aa8:	6028      	str	r0, [r5, #0]
        norm_gyro.y_axis = raw_gyro.y_axis  * dps_per_digit;
  400aaa:	4639      	mov	r1, r7
  400aac:	6870      	ldr	r0, [r6, #4]
  400aae:	f004 fe33 	bl	405718 <__aeabi_fmul>
  400ab2:	6068      	str	r0, [r5, #4]
        norm_gyro.z_axis = raw_gyro.z_axis  * dps_per_digit;
  400ab4:	4639      	mov	r1, r7
  400ab6:	68b0      	ldr	r0, [r6, #8]
  400ab8:	f004 fe2e 	bl	405718 <__aeabi_fmul>
  400abc:	60a8      	str	r0, [r5, #8]
    }

    if (actual_threshold) {
  400abe:	2100      	movs	r1, #0
  400ac0:	4b24      	ldr	r3, [pc, #144]	; (400b54 <imu_read_normalized_gyro+0x110>)
  400ac2:	6818      	ldr	r0, [r3, #0]
  400ac4:	f004 ffbc 	bl	405a40 <__aeabi_fcmpeq>
  400ac8:	2800      	cmp	r0, #0
  400aca:	d132      	bne.n	400b32 <imu_read_normalized_gyro+0xee>
        if (abs(norm_gyro.x_axis) < threshold_gyro.x_axis) norm_gyro.x_axis = 0;
  400acc:	4b1f      	ldr	r3, [pc, #124]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400ace:	6818      	ldr	r0, [r3, #0]
  400ad0:	f004 ffe8 	bl	405aa4 <__aeabi_f2iz>
  400ad4:	2800      	cmp	r0, #0
  400ad6:	bfb8      	it	lt
  400ad8:	4240      	neglt	r0, r0
  400ada:	f004 fdc9 	bl	405670 <__aeabi_i2f>
  400ade:	4b1e      	ldr	r3, [pc, #120]	; (400b58 <imu_read_normalized_gyro+0x114>)
  400ae0:	6819      	ldr	r1, [r3, #0]
  400ae2:	f004 ffb7 	bl	405a54 <__aeabi_fcmplt>
  400ae6:	b110      	cbz	r0, 400aee <imu_read_normalized_gyro+0xaa>
  400ae8:	2200      	movs	r2, #0
  400aea:	4b18      	ldr	r3, [pc, #96]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400aec:	601a      	str	r2, [r3, #0]
        if (abs(norm_gyro.y_axis) < threshold_gyro.y_axis) norm_gyro.y_axis = 0;
  400aee:	4b17      	ldr	r3, [pc, #92]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400af0:	6858      	ldr	r0, [r3, #4]
  400af2:	f004 ffd7 	bl	405aa4 <__aeabi_f2iz>
  400af6:	2800      	cmp	r0, #0
  400af8:	bfb8      	it	lt
  400afa:	4240      	neglt	r0, r0
  400afc:	f004 fdb8 	bl	405670 <__aeabi_i2f>
  400b00:	4b15      	ldr	r3, [pc, #84]	; (400b58 <imu_read_normalized_gyro+0x114>)
  400b02:	6859      	ldr	r1, [r3, #4]
  400b04:	f004 ffa6 	bl	405a54 <__aeabi_fcmplt>
  400b08:	b110      	cbz	r0, 400b10 <imu_read_normalized_gyro+0xcc>
  400b0a:	2200      	movs	r2, #0
  400b0c:	4b0f      	ldr	r3, [pc, #60]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400b0e:	605a      	str	r2, [r3, #4]
        if (abs(norm_gyro.z_axis) < threshold_gyro.z_axis) norm_gyro.z_axis = 0;
  400b10:	4b0e      	ldr	r3, [pc, #56]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400b12:	6898      	ldr	r0, [r3, #8]
  400b14:	f004 ffc6 	bl	405aa4 <__aeabi_f2iz>
  400b18:	2800      	cmp	r0, #0
  400b1a:	bfb8      	it	lt
  400b1c:	4240      	neglt	r0, r0
  400b1e:	f004 fda7 	bl	405670 <__aeabi_i2f>
  400b22:	4b0d      	ldr	r3, [pc, #52]	; (400b58 <imu_read_normalized_gyro+0x114>)
  400b24:	6899      	ldr	r1, [r3, #8]
  400b26:	f004 ff95 	bl	405a54 <__aeabi_fcmplt>
  400b2a:	b110      	cbz	r0, 400b32 <imu_read_normalized_gyro+0xee>
  400b2c:	2200      	movs	r2, #0
  400b2e:	4b07      	ldr	r3, [pc, #28]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400b30:	609a      	str	r2, [r3, #8]
    }

    return norm_gyro;
  400b32:	4b06      	ldr	r3, [pc, #24]	; (400b4c <imu_read_normalized_gyro+0x108>)
  400b34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400b38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
  400b3c:	4620      	mov	r0, r4
  400b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b42:	bf00      	nop
  400b44:	20000208 	.word	0x20000208
  400b48:	20000204 	.word	0x20000204
  400b4c:	20000304 	.word	0x20000304
  400b50:	200002b8 	.word	0x200002b8
  400b54:	2000020c 	.word	0x2000020c
  400b58:	200002c8 	.word	0x200002c8
  400b5c:	200002f8 	.word	0x200002f8

00400b60 <imu_read_acceleration>:



void imu_read_acceleration(int16_t *x, int16_t *y, int16_t *z)
{
  400b60:	b570      	push	{r4, r5, r6, lr}
  400b62:	b082      	sub	sp, #8
  400b64:	4606      	mov	r6, r0
  400b66:	460d      	mov	r5, r1
  400b68:	4614      	mov	r4, r2
    uint8_t i2c_buffer[6];
    memset(i2c_buffer, 0, sizeof(i2c_buffer));
  400b6a:	2300      	movs	r3, #0
  400b6c:	9300      	str	r3, [sp, #0]
  400b6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    
    read_bytes(MPU6050_RA_ACCEL_XOUT_H, 6, i2c_buffer);
  400b72:	466a      	mov	r2, sp
  400b74:	2106      	movs	r1, #6
  400b76:	203b      	movs	r0, #59	; 0x3b
  400b78:	f7ff fdea 	bl	400750 <read_bytes>

    *x = (((int16_t)i2c_buffer[0]) << 8) | i2c_buffer[1];
  400b7c:	f89d 2000 	ldrb.w	r2, [sp]
  400b80:	f89d 3001 	ldrb.w	r3, [sp, #1]
  400b84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400b88:	8033      	strh	r3, [r6, #0]
    *y = (((int16_t)i2c_buffer[2]) << 8) | i2c_buffer[3];
  400b8a:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400b8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400b92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400b96:	802b      	strh	r3, [r5, #0]
    *z = (((int16_t)i2c_buffer[4]) << 8) | i2c_buffer[5];
  400b98:	f89d 2004 	ldrb.w	r2, [sp, #4]
  400b9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400ba0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400ba4:	8023      	strh	r3, [r4, #0]
}
  400ba6:	b002      	add	sp, #8
  400ba8:	bd70      	pop	{r4, r5, r6, pc}
  400baa:	bf00      	nop

00400bac <imu_read_raw_acceleration>:

void imu_read_raw_acceleration(void)
{
  400bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    imu_read_acceleration(&ax, &ay, &az);
  400bae:	4d0c      	ldr	r5, [pc, #48]	; (400be0 <imu_read_raw_acceleration+0x34>)
  400bb0:	4e0c      	ldr	r6, [pc, #48]	; (400be4 <imu_read_raw_acceleration+0x38>)
  400bb2:	4f0d      	ldr	r7, [pc, #52]	; (400be8 <imu_read_raw_acceleration+0x3c>)
  400bb4:	462a      	mov	r2, r5
  400bb6:	4631      	mov	r1, r6
  400bb8:	4638      	mov	r0, r7
  400bba:	f7ff ffd1 	bl	400b60 <imu_read_acceleration>
    raw_accel.x_axis = (float)ax;
  400bbe:	4c0b      	ldr	r4, [pc, #44]	; (400bec <imu_read_raw_acceleration+0x40>)
  400bc0:	f9b7 0000 	ldrsh.w	r0, [r7]
  400bc4:	f004 fd54 	bl	405670 <__aeabi_i2f>
  400bc8:	6020      	str	r0, [r4, #0]
    raw_accel.y_axis = (float)ay;
  400bca:	f9b6 0000 	ldrsh.w	r0, [r6]
  400bce:	f004 fd4f 	bl	405670 <__aeabi_i2f>
  400bd2:	6060      	str	r0, [r4, #4]
    raw_accel.z_axis = (float)az;
  400bd4:	f9b5 0000 	ldrsh.w	r0, [r5]
  400bd8:	f004 fd4a 	bl	405670 <__aeabi_i2f>
  400bdc:	60a0      	str	r0, [r4, #8]
  400bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400be0:	20000320 	.word	0x20000320
  400be4:	20000328 	.word	0x20000328
  400be8:	20000322 	.word	0x20000322
  400bec:	200002ec 	.word	0x200002ec

00400bf0 <imu_read_normalized_acceleration>:
}

void imu_read_normalized_acceleration(void)
{
  400bf0:	b570      	push	{r4, r5, r6, lr}
    imu_read_raw_acceleration();
  400bf2:	f7ff ffdb 	bl	400bac <imu_read_raw_acceleration>

    norm_accel.x_axis = raw_accel.x_axis * range_per_digit * 9.80665f;
  400bf6:	4b0e      	ldr	r3, [pc, #56]	; (400c30 <imu_read_normalized_acceleration+0x40>)
  400bf8:	681d      	ldr	r5, [r3, #0]
  400bfa:	4c0e      	ldr	r4, [pc, #56]	; (400c34 <imu_read_normalized_acceleration+0x44>)
  400bfc:	4e0e      	ldr	r6, [pc, #56]	; (400c38 <imu_read_normalized_acceleration+0x48>)
  400bfe:	6831      	ldr	r1, [r6, #0]
  400c00:	4628      	mov	r0, r5
  400c02:	f004 fd89 	bl	405718 <__aeabi_fmul>
  400c06:	490d      	ldr	r1, [pc, #52]	; (400c3c <imu_read_normalized_acceleration+0x4c>)
  400c08:	f004 fd86 	bl	405718 <__aeabi_fmul>
  400c0c:	6020      	str	r0, [r4, #0]
    norm_accel.y_axis = raw_accel.y_axis * range_per_digit * 9.80665f;
  400c0e:	6871      	ldr	r1, [r6, #4]
  400c10:	4628      	mov	r0, r5
  400c12:	f004 fd81 	bl	405718 <__aeabi_fmul>
  400c16:	4909      	ldr	r1, [pc, #36]	; (400c3c <imu_read_normalized_acceleration+0x4c>)
  400c18:	f004 fd7e 	bl	405718 <__aeabi_fmul>
  400c1c:	6060      	str	r0, [r4, #4]
    norm_accel.z_axis = raw_accel.z_axis * range_per_digit * 9.80665f;
  400c1e:	68b1      	ldr	r1, [r6, #8]
  400c20:	4628      	mov	r0, r5
  400c22:	f004 fd79 	bl	405718 <__aeabi_fmul>
  400c26:	4905      	ldr	r1, [pc, #20]	; (400c3c <imu_read_normalized_acceleration+0x4c>)
  400c28:	f004 fd76 	bl	405718 <__aeabi_fmul>
  400c2c:	60a0      	str	r0, [r4, #8]
  400c2e:	bd70      	pop	{r4, r5, r6, pc}
  400c30:	200002c4 	.word	0x200002c4
  400c34:	200002d4 	.word	0x200002d4
  400c38:	200002ec 	.word	0x200002ec
  400c3c:	411ce80a 	.word	0x411ce80a

00400c40 <imu_log_settings>:

    return norm_accel;
}

void imu_log_settings(void)
{
  400c40:	b508      	push	{r3, lr}
    printf("Device: 0x%1x\r\n", imu_who_am_i());
  400c42:	f7ff fdfd 	bl	400840 <imu_who_am_i>
  400c46:	4601      	mov	r1, r0
  400c48:	482b      	ldr	r0, [pc, #172]	; (400cf8 <imu_log_settings+0xb8>)
  400c4a:	f001 ff51 	bl	402af0 <iprintf>
    printf("Sleep Mode: %s\r\n", imu_get_sleep_enabled() ? "Enabled" : "Disabled");
  400c4e:	f7ff feab 	bl	4009a8 <imu_get_sleep_enabled>
  400c52:	492a      	ldr	r1, [pc, #168]	; (400cfc <imu_log_settings+0xbc>)
  400c54:	4a2a      	ldr	r2, [pc, #168]	; (400d00 <imu_log_settings+0xc0>)
  400c56:	2800      	cmp	r0, #0
  400c58:	bf18      	it	ne
  400c5a:	4611      	movne	r1, r2
  400c5c:	4829      	ldr	r0, [pc, #164]	; (400d04 <imu_log_settings+0xc4>)
  400c5e:	f001 ff47 	bl	402af0 <iprintf>
    printf("Clock Source: ");
  400c62:	4829      	ldr	r0, [pc, #164]	; (400d08 <imu_log_settings+0xc8>)
  400c64:	f001 ff44 	bl	402af0 <iprintf>
    switch (imu_get_clock_source()) {
  400c68:	f7ff fdfc 	bl	400864 <imu_get_clock_source>
  400c6c:	b110      	cbz	r0, 400c74 <imu_log_settings+0x34>
  400c6e:	2801      	cmp	r0, #1
  400c70:	d004      	beq.n	400c7c <imu_log_settings+0x3c>
  400c72:	e006      	b.n	400c82 <imu_log_settings+0x42>
        case MPU6050_CLOCK_INTERNAL:
        printf("Internal 8MHz oscillator\r\n");
  400c74:	4825      	ldr	r0, [pc, #148]	; (400d0c <imu_log_settings+0xcc>)
  400c76:	f001 ff3b 	bl	402af0 <iprintf>
        break;
  400c7a:	e002      	b.n	400c82 <imu_log_settings+0x42>
        case MPU6050_CLOCK_PLL_XGYRO:
        printf("PLL with X axis gyroscope reference\r\n");
  400c7c:	4824      	ldr	r0, [pc, #144]	; (400d10 <imu_log_settings+0xd0>)
  400c7e:	f001 ff37 	bl	402af0 <iprintf>
        break;
    }
    printf("Gyroscope: ");
  400c82:	4824      	ldr	r0, [pc, #144]	; (400d14 <imu_log_settings+0xd4>)
  400c84:	f001 ff34 	bl	402af0 <iprintf>
        switch (imu_get_gyro_scale()) {
  400c88:	f7ff fe22 	bl	4008d0 <imu_get_gyro_scale>
  400c8c:	2803      	cmp	r0, #3
  400c8e:	d812      	bhi.n	400cb6 <imu_log_settings+0x76>
  400c90:	e8df f000 	tbb	[pc, r0]
  400c94:	0e0a0602 	.word	0x0e0a0602
        case MPU6050_GYRO_FS_250:
        printf("250 dps\r\n");
  400c98:	481f      	ldr	r0, [pc, #124]	; (400d18 <imu_log_settings+0xd8>)
  400c9a:	f001 ff29 	bl	402af0 <iprintf>
        break;
  400c9e:	e00a      	b.n	400cb6 <imu_log_settings+0x76>
        case MPU6050_GYRO_FS_500:
        printf("500 dps\r\n");
  400ca0:	481e      	ldr	r0, [pc, #120]	; (400d1c <imu_log_settings+0xdc>)
  400ca2:	f001 ff25 	bl	402af0 <iprintf>
        break;
  400ca6:	e006      	b.n	400cb6 <imu_log_settings+0x76>
        case MPU6050_GYRO_FS_1000:
        printf("1000 dps\r\n");
  400ca8:	481d      	ldr	r0, [pc, #116]	; (400d20 <imu_log_settings+0xe0>)
  400caa:	f001 ff21 	bl	402af0 <iprintf>
        break;
  400cae:	e002      	b.n	400cb6 <imu_log_settings+0x76>
        case MPU6050_GYRO_FS_2000:
        printf("2000 dps\r\n");
  400cb0:	481c      	ldr	r0, [pc, #112]	; (400d24 <imu_log_settings+0xe4>)
  400cb2:	f001 ff1d 	bl	402af0 <iprintf>
        break;
    }
    printf("use_calibrate: %d\r\n", use_calibrate);
  400cb6:	4b1c      	ldr	r3, [pc, #112]	; (400d28 <imu_log_settings+0xe8>)
  400cb8:	7819      	ldrb	r1, [r3, #0]
  400cba:	481c      	ldr	r0, [pc, #112]	; (400d2c <imu_log_settings+0xec>)
  400cbc:	f001 ff18 	bl	402af0 <iprintf>
    printf("actual_threshold: %f\r\n", actual_threshold);
  400cc0:	4b1b      	ldr	r3, [pc, #108]	; (400d30 <imu_log_settings+0xf0>)
  400cc2:	6818      	ldr	r0, [r3, #0]
  400cc4:	f004 f89e 	bl	404e04 <__aeabi_f2d>
  400cc8:	4602      	mov	r2, r0
  400cca:	460b      	mov	r3, r1
  400ccc:	4819      	ldr	r0, [pc, #100]	; (400d34 <imu_log_settings+0xf4>)
  400cce:	f001 ff0f 	bl	402af0 <iprintf>
    printf("dps_per_digit: %f\r\n", dps_per_digit);
  400cd2:	4b19      	ldr	r3, [pc, #100]	; (400d38 <imu_log_settings+0xf8>)
  400cd4:	6818      	ldr	r0, [r3, #0]
  400cd6:	f004 f895 	bl	404e04 <__aeabi_f2d>
  400cda:	4602      	mov	r2, r0
  400cdc:	460b      	mov	r3, r1
  400cde:	4817      	ldr	r0, [pc, #92]	; (400d3c <imu_log_settings+0xfc>)
  400ce0:	f001 ff06 	bl	402af0 <iprintf>
    printf("range_per_digit: %f\r\n", range_per_digit);
  400ce4:	4b16      	ldr	r3, [pc, #88]	; (400d40 <imu_log_settings+0x100>)
  400ce6:	6818      	ldr	r0, [r3, #0]
  400ce8:	f004 f88c 	bl	404e04 <__aeabi_f2d>
  400cec:	4602      	mov	r2, r0
  400cee:	460b      	mov	r3, r1
  400cf0:	4814      	ldr	r0, [pc, #80]	; (400d44 <imu_log_settings+0x104>)
  400cf2:	f001 fefd 	bl	402af0 <iprintf>
  400cf6:	bd08      	pop	{r3, pc}
  400cf8:	00405c00 	.word	0x00405c00
  400cfc:	00405bf4 	.word	0x00405bf4
  400d00:	00405bec 	.word	0x00405bec
  400d04:	00405c10 	.word	0x00405c10
  400d08:	00405c24 	.word	0x00405c24
  400d0c:	00405c34 	.word	0x00405c34
  400d10:	00405c50 	.word	0x00405c50
  400d14:	00405c78 	.word	0x00405c78
  400d18:	00405c84 	.word	0x00405c84
  400d1c:	00405c90 	.word	0x00405c90
  400d20:	00405c9c 	.word	0x00405c9c
  400d24:	00405ca8 	.word	0x00405ca8
  400d28:	20000208 	.word	0x20000208
  400d2c:	00405cb4 	.word	0x00405cb4
  400d30:	2000020c 	.word	0x2000020c
  400d34:	00405cc8 	.word	0x00405cc8
  400d38:	20000204 	.word	0x20000204
  400d3c:	00405ce0 	.word	0x00405ce0
  400d40:	200002c4 	.word	0x200002c4
  400d44:	00405cf4 	.word	0x00405cf4

00400d48 <imu_set_threshold>:
{
	return actual_threshold;
}

void imu_set_threshold(uint8_t multiple)
{
  400d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (multiple > 0) {
  400d4a:	4604      	mov	r4, r0
  400d4c:	b1d8      	cbz	r0, 400d86 <imu_set_threshold+0x3e>
		if (!use_calibrate) {
  400d4e:	4b13      	ldr	r3, [pc, #76]	; (400d9c <imu_set_threshold+0x54>)
  400d50:	781b      	ldrb	r3, [r3, #0]
  400d52:	b913      	cbnz	r3, 400d5a <imu_set_threshold+0x12>
			imu_calibrate_gyro(GYRO_SAMPLES);
  400d54:	2032      	movs	r0, #50	; 0x32
  400d56:	f000 f829 	bl	400dac <imu_calibrate_gyro>
		}

		threshold_gyro.x_axis = threshold.x_axis * multiple;
  400d5a:	4620      	mov	r0, r4
  400d5c:	f004 fc88 	bl	405670 <__aeabi_i2f>
  400d60:	4607      	mov	r7, r0
  400d62:	4d0f      	ldr	r5, [pc, #60]	; (400da0 <imu_set_threshold+0x58>)
  400d64:	4e0f      	ldr	r6, [pc, #60]	; (400da4 <imu_set_threshold+0x5c>)
  400d66:	4601      	mov	r1, r0
  400d68:	6830      	ldr	r0, [r6, #0]
  400d6a:	f004 fcd5 	bl	405718 <__aeabi_fmul>
  400d6e:	6028      	str	r0, [r5, #0]
		threshold_gyro.y_axis = threshold.y_axis * multiple;
  400d70:	4639      	mov	r1, r7
  400d72:	6870      	ldr	r0, [r6, #4]
  400d74:	f004 fcd0 	bl	405718 <__aeabi_fmul>
  400d78:	6068      	str	r0, [r5, #4]
		threshold_gyro.z_axis = threshold.z_axis * multiple;
  400d7a:	4639      	mov	r1, r7
  400d7c:	68b0      	ldr	r0, [r6, #8]
  400d7e:	f004 fccb 	bl	405718 <__aeabi_fmul>
  400d82:	60a8      	str	r0, [r5, #8]
  400d84:	e004      	b.n	400d90 <imu_set_threshold+0x48>
	} else {
		threshold_gyro.x_axis = 0;
  400d86:	4b06      	ldr	r3, [pc, #24]	; (400da0 <imu_set_threshold+0x58>)
  400d88:	2200      	movs	r2, #0
  400d8a:	601a      	str	r2, [r3, #0]
		threshold_gyro.y_axis = 0;
  400d8c:	605a      	str	r2, [r3, #4]
		threshold_gyro.z_axis = 0;
  400d8e:	609a      	str	r2, [r3, #8]
	}

	actual_threshold = multiple;
  400d90:	4620      	mov	r0, r4
  400d92:	f004 fc69 	bl	405668 <__aeabi_ui2f>
  400d96:	4b04      	ldr	r3, [pc, #16]	; (400da8 <imu_set_threshold+0x60>)
  400d98:	6018      	str	r0, [r3, #0]
  400d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d9c:	20000208 	.word	0x20000208
  400da0:	200002c8 	.word	0x200002c8
  400da4:	200002ac 	.word	0x200002ac
  400da8:	2000020c 	.word	0x2000020c

00400dac <imu_calibrate_gyro>:

}


void imu_calibrate_gyro(uint8_t samples)
{
  400dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400db0:	b085      	sub	sp, #20
	use_calibrate = true;
  400db2:	2201      	movs	r2, #1
  400db4:	4b5e      	ldr	r3, [pc, #376]	; (400f30 <imu_calibrate_gyro+0x184>)
  400db6:	701a      	strb	r2, [r3, #0]
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400db8:	4681      	mov	r9, r0
  400dba:	2800      	cmp	r0, #0
  400dbc:	d048      	beq.n	400e50 <imu_calibrate_gyro+0xa4>
  400dbe:	2400      	movs	r4, #0
  400dc0:	f04f 0a00 	mov.w	sl, #0
  400dc4:	46d3      	mov	fp, sl
  400dc6:	f8cd a00c 	str.w	sl, [sp, #12]
  400dca:	f8cd a008 	str.w	sl, [sp, #8]
  400dce:	f8cd a004 	str.w	sl, [sp, #4]
  400dd2:	f8cd a000 	str.w	sl, [sp]

        imu_read_raw_gyro();

		sum_x += raw_gyro.x_axis;
  400dd6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 400f44 <imu_calibrate_gyro+0x198>
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {

        imu_read_raw_gyro();
  400dda:	f7ff fe11 	bl	400a00 <imu_read_raw_gyro>

		sum_x += raw_gyro.x_axis;
  400dde:	f8d8 7000 	ldr.w	r7, [r8]
  400de2:	4639      	mov	r1, r7
  400de4:	9800      	ldr	r0, [sp, #0]
  400de6:	f004 fb8f 	bl	405508 <__addsf3>
  400dea:	9000      	str	r0, [sp, #0]
		sum_y += raw_gyro.y_axis;
  400dec:	f8d8 6004 	ldr.w	r6, [r8, #4]
  400df0:	4631      	mov	r1, r6
  400df2:	9801      	ldr	r0, [sp, #4]
  400df4:	f004 fb88 	bl	405508 <__addsf3>
  400df8:	9001      	str	r0, [sp, #4]
		sum_z += raw_gyro.z_axis;
  400dfa:	f8d8 5008 	ldr.w	r5, [r8, #8]
  400dfe:	4629      	mov	r1, r5
  400e00:	9802      	ldr	r0, [sp, #8]
  400e02:	f004 fb81 	bl	405508 <__addsf3>
  400e06:	9002      	str	r0, [sp, #8]

        // Sum
		sigma_x += raw_gyro.x_axis * raw_gyro.x_axis;
  400e08:	4639      	mov	r1, r7
  400e0a:	4638      	mov	r0, r7
  400e0c:	f004 fc84 	bl	405718 <__aeabi_fmul>
  400e10:	4601      	mov	r1, r0
  400e12:	9803      	ldr	r0, [sp, #12]
  400e14:	f004 fb78 	bl	405508 <__addsf3>
  400e18:	9003      	str	r0, [sp, #12]
		sigma_y += raw_gyro.y_axis * raw_gyro.y_axis;
  400e1a:	4631      	mov	r1, r6
  400e1c:	4630      	mov	r0, r6
  400e1e:	f004 fc7b 	bl	405718 <__aeabi_fmul>
  400e22:	4601      	mov	r1, r0
  400e24:	4658      	mov	r0, fp
  400e26:	f004 fb6f 	bl	405508 <__addsf3>
  400e2a:	4683      	mov	fp, r0
		sigma_z += raw_gyro.z_axis * raw_gyro.z_axis;
  400e2c:	4629      	mov	r1, r5
  400e2e:	4628      	mov	r0, r5
  400e30:	f004 fc72 	bl	405718 <__aeabi_fmul>
  400e34:	4601      	mov	r1, r0
  400e36:	4650      	mov	r0, sl
  400e38:	f004 fb66 	bl	405508 <__addsf3>
  400e3c:	4682      	mov	sl, r0

		delay_ms(5);
  400e3e:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400e42:	f005 f8f9 	bl	406038 <__portable_delay_cycles_veneer>
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;

	for (uint8_t i=0; i<samples; i++) {
  400e46:	3401      	adds	r4, #1
  400e48:	b2e4      	uxtb	r4, r4
  400e4a:	45a1      	cmp	r9, r4
  400e4c:	d1c5      	bne.n	400dda <imu_calibrate_gyro+0x2e>
  400e4e:	e00a      	b.n	400e66 <imu_calibrate_gyro+0xba>
	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
	float sigma_z = 0;
  400e50:	f04f 0a00 	mov.w	sl, #0

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
	float sigma_y = 0;
  400e54:	46d3      	mov	fp, sl
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
	float sigma_x = 0;
  400e56:	f8cd a00c 	str.w	sl, [sp, #12]
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
	float sum_z = 0;
  400e5a:	f8cd a008 	str.w	sl, [sp, #8]
void imu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
	float sum_y = 0;
  400e5e:	f8cd a004 	str.w	sl, [sp, #4]

void imu_calibrate_gyro(uint8_t samples)
{
	use_calibrate = true;

	float sum_x = 0;
  400e62:	f8cd a000 	str.w	sl, [sp]

		delay_ms(5);
	}

	// Calculate delta vectors
	delta_gyro.x_axis = sum_x/samples;
  400e66:	4648      	mov	r0, r9
  400e68:	f004 fc02 	bl	405670 <__aeabi_i2f>
  400e6c:	4605      	mov	r5, r0
  400e6e:	4601      	mov	r1, r0
  400e70:	9800      	ldr	r0, [sp, #0]
  400e72:	f004 fd05 	bl	405880 <__aeabi_fdiv>
  400e76:	4606      	mov	r6, r0
  400e78:	4c2e      	ldr	r4, [pc, #184]	; (400f34 <imu_calibrate_gyro+0x188>)
  400e7a:	6020      	str	r0, [r4, #0]
	delta_gyro.y_axis = sum_y/samples;
  400e7c:	4629      	mov	r1, r5
  400e7e:	9801      	ldr	r0, [sp, #4]
  400e80:	f004 fcfe 	bl	405880 <__aeabi_fdiv>
  400e84:	6060      	str	r0, [r4, #4]
	delta_gyro.z_axis = sum_z/samples;
  400e86:	4629      	mov	r1, r5
  400e88:	9802      	ldr	r0, [sp, #8]
  400e8a:	f004 fcf9 	bl	405880 <__aeabi_fdiv>
  400e8e:	60a0      	str	r0, [r4, #8]

	// Calculate threshold vectors
	threshold.x_axis = sqrt((sigma_x/50) - (delta_gyro.x_axis * delta_gyro.x_axis));
  400e90:	9f03      	ldr	r7, [sp, #12]
  400e92:	4929      	ldr	r1, [pc, #164]	; (400f38 <imu_calibrate_gyro+0x18c>)
  400e94:	4638      	mov	r0, r7
  400e96:	f004 fcf3 	bl	405880 <__aeabi_fdiv>
  400e9a:	4605      	mov	r5, r0
  400e9c:	4631      	mov	r1, r6
  400e9e:	4630      	mov	r0, r6
  400ea0:	f004 fc3a 	bl	405718 <__aeabi_fmul>
  400ea4:	4601      	mov	r1, r0
  400ea6:	4628      	mov	r0, r5
  400ea8:	f004 fb2c 	bl	405504 <__aeabi_fsub>
  400eac:	f003 ffaa 	bl	404e04 <__aeabi_f2d>
  400eb0:	f000 fdec 	bl	401a8c <sqrt>
  400eb4:	4e21      	ldr	r6, [pc, #132]	; (400f3c <imu_calibrate_gyro+0x190>)
  400eb6:	f004 fad1 	bl	40545c <__aeabi_d2f>
  400eba:	6030      	str	r0, [r6, #0]
	threshold.y_axis = sqrt((sigma_y/50) - (delta_gyro.y_axis * delta_gyro.y_axis));
  400ebc:	6865      	ldr	r5, [r4, #4]
  400ebe:	491e      	ldr	r1, [pc, #120]	; (400f38 <imu_calibrate_gyro+0x18c>)
  400ec0:	4658      	mov	r0, fp
  400ec2:	f004 fcdd 	bl	405880 <__aeabi_fdiv>
  400ec6:	4607      	mov	r7, r0
  400ec8:	4629      	mov	r1, r5
  400eca:	4628      	mov	r0, r5
  400ecc:	f004 fc24 	bl	405718 <__aeabi_fmul>
  400ed0:	4601      	mov	r1, r0
  400ed2:	4638      	mov	r0, r7
  400ed4:	f004 fb16 	bl	405504 <__aeabi_fsub>
  400ed8:	f003 ff94 	bl	404e04 <__aeabi_f2d>
  400edc:	f000 fdd6 	bl	401a8c <sqrt>
  400ee0:	f004 fabc 	bl	40545c <__aeabi_d2f>
  400ee4:	6070      	str	r0, [r6, #4]
	threshold.z_axis = sqrt((sigma_z/50) - (delta_gyro.z_axis * delta_gyro.z_axis));
  400ee6:	68a4      	ldr	r4, [r4, #8]
  400ee8:	4913      	ldr	r1, [pc, #76]	; (400f38 <imu_calibrate_gyro+0x18c>)
  400eea:	4650      	mov	r0, sl
  400eec:	f004 fcc8 	bl	405880 <__aeabi_fdiv>
  400ef0:	4605      	mov	r5, r0
  400ef2:	4621      	mov	r1, r4
  400ef4:	4620      	mov	r0, r4
  400ef6:	f004 fc0f 	bl	405718 <__aeabi_fmul>
  400efa:	4601      	mov	r1, r0
  400efc:	4628      	mov	r0, r5
  400efe:	f004 fb01 	bl	405504 <__aeabi_fsub>
  400f02:	f003 ff7f 	bl	404e04 <__aeabi_f2d>
  400f06:	f000 fdc1 	bl	401a8c <sqrt>
  400f0a:	f004 faa7 	bl	40545c <__aeabi_d2f>
  400f0e:	60b0      	str	r0, [r6, #8]

	if (actual_threshold > 0) {
  400f10:	4b0b      	ldr	r3, [pc, #44]	; (400f40 <imu_calibrate_gyro+0x194>)
  400f12:	681c      	ldr	r4, [r3, #0]
  400f14:	2100      	movs	r1, #0
  400f16:	4620      	mov	r0, r4
  400f18:	f004 fdba 	bl	405a90 <__aeabi_fcmpgt>
  400f1c:	b128      	cbz	r0, 400f2a <imu_calibrate_gyro+0x17e>
		imu_set_threshold(actual_threshold);
  400f1e:	4620      	mov	r0, r4
  400f20:	f004 fde6 	bl	405af0 <__aeabi_f2uiz>
  400f24:	b2c0      	uxtb	r0, r0
  400f26:	f7ff ff0f 	bl	400d48 <imu_set_threshold>
	}

}
  400f2a:	b005      	add	sp, #20
  400f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400f30:	20000208 	.word	0x20000208
  400f34:	200002f8 	.word	0x200002f8
  400f38:	42480000 	.word	0x42480000
  400f3c:	200002ac 	.word	0x200002ac
  400f40:	2000020c 	.word	0x2000020c
  400f44:	200002b8 	.word	0x200002b8

00400f48 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  400f48:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  400f4a:	482c      	ldr	r0, [pc, #176]	; (400ffc <board_init+0xb4>)
  400f4c:	f000 fc02 	bl	401754 <wdt_disable>
  400f50:	200b      	movs	r0, #11
  400f52:	f000 fbd5 	bl	401700 <pmc_enable_periph_clk>
  400f56:	200c      	movs	r0, #12
  400f58:	f000 fbd2 	bl	401700 <pmc_enable_periph_clk>
  400f5c:	200d      	movs	r0, #13
  400f5e:	f000 fbcf 	bl	401700 <pmc_enable_periph_clk>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f62:	4b27      	ldr	r3, [pc, #156]	; (401000 <board_init+0xb8>)
  400f64:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400f68:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f6a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f70:	4c24      	ldr	r4, [pc, #144]	; (401004 <board_init+0xbc>)
  400f72:	2504      	movs	r5, #4
  400f74:	6165      	str	r5, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f76:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400f7a:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400f7c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400f80:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400f82:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400f84:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400f88:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400f8a:	f022 0204 	bic.w	r2, r2, #4
  400f8e:	6722      	str	r2, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400f90:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400f92:	f022 0204 	bic.w	r2, r2, #4
  400f96:	6762      	str	r2, [r4, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400f9c:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f9e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fa0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400fa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400fa8:	6322      	str	r2, [r4, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400faa:	6122      	str	r2, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fac:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400fb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400fb4:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400fb6:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400fbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fc0:	210c      	movs	r1, #12
  400fc2:	4811      	ldr	r0, [pc, #68]	; (401008 <board_init+0xc0>)
  400fc4:	f000 fa76 	bl	4014b4 <pio_configure_pin_group>
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  400fc8:	4e10      	ldr	r6, [pc, #64]	; (40100c <board_init+0xc4>)
  400fca:	4631      	mov	r1, r6
  400fcc:	2003      	movs	r0, #3
  400fce:	f000 f9e5 	bl	40139c <pio_configure_pin>
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  400fd2:	4631      	mov	r1, r6
  400fd4:	4628      	mov	r0, r5
  400fd6:	f000 f9e1 	bl	40139c <pio_configure_pin>
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400fda:	6665      	str	r5, [r4, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400fdc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400fe0:	6565      	str	r5, [r4, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400fe2:	6265      	str	r5, [r4, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400fe4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400fe8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400fea:	f023 0304 	bic.w	r3, r3, #4
  400fee:	6723      	str	r3, [r4, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400ff0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400ff2:	f023 0304 	bic.w	r3, r3, #4
  400ff6:	6763      	str	r3, [r4, #116]	; 0x74
  400ff8:	bd70      	pop	{r4, r5, r6, pc}
  400ffa:	bf00      	nop
  400ffc:	400e1450 	.word	0x400e1450
  401000:	400e1200 	.word	0x400e1200
  401004:	400e0e00 	.word	0x400e0e00
  401008:	400e1000 	.word	0x400e1000
  40100c:	08000001 	.word	0x08000001

00401010 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401010:	4b2b      	ldr	r3, [pc, #172]	; (4010c0 <twi_set_speed+0xb0>)
  401012:	4299      	cmp	r1, r3
  401014:	d849      	bhi.n	4010aa <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401016:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40101a:	4299      	cmp	r1, r3
  40101c:	d92b      	bls.n	401076 <twi_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  40101e:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401020:	4c28      	ldr	r4, [pc, #160]	; (4010c4 <twi_set_speed+0xb4>)
  401022:	fba4 3402 	umull	r3, r4, r4, r2
  401026:	0ba4      	lsrs	r4, r4, #14
  401028:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40102a:	4b27      	ldr	r3, [pc, #156]	; (4010c8 <twi_set_speed+0xb8>)
  40102c:	440b      	add	r3, r1
  40102e:	009b      	lsls	r3, r3, #2
  401030:	fbb2 f2f3 	udiv	r2, r2, r3
  401034:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401036:	2cff      	cmp	r4, #255	; 0xff
  401038:	d939      	bls.n	4010ae <twi_set_speed+0x9e>
  40103a:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  40103c:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  40103e:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401040:	2cff      	cmp	r4, #255	; 0xff
  401042:	d902      	bls.n	40104a <twi_set_speed+0x3a>
  401044:	2b07      	cmp	r3, #7
  401046:	d1f9      	bne.n	40103c <twi_set_speed+0x2c>
  401048:	e00a      	b.n	401060 <twi_set_speed+0x50>
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40104a:	2aff      	cmp	r2, #255	; 0xff
  40104c:	d908      	bls.n	401060 <twi_set_speed+0x50>
  40104e:	2b06      	cmp	r3, #6
  401050:	d900      	bls.n	401054 <twi_set_speed+0x44>
  401052:	e005      	b.n	401060 <twi_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  401054:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  401056:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401058:	2aff      	cmp	r2, #255	; 0xff
  40105a:	d901      	bls.n	401060 <twi_set_speed+0x50>
  40105c:	2b06      	cmp	r3, #6
  40105e:	d9f9      	bls.n	401054 <twi_set_speed+0x44>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401060:	0212      	lsls	r2, r2, #8
  401062:	b292      	uxth	r2, r2
  401064:	041b      	lsls	r3, r3, #16
  401066:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40106a:	431a      	orrs	r2, r3
  40106c:	b2e4      	uxtb	r4, r4
  40106e:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  401070:	6102      	str	r2, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401072:	2000      	movs	r0, #0
  401074:	e021      	b.n	4010ba <twi_set_speed+0xaa>
		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401076:	0049      	lsls	r1, r1, #1
  401078:	fbb2 f2f1 	udiv	r2, r2, r1
  40107c:	3a04      	subs	r2, #4

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40107e:	2aff      	cmp	r2, #255	; 0xff
  401080:	d907      	bls.n	401092 <twi_set_speed+0x82>
  401082:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401084:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  401086:	0852      	lsrs	r2, r2, #1
				TWI_CWGR_CKDIV(ckdiv);		
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401088:	2aff      	cmp	r2, #255	; 0xff
  40108a:	d903      	bls.n	401094 <twi_set_speed+0x84>
  40108c:	2b07      	cmp	r3, #7
  40108e:	d1f9      	bne.n	401084 <twi_set_speed+0x74>
  401090:	e000      	b.n	401094 <twi_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401092:	2300      	movs	r3, #0
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401094:	0211      	lsls	r1, r2, #8
  401096:	b289      	uxth	r1, r1
  401098:	041b      	lsls	r3, r3, #16
  40109a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40109e:	430b      	orrs	r3, r1
  4010a0:	b2d2      	uxtb	r2, r2
  4010a2:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
  4010a4:	6102      	str	r2, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4010a6:	2000      	movs	r0, #0
}
  4010a8:	4770      	bx	lr
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  4010aa:	2001      	movs	r0, #1
  4010ac:	4770      	bx	lr
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010ae:	2aff      	cmp	r2, #255	; 0xff
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4010b0:	bf88      	it	hi
  4010b2:	2300      	movhi	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4010b4:	d8ce      	bhi.n	401054 <twi_set_speed+0x44>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  4010b6:	2300      	movs	r3, #0
  4010b8:	e7d2      	b.n	401060 <twi_set_speed+0x50>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  4010ba:	bc10      	pop	{r4}
  4010bc:	4770      	bx	lr
  4010be:	bf00      	nop
  4010c0:	00061a80 	.word	0x00061a80
  4010c4:	057619f1 	.word	0x057619f1
  4010c8:	3ffd1200 	.word	0x3ffd1200

004010cc <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  4010cc:	b538      	push	{r3, r4, r5, lr}
  4010ce:	4604      	mov	r4, r0
  4010d0:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  4010d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  4010d6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  4010d8:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4010da:	2380      	movs	r3, #128	; 0x80
  4010dc:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  4010de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4010e0:	2308      	movs	r3, #8
  4010e2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4010e4:	2320      	movs	r3, #32
  4010e6:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4010e8:	2304      	movs	r3, #4
  4010ea:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4010ec:	680a      	ldr	r2, [r1, #0]
  4010ee:	6849      	ldr	r1, [r1, #4]
  4010f0:	f7ff ff8e 	bl	401010 <twi_set_speed>
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  4010f4:	2801      	cmp	r0, #1
  4010f6:	bf14      	ite	ne
  4010f8:	2000      	movne	r0, #0
  4010fa:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  4010fc:	7a6b      	ldrb	r3, [r5, #9]
  4010fe:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401100:	bf04      	itt	eq
  401102:	2340      	moveq	r3, #64	; 0x40
  401104:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  401106:	bd38      	pop	{r3, r4, r5, pc}

00401108 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401108:	460a      	mov	r2, r1
  40110a:	b159      	cbz	r1, 401124 <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  40110c:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  40110e:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  401110:	bfc4      	itt	gt
  401112:	7841      	ldrbgt	r1, [r0, #1]
  401114:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  401118:	2a02      	cmp	r2, #2
  40111a:	dd05      	ble.n	401128 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  40111c:	7880      	ldrb	r0, [r0, #2]
  40111e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401122:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401124:	2000      	movs	r0, #0
  401126:	4770      	bx	lr
  401128:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  40112a:	4770      	bx	lr

0040112c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  40112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401130:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  401132:	2c00      	cmp	r4, #0
  401134:	d045      	beq.n	4011c2 <twi_master_read+0x96>
  401136:	460b      	mov	r3, r1
  401138:	4605      	mov	r5, r0
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  40113a:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40113c:	2000      	movs	r0, #0
  40113e:	6068      	str	r0, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401140:	684a      	ldr	r2, [r1, #4]
  401142:	0212      	lsls	r2, r2, #8
  401144:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401148:	f442 5180 	orr.w	r1, r2, #4096	; 0x1000
  40114c:	7c1a      	ldrb	r2, [r3, #16]
  40114e:	0412      	lsls	r2, r2, #16
  401150:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  401154:	430a      	orrs	r2, r1
  401156:	606a      	str	r2, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401158:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40115a:	6859      	ldr	r1, [r3, #4]
  40115c:	4618      	mov	r0, r3
  40115e:	f7ff ffd3 	bl	401108 <twi_mk_addr>
  401162:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401164:	2c01      	cmp	r4, #1
  401166:	d104      	bne.n	401172 <twi_master_read+0x46>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401168:	2303      	movs	r3, #3
  40116a:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  40116c:	f04f 0e01 	mov.w	lr, #1
  401170:	e033      	b.n	4011da <twi_master_read+0xae>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401172:	2301      	movs	r3, #1
  401174:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  401176:	f04f 0e00 	mov.w	lr, #0
  40117a:	e02e      	b.n	4011da <twi_master_read+0xae>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  40117c:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40117e:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  401180:	f413 7f80 	tst.w	r3, #256	; 0x100
  401184:	d120      	bne.n	4011c8 <twi_master_read+0x9c>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  401186:	1e51      	subs	r1, r2, #1
  401188:	b30a      	cbz	r2, 4011ce <twi_master_read+0xa2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  40118a:	2c01      	cmp	r4, #1
  40118c:	d106      	bne.n	40119c <twi_master_read+0x70>
  40118e:	f1be 0f00 	cmp.w	lr, #0
  401192:	d12f      	bne.n	4011f4 <twi_master_read+0xc8>
			p_twi->TWI_CR = TWI_CR_STOP;
  401194:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
  401198:	46e6      	mov	lr, ip
  40119a:	e02b      	b.n	4011f4 <twi_master_read+0xc8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  40119c:	f013 0f02 	tst.w	r3, #2
  4011a0:	d005      	beq.n	4011ae <twi_master_read+0x82>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4011a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4011a4:	7033      	strb	r3, [r6, #0]

		cnt--;
  4011a6:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4011a8:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4011aa:	463a      	mov	r2, r7
  4011ac:	e000      	b.n	4011b0 <twi_master_read+0x84>
  4011ae:	460a      	mov	r2, r1
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4011b0:	2c00      	cmp	r4, #0
  4011b2:	d1e4      	bne.n	40117e <twi_master_read+0x52>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4011b4:	6a2b      	ldr	r3, [r5, #32]
  4011b6:	f013 0f01 	tst.w	r3, #1
  4011ba:	d0fb      	beq.n	4011b4 <twi_master_read+0x88>
	}

	p_twi->TWI_SR;
  4011bc:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
  4011be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4011c2:	2001      	movs	r0, #1
  4011c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4011c8:	2005      	movs	r0, #5
  4011ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  4011ce:	2009      	movs	r0, #9
  4011d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4011d4:	2005      	movs	r0, #5
  4011d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4011da:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  4011dc:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4011e0:	d1f8      	bne.n	4011d4 <twi_master_read+0xa8>
  4011e2:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4011e6:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4011ea:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4011ee:	f04f 0c01 	mov.w	ip, #1
  4011f2:	e7ca      	b.n	40118a <twi_master_read+0x5e>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4011f4:	f013 0f02 	tst.w	r3, #2
  4011f8:	d0c0      	beq.n	40117c <twi_master_read+0x50>
  4011fa:	e7d2      	b.n	4011a2 <twi_master_read+0x76>

004011fc <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4011fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4011fe:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  401200:	2d00      	cmp	r5, #0
  401202:	d034      	beq.n	40126e <twi_master_write+0x72>
  401204:	460b      	mov	r3, r1
  401206:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401208:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40120a:	2000      	movs	r0, #0
  40120c:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40120e:	7c0a      	ldrb	r2, [r1, #16]
  401210:	0412      	lsls	r2, r2, #16
  401212:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  401216:	685a      	ldr	r2, [r3, #4]
  401218:	0212      	lsls	r2, r2, #8
  40121a:	f402 7240 	and.w	r2, r2, #768	; 0x300
  40121e:	430a      	orrs	r2, r1
  401220:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401222:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401224:	6859      	ldr	r1, [r3, #4]
  401226:	4618      	mov	r0, r3
  401228:	f7ff ff6e 	bl	401108 <twi_mk_addr>
  40122c:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40122e:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401230:	f413 7f80 	tst.w	r3, #256	; 0x100
  401234:	d004      	beq.n	401240 <twi_master_write+0x44>
  401236:	e01c      	b.n	401272 <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  401238:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40123a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40123e:	d11a      	bne.n	401276 <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  401240:	f013 0f04 	tst.w	r3, #4
  401244:	d003      	beq.n	40124e <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  401246:	7833      	ldrb	r3, [r6, #0]
  401248:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  40124a:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40124c:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  40124e:	2d00      	cmp	r5, #0
  401250:	d1f2      	bne.n	401238 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401252:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401254:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401258:	d10f      	bne.n	40127a <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  40125a:	f013 0f04 	tst.w	r3, #4
  40125e:	d0f8      	beq.n	401252 <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401260:	2302      	movs	r3, #2
  401262:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401264:	6a23      	ldr	r3, [r4, #32]
  401266:	f013 0f01 	tst.w	r3, #1
  40126a:	d0fb      	beq.n	401264 <twi_master_write+0x68>
  40126c:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40126e:	2001      	movs	r0, #1
  401270:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  401272:	2005      	movs	r0, #5
  401274:	bd70      	pop	{r4, r5, r6, pc}
  401276:	2005      	movs	r0, #5
  401278:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40127a:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  40127c:	bd70      	pop	{r4, r5, r6, pc}
  40127e:	bf00      	nop

00401280 <twi_probe>:
 * \param uc_slave_addr Address of the remote chip to search for.
 *
 * \return TWI_SUCCESS if a chip was found, error code otherwise.
 */
uint32_t twi_probe(Twi *p_twi, uint8_t uc_slave_addr)
{
  401280:	b500      	push	{lr}
  401282:	b087      	sub	sp, #28
	twi_packet_t packet;
	uint8_t data = 0;
  401284:	2300      	movs	r3, #0
  401286:	aa06      	add	r2, sp, #24
  401288:	f802 3d15 	strb.w	r3, [r2, #-21]!

	/* Data to send */
	packet.buffer = &data;
  40128c:	9203      	str	r2, [sp, #12]
	/* Data length */
	packet.length = 1;
  40128e:	2201      	movs	r2, #1
  401290:	9204      	str	r2, [sp, #16]
	/* Slave chip address */
	packet.chip = (uint32_t) uc_slave_addr;
  401292:	f88d 1014 	strb.w	r1, [sp, #20]
	/* Internal chip address */
	packet.addr[0] = 0;
  401296:	f88d 3004 	strb.w	r3, [sp, #4]
	/* Address length */
	packet.addr_length = 0;
  40129a:	9302      	str	r3, [sp, #8]

	/* Perform a master write access */
	return (twi_master_write(p_twi, &packet));
  40129c:	a901      	add	r1, sp, #4
  40129e:	f7ff ffad 	bl	4011fc <twi_master_write>
}
  4012a2:	b007      	add	sp, #28
  4012a4:	f85d fb04 	ldr.w	pc, [sp], #4

004012a8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4012a8:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4012aa:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4012ae:	d02f      	beq.n	401310 <pio_set_peripheral+0x68>
  4012b0:	d807      	bhi.n	4012c2 <pio_set_peripheral+0x1a>
  4012b2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4012b6:	d014      	beq.n	4012e2 <pio_set_peripheral+0x3a>
  4012b8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4012bc:	d01e      	beq.n	4012fc <pio_set_peripheral+0x54>
  4012be:	b939      	cbnz	r1, 4012d0 <pio_set_peripheral+0x28>
  4012c0:	4770      	bx	lr
  4012c2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4012c6:	d036      	beq.n	401336 <pio_set_peripheral+0x8e>
  4012c8:	d804      	bhi.n	4012d4 <pio_set_peripheral+0x2c>
  4012ca:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4012ce:	d029      	beq.n	401324 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4012d0:	6042      	str	r2, [r0, #4]
  4012d2:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4012d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4012d8:	d02d      	beq.n	401336 <pio_set_peripheral+0x8e>
  4012da:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4012de:	d02a      	beq.n	401336 <pio_set_peripheral+0x8e>
  4012e0:	e7f6      	b.n	4012d0 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4012e2:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4012e4:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4012e6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4012e8:	43d3      	mvns	r3, r2
  4012ea:	4021      	ands	r1, r4
  4012ec:	4019      	ands	r1, r3
  4012ee:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4012f0:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4012f2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4012f4:	4021      	ands	r1, r4
  4012f6:	400b      	ands	r3, r1
  4012f8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4012fa:	e01a      	b.n	401332 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4012fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4012fe:	4313      	orrs	r3, r2
  401300:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401302:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401304:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401306:	400b      	ands	r3, r1
  401308:	ea23 0302 	bic.w	r3, r3, r2
  40130c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40130e:	e7df      	b.n	4012d0 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401310:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401312:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401314:	400b      	ands	r3, r1
  401316:	ea23 0302 	bic.w	r3, r3, r2
  40131a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40131c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40131e:	4313      	orrs	r3, r2
  401320:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401322:	e7d5      	b.n	4012d0 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401324:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401326:	4313      	orrs	r3, r2
  401328:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40132a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40132c:	4313      	orrs	r3, r2
  40132e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401330:	e7ce      	b.n	4012d0 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401332:	6042      	str	r2, [r0, #4]
}
  401334:	bc10      	pop	{r4}
  401336:	4770      	bx	lr

00401338 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401338:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40133a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40133e:	bf14      	ite	ne
  401340:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401342:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401344:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401348:	bf14      	ite	ne
  40134a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40134c:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40134e:	f012 0f02 	tst.w	r2, #2
  401352:	d002      	beq.n	40135a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  401354:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401358:	e004      	b.n	401364 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40135a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40135e:	bf18      	it	ne
  401360:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401364:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401366:	6001      	str	r1, [r0, #0]
  401368:	4770      	bx	lr
  40136a:	bf00      	nop

0040136c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40136c:	b410      	push	{r4}
  40136e:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401370:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401372:	b10c      	cbz	r4, 401378 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401374:	6641      	str	r1, [r0, #100]	; 0x64
  401376:	e000      	b.n	40137a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401378:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40137a:	b10b      	cbz	r3, 401380 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  40137c:	6501      	str	r1, [r0, #80]	; 0x50
  40137e:	e000      	b.n	401382 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401380:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401382:	b10a      	cbz	r2, 401388 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401384:	6301      	str	r1, [r0, #48]	; 0x30
  401386:	e000      	b.n	40138a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401388:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40138a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40138c:	6001      	str	r1, [r0, #0]
}
  40138e:	bc10      	pop	{r4}
  401390:	4770      	bx	lr
  401392:	bf00      	nop

00401394 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401394:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401396:	4770      	bx	lr

00401398 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401398:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40139a:	4770      	bx	lr

0040139c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40139c:	b570      	push	{r4, r5, r6, lr}
  40139e:	b082      	sub	sp, #8
  4013a0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4013a2:	0943      	lsrs	r3, r0, #5
  4013a4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4013a8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4013ac:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4013ae:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4013b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4013b6:	d047      	beq.n	401448 <pio_configure_pin+0xac>
  4013b8:	d809      	bhi.n	4013ce <pio_configure_pin+0x32>
  4013ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4013be:	d021      	beq.n	401404 <pio_configure_pin+0x68>
  4013c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013c4:	d02f      	beq.n	401426 <pio_configure_pin+0x8a>
  4013c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4013ca:	d16f      	bne.n	4014ac <pio_configure_pin+0x110>
  4013cc:	e009      	b.n	4013e2 <pio_configure_pin+0x46>
  4013ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4013d2:	d055      	beq.n	401480 <pio_configure_pin+0xe4>
  4013d4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4013d8:	d052      	beq.n	401480 <pio_configure_pin+0xe4>
  4013da:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4013de:	d044      	beq.n	40146a <pio_configure_pin+0xce>
  4013e0:	e064      	b.n	4014ac <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4013e2:	f000 001f 	and.w	r0, r0, #31
  4013e6:	2601      	movs	r6, #1
  4013e8:	4086      	lsls	r6, r0
  4013ea:	4632      	mov	r2, r6
  4013ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4013f0:	4620      	mov	r0, r4
  4013f2:	f7ff ff59 	bl	4012a8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4013f6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4013fa:	bf14      	ite	ne
  4013fc:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4013fe:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401400:	2001      	movs	r0, #1
  401402:	e054      	b.n	4014ae <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401404:	f000 001f 	and.w	r0, r0, #31
  401408:	2601      	movs	r6, #1
  40140a:	4086      	lsls	r6, r0
  40140c:	4632      	mov	r2, r6
  40140e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401412:	4620      	mov	r0, r4
  401414:	f7ff ff48 	bl	4012a8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401418:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40141c:	bf14      	ite	ne
  40141e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401420:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401422:	2001      	movs	r0, #1
  401424:	e043      	b.n	4014ae <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401426:	f000 001f 	and.w	r0, r0, #31
  40142a:	2601      	movs	r6, #1
  40142c:	4086      	lsls	r6, r0
  40142e:	4632      	mov	r2, r6
  401430:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401434:	4620      	mov	r0, r4
  401436:	f7ff ff37 	bl	4012a8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40143a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40143e:	bf14      	ite	ne
  401440:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401442:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401444:	2001      	movs	r0, #1
  401446:	e032      	b.n	4014ae <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401448:	f000 001f 	and.w	r0, r0, #31
  40144c:	2601      	movs	r6, #1
  40144e:	4086      	lsls	r6, r0
  401450:	4632      	mov	r2, r6
  401452:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401456:	4620      	mov	r0, r4
  401458:	f7ff ff26 	bl	4012a8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40145c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401460:	bf14      	ite	ne
  401462:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401464:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401466:	2001      	movs	r0, #1
  401468:	e021      	b.n	4014ae <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40146a:	f000 011f 	and.w	r1, r0, #31
  40146e:	2601      	movs	r6, #1
  401470:	462a      	mov	r2, r5
  401472:	fa06 f101 	lsl.w	r1, r6, r1
  401476:	4620      	mov	r0, r4
  401478:	f7ff ff5e 	bl	401338 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  40147c:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40147e:	e016      	b.n	4014ae <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401480:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  401484:	f000 011f 	and.w	r1, r0, #31
  401488:	2601      	movs	r6, #1
  40148a:	ea05 0306 	and.w	r3, r5, r6
  40148e:	9300      	str	r3, [sp, #0]
  401490:	f3c5 0380 	ubfx	r3, r5, #2, #1
  401494:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401498:	bf14      	ite	ne
  40149a:	2200      	movne	r2, #0
  40149c:	2201      	moveq	r2, #1
  40149e:	fa06 f101 	lsl.w	r1, r6, r1
  4014a2:	4620      	mov	r0, r4
  4014a4:	f7ff ff62 	bl	40136c <pio_set_output>

	default:
		return 0;
	}

	return 1;
  4014a8:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4014aa:	e000      	b.n	4014ae <pio_configure_pin+0x112>

	default:
		return 0;
  4014ac:	2000      	movs	r0, #0
	}

	return 1;
}
  4014ae:	b002      	add	sp, #8
  4014b0:	bd70      	pop	{r4, r5, r6, pc}
  4014b2:	bf00      	nop

004014b4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  4014b4:	b570      	push	{r4, r5, r6, lr}
  4014b6:	b082      	sub	sp, #8
  4014b8:	4605      	mov	r5, r0
  4014ba:	460e      	mov	r6, r1
  4014bc:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4014be:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4014c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4014c6:	d038      	beq.n	40153a <pio_configure_pin_group+0x86>
  4014c8:	d809      	bhi.n	4014de <pio_configure_pin_group+0x2a>
  4014ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4014ce:	d01c      	beq.n	40150a <pio_configure_pin_group+0x56>
  4014d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4014d4:	d025      	beq.n	401522 <pio_configure_pin_group+0x6e>
  4014d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4014da:	d150      	bne.n	40157e <pio_configure_pin_group+0xca>
  4014dc:	e009      	b.n	4014f2 <pio_configure_pin_group+0x3e>
  4014de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4014e2:	d03a      	beq.n	40155a <pio_configure_pin_group+0xa6>
  4014e4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4014e8:	d037      	beq.n	40155a <pio_configure_pin_group+0xa6>
  4014ea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4014ee:	d030      	beq.n	401552 <pio_configure_pin_group+0x9e>
  4014f0:	e045      	b.n	40157e <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4014f2:	460a      	mov	r2, r1
  4014f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4014f8:	f7ff fed6 	bl	4012a8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4014fc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401500:	bf14      	ite	ne
  401502:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401504:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401506:	2001      	movs	r0, #1
  401508:	e03a      	b.n	401580 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40150a:	460a      	mov	r2, r1
  40150c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401510:	f7ff feca 	bl	4012a8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401514:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401518:	bf14      	ite	ne
  40151a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40151c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40151e:	2001      	movs	r0, #1
  401520:	e02e      	b.n	401580 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  401522:	460a      	mov	r2, r1
  401524:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401528:	f7ff febe 	bl	4012a8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40152c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401530:	bf14      	ite	ne
  401532:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401534:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  401536:	2001      	movs	r0, #1
  401538:	e022      	b.n	401580 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40153a:	460a      	mov	r2, r1
  40153c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401540:	f7ff feb2 	bl	4012a8 <pio_set_peripheral>
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401544:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  401548:	bf14      	ite	ne
  40154a:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40154c:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40154e:	2001      	movs	r0, #1
  401550:	e016      	b.n	401580 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  401552:	f7ff fef1 	bl	401338 <pio_set_input>

	default:
		return 0;
	}

	return 1;
  401556:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  401558:	e012      	b.n	401580 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  40155a:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  40155e:	f004 0301 	and.w	r3, r4, #1
  401562:	9300      	str	r3, [sp, #0]
  401564:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401568:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40156c:	bf14      	ite	ne
  40156e:	2200      	movne	r2, #0
  401570:	2201      	moveq	r2, #1
  401572:	4631      	mov	r1, r6
  401574:	4628      	mov	r0, r5
  401576:	f7ff fef9 	bl	40136c <pio_set_output>

	default:
		return 0;
	}

	return 1;
  40157a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  40157c:	e000      	b.n	401580 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  40157e:	2000      	movs	r0, #0
	}

	return 1;
}
  401580:	b002      	add	sp, #8
  401582:	bd70      	pop	{r4, r5, r6, pc}

00401584 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401588:	4681      	mov	r9, r0
  40158a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40158c:	f7ff ff02 	bl	401394 <pio_get_interrupt_status>
  401590:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401592:	4648      	mov	r0, r9
  401594:	f7ff ff00 	bl	401398 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
  401598:	4005      	ands	r5, r0
  40159a:	d013      	beq.n	4015c4 <pio_handler_process+0x40>
  40159c:	4c0e      	ldr	r4, [pc, #56]	; (4015d8 <pio_handler_process+0x54>)
  40159e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4015a2:	6823      	ldr	r3, [r4, #0]
  4015a4:	4543      	cmp	r3, r8
  4015a6:	d108      	bne.n	4015ba <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4015a8:	6861      	ldr	r1, [r4, #4]
  4015aa:	4229      	tst	r1, r5
  4015ac:	d005      	beq.n	4015ba <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4015ae:	68e3      	ldr	r3, [r4, #12]
  4015b0:	4640      	mov	r0, r8
  4015b2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4015b4:	6863      	ldr	r3, [r4, #4]
  4015b6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4015ba:	42b4      	cmp	r4, r6
  4015bc:	d002      	beq.n	4015c4 <pio_handler_process+0x40>
  4015be:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4015c0:	2d00      	cmp	r5, #0
  4015c2:	d1ee      	bne.n	4015a2 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4015c4:	4b05      	ldr	r3, [pc, #20]	; (4015dc <pio_handler_process+0x58>)
  4015c6:	681b      	ldr	r3, [r3, #0]
  4015c8:	b123      	cbz	r3, 4015d4 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4015ca:	4b05      	ldr	r3, [pc, #20]	; (4015e0 <pio_handler_process+0x5c>)
  4015cc:	681b      	ldr	r3, [r3, #0]
  4015ce:	b10b      	cbz	r3, 4015d4 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4015d0:	4648      	mov	r0, r9
  4015d2:	4798      	blx	r3
  4015d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4015d8:	20000224 	.word	0x20000224
  4015dc:	2000032c 	.word	0x2000032c
  4015e0:	20000220 	.word	0x20000220

004015e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4015e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4015e6:	210b      	movs	r1, #11
  4015e8:	4801      	ldr	r0, [pc, #4]	; (4015f0 <PIOA_Handler+0xc>)
  4015ea:	f7ff ffcb 	bl	401584 <pio_handler_process>
  4015ee:	bd08      	pop	{r3, pc}
  4015f0:	400e0e00 	.word	0x400e0e00

004015f4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4015f4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4015f6:	210c      	movs	r1, #12
  4015f8:	4801      	ldr	r0, [pc, #4]	; (401600 <PIOB_Handler+0xc>)
  4015fa:	f7ff ffc3 	bl	401584 <pio_handler_process>
  4015fe:	bd08      	pop	{r3, pc}
  401600:	400e1000 	.word	0x400e1000

00401604 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401604:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401606:	210d      	movs	r1, #13
  401608:	4801      	ldr	r0, [pc, #4]	; (401610 <PIOC_Handler+0xc>)
  40160a:	f7ff ffbb 	bl	401584 <pio_handler_process>
  40160e:	bd08      	pop	{r3, pc}
  401610:	400e1200 	.word	0x400e1200

00401614 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401614:	4a18      	ldr	r2, [pc, #96]	; (401678 <pmc_switch_mck_to_pllack+0x64>)
  401616:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40161c:	4318      	orrs	r0, r3
  40161e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401620:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401622:	f013 0f08 	tst.w	r3, #8
  401626:	d003      	beq.n	401630 <pmc_switch_mck_to_pllack+0x1c>
  401628:	e009      	b.n	40163e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40162a:	3b01      	subs	r3, #1
  40162c:	d103      	bne.n	401636 <pmc_switch_mck_to_pllack+0x22>
  40162e:	e01e      	b.n	40166e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401630:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401634:	4910      	ldr	r1, [pc, #64]	; (401678 <pmc_switch_mck_to_pllack+0x64>)
  401636:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401638:	f012 0f08 	tst.w	r2, #8
  40163c:	d0f5      	beq.n	40162a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40163e:	4a0e      	ldr	r2, [pc, #56]	; (401678 <pmc_switch_mck_to_pllack+0x64>)
  401640:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401642:	f023 0303 	bic.w	r3, r3, #3
  401646:	f043 0302 	orr.w	r3, r3, #2
  40164a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40164c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40164e:	f010 0008 	ands.w	r0, r0, #8
  401652:	d004      	beq.n	40165e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401654:	2000      	movs	r0, #0
  401656:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401658:	3b01      	subs	r3, #1
  40165a:	d103      	bne.n	401664 <pmc_switch_mck_to_pllack+0x50>
  40165c:	e009      	b.n	401672 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40165e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401662:	4905      	ldr	r1, [pc, #20]	; (401678 <pmc_switch_mck_to_pllack+0x64>)
  401664:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401666:	f012 0f08 	tst.w	r2, #8
  40166a:	d0f5      	beq.n	401658 <pmc_switch_mck_to_pllack+0x44>
  40166c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40166e:	2001      	movs	r0, #1
  401670:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401672:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401674:	4770      	bx	lr
  401676:	bf00      	nop
  401678:	400e0400 	.word	0x400e0400

0040167c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40167c:	b138      	cbz	r0, 40168e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40167e:	4911      	ldr	r1, [pc, #68]	; (4016c4 <pmc_switch_mainck_to_xtal+0x48>)
  401680:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401682:	4a11      	ldr	r2, [pc, #68]	; (4016c8 <pmc_switch_mainck_to_xtal+0x4c>)
  401684:	401a      	ands	r2, r3
  401686:	4b11      	ldr	r3, [pc, #68]	; (4016cc <pmc_switch_mainck_to_xtal+0x50>)
  401688:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40168a:	620b      	str	r3, [r1, #32]
  40168c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40168e:	480d      	ldr	r0, [pc, #52]	; (4016c4 <pmc_switch_mainck_to_xtal+0x48>)
  401690:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401692:	0209      	lsls	r1, r1, #8
  401694:	b289      	uxth	r1, r1
  401696:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40169a:	f023 0303 	bic.w	r3, r3, #3
  40169e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4016a2:	f043 0301 	orr.w	r3, r3, #1
  4016a6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4016a8:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4016aa:	4602      	mov	r2, r0
  4016ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016ae:	f013 0f01 	tst.w	r3, #1
  4016b2:	d0fb      	beq.n	4016ac <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4016b4:	4a03      	ldr	r2, [pc, #12]	; (4016c4 <pmc_switch_mainck_to_xtal+0x48>)
  4016b6:	6a13      	ldr	r3, [r2, #32]
  4016b8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4016c0:	6213      	str	r3, [r2, #32]
  4016c2:	4770      	bx	lr
  4016c4:	400e0400 	.word	0x400e0400
  4016c8:	fec8fffc 	.word	0xfec8fffc
  4016cc:	01370002 	.word	0x01370002

004016d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4016d0:	4b02      	ldr	r3, [pc, #8]	; (4016dc <pmc_osc_is_ready_mainck+0xc>)
  4016d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4016d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4016d8:	4770      	bx	lr
  4016da:	bf00      	nop
  4016dc:	400e0400 	.word	0x400e0400

004016e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4016e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4016e4:	4b01      	ldr	r3, [pc, #4]	; (4016ec <pmc_disable_pllack+0xc>)
  4016e6:	629a      	str	r2, [r3, #40]	; 0x28
  4016e8:	4770      	bx	lr
  4016ea:	bf00      	nop
  4016ec:	400e0400 	.word	0x400e0400

004016f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4016f0:	4b02      	ldr	r3, [pc, #8]	; (4016fc <pmc_is_locked_pllack+0xc>)
  4016f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4016f4:	f000 0002 	and.w	r0, r0, #2
  4016f8:	4770      	bx	lr
  4016fa:	bf00      	nop
  4016fc:	400e0400 	.word	0x400e0400

00401700 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401700:	2822      	cmp	r0, #34	; 0x22
  401702:	d81e      	bhi.n	401742 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401704:	281f      	cmp	r0, #31
  401706:	d80c      	bhi.n	401722 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401708:	4b11      	ldr	r3, [pc, #68]	; (401750 <pmc_enable_periph_clk+0x50>)
  40170a:	699a      	ldr	r2, [r3, #24]
  40170c:	2301      	movs	r3, #1
  40170e:	4083      	lsls	r3, r0
  401710:	4393      	bics	r3, r2
  401712:	d018      	beq.n	401746 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401714:	2301      	movs	r3, #1
  401716:	fa03 f000 	lsl.w	r0, r3, r0
  40171a:	4b0d      	ldr	r3, [pc, #52]	; (401750 <pmc_enable_periph_clk+0x50>)
  40171c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40171e:	2000      	movs	r0, #0
  401720:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401722:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401724:	4b0a      	ldr	r3, [pc, #40]	; (401750 <pmc_enable_periph_clk+0x50>)
  401726:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40172a:	2301      	movs	r3, #1
  40172c:	4083      	lsls	r3, r0
  40172e:	4393      	bics	r3, r2
  401730:	d00b      	beq.n	40174a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401732:	2301      	movs	r3, #1
  401734:	fa03 f000 	lsl.w	r0, r3, r0
  401738:	4b05      	ldr	r3, [pc, #20]	; (401750 <pmc_enable_periph_clk+0x50>)
  40173a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40173e:	2000      	movs	r0, #0
  401740:	4770      	bx	lr
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401742:	2001      	movs	r0, #1
  401744:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401746:	2000      	movs	r0, #0
  401748:	4770      	bx	lr
  40174a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40174c:	4770      	bx	lr
  40174e:	bf00      	nop
  401750:	400e0400 	.word	0x400e0400

00401754 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401758:	6043      	str	r3, [r0, #4]
  40175a:	4770      	bx	lr

0040175c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40175c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40175e:	23ac      	movs	r3, #172	; 0xac
  401760:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401762:	680b      	ldr	r3, [r1, #0]
  401764:	684a      	ldr	r2, [r1, #4]
  401766:	fbb3 f3f2 	udiv	r3, r3, r2
  40176a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40176c:	1e5c      	subs	r4, r3, #1
  40176e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401772:	4294      	cmp	r4, r2
  401774:	d80a      	bhi.n	40178c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  401776:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401778:	688b      	ldr	r3, [r1, #8]
  40177a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40177c:	f240 2302 	movw	r3, #514	; 0x202
  401780:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401784:	2350      	movs	r3, #80	; 0x50
  401786:	6003      	str	r3, [r0, #0]

	return 0;
  401788:	2000      	movs	r0, #0
  40178a:	e000      	b.n	40178e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  40178c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40178e:	bc10      	pop	{r4}
  401790:	4770      	bx	lr
  401792:	bf00      	nop

00401794 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401794:	6943      	ldr	r3, [r0, #20]
  401796:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40179a:	bf1a      	itte	ne
  40179c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40179e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4017a0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4017a2:	4770      	bx	lr

004017a4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4017a4:	6943      	ldr	r3, [r0, #20]
  4017a6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4017aa:	bf1d      	ittte	ne
  4017ac:	6983      	ldrne	r3, [r0, #24]
  4017ae:	700b      	strbne	r3, [r1, #0]
	return 0;
  4017b0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  4017b2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  4017b4:	4770      	bx	lr
  4017b6:	bf00      	nop

004017b8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4017b8:	6943      	ldr	r3, [r0, #20]
  4017ba:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4017be:	bf1d      	ittte	ne
  4017c0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4017c4:	61c1      	strne	r1, [r0, #28]
	return 0;
  4017c6:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4017c8:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4017ca:	4770      	bx	lr

004017cc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4017cc:	6943      	ldr	r3, [r0, #20]
  4017ce:	f013 0f01 	tst.w	r3, #1
  4017d2:	d005      	beq.n	4017e0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4017d4:	6983      	ldr	r3, [r0, #24]
  4017d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4017da:	600b      	str	r3, [r1, #0]

	return 0;
  4017dc:	2000      	movs	r0, #0
  4017de:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4017e0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4017e2:	4770      	bx	lr

004017e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4017e4:	e7fe      	b.n	4017e4 <Dummy_Handler>
  4017e6:	bf00      	nop

004017e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4017e8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4017ea:	4b20      	ldr	r3, [pc, #128]	; (40186c <Reset_Handler+0x84>)
  4017ec:	4a20      	ldr	r2, [pc, #128]	; (401870 <Reset_Handler+0x88>)
  4017ee:	429a      	cmp	r2, r3
  4017f0:	d912      	bls.n	401818 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  4017f2:	4b20      	ldr	r3, [pc, #128]	; (401874 <Reset_Handler+0x8c>)
  4017f4:	4a1d      	ldr	r2, [pc, #116]	; (40186c <Reset_Handler+0x84>)
  4017f6:	429a      	cmp	r2, r3
  4017f8:	d21e      	bcs.n	401838 <Reset_Handler+0x50>
  4017fa:	4611      	mov	r1, r2
  4017fc:	3b01      	subs	r3, #1
  4017fe:	1a9b      	subs	r3, r3, r2
  401800:	f023 0303 	bic.w	r3, r3, #3
  401804:	3304      	adds	r3, #4
  401806:	4a1a      	ldr	r2, [pc, #104]	; (401870 <Reset_Handler+0x88>)
  401808:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  40180a:	f852 0b04 	ldr.w	r0, [r2], #4
  40180e:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401812:	429a      	cmp	r2, r3
  401814:	d1f9      	bne.n	40180a <Reset_Handler+0x22>
  401816:	e00f      	b.n	401838 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401818:	4b14      	ldr	r3, [pc, #80]	; (40186c <Reset_Handler+0x84>)
  40181a:	4a15      	ldr	r2, [pc, #84]	; (401870 <Reset_Handler+0x88>)
  40181c:	429a      	cmp	r2, r3
  40181e:	d20b      	bcs.n	401838 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401820:	4b14      	ldr	r3, [pc, #80]	; (401874 <Reset_Handler+0x8c>)
  401822:	4a12      	ldr	r2, [pc, #72]	; (40186c <Reset_Handler+0x84>)
  401824:	1a9a      	subs	r2, r3, r2
  401826:	4814      	ldr	r0, [pc, #80]	; (401878 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401828:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40182a:	b12a      	cbz	r2, 401838 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  40182c:	f851 2904 	ldr.w	r2, [r1], #-4
  401830:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401834:	4281      	cmp	r1, r0
  401836:	d1f9      	bne.n	40182c <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401838:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40183a:	4b10      	ldr	r3, [pc, #64]	; (40187c <Reset_Handler+0x94>)
  40183c:	4a10      	ldr	r2, [pc, #64]	; (401880 <Reset_Handler+0x98>)
  40183e:	429a      	cmp	r2, r3
  401840:	d20b      	bcs.n	40185a <Reset_Handler+0x72>
  401842:	1d13      	adds	r3, r2, #4
  401844:	4a0f      	ldr	r2, [pc, #60]	; (401884 <Reset_Handler+0x9c>)
  401846:	1ad2      	subs	r2, r2, r3
  401848:	f022 0203 	bic.w	r2, r2, #3
  40184c:	441a      	add	r2, r3
  40184e:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401850:	2100      	movs	r1, #0
  401852:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401856:	429a      	cmp	r2, r3
  401858:	d1fb      	bne.n	401852 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  40185a:	4b0b      	ldr	r3, [pc, #44]	; (401888 <Reset_Handler+0xa0>)
  40185c:	4a0b      	ldr	r2, [pc, #44]	; (40188c <Reset_Handler+0xa4>)
  40185e:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401860:	f000 fca8 	bl	4021b4 <__libc_init_array>

	/* Branch to main function */
	main();
  401864:	f7fe fd50 	bl	400308 <main>
  401868:	e7fe      	b.n	401868 <Reset_Handler+0x80>
  40186a:	bf00      	nop
  40186c:	20000000 	.word	0x20000000
  401870:	00406044 	.word	0x00406044
  401874:	200001e4 	.word	0x200001e4
  401878:	00406040 	.word	0x00406040
  40187c:	20000334 	.word	0x20000334
  401880:	200001e4 	.word	0x200001e4
  401884:	20000337 	.word	0x20000337
  401888:	e000ed00 	.word	0xe000ed00
  40188c:	00400000 	.word	0x00400000

00401890 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401890:	4b3d      	ldr	r3, [pc, #244]	; (401988 <SystemCoreClockUpdate+0xf8>)
  401892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401894:	f003 0303 	and.w	r3, r3, #3
  401898:	2b03      	cmp	r3, #3
  40189a:	d85d      	bhi.n	401958 <SystemCoreClockUpdate+0xc8>
  40189c:	e8df f003 	tbb	[pc, r3]
  4018a0:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4018a4:	4b39      	ldr	r3, [pc, #228]	; (40198c <SystemCoreClockUpdate+0xfc>)
  4018a6:	695b      	ldr	r3, [r3, #20]
  4018a8:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4018ac:	bf14      	ite	ne
  4018ae:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4018b2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4018b6:	4b36      	ldr	r3, [pc, #216]	; (401990 <SystemCoreClockUpdate+0x100>)
  4018b8:	601a      	str	r2, [r3, #0]
  4018ba:	e04d      	b.n	401958 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4018bc:	4b32      	ldr	r3, [pc, #200]	; (401988 <SystemCoreClockUpdate+0xf8>)
  4018be:	6a1b      	ldr	r3, [r3, #32]
  4018c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4018c4:	d003      	beq.n	4018ce <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4018c6:	4a33      	ldr	r2, [pc, #204]	; (401994 <SystemCoreClockUpdate+0x104>)
  4018c8:	4b31      	ldr	r3, [pc, #196]	; (401990 <SystemCoreClockUpdate+0x100>)
  4018ca:	601a      	str	r2, [r3, #0]
  4018cc:	e044      	b.n	401958 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018ce:	4a32      	ldr	r2, [pc, #200]	; (401998 <SystemCoreClockUpdate+0x108>)
  4018d0:	4b2f      	ldr	r3, [pc, #188]	; (401990 <SystemCoreClockUpdate+0x100>)
  4018d2:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4018d4:	4b2c      	ldr	r3, [pc, #176]	; (401988 <SystemCoreClockUpdate+0xf8>)
  4018d6:	6a1b      	ldr	r3, [r3, #32]
  4018d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018dc:	2b10      	cmp	r3, #16
  4018de:	d002      	beq.n	4018e6 <SystemCoreClockUpdate+0x56>
  4018e0:	2b20      	cmp	r3, #32
  4018e2:	d004      	beq.n	4018ee <SystemCoreClockUpdate+0x5e>
  4018e4:	e038      	b.n	401958 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4018e6:	4a2d      	ldr	r2, [pc, #180]	; (40199c <SystemCoreClockUpdate+0x10c>)
  4018e8:	4b29      	ldr	r3, [pc, #164]	; (401990 <SystemCoreClockUpdate+0x100>)
  4018ea:	601a      	str	r2, [r3, #0]
			break;
  4018ec:	e034      	b.n	401958 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4018ee:	4a29      	ldr	r2, [pc, #164]	; (401994 <SystemCoreClockUpdate+0x104>)
  4018f0:	4b27      	ldr	r3, [pc, #156]	; (401990 <SystemCoreClockUpdate+0x100>)
  4018f2:	601a      	str	r2, [r3, #0]
			break;
  4018f4:	e030      	b.n	401958 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4018f6:	4b24      	ldr	r3, [pc, #144]	; (401988 <SystemCoreClockUpdate+0xf8>)
  4018f8:	6a1b      	ldr	r3, [r3, #32]
  4018fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4018fe:	d003      	beq.n	401908 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401900:	4a24      	ldr	r2, [pc, #144]	; (401994 <SystemCoreClockUpdate+0x104>)
  401902:	4b23      	ldr	r3, [pc, #140]	; (401990 <SystemCoreClockUpdate+0x100>)
  401904:	601a      	str	r2, [r3, #0]
  401906:	e012      	b.n	40192e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401908:	4a23      	ldr	r2, [pc, #140]	; (401998 <SystemCoreClockUpdate+0x108>)
  40190a:	4b21      	ldr	r3, [pc, #132]	; (401990 <SystemCoreClockUpdate+0x100>)
  40190c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40190e:	4b1e      	ldr	r3, [pc, #120]	; (401988 <SystemCoreClockUpdate+0xf8>)
  401910:	6a1b      	ldr	r3, [r3, #32]
  401912:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401916:	2b10      	cmp	r3, #16
  401918:	d002      	beq.n	401920 <SystemCoreClockUpdate+0x90>
  40191a:	2b20      	cmp	r3, #32
  40191c:	d004      	beq.n	401928 <SystemCoreClockUpdate+0x98>
  40191e:	e006      	b.n	40192e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401920:	4a1e      	ldr	r2, [pc, #120]	; (40199c <SystemCoreClockUpdate+0x10c>)
  401922:	4b1b      	ldr	r3, [pc, #108]	; (401990 <SystemCoreClockUpdate+0x100>)
  401924:	601a      	str	r2, [r3, #0]
					break;
  401926:	e002      	b.n	40192e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401928:	4a1a      	ldr	r2, [pc, #104]	; (401994 <SystemCoreClockUpdate+0x104>)
  40192a:	4b19      	ldr	r3, [pc, #100]	; (401990 <SystemCoreClockUpdate+0x100>)
  40192c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40192e:	4b16      	ldr	r3, [pc, #88]	; (401988 <SystemCoreClockUpdate+0xf8>)
  401930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401932:	f003 0303 	and.w	r3, r3, #3
  401936:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401938:	4a13      	ldr	r2, [pc, #76]	; (401988 <SystemCoreClockUpdate+0xf8>)
  40193a:	bf07      	ittee	eq
  40193c:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40193e:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401940:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401942:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  401944:	4812      	ldr	r0, [pc, #72]	; (401990 <SystemCoreClockUpdate+0x100>)
  401946:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40194a:	6803      	ldr	r3, [r0, #0]
  40194c:	fb01 3303 	mla	r3, r1, r3, r3
  401950:	b2d2      	uxtb	r2, r2
  401952:	fbb3 f3f2 	udiv	r3, r3, r2
  401956:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401958:	4b0b      	ldr	r3, [pc, #44]	; (401988 <SystemCoreClockUpdate+0xf8>)
  40195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40195c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401960:	2b70      	cmp	r3, #112	; 0x70
  401962:	d107      	bne.n	401974 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  401964:	4a0a      	ldr	r2, [pc, #40]	; (401990 <SystemCoreClockUpdate+0x100>)
  401966:	6813      	ldr	r3, [r2, #0]
  401968:	490d      	ldr	r1, [pc, #52]	; (4019a0 <SystemCoreClockUpdate+0x110>)
  40196a:	fba1 1303 	umull	r1, r3, r1, r3
  40196e:	085b      	lsrs	r3, r3, #1
  401970:	6013      	str	r3, [r2, #0]
  401972:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401974:	4b04      	ldr	r3, [pc, #16]	; (401988 <SystemCoreClockUpdate+0xf8>)
  401976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401978:	4905      	ldr	r1, [pc, #20]	; (401990 <SystemCoreClockUpdate+0x100>)
  40197a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40197e:	680b      	ldr	r3, [r1, #0]
  401980:	40d3      	lsrs	r3, r2
  401982:	600b      	str	r3, [r1, #0]
  401984:	4770      	bx	lr
  401986:	bf00      	nop
  401988:	400e0400 	.word	0x400e0400
  40198c:	400e1410 	.word	0x400e1410
  401990:	2000000c 	.word	0x2000000c
  401994:	00b71b00 	.word	0x00b71b00
  401998:	003d0900 	.word	0x003d0900
  40199c:	007a1200 	.word	0x007a1200
  4019a0:	aaaaaaab 	.word	0xaaaaaaab

004019a4 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4019a4:	4b1a      	ldr	r3, [pc, #104]	; (401a10 <system_init_flash+0x6c>)
  4019a6:	4298      	cmp	r0, r3
  4019a8:	d807      	bhi.n	4019ba <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4019aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4019ae:	4a19      	ldr	r2, [pc, #100]	; (401a14 <system_init_flash+0x70>)
  4019b0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4019b2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4019b6:	6013      	str	r3, [r2, #0]
  4019b8:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4019ba:	4b17      	ldr	r3, [pc, #92]	; (401a18 <system_init_flash+0x74>)
  4019bc:	4298      	cmp	r0, r3
  4019be:	d806      	bhi.n	4019ce <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4019c0:	4b16      	ldr	r3, [pc, #88]	; (401a1c <system_init_flash+0x78>)
  4019c2:	4a14      	ldr	r2, [pc, #80]	; (401a14 <system_init_flash+0x70>)
  4019c4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4019c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4019ca:	6013      	str	r3, [r2, #0]
  4019cc:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4019ce:	4b14      	ldr	r3, [pc, #80]	; (401a20 <system_init_flash+0x7c>)
  4019d0:	4298      	cmp	r0, r3
  4019d2:	d806      	bhi.n	4019e2 <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4019d4:	4b13      	ldr	r3, [pc, #76]	; (401a24 <system_init_flash+0x80>)
  4019d6:	4a0f      	ldr	r2, [pc, #60]	; (401a14 <system_init_flash+0x70>)
  4019d8:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4019da:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4019de:	6013      	str	r3, [r2, #0]
  4019e0:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4019e2:	4b11      	ldr	r3, [pc, #68]	; (401a28 <system_init_flash+0x84>)
  4019e4:	4298      	cmp	r0, r3
  4019e6:	d806      	bhi.n	4019f6 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4019e8:	4b10      	ldr	r3, [pc, #64]	; (401a2c <system_init_flash+0x88>)
  4019ea:	4a0a      	ldr	r2, [pc, #40]	; (401a14 <system_init_flash+0x70>)
  4019ec:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4019ee:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4019f2:	6013      	str	r3, [r2, #0]
  4019f4:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4019f6:	4b0e      	ldr	r3, [pc, #56]	; (401a30 <system_init_flash+0x8c>)
  4019f8:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4019fa:	bf94      	ite	ls
  4019fc:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401a00:	4b0c      	ldrhi	r3, [pc, #48]	; (401a34 <system_init_flash+0x90>)
  401a02:	4a04      	ldr	r2, [pc, #16]	; (401a14 <system_init_flash+0x70>)
  401a04:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401a06:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401a0a:	6013      	str	r3, [r2, #0]
  401a0c:	4770      	bx	lr
  401a0e:	bf00      	nop
  401a10:	01312cff 	.word	0x01312cff
  401a14:	400e0a00 	.word	0x400e0a00
  401a18:	026259ff 	.word	0x026259ff
  401a1c:	04000100 	.word	0x04000100
  401a20:	039386ff 	.word	0x039386ff
  401a24:	04000200 	.word	0x04000200
  401a28:	04c4b3ff 	.word	0x04c4b3ff
  401a2c:	04000300 	.word	0x04000300
  401a30:	05f5e0ff 	.word	0x05f5e0ff
  401a34:	04000500 	.word	0x04000500

00401a38 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401a38:	4b09      	ldr	r3, [pc, #36]	; (401a60 <_sbrk+0x28>)
  401a3a:	681b      	ldr	r3, [r3, #0]
  401a3c:	b913      	cbnz	r3, 401a44 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  401a3e:	4a09      	ldr	r2, [pc, #36]	; (401a64 <_sbrk+0x2c>)
  401a40:	4b07      	ldr	r3, [pc, #28]	; (401a60 <_sbrk+0x28>)
  401a42:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401a44:	4b06      	ldr	r3, [pc, #24]	; (401a60 <_sbrk+0x28>)
  401a46:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401a48:	181a      	adds	r2, r3, r0
  401a4a:	4907      	ldr	r1, [pc, #28]	; (401a68 <_sbrk+0x30>)
  401a4c:	4291      	cmp	r1, r2
  401a4e:	db04      	blt.n	401a5a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  401a50:	4610      	mov	r0, r2
  401a52:	4a03      	ldr	r2, [pc, #12]	; (401a60 <_sbrk+0x28>)
  401a54:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401a56:	4618      	mov	r0, r3
  401a58:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401a5e:	4770      	bx	lr
  401a60:	20000294 	.word	0x20000294
  401a64:	20003338 	.word	0x20003338
  401a68:	20027ffc 	.word	0x20027ffc

00401a6c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  401a70:	4770      	bx	lr
  401a72:	bf00      	nop

00401a74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401a78:	604b      	str	r3, [r1, #4]

	return 0;
}
  401a7a:	2000      	movs	r0, #0
  401a7c:	4770      	bx	lr
  401a7e:	bf00      	nop

00401a80 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401a80:	2001      	movs	r0, #1
  401a82:	4770      	bx	lr

00401a84 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401a84:	2000      	movs	r0, #0
  401a86:	4770      	bx	lr

00401a88 <atan2>:
  401a88:	f000 b85e 	b.w	401b48 <__ieee754_atan2>

00401a8c <sqrt>:
  401a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a90:	b08b      	sub	sp, #44	; 0x2c
  401a92:	4604      	mov	r4, r0
  401a94:	460d      	mov	r5, r1
  401a96:	f000 f921 	bl	401cdc <__ieee754_sqrt>
  401a9a:	4b28      	ldr	r3, [pc, #160]	; (401b3c <sqrt+0xb0>)
  401a9c:	f993 a000 	ldrsb.w	sl, [r3]
  401aa0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
  401aa4:	4606      	mov	r6, r0
  401aa6:	460f      	mov	r7, r1
  401aa8:	d012      	beq.n	401ad0 <sqrt+0x44>
  401aaa:	4622      	mov	r2, r4
  401aac:	462b      	mov	r3, r5
  401aae:	4620      	mov	r0, r4
  401ab0:	4629      	mov	r1, r5
  401ab2:	f003 fc95 	bl	4053e0 <__aeabi_dcmpun>
  401ab6:	4683      	mov	fp, r0
  401ab8:	b950      	cbnz	r0, 401ad0 <sqrt+0x44>
  401aba:	f04f 0800 	mov.w	r8, #0
  401abe:	f04f 0900 	mov.w	r9, #0
  401ac2:	4642      	mov	r2, r8
  401ac4:	464b      	mov	r3, r9
  401ac6:	4620      	mov	r0, r4
  401ac8:	4629      	mov	r1, r5
  401aca:	f003 fc61 	bl	405390 <__aeabi_dcmplt>
  401ace:	b920      	cbnz	r0, 401ada <sqrt+0x4e>
  401ad0:	4630      	mov	r0, r6
  401ad2:	4639      	mov	r1, r7
  401ad4:	b00b      	add	sp, #44	; 0x2c
  401ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ada:	4b19      	ldr	r3, [pc, #100]	; (401b40 <sqrt+0xb4>)
  401adc:	f8cd b020 	str.w	fp, [sp, #32]
  401ae0:	2201      	movs	r2, #1
  401ae2:	e9cd 4504 	strd	r4, r5, [sp, #16]
  401ae6:	e9cd 4502 	strd	r4, r5, [sp, #8]
  401aea:	e88d 000c 	stmia.w	sp, {r2, r3}
  401aee:	f1ba 0f00 	cmp.w	sl, #0
  401af2:	d015      	beq.n	401b20 <sqrt+0x94>
  401af4:	4642      	mov	r2, r8
  401af6:	464b      	mov	r3, r9
  401af8:	4640      	mov	r0, r8
  401afa:	4649      	mov	r1, r9
  401afc:	f003 fb00 	bl	405100 <__aeabi_ddiv>
  401b00:	f1ba 0f02 	cmp.w	sl, #2
  401b04:	e9cd 0106 	strd	r0, r1, [sp, #24]
  401b08:	d10c      	bne.n	401b24 <sqrt+0x98>
  401b0a:	f000 fb4d 	bl	4021a8 <__errno>
  401b0e:	2321      	movs	r3, #33	; 0x21
  401b10:	6003      	str	r3, [r0, #0]
  401b12:	9b08      	ldr	r3, [sp, #32]
  401b14:	b963      	cbnz	r3, 401b30 <sqrt+0xa4>
  401b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  401b1a:	b00b      	add	sp, #44	; 0x2c
  401b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b20:	e9cd 8906 	strd	r8, r9, [sp, #24]
  401b24:	4668      	mov	r0, sp
  401b26:	f000 fb3d 	bl	4021a4 <matherr>
  401b2a:	2800      	cmp	r0, #0
  401b2c:	d1f1      	bne.n	401b12 <sqrt+0x86>
  401b2e:	e7ec      	b.n	401b0a <sqrt+0x7e>
  401b30:	f000 fb3a 	bl	4021a8 <__errno>
  401b34:	9b08      	ldr	r3, [sp, #32]
  401b36:	6003      	str	r3, [r0, #0]
  401b38:	e7ed      	b.n	401b16 <sqrt+0x8a>
  401b3a:	bf00      	nop
  401b3c:	20000010 	.word	0x20000010
  401b40:	00405d0c 	.word	0x00405d0c
  401b44:	00000000 	.word	0x00000000

00401b48 <__ieee754_atan2>:
  401b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b4c:	4254      	negs	r4, r2
  401b4e:	4314      	orrs	r4, r2
  401b50:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  401b54:	f8df e180 	ldr.w	lr, [pc, #384]	; 401cd8 <__ieee754_atan2+0x190>
  401b58:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  401b5c:	4574      	cmp	r4, lr
  401b5e:	4606      	mov	r6, r0
  401b60:	460d      	mov	r5, r1
  401b62:	d83e      	bhi.n	401be2 <__ieee754_atan2+0x9a>
  401b64:	4244      	negs	r4, r0
  401b66:	4304      	orrs	r4, r0
  401b68:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  401b6c:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  401b70:	4574      	cmp	r4, lr
  401b72:	468a      	mov	sl, r1
  401b74:	d835      	bhi.n	401be2 <__ieee754_atan2+0x9a>
  401b76:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  401b7a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  401b7e:	4314      	orrs	r4, r2
  401b80:	d044      	beq.n	401c0c <__ieee754_atan2+0xc4>
  401b82:	179c      	asrs	r4, r3, #30
  401b84:	f004 0402 	and.w	r4, r4, #2
  401b88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  401b8c:	ea50 010b 	orrs.w	r1, r0, fp
  401b90:	d02f      	beq.n	401bf2 <__ieee754_atan2+0xaa>
  401b92:	ea52 0109 	orrs.w	r1, r2, r9
  401b96:	d033      	beq.n	401c00 <__ieee754_atan2+0xb8>
  401b98:	45f1      	cmp	r9, lr
  401b9a:	d046      	beq.n	401c2a <__ieee754_atan2+0xe2>
  401b9c:	45f3      	cmp	fp, lr
  401b9e:	d02f      	beq.n	401c00 <__ieee754_atan2+0xb8>
  401ba0:	ebc9 090b 	rsb	r9, r9, fp
  401ba4:	ea4f 5929 	mov.w	r9, r9, asr #20
  401ba8:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  401bac:	dc34      	bgt.n	401c18 <__ieee754_atan2+0xd0>
  401bae:	2b00      	cmp	r3, #0
  401bb0:	db57      	blt.n	401c62 <__ieee754_atan2+0x11a>
  401bb2:	4630      	mov	r0, r6
  401bb4:	4629      	mov	r1, r5
  401bb6:	f003 faa3 	bl	405100 <__aeabi_ddiv>
  401bba:	f000 faef 	bl	40219c <fabs>
  401bbe:	f000 f94f 	bl	401e60 <atan>
  401bc2:	2c01      	cmp	r4, #1
  401bc4:	d04a      	beq.n	401c5c <__ieee754_atan2+0x114>
  401bc6:	2c02      	cmp	r4, #2
  401bc8:	d03b      	beq.n	401c42 <__ieee754_atan2+0xfa>
  401bca:	b184      	cbz	r4, 401bee <__ieee754_atan2+0xa6>
  401bcc:	a332      	add	r3, pc, #200	; (adr r3, 401c98 <__ieee754_atan2+0x150>)
  401bce:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bd2:	f002 ffb7 	bl	404b44 <__aeabi_dsub>
  401bd6:	a332      	add	r3, pc, #200	; (adr r3, 401ca0 <__ieee754_atan2+0x158>)
  401bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
  401bdc:	f002 ffb2 	bl	404b44 <__aeabi_dsub>
  401be0:	e005      	b.n	401bee <__ieee754_atan2+0xa6>
  401be2:	4610      	mov	r0, r2
  401be4:	4619      	mov	r1, r3
  401be6:	4632      	mov	r2, r6
  401be8:	462b      	mov	r3, r5
  401bea:	f002 ffad 	bl	404b48 <__adddf3>
  401bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bf2:	2c02      	cmp	r4, #2
  401bf4:	d014      	beq.n	401c20 <__ieee754_atan2+0xd8>
  401bf6:	2c03      	cmp	r4, #3
  401bf8:	d10c      	bne.n	401c14 <__ieee754_atan2+0xcc>
  401bfa:	482d      	ldr	r0, [pc, #180]	; (401cb0 <__ieee754_atan2+0x168>)
  401bfc:	492d      	ldr	r1, [pc, #180]	; (401cb4 <__ieee754_atan2+0x16c>)
  401bfe:	e7f6      	b.n	401bee <__ieee754_atan2+0xa6>
  401c00:	f1ba 0f00 	cmp.w	sl, #0
  401c04:	482a      	ldr	r0, [pc, #168]	; (401cb0 <__ieee754_atan2+0x168>)
  401c06:	db0e      	blt.n	401c26 <__ieee754_atan2+0xde>
  401c08:	492b      	ldr	r1, [pc, #172]	; (401cb8 <__ieee754_atan2+0x170>)
  401c0a:	e7f0      	b.n	401bee <__ieee754_atan2+0xa6>
  401c0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c10:	f000 b926 	b.w	401e60 <atan>
  401c14:	4629      	mov	r1, r5
  401c16:	e7ea      	b.n	401bee <__ieee754_atan2+0xa6>
  401c18:	a123      	add	r1, pc, #140	; (adr r1, 401ca8 <__ieee754_atan2+0x160>)
  401c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c1e:	e7d0      	b.n	401bc2 <__ieee754_atan2+0x7a>
  401c20:	4823      	ldr	r0, [pc, #140]	; (401cb0 <__ieee754_atan2+0x168>)
  401c22:	4926      	ldr	r1, [pc, #152]	; (401cbc <__ieee754_atan2+0x174>)
  401c24:	e7e3      	b.n	401bee <__ieee754_atan2+0xa6>
  401c26:	4926      	ldr	r1, [pc, #152]	; (401cc0 <__ieee754_atan2+0x178>)
  401c28:	e7e1      	b.n	401bee <__ieee754_atan2+0xa6>
  401c2a:	45cb      	cmp	fp, r9
  401c2c:	d01f      	beq.n	401c6e <__ieee754_atan2+0x126>
  401c2e:	2c02      	cmp	r4, #2
  401c30:	d0f6      	beq.n	401c20 <__ieee754_atan2+0xd8>
  401c32:	2c03      	cmp	r4, #3
  401c34:	d0e1      	beq.n	401bfa <__ieee754_atan2+0xb2>
  401c36:	2c01      	cmp	r4, #1
  401c38:	f04f 0000 	mov.w	r0, #0
  401c3c:	d020      	beq.n	401c80 <__ieee754_atan2+0x138>
  401c3e:	4601      	mov	r1, r0
  401c40:	e7d5      	b.n	401bee <__ieee754_atan2+0xa6>
  401c42:	a315      	add	r3, pc, #84	; (adr r3, 401c98 <__ieee754_atan2+0x150>)
  401c44:	e9d3 2300 	ldrd	r2, r3, [r3]
  401c48:	f002 ff7c 	bl	404b44 <__aeabi_dsub>
  401c4c:	4602      	mov	r2, r0
  401c4e:	460b      	mov	r3, r1
  401c50:	a113      	add	r1, pc, #76	; (adr r1, 401ca0 <__ieee754_atan2+0x158>)
  401c52:	e9d1 0100 	ldrd	r0, r1, [r1]
  401c56:	f002 ff75 	bl	404b44 <__aeabi_dsub>
  401c5a:	e7c8      	b.n	401bee <__ieee754_atan2+0xa6>
  401c5c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401c60:	e7c5      	b.n	401bee <__ieee754_atan2+0xa6>
  401c62:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  401c66:	daa4      	bge.n	401bb2 <__ieee754_atan2+0x6a>
  401c68:	2000      	movs	r0, #0
  401c6a:	2100      	movs	r1, #0
  401c6c:	e7a9      	b.n	401bc2 <__ieee754_atan2+0x7a>
  401c6e:	2c02      	cmp	r4, #2
  401c70:	d00e      	beq.n	401c90 <__ieee754_atan2+0x148>
  401c72:	2c03      	cmp	r4, #3
  401c74:	d009      	beq.n	401c8a <__ieee754_atan2+0x142>
  401c76:	2c01      	cmp	r4, #1
  401c78:	480d      	ldr	r0, [pc, #52]	; (401cb0 <__ieee754_atan2+0x168>)
  401c7a:	d004      	beq.n	401c86 <__ieee754_atan2+0x13e>
  401c7c:	4911      	ldr	r1, [pc, #68]	; (401cc4 <__ieee754_atan2+0x17c>)
  401c7e:	e7b6      	b.n	401bee <__ieee754_atan2+0xa6>
  401c80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401c84:	e7b3      	b.n	401bee <__ieee754_atan2+0xa6>
  401c86:	4910      	ldr	r1, [pc, #64]	; (401cc8 <__ieee754_atan2+0x180>)
  401c88:	e7b1      	b.n	401bee <__ieee754_atan2+0xa6>
  401c8a:	4810      	ldr	r0, [pc, #64]	; (401ccc <__ieee754_atan2+0x184>)
  401c8c:	4910      	ldr	r1, [pc, #64]	; (401cd0 <__ieee754_atan2+0x188>)
  401c8e:	e7ae      	b.n	401bee <__ieee754_atan2+0xa6>
  401c90:	480e      	ldr	r0, [pc, #56]	; (401ccc <__ieee754_atan2+0x184>)
  401c92:	4910      	ldr	r1, [pc, #64]	; (401cd4 <__ieee754_atan2+0x18c>)
  401c94:	e7ab      	b.n	401bee <__ieee754_atan2+0xa6>
  401c96:	bf00      	nop
  401c98:	33145c07 	.word	0x33145c07
  401c9c:	3ca1a626 	.word	0x3ca1a626
  401ca0:	54442d18 	.word	0x54442d18
  401ca4:	400921fb 	.word	0x400921fb
  401ca8:	54442d18 	.word	0x54442d18
  401cac:	3ff921fb 	.word	0x3ff921fb
  401cb0:	54442d18 	.word	0x54442d18
  401cb4:	c00921fb 	.word	0xc00921fb
  401cb8:	3ff921fb 	.word	0x3ff921fb
  401cbc:	400921fb 	.word	0x400921fb
  401cc0:	bff921fb 	.word	0xbff921fb
  401cc4:	3fe921fb 	.word	0x3fe921fb
  401cc8:	bfe921fb 	.word	0xbfe921fb
  401ccc:	7f3321d2 	.word	0x7f3321d2
  401cd0:	c002d97c 	.word	0xc002d97c
  401cd4:	4002d97c 	.word	0x4002d97c
  401cd8:	7ff00000 	.word	0x7ff00000

00401cdc <__ieee754_sqrt>:
  401cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401ce0:	4e5d      	ldr	r6, [pc, #372]	; (401e58 <__ieee754_sqrt+0x17c>)
  401ce2:	46b6      	mov	lr, r6
  401ce4:	400e      	ands	r6, r1
  401ce6:	4576      	cmp	r6, lr
  401ce8:	460c      	mov	r4, r1
  401cea:	4605      	mov	r5, r0
  401cec:	f000 8095 	beq.w	401e1a <__ieee754_sqrt+0x13e>
  401cf0:	2900      	cmp	r1, #0
  401cf2:	460b      	mov	r3, r1
  401cf4:	4602      	mov	r2, r0
  401cf6:	dd73      	ble.n	401de0 <__ieee754_sqrt+0x104>
  401cf8:	150f      	asrs	r7, r1, #20
  401cfa:	d07e      	beq.n	401dfa <__ieee754_sqrt+0x11e>
  401cfc:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  401d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
  401d04:	07f8      	lsls	r0, r7, #31
  401d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401d0a:	d464      	bmi.n	401dd6 <__ieee754_sqrt+0xfa>
  401d0c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  401d10:	2600      	movs	r6, #0
  401d12:	440b      	add	r3, r1
  401d14:	107f      	asrs	r7, r7, #1
  401d16:	0052      	lsls	r2, r2, #1
  401d18:	46b6      	mov	lr, r6
  401d1a:	2016      	movs	r0, #22
  401d1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401d20:	eb0e 0401 	add.w	r4, lr, r1
  401d24:	429c      	cmp	r4, r3
  401d26:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  401d2a:	ea4f 0242 	mov.w	r2, r2, lsl #1
  401d2e:	dc03      	bgt.n	401d38 <__ieee754_sqrt+0x5c>
  401d30:	1b1b      	subs	r3, r3, r4
  401d32:	eb04 0e01 	add.w	lr, r4, r1
  401d36:	440e      	add	r6, r1
  401d38:	3801      	subs	r0, #1
  401d3a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  401d3e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  401d42:	d1ed      	bne.n	401d20 <__ieee754_sqrt+0x44>
  401d44:	4684      	mov	ip, r0
  401d46:	2420      	movs	r4, #32
  401d48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401d4c:	e009      	b.n	401d62 <__ieee754_sqrt+0x86>
  401d4e:	d020      	beq.n	401d92 <__ieee754_sqrt+0xb6>
  401d50:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  401d54:	3c01      	subs	r4, #1
  401d56:	ea4f 0151 	mov.w	r1, r1, lsr #1
  401d5a:	442b      	add	r3, r5
  401d5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
  401d60:	d020      	beq.n	401da4 <__ieee754_sqrt+0xc8>
  401d62:	459e      	cmp	lr, r3
  401d64:	eb01 050c 	add.w	r5, r1, ip
  401d68:	daf1      	bge.n	401d4e <__ieee754_sqrt+0x72>
  401d6a:	2d00      	cmp	r5, #0
  401d6c:	eb05 0c01 	add.w	ip, r5, r1
  401d70:	db09      	blt.n	401d86 <__ieee754_sqrt+0xaa>
  401d72:	46f0      	mov	r8, lr
  401d74:	4295      	cmp	r5, r2
  401d76:	ebce 0303 	rsb	r3, lr, r3
  401d7a:	d900      	bls.n	401d7e <__ieee754_sqrt+0xa2>
  401d7c:	3b01      	subs	r3, #1
  401d7e:	1b52      	subs	r2, r2, r5
  401d80:	4408      	add	r0, r1
  401d82:	46c6      	mov	lr, r8
  401d84:	e7e4      	b.n	401d50 <__ieee754_sqrt+0x74>
  401d86:	f1bc 0f00 	cmp.w	ip, #0
  401d8a:	dbf2      	blt.n	401d72 <__ieee754_sqrt+0x96>
  401d8c:	f10e 0801 	add.w	r8, lr, #1
  401d90:	e7f0      	b.n	401d74 <__ieee754_sqrt+0x98>
  401d92:	4295      	cmp	r5, r2
  401d94:	d817      	bhi.n	401dc6 <__ieee754_sqrt+0xea>
  401d96:	2d00      	cmp	r5, #0
  401d98:	eb05 0c01 	add.w	ip, r5, r1
  401d9c:	db47      	blt.n	401e2e <__ieee754_sqrt+0x152>
  401d9e:	4698      	mov	r8, r3
  401da0:	2300      	movs	r3, #0
  401da2:	e7ec      	b.n	401d7e <__ieee754_sqrt+0xa2>
  401da4:	4313      	orrs	r3, r2
  401da6:	d110      	bne.n	401dca <__ieee754_sqrt+0xee>
  401da8:	0840      	lsrs	r0, r0, #1
  401daa:	1073      	asrs	r3, r6, #1
  401dac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  401db0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401db4:	07f2      	lsls	r2, r6, #31
  401db6:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  401dba:	bf48      	it	mi
  401dbc:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  401dc0:	4649      	mov	r1, r9
  401dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401dc6:	4673      	mov	r3, lr
  401dc8:	e7c2      	b.n	401d50 <__ieee754_sqrt+0x74>
  401dca:	1c41      	adds	r1, r0, #1
  401dcc:	d033      	beq.n	401e36 <__ieee754_sqrt+0x15a>
  401dce:	f000 0301 	and.w	r3, r0, #1
  401dd2:	4418      	add	r0, r3
  401dd4:	e7e8      	b.n	401da8 <__ieee754_sqrt+0xcc>
  401dd6:	005b      	lsls	r3, r3, #1
  401dd8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  401ddc:	0052      	lsls	r2, r2, #1
  401dde:	e795      	b.n	401d0c <__ieee754_sqrt+0x30>
  401de0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401de4:	4306      	orrs	r6, r0
  401de6:	d0ec      	beq.n	401dc2 <__ieee754_sqrt+0xe6>
  401de8:	bb69      	cbnz	r1, 401e46 <__ieee754_sqrt+0x16a>
  401dea:	460f      	mov	r7, r1
  401dec:	0ad3      	lsrs	r3, r2, #11
  401dee:	3f15      	subs	r7, #21
  401df0:	0552      	lsls	r2, r2, #21
  401df2:	2b00      	cmp	r3, #0
  401df4:	d0fa      	beq.n	401dec <__ieee754_sqrt+0x110>
  401df6:	02dd      	lsls	r5, r3, #11
  401df8:	d420      	bmi.n	401e3c <__ieee754_sqrt+0x160>
  401dfa:	2100      	movs	r1, #0
  401dfc:	e000      	b.n	401e00 <__ieee754_sqrt+0x124>
  401dfe:	4601      	mov	r1, r0
  401e00:	005b      	lsls	r3, r3, #1
  401e02:	02dc      	lsls	r4, r3, #11
  401e04:	f101 0001 	add.w	r0, r1, #1
  401e08:	d5f9      	bpl.n	401dfe <__ieee754_sqrt+0x122>
  401e0a:	f1c0 0420 	rsb	r4, r0, #32
  401e0e:	fa22 f404 	lsr.w	r4, r2, r4
  401e12:	4323      	orrs	r3, r4
  401e14:	1a7f      	subs	r7, r7, r1
  401e16:	4082      	lsls	r2, r0
  401e18:	e770      	b.n	401cfc <__ieee754_sqrt+0x20>
  401e1a:	4602      	mov	r2, r0
  401e1c:	460b      	mov	r3, r1
  401e1e:	f003 f845 	bl	404eac <__aeabi_dmul>
  401e22:	462a      	mov	r2, r5
  401e24:	4623      	mov	r3, r4
  401e26:	f002 fe8f 	bl	404b48 <__adddf3>
  401e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e2e:	f1bc 0f00 	cmp.w	ip, #0
  401e32:	daab      	bge.n	401d8c <__ieee754_sqrt+0xb0>
  401e34:	e7b3      	b.n	401d9e <__ieee754_sqrt+0xc2>
  401e36:	3601      	adds	r6, #1
  401e38:	4620      	mov	r0, r4
  401e3a:	e7b6      	b.n	401daa <__ieee754_sqrt+0xce>
  401e3c:	2420      	movs	r4, #32
  401e3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  401e42:	2000      	movs	r0, #0
  401e44:	e7e3      	b.n	401e0e <__ieee754_sqrt+0x132>
  401e46:	4602      	mov	r2, r0
  401e48:	460b      	mov	r3, r1
  401e4a:	f002 fe7b 	bl	404b44 <__aeabi_dsub>
  401e4e:	4602      	mov	r2, r0
  401e50:	460b      	mov	r3, r1
  401e52:	f003 f955 	bl	405100 <__aeabi_ddiv>
  401e56:	e7b4      	b.n	401dc2 <__ieee754_sqrt+0xe6>
  401e58:	7ff00000 	.word	0x7ff00000
  401e5c:	00000000 	.word	0x00000000

00401e60 <atan>:
  401e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e64:	4bc0      	ldr	r3, [pc, #768]	; (402168 <atan+0x308>)
  401e66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  401e6a:	429e      	cmp	r6, r3
  401e6c:	460d      	mov	r5, r1
  401e6e:	468a      	mov	sl, r1
  401e70:	4604      	mov	r4, r0
  401e72:	dd0f      	ble.n	401e94 <atan+0x34>
  401e74:	4bbd      	ldr	r3, [pc, #756]	; (40216c <atan+0x30c>)
  401e76:	429e      	cmp	r6, r3
  401e78:	f300 80b2 	bgt.w	401fe0 <atan+0x180>
  401e7c:	f000 80ad 	beq.w	401fda <atan+0x17a>
  401e80:	4bbb      	ldr	r3, [pc, #748]	; (402170 <atan+0x310>)
  401e82:	49bc      	ldr	r1, [pc, #752]	; (402174 <atan+0x314>)
  401e84:	4cbc      	ldr	r4, [pc, #752]	; (402178 <atan+0x318>)
  401e86:	f1ba 0f00 	cmp.w	sl, #0
  401e8a:	bfc8      	it	gt
  401e8c:	4619      	movgt	r1, r3
  401e8e:	4620      	mov	r0, r4
  401e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e94:	4bb9      	ldr	r3, [pc, #740]	; (40217c <atan+0x31c>)
  401e96:	429e      	cmp	r6, r3
  401e98:	f300 80bc 	bgt.w	402014 <atan+0x1b4>
  401e9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  401ea0:	429e      	cmp	r6, r3
  401ea2:	f340 80a7 	ble.w	401ff4 <atan+0x194>
  401ea6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
  401eaa:	4622      	mov	r2, r4
  401eac:	462b      	mov	r3, r5
  401eae:	4620      	mov	r0, r4
  401eb0:	4629      	mov	r1, r5
  401eb2:	f002 fffb 	bl	404eac <__aeabi_dmul>
  401eb6:	4602      	mov	r2, r0
  401eb8:	460b      	mov	r3, r1
  401eba:	4680      	mov	r8, r0
  401ebc:	4689      	mov	r9, r1
  401ebe:	f002 fff5 	bl	404eac <__aeabi_dmul>
  401ec2:	a391      	add	r3, pc, #580	; (adr r3, 402108 <atan+0x2a8>)
  401ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ec8:	4606      	mov	r6, r0
  401eca:	460f      	mov	r7, r1
  401ecc:	f002 ffee 	bl	404eac <__aeabi_dmul>
  401ed0:	a38f      	add	r3, pc, #572	; (adr r3, 402110 <atan+0x2b0>)
  401ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ed6:	f002 fe37 	bl	404b48 <__adddf3>
  401eda:	4632      	mov	r2, r6
  401edc:	463b      	mov	r3, r7
  401ede:	f002 ffe5 	bl	404eac <__aeabi_dmul>
  401ee2:	a38d      	add	r3, pc, #564	; (adr r3, 402118 <atan+0x2b8>)
  401ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ee8:	f002 fe2e 	bl	404b48 <__adddf3>
  401eec:	4632      	mov	r2, r6
  401eee:	463b      	mov	r3, r7
  401ef0:	f002 ffdc 	bl	404eac <__aeabi_dmul>
  401ef4:	a38a      	add	r3, pc, #552	; (adr r3, 402120 <atan+0x2c0>)
  401ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
  401efa:	f002 fe25 	bl	404b48 <__adddf3>
  401efe:	4632      	mov	r2, r6
  401f00:	463b      	mov	r3, r7
  401f02:	f002 ffd3 	bl	404eac <__aeabi_dmul>
  401f06:	a388      	add	r3, pc, #544	; (adr r3, 402128 <atan+0x2c8>)
  401f08:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f0c:	f002 fe1c 	bl	404b48 <__adddf3>
  401f10:	4632      	mov	r2, r6
  401f12:	463b      	mov	r3, r7
  401f14:	f002 ffca 	bl	404eac <__aeabi_dmul>
  401f18:	a385      	add	r3, pc, #532	; (adr r3, 402130 <atan+0x2d0>)
  401f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f1e:	f002 fe13 	bl	404b48 <__adddf3>
  401f22:	4642      	mov	r2, r8
  401f24:	464b      	mov	r3, r9
  401f26:	f002 ffc1 	bl	404eac <__aeabi_dmul>
  401f2a:	a383      	add	r3, pc, #524	; (adr r3, 402138 <atan+0x2d8>)
  401f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f30:	4680      	mov	r8, r0
  401f32:	4689      	mov	r9, r1
  401f34:	4630      	mov	r0, r6
  401f36:	4639      	mov	r1, r7
  401f38:	f002 ffb8 	bl	404eac <__aeabi_dmul>
  401f3c:	a380      	add	r3, pc, #512	; (adr r3, 402140 <atan+0x2e0>)
  401f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f42:	f002 fdff 	bl	404b44 <__aeabi_dsub>
  401f46:	4632      	mov	r2, r6
  401f48:	463b      	mov	r3, r7
  401f4a:	f002 ffaf 	bl	404eac <__aeabi_dmul>
  401f4e:	a37e      	add	r3, pc, #504	; (adr r3, 402148 <atan+0x2e8>)
  401f50:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f54:	f002 fdf6 	bl	404b44 <__aeabi_dsub>
  401f58:	4632      	mov	r2, r6
  401f5a:	463b      	mov	r3, r7
  401f5c:	f002 ffa6 	bl	404eac <__aeabi_dmul>
  401f60:	a37b      	add	r3, pc, #492	; (adr r3, 402150 <atan+0x2f0>)
  401f62:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f66:	f002 fded 	bl	404b44 <__aeabi_dsub>
  401f6a:	4632      	mov	r2, r6
  401f6c:	463b      	mov	r3, r7
  401f6e:	f002 ff9d 	bl	404eac <__aeabi_dmul>
  401f72:	a379      	add	r3, pc, #484	; (adr r3, 402158 <atan+0x2f8>)
  401f74:	e9d3 2300 	ldrd	r2, r3, [r3]
  401f78:	f002 fde4 	bl	404b44 <__aeabi_dsub>
  401f7c:	4632      	mov	r2, r6
  401f7e:	463b      	mov	r3, r7
  401f80:	f002 ff94 	bl	404eac <__aeabi_dmul>
  401f84:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
  401f88:	4602      	mov	r2, r0
  401f8a:	460b      	mov	r3, r1
  401f8c:	d069      	beq.n	402062 <atan+0x202>
  401f8e:	4640      	mov	r0, r8
  401f90:	4649      	mov	r1, r9
  401f92:	f002 fdd9 	bl	404b48 <__adddf3>
  401f96:	4622      	mov	r2, r4
  401f98:	462b      	mov	r3, r5
  401f9a:	f002 ff87 	bl	404eac <__aeabi_dmul>
  401f9e:	4e78      	ldr	r6, [pc, #480]	; (402180 <atan+0x320>)
  401fa0:	4b78      	ldr	r3, [pc, #480]	; (402184 <atan+0x324>)
  401fa2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  401fa6:	445e      	add	r6, fp
  401fa8:	449b      	add	fp, r3
  401faa:	e9db 2300 	ldrd	r2, r3, [fp]
  401fae:	f002 fdc9 	bl	404b44 <__aeabi_dsub>
  401fb2:	4622      	mov	r2, r4
  401fb4:	462b      	mov	r3, r5
  401fb6:	f002 fdc5 	bl	404b44 <__aeabi_dsub>
  401fba:	4602      	mov	r2, r0
  401fbc:	460b      	mov	r3, r1
  401fbe:	e9d6 0100 	ldrd	r0, r1, [r6]
  401fc2:	f002 fdbf 	bl	404b44 <__aeabi_dsub>
  401fc6:	f1ba 0f00 	cmp.w	sl, #0
  401fca:	4604      	mov	r4, r0
  401fcc:	f6bf af5f 	bge.w	401e8e <atan+0x2e>
  401fd0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  401fd4:	4620      	mov	r0, r4
  401fd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401fda:	2800      	cmp	r0, #0
  401fdc:	f43f af50 	beq.w	401e80 <atan+0x20>
  401fe0:	4622      	mov	r2, r4
  401fe2:	4620      	mov	r0, r4
  401fe4:	462b      	mov	r3, r5
  401fe6:	4629      	mov	r1, r5
  401fe8:	f002 fdae 	bl	404b48 <__adddf3>
  401fec:	4604      	mov	r4, r0
  401fee:	4620      	mov	r0, r4
  401ff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ff4:	a35a      	add	r3, pc, #360	; (adr r3, 402160 <atan+0x300>)
  401ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
  401ffa:	f002 fda5 	bl	404b48 <__adddf3>
  401ffe:	2200      	movs	r2, #0
  402000:	4b61      	ldr	r3, [pc, #388]	; (402188 <atan+0x328>)
  402002:	f003 f9e3 	bl	4053cc <__aeabi_dcmpgt>
  402006:	2800      	cmp	r0, #0
  402008:	f43f af4d 	beq.w	401ea6 <atan+0x46>
  40200c:	4629      	mov	r1, r5
  40200e:	4620      	mov	r0, r4
  402010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402014:	f000 f8c2 	bl	40219c <fabs>
  402018:	4b5c      	ldr	r3, [pc, #368]	; (40218c <atan+0x32c>)
  40201a:	429e      	cmp	r6, r3
  40201c:	4604      	mov	r4, r0
  40201e:	460d      	mov	r5, r1
  402020:	dc2f      	bgt.n	402082 <atan+0x222>
  402022:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  402026:	429e      	cmp	r6, r3
  402028:	dc54      	bgt.n	4020d4 <atan+0x274>
  40202a:	4602      	mov	r2, r0
  40202c:	460b      	mov	r3, r1
  40202e:	f002 fd8b 	bl	404b48 <__adddf3>
  402032:	2200      	movs	r2, #0
  402034:	4b54      	ldr	r3, [pc, #336]	; (402188 <atan+0x328>)
  402036:	f002 fd85 	bl	404b44 <__aeabi_dsub>
  40203a:	2200      	movs	r2, #0
  40203c:	4606      	mov	r6, r0
  40203e:	460f      	mov	r7, r1
  402040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402044:	4620      	mov	r0, r4
  402046:	4629      	mov	r1, r5
  402048:	f002 fd7e 	bl	404b48 <__adddf3>
  40204c:	4602      	mov	r2, r0
  40204e:	460b      	mov	r3, r1
  402050:	4630      	mov	r0, r6
  402052:	4639      	mov	r1, r7
  402054:	f003 f854 	bl	405100 <__aeabi_ddiv>
  402058:	f04f 0b00 	mov.w	fp, #0
  40205c:	4604      	mov	r4, r0
  40205e:	460d      	mov	r5, r1
  402060:	e723      	b.n	401eaa <atan+0x4a>
  402062:	4640      	mov	r0, r8
  402064:	4649      	mov	r1, r9
  402066:	f002 fd6f 	bl	404b48 <__adddf3>
  40206a:	4622      	mov	r2, r4
  40206c:	462b      	mov	r3, r5
  40206e:	f002 ff1d 	bl	404eac <__aeabi_dmul>
  402072:	4602      	mov	r2, r0
  402074:	460b      	mov	r3, r1
  402076:	4620      	mov	r0, r4
  402078:	4629      	mov	r1, r5
  40207a:	f002 fd63 	bl	404b44 <__aeabi_dsub>
  40207e:	4604      	mov	r4, r0
  402080:	e705      	b.n	401e8e <atan+0x2e>
  402082:	4b43      	ldr	r3, [pc, #268]	; (402190 <atan+0x330>)
  402084:	429e      	cmp	r6, r3
  402086:	dc1a      	bgt.n	4020be <atan+0x25e>
  402088:	2200      	movs	r2, #0
  40208a:	4b42      	ldr	r3, [pc, #264]	; (402194 <atan+0x334>)
  40208c:	f002 fd5a 	bl	404b44 <__aeabi_dsub>
  402090:	2200      	movs	r2, #0
  402092:	4606      	mov	r6, r0
  402094:	460f      	mov	r7, r1
  402096:	4b3f      	ldr	r3, [pc, #252]	; (402194 <atan+0x334>)
  402098:	4620      	mov	r0, r4
  40209a:	4629      	mov	r1, r5
  40209c:	f002 ff06 	bl	404eac <__aeabi_dmul>
  4020a0:	2200      	movs	r2, #0
  4020a2:	4b39      	ldr	r3, [pc, #228]	; (402188 <atan+0x328>)
  4020a4:	f002 fd50 	bl	404b48 <__adddf3>
  4020a8:	4602      	mov	r2, r0
  4020aa:	460b      	mov	r3, r1
  4020ac:	4630      	mov	r0, r6
  4020ae:	4639      	mov	r1, r7
  4020b0:	f003 f826 	bl	405100 <__aeabi_ddiv>
  4020b4:	f04f 0b02 	mov.w	fp, #2
  4020b8:	4604      	mov	r4, r0
  4020ba:	460d      	mov	r5, r1
  4020bc:	e6f5      	b.n	401eaa <atan+0x4a>
  4020be:	4602      	mov	r2, r0
  4020c0:	460b      	mov	r3, r1
  4020c2:	2000      	movs	r0, #0
  4020c4:	4934      	ldr	r1, [pc, #208]	; (402198 <atan+0x338>)
  4020c6:	f003 f81b 	bl	405100 <__aeabi_ddiv>
  4020ca:	f04f 0b03 	mov.w	fp, #3
  4020ce:	4604      	mov	r4, r0
  4020d0:	460d      	mov	r5, r1
  4020d2:	e6ea      	b.n	401eaa <atan+0x4a>
  4020d4:	2200      	movs	r2, #0
  4020d6:	4b2c      	ldr	r3, [pc, #176]	; (402188 <atan+0x328>)
  4020d8:	f002 fd34 	bl	404b44 <__aeabi_dsub>
  4020dc:	2200      	movs	r2, #0
  4020de:	4606      	mov	r6, r0
  4020e0:	460f      	mov	r7, r1
  4020e2:	4b29      	ldr	r3, [pc, #164]	; (402188 <atan+0x328>)
  4020e4:	4620      	mov	r0, r4
  4020e6:	4629      	mov	r1, r5
  4020e8:	f002 fd2e 	bl	404b48 <__adddf3>
  4020ec:	4602      	mov	r2, r0
  4020ee:	460b      	mov	r3, r1
  4020f0:	4630      	mov	r0, r6
  4020f2:	4639      	mov	r1, r7
  4020f4:	f003 f804 	bl	405100 <__aeabi_ddiv>
  4020f8:	f04f 0b01 	mov.w	fp, #1
  4020fc:	4604      	mov	r4, r0
  4020fe:	460d      	mov	r5, r1
  402100:	e6d3      	b.n	401eaa <atan+0x4a>
  402102:	bf00      	nop
  402104:	f3af 8000 	nop.w
  402108:	e322da11 	.word	0xe322da11
  40210c:	3f90ad3a 	.word	0x3f90ad3a
  402110:	24760deb 	.word	0x24760deb
  402114:	3fa97b4b 	.word	0x3fa97b4b
  402118:	a0d03d51 	.word	0xa0d03d51
  40211c:	3fb10d66 	.word	0x3fb10d66
  402120:	c54c206e 	.word	0xc54c206e
  402124:	3fb745cd 	.word	0x3fb745cd
  402128:	920083ff 	.word	0x920083ff
  40212c:	3fc24924 	.word	0x3fc24924
  402130:	5555550d 	.word	0x5555550d
  402134:	3fd55555 	.word	0x3fd55555
  402138:	2c6a6c2f 	.word	0x2c6a6c2f
  40213c:	bfa2b444 	.word	0xbfa2b444
  402140:	52defd9a 	.word	0x52defd9a
  402144:	3fadde2d 	.word	0x3fadde2d
  402148:	af749a6d 	.word	0xaf749a6d
  40214c:	3fb3b0f2 	.word	0x3fb3b0f2
  402150:	fe231671 	.word	0xfe231671
  402154:	3fbc71c6 	.word	0x3fbc71c6
  402158:	9998ebc4 	.word	0x9998ebc4
  40215c:	3fc99999 	.word	0x3fc99999
  402160:	8800759c 	.word	0x8800759c
  402164:	7e37e43c 	.word	0x7e37e43c
  402168:	440fffff 	.word	0x440fffff
  40216c:	7ff00000 	.word	0x7ff00000
  402170:	3ff921fb 	.word	0x3ff921fb
  402174:	bff921fb 	.word	0xbff921fb
  402178:	54442d18 	.word	0x54442d18
  40217c:	3fdbffff 	.word	0x3fdbffff
  402180:	00405d38 	.word	0x00405d38
  402184:	00405d18 	.word	0x00405d18
  402188:	3ff00000 	.word	0x3ff00000
  40218c:	3ff2ffff 	.word	0x3ff2ffff
  402190:	40037fff 	.word	0x40037fff
  402194:	3ff80000 	.word	0x3ff80000
  402198:	bff00000 	.word	0xbff00000

0040219c <fabs>:
  40219c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4021a0:	4770      	bx	lr
  4021a2:	bf00      	nop

004021a4 <matherr>:
  4021a4:	2000      	movs	r0, #0
  4021a6:	4770      	bx	lr

004021a8 <__errno>:
  4021a8:	4b01      	ldr	r3, [pc, #4]	; (4021b0 <__errno+0x8>)
  4021aa:	6818      	ldr	r0, [r3, #0]
  4021ac:	4770      	bx	lr
  4021ae:	bf00      	nop
  4021b0:	20000074 	.word	0x20000074

004021b4 <__libc_init_array>:
  4021b4:	b570      	push	{r4, r5, r6, lr}
  4021b6:	4b0e      	ldr	r3, [pc, #56]	; (4021f0 <__libc_init_array+0x3c>)
  4021b8:	4c0e      	ldr	r4, [pc, #56]	; (4021f4 <__libc_init_array+0x40>)
  4021ba:	1ae4      	subs	r4, r4, r3
  4021bc:	10a4      	asrs	r4, r4, #2
  4021be:	2500      	movs	r5, #0
  4021c0:	461e      	mov	r6, r3
  4021c2:	42a5      	cmp	r5, r4
  4021c4:	d004      	beq.n	4021d0 <__libc_init_array+0x1c>
  4021c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4021ca:	4798      	blx	r3
  4021cc:	3501      	adds	r5, #1
  4021ce:	e7f8      	b.n	4021c2 <__libc_init_array+0xe>
  4021d0:	f003 ff22 	bl	406018 <_init>
  4021d4:	4c08      	ldr	r4, [pc, #32]	; (4021f8 <__libc_init_array+0x44>)
  4021d6:	4b09      	ldr	r3, [pc, #36]	; (4021fc <__libc_init_array+0x48>)
  4021d8:	1ae4      	subs	r4, r4, r3
  4021da:	10a4      	asrs	r4, r4, #2
  4021dc:	2500      	movs	r5, #0
  4021de:	461e      	mov	r6, r3
  4021e0:	42a5      	cmp	r5, r4
  4021e2:	d004      	beq.n	4021ee <__libc_init_array+0x3a>
  4021e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4021e8:	4798      	blx	r3
  4021ea:	3501      	adds	r5, #1
  4021ec:	e7f8      	b.n	4021e0 <__libc_init_array+0x2c>
  4021ee:	bd70      	pop	{r4, r5, r6, pc}
  4021f0:	00406024 	.word	0x00406024
  4021f4:	00406024 	.word	0x00406024
  4021f8:	00406028 	.word	0x00406028
  4021fc:	00406024 	.word	0x00406024

00402200 <memset>:
  402200:	4402      	add	r2, r0
  402202:	4603      	mov	r3, r0
  402204:	4293      	cmp	r3, r2
  402206:	d002      	beq.n	40220e <memset+0xe>
  402208:	f803 1b01 	strb.w	r1, [r3], #1
  40220c:	e7fa      	b.n	402204 <memset+0x4>
  40220e:	4770      	bx	lr

00402210 <__cvt>:
  402210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402214:	b088      	sub	sp, #32
  402216:	2b00      	cmp	r3, #0
  402218:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40221a:	9912      	ldr	r1, [sp, #72]	; 0x48
  40221c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40221e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
  402222:	461e      	mov	r6, r3
  402224:	f027 0720 	bic.w	r7, r7, #32
  402228:	bfbb      	ittet	lt
  40222a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
  40222e:	461e      	movlt	r6, r3
  402230:	2300      	movge	r3, #0
  402232:	232d      	movlt	r3, #45	; 0x2d
  402234:	2f46      	cmp	r7, #70	; 0x46
  402236:	4614      	mov	r4, r2
  402238:	700b      	strb	r3, [r1, #0]
  40223a:	d003      	beq.n	402244 <__cvt+0x34>
  40223c:	2f45      	cmp	r7, #69	; 0x45
  40223e:	d103      	bne.n	402248 <__cvt+0x38>
  402240:	3501      	adds	r5, #1
  402242:	e001      	b.n	402248 <__cvt+0x38>
  402244:	2303      	movs	r3, #3
  402246:	e000      	b.n	40224a <__cvt+0x3a>
  402248:	2302      	movs	r3, #2
  40224a:	aa07      	add	r2, sp, #28
  40224c:	9204      	str	r2, [sp, #16]
  40224e:	aa06      	add	r2, sp, #24
  402250:	9203      	str	r2, [sp, #12]
  402252:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
  402256:	4622      	mov	r2, r4
  402258:	4633      	mov	r3, r6
  40225a:	f000 fed1 	bl	403000 <_dtoa_r>
  40225e:	2f47      	cmp	r7, #71	; 0x47
  402260:	4680      	mov	r8, r0
  402262:	d102      	bne.n	40226a <__cvt+0x5a>
  402264:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402266:	07db      	lsls	r3, r3, #31
  402268:	d528      	bpl.n	4022bc <__cvt+0xac>
  40226a:	2f46      	cmp	r7, #70	; 0x46
  40226c:	eb08 0905 	add.w	r9, r8, r5
  402270:	d111      	bne.n	402296 <__cvt+0x86>
  402272:	f898 3000 	ldrb.w	r3, [r8]
  402276:	2b30      	cmp	r3, #48	; 0x30
  402278:	d10a      	bne.n	402290 <__cvt+0x80>
  40227a:	2200      	movs	r2, #0
  40227c:	2300      	movs	r3, #0
  40227e:	4620      	mov	r0, r4
  402280:	4631      	mov	r1, r6
  402282:	f003 f87b 	bl	40537c <__aeabi_dcmpeq>
  402286:	b918      	cbnz	r0, 402290 <__cvt+0x80>
  402288:	f1c5 0501 	rsb	r5, r5, #1
  40228c:	f8ca 5000 	str.w	r5, [sl]
  402290:	f8da 3000 	ldr.w	r3, [sl]
  402294:	4499      	add	r9, r3
  402296:	2200      	movs	r2, #0
  402298:	2300      	movs	r3, #0
  40229a:	4620      	mov	r0, r4
  40229c:	4631      	mov	r1, r6
  40229e:	f003 f86d 	bl	40537c <__aeabi_dcmpeq>
  4022a2:	b908      	cbnz	r0, 4022a8 <__cvt+0x98>
  4022a4:	2230      	movs	r2, #48	; 0x30
  4022a6:	e002      	b.n	4022ae <__cvt+0x9e>
  4022a8:	f8cd 901c 	str.w	r9, [sp, #28]
  4022ac:	e006      	b.n	4022bc <__cvt+0xac>
  4022ae:	9b07      	ldr	r3, [sp, #28]
  4022b0:	4599      	cmp	r9, r3
  4022b2:	d903      	bls.n	4022bc <__cvt+0xac>
  4022b4:	1c59      	adds	r1, r3, #1
  4022b6:	9107      	str	r1, [sp, #28]
  4022b8:	701a      	strb	r2, [r3, #0]
  4022ba:	e7f8      	b.n	4022ae <__cvt+0x9e>
  4022bc:	9b07      	ldr	r3, [sp, #28]
  4022be:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4022c0:	ebc8 0303 	rsb	r3, r8, r3
  4022c4:	4640      	mov	r0, r8
  4022c6:	6013      	str	r3, [r2, #0]
  4022c8:	b008      	add	sp, #32
  4022ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004022ce <__exponent>:
  4022ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  4022d0:	4603      	mov	r3, r0
  4022d2:	2900      	cmp	r1, #0
  4022d4:	bfb8      	it	lt
  4022d6:	4249      	neglt	r1, r1
  4022d8:	f803 2b02 	strb.w	r2, [r3], #2
  4022dc:	bfb4      	ite	lt
  4022de:	222d      	movlt	r2, #45	; 0x2d
  4022e0:	222b      	movge	r2, #43	; 0x2b
  4022e2:	2909      	cmp	r1, #9
  4022e4:	7042      	strb	r2, [r0, #1]
  4022e6:	dd19      	ble.n	40231c <__exponent+0x4e>
  4022e8:	f10d 0207 	add.w	r2, sp, #7
  4022ec:	4616      	mov	r6, r2
  4022ee:	250a      	movs	r5, #10
  4022f0:	fb91 f4f5 	sdiv	r4, r1, r5
  4022f4:	fb05 1114 	mls	r1, r5, r4, r1
  4022f8:	3130      	adds	r1, #48	; 0x30
  4022fa:	2c09      	cmp	r4, #9
  4022fc:	f802 1d01 	strb.w	r1, [r2, #-1]!
  402300:	4621      	mov	r1, r4
  402302:	dcf5      	bgt.n	4022f0 <__exponent+0x22>
  402304:	3130      	adds	r1, #48	; 0x30
  402306:	1e54      	subs	r4, r2, #1
  402308:	f802 1c01 	strb.w	r1, [r2, #-1]
  40230c:	42b4      	cmp	r4, r6
  40230e:	461a      	mov	r2, r3
  402310:	d20a      	bcs.n	402328 <__exponent+0x5a>
  402312:	f814 2b01 	ldrb.w	r2, [r4], #1
  402316:	f803 2b01 	strb.w	r2, [r3], #1
  40231a:	e7f7      	b.n	40230c <__exponent+0x3e>
  40231c:	2430      	movs	r4, #48	; 0x30
  40231e:	461a      	mov	r2, r3
  402320:	4421      	add	r1, r4
  402322:	f802 4b02 	strb.w	r4, [r2], #2
  402326:	7059      	strb	r1, [r3, #1]
  402328:	1a10      	subs	r0, r2, r0
  40232a:	b002      	add	sp, #8
  40232c:	bd70      	pop	{r4, r5, r6, pc}
	...

00402330 <_printf_float>:
  402330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402334:	b091      	sub	sp, #68	; 0x44
  402336:	460c      	mov	r4, r1
  402338:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
  40233c:	4616      	mov	r6, r2
  40233e:	461f      	mov	r7, r3
  402340:	4605      	mov	r5, r0
  402342:	f001 fd75 	bl	403e30 <_localeconv_r>
  402346:	6803      	ldr	r3, [r0, #0]
  402348:	9309      	str	r3, [sp, #36]	; 0x24
  40234a:	4618      	mov	r0, r3
  40234c:	f000 fcfc 	bl	402d48 <strlen>
  402350:	2300      	movs	r3, #0
  402352:	930e      	str	r3, [sp, #56]	; 0x38
  402354:	f8d8 3000 	ldr.w	r3, [r8]
  402358:	900a      	str	r0, [sp, #40]	; 0x28
  40235a:	3307      	adds	r3, #7
  40235c:	f023 0307 	bic.w	r3, r3, #7
  402360:	f103 0208 	add.w	r2, r3, #8
  402364:	f894 9018 	ldrb.w	r9, [r4, #24]
  402368:	f8d4 b000 	ldr.w	fp, [r4]
  40236c:	f8c8 2000 	str.w	r2, [r8]
  402370:	e9d3 2300 	ldrd	r2, r3, [r3]
  402374:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
  402378:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
  40237c:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
  402380:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
  402384:	930b      	str	r3, [sp, #44]	; 0x2c
  402386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40238a:	4ba7      	ldr	r3, [pc, #668]	; (402628 <_printf_float+0x2f8>)
  40238c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40238e:	4640      	mov	r0, r8
  402390:	f003 f826 	bl	4053e0 <__aeabi_dcmpun>
  402394:	b9a0      	cbnz	r0, 4023c0 <_printf_float+0x90>
  402396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  40239a:	4ba3      	ldr	r3, [pc, #652]	; (402628 <_printf_float+0x2f8>)
  40239c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40239e:	4640      	mov	r0, r8
  4023a0:	f003 f800 	bl	4053a4 <__aeabi_dcmple>
  4023a4:	b960      	cbnz	r0, 4023c0 <_printf_float+0x90>
  4023a6:	2200      	movs	r2, #0
  4023a8:	2300      	movs	r3, #0
  4023aa:	4640      	mov	r0, r8
  4023ac:	4651      	mov	r1, sl
  4023ae:	f002 ffef 	bl	405390 <__aeabi_dcmplt>
  4023b2:	b110      	cbz	r0, 4023ba <_printf_float+0x8a>
  4023b4:	232d      	movs	r3, #45	; 0x2d
  4023b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  4023ba:	4b9c      	ldr	r3, [pc, #624]	; (40262c <_printf_float+0x2fc>)
  4023bc:	4a9c      	ldr	r2, [pc, #624]	; (402630 <_printf_float+0x300>)
  4023be:	e00a      	b.n	4023d6 <_printf_float+0xa6>
  4023c0:	4642      	mov	r2, r8
  4023c2:	4653      	mov	r3, sl
  4023c4:	4640      	mov	r0, r8
  4023c6:	4651      	mov	r1, sl
  4023c8:	f003 f80a 	bl	4053e0 <__aeabi_dcmpun>
  4023cc:	2800      	cmp	r0, #0
  4023ce:	f000 8192 	beq.w	4026f6 <_printf_float+0x3c6>
  4023d2:	4b98      	ldr	r3, [pc, #608]	; (402634 <_printf_float+0x304>)
  4023d4:	4a98      	ldr	r2, [pc, #608]	; (402638 <_printf_float+0x308>)
  4023d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  4023da:	bf8c      	ite	hi
  4023dc:	4690      	movhi	r8, r2
  4023de:	4698      	movls	r8, r3
  4023e0:	2303      	movs	r3, #3
  4023e2:	6123      	str	r3, [r4, #16]
  4023e4:	f02b 0304 	bic.w	r3, fp, #4
  4023e8:	6023      	str	r3, [r4, #0]
  4023ea:	f04f 0a00 	mov.w	sl, #0
  4023ee:	e03d      	b.n	40246c <_printf_float+0x13c>
  4023f0:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
  4023f4:	f000 818a 	beq.w	40270c <_printf_float+0x3dc>
  4023f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
  4023fc:	f000 8186 	beq.w	40270c <_printf_float+0x3dc>
  402400:	6023      	str	r3, [r4, #0]
  402402:	2100      	movs	r1, #0
  402404:	f10d 0233 	add.w	r2, sp, #51	; 0x33
  402408:	9301      	str	r3, [sp, #4]
  40240a:	6863      	ldr	r3, [r4, #4]
  40240c:	9005      	str	r0, [sp, #20]
  40240e:	9202      	str	r2, [sp, #8]
  402410:	9300      	str	r3, [sp, #0]
  402412:	4642      	mov	r2, r8
  402414:	4653      	mov	r3, sl
  402416:	9106      	str	r1, [sp, #24]
  402418:	f8cd 9010 	str.w	r9, [sp, #16]
  40241c:	f8cd e00c 	str.w	lr, [sp, #12]
  402420:	4628      	mov	r0, r5
  402422:	f7ff fef5 	bl	402210 <__cvt>
  402426:	f009 03df 	and.w	r3, r9, #223	; 0xdf
  40242a:	2b47      	cmp	r3, #71	; 0x47
  40242c:	4680      	mov	r8, r0
  40242e:	f000 8184 	beq.w	40273a <_printf_float+0x40a>
  402432:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402436:	990d      	ldr	r1, [sp, #52]	; 0x34
  402438:	f200 818d 	bhi.w	402756 <_printf_float+0x426>
  40243c:	3901      	subs	r1, #1
  40243e:	464a      	mov	r2, r9
  402440:	f104 0050 	add.w	r0, r4, #80	; 0x50
  402444:	910d      	str	r1, [sp, #52]	; 0x34
  402446:	f7ff ff42 	bl	4022ce <__exponent>
  40244a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40244c:	1883      	adds	r3, r0, r2
  40244e:	2a01      	cmp	r2, #1
  402450:	4682      	mov	sl, r0
  402452:	6123      	str	r3, [r4, #16]
  402454:	f300 817c 	bgt.w	402750 <_printf_float+0x420>
  402458:	6822      	ldr	r2, [r4, #0]
  40245a:	07d1      	lsls	r1, r2, #31
  40245c:	f100 8178 	bmi.w	402750 <_printf_float+0x420>
  402460:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  402464:	b113      	cbz	r3, 40246c <_printf_float+0x13c>
  402466:	232d      	movs	r3, #45	; 0x2d
  402468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  40246c:	9700      	str	r7, [sp, #0]
  40246e:	4633      	mov	r3, r6
  402470:	aa0f      	add	r2, sp, #60	; 0x3c
  402472:	4621      	mov	r1, r4
  402474:	4628      	mov	r0, r5
  402476:	f000 f99f 	bl	4027b8 <_printf_common>
  40247a:	3001      	adds	r0, #1
  40247c:	d102      	bne.n	402484 <_printf_float+0x154>
  40247e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402482:	e196      	b.n	4027b2 <_printf_float+0x482>
  402484:	6823      	ldr	r3, [r4, #0]
  402486:	055a      	lsls	r2, r3, #21
  402488:	d401      	bmi.n	40248e <_printf_float+0x15e>
  40248a:	6923      	ldr	r3, [r4, #16]
  40248c:	e065      	b.n	40255a <_printf_float+0x22a>
  40248e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
  402492:	f240 80d5 	bls.w	402640 <_printf_float+0x310>
  402496:	2200      	movs	r2, #0
  402498:	2300      	movs	r3, #0
  40249a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  40249e:	f002 ff6d 	bl	40537c <__aeabi_dcmpeq>
  4024a2:	b378      	cbz	r0, 402504 <_printf_float+0x1d4>
  4024a4:	2301      	movs	r3, #1
  4024a6:	4a65      	ldr	r2, [pc, #404]	; (40263c <_printf_float+0x30c>)
  4024a8:	4631      	mov	r1, r6
  4024aa:	4628      	mov	r0, r5
  4024ac:	47b8      	blx	r7
  4024ae:	3001      	adds	r0, #1
  4024b0:	d0e5      	beq.n	40247e <_printf_float+0x14e>
  4024b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4024b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4024b6:	429a      	cmp	r2, r3
  4024b8:	db0b      	blt.n	4024d2 <_printf_float+0x1a2>
  4024ba:	6823      	ldr	r3, [r4, #0]
  4024bc:	07d8      	lsls	r0, r3, #31
  4024be:	d408      	bmi.n	4024d2 <_printf_float+0x1a2>
  4024c0:	6823      	ldr	r3, [r4, #0]
  4024c2:	079b      	lsls	r3, r3, #30
  4024c4:	f140 8111 	bpl.w	4026ea <_printf_float+0x3ba>
  4024c8:	f04f 0800 	mov.w	r8, #0
  4024cc:	f104 0919 	add.w	r9, r4, #25
  4024d0:	e106      	b.n	4026e0 <_printf_float+0x3b0>
  4024d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4024d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4024d6:	4631      	mov	r1, r6
  4024d8:	4628      	mov	r0, r5
  4024da:	47b8      	blx	r7
  4024dc:	3001      	adds	r0, #1
  4024de:	d0ce      	beq.n	40247e <_printf_float+0x14e>
  4024e0:	f04f 0800 	mov.w	r8, #0
  4024e4:	f104 091a 	add.w	r9, r4, #26
  4024e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4024ea:	3b01      	subs	r3, #1
  4024ec:	4598      	cmp	r8, r3
  4024ee:	dae7      	bge.n	4024c0 <_printf_float+0x190>
  4024f0:	2301      	movs	r3, #1
  4024f2:	464a      	mov	r2, r9
  4024f4:	4631      	mov	r1, r6
  4024f6:	4628      	mov	r0, r5
  4024f8:	47b8      	blx	r7
  4024fa:	3001      	adds	r0, #1
  4024fc:	d0bf      	beq.n	40247e <_printf_float+0x14e>
  4024fe:	f108 0801 	add.w	r8, r8, #1
  402502:	e7f1      	b.n	4024e8 <_printf_float+0x1b8>
  402504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402506:	2b00      	cmp	r3, #0
  402508:	dc29      	bgt.n	40255e <_printf_float+0x22e>
  40250a:	2301      	movs	r3, #1
  40250c:	4a4b      	ldr	r2, [pc, #300]	; (40263c <_printf_float+0x30c>)
  40250e:	4631      	mov	r1, r6
  402510:	4628      	mov	r0, r5
  402512:	47b8      	blx	r7
  402514:	3001      	adds	r0, #1
  402516:	d0b2      	beq.n	40247e <_printf_float+0x14e>
  402518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40251a:	b923      	cbnz	r3, 402526 <_printf_float+0x1f6>
  40251c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40251e:	b913      	cbnz	r3, 402526 <_printf_float+0x1f6>
  402520:	6823      	ldr	r3, [r4, #0]
  402522:	07d9      	lsls	r1, r3, #31
  402524:	d5cc      	bpl.n	4024c0 <_printf_float+0x190>
  402526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402528:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40252a:	4631      	mov	r1, r6
  40252c:	4628      	mov	r0, r5
  40252e:	47b8      	blx	r7
  402530:	3001      	adds	r0, #1
  402532:	d0a4      	beq.n	40247e <_printf_float+0x14e>
  402534:	f04f 0900 	mov.w	r9, #0
  402538:	f104 0a1a 	add.w	sl, r4, #26
  40253c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40253e:	425b      	negs	r3, r3
  402540:	4599      	cmp	r9, r3
  402542:	da09      	bge.n	402558 <_printf_float+0x228>
  402544:	2301      	movs	r3, #1
  402546:	4652      	mov	r2, sl
  402548:	4631      	mov	r1, r6
  40254a:	4628      	mov	r0, r5
  40254c:	47b8      	blx	r7
  40254e:	3001      	adds	r0, #1
  402550:	d095      	beq.n	40247e <_printf_float+0x14e>
  402552:	f109 0901 	add.w	r9, r9, #1
  402556:	e7f1      	b.n	40253c <_printf_float+0x20c>
  402558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40255a:	4642      	mov	r2, r8
  40255c:	e0a7      	b.n	4026ae <_printf_float+0x37e>
  40255e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402560:	6da3      	ldr	r3, [r4, #88]	; 0x58
  402562:	429a      	cmp	r2, r3
  402564:	bfa8      	it	ge
  402566:	461a      	movge	r2, r3
  402568:	2a00      	cmp	r2, #0
  40256a:	4691      	mov	r9, r2
  40256c:	dc06      	bgt.n	40257c <_printf_float+0x24c>
  40256e:	f04f 0a00 	mov.w	sl, #0
  402572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  402576:	f104 0b1a 	add.w	fp, r4, #26
  40257a:	e011      	b.n	4025a0 <_printf_float+0x270>
  40257c:	4613      	mov	r3, r2
  40257e:	4631      	mov	r1, r6
  402580:	4642      	mov	r2, r8
  402582:	4628      	mov	r0, r5
  402584:	47b8      	blx	r7
  402586:	3001      	adds	r0, #1
  402588:	d1f1      	bne.n	40256e <_printf_float+0x23e>
  40258a:	e778      	b.n	40247e <_printf_float+0x14e>
  40258c:	2301      	movs	r3, #1
  40258e:	465a      	mov	r2, fp
  402590:	4631      	mov	r1, r6
  402592:	4628      	mov	r0, r5
  402594:	47b8      	blx	r7
  402596:	3001      	adds	r0, #1
  402598:	f43f af71 	beq.w	40247e <_printf_float+0x14e>
  40259c:	f10a 0a01 	add.w	sl, sl, #1
  4025a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
  4025a2:	ebc9 0203 	rsb	r2, r9, r3
  4025a6:	4592      	cmp	sl, r2
  4025a8:	dbf0      	blt.n	40258c <_printf_float+0x25c>
  4025aa:	eb08 0903 	add.w	r9, r8, r3
  4025ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4025b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4025b2:	429a      	cmp	r2, r3
  4025b4:	db0f      	blt.n	4025d6 <_printf_float+0x2a6>
  4025b6:	6823      	ldr	r3, [r4, #0]
  4025b8:	07da      	lsls	r2, r3, #31
  4025ba:	d40c      	bmi.n	4025d6 <_printf_float+0x2a6>
  4025bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4025be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4025c0:	4498      	add	r8, r3
  4025c2:	ebc9 0808 	rsb	r8, r9, r8
  4025c6:	1a9b      	subs	r3, r3, r2
  4025c8:	4598      	cmp	r8, r3
  4025ca:	bfa8      	it	ge
  4025cc:	4698      	movge	r8, r3
  4025ce:	f1b8 0f00 	cmp.w	r8, #0
  4025d2:	dc08      	bgt.n	4025e6 <_printf_float+0x2b6>
  4025d4:	e00f      	b.n	4025f6 <_printf_float+0x2c6>
  4025d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4025d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4025da:	4631      	mov	r1, r6
  4025dc:	4628      	mov	r0, r5
  4025de:	47b8      	blx	r7
  4025e0:	3001      	adds	r0, #1
  4025e2:	d1eb      	bne.n	4025bc <_printf_float+0x28c>
  4025e4:	e74b      	b.n	40247e <_printf_float+0x14e>
  4025e6:	4643      	mov	r3, r8
  4025e8:	464a      	mov	r2, r9
  4025ea:	4631      	mov	r1, r6
  4025ec:	4628      	mov	r0, r5
  4025ee:	47b8      	blx	r7
  4025f0:	3001      	adds	r0, #1
  4025f2:	f43f af44 	beq.w	40247e <_printf_float+0x14e>
  4025f6:	f04f 0900 	mov.w	r9, #0
  4025fa:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4025fe:	f104 0a1a 	add.w	sl, r4, #26
  402602:	e009      	b.n	402618 <_printf_float+0x2e8>
  402604:	2301      	movs	r3, #1
  402606:	4652      	mov	r2, sl
  402608:	4631      	mov	r1, r6
  40260a:	4628      	mov	r0, r5
  40260c:	47b8      	blx	r7
  40260e:	3001      	adds	r0, #1
  402610:	f43f af35 	beq.w	40247e <_printf_float+0x14e>
  402614:	f109 0901 	add.w	r9, r9, #1
  402618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40261a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40261c:	1a9b      	subs	r3, r3, r2
  40261e:	ebc8 0303 	rsb	r3, r8, r3
  402622:	4599      	cmp	r9, r3
  402624:	dbee      	blt.n	402604 <_printf_float+0x2d4>
  402626:	e74b      	b.n	4024c0 <_printf_float+0x190>
  402628:	7fefffff 	.word	0x7fefffff
  40262c:	00405d5c 	.word	0x00405d5c
  402630:	00405d60 	.word	0x00405d60
  402634:	00405d64 	.word	0x00405d64
  402638:	00405d68 	.word	0x00405d68
  40263c:	00405d6c 	.word	0x00405d6c
  402640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402642:	2a01      	cmp	r2, #1
  402644:	dc01      	bgt.n	40264a <_printf_float+0x31a>
  402646:	07db      	lsls	r3, r3, #31
  402648:	d538      	bpl.n	4026bc <_printf_float+0x38c>
  40264a:	2301      	movs	r3, #1
  40264c:	4642      	mov	r2, r8
  40264e:	4631      	mov	r1, r6
  402650:	4628      	mov	r0, r5
  402652:	47b8      	blx	r7
  402654:	3001      	adds	r0, #1
  402656:	f43f af12 	beq.w	40247e <_printf_float+0x14e>
  40265a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40265c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40265e:	4631      	mov	r1, r6
  402660:	4628      	mov	r0, r5
  402662:	47b8      	blx	r7
  402664:	3001      	adds	r0, #1
  402666:	f43f af0a 	beq.w	40247e <_printf_float+0x14e>
  40266a:	2200      	movs	r2, #0
  40266c:	2300      	movs	r3, #0
  40266e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
  402672:	f002 fe83 	bl	40537c <__aeabi_dcmpeq>
  402676:	b120      	cbz	r0, 402682 <_printf_float+0x352>
  402678:	f04f 0800 	mov.w	r8, #0
  40267c:	f104 091a 	add.w	r9, r4, #26
  402680:	e00e      	b.n	4026a0 <_printf_float+0x370>
  402682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402684:	f108 0201 	add.w	r2, r8, #1
  402688:	3b01      	subs	r3, #1
  40268a:	e019      	b.n	4026c0 <_printf_float+0x390>
  40268c:	2301      	movs	r3, #1
  40268e:	464a      	mov	r2, r9
  402690:	4631      	mov	r1, r6
  402692:	4628      	mov	r0, r5
  402694:	47b8      	blx	r7
  402696:	3001      	adds	r0, #1
  402698:	f43f aef1 	beq.w	40247e <_printf_float+0x14e>
  40269c:	f108 0801 	add.w	r8, r8, #1
  4026a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4026a2:	3b01      	subs	r3, #1
  4026a4:	4598      	cmp	r8, r3
  4026a6:	dbf1      	blt.n	40268c <_printf_float+0x35c>
  4026a8:	4653      	mov	r3, sl
  4026aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
  4026ae:	4631      	mov	r1, r6
  4026b0:	4628      	mov	r0, r5
  4026b2:	47b8      	blx	r7
  4026b4:	3001      	adds	r0, #1
  4026b6:	f47f af03 	bne.w	4024c0 <_printf_float+0x190>
  4026ba:	e6e0      	b.n	40247e <_printf_float+0x14e>
  4026bc:	2301      	movs	r3, #1
  4026be:	4642      	mov	r2, r8
  4026c0:	4631      	mov	r1, r6
  4026c2:	4628      	mov	r0, r5
  4026c4:	47b8      	blx	r7
  4026c6:	3001      	adds	r0, #1
  4026c8:	d1ee      	bne.n	4026a8 <_printf_float+0x378>
  4026ca:	e6d8      	b.n	40247e <_printf_float+0x14e>
  4026cc:	2301      	movs	r3, #1
  4026ce:	464a      	mov	r2, r9
  4026d0:	4631      	mov	r1, r6
  4026d2:	4628      	mov	r0, r5
  4026d4:	47b8      	blx	r7
  4026d6:	3001      	adds	r0, #1
  4026d8:	f43f aed1 	beq.w	40247e <_printf_float+0x14e>
  4026dc:	f108 0801 	add.w	r8, r8, #1
  4026e0:	68e3      	ldr	r3, [r4, #12]
  4026e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4026e4:	1a9b      	subs	r3, r3, r2
  4026e6:	4598      	cmp	r8, r3
  4026e8:	dbf0      	blt.n	4026cc <_printf_float+0x39c>
  4026ea:	68e0      	ldr	r0, [r4, #12]
  4026ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4026ee:	4298      	cmp	r0, r3
  4026f0:	bfb8      	it	lt
  4026f2:	4618      	movlt	r0, r3
  4026f4:	e05d      	b.n	4027b2 <_printf_float+0x482>
  4026f6:	6862      	ldr	r2, [r4, #4]
  4026f8:	1c53      	adds	r3, r2, #1
  4026fa:	a80e      	add	r0, sp, #56	; 0x38
  4026fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
  402700:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
  402704:	f47f ae74 	bne.w	4023f0 <_printf_float+0xc0>
  402708:	2206      	movs	r2, #6
  40270a:	e001      	b.n	402710 <_printf_float+0x3e0>
  40270c:	b912      	cbnz	r2, 402714 <_printf_float+0x3e4>
  40270e:	2201      	movs	r2, #1
  402710:	6062      	str	r2, [r4, #4]
  402712:	e675      	b.n	402400 <_printf_float+0xd0>
  402714:	2100      	movs	r1, #0
  402716:	9106      	str	r1, [sp, #24]
  402718:	f10d 0133 	add.w	r1, sp, #51	; 0x33
  40271c:	e88d 000c 	stmia.w	sp, {r2, r3}
  402720:	6023      	str	r3, [r4, #0]
  402722:	9005      	str	r0, [sp, #20]
  402724:	4642      	mov	r2, r8
  402726:	f8cd 9010 	str.w	r9, [sp, #16]
  40272a:	f8cd e00c 	str.w	lr, [sp, #12]
  40272e:	9102      	str	r1, [sp, #8]
  402730:	4653      	mov	r3, sl
  402732:	4628      	mov	r0, r5
  402734:	f7ff fd6c 	bl	402210 <__cvt>
  402738:	4680      	mov	r8, r0
  40273a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40273c:	1cd8      	adds	r0, r3, #3
  40273e:	db02      	blt.n	402746 <_printf_float+0x416>
  402740:	6862      	ldr	r2, [r4, #4]
  402742:	4293      	cmp	r3, r2
  402744:	dd1d      	ble.n	402782 <_printf_float+0x452>
  402746:	f1a9 0902 	sub.w	r9, r9, #2
  40274a:	fa5f f989 	uxtb.w	r9, r9
  40274e:	e670      	b.n	402432 <_printf_float+0x102>
  402750:	3301      	adds	r3, #1
  402752:	6123      	str	r3, [r4, #16]
  402754:	e684      	b.n	402460 <_printf_float+0x130>
  402756:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
  40275a:	d114      	bne.n	402786 <_printf_float+0x456>
  40275c:	2900      	cmp	r1, #0
  40275e:	6863      	ldr	r3, [r4, #4]
  402760:	dd07      	ble.n	402772 <_printf_float+0x442>
  402762:	6121      	str	r1, [r4, #16]
  402764:	b913      	cbnz	r3, 40276c <_printf_float+0x43c>
  402766:	6822      	ldr	r2, [r4, #0]
  402768:	07d2      	lsls	r2, r2, #31
  40276a:	d51d      	bpl.n	4027a8 <_printf_float+0x478>
  40276c:	3301      	adds	r3, #1
  40276e:	440b      	add	r3, r1
  402770:	e019      	b.n	4027a6 <_printf_float+0x476>
  402772:	b913      	cbnz	r3, 40277a <_printf_float+0x44a>
  402774:	6822      	ldr	r2, [r4, #0]
  402776:	07d0      	lsls	r0, r2, #31
  402778:	d501      	bpl.n	40277e <_printf_float+0x44e>
  40277a:	3302      	adds	r3, #2
  40277c:	e013      	b.n	4027a6 <_printf_float+0x476>
  40277e:	2301      	movs	r3, #1
  402780:	e011      	b.n	4027a6 <_printf_float+0x476>
  402782:	f04f 0967 	mov.w	r9, #103	; 0x67
  402786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40278a:	4293      	cmp	r3, r2
  40278c:	db05      	blt.n	40279a <_printf_float+0x46a>
  40278e:	6822      	ldr	r2, [r4, #0]
  402790:	6123      	str	r3, [r4, #16]
  402792:	07d1      	lsls	r1, r2, #31
  402794:	d508      	bpl.n	4027a8 <_printf_float+0x478>
  402796:	3301      	adds	r3, #1
  402798:	e005      	b.n	4027a6 <_printf_float+0x476>
  40279a:	2b00      	cmp	r3, #0
  40279c:	bfd4      	ite	le
  40279e:	f1c3 0302 	rsble	r3, r3, #2
  4027a2:	2301      	movgt	r3, #1
  4027a4:	4413      	add	r3, r2
  4027a6:	6123      	str	r3, [r4, #16]
  4027a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4027aa:	65a3      	str	r3, [r4, #88]	; 0x58
  4027ac:	f04f 0a00 	mov.w	sl, #0
  4027b0:	e656      	b.n	402460 <_printf_float+0x130>
  4027b2:	b011      	add	sp, #68	; 0x44
  4027b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004027b8 <_printf_common>:
  4027b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4027bc:	4691      	mov	r9, r2
  4027be:	461f      	mov	r7, r3
  4027c0:	690a      	ldr	r2, [r1, #16]
  4027c2:	688b      	ldr	r3, [r1, #8]
  4027c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  4027c8:	4293      	cmp	r3, r2
  4027ca:	bfb8      	it	lt
  4027cc:	4613      	movlt	r3, r2
  4027ce:	f8c9 3000 	str.w	r3, [r9]
  4027d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
  4027d6:	4606      	mov	r6, r0
  4027d8:	460c      	mov	r4, r1
  4027da:	b112      	cbz	r2, 4027e2 <_printf_common+0x2a>
  4027dc:	3301      	adds	r3, #1
  4027de:	f8c9 3000 	str.w	r3, [r9]
  4027e2:	6823      	ldr	r3, [r4, #0]
  4027e4:	0699      	lsls	r1, r3, #26
  4027e6:	bf42      	ittt	mi
  4027e8:	f8d9 3000 	ldrmi.w	r3, [r9]
  4027ec:	3302      	addmi	r3, #2
  4027ee:	f8c9 3000 	strmi.w	r3, [r9]
  4027f2:	6825      	ldr	r5, [r4, #0]
  4027f4:	f015 0506 	ands.w	r5, r5, #6
  4027f8:	d110      	bne.n	40281c <_printf_common+0x64>
  4027fa:	f104 0a19 	add.w	sl, r4, #25
  4027fe:	e007      	b.n	402810 <_printf_common+0x58>
  402800:	2301      	movs	r3, #1
  402802:	4652      	mov	r2, sl
  402804:	4639      	mov	r1, r7
  402806:	4630      	mov	r0, r6
  402808:	47c0      	blx	r8
  40280a:	3001      	adds	r0, #1
  40280c:	d01a      	beq.n	402844 <_printf_common+0x8c>
  40280e:	3501      	adds	r5, #1
  402810:	68e3      	ldr	r3, [r4, #12]
  402812:	f8d9 2000 	ldr.w	r2, [r9]
  402816:	1a9b      	subs	r3, r3, r2
  402818:	429d      	cmp	r5, r3
  40281a:	dbf1      	blt.n	402800 <_printf_common+0x48>
  40281c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
  402820:	6822      	ldr	r2, [r4, #0]
  402822:	3300      	adds	r3, #0
  402824:	bf18      	it	ne
  402826:	2301      	movne	r3, #1
  402828:	0692      	lsls	r2, r2, #26
  40282a:	d50f      	bpl.n	40284c <_printf_common+0x94>
  40282c:	18e1      	adds	r1, r4, r3
  40282e:	1c5a      	adds	r2, r3, #1
  402830:	2030      	movs	r0, #48	; 0x30
  402832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
  402836:	4422      	add	r2, r4
  402838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  40283c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
  402840:	3302      	adds	r3, #2
  402842:	e003      	b.n	40284c <_printf_common+0x94>
  402844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40284c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402850:	4639      	mov	r1, r7
  402852:	4630      	mov	r0, r6
  402854:	47c0      	blx	r8
  402856:	3001      	adds	r0, #1
  402858:	d0f4      	beq.n	402844 <_printf_common+0x8c>
  40285a:	6822      	ldr	r2, [r4, #0]
  40285c:	f8d9 5000 	ldr.w	r5, [r9]
  402860:	68e3      	ldr	r3, [r4, #12]
  402862:	f002 0206 	and.w	r2, r2, #6
  402866:	2a04      	cmp	r2, #4
  402868:	bf08      	it	eq
  40286a:	1b5d      	subeq	r5, r3, r5
  40286c:	6922      	ldr	r2, [r4, #16]
  40286e:	68a3      	ldr	r3, [r4, #8]
  402870:	bf0c      	ite	eq
  402872:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
  402876:	2500      	movne	r5, #0
  402878:	4293      	cmp	r3, r2
  40287a:	bfc4      	itt	gt
  40287c:	1a9b      	subgt	r3, r3, r2
  40287e:	18ed      	addgt	r5, r5, r3
  402880:	f04f 0900 	mov.w	r9, #0
  402884:	341a      	adds	r4, #26
  402886:	454d      	cmp	r5, r9
  402888:	d009      	beq.n	40289e <_printf_common+0xe6>
  40288a:	2301      	movs	r3, #1
  40288c:	4622      	mov	r2, r4
  40288e:	4639      	mov	r1, r7
  402890:	4630      	mov	r0, r6
  402892:	47c0      	blx	r8
  402894:	3001      	adds	r0, #1
  402896:	d0d5      	beq.n	402844 <_printf_common+0x8c>
  402898:	f109 0901 	add.w	r9, r9, #1
  40289c:	e7f3      	b.n	402886 <_printf_common+0xce>
  40289e:	2000      	movs	r0, #0
  4028a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004028a4 <_printf_i>:
  4028a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4028a8:	4617      	mov	r7, r2
  4028aa:	7e0a      	ldrb	r2, [r1, #24]
  4028ac:	b085      	sub	sp, #20
  4028ae:	2a6e      	cmp	r2, #110	; 0x6e
  4028b0:	4698      	mov	r8, r3
  4028b2:	4606      	mov	r6, r0
  4028b4:	460c      	mov	r4, r1
  4028b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4028b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
  4028bc:	f000 80ae 	beq.w	402a1c <_printf_i+0x178>
  4028c0:	d811      	bhi.n	4028e6 <_printf_i+0x42>
  4028c2:	2a63      	cmp	r2, #99	; 0x63
  4028c4:	d022      	beq.n	40290c <_printf_i+0x68>
  4028c6:	d809      	bhi.n	4028dc <_printf_i+0x38>
  4028c8:	2a00      	cmp	r2, #0
  4028ca:	f000 80bb 	beq.w	402a44 <_printf_i+0x1a0>
  4028ce:	2a58      	cmp	r2, #88	; 0x58
  4028d0:	f040 80ca 	bne.w	402a68 <_printf_i+0x1c4>
  4028d4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
  4028d8:	4983      	ldr	r1, [pc, #524]	; (402ae8 <_printf_i+0x244>)
  4028da:	e055      	b.n	402988 <_printf_i+0xe4>
  4028dc:	2a64      	cmp	r2, #100	; 0x64
  4028de:	d01e      	beq.n	40291e <_printf_i+0x7a>
  4028e0:	2a69      	cmp	r2, #105	; 0x69
  4028e2:	d01c      	beq.n	40291e <_printf_i+0x7a>
  4028e4:	e0c0      	b.n	402a68 <_printf_i+0x1c4>
  4028e6:	2a73      	cmp	r2, #115	; 0x73
  4028e8:	f000 80b0 	beq.w	402a4c <_printf_i+0x1a8>
  4028ec:	d809      	bhi.n	402902 <_printf_i+0x5e>
  4028ee:	2a6f      	cmp	r2, #111	; 0x6f
  4028f0:	d02e      	beq.n	402950 <_printf_i+0xac>
  4028f2:	2a70      	cmp	r2, #112	; 0x70
  4028f4:	f040 80b8 	bne.w	402a68 <_printf_i+0x1c4>
  4028f8:	680a      	ldr	r2, [r1, #0]
  4028fa:	f042 0220 	orr.w	r2, r2, #32
  4028fe:	600a      	str	r2, [r1, #0]
  402900:	e03e      	b.n	402980 <_printf_i+0xdc>
  402902:	2a75      	cmp	r2, #117	; 0x75
  402904:	d024      	beq.n	402950 <_printf_i+0xac>
  402906:	2a78      	cmp	r2, #120	; 0x78
  402908:	d03a      	beq.n	402980 <_printf_i+0xdc>
  40290a:	e0ad      	b.n	402a68 <_printf_i+0x1c4>
  40290c:	681a      	ldr	r2, [r3, #0]
  40290e:	f101 0542 	add.w	r5, r1, #66	; 0x42
  402912:	1d11      	adds	r1, r2, #4
  402914:	6019      	str	r1, [r3, #0]
  402916:	6813      	ldr	r3, [r2, #0]
  402918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  40291c:	e0a8      	b.n	402a70 <_printf_i+0x1cc>
  40291e:	6821      	ldr	r1, [r4, #0]
  402920:	681a      	ldr	r2, [r3, #0]
  402922:	f011 0f80 	tst.w	r1, #128	; 0x80
  402926:	d002      	beq.n	40292e <_printf_i+0x8a>
  402928:	1d11      	adds	r1, r2, #4
  40292a:	6019      	str	r1, [r3, #0]
  40292c:	e008      	b.n	402940 <_printf_i+0x9c>
  40292e:	f011 0f40 	tst.w	r1, #64	; 0x40
  402932:	f102 0104 	add.w	r1, r2, #4
  402936:	6019      	str	r1, [r3, #0]
  402938:	d002      	beq.n	402940 <_printf_i+0x9c>
  40293a:	f9b2 3000 	ldrsh.w	r3, [r2]
  40293e:	e000      	b.n	402942 <_printf_i+0x9e>
  402940:	6813      	ldr	r3, [r2, #0]
  402942:	2b00      	cmp	r3, #0
  402944:	da3c      	bge.n	4029c0 <_printf_i+0x11c>
  402946:	222d      	movs	r2, #45	; 0x2d
  402948:	425b      	negs	r3, r3
  40294a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
  40294e:	e037      	b.n	4029c0 <_printf_i+0x11c>
  402950:	6821      	ldr	r1, [r4, #0]
  402952:	681a      	ldr	r2, [r3, #0]
  402954:	f011 0f80 	tst.w	r1, #128	; 0x80
  402958:	d002      	beq.n	402960 <_printf_i+0xbc>
  40295a:	1d11      	adds	r1, r2, #4
  40295c:	6019      	str	r1, [r3, #0]
  40295e:	e007      	b.n	402970 <_printf_i+0xcc>
  402960:	f011 0f40 	tst.w	r1, #64	; 0x40
  402964:	f102 0104 	add.w	r1, r2, #4
  402968:	6019      	str	r1, [r3, #0]
  40296a:	d001      	beq.n	402970 <_printf_i+0xcc>
  40296c:	8813      	ldrh	r3, [r2, #0]
  40296e:	e000      	b.n	402972 <_printf_i+0xce>
  402970:	6813      	ldr	r3, [r2, #0]
  402972:	7e22      	ldrb	r2, [r4, #24]
  402974:	495c      	ldr	r1, [pc, #368]	; (402ae8 <_printf_i+0x244>)
  402976:	2a6f      	cmp	r2, #111	; 0x6f
  402978:	bf14      	ite	ne
  40297a:	220a      	movne	r2, #10
  40297c:	2208      	moveq	r2, #8
  40297e:	e01b      	b.n	4029b8 <_printf_i+0x114>
  402980:	2278      	movs	r2, #120	; 0x78
  402982:	495a      	ldr	r1, [pc, #360]	; (402aec <_printf_i+0x248>)
  402984:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
  402988:	6822      	ldr	r2, [r4, #0]
  40298a:	6818      	ldr	r0, [r3, #0]
  40298c:	f012 0f80 	tst.w	r2, #128	; 0x80
  402990:	f100 0504 	add.w	r5, r0, #4
  402994:	601d      	str	r5, [r3, #0]
  402996:	d103      	bne.n	4029a0 <_printf_i+0xfc>
  402998:	0655      	lsls	r5, r2, #25
  40299a:	d501      	bpl.n	4029a0 <_printf_i+0xfc>
  40299c:	8803      	ldrh	r3, [r0, #0]
  40299e:	e000      	b.n	4029a2 <_printf_i+0xfe>
  4029a0:	6803      	ldr	r3, [r0, #0]
  4029a2:	07d0      	lsls	r0, r2, #31
  4029a4:	bf44      	itt	mi
  4029a6:	f042 0220 	orrmi.w	r2, r2, #32
  4029aa:	6022      	strmi	r2, [r4, #0]
  4029ac:	b91b      	cbnz	r3, 4029b6 <_printf_i+0x112>
  4029ae:	6822      	ldr	r2, [r4, #0]
  4029b0:	f022 0220 	bic.w	r2, r2, #32
  4029b4:	6022      	str	r2, [r4, #0]
  4029b6:	2210      	movs	r2, #16
  4029b8:	2000      	movs	r0, #0
  4029ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
  4029be:	e001      	b.n	4029c4 <_printf_i+0x120>
  4029c0:	4949      	ldr	r1, [pc, #292]	; (402ae8 <_printf_i+0x244>)
  4029c2:	220a      	movs	r2, #10
  4029c4:	6865      	ldr	r5, [r4, #4]
  4029c6:	60a5      	str	r5, [r4, #8]
  4029c8:	2d00      	cmp	r5, #0
  4029ca:	db08      	blt.n	4029de <_printf_i+0x13a>
  4029cc:	6820      	ldr	r0, [r4, #0]
  4029ce:	f020 0004 	bic.w	r0, r0, #4
  4029d2:	6020      	str	r0, [r4, #0]
  4029d4:	b92b      	cbnz	r3, 4029e2 <_printf_i+0x13e>
  4029d6:	2d00      	cmp	r5, #0
  4029d8:	d17d      	bne.n	402ad6 <_printf_i+0x232>
  4029da:	4675      	mov	r5, lr
  4029dc:	e00c      	b.n	4029f8 <_printf_i+0x154>
  4029de:	2b00      	cmp	r3, #0
  4029e0:	d079      	beq.n	402ad6 <_printf_i+0x232>
  4029e2:	4675      	mov	r5, lr
  4029e4:	fbb3 f0f2 	udiv	r0, r3, r2
  4029e8:	fb02 3310 	mls	r3, r2, r0, r3
  4029ec:	5ccb      	ldrb	r3, [r1, r3]
  4029ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
  4029f2:	4603      	mov	r3, r0
  4029f4:	2800      	cmp	r0, #0
  4029f6:	d1f5      	bne.n	4029e4 <_printf_i+0x140>
  4029f8:	2a08      	cmp	r2, #8
  4029fa:	d10b      	bne.n	402a14 <_printf_i+0x170>
  4029fc:	6823      	ldr	r3, [r4, #0]
  4029fe:	07da      	lsls	r2, r3, #31
  402a00:	d508      	bpl.n	402a14 <_printf_i+0x170>
  402a02:	6923      	ldr	r3, [r4, #16]
  402a04:	6862      	ldr	r2, [r4, #4]
  402a06:	429a      	cmp	r2, r3
  402a08:	bfde      	ittt	le
  402a0a:	2330      	movle	r3, #48	; 0x30
  402a0c:	f805 3c01 	strble.w	r3, [r5, #-1]
  402a10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
  402a14:	ebc5 030e 	rsb	r3, r5, lr
  402a18:	6123      	str	r3, [r4, #16]
  402a1a:	e02e      	b.n	402a7a <_printf_i+0x1d6>
  402a1c:	6808      	ldr	r0, [r1, #0]
  402a1e:	681a      	ldr	r2, [r3, #0]
  402a20:	6949      	ldr	r1, [r1, #20]
  402a22:	f010 0f80 	tst.w	r0, #128	; 0x80
  402a26:	d003      	beq.n	402a30 <_printf_i+0x18c>
  402a28:	1d10      	adds	r0, r2, #4
  402a2a:	6018      	str	r0, [r3, #0]
  402a2c:	6813      	ldr	r3, [r2, #0]
  402a2e:	e008      	b.n	402a42 <_printf_i+0x19e>
  402a30:	f010 0f40 	tst.w	r0, #64	; 0x40
  402a34:	f102 0004 	add.w	r0, r2, #4
  402a38:	6018      	str	r0, [r3, #0]
  402a3a:	6813      	ldr	r3, [r2, #0]
  402a3c:	d001      	beq.n	402a42 <_printf_i+0x19e>
  402a3e:	8019      	strh	r1, [r3, #0]
  402a40:	e000      	b.n	402a44 <_printf_i+0x1a0>
  402a42:	6019      	str	r1, [r3, #0]
  402a44:	2300      	movs	r3, #0
  402a46:	6123      	str	r3, [r4, #16]
  402a48:	4675      	mov	r5, lr
  402a4a:	e016      	b.n	402a7a <_printf_i+0x1d6>
  402a4c:	681a      	ldr	r2, [r3, #0]
  402a4e:	1d11      	adds	r1, r2, #4
  402a50:	6019      	str	r1, [r3, #0]
  402a52:	6815      	ldr	r5, [r2, #0]
  402a54:	6862      	ldr	r2, [r4, #4]
  402a56:	2100      	movs	r1, #0
  402a58:	4628      	mov	r0, r5
  402a5a:	f001 fa61 	bl	403f20 <memchr>
  402a5e:	b108      	cbz	r0, 402a64 <_printf_i+0x1c0>
  402a60:	1b40      	subs	r0, r0, r5
  402a62:	6060      	str	r0, [r4, #4]
  402a64:	6863      	ldr	r3, [r4, #4]
  402a66:	e004      	b.n	402a72 <_printf_i+0x1ce>
  402a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402a6c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  402a70:	2301      	movs	r3, #1
  402a72:	6123      	str	r3, [r4, #16]
  402a74:	2300      	movs	r3, #0
  402a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  402a7a:	f8cd 8000 	str.w	r8, [sp]
  402a7e:	463b      	mov	r3, r7
  402a80:	aa03      	add	r2, sp, #12
  402a82:	4621      	mov	r1, r4
  402a84:	4630      	mov	r0, r6
  402a86:	f7ff fe97 	bl	4027b8 <_printf_common>
  402a8a:	3001      	adds	r0, #1
  402a8c:	d102      	bne.n	402a94 <_printf_i+0x1f0>
  402a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402a92:	e026      	b.n	402ae2 <_printf_i+0x23e>
  402a94:	6923      	ldr	r3, [r4, #16]
  402a96:	462a      	mov	r2, r5
  402a98:	4639      	mov	r1, r7
  402a9a:	4630      	mov	r0, r6
  402a9c:	47c0      	blx	r8
  402a9e:	3001      	adds	r0, #1
  402aa0:	d0f5      	beq.n	402a8e <_printf_i+0x1ea>
  402aa2:	6823      	ldr	r3, [r4, #0]
  402aa4:	079b      	lsls	r3, r3, #30
  402aa6:	d510      	bpl.n	402aca <_printf_i+0x226>
  402aa8:	2500      	movs	r5, #0
  402aaa:	f104 0919 	add.w	r9, r4, #25
  402aae:	e007      	b.n	402ac0 <_printf_i+0x21c>
  402ab0:	2301      	movs	r3, #1
  402ab2:	464a      	mov	r2, r9
  402ab4:	4639      	mov	r1, r7
  402ab6:	4630      	mov	r0, r6
  402ab8:	47c0      	blx	r8
  402aba:	3001      	adds	r0, #1
  402abc:	d0e7      	beq.n	402a8e <_printf_i+0x1ea>
  402abe:	3501      	adds	r5, #1
  402ac0:	68e3      	ldr	r3, [r4, #12]
  402ac2:	9a03      	ldr	r2, [sp, #12]
  402ac4:	1a9b      	subs	r3, r3, r2
  402ac6:	429d      	cmp	r5, r3
  402ac8:	dbf2      	blt.n	402ab0 <_printf_i+0x20c>
  402aca:	68e0      	ldr	r0, [r4, #12]
  402acc:	9b03      	ldr	r3, [sp, #12]
  402ace:	4298      	cmp	r0, r3
  402ad0:	bfb8      	it	lt
  402ad2:	4618      	movlt	r0, r3
  402ad4:	e005      	b.n	402ae2 <_printf_i+0x23e>
  402ad6:	780b      	ldrb	r3, [r1, #0]
  402ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  402adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
  402ae0:	e78a      	b.n	4029f8 <_printf_i+0x154>
  402ae2:	b005      	add	sp, #20
  402ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402ae8:	00405d6e 	.word	0x00405d6e
  402aec:	00405d7f 	.word	0x00405d7f

00402af0 <iprintf>:
  402af0:	b40f      	push	{r0, r1, r2, r3}
  402af2:	4b0a      	ldr	r3, [pc, #40]	; (402b1c <iprintf+0x2c>)
  402af4:	b513      	push	{r0, r1, r4, lr}
  402af6:	681c      	ldr	r4, [r3, #0]
  402af8:	b124      	cbz	r4, 402b04 <iprintf+0x14>
  402afa:	69a3      	ldr	r3, [r4, #24]
  402afc:	b913      	cbnz	r3, 402b04 <iprintf+0x14>
  402afe:	4620      	mov	r0, r4
  402b00:	f001 f90c 	bl	403d1c <__sinit>
  402b04:	ab05      	add	r3, sp, #20
  402b06:	9a04      	ldr	r2, [sp, #16]
  402b08:	68a1      	ldr	r1, [r4, #8]
  402b0a:	9301      	str	r3, [sp, #4]
  402b0c:	4620      	mov	r0, r4
  402b0e:	f001 fe1b 	bl	404748 <_vfiprintf_r>
  402b12:	b002      	add	sp, #8
  402b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402b18:	b004      	add	sp, #16
  402b1a:	4770      	bx	lr
  402b1c:	20000074 	.word	0x20000074

00402b20 <_puts_r>:
  402b20:	b570      	push	{r4, r5, r6, lr}
  402b22:	460e      	mov	r6, r1
  402b24:	4605      	mov	r5, r0
  402b26:	b118      	cbz	r0, 402b30 <_puts_r+0x10>
  402b28:	6983      	ldr	r3, [r0, #24]
  402b2a:	b90b      	cbnz	r3, 402b30 <_puts_r+0x10>
  402b2c:	f001 f8f6 	bl	403d1c <__sinit>
  402b30:	69ab      	ldr	r3, [r5, #24]
  402b32:	68ac      	ldr	r4, [r5, #8]
  402b34:	b913      	cbnz	r3, 402b3c <_puts_r+0x1c>
  402b36:	4628      	mov	r0, r5
  402b38:	f001 f8f0 	bl	403d1c <__sinit>
  402b3c:	4b22      	ldr	r3, [pc, #136]	; (402bc8 <_puts_r+0xa8>)
  402b3e:	429c      	cmp	r4, r3
  402b40:	d101      	bne.n	402b46 <_puts_r+0x26>
  402b42:	686c      	ldr	r4, [r5, #4]
  402b44:	e008      	b.n	402b58 <_puts_r+0x38>
  402b46:	4b21      	ldr	r3, [pc, #132]	; (402bcc <_puts_r+0xac>)
  402b48:	429c      	cmp	r4, r3
  402b4a:	d101      	bne.n	402b50 <_puts_r+0x30>
  402b4c:	68ac      	ldr	r4, [r5, #8]
  402b4e:	e003      	b.n	402b58 <_puts_r+0x38>
  402b50:	4b1f      	ldr	r3, [pc, #124]	; (402bd0 <_puts_r+0xb0>)
  402b52:	429c      	cmp	r4, r3
  402b54:	bf08      	it	eq
  402b56:	68ec      	ldreq	r4, [r5, #12]
  402b58:	89a3      	ldrh	r3, [r4, #12]
  402b5a:	071b      	lsls	r3, r3, #28
  402b5c:	d501      	bpl.n	402b62 <_puts_r+0x42>
  402b5e:	6923      	ldr	r3, [r4, #16]
  402b60:	b93b      	cbnz	r3, 402b72 <_puts_r+0x52>
  402b62:	4621      	mov	r1, r4
  402b64:	4628      	mov	r0, r5
  402b66:	f000 f94b 	bl	402e00 <__swsetup_r>
  402b6a:	b110      	cbz	r0, 402b72 <_puts_r+0x52>
  402b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402b70:	bd70      	pop	{r4, r5, r6, pc}
  402b72:	3e01      	subs	r6, #1
  402b74:	68a3      	ldr	r3, [r4, #8]
  402b76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  402b7a:	3b01      	subs	r3, #1
  402b7c:	60a3      	str	r3, [r4, #8]
  402b7e:	b191      	cbz	r1, 402ba6 <_puts_r+0x86>
  402b80:	2b00      	cmp	r3, #0
  402b82:	da04      	bge.n	402b8e <_puts_r+0x6e>
  402b84:	69a2      	ldr	r2, [r4, #24]
  402b86:	4293      	cmp	r3, r2
  402b88:	db06      	blt.n	402b98 <_puts_r+0x78>
  402b8a:	290a      	cmp	r1, #10
  402b8c:	d004      	beq.n	402b98 <_puts_r+0x78>
  402b8e:	6823      	ldr	r3, [r4, #0]
  402b90:	1c5a      	adds	r2, r3, #1
  402b92:	6022      	str	r2, [r4, #0]
  402b94:	7019      	strb	r1, [r3, #0]
  402b96:	e7ed      	b.n	402b74 <_puts_r+0x54>
  402b98:	4622      	mov	r2, r4
  402b9a:	4628      	mov	r0, r5
  402b9c:	f000 f8dc 	bl	402d58 <__swbuf_r>
  402ba0:	3001      	adds	r0, #1
  402ba2:	d1e7      	bne.n	402b74 <_puts_r+0x54>
  402ba4:	e7e2      	b.n	402b6c <_puts_r+0x4c>
  402ba6:	2b00      	cmp	r3, #0
  402ba8:	da08      	bge.n	402bbc <_puts_r+0x9c>
  402baa:	4622      	mov	r2, r4
  402bac:	210a      	movs	r1, #10
  402bae:	4628      	mov	r0, r5
  402bb0:	f000 f8d2 	bl	402d58 <__swbuf_r>
  402bb4:	3001      	adds	r0, #1
  402bb6:	d0d9      	beq.n	402b6c <_puts_r+0x4c>
  402bb8:	200a      	movs	r0, #10
  402bba:	bd70      	pop	{r4, r5, r6, pc}
  402bbc:	6823      	ldr	r3, [r4, #0]
  402bbe:	200a      	movs	r0, #10
  402bc0:	1c5a      	adds	r2, r3, #1
  402bc2:	6022      	str	r2, [r4, #0]
  402bc4:	7018      	strb	r0, [r3, #0]
  402bc6:	bd70      	pop	{r4, r5, r6, pc}
  402bc8:	00405da0 	.word	0x00405da0
  402bcc:	00405dc0 	.word	0x00405dc0
  402bd0:	00405de0 	.word	0x00405de0

00402bd4 <puts>:
  402bd4:	4b02      	ldr	r3, [pc, #8]	; (402be0 <puts+0xc>)
  402bd6:	4601      	mov	r1, r0
  402bd8:	6818      	ldr	r0, [r3, #0]
  402bda:	f7ff bfa1 	b.w	402b20 <_puts_r>
  402bde:	bf00      	nop
  402be0:	20000074 	.word	0x20000074

00402be4 <setbuf>:
  402be4:	2900      	cmp	r1, #0
  402be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402bea:	bf0c      	ite	eq
  402bec:	2202      	moveq	r2, #2
  402bee:	2200      	movne	r2, #0
  402bf0:	f000 b800 	b.w	402bf4 <setvbuf>

00402bf4 <setvbuf>:
  402bf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  402bf8:	461d      	mov	r5, r3
  402bfa:	4b4f      	ldr	r3, [pc, #316]	; (402d38 <setvbuf+0x144>)
  402bfc:	681e      	ldr	r6, [r3, #0]
  402bfe:	4604      	mov	r4, r0
  402c00:	460f      	mov	r7, r1
  402c02:	4690      	mov	r8, r2
  402c04:	b126      	cbz	r6, 402c10 <setvbuf+0x1c>
  402c06:	69b3      	ldr	r3, [r6, #24]
  402c08:	b913      	cbnz	r3, 402c10 <setvbuf+0x1c>
  402c0a:	4630      	mov	r0, r6
  402c0c:	f001 f886 	bl	403d1c <__sinit>
  402c10:	4b4a      	ldr	r3, [pc, #296]	; (402d3c <setvbuf+0x148>)
  402c12:	429c      	cmp	r4, r3
  402c14:	d101      	bne.n	402c1a <setvbuf+0x26>
  402c16:	6874      	ldr	r4, [r6, #4]
  402c18:	e008      	b.n	402c2c <setvbuf+0x38>
  402c1a:	4b49      	ldr	r3, [pc, #292]	; (402d40 <setvbuf+0x14c>)
  402c1c:	429c      	cmp	r4, r3
  402c1e:	d101      	bne.n	402c24 <setvbuf+0x30>
  402c20:	68b4      	ldr	r4, [r6, #8]
  402c22:	e003      	b.n	402c2c <setvbuf+0x38>
  402c24:	4b47      	ldr	r3, [pc, #284]	; (402d44 <setvbuf+0x150>)
  402c26:	429c      	cmp	r4, r3
  402c28:	bf08      	it	eq
  402c2a:	68f4      	ldreq	r4, [r6, #12]
  402c2c:	f1b8 0f02 	cmp.w	r8, #2
  402c30:	d004      	beq.n	402c3c <setvbuf+0x48>
  402c32:	f1b8 0f01 	cmp.w	r8, #1
  402c36:	d879      	bhi.n	402d2c <setvbuf+0x138>
  402c38:	2d00      	cmp	r5, #0
  402c3a:	db77      	blt.n	402d2c <setvbuf+0x138>
  402c3c:	4621      	mov	r1, r4
  402c3e:	4630      	mov	r0, r6
  402c40:	f001 f802 	bl	403c48 <_fflush_r>
  402c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402c46:	b141      	cbz	r1, 402c5a <setvbuf+0x66>
  402c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402c4c:	4299      	cmp	r1, r3
  402c4e:	d002      	beq.n	402c56 <setvbuf+0x62>
  402c50:	4630      	mov	r0, r6
  402c52:	f001 fca5 	bl	4045a0 <_free_r>
  402c56:	2300      	movs	r3, #0
  402c58:	6363      	str	r3, [r4, #52]	; 0x34
  402c5a:	2300      	movs	r3, #0
  402c5c:	61a3      	str	r3, [r4, #24]
  402c5e:	6063      	str	r3, [r4, #4]
  402c60:	89a3      	ldrh	r3, [r4, #12]
  402c62:	061b      	lsls	r3, r3, #24
  402c64:	d503      	bpl.n	402c6e <setvbuf+0x7a>
  402c66:	6921      	ldr	r1, [r4, #16]
  402c68:	4630      	mov	r0, r6
  402c6a:	f001 fc99 	bl	4045a0 <_free_r>
  402c6e:	89a3      	ldrh	r3, [r4, #12]
  402c70:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  402c74:	f023 0303 	bic.w	r3, r3, #3
  402c78:	f1b8 0f02 	cmp.w	r8, #2
  402c7c:	81a3      	strh	r3, [r4, #12]
  402c7e:	d01e      	beq.n	402cbe <setvbuf+0xca>
  402c80:	ab01      	add	r3, sp, #4
  402c82:	466a      	mov	r2, sp
  402c84:	4621      	mov	r1, r4
  402c86:	4630      	mov	r0, r6
  402c88:	f001 f8e0 	bl	403e4c <__swhatbuf_r>
  402c8c:	89a3      	ldrh	r3, [r4, #12]
  402c8e:	4318      	orrs	r0, r3
  402c90:	81a0      	strh	r0, [r4, #12]
  402c92:	b90d      	cbnz	r5, 402c98 <setvbuf+0xa4>
  402c94:	9d00      	ldr	r5, [sp, #0]
  402c96:	e000      	b.n	402c9a <setvbuf+0xa6>
  402c98:	bb2f      	cbnz	r7, 402ce6 <setvbuf+0xf2>
  402c9a:	4628      	mov	r0, r5
  402c9c:	f001 f936 	bl	403f0c <malloc>
  402ca0:	4607      	mov	r7, r0
  402ca2:	b9d0      	cbnz	r0, 402cda <setvbuf+0xe6>
  402ca4:	f8dd 9000 	ldr.w	r9, [sp]
  402ca8:	45a9      	cmp	r9, r5
  402caa:	d102      	bne.n	402cb2 <setvbuf+0xbe>
  402cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402cb0:	e006      	b.n	402cc0 <setvbuf+0xcc>
  402cb2:	4648      	mov	r0, r9
  402cb4:	f001 f92a 	bl	403f0c <malloc>
  402cb8:	4607      	mov	r7, r0
  402cba:	b978      	cbnz	r0, 402cdc <setvbuf+0xe8>
  402cbc:	e7f6      	b.n	402cac <setvbuf+0xb8>
  402cbe:	2000      	movs	r0, #0
  402cc0:	89a3      	ldrh	r3, [r4, #12]
  402cc2:	f043 0302 	orr.w	r3, r3, #2
  402cc6:	81a3      	strh	r3, [r4, #12]
  402cc8:	2300      	movs	r3, #0
  402cca:	60a3      	str	r3, [r4, #8]
  402ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
  402cd0:	6023      	str	r3, [r4, #0]
  402cd2:	6123      	str	r3, [r4, #16]
  402cd4:	2301      	movs	r3, #1
  402cd6:	6163      	str	r3, [r4, #20]
  402cd8:	e02a      	b.n	402d30 <setvbuf+0x13c>
  402cda:	46a9      	mov	r9, r5
  402cdc:	89a3      	ldrh	r3, [r4, #12]
  402cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ce2:	81a3      	strh	r3, [r4, #12]
  402ce4:	464d      	mov	r5, r9
  402ce6:	69b3      	ldr	r3, [r6, #24]
  402ce8:	b913      	cbnz	r3, 402cf0 <setvbuf+0xfc>
  402cea:	4630      	mov	r0, r6
  402cec:	f001 f816 	bl	403d1c <__sinit>
  402cf0:	f1b8 0f01 	cmp.w	r8, #1
  402cf4:	bf08      	it	eq
  402cf6:	89a3      	ldrheq	r3, [r4, #12]
  402cf8:	6027      	str	r7, [r4, #0]
  402cfa:	bf04      	itt	eq
  402cfc:	f043 0301 	orreq.w	r3, r3, #1
  402d00:	81a3      	strheq	r3, [r4, #12]
  402d02:	89a3      	ldrh	r3, [r4, #12]
  402d04:	6127      	str	r7, [r4, #16]
  402d06:	f003 0008 	and.w	r0, r3, #8
  402d0a:	b280      	uxth	r0, r0
  402d0c:	6165      	str	r5, [r4, #20]
  402d0e:	b158      	cbz	r0, 402d28 <setvbuf+0x134>
  402d10:	f013 0301 	ands.w	r3, r3, #1
  402d14:	f04f 0000 	mov.w	r0, #0
  402d18:	bf1d      	ittte	ne
  402d1a:	426d      	negne	r5, r5
  402d1c:	60a0      	strne	r0, [r4, #8]
  402d1e:	61a5      	strne	r5, [r4, #24]
  402d20:	60a5      	streq	r5, [r4, #8]
  402d22:	bf08      	it	eq
  402d24:	4618      	moveq	r0, r3
  402d26:	e003      	b.n	402d30 <setvbuf+0x13c>
  402d28:	60a0      	str	r0, [r4, #8]
  402d2a:	e001      	b.n	402d30 <setvbuf+0x13c>
  402d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402d30:	b003      	add	sp, #12
  402d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402d36:	bf00      	nop
  402d38:	20000074 	.word	0x20000074
  402d3c:	00405da0 	.word	0x00405da0
  402d40:	00405dc0 	.word	0x00405dc0
  402d44:	00405de0 	.word	0x00405de0

00402d48 <strlen>:
  402d48:	4603      	mov	r3, r0
  402d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
  402d4e:	2a00      	cmp	r2, #0
  402d50:	d1fb      	bne.n	402d4a <strlen+0x2>
  402d52:	1a18      	subs	r0, r3, r0
  402d54:	3801      	subs	r0, #1
  402d56:	4770      	bx	lr

00402d58 <__swbuf_r>:
  402d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d5a:	460f      	mov	r7, r1
  402d5c:	4614      	mov	r4, r2
  402d5e:	4605      	mov	r5, r0
  402d60:	b118      	cbz	r0, 402d6a <__swbuf_r+0x12>
  402d62:	6983      	ldr	r3, [r0, #24]
  402d64:	b90b      	cbnz	r3, 402d6a <__swbuf_r+0x12>
  402d66:	f000 ffd9 	bl	403d1c <__sinit>
  402d6a:	4b22      	ldr	r3, [pc, #136]	; (402df4 <__swbuf_r+0x9c>)
  402d6c:	429c      	cmp	r4, r3
  402d6e:	d101      	bne.n	402d74 <__swbuf_r+0x1c>
  402d70:	686c      	ldr	r4, [r5, #4]
  402d72:	e008      	b.n	402d86 <__swbuf_r+0x2e>
  402d74:	4b20      	ldr	r3, [pc, #128]	; (402df8 <__swbuf_r+0xa0>)
  402d76:	429c      	cmp	r4, r3
  402d78:	d101      	bne.n	402d7e <__swbuf_r+0x26>
  402d7a:	68ac      	ldr	r4, [r5, #8]
  402d7c:	e003      	b.n	402d86 <__swbuf_r+0x2e>
  402d7e:	4b1f      	ldr	r3, [pc, #124]	; (402dfc <__swbuf_r+0xa4>)
  402d80:	429c      	cmp	r4, r3
  402d82:	bf08      	it	eq
  402d84:	68ec      	ldreq	r4, [r5, #12]
  402d86:	69a3      	ldr	r3, [r4, #24]
  402d88:	60a3      	str	r3, [r4, #8]
  402d8a:	89a3      	ldrh	r3, [r4, #12]
  402d8c:	071a      	lsls	r2, r3, #28
  402d8e:	d509      	bpl.n	402da4 <__swbuf_r+0x4c>
  402d90:	6923      	ldr	r3, [r4, #16]
  402d92:	b13b      	cbz	r3, 402da4 <__swbuf_r+0x4c>
  402d94:	6823      	ldr	r3, [r4, #0]
  402d96:	6920      	ldr	r0, [r4, #16]
  402d98:	1a18      	subs	r0, r3, r0
  402d9a:	6963      	ldr	r3, [r4, #20]
  402d9c:	4298      	cmp	r0, r3
  402d9e:	b2fe      	uxtb	r6, r7
  402da0:	db0f      	blt.n	402dc2 <__swbuf_r+0x6a>
  402da2:	e008      	b.n	402db6 <__swbuf_r+0x5e>
  402da4:	4621      	mov	r1, r4
  402da6:	4628      	mov	r0, r5
  402da8:	f000 f82a 	bl	402e00 <__swsetup_r>
  402dac:	2800      	cmp	r0, #0
  402dae:	d0f1      	beq.n	402d94 <__swbuf_r+0x3c>
  402db0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  402db4:	e01b      	b.n	402dee <__swbuf_r+0x96>
  402db6:	4621      	mov	r1, r4
  402db8:	4628      	mov	r0, r5
  402dba:	f000 ff45 	bl	403c48 <_fflush_r>
  402dbe:	2800      	cmp	r0, #0
  402dc0:	d1f6      	bne.n	402db0 <__swbuf_r+0x58>
  402dc2:	68a3      	ldr	r3, [r4, #8]
  402dc4:	3b01      	subs	r3, #1
  402dc6:	60a3      	str	r3, [r4, #8]
  402dc8:	6823      	ldr	r3, [r4, #0]
  402dca:	1c5a      	adds	r2, r3, #1
  402dcc:	6022      	str	r2, [r4, #0]
  402dce:	701f      	strb	r7, [r3, #0]
  402dd0:	6963      	ldr	r3, [r4, #20]
  402dd2:	3001      	adds	r0, #1
  402dd4:	4298      	cmp	r0, r3
  402dd6:	d004      	beq.n	402de2 <__swbuf_r+0x8a>
  402dd8:	89a3      	ldrh	r3, [r4, #12]
  402dda:	07db      	lsls	r3, r3, #31
  402ddc:	d507      	bpl.n	402dee <__swbuf_r+0x96>
  402dde:	2e0a      	cmp	r6, #10
  402de0:	d105      	bne.n	402dee <__swbuf_r+0x96>
  402de2:	4621      	mov	r1, r4
  402de4:	4628      	mov	r0, r5
  402de6:	f000 ff2f 	bl	403c48 <_fflush_r>
  402dea:	2800      	cmp	r0, #0
  402dec:	d1e0      	bne.n	402db0 <__swbuf_r+0x58>
  402dee:	4630      	mov	r0, r6
  402df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402df2:	bf00      	nop
  402df4:	00405da0 	.word	0x00405da0
  402df8:	00405dc0 	.word	0x00405dc0
  402dfc:	00405de0 	.word	0x00405de0

00402e00 <__swsetup_r>:
  402e00:	4b32      	ldr	r3, [pc, #200]	; (402ecc <__swsetup_r+0xcc>)
  402e02:	b570      	push	{r4, r5, r6, lr}
  402e04:	681d      	ldr	r5, [r3, #0]
  402e06:	4606      	mov	r6, r0
  402e08:	460c      	mov	r4, r1
  402e0a:	b125      	cbz	r5, 402e16 <__swsetup_r+0x16>
  402e0c:	69ab      	ldr	r3, [r5, #24]
  402e0e:	b913      	cbnz	r3, 402e16 <__swsetup_r+0x16>
  402e10:	4628      	mov	r0, r5
  402e12:	f000 ff83 	bl	403d1c <__sinit>
  402e16:	4b2e      	ldr	r3, [pc, #184]	; (402ed0 <__swsetup_r+0xd0>)
  402e18:	429c      	cmp	r4, r3
  402e1a:	d101      	bne.n	402e20 <__swsetup_r+0x20>
  402e1c:	686c      	ldr	r4, [r5, #4]
  402e1e:	e008      	b.n	402e32 <__swsetup_r+0x32>
  402e20:	4b2c      	ldr	r3, [pc, #176]	; (402ed4 <__swsetup_r+0xd4>)
  402e22:	429c      	cmp	r4, r3
  402e24:	d101      	bne.n	402e2a <__swsetup_r+0x2a>
  402e26:	68ac      	ldr	r4, [r5, #8]
  402e28:	e003      	b.n	402e32 <__swsetup_r+0x32>
  402e2a:	4b2b      	ldr	r3, [pc, #172]	; (402ed8 <__swsetup_r+0xd8>)
  402e2c:	429c      	cmp	r4, r3
  402e2e:	bf08      	it	eq
  402e30:	68ec      	ldreq	r4, [r5, #12]
  402e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402e36:	b29a      	uxth	r2, r3
  402e38:	0715      	lsls	r5, r2, #28
  402e3a:	d41d      	bmi.n	402e78 <__swsetup_r+0x78>
  402e3c:	06d0      	lsls	r0, r2, #27
  402e3e:	d402      	bmi.n	402e46 <__swsetup_r+0x46>
  402e40:	2209      	movs	r2, #9
  402e42:	6032      	str	r2, [r6, #0]
  402e44:	e03a      	b.n	402ebc <__swsetup_r+0xbc>
  402e46:	0751      	lsls	r1, r2, #29
  402e48:	d512      	bpl.n	402e70 <__swsetup_r+0x70>
  402e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  402e4c:	b141      	cbz	r1, 402e60 <__swsetup_r+0x60>
  402e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
  402e52:	4299      	cmp	r1, r3
  402e54:	d002      	beq.n	402e5c <__swsetup_r+0x5c>
  402e56:	4630      	mov	r0, r6
  402e58:	f001 fba2 	bl	4045a0 <_free_r>
  402e5c:	2300      	movs	r3, #0
  402e5e:	6363      	str	r3, [r4, #52]	; 0x34
  402e60:	89a3      	ldrh	r3, [r4, #12]
  402e62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
  402e66:	81a3      	strh	r3, [r4, #12]
  402e68:	2300      	movs	r3, #0
  402e6a:	6063      	str	r3, [r4, #4]
  402e6c:	6923      	ldr	r3, [r4, #16]
  402e6e:	6023      	str	r3, [r4, #0]
  402e70:	89a3      	ldrh	r3, [r4, #12]
  402e72:	f043 0308 	orr.w	r3, r3, #8
  402e76:	81a3      	strh	r3, [r4, #12]
  402e78:	6923      	ldr	r3, [r4, #16]
  402e7a:	b94b      	cbnz	r3, 402e90 <__swsetup_r+0x90>
  402e7c:	89a3      	ldrh	r3, [r4, #12]
  402e7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
  402e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e86:	d003      	beq.n	402e90 <__swsetup_r+0x90>
  402e88:	4621      	mov	r1, r4
  402e8a:	4630      	mov	r0, r6
  402e8c:	f001 f802 	bl	403e94 <__smakebuf_r>
  402e90:	89a2      	ldrh	r2, [r4, #12]
  402e92:	f012 0301 	ands.w	r3, r2, #1
  402e96:	d005      	beq.n	402ea4 <__swsetup_r+0xa4>
  402e98:	2300      	movs	r3, #0
  402e9a:	60a3      	str	r3, [r4, #8]
  402e9c:	6963      	ldr	r3, [r4, #20]
  402e9e:	425b      	negs	r3, r3
  402ea0:	61a3      	str	r3, [r4, #24]
  402ea2:	e003      	b.n	402eac <__swsetup_r+0xac>
  402ea4:	0792      	lsls	r2, r2, #30
  402ea6:	bf58      	it	pl
  402ea8:	6963      	ldrpl	r3, [r4, #20]
  402eaa:	60a3      	str	r3, [r4, #8]
  402eac:	6923      	ldr	r3, [r4, #16]
  402eae:	b95b      	cbnz	r3, 402ec8 <__swsetup_r+0xc8>
  402eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402eb4:	f003 0080 	and.w	r0, r3, #128	; 0x80
  402eb8:	b280      	uxth	r0, r0
  402eba:	b130      	cbz	r0, 402eca <__swsetup_r+0xca>
  402ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402ec0:	81a3      	strh	r3, [r4, #12]
  402ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  402ec6:	bd70      	pop	{r4, r5, r6, pc}
  402ec8:	2000      	movs	r0, #0
  402eca:	bd70      	pop	{r4, r5, r6, pc}
  402ecc:	20000074 	.word	0x20000074
  402ed0:	00405da0 	.word	0x00405da0
  402ed4:	00405dc0 	.word	0x00405dc0
  402ed8:	00405de0 	.word	0x00405de0

00402edc <quorem>:
  402edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ee0:	6903      	ldr	r3, [r0, #16]
  402ee2:	690c      	ldr	r4, [r1, #16]
  402ee4:	429c      	cmp	r4, r3
  402ee6:	4680      	mov	r8, r0
  402ee8:	f300 8083 	bgt.w	402ff2 <quorem+0x116>
  402eec:	3c01      	subs	r4, #1
  402eee:	f101 0714 	add.w	r7, r1, #20
  402ef2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  402ef6:	f100 0614 	add.w	r6, r0, #20
  402efa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
  402efe:	eb06 030e 	add.w	r3, r6, lr
  402f02:	9301      	str	r3, [sp, #4]
  402f04:	3501      	adds	r5, #1
  402f06:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
  402f0a:	fbb3 f5f5 	udiv	r5, r3, r5
  402f0e:	eb07 090e 	add.w	r9, r7, lr
  402f12:	2d00      	cmp	r5, #0
  402f14:	d039      	beq.n	402f8a <quorem+0xae>
  402f16:	f04f 0a00 	mov.w	sl, #0
  402f1a:	4638      	mov	r0, r7
  402f1c:	46b4      	mov	ip, r6
  402f1e:	46d3      	mov	fp, sl
  402f20:	f850 2b04 	ldr.w	r2, [r0], #4
  402f24:	b293      	uxth	r3, r2
  402f26:	fb05 a303 	mla	r3, r5, r3, sl
  402f2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
  402f2e:	b29b      	uxth	r3, r3
  402f30:	ebc3 030b 	rsb	r3, r3, fp
  402f34:	0c12      	lsrs	r2, r2, #16
  402f36:	f8bc b000 	ldrh.w	fp, [ip]
  402f3a:	fb05 a202 	mla	r2, r5, r2, sl
  402f3e:	fa13 f38b 	uxtah	r3, r3, fp
  402f42:	ea4f 4a12 	mov.w	sl, r2, lsr #16
  402f46:	fa1f fb82 	uxth.w	fp, r2
  402f4a:	f8dc 2000 	ldr.w	r2, [ip]
  402f4e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  402f52:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402f56:	b29b      	uxth	r3, r3
  402f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402f5c:	4581      	cmp	r9, r0
  402f5e:	ea4f 4b22 	mov.w	fp, r2, asr #16
  402f62:	f84c 3b04 	str.w	r3, [ip], #4
  402f66:	d2db      	bcs.n	402f20 <quorem+0x44>
  402f68:	f856 300e 	ldr.w	r3, [r6, lr]
  402f6c:	b96b      	cbnz	r3, 402f8a <quorem+0xae>
  402f6e:	9b01      	ldr	r3, [sp, #4]
  402f70:	3b04      	subs	r3, #4
  402f72:	429e      	cmp	r6, r3
  402f74:	461a      	mov	r2, r3
  402f76:	d302      	bcc.n	402f7e <quorem+0xa2>
  402f78:	f8c8 4010 	str.w	r4, [r8, #16]
  402f7c:	e005      	b.n	402f8a <quorem+0xae>
  402f7e:	6812      	ldr	r2, [r2, #0]
  402f80:	3b04      	subs	r3, #4
  402f82:	2a00      	cmp	r2, #0
  402f84:	d1f8      	bne.n	402f78 <quorem+0x9c>
  402f86:	3c01      	subs	r4, #1
  402f88:	e7f3      	b.n	402f72 <quorem+0x96>
  402f8a:	4640      	mov	r0, r8
  402f8c:	f001 fa31 	bl	4043f2 <__mcmp>
  402f90:	2800      	cmp	r0, #0
  402f92:	db2c      	blt.n	402fee <quorem+0x112>
  402f94:	3501      	adds	r5, #1
  402f96:	4630      	mov	r0, r6
  402f98:	f04f 0e00 	mov.w	lr, #0
  402f9c:	f857 1b04 	ldr.w	r1, [r7], #4
  402fa0:	f8d0 c000 	ldr.w	ip, [r0]
  402fa4:	b28a      	uxth	r2, r1
  402fa6:	ebc2 030e 	rsb	r3, r2, lr
  402faa:	0c09      	lsrs	r1, r1, #16
  402fac:	fa13 f38c 	uxtah	r3, r3, ip
  402fb0:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
  402fb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
  402fb8:	b29b      	uxth	r3, r3
  402fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402fbe:	45b9      	cmp	r9, r7
  402fc0:	ea4f 4e22 	mov.w	lr, r2, asr #16
  402fc4:	f840 3b04 	str.w	r3, [r0], #4
  402fc8:	d2e8      	bcs.n	402f9c <quorem+0xc0>
  402fca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402fce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  402fd2:	b962      	cbnz	r2, 402fee <quorem+0x112>
  402fd4:	3b04      	subs	r3, #4
  402fd6:	429e      	cmp	r6, r3
  402fd8:	461a      	mov	r2, r3
  402fda:	d302      	bcc.n	402fe2 <quorem+0x106>
  402fdc:	f8c8 4010 	str.w	r4, [r8, #16]
  402fe0:	e005      	b.n	402fee <quorem+0x112>
  402fe2:	6812      	ldr	r2, [r2, #0]
  402fe4:	3b04      	subs	r3, #4
  402fe6:	2a00      	cmp	r2, #0
  402fe8:	d1f8      	bne.n	402fdc <quorem+0x100>
  402fea:	3c01      	subs	r4, #1
  402fec:	e7f3      	b.n	402fd6 <quorem+0xfa>
  402fee:	4628      	mov	r0, r5
  402ff0:	e000      	b.n	402ff4 <quorem+0x118>
  402ff2:	2000      	movs	r0, #0
  402ff4:	b003      	add	sp, #12
  402ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ffa:	0000      	movs	r0, r0
  402ffc:	0000      	movs	r0, r0
	...

00403000 <_dtoa_r>:
  403000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403004:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403006:	b095      	sub	sp, #84	; 0x54
  403008:	4682      	mov	sl, r0
  40300a:	9c21      	ldr	r4, [sp, #132]	; 0x84
  40300c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403010:	b945      	cbnz	r5, 403024 <_dtoa_r+0x24>
  403012:	2010      	movs	r0, #16
  403014:	f000 ff7a 	bl	403f0c <malloc>
  403018:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
  40301c:	6045      	str	r5, [r0, #4]
  40301e:	6085      	str	r5, [r0, #8]
  403020:	6005      	str	r5, [r0, #0]
  403022:	60c5      	str	r5, [r0, #12]
  403024:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403028:	6819      	ldr	r1, [r3, #0]
  40302a:	b159      	cbz	r1, 403044 <_dtoa_r+0x44>
  40302c:	685a      	ldr	r2, [r3, #4]
  40302e:	604a      	str	r2, [r1, #4]
  403030:	2301      	movs	r3, #1
  403032:	4093      	lsls	r3, r2
  403034:	608b      	str	r3, [r1, #8]
  403036:	4650      	mov	r0, sl
  403038:	f001 f802 	bl	404040 <_Bfree>
  40303c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403040:	2200      	movs	r2, #0
  403042:	601a      	str	r2, [r3, #0]
  403044:	9b03      	ldr	r3, [sp, #12]
  403046:	4aa0      	ldr	r2, [pc, #640]	; (4032c8 <_dtoa_r+0x2c8>)
  403048:	2b00      	cmp	r3, #0
  40304a:	bfbf      	itttt	lt
  40304c:	2301      	movlt	r3, #1
  40304e:	6023      	strlt	r3, [r4, #0]
  403050:	9b03      	ldrlt	r3, [sp, #12]
  403052:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
  403056:	bfb8      	it	lt
  403058:	9303      	strlt	r3, [sp, #12]
  40305a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40305e:	bfa4      	itt	ge
  403060:	2300      	movge	r3, #0
  403062:	6023      	strge	r3, [r4, #0]
  403064:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
  403068:	0d1b      	lsrs	r3, r3, #20
  40306a:	051b      	lsls	r3, r3, #20
  40306c:	4293      	cmp	r3, r2
  40306e:	d11d      	bne.n	4030ac <_dtoa_r+0xac>
  403070:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403072:	f242 730f 	movw	r3, #9999	; 0x270f
  403076:	6013      	str	r3, [r2, #0]
  403078:	9b02      	ldr	r3, [sp, #8]
  40307a:	b943      	cbnz	r3, 40308e <_dtoa_r+0x8e>
  40307c:	4a93      	ldr	r2, [pc, #588]	; (4032cc <_dtoa_r+0x2cc>)
  40307e:	4b94      	ldr	r3, [pc, #592]	; (4032d0 <_dtoa_r+0x2d0>)
  403080:	f3c8 0013 	ubfx	r0, r8, #0, #20
  403084:	2800      	cmp	r0, #0
  403086:	bf14      	ite	ne
  403088:	4618      	movne	r0, r3
  40308a:	4610      	moveq	r0, r2
  40308c:	e000      	b.n	403090 <_dtoa_r+0x90>
  40308e:	4890      	ldr	r0, [pc, #576]	; (4032d0 <_dtoa_r+0x2d0>)
  403090:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403092:	2b00      	cmp	r3, #0
  403094:	f000 854a 	beq.w	403b2c <_dtoa_r+0xb2c>
  403098:	78c3      	ldrb	r3, [r0, #3]
  40309a:	b113      	cbz	r3, 4030a2 <_dtoa_r+0xa2>
  40309c:	f100 0308 	add.w	r3, r0, #8
  4030a0:	e000      	b.n	4030a4 <_dtoa_r+0xa4>
  4030a2:	1cc3      	adds	r3, r0, #3
  4030a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4030a6:	6013      	str	r3, [r2, #0]
  4030a8:	f000 bd40 	b.w	403b2c <_dtoa_r+0xb2c>
  4030ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  4030b0:	2200      	movs	r2, #0
  4030b2:	2300      	movs	r3, #0
  4030b4:	4620      	mov	r0, r4
  4030b6:	4629      	mov	r1, r5
  4030b8:	f002 f960 	bl	40537c <__aeabi_dcmpeq>
  4030bc:	4607      	mov	r7, r0
  4030be:	b158      	cbz	r0, 4030d8 <_dtoa_r+0xd8>
  4030c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4030c2:	2301      	movs	r3, #1
  4030c4:	6013      	str	r3, [r2, #0]
  4030c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4030c8:	2b00      	cmp	r3, #0
  4030ca:	f000 8522 	beq.w	403b12 <_dtoa_r+0xb12>
  4030ce:	4881      	ldr	r0, [pc, #516]	; (4032d4 <_dtoa_r+0x2d4>)
  4030d0:	6018      	str	r0, [r3, #0]
  4030d2:	3801      	subs	r0, #1
  4030d4:	f000 bd2a 	b.w	403b2c <_dtoa_r+0xb2c>
  4030d8:	ab12      	add	r3, sp, #72	; 0x48
  4030da:	9301      	str	r3, [sp, #4]
  4030dc:	ab13      	add	r3, sp, #76	; 0x4c
  4030de:	9300      	str	r3, [sp, #0]
  4030e0:	4622      	mov	r2, r4
  4030e2:	462b      	mov	r3, r5
  4030e4:	4650      	mov	r0, sl
  4030e6:	f001 f9ff 	bl	4044e8 <__d2b>
  4030ea:	f3c8 560a 	ubfx	r6, r8, #20, #11
  4030ee:	9004      	str	r0, [sp, #16]
  4030f0:	b156      	cbz	r6, 403108 <_dtoa_r+0x108>
  4030f2:	f3c5 0313 	ubfx	r3, r5, #0, #20
  4030f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4030fa:	4620      	mov	r0, r4
  4030fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403100:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  403104:	9711      	str	r7, [sp, #68]	; 0x44
  403106:	e01d      	b.n	403144 <_dtoa_r+0x144>
  403108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40310a:	9e12      	ldr	r6, [sp, #72]	; 0x48
  40310c:	441e      	add	r6, r3
  40310e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403112:	2b20      	cmp	r3, #32
  403114:	dd0a      	ble.n	40312c <_dtoa_r+0x12c>
  403116:	9a02      	ldr	r2, [sp, #8]
  403118:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40311c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403120:	fa22 f000 	lsr.w	r0, r2, r0
  403124:	fa08 f303 	lsl.w	r3, r8, r3
  403128:	4318      	orrs	r0, r3
  40312a:	e004      	b.n	403136 <_dtoa_r+0x136>
  40312c:	f1c3 0020 	rsb	r0, r3, #32
  403130:	9b02      	ldr	r3, [sp, #8]
  403132:	fa03 f000 	lsl.w	r0, r3, r0
  403136:	f001 fe43 	bl	404dc0 <__aeabi_ui2d>
  40313a:	2301      	movs	r3, #1
  40313c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403140:	3e01      	subs	r6, #1
  403142:	9311      	str	r3, [sp, #68]	; 0x44
  403144:	2200      	movs	r2, #0
  403146:	4b64      	ldr	r3, [pc, #400]	; (4032d8 <_dtoa_r+0x2d8>)
  403148:	f001 fcfc 	bl	404b44 <__aeabi_dsub>
  40314c:	a358      	add	r3, pc, #352	; (adr r3, 4032b0 <_dtoa_r+0x2b0>)
  40314e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403152:	f001 feab 	bl	404eac <__aeabi_dmul>
  403156:	a358      	add	r3, pc, #352	; (adr r3, 4032b8 <_dtoa_r+0x2b8>)
  403158:	e9d3 2300 	ldrd	r2, r3, [r3]
  40315c:	f001 fcf4 	bl	404b48 <__adddf3>
  403160:	4604      	mov	r4, r0
  403162:	4630      	mov	r0, r6
  403164:	460d      	mov	r5, r1
  403166:	f001 fe3b 	bl	404de0 <__aeabi_i2d>
  40316a:	a355      	add	r3, pc, #340	; (adr r3, 4032c0 <_dtoa_r+0x2c0>)
  40316c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403170:	f001 fe9c 	bl	404eac <__aeabi_dmul>
  403174:	4602      	mov	r2, r0
  403176:	460b      	mov	r3, r1
  403178:	4620      	mov	r0, r4
  40317a:	4629      	mov	r1, r5
  40317c:	f001 fce4 	bl	404b48 <__adddf3>
  403180:	4604      	mov	r4, r0
  403182:	460d      	mov	r5, r1
  403184:	f002 f942 	bl	40540c <__aeabi_d2iz>
  403188:	2200      	movs	r2, #0
  40318a:	4683      	mov	fp, r0
  40318c:	2300      	movs	r3, #0
  40318e:	4620      	mov	r0, r4
  403190:	4629      	mov	r1, r5
  403192:	f002 f8fd 	bl	405390 <__aeabi_dcmplt>
  403196:	b158      	cbz	r0, 4031b0 <_dtoa_r+0x1b0>
  403198:	4658      	mov	r0, fp
  40319a:	f001 fe21 	bl	404de0 <__aeabi_i2d>
  40319e:	4602      	mov	r2, r0
  4031a0:	460b      	mov	r3, r1
  4031a2:	4620      	mov	r0, r4
  4031a4:	4629      	mov	r1, r5
  4031a6:	f002 f8e9 	bl	40537c <__aeabi_dcmpeq>
  4031aa:	b908      	cbnz	r0, 4031b0 <_dtoa_r+0x1b0>
  4031ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4031b0:	f1bb 0f16 	cmp.w	fp, #22
  4031b4:	d80d      	bhi.n	4031d2 <_dtoa_r+0x1d2>
  4031b6:	4949      	ldr	r1, [pc, #292]	; (4032dc <_dtoa_r+0x2dc>)
  4031b8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4031bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4031c0:	e9d1 0100 	ldrd	r0, r1, [r1]
  4031c4:	f002 f902 	bl	4053cc <__aeabi_dcmpgt>
  4031c8:	b130      	cbz	r0, 4031d8 <_dtoa_r+0x1d8>
  4031ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  4031ce:	2300      	movs	r3, #0
  4031d0:	e000      	b.n	4031d4 <_dtoa_r+0x1d4>
  4031d2:	2301      	movs	r3, #1
  4031d4:	9310      	str	r3, [sp, #64]	; 0x40
  4031d6:	e000      	b.n	4031da <_dtoa_r+0x1da>
  4031d8:	9010      	str	r0, [sp, #64]	; 0x40
  4031da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4031dc:	1b9e      	subs	r6, r3, r6
  4031de:	1e73      	subs	r3, r6, #1
  4031e0:	9307      	str	r3, [sp, #28]
  4031e2:	bf43      	ittte	mi
  4031e4:	f1c3 0800 	rsbmi	r8, r3, #0
  4031e8:	2300      	movmi	r3, #0
  4031ea:	9307      	strmi	r3, [sp, #28]
  4031ec:	f04f 0800 	movpl.w	r8, #0
  4031f0:	f1bb 0f00 	cmp.w	fp, #0
  4031f4:	db06      	blt.n	403204 <_dtoa_r+0x204>
  4031f6:	9b07      	ldr	r3, [sp, #28]
  4031f8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  4031fc:	445b      	add	r3, fp
  4031fe:	9307      	str	r3, [sp, #28]
  403200:	2700      	movs	r7, #0
  403202:	e005      	b.n	403210 <_dtoa_r+0x210>
  403204:	2300      	movs	r3, #0
  403206:	ebcb 0808 	rsb	r8, fp, r8
  40320a:	f1cb 0700 	rsb	r7, fp, #0
  40320e:	930b      	str	r3, [sp, #44]	; 0x2c
  403210:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403212:	2b09      	cmp	r3, #9
  403214:	d827      	bhi.n	403266 <_dtoa_r+0x266>
  403216:	2b05      	cmp	r3, #5
  403218:	bfc4      	itt	gt
  40321a:	3b04      	subgt	r3, #4
  40321c:	931e      	strgt	r3, [sp, #120]	; 0x78
  40321e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403220:	f1a3 0302 	sub.w	r3, r3, #2
  403224:	bfcc      	ite	gt
  403226:	2500      	movgt	r5, #0
  403228:	2501      	movle	r5, #1
  40322a:	2b03      	cmp	r3, #3
  40322c:	d820      	bhi.n	403270 <_dtoa_r+0x270>
  40322e:	e8df f003 	tbb	[pc, r3]
  403232:	0e06      	.short	0x0e06
  403234:	0402      	.short	0x0402
  403236:	2301      	movs	r3, #1
  403238:	e002      	b.n	403240 <_dtoa_r+0x240>
  40323a:	2301      	movs	r3, #1
  40323c:	e008      	b.n	403250 <_dtoa_r+0x250>
  40323e:	2300      	movs	r3, #0
  403240:	930a      	str	r3, [sp, #40]	; 0x28
  403242:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403244:	2b00      	cmp	r3, #0
  403246:	dd1d      	ble.n	403284 <_dtoa_r+0x284>
  403248:	4699      	mov	r9, r3
  40324a:	9305      	str	r3, [sp, #20]
  40324c:	e021      	b.n	403292 <_dtoa_r+0x292>
  40324e:	2300      	movs	r3, #0
  403250:	930a      	str	r3, [sp, #40]	; 0x28
  403252:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403254:	eb0b 0903 	add.w	r9, fp, r3
  403258:	f109 0301 	add.w	r3, r9, #1
  40325c:	2b01      	cmp	r3, #1
  40325e:	9305      	str	r3, [sp, #20]
  403260:	bfb8      	it	lt
  403262:	2301      	movlt	r3, #1
  403264:	e015      	b.n	403292 <_dtoa_r+0x292>
  403266:	2501      	movs	r5, #1
  403268:	2300      	movs	r3, #0
  40326a:	931e      	str	r3, [sp, #120]	; 0x78
  40326c:	950a      	str	r5, [sp, #40]	; 0x28
  40326e:	e001      	b.n	403274 <_dtoa_r+0x274>
  403270:	2301      	movs	r3, #1
  403272:	930a      	str	r3, [sp, #40]	; 0x28
  403274:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  403278:	2200      	movs	r2, #0
  40327a:	f8cd 9014 	str.w	r9, [sp, #20]
  40327e:	2312      	movs	r3, #18
  403280:	921f      	str	r2, [sp, #124]	; 0x7c
  403282:	e006      	b.n	403292 <_dtoa_r+0x292>
  403284:	f04f 0901 	mov.w	r9, #1
  403288:	f8cd 9014 	str.w	r9, [sp, #20]
  40328c:	464b      	mov	r3, r9
  40328e:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  403292:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
  403296:	2200      	movs	r2, #0
  403298:	6062      	str	r2, [r4, #4]
  40329a:	2104      	movs	r1, #4
  40329c:	f101 0214 	add.w	r2, r1, #20
  4032a0:	429a      	cmp	r2, r3
  4032a2:	d81d      	bhi.n	4032e0 <_dtoa_r+0x2e0>
  4032a4:	6862      	ldr	r2, [r4, #4]
  4032a6:	3201      	adds	r2, #1
  4032a8:	6062      	str	r2, [r4, #4]
  4032aa:	0049      	lsls	r1, r1, #1
  4032ac:	e7f6      	b.n	40329c <_dtoa_r+0x29c>
  4032ae:	bf00      	nop
  4032b0:	636f4361 	.word	0x636f4361
  4032b4:	3fd287a7 	.word	0x3fd287a7
  4032b8:	8b60c8b3 	.word	0x8b60c8b3
  4032bc:	3fc68a28 	.word	0x3fc68a28
  4032c0:	509f79fb 	.word	0x509f79fb
  4032c4:	3fd34413 	.word	0x3fd34413
  4032c8:	7ff00000 	.word	0x7ff00000
  4032cc:	00405d90 	.word	0x00405d90
  4032d0:	00405d99 	.word	0x00405d99
  4032d4:	00405d6d 	.word	0x00405d6d
  4032d8:	3ff80000 	.word	0x3ff80000
  4032dc:	00405e00 	.word	0x00405e00
  4032e0:	6861      	ldr	r1, [r4, #4]
  4032e2:	4650      	mov	r0, sl
  4032e4:	f000 fe77 	bl	403fd6 <_Balloc>
  4032e8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4032ec:	6020      	str	r0, [r4, #0]
  4032ee:	681b      	ldr	r3, [r3, #0]
  4032f0:	9306      	str	r3, [sp, #24]
  4032f2:	9b05      	ldr	r3, [sp, #20]
  4032f4:	2b0e      	cmp	r3, #14
  4032f6:	f200 815d 	bhi.w	4035b4 <_dtoa_r+0x5b4>
  4032fa:	2d00      	cmp	r5, #0
  4032fc:	f000 815a 	beq.w	4035b4 <_dtoa_r+0x5b4>
  403300:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
  403304:	f1bb 0f00 	cmp.w	fp, #0
  403308:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  40330c:	dd31      	ble.n	403372 <_dtoa_r+0x372>
  40330e:	4aa0      	ldr	r2, [pc, #640]	; (403590 <_dtoa_r+0x590>)
  403310:	f00b 030f 	and.w	r3, fp, #15
  403314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  403318:	e9d3 3400 	ldrd	r3, r4, [r3]
  40331c:	ea4f 152b 	mov.w	r5, fp, asr #4
  403320:	06e8      	lsls	r0, r5, #27
  403322:	e9cd 3408 	strd	r3, r4, [sp, #32]
  403326:	d50c      	bpl.n	403342 <_dtoa_r+0x342>
  403328:	4b9a      	ldr	r3, [pc, #616]	; (403594 <_dtoa_r+0x594>)
  40332a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40332e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403332:	f001 fee5 	bl	405100 <__aeabi_ddiv>
  403336:	f005 050f 	and.w	r5, r5, #15
  40333a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40333e:	2403      	movs	r4, #3
  403340:	e000      	b.n	403344 <_dtoa_r+0x344>
  403342:	2402      	movs	r4, #2
  403344:	4e93      	ldr	r6, [pc, #588]	; (403594 <_dtoa_r+0x594>)
  403346:	b16d      	cbz	r5, 403364 <_dtoa_r+0x364>
  403348:	07e9      	lsls	r1, r5, #31
  40334a:	d508      	bpl.n	40335e <_dtoa_r+0x35e>
  40334c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403350:	e9d6 2300 	ldrd	r2, r3, [r6]
  403354:	f001 fdaa 	bl	404eac <__aeabi_dmul>
  403358:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40335c:	3401      	adds	r4, #1
  40335e:	106d      	asrs	r5, r5, #1
  403360:	3608      	adds	r6, #8
  403362:	e7f0      	b.n	403346 <_dtoa_r+0x346>
  403364:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  403368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40336c:	f001 fec8 	bl	405100 <__aeabi_ddiv>
  403370:	e020      	b.n	4033b4 <_dtoa_r+0x3b4>
  403372:	f1cb 0500 	rsb	r5, fp, #0
  403376:	b305      	cbz	r5, 4033ba <_dtoa_r+0x3ba>
  403378:	4b85      	ldr	r3, [pc, #532]	; (403590 <_dtoa_r+0x590>)
  40337a:	4e86      	ldr	r6, [pc, #536]	; (403594 <_dtoa_r+0x594>)
  40337c:	f005 020f 	and.w	r2, r5, #15
  403380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403384:	e9d3 2300 	ldrd	r2, r3, [r3]
  403388:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40338c:	f001 fd8e 	bl	404eac <__aeabi_dmul>
  403390:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403394:	112d      	asrs	r5, r5, #4
  403396:	2300      	movs	r3, #0
  403398:	2402      	movs	r4, #2
  40339a:	b155      	cbz	r5, 4033b2 <_dtoa_r+0x3b2>
  40339c:	07ea      	lsls	r2, r5, #31
  40339e:	d505      	bpl.n	4033ac <_dtoa_r+0x3ac>
  4033a0:	e9d6 2300 	ldrd	r2, r3, [r6]
  4033a4:	f001 fd82 	bl	404eac <__aeabi_dmul>
  4033a8:	3401      	adds	r4, #1
  4033aa:	2301      	movs	r3, #1
  4033ac:	106d      	asrs	r5, r5, #1
  4033ae:	3608      	adds	r6, #8
  4033b0:	e7f3      	b.n	40339a <_dtoa_r+0x39a>
  4033b2:	b11b      	cbz	r3, 4033bc <_dtoa_r+0x3bc>
  4033b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4033b8:	e000      	b.n	4033bc <_dtoa_r+0x3bc>
  4033ba:	2402      	movs	r4, #2
  4033bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4033be:	b1e3      	cbz	r3, 4033fa <_dtoa_r+0x3fa>
  4033c0:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
  4033c4:	2200      	movs	r2, #0
  4033c6:	4b74      	ldr	r3, [pc, #464]	; (403598 <_dtoa_r+0x598>)
  4033c8:	4628      	mov	r0, r5
  4033ca:	4631      	mov	r1, r6
  4033cc:	f001 ffe0 	bl	405390 <__aeabi_dcmplt>
  4033d0:	b198      	cbz	r0, 4033fa <_dtoa_r+0x3fa>
  4033d2:	9b05      	ldr	r3, [sp, #20]
  4033d4:	b18b      	cbz	r3, 4033fa <_dtoa_r+0x3fa>
  4033d6:	f1b9 0f00 	cmp.w	r9, #0
  4033da:	f340 80e7 	ble.w	4035ac <_dtoa_r+0x5ac>
  4033de:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
  4033e2:	9308      	str	r3, [sp, #32]
  4033e4:	4631      	mov	r1, r6
  4033e6:	2200      	movs	r2, #0
  4033e8:	4b6c      	ldr	r3, [pc, #432]	; (40359c <_dtoa_r+0x59c>)
  4033ea:	4628      	mov	r0, r5
  4033ec:	f001 fd5e 	bl	404eac <__aeabi_dmul>
  4033f0:	3401      	adds	r4, #1
  4033f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4033f6:	464e      	mov	r6, r9
  4033f8:	e002      	b.n	403400 <_dtoa_r+0x400>
  4033fa:	9e05      	ldr	r6, [sp, #20]
  4033fc:	f8cd b020 	str.w	fp, [sp, #32]
  403400:	4620      	mov	r0, r4
  403402:	f001 fced 	bl	404de0 <__aeabi_i2d>
  403406:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40340a:	f001 fd4f 	bl	404eac <__aeabi_dmul>
  40340e:	4b64      	ldr	r3, [pc, #400]	; (4035a0 <_dtoa_r+0x5a0>)
  403410:	2200      	movs	r2, #0
  403412:	f001 fb99 	bl	404b48 <__adddf3>
  403416:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
  40341a:	4604      	mov	r4, r0
  40341c:	930c      	str	r3, [sp, #48]	; 0x30
  40341e:	461d      	mov	r5, r3
  403420:	b9d6      	cbnz	r6, 403458 <_dtoa_r+0x458>
  403422:	2200      	movs	r2, #0
  403424:	4b5f      	ldr	r3, [pc, #380]	; (4035a4 <_dtoa_r+0x5a4>)
  403426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40342a:	f001 fb8b 	bl	404b44 <__aeabi_dsub>
  40342e:	4622      	mov	r2, r4
  403430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403432:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403436:	f001 ffc9 	bl	4053cc <__aeabi_dcmpgt>
  40343a:	2800      	cmp	r0, #0
  40343c:	f040 8240 	bne.w	4038c0 <_dtoa_r+0x8c0>
  403440:	990c      	ldr	r1, [sp, #48]	; 0x30
  403442:	4622      	mov	r2, r4
  403444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  403448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40344c:	f001 ffa0 	bl	405390 <__aeabi_dcmplt>
  403450:	2800      	cmp	r0, #0
  403452:	f040 822c 	bne.w	4038ae <_dtoa_r+0x8ae>
  403456:	e0a9      	b.n	4035ac <_dtoa_r+0x5ac>
  403458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40345a:	4b4d      	ldr	r3, [pc, #308]	; (403590 <_dtoa_r+0x590>)
  40345c:	1e71      	subs	r1, r6, #1
  40345e:	2a00      	cmp	r2, #0
  403460:	d049      	beq.n	4034f6 <_dtoa_r+0x4f6>
  403462:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  403466:	e9d3 2300 	ldrd	r2, r3, [r3]
  40346a:	2000      	movs	r0, #0
  40346c:	494e      	ldr	r1, [pc, #312]	; (4035a8 <_dtoa_r+0x5a8>)
  40346e:	f001 fe47 	bl	405100 <__aeabi_ddiv>
  403472:	4622      	mov	r2, r4
  403474:	462b      	mov	r3, r5
  403476:	f001 fb65 	bl	404b44 <__aeabi_dsub>
  40347a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40347e:	9c06      	ldr	r4, [sp, #24]
  403480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403484:	f001 ffc2 	bl	40540c <__aeabi_d2iz>
  403488:	4605      	mov	r5, r0
  40348a:	f001 fca9 	bl	404de0 <__aeabi_i2d>
  40348e:	4602      	mov	r2, r0
  403490:	460b      	mov	r3, r1
  403492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403496:	f001 fb55 	bl	404b44 <__aeabi_dsub>
  40349a:	3530      	adds	r5, #48	; 0x30
  40349c:	f804 5b01 	strb.w	r5, [r4], #1
  4034a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4034a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4034a8:	f001 ff72 	bl	405390 <__aeabi_dcmplt>
  4034ac:	2800      	cmp	r0, #0
  4034ae:	f040 8320 	bne.w	403af2 <_dtoa_r+0xaf2>
  4034b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4034b6:	2000      	movs	r0, #0
  4034b8:	4937      	ldr	r1, [pc, #220]	; (403598 <_dtoa_r+0x598>)
  4034ba:	f001 fb43 	bl	404b44 <__aeabi_dsub>
  4034be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4034c2:	f001 ff65 	bl	405390 <__aeabi_dcmplt>
  4034c6:	2800      	cmp	r0, #0
  4034c8:	f040 80d2 	bne.w	403670 <_dtoa_r+0x670>
  4034cc:	9b06      	ldr	r3, [sp, #24]
  4034ce:	1ae3      	subs	r3, r4, r3
  4034d0:	42b3      	cmp	r3, r6
  4034d2:	da6b      	bge.n	4035ac <_dtoa_r+0x5ac>
  4034d4:	2200      	movs	r2, #0
  4034d6:	4b31      	ldr	r3, [pc, #196]	; (40359c <_dtoa_r+0x59c>)
  4034d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4034dc:	f001 fce6 	bl	404eac <__aeabi_dmul>
  4034e0:	2200      	movs	r2, #0
  4034e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4034e6:	4b2d      	ldr	r3, [pc, #180]	; (40359c <_dtoa_r+0x59c>)
  4034e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4034ec:	f001 fcde 	bl	404eac <__aeabi_dmul>
  4034f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4034f4:	e7c4      	b.n	403480 <_dtoa_r+0x480>
  4034f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  4034fa:	4622      	mov	r2, r4
  4034fc:	462b      	mov	r3, r5
  4034fe:	e9d1 0100 	ldrd	r0, r1, [r1]
  403502:	f001 fcd3 	bl	404eac <__aeabi_dmul>
  403506:	9b06      	ldr	r3, [sp, #24]
  403508:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40350c:	199c      	adds	r4, r3, r6
  40350e:	461d      	mov	r5, r3
  403510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403514:	f001 ff7a 	bl	40540c <__aeabi_d2iz>
  403518:	4606      	mov	r6, r0
  40351a:	f001 fc61 	bl	404de0 <__aeabi_i2d>
  40351e:	3630      	adds	r6, #48	; 0x30
  403520:	4602      	mov	r2, r0
  403522:	460b      	mov	r3, r1
  403524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403528:	f001 fb0c 	bl	404b44 <__aeabi_dsub>
  40352c:	f805 6b01 	strb.w	r6, [r5], #1
  403530:	42ac      	cmp	r4, r5
  403532:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403536:	f04f 0200 	mov.w	r2, #0
  40353a:	d123      	bne.n	403584 <_dtoa_r+0x584>
  40353c:	4b1a      	ldr	r3, [pc, #104]	; (4035a8 <_dtoa_r+0x5a8>)
  40353e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403542:	f001 fb01 	bl	404b48 <__adddf3>
  403546:	4602      	mov	r2, r0
  403548:	460b      	mov	r3, r1
  40354a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40354e:	f001 ff3d 	bl	4053cc <__aeabi_dcmpgt>
  403552:	2800      	cmp	r0, #0
  403554:	f040 808c 	bne.w	403670 <_dtoa_r+0x670>
  403558:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40355c:	2000      	movs	r0, #0
  40355e:	4912      	ldr	r1, [pc, #72]	; (4035a8 <_dtoa_r+0x5a8>)
  403560:	f001 faf0 	bl	404b44 <__aeabi_dsub>
  403564:	4602      	mov	r2, r0
  403566:	460b      	mov	r3, r1
  403568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40356c:	f001 ff10 	bl	405390 <__aeabi_dcmplt>
  403570:	b1e0      	cbz	r0, 4035ac <_dtoa_r+0x5ac>
  403572:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403576:	2b30      	cmp	r3, #48	; 0x30
  403578:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  40357c:	f040 82b9 	bne.w	403af2 <_dtoa_r+0xaf2>
  403580:	4614      	mov	r4, r2
  403582:	e7f6      	b.n	403572 <_dtoa_r+0x572>
  403584:	4b05      	ldr	r3, [pc, #20]	; (40359c <_dtoa_r+0x59c>)
  403586:	f001 fc91 	bl	404eac <__aeabi_dmul>
  40358a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40358e:	e7bf      	b.n	403510 <_dtoa_r+0x510>
  403590:	00405e00 	.word	0x00405e00
  403594:	00405ec8 	.word	0x00405ec8
  403598:	3ff00000 	.word	0x3ff00000
  40359c:	40240000 	.word	0x40240000
  4035a0:	401c0000 	.word	0x401c0000
  4035a4:	40140000 	.word	0x40140000
  4035a8:	3fe00000 	.word	0x3fe00000
  4035ac:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
  4035b0:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4035b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4035b6:	2b00      	cmp	r3, #0
  4035b8:	db7d      	blt.n	4036b6 <_dtoa_r+0x6b6>
  4035ba:	f1bb 0f0e 	cmp.w	fp, #14
  4035be:	dc7a      	bgt.n	4036b6 <_dtoa_r+0x6b6>
  4035c0:	4bab      	ldr	r3, [pc, #684]	; (403870 <_dtoa_r+0x870>)
  4035c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  4035c6:	e9d3 6700 	ldrd	r6, r7, [r3]
  4035ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4035cc:	2b00      	cmp	r3, #0
  4035ce:	da14      	bge.n	4035fa <_dtoa_r+0x5fa>
  4035d0:	9b05      	ldr	r3, [sp, #20]
  4035d2:	2b00      	cmp	r3, #0
  4035d4:	dc11      	bgt.n	4035fa <_dtoa_r+0x5fa>
  4035d6:	f040 816c 	bne.w	4038b2 <_dtoa_r+0x8b2>
  4035da:	2200      	movs	r2, #0
  4035dc:	4ba5      	ldr	r3, [pc, #660]	; (403874 <_dtoa_r+0x874>)
  4035de:	4630      	mov	r0, r6
  4035e0:	4639      	mov	r1, r7
  4035e2:	f001 fc63 	bl	404eac <__aeabi_dmul>
  4035e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4035ea:	f001 fee5 	bl	4053b8 <__aeabi_dcmpge>
  4035ee:	9d05      	ldr	r5, [sp, #20]
  4035f0:	462e      	mov	r6, r5
  4035f2:	2800      	cmp	r0, #0
  4035f4:	f040 815f 	bne.w	4038b6 <_dtoa_r+0x8b6>
  4035f8:	e165      	b.n	4038c6 <_dtoa_r+0x8c6>
  4035fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4035fe:	9c06      	ldr	r4, [sp, #24]
  403600:	4632      	mov	r2, r6
  403602:	463b      	mov	r3, r7
  403604:	4640      	mov	r0, r8
  403606:	4649      	mov	r1, r9
  403608:	f001 fd7a 	bl	405100 <__aeabi_ddiv>
  40360c:	f001 fefe 	bl	40540c <__aeabi_d2iz>
  403610:	4605      	mov	r5, r0
  403612:	f001 fbe5 	bl	404de0 <__aeabi_i2d>
  403616:	4632      	mov	r2, r6
  403618:	463b      	mov	r3, r7
  40361a:	f001 fc47 	bl	404eac <__aeabi_dmul>
  40361e:	460b      	mov	r3, r1
  403620:	4602      	mov	r2, r0
  403622:	4649      	mov	r1, r9
  403624:	4640      	mov	r0, r8
  403626:	f001 fa8d 	bl	404b44 <__aeabi_dsub>
  40362a:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  40362e:	9b06      	ldr	r3, [sp, #24]
  403630:	f804 eb01 	strb.w	lr, [r4], #1
  403634:	ebc3 0e04 	rsb	lr, r3, r4
  403638:	9b05      	ldr	r3, [sp, #20]
  40363a:	4573      	cmp	r3, lr
  40363c:	d12e      	bne.n	40369c <_dtoa_r+0x69c>
  40363e:	4602      	mov	r2, r0
  403640:	460b      	mov	r3, r1
  403642:	f001 fa81 	bl	404b48 <__adddf3>
  403646:	4680      	mov	r8, r0
  403648:	4689      	mov	r9, r1
  40364a:	4602      	mov	r2, r0
  40364c:	460b      	mov	r3, r1
  40364e:	4630      	mov	r0, r6
  403650:	4639      	mov	r1, r7
  403652:	f001 fe9d 	bl	405390 <__aeabi_dcmplt>
  403656:	b978      	cbnz	r0, 403678 <_dtoa_r+0x678>
  403658:	4642      	mov	r2, r8
  40365a:	464b      	mov	r3, r9
  40365c:	4630      	mov	r0, r6
  40365e:	4639      	mov	r1, r7
  403660:	f001 fe8c 	bl	40537c <__aeabi_dcmpeq>
  403664:	2800      	cmp	r0, #0
  403666:	f000 8246 	beq.w	403af6 <_dtoa_r+0xaf6>
  40366a:	07eb      	lsls	r3, r5, #31
  40366c:	d404      	bmi.n	403678 <_dtoa_r+0x678>
  40366e:	e242      	b.n	403af6 <_dtoa_r+0xaf6>
  403670:	f8dd b020 	ldr.w	fp, [sp, #32]
  403674:	e000      	b.n	403678 <_dtoa_r+0x678>
  403676:	461c      	mov	r4, r3
  403678:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  40367c:	2a39      	cmp	r2, #57	; 0x39
  40367e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
  403682:	d107      	bne.n	403694 <_dtoa_r+0x694>
  403684:	9a06      	ldr	r2, [sp, #24]
  403686:	429a      	cmp	r2, r3
  403688:	d1f5      	bne.n	403676 <_dtoa_r+0x676>
  40368a:	9906      	ldr	r1, [sp, #24]
  40368c:	2230      	movs	r2, #48	; 0x30
  40368e:	f10b 0b01 	add.w	fp, fp, #1
  403692:	700a      	strb	r2, [r1, #0]
  403694:	781a      	ldrb	r2, [r3, #0]
  403696:	3201      	adds	r2, #1
  403698:	701a      	strb	r2, [r3, #0]
  40369a:	e22c      	b.n	403af6 <_dtoa_r+0xaf6>
  40369c:	2200      	movs	r2, #0
  40369e:	4b76      	ldr	r3, [pc, #472]	; (403878 <_dtoa_r+0x878>)
  4036a0:	f001 fc04 	bl	404eac <__aeabi_dmul>
  4036a4:	2200      	movs	r2, #0
  4036a6:	2300      	movs	r3, #0
  4036a8:	4680      	mov	r8, r0
  4036aa:	4689      	mov	r9, r1
  4036ac:	f001 fe66 	bl	40537c <__aeabi_dcmpeq>
  4036b0:	2800      	cmp	r0, #0
  4036b2:	d0a5      	beq.n	403600 <_dtoa_r+0x600>
  4036b4:	e21f      	b.n	403af6 <_dtoa_r+0xaf6>
  4036b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4036b8:	2a00      	cmp	r2, #0
  4036ba:	d02b      	beq.n	403714 <_dtoa_r+0x714>
  4036bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  4036be:	2a01      	cmp	r2, #1
  4036c0:	dc0a      	bgt.n	4036d8 <_dtoa_r+0x6d8>
  4036c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4036c4:	b112      	cbz	r2, 4036cc <_dtoa_r+0x6cc>
  4036c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4036ca:	e002      	b.n	4036d2 <_dtoa_r+0x6d2>
  4036cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4036ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4036d2:	463d      	mov	r5, r7
  4036d4:	4644      	mov	r4, r8
  4036d6:	e013      	b.n	403700 <_dtoa_r+0x700>
  4036d8:	9b05      	ldr	r3, [sp, #20]
  4036da:	1e5d      	subs	r5, r3, #1
  4036dc:	42af      	cmp	r7, r5
  4036de:	bfbf      	itttt	lt
  4036e0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
  4036e2:	1bea      	sublt	r2, r5, r7
  4036e4:	189b      	addlt	r3, r3, r2
  4036e6:	930b      	strlt	r3, [sp, #44]	; 0x2c
  4036e8:	9b05      	ldr	r3, [sp, #20]
  4036ea:	bfb6      	itet	lt
  4036ec:	462f      	movlt	r7, r5
  4036ee:	1b7d      	subge	r5, r7, r5
  4036f0:	2500      	movlt	r5, #0
  4036f2:	2b00      	cmp	r3, #0
  4036f4:	bfab      	itete	ge
  4036f6:	9b05      	ldrge	r3, [sp, #20]
  4036f8:	ebc3 0408 	rsblt	r4, r3, r8
  4036fc:	4644      	movge	r4, r8
  4036fe:	2300      	movlt	r3, #0
  403700:	9a07      	ldr	r2, [sp, #28]
  403702:	2101      	movs	r1, #1
  403704:	441a      	add	r2, r3
  403706:	4650      	mov	r0, sl
  403708:	4498      	add	r8, r3
  40370a:	9207      	str	r2, [sp, #28]
  40370c:	f000 fd37 	bl	40417e <__i2b>
  403710:	4606      	mov	r6, r0
  403712:	e002      	b.n	40371a <_dtoa_r+0x71a>
  403714:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403716:	463d      	mov	r5, r7
  403718:	4644      	mov	r4, r8
  40371a:	b15c      	cbz	r4, 403734 <_dtoa_r+0x734>
  40371c:	9b07      	ldr	r3, [sp, #28]
  40371e:	2b00      	cmp	r3, #0
  403720:	dd08      	ble.n	403734 <_dtoa_r+0x734>
  403722:	42a3      	cmp	r3, r4
  403724:	9a07      	ldr	r2, [sp, #28]
  403726:	bfa8      	it	ge
  403728:	4623      	movge	r3, r4
  40372a:	ebc3 0808 	rsb	r8, r3, r8
  40372e:	1ae4      	subs	r4, r4, r3
  403730:	1ad3      	subs	r3, r2, r3
  403732:	9307      	str	r3, [sp, #28]
  403734:	2f00      	cmp	r7, #0
  403736:	dd1d      	ble.n	403774 <_dtoa_r+0x774>
  403738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40373a:	b1ab      	cbz	r3, 403768 <_dtoa_r+0x768>
  40373c:	b18d      	cbz	r5, 403762 <_dtoa_r+0x762>
  40373e:	4631      	mov	r1, r6
  403740:	462a      	mov	r2, r5
  403742:	4650      	mov	r0, sl
  403744:	f000 fdb6 	bl	4042b4 <__pow5mult>
  403748:	9a04      	ldr	r2, [sp, #16]
  40374a:	4601      	mov	r1, r0
  40374c:	4606      	mov	r6, r0
  40374e:	4650      	mov	r0, sl
  403750:	f000 fd1e 	bl	404190 <__multiply>
  403754:	9904      	ldr	r1, [sp, #16]
  403756:	9008      	str	r0, [sp, #32]
  403758:	4650      	mov	r0, sl
  40375a:	f000 fc71 	bl	404040 <_Bfree>
  40375e:	9b08      	ldr	r3, [sp, #32]
  403760:	9304      	str	r3, [sp, #16]
  403762:	1b7a      	subs	r2, r7, r5
  403764:	d006      	beq.n	403774 <_dtoa_r+0x774>
  403766:	e000      	b.n	40376a <_dtoa_r+0x76a>
  403768:	463a      	mov	r2, r7
  40376a:	9904      	ldr	r1, [sp, #16]
  40376c:	4650      	mov	r0, sl
  40376e:	f000 fda1 	bl	4042b4 <__pow5mult>
  403772:	9004      	str	r0, [sp, #16]
  403774:	2101      	movs	r1, #1
  403776:	4650      	mov	r0, sl
  403778:	f000 fd01 	bl	40417e <__i2b>
  40377c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40377e:	4605      	mov	r5, r0
  403780:	b35b      	cbz	r3, 4037da <_dtoa_r+0x7da>
  403782:	461a      	mov	r2, r3
  403784:	4601      	mov	r1, r0
  403786:	4650      	mov	r0, sl
  403788:	f000 fd94 	bl	4042b4 <__pow5mult>
  40378c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40378e:	2b01      	cmp	r3, #1
  403790:	4605      	mov	r5, r0
  403792:	dc18      	bgt.n	4037c6 <_dtoa_r+0x7c6>
  403794:	9b02      	ldr	r3, [sp, #8]
  403796:	b983      	cbnz	r3, 4037ba <_dtoa_r+0x7ba>
  403798:	9b03      	ldr	r3, [sp, #12]
  40379a:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40379e:	b973      	cbnz	r3, 4037be <_dtoa_r+0x7be>
  4037a0:	9b03      	ldr	r3, [sp, #12]
  4037a2:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
  4037a6:	0d3f      	lsrs	r7, r7, #20
  4037a8:	053f      	lsls	r7, r7, #20
  4037aa:	b14f      	cbz	r7, 4037c0 <_dtoa_r+0x7c0>
  4037ac:	9b07      	ldr	r3, [sp, #28]
  4037ae:	3301      	adds	r3, #1
  4037b0:	f108 0801 	add.w	r8, r8, #1
  4037b4:	9307      	str	r3, [sp, #28]
  4037b6:	2701      	movs	r7, #1
  4037b8:	e002      	b.n	4037c0 <_dtoa_r+0x7c0>
  4037ba:	2700      	movs	r7, #0
  4037bc:	e000      	b.n	4037c0 <_dtoa_r+0x7c0>
  4037be:	9f02      	ldr	r7, [sp, #8]
  4037c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4037c2:	b173      	cbz	r3, 4037e2 <_dtoa_r+0x7e2>
  4037c4:	e000      	b.n	4037c8 <_dtoa_r+0x7c8>
  4037c6:	2700      	movs	r7, #0
  4037c8:	692b      	ldr	r3, [r5, #16]
  4037ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  4037ce:	6918      	ldr	r0, [r3, #16]
  4037d0:	f000 fc88 	bl	4040e4 <__hi0bits>
  4037d4:	f1c0 0020 	rsb	r0, r0, #32
  4037d8:	e004      	b.n	4037e4 <_dtoa_r+0x7e4>
  4037da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4037dc:	2b01      	cmp	r3, #1
  4037de:	ddd9      	ble.n	403794 <_dtoa_r+0x794>
  4037e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  4037e2:	2001      	movs	r0, #1
  4037e4:	9b07      	ldr	r3, [sp, #28]
  4037e6:	4418      	add	r0, r3
  4037e8:	f010 001f 	ands.w	r0, r0, #31
  4037ec:	d008      	beq.n	403800 <_dtoa_r+0x800>
  4037ee:	f1c0 0320 	rsb	r3, r0, #32
  4037f2:	2b04      	cmp	r3, #4
  4037f4:	dd02      	ble.n	4037fc <_dtoa_r+0x7fc>
  4037f6:	f1c0 001c 	rsb	r0, r0, #28
  4037fa:	e002      	b.n	403802 <_dtoa_r+0x802>
  4037fc:	d006      	beq.n	40380c <_dtoa_r+0x80c>
  4037fe:	4618      	mov	r0, r3
  403800:	301c      	adds	r0, #28
  403802:	9b07      	ldr	r3, [sp, #28]
  403804:	4403      	add	r3, r0
  403806:	4480      	add	r8, r0
  403808:	4404      	add	r4, r0
  40380a:	9307      	str	r3, [sp, #28]
  40380c:	f1b8 0f00 	cmp.w	r8, #0
  403810:	dd05      	ble.n	40381e <_dtoa_r+0x81e>
  403812:	4642      	mov	r2, r8
  403814:	9904      	ldr	r1, [sp, #16]
  403816:	4650      	mov	r0, sl
  403818:	f000 fd9a 	bl	404350 <__lshift>
  40381c:	9004      	str	r0, [sp, #16]
  40381e:	9b07      	ldr	r3, [sp, #28]
  403820:	2b00      	cmp	r3, #0
  403822:	dd05      	ble.n	403830 <_dtoa_r+0x830>
  403824:	4629      	mov	r1, r5
  403826:	461a      	mov	r2, r3
  403828:	4650      	mov	r0, sl
  40382a:	f000 fd91 	bl	404350 <__lshift>
  40382e:	4605      	mov	r5, r0
  403830:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403832:	b31b      	cbz	r3, 40387c <_dtoa_r+0x87c>
  403834:	4629      	mov	r1, r5
  403836:	9804      	ldr	r0, [sp, #16]
  403838:	f000 fddb 	bl	4043f2 <__mcmp>
  40383c:	2800      	cmp	r0, #0
  40383e:	da1d      	bge.n	40387c <_dtoa_r+0x87c>
  403840:	2300      	movs	r3, #0
  403842:	220a      	movs	r2, #10
  403844:	9904      	ldr	r1, [sp, #16]
  403846:	4650      	mov	r0, sl
  403848:	f000 fc11 	bl	40406e <__multadd>
  40384c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40384e:	9004      	str	r0, [sp, #16]
  403850:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  403854:	2b00      	cmp	r3, #0
  403856:	f000 8160 	beq.w	403b1a <_dtoa_r+0xb1a>
  40385a:	4631      	mov	r1, r6
  40385c:	2300      	movs	r3, #0
  40385e:	220a      	movs	r2, #10
  403860:	4650      	mov	r0, sl
  403862:	f000 fc04 	bl	40406e <__multadd>
  403866:	f1b9 0f00 	cmp.w	r9, #0
  40386a:	4606      	mov	r6, r0
  40386c:	dc3e      	bgt.n	4038ec <_dtoa_r+0x8ec>
  40386e:	e03a      	b.n	4038e6 <_dtoa_r+0x8e6>
  403870:	00405e00 	.word	0x00405e00
  403874:	40140000 	.word	0x40140000
  403878:	40240000 	.word	0x40240000
  40387c:	9b05      	ldr	r3, [sp, #20]
  40387e:	2b00      	cmp	r3, #0
  403880:	dc2b      	bgt.n	4038da <_dtoa_r+0x8da>
  403882:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403884:	2b02      	cmp	r3, #2
  403886:	dd28      	ble.n	4038da <_dtoa_r+0x8da>
  403888:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40388c:	f1b9 0f00 	cmp.w	r9, #0
  403890:	d111      	bne.n	4038b6 <_dtoa_r+0x8b6>
  403892:	4629      	mov	r1, r5
  403894:	464b      	mov	r3, r9
  403896:	2205      	movs	r2, #5
  403898:	4650      	mov	r0, sl
  40389a:	f000 fbe8 	bl	40406e <__multadd>
  40389e:	4601      	mov	r1, r0
  4038a0:	4605      	mov	r5, r0
  4038a2:	9804      	ldr	r0, [sp, #16]
  4038a4:	f000 fda5 	bl	4043f2 <__mcmp>
  4038a8:	2800      	cmp	r0, #0
  4038aa:	dc0c      	bgt.n	4038c6 <_dtoa_r+0x8c6>
  4038ac:	e003      	b.n	4038b6 <_dtoa_r+0x8b6>
  4038ae:	4635      	mov	r5, r6
  4038b0:	e000      	b.n	4038b4 <_dtoa_r+0x8b4>
  4038b2:	2500      	movs	r5, #0
  4038b4:	462e      	mov	r6, r5
  4038b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4038b8:	9c06      	ldr	r4, [sp, #24]
  4038ba:	ea6f 0b03 	mvn.w	fp, r3
  4038be:	e009      	b.n	4038d4 <_dtoa_r+0x8d4>
  4038c0:	f8dd b020 	ldr.w	fp, [sp, #32]
  4038c4:	4635      	mov	r5, r6
  4038c6:	9b06      	ldr	r3, [sp, #24]
  4038c8:	9a06      	ldr	r2, [sp, #24]
  4038ca:	1c5c      	adds	r4, r3, #1
  4038cc:	2331      	movs	r3, #49	; 0x31
  4038ce:	7013      	strb	r3, [r2, #0]
  4038d0:	f10b 0b01 	add.w	fp, fp, #1
  4038d4:	9605      	str	r6, [sp, #20]
  4038d6:	2600      	movs	r6, #0
  4038d8:	e0f9      	b.n	403ace <_dtoa_r+0xace>
  4038da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038dc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4038e0:	b923      	cbnz	r3, 4038ec <_dtoa_r+0x8ec>
  4038e2:	9c06      	ldr	r4, [sp, #24]
  4038e4:	e0b2      	b.n	403a4c <_dtoa_r+0xa4c>
  4038e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4038e8:	2b02      	cmp	r3, #2
  4038ea:	dccf      	bgt.n	40388c <_dtoa_r+0x88c>
  4038ec:	2c00      	cmp	r4, #0
  4038ee:	dd05      	ble.n	4038fc <_dtoa_r+0x8fc>
  4038f0:	4631      	mov	r1, r6
  4038f2:	4622      	mov	r2, r4
  4038f4:	4650      	mov	r0, sl
  4038f6:	f000 fd2b 	bl	404350 <__lshift>
  4038fa:	4606      	mov	r6, r0
  4038fc:	b19f      	cbz	r7, 403926 <_dtoa_r+0x926>
  4038fe:	6871      	ldr	r1, [r6, #4]
  403900:	4650      	mov	r0, sl
  403902:	f000 fb68 	bl	403fd6 <_Balloc>
  403906:	6932      	ldr	r2, [r6, #16]
  403908:	3202      	adds	r2, #2
  40390a:	4604      	mov	r4, r0
  40390c:	0092      	lsls	r2, r2, #2
  40390e:	f106 010c 	add.w	r1, r6, #12
  403912:	300c      	adds	r0, #12
  403914:	f000 fb54 	bl	403fc0 <memcpy>
  403918:	2201      	movs	r2, #1
  40391a:	4621      	mov	r1, r4
  40391c:	4650      	mov	r0, sl
  40391e:	f000 fd17 	bl	404350 <__lshift>
  403922:	9005      	str	r0, [sp, #20]
  403924:	e000      	b.n	403928 <_dtoa_r+0x928>
  403926:	9605      	str	r6, [sp, #20]
  403928:	9b02      	ldr	r3, [sp, #8]
  40392a:	9f06      	ldr	r7, [sp, #24]
  40392c:	f003 0301 	and.w	r3, r3, #1
  403930:	9307      	str	r3, [sp, #28]
  403932:	4629      	mov	r1, r5
  403934:	9804      	ldr	r0, [sp, #16]
  403936:	f7ff fad1 	bl	402edc <quorem>
  40393a:	4631      	mov	r1, r6
  40393c:	4604      	mov	r4, r0
  40393e:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403942:	9804      	ldr	r0, [sp, #16]
  403944:	f000 fd55 	bl	4043f2 <__mcmp>
  403948:	9a05      	ldr	r2, [sp, #20]
  40394a:	9002      	str	r0, [sp, #8]
  40394c:	4629      	mov	r1, r5
  40394e:	4650      	mov	r0, sl
  403950:	f000 fd6b 	bl	40442a <__mdiff>
  403954:	68c3      	ldr	r3, [r0, #12]
  403956:	4602      	mov	r2, r0
  403958:	b93b      	cbnz	r3, 40396a <_dtoa_r+0x96a>
  40395a:	4601      	mov	r1, r0
  40395c:	900a      	str	r0, [sp, #40]	; 0x28
  40395e:	9804      	ldr	r0, [sp, #16]
  403960:	f000 fd47 	bl	4043f2 <__mcmp>
  403964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403966:	4603      	mov	r3, r0
  403968:	e000      	b.n	40396c <_dtoa_r+0x96c>
  40396a:	2301      	movs	r3, #1
  40396c:	4611      	mov	r1, r2
  40396e:	4650      	mov	r0, sl
  403970:	930a      	str	r3, [sp, #40]	; 0x28
  403972:	f000 fb65 	bl	404040 <_Bfree>
  403976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403978:	b953      	cbnz	r3, 403990 <_dtoa_r+0x990>
  40397a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40397c:	b942      	cbnz	r2, 403990 <_dtoa_r+0x990>
  40397e:	9a07      	ldr	r2, [sp, #28]
  403980:	b932      	cbnz	r2, 403990 <_dtoa_r+0x990>
  403982:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403986:	d02a      	beq.n	4039de <_dtoa_r+0x9de>
  403988:	9b02      	ldr	r3, [sp, #8]
  40398a:	2b00      	cmp	r3, #0
  40398c:	dc1c      	bgt.n	4039c8 <_dtoa_r+0x9c8>
  40398e:	e01d      	b.n	4039cc <_dtoa_r+0x9cc>
  403990:	9a02      	ldr	r2, [sp, #8]
  403992:	2a00      	cmp	r2, #0
  403994:	db04      	blt.n	4039a0 <_dtoa_r+0x9a0>
  403996:	d11b      	bne.n	4039d0 <_dtoa_r+0x9d0>
  403998:	9a1e      	ldr	r2, [sp, #120]	; 0x78
  40399a:	b9ca      	cbnz	r2, 4039d0 <_dtoa_r+0x9d0>
  40399c:	9a07      	ldr	r2, [sp, #28]
  40399e:	b9ba      	cbnz	r2, 4039d0 <_dtoa_r+0x9d0>
  4039a0:	2b00      	cmp	r3, #0
  4039a2:	dd13      	ble.n	4039cc <_dtoa_r+0x9cc>
  4039a4:	2201      	movs	r2, #1
  4039a6:	9904      	ldr	r1, [sp, #16]
  4039a8:	4650      	mov	r0, sl
  4039aa:	f000 fcd1 	bl	404350 <__lshift>
  4039ae:	4629      	mov	r1, r5
  4039b0:	9004      	str	r0, [sp, #16]
  4039b2:	f000 fd1e 	bl	4043f2 <__mcmp>
  4039b6:	2800      	cmp	r0, #0
  4039b8:	dc03      	bgt.n	4039c2 <_dtoa_r+0x9c2>
  4039ba:	d107      	bne.n	4039cc <_dtoa_r+0x9cc>
  4039bc:	f018 0f01 	tst.w	r8, #1
  4039c0:	d004      	beq.n	4039cc <_dtoa_r+0x9cc>
  4039c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4039c6:	d00a      	beq.n	4039de <_dtoa_r+0x9de>
  4039c8:	f104 0831 	add.w	r8, r4, #49	; 0x31
  4039cc:	1c7c      	adds	r4, r7, #1
  4039ce:	e00c      	b.n	4039ea <_dtoa_r+0x9ea>
  4039d0:	2b00      	cmp	r3, #0
  4039d2:	f107 0401 	add.w	r4, r7, #1
  4039d6:	dd0b      	ble.n	4039f0 <_dtoa_r+0x9f0>
  4039d8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4039dc:	d103      	bne.n	4039e6 <_dtoa_r+0x9e6>
  4039de:	2339      	movs	r3, #57	; 0x39
  4039e0:	703b      	strb	r3, [r7, #0]
  4039e2:	3701      	adds	r7, #1
  4039e4:	e056      	b.n	403a94 <_dtoa_r+0xa94>
  4039e6:	f108 0801 	add.w	r8, r8, #1
  4039ea:	f887 8000 	strb.w	r8, [r7]
  4039ee:	e06e      	b.n	403ace <_dtoa_r+0xace>
  4039f0:	9b06      	ldr	r3, [sp, #24]
  4039f2:	f804 8c01 	strb.w	r8, [r4, #-1]
  4039f6:	1ae3      	subs	r3, r4, r3
  4039f8:	454b      	cmp	r3, r9
  4039fa:	4627      	mov	r7, r4
  4039fc:	d03b      	beq.n	403a76 <_dtoa_r+0xa76>
  4039fe:	2300      	movs	r3, #0
  403a00:	220a      	movs	r2, #10
  403a02:	9904      	ldr	r1, [sp, #16]
  403a04:	4650      	mov	r0, sl
  403a06:	f000 fb32 	bl	40406e <__multadd>
  403a0a:	9b05      	ldr	r3, [sp, #20]
  403a0c:	9004      	str	r0, [sp, #16]
  403a0e:	429e      	cmp	r6, r3
  403a10:	f04f 020a 	mov.w	r2, #10
  403a14:	f04f 0300 	mov.w	r3, #0
  403a18:	4631      	mov	r1, r6
  403a1a:	4650      	mov	r0, sl
  403a1c:	d104      	bne.n	403a28 <_dtoa_r+0xa28>
  403a1e:	f000 fb26 	bl	40406e <__multadd>
  403a22:	4606      	mov	r6, r0
  403a24:	9005      	str	r0, [sp, #20]
  403a26:	e784      	b.n	403932 <_dtoa_r+0x932>
  403a28:	f000 fb21 	bl	40406e <__multadd>
  403a2c:	2300      	movs	r3, #0
  403a2e:	4606      	mov	r6, r0
  403a30:	220a      	movs	r2, #10
  403a32:	9905      	ldr	r1, [sp, #20]
  403a34:	4650      	mov	r0, sl
  403a36:	f000 fb1a 	bl	40406e <__multadd>
  403a3a:	9005      	str	r0, [sp, #20]
  403a3c:	e779      	b.n	403932 <_dtoa_r+0x932>
  403a3e:	2300      	movs	r3, #0
  403a40:	220a      	movs	r2, #10
  403a42:	9904      	ldr	r1, [sp, #16]
  403a44:	4650      	mov	r0, sl
  403a46:	f000 fb12 	bl	40406e <__multadd>
  403a4a:	9004      	str	r0, [sp, #16]
  403a4c:	4629      	mov	r1, r5
  403a4e:	9804      	ldr	r0, [sp, #16]
  403a50:	f7ff fa44 	bl	402edc <quorem>
  403a54:	f100 0830 	add.w	r8, r0, #48	; 0x30
  403a58:	f804 8b01 	strb.w	r8, [r4], #1
  403a5c:	9b06      	ldr	r3, [sp, #24]
  403a5e:	1ae3      	subs	r3, r4, r3
  403a60:	454b      	cmp	r3, r9
  403a62:	dbec      	blt.n	403a3e <_dtoa_r+0xa3e>
  403a64:	9b06      	ldr	r3, [sp, #24]
  403a66:	9605      	str	r6, [sp, #20]
  403a68:	f1b9 0f01 	cmp.w	r9, #1
  403a6c:	bfac      	ite	ge
  403a6e:	444b      	addge	r3, r9
  403a70:	3301      	addlt	r3, #1
  403a72:	461f      	mov	r7, r3
  403a74:	2600      	movs	r6, #0
  403a76:	2201      	movs	r2, #1
  403a78:	9904      	ldr	r1, [sp, #16]
  403a7a:	4650      	mov	r0, sl
  403a7c:	f000 fc68 	bl	404350 <__lshift>
  403a80:	4629      	mov	r1, r5
  403a82:	9004      	str	r0, [sp, #16]
  403a84:	f000 fcb5 	bl	4043f2 <__mcmp>
  403a88:	2800      	cmp	r0, #0
  403a8a:	dc03      	bgt.n	403a94 <_dtoa_r+0xa94>
  403a8c:	d116      	bne.n	403abc <_dtoa_r+0xabc>
  403a8e:	f018 0f01 	tst.w	r8, #1
  403a92:	d013      	beq.n	403abc <_dtoa_r+0xabc>
  403a94:	463c      	mov	r4, r7
  403a96:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403a9a:	2b39      	cmp	r3, #57	; 0x39
  403a9c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403aa0:	d109      	bne.n	403ab6 <_dtoa_r+0xab6>
  403aa2:	9b06      	ldr	r3, [sp, #24]
  403aa4:	4293      	cmp	r3, r2
  403aa6:	d104      	bne.n	403ab2 <_dtoa_r+0xab2>
  403aa8:	f10b 0b01 	add.w	fp, fp, #1
  403aac:	2331      	movs	r3, #49	; 0x31
  403aae:	9a06      	ldr	r2, [sp, #24]
  403ab0:	e002      	b.n	403ab8 <_dtoa_r+0xab8>
  403ab2:	4614      	mov	r4, r2
  403ab4:	e7ef      	b.n	403a96 <_dtoa_r+0xa96>
  403ab6:	3301      	adds	r3, #1
  403ab8:	7013      	strb	r3, [r2, #0]
  403aba:	e008      	b.n	403ace <_dtoa_r+0xace>
  403abc:	463c      	mov	r4, r7
  403abe:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  403ac2:	2b30      	cmp	r3, #48	; 0x30
  403ac4:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  403ac8:	d101      	bne.n	403ace <_dtoa_r+0xace>
  403aca:	4614      	mov	r4, r2
  403acc:	e7f7      	b.n	403abe <_dtoa_r+0xabe>
  403ace:	4629      	mov	r1, r5
  403ad0:	4650      	mov	r0, sl
  403ad2:	f000 fab5 	bl	404040 <_Bfree>
  403ad6:	9b05      	ldr	r3, [sp, #20]
  403ad8:	b16b      	cbz	r3, 403af6 <_dtoa_r+0xaf6>
  403ada:	b12e      	cbz	r6, 403ae8 <_dtoa_r+0xae8>
  403adc:	429e      	cmp	r6, r3
  403ade:	d003      	beq.n	403ae8 <_dtoa_r+0xae8>
  403ae0:	4631      	mov	r1, r6
  403ae2:	4650      	mov	r0, sl
  403ae4:	f000 faac 	bl	404040 <_Bfree>
  403ae8:	9905      	ldr	r1, [sp, #20]
  403aea:	4650      	mov	r0, sl
  403aec:	f000 faa8 	bl	404040 <_Bfree>
  403af0:	e001      	b.n	403af6 <_dtoa_r+0xaf6>
  403af2:	f8dd b020 	ldr.w	fp, [sp, #32]
  403af6:	9904      	ldr	r1, [sp, #16]
  403af8:	4650      	mov	r0, sl
  403afa:	f000 faa1 	bl	404040 <_Bfree>
  403afe:	2300      	movs	r3, #0
  403b00:	9a20      	ldr	r2, [sp, #128]	; 0x80
  403b02:	7023      	strb	r3, [r4, #0]
  403b04:	f10b 0301 	add.w	r3, fp, #1
  403b08:	6013      	str	r3, [r2, #0]
  403b0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  403b0c:	b11b      	cbz	r3, 403b16 <_dtoa_r+0xb16>
  403b0e:	601c      	str	r4, [r3, #0]
  403b10:	e001      	b.n	403b16 <_dtoa_r+0xb16>
  403b12:	4808      	ldr	r0, [pc, #32]	; (403b34 <_dtoa_r+0xb34>)
  403b14:	e00a      	b.n	403b2c <_dtoa_r+0xb2c>
  403b16:	9806      	ldr	r0, [sp, #24]
  403b18:	e008      	b.n	403b2c <_dtoa_r+0xb2c>
  403b1a:	f1b9 0f00 	cmp.w	r9, #0
  403b1e:	f73f aee0 	bgt.w	4038e2 <_dtoa_r+0x8e2>
  403b22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  403b24:	2b02      	cmp	r3, #2
  403b26:	f77f aedc 	ble.w	4038e2 <_dtoa_r+0x8e2>
  403b2a:	e6af      	b.n	40388c <_dtoa_r+0x88c>
  403b2c:	b015      	add	sp, #84	; 0x54
  403b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b32:	bf00      	nop
  403b34:	00405d6c 	.word	0x00405d6c

00403b38 <__sflush_r>:
  403b38:	898a      	ldrh	r2, [r1, #12]
  403b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403b3e:	4605      	mov	r5, r0
  403b40:	0710      	lsls	r0, r2, #28
  403b42:	460c      	mov	r4, r1
  403b44:	d459      	bmi.n	403bfa <__sflush_r+0xc2>
  403b46:	684b      	ldr	r3, [r1, #4]
  403b48:	2b00      	cmp	r3, #0
  403b4a:	dc02      	bgt.n	403b52 <__sflush_r+0x1a>
  403b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  403b4e:	2b00      	cmp	r3, #0
  403b50:	dd17      	ble.n	403b82 <__sflush_r+0x4a>
  403b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403b54:	b1ae      	cbz	r6, 403b82 <__sflush_r+0x4a>
  403b56:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  403b5a:	2300      	movs	r3, #0
  403b5c:	b292      	uxth	r2, r2
  403b5e:	682f      	ldr	r7, [r5, #0]
  403b60:	602b      	str	r3, [r5, #0]
  403b62:	b10a      	cbz	r2, 403b68 <__sflush_r+0x30>
  403b64:	6d60      	ldr	r0, [r4, #84]	; 0x54
  403b66:	e015      	b.n	403b94 <__sflush_r+0x5c>
  403b68:	6a21      	ldr	r1, [r4, #32]
  403b6a:	2301      	movs	r3, #1
  403b6c:	4628      	mov	r0, r5
  403b6e:	47b0      	blx	r6
  403b70:	1c41      	adds	r1, r0, #1
  403b72:	d10f      	bne.n	403b94 <__sflush_r+0x5c>
  403b74:	682b      	ldr	r3, [r5, #0]
  403b76:	b16b      	cbz	r3, 403b94 <__sflush_r+0x5c>
  403b78:	2b1d      	cmp	r3, #29
  403b7a:	d001      	beq.n	403b80 <__sflush_r+0x48>
  403b7c:	2b16      	cmp	r3, #22
  403b7e:	d103      	bne.n	403b88 <__sflush_r+0x50>
  403b80:	602f      	str	r7, [r5, #0]
  403b82:	2000      	movs	r0, #0
  403b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b88:	89a3      	ldrh	r3, [r4, #12]
  403b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403b8e:	81a3      	strh	r3, [r4, #12]
  403b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403b94:	89a3      	ldrh	r3, [r4, #12]
  403b96:	075a      	lsls	r2, r3, #29
  403b98:	d505      	bpl.n	403ba6 <__sflush_r+0x6e>
  403b9a:	6863      	ldr	r3, [r4, #4]
  403b9c:	1ac0      	subs	r0, r0, r3
  403b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  403ba0:	b10b      	cbz	r3, 403ba6 <__sflush_r+0x6e>
  403ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403ba4:	1ac0      	subs	r0, r0, r3
  403ba6:	2300      	movs	r3, #0
  403ba8:	4602      	mov	r2, r0
  403baa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  403bac:	6a21      	ldr	r1, [r4, #32]
  403bae:	4628      	mov	r0, r5
  403bb0:	47b0      	blx	r6
  403bb2:	1c43      	adds	r3, r0, #1
  403bb4:	89a3      	ldrh	r3, [r4, #12]
  403bb6:	d106      	bne.n	403bc6 <__sflush_r+0x8e>
  403bb8:	6829      	ldr	r1, [r5, #0]
  403bba:	291d      	cmp	r1, #29
  403bbc:	d83a      	bhi.n	403c34 <__sflush_r+0xfc>
  403bbe:	4a21      	ldr	r2, [pc, #132]	; (403c44 <__sflush_r+0x10c>)
  403bc0:	40ca      	lsrs	r2, r1
  403bc2:	07d6      	lsls	r6, r2, #31
  403bc4:	d536      	bpl.n	403c34 <__sflush_r+0xfc>
  403bc6:	2200      	movs	r2, #0
  403bc8:	6062      	str	r2, [r4, #4]
  403bca:	04d9      	lsls	r1, r3, #19
  403bcc:	6922      	ldr	r2, [r4, #16]
  403bce:	6022      	str	r2, [r4, #0]
  403bd0:	d504      	bpl.n	403bdc <__sflush_r+0xa4>
  403bd2:	1c42      	adds	r2, r0, #1
  403bd4:	d101      	bne.n	403bda <__sflush_r+0xa2>
  403bd6:	682b      	ldr	r3, [r5, #0]
  403bd8:	b903      	cbnz	r3, 403bdc <__sflush_r+0xa4>
  403bda:	6560      	str	r0, [r4, #84]	; 0x54
  403bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
  403bde:	602f      	str	r7, [r5, #0]
  403be0:	2900      	cmp	r1, #0
  403be2:	d0ce      	beq.n	403b82 <__sflush_r+0x4a>
  403be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
  403be8:	4299      	cmp	r1, r3
  403bea:	d002      	beq.n	403bf2 <__sflush_r+0xba>
  403bec:	4628      	mov	r0, r5
  403bee:	f000 fcd7 	bl	4045a0 <_free_r>
  403bf2:	2000      	movs	r0, #0
  403bf4:	6360      	str	r0, [r4, #52]	; 0x34
  403bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403bfa:	690f      	ldr	r7, [r1, #16]
  403bfc:	2f00      	cmp	r7, #0
  403bfe:	d0c0      	beq.n	403b82 <__sflush_r+0x4a>
  403c00:	0793      	lsls	r3, r2, #30
  403c02:	680e      	ldr	r6, [r1, #0]
  403c04:	bf08      	it	eq
  403c06:	694b      	ldreq	r3, [r1, #20]
  403c08:	600f      	str	r7, [r1, #0]
  403c0a:	bf18      	it	ne
  403c0c:	2300      	movne	r3, #0
  403c0e:	ebc7 0806 	rsb	r8, r7, r6
  403c12:	608b      	str	r3, [r1, #8]
  403c14:	e002      	b.n	403c1c <__sflush_r+0xe4>
  403c16:	4407      	add	r7, r0
  403c18:	ebc0 0808 	rsb	r8, r0, r8
  403c1c:	f1b8 0f00 	cmp.w	r8, #0
  403c20:	ddaf      	ble.n	403b82 <__sflush_r+0x4a>
  403c22:	4643      	mov	r3, r8
  403c24:	463a      	mov	r2, r7
  403c26:	6a21      	ldr	r1, [r4, #32]
  403c28:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  403c2a:	4628      	mov	r0, r5
  403c2c:	47b0      	blx	r6
  403c2e:	2800      	cmp	r0, #0
  403c30:	dcf1      	bgt.n	403c16 <__sflush_r+0xde>
  403c32:	89a3      	ldrh	r3, [r4, #12]
  403c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403c38:	81a3      	strh	r3, [r4, #12]
  403c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  403c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403c42:	bf00      	nop
  403c44:	20400001 	.word	0x20400001

00403c48 <_fflush_r>:
  403c48:	b538      	push	{r3, r4, r5, lr}
  403c4a:	690b      	ldr	r3, [r1, #16]
  403c4c:	4605      	mov	r5, r0
  403c4e:	460c      	mov	r4, r1
  403c50:	b1db      	cbz	r3, 403c8a <_fflush_r+0x42>
  403c52:	b118      	cbz	r0, 403c5c <_fflush_r+0x14>
  403c54:	6983      	ldr	r3, [r0, #24]
  403c56:	b90b      	cbnz	r3, 403c5c <_fflush_r+0x14>
  403c58:	f000 f860 	bl	403d1c <__sinit>
  403c5c:	4b0c      	ldr	r3, [pc, #48]	; (403c90 <_fflush_r+0x48>)
  403c5e:	429c      	cmp	r4, r3
  403c60:	d101      	bne.n	403c66 <_fflush_r+0x1e>
  403c62:	686c      	ldr	r4, [r5, #4]
  403c64:	e008      	b.n	403c78 <_fflush_r+0x30>
  403c66:	4b0b      	ldr	r3, [pc, #44]	; (403c94 <_fflush_r+0x4c>)
  403c68:	429c      	cmp	r4, r3
  403c6a:	d101      	bne.n	403c70 <_fflush_r+0x28>
  403c6c:	68ac      	ldr	r4, [r5, #8]
  403c6e:	e003      	b.n	403c78 <_fflush_r+0x30>
  403c70:	4b09      	ldr	r3, [pc, #36]	; (403c98 <_fflush_r+0x50>)
  403c72:	429c      	cmp	r4, r3
  403c74:	bf08      	it	eq
  403c76:	68ec      	ldreq	r4, [r5, #12]
  403c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c7c:	b12b      	cbz	r3, 403c8a <_fflush_r+0x42>
  403c7e:	4621      	mov	r1, r4
  403c80:	4628      	mov	r0, r5
  403c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403c86:	f7ff bf57 	b.w	403b38 <__sflush_r>
  403c8a:	2000      	movs	r0, #0
  403c8c:	bd38      	pop	{r3, r4, r5, pc}
  403c8e:	bf00      	nop
  403c90:	00405da0 	.word	0x00405da0
  403c94:	00405dc0 	.word	0x00405dc0
  403c98:	00405de0 	.word	0x00405de0

00403c9c <_cleanup_r>:
  403c9c:	4901      	ldr	r1, [pc, #4]	; (403ca4 <_cleanup_r+0x8>)
  403c9e:	f000 b8a9 	b.w	403df4 <_fwalk_reent>
  403ca2:	bf00      	nop
  403ca4:	00403c49 	.word	0x00403c49

00403ca8 <std.isra.0>:
  403ca8:	2300      	movs	r3, #0
  403caa:	b510      	push	{r4, lr}
  403cac:	4604      	mov	r4, r0
  403cae:	6003      	str	r3, [r0, #0]
  403cb0:	6043      	str	r3, [r0, #4]
  403cb2:	6083      	str	r3, [r0, #8]
  403cb4:	8181      	strh	r1, [r0, #12]
  403cb6:	6643      	str	r3, [r0, #100]	; 0x64
  403cb8:	81c2      	strh	r2, [r0, #14]
  403cba:	6103      	str	r3, [r0, #16]
  403cbc:	6143      	str	r3, [r0, #20]
  403cbe:	6183      	str	r3, [r0, #24]
  403cc0:	4619      	mov	r1, r3
  403cc2:	2208      	movs	r2, #8
  403cc4:	305c      	adds	r0, #92	; 0x5c
  403cc6:	f7fe fa9b 	bl	402200 <memset>
  403cca:	4b05      	ldr	r3, [pc, #20]	; (403ce0 <std.isra.0+0x38>)
  403ccc:	6263      	str	r3, [r4, #36]	; 0x24
  403cce:	4b05      	ldr	r3, [pc, #20]	; (403ce4 <std.isra.0+0x3c>)
  403cd0:	62a3      	str	r3, [r4, #40]	; 0x28
  403cd2:	4b05      	ldr	r3, [pc, #20]	; (403ce8 <std.isra.0+0x40>)
  403cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
  403cd6:	4b05      	ldr	r3, [pc, #20]	; (403cec <std.isra.0+0x44>)
  403cd8:	6224      	str	r4, [r4, #32]
  403cda:	6323      	str	r3, [r4, #48]	; 0x30
  403cdc:	bd10      	pop	{r4, pc}
  403cde:	bf00      	nop
  403ce0:	004049a1 	.word	0x004049a1
  403ce4:	004049c3 	.word	0x004049c3
  403ce8:	004049fb 	.word	0x004049fb
  403cec:	00404a1f 	.word	0x00404a1f

00403cf0 <__sfmoreglue>:
  403cf0:	b570      	push	{r4, r5, r6, lr}
  403cf2:	2368      	movs	r3, #104	; 0x68
  403cf4:	1e4d      	subs	r5, r1, #1
  403cf6:	435d      	muls	r5, r3
  403cf8:	460e      	mov	r6, r1
  403cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
  403cfe:	f000 fc9d 	bl	40463c <_malloc_r>
  403d02:	4604      	mov	r4, r0
  403d04:	b140      	cbz	r0, 403d18 <__sfmoreglue+0x28>
  403d06:	2100      	movs	r1, #0
  403d08:	e880 0042 	stmia.w	r0, {r1, r6}
  403d0c:	300c      	adds	r0, #12
  403d0e:	60a0      	str	r0, [r4, #8]
  403d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
  403d14:	f7fe fa74 	bl	402200 <memset>
  403d18:	4620      	mov	r0, r4
  403d1a:	bd70      	pop	{r4, r5, r6, pc}

00403d1c <__sinit>:
  403d1c:	6983      	ldr	r3, [r0, #24]
  403d1e:	b510      	push	{r4, lr}
  403d20:	4604      	mov	r4, r0
  403d22:	bb33      	cbnz	r3, 403d72 <__sinit+0x56>
  403d24:	6483      	str	r3, [r0, #72]	; 0x48
  403d26:	64c3      	str	r3, [r0, #76]	; 0x4c
  403d28:	6503      	str	r3, [r0, #80]	; 0x50
  403d2a:	4b12      	ldr	r3, [pc, #72]	; (403d74 <__sinit+0x58>)
  403d2c:	4a12      	ldr	r2, [pc, #72]	; (403d78 <__sinit+0x5c>)
  403d2e:	681b      	ldr	r3, [r3, #0]
  403d30:	6282      	str	r2, [r0, #40]	; 0x28
  403d32:	4298      	cmp	r0, r3
  403d34:	bf04      	itt	eq
  403d36:	2301      	moveq	r3, #1
  403d38:	6183      	streq	r3, [r0, #24]
  403d3a:	f000 f81f 	bl	403d7c <__sfp>
  403d3e:	6060      	str	r0, [r4, #4]
  403d40:	4620      	mov	r0, r4
  403d42:	f000 f81b 	bl	403d7c <__sfp>
  403d46:	60a0      	str	r0, [r4, #8]
  403d48:	4620      	mov	r0, r4
  403d4a:	f000 f817 	bl	403d7c <__sfp>
  403d4e:	2200      	movs	r2, #0
  403d50:	60e0      	str	r0, [r4, #12]
  403d52:	2104      	movs	r1, #4
  403d54:	6860      	ldr	r0, [r4, #4]
  403d56:	f7ff ffa7 	bl	403ca8 <std.isra.0>
  403d5a:	2201      	movs	r2, #1
  403d5c:	2109      	movs	r1, #9
  403d5e:	68a0      	ldr	r0, [r4, #8]
  403d60:	f7ff ffa2 	bl	403ca8 <std.isra.0>
  403d64:	2202      	movs	r2, #2
  403d66:	2112      	movs	r1, #18
  403d68:	68e0      	ldr	r0, [r4, #12]
  403d6a:	f7ff ff9d 	bl	403ca8 <std.isra.0>
  403d6e:	2301      	movs	r3, #1
  403d70:	61a3      	str	r3, [r4, #24]
  403d72:	bd10      	pop	{r4, pc}
  403d74:	00405d58 	.word	0x00405d58
  403d78:	00403c9d 	.word	0x00403c9d

00403d7c <__sfp>:
  403d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403d7e:	4b1c      	ldr	r3, [pc, #112]	; (403df0 <__sfp+0x74>)
  403d80:	681e      	ldr	r6, [r3, #0]
  403d82:	69b3      	ldr	r3, [r6, #24]
  403d84:	4607      	mov	r7, r0
  403d86:	b913      	cbnz	r3, 403d8e <__sfp+0x12>
  403d88:	4630      	mov	r0, r6
  403d8a:	f7ff ffc7 	bl	403d1c <__sinit>
  403d8e:	3648      	adds	r6, #72	; 0x48
  403d90:	68b4      	ldr	r4, [r6, #8]
  403d92:	6873      	ldr	r3, [r6, #4]
  403d94:	3b01      	subs	r3, #1
  403d96:	d404      	bmi.n	403da2 <__sfp+0x26>
  403d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  403d9c:	b17d      	cbz	r5, 403dbe <__sfp+0x42>
  403d9e:	3468      	adds	r4, #104	; 0x68
  403da0:	e7f8      	b.n	403d94 <__sfp+0x18>
  403da2:	6833      	ldr	r3, [r6, #0]
  403da4:	b10b      	cbz	r3, 403daa <__sfp+0x2e>
  403da6:	6836      	ldr	r6, [r6, #0]
  403da8:	e7f2      	b.n	403d90 <__sfp+0x14>
  403daa:	2104      	movs	r1, #4
  403dac:	4638      	mov	r0, r7
  403dae:	f7ff ff9f 	bl	403cf0 <__sfmoreglue>
  403db2:	6030      	str	r0, [r6, #0]
  403db4:	2800      	cmp	r0, #0
  403db6:	d1f6      	bne.n	403da6 <__sfp+0x2a>
  403db8:	230c      	movs	r3, #12
  403dba:	603b      	str	r3, [r7, #0]
  403dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403dc2:	81e3      	strh	r3, [r4, #14]
  403dc4:	2301      	movs	r3, #1
  403dc6:	81a3      	strh	r3, [r4, #12]
  403dc8:	6665      	str	r5, [r4, #100]	; 0x64
  403dca:	6025      	str	r5, [r4, #0]
  403dcc:	60a5      	str	r5, [r4, #8]
  403dce:	6065      	str	r5, [r4, #4]
  403dd0:	6125      	str	r5, [r4, #16]
  403dd2:	6165      	str	r5, [r4, #20]
  403dd4:	61a5      	str	r5, [r4, #24]
  403dd6:	2208      	movs	r2, #8
  403dd8:	4629      	mov	r1, r5
  403dda:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  403dde:	f7fe fa0f 	bl	402200 <memset>
  403de2:	6365      	str	r5, [r4, #52]	; 0x34
  403de4:	63a5      	str	r5, [r4, #56]	; 0x38
  403de6:	64a5      	str	r5, [r4, #72]	; 0x48
  403de8:	64e5      	str	r5, [r4, #76]	; 0x4c
  403dea:	4620      	mov	r0, r4
  403dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403dee:	bf00      	nop
  403df0:	00405d58 	.word	0x00405d58

00403df4 <_fwalk_reent>:
  403df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403df8:	4680      	mov	r8, r0
  403dfa:	4689      	mov	r9, r1
  403dfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
  403e00:	2600      	movs	r6, #0
  403e02:	b194      	cbz	r4, 403e2a <_fwalk_reent+0x36>
  403e04:	68a5      	ldr	r5, [r4, #8]
  403e06:	6867      	ldr	r7, [r4, #4]
  403e08:	3f01      	subs	r7, #1
  403e0a:	d40c      	bmi.n	403e26 <_fwalk_reent+0x32>
  403e0c:	89ab      	ldrh	r3, [r5, #12]
  403e0e:	2b01      	cmp	r3, #1
  403e10:	d907      	bls.n	403e22 <_fwalk_reent+0x2e>
  403e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  403e16:	3301      	adds	r3, #1
  403e18:	d003      	beq.n	403e22 <_fwalk_reent+0x2e>
  403e1a:	4629      	mov	r1, r5
  403e1c:	4640      	mov	r0, r8
  403e1e:	47c8      	blx	r9
  403e20:	4306      	orrs	r6, r0
  403e22:	3568      	adds	r5, #104	; 0x68
  403e24:	e7f0      	b.n	403e08 <_fwalk_reent+0x14>
  403e26:	6824      	ldr	r4, [r4, #0]
  403e28:	e7eb      	b.n	403e02 <_fwalk_reent+0xe>
  403e2a:	4630      	mov	r0, r6
  403e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00403e30 <_localeconv_r>:
  403e30:	4b04      	ldr	r3, [pc, #16]	; (403e44 <_localeconv_r+0x14>)
  403e32:	681b      	ldr	r3, [r3, #0]
  403e34:	6a18      	ldr	r0, [r3, #32]
  403e36:	4b04      	ldr	r3, [pc, #16]	; (403e48 <_localeconv_r+0x18>)
  403e38:	2800      	cmp	r0, #0
  403e3a:	bf08      	it	eq
  403e3c:	4618      	moveq	r0, r3
  403e3e:	30f0      	adds	r0, #240	; 0xf0
  403e40:	4770      	bx	lr
  403e42:	bf00      	nop
  403e44:	20000074 	.word	0x20000074
  403e48:	20000078 	.word	0x20000078

00403e4c <__swhatbuf_r>:
  403e4c:	b570      	push	{r4, r5, r6, lr}
  403e4e:	460e      	mov	r6, r1
  403e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  403e54:	2900      	cmp	r1, #0
  403e56:	b090      	sub	sp, #64	; 0x40
  403e58:	4614      	mov	r4, r2
  403e5a:	461d      	mov	r5, r3
  403e5c:	da06      	bge.n	403e6c <__swhatbuf_r+0x20>
  403e5e:	2300      	movs	r3, #0
  403e60:	602b      	str	r3, [r5, #0]
  403e62:	89b3      	ldrh	r3, [r6, #12]
  403e64:	061a      	lsls	r2, r3, #24
  403e66:	d50e      	bpl.n	403e86 <__swhatbuf_r+0x3a>
  403e68:	2340      	movs	r3, #64	; 0x40
  403e6a:	e00e      	b.n	403e8a <__swhatbuf_r+0x3e>
  403e6c:	aa01      	add	r2, sp, #4
  403e6e:	f000 fdfd 	bl	404a6c <_fstat_r>
  403e72:	2800      	cmp	r0, #0
  403e74:	dbf3      	blt.n	403e5e <__swhatbuf_r+0x12>
  403e76:	9a02      	ldr	r2, [sp, #8]
  403e78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  403e7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
  403e80:	425a      	negs	r2, r3
  403e82:	415a      	adcs	r2, r3
  403e84:	602a      	str	r2, [r5, #0]
  403e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403e8a:	2000      	movs	r0, #0
  403e8c:	6023      	str	r3, [r4, #0]
  403e8e:	b010      	add	sp, #64	; 0x40
  403e90:	bd70      	pop	{r4, r5, r6, pc}
	...

00403e94 <__smakebuf_r>:
  403e94:	898b      	ldrh	r3, [r1, #12]
  403e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
  403e98:	079e      	lsls	r6, r3, #30
  403e9a:	4605      	mov	r5, r0
  403e9c:	460c      	mov	r4, r1
  403e9e:	d410      	bmi.n	403ec2 <__smakebuf_r+0x2e>
  403ea0:	ab01      	add	r3, sp, #4
  403ea2:	466a      	mov	r2, sp
  403ea4:	f7ff ffd2 	bl	403e4c <__swhatbuf_r>
  403ea8:	9900      	ldr	r1, [sp, #0]
  403eaa:	4606      	mov	r6, r0
  403eac:	4628      	mov	r0, r5
  403eae:	f000 fbc5 	bl	40463c <_malloc_r>
  403eb2:	b968      	cbnz	r0, 403ed0 <__smakebuf_r+0x3c>
  403eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403eb8:	059a      	lsls	r2, r3, #22
  403eba:	d422      	bmi.n	403f02 <__smakebuf_r+0x6e>
  403ebc:	f043 0302 	orr.w	r3, r3, #2
  403ec0:	81a3      	strh	r3, [r4, #12]
  403ec2:	f104 0347 	add.w	r3, r4, #71	; 0x47
  403ec6:	6023      	str	r3, [r4, #0]
  403ec8:	6123      	str	r3, [r4, #16]
  403eca:	2301      	movs	r3, #1
  403ecc:	6163      	str	r3, [r4, #20]
  403ece:	e018      	b.n	403f02 <__smakebuf_r+0x6e>
  403ed0:	4b0d      	ldr	r3, [pc, #52]	; (403f08 <__smakebuf_r+0x74>)
  403ed2:	62ab      	str	r3, [r5, #40]	; 0x28
  403ed4:	89a3      	ldrh	r3, [r4, #12]
  403ed6:	6020      	str	r0, [r4, #0]
  403ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403edc:	81a3      	strh	r3, [r4, #12]
  403ede:	9b00      	ldr	r3, [sp, #0]
  403ee0:	6163      	str	r3, [r4, #20]
  403ee2:	9b01      	ldr	r3, [sp, #4]
  403ee4:	6120      	str	r0, [r4, #16]
  403ee6:	b14b      	cbz	r3, 403efc <__smakebuf_r+0x68>
  403ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403eec:	4628      	mov	r0, r5
  403eee:	f000 fdcf 	bl	404a90 <_isatty_r>
  403ef2:	b118      	cbz	r0, 403efc <__smakebuf_r+0x68>
  403ef4:	89a3      	ldrh	r3, [r4, #12]
  403ef6:	f043 0301 	orr.w	r3, r3, #1
  403efa:	81a3      	strh	r3, [r4, #12]
  403efc:	89a0      	ldrh	r0, [r4, #12]
  403efe:	4330      	orrs	r0, r6
  403f00:	81a0      	strh	r0, [r4, #12]
  403f02:	b002      	add	sp, #8
  403f04:	bd70      	pop	{r4, r5, r6, pc}
  403f06:	bf00      	nop
  403f08:	00403c9d 	.word	0x00403c9d

00403f0c <malloc>:
  403f0c:	4b02      	ldr	r3, [pc, #8]	; (403f18 <malloc+0xc>)
  403f0e:	4601      	mov	r1, r0
  403f10:	6818      	ldr	r0, [r3, #0]
  403f12:	f000 bb93 	b.w	40463c <_malloc_r>
  403f16:	bf00      	nop
  403f18:	20000074 	.word	0x20000074
  403f1c:	00000000 	.word	0x00000000

00403f20 <memchr>:
  403f20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403f24:	2a10      	cmp	r2, #16
  403f26:	db2b      	blt.n	403f80 <memchr+0x60>
  403f28:	f010 0f07 	tst.w	r0, #7
  403f2c:	d008      	beq.n	403f40 <memchr+0x20>
  403f2e:	f810 3b01 	ldrb.w	r3, [r0], #1
  403f32:	3a01      	subs	r2, #1
  403f34:	428b      	cmp	r3, r1
  403f36:	d02d      	beq.n	403f94 <memchr+0x74>
  403f38:	f010 0f07 	tst.w	r0, #7
  403f3c:	b342      	cbz	r2, 403f90 <memchr+0x70>
  403f3e:	d1f6      	bne.n	403f2e <memchr+0xe>
  403f40:	b4f0      	push	{r4, r5, r6, r7}
  403f42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  403f46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  403f4a:	f022 0407 	bic.w	r4, r2, #7
  403f4e:	f07f 0700 	mvns.w	r7, #0
  403f52:	2300      	movs	r3, #0
  403f54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  403f58:	3c08      	subs	r4, #8
  403f5a:	ea85 0501 	eor.w	r5, r5, r1
  403f5e:	ea86 0601 	eor.w	r6, r6, r1
  403f62:	fa85 f547 	uadd8	r5, r5, r7
  403f66:	faa3 f587 	sel	r5, r3, r7
  403f6a:	fa86 f647 	uadd8	r6, r6, r7
  403f6e:	faa5 f687 	sel	r6, r5, r7
  403f72:	b98e      	cbnz	r6, 403f98 <memchr+0x78>
  403f74:	d1ee      	bne.n	403f54 <memchr+0x34>
  403f76:	bcf0      	pop	{r4, r5, r6, r7}
  403f78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  403f7c:	f002 0207 	and.w	r2, r2, #7
  403f80:	b132      	cbz	r2, 403f90 <memchr+0x70>
  403f82:	f810 3b01 	ldrb.w	r3, [r0], #1
  403f86:	3a01      	subs	r2, #1
  403f88:	ea83 0301 	eor.w	r3, r3, r1
  403f8c:	b113      	cbz	r3, 403f94 <memchr+0x74>
  403f8e:	d1f8      	bne.n	403f82 <memchr+0x62>
  403f90:	2000      	movs	r0, #0
  403f92:	4770      	bx	lr
  403f94:	3801      	subs	r0, #1
  403f96:	4770      	bx	lr
  403f98:	2d00      	cmp	r5, #0
  403f9a:	bf06      	itte	eq
  403f9c:	4635      	moveq	r5, r6
  403f9e:	3803      	subeq	r0, #3
  403fa0:	3807      	subne	r0, #7
  403fa2:	f015 0f01 	tst.w	r5, #1
  403fa6:	d107      	bne.n	403fb8 <memchr+0x98>
  403fa8:	3001      	adds	r0, #1
  403faa:	f415 7f80 	tst.w	r5, #256	; 0x100
  403fae:	bf02      	ittt	eq
  403fb0:	3001      	addeq	r0, #1
  403fb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  403fb6:	3001      	addeq	r0, #1
  403fb8:	bcf0      	pop	{r4, r5, r6, r7}
  403fba:	3801      	subs	r0, #1
  403fbc:	4770      	bx	lr
  403fbe:	bf00      	nop

00403fc0 <memcpy>:
  403fc0:	b510      	push	{r4, lr}
  403fc2:	1e43      	subs	r3, r0, #1
  403fc4:	440a      	add	r2, r1
  403fc6:	4291      	cmp	r1, r2
  403fc8:	d004      	beq.n	403fd4 <memcpy+0x14>
  403fca:	f811 4b01 	ldrb.w	r4, [r1], #1
  403fce:	f803 4f01 	strb.w	r4, [r3, #1]!
  403fd2:	e7f8      	b.n	403fc6 <memcpy+0x6>
  403fd4:	bd10      	pop	{r4, pc}

00403fd6 <_Balloc>:
  403fd6:	b570      	push	{r4, r5, r6, lr}
  403fd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
  403fda:	4604      	mov	r4, r0
  403fdc:	460e      	mov	r6, r1
  403fde:	b93d      	cbnz	r5, 403ff0 <_Balloc+0x1a>
  403fe0:	2010      	movs	r0, #16
  403fe2:	f7ff ff93 	bl	403f0c <malloc>
  403fe6:	6260      	str	r0, [r4, #36]	; 0x24
  403fe8:	6045      	str	r5, [r0, #4]
  403fea:	6085      	str	r5, [r0, #8]
  403fec:	6005      	str	r5, [r0, #0]
  403fee:	60c5      	str	r5, [r0, #12]
  403ff0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  403ff2:	68eb      	ldr	r3, [r5, #12]
  403ff4:	b143      	cbz	r3, 404008 <_Balloc+0x32>
  403ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403ff8:	68db      	ldr	r3, [r3, #12]
  403ffa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
  403ffe:	b178      	cbz	r0, 404020 <_Balloc+0x4a>
  404000:	6802      	ldr	r2, [r0, #0]
  404002:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
  404006:	e017      	b.n	404038 <_Balloc+0x62>
  404008:	2221      	movs	r2, #33	; 0x21
  40400a:	2104      	movs	r1, #4
  40400c:	4620      	mov	r0, r4
  40400e:	f000 fab9 	bl	404584 <_calloc_r>
  404012:	6a63      	ldr	r3, [r4, #36]	; 0x24
  404014:	60e8      	str	r0, [r5, #12]
  404016:	68db      	ldr	r3, [r3, #12]
  404018:	2b00      	cmp	r3, #0
  40401a:	d1ec      	bne.n	403ff6 <_Balloc+0x20>
  40401c:	2000      	movs	r0, #0
  40401e:	bd70      	pop	{r4, r5, r6, pc}
  404020:	2101      	movs	r1, #1
  404022:	fa01 f506 	lsl.w	r5, r1, r6
  404026:	1d6a      	adds	r2, r5, #5
  404028:	0092      	lsls	r2, r2, #2
  40402a:	4620      	mov	r0, r4
  40402c:	f000 faaa 	bl	404584 <_calloc_r>
  404030:	2800      	cmp	r0, #0
  404032:	d0f3      	beq.n	40401c <_Balloc+0x46>
  404034:	6046      	str	r6, [r0, #4]
  404036:	6085      	str	r5, [r0, #8]
  404038:	2300      	movs	r3, #0
  40403a:	6103      	str	r3, [r0, #16]
  40403c:	60c3      	str	r3, [r0, #12]
  40403e:	bd70      	pop	{r4, r5, r6, pc}

00404040 <_Bfree>:
  404040:	b570      	push	{r4, r5, r6, lr}
  404042:	6a44      	ldr	r4, [r0, #36]	; 0x24
  404044:	4606      	mov	r6, r0
  404046:	460d      	mov	r5, r1
  404048:	b93c      	cbnz	r4, 40405a <_Bfree+0x1a>
  40404a:	2010      	movs	r0, #16
  40404c:	f7ff ff5e 	bl	403f0c <malloc>
  404050:	6270      	str	r0, [r6, #36]	; 0x24
  404052:	6044      	str	r4, [r0, #4]
  404054:	6084      	str	r4, [r0, #8]
  404056:	6004      	str	r4, [r0, #0]
  404058:	60c4      	str	r4, [r0, #12]
  40405a:	b13d      	cbz	r5, 40406c <_Bfree+0x2c>
  40405c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40405e:	686a      	ldr	r2, [r5, #4]
  404060:	68db      	ldr	r3, [r3, #12]
  404062:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404066:	6029      	str	r1, [r5, #0]
  404068:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40406c:	bd70      	pop	{r4, r5, r6, pc}

0040406e <__multadd>:
  40406e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404072:	690d      	ldr	r5, [r1, #16]
  404074:	461f      	mov	r7, r3
  404076:	4606      	mov	r6, r0
  404078:	460c      	mov	r4, r1
  40407a:	f101 0e14 	add.w	lr, r1, #20
  40407e:	2300      	movs	r3, #0
  404080:	f8de 0000 	ldr.w	r0, [lr]
  404084:	b281      	uxth	r1, r0
  404086:	fb02 7101 	mla	r1, r2, r1, r7
  40408a:	0c0f      	lsrs	r7, r1, #16
  40408c:	0c00      	lsrs	r0, r0, #16
  40408e:	fb02 7000 	mla	r0, r2, r0, r7
  404092:	b289      	uxth	r1, r1
  404094:	3301      	adds	r3, #1
  404096:	eb01 4100 	add.w	r1, r1, r0, lsl #16
  40409a:	429d      	cmp	r5, r3
  40409c:	ea4f 4710 	mov.w	r7, r0, lsr #16
  4040a0:	f84e 1b04 	str.w	r1, [lr], #4
  4040a4:	dcec      	bgt.n	404080 <__multadd+0x12>
  4040a6:	b1d7      	cbz	r7, 4040de <__multadd+0x70>
  4040a8:	68a3      	ldr	r3, [r4, #8]
  4040aa:	429d      	cmp	r5, r3
  4040ac:	db12      	blt.n	4040d4 <__multadd+0x66>
  4040ae:	6861      	ldr	r1, [r4, #4]
  4040b0:	4630      	mov	r0, r6
  4040b2:	3101      	adds	r1, #1
  4040b4:	f7ff ff8f 	bl	403fd6 <_Balloc>
  4040b8:	6922      	ldr	r2, [r4, #16]
  4040ba:	3202      	adds	r2, #2
  4040bc:	f104 010c 	add.w	r1, r4, #12
  4040c0:	4680      	mov	r8, r0
  4040c2:	0092      	lsls	r2, r2, #2
  4040c4:	300c      	adds	r0, #12
  4040c6:	f7ff ff7b 	bl	403fc0 <memcpy>
  4040ca:	4621      	mov	r1, r4
  4040cc:	4630      	mov	r0, r6
  4040ce:	f7ff ffb7 	bl	404040 <_Bfree>
  4040d2:	4644      	mov	r4, r8
  4040d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4040d8:	3501      	adds	r5, #1
  4040da:	615f      	str	r7, [r3, #20]
  4040dc:	6125      	str	r5, [r4, #16]
  4040de:	4620      	mov	r0, r4
  4040e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004040e4 <__hi0bits>:
  4040e4:	0c03      	lsrs	r3, r0, #16
  4040e6:	041b      	lsls	r3, r3, #16
  4040e8:	b913      	cbnz	r3, 4040f0 <__hi0bits+0xc>
  4040ea:	0400      	lsls	r0, r0, #16
  4040ec:	2310      	movs	r3, #16
  4040ee:	e000      	b.n	4040f2 <__hi0bits+0xe>
  4040f0:	2300      	movs	r3, #0
  4040f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4040f6:	bf04      	itt	eq
  4040f8:	0200      	lsleq	r0, r0, #8
  4040fa:	3308      	addeq	r3, #8
  4040fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  404100:	bf04      	itt	eq
  404102:	0100      	lsleq	r0, r0, #4
  404104:	3304      	addeq	r3, #4
  404106:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40410a:	bf04      	itt	eq
  40410c:	0080      	lsleq	r0, r0, #2
  40410e:	3302      	addeq	r3, #2
  404110:	2800      	cmp	r0, #0
  404112:	db03      	blt.n	40411c <__hi0bits+0x38>
  404114:	0042      	lsls	r2, r0, #1
  404116:	d503      	bpl.n	404120 <__hi0bits+0x3c>
  404118:	1c58      	adds	r0, r3, #1
  40411a:	4770      	bx	lr
  40411c:	4618      	mov	r0, r3
  40411e:	4770      	bx	lr
  404120:	2020      	movs	r0, #32
  404122:	4770      	bx	lr

00404124 <__lo0bits>:
  404124:	6803      	ldr	r3, [r0, #0]
  404126:	f013 0207 	ands.w	r2, r3, #7
  40412a:	d00b      	beq.n	404144 <__lo0bits+0x20>
  40412c:	07d9      	lsls	r1, r3, #31
  40412e:	d422      	bmi.n	404176 <__lo0bits+0x52>
  404130:	079a      	lsls	r2, r3, #30
  404132:	bf4b      	itete	mi
  404134:	085b      	lsrmi	r3, r3, #1
  404136:	089b      	lsrpl	r3, r3, #2
  404138:	6003      	strmi	r3, [r0, #0]
  40413a:	6003      	strpl	r3, [r0, #0]
  40413c:	bf4c      	ite	mi
  40413e:	2001      	movmi	r0, #1
  404140:	2002      	movpl	r0, #2
  404142:	4770      	bx	lr
  404144:	b299      	uxth	r1, r3
  404146:	b909      	cbnz	r1, 40414c <__lo0bits+0x28>
  404148:	0c1b      	lsrs	r3, r3, #16
  40414a:	2210      	movs	r2, #16
  40414c:	f013 0fff 	tst.w	r3, #255	; 0xff
  404150:	bf04      	itt	eq
  404152:	0a1b      	lsreq	r3, r3, #8
  404154:	3208      	addeq	r2, #8
  404156:	0719      	lsls	r1, r3, #28
  404158:	bf04      	itt	eq
  40415a:	091b      	lsreq	r3, r3, #4
  40415c:	3204      	addeq	r2, #4
  40415e:	0799      	lsls	r1, r3, #30
  404160:	bf04      	itt	eq
  404162:	089b      	lsreq	r3, r3, #2
  404164:	3202      	addeq	r2, #2
  404166:	07d9      	lsls	r1, r3, #31
  404168:	d402      	bmi.n	404170 <__lo0bits+0x4c>
  40416a:	085b      	lsrs	r3, r3, #1
  40416c:	d005      	beq.n	40417a <__lo0bits+0x56>
  40416e:	3201      	adds	r2, #1
  404170:	6003      	str	r3, [r0, #0]
  404172:	4610      	mov	r0, r2
  404174:	4770      	bx	lr
  404176:	2000      	movs	r0, #0
  404178:	4770      	bx	lr
  40417a:	2020      	movs	r0, #32
  40417c:	4770      	bx	lr

0040417e <__i2b>:
  40417e:	b510      	push	{r4, lr}
  404180:	460c      	mov	r4, r1
  404182:	2101      	movs	r1, #1
  404184:	f7ff ff27 	bl	403fd6 <_Balloc>
  404188:	2201      	movs	r2, #1
  40418a:	6144      	str	r4, [r0, #20]
  40418c:	6102      	str	r2, [r0, #16]
  40418e:	bd10      	pop	{r4, pc}

00404190 <__multiply>:
  404190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404194:	4614      	mov	r4, r2
  404196:	690a      	ldr	r2, [r1, #16]
  404198:	6923      	ldr	r3, [r4, #16]
  40419a:	429a      	cmp	r2, r3
  40419c:	bfb8      	it	lt
  40419e:	460b      	movlt	r3, r1
  4041a0:	4688      	mov	r8, r1
  4041a2:	bfbc      	itt	lt
  4041a4:	46a0      	movlt	r8, r4
  4041a6:	461c      	movlt	r4, r3
  4041a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
  4041ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
  4041b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4041b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
  4041b8:	eb07 0609 	add.w	r6, r7, r9
  4041bc:	429e      	cmp	r6, r3
  4041be:	bfc8      	it	gt
  4041c0:	3101      	addgt	r1, #1
  4041c2:	f7ff ff08 	bl	403fd6 <_Balloc>
  4041c6:	f100 0514 	add.w	r5, r0, #20
  4041ca:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
  4041ce:	462b      	mov	r3, r5
  4041d0:	2200      	movs	r2, #0
  4041d2:	4563      	cmp	r3, ip
  4041d4:	d202      	bcs.n	4041dc <__multiply+0x4c>
  4041d6:	f843 2b04 	str.w	r2, [r3], #4
  4041da:	e7fa      	b.n	4041d2 <__multiply+0x42>
  4041dc:	f104 0214 	add.w	r2, r4, #20
  4041e0:	f108 0114 	add.w	r1, r8, #20
  4041e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
  4041e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  4041ec:	9300      	str	r3, [sp, #0]
  4041ee:	9b00      	ldr	r3, [sp, #0]
  4041f0:	9201      	str	r2, [sp, #4]
  4041f2:	4293      	cmp	r3, r2
  4041f4:	d957      	bls.n	4042a6 <__multiply+0x116>
  4041f6:	f8b2 b000 	ldrh.w	fp, [r2]
  4041fa:	f1bb 0f00 	cmp.w	fp, #0
  4041fe:	d023      	beq.n	404248 <__multiply+0xb8>
  404200:	4689      	mov	r9, r1
  404202:	46ae      	mov	lr, r5
  404204:	f04f 0800 	mov.w	r8, #0
  404208:	f859 4b04 	ldr.w	r4, [r9], #4
  40420c:	f8be a000 	ldrh.w	sl, [lr]
  404210:	b2a3      	uxth	r3, r4
  404212:	fb0b a303 	mla	r3, fp, r3, sl
  404216:	ea4f 4a14 	mov.w	sl, r4, lsr #16
  40421a:	f8de 4000 	ldr.w	r4, [lr]
  40421e:	4443      	add	r3, r8
  404220:	ea4f 4814 	mov.w	r8, r4, lsr #16
  404224:	fb0b 840a 	mla	r4, fp, sl, r8
  404228:	eb04 4413 	add.w	r4, r4, r3, lsr #16
  40422c:	46f2      	mov	sl, lr
  40422e:	b29b      	uxth	r3, r3
  404230:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  404234:	454f      	cmp	r7, r9
  404236:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40423a:	f84a 3b04 	str.w	r3, [sl], #4
  40423e:	d901      	bls.n	404244 <__multiply+0xb4>
  404240:	46d6      	mov	lr, sl
  404242:	e7e1      	b.n	404208 <__multiply+0x78>
  404244:	f8ce 8004 	str.w	r8, [lr, #4]
  404248:	9b01      	ldr	r3, [sp, #4]
  40424a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
  40424e:	3204      	adds	r2, #4
  404250:	f1ba 0f00 	cmp.w	sl, #0
  404254:	d021      	beq.n	40429a <__multiply+0x10a>
  404256:	682b      	ldr	r3, [r5, #0]
  404258:	462c      	mov	r4, r5
  40425a:	4689      	mov	r9, r1
  40425c:	f04f 0800 	mov.w	r8, #0
  404260:	f8b9 e000 	ldrh.w	lr, [r9]
  404264:	f8b4 b002 	ldrh.w	fp, [r4, #2]
  404268:	fb0a be0e 	mla	lr, sl, lr, fp
  40426c:	44f0      	add	r8, lr
  40426e:	46a3      	mov	fp, r4
  404270:	b29b      	uxth	r3, r3
  404272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  404276:	f84b 3b04 	str.w	r3, [fp], #4
  40427a:	f859 3b04 	ldr.w	r3, [r9], #4
  40427e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
  404282:	0c1b      	lsrs	r3, r3, #16
  404284:	fb0a e303 	mla	r3, sl, r3, lr
  404288:	eb03 4318 	add.w	r3, r3, r8, lsr #16
  40428c:	454f      	cmp	r7, r9
  40428e:	ea4f 4813 	mov.w	r8, r3, lsr #16
  404292:	d901      	bls.n	404298 <__multiply+0x108>
  404294:	465c      	mov	r4, fp
  404296:	e7e3      	b.n	404260 <__multiply+0xd0>
  404298:	6063      	str	r3, [r4, #4]
  40429a:	3504      	adds	r5, #4
  40429c:	e7a7      	b.n	4041ee <__multiply+0x5e>
  40429e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
  4042a2:	b913      	cbnz	r3, 4042aa <__multiply+0x11a>
  4042a4:	3e01      	subs	r6, #1
  4042a6:	2e00      	cmp	r6, #0
  4042a8:	dcf9      	bgt.n	40429e <__multiply+0x10e>
  4042aa:	6106      	str	r6, [r0, #16]
  4042ac:	b003      	add	sp, #12
  4042ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

004042b4 <__pow5mult>:
  4042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4042b8:	4615      	mov	r5, r2
  4042ba:	f012 0203 	ands.w	r2, r2, #3
  4042be:	4606      	mov	r6, r0
  4042c0:	460f      	mov	r7, r1
  4042c2:	d007      	beq.n	4042d4 <__pow5mult+0x20>
  4042c4:	3a01      	subs	r2, #1
  4042c6:	4c21      	ldr	r4, [pc, #132]	; (40434c <__pow5mult+0x98>)
  4042c8:	2300      	movs	r3, #0
  4042ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  4042ce:	f7ff fece 	bl	40406e <__multadd>
  4042d2:	4607      	mov	r7, r0
  4042d4:	10ad      	asrs	r5, r5, #2
  4042d6:	d036      	beq.n	404346 <__pow5mult+0x92>
  4042d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
  4042da:	b93c      	cbnz	r4, 4042ec <__pow5mult+0x38>
  4042dc:	2010      	movs	r0, #16
  4042de:	f7ff fe15 	bl	403f0c <malloc>
  4042e2:	6270      	str	r0, [r6, #36]	; 0x24
  4042e4:	6044      	str	r4, [r0, #4]
  4042e6:	6084      	str	r4, [r0, #8]
  4042e8:	6004      	str	r4, [r0, #0]
  4042ea:	60c4      	str	r4, [r0, #12]
  4042ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
  4042f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
  4042f4:	b94c      	cbnz	r4, 40430a <__pow5mult+0x56>
  4042f6:	f240 2171 	movw	r1, #625	; 0x271
  4042fa:	4630      	mov	r0, r6
  4042fc:	f7ff ff3f 	bl	40417e <__i2b>
  404300:	2300      	movs	r3, #0
  404302:	f8c8 0008 	str.w	r0, [r8, #8]
  404306:	4604      	mov	r4, r0
  404308:	6003      	str	r3, [r0, #0]
  40430a:	f04f 0800 	mov.w	r8, #0
  40430e:	07eb      	lsls	r3, r5, #31
  404310:	d50a      	bpl.n	404328 <__pow5mult+0x74>
  404312:	4639      	mov	r1, r7
  404314:	4622      	mov	r2, r4
  404316:	4630      	mov	r0, r6
  404318:	f7ff ff3a 	bl	404190 <__multiply>
  40431c:	4639      	mov	r1, r7
  40431e:	4681      	mov	r9, r0
  404320:	4630      	mov	r0, r6
  404322:	f7ff fe8d 	bl	404040 <_Bfree>
  404326:	464f      	mov	r7, r9
  404328:	106d      	asrs	r5, r5, #1
  40432a:	d00c      	beq.n	404346 <__pow5mult+0x92>
  40432c:	6820      	ldr	r0, [r4, #0]
  40432e:	b108      	cbz	r0, 404334 <__pow5mult+0x80>
  404330:	4604      	mov	r4, r0
  404332:	e7ec      	b.n	40430e <__pow5mult+0x5a>
  404334:	4622      	mov	r2, r4
  404336:	4621      	mov	r1, r4
  404338:	4630      	mov	r0, r6
  40433a:	f7ff ff29 	bl	404190 <__multiply>
  40433e:	6020      	str	r0, [r4, #0]
  404340:	f8c0 8000 	str.w	r8, [r0]
  404344:	e7f4      	b.n	404330 <__pow5mult+0x7c>
  404346:	4638      	mov	r0, r7
  404348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40434c:	00405ef0 	.word	0x00405ef0

00404350 <__lshift>:
  404350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404354:	460c      	mov	r4, r1
  404356:	ea4f 1a62 	mov.w	sl, r2, asr #5
  40435a:	6926      	ldr	r6, [r4, #16]
  40435c:	6849      	ldr	r1, [r1, #4]
  40435e:	68a3      	ldr	r3, [r4, #8]
  404360:	4456      	add	r6, sl
  404362:	4607      	mov	r7, r0
  404364:	4691      	mov	r9, r2
  404366:	1c75      	adds	r5, r6, #1
  404368:	42ab      	cmp	r3, r5
  40436a:	da02      	bge.n	404372 <__lshift+0x22>
  40436c:	3101      	adds	r1, #1
  40436e:	005b      	lsls	r3, r3, #1
  404370:	e7fa      	b.n	404368 <__lshift+0x18>
  404372:	4638      	mov	r0, r7
  404374:	f7ff fe2f 	bl	403fd6 <_Balloc>
  404378:	2300      	movs	r3, #0
  40437a:	4680      	mov	r8, r0
  40437c:	f100 0114 	add.w	r1, r0, #20
  404380:	461a      	mov	r2, r3
  404382:	4553      	cmp	r3, sl
  404384:	da03      	bge.n	40438e <__lshift+0x3e>
  404386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40438a:	3301      	adds	r3, #1
  40438c:	e7f9      	b.n	404382 <__lshift+0x32>
  40438e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
  404392:	6920      	ldr	r0, [r4, #16]
  404394:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  404398:	f019 091f 	ands.w	r9, r9, #31
  40439c:	f104 0114 	add.w	r1, r4, #20
  4043a0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
  4043a4:	d014      	beq.n	4043d0 <__lshift+0x80>
  4043a6:	f1c9 0c20 	rsb	ip, r9, #32
  4043aa:	2200      	movs	r2, #0
  4043ac:	6808      	ldr	r0, [r1, #0]
  4043ae:	fa00 f009 	lsl.w	r0, r0, r9
  4043b2:	4302      	orrs	r2, r0
  4043b4:	469a      	mov	sl, r3
  4043b6:	f843 2b04 	str.w	r2, [r3], #4
  4043ba:	f851 2b04 	ldr.w	r2, [r1], #4
  4043be:	458e      	cmp	lr, r1
  4043c0:	fa22 f20c 	lsr.w	r2, r2, ip
  4043c4:	d8f2      	bhi.n	4043ac <__lshift+0x5c>
  4043c6:	f8ca 2004 	str.w	r2, [sl, #4]
  4043ca:	b142      	cbz	r2, 4043de <__lshift+0x8e>
  4043cc:	1cb5      	adds	r5, r6, #2
  4043ce:	e006      	b.n	4043de <__lshift+0x8e>
  4043d0:	3b04      	subs	r3, #4
  4043d2:	f851 2b04 	ldr.w	r2, [r1], #4
  4043d6:	f843 2f04 	str.w	r2, [r3, #4]!
  4043da:	458e      	cmp	lr, r1
  4043dc:	d8f9      	bhi.n	4043d2 <__lshift+0x82>
  4043de:	3d01      	subs	r5, #1
  4043e0:	4638      	mov	r0, r7
  4043e2:	f8c8 5010 	str.w	r5, [r8, #16]
  4043e6:	4621      	mov	r1, r4
  4043e8:	f7ff fe2a 	bl	404040 <_Bfree>
  4043ec:	4640      	mov	r0, r8
  4043ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004043f2 <__mcmp>:
  4043f2:	6903      	ldr	r3, [r0, #16]
  4043f4:	690a      	ldr	r2, [r1, #16]
  4043f6:	1a9b      	subs	r3, r3, r2
  4043f8:	b510      	push	{r4, lr}
  4043fa:	d111      	bne.n	404420 <__mcmp+0x2e>
  4043fc:	0092      	lsls	r2, r2, #2
  4043fe:	3014      	adds	r0, #20
  404400:	3114      	adds	r1, #20
  404402:	1883      	adds	r3, r0, r2
  404404:	440a      	add	r2, r1
  404406:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40440a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  40440e:	428c      	cmp	r4, r1
  404410:	d002      	beq.n	404418 <__mcmp+0x26>
  404412:	d307      	bcc.n	404424 <__mcmp+0x32>
  404414:	2001      	movs	r0, #1
  404416:	bd10      	pop	{r4, pc}
  404418:	4298      	cmp	r0, r3
  40441a:	d3f4      	bcc.n	404406 <__mcmp+0x14>
  40441c:	2000      	movs	r0, #0
  40441e:	bd10      	pop	{r4, pc}
  404420:	4618      	mov	r0, r3
  404422:	bd10      	pop	{r4, pc}
  404424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  404428:	bd10      	pop	{r4, pc}

0040442a <__mdiff>:
  40442a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40442e:	460c      	mov	r4, r1
  404430:	4607      	mov	r7, r0
  404432:	4611      	mov	r1, r2
  404434:	4620      	mov	r0, r4
  404436:	4615      	mov	r5, r2
  404438:	f7ff ffdb 	bl	4043f2 <__mcmp>
  40443c:	1e06      	subs	r6, r0, #0
  40443e:	d108      	bne.n	404452 <__mdiff+0x28>
  404440:	4631      	mov	r1, r6
  404442:	4638      	mov	r0, r7
  404444:	f7ff fdc7 	bl	403fd6 <_Balloc>
  404448:	2301      	movs	r3, #1
  40444a:	6103      	str	r3, [r0, #16]
  40444c:	6146      	str	r6, [r0, #20]
  40444e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404452:	bfbc      	itt	lt
  404454:	4623      	movlt	r3, r4
  404456:	462c      	movlt	r4, r5
  404458:	4638      	mov	r0, r7
  40445a:	6861      	ldr	r1, [r4, #4]
  40445c:	bfba      	itte	lt
  40445e:	461d      	movlt	r5, r3
  404460:	2601      	movlt	r6, #1
  404462:	2600      	movge	r6, #0
  404464:	f7ff fdb7 	bl	403fd6 <_Balloc>
  404468:	692b      	ldr	r3, [r5, #16]
  40446a:	60c6      	str	r6, [r0, #12]
  40446c:	6926      	ldr	r6, [r4, #16]
  40446e:	f105 0914 	add.w	r9, r5, #20
  404472:	3414      	adds	r4, #20
  404474:	eb04 0786 	add.w	r7, r4, r6, lsl #2
  404478:	eb09 0883 	add.w	r8, r9, r3, lsl #2
  40447c:	f100 0514 	add.w	r5, r0, #20
  404480:	f04f 0c00 	mov.w	ip, #0
  404484:	f854 3b04 	ldr.w	r3, [r4], #4
  404488:	f859 2b04 	ldr.w	r2, [r9], #4
  40448c:	fa1c f183 	uxtah	r1, ip, r3
  404490:	fa1f fe82 	uxth.w	lr, r2
  404494:	0c12      	lsrs	r2, r2, #16
  404496:	ebce 0101 	rsb	r1, lr, r1
  40449a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
  40449e:	eb03 4321 	add.w	r3, r3, r1, asr #16
  4044a2:	b289      	uxth	r1, r1
  4044a4:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4044a8:	45c8      	cmp	r8, r9
  4044aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
  4044ae:	46a6      	mov	lr, r4
  4044b0:	f845 3b04 	str.w	r3, [r5], #4
  4044b4:	d8e6      	bhi.n	404484 <__mdiff+0x5a>
  4044b6:	45be      	cmp	lr, r7
  4044b8:	d20e      	bcs.n	4044d8 <__mdiff+0xae>
  4044ba:	f85e 1b04 	ldr.w	r1, [lr], #4
  4044be:	fa1c f281 	uxtah	r2, ip, r1
  4044c2:	1413      	asrs	r3, r2, #16
  4044c4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  4044c8:	b292      	uxth	r2, r2
  4044ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4044ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
  4044d2:	f845 2b04 	str.w	r2, [r5], #4
  4044d6:	e7ee      	b.n	4044b6 <__mdiff+0x8c>
  4044d8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4044dc:	b90b      	cbnz	r3, 4044e2 <__mdiff+0xb8>
  4044de:	3e01      	subs	r6, #1
  4044e0:	e7fa      	b.n	4044d8 <__mdiff+0xae>
  4044e2:	6106      	str	r6, [r0, #16]
  4044e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004044e8 <__d2b>:
  4044e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4044ec:	2101      	movs	r1, #1
  4044ee:	461c      	mov	r4, r3
  4044f0:	4690      	mov	r8, r2
  4044f2:	9e08      	ldr	r6, [sp, #32]
  4044f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4044f6:	f7ff fd6e 	bl	403fd6 <_Balloc>
  4044fa:	f3c4 0213 	ubfx	r2, r4, #0, #20
  4044fe:	f3c4 540a 	ubfx	r4, r4, #20, #11
  404502:	4607      	mov	r7, r0
  404504:	b10c      	cbz	r4, 40450a <__d2b+0x22>
  404506:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40450a:	9201      	str	r2, [sp, #4]
  40450c:	f1b8 0f00 	cmp.w	r8, #0
  404510:	d019      	beq.n	404546 <__d2b+0x5e>
  404512:	a802      	add	r0, sp, #8
  404514:	f840 8d08 	str.w	r8, [r0, #-8]!
  404518:	f7ff fe04 	bl	404124 <__lo0bits>
  40451c:	9b00      	ldr	r3, [sp, #0]
  40451e:	b148      	cbz	r0, 404534 <__d2b+0x4c>
  404520:	9a01      	ldr	r2, [sp, #4]
  404522:	f1c0 0120 	rsb	r1, r0, #32
  404526:	fa02 f101 	lsl.w	r1, r2, r1
  40452a:	430b      	orrs	r3, r1
  40452c:	40c2      	lsrs	r2, r0
  40452e:	617b      	str	r3, [r7, #20]
  404530:	9201      	str	r2, [sp, #4]
  404532:	e000      	b.n	404536 <__d2b+0x4e>
  404534:	617b      	str	r3, [r7, #20]
  404536:	9b01      	ldr	r3, [sp, #4]
  404538:	61bb      	str	r3, [r7, #24]
  40453a:	2b00      	cmp	r3, #0
  40453c:	bf14      	ite	ne
  40453e:	2102      	movne	r1, #2
  404540:	2101      	moveq	r1, #1
  404542:	6139      	str	r1, [r7, #16]
  404544:	e007      	b.n	404556 <__d2b+0x6e>
  404546:	a801      	add	r0, sp, #4
  404548:	f7ff fdec 	bl	404124 <__lo0bits>
  40454c:	9b01      	ldr	r3, [sp, #4]
  40454e:	617b      	str	r3, [r7, #20]
  404550:	2101      	movs	r1, #1
  404552:	6139      	str	r1, [r7, #16]
  404554:	3020      	adds	r0, #32
  404556:	b134      	cbz	r4, 404566 <__d2b+0x7e>
  404558:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
  40455c:	4404      	add	r4, r0
  40455e:	6034      	str	r4, [r6, #0]
  404560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  404564:	e009      	b.n	40457a <__d2b+0x92>
  404566:	eb07 0381 	add.w	r3, r7, r1, lsl #2
  40456a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40456e:	6030      	str	r0, [r6, #0]
  404570:	6918      	ldr	r0, [r3, #16]
  404572:	f7ff fdb7 	bl	4040e4 <__hi0bits>
  404576:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40457a:	6028      	str	r0, [r5, #0]
  40457c:	4638      	mov	r0, r7
  40457e:	b002      	add	sp, #8
  404580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404584 <_calloc_r>:
  404584:	b538      	push	{r3, r4, r5, lr}
  404586:	fb02 f401 	mul.w	r4, r2, r1
  40458a:	4621      	mov	r1, r4
  40458c:	f000 f856 	bl	40463c <_malloc_r>
  404590:	4605      	mov	r5, r0
  404592:	b118      	cbz	r0, 40459c <_calloc_r+0x18>
  404594:	4622      	mov	r2, r4
  404596:	2100      	movs	r1, #0
  404598:	f7fd fe32 	bl	402200 <memset>
  40459c:	4628      	mov	r0, r5
  40459e:	bd38      	pop	{r3, r4, r5, pc}

004045a0 <_free_r>:
  4045a0:	b538      	push	{r3, r4, r5, lr}
  4045a2:	4605      	mov	r5, r0
  4045a4:	2900      	cmp	r1, #0
  4045a6:	d046      	beq.n	404636 <_free_r+0x96>
  4045a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
  4045ac:	1f0c      	subs	r4, r1, #4
  4045ae:	2b00      	cmp	r3, #0
  4045b0:	bfb8      	it	lt
  4045b2:	18e4      	addlt	r4, r4, r3
  4045b4:	f000 faa0 	bl	404af8 <__malloc_lock>
  4045b8:	4a1f      	ldr	r2, [pc, #124]	; (404638 <_free_r+0x98>)
  4045ba:	6813      	ldr	r3, [r2, #0]
  4045bc:	4611      	mov	r1, r2
  4045be:	b913      	cbnz	r3, 4045c6 <_free_r+0x26>
  4045c0:	6063      	str	r3, [r4, #4]
  4045c2:	6014      	str	r4, [r2, #0]
  4045c4:	e032      	b.n	40462c <_free_r+0x8c>
  4045c6:	42a3      	cmp	r3, r4
  4045c8:	d90e      	bls.n	4045e8 <_free_r+0x48>
  4045ca:	6822      	ldr	r2, [r4, #0]
  4045cc:	18a0      	adds	r0, r4, r2
  4045ce:	4283      	cmp	r3, r0
  4045d0:	bf04      	itt	eq
  4045d2:	6818      	ldreq	r0, [r3, #0]
  4045d4:	685b      	ldreq	r3, [r3, #4]
  4045d6:	6063      	str	r3, [r4, #4]
  4045d8:	bf04      	itt	eq
  4045da:	1812      	addeq	r2, r2, r0
  4045dc:	6022      	streq	r2, [r4, #0]
  4045de:	600c      	str	r4, [r1, #0]
  4045e0:	e024      	b.n	40462c <_free_r+0x8c>
  4045e2:	42a2      	cmp	r2, r4
  4045e4:	d803      	bhi.n	4045ee <_free_r+0x4e>
  4045e6:	4613      	mov	r3, r2
  4045e8:	685a      	ldr	r2, [r3, #4]
  4045ea:	2a00      	cmp	r2, #0
  4045ec:	d1f9      	bne.n	4045e2 <_free_r+0x42>
  4045ee:	6818      	ldr	r0, [r3, #0]
  4045f0:	1819      	adds	r1, r3, r0
  4045f2:	42a1      	cmp	r1, r4
  4045f4:	d10b      	bne.n	40460e <_free_r+0x6e>
  4045f6:	6821      	ldr	r1, [r4, #0]
  4045f8:	4401      	add	r1, r0
  4045fa:	1858      	adds	r0, r3, r1
  4045fc:	4282      	cmp	r2, r0
  4045fe:	6019      	str	r1, [r3, #0]
  404600:	d114      	bne.n	40462c <_free_r+0x8c>
  404602:	6810      	ldr	r0, [r2, #0]
  404604:	6852      	ldr	r2, [r2, #4]
  404606:	605a      	str	r2, [r3, #4]
  404608:	4401      	add	r1, r0
  40460a:	6019      	str	r1, [r3, #0]
  40460c:	e00e      	b.n	40462c <_free_r+0x8c>
  40460e:	d902      	bls.n	404616 <_free_r+0x76>
  404610:	230c      	movs	r3, #12
  404612:	602b      	str	r3, [r5, #0]
  404614:	e00a      	b.n	40462c <_free_r+0x8c>
  404616:	6821      	ldr	r1, [r4, #0]
  404618:	1860      	adds	r0, r4, r1
  40461a:	4282      	cmp	r2, r0
  40461c:	bf04      	itt	eq
  40461e:	6810      	ldreq	r0, [r2, #0]
  404620:	6852      	ldreq	r2, [r2, #4]
  404622:	6062      	str	r2, [r4, #4]
  404624:	bf04      	itt	eq
  404626:	1809      	addeq	r1, r1, r0
  404628:	6021      	streq	r1, [r4, #0]
  40462a:	605c      	str	r4, [r3, #4]
  40462c:	4628      	mov	r0, r5
  40462e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404632:	f000 ba62 	b.w	404afa <__malloc_unlock>
  404636:	bd38      	pop	{r3, r4, r5, pc}
  404638:	2000029c 	.word	0x2000029c

0040463c <_malloc_r>:
  40463c:	b570      	push	{r4, r5, r6, lr}
  40463e:	1ccd      	adds	r5, r1, #3
  404640:	f025 0503 	bic.w	r5, r5, #3
  404644:	3508      	adds	r5, #8
  404646:	2d0c      	cmp	r5, #12
  404648:	bf38      	it	cc
  40464a:	250c      	movcc	r5, #12
  40464c:	2d00      	cmp	r5, #0
  40464e:	4606      	mov	r6, r0
  404650:	db01      	blt.n	404656 <_malloc_r+0x1a>
  404652:	42a9      	cmp	r1, r5
  404654:	d902      	bls.n	40465c <_malloc_r+0x20>
  404656:	230c      	movs	r3, #12
  404658:	6033      	str	r3, [r6, #0]
  40465a:	e046      	b.n	4046ea <_malloc_r+0xae>
  40465c:	f000 fa4c 	bl	404af8 <__malloc_lock>
  404660:	4b23      	ldr	r3, [pc, #140]	; (4046f0 <_malloc_r+0xb4>)
  404662:	681c      	ldr	r4, [r3, #0]
  404664:	461a      	mov	r2, r3
  404666:	4621      	mov	r1, r4
  404668:	b1a1      	cbz	r1, 404694 <_malloc_r+0x58>
  40466a:	680b      	ldr	r3, [r1, #0]
  40466c:	1b5b      	subs	r3, r3, r5
  40466e:	d40e      	bmi.n	40468e <_malloc_r+0x52>
  404670:	2b0b      	cmp	r3, #11
  404672:	d903      	bls.n	40467c <_malloc_r+0x40>
  404674:	600b      	str	r3, [r1, #0]
  404676:	18cc      	adds	r4, r1, r3
  404678:	50cd      	str	r5, [r1, r3]
  40467a:	e01e      	b.n	4046ba <_malloc_r+0x7e>
  40467c:	428c      	cmp	r4, r1
  40467e:	bf0d      	iteet	eq
  404680:	6863      	ldreq	r3, [r4, #4]
  404682:	684b      	ldrne	r3, [r1, #4]
  404684:	6063      	strne	r3, [r4, #4]
  404686:	6013      	streq	r3, [r2, #0]
  404688:	bf18      	it	ne
  40468a:	460c      	movne	r4, r1
  40468c:	e015      	b.n	4046ba <_malloc_r+0x7e>
  40468e:	460c      	mov	r4, r1
  404690:	6849      	ldr	r1, [r1, #4]
  404692:	e7e9      	b.n	404668 <_malloc_r+0x2c>
  404694:	4c17      	ldr	r4, [pc, #92]	; (4046f4 <_malloc_r+0xb8>)
  404696:	6823      	ldr	r3, [r4, #0]
  404698:	b91b      	cbnz	r3, 4046a2 <_malloc_r+0x66>
  40469a:	4630      	mov	r0, r6
  40469c:	f000 f970 	bl	404980 <_sbrk_r>
  4046a0:	6020      	str	r0, [r4, #0]
  4046a2:	4629      	mov	r1, r5
  4046a4:	4630      	mov	r0, r6
  4046a6:	f000 f96b 	bl	404980 <_sbrk_r>
  4046aa:	1c43      	adds	r3, r0, #1
  4046ac:	d018      	beq.n	4046e0 <_malloc_r+0xa4>
  4046ae:	1cc4      	adds	r4, r0, #3
  4046b0:	f024 0403 	bic.w	r4, r4, #3
  4046b4:	42a0      	cmp	r0, r4
  4046b6:	d10d      	bne.n	4046d4 <_malloc_r+0x98>
  4046b8:	6025      	str	r5, [r4, #0]
  4046ba:	4630      	mov	r0, r6
  4046bc:	f000 fa1d 	bl	404afa <__malloc_unlock>
  4046c0:	f104 000b 	add.w	r0, r4, #11
  4046c4:	1d23      	adds	r3, r4, #4
  4046c6:	f020 0007 	bic.w	r0, r0, #7
  4046ca:	1ac3      	subs	r3, r0, r3
  4046cc:	d00e      	beq.n	4046ec <_malloc_r+0xb0>
  4046ce:	425a      	negs	r2, r3
  4046d0:	50e2      	str	r2, [r4, r3]
  4046d2:	bd70      	pop	{r4, r5, r6, pc}
  4046d4:	1a21      	subs	r1, r4, r0
  4046d6:	4630      	mov	r0, r6
  4046d8:	f000 f952 	bl	404980 <_sbrk_r>
  4046dc:	3001      	adds	r0, #1
  4046de:	d1eb      	bne.n	4046b8 <_malloc_r+0x7c>
  4046e0:	230c      	movs	r3, #12
  4046e2:	6033      	str	r3, [r6, #0]
  4046e4:	4630      	mov	r0, r6
  4046e6:	f000 fa08 	bl	404afa <__malloc_unlock>
  4046ea:	2000      	movs	r0, #0
  4046ec:	bd70      	pop	{r4, r5, r6, pc}
  4046ee:	bf00      	nop
  4046f0:	2000029c 	.word	0x2000029c
  4046f4:	20000298 	.word	0x20000298

004046f8 <__sfputc_r>:
  4046f8:	6893      	ldr	r3, [r2, #8]
  4046fa:	3b01      	subs	r3, #1
  4046fc:	2b00      	cmp	r3, #0
  4046fe:	b410      	push	{r4}
  404700:	6093      	str	r3, [r2, #8]
  404702:	da08      	bge.n	404716 <__sfputc_r+0x1e>
  404704:	6994      	ldr	r4, [r2, #24]
  404706:	42a3      	cmp	r3, r4
  404708:	db02      	blt.n	404710 <__sfputc_r+0x18>
  40470a:	b2cb      	uxtb	r3, r1
  40470c:	2b0a      	cmp	r3, #10
  40470e:	d102      	bne.n	404716 <__sfputc_r+0x1e>
  404710:	bc10      	pop	{r4}
  404712:	f7fe bb21 	b.w	402d58 <__swbuf_r>
  404716:	6813      	ldr	r3, [r2, #0]
  404718:	1c58      	adds	r0, r3, #1
  40471a:	6010      	str	r0, [r2, #0]
  40471c:	7019      	strb	r1, [r3, #0]
  40471e:	b2c8      	uxtb	r0, r1
  404720:	bc10      	pop	{r4}
  404722:	4770      	bx	lr

00404724 <__sfputs_r>:
  404724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404726:	4606      	mov	r6, r0
  404728:	460f      	mov	r7, r1
  40472a:	4614      	mov	r4, r2
  40472c:	18d5      	adds	r5, r2, r3
  40472e:	42ac      	cmp	r4, r5
  404730:	d008      	beq.n	404744 <__sfputs_r+0x20>
  404732:	463a      	mov	r2, r7
  404734:	f814 1b01 	ldrb.w	r1, [r4], #1
  404738:	4630      	mov	r0, r6
  40473a:	f7ff ffdd 	bl	4046f8 <__sfputc_r>
  40473e:	1c43      	adds	r3, r0, #1
  404740:	d1f5      	bne.n	40472e <__sfputs_r+0xa>
  404742:	e000      	b.n	404746 <__sfputs_r+0x22>
  404744:	2000      	movs	r0, #0
  404746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00404748 <_vfiprintf_r>:
  404748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40474c:	b09d      	sub	sp, #116	; 0x74
  40474e:	460c      	mov	r4, r1
  404750:	4617      	mov	r7, r2
  404752:	9303      	str	r3, [sp, #12]
  404754:	4606      	mov	r6, r0
  404756:	b118      	cbz	r0, 404760 <_vfiprintf_r+0x18>
  404758:	6983      	ldr	r3, [r0, #24]
  40475a:	b90b      	cbnz	r3, 404760 <_vfiprintf_r+0x18>
  40475c:	f7ff fade 	bl	403d1c <__sinit>
  404760:	4b7f      	ldr	r3, [pc, #508]	; (404960 <_vfiprintf_r+0x218>)
  404762:	429c      	cmp	r4, r3
  404764:	d101      	bne.n	40476a <_vfiprintf_r+0x22>
  404766:	6874      	ldr	r4, [r6, #4]
  404768:	e008      	b.n	40477c <_vfiprintf_r+0x34>
  40476a:	4b7e      	ldr	r3, [pc, #504]	; (404964 <_vfiprintf_r+0x21c>)
  40476c:	429c      	cmp	r4, r3
  40476e:	d101      	bne.n	404774 <_vfiprintf_r+0x2c>
  404770:	68b4      	ldr	r4, [r6, #8]
  404772:	e003      	b.n	40477c <_vfiprintf_r+0x34>
  404774:	4b7c      	ldr	r3, [pc, #496]	; (404968 <_vfiprintf_r+0x220>)
  404776:	429c      	cmp	r4, r3
  404778:	bf08      	it	eq
  40477a:	68f4      	ldreq	r4, [r6, #12]
  40477c:	89a3      	ldrh	r3, [r4, #12]
  40477e:	0718      	lsls	r0, r3, #28
  404780:	d50c      	bpl.n	40479c <_vfiprintf_r+0x54>
  404782:	6923      	ldr	r3, [r4, #16]
  404784:	b153      	cbz	r3, 40479c <_vfiprintf_r+0x54>
  404786:	2300      	movs	r3, #0
  404788:	9309      	str	r3, [sp, #36]	; 0x24
  40478a:	2320      	movs	r3, #32
  40478c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  404790:	2330      	movs	r3, #48	; 0x30
  404792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
  404796:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 40496c <_vfiprintf_r+0x224>
  40479a:	e044      	b.n	404826 <_vfiprintf_r+0xde>
  40479c:	4621      	mov	r1, r4
  40479e:	4630      	mov	r0, r6
  4047a0:	f7fe fb2e 	bl	402e00 <__swsetup_r>
  4047a4:	2800      	cmp	r0, #0
  4047a6:	d0ee      	beq.n	404786 <_vfiprintf_r+0x3e>
  4047a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  4047ac:	e0d5      	b.n	40495a <_vfiprintf_r+0x212>
  4047ae:	9a03      	ldr	r2, [sp, #12]
  4047b0:	1d11      	adds	r1, r2, #4
  4047b2:	6812      	ldr	r2, [r2, #0]
  4047b4:	9103      	str	r1, [sp, #12]
  4047b6:	2a00      	cmp	r2, #0
  4047b8:	f280 808c 	bge.w	4048d4 <_vfiprintf_r+0x18c>
  4047bc:	4252      	negs	r2, r2
  4047be:	f043 0002 	orr.w	r0, r3, #2
  4047c2:	9207      	str	r2, [sp, #28]
  4047c4:	9004      	str	r0, [sp, #16]
  4047c6:	f898 3000 	ldrb.w	r3, [r8]
  4047ca:	2b2e      	cmp	r3, #46	; 0x2e
  4047cc:	f000 8084 	beq.w	4048d8 <_vfiprintf_r+0x190>
  4047d0:	2203      	movs	r2, #3
  4047d2:	f898 1000 	ldrb.w	r1, [r8]
  4047d6:	4865      	ldr	r0, [pc, #404]	; (40496c <_vfiprintf_r+0x224>)
  4047d8:	f7ff fba2 	bl	403f20 <memchr>
  4047dc:	b148      	cbz	r0, 4047f2 <_vfiprintf_r+0xaa>
  4047de:	2340      	movs	r3, #64	; 0x40
  4047e0:	ebcb 0000 	rsb	r0, fp, r0
  4047e4:	fa03 f000 	lsl.w	r0, r3, r0
  4047e8:	9b04      	ldr	r3, [sp, #16]
  4047ea:	4318      	orrs	r0, r3
  4047ec:	9004      	str	r0, [sp, #16]
  4047ee:	f108 0801 	add.w	r8, r8, #1
  4047f2:	f898 1000 	ldrb.w	r1, [r8]
  4047f6:	485e      	ldr	r0, [pc, #376]	; (404970 <_vfiprintf_r+0x228>)
  4047f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4047fc:	2206      	movs	r2, #6
  4047fe:	f108 0701 	add.w	r7, r8, #1
  404802:	f7ff fb8d 	bl	403f20 <memchr>
  404806:	2800      	cmp	r0, #0
  404808:	f000 8095 	beq.w	404936 <_vfiprintf_r+0x1ee>
  40480c:	4b59      	ldr	r3, [pc, #356]	; (404974 <_vfiprintf_r+0x22c>)
  40480e:	2b00      	cmp	r3, #0
  404810:	f040 8088 	bne.w	404924 <_vfiprintf_r+0x1dc>
  404814:	9b03      	ldr	r3, [sp, #12]
  404816:	3307      	adds	r3, #7
  404818:	f023 0307 	bic.w	r3, r3, #7
  40481c:	3308      	adds	r3, #8
  40481e:	9303      	str	r3, [sp, #12]
  404820:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404822:	4453      	add	r3, sl
  404824:	9309      	str	r3, [sp, #36]	; 0x24
  404826:	46b8      	mov	r8, r7
  404828:	4645      	mov	r5, r8
  40482a:	f815 3b01 	ldrb.w	r3, [r5], #1
  40482e:	b91b      	cbnz	r3, 404838 <_vfiprintf_r+0xf0>
  404830:	ebb8 0907 	subs.w	r9, r8, r7
  404834:	d00f      	beq.n	404856 <_vfiprintf_r+0x10e>
  404836:	e003      	b.n	404840 <_vfiprintf_r+0xf8>
  404838:	2b25      	cmp	r3, #37	; 0x25
  40483a:	d0f9      	beq.n	404830 <_vfiprintf_r+0xe8>
  40483c:	46a8      	mov	r8, r5
  40483e:	e7f3      	b.n	404828 <_vfiprintf_r+0xe0>
  404840:	464b      	mov	r3, r9
  404842:	463a      	mov	r2, r7
  404844:	4621      	mov	r1, r4
  404846:	4630      	mov	r0, r6
  404848:	f7ff ff6c 	bl	404724 <__sfputs_r>
  40484c:	3001      	adds	r0, #1
  40484e:	d07f      	beq.n	404950 <_vfiprintf_r+0x208>
  404850:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404852:	444b      	add	r3, r9
  404854:	9309      	str	r3, [sp, #36]	; 0x24
  404856:	f898 3000 	ldrb.w	r3, [r8]
  40485a:	2b00      	cmp	r3, #0
  40485c:	d078      	beq.n	404950 <_vfiprintf_r+0x208>
  40485e:	2300      	movs	r3, #0
  404860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  404864:	9304      	str	r3, [sp, #16]
  404866:	9307      	str	r3, [sp, #28]
  404868:	9205      	str	r2, [sp, #20]
  40486a:	9306      	str	r3, [sp, #24]
  40486c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  404870:	931a      	str	r3, [sp, #104]	; 0x68
  404872:	2701      	movs	r7, #1
  404874:	2205      	movs	r2, #5
  404876:	7829      	ldrb	r1, [r5, #0]
  404878:	483f      	ldr	r0, [pc, #252]	; (404978 <_vfiprintf_r+0x230>)
  40487a:	f7ff fb51 	bl	403f20 <memchr>
  40487e:	f105 0801 	add.w	r8, r5, #1
  404882:	9b04      	ldr	r3, [sp, #16]
  404884:	b138      	cbz	r0, 404896 <_vfiprintf_r+0x14e>
  404886:	4a3c      	ldr	r2, [pc, #240]	; (404978 <_vfiprintf_r+0x230>)
  404888:	1a80      	subs	r0, r0, r2
  40488a:	fa07 f000 	lsl.w	r0, r7, r0
  40488e:	4318      	orrs	r0, r3
  404890:	9004      	str	r0, [sp, #16]
  404892:	4645      	mov	r5, r8
  404894:	e7ee      	b.n	404874 <_vfiprintf_r+0x12c>
  404896:	06d9      	lsls	r1, r3, #27
  404898:	bf44      	itt	mi
  40489a:	2220      	movmi	r2, #32
  40489c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4048a0:	071a      	lsls	r2, r3, #28
  4048a2:	bf44      	itt	mi
  4048a4:	222b      	movmi	r2, #43	; 0x2b
  4048a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
  4048aa:	782a      	ldrb	r2, [r5, #0]
  4048ac:	2a2a      	cmp	r2, #42	; 0x2a
  4048ae:	f43f af7e 	beq.w	4047ae <_vfiprintf_r+0x66>
  4048b2:	9a07      	ldr	r2, [sp, #28]
  4048b4:	2100      	movs	r1, #0
  4048b6:	200a      	movs	r0, #10
  4048b8:	46a8      	mov	r8, r5
  4048ba:	3501      	adds	r5, #1
  4048bc:	f898 3000 	ldrb.w	r3, [r8]
  4048c0:	3b30      	subs	r3, #48	; 0x30
  4048c2:	2b09      	cmp	r3, #9
  4048c4:	d803      	bhi.n	4048ce <_vfiprintf_r+0x186>
  4048c6:	fb00 3202 	mla	r2, r0, r2, r3
  4048ca:	2101      	movs	r1, #1
  4048cc:	e7f4      	b.n	4048b8 <_vfiprintf_r+0x170>
  4048ce:	2900      	cmp	r1, #0
  4048d0:	f43f af79 	beq.w	4047c6 <_vfiprintf_r+0x7e>
  4048d4:	9207      	str	r2, [sp, #28]
  4048d6:	e776      	b.n	4047c6 <_vfiprintf_r+0x7e>
  4048d8:	f898 3001 	ldrb.w	r3, [r8, #1]
  4048dc:	2b2a      	cmp	r3, #42	; 0x2a
  4048de:	d10b      	bne.n	4048f8 <_vfiprintf_r+0x1b0>
  4048e0:	9b03      	ldr	r3, [sp, #12]
  4048e2:	1d1a      	adds	r2, r3, #4
  4048e4:	681b      	ldr	r3, [r3, #0]
  4048e6:	9203      	str	r2, [sp, #12]
  4048e8:	2b00      	cmp	r3, #0
  4048ea:	bfb8      	it	lt
  4048ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
  4048f0:	f108 0802 	add.w	r8, r8, #2
  4048f4:	9305      	str	r3, [sp, #20]
  4048f6:	e76b      	b.n	4047d0 <_vfiprintf_r+0x88>
  4048f8:	2300      	movs	r3, #0
  4048fa:	9305      	str	r3, [sp, #20]
  4048fc:	f108 0001 	add.w	r0, r8, #1
  404900:	4619      	mov	r1, r3
  404902:	250a      	movs	r5, #10
  404904:	4680      	mov	r8, r0
  404906:	3001      	adds	r0, #1
  404908:	f898 2000 	ldrb.w	r2, [r8]
  40490c:	3a30      	subs	r2, #48	; 0x30
  40490e:	2a09      	cmp	r2, #9
  404910:	d803      	bhi.n	40491a <_vfiprintf_r+0x1d2>
  404912:	fb05 2101 	mla	r1, r5, r1, r2
  404916:	2301      	movs	r3, #1
  404918:	e7f4      	b.n	404904 <_vfiprintf_r+0x1bc>
  40491a:	2b00      	cmp	r3, #0
  40491c:	f43f af58 	beq.w	4047d0 <_vfiprintf_r+0x88>
  404920:	9105      	str	r1, [sp, #20]
  404922:	e755      	b.n	4047d0 <_vfiprintf_r+0x88>
  404924:	ab03      	add	r3, sp, #12
  404926:	9300      	str	r3, [sp, #0]
  404928:	4622      	mov	r2, r4
  40492a:	4b14      	ldr	r3, [pc, #80]	; (40497c <_vfiprintf_r+0x234>)
  40492c:	a904      	add	r1, sp, #16
  40492e:	4630      	mov	r0, r6
  404930:	f7fd fcfe 	bl	402330 <_printf_float>
  404934:	e007      	b.n	404946 <_vfiprintf_r+0x1fe>
  404936:	ab03      	add	r3, sp, #12
  404938:	9300      	str	r3, [sp, #0]
  40493a:	4622      	mov	r2, r4
  40493c:	4b0f      	ldr	r3, [pc, #60]	; (40497c <_vfiprintf_r+0x234>)
  40493e:	a904      	add	r1, sp, #16
  404940:	4630      	mov	r0, r6
  404942:	f7fd ffaf 	bl	4028a4 <_printf_i>
  404946:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
  40494a:	4682      	mov	sl, r0
  40494c:	f47f af68 	bne.w	404820 <_vfiprintf_r+0xd8>
  404950:	89a3      	ldrh	r3, [r4, #12]
  404952:	065b      	lsls	r3, r3, #25
  404954:	f53f af28 	bmi.w	4047a8 <_vfiprintf_r+0x60>
  404958:	9809      	ldr	r0, [sp, #36]	; 0x24
  40495a:	b01d      	add	sp, #116	; 0x74
  40495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404960:	00405da0 	.word	0x00405da0
  404964:	00405dc0 	.word	0x00405dc0
  404968:	00405de0 	.word	0x00405de0
  40496c:	00405f02 	.word	0x00405f02
  404970:	00405f06 	.word	0x00405f06
  404974:	00402331 	.word	0x00402331
  404978:	00405efc 	.word	0x00405efc
  40497c:	00404725 	.word	0x00404725

00404980 <_sbrk_r>:
  404980:	b538      	push	{r3, r4, r5, lr}
  404982:	4c06      	ldr	r4, [pc, #24]	; (40499c <_sbrk_r+0x1c>)
  404984:	2300      	movs	r3, #0
  404986:	4605      	mov	r5, r0
  404988:	4608      	mov	r0, r1
  40498a:	6023      	str	r3, [r4, #0]
  40498c:	f7fd f854 	bl	401a38 <_sbrk>
  404990:	1c43      	adds	r3, r0, #1
  404992:	d102      	bne.n	40499a <_sbrk_r+0x1a>
  404994:	6823      	ldr	r3, [r4, #0]
  404996:	b103      	cbz	r3, 40499a <_sbrk_r+0x1a>
  404998:	602b      	str	r3, [r5, #0]
  40499a:	bd38      	pop	{r3, r4, r5, pc}
  40499c:	20000330 	.word	0x20000330

004049a0 <__sread>:
  4049a0:	b510      	push	{r4, lr}
  4049a2:	460c      	mov	r4, r1
  4049a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4049a8:	f000 f8a8 	bl	404afc <_read_r>
  4049ac:	2800      	cmp	r0, #0
  4049ae:	bfab      	itete	ge
  4049b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
  4049b2:	89a3      	ldrhlt	r3, [r4, #12]
  4049b4:	181b      	addge	r3, r3, r0
  4049b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
  4049ba:	bfac      	ite	ge
  4049bc:	6563      	strge	r3, [r4, #84]	; 0x54
  4049be:	81a3      	strhlt	r3, [r4, #12]
  4049c0:	bd10      	pop	{r4, pc}

004049c2 <__swrite>:
  4049c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4049c6:	461f      	mov	r7, r3
  4049c8:	898b      	ldrh	r3, [r1, #12]
  4049ca:	05db      	lsls	r3, r3, #23
  4049cc:	4605      	mov	r5, r0
  4049ce:	460c      	mov	r4, r1
  4049d0:	4616      	mov	r6, r2
  4049d2:	d505      	bpl.n	4049e0 <__swrite+0x1e>
  4049d4:	2302      	movs	r3, #2
  4049d6:	2200      	movs	r2, #0
  4049d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4049dc:	f000 f868 	bl	404ab0 <_lseek_r>
  4049e0:	89a3      	ldrh	r3, [r4, #12]
  4049e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4049e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4049ea:	81a3      	strh	r3, [r4, #12]
  4049ec:	4632      	mov	r2, r6
  4049ee:	463b      	mov	r3, r7
  4049f0:	4628      	mov	r0, r5
  4049f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4049f6:	f000 b817 	b.w	404a28 <_write_r>

004049fa <__sseek>:
  4049fa:	b510      	push	{r4, lr}
  4049fc:	460c      	mov	r4, r1
  4049fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a02:	f000 f855 	bl	404ab0 <_lseek_r>
  404a06:	1c43      	adds	r3, r0, #1
  404a08:	89a3      	ldrh	r3, [r4, #12]
  404a0a:	bf15      	itete	ne
  404a0c:	6560      	strne	r0, [r4, #84]	; 0x54
  404a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404a16:	81a3      	strheq	r3, [r4, #12]
  404a18:	bf18      	it	ne
  404a1a:	81a3      	strhne	r3, [r4, #12]
  404a1c:	bd10      	pop	{r4, pc}

00404a1e <__sclose>:
  404a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404a22:	f000 b813 	b.w	404a4c <_close_r>
	...

00404a28 <_write_r>:
  404a28:	b538      	push	{r3, r4, r5, lr}
  404a2a:	4c07      	ldr	r4, [pc, #28]	; (404a48 <_write_r+0x20>)
  404a2c:	4605      	mov	r5, r0
  404a2e:	4608      	mov	r0, r1
  404a30:	4611      	mov	r1, r2
  404a32:	2200      	movs	r2, #0
  404a34:	6022      	str	r2, [r4, #0]
  404a36:	461a      	mov	r2, r3
  404a38:	f7fb fbb8 	bl	4001ac <_write>
  404a3c:	1c43      	adds	r3, r0, #1
  404a3e:	d102      	bne.n	404a46 <_write_r+0x1e>
  404a40:	6823      	ldr	r3, [r4, #0]
  404a42:	b103      	cbz	r3, 404a46 <_write_r+0x1e>
  404a44:	602b      	str	r3, [r5, #0]
  404a46:	bd38      	pop	{r3, r4, r5, pc}
  404a48:	20000330 	.word	0x20000330

00404a4c <_close_r>:
  404a4c:	b538      	push	{r3, r4, r5, lr}
  404a4e:	4c06      	ldr	r4, [pc, #24]	; (404a68 <_close_r+0x1c>)
  404a50:	2300      	movs	r3, #0
  404a52:	4605      	mov	r5, r0
  404a54:	4608      	mov	r0, r1
  404a56:	6023      	str	r3, [r4, #0]
  404a58:	f7fd f808 	bl	401a6c <_close>
  404a5c:	1c43      	adds	r3, r0, #1
  404a5e:	d102      	bne.n	404a66 <_close_r+0x1a>
  404a60:	6823      	ldr	r3, [r4, #0]
  404a62:	b103      	cbz	r3, 404a66 <_close_r+0x1a>
  404a64:	602b      	str	r3, [r5, #0]
  404a66:	bd38      	pop	{r3, r4, r5, pc}
  404a68:	20000330 	.word	0x20000330

00404a6c <_fstat_r>:
  404a6c:	b538      	push	{r3, r4, r5, lr}
  404a6e:	4c07      	ldr	r4, [pc, #28]	; (404a8c <_fstat_r+0x20>)
  404a70:	2300      	movs	r3, #0
  404a72:	4605      	mov	r5, r0
  404a74:	4608      	mov	r0, r1
  404a76:	4611      	mov	r1, r2
  404a78:	6023      	str	r3, [r4, #0]
  404a7a:	f7fc fffb 	bl	401a74 <_fstat>
  404a7e:	1c43      	adds	r3, r0, #1
  404a80:	d102      	bne.n	404a88 <_fstat_r+0x1c>
  404a82:	6823      	ldr	r3, [r4, #0]
  404a84:	b103      	cbz	r3, 404a88 <_fstat_r+0x1c>
  404a86:	602b      	str	r3, [r5, #0]
  404a88:	bd38      	pop	{r3, r4, r5, pc}
  404a8a:	bf00      	nop
  404a8c:	20000330 	.word	0x20000330

00404a90 <_isatty_r>:
  404a90:	b538      	push	{r3, r4, r5, lr}
  404a92:	4c06      	ldr	r4, [pc, #24]	; (404aac <_isatty_r+0x1c>)
  404a94:	2300      	movs	r3, #0
  404a96:	4605      	mov	r5, r0
  404a98:	4608      	mov	r0, r1
  404a9a:	6023      	str	r3, [r4, #0]
  404a9c:	f7fc fff0 	bl	401a80 <_isatty>
  404aa0:	1c43      	adds	r3, r0, #1
  404aa2:	d102      	bne.n	404aaa <_isatty_r+0x1a>
  404aa4:	6823      	ldr	r3, [r4, #0]
  404aa6:	b103      	cbz	r3, 404aaa <_isatty_r+0x1a>
  404aa8:	602b      	str	r3, [r5, #0]
  404aaa:	bd38      	pop	{r3, r4, r5, pc}
  404aac:	20000330 	.word	0x20000330

00404ab0 <_lseek_r>:
  404ab0:	b538      	push	{r3, r4, r5, lr}
  404ab2:	4c07      	ldr	r4, [pc, #28]	; (404ad0 <_lseek_r+0x20>)
  404ab4:	4605      	mov	r5, r0
  404ab6:	4608      	mov	r0, r1
  404ab8:	4611      	mov	r1, r2
  404aba:	2200      	movs	r2, #0
  404abc:	6022      	str	r2, [r4, #0]
  404abe:	461a      	mov	r2, r3
  404ac0:	f7fc ffe0 	bl	401a84 <_lseek>
  404ac4:	1c43      	adds	r3, r0, #1
  404ac6:	d102      	bne.n	404ace <_lseek_r+0x1e>
  404ac8:	6823      	ldr	r3, [r4, #0]
  404aca:	b103      	cbz	r3, 404ace <_lseek_r+0x1e>
  404acc:	602b      	str	r3, [r5, #0]
  404ace:	bd38      	pop	{r3, r4, r5, pc}
  404ad0:	20000330 	.word	0x20000330

00404ad4 <__ascii_mbtowc>:
  404ad4:	b082      	sub	sp, #8
  404ad6:	b901      	cbnz	r1, 404ada <__ascii_mbtowc+0x6>
  404ad8:	a901      	add	r1, sp, #4
  404ada:	b13a      	cbz	r2, 404aec <__ascii_mbtowc+0x18>
  404adc:	b143      	cbz	r3, 404af0 <__ascii_mbtowc+0x1c>
  404ade:	7813      	ldrb	r3, [r2, #0]
  404ae0:	600b      	str	r3, [r1, #0]
  404ae2:	7812      	ldrb	r2, [r2, #0]
  404ae4:	1c10      	adds	r0, r2, #0
  404ae6:	bf18      	it	ne
  404ae8:	2001      	movne	r0, #1
  404aea:	e003      	b.n	404af4 <__ascii_mbtowc+0x20>
  404aec:	4610      	mov	r0, r2
  404aee:	e001      	b.n	404af4 <__ascii_mbtowc+0x20>
  404af0:	f06f 0001 	mvn.w	r0, #1
  404af4:	b002      	add	sp, #8
  404af6:	4770      	bx	lr

00404af8 <__malloc_lock>:
  404af8:	4770      	bx	lr

00404afa <__malloc_unlock>:
  404afa:	4770      	bx	lr

00404afc <_read_r>:
  404afc:	b538      	push	{r3, r4, r5, lr}
  404afe:	4c07      	ldr	r4, [pc, #28]	; (404b1c <_read_r+0x20>)
  404b00:	4605      	mov	r5, r0
  404b02:	4608      	mov	r0, r1
  404b04:	4611      	mov	r1, r2
  404b06:	2200      	movs	r2, #0
  404b08:	6022      	str	r2, [r4, #0]
  404b0a:	461a      	mov	r2, r3
  404b0c:	f7fb fb30 	bl	400170 <_read>
  404b10:	1c43      	adds	r3, r0, #1
  404b12:	d102      	bne.n	404b1a <_read_r+0x1e>
  404b14:	6823      	ldr	r3, [r4, #0]
  404b16:	b103      	cbz	r3, 404b1a <_read_r+0x1e>
  404b18:	602b      	str	r3, [r5, #0]
  404b1a:	bd38      	pop	{r3, r4, r5, pc}
  404b1c:	20000330 	.word	0x20000330

00404b20 <__ascii_wctomb>:
  404b20:	b149      	cbz	r1, 404b36 <__ascii_wctomb+0x16>
  404b22:	2aff      	cmp	r2, #255	; 0xff
  404b24:	bf85      	ittet	hi
  404b26:	238a      	movhi	r3, #138	; 0x8a
  404b28:	6003      	strhi	r3, [r0, #0]
  404b2a:	700a      	strbls	r2, [r1, #0]
  404b2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
  404b30:	bf98      	it	ls
  404b32:	2001      	movls	r0, #1
  404b34:	4770      	bx	lr
  404b36:	4608      	mov	r0, r1
  404b38:	4770      	bx	lr
	...

00404b3c <__aeabi_drsub>:
  404b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404b40:	e002      	b.n	404b48 <__adddf3>
  404b42:	bf00      	nop

00404b44 <__aeabi_dsub>:
  404b44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00404b48 <__adddf3>:
  404b48:	b530      	push	{r4, r5, lr}
  404b4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  404b4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  404b52:	ea94 0f05 	teq	r4, r5
  404b56:	bf08      	it	eq
  404b58:	ea90 0f02 	teqeq	r0, r2
  404b5c:	bf1f      	itttt	ne
  404b5e:	ea54 0c00 	orrsne.w	ip, r4, r0
  404b62:	ea55 0c02 	orrsne.w	ip, r5, r2
  404b66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404b6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404b6e:	f000 80e2 	beq.w	404d36 <__adddf3+0x1ee>
  404b72:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404b76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404b7a:	bfb8      	it	lt
  404b7c:	426d      	neglt	r5, r5
  404b7e:	dd0c      	ble.n	404b9a <__adddf3+0x52>
  404b80:	442c      	add	r4, r5
  404b82:	ea80 0202 	eor.w	r2, r0, r2
  404b86:	ea81 0303 	eor.w	r3, r1, r3
  404b8a:	ea82 0000 	eor.w	r0, r2, r0
  404b8e:	ea83 0101 	eor.w	r1, r3, r1
  404b92:	ea80 0202 	eor.w	r2, r0, r2
  404b96:	ea81 0303 	eor.w	r3, r1, r3
  404b9a:	2d36      	cmp	r5, #54	; 0x36
  404b9c:	bf88      	it	hi
  404b9e:	bd30      	pophi	{r4, r5, pc}
  404ba0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404ba4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404ba8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404bac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404bb0:	d002      	beq.n	404bb8 <__adddf3+0x70>
  404bb2:	4240      	negs	r0, r0
  404bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404bb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404bbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404bc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404bc4:	d002      	beq.n	404bcc <__adddf3+0x84>
  404bc6:	4252      	negs	r2, r2
  404bc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404bcc:	ea94 0f05 	teq	r4, r5
  404bd0:	f000 80a7 	beq.w	404d22 <__adddf3+0x1da>
  404bd4:	f1a4 0401 	sub.w	r4, r4, #1
  404bd8:	f1d5 0e20 	rsbs	lr, r5, #32
  404bdc:	db0d      	blt.n	404bfa <__adddf3+0xb2>
  404bde:	fa02 fc0e 	lsl.w	ip, r2, lr
  404be2:	fa22 f205 	lsr.w	r2, r2, r5
  404be6:	1880      	adds	r0, r0, r2
  404be8:	f141 0100 	adc.w	r1, r1, #0
  404bec:	fa03 f20e 	lsl.w	r2, r3, lr
  404bf0:	1880      	adds	r0, r0, r2
  404bf2:	fa43 f305 	asr.w	r3, r3, r5
  404bf6:	4159      	adcs	r1, r3
  404bf8:	e00e      	b.n	404c18 <__adddf3+0xd0>
  404bfa:	f1a5 0520 	sub.w	r5, r5, #32
  404bfe:	f10e 0e20 	add.w	lr, lr, #32
  404c02:	2a01      	cmp	r2, #1
  404c04:	fa03 fc0e 	lsl.w	ip, r3, lr
  404c08:	bf28      	it	cs
  404c0a:	f04c 0c02 	orrcs.w	ip, ip, #2
  404c0e:	fa43 f305 	asr.w	r3, r3, r5
  404c12:	18c0      	adds	r0, r0, r3
  404c14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404c18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404c1c:	d507      	bpl.n	404c2e <__adddf3+0xe6>
  404c1e:	f04f 0e00 	mov.w	lr, #0
  404c22:	f1dc 0c00 	rsbs	ip, ip, #0
  404c26:	eb7e 0000 	sbcs.w	r0, lr, r0
  404c2a:	eb6e 0101 	sbc.w	r1, lr, r1
  404c2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  404c32:	d31b      	bcc.n	404c6c <__adddf3+0x124>
  404c34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404c38:	d30c      	bcc.n	404c54 <__adddf3+0x10c>
  404c3a:	0849      	lsrs	r1, r1, #1
  404c3c:	ea5f 0030 	movs.w	r0, r0, rrx
  404c40:	ea4f 0c3c 	mov.w	ip, ip, rrx
  404c44:	f104 0401 	add.w	r4, r4, #1
  404c48:	ea4f 5244 	mov.w	r2, r4, lsl #21
  404c4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  404c50:	f080 809a 	bcs.w	404d88 <__adddf3+0x240>
  404c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404c58:	bf08      	it	eq
  404c5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404c5e:	f150 0000 	adcs.w	r0, r0, #0
  404c62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404c66:	ea41 0105 	orr.w	r1, r1, r5
  404c6a:	bd30      	pop	{r4, r5, pc}
  404c6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  404c70:	4140      	adcs	r0, r0
  404c72:	eb41 0101 	adc.w	r1, r1, r1
  404c76:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404c7a:	f1a4 0401 	sub.w	r4, r4, #1
  404c7e:	d1e9      	bne.n	404c54 <__adddf3+0x10c>
  404c80:	f091 0f00 	teq	r1, #0
  404c84:	bf04      	itt	eq
  404c86:	4601      	moveq	r1, r0
  404c88:	2000      	moveq	r0, #0
  404c8a:	fab1 f381 	clz	r3, r1
  404c8e:	bf08      	it	eq
  404c90:	3320      	addeq	r3, #32
  404c92:	f1a3 030b 	sub.w	r3, r3, #11
  404c96:	f1b3 0220 	subs.w	r2, r3, #32
  404c9a:	da0c      	bge.n	404cb6 <__adddf3+0x16e>
  404c9c:	320c      	adds	r2, #12
  404c9e:	dd08      	ble.n	404cb2 <__adddf3+0x16a>
  404ca0:	f102 0c14 	add.w	ip, r2, #20
  404ca4:	f1c2 020c 	rsb	r2, r2, #12
  404ca8:	fa01 f00c 	lsl.w	r0, r1, ip
  404cac:	fa21 f102 	lsr.w	r1, r1, r2
  404cb0:	e00c      	b.n	404ccc <__adddf3+0x184>
  404cb2:	f102 0214 	add.w	r2, r2, #20
  404cb6:	bfd8      	it	le
  404cb8:	f1c2 0c20 	rsble	ip, r2, #32
  404cbc:	fa01 f102 	lsl.w	r1, r1, r2
  404cc0:	fa20 fc0c 	lsr.w	ip, r0, ip
  404cc4:	bfdc      	itt	le
  404cc6:	ea41 010c 	orrle.w	r1, r1, ip
  404cca:	4090      	lslle	r0, r2
  404ccc:	1ae4      	subs	r4, r4, r3
  404cce:	bfa2      	ittt	ge
  404cd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404cd4:	4329      	orrge	r1, r5
  404cd6:	bd30      	popge	{r4, r5, pc}
  404cd8:	ea6f 0404 	mvn.w	r4, r4
  404cdc:	3c1f      	subs	r4, #31
  404cde:	da1c      	bge.n	404d1a <__adddf3+0x1d2>
  404ce0:	340c      	adds	r4, #12
  404ce2:	dc0e      	bgt.n	404d02 <__adddf3+0x1ba>
  404ce4:	f104 0414 	add.w	r4, r4, #20
  404ce8:	f1c4 0220 	rsb	r2, r4, #32
  404cec:	fa20 f004 	lsr.w	r0, r0, r4
  404cf0:	fa01 f302 	lsl.w	r3, r1, r2
  404cf4:	ea40 0003 	orr.w	r0, r0, r3
  404cf8:	fa21 f304 	lsr.w	r3, r1, r4
  404cfc:	ea45 0103 	orr.w	r1, r5, r3
  404d00:	bd30      	pop	{r4, r5, pc}
  404d02:	f1c4 040c 	rsb	r4, r4, #12
  404d06:	f1c4 0220 	rsb	r2, r4, #32
  404d0a:	fa20 f002 	lsr.w	r0, r0, r2
  404d0e:	fa01 f304 	lsl.w	r3, r1, r4
  404d12:	ea40 0003 	orr.w	r0, r0, r3
  404d16:	4629      	mov	r1, r5
  404d18:	bd30      	pop	{r4, r5, pc}
  404d1a:	fa21 f004 	lsr.w	r0, r1, r4
  404d1e:	4629      	mov	r1, r5
  404d20:	bd30      	pop	{r4, r5, pc}
  404d22:	f094 0f00 	teq	r4, #0
  404d26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404d2a:	bf06      	itte	eq
  404d2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404d30:	3401      	addeq	r4, #1
  404d32:	3d01      	subne	r5, #1
  404d34:	e74e      	b.n	404bd4 <__adddf3+0x8c>
  404d36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404d3a:	bf18      	it	ne
  404d3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404d40:	d029      	beq.n	404d96 <__adddf3+0x24e>
  404d42:	ea94 0f05 	teq	r4, r5
  404d46:	bf08      	it	eq
  404d48:	ea90 0f02 	teqeq	r0, r2
  404d4c:	d005      	beq.n	404d5a <__adddf3+0x212>
  404d4e:	ea54 0c00 	orrs.w	ip, r4, r0
  404d52:	bf04      	itt	eq
  404d54:	4619      	moveq	r1, r3
  404d56:	4610      	moveq	r0, r2
  404d58:	bd30      	pop	{r4, r5, pc}
  404d5a:	ea91 0f03 	teq	r1, r3
  404d5e:	bf1e      	ittt	ne
  404d60:	2100      	movne	r1, #0
  404d62:	2000      	movne	r0, #0
  404d64:	bd30      	popne	{r4, r5, pc}
  404d66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404d6a:	d105      	bne.n	404d78 <__adddf3+0x230>
  404d6c:	0040      	lsls	r0, r0, #1
  404d6e:	4149      	adcs	r1, r1
  404d70:	bf28      	it	cs
  404d72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  404d76:	bd30      	pop	{r4, r5, pc}
  404d78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404d7c:	bf3c      	itt	cc
  404d7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404d82:	bd30      	popcc	{r4, r5, pc}
  404d84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404d88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404d90:	f04f 0000 	mov.w	r0, #0
  404d94:	bd30      	pop	{r4, r5, pc}
  404d96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404d9a:	bf1a      	itte	ne
  404d9c:	4619      	movne	r1, r3
  404d9e:	4610      	movne	r0, r2
  404da0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404da4:	bf1c      	itt	ne
  404da6:	460b      	movne	r3, r1
  404da8:	4602      	movne	r2, r0
  404daa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404dae:	bf06      	itte	eq
  404db0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404db4:	ea91 0f03 	teqeq	r1, r3
  404db8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404dbc:	bd30      	pop	{r4, r5, pc}
  404dbe:	bf00      	nop

00404dc0 <__aeabi_ui2d>:
  404dc0:	f090 0f00 	teq	r0, #0
  404dc4:	bf04      	itt	eq
  404dc6:	2100      	moveq	r1, #0
  404dc8:	4770      	bxeq	lr
  404dca:	b530      	push	{r4, r5, lr}
  404dcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404dd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404dd4:	f04f 0500 	mov.w	r5, #0
  404dd8:	f04f 0100 	mov.w	r1, #0
  404ddc:	e750      	b.n	404c80 <__adddf3+0x138>
  404dde:	bf00      	nop

00404de0 <__aeabi_i2d>:
  404de0:	f090 0f00 	teq	r0, #0
  404de4:	bf04      	itt	eq
  404de6:	2100      	moveq	r1, #0
  404de8:	4770      	bxeq	lr
  404dea:	b530      	push	{r4, r5, lr}
  404dec:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404df0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404df4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404df8:	bf48      	it	mi
  404dfa:	4240      	negmi	r0, r0
  404dfc:	f04f 0100 	mov.w	r1, #0
  404e00:	e73e      	b.n	404c80 <__adddf3+0x138>
  404e02:	bf00      	nop

00404e04 <__aeabi_f2d>:
  404e04:	0042      	lsls	r2, r0, #1
  404e06:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404e0a:	ea4f 0131 	mov.w	r1, r1, rrx
  404e0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404e12:	bf1f      	itttt	ne
  404e14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404e18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404e1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404e20:	4770      	bxne	lr
  404e22:	f092 0f00 	teq	r2, #0
  404e26:	bf14      	ite	ne
  404e28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404e2c:	4770      	bxeq	lr
  404e2e:	b530      	push	{r4, r5, lr}
  404e30:	f44f 7460 	mov.w	r4, #896	; 0x380
  404e34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404e38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404e3c:	e720      	b.n	404c80 <__adddf3+0x138>
  404e3e:	bf00      	nop

00404e40 <__aeabi_ul2d>:
  404e40:	ea50 0201 	orrs.w	r2, r0, r1
  404e44:	bf08      	it	eq
  404e46:	4770      	bxeq	lr
  404e48:	b530      	push	{r4, r5, lr}
  404e4a:	f04f 0500 	mov.w	r5, #0
  404e4e:	e00a      	b.n	404e66 <__aeabi_l2d+0x16>

00404e50 <__aeabi_l2d>:
  404e50:	ea50 0201 	orrs.w	r2, r0, r1
  404e54:	bf08      	it	eq
  404e56:	4770      	bxeq	lr
  404e58:	b530      	push	{r4, r5, lr}
  404e5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404e5e:	d502      	bpl.n	404e66 <__aeabi_l2d+0x16>
  404e60:	4240      	negs	r0, r0
  404e62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404e66:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404e6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404e6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404e72:	f43f aedc 	beq.w	404c2e <__adddf3+0xe6>
  404e76:	f04f 0203 	mov.w	r2, #3
  404e7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404e7e:	bf18      	it	ne
  404e80:	3203      	addne	r2, #3
  404e82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404e86:	bf18      	it	ne
  404e88:	3203      	addne	r2, #3
  404e8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404e8e:	f1c2 0320 	rsb	r3, r2, #32
  404e92:	fa00 fc03 	lsl.w	ip, r0, r3
  404e96:	fa20 f002 	lsr.w	r0, r0, r2
  404e9a:	fa01 fe03 	lsl.w	lr, r1, r3
  404e9e:	ea40 000e 	orr.w	r0, r0, lr
  404ea2:	fa21 f102 	lsr.w	r1, r1, r2
  404ea6:	4414      	add	r4, r2
  404ea8:	e6c1      	b.n	404c2e <__adddf3+0xe6>
  404eaa:	bf00      	nop

00404eac <__aeabi_dmul>:
  404eac:	b570      	push	{r4, r5, r6, lr}
  404eae:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404eb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404eb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404eba:	bf1d      	ittte	ne
  404ebc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404ec0:	ea94 0f0c 	teqne	r4, ip
  404ec4:	ea95 0f0c 	teqne	r5, ip
  404ec8:	f000 f8de 	bleq	405088 <__aeabi_dmul+0x1dc>
  404ecc:	442c      	add	r4, r5
  404ece:	ea81 0603 	eor.w	r6, r1, r3
  404ed2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404ed6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404eda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404ede:	bf18      	it	ne
  404ee0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404ee4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404eec:	d038      	beq.n	404f60 <__aeabi_dmul+0xb4>
  404eee:	fba0 ce02 	umull	ip, lr, r0, r2
  404ef2:	f04f 0500 	mov.w	r5, #0
  404ef6:	fbe1 e502 	umlal	lr, r5, r1, r2
  404efa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404efe:	fbe0 e503 	umlal	lr, r5, r0, r3
  404f02:	f04f 0600 	mov.w	r6, #0
  404f06:	fbe1 5603 	umlal	r5, r6, r1, r3
  404f0a:	f09c 0f00 	teq	ip, #0
  404f0e:	bf18      	it	ne
  404f10:	f04e 0e01 	orrne.w	lr, lr, #1
  404f14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404f18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404f1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404f20:	d204      	bcs.n	404f2c <__aeabi_dmul+0x80>
  404f22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  404f26:	416d      	adcs	r5, r5
  404f28:	eb46 0606 	adc.w	r6, r6, r6
  404f2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404f30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404f34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404f38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  404f3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  404f40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404f44:	bf88      	it	hi
  404f46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404f4a:	d81e      	bhi.n	404f8a <__aeabi_dmul+0xde>
  404f4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  404f50:	bf08      	it	eq
  404f52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  404f56:	f150 0000 	adcs.w	r0, r0, #0
  404f5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404f5e:	bd70      	pop	{r4, r5, r6, pc}
  404f60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404f64:	ea46 0101 	orr.w	r1, r6, r1
  404f68:	ea40 0002 	orr.w	r0, r0, r2
  404f6c:	ea81 0103 	eor.w	r1, r1, r3
  404f70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404f74:	bfc2      	ittt	gt
  404f76:	ebd4 050c 	rsbsgt	r5, r4, ip
  404f7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404f7e:	bd70      	popgt	{r4, r5, r6, pc}
  404f80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404f84:	f04f 0e00 	mov.w	lr, #0
  404f88:	3c01      	subs	r4, #1
  404f8a:	f300 80ab 	bgt.w	4050e4 <__aeabi_dmul+0x238>
  404f8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404f92:	bfde      	ittt	le
  404f94:	2000      	movle	r0, #0
  404f96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  404f9a:	bd70      	pople	{r4, r5, r6, pc}
  404f9c:	f1c4 0400 	rsb	r4, r4, #0
  404fa0:	3c20      	subs	r4, #32
  404fa2:	da35      	bge.n	405010 <__aeabi_dmul+0x164>
  404fa4:	340c      	adds	r4, #12
  404fa6:	dc1b      	bgt.n	404fe0 <__aeabi_dmul+0x134>
  404fa8:	f104 0414 	add.w	r4, r4, #20
  404fac:	f1c4 0520 	rsb	r5, r4, #32
  404fb0:	fa00 f305 	lsl.w	r3, r0, r5
  404fb4:	fa20 f004 	lsr.w	r0, r0, r4
  404fb8:	fa01 f205 	lsl.w	r2, r1, r5
  404fbc:	ea40 0002 	orr.w	r0, r0, r2
  404fc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404fc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404fc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404fcc:	fa21 f604 	lsr.w	r6, r1, r4
  404fd0:	eb42 0106 	adc.w	r1, r2, r6
  404fd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404fd8:	bf08      	it	eq
  404fda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404fde:	bd70      	pop	{r4, r5, r6, pc}
  404fe0:	f1c4 040c 	rsb	r4, r4, #12
  404fe4:	f1c4 0520 	rsb	r5, r4, #32
  404fe8:	fa00 f304 	lsl.w	r3, r0, r4
  404fec:	fa20 f005 	lsr.w	r0, r0, r5
  404ff0:	fa01 f204 	lsl.w	r2, r1, r4
  404ff4:	ea40 0002 	orr.w	r0, r0, r2
  404ff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404ffc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405000:	f141 0100 	adc.w	r1, r1, #0
  405004:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405008:	bf08      	it	eq
  40500a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40500e:	bd70      	pop	{r4, r5, r6, pc}
  405010:	f1c4 0520 	rsb	r5, r4, #32
  405014:	fa00 f205 	lsl.w	r2, r0, r5
  405018:	ea4e 0e02 	orr.w	lr, lr, r2
  40501c:	fa20 f304 	lsr.w	r3, r0, r4
  405020:	fa01 f205 	lsl.w	r2, r1, r5
  405024:	ea43 0302 	orr.w	r3, r3, r2
  405028:	fa21 f004 	lsr.w	r0, r1, r4
  40502c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405030:	fa21 f204 	lsr.w	r2, r1, r4
  405034:	ea20 0002 	bic.w	r0, r0, r2
  405038:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40503c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405040:	bf08      	it	eq
  405042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405046:	bd70      	pop	{r4, r5, r6, pc}
  405048:	f094 0f00 	teq	r4, #0
  40504c:	d10f      	bne.n	40506e <__aeabi_dmul+0x1c2>
  40504e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405052:	0040      	lsls	r0, r0, #1
  405054:	eb41 0101 	adc.w	r1, r1, r1
  405058:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40505c:	bf08      	it	eq
  40505e:	3c01      	subeq	r4, #1
  405060:	d0f7      	beq.n	405052 <__aeabi_dmul+0x1a6>
  405062:	ea41 0106 	orr.w	r1, r1, r6
  405066:	f095 0f00 	teq	r5, #0
  40506a:	bf18      	it	ne
  40506c:	4770      	bxne	lr
  40506e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405072:	0052      	lsls	r2, r2, #1
  405074:	eb43 0303 	adc.w	r3, r3, r3
  405078:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40507c:	bf08      	it	eq
  40507e:	3d01      	subeq	r5, #1
  405080:	d0f7      	beq.n	405072 <__aeabi_dmul+0x1c6>
  405082:	ea43 0306 	orr.w	r3, r3, r6
  405086:	4770      	bx	lr
  405088:	ea94 0f0c 	teq	r4, ip
  40508c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405090:	bf18      	it	ne
  405092:	ea95 0f0c 	teqne	r5, ip
  405096:	d00c      	beq.n	4050b2 <__aeabi_dmul+0x206>
  405098:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40509c:	bf18      	it	ne
  40509e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4050a2:	d1d1      	bne.n	405048 <__aeabi_dmul+0x19c>
  4050a4:	ea81 0103 	eor.w	r1, r1, r3
  4050a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4050ac:	f04f 0000 	mov.w	r0, #0
  4050b0:	bd70      	pop	{r4, r5, r6, pc}
  4050b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4050b6:	bf06      	itte	eq
  4050b8:	4610      	moveq	r0, r2
  4050ba:	4619      	moveq	r1, r3
  4050bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4050c0:	d019      	beq.n	4050f6 <__aeabi_dmul+0x24a>
  4050c2:	ea94 0f0c 	teq	r4, ip
  4050c6:	d102      	bne.n	4050ce <__aeabi_dmul+0x222>
  4050c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4050cc:	d113      	bne.n	4050f6 <__aeabi_dmul+0x24a>
  4050ce:	ea95 0f0c 	teq	r5, ip
  4050d2:	d105      	bne.n	4050e0 <__aeabi_dmul+0x234>
  4050d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4050d8:	bf1c      	itt	ne
  4050da:	4610      	movne	r0, r2
  4050dc:	4619      	movne	r1, r3
  4050de:	d10a      	bne.n	4050f6 <__aeabi_dmul+0x24a>
  4050e0:	ea81 0103 	eor.w	r1, r1, r3
  4050e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4050e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4050ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4050f0:	f04f 0000 	mov.w	r0, #0
  4050f4:	bd70      	pop	{r4, r5, r6, pc}
  4050f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4050fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4050fe:	bd70      	pop	{r4, r5, r6, pc}

00405100 <__aeabi_ddiv>:
  405100:	b570      	push	{r4, r5, r6, lr}
  405102:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405106:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40510a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40510e:	bf1d      	ittte	ne
  405110:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405114:	ea94 0f0c 	teqne	r4, ip
  405118:	ea95 0f0c 	teqne	r5, ip
  40511c:	f000 f8a7 	bleq	40526e <__aeabi_ddiv+0x16e>
  405120:	eba4 0405 	sub.w	r4, r4, r5
  405124:	ea81 0e03 	eor.w	lr, r1, r3
  405128:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40512c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405130:	f000 8088 	beq.w	405244 <__aeabi_ddiv+0x144>
  405134:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405138:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40513c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405140:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405144:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405148:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40514c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405150:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405154:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405158:	429d      	cmp	r5, r3
  40515a:	bf08      	it	eq
  40515c:	4296      	cmpeq	r6, r2
  40515e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405162:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405166:	d202      	bcs.n	40516e <__aeabi_ddiv+0x6e>
  405168:	085b      	lsrs	r3, r3, #1
  40516a:	ea4f 0232 	mov.w	r2, r2, rrx
  40516e:	1ab6      	subs	r6, r6, r2
  405170:	eb65 0503 	sbc.w	r5, r5, r3
  405174:	085b      	lsrs	r3, r3, #1
  405176:	ea4f 0232 	mov.w	r2, r2, rrx
  40517a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40517e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405182:	ebb6 0e02 	subs.w	lr, r6, r2
  405186:	eb75 0e03 	sbcs.w	lr, r5, r3
  40518a:	bf22      	ittt	cs
  40518c:	1ab6      	subcs	r6, r6, r2
  40518e:	4675      	movcs	r5, lr
  405190:	ea40 000c 	orrcs.w	r0, r0, ip
  405194:	085b      	lsrs	r3, r3, #1
  405196:	ea4f 0232 	mov.w	r2, r2, rrx
  40519a:	ebb6 0e02 	subs.w	lr, r6, r2
  40519e:	eb75 0e03 	sbcs.w	lr, r5, r3
  4051a2:	bf22      	ittt	cs
  4051a4:	1ab6      	subcs	r6, r6, r2
  4051a6:	4675      	movcs	r5, lr
  4051a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4051ac:	085b      	lsrs	r3, r3, #1
  4051ae:	ea4f 0232 	mov.w	r2, r2, rrx
  4051b2:	ebb6 0e02 	subs.w	lr, r6, r2
  4051b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4051ba:	bf22      	ittt	cs
  4051bc:	1ab6      	subcs	r6, r6, r2
  4051be:	4675      	movcs	r5, lr
  4051c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4051c4:	085b      	lsrs	r3, r3, #1
  4051c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4051ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4051ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4051d2:	bf22      	ittt	cs
  4051d4:	1ab6      	subcs	r6, r6, r2
  4051d6:	4675      	movcs	r5, lr
  4051d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4051dc:	ea55 0e06 	orrs.w	lr, r5, r6
  4051e0:	d018      	beq.n	405214 <__aeabi_ddiv+0x114>
  4051e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4051e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4051ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4051ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4051f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4051f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4051fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4051fe:	d1c0      	bne.n	405182 <__aeabi_ddiv+0x82>
  405200:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405204:	d10b      	bne.n	40521e <__aeabi_ddiv+0x11e>
  405206:	ea41 0100 	orr.w	r1, r1, r0
  40520a:	f04f 0000 	mov.w	r0, #0
  40520e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405212:	e7b6      	b.n	405182 <__aeabi_ddiv+0x82>
  405214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405218:	bf04      	itt	eq
  40521a:	4301      	orreq	r1, r0
  40521c:	2000      	moveq	r0, #0
  40521e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405222:	bf88      	it	hi
  405224:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405228:	f63f aeaf 	bhi.w	404f8a <__aeabi_dmul+0xde>
  40522c:	ebb5 0c03 	subs.w	ip, r5, r3
  405230:	bf04      	itt	eq
  405232:	ebb6 0c02 	subseq.w	ip, r6, r2
  405236:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40523a:	f150 0000 	adcs.w	r0, r0, #0
  40523e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405242:	bd70      	pop	{r4, r5, r6, pc}
  405244:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405248:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40524c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405250:	bfc2      	ittt	gt
  405252:	ebd4 050c 	rsbsgt	r5, r4, ip
  405256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40525a:	bd70      	popgt	{r4, r5, r6, pc}
  40525c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405260:	f04f 0e00 	mov.w	lr, #0
  405264:	3c01      	subs	r4, #1
  405266:	e690      	b.n	404f8a <__aeabi_dmul+0xde>
  405268:	ea45 0e06 	orr.w	lr, r5, r6
  40526c:	e68d      	b.n	404f8a <__aeabi_dmul+0xde>
  40526e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405272:	ea94 0f0c 	teq	r4, ip
  405276:	bf08      	it	eq
  405278:	ea95 0f0c 	teqeq	r5, ip
  40527c:	f43f af3b 	beq.w	4050f6 <__aeabi_dmul+0x24a>
  405280:	ea94 0f0c 	teq	r4, ip
  405284:	d10a      	bne.n	40529c <__aeabi_ddiv+0x19c>
  405286:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40528a:	f47f af34 	bne.w	4050f6 <__aeabi_dmul+0x24a>
  40528e:	ea95 0f0c 	teq	r5, ip
  405292:	f47f af25 	bne.w	4050e0 <__aeabi_dmul+0x234>
  405296:	4610      	mov	r0, r2
  405298:	4619      	mov	r1, r3
  40529a:	e72c      	b.n	4050f6 <__aeabi_dmul+0x24a>
  40529c:	ea95 0f0c 	teq	r5, ip
  4052a0:	d106      	bne.n	4052b0 <__aeabi_ddiv+0x1b0>
  4052a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4052a6:	f43f aefd 	beq.w	4050a4 <__aeabi_dmul+0x1f8>
  4052aa:	4610      	mov	r0, r2
  4052ac:	4619      	mov	r1, r3
  4052ae:	e722      	b.n	4050f6 <__aeabi_dmul+0x24a>
  4052b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4052b4:	bf18      	it	ne
  4052b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4052ba:	f47f aec5 	bne.w	405048 <__aeabi_dmul+0x19c>
  4052be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4052c2:	f47f af0d 	bne.w	4050e0 <__aeabi_dmul+0x234>
  4052c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4052ca:	f47f aeeb 	bne.w	4050a4 <__aeabi_dmul+0x1f8>
  4052ce:	e712      	b.n	4050f6 <__aeabi_dmul+0x24a>

004052d0 <__gedf2>:
  4052d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4052d4:	e006      	b.n	4052e4 <__cmpdf2+0x4>
  4052d6:	bf00      	nop

004052d8 <__ledf2>:
  4052d8:	f04f 0c01 	mov.w	ip, #1
  4052dc:	e002      	b.n	4052e4 <__cmpdf2+0x4>
  4052de:	bf00      	nop

004052e0 <__cmpdf2>:
  4052e0:	f04f 0c01 	mov.w	ip, #1
  4052e4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4052e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4052ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4052f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4052f4:	bf18      	it	ne
  4052f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4052fa:	d01b      	beq.n	405334 <__cmpdf2+0x54>
  4052fc:	b001      	add	sp, #4
  4052fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405302:	bf0c      	ite	eq
  405304:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405308:	ea91 0f03 	teqne	r1, r3
  40530c:	bf02      	ittt	eq
  40530e:	ea90 0f02 	teqeq	r0, r2
  405312:	2000      	moveq	r0, #0
  405314:	4770      	bxeq	lr
  405316:	f110 0f00 	cmn.w	r0, #0
  40531a:	ea91 0f03 	teq	r1, r3
  40531e:	bf58      	it	pl
  405320:	4299      	cmppl	r1, r3
  405322:	bf08      	it	eq
  405324:	4290      	cmpeq	r0, r2
  405326:	bf2c      	ite	cs
  405328:	17d8      	asrcs	r0, r3, #31
  40532a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40532e:	f040 0001 	orr.w	r0, r0, #1
  405332:	4770      	bx	lr
  405334:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405338:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40533c:	d102      	bne.n	405344 <__cmpdf2+0x64>
  40533e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405342:	d107      	bne.n	405354 <__cmpdf2+0x74>
  405344:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40534c:	d1d6      	bne.n	4052fc <__cmpdf2+0x1c>
  40534e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405352:	d0d3      	beq.n	4052fc <__cmpdf2+0x1c>
  405354:	f85d 0b04 	ldr.w	r0, [sp], #4
  405358:	4770      	bx	lr
  40535a:	bf00      	nop

0040535c <__aeabi_cdrcmple>:
  40535c:	4684      	mov	ip, r0
  40535e:	4610      	mov	r0, r2
  405360:	4662      	mov	r2, ip
  405362:	468c      	mov	ip, r1
  405364:	4619      	mov	r1, r3
  405366:	4663      	mov	r3, ip
  405368:	e000      	b.n	40536c <__aeabi_cdcmpeq>
  40536a:	bf00      	nop

0040536c <__aeabi_cdcmpeq>:
  40536c:	b501      	push	{r0, lr}
  40536e:	f7ff ffb7 	bl	4052e0 <__cmpdf2>
  405372:	2800      	cmp	r0, #0
  405374:	bf48      	it	mi
  405376:	f110 0f00 	cmnmi.w	r0, #0
  40537a:	bd01      	pop	{r0, pc}

0040537c <__aeabi_dcmpeq>:
  40537c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405380:	f7ff fff4 	bl	40536c <__aeabi_cdcmpeq>
  405384:	bf0c      	ite	eq
  405386:	2001      	moveq	r0, #1
  405388:	2000      	movne	r0, #0
  40538a:	f85d fb08 	ldr.w	pc, [sp], #8
  40538e:	bf00      	nop

00405390 <__aeabi_dcmplt>:
  405390:	f84d ed08 	str.w	lr, [sp, #-8]!
  405394:	f7ff ffea 	bl	40536c <__aeabi_cdcmpeq>
  405398:	bf34      	ite	cc
  40539a:	2001      	movcc	r0, #1
  40539c:	2000      	movcs	r0, #0
  40539e:	f85d fb08 	ldr.w	pc, [sp], #8
  4053a2:	bf00      	nop

004053a4 <__aeabi_dcmple>:
  4053a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4053a8:	f7ff ffe0 	bl	40536c <__aeabi_cdcmpeq>
  4053ac:	bf94      	ite	ls
  4053ae:	2001      	movls	r0, #1
  4053b0:	2000      	movhi	r0, #0
  4053b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4053b6:	bf00      	nop

004053b8 <__aeabi_dcmpge>:
  4053b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4053bc:	f7ff ffce 	bl	40535c <__aeabi_cdrcmple>
  4053c0:	bf94      	ite	ls
  4053c2:	2001      	movls	r0, #1
  4053c4:	2000      	movhi	r0, #0
  4053c6:	f85d fb08 	ldr.w	pc, [sp], #8
  4053ca:	bf00      	nop

004053cc <__aeabi_dcmpgt>:
  4053cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4053d0:	f7ff ffc4 	bl	40535c <__aeabi_cdrcmple>
  4053d4:	bf34      	ite	cc
  4053d6:	2001      	movcc	r0, #1
  4053d8:	2000      	movcs	r0, #0
  4053da:	f85d fb08 	ldr.w	pc, [sp], #8
  4053de:	bf00      	nop

004053e0 <__aeabi_dcmpun>:
  4053e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4053e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4053e8:	d102      	bne.n	4053f0 <__aeabi_dcmpun+0x10>
  4053ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4053ee:	d10a      	bne.n	405406 <__aeabi_dcmpun+0x26>
  4053f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4053f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4053f8:	d102      	bne.n	405400 <__aeabi_dcmpun+0x20>
  4053fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4053fe:	d102      	bne.n	405406 <__aeabi_dcmpun+0x26>
  405400:	f04f 0000 	mov.w	r0, #0
  405404:	4770      	bx	lr
  405406:	f04f 0001 	mov.w	r0, #1
  40540a:	4770      	bx	lr

0040540c <__aeabi_d2iz>:
  40540c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405410:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405414:	d215      	bcs.n	405442 <__aeabi_d2iz+0x36>
  405416:	d511      	bpl.n	40543c <__aeabi_d2iz+0x30>
  405418:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40541c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405420:	d912      	bls.n	405448 <__aeabi_d2iz+0x3c>
  405422:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40542a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40542e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405432:	fa23 f002 	lsr.w	r0, r3, r2
  405436:	bf18      	it	ne
  405438:	4240      	negne	r0, r0
  40543a:	4770      	bx	lr
  40543c:	f04f 0000 	mov.w	r0, #0
  405440:	4770      	bx	lr
  405442:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405446:	d105      	bne.n	405454 <__aeabi_d2iz+0x48>
  405448:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40544c:	bf08      	it	eq
  40544e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405452:	4770      	bx	lr
  405454:	f04f 0000 	mov.w	r0, #0
  405458:	4770      	bx	lr
  40545a:	bf00      	nop

0040545c <__aeabi_d2f>:
  40545c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405460:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405464:	bf24      	itt	cs
  405466:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40546a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40546e:	d90d      	bls.n	40548c <__aeabi_d2f+0x30>
  405470:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405474:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405478:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40547c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405480:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405484:	bf08      	it	eq
  405486:	f020 0001 	biceq.w	r0, r0, #1
  40548a:	4770      	bx	lr
  40548c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405490:	d121      	bne.n	4054d6 <__aeabi_d2f+0x7a>
  405492:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405496:	bfbc      	itt	lt
  405498:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40549c:	4770      	bxlt	lr
  40549e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4054a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4054a6:	f1c2 0218 	rsb	r2, r2, #24
  4054aa:	f1c2 0c20 	rsb	ip, r2, #32
  4054ae:	fa10 f30c 	lsls.w	r3, r0, ip
  4054b2:	fa20 f002 	lsr.w	r0, r0, r2
  4054b6:	bf18      	it	ne
  4054b8:	f040 0001 	orrne.w	r0, r0, #1
  4054bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4054c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4054c4:	fa03 fc0c 	lsl.w	ip, r3, ip
  4054c8:	ea40 000c 	orr.w	r0, r0, ip
  4054cc:	fa23 f302 	lsr.w	r3, r3, r2
  4054d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4054d4:	e7cc      	b.n	405470 <__aeabi_d2f+0x14>
  4054d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4054da:	d107      	bne.n	4054ec <__aeabi_d2f+0x90>
  4054dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4054e0:	bf1e      	ittt	ne
  4054e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4054e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4054ea:	4770      	bxne	lr
  4054ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4054f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4054f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4054f8:	4770      	bx	lr
  4054fa:	bf00      	nop

004054fc <__aeabi_frsub>:
  4054fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  405500:	e002      	b.n	405508 <__addsf3>
  405502:	bf00      	nop

00405504 <__aeabi_fsub>:
  405504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405508 <__addsf3>:
  405508:	0042      	lsls	r2, r0, #1
  40550a:	bf1f      	itttt	ne
  40550c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  405510:	ea92 0f03 	teqne	r2, r3
  405514:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405518:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40551c:	d06a      	beq.n	4055f4 <__addsf3+0xec>
  40551e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  405522:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405526:	bfc1      	itttt	gt
  405528:	18d2      	addgt	r2, r2, r3
  40552a:	4041      	eorgt	r1, r0
  40552c:	4048      	eorgt	r0, r1
  40552e:	4041      	eorgt	r1, r0
  405530:	bfb8      	it	lt
  405532:	425b      	neglt	r3, r3
  405534:	2b19      	cmp	r3, #25
  405536:	bf88      	it	hi
  405538:	4770      	bxhi	lr
  40553a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40553e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405542:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405546:	bf18      	it	ne
  405548:	4240      	negne	r0, r0
  40554a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40554e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405552:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405556:	bf18      	it	ne
  405558:	4249      	negne	r1, r1
  40555a:	ea92 0f03 	teq	r2, r3
  40555e:	d03f      	beq.n	4055e0 <__addsf3+0xd8>
  405560:	f1a2 0201 	sub.w	r2, r2, #1
  405564:	fa41 fc03 	asr.w	ip, r1, r3
  405568:	eb10 000c 	adds.w	r0, r0, ip
  40556c:	f1c3 0320 	rsb	r3, r3, #32
  405570:	fa01 f103 	lsl.w	r1, r1, r3
  405574:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405578:	d502      	bpl.n	405580 <__addsf3+0x78>
  40557a:	4249      	negs	r1, r1
  40557c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405580:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405584:	d313      	bcc.n	4055ae <__addsf3+0xa6>
  405586:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40558a:	d306      	bcc.n	40559a <__addsf3+0x92>
  40558c:	0840      	lsrs	r0, r0, #1
  40558e:	ea4f 0131 	mov.w	r1, r1, rrx
  405592:	f102 0201 	add.w	r2, r2, #1
  405596:	2afe      	cmp	r2, #254	; 0xfe
  405598:	d251      	bcs.n	40563e <__addsf3+0x136>
  40559a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40559e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4055a2:	bf08      	it	eq
  4055a4:	f020 0001 	biceq.w	r0, r0, #1
  4055a8:	ea40 0003 	orr.w	r0, r0, r3
  4055ac:	4770      	bx	lr
  4055ae:	0049      	lsls	r1, r1, #1
  4055b0:	eb40 0000 	adc.w	r0, r0, r0
  4055b4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4055b8:	f1a2 0201 	sub.w	r2, r2, #1
  4055bc:	d1ed      	bne.n	40559a <__addsf3+0x92>
  4055be:	fab0 fc80 	clz	ip, r0
  4055c2:	f1ac 0c08 	sub.w	ip, ip, #8
  4055c6:	ebb2 020c 	subs.w	r2, r2, ip
  4055ca:	fa00 f00c 	lsl.w	r0, r0, ip
  4055ce:	bfaa      	itet	ge
  4055d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4055d4:	4252      	neglt	r2, r2
  4055d6:	4318      	orrge	r0, r3
  4055d8:	bfbc      	itt	lt
  4055da:	40d0      	lsrlt	r0, r2
  4055dc:	4318      	orrlt	r0, r3
  4055de:	4770      	bx	lr
  4055e0:	f092 0f00 	teq	r2, #0
  4055e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4055e8:	bf06      	itte	eq
  4055ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4055ee:	3201      	addeq	r2, #1
  4055f0:	3b01      	subne	r3, #1
  4055f2:	e7b5      	b.n	405560 <__addsf3+0x58>
  4055f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4055f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4055fc:	bf18      	it	ne
  4055fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405602:	d021      	beq.n	405648 <__addsf3+0x140>
  405604:	ea92 0f03 	teq	r2, r3
  405608:	d004      	beq.n	405614 <__addsf3+0x10c>
  40560a:	f092 0f00 	teq	r2, #0
  40560e:	bf08      	it	eq
  405610:	4608      	moveq	r0, r1
  405612:	4770      	bx	lr
  405614:	ea90 0f01 	teq	r0, r1
  405618:	bf1c      	itt	ne
  40561a:	2000      	movne	r0, #0
  40561c:	4770      	bxne	lr
  40561e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  405622:	d104      	bne.n	40562e <__addsf3+0x126>
  405624:	0040      	lsls	r0, r0, #1
  405626:	bf28      	it	cs
  405628:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40562c:	4770      	bx	lr
  40562e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405632:	bf3c      	itt	cc
  405634:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  405638:	4770      	bxcc	lr
  40563a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40563e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405642:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405646:	4770      	bx	lr
  405648:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40564c:	bf16      	itet	ne
  40564e:	4608      	movne	r0, r1
  405650:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405654:	4601      	movne	r1, r0
  405656:	0242      	lsls	r2, r0, #9
  405658:	bf06      	itte	eq
  40565a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40565e:	ea90 0f01 	teqeq	r0, r1
  405662:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405666:	4770      	bx	lr

00405668 <__aeabi_ui2f>:
  405668:	f04f 0300 	mov.w	r3, #0
  40566c:	e004      	b.n	405678 <__aeabi_i2f+0x8>
  40566e:	bf00      	nop

00405670 <__aeabi_i2f>:
  405670:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405674:	bf48      	it	mi
  405676:	4240      	negmi	r0, r0
  405678:	ea5f 0c00 	movs.w	ip, r0
  40567c:	bf08      	it	eq
  40567e:	4770      	bxeq	lr
  405680:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405684:	4601      	mov	r1, r0
  405686:	f04f 0000 	mov.w	r0, #0
  40568a:	e01c      	b.n	4056c6 <__aeabi_l2f+0x2a>

0040568c <__aeabi_ul2f>:
  40568c:	ea50 0201 	orrs.w	r2, r0, r1
  405690:	bf08      	it	eq
  405692:	4770      	bxeq	lr
  405694:	f04f 0300 	mov.w	r3, #0
  405698:	e00a      	b.n	4056b0 <__aeabi_l2f+0x14>
  40569a:	bf00      	nop

0040569c <__aeabi_l2f>:
  40569c:	ea50 0201 	orrs.w	r2, r0, r1
  4056a0:	bf08      	it	eq
  4056a2:	4770      	bxeq	lr
  4056a4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4056a8:	d502      	bpl.n	4056b0 <__aeabi_l2f+0x14>
  4056aa:	4240      	negs	r0, r0
  4056ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4056b0:	ea5f 0c01 	movs.w	ip, r1
  4056b4:	bf02      	ittt	eq
  4056b6:	4684      	moveq	ip, r0
  4056b8:	4601      	moveq	r1, r0
  4056ba:	2000      	moveq	r0, #0
  4056bc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4056c0:	bf08      	it	eq
  4056c2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  4056c6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4056ca:	fabc f28c 	clz	r2, ip
  4056ce:	3a08      	subs	r2, #8
  4056d0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4056d4:	db10      	blt.n	4056f8 <__aeabi_l2f+0x5c>
  4056d6:	fa01 fc02 	lsl.w	ip, r1, r2
  4056da:	4463      	add	r3, ip
  4056dc:	fa00 fc02 	lsl.w	ip, r0, r2
  4056e0:	f1c2 0220 	rsb	r2, r2, #32
  4056e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4056e8:	fa20 f202 	lsr.w	r2, r0, r2
  4056ec:	eb43 0002 	adc.w	r0, r3, r2
  4056f0:	bf08      	it	eq
  4056f2:	f020 0001 	biceq.w	r0, r0, #1
  4056f6:	4770      	bx	lr
  4056f8:	f102 0220 	add.w	r2, r2, #32
  4056fc:	fa01 fc02 	lsl.w	ip, r1, r2
  405700:	f1c2 0220 	rsb	r2, r2, #32
  405704:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  405708:	fa21 f202 	lsr.w	r2, r1, r2
  40570c:	eb43 0002 	adc.w	r0, r3, r2
  405710:	bf08      	it	eq
  405712:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405716:	4770      	bx	lr

00405718 <__aeabi_fmul>:
  405718:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40571c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405720:	bf1e      	ittt	ne
  405722:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405726:	ea92 0f0c 	teqne	r2, ip
  40572a:	ea93 0f0c 	teqne	r3, ip
  40572e:	d06f      	beq.n	405810 <__aeabi_fmul+0xf8>
  405730:	441a      	add	r2, r3
  405732:	ea80 0c01 	eor.w	ip, r0, r1
  405736:	0240      	lsls	r0, r0, #9
  405738:	bf18      	it	ne
  40573a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40573e:	d01e      	beq.n	40577e <__aeabi_fmul+0x66>
  405740:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405744:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  405748:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40574c:	fba0 3101 	umull	r3, r1, r0, r1
  405750:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405754:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405758:	bf3e      	ittt	cc
  40575a:	0049      	lslcc	r1, r1, #1
  40575c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405760:	005b      	lslcc	r3, r3, #1
  405762:	ea40 0001 	orr.w	r0, r0, r1
  405766:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40576a:	2afd      	cmp	r2, #253	; 0xfd
  40576c:	d81d      	bhi.n	4057aa <__aeabi_fmul+0x92>
  40576e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405772:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405776:	bf08      	it	eq
  405778:	f020 0001 	biceq.w	r0, r0, #1
  40577c:	4770      	bx	lr
  40577e:	f090 0f00 	teq	r0, #0
  405782:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405786:	bf08      	it	eq
  405788:	0249      	lsleq	r1, r1, #9
  40578a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40578e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405792:	3a7f      	subs	r2, #127	; 0x7f
  405794:	bfc2      	ittt	gt
  405796:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40579a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40579e:	4770      	bxgt	lr
  4057a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4057a4:	f04f 0300 	mov.w	r3, #0
  4057a8:	3a01      	subs	r2, #1
  4057aa:	dc5d      	bgt.n	405868 <__aeabi_fmul+0x150>
  4057ac:	f112 0f19 	cmn.w	r2, #25
  4057b0:	bfdc      	itt	le
  4057b2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4057b6:	4770      	bxle	lr
  4057b8:	f1c2 0200 	rsb	r2, r2, #0
  4057bc:	0041      	lsls	r1, r0, #1
  4057be:	fa21 f102 	lsr.w	r1, r1, r2
  4057c2:	f1c2 0220 	rsb	r2, r2, #32
  4057c6:	fa00 fc02 	lsl.w	ip, r0, r2
  4057ca:	ea5f 0031 	movs.w	r0, r1, rrx
  4057ce:	f140 0000 	adc.w	r0, r0, #0
  4057d2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4057d6:	bf08      	it	eq
  4057d8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4057dc:	4770      	bx	lr
  4057de:	f092 0f00 	teq	r2, #0
  4057e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4057e6:	bf02      	ittt	eq
  4057e8:	0040      	lsleq	r0, r0, #1
  4057ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4057ee:	3a01      	subeq	r2, #1
  4057f0:	d0f9      	beq.n	4057e6 <__aeabi_fmul+0xce>
  4057f2:	ea40 000c 	orr.w	r0, r0, ip
  4057f6:	f093 0f00 	teq	r3, #0
  4057fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4057fe:	bf02      	ittt	eq
  405800:	0049      	lsleq	r1, r1, #1
  405802:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405806:	3b01      	subeq	r3, #1
  405808:	d0f9      	beq.n	4057fe <__aeabi_fmul+0xe6>
  40580a:	ea41 010c 	orr.w	r1, r1, ip
  40580e:	e78f      	b.n	405730 <__aeabi_fmul+0x18>
  405810:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405814:	ea92 0f0c 	teq	r2, ip
  405818:	bf18      	it	ne
  40581a:	ea93 0f0c 	teqne	r3, ip
  40581e:	d00a      	beq.n	405836 <__aeabi_fmul+0x11e>
  405820:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405824:	bf18      	it	ne
  405826:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40582a:	d1d8      	bne.n	4057de <__aeabi_fmul+0xc6>
  40582c:	ea80 0001 	eor.w	r0, r0, r1
  405830:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405834:	4770      	bx	lr
  405836:	f090 0f00 	teq	r0, #0
  40583a:	bf17      	itett	ne
  40583c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405840:	4608      	moveq	r0, r1
  405842:	f091 0f00 	teqne	r1, #0
  405846:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40584a:	d014      	beq.n	405876 <__aeabi_fmul+0x15e>
  40584c:	ea92 0f0c 	teq	r2, ip
  405850:	d101      	bne.n	405856 <__aeabi_fmul+0x13e>
  405852:	0242      	lsls	r2, r0, #9
  405854:	d10f      	bne.n	405876 <__aeabi_fmul+0x15e>
  405856:	ea93 0f0c 	teq	r3, ip
  40585a:	d103      	bne.n	405864 <__aeabi_fmul+0x14c>
  40585c:	024b      	lsls	r3, r1, #9
  40585e:	bf18      	it	ne
  405860:	4608      	movne	r0, r1
  405862:	d108      	bne.n	405876 <__aeabi_fmul+0x15e>
  405864:	ea80 0001 	eor.w	r0, r0, r1
  405868:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40586c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405870:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405874:	4770      	bx	lr
  405876:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40587a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40587e:	4770      	bx	lr

00405880 <__aeabi_fdiv>:
  405880:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405884:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405888:	bf1e      	ittt	ne
  40588a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40588e:	ea92 0f0c 	teqne	r2, ip
  405892:	ea93 0f0c 	teqne	r3, ip
  405896:	d069      	beq.n	40596c <__aeabi_fdiv+0xec>
  405898:	eba2 0203 	sub.w	r2, r2, r3
  40589c:	ea80 0c01 	eor.w	ip, r0, r1
  4058a0:	0249      	lsls	r1, r1, #9
  4058a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4058a6:	d037      	beq.n	405918 <__aeabi_fdiv+0x98>
  4058a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4058ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4058b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4058b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4058b8:	428b      	cmp	r3, r1
  4058ba:	bf38      	it	cc
  4058bc:	005b      	lslcc	r3, r3, #1
  4058be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4058c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  4058c6:	428b      	cmp	r3, r1
  4058c8:	bf24      	itt	cs
  4058ca:	1a5b      	subcs	r3, r3, r1
  4058cc:	ea40 000c 	orrcs.w	r0, r0, ip
  4058d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4058d4:	bf24      	itt	cs
  4058d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4058da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4058de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4058e2:	bf24      	itt	cs
  4058e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4058e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4058ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4058f0:	bf24      	itt	cs
  4058f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4058f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4058fa:	011b      	lsls	r3, r3, #4
  4058fc:	bf18      	it	ne
  4058fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405902:	d1e0      	bne.n	4058c6 <__aeabi_fdiv+0x46>
  405904:	2afd      	cmp	r2, #253	; 0xfd
  405906:	f63f af50 	bhi.w	4057aa <__aeabi_fmul+0x92>
  40590a:	428b      	cmp	r3, r1
  40590c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405910:	bf08      	it	eq
  405912:	f020 0001 	biceq.w	r0, r0, #1
  405916:	4770      	bx	lr
  405918:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40591c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405920:	327f      	adds	r2, #127	; 0x7f
  405922:	bfc2      	ittt	gt
  405924:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405928:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40592c:	4770      	bxgt	lr
  40592e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405932:	f04f 0300 	mov.w	r3, #0
  405936:	3a01      	subs	r2, #1
  405938:	e737      	b.n	4057aa <__aeabi_fmul+0x92>
  40593a:	f092 0f00 	teq	r2, #0
  40593e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405942:	bf02      	ittt	eq
  405944:	0040      	lsleq	r0, r0, #1
  405946:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40594a:	3a01      	subeq	r2, #1
  40594c:	d0f9      	beq.n	405942 <__aeabi_fdiv+0xc2>
  40594e:	ea40 000c 	orr.w	r0, r0, ip
  405952:	f093 0f00 	teq	r3, #0
  405956:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40595a:	bf02      	ittt	eq
  40595c:	0049      	lsleq	r1, r1, #1
  40595e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405962:	3b01      	subeq	r3, #1
  405964:	d0f9      	beq.n	40595a <__aeabi_fdiv+0xda>
  405966:	ea41 010c 	orr.w	r1, r1, ip
  40596a:	e795      	b.n	405898 <__aeabi_fdiv+0x18>
  40596c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405970:	ea92 0f0c 	teq	r2, ip
  405974:	d108      	bne.n	405988 <__aeabi_fdiv+0x108>
  405976:	0242      	lsls	r2, r0, #9
  405978:	f47f af7d 	bne.w	405876 <__aeabi_fmul+0x15e>
  40597c:	ea93 0f0c 	teq	r3, ip
  405980:	f47f af70 	bne.w	405864 <__aeabi_fmul+0x14c>
  405984:	4608      	mov	r0, r1
  405986:	e776      	b.n	405876 <__aeabi_fmul+0x15e>
  405988:	ea93 0f0c 	teq	r3, ip
  40598c:	d104      	bne.n	405998 <__aeabi_fdiv+0x118>
  40598e:	024b      	lsls	r3, r1, #9
  405990:	f43f af4c 	beq.w	40582c <__aeabi_fmul+0x114>
  405994:	4608      	mov	r0, r1
  405996:	e76e      	b.n	405876 <__aeabi_fmul+0x15e>
  405998:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40599c:	bf18      	it	ne
  40599e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4059a2:	d1ca      	bne.n	40593a <__aeabi_fdiv+0xba>
  4059a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4059a8:	f47f af5c 	bne.w	405864 <__aeabi_fmul+0x14c>
  4059ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4059b0:	f47f af3c 	bne.w	40582c <__aeabi_fmul+0x114>
  4059b4:	e75f      	b.n	405876 <__aeabi_fmul+0x15e>
  4059b6:	bf00      	nop

004059b8 <__gesf2>:
  4059b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  4059bc:	e006      	b.n	4059cc <__cmpsf2+0x4>
  4059be:	bf00      	nop

004059c0 <__lesf2>:
  4059c0:	f04f 0c01 	mov.w	ip, #1
  4059c4:	e002      	b.n	4059cc <__cmpsf2+0x4>
  4059c6:	bf00      	nop

004059c8 <__cmpsf2>:
  4059c8:	f04f 0c01 	mov.w	ip, #1
  4059cc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4059d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4059d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4059d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4059dc:	bf18      	it	ne
  4059de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4059e2:	d011      	beq.n	405a08 <__cmpsf2+0x40>
  4059e4:	b001      	add	sp, #4
  4059e6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4059ea:	bf18      	it	ne
  4059ec:	ea90 0f01 	teqne	r0, r1
  4059f0:	bf58      	it	pl
  4059f2:	ebb2 0003 	subspl.w	r0, r2, r3
  4059f6:	bf88      	it	hi
  4059f8:	17c8      	asrhi	r0, r1, #31
  4059fa:	bf38      	it	cc
  4059fc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  405a00:	bf18      	it	ne
  405a02:	f040 0001 	orrne.w	r0, r0, #1
  405a06:	4770      	bx	lr
  405a08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405a0c:	d102      	bne.n	405a14 <__cmpsf2+0x4c>
  405a0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405a12:	d105      	bne.n	405a20 <__cmpsf2+0x58>
  405a14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405a18:	d1e4      	bne.n	4059e4 <__cmpsf2+0x1c>
  405a1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405a1e:	d0e1      	beq.n	4059e4 <__cmpsf2+0x1c>
  405a20:	f85d 0b04 	ldr.w	r0, [sp], #4
  405a24:	4770      	bx	lr
  405a26:	bf00      	nop

00405a28 <__aeabi_cfrcmple>:
  405a28:	4684      	mov	ip, r0
  405a2a:	4608      	mov	r0, r1
  405a2c:	4661      	mov	r1, ip
  405a2e:	e7ff      	b.n	405a30 <__aeabi_cfcmpeq>

00405a30 <__aeabi_cfcmpeq>:
  405a30:	b50f      	push	{r0, r1, r2, r3, lr}
  405a32:	f7ff ffc9 	bl	4059c8 <__cmpsf2>
  405a36:	2800      	cmp	r0, #0
  405a38:	bf48      	it	mi
  405a3a:	f110 0f00 	cmnmi.w	r0, #0
  405a3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00405a40 <__aeabi_fcmpeq>:
  405a40:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a44:	f7ff fff4 	bl	405a30 <__aeabi_cfcmpeq>
  405a48:	bf0c      	ite	eq
  405a4a:	2001      	moveq	r0, #1
  405a4c:	2000      	movne	r0, #0
  405a4e:	f85d fb08 	ldr.w	pc, [sp], #8
  405a52:	bf00      	nop

00405a54 <__aeabi_fcmplt>:
  405a54:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a58:	f7ff ffea 	bl	405a30 <__aeabi_cfcmpeq>
  405a5c:	bf34      	ite	cc
  405a5e:	2001      	movcc	r0, #1
  405a60:	2000      	movcs	r0, #0
  405a62:	f85d fb08 	ldr.w	pc, [sp], #8
  405a66:	bf00      	nop

00405a68 <__aeabi_fcmple>:
  405a68:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a6c:	f7ff ffe0 	bl	405a30 <__aeabi_cfcmpeq>
  405a70:	bf94      	ite	ls
  405a72:	2001      	movls	r0, #1
  405a74:	2000      	movhi	r0, #0
  405a76:	f85d fb08 	ldr.w	pc, [sp], #8
  405a7a:	bf00      	nop

00405a7c <__aeabi_fcmpge>:
  405a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a80:	f7ff ffd2 	bl	405a28 <__aeabi_cfrcmple>
  405a84:	bf94      	ite	ls
  405a86:	2001      	movls	r0, #1
  405a88:	2000      	movhi	r0, #0
  405a8a:	f85d fb08 	ldr.w	pc, [sp], #8
  405a8e:	bf00      	nop

00405a90 <__aeabi_fcmpgt>:
  405a90:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a94:	f7ff ffc8 	bl	405a28 <__aeabi_cfrcmple>
  405a98:	bf34      	ite	cc
  405a9a:	2001      	movcc	r0, #1
  405a9c:	2000      	movcs	r0, #0
  405a9e:	f85d fb08 	ldr.w	pc, [sp], #8
  405aa2:	bf00      	nop

00405aa4 <__aeabi_f2iz>:
  405aa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405aa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405aac:	d30f      	bcc.n	405ace <__aeabi_f2iz+0x2a>
  405aae:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405ab2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405ab6:	d90d      	bls.n	405ad4 <__aeabi_f2iz+0x30>
  405ab8:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405ac0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405ac4:	fa23 f002 	lsr.w	r0, r3, r2
  405ac8:	bf18      	it	ne
  405aca:	4240      	negne	r0, r0
  405acc:	4770      	bx	lr
  405ace:	f04f 0000 	mov.w	r0, #0
  405ad2:	4770      	bx	lr
  405ad4:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405ad8:	d101      	bne.n	405ade <__aeabi_f2iz+0x3a>
  405ada:	0242      	lsls	r2, r0, #9
  405adc:	d105      	bne.n	405aea <__aeabi_f2iz+0x46>
  405ade:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  405ae2:	bf08      	it	eq
  405ae4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405ae8:	4770      	bx	lr
  405aea:	f04f 0000 	mov.w	r0, #0
  405aee:	4770      	bx	lr

00405af0 <__aeabi_f2uiz>:
  405af0:	0042      	lsls	r2, r0, #1
  405af2:	d20e      	bcs.n	405b12 <__aeabi_f2uiz+0x22>
  405af4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405af8:	d30b      	bcc.n	405b12 <__aeabi_f2uiz+0x22>
  405afa:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405afe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405b02:	d409      	bmi.n	405b18 <__aeabi_f2uiz+0x28>
  405b04:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405b0c:	fa23 f002 	lsr.w	r0, r3, r2
  405b10:	4770      	bx	lr
  405b12:	f04f 0000 	mov.w	r0, #0
  405b16:	4770      	bx	lr
  405b18:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405b1c:	d101      	bne.n	405b22 <__aeabi_f2uiz+0x32>
  405b1e:	0242      	lsls	r2, r0, #9
  405b20:	d102      	bne.n	405b28 <__aeabi_f2uiz+0x38>
  405b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  405b26:	4770      	bx	lr
  405b28:	f04f 0000 	mov.w	r0, #0
  405b2c:	4770      	bx	lr
  405b2e:	bf00      	nop
  405b30:	0a0d0a0d 	.word	0x0a0d0a0d
  405b34:	346d6173 	.word	0x346d6173
  405b38:	63323364 	.word	0x63323364
  405b3c:	756d6920 	.word	0x756d6920
  405b40:	6d656420 	.word	0x6d656420
  405b44:	2e2e2e6f 	.word	0x2e2e2e6f
  405b48:	00000a0d 	.word	0x00000a0d
  405b4c:	0000002e 	.word	0x0000002e
  405b50:	6c6c6f72 	.word	0x6c6c6f72
  405b54:	7469702f 	.word	0x7469702f
  405b58:	792f6863 	.word	0x792f6863
  405b5c:	203a7761 	.word	0x203a7761
  405b60:	25206625 	.word	0x25206625
  405b64:	66252066 	.word	0x66252066
  405b68:	00000a0d 	.word	0x00000a0d
  405b6c:	74697277 	.word	0x74697277
  405b70:	65725f65 	.word	0x65725f65
  405b74:	74736967 	.word	0x74736967
  405b78:	203a7265 	.word	0x203a7265
  405b7c:	63637573 	.word	0x63637573
  405b80:	0d737365 	.word	0x0d737365
  405b84:	0000000a 	.word	0x0000000a
  405b88:	5f697774 	.word	0x5f697774
  405b8c:	7473616d 	.word	0x7473616d
  405b90:	695f7265 	.word	0x695f7265
  405b94:	3a74696e 	.word	0x3a74696e
  405b98:	69616620 	.word	0x69616620
  405b9c:	0d64656c 	.word	0x0d64656c
  405ba0:	0000000a 	.word	0x0000000a
  405ba4:	5f697774 	.word	0x5f697774
  405ba8:	7473616d 	.word	0x7473616d
  405bac:	695f7265 	.word	0x695f7265
  405bb0:	3a74696e 	.word	0x3a74696e
  405bb4:	63757320 	.word	0x63757320
  405bb8:	73736563 	.word	0x73736563
  405bbc:	00000a0d 	.word	0x00000a0d
  405bc0:	5f697774 	.word	0x5f697774
  405bc4:	626f7270 	.word	0x626f7270
  405bc8:	66203a65 	.word	0x66203a65
  405bcc:	656c6961 	.word	0x656c6961
  405bd0:	000a0d64 	.word	0x000a0d64
  405bd4:	5f697774 	.word	0x5f697774
  405bd8:	626f7270 	.word	0x626f7270
  405bdc:	73203a65 	.word	0x73203a65
  405be0:	65636375 	.word	0x65636375
  405be4:	0a0d7373 	.word	0x0a0d7373
  405be8:	00000000 	.word	0x00000000
  405bec:	62616e45 	.word	0x62616e45
  405bf0:	0064656c 	.word	0x0064656c
  405bf4:	61736944 	.word	0x61736944
  405bf8:	64656c62 	.word	0x64656c62
  405bfc:	00000000 	.word	0x00000000
  405c00:	69766544 	.word	0x69766544
  405c04:	203a6563 	.word	0x203a6563
  405c08:	31257830 	.word	0x31257830
  405c0c:	000a0d78 	.word	0x000a0d78
  405c10:	65656c53 	.word	0x65656c53
  405c14:	6f4d2070 	.word	0x6f4d2070
  405c18:	203a6564 	.word	0x203a6564
  405c1c:	0a0d7325 	.word	0x0a0d7325
  405c20:	00000000 	.word	0x00000000
  405c24:	636f6c43 	.word	0x636f6c43
  405c28:	6f53206b 	.word	0x6f53206b
  405c2c:	65637275 	.word	0x65637275
  405c30:	0000203a 	.word	0x0000203a
  405c34:	65746e49 	.word	0x65746e49
  405c38:	6c616e72 	.word	0x6c616e72
  405c3c:	484d3820 	.word	0x484d3820
  405c40:	736f207a 	.word	0x736f207a
  405c44:	6c6c6963 	.word	0x6c6c6963
  405c48:	726f7461 	.word	0x726f7461
  405c4c:	00000a0d 	.word	0x00000a0d
  405c50:	204c4c50 	.word	0x204c4c50
  405c54:	68746977 	.word	0x68746977
  405c58:	61205820 	.word	0x61205820
  405c5c:	20736978 	.word	0x20736978
  405c60:	6f727967 	.word	0x6f727967
  405c64:	706f6373 	.word	0x706f6373
  405c68:	65722065 	.word	0x65722065
  405c6c:	65726566 	.word	0x65726566
  405c70:	0d65636e 	.word	0x0d65636e
  405c74:	0000000a 	.word	0x0000000a
  405c78:	6f727947 	.word	0x6f727947
  405c7c:	706f6373 	.word	0x706f6373
  405c80:	00203a65 	.word	0x00203a65
  405c84:	20303532 	.word	0x20303532
  405c88:	0d737064 	.word	0x0d737064
  405c8c:	0000000a 	.word	0x0000000a
  405c90:	20303035 	.word	0x20303035
  405c94:	0d737064 	.word	0x0d737064
  405c98:	0000000a 	.word	0x0000000a
  405c9c:	30303031 	.word	0x30303031
  405ca0:	73706420 	.word	0x73706420
  405ca4:	00000a0d 	.word	0x00000a0d
  405ca8:	30303032 	.word	0x30303032
  405cac:	73706420 	.word	0x73706420
  405cb0:	00000a0d 	.word	0x00000a0d
  405cb4:	5f657375 	.word	0x5f657375
  405cb8:	696c6163 	.word	0x696c6163
  405cbc:	74617262 	.word	0x74617262
  405cc0:	25203a65 	.word	0x25203a65
  405cc4:	000a0d64 	.word	0x000a0d64
  405cc8:	75746361 	.word	0x75746361
  405ccc:	745f6c61 	.word	0x745f6c61
  405cd0:	73657268 	.word	0x73657268
  405cd4:	646c6f68 	.word	0x646c6f68
  405cd8:	6625203a 	.word	0x6625203a
  405cdc:	00000a0d 	.word	0x00000a0d
  405ce0:	5f737064 	.word	0x5f737064
  405ce4:	5f726570 	.word	0x5f726570
  405ce8:	69676964 	.word	0x69676964
  405cec:	25203a74 	.word	0x25203a74
  405cf0:	000a0d66 	.word	0x000a0d66
  405cf4:	676e6172 	.word	0x676e6172
  405cf8:	65705f65 	.word	0x65705f65
  405cfc:	69645f72 	.word	0x69645f72
  405d00:	3a746967 	.word	0x3a746967
  405d04:	0d662520 	.word	0x0d662520
  405d08:	0000000a 	.word	0x0000000a
  405d0c:	74727173 	.word	0x74727173
	...

00405d18 <atanlo>:
  405d18:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  405d28:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00405d38 <atanhi>:
  405d38:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  405d48:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00405d58 <_global_impure_ptr>:
  405d58:	20000014 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  405d68:	006e616e 31300030 35343332 39383736     nan.0.0123456789
  405d78:	44434241 30004645 34333231 38373635     ABCDEF.012345678
  405d88:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
  405d98:	4e614e00 00000000                       .NaN....

00405da0 <__sf_fake_stdin>:
	...

00405dc0 <__sf_fake_stdout>:
	...

00405de0 <__sf_fake_stderr>:
	...

00405e00 <__mprec_tens>:
  405e00:	00000000 3ff00000 00000000 40240000     .......?......$@
  405e10:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  405e20:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  405e30:	00000000 412e8480 00000000 416312d0     .......A......cA
  405e40:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  405e50:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  405e60:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  405e70:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  405e80:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  405e90:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  405ea0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  405eb0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  405ec0:	79d99db4 44ea7843                       ...yCx.D

00405ec8 <__mprec_bigtens>:
  405ec8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  405ed8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  405ee8:	7f73bf3c 75154fdd                       <.s..O.u

00405ef0 <p05.6097>:
  405ef0:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
  405f00:	6c680020 6665004c 47464567 50004300      .hlL.efgEFG.C.P
  405f10:	5849534f 00002e00                                OSIX...

00405f17 <_ctype_>:
  405f17:	20202000 20202020 28282020 20282828     .         ((((( 
  405f27:	20202020 20202020 20202020 20202020                     
  405f37:	10108820 10101010 10101010 10101010      ...............
  405f47:	04040410 04040404 10040404 10101010     ................
  405f57:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405f67:	01010101 01010101 01010101 10101010     ................
  405f77:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405f87:	02020202 02020202 02020202 10101010     ................
  405f97:	00000020 00000000 00000000 00000000      ...............
	...

00406018 <_init>:
  406018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40601a:	bf00      	nop
  40601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40601e:	bc08      	pop	{r3}
  406020:	469e      	mov	lr, r3
  406022:	4770      	bx	lr

00406024 <__init_array_start>:
  406024:	004000f1 	.word	0x004000f1

00406028 <_fini>:
  406028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40602a:	bf00      	nop
  40602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40602e:	bc08      	pop	{r3}
  406030:	469e      	mov	lr, r3
  406032:	4770      	bx	lr
  406034:	0000      	movs	r0, r0
	...

00406038 <__portable_delay_cycles_veneer>:
  406038:	f85f f000 	ldr.w	pc, [pc]	; 40603c <__portable_delay_cycles_veneer+0x4>
  40603c:	20000001 	.word	0x20000001

00406040 <__fini_array_start>:
  406040:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <__fdlib_version>:
20000010:	0001 0000                                   ....

20000014 <impure_data>:
20000014:	0000 0000 5da0 0040 5dc0 0040 5de0 0040     .....]@..]@..]@.
	...

20000074 <_impure_ptr>:
20000074:	0014 2000                                   ... 

20000078 <__global_locale>:
20000078:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	4b21 0040 4ad5 0040 0000 0000 5f17 0040     !K@..J@......_@.
20000168:	5f15 0040 5f01 0040 5f01 0040 5f01 0040     ._@.._@.._@.._@.
20000178:	5f01 0040 5f01 0040 5f01 0040 5f01 0040     ._@.._@.._@.._@.
20000188:	5f01 0040 5f01 0040 ffff ffff ffff ffff     ._@.._@.........
20000198:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001c0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
